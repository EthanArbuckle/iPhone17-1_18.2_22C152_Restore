std::string *anonymous namespace'::NodePrinter::printChildren(std::string *this, swift::Demangle::__runtime::Node *a2, int a3, const char *a4)
{
  _anonymous_namespace_::NodePrinter *v5;
  int v6;
  swift::Demangle::__runtime::Node *v7;
  uint64_t v8;
  swift::Demangle::__runtime::Node *v9;
  unsigned int v10;
  swift::Demangle::__runtime::Node *v11;
  size_t v12;

  if (!a2) {
    return this;
  }
  v5 = (_anonymous_namespace_::NodePrinter *)this;
  v6 = *((unsigned __int8 *)a2 + 18);
  v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      v8 = *(void *)a2;
      v7 = *(swift::Demangle::__runtime::Node **)a2;
      goto LABEL_10;
    }
    v7 = 0;
  }
  switch(v6)
  {
    case 1:
      v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 8);
      if (v7 == (swift::Demangle::__runtime::Node *)((char *)a2 + 8)) {
        return this;
      }
      goto LABEL_17;
    case 2:
      v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 16);
      if (v7 == (swift::Demangle::__runtime::Node *)((char *)a2 + 16)) {
        return this;
      }
      goto LABEL_17;
    case 5:
      v8 = *(void *)a2;
LABEL_10:
      v9 = (swift::Demangle::__runtime::Node *)(v8 + 8 * *((unsigned int *)a2 + 2));
      if (v7 == v9) {
        return this;
      }
      goto LABEL_17;
  }
  v9 = 0;
  if (!v7) {
    return this;
  }
LABEL_17:
  v10 = a3 + 1;
  do
  {
    v11 = *(swift::Demangle::__runtime::Node **)v7;
    v7 = (swift::Demangle::__runtime::Node *)((char *)v7 + 8);
    if (a4)
    {
      if (v7 != v9)
      {
        v12 = strlen(a4);
        this = std::string::append((std::string *)v5, a4, v12);
      }
    }
  }
  while (v7 != v9);
  return this;
}

std::string *anonymous namespace'::operator<<(std::string *a1, uint64_t a2)
{
  std::string::push_back(a1, 34);
  int v4 = *(char *)(a2 + 23);
  if (v4 >= 0) {
    v5 = (std::string::value_type *)a2;
  }
  else {
    v5 = *(std::string::value_type **)a2;
  }
  if (v4 >= 0) {
    uint64_t v6 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    uint64_t v6 = *(void *)(a2 + 8);
  }
  if (v6)
  {
    while (2)
    {
      int v9 = *v5;
      switch(*v5)
      {
        case 0:
          v7 = a1;
          v8 = "\\0";
          goto LABEL_10;
        case 1:
        case 2:
        case 3:
        case 4:
        case 5:
        case 6:
        case 7:
        case 8:
        case 11:
        case 12:
        case 14:
        case 15:
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 21:
        case 22:
        case 23:
        case 24:
        case 25:
        case 26:
        case 27:
        case 28:
        case 29:
        case 30:
        case 31:
        case 32:
        case 33:
          goto LABEL_16;
        case 9:
          v7 = a1;
          v8 = "\\t";
          goto LABEL_10;
        case 10:
          v7 = a1;
          v8 = "\\n";
          goto LABEL_10;
        case 13:
          v7 = a1;
          v8 = "\\r";
          goto LABEL_10;
        case 34:
          v7 = a1;
          v8 = "\\\"";
          goto LABEL_10;
        default:
          if (v9 == 92)
          {
            v7 = a1;
            v8 = "\\\\"";
LABEL_10:
            std::string::append(v7, v8, 2uLL);
          }
          else
          {
LABEL_16:
            unint64_t v10 = *v5;
            if ((v9 - 127) > 0xA0u)
            {
              std::string::value_type v11 = *v5;
            }
            else
            {
              std::string::append(a1, "\\x", 2uLL);
            }
            std::string::push_back(a1, v11);
          }
          ++v5;
          if (--v6) {
            continue;
          }
          goto LABEL_23;
      }
    }
  }
LABEL_23:
  std::string::push_back(a1, 34);
  return a1;
}

void anonymous namespace'::NodePrinter::printFunctionType(std::string *this, swift::Demangle::__runtime::Node *a2, swift::Demangle::__runtime::Node *a3, int a4)
{
  v5 = a3;
  int v8 = *((unsigned __int8 *)a3 + 18);
  if (v8 != 2 && (v8 != 5 || *((_DWORD *)a3 + 2) <= 1u))
  {
    this[4].__r_.__value_.__s.__data_[1] = 0;
    return;
  }
  v56[0] = this;
  v56[1] = a3;
  int v57 = a4;
  unsigned int v9 = *((unsigned __int16 *)a3 + 8);
  if (v9 <= 0xA4)
  {
    if (v9 == 11)
    {
LABEL_9:
      std::string::append(this, "@autoclosure ", 0xDuLL);
      goto LABEL_18;
    }
    if (v9 != 22)
    {
      if (v9 != 64) {
        goto LABEL_18;
      }
      goto LABEL_9;
    }
    unint64_t v10 = "c";
    goto LABEL_17;
  }
  switch(v9)
  {
    case 0xA5u:
LABEL_16:
      unint64_t v10 = "block";
LABEL_17:
      break;
    case 0xA6u:
      std::string::append(this, "@escaping ", 0xAuLL);
      goto LABEL_16;
    case 0xDEu:
      std::string::append(this, "@convention(thin) ", 0x12uLL);
      break;
  }
LABEL_18:
  unint64_t v11 = *((unsigned __int8 *)v5 + 18);
  if (v11 == 5)
  {
    int v13 = *((_DWORD *)v5 + 2);
    unsigned int v55 = v13 - 2;
    if (v13)
    {
      v15 = (unsigned __int16 *)(**(void **)v5 + 16);
    }
    else
    {
      int v13 = 0;
      v15 = (unsigned __int16 *)&dword_10;
    }
    unsigned int v12 = *v15 == 23;
    v14 = *(swift::Demangle::__runtime::Node **)v5;
  }
  else
  {
    unsigned int v12 = *(unsigned __int16 *)(*(void *)v5 + 16) == 23;
    if (v11 == 2)
    {
      unsigned int v55 = 0;
      int v13 = 2;
    }
    else
    {
      unsigned int v55 = -1;
      int v13 = 1;
    }
    v14 = v5;
  }
  if (*(_WORD *)(*((void *)v14 + v12) + 16) == 129)
  {
    unsigned int v16 = v11 - 1;
    if (v11 != 1)
    {
      v17 = v5;
      if (v11 == 2)
      {
LABEL_35:
        v18 = (swift::Demangle::__runtime::Node *)*((void *)v17 + v12);
LABEL_37:
        if (v12) {
          unsigned int v12 = 2;
        }
        else {
          unsigned int v12 = 1;
        }
        LODWORD(v11) = *((unsigned __int8 *)v5 + 18);
        goto LABEL_41;
      }
      if (v11 != 5)
      {
LABEL_36:
        v18 = 0;
        goto LABEL_37;
      }
      unint64_t v11 = *((unsigned int *)v5 + 2);
    }
    if (v11 > v12)
    {
      v17 = v5;
      if (v16 >= 2) {
        v17 = *(swift::Demangle::__runtime::Node **)v5;
      }
      goto LABEL_35;
    }
    goto LABEL_36;
  }
LABEL_41:
  unint64_t v19 = v12;
  if ((v11 - 1) >= 2)
  {
    char v20 = 0;
    v21 = *(swift::Demangle::__runtime::Node **)v5;
  }
  else
  {
    char v20 = 1;
    v21 = v5;
  }
  if (*(_WORD *)(*((void *)v21 + v12) + 16) == 67)
  {
    if (v11 == 1)
    {
      if (!v12) {
        goto LABEL_53;
      }
    }
    else
    {
      if (v11 != 5)
      {
        if (v11 != 2 || v12 >= 2uLL) {
          goto LABEL_51;
        }
LABEL_53:
        v23 = v5;
        if ((v20 & 1) == 0) {
          v23 = *(swift::Demangle::__runtime::Node **)v5;
        }
        v22 = (swift::Demangle::__runtime::Node *)*((void *)v23 + v12);
        goto LABEL_56;
      }
      if (*((unsigned int *)v5 + 2) > (unint64_t)v12) {
        goto LABEL_53;
      }
    }
LABEL_51:
    v22 = 0;
LABEL_56:
    unint64_t v19 = v12 + 1;
    LODWORD(v11) = *((unsigned __int8 *)v5 + 18);
    ++v12;
  }
  if ((v11 - 1) >= 2)
  {
    char v24 = 0;
    v25 = *(swift::Demangle::__runtime::Node **)v5;
  }
  else
  {
    char v24 = 1;
    v25 = v5;
  }
  if (*(_WORD *)(*((void *)v25 + v19) + 16) != 68)
  {
    unsigned __int8 v28 = -100;
    v29 = v5;
    if (v24) {
      goto LABEL_67;
    }
    goto LABEL_66;
  }
  v26 = v5;
  if ((v24 & 1) == 0) {
    v26 = *(swift::Demangle::__runtime::Node **)v5;
  }
  char v27 = **((unsigned char **)v26 + v19);
  unint64_t v19 = v12 + 1;
  unsigned __int8 v28 = v27 - 100;
  ++v12;
  v29 = v5;
  if ((v24 & 1) == 0) {
LABEL_66:
  }
    v29 = *(swift::Demangle::__runtime::Node **)v5;
LABEL_67:
  if (*(_WORD *)(*((void *)v29 + v19) + 16) == 349)
  {
    if (v11 == 1)
    {
      if (!v19) {
        goto LABEL_76;
      }
    }
    else
    {
      if (v11 != 5)
      {
        if (v11 != 2 || v19 >= 2) {
          goto LABEL_74;
        }
LABEL_76:
        v31 = v5;
        if ((v24 & 1) == 0) {
          v31 = *(swift::Demangle::__runtime::Node **)v5;
        }
        v30 = (swift::Demangle::__runtime::Node *)*((void *)v31 + v19);
        goto LABEL_79;
      }
      if (*((unsigned int *)v5 + 2) > v19) {
        goto LABEL_76;
      }
    }
LABEL_74:
    v30 = 0;
LABEL_79:
    unint64_t v19 = v12 + 1;
    LODWORD(v11) = *((unsigned __int8 *)v5 + 18);
    ++v12;
  }
  if ((v11 - 1) >= 2)
  {
    char v32 = 0;
    v33 = *(swift::Demangle::__runtime::Node **)v5;
  }
  else
  {
    char v32 = 1;
    v33 = v5;
  }
  if (*(_WORD *)(*((void *)v33 + v19) + 16) == 272) {
    goto LABEL_87;
  }
  v34 = v5;
  if ((v32 & 1) == 0) {
    v34 = *(swift::Demangle::__runtime::Node **)v5;
  }
  if (*(_WORD *)(*((void *)v34 + v19) + 16) == 273)
  {
LABEL_87:
    if (v11 == 1)
    {
      if (!v19) {
        goto LABEL_97;
      }
    }
    else
    {
      if (v11 != 5)
      {
        if (v11 != 2 || v19 >= 2) {
          goto LABEL_95;
        }
LABEL_97:
        v37 = v5;
        if ((v32 & 1) == 0) {
          v37 = *(swift::Demangle::__runtime::Node **)v5;
        }
        v35 = (swift::Demangle::__runtime::Node *)*((void *)v37 + v19);
LABEL_100:
        unint64_t v19 = ++v12;
        v36 = v5;
        if (v32) {
          goto LABEL_102;
        }
        goto LABEL_101;
      }
      if (*((unsigned int *)v5 + 2) > v19) {
        goto LABEL_97;
      }
    }
LABEL_95:
    v35 = 0;
    goto LABEL_100;
  }
  v35 = 0;
  v36 = v5;
  if ((v32 & 1) == 0) {
LABEL_101:
  }
    v36 = *(swift::Demangle::__runtime::Node **)v5;
LABEL_102:
  int v38 = *(unsigned __int16 *)(*((void *)v36 + v19) + 16);
  if (v38 == 66) {
    uint64_t v39 = v12 + 1;
  }
  else {
    uint64_t v39 = v12;
  }
  v40 = v5;
  if ((v32 & 1) == 0) {
    v40 = *(swift::Demangle::__runtime::Node **)v5;
  }
  int v41 = *(unsigned __int16 *)(*((void *)v40 + v39) + 16);
  if (v41 == 271) {
    uint64_t v39 = (v39 + 1);
  }
  else {
    uint64_t v39 = v39;
  }
  v42 = v5;
  if ((v32 & 1) == 0) {
    v42 = *(swift::Demangle::__runtime::Node **)v5;
  }
  int v43 = *(unsigned __int16 *)(*((void *)v42 + v39) + 16);
  switch((v28 >> 1) | (v28 << 7))
  {
    case 0:
      v44 = "@differentiable ";
      v45 = this;
      std::string::size_type v46 = 16;
      goto LABEL_118;
    case 1:
      v44 = "@differentiable(_forward) ";
      v45 = this;
      std::string::size_type v46 = 26;
      goto LABEL_118;
    case 4:
      v44 = "@differentiable(_linear) ";
      goto LABEL_117;
    case 7:
      v44 = "@differentiable(reverse) ";
LABEL_117:
      v45 = this;
      std::string::size_type v46 = 25;
LABEL_118:
      std::string::append(v45, v44, v46);
      break;
    default:
      break;
  }
  if (v38 == 66) {
    std::string::append(this, "@Sendable ", 0xAuLL);
  }
  unint64_t v47 = *((unsigned __int8 *)v5 + 18);
  unsigned int v48 = v47 - 1;
  if (v47 != 1)
  {
    if (v47 == 5)
    {
      unint64_t v47 = *((unsigned int *)v5 + 2);
    }
    else
    {
      if (v47 != 2)
      {
LABEL_130:
        v50 = 0;
        goto LABEL_131;
      }
      unint64_t v47 = 2;
    }
  }
  if (v47 <= v55) {
    goto LABEL_130;
  }
  v49 = v5;
  if (v48 >= 2) {
    v49 = *(swift::Demangle::__runtime::Node **)v5;
  }
  v50 = (swift::Demangle::__runtime::Node *)*((void *)v49 + v55);
LABEL_131:
  if (!this[1].__r_.__value_.__s.__data_[15]) {
    return;
  }
  if (v41 == 271) {
    std::string::append(this, " async", 6uLL);
  }
  if (v35) {
  std::string::append(this, " -> ", 4uLL);
  }
  if (v43 == 130) {
    std::string::append(this, "sending ", 8uLL);
  }
  unint64_t v51 = *((unsigned __int8 *)v5 + 18);
  unsigned int v52 = v51 - 1;
  if (v51 != 1)
  {
    if (v51 == 5)
    {
      unint64_t v51 = *((unsigned int *)v5 + 2);
    }
    else
    {
      if (v51 != 2) {
        goto LABEL_147;
      }
      unint64_t v51 = 2;
    }
  }
  unint64_t v53 = (v13 - 1);
  if (v51 > v53)
  {
    if (v52 >= 2) {
      v5 = *(swift::Demangle::__runtime::Node **)v5;
    }
    v54 = (swift::Demangle::__runtime::Node *)*((void *)v5 + v53);
    goto LABEL_148;
  }
LABEL_147:
  v54 = 0;
LABEL_148:
}

void anonymous namespace'::NodePrinter::printFunctionParameters(std::string *this, swift::Demangle::__runtime::Node *a2, swift::Demangle::__runtime::Node *a3, int a4, int a5)
{
  char v27 = a2;
  int v26 = a4;
  unsigned __int8 v25 = a5;
  if (*((_WORD *)a3 + 8) != 3)
  {
    this[4].__r_.__value_.__s.__data_[1] = 0;
    return;
  }
  int v7 = *((unsigned __int8 *)a3 + 18);
  if ((v7 - 1) < 2) {
    goto LABEL_6;
  }
  if (v7 == 5 && *((_DWORD *)a3 + 2))
  {
    a3 = *(swift::Demangle::__runtime::Node **)a3;
LABEL_6:
    int v8 = *(uint64_t **)a3;
    goto LABEL_9;
  }
  int v8 = 0;
LABEL_9:
  int v9 = *((unsigned __int8 *)v8 + 18);
  if ((v9 - 1) < 2)
  {
LABEL_13:
    unint64_t v10 = (uint64_t *)*v8;
    goto LABEL_15;
  }
  if (v9 == 5 && *((_DWORD *)v8 + 2))
  {
    int v8 = (uint64_t *)*v8;
    goto LABEL_13;
  }
  unint64_t v10 = 0;
LABEL_15:
  unint64_t v11 = (swift::Demangle::__runtime::Node **)(v10 + 2);
  if (*((_WORD *)v10 + 8) == 223)
  {
    char v24 = &v27;
    int v23 = 0;
    if (!a2) {
      goto LABEL_28;
    }
    int v12 = *((unsigned __int8 *)a2 + 18);
    if ((v12 - 1) < 2)
    {
      BOOL v13 = 1;
      goto LABEL_29;
    }
    if (v12 == 5) {
      BOOL v13 = *((_DWORD *)a2 + 2) != 0;
    }
    else {
LABEL_28:
    }
      BOOL v13 = 0;
LABEL_29:
    BOOL v22 = v13;
    std::string::push_back(this, 40);
    int v14 = *((unsigned __int8 *)v10 + 18);
    v15 = (swift::Demangle::__runtime::Node **)v10;
    if ((v14 - 1) >= 2)
    {
      if (v14 == 5)
      {
        unsigned int v16 = (swift::Demangle::__runtime::Node *)*v10;
        v15 = (swift::Demangle::__runtime::Node **)*v10;
LABEL_37:
        unint64_t v11 = (swift::Demangle::__runtime::Node **)((char *)v16 + 8 * *((unsigned int *)v10 + 2));
        goto LABEL_40;
      }
      v15 = 0;
    }
    switch(v14)
    {
      case 1:
        unint64_t v11 = (swift::Demangle::__runtime::Node **)(v10 + 1);
        break;
      case 2:
        break;
      case 5:
        unsigned int v16 = (swift::Demangle::__runtime::Node *)*v10;
        goto LABEL_37;
      default:
        unint64_t v11 = 0;
        break;
    }
LABEL_40:
    v21[0] = &v22;
    v21[1] = this;
    v21[2] = &v24;
    v21[3] = &v23;
    v21[4] = &v25;
    v21[5] = &v26;
    if (v15 != v11)
    {
      v18 = *v15;
      v17 = v15 + 1;
      while (v17 != v11)
      {
        if (v25) {
          unint64_t v19 = ", ";
        }
        else {
          unint64_t v19 = (const std::string::value_type *)&unk_BFEA3;
        }
        std::string::append(this, v19, 2 * v25);
        char v20 = *v17++;
      }
    }
    std::string::push_back(this, 41);
    return;
  }
  if (a5)
  {
    std::string::push_back(this, 40);
    std::string::push_back(this, 41);
  }
  else
  {
    std::string::append(this, "(_:)", 4uLL);
  }
}

uint64_t anonymous namespace'::NodePrinter::getChildIf(uint64_t *a1, int a2)
{
  int v2 = *((unsigned __int8 *)a1 + 18);
  v3 = a1;
  if ((v2 - 1) >= 2)
  {
    if (v2 == 5)
    {
      uint64_t v4 = *a1;
      v3 = (uint64_t *)*a1;
      goto LABEL_9;
    }
    v3 = 0;
  }
  switch(v2)
  {
    case 1:
      v5 = a1 + 1;
      if (v3 != a1 + 1) {
        goto LABEL_16;
      }
      break;
    case 2:
      v5 = a1 + 2;
      if (v3 != a1 + 2) {
        goto LABEL_16;
      }
      break;
    case 5:
      uint64_t v4 = *a1;
LABEL_9:
      v5 = (uint64_t *)(v4 + 8 * *((unsigned int *)a1 + 2));
      if (v3 != v5) {
        goto LABEL_16;
      }
      break;
    default:
      v5 = 0;
      if (v3)
      {
LABEL_16:
        while (*(unsigned __int16 *)(*v3 + 16) != a2)
        {
          if (++v3 == v5)
          {
            v3 = v5;
            goto LABEL_19;
          }
        }
      }
      break;
  }
LABEL_19:
  if (v2 == 5)
  {
    if (v3 != (uint64_t *)(*a1 + 8 * *((unsigned int *)a1 + 2))) {
      return *v3;
    }
  }
  else
  {
    uint64_t v6 = a1 + 1;
    if (v2 != 1) {
      uint64_t v6 = 0;
    }
    if (v2 == 2) {
      int v7 = a1 + 2;
    }
    else {
      int v7 = v6;
    }
    if (v3 != v7) {
      return *v3;
    }
  }
  return 0;
}

void printer_unreachable(const char *a1)
{
}

std::string *anonymous namespace'::NodePrinter::printSpecializationPrefix(std::string *result, uint64_t *a2, const std::string::value_type *a3, std::string::size_type a4, int a5, const std::string::value_type *a6, std::string::size_type a7)
{
  int v7 = result;
  if (result[1].__r_.__value_.__s.__data_[5])
  {
    std::string::append(result, a3, a4);
    std::string::append(v7, " <", 2uLL);
    int v11 = *((unsigned __int8 *)a2 + 18);
    int v12 = a2;
    if ((v11 - 1) >= 2)
    {
      if (v11 == 5)
      {
        BOOL v13 = (uint64_t *)*a2;
        int v12 = (uint64_t *)*a2;
LABEL_12:
        int v14 = &v13[*((unsigned int *)a2 + 2)];
        if (v12 == v14) {
          return std::string::append(v7, "> of ", 5uLL);
        }
        goto LABEL_19;
      }
      int v12 = 0;
    }
    switch(v11)
    {
      case 1:
        int v14 = a2 + 1;
        if (v12 == a2 + 1) {
          return std::string::append(v7, "> of ", 5uLL);
        }
        break;
      case 2:
        int v14 = a2 + 2;
        if (v12 == a2 + 2) {
          return std::string::append(v7, "> of ", 5uLL);
        }
        break;
      case 5:
        BOOL v13 = (uint64_t *)*a2;
        goto LABEL_12;
      default:
        int v14 = 0;
        if (!v12) {
          return std::string::append(v7, "> of ", 5uLL);
        }
        break;
    }
LABEL_19:
    int v15 = 0;
    unsigned int v16 = a5 + 1;
    v17 = (const char *)&unk_BFEA3;
    while (1)
    {
      uint64_t v20 = *v12;
      int v21 = *(unsigned __int16 *)(*v12 + 16);
      if (v21 == 216 || v21 == 339) {
        goto LABEL_24;
      }
      if (v21 == 217)
      {
        if (v17) {
          size_t v22 = strlen(v17);
        }
        else {
          size_t v22 = 0;
        }
        std::string::append(v7, v17, v22);
        v17 = ", ";
        goto LABEL_24;
      }
      int v23 = *(unsigned __int8 *)(v20 + 18);
      if ((v23 - 1) < 2 || v23 == 5 && *(_DWORD *)(v20 + 8)) {
        break;
      }
LABEL_23:
      ++v15;
LABEL_24:
      if (++v12 == v14) {
        return std::string::append(v7, "> of ", 5uLL);
      }
    }
    if (v17) {
      size_t v24 = strlen(v17);
    }
    else {
      size_t v24 = 0;
    }
    std::string::append(v7, v17, v24);
    std::string::append(v7, a6, a7);
    int v25 = *(unsigned __int16 *)(v20 + 16);
    int v26 = v7;
    if (v25 == 79)
    {
      v18 = "Return = ";
      std::string::size_type v19 = 9;
    }
    else
    {
      if (v25 != 78)
      {
        goto LABEL_22;
      }
      std::string::append(v7, "Arg[", 4uLL);
      snprintf(__str, 0x20uLL, "%lld", v15);
      std::string::append(v7, __str);
      int v26 = v7;
      v18 = "] = ";
      std::string::size_type v19 = 4;
    }
    std::string::append(v26, v18, v19);
LABEL_22:
    v17 = ", ";
    goto LABEL_23;
  }
  if (!result[4].__r_.__value_.__s.__data_[0])
  {
    result = std::string::append(result, "specialized ", 0xCuLL);
    v7[4].__r_.__value_.__s.__data_[0] = 1;
  }
  return result;
}

std::string *swift::Demangle::__runtime::DemanglerPrinter::operator<<(std::string *a1, unsigned int a2)
{
  snprintf(__str, 0x20uLL, "%llu", a2);
  std::string::append(a1, __str);
  return a1;
}

std::string *anonymous namespace'::NodePrinter::printBoundGeneric(std::string *this, swift::Demangle::__runtime::Node *a2, int a3)
{
  uint64_t v4 = a2;
  v5 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 2)
  {
    if (v6 != 5) {
      return this;
    }
    unsigned int v7 = *((_DWORD *)a2 + 2);
    if (v7 < 2) {
      return this;
    }
    if (v7 != 2) {
      goto LABEL_114;
    }
  }
  if (!this[1].__r_.__value_.__s.__data_[0]) {
    goto LABEL_114;
  }
  int v8 = *((unsigned __int16 *)a2 + 8);
  if (v8 == 13) {
    goto LABEL_114;
  }
  if (v8 == 16)
  {
    int v9 = a2;
    if (v6 != 2)
    {
      if (*((_DWORD *)a2 + 2) < 2u) {
        goto LABEL_122;
      }
      int v9 = *(swift::Demangle::__runtime::Node **)a2;
    }
    uint64_t v10 = *((void *)v9 + 1);
    if (!v10)
    {
LABEL_122:
      std::string::append(v5, " as ", 4uLL);
      int v52 = *((unsigned __int8 *)v4 + 18);
      if ((v52 - 1) >= 2)
      {
        if (v52 != 5 || !*((_DWORD *)v4 + 2))
        {
          unint64_t v53 = 0;
          goto LABEL_128;
        }
        uint64_t v4 = *(swift::Demangle::__runtime::Node **)v4;
      }
      unint64_t v53 = *(swift::Demangle::__runtime::Node **)v4;
LABEL_128:
    }
    int v11 = *(unsigned __int8 *)(v10 + 18);
    int v12 = (swift::Demangle::__runtime::Node **)v10;
    if ((v11 - 1) >= 2)
    {
      if (v11 == 5)
      {
        BOOL v13 = *(swift::Demangle::__runtime::Node **)v10;
        int v12 = *(swift::Demangle::__runtime::Node ***)v10;
LABEL_63:
        unsigned __int8 v28 = (swift::Demangle::__runtime::Node **)((char *)v13 + 8 * *(unsigned int *)(v10 + 8));
        goto LABEL_120;
      }
      int v12 = 0;
    }
    switch(v11)
    {
      case 1:
        unsigned __int8 v28 = (swift::Demangle::__runtime::Node **)(v10 + 8);
        break;
      case 2:
        unsigned __int8 v28 = (swift::Demangle::__runtime::Node **)(v10 + 16);
        break;
      case 5:
        BOOL v13 = *(swift::Demangle::__runtime::Node **)v10;
        goto LABEL_63;
      default:
        unsigned __int8 v28 = 0;
        break;
    }
LABEL_120:
    while (v12 != v28)
    {
      unint64_t v51 = *v12++;
    }
    goto LABEL_122;
  }
  int v14 = *((unsigned __int8 *)a2 + 18);
  for (i = a2; ; int v14 = *((unsigned __int8 *)i + 18))
  {
    if (v14 != 1)
    {
      if (v14 != 5)
      {
        if (v14 != 2) {
          goto LABEL_114;
        }
        goto LABEL_30;
      }
      int v16 = *((_DWORD *)i + 2);
      if (v16 != 1) {
        break;
      }
    }
    if (*((_WORD *)i + 8) != 232)
    {
      if (v14 != 5) {
        goto LABEL_114;
      }
      int v16 = *((_DWORD *)i + 2);
      break;
    }
    if ((v14 - 1) >= 2) {
      i = *(swift::Demangle::__runtime::Node **)i;
    }
    i = *(swift::Demangle::__runtime::Node **)i;
  }
  if (v16 != 2) {
    goto LABEL_114;
  }
  int v14 = 5;
LABEL_30:
  int v17 = *((unsigned __int16 *)i + 8);
  if ((v17 & 0xFFFE) != 0xE) {
    goto LABEL_114;
  }
  v18 = i;
  if (v14 == 2) {
    goto LABEL_34;
  }
  if (*((_DWORD *)i + 2))
  {
    v18 = *(swift::Demangle::__runtime::Node **)i;
LABEL_34:
    std::string::size_type v19 = *(uint64_t **)v18;
    goto LABEL_36;
  }
  std::string::size_type v19 = 0;
LABEL_36:
  int v20 = *((unsigned __int8 *)v19 + 18);
  if ((v20 - 1) < 2)
  {
LABEL_40:
    int v21 = (uint64_t *)*v19;
    goto LABEL_42;
  }
  if (v20 == 5 && *((_DWORD *)v19 + 2))
  {
    std::string::size_type v19 = (uint64_t *)*v19;
    goto LABEL_40;
  }
  int v21 = 0;
LABEL_42:
  if (v14 == 2)
  {
LABEL_45:
    uint64_t v22 = *((void *)i + 1);
    goto LABEL_47;
  }
  if (*((_DWORD *)i + 2) >= 2u)
  {
    i = *(swift::Demangle::__runtime::Node **)i;
    goto LABEL_45;
  }
  uint64_t v22 = 0;
LABEL_47:
  int v23 = *((unsigned __int8 *)v21 + 18);
  if (v17 != 14)
  {
    int v26 = v21;
    if (v23 != 2)
    {
      if (v23 != 5 || *((_DWORD *)v21 + 2) < 2u)
      {
        char v27 = 0;
LABEL_74:
        if (*((_WORD *)v27 + 8) != 101
          || v27[1] != 5
          || ((v31 = (int *)*v27, int v32 = *v31, v33 = *((unsigned __int8 *)v31 + 4), v32 == 1634890305)
            ? (BOOL v34 = v33 == 121)
            : (BOOL v34 = 0),
              !v34 || (int v57 = *(unsigned __int8 *)(v22 + 18), v57 != 1) && (v57 != 5 || *(_DWORD *)(v22 + 8) != 1)))
        {
LABEL_80:
          v35 = v21;
          if (v23 != 2)
          {
            if (v23 != 5 || *((_DWORD *)v21 + 2) < 2u)
            {
              v36 = 0;
LABEL_108:
              if (*((_WORD *)v36 + 8) != 101 || v36[1] != (uint64_t *)((char *)&dword_8 + 2)) {
                goto LABEL_114;
              }
              unint64_t v47 = *v36;
              uint64_t v48 = *v47;
              int v49 = *((unsigned __int16 *)v47 + 4);
              if (v48 != 0x616E6F6974636944 || v49 != 31090) {
                goto LABEL_114;
              }
              int v60 = *(unsigned __int8 *)(v22 + 18);
              if (v60 != 2 && (v60 != 5 || *(_DWORD *)(v22 + 8) != 2)) {
                goto LABEL_114;
              }
              if ((v23 - 1) >= 2)
              {
                if (v23 != 5 || !*((_DWORD *)v21 + 2))
                {
                  v61 = 0;
LABEL_190:
                  if (*((_WORD *)v61 + 8) != 153 || v61[1] != 5) {
                    goto LABEL_114;
                  }
                  v77 = (int *)*v61;
                  int v78 = *v77;
                  int v79 = *((unsigned __int8 *)v77 + 4);
                  if (v78 != 1718187859 || v79 != 116) {
                    goto LABEL_114;
                  }
                  v81 = a2;
                  if (v6 != 2)
                  {
                    if (*((_DWORD *)a2 + 2) < 2u)
                    {
                      v82 = 0;
LABEL_216:
                      int v89 = *((unsigned __int8 *)v82 + 18);
                      if ((v89 - 1) >= 2)
                      {
                        if (v89 != 5 || !*((_DWORD *)v82 + 2))
                        {
                          v90 = 0;
LABEL_224:
                          if (v6 != 2)
                          {
                            if (*((_DWORD *)a2 + 2) < 2u)
                            {
                              v94 = 0;
LABEL_229:
                              int v95 = *((unsigned __int8 *)v94 + 18);
                              if (v95 != 2)
                              {
                                if (v95 != 5 || *((_DWORD *)v94 + 2) < 2u)
                                {
                                  v96 = 0;
                                  goto LABEL_235;
                                }
                                v94 = (uint64_t *)*v94;
                              }
                              v96 = (swift::Demangle::__runtime::Node *)v94[1];
LABEL_235:
                              std::string::append(this, "[", 1uLL);
                              unsigned int v97 = a3 + 1;
                              std::string::append(v5, " : ", 3uLL);
                              v92 = (_anonymous_namespace_::NodePrinter *)v5;
                              v93 = v96;
                              unsigned int v91 = v97;
                              goto LABEL_236;
                            }
                            uint64_t v4 = *(swift::Demangle::__runtime::Node **)a2;
                          }
                          v94 = (uint64_t *)*((void *)v4 + 1);
                          goto LABEL_229;
                        }
                        v82 = *(swift::Demangle::__runtime::Node **)v82;
                      }
                      v90 = *(swift::Demangle::__runtime::Node **)v82;
                      goto LABEL_224;
                    }
                    v81 = *(swift::Demangle::__runtime::Node **)a2;
                  }
                  v82 = (swift::Demangle::__runtime::Node *)*((void *)v81 + 1);
                  goto LABEL_216;
                }
                int v21 = (uint64_t *)*v21;
              }
              v61 = (uint64_t *)*v21;
              goto LABEL_190;
            }
            v35 = (uint64_t *)*v21;
          }
          v36 = (uint64_t **)v35[1];
          goto LABEL_108;
        }
        v58 = (uint64_t **)v21;
        if ((v23 - 1) >= 2)
        {
          if (v23 != 5 || !*((_DWORD *)v21 + 2))
          {
            v59 = 0;
LABEL_165:
            if (*((_WORD *)v59 + 8) != 153 || v59[1] != 5) {
              goto LABEL_80;
            }
            v67 = (int *)*v59;
            int v68 = *v67;
            int v69 = *((unsigned __int8 *)v67 + 4);
            if (v68 != 1718187859 || v69 != 116) {
              goto LABEL_80;
            }
            if (v6 != 2)
            {
              if (*((_DWORD *)a2 + 2) < 2u)
              {
                v71 = 0;
LABEL_210:
                int v87 = *((unsigned __int8 *)v71 + 18);
                if ((v87 - 1) >= 2)
                {
                  if (v87 != 5 || !*((_DWORD *)v71 + 2))
                  {
                    v88 = 0;
                    goto LABEL_222;
                  }
                  v71 = *(swift::Demangle::__runtime::Node **)v71;
                }
                v88 = *(swift::Demangle::__runtime::Node **)v71;
LABEL_222:
                std::string::append(this, "[", 1uLL);
                unsigned int v91 = a3 + 1;
                v92 = (_anonymous_namespace_::NodePrinter *)v5;
                v93 = v88;
LABEL_236:
                v86 = "]";
                v85 = v5;
                goto LABEL_237;
              }
              uint64_t v4 = *(swift::Demangle::__runtime::Node **)a2;
            }
            v71 = (swift::Demangle::__runtime::Node *)*((void *)v4 + 1);
            goto LABEL_210;
          }
          v58 = (uint64_t **)*v21;
        }
        v59 = *v58;
        goto LABEL_165;
      }
      int v26 = (uint64_t *)*v21;
    }
    char v27 = (uint64_t *)v26[1];
    goto LABEL_74;
  }
  size_t v24 = v21;
  if (v23 != 2)
  {
    if (v23 != 5 || *((_DWORD *)v21 + 2) < 2u)
    {
      uint64_t v25 = 0;
      goto LABEL_65;
    }
    size_t v24 = (uint64_t *)*v21;
  }
  uint64_t v25 = v24[1];
LABEL_65:
  if (*(_WORD *)(v25 + 16) != 101) {
    goto LABEL_68;
  }
  if (*(void *)(v25 + 8) != 8) {
    goto LABEL_68;
  }
  if (**(void **)v25 != 0x6C616E6F6974704FLL) {
    goto LABEL_68;
  }
  int v54 = *(unsigned __int8 *)(v22 + 18);
  if (v54 != 1 && (v54 != 5 || *(_DWORD *)(v22 + 8) != 1)) {
    goto LABEL_68;
  }
  unsigned int v55 = (int ***)v21;
  if ((v23 - 1) < 2) {
    goto LABEL_138;
  }
  if (v23 == 5 && *((_DWORD *)v21 + 2))
  {
    unsigned int v55 = (int ***)*v21;
LABEL_138:
    v56 = *v55;
    goto LABEL_156;
  }
  v56 = 0;
LABEL_156:
  if (*((_WORD *)v56 + 8) == 153 && v56[1] == (int *)((char *)&dword_4 + 1))
  {
    v62 = *v56;
    int v63 = *v62;
    int v64 = *((unsigned __int8 *)v62 + 4);
    if (v63 == 1718187859 && v64 == 116)
    {
      v66 = "?";
      goto LABEL_185;
    }
  }
LABEL_68:
  v29 = v21;
  if (v23 == 2)
  {
LABEL_72:
    uint64_t v30 = v29[1];
    goto LABEL_86;
  }
  if (v23 == 5 && *((_DWORD *)v21 + 2) >= 2u)
  {
    v29 = (uint64_t *)*v21;
    goto LABEL_72;
  }
  uint64_t v30 = 0;
LABEL_86:
  if (*(_WORD *)(v30 + 16) != 101 || *(void *)(v30 + 8) != 27) {
    goto LABEL_114;
  }
  v37 = *(uint64_t **)v30;
  uint64_t v38 = *v37;
  uint64_t v39 = v37[1];
  uint64_t v40 = v37[2];
  uint64_t v41 = *(uint64_t *)((char *)v37 + 19);
  BOOL v42 = v38 == 0x746963696C706D49 && v39 == 0x706172776E55796CLL;
  BOOL v43 = v42 && v40 == 0x6F6974704F646570;
  if (!v43 || v41 != 0x6C616E6F6974704FLL) {
    goto LABEL_114;
  }
  int v45 = *(unsigned __int8 *)(v22 + 18);
  if (v45 != 1 && (v45 != 5 || *(_DWORD *)(v22 + 8) != 1)) {
    goto LABEL_114;
  }
  if ((v23 - 1) >= 2)
  {
    if (v23 != 5 || !*((_DWORD *)v21 + 2))
    {
      std::string::size_type v46 = 0;
      goto LABEL_177;
    }
    int v21 = (uint64_t *)*v21;
  }
  std::string::size_type v46 = (uint64_t *)*v21;
LABEL_177:
  if (*((_WORD *)v46 + 8) != 153
    || v46[1] != 5
    || ((v72 = (int *)*v46, int v73 = *v72, v74 = *((unsigned __int8 *)v72 + 4), v73 == 1718187859)
      ? (BOOL v75 = v74 == 116)
      : (BOOL v75 = 0),
        !v75))
  {
LABEL_114:
  }
  v66 = "!";
LABEL_185:
  if (v6 == 2)
  {
LABEL_188:
    v76 = (swift::Demangle::__runtime::Node *)*((void *)v4 + 1);
    goto LABEL_202;
  }
  if (*((_DWORD *)a2 + 2) >= 2u)
  {
    uint64_t v4 = *(swift::Demangle::__runtime::Node **)a2;
    goto LABEL_188;
  }
  v76 = 0;
LABEL_202:
  int v83 = *((unsigned __int8 *)v76 + 18);
  if ((v83 - 1) >= 2)
  {
    if (v83 != 5 || !*((_DWORD *)v76 + 2))
    {
      v84 = 0;
      goto LABEL_208;
    }
    v76 = *(swift::Demangle::__runtime::Node **)v76;
  }
  v84 = *(swift::Demangle::__runtime::Node **)v76;
LABEL_208:
  v85 = v5;
  v86 = v66;
LABEL_237:

  return std::string::append(v85, v86, 1uLL);
}

std::string *anonymous namespace'::NodePrinter::printWithParens(std::string *this, swift::Demangle::__runtime::Node *a2, int a3)
{
  int v6 = a2;
  while (2)
  {
    unsigned int v7 = v6;
    switch(*((_WORD *)v6 + 8))
    {
      case 0:
      case 1:
      case 2:
      case 3:
      case 6:
      case 7:
      case 8:
      case 9:
      case 0xA:
      case 0xB:
      case 0xC:
      case 0x16:
      case 0x17:
      case 0x19:
      case 0x1A:
      case 0x1B:
      case 0x1C:
      case 0x1D:
      case 0x1E:
      case 0x1F:
      case 0x20:
      case 0x21:
      case 0x22:
      case 0x23:
      case 0x24:
      case 0x25:
      case 0x27:
      case 0x28:
      case 0x29:
      case 0x2A:
      case 0x2B:
      case 0x2E:
      case 0x2F:
      case 0x30:
      case 0x31:
      case 0x32:
      case 0x33:
      case 0x34:
      case 0x35:
      case 0x36:
      case 0x37:
      case 0x38:
      case 0x3A:
      case 0x3B:
      case 0x3C:
      case 0x3E:
      case 0x40:
      case 0x41:
      case 0x42:
      case 0x43:
      case 0x44:
      case 0x46:
      case 0x47:
      case 0x48:
      case 0x49:
      case 0x4A:
      case 0x4B:
      case 0x4C:
      case 0x4D:
      case 0x4E:
      case 0x4F:
      case 0x50:
      case 0x51:
      case 0x52:
      case 0x53:
      case 0x56:
      case 0x57:
      case 0x58:
      case 0x59:
      case 0x5A:
      case 0x5B:
      case 0x5C:
      case 0x5D:
      case 0x5E:
      case 0x5F:
      case 0x60:
      case 0x61:
      case 0x62:
      case 0x63:
      case 0x64:
      case 0x65:
      case 0x66:
      case 0x67:
      case 0x68:
      case 0x69:
      case 0x6A:
      case 0x6B:
      case 0x6C:
      case 0x6D:
      case 0x6E:
      case 0x6F:
      case 0x70:
      case 0x71:
      case 0x72:
      case 0x73:
      case 0x74:
      case 0x75:
      case 0x76:
      case 0x77:
      case 0x78:
      case 0x79:
      case 0x7A:
      case 0x7B:
      case 0x7C:
      case 0x7D:
      case 0x7E:
      case 0x7F:
      case 0x80:
      case 0x81:
      case 0x82:
      case 0x83:
      case 0x84:
      case 0x85:
      case 0x86:
      case 0x87:
      case 0x88:
      case 0x89:
      case 0x8A:
      case 0x8B:
      case 0x8C:
      case 0x8D:
      case 0x8E:
      case 0x8F:
      case 0x90:
      case 0x93:
      case 0x94:
      case 0x95:
      case 0x96:
      case 0x97:
      case 0x98:
      case 0x9A:
      case 0x9B:
      case 0x9C:
      case 0x9D:
      case 0x9E:
      case 0x9F:
      case 0xA0:
      case 0xA1:
      case 0xA2:
      case 0xA3:
      case 0xA4:
      case 0xA5:
      case 0xA6:
      case 0xA8:
      case 0xA9:
      case 0xAA:
      case 0xAB:
      case 0xAC:
      case 0xAD:
      case 0xAE:
      case 0xAF:
      case 0xB0:
      case 0xB1:
      case 0xB2:
      case 0xB3:
      case 0xB6:
      case 0xB7:
      case 0xB8:
      case 0xB9:
      case 0xBA:
      case 0xBB:
      case 0xBC:
      case 0xBD:
      case 0xBF:
      case 0xC1:
      case 0xC2:
      case 0xC3:
      case 0xC4:
      case 0xC5:
      case 0xC6:
      case 0xC7:
      case 0xC8:
      case 0xC9:
      case 0xCA:
      case 0xCB:
      case 0xCC:
      case 0xCD:
      case 0xCE:
      case 0xD0:
      case 0xD1:
      case 0xD4:
      case 0xD5:
      case 0xD6:
      case 0xD7:
      case 0xD8:
      case 0xD9:
      case 0xDA:
      case 0xDC:
      case 0xDD:
      case 0xDE:
      case 0xE0:
      case 0xE5:
      case 0xE6:
      case 0xE7:
      case 0xEC:
      case 0xED:
      case 0xEE:
      case 0xEF:
      case 0xF0:
      case 0xF1:
      case 0xF2:
      case 0xF3:
      case 0xF4:
      case 0xF5:
      case 0xF6:
      case 0xF7:
      case 0xF8:
      case 0xF9:
      case 0xFA:
      case 0xFB:
      case 0xFC:
      case 0xFD:
      case 0xFE:
      case 0xFF:
      case 0x100:
      case 0x101:
      case 0x102:
      case 0x103:
      case 0x104:
      case 0x105:
      case 0x106:
      case 0x107:
      case 0x108:
      case 0x109:
      case 0x10A:
      case 0x10B:
      case 0x10C:
      case 0x10D:
      case 0x10E:
      case 0x10F:
      case 0x110:
      case 0x111:
      case 0x112:
      case 0x113:
      case 0x114:
      case 0x115:
      case 0x116:
      case 0x117:
      case 0x118:
      case 0x119:
      case 0x11A:
      case 0x11B:
      case 0x11C:
      case 0x11D:
      case 0x11E:
      case 0x11F:
      case 0x120:
      case 0x121:
      case 0x123:
      case 0x124:
      case 0x125:
      case 0x126:
      case 0x12B:
      case 0x12C:
      case 0x12D:
      case 0x12E:
      case 0x12F:
      case 0x130:
      case 0x131:
      case 0x132:
      case 0x133:
      case 0x134:
      case 0x135:
      case 0x136:
      case 0x137:
      case 0x138:
      case 0x139:
      case 0x13A:
      case 0x13B:
      case 0x13C:
      case 0x13D:
      case 0x13E:
      case 0x13F:
      case 0x140:
      case 0x141:
      case 0x142:
      case 0x143:
      case 0x144:
      case 0x145:
      case 0x146:
      case 0x147:
      case 0x148:
      case 0x149:
      case 0x14A:
      case 0x14B:
      case 0x14C:
      case 0x14D:
      case 0x14E:
      case 0x14F:
      case 0x150:
      case 0x151:
      case 0x152:
      case 0x153:
      case 0x154:
      case 0x155:
      case 0x156:
      case 0x157:
      case 0x158:
      case 0x159:
      case 0x15A:
      case 0x15B:
      case 0x15C:
      case 0x15D:
      case 0x15E:
      case 0x15F:
      case 0x160:
      case 0x161:
      case 0x162:
        goto LABEL_33;
      case 4:
      case 5:
      case 0xD:
      case 0xE:
      case 0xF:
      case 0x10:
      case 0x11:
      case 0x12:
      case 0x13:
      case 0x14:
      case 0x15:
      case 0x18:
      case 0x26:
      case 0x2C:
      case 0x2D:
      case 0x39:
      case 0x3D:
      case 0x3F:
      case 0x45:
      case 0x54:
      case 0x55:
      case 0x91:
      case 0x92:
      case 0x99:
      case 0xA7:
      case 0xB4:
      case 0xB5:
      case 0xCF:
      case 0xD2:
      case 0xD3:
      case 0xDB:
      case 0xDF:
      case 0xE1:
      case 0xE2:
      case 0xE3:
      case 0xE4:
      case 0xE9:
      case 0xEA:
      case 0xEB:
      case 0x122:
      case 0x127:
      case 0x128:
      case 0x129:
      case 0x12A:
        goto LABEL_36;
      case 0xBE:
        int v9 = *((unsigned __int8 *)v6 + 18);
        if ((v9 - 1) < 2) {
          goto LABEL_12;
        }
        if (v9 == 5 && *((_DWORD *)v7 + 2))
        {
          unsigned int v7 = *(swift::Demangle::__runtime::Node **)v7;
LABEL_12:
          uint64_t v10 = *(swift::Demangle::__runtime::Node **)v7;
        }
        else
        {
          uint64_t v10 = 0;
        }
        int v13 = *((unsigned __int8 *)v10 + 18);
        if (v13 == 2 || v13 == 5 && *((_DWORD *)v10 + 2) >= 2u) {
          goto LABEL_33;
        }
        goto LABEL_36;
      case 0xC0:
        int v11 = *((unsigned __int8 *)v6 + 18);
        if ((v11 - 1) < 2) {
          goto LABEL_17;
        }
        if (v11 == 5 && *((_DWORD *)v7 + 2))
        {
          unsigned int v7 = *(swift::Demangle::__runtime::Node **)v7;
LABEL_17:
          int v12 = *(swift::Demangle::__runtime::Node **)v7;
        }
        else
        {
          int v12 = 0;
        }
        int v14 = *((unsigned __int8 *)v12 + 18);
        if ((v14 - 1) < 2) {
          goto LABEL_28;
        }
        if (v14 == 5 && *((_DWORD *)v12 + 2))
        {
          int v12 = *(swift::Demangle::__runtime::Node **)v12;
LABEL_28:
          int v15 = *(swift::Demangle::__runtime::Node **)v12;
        }
        else
        {
          int v15 = 0;
        }
        int v16 = *((unsigned __int8 *)v15 + 18);
        if ((v16 - 1) < 2 || v16 == 5 && *((_DWORD *)v15 + 2))
        {
LABEL_33:
          std::string::append(this, "(", 1uLL);
          return std::string::append(this, ")", 1uLL);
        }
        else
        {
LABEL_36:
          unsigned int v18 = a3 + 1;
        }
      case 0xE8:
        int v8 = *((unsigned __int8 *)v6 + 18);
        if ((v8 - 1) < 2) {
          goto LABEL_7;
        }
        int v6 = 0;
        if (v8 == 5)
        {
          int v6 = 0;
          if (*((_DWORD *)v7 + 2))
          {
            unsigned int v7 = *(swift::Demangle::__runtime::Node **)v7;
LABEL_7:
            int v6 = *(swift::Demangle::__runtime::Node **)v7;
          }
        }
        continue;
      default:
        printer_unreachable("bad node kind");
    }
  }
}

swift::Demangle::__runtime::Node *anonymous namespace'::NodePrinter::printAbstractStorage(uint64_t a1, uint64_t a2, int a3, int a4, std::string::value_type *a5, size_t a6)
{
  int v6 = *(unsigned __int16 *)(a2 + 16);
  if (v6 == 220) {
  if (v6 != 254)
  }
    printer_unreachable("Not an abstract storage node");
}

void anonymous namespace'::NodePrinter::printImplFunctionType(_anonymous_namespace_::NodePrinter *this, swift::Demangle::__runtime::Node *a2, int a3)
{
  int v32 = a3;
  uint64_t v30 = 0;
  v31 = 0;
  int v29 = 0;
  v28[0] = &v29;
  v28[1] = (int *)&v31;
  v28[2] = (int *)this;
  v28[3] = &v32;
  v28[4] = (int *)&v30;
  int v4 = *((unsigned __int8 *)a2 + 18);
  v5 = a2;
  if ((v4 - 1) >= 2)
  {
    if (v4 == 5)
    {
      uint64_t v6 = *(void *)a2;
      v5 = *(swift::Demangle::__runtime::Node **)a2;
      goto LABEL_9;
    }
    v5 = 0;
  }
  if (v4 == 1)
  {
    unsigned int v7 = (swift::Demangle::__runtime::Node *)((char *)a2 + 8);
    if (v5 == (swift::Demangle::__runtime::Node *)((char *)a2 + 8)) {
      goto LABEL_29;
    }
    goto LABEL_14;
  }
  if (v4 == 2)
  {
    unsigned int v7 = (swift::Demangle::__runtime::Node *)((char *)a2 + 16);
    if (v5 != (swift::Demangle::__runtime::Node *)((char *)a2 + 16)) {
      goto LABEL_14;
    }
    goto LABEL_29;
  }
  if (v4 != 5)
  {
    unsigned int v7 = 0;
    if (v5) {
      goto LABEL_14;
    }
LABEL_29:
    int v9 = 0;
    goto LABEL_30;
  }
  uint64_t v6 = *(void *)a2;
LABEL_9:
  unsigned int v7 = (swift::Demangle::__runtime::Node *)(v6 + 8 * *((unsigned int *)a2 + 2));
  if (v5 == v7) {
    goto LABEL_29;
  }
LABEL_14:
  int v8 = 0;
  do
  {
    int v9 = *(swift::Demangle::__runtime::Node ***)v5;
    switch(*(_WORD *)(*(void *)v5 + 16))
    {
      case 'm':
        uint64_t v30 = *(swift::Demangle::__runtime::Node ***)v5;
        break;
      case 't':
        goto LABEL_17;
      case 'v':
        if (v29 == 1) {
          std::string::append((std::string *)this, ", ", 2uLL);
        }
        int v10 = 1;
        goto LABEL_26;
      case 'w':
        v31 = *(swift::Demangle::__runtime::Node ***)v5;
        break;
      case 'x':
      case 'y':
      case 'z':
        if (v29 == 2) {
          std::string::append((std::string *)this, ", ", 2uLL);
        }
        int v10 = 2;
LABEL_26:
        break;
      default:
        std::string::push_back((std::string *)this, 32);
        break;
    }
    int v9 = v8;
LABEL_17:
    v5 = (swift::Demangle::__runtime::Node *)((char *)v5 + 8);
    int v8 = v9;
  }
  while (v5 != v7);
LABEL_30:
  std::string::push_back((std::string *)this, 41);
  if (!v31) {
    goto LABEL_52;
  }
  std::string::append((std::string *)this, " for <", 6uLL);
  int v11 = v31;
  int v12 = *((unsigned __int8 *)v31 + 18);
  if (v12 != 2)
  {
    if (v12 != 5 || *((_DWORD *)v31 + 2) < 2u) {
      goto LABEL_51;
    }
    int v11 = *v31;
  }
  uint64_t v13 = v11[1];
  if (v13)
  {
    int v14 = *(unsigned __int8 *)(v13 + 18);
    int v15 = (swift::Demangle::__runtime::Node **)v13;
    if ((v14 - 1) >= 2)
    {
      if (v14 == 5)
      {
        int v16 = *(swift::Demangle::__runtime::Node **)v13;
        int v15 = *(swift::Demangle::__runtime::Node ***)v13;
LABEL_44:
        int v17 = (swift::Demangle::__runtime::Node **)((char *)v16 + 8 * *(unsigned int *)(v13 + 8));
        goto LABEL_48;
      }
      int v15 = 0;
    }
    switch(v14)
    {
      case 1:
        int v17 = (swift::Demangle::__runtime::Node **)(v13 + 8);
        break;
      case 2:
        int v17 = (swift::Demangle::__runtime::Node **)(v13 + 16);
        break;
      case 5:
        int v16 = *(swift::Demangle::__runtime::Node **)v13;
        goto LABEL_44;
      default:
        int v17 = 0;
        break;
    }
LABEL_48:
    if (v15 != v17)
    {
      unsigned int v18 = v32 + 1;
      do
      {
        std::string::size_type v19 = *v15++;
      }
      while (v15 != v17);
    }
  }
LABEL_51:
  std::string::push_back((std::string *)this, 62);
LABEL_52:
  if (!v9) {
    return;
  }
  std::string::append((std::string *)this, " for <", 6uLL);
  int v20 = *((unsigned __int8 *)v9 + 18);
  if ((v20 - 1) >= 2)
  {
    if (v20 != 5 || !*((_DWORD *)v9 + 2)) {
      goto LABEL_73;
    }
    int v9 = (swift::Demangle::__runtime::Node **)*v9;
  }
  int v21 = *v9;
  if (*v9)
  {
    int v22 = *((unsigned __int8 *)v21 + 18);
    int v23 = (swift::Demangle::__runtime::Node **)*v9;
    if ((v22 - 1) >= 2)
    {
      if (v22 == 5)
      {
        size_t v24 = *(swift::Demangle::__runtime::Node ***)v21;
        int v23 = *(swift::Demangle::__runtime::Node ***)v21;
LABEL_66:
        uint64_t v25 = &v24[*((unsigned int *)v21 + 2)];
        goto LABEL_70;
      }
      int v23 = 0;
    }
    switch(v22)
    {
      case 1:
        uint64_t v25 = (swift::Demangle::__runtime::Node **)((char *)v21 + 8);
        break;
      case 2:
        uint64_t v25 = (swift::Demangle::__runtime::Node **)((char *)v21 + 16);
        break;
      case 5:
        size_t v24 = *(swift::Demangle::__runtime::Node ***)v21;
        goto LABEL_66;
      default:
        uint64_t v25 = 0;
        break;
    }
LABEL_70:
    if (v23 != v25)
    {
      unsigned int v26 = v32 + 1;
      do
      {
        char v27 = *v23++;
      }
      while (v23 != v25);
    }
  }
LABEL_73:
  std::string::push_back((std::string *)this, 62);
}

void anonymous namespace'::NodePrinter::printGenericSignature(std::string *this, swift::Demangle::__runtime::Node *a2, int a3)
{
  std::string::push_back(this, 60);
  int v6 = *((unsigned __int8 *)a2 + 18);
  unsigned int v7 = v6 - 1;
  int v48 = a3;
  if (v6 == 1)
  {
    unsigned int v8 = 1;
    goto LABEL_7;
  }
  if (v6 != 5)
  {
    if (v6 != 2) {
      goto LABEL_106;
    }
    unsigned int v8 = 2;
LABEL_7:
    uint64_t v9 = 0;
    LODWORD(v10) = v8;
    while (1)
    {
      int v11 = a2;
      if (v7 >= 2) {
        int v11 = *(swift::Demangle::__runtime::Node **)a2;
      }
      if (*(_WORD *)(*((void *)v11 + v9) + 16) != 37) {
        goto LABEL_14;
      }
      if (v8 == ++v9)
      {
        unsigned int v49 = v8;
        LODWORD(v9) = v8;
        goto LABEL_35;
      }
    }
  }
  unsigned int v8 = *((_DWORD *)a2 + 2);
  if (v8) {
    goto LABEL_7;
  }
  LODWORD(v9) = 0;
LABEL_14:
  unsigned int v49 = v8;
  if (v9 >= v8)
  {
    LODWORD(v10) = v9;
    if (!v9) {
      goto LABEL_92;
    }
    goto LABEL_35;
  }
  unint64_t v10 = v9;
  do
  {
    unint64_t v12 = *((unsigned __int8 *)a2 + 18);
    if (v6 == 1) {
      goto LABEL_19;
    }
    if (v6 != 5)
    {
      unint64_t v12 = 2;
LABEL_19:
      if (v12 <= v10) {
        goto LABEL_24;
      }
      goto LABEL_20;
    }
    if (*((unsigned int *)a2 + 2) <= v10)
    {
LABEL_24:
      int v14 = 0;
      goto LABEL_25;
    }
LABEL_20:
    uint64_t v13 = a2;
    if (v7 >= 2) {
      uint64_t v13 = *(swift::Demangle::__runtime::Node **)a2;
    }
    int v14 = (uint64_t *)*((void *)v13 + v10);
LABEL_25:
    int v15 = *((unsigned __int16 *)v14 + 8);
    if (v15 == 232)
    {
      if (*((unsigned __int8 *)v14 + 18) - 1 >= 2) {
        int v14 = (uint64_t *)*v14;
      }
      int v15 = *(unsigned __int16 *)(*v14 + 16);
    }
    if (v15 != 42) {
      goto LABEL_32;
    }
    ++v10;
  }
  while (v8 != v10);
  LODWORD(v10) = v8;
LABEL_32:
  if (!v9)
  {
LABEL_92:
    if (v10 == v49) {
      goto LABEL_106;
    }
    if (!this[1].__r_.__value_.__s.__data_[7]) {
      goto LABEL_106;
    }
    std::string::append(this, " where ", 7uLL);
    if (v10 >= v49) {
      goto LABEL_106;
    }
    unint64_t v37 = *((unsigned __int8 *)a2 + 18);
    unsigned int v38 = v37 - 1;
    switch(v37)
    {
      case 1:
        goto LABEL_99;
      case 2:
        if (v10 < 2uLL) {
          goto LABEL_100;
        }
        break;
      case 5:
        unint64_t v37 = *((unsigned int *)a2 + 2);
LABEL_99:
        if (v37 > v10)
        {
LABEL_100:
          uint64_t v39 = a2;
          if (v38 >= 2) {
            uint64_t v39 = *(swift::Demangle::__runtime::Node **)a2;
          }
          uint64_t v40 = (swift::Demangle::__runtime::Node *)*((void *)v39 + v10);
LABEL_105:
          unint64_t v41 = v10 + 1;
          if (v49 == v10 + 1)
          {
LABEL_106:
            std::string::push_back(this, 62);
            return;
          }
          unsigned int v42 = ~v10 + v49;
          while (2)
          {
            if (v41 > v10) {
              std::string::append(this, ", ", 2uLL);
            }
            unint64_t v44 = *((unsigned __int8 *)a2 + 18);
            if (v44 == 2)
            {
              if (v44 <= v41) {
                goto LABEL_108;
              }
            }
            else if (v44 != 5 || *((unsigned int *)a2 + 2) <= v41)
            {
LABEL_108:
              BOOL v43 = 0;
              goto LABEL_109;
            }
            unsigned int v45 = v44 - 1;
            std::string::size_type v46 = a2;
            if (v45 >= 2) {
              std::string::size_type v46 = *(swift::Demangle::__runtime::Node **)a2;
            }
            BOOL v43 = (swift::Demangle::__runtime::Node *)*((void *)v46 + v41);
LABEL_109:
            ++v41;
            if (!--v42) {
              goto LABEL_106;
            }
            continue;
          }
        }
        break;
    }
    uint64_t v40 = 0;
    goto LABEL_105;
  }
LABEL_35:
  uint64_t v16 = 0;
  while (2)
  {
    if (v16) {
      std::string::append(this, "><", 2uLL);
    }
    int v17 = a2;
    if (*((unsigned __int8 *)a2 + 18) - 1 >= 2) {
      int v17 = *(swift::Demangle::__runtime::Node **)a2;
    }
    unsigned int v18 = (_DWORD *)*((void *)v17 + v16);
    uint64_t v19 = *v18;
    if (!*v18)
    {
LABEL_37:
      if (++v16 == v9) {
        goto LABEL_92;
      }
      continue;
    }
    break;
  }
  unint64_t v20 = 0;
  while (2)
  {
    if (v20)
    {
      std::string::append(this, ", ", 2uLL);
      if (v20 >= 0x80)
      {
        std::string::append(this, "...", 3uLL);
        goto LABEL_37;
      }
    }
    if (v10 <= v9) {
      goto LABEL_83;
    }
    int v21 = *((unsigned __int8 *)a2 + 18);
    BOOL v22 = 1;
    int v23 = v10 - v9;
    unint64_t v24 = v9;
    while (2)
    {
      unint64_t v25 = *((unsigned __int8 *)a2 + 18);
      switch(v21)
      {
        case 1:
LABEL_55:
          if (v25 <= v24) {
            break;
          }
LABEL_56:
          unsigned int v26 = a2;
          if ((v21 - 1) >= 2) {
            unsigned int v26 = *(swift::Demangle::__runtime::Node **)a2;
          }
          char v27 = (uint64_t *)*((void *)v26 + v24);
          goto LABEL_61;
        case 5:
          if (*((unsigned int *)a2 + 2) <= v24) {
            break;
          }
          goto LABEL_56;
        case 2:
          unint64_t v25 = 2;
          goto LABEL_55;
      }
      char v27 = 0;
LABEL_61:
      if (*((_WORD *)v27 + 8) != 42) {
        goto LABEL_50;
      }
      int v28 = *((unsigned __int8 *)v27 + 18);
      if ((v28 - 1) < 2) {
        goto LABEL_66;
      }
      if (v28 == 5 && *((_DWORD *)v27 + 2))
      {
        char v27 = (uint64_t *)*v27;
LABEL_66:
        int v29 = (void *)*v27;
      }
      else
      {
        int v29 = 0;
      }
      if (*((_WORD *)v29 + 8) != 232) {
        goto LABEL_50;
      }
      int v30 = *((unsigned __int8 *)v29 + 18);
      if ((v30 - 1) < 2) {
        goto LABEL_73;
      }
      if (v30 == 5 && *((_DWORD *)v29 + 2))
      {
        int v29 = (void *)*v29;
LABEL_73:
        v31 = (void *)*v29;
      }
      else
      {
        v31 = 0;
      }
      if (*((_WORD *)v31 + 8) != 38) {
        goto LABEL_50;
      }
      int v32 = *((unsigned __int8 *)v31 + 18);
      int v33 = (void **)v31;
      if ((v32 - 1) >= 2) {
        int v33 = (void **)*v31;
      }
      if (**v33 != v20) {
        goto LABEL_50;
      }
      if (v32 == 5) {
        v31 = (void *)*v31;
      }
      if (*(void *)v31[1] != v16)
      {
LABEL_50:
        BOOL v22 = ++v24 < v10;
        if (!--v23) {
          break;
        }
        continue;
      }
      break;
    }
    if (v22) {
      std::string::append(this, "each ", 5uLL);
    }
LABEL_83:
    unint64_t v52 = v20;
    uint64_t v53 = v16;
    std::string::size_type v34 = this[3].__r_.__value_.__r.__words[2];
    if (v34)
    {
      (*(void (**)(void **__return_ptr))(*(void *)v34 + 48))(__p);
      if ((v51 & 0x80u) == 0) {
        v35 = __p;
      }
      else {
        v35 = (void **)__p[0];
      }
      if ((v51 & 0x80u) == 0) {
        std::string::size_type v36 = v51;
      }
      else {
        std::string::size_type v36 = (std::string::size_type)__p[1];
      }
      std::string::append(this, (const std::string::value_type *)v35, v36);
      if ((char)v51 < 0) {
        operator delete(__p[0]);
      }
      if (++v20 == v19) {
        goto LABEL_37;
      }
      continue;
    }
    break;
  }
  uint64_t v47 = std::__throw_bad_function_call[abi:nn180100]();
  std::function<std::string ()(unsigned long long,unsigned long long)>::operator()(v47);
}

uint64_t std::function<std::string ()(unsigned long long,unsigned long long)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v10 = a3;
  uint64_t v11 = a2;
  uint64_t v3 = *(void *)(a1 + 24);
  if (v3) {
    return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v3 + 48))(v3, &v11, &v10);
  }
  v5 = (_anonymous_namespace_::NodePrinter *)std::__throw_bad_function_call[abi:nn180100]();
}

std::string *anonymous namespace'::NodePrinter::printChildren(std::string *this, swift::Demangle::__runtime::Node *const *a2, swift::Demangle::__runtime::Node *const *a3, int a4, const char *a5)
{
  if (a2 != a3)
  {
    unsigned int v7 = a2;
    unsigned int v8 = (_anonymous_namespace_::NodePrinter *)this;
    unsigned int v9 = a4 + 1;
    do
    {
      uint64_t v10 = *v7++;
      if (a5)
      {
        if (v7 != a3)
        {
          size_t v11 = strlen(a5);
          this = std::string::append((std::string *)v8, a5, v11);
        }
      }
    }
    while (v7 != a3);
  }
  return this;
}

void anonymous namespace'::NodePrinter::printEntityType(_anonymous_namespace_::NodePrinter *this, swift::Demangle::__runtime::Node *a2, swift::Demangle::__runtime::Node *a3, unint64_t a4, int a5)
{
  unsigned int v7 = a3;
  int v9 = *((unsigned __int8 *)a2 + 18);
  uint64_t v10 = a2;
  if ((v9 - 1) >= 2)
  {
    if (v9 == 5)
    {
      uint64_t v11 = *(void *)a2;
      uint64_t v10 = *(swift::Demangle::__runtime::Node **)a2;
      goto LABEL_9;
    }
    uint64_t v10 = 0;
  }
  switch(v9)
  {
    case 1:
      unint64_t v12 = (swift::Demangle::__runtime::Node *)((char *)a2 + 8);
      if (v10 != (swift::Demangle::__runtime::Node *)((char *)a2 + 8)) {
        goto LABEL_16;
      }
      break;
    case 2:
      unint64_t v12 = (swift::Demangle::__runtime::Node *)((char *)a2 + 16);
      if (v10 != (swift::Demangle::__runtime::Node *)((char *)a2 + 16)) {
        goto LABEL_16;
      }
      break;
    case 5:
      uint64_t v11 = *(void *)a2;
LABEL_9:
      unint64_t v12 = (swift::Demangle::__runtime::Node *)(v11 + 8 * *((unsigned int *)a2 + 2));
      if (v10 != v12) {
        goto LABEL_16;
      }
      break;
    default:
      unint64_t v12 = 0;
      if (v10)
      {
LABEL_16:
        while (*(_WORD *)(*(void *)v10 + 16) != 290)
        {
          uint64_t v10 = (swift::Demangle::__runtime::Node *)((char *)v10 + 8);
          if (v10 == v12)
          {
            uint64_t v10 = v12;
            goto LABEL_19;
          }
        }
      }
      break;
  }
LABEL_19:
  if (v9 == 5)
  {
    if (v10 != (swift::Demangle::__runtime::Node *)(*(void *)a2 + 8 * *((unsigned int *)a2 + 2))) {
      goto LABEL_26;
    }
  }
  else
  {
    uint64_t v13 = (swift::Demangle::__runtime::Node *)((char *)a2 + 8);
    if (v9 != 1) {
      uint64_t v13 = 0;
    }
    if (v9 == 2) {
      int v14 = (swift::Demangle::__runtime::Node *)((char *)a2 + 16);
    }
    else {
      int v14 = v13;
    }
    if (v10 != v14)
    {
LABEL_26:
      int v15 = *(swift::Demangle::__runtime::Node **)v10;
      if (a4 | *(void *)v10) {
        goto LABEL_27;
      }
LABEL_33:
      return;
    }
  }
  int v15 = 0;
  if (!a4) {
    goto LABEL_33;
  }
LABEL_27:
  if (!a4)
  {
    if (*((_WORD *)a3 + 8) != 44) {
      goto LABEL_87;
    }
    int v19 = *((unsigned __int8 *)a3 + 18);
    unint64_t v20 = (swift::Demangle::__runtime::Node **)a3;
    if ((v19 - 1) >= 2)
    {
      if (v19 != 5 || !*((_DWORD *)a3 + 2))
      {
        int v21 = 0;
        goto LABEL_59;
      }
      unint64_t v20 = *(swift::Demangle::__runtime::Node ***)a3;
    }
    int v21 = *v20;
LABEL_59:
    goto LABEL_60;
  }
  std::string::append((std::string *)this, "<", 1uLL);
  int v16 = *(unsigned __int8 *)(a4 + 18);
  int v17 = (swift::Demangle::__runtime::Node *)a4;
  if ((v16 - 1) >= 2)
  {
    if (v16 == 5)
    {
      unsigned int v18 = *(swift::Demangle::__runtime::Node **)a4;
      int v17 = *(swift::Demangle::__runtime::Node **)a4;
      goto LABEL_47;
    }
    int v17 = 0;
  }
  switch(v16)
  {
    case 1:
      BOOL v22 = (char *)(a4 + 8);
      if (v17 == (swift::Demangle::__runtime::Node *)(a4 + 8)) {
        goto LABEL_56;
      }
      goto LABEL_54;
    case 2:
      BOOL v22 = (char *)(a4 + 16);
      if (v17 == (swift::Demangle::__runtime::Node *)(a4 + 16)) {
        goto LABEL_56;
      }
      goto LABEL_54;
    case 5:
      unsigned int v18 = *(swift::Demangle::__runtime::Node **)a4;
LABEL_47:
      BOOL v22 = (char *)v18 + 8 * *(unsigned int *)(a4 + 8);
      if (v17 == (swift::Demangle::__runtime::Node *)v22) {
        goto LABEL_56;
      }
      goto LABEL_54;
  }
  BOOL v22 = 0;
  if (!v17) {
    goto LABEL_56;
  }
LABEL_54:
  unint64_t v24 = *(swift::Demangle::__runtime::Node **)v17;
  int v23 = (swift::Demangle::__runtime::Node **)((char *)v17 + 8);
  while (v23 != (swift::Demangle::__runtime::Node **)v22)
  {
    std::string::append((std::string *)this, ", ", 2uLL);
    unint64_t v25 = *v23++;
  }
LABEL_56:
  std::string::append((std::string *)this, ">", 1uLL);
  if (*((_WORD *)v7 + 8) != 44) {
    goto LABEL_87;
  }
LABEL_60:
  int v26 = *((unsigned __int8 *)v7 + 18);
  if (v26 != 2)
  {
    if (v26 != 5 || *((_DWORD *)v7 + 2) < 2u)
    {
      char v27 = 0;
      goto LABEL_66;
    }
    unsigned int v7 = *(swift::Demangle::__runtime::Node **)v7;
  }
  char v27 = (swift::Demangle::__runtime::Node *)*((void *)v7 + 1);
LABEL_66:
  int v28 = v27;
  while (1)
  {
    int v29 = v28;
    int v30 = *((unsigned __int16 *)v28 + 8);
    if (v30 != 232) {
      break;
    }
    int v31 = *((unsigned __int8 *)v29 + 18);
    if ((v31 - 1) < 2)
    {
LABEL_69:
      int v28 = *(swift::Demangle::__runtime::Node **)v29;
    }
    else
    {
      int v28 = 0;
      if (v31 == 5)
      {
        int v28 = 0;
        if (*((_DWORD *)v29 + 2))
        {
          int v29 = *(swift::Demangle::__runtime::Node **)v29;
          goto LABEL_69;
        }
      }
    }
  }
  BOOL v32 = (v30 - 44) > 0x26 || ((1 << (v30 - 44)) & 0x4000200001) == 0;
  if (v32 && v30 != 245) {
    std::string::push_back((std::string *)this, 32);
  }
  int v33 = *((unsigned __int8 *)v27 + 18);
  if ((v33 - 1) < 2)
  {
LABEL_85:
    unsigned int v7 = *(swift::Demangle::__runtime::Node **)v27;
  }
  else
  {
    if (v33 == 5 && *((_DWORD *)v27 + 2))
    {
      char v27 = *(swift::Demangle::__runtime::Node **)v27;
      goto LABEL_85;
    }
    unsigned int v7 = 0;
  }
LABEL_87:
}

std::string *anonymous namespace'::NodePrinter::printFunctionType(swift::Demangle::__runtime::Node *,swift::Demangle::__runtime::Node *,unsigned int)::{lambda(char const*)#1}::operator()(uint64_t a1, const char *a2)
{
  int v4 = *(std::string **)a1;
  std::string::append(*(std::string **)a1, "@convention(", 0xCuLL);
  if (a2) {
    size_t v5 = strlen(a2);
  }
  else {
    size_t v5 = 0;
  }
  std::string::append(v4, a2, v5);
  int v6 = *(unsigned __int8 **)(a1 + 8);
  if (v6[18] - 1 >= 2) {
    int v6 = *(unsigned __int8 **)v6;
  }
  if (*(_WORD *)(*(void *)v6 + 16) == 23)
  {
    std::string::append(v4, ", mangledCType: \"", 0x11uLL);
    unsigned int v7 = *(swift::Demangle::__runtime::Node **)(a1 + 8);
    int v8 = *((unsigned __int8 *)v7 + 18);
    if ((v8 - 1) >= 2)
    {
      if (v8 != 5 || !*((_DWORD *)v7 + 2))
      {
        int v9 = 0;
        goto LABEL_13;
      }
      unsigned int v7 = *(swift::Demangle::__runtime::Node **)v7;
    }
    int v9 = *(swift::Demangle::__runtime::Node **)v7;
LABEL_13:
    std::string::push_back(v4, 34);
  }

  return std::string::append(v4, ") ", 2uLL);
}

void anonymous namespace'::NodePrinter::printFunctionParameters(swift::Demangle::__runtime::Node *,swift::Demangle::__runtime::Node *,unsigned int,BOOL)::{lambda(swift::Demangle::__runtime::Node *)#1}::operator()(uint64_t a1, swift::Demangle::__runtime::Node *a2)
{
  int v4 = *(std::string **)(a1 + 8);
  if (!**(unsigned char **)a1)
  {
    if (**(unsigned char **)(a1 + 32)) {
      goto LABEL_63;
    }
    int v10 = *((unsigned __int8 *)a2 + 18);
    uint64_t v11 = a2;
    if ((v10 - 1) >= 2)
    {
      if (v10 == 5)
      {
        uint64_t v12 = *(void *)a2;
        uint64_t v11 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_42:
        BOOL v22 = (swift::Demangle::__runtime::Node *)(v12 + 8 * *((unsigned int *)a2 + 2));
        goto LABEL_46;
      }
      uint64_t v11 = 0;
    }
    switch(v10)
    {
      case 1:
        BOOL v22 = (swift::Demangle::__runtime::Node *)((char *)a2 + 8);
        break;
      case 2:
        BOOL v22 = (swift::Demangle::__runtime::Node *)((char *)a2 + 16);
        break;
      case 5:
        uint64_t v12 = *(void *)a2;
        goto LABEL_42;
      default:
        BOOL v22 = 0;
        break;
    }
LABEL_46:
    if (v11 != v22)
    {
      while (*(_WORD *)(*(void *)v11 + 16) != 225)
      {
        uint64_t v11 = (swift::Demangle::__runtime::Node *)((char *)v11 + 8);
        if (v11 == v22)
        {
          uint64_t v11 = v22;
          break;
        }
      }
    }
    if (v10 == 5)
    {
      if (v11 == (swift::Demangle::__runtime::Node *)(*(void *)a2 + 8 * *((unsigned int *)a2 + 2))) {
        goto LABEL_61;
      }
    }
    else
    {
      int v23 = (swift::Demangle::__runtime::Node *)((char *)a2 + 8);
      if (v10 != 1) {
        int v23 = 0;
      }
      if (v10 == 2) {
        unint64_t v24 = (swift::Demangle::__runtime::Node *)((char *)a2 + 16);
      }
      else {
        unint64_t v24 = v23;
      }
      if (v11 == v24) {
        goto LABEL_61;
      }
    }
    uint64_t v25 = *(void *)v11;
    if (v25)
    {
      std::string::append(*(std::string **)(a1 + 8), *(const std::string::value_type **)v25, *(void *)(v25 + 8));
      int v26 = ":";
      char v27 = v4;
      std::string::size_type v28 = 1;
LABEL_62:
      std::string::append(v27, v26, v28);
      goto LABEL_63;
    }
LABEL_61:
    int v26 = "_:";
    char v27 = *(std::string **)(a1 + 8);
    std::string::size_type v28 = 2;
    goto LABEL_62;
  }
  unint64_t v5 = **(unsigned int **)(a1 + 24);
  int v6 = ***(uint64_t *****)(a1 + 16);
  unint64_t v7 = *((unsigned __int8 *)v6 + 18);
  unsigned int v8 = v7 - 1;
  if (v7 == 1) {
    goto LABEL_6;
  }
  if (v7 == 5)
  {
    if (*((unsigned int *)v6 + 2) > v5) {
      goto LABEL_7;
    }
LABEL_15:
    int v9 = 0;
    goto LABEL_16;
  }
  if (v7 != 2) {
    goto LABEL_15;
  }
  unint64_t v7 = 2;
LABEL_6:
  if (v7 <= v5) {
    goto LABEL_15;
  }
LABEL_7:
  if (v8 >= 2) {
    int v6 = (uint64_t **)*v6;
  }
  int v9 = v6[v5];
LABEL_16:
  if (*((_WORD *)v9 + 8) != 101)
  {
    unsigned int v16 = 1;
    HIBYTE(v31) = 1;
    uint64_t v17 = 95;
    LOWORD(__dst) = 95;
    goto LABEL_29;
  }
  uint64_t v13 = (const void *)*v9;
  if (!*v9)
  {
    uint64_t v17 = 0;
    unsigned int v16 = 0;
    __dst = 0;
    size_t v30 = 0;
    unint64_t v31 = 0;
    goto LABEL_29;
  }
  size_t v14 = v9[1];
  if (v14 >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  if (v14 >= 0x17)
  {
    uint64_t v18 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v14 | 7) != 0x17) {
      uint64_t v18 = v14 | 7;
    }
    uint64_t v19 = v18 + 1;
    p_dst = (void **)operator new(v18 + 1);
    size_t v30 = v14;
    unint64_t v31 = v19 | 0x8000000000000000;
    __dst = p_dst;
  }
  else
  {
    HIBYTE(v31) = v9[1];
    p_dst = (void **)&__dst;
    if (!v14) {
      goto LABEL_28;
    }
  }
  memmove(p_dst, v13, v14);
LABEL_28:
  *((unsigned char *)p_dst + v14) = 0;
  unsigned int v16 = HIBYTE(v31);
  uint64_t v17 = v30;
LABEL_29:
  if ((v16 & 0x80u) == 0) {
    unint64_t v20 = (const std::string::value_type *)&__dst;
  }
  else {
    unint64_t v20 = (const std::string::value_type *)__dst;
  }
  if ((v16 & 0x80u) == 0) {
    std::string::size_type v21 = v16;
  }
  else {
    std::string::size_type v21 = v17;
  }
  std::string::append(v4, v20, v21);
  std::string::push_back(v4, 58);
  if (SHIBYTE(v31) < 0) {
    operator delete(__dst);
  }
LABEL_63:
  if (**(unsigned char **)a1 && **(unsigned char **)(a1 + 32)) {
    std::string::push_back(v4, 32);
  }
  ++**(_DWORD **)(a1 + 24);
  if (**(unsigned char **)(a1 + 32)) {
}
  }

std::string *anonymous namespace'::NodePrinter::printFunctionSigSpecializationParams(std::string *this, swift::Demangle::__runtime::Node *a2, int a3)
{
  int v4 = this;
  unsigned int v5 = *((unsigned __int8 *)a2 + 18);
  switch(v5)
  {
    case 1u:
      goto LABEL_6;
    case 5u:
      unsigned int v5 = *((_DWORD *)a2 + 2);
      if (!v5) {
        return this;
      }
LABEL_6:
      LODWORD(v6) = 0;
      unsigned int v7 = a3 + 1;
      while (2)
      {
        unint64_t v9 = *((unsigned __int8 *)a2 + 18);
        if ((v9 - 1) >= 2)
        {
          char v10 = 0;
          uint64_t v11 = *(swift::Demangle::__runtime::Node **)a2;
        }
        else
        {
          char v10 = 1;
          uint64_t v11 = a2;
        }
        switch(**((_DWORD **)v11 + v6))
        {
          case 0:
          case 1:
            std::string::append(v4, "[", 1uLL);
            unint64_t v14 = *((unsigned __int8 *)a2 + 18);
            unsigned int v15 = v14 - 1;
            switch(v14)
            {
              case 1:
                goto LABEL_27;
              case 5:
                if (*((unsigned int *)a2 + 2) > (unint64_t)v6) {
                  goto LABEL_28;
                }
                break;
              case 2:
                unint64_t v14 = 2;
LABEL_27:
                if (v14 > v6)
                {
LABEL_28:
                  unsigned int v16 = a2;
                  if (v15 >= 2) {
                    unsigned int v16 = *(swift::Demangle::__runtime::Node **)a2;
                  }
                  uint64_t v17 = (swift::Demangle::__runtime::Node *)*((void *)v16 + v6);
LABEL_70:
                  std::string::append(v4, " : ", 3uLL);
                  v35 = a2;
                  if (*((unsigned __int8 *)a2 + 18) - 1 >= 2) {
                    v35 = *(swift::Demangle::__runtime::Node **)a2;
                  }
                  uint64_t v36 = *((void *)v35 + (v6 + 1));
                  unint64_t v37 = *(swift::Demangle::__runtime **)v36;
                  unsigned int v38 = *(const char **)(v36 + 8);
                  char v82 = 0;
                  uint64_t v83 = 0x101010101010101;
                  char v84 = 1;
                  int v85 = 0;
                  int v86 = 16843009;
                  char v87 = 1;
                  __int16 v88 = 256;
                  char v89 = 1;
                  uint64_t v90 = 0;
                  uint64_t v91 = 0;
                  v92[0] = off_C8B30;
                  v92[1] = swift::Demangle::__runtime::genericParameterName;
                  v92[3] = v92;
                  swift::Demangle::__runtime::demangleSymbolAsString(v37, v38, (unint64_t)&v82, v34);
                }
                break;
            }
            uint64_t v17 = 0;
            goto LABEL_70;
          case 2:
          case 3:
            std::string::append(v4, "[", 1uLL);
            unint64_t v18 = *((unsigned __int8 *)a2 + 18);
            unsigned int v19 = v18 - 1;
            switch(v18)
            {
              case 1:
                goto LABEL_35;
              case 5:
                if (*((unsigned int *)a2 + 2) <= (unint64_t)v6) {
                  goto LABEL_74;
                }
                break;
              case 2:
                unint64_t v18 = 2;
LABEL_35:
                if (v18 <= v6)
                {
LABEL_74:
                  std::string::size_type v21 = 0;
                  goto LABEL_75;
                }
                break;
              default:
                goto LABEL_74;
            }
            unint64_t v20 = a2;
            if (v19 >= 2) {
              unint64_t v20 = *(swift::Demangle::__runtime::Node **)a2;
            }
            std::string::size_type v21 = (swift::Demangle::__runtime::Node *)*((void *)v20 + v6);
LABEL_75:
            std::string::append(v4, " : ", 3uLL);
            int v39 = *((unsigned __int8 *)a2 + 18);
            if (v39 == 2)
            {
              unint64_t v40 = *((unsigned __int8 *)a2 + 18);
            }
            else
            {
              if (v39 != 5) {
                goto LABEL_7;
              }
              unint64_t v40 = *((unsigned int *)a2 + 2);
            }
            unint64_t v41 = (v6 + 1);
            if (v40 > v41)
            {
              unsigned int v42 = v39 - 1;
              BOOL v43 = a2;
              if (v42 >= 2) {
                BOOL v43 = *(swift::Demangle::__runtime::Node **)a2;
              }
              unsigned int v8 = (swift::Demangle::__runtime::Node *)*((void *)v43 + v41);
              goto LABEL_8;
            }
LABEL_7:
            unsigned int v8 = 0;
LABEL_8:
            LODWORD(v6) = v6 + 2;
            goto LABEL_9;
          case 4:
            std::string::append(v4, "[", 1uLL);
            unint64_t v22 = *((unsigned __int8 *)a2 + 18);
            unsigned int v23 = v22 - 1;
            switch(v22)
            {
              case 1:
                goto LABEL_48;
              case 5:
                if (*((unsigned int *)a2 + 2) <= (unint64_t)v6) {
                  goto LABEL_84;
                }
                break;
              case 2:
                unint64_t v22 = 2;
LABEL_48:
                if (v22 <= v6)
                {
LABEL_84:
                  uint64_t v25 = 0;
                  goto LABEL_85;
                }
                break;
              default:
                goto LABEL_84;
            }
            unint64_t v24 = a2;
            if (v23 >= 2) {
              unint64_t v24 = *(swift::Demangle::__runtime::Node **)a2;
            }
            uint64_t v25 = (swift::Demangle::__runtime::Node *)*((void *)v24 + v6);
LABEL_85:
            std::string::append(v4, " : ", 3uLL);
            int v44 = *((unsigned __int8 *)a2 + 18);
            if (v44 == 2)
            {
              unint64_t v45 = *((unsigned __int8 *)a2 + 18);
            }
            else
            {
              if (v44 != 5) {
                goto LABEL_93;
              }
              unint64_t v45 = *((unsigned int *)a2 + 2);
            }
            unint64_t v46 = (v6 + 1);
            if (v45 > v46)
            {
              unsigned int v47 = v44 - 1;
              int v48 = a2;
              if (v47 >= 2) {
                int v48 = *(swift::Demangle::__runtime::Node **)a2;
              }
              unsigned int v49 = (swift::Demangle::__runtime::Node *)*((void *)v48 + v46);
LABEL_94:
              std::string::append(v4, "'", 1uLL);
              unint64_t v50 = *((unsigned __int8 *)a2 + 18);
              unsigned int v51 = v50 - 1;
              if (v50 != 1)
              {
                if (v50 == 5)
                {
                  unint64_t v50 = *((unsigned int *)a2 + 2);
                }
                else
                {
                  if (v50 != 2) {
                    goto LABEL_134;
                  }
                  unint64_t v50 = 2;
                }
              }
              unint64_t v67 = (v6 + 2);
              if (v50 > v67)
              {
                int v68 = a2;
                if (v51 >= 2) {
                  int v68 = *(swift::Demangle::__runtime::Node **)a2;
                }
                int v69 = (swift::Demangle::__runtime::Node *)*((void *)v68 + v67);
                goto LABEL_135;
              }
LABEL_134:
              int v69 = 0;
LABEL_135:
              LODWORD(v6) = v6 + 3;
              std::string::append(v4, "'", 1uLL);
              goto LABEL_9;
            }
LABEL_93:
            unsigned int v49 = 0;
            goto LABEL_94;
          case 5:
            std::string::append(v4, "[", 1uLL);
            unint64_t v26 = *((unsigned __int8 *)a2 + 18);
            unsigned int v27 = v26 - 1;
            switch(v26)
            {
              case 1:
                goto LABEL_56;
              case 5:
                if (*((unsigned int *)a2 + 2) <= (unint64_t)v6) {
                  goto LABEL_99;
                }
                break;
              case 2:
                unint64_t v26 = 2;
LABEL_56:
                if (v26 <= v6)
                {
LABEL_99:
                  int v29 = 0;
                  goto LABEL_100;
                }
                break;
              default:
                goto LABEL_99;
            }
            std::string::size_type v28 = a2;
            if (v27 >= 2) {
              std::string::size_type v28 = *(swift::Demangle::__runtime::Node **)a2;
            }
            int v29 = (swift::Demangle::__runtime::Node *)*((void *)v28 + v6);
LABEL_100:
            std::string::append(v4, " : ", 3uLL);
            int v52 = *((unsigned __int8 *)a2 + 18);
            if (v52 == 2)
            {
              unint64_t v53 = *((unsigned __int8 *)a2 + 18);
            }
            else
            {
              if (v52 != 5) {
                goto LABEL_108;
              }
              unint64_t v53 = *((unsigned int *)a2 + 2);
            }
            unint64_t v54 = (v6 + 1);
            if (v53 > v54)
            {
              unsigned int v55 = v52 - 1;
              v56 = a2;
              if (v55 >= 2) {
                v56 = *(swift::Demangle::__runtime::Node **)a2;
              }
              int v57 = (swift::Demangle::__runtime::Node *)*((void *)v56 + v54);
              goto LABEL_109;
            }
LABEL_108:
            int v57 = 0;
LABEL_109:
            uint64_t v6 = (v6 + 2);
            std::string::append(v4, ", Argument Types : [", 0x14uLL);
            unsigned int v58 = *((unsigned __int8 *)a2 + 18);
            switch(v58)
            {
              case 1u:
                goto LABEL_112;
              case 5u:
                unsigned int v58 = *((_DWORD *)a2 + 2);
                if (v6 < v58)
                {
                  while (1)
                  {
LABEL_139:
                    v70 = a2;
                    if (*((unsigned __int8 *)a2 + 18) - 1 >= 2) {
                      v70 = *(swift::Demangle::__runtime::Node **)a2;
                    }
                    v71 = (swift::Demangle::__runtime::Node *)*((void *)v70 + v6);
                    if (*((_WORD *)v71 + 8) != 232) {
                      break;
                    }
                    uint64_t v72 = (v6 + 1);
                    if (v72 < v58)
                    {
                      int v73 = a2;
                      if (*((unsigned __int8 *)a2 + 18) - 1 >= 2) {
                        int v73 = *(swift::Demangle::__runtime::Node **)a2;
                      }
                      if (*(unsigned char *)(*((void *)v73 + v72) + 18) == 3) {
                        std::string::append(v4, ", ", 2uLL);
                      }
                    }
                    if (v58 == ++v6)
                    {
                      LODWORD(v6) = v58;
                      goto LABEL_9;
                    }
                  }
                }
                break;
              case 2u:
LABEL_112:
                if (v6 < v58) {
                  goto LABEL_139;
                }
                break;
            }
LABEL_9:
            this = std::string::append(v4, "]", 1uLL);
LABEL_10:
            if (v6 >= v5) {
              return this;
            }
            continue;
          case 6:
          case 7:
          case 8:
            if (v9 == 1) {
              goto LABEL_19;
            }
            if (v9 != 5) {
              goto LABEL_17;
            }
            goto LABEL_41;
          case 9:
            std::string::append(v4, "[", 1uLL);
            unint64_t v30 = *((unsigned __int8 *)a2 + 18);
            unsigned int v31 = v30 - 1;
            switch(v30)
            {
              case 1:
                goto LABEL_64;
              case 5:
                if (*((unsigned int *)a2 + 2) <= (unint64_t)v6) {
                  goto LABEL_115;
                }
                break;
              case 2:
                unint64_t v30 = 2;
LABEL_64:
                if (v30 <= v6)
                {
LABEL_115:
                  int v33 = 0;
                  goto LABEL_116;
                }
                break;
              default:
                goto LABEL_115;
            }
            BOOL v32 = a2;
            if (v31 >= 2) {
              BOOL v32 = *(swift::Demangle::__runtime::Node **)a2;
            }
            int v33 = (swift::Demangle::__runtime::Node *)*((void *)v32 + v6);
LABEL_116:
            std::string::append(v4, " : ", 3uLL);
            int v59 = *((unsigned __int8 *)a2 + 18);
            if (v59 == 2)
            {
              unint64_t v60 = *((unsigned __int8 *)a2 + 18);
            }
            else
            {
              if (v59 != 5) {
                goto LABEL_124;
              }
              unint64_t v60 = *((unsigned int *)a2 + 2);
            }
            unint64_t v61 = (v6 + 1);
            if (v60 > v61)
            {
              unsigned int v62 = v59 - 1;
              int v63 = a2;
              if (v62 >= 2) {
                int v63 = *(swift::Demangle::__runtime::Node **)a2;
              }
              int v64 = (swift::Demangle::__runtime::Node *)*((void *)v63 + v61);
LABEL_125:
              std::string::append(v4, "<", 1uLL);
              unint64_t v65 = *((unsigned __int8 *)a2 + 18);
              unsigned int v66 = v65 - 1;
              if (v65 != 1)
              {
                if (v65 == 5)
                {
                  unint64_t v65 = *((unsigned int *)a2 + 2);
                }
                else
                {
                  if (v65 != 2) {
                    goto LABEL_152;
                  }
                  unint64_t v65 = 2;
                }
              }
              unint64_t v74 = (v6 + 2);
              if (v65 > v74)
              {
                BOOL v75 = a2;
                if (v66 >= 2) {
                  BOOL v75 = *(swift::Demangle::__runtime::Node **)a2;
                }
                v76 = (swift::Demangle::__runtime::Node *)*((void *)v75 + v74);
LABEL_153:
                std::string::append(v4, ",", 1uLL);
                unint64_t v77 = *((unsigned __int8 *)a2 + 18);
                unsigned int v78 = v77 - 1;
                if (v77 != 1)
                {
                  if (v77 == 5)
                  {
                    unint64_t v77 = *((unsigned int *)a2 + 2);
                  }
                  else
                  {
                    if (v77 != 2) {
                      goto LABEL_162;
                    }
                    unint64_t v77 = 2;
                  }
                }
                unint64_t v79 = (v6 + 3);
                if (v77 > v79)
                {
                  v80 = a2;
                  if (v78 >= 2) {
                    v80 = *(swift::Demangle::__runtime::Node **)a2;
                  }
                  v81 = (swift::Demangle::__runtime::Node *)*((void *)v80 + v79);
                  goto LABEL_163;
                }
LABEL_162:
                v81 = 0;
LABEL_163:
                LODWORD(v6) = v6 + 4;
                this = std::string::append(v4, ">]", 2uLL);
                goto LABEL_10;
              }
LABEL_152:
              v76 = 0;
              goto LABEL_153;
            }
LABEL_124:
            int v64 = 0;
            goto LABEL_125;
          default:
            if (v9 == 1) {
              goto LABEL_19;
            }
            if (v9 == 5)
            {
LABEL_41:
              if (*((unsigned int *)a2 + 2) <= (unint64_t)v6) {
                goto LABEL_42;
              }
            }
            else
            {
LABEL_17:
              if (v9 != 2) {
                goto LABEL_42;
              }
              unint64_t v9 = 2;
LABEL_19:
              if (v9 <= v6)
              {
LABEL_42:
                uint64_t v13 = 0;
                goto LABEL_43;
              }
            }
            uint64_t v12 = a2;
            if ((v10 & 1) == 0) {
              uint64_t v12 = *(swift::Demangle::__runtime::Node **)a2;
            }
            uint64_t v13 = (swift::Demangle::__runtime::Node *)*((void *)v12 + v6);
LABEL_43:
            LODWORD(v6) = v6 + 1;
            goto LABEL_10;
        }
      }
    case 2u:
      goto LABEL_6;
  }
  return this;
}

std::string *anonymous namespace'::NodePrinter::printBoundGenericNoSugar(std::string *this, swift::Demangle::__runtime::Node *a2, int a3)
{
  uint64_t v3 = this;
  int v4 = *((unsigned __int8 *)a2 + 18);
  if (v4 != 2)
  {
    if (v4 != 5 || *((_DWORD *)a2 + 2) < 2u) {
      return this;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  uint64_t v5 = *((void *)a2 + 1);
  unsigned int v6 = a3 + 1;
  std::string::append(v3, "<", 1uLL);
  if (v5)
  {
    int v7 = *(unsigned __int8 *)(v5 + 18);
    unsigned int v8 = (swift::Demangle::__runtime::Node **)v5;
    if ((v7 - 1) >= 2)
    {
      if (v7 == 5)
      {
        unint64_t v9 = *(swift::Demangle::__runtime::Node **)v5;
        unsigned int v8 = *(swift::Demangle::__runtime::Node ***)v5;
        goto LABEL_15;
      }
      unsigned int v8 = 0;
    }
    switch(v7)
    {
      case 1:
        char v10 = (swift::Demangle::__runtime::Node **)(v5 + 8);
        if (v8 == (swift::Demangle::__runtime::Node **)(v5 + 8)) {
          goto LABEL_24;
        }
        goto LABEL_22;
      case 2:
        char v10 = (swift::Demangle::__runtime::Node **)(v5 + 16);
        if (v8 == (swift::Demangle::__runtime::Node **)(v5 + 16)) {
          goto LABEL_24;
        }
        goto LABEL_22;
      case 5:
        unint64_t v9 = *(swift::Demangle::__runtime::Node **)v5;
LABEL_15:
        char v10 = (swift::Demangle::__runtime::Node **)((char *)v9 + 8 * *(unsigned int *)(v5 + 8));
        if (v8 == v10) {
          goto LABEL_24;
        }
LABEL_22:
        uint64_t v12 = *v8;
        uint64_t v11 = v8 + 1;
        while (v11 != v10)
        {
          std::string::append(v3, ", ", 2uLL);
          uint64_t v13 = *v11++;
        }
        goto LABEL_24;
    }
    char v10 = 0;
    if (v8) {
      goto LABEL_22;
    }
  }
LABEL_24:

  return std::string::append(v3, ">", 1uLL);
}

void anonymous namespace'::NodePrinter::printImplFunctionType(swift::Demangle::__runtime::Node *,unsigned int)::{lambda(anonymous namespace'::NodePrinter::printImplFunctionType(swift::Demangle::__runtime::Node *,unsigned int)::State)#1}::operator()(int **a1, int a2)
{
  int v2 = **a1;
  if (v2 != a2)
  {
    uint64_t v5 = (std::string *)a1[2];
    while (1)
    {
      if (v2)
      {
        if (v2 != 1)
        {
          if (v2 == 2) {
            printer_unreachable("no state after Results");
          }
          printer_unreachable("bad state");
        }
        std::string::append(v5, ") -> ", 5uLL);
        unsigned int v6 = *(swift::Demangle::__runtime::Node **)a1[4];
        if (v6)
        {
          std::string::append(v5, " ", 1uLL);
        }
        std::string::append(v5, "(", 1uLL);
        goto LABEL_5;
      }
      if (*(void *)a1[1]) {
        break;
      }
LABEL_18:
      std::string::push_back(v5, 40);
LABEL_5:
      int v2 = ++**a1;
      if (v2 == a2) {
        return;
      }
    }
    std::string::append(v5, "@substituted ", 0xDuLL);
    int v7 = *(swift::Demangle::__runtime::Node **)a1[1];
    int v8 = *((unsigned __int8 *)v7 + 18);
    if ((v8 - 1) >= 2)
    {
      if (v8 != 5 || !*((_DWORD *)v7 + 2))
      {
        unint64_t v9 = 0;
        goto LABEL_17;
      }
      int v7 = *(swift::Demangle::__runtime::Node **)v7;
    }
    unint64_t v9 = *(swift::Demangle::__runtime::Node **)v7;
LABEL_17:
    std::string::push_back(v5, 32);
    goto LABEL_18;
  }
}

char *std::vector<std::string>::__push_back_slow_path<std::string>(void **a1, uint64_t a2)
{
  unint64_t v2 = 0xAAAAAAAAAAAAAAABLL * (((unsigned char *)a1[1] - (unsigned char *)*a1) >> 3);
  unint64_t v3 = v2 + 1;
  if (v2 + 1 > 0xAAAAAAAAAAAAAAALL) {
    abort();
  }
  if (0x5555555555555556 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3) > v3) {
    unint64_t v3 = 0x5555555555555556 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3);
  }
  if (0xAAAAAAAAAAAAAAABLL * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3) >= 0x555555555555555) {
    unint64_t v6 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v6 = v3;
  }
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    int v7 = (char *)operator new(24 * v6);
  }
  else
  {
    int v7 = 0;
  }
  int v8 = &v7[24 * v2];
  unint64_t v9 = &v7[24 * v6];
  *(_OWORD *)int v8 = *(_OWORD *)a2;
  *((void *)v8 + 2) = *(void *)(a2 + 16);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  char v10 = v8 + 24;
  uint64_t v11 = (void **)*a1;
  uint64_t v12 = (void **)a1[1];
  if (v12 == *a1)
  {
    *a1 = v8;
    a1[1] = v10;
    a1[2] = v9;
  }
  else
  {
    do
    {
      long long v13 = *(_OWORD *)(v12 - 3);
      *((void *)v8 - 1) = *(v12 - 1);
      *(_OWORD *)(v8 - 24) = v13;
      v8 -= 24;
      *(v12 - 2) = 0;
      *(v12 - 1) = 0;
      *(v12 - 3) = 0;
      v12 -= 3;
    }
    while (v12 != v11);
    uint64_t v12 = (void **)*a1;
    unint64_t v14 = (void **)a1[1];
    *a1 = v8;
    a1[1] = v10;
    a1[2] = v9;
    while (v14 != v12)
    {
      if (*((char *)v14 - 1) < 0) {
        operator delete(*(v14 - 3));
      }
      v14 -= 3;
    }
  }
  if (v12) {
    operator delete(v12);
  }
  return v10;
}

uint64_t swift::Punycode::__runtime::decodePunycode(unsigned __int8 *a1, unint64_t a2, std::vector<unsigned int> *this)
{
  unint64_t v3 = this;
  unint64_t v4 = a2;
  std::vector<unsigned int>::pointer begin = this->__begin_;
  this->__end_ = this->__begin_;
  if (a2 > this->__end_cap_.__value_ - begin)
  {
    if (a2 >> 62) {
LABEL_71:
    }
      abort();
    uint64_t v7 = a2;
    int v8 = (unsigned int *)operator new(4 * a2);
    v3->__begin_ = v8;
    v3->__end_ = v8;
    v3->__end_cap_.__value_ = &v8[v7];
    if (begin) {
      operator delete(begin);
    }
  }
  std::vector<unsigned int>::value_type __x = 128;
  unint64_t v9 = v4;
  do
  {
    if (!v9) {
      goto LABEL_41;
    }
    unint64_t v10 = v9 - 1;
    int v11 = a1[--v9];
  }
  while (v11 != 95);
  if (v4 >= v10) {
    unint64_t v12 = v10;
  }
  else {
    unint64_t v12 = v4;
  }
  if (v12)
  {
    long long v13 = (char *)&a1[v12];
    unint64_t v14 = a1;
    int v64 = v3;
    unint64_t v65 = (char *)&a1[v12];
    while (1)
    {
      if ((char)*v14 < 0) {
        return 0;
      }
      unsigned int v16 = *v14;
      end = (char *)v3->__end_;
      value = v3->__end_cap_.__value_;
      if (end >= (char *)value) {
        break;
      }
      *(_DWORD *)end = v16;
      unsigned int v15 = (unsigned int *)(end + 4);
LABEL_14:
      v3->__end_ = v15;
      if (++v14 == (unsigned __int8 *)v13) {
        goto LABEL_38;
      }
    }
    unsigned int v19 = a1;
    unint64_t v20 = v4;
    std::vector<unsigned int>::pointer v21 = v3->__begin_;
    uint64_t v22 = end - (char *)v3->__begin_;
    uint64_t v23 = v22 >> 2;
    unint64_t v24 = (v22 >> 2) + 1;
    if (v24 >> 62) {
      goto LABEL_71;
    }
    uint64_t v25 = (char *)value - (char *)v21;
    if (v25 >> 1 > v24) {
      unint64_t v24 = v25 >> 1;
    }
    if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v24 = 0x3FFFFFFFFFFFFFFFLL;
    }
    unint64_t v66 = v24;
    if (v24)
    {
      if (v24 >> 62) {
        std::__throw_bad_array_new_length[abi:nn180100]();
      }
      unint64_t v26 = operator new(4 * v24);
    }
    else
    {
      unint64_t v26 = 0;
    }
    unsigned int v27 = (unsigned int *)&v26[4 * v23];
    *unsigned int v27 = v16;
    unsigned int v15 = v27 + 1;
    if (end == (char *)v21)
    {
      unint64_t v4 = v20;
      a1 = v19;
    }
    else
    {
      unint64_t v28 = end - (char *)v21 - 4;
      if (v28 >= 0x2C)
      {
        unint64_t v29 = end - &v26[v22];
        unint64_t v4 = v20;
        a1 = v19;
        if (v29 >= 0x20)
        {
          uint64_t v30 = (v28 >> 2) + 1;
          uint64_t v31 = 4 * (v30 & 0x7FFFFFFFFFFFFFF8);
          BOOL v32 = &end[-v31];
          unsigned int v27 = (unsigned int *)((char *)v27 - v31);
          int v33 = &v26[4 * v23 - 16];
          std::string::size_type v34 = end - 16;
          uint64_t v35 = v30 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            long long v36 = *(_OWORD *)v34;
            *(v33 - 1) = *((_OWORD *)v34 - 1);
            _OWORD *v33 = v36;
            v33 -= 2;
            v34 -= 32;
            v35 -= 8;
          }
          while (v35);
          end = v32;
          if (v30 == (v30 & 0x7FFFFFFFFFFFFFF8)) {
            goto LABEL_35;
          }
        }
      }
      else
      {
        unint64_t v4 = v20;
        a1 = v19;
      }
      do
      {
        unsigned int v37 = *((_DWORD *)end - 1);
        end -= 4;
        *--unsigned int v27 = v37;
      }
      while (end != (char *)v21);
    }
LABEL_35:
    unint64_t v3 = v64;
    v64->__begin_ = v27;
    v64->__end_ = v15;
    v64->__end_cap_.__value_ = (unsigned int *)&v26[4 * v66];
    if (v21) {
      operator delete(v21);
    }
    long long v13 = v65;
    goto LABEL_14;
  }
LABEL_38:
  unint64_t v38 = v10 + 1;
  if (v4 < v10 + 1) {
    unint64_t v38 = v4;
  }
  a1 += v38;
  v4 -= v38;
LABEL_41:
  if (!v4) {
    return 1;
  }
  int v39 = 0;
  int v40 = 72;
LABEL_43:
  uint64_t v41 = 0;
  int v42 = 1;
  int v43 = 36;
  int v44 = v39;
  while (1)
  {
    int v45 = (char)a1[v41];
    int v46 = v45 - 97;
    if ((v45 - 97) > 0x19)
    {
      if ((v45 - 65) > 9) {
        return 0;
      }
      int v46 = v45 - 39;
    }
    if (v46 < 0 || v46 > (v44 ^ 0x7FFFFFFF) / v42) {
      return 0;
    }
    v44 += v46 * v42;
    int v47 = v43 - v40;
    if (v43 >= v40 + 26) {
      int v47 = 26;
    }
    if (v43 <= v40) {
      int v47 = 1;
    }
    if (v46 < v47)
    {
      int v48 = v44 - v39;
      std::vector<unsigned int>::pointer v49 = v3->__begin_;
      uint64_t v50 = v3->__end_ - v3->__begin_;
      if (v39) {
        int v51 = 2;
      }
      else {
        int v51 = 700;
      }
      signed int v52 = v48 / v51 / ((int)v50 + 1) + v48 / v51;
      if (v52 < 456)
      {
        int v53 = 0;
      }
      else
      {
        int v53 = 0;
        unsigned int v54 = v52;
        do
        {
          signed int v52 = v54 / 0x23;
          v53 += 36;
          unsigned int v55 = v54 >> 3;
          v54 /= 0x23u;
        }
        while (v55 > 0x7CA);
      }
      unint64_t v56 = v50 + 1;
      unint64_t v57 = v44 / v56;
      std::vector<unsigned int>::value_type v58 = __x;
      if (v57 > (__x ^ 0x7FFFFFFF)) {
        return 0;
      }
      __x += v57;
      if (v58 + v57 < 0x80) {
        return 0;
      }
      unint64_t v67 = v4 - 1;
      uint64_t v59 = (uint64_t)&a1[v41 + 1];
      int v40 = 36 * v52 / (v52 + 38) + v53;
      unint64_t v60 = ~v41 + v4;
      unint64_t v61 = v44 % v56;
      v62.__i_ = &v49[(int)v61];
      std::vector<unsigned int>::insert(v3, v62, &__x);
      int v39 = v61 + 1;
      unint64_t v4 = v60;
      a1 = (unsigned __int8 *)v59;
      uint64_t result = 1;
      if (v67 != v41) {
        goto LABEL_43;
      }
      return result;
    }
    if (v42 <= 0x7FFFFFFF / (36 - v47))
    {
      v42 *= 36 - v47;
      v43 += 36;
      if (v4 != ++v41) {
        continue;
      }
    }
    return 0;
  }
}

std::vector<unsigned int>::iterator std::vector<unsigned int>::insert(std::vector<unsigned int> *this, std::vector<unsigned int>::const_iterator __position, std::vector<unsigned int>::const_reference __x)
{
  unint64_t v3 = (unsigned int *)__x;
  std::vector<unsigned int>::pointer begin = this->__begin_;
  std::vector<unsigned int>::pointer end = this->__end_;
  int64_t v7 = (char *)__position.__i_ - (char *)this->__begin_;
  uint64_t v8 = v7 >> 2;
  std::vector<unsigned int>::pointer v9 = (std::vector<unsigned int>::pointer)((char *)this->__begin_ + (v7 & 0xFFFFFFFFFFFFFFFCLL));
  value = this->__end_cap_.__value_;
  if (end < value)
  {
    if (v9 == end)
    {
      *std::vector<unsigned int>::pointer v9 = *__x;
      this->__end_ = v9 + 1;
      return (std::vector<unsigned int>::iterator)v9;
    }
    int64_t v11 = (char *)end - (char *)(v9 + 1);
    uint64_t v12 = v11 >> 2;
    std::vector<unsigned int>::pointer v13 = end - 1;
    if ((unint64_t)end < 4)
    {
      std::vector<unsigned int>::pointer v17 = this->__end_;
    }
    else
    {
      unint64_t v14 = (v7 & 0xFFFFFFFFFFFFFFFCLL) + v11;
      std::vector<unsigned int>::pointer v15 = (unsigned int *)((char *)begin + v14 + 4);
      if (end > v15) {
        std::vector<unsigned int>::pointer v15 = this->__end_;
      }
      unint64_t v16 = (unint64_t)v15 + ~(unint64_t)begin - v14;
      if (v16 >= 0x2C)
      {
        std::vector<unsigned int>::pointer v17 = this->__end_;
        if ((unint64_t)((char *)(v9 + 1) - ((char *)begin + (v7 & 0xFFFFFFFFFFFFFFFCLL))) >= 0x20)
        {
          uint64_t v47 = (v16 >> 2) + 1;
          uint64_t v48 = v47 & 0x7FFFFFFFFFFFFFF8;
          std::vector<unsigned int>::pointer v13 = (std::vector<unsigned int>::pointer)((char *)v13 + v48 * 4);
          std::vector<unsigned int>::pointer v17 = &end[v48];
          std::vector<unsigned int>::pointer v49 = end + 4;
          uint64_t v50 = &begin[v12 + 4 + v8];
          uint64_t v51 = v47 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            long long v52 = *(_OWORD *)v50;
            *(v49 - 1) = *((_OWORD *)v50 - 1);
            _OWORD *v49 = v52;
            v49 += 2;
            v50 += 8;
            v51 -= 8;
          }
          while (v51);
          if (v47 == (v47 & 0x7FFFFFFFFFFFFFF8)) {
            goto LABEL_49;
          }
        }
      }
      else
      {
        std::vector<unsigned int>::pointer v17 = this->__end_;
      }
      do
      {
        unsigned int v53 = *v13++;
        *v17++ = v53;
      }
      while (v13 < end);
    }
LABEL_49:
    this->__end_ = v17;
    if (end != v9 + 1) {
      memmove(&end[-v12], v9, v11);
    }
    if (v9 <= v3) {
      v3 += this->__end_ > v3;
    }
    *std::vector<unsigned int>::pointer v9 = *v3;
    return (std::vector<unsigned int>::iterator)v9;
  }
  unint64_t v18 = end - begin + 1;
  if (v18 >> 62) {
    abort();
  }
  uint64_t v20 = (char *)value - (char *)begin;
  if (v20 >> 1 > v18) {
    unint64_t v18 = v20 >> 1;
  }
  if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFFCLL) {
    unint64_t v21 = 0x3FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v21 = v18;
  }
  if (v21)
  {
    if (v21 >> 62) {
      goto LABEL_56;
    }
    uint64_t v22 = (char *)operator new(4 * v21);
  }
  else
  {
    uint64_t v22 = 0;
  }
  uint64_t v23 = (unsigned int *)&v22[4 * v8];
  unint64_t v24 = (unsigned int *)&v22[4 * v21];
  if (v8 != v21)
  {
LABEL_24:
    std::vector<unsigned int>::pointer v26 = begin;
    goto LABEL_25;
  }
  if (v7 >= 1)
  {
    unint64_t v25 = v8 + 2;
    if (v8 >= -1) {
      unint64_t v25 = v8 + 1;
    }
    v23 -= v25 >> 1;
    goto LABEL_24;
  }
  if (begin == __position.__i_) {
    unint64_t v43 = 1;
  }
  else {
    unint64_t v43 = v7 >> 1;
  }
  if (v43 >> 62) {
LABEL_56:
  }
    std::__throw_bad_array_new_length[abi:nn180100]();
  uint64_t v44 = 4 * v43;
  int v45 = (char *)operator new(4 * v43);
  uint64_t v23 = (unsigned int *)&v45[v43 & 0xFFFFFFFFFFFFFFFCLL];
  unint64_t v24 = (unsigned int *)&v45[v44];
  if (!v22) {
    goto LABEL_24;
  }
  int v46 = (unsigned int *)&v45[v44];
  operator delete(v22);
  unint64_t v24 = v46;
  std::vector<unsigned int>::pointer v26 = this->__begin_;
LABEL_25:
  unsigned int *v23 = *v3;
  unsigned int v27 = v23;
  if (v26 != v9)
  {
    unint64_t v28 = (char *)begin + (v7 & 0xFFFFFFFFFFFFFFFCLL);
    unint64_t v29 = v28 - (char *)v26 - 4;
    uint64_t v30 = v9;
    unsigned int v27 = v23;
    if (v29 < 0x2C) {
      goto LABEL_60;
    }
    uint64_t v30 = v9;
    unsigned int v27 = v23;
    if ((unint64_t)(v28 - (char *)v23) < 0x20) {
      goto LABEL_60;
    }
    uint64_t v31 = (v29 >> 2) + 1;
    uint64_t v32 = 4 * (v31 & 0x7FFFFFFFFFFFFFF8);
    uint64_t v30 = &v9[v32 / 0xFFFFFFFFFFFFFFFCLL];
    unsigned int v27 = &v23[v32 / 0xFFFFFFFFFFFFFFFCLL];
    int v33 = v23 - 4;
    std::string::size_type v34 = &begin[v8 - 4];
    uint64_t v35 = v31 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      long long v36 = *(_OWORD *)v34;
      *((_OWORD *)v33 - 1) = *((_OWORD *)v34 - 1);
      *(_OWORD *)int v33 = v36;
      v33 -= 8;
      v34 -= 8;
      v35 -= 8;
    }
    while (v35);
    if (v31 != (v31 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_60:
      do
      {
        unsigned int v37 = *--v30;
        *--unsigned int v27 = v37;
      }
      while (v30 != v26);
    }
  }
  std::vector<unsigned int>::pointer v38 = this->__end_;
  int64_t v39 = (char *)v38 - (char *)v9;
  if (v38 != v9)
  {
    std::vector<unsigned int>::pointer v40 = v9;
    size_t v41 = (char *)v38 - (char *)v9;
    int v42 = v24;
    memmove(v23 + 1, v40, v41);
    unint64_t v24 = v42;
    std::vector<unsigned int>::pointer v26 = this->__begin_;
  }
  this->__begin_ = v27;
  this->__end_ = (unsigned int *)((char *)v23 + v39 + 4);
  this->__end_cap_.__value_ = v24;
  if (v26) {
    operator delete(v26);
  }
  return (std::vector<unsigned int>::iterator)v23;
}

BOOL swift::Punycode::__runtime::encodePunycode(unsigned int **a1, std::string *this)
{
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
  {
    *this->__r_.__value_.__l.__data_ = 0;
    this->__r_.__value_.__l.__size_ = 0;
  }
  else
  {
    this->__r_.__value_.__s.__data_[0] = 0;
    *((unsigned char *)&this->__r_.__value_.__s + 23) = 0;
  }
  unint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  if (*a1 == v5)
  {
    unint64_t v6 = 0;
  }
  else
  {
    unint64_t v6 = 0;
    do
    {
      unsigned int v7 = *v4;
      if (*v4 <= 0x7F)
      {
        ++v6;
        std::string::push_back(this, v7);
      }
      else if (v7 >> 7 >= 0x1B1 && v7 - 57344 >= 0x102000)
      {
        BOOL result = 0;
        if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
        {
          *this->__r_.__value_.__l.__data_ = 0;
          this->__r_.__value_.__l.__size_ = 0;
        }
        else
        {
          this->__r_.__value_.__s.__data_[0] = 0;
          *((unsigned char *)&this->__r_.__value_.__s + 23) = 0;
        }
        return result;
      }
      ++v4;
    }
    while (v4 != v5);
    if (v6) {
      std::string::push_back(this, 95);
    }
  }
  unint64_t v10 = *a1;
  std::vector<unsigned int>::pointer v9 = a1[1];
  if (v6 >= v9 - *a1) {
    return 1;
  }
  uint64_t v35 = a1;
  int v11 = 0;
  int v12 = 72;
  unsigned int v13 = 128;
  unint64_t v14 = v6;
  unint64_t v36 = v6;
  do
  {
    unsigned int v15 = 1114111;
    for (i = v10; i != v9; ++i)
    {
      unsigned int v18 = *i;
      unsigned int v17 = v18;
      if (v18 < v15 && v17 >= v13) {
        unsigned int v15 = v17;
      }
    }
    unint64_t v20 = v15 - v13;
    unint64_t v21 = (v11 ^ 0x7FFFFFFFu) / (v14 + 1);
    BOOL result = v21 >= v20;
    if (v21 < v20) {
      break;
    }
    int v22 = v11 + v20 * (v14 + 1);
    if (v10 != v9)
    {
      unsigned int v37 = v9;
      while (1)
      {
        if (*v10 < v15)
        {
          if (v22 == 0x7FFFFFFF) {
            return 0;
          }
          ++v22;
        }
        if (*v10 == v15)
        {
          unint64_t v38 = v14;
          int v24 = 36 - v12;
          if (v12 <= 10) {
            int v24 = 26;
          }
          if (v12 >= 36) {
            int v24 = 1;
          }
          int v25 = v22;
          if (v22 >= v24)
          {
            int v26 = 72;
            int v25 = v22;
            do
            {
              int v27 = v25 - v24;
              int v25 = (v25 - v24) / (36 - v24);
              int v28 = v27 - v25 * (36 - v24) + v24;
              if (v28 >= 26) {
                char v29 = 39;
              }
              else {
                char v29 = 97;
              }
              std::string::push_back(this, v29 + v28);
              if (v26 - 26 >= v12) {
                int v24 = 26;
              }
              else {
                int v24 = v26 - v12;
              }
              if (v26 <= v12) {
                int v24 = 1;
              }
              v26 += 36;
            }
            while (v25 >= v24);
          }
          if (v25 >= 26) {
            char v30 = 39;
          }
          else {
            char v30 = 97;
          }
          std::string::push_back(this, v30 + v25);
          if (v38 == v36) {
            int v31 = 700;
          }
          else {
            int v31 = 2;
          }
          signed int v32 = v22 / v31 / ((int)v38 + 1) + v22 / v31;
          if (v32 < 456)
          {
            int v23 = 0;
          }
          else
          {
            int v23 = 0;
            unsigned int v33 = v32;
            do
            {
              signed int v32 = v33 / 0x23;
              v23 += 36;
              unsigned int v34 = v33 >> 3;
              v33 /= 0x23u;
            }
            while (v34 > 0x7CA);
          }
          int v22 = 0;
          int v12 = 36 * v32 / (v32 + 38) + v23;
          unint64_t v14 = v38 + 1;
          std::vector<unsigned int>::pointer v9 = v37;
        }
        if (++v10 == v9)
        {
          unint64_t v10 = *v35;
          std::vector<unsigned int>::pointer v9 = v35[1];
          goto LABEL_19;
        }
      }
    }
    std::vector<unsigned int>::pointer v9 = v10;
LABEL_19:
    int v11 = v22 + 1;
    unsigned int v13 = v15 + 1;
    BOOL result = 1;
  }
  while (v14 < v9 - v10);
  return result;
}

uint64_t swift::Punycode::__runtime::decodePunycodeUTF8(unsigned __int8 *a1, unint64_t a2, uint64_t a3)
{
  memset(&v17, 0, sizeof(v17));
  if (swift::Punycode::__runtime::decodePunycode(a1, a2, &v17))
  {
    std::vector<unsigned int>::pointer begin = v17.__begin_;
    std::vector<unsigned int>::pointer end = v17.__end_;
    if (v17.__begin_ == v17.__end_)
    {
      uint64_t v15 = 1;
      if (!v17.__begin_) {
        return v15;
      }
      goto LABEL_26;
    }
    while (1)
    {
      unsigned int v7 = *begin;
      unsigned int v8 = *begin >> 7;
      if (v8 >= 0x1B1 && v7 - 57344 >= 0x102000) {
        break;
      }
      if (v8 == 432) {
        v7 -= 55296;
      }
      if (v7 < 0x80)
      {
        std::string::value_type v6 = v7;
      }
      else
      {
        std::string::value_type v6 = v7 & 0x3F | 0x80;
        if (v7 >= 0x800)
        {
          unsigned int v11 = (v7 >> 6) & 0x3F | 0xFFFFFF80;
          if (v7 >= 0x10000)
          {
            unsigned int v14 = (v7 >> 12) & 0x3F | 0xFFFFFF80;
            std::string::push_back((std::string *)a3, (v7 >> 18) | 0xF0);
            unsigned int v13 = (std::string *)a3;
            LOBYTE(v12) = v14;
          }
          else
          {
            unsigned int v12 = (v7 >> 12) | 0xFFFFFFE0;
            unsigned int v13 = (std::string *)a3;
          }
          std::string::push_back(v13, v12);
          unint64_t v10 = (std::string *)a3;
          LOBYTE(v9) = v11;
        }
        else
        {
          unsigned int v9 = (v7 >> 6) | 0xFFFFFFC0;
          unint64_t v10 = (std::string *)a3;
        }
        std::string::push_back(v10, v9);
      }
      std::string::push_back((std::string *)a3, v6);
      if (++begin == end)
      {
        uint64_t v15 = 1;
        goto LABEL_25;
      }
    }
    uint64_t v15 = 0;
    if (*(char *)(a3 + 23) < 0)
    {
      **(unsigned char **)a3 = 0;
      *(void *)(a3 + 8) = 0;
    }
    else
    {
      *(unsigned char *)a3 = 0;
      *(unsigned char *)(a3 + 23) = 0;
    }
  }
  else
  {
    uint64_t v15 = 0;
  }
LABEL_25:
  std::vector<unsigned int>::pointer begin = v17.__begin_;
  if (v17.__begin_)
  {
LABEL_26:
    v17.__end_ = begin;
    operator delete(begin);
  }
  return v15;
}

BOOL swift::Punycode::__runtime::encodePunycodeUTF8(char *a1, unint64_t a2, std::string *a3, char a4)
{
  __p = 0;
  int v46 = 0;
  uint64_t v47 = 0;
  if (!a2)
  {
LABEL_68:
    BOOL v19 = swift::Punycode::__runtime::encodePunycode((unsigned int **)&__p, a3);
LABEL_69:
    size_t v41 = __p;
    if (__p) {
      goto LABEL_70;
    }
    return v19;
  }
  if (a2 >> 62) {
LABEL_74:
  }
    abort();
  unsigned int v7 = (unsigned int *)operator new(4 * a2);
  unsigned int v8 = (char *)&v7[a2];
  __p = v7;
  int v46 = v7;
  unsigned int v9 = (unsigned __int8 *)&a1[a2];
  char v44 = a4 ^ 1;
  uint64_t v47 = v8;
  unint64_t v10 = v7;
  while (1)
  {
    unsigned int v12 = (unsigned __int8 *)(a1 + 1);
    unsigned int v13 = *a1;
    if ((*a1 & 0x80000000) == 0)
    {
      if ((v13 & 0xFFFFFFDF) - 65 < 0x1A) {
        goto LABEL_18;
      }
      BOOL v15 = v13 == 95 || v13 - 48 < 0xA || v13 == 36;
      char v16 = v44;
      if (v15) {
        char v16 = 1;
      }
      if (v16)
      {
LABEL_18:
        ++a1;
        goto LABEL_40;
      }
      v13 |= 0xD800u;
      ++a1;
      goto LABEL_38;
    }
    if (v13 < 0xC0) {
      goto LABEL_72;
    }
    if (v13 <= 0xDF) {
      break;
    }
    uint64_t v18 = v9 - v12;
    if (v13 > 0xEF)
    {
      BOOL v19 = 0;
      if (v13 > 0xF7 || v18 < 3) {
        goto LABEL_69;
      }
      unsigned __int8 v23 = a1[1];
      if ((v23 & 0xC0) != 0x80) {
        goto LABEL_69;
      }
      unsigned __int8 v24 = a1[2];
      if ((v24 & 0xC0) != 0x80) {
        goto LABEL_69;
      }
      unsigned __int8 v25 = a1[3];
      if ((v25 & 0xC0) != 0x80) {
        goto LABEL_69;
      }
      a1 += 4;
      unsigned int v13 = ((v13 & 7) << 18) | ((v23 & 0x3F) << 12) | ((v24 & 0x3F) << 6) | v25 & 0x3F;
    }
    else
    {
      if (v18 < 2) {
        goto LABEL_72;
      }
      BOOL v19 = 0;
      unsigned __int8 v20 = a1[1];
      if ((v20 & 0xC0) != 0x80) {
        goto LABEL_69;
      }
      unsigned __int8 v21 = a1[2];
      if ((v21 & 0xC0) != 0x80) {
        goto LABEL_69;
      }
      a1 += 3;
      unsigned int v13 = ((v13 & 0xF) << 12) | ((v20 & 0x3F) << 6) | v21 & 0x3F;
    }
LABEL_38:
    if (v13 >> 7 >= 0x1B1 && (v13 - 57344) >> 13 > 0x80) {
      goto LABEL_72;
    }
LABEL_40:
    if (v7 >= (unsigned int *)v8)
    {
      uint64_t v26 = v7 - v10;
      unint64_t v27 = v26 + 1;
      if ((unint64_t)(v26 + 1) >> 62) {
        goto LABEL_74;
      }
      if ((v8 - (char *)v10) >> 1 > v27) {
        unint64_t v27 = (v8 - (char *)v10) >> 1;
      }
      if ((unint64_t)(v8 - (char *)v10) >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v28 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v28 = v27;
      }
      if (v28)
      {
        if (v28 >> 62) {
          std::__throw_bad_array_new_length[abi:nn180100]();
        }
        char v29 = operator new(4 * v28);
      }
      else
      {
        char v29 = 0;
      }
      char v30 = (unsigned int *)&v29[4 * v26];
      unsigned int *v30 = v13;
      unsigned int v11 = v30 + 1;
      if (v7 == v10) {
        goto LABEL_55;
      }
      unint64_t v31 = (char *)v7 - (char *)v10 - 4;
      if (v31 >= 0xBC)
      {
        unint64_t v34 = ((char *)(v7 - 1) - (char *)v10) & 0xFFFFFFFFFFFFFFFCLL;
        if (&v29[(char *)v7 - (char *)v10 - 4 - v34] > &v29[(char *)v7 - (char *)v10 - 4])
        {
          signed int v32 = v7;
        }
        else if ((unsigned int *)((char *)v7 - v34 - 4) > v7 - 1)
        {
          signed int v32 = v7;
        }
        else if ((unint64_t)((char *)v10 - v29) >= 0x20)
        {
          uint64_t v35 = (v31 >> 2) + 1;
          uint64_t v36 = 4 * (v35 & 0x7FFFFFFFFFFFFFF8);
          signed int v32 = &v7[v36 / 0xFFFFFFFFFFFFFFFCLL];
          char v30 = (unsigned int *)((char *)v30 - v36);
          unsigned int v37 = &v29[4 * v26 - 16];
          unint64_t v38 = v7 - 4;
          uint64_t v39 = v35 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            long long v40 = *(_OWORD *)v38;
            *(v37 - 1) = *((_OWORD *)v38 - 1);
            _OWORD *v37 = v40;
            v37 -= 2;
            v38 -= 8;
            v39 -= 8;
          }
          while (v39);
          if (v35 == (v35 & 0x7FFFFFFFFFFFFFF8)) {
            goto LABEL_55;
          }
        }
        else
        {
          signed int v32 = v7;
        }
      }
      else
      {
        signed int v32 = v7;
      }
      do
      {
        unsigned int v33 = *--v32;
        *--char v30 = v33;
      }
      while (v32 != v10);
LABEL_55:
      unsigned int v8 = &v29[4 * v28];
      __p = v30;
      uint64_t v47 = v8;
      if (v10) {
        operator delete(v10);
      }
      unint64_t v10 = v30;
      goto LABEL_5;
    }
    unsigned int *v7 = v13;
    unsigned int v11 = v7 + 1;
LABEL_5:
    int v46 = v11;
    unsigned int v7 = v11;
    if (a1 >= (char *)v9) {
      goto LABEL_68;
    }
  }
  if (v12 != v9)
  {
    unsigned __int8 v17 = *v12;
    if ((v17 & 0xC0) == 0x80)
    {
      a1 += 2;
      unsigned int v13 = v17 & 0x3F | ((v13 & 0x1F) << 6);
      goto LABEL_40;
    }
  }
LABEL_72:
  BOOL v19 = 0;
  size_t v41 = __p;
  if (!__p) {
    return v19;
  }
LABEL_70:
  operator delete(v41);
  return v19;
}

BOOL swift::Demangle::__runtime::SubstitutionEntry::identifierEquals(swift::Demangle::__runtime::SubstitutionEntry *this, swift::Demangle::__runtime::Node *a2, swift::Demangle::__runtime::Node *a3)
{
  size_t v3 = *((void *)this + 1);
  uint64_t v4 = *((void *)a2 + 1);
  unint64_t v5 = v3;
  if (v4 != v3) {
    return 0;
  }
  if (*((unsigned __int16 *)this + 8) == *((unsigned __int16 *)a2 + 8))
  {
    if (v3 == v4)
    {
      if (v3) {
        return memcmp(*(const void **)this, *(const void **)a2, v3) == 0;
      }
      return 1;
    }
    return 0;
  }
  if (!*((void *)this + 1)) {
    return 1;
  }
  uint64_t v10 = 0;
  BOOL v8 = 0;
  do
  {
    unsigned int v11 = *((unsigned __int16 *)this + 8) - 124;
    BOOL v12 = v11 > 0x33;
    uint64_t v13 = (1 << v11) & 0xA000000000001;
    if (v12 || v13 == 0) {
      unsigned __int8 v15 = *(unsigned char *)(*(void *)this + v10);
    }
    else {
      unsigned __int8 v15 = swift::Mangle::__runtime::translateOperatorChar((swift::Mangle::__runtime *)*(char *)(*(void *)this + v10));
    }
    unsigned int v16 = *((unsigned __int16 *)a2 + 8) - 124;
    if (v16 <= 0x33 && ((1 << v16) & 0xA000000000001) != 0) {
      unsigned __int8 v17 = swift::Mangle::__runtime::translateOperatorChar((swift::Mangle::__runtime *)*(char *)(*(void *)a2 + v10));
    }
    else {
      unsigned __int8 v17 = *(unsigned char *)(*(void *)a2 + v10);
    }
    if (v15 != v17) {
      break;
    }
    BOOL v8 = ++v10 >= v5;
  }
  while (v5 != v10);
  return v8;
}

uint64_t swift::Demangle::__runtime::SubstitutionEntry::deepEquals(swift::Demangle::__runtime::SubstitutionEntry *this, swift::Demangle::__runtime::Node *a2, swift::Demangle::__runtime::Node *a3)
{
  size_t v3 = (char *)a2 + 16;
  if (*((unsigned __int16 *)a2 + 8) != *((unsigned __int16 *)a3 + 8)) {
    return 0;
  }
  uint64_t v4 = a3;
  int v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != *((unsigned __int8 *)a3 + 18)) {
    return 0;
  }
  unsigned int v8 = v6 - 1;
  unsigned int v9 = a2;
  switch(*((unsigned char *)a2 + 18))
  {
    case 1:
    case 2:
      if (v8 >= 2) {
        goto LABEL_13;
      }
      goto LABEL_5;
    case 3:
      size_t v10 = *((void *)a2 + 1);
      if (v10 != *((void *)v4 + 1) || v10 && memcmp(*(const void **)a2, *(const void **)v4, v10)) {
        return 0;
      }
      goto LABEL_12;
    case 4:
      if (*(void *)a2 != *(void *)a3) {
        return 0;
      }
      goto LABEL_12;
    case 5:
      if (*((_DWORD *)a2 + 2) != *((_DWORD *)a3 + 2)) {
        return 0;
      }
      unsigned int v9 = *(swift::Demangle::__runtime::Node **)a2;
      goto LABEL_23;
    default:
LABEL_12:
      unsigned int v9 = 0;
      if (v8 < 2)
      {
LABEL_5:
        if (v6 != 5)
        {
LABEL_15:
          if (v6 != 2)
          {
            size_t v3 = v6 == 1 ? (char *)a2 + 8 : 0;
            if (v9 == (swift::Demangle::__runtime::Node *)v3) {
              return 1;
            }
          }
          goto LABEL_25;
        }
      }
      else
      {
LABEL_13:
        if (v6 != 5)
        {
          uint64_t v4 = 0;
          goto LABEL_15;
        }
LABEL_23:
        uint64_t v4 = *(swift::Demangle::__runtime::Node **)v4;
      }
      size_t v3 = (char *)(*(void *)a2 + 8 * *((unsigned int *)a2 + 2));
      if (v9 == (swift::Demangle::__runtime::Node *)v3) {
        return 1;
      }
LABEL_25:
      BOOL v12 = (char *)v9 + 8;
      do
      {
        uint64_t v13 = *(swift::Demangle::__runtime::Node **)v4;
        uint64_t v4 = (swift::Demangle::__runtime::Node *)((char *)v4 + 8);
        uint64_t result = swift::Demangle::__runtime::SubstitutionEntry::deepEquals(this, *((swift::Demangle::__runtime::Node **)v12 - 1), v13);
        if (result) {
          BOOL v14 = v12 == v3;
        }
        else {
          BOOL v14 = 1;
        }
        v12 += 8;
      }
      while (!v14);
      break;
  }
  return result;
}

uint64_t swift::Demangle::__runtime::RemanglerBase::hashForNode(swift::Demangle::__runtime::RemanglerBase *this, swift::Demangle::__runtime::Node *a2, BOOL a3)
{
  BOOL v3 = a3;
  uint64_t v5 = *((unsigned __int16 *)a2 + 8);
  if (a3)
  {
    if ((v5 - 124) <= 0x33 && ((1 << (v5 - 124)) & 0xA000000000001) != 0)
    {
      uint64_t v7 = *((void *)a2 + 1);
      if (!v7) {
        return 101;
      }
      unsigned int v8 = *(char **)a2;
      uint64_t v5 = 101;
      do
      {
        unsigned int v9 = *v8++;
        uint64_t v5 = 33 * v5 + swift::Mangle::__runtime::translateOperatorChar((swift::Mangle::__runtime *)v9);
        --v7;
      }
      while (v7);
      return v5;
    }
    uint64_t v5 = 101;
  }
  int v10 = *((unsigned __int8 *)a2 + 18);
  if (v10 == 3)
  {
    uint64_t v11 = *((void *)a2 + 1);
    if (!v11) {
      goto LABEL_23;
    }
    BOOL v12 = *(unsigned __int8 **)a2;
    do
    {
      unsigned int v13 = *v12++;
      uint64_t v5 = 33 * v5 + v13;
      --v11;
    }
    while (v11);
  }
  else if (v10 == 4)
  {
    uint64_t v5 = *(void *)a2 + 33 * v5;
    goto LABEL_23;
  }
  if ((v10 - 1) < 2)
  {
    BOOL v14 = (swift::Demangle::__runtime::Node **)a2;
    if (v10 != 1) {
      goto LABEL_24;
    }
LABEL_20:
    unsigned __int8 v15 = (swift::Demangle::__runtime::Node **)((char *)a2 + 8);
    goto LABEL_31;
  }
  if (v10 == 5)
  {
    uint64_t v16 = *(void *)a2;
    BOOL v14 = *(swift::Demangle::__runtime::Node ***)a2;
LABEL_27:
    unsigned __int8 v15 = (swift::Demangle::__runtime::Node **)(v16 + 8 * *((unsigned int *)a2 + 2));
    goto LABEL_31;
  }
LABEL_23:
  BOOL v14 = 0;
  if (v10 == 1) {
    goto LABEL_20;
  }
LABEL_24:
  if (v10 == 2)
  {
    unsigned __int8 v15 = (swift::Demangle::__runtime::Node **)((char *)a2 + 16);
  }
  else
  {
    if (v10 == 5)
    {
      uint64_t v16 = *(void *)a2;
      goto LABEL_27;
    }
    unsigned __int8 v15 = 0;
  }
LABEL_31:
  while (v14 != v15)
  {
    unsigned __int8 v17 = *v14++;
    swift::Demangle::__runtime::RemanglerBase::entryForNode(v19, this, v17, v3);
    uint64_t v5 = v19[1] + 33 * v5;
  }
  return v5;
}

__n128 swift::Demangle::__runtime::RemanglerBase::entryForNode@<Q0>(uint64_t *__return_ptr a1@<X8>, swift::Demangle::__runtime::RemanglerBase *this@<X0>, swift::Demangle::__runtime::Node *a3@<X1>, int a4@<W2>)
{
  char v4 = a4;
  uint64_t v7 = 4;
  if (!a4) {
    uint64_t v7 = 0;
  }
  unint64_t v8 = v7 + ((unint64_t)(2043 * (void)a3) >> 12);
  unsigned int v9 = (char *)this + 24 * (v8 & 0x1FF);
  __n128 result = *(__n128 *)(v9 + 8);
  *(__n128 *)a1 = result;
  a1[2] = *((void *)v9 + 3);
  if (!*a1) {
    goto LABEL_30;
  }
  if ((swift::Demangle::__runtime::Node *)*a1 != a3 || *((unsigned __int8 *)a1 + 16) != a4)
  {
    unsigned int v9 = (char *)this + 24 * (((unsigned __int16)v8 + 1) & 0x1FF);
    __n128 result = *(__n128 *)(v9 + 8);
    *(__n128 *)a1 = result;
    a1[2] = *((void *)v9 + 3);
    if (*a1)
    {
      if ((swift::Demangle::__runtime::Node *)*a1 == a3 && *((unsigned __int8 *)a1 + 16) == a4) {
        return result;
      }
      unsigned int v9 = (char *)this + 24 * (((unsigned __int16)v8 + 2) & 0x1FF);
      __n128 result = *(__n128 *)(v9 + 8);
      *(__n128 *)a1 = result;
      a1[2] = *((void *)v9 + 3);
      if (*a1)
      {
        if ((swift::Demangle::__runtime::Node *)*a1 == a3 && *((unsigned __int8 *)a1 + 16) == a4) {
          return result;
        }
        unsigned int v9 = (char *)this + 24 * (((unsigned __int16)v8 + 3) & 0x1FF);
        __n128 result = *(__n128 *)(v9 + 8);
        *(__n128 *)a1 = result;
        a1[2] = *((void *)v9 + 3);
        if (*a1)
        {
          if ((swift::Demangle::__runtime::Node *)*a1 == a3 && *((unsigned __int8 *)a1 + 16) == a4) {
            return result;
          }
          unsigned int v9 = (char *)this + 24 * (((unsigned __int16)v8 + 4) & 0x1FF);
          __n128 result = *(__n128 *)(v9 + 8);
          *(__n128 *)a1 = result;
          a1[2] = *((void *)v9 + 3);
          if (*a1)
          {
            if ((swift::Demangle::__runtime::Node *)*a1 == a3 && *((unsigned __int8 *)a1 + 16) == a4) {
              return result;
            }
            unsigned int v9 = (char *)this + 24 * (((unsigned __int16)v8 + 5) & 0x1FF);
            __n128 result = *(__n128 *)(v9 + 8);
            *(__n128 *)a1 = result;
            a1[2] = *((void *)v9 + 3);
            if (*a1)
            {
              if ((swift::Demangle::__runtime::Node *)*a1 == a3 && *((unsigned __int8 *)a1 + 16) == a4) {
                return result;
              }
              unsigned int v9 = (char *)this + 24 * (((unsigned __int16)v8 + 6) & 0x1FF);
              __n128 result = *(__n128 *)(v9 + 8);
              *(__n128 *)a1 = result;
              a1[2] = *((void *)v9 + 3);
              if (*a1)
              {
                if ((swift::Demangle::__runtime::Node *)*a1 == a3 && *((unsigned __int8 *)a1 + 16) == a4) {
                  return result;
                }
                BOOL v12 = (char *)this + 24 * (((unsigned __int16)v8 + 7) & 0x1FF);
                __n128 result = *(__n128 *)(v12 + 8);
                *(__n128 *)a1 = result;
                a1[2] = *((void *)v12 + 3);
                if (*a1)
                {
                  if ((swift::Demangle::__runtime::Node *)*a1 != a3 || *((unsigned __int8 *)a1 + 16) != a4)
                  {
                    uint64_t v13 = swift::Demangle::__runtime::RemanglerBase::hashForNode(this, a3, a4);
                    *((unsigned char *)a1 + 16) = v4;
                    *a1 = (uint64_t)a3;
                    a1[1] = v13;
                  }
                  return result;
                }
                BOOL v14 = v12 + 8;
LABEL_31:
                uint64_t v15 = swift::Demangle::__runtime::RemanglerBase::hashForNode(this, a3, a4);
                *((unsigned char *)a1 + 16) = v4;
                *a1 = (uint64_t)a3;
                a1[1] = v15;
                v14[16] = v4;
                __n128 result = *(__n128 *)a1;
                *(_OWORD *)BOOL v14 = *(_OWORD *)a1;
                return result;
              }
            }
          }
        }
      }
    }
LABEL_30:
    BOOL v14 = v9 + 8;
    goto LABEL_31;
  }
  return result;
}

unint64_t swift::Demangle::__runtime::RemanglerBase::findSubstitution(swift::Demangle::__runtime::RemanglerBase *this, swift::Demangle::__runtime::Node **a2)
{
  char v4 = (swift::Demangle::__runtime::RemanglerBase *)((char *)this + 12296);
  uint64_t v5 = *((void *)this + 1585);
  if (v5)
  {
    int v6 = (char *)v4 + 24 * v5;
    uint64_t v7 = 24 * v5;
    unint64_t v8 = (swift::Demangle::__runtime::RemanglerBase *)((char *)this + 12296);
    do
    {
      if (*((swift::Demangle::__runtime::Node **)v8 + 1) == a2[1]
        && *((unsigned __int8 *)v8 + 16) == *((unsigned __int8 *)a2 + 16))
      {
        unsigned int v9 = *a2;
        if (*((unsigned char *)v8 + 16))
        {
          if (swift::Demangle::__runtime::SubstitutionEntry::identifierEquals(*(swift::Demangle::__runtime::SubstitutionEntry **)v8, *a2, v9))
          {
            goto LABEL_11;
          }
        }
        else if (swift::Demangle::__runtime::SubstitutionEntry::deepEquals(v8, *(swift::Demangle::__runtime::Node **)v8, v9))
        {
          goto LABEL_11;
        }
      }
      unint64_t v8 = (swift::Demangle::__runtime::SubstitutionEntry *)((char *)v8 + 24);
      v7 -= 24;
    }
    while (v7);
    unint64_t v8 = (swift::Demangle::__runtime::SubstitutionEntry *)v6;
LABEL_11:
    uint64_t v5 = *((void *)this + 1585);
  }
  else
  {
    unint64_t v8 = (swift::Demangle::__runtime::RemanglerBase *)((char *)this + 12296);
  }
  unint64_t result = 0xAAAAAAAAAAAAAAABLL * ((v8 - v4) >> 3);
  if (result == v5)
  {
    uint64_t v11 = std::__hash_table<std::__hash_value_type<swift::Demangle::__runtime::SubstitutionEntry,unsigned int>,std::__unordered_map_hasher<swift::Demangle::__runtime::SubstitutionEntry,std::__hash_value_type<swift::Demangle::__runtime::SubstitutionEntry,unsigned int>,swift::Demangle::__runtime::SubstitutionEntry::Hasher,std::equal_to<swift::Demangle::__runtime::SubstitutionEntry>,true>,std::__unordered_map_equal<swift::Demangle::__runtime::SubstitutionEntry,std::__hash_value_type<swift::Demangle::__runtime::SubstitutionEntry,unsigned int>,std::equal_to<swift::Demangle::__runtime::SubstitutionEntry>,swift::Demangle::__runtime::SubstitutionEntry::Hasher,true>,std::allocator<std::__hash_value_type<swift::Demangle::__runtime::SubstitutionEntry,unsigned int>>>::find<swift::Demangle::__runtime::SubstitutionEntry>((void *)this + 1586, (uint64_t)a2);
    if (v11) {
      return *((unsigned int *)v11 + 10);
    }
    else {
      return 0xFFFFFFFFLL;
    }
  }
  return result;
}

char *swift::Demangle::__runtime::RemanglerBase::addSubstitution(char *this, const swift::Demangle::__runtime::SubstitutionEntry *a2)
{
  unint64_t v2 = *((void *)this + 1585);
  if (v2 > 0xF)
  {
    int v5 = *((_DWORD *)this + 3178) + 16;
    long long v6 = *(_OWORD *)a2;
    uint64_t v7 = *((void *)a2 + 2);
    int v8 = v5;
    return std::__hash_table<std::__hash_value_type<swift::Demangle::__runtime::SubstitutionEntry,unsigned int>,std::__unordered_map_hasher<swift::Demangle::__runtime::SubstitutionEntry,std::__hash_value_type<swift::Demangle::__runtime::SubstitutionEntry,unsigned int>,swift::Demangle::__runtime::SubstitutionEntry::Hasher,std::equal_to<swift::Demangle::__runtime::SubstitutionEntry>,true>,std::__unordered_map_equal<swift::Demangle::__runtime::SubstitutionEntry,std::__hash_value_type<swift::Demangle::__runtime::SubstitutionEntry,unsigned int>,std::equal_to<swift::Demangle::__runtime::SubstitutionEntry>,swift::Demangle::__runtime::SubstitutionEntry::Hasher,true>,std::allocator<std::__hash_value_type<swift::Demangle::__runtime::SubstitutionEntry,unsigned int>>>::__emplace_unique_key_args<swift::Demangle::__runtime::SubstitutionEntry,std::pair<swift::Demangle::__runtime::SubstitutionEntry const,unsigned int>>((uint64_t)(this + 12688), (uint64_t)&v6, &v6);
  }
  else
  {
    *((void *)this + 1585) = v2 + 1;
    uint64_t v3 = (uint64_t)&this[24 * v2 + 12296];
    long long v4 = *(_OWORD *)a2;
    *(unsigned char *)(v3 + 16) = *((unsigned char *)a2 + 16);
    *(_OWORD *)uint64_t v3 = v4;
  }
  return this;
}

size_t *swift::Demangle::__runtime::mangleNode(swift::Demangle::__runtime *this, swift::Demangle::__runtime::Node *a2)
{
  return swift::Demangle::__runtime::mangleNode();
}

size_t *swift::Demangle::__runtime::mangleNode()
{
  unint64_t result = (size_t *)__chkstk_darwin();
  uint64_t v4 = v3;
  if (!result)
  {
    *(_DWORD *)uint64_t v3 = 0;
    *(void *)(v3 + 8) = 0;
    *(_DWORD *)(v3 + 16) = 0;
    *(void *)(v3 + 32) = 0;
    *(void *)(v3 + 40) = 0;
    *(void *)(v3 + 24) = 0;
    return result;
  }
  uint64_t v5 = v2;
  uint64_t v6 = v1;
  uint64_t v7 = result;
  unint64_t v79 = off_C9418;
  v80 = 0;
  v81 = 0;
  char v82 = 0;
  uint64_t v84 = 0;
  char v85 = 0;
  char v23 = 0;
  v22[1540] = 0;
  unsigned __int8 v21 = &v79;
  v22[1539] = 0;
  char v26 = 0;
  uint64_t v25 = 0;
  uint64_t v24 = 0;
  char v29 = 0;
  uint64_t v28 = 0;
  uint64_t v27 = 0;
  char v32 = 0;
  uint64_t v31 = 0;
  uint64_t v30 = 0;
  char v35 = 0;
  uint64_t v34 = 0;
  uint64_t v33 = 0;
  char v38 = 0;
  uint64_t v37 = 0;
  uint64_t v36 = 0;
  char v41 = 0;
  uint64_t v40 = 0;
  uint64_t v39 = 0;
  char v44 = 0;
  uint64_t v42 = 0;
  uint64_t v43 = 0;
  char v47 = 0;
  uint64_t v45 = 0;
  uint64_t v46 = 0;
  char v50 = 0;
  uint64_t v48 = 0;
  uint64_t v49 = 0;
  char v53 = 0;
  uint64_t v51 = 0;
  uint64_t v52 = 0;
  char v56 = 0;
  uint64_t v54 = 0;
  uint64_t v55 = 0;
  char v59 = 0;
  uint64_t v58 = 0;
  uint64_t v57 = 0;
  char v62 = 0;
  uint64_t v60 = 0;
  uint64_t v61 = 0;
  char v65 = 0;
  uint64_t v63 = 0;
  uint64_t v64 = 0;
  long long v66 = 0u;
  long long v67 = 0u;
  uint64_t v68 = 0;
  bzero(v22, 0x3011uLL);
  int v69 = 1065353216;
  uint64_t v72 = &v79;
  uint64_t v83 = 4800;
  int v8 = malloc_type_malloc(0x12C8uLL, 0xD0263BC5uLL);
  unsigned int v9 = v82;
  char v82 = v8;
  void *v8 = v9;
  v80 = v8 + 5;
  v81 = v8 + 601;
  __src = v8 + 1;
  size_t __len = 0x2000000000;
  char v73 = 1;
  long long v74 = 0u;
  long long v75 = 0u;
  memset(v76, 0, sizeof(v76));
  uint64_t v77 = v6;
  uint64_t v78 = v5;
  if (v19)
  {
    *(_OWORD *)uint64_t v4 = v19;
    *(void *)(v4 + 16) = v20;
    *(void *)(v4 + 24) = 0;
    *(void *)(v4 + 32) = 0;
    *(void *)(v4 + 40) = 0;
    int v10 = (void *)*((void *)&v67 + 1);
    if (*((void *)&v67 + 1)) {
      goto LABEL_4;
    }
    goto LABEL_5;
  }
  uint64_t v13 = __src;
  if (!__src)
  {
    long long v17 = 0uLL;
    uint64_t v18 = 0;
    goto LABEL_22;
  }
  size_t v14 = __len;
  if (__len >= 0x17)
  {
    if ((__len | 7) == 0x17) {
      uint64_t v16 = (__len & 0xFFFFFFF8) + 8;
    }
    else {
      uint64_t v16 = __len | 7;
    }
    uint64_t v15 = (long long *)operator new(v16 + 1);
    *((void *)&v17 + 1) = v14;
    uint64_t v18 = v16 - 0x7FFFFFFFFFFFFFFFLL;
    *(void *)&long long v17 = v15;
  }
  else
  {
    HIBYTE(v18) = __len;
    uint64_t v15 = &v17;
    if (!__len) {
      goto LABEL_21;
    }
  }
  memmove(v15, v13, v14);
LABEL_21:
  *((unsigned char *)v15 + v14) = 0;
LABEL_22:
  *(_DWORD *)uint64_t v4 = 0;
  *(void *)(v4 + 8) = 0;
  *(_DWORD *)(v4 + 16) = 0;
  *(_OWORD *)(v4 + 24) = v17;
  *(void *)(v4 + 40) = v18;
  int v10 = (void *)*((void *)&v67 + 1);
  if (*((void *)&v67 + 1))
  {
    do
    {
LABEL_4:
      uint64_t v11 = (void *)*v10;
      operator delete(v10);
      int v10 = v11;
    }
    while (v11);
  }
LABEL_5:
  BOOL v12 = (void *)*((void *)&v66 + 1);
  *((void *)&v66 + 1) = 0;
  if (v12) {
    operator delete(v12);
  }
  unint64_t v79 = off_C9418;
  unint64_t result = swift::Demangle::__runtime::NodeFactory::freeSlabs(v82);
  if (v84) {
    *(unsigned char *)(v84 + 48) = 0;
  }
  return result;
}

void anonymous namespace'::Remangler::mangle(uint64_t *__return_ptr a1@<X8>, _anonymous_namespace_::Remangler *this@<X0>, size_t *a3@<X1>, unsigned int a4@<W2>)
{
  if (a4 <= 0x400)
  {
    int v6 = a4;
    while (2)
    {
      uint64_t v8 = 0;
      switch(*((_WORD *)a3 + 8))
      {
        case 0:
          int v13 = v6 + 1;
          size_t v14 = a1;
          uint64_t v15 = (char **)this;
          char v16 = 67;
          goto LABEL_86;
        case 1:
          return;
        case 2:
          return;
        case 3:
          long long v17 = a1;
          uint64_t v18 = (unsigned int *)this;
          int v19 = v6;
          goto LABEL_31;
        case 4:
          *(_DWORD *)a1 = 7;
          a1[1] = (uint64_t)a3;
          int v5 = 733;
          goto LABEL_3;
        case 5:
          return;
        case 6:
          return;
        case 7:
          return;
        case 8:
          return;
        case 9:
          return;
        case 0xA:
          return;
        case 0xB:
          return;
        case 0xC:
          return;
        case 0xD:
        case 0xF:
        case 0x10:
        case 0x11:
        case 0x12:
        case 0x18:
        case 0x3D:
        case 0xA7:
        case 0xDB:
        case 0xEA:
          return;
        case 0xE:
          return;
        case 0x13:
          return;
        case 0x14:
          return;
        case 0x15:
          unsigned int v9 = (char **)((char *)this + 12728);
          uint64_t v11 = (void *)*((void *)this + 1593);
          BOOL v12 = "BT";
          goto LABEL_856;
        case 0x16:
          return;
        case 0x17:
          return;
        case 0x19:
          return;
        case 0x1A:
          return;
        case 0x1B:
          return;
        case 0x1C:
          return;
        case 0x1D:
          size_t v14 = a1;
          uint64_t v15 = (char **)this;
          char v16 = 99;
          int v13 = v6;
LABEL_86:
          return;
        case 0x1E:
          return;
        case 0x1F:
          return;
        case 0x20:
          unsigned int v20 = v6 + 1;
          unsigned __int8 v21 = a1;
          int v22 = this;
          goto LABEL_97;
        case 0x21:
          return;
        case 0x22:
          return;
        case 0x23:
          return;
        case 0x24:
          return;
        case 0x25:
          *(_DWORD *)a1 = 7;
          a1[1] = (uint64_t)a3;
          int v5 = 1138;
          goto LABEL_3;
        case 0x26:
          return;
        case 0x27:
          return;
        case 0x28:
          return;
        case 0x29:
          return;
        case 0x2A:
          return;
        case 0x2B:
          char v23 = a1;
          uint64_t v24 = (uint64_t *)this;
          int v25 = v6;
          goto LABEL_134;
        case 0x2C:
          return;
        case 0x2D:
          return;
        case 0x2E:
          int v25 = v6 + 1;
          char v23 = a1;
          uint64_t v24 = (uint64_t *)this;
LABEL_134:
          return;
        case 0x2F:
          return;
        case 0x30:
          return;
        case 0x31:
          return;
        case 0x32:
          return;
        case 0x33:
          return;
        case 0x34:
          return;
        case 0x35:
          unsigned int v9 = (char **)((char *)this + 12728);
          uint64_t v11 = (void *)*((void *)this + 1593);
          BOOL v12 = "TE";
          goto LABEL_856;
        case 0x36:
          unsigned int v9 = (char **)((char *)this + 12728);
          uint64_t v11 = (void *)*((void *)this + 1593);
          BOOL v12 = "TF";
          goto LABEL_856;
        case 0x37:
          unsigned int v9 = (char **)((char *)this + 12728);
          uint64_t v11 = (void *)*((void *)this + 1593);
          BOOL v12 = "TD";
          goto LABEL_856;
        case 0x38:
          unsigned int v9 = (char **)((char *)this + 12728);
          uint64_t v11 = (void *)*((void *)this + 1593);
          BOOL v12 = "Td";
          goto LABEL_856;
        case 0x39:
          return;
        case 0x3A:
          unsigned int v9 = (char **)((char *)this + 12728);
          uint64_t v11 = (void *)*((void *)this + 1593);
          BOOL v12 = "TI";
          goto LABEL_856;
        case 0x3B:
          unsigned int v9 = (char **)((char *)this + 12728);
          uint64_t v11 = (void *)*((void *)this + 1593);
          BOOL v12 = "Tx";
          goto LABEL_856;
        case 0x3C:
          unsigned int v9 = (char **)((char *)this + 12728);
          uint64_t v11 = (void *)*((void *)this + 1593);
          BOOL v12 = "TX";
          goto LABEL_856;
        case 0x3E:
          return;
        case 0x3F:
          unsigned int v9 = (char **)((char *)this + 12728);
          uint64_t v11 = (void *)*((void *)this + 1593);
          BOOL v12 = "Xe";
          goto LABEL_856;
        case 0x40:
          return;
        case 0x41:
          return;
        case 0x42:
          unsigned int v9 = (char **)((char *)this + 12728);
          uint64_t v11 = (void *)*((void *)this + 1593);
          BOOL v12 = "Yb";
          goto LABEL_856;
        case 0x43:
          return;
        case 0x44:
          return;
        case 0x45:
          return;
        case 0x46:
          return;
        case 0x47:
          return;
        case 0x48:
          return;
        case 0x49:
          return;
        case 0x4A:
          return;
        case 0x4B:
          return;
        case 0x4C:
          return;
        case 0x4D:
          return;
        case 0x4E:
        case 0x4F:
          return;
        case 0x50:
          *(_DWORD *)a1 = 7;
          a1[1] = (uint64_t)a3;
          int v5 = 1634;
          goto LABEL_3;
        case 0x51:
          *(_DWORD *)a1 = 7;
          a1[1] = (uint64_t)a3;
          int v5 = 1641;
          goto LABEL_3;
        case 0x52:
          char v26 = a1;
          uint64_t v27 = (uint64_t *)this;
          int v28 = v6;
          goto LABEL_213;
        case 0x53:
          return;
        case 0x54:
          return;
        case 0x55:
          unsigned int v9 = (char **)((char *)this + 12728);
          uint64_t v11 = (void *)*((void *)this + 1593);
          BOOL v12 = "s";
          size_t v10 = 1;
          goto LABEL_857;
        case 0x56:
          char v29 = a1;
          uint64_t v30 = (char **)this;
          int v31 = v6;
          goto LABEL_223;
        case 0x57:
          int v31 = v6 + 1;
          char v29 = a1;
          uint64_t v30 = (char **)this;
LABEL_223:
          return;
        case 0x58:
          return;
        case 0x59:
          return;
        case 0x5A:
          return;
        case 0x5B:
          char v32 = "Tg";
          goto LABEL_241;
        case 0x5C:
          char v32 = "TG";
          goto LABEL_241;
        case 0x5D:
          char v32 = "TB";
          goto LABEL_241;
        case 0x5E:
          *(_DWORD *)a1 = 7;
          a1[1] = (uint64_t)a3;
          int v5 = 1749;
          goto LABEL_3;
        case 0x5F:
          char v32 = "Ts";
          goto LABEL_241;
        case 0x60:
          char v32 = "Ti";
LABEL_241:
          return;
        case 0x61:
          return;
        case 0x62:
          return;
        case 0x63:
          return;
        case 0x64:
          return;
        case 0x65:
          uint64_t v33 = a1;
          uint64_t v34 = this;
          goto LABEL_258;
        case 0x66:
          *(_DWORD *)a1 = 7;
          a1[1] = (uint64_t)a3;
          int v5 = 1834;
          goto LABEL_3;
        case 0x67:
          return;
        case 0x68:
          return;
        case 0x69:
          return;
        case 0x6A:
          return;
        case 0x6B:
          char v35 = a1;
          uint64_t v36 = (unsigned int *)this;
          goto LABEL_274;
        case 0x6C:
          return;
        case 0x6D:
          return;
        case 0x6E:
          return;
        case 0x6F:
          return;
        case 0x70:
          *(_DWORD *)a1 = 7;
          a1[1] = (uint64_t)a3;
          int v5 = 1919;
          goto LABEL_3;
        case 0x71:
          return;
        case 0x72:
          *(_DWORD *)a1 = 7;
          a1[1] = (uint64_t)a3;
          int v5 = 1949;
          goto LABEL_3;
        case 0x73:
          return;
        case 0x74:
          *(_DWORD *)a1 = 7;
          a1[1] = (uint64_t)a3;
          int v5 = 1960;
          goto LABEL_3;
        case 0x75:
          return;
        case 0x76:
          *(_DWORD *)a1 = 7;
          a1[1] = (uint64_t)a3;
          int v5 = 2165;
          goto LABEL_3;
        case 0x77:
          *(_DWORD *)a1 = 7;
          a1[1] = (uint64_t)a3;
          int v5 = 1966;
          goto LABEL_3;
        case 0x78:
          *(_DWORD *)a1 = 7;
          a1[1] = (uint64_t)a3;
          int v5 = 2170;
          goto LABEL_3;
        case 0x79:
          *(_DWORD *)a1 = 7;
          a1[1] = (uint64_t)a3;
          int v5 = 2175;
          goto LABEL_3;
        case 0x7A:
          *(_DWORD *)a1 = 7;
          a1[1] = (uint64_t)a3;
          int v5 = 2180;
          goto LABEL_3;
        case 0x7B:
          return;
        case 0x7C:
          return;
        case 0x7D:
          return;
        case 0x7E:
          return;
        case 0x7F:
          return;
        case 0x80:
          return;
        case 0x81:
          unsigned int v9 = (char **)((char *)this + 12728);
          uint64_t v11 = (void *)*((void *)this + 1593);
          BOOL v12 = "YA";
          goto LABEL_856;
        case 0x82:
          unsigned int v9 = (char **)((char *)this + 12728);
          uint64_t v11 = (void *)*((void *)this + 1593);
          BOOL v12 = "YT";
          goto LABEL_856;
        case 0x83:
          int v37 = v6 + 1;
          char v38 = "TK";
          goto LABEL_328;
        case 0x84:
          int v37 = v6 + 1;
          char v38 = "Tk";
          goto LABEL_328;
        case 0x85:
          int v37 = v6 + 1;
          char v38 = "TH";
          goto LABEL_328;
        case 0x86:
          int v37 = v6 + 1;
          char v38 = "Th";
LABEL_328:
          return;
        case 0x87:
          return;
        case 0x88:
          return;
        case 0x89:
          return;
        case 0x8A:
          return;
        case 0x8B:
          return;
        case 0x8C:
          return;
        case 0x8D:
          return;
        case 0x8E:
          return;
        case 0x8F:
          return;
        case 0x90:
          unsigned int v9 = (char **)((char *)this + 12728);
          uint64_t v11 = (void *)*((void *)this + 1593);
          BOOL v12 = "Tm";
          goto LABEL_856;
        case 0x91:
          return;
        case 0x92:
          return;
        case 0x93:
          return;
        case 0x94:
          return;
        case 0x95:
          return;
        case 0x96:
          return;
        case 0x97:
          return;
        case 0x98:
          return;
        case 0x99:
          return;
        case 0x9A:
          return;
        case 0x9B:
          return;
        case 0x9C:
          return;
        case 0x9D:
          return;
        case 0x9E:
          return;
        case 0x9F:
          return;
        case 0xA0:
          unsigned int v9 = (char **)((char *)this + 12728);
          uint64_t v11 = (void *)*((void *)this + 1593);
          BOOL v12 = "TO";
          goto LABEL_856;
        case 0xA1:
        case 0xE7:
          goto LABEL_858;
        case 0xA2:
          return;
        case 0xA3:
          return;
        case 0xA4:
          unsigned int v9 = (char **)((char *)this + 12728);
          uint64_t v11 = (void *)*((void *)this + 1593);
          BOOL v12 = "To";
          goto LABEL_856;
        case 0xA5:
          return;
        case 0xA6:
          return;
        case 0xA8:
          return;
        case 0xA9:
          return;
        case 0xAA:
          return;
        case 0xAB:
          return;
        case 0xAC:
          return;
        case 0xAD:
          return;
        case 0xAE:
          return;
        case 0xAF:
          return;
        case 0xB0:
          return;
        case 0xB1:
          return;
        case 0xB2:
          return;
        case 0xB3:
          return;
        case 0xB4:
          return;
        case 0xB5:
        case 0xE9:
        case 0x12D:
          goto LABEL_7;
        case 0xB6:
          return;
        case 0xB7:
          return;
        case 0xB8:
          return;
        case 0xB9:
          return;
        case 0xBA:
          return;
        case 0xBB:
          return;
        case 0xBC:
          return;
        case 0xBD:
          return;
        case 0xBE:
          return;
        case 0xBF:
          return;
        case 0xC0:
          return;
        case 0xC1:
          return;
        case 0xC2:
          return;
        case 0xC3:
          return;
        case 0xC4:
          return;
        case 0xC5:
          return;
        case 0xC6:
          return;
        case 0xC7:
          return;
        case 0xC8:
          return;
        case 0xC9:
          return;
        case 0xCA:
          return;
        case 0xCB:
          return;
        case 0xCC:
          return;
        case 0xCD:
          return;
        case 0xCE:
          return;
        case 0xCF:
          int v19 = v6 + 1;
          long long v17 = a1;
          uint64_t v18 = (unsigned int *)this;
LABEL_31:
          return;
        case 0xD0:
          return;
        case 0xD1:
          return;
        case 0xD2:
          return;
        case 0xD3:
          return;
        case 0xD4:
          *(_DWORD *)a1 = 7;
          a1[1] = (uint64_t)a3;
          int v5 = 3634;
          goto LABEL_3;
        case 0xD5:
          *(_DWORD *)a1 = 7;
          a1[1] = (uint64_t)a3;
          int v5 = 3639;
          goto LABEL_3;
        case 0xD6:
          *(_DWORD *)a1 = 7;
          a1[1] = (uint64_t)a3;
          int v5 = 3645;
          goto LABEL_3;
        case 0xD7:
          return;
        case 0xD8:
          swift::Demangle::__runtime::CharVector::append((unsigned int *)this + 3182, *a3, *((swift::Demangle::__runtime::NodeFactory **)this + 1593));
          goto LABEL_858;
        case 0xD9:
          return;
        case 0xDA:
          return;
        case 0xDC:
        case 0xFE:
          return;
        case 0xDD:
        case 0x147:
          unsigned int v9 = (char **)((char *)this + 12728);
          size_t v10 = a3[1];
          uint64_t v11 = (void *)*((void *)this + 1593);
          BOOL v12 = (const char *)*a3;
          goto LABEL_857;
        case 0xDE:
          return;
        case 0xDF:
          return;
        case 0xE0:
          return;
        case 0xE1:
          uint64_t v33 = a1;
          uint64_t v34 = this;
LABEL_258:
          return;
        case 0xE2:
          return;
        case 0xE3:
          return;
        case 0xE4:
          return;
        case 0xE5:
          return;
        case 0xE6:
          return;
        case 0xE8:
          unsigned int v20 = v6 + 1;
          unsigned __int8 v21 = a1;
          int v22 = this;
LABEL_97:
          return;
        case 0xEB:
          return;
        case 0xEC:
          return;
        case 0xED:
          return;
        case 0xEE:
          return;
        case 0xEF:
          return;
        case 0xF0:
          return;
        case 0xF1:
          return;
        case 0xF2:
          return;
        case 0xF3:
          return;
        case 0xF4:
          return;
        case 0xF5:
          char v26 = a1;
          uint64_t v27 = (uint64_t *)this;
          int v28 = v6;
LABEL_213:
          return;
        case 0xF6:
          *(_DWORD *)a1 = 7;
          a1[1] = (uint64_t)a3;
          int v5 = 1839;
          goto LABEL_3;
        case 0xF7:
          return;
        case 0xF8:
          return;
        case 0xF9:
          return;
        case 0xFA:
          return;
        case 0xFB:
          return;
        case 0xFC:
          return;
        case 0xFD:
          return;
        case 0xFF:
          return;
        case 0x100:
          *(_DWORD *)a1 = 7;
          a1[1] = (uint64_t)a3;
          int v5 = 3281;
          goto LABEL_3;
        case 0x101:
          return;
        case 0x102:
          return;
        case 0x103:
          return;
        case 0x104:
          return;
        case 0x105:
          return;
        case 0x106:
          return;
        case 0x107:
          return;
        case 0x108:
          return;
        case 0x109:
          return;
        case 0x10A:
          return;
        case 0x10B:
          return;
        case 0x10C:
          return;
        case 0x10D:
          return;
        case 0x10E:
          return;
        case 0x10F:
          unsigned int v9 = (char **)((char *)this + 12728);
          uint64_t v11 = (void *)*((void *)this + 1593);
          BOOL v12 = "Ya";
          goto LABEL_856;
        case 0x110:
          return;
        case 0x111:
          return;
        case 0x112:
          return;
        case 0x113:
          return;
        case 0x114:
          return;
        case 0x115:
          return;
        case 0x116:
          return;
        case 0x117:
          return;
        case 0x118:
          return;
        case 0x119:
          return;
        case 0x11A:
          return;
        case 0x11B:
          return;
        case 0x11C:
          return;
        case 0x11D:
          return;
        case 0x11E:
          return;
        case 0x11F:
          return;
        case 0x120:
          return;
        case 0x121:
          return;
        case 0x122:
          return;
        case 0x123:
          return;
        case 0x124:
          return;
        case 0x125:
          return;
        case 0x126:
          return;
        case 0x127:
          return;
        case 0x128:
          return;
        case 0x129:
          return;
        case 0x12A:
          return;
        case 0x12B:
          *(_DWORD *)a1 = 7;
          a1[1] = (uint64_t)a3;
          int v5 = 3792;
          goto LABEL_3;
        case 0x12C:
          return;
        case 0x12E:
          return;
        case 0x12F:
          return;
        case 0x130:
          return;
        case 0x131:
          return;
        case 0x132:
          return;
        case 0x133:
          return;
        case 0x134:
          return;
        case 0x135:
          return;
        case 0x136:
          return;
        case 0x137:
          return;
        case 0x138:
          return;
        case 0x139:
          return;
        case 0x13A:
          return;
        case 0x13B:
          return;
        case 0x13C:
          return;
        case 0x13D:
          return;
        case 0x13E:
          return;
        case 0x13F:
          unsigned int v9 = (char **)((char *)this + 12728);
          uint64_t v11 = (void *)*((void *)this + 1593);
          BOOL v12 = "Tu";
          goto LABEL_856;
        case 0x140:
          int v39 = v6 + 1;
          uint64_t v40 = "TJ";
          char v41 = a1;
          uint64_t v42 = this;
          size_t v43 = 2;
          goto LABEL_840;
        case 0x141:
          char v35 = a1;
          uint64_t v36 = (unsigned int *)this;
LABEL_274:
          return;
        case 0x142:
          return;
        case 0x143:
          return;
        case 0x144:
          int v39 = v6 + 1;
          uint64_t v40 = "TJV";
          char v41 = a1;
          uint64_t v42 = this;
          size_t v43 = 3;
LABEL_840:
          return;
        case 0x145:
          return;
        case 0x146:
          return;
        case 0x148:
          return;
        case 0x149:
          return;
        case 0x14A:
          unsigned int v9 = (char **)((char *)this + 12728);
          uint64_t v11 = (void *)*((void *)this + 1593);
          BOOL v12 = "HF";
LABEL_856:
          size_t v10 = 2;
          goto LABEL_857;
        case 0x14B:
          return;
        case 0x14C:
          unsigned int v9 = (char **)((char *)this + 12728);
          uint64_t v11 = (void *)*((void *)this + 1593);
          BOOL v12 = "Twb";
          size_t v10 = 3;
          goto LABEL_857;
        case 0x14D:
          unsigned int v9 = (char **)((char *)this + 12728);
          uint64_t v11 = (void *)*((void *)this + 1593);
          BOOL v12 = "TwB";
          size_t v10 = 3;
          goto LABEL_857;
        case 0x14E:
          return;
        case 0x14F:
          return;
        case 0x150:
          *(_DWORD *)a1 = 7;
          a1[1] = (uint64_t)a3;
          int v5 = 3931;
          goto LABEL_3;
        case 0x151:
          *(_DWORD *)a1 = 7;
          a1[1] = (uint64_t)a3;
          int v5 = 3937;
          goto LABEL_3;
        case 0x152:
          return;
        case 0x153:
          return;
        case 0x154:
          unsigned int v9 = (char **)((char *)this + 12728);
          uint64_t v11 = (void *)*((void *)this + 1593);
          BOOL v12 = "TwS";
          size_t v10 = 3;
LABEL_857:
          swift::Demangle::__runtime::CharVector::append(v9, v12, v10, v11);
LABEL_858:
          *(_DWORD *)a1 = 0;
          goto LABEL_859;
        case 0x155:
        case 0x156:
          *(_DWORD *)a1 = 11;
LABEL_859:
          a1[1] = 0;
          *((_DWORD *)a1 + 4) = 0;
          return;
        case 0x157:
          return;
        case 0x158:
          return;
        case 0x159:
          return;
        case 0x15A:
          return;
        case 0x15B:
          uint64_t v8 = 4;
LABEL_7:
          a3 = (size_t *)(*((uint64_t (**)(void, uint64_t, size_t))this + 1603))(*((void *)this + 1604), v8, *a3);
          if (++v6 == 1025) {
            break;
          }
          continue;
        case 0x15C:
          return;
        case 0x15D:
          return;
        case 0x15E:
          return;
        case 0x15F:
          return;
        case 0x160:
          return;
        case 0x161:
          return;
        case 0x162:
          return;
        default:
          *(_DWORD *)a1 = 4;
          a1[1] = (uint64_t)a3;
          int v5 = 401;
          goto LABEL_3;
      }
      break;
    }
  }
  *(_DWORD *)a1 = 3;
  a1[1] = (uint64_t)a3;
  int v5 = 392;
LABEL_3:
  *((_DWORD *)a1 + 4) = v5;
}

void swift::Demangle::__runtime::mangleNode()
{
  uint64_t v0 = __chkstk_darwin();
  uint64_t v5 = v4;
  if (!v0)
  {
    *(void *)(v4 + 24) = 0;
    *(void *)(v4 + 32) = 0;
    *(_DWORD *)uint64_t v4 = 0;
    *(void *)(v4 + 8) = 0;
    *(_DWORD *)(v4 + 16) = 0;
    return;
  }
  int v6 = v3;
  uint64_t v7 = v2;
  uint64_t v8 = v1;
  unsigned int v9 = (size_t *)v0;
  char v24 = 0;
  v23[1540] = 0;
  int v22 = v3;
  v23[1539] = 0;
  char v27 = 0;
  uint64_t v26 = 0;
  uint64_t v25 = 0;
  char v30 = 0;
  uint64_t v29 = 0;
  uint64_t v28 = 0;
  char v33 = 0;
  uint64_t v32 = 0;
  uint64_t v31 = 0;
  char v36 = 0;
  uint64_t v35 = 0;
  uint64_t v34 = 0;
  char v39 = 0;
  uint64_t v38 = 0;
  uint64_t v37 = 0;
  char v42 = 0;
  uint64_t v41 = 0;
  uint64_t v40 = 0;
  char v45 = 0;
  uint64_t v43 = 0;
  uint64_t v44 = 0;
  char v48 = 0;
  uint64_t v46 = 0;
  uint64_t v47 = 0;
  char v51 = 0;
  uint64_t v49 = 0;
  uint64_t v50 = 0;
  char v54 = 0;
  uint64_t v52 = 0;
  uint64_t v53 = 0;
  char v57 = 0;
  uint64_t v55 = 0;
  uint64_t v56 = 0;
  char v60 = 0;
  uint64_t v59 = 0;
  uint64_t v58 = 0;
  char v63 = 0;
  uint64_t v61 = 0;
  uint64_t v62 = 0;
  char v66 = 0;
  uint64_t v64 = 0;
  uint64_t v65 = 0;
  long long v67 = 0u;
  long long v68 = 0u;
  uint64_t v69 = 0;
  bzero(v23, 0x3011uLL);
  int v70 = 1065353216;
  char v73 = v6;
  size_t v10 = (void *)v6[1];
  if (!v10 || (unint64_t)(v10 + 4) > v6[2])
  {
    unint64_t v11 = 2 * v6[4];
    if (v11 <= 0x21) {
      unint64_t v11 = 33;
    }
    v6[4] = v11;
    unint64_t v12 = v11 + 8;
    int v13 = malloc_type_malloc(v11 + 8, 0xD0263BC5uLL);
    *int v13 = v6[3];
    size_t v10 = v13 + 1;
    v6[2] = (char *)v13 + v12;
    v6[3] = v13;
  }
  v6[1] = v10 + 4;
  v71 = v10;
  uint64_t v72 = 0x2000000000;
  char v74 = 1;
  long long v75 = 0u;
  long long v76 = 0u;
  memset(v77, 0, sizeof(v77));
  uint64_t v78 = v8;
  uint64_t v79 = v7;
  if (v20)
  {
    *(_OWORD *)uint64_t v5 = v20;
    uint64_t v14 = v21;
    *(void *)(v5 + 24) = 0;
    *(void *)(v5 + 32) = 0;
    *(void *)(v5 + 16) = v14;
    uint64_t v15 = (void *)*((void *)&v68 + 1);
    if (*((void *)&v68 + 1)) {
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v18 = v71;
    uint64_t v19 = v72;
    *(_DWORD *)uint64_t v5 = 0;
    *(void *)(v5 + 8) = 0;
    *(_DWORD *)(v5 + 16) = 0;
    *(void *)(v5 + 24) = v18;
    *(void *)(v5 + 32) = v19;
    uint64_t v15 = (void *)*((void *)&v68 + 1);
    if (*((void *)&v68 + 1))
    {
      do
      {
LABEL_9:
        char v16 = (void *)*v15;
        operator delete(v15);
        uint64_t v15 = v16;
      }
      while (v16);
    }
  }
  long long v17 = (void *)*((void *)&v67 + 1);
  *((void *)&v67 + 1) = 0;
  if (v17) {
    operator delete(v17);
  }
}

uint64_t swift::Demangle::__runtime::isSpecialized(swift::Demangle::__runtime *this, swift::Demangle::__runtime::Node *a2)
{
  if (this)
  {
    while (2)
    {
      uint64_t v2 = 1;
      switch(*((_WORD *)this + 8))
      {
        case 0:
        case 0x18:
        case 0x1D:
        case 0x21:
        case 0x32:
        case 0x33:
        case 0x3D:
        case 0x46:
        case 0x4C:
        case 0x62:
        case 0x75:
        case 0x7D:
        case 0x98:
        case 0xA7:
        case 0xB2:
        case 0xB3:
        case 0xB4:
        case 0xCC:
        case 0xD7:
        case 0xDA:
        case 0xDB:
        case 0xDC:
        case 0xEA:
        case 0xFA:
        case 0xFB:
        case 0xFE:
        case 0x101:
          int v4 = *((unsigned __int8 *)this + 18);
          if ((v4 - 1) < 2) {
            goto LABEL_5;
          }
          if (v4 != 5) {
            return 0;
          }
          uint64_t v2 = *((unsigned int *)this + 2);
          if (!v2) {
            return v2;
          }
          this = *(swift::Demangle::__runtime **)this;
LABEL_5:
          this = *(swift::Demangle::__runtime **)this;
          if (this) {
            continue;
          }
          return 0;
        case 0xD:
        case 0xE:
        case 0xF:
        case 0x10:
        case 0x11:
        case 0x12:
        case 0x13:
        case 0x53:
          return v2;
        case 0x47:
          int v5 = *((unsigned __int8 *)this + 18);
          if (v5 == 2) {
            goto LABEL_4;
          }
          if (v5 != 5 || *((_DWORD *)this + 2) < 2u) {
            return 0;
          }
          this = *(swift::Demangle::__runtime **)this;
LABEL_4:
          this = (swift::Demangle::__runtime *)((char *)this + 8);
          goto LABEL_5;
        default:
          return 0;
      }
    }
  }
  return 0;
}

unint64_t swift::Demangle::__runtime::getUnspecialized@<X0>(unint64_t this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = this;
  while (2)
  {
    uint64_t v7 = (swift::Demangle::__runtime::Node *)*(unsigned __int16 *)(v5 + 16);
    if ((v7 - 13) < 6)
    {
      int v8 = *(unsigned __int8 *)(v5 + 18);
      if ((v8 - 1) >= 2)
      {
        if (v8 != 5 || !*(_DWORD *)(v5 + 8))
        {
          *(_DWORD *)a3 = 1;
          *(void *)(a3 + 8) = v5;
          int v13 = 4090;
          goto LABEL_72;
        }
        uint64_t v5 = *(void *)v5;
      }
      uint64_t v9 = *(void *)v5;
      if (*(_WORD *)(*(void *)v5 + 16) != 232)
      {
        *(_DWORD *)a3 = 1;
        *(void *)(a3 + 8) = v9;
        int v13 = 4092;
        goto LABEL_72;
      }
      int v10 = *(unsigned __int8 *)(v9 + 18);
      if ((v10 - 1) >= 2)
      {
        if (v10 != 5 || !*(_DWORD *)(v9 + 8))
        {
          *(_DWORD *)a3 = 1;
          *(void *)(a3 + 8) = v9;
          int v13 = 4093;
          goto LABEL_72;
        }
        uint64_t v9 = *(void *)v9;
      }
      uint64_t v5 = *(void *)v9;
      goto LABEL_13;
    }
    switch(*(_WORD *)(v5 + 16))
    {
      case 0:
      case 0x1D:
      case 0x21:
      case 0x32:
      case 0x33:
      case 0x46:
      case 0x4C:
      case 0x62:
      case 0x75:
      case 0x7D:
      case 0x98:
      case 0xB2:
      case 0xB3:
      case 0xCC:
      case 0xD7:
      case 0xDA:
      case 0xDC:
      case 0xFA:
      case 0xFB:
      case 0xFE:
      case 0x101:
        unsigned int v14 = *(unsigned __int8 *)(v5 + 18);
        if (v14 != 1)
        {
          if (v14 == 5)
          {
            unsigned int v14 = *(_DWORD *)(v5 + 8);
          }
          else if (v14 == 2)
          {
            unsigned int v14 = 2;
          }
          else
          {
            unsigned int v14 = 0;
          }
        }
        goto LABEL_31;
      case 0x13:
        int v11 = *(unsigned __int8 *)(v5 + 18);
        if ((v11 - 1) < 2) {
          goto LABEL_20;
        }
        if (v11 == 5 && *(_DWORD *)(v5 + 8))
        {
          uint64_t v5 = *(void *)v5;
LABEL_20:
          uint64_t v5 = *(void *)v5;
          int v12 = *(unsigned __int16 *)(v5 + 16);
          if (v12 != 29 && v12 != 76)
          {
            *(_DWORD *)a3 = 1;
            *(void *)(a3 + 8) = v5;
            int v13 = 4113;
            goto LABEL_72;
          }
LABEL_13:
          this = swift::Demangle::__runtime::isSpecialized((swift::Demangle::__runtime *)v5, v7);
          if ((this & 1) == 0)
          {
LABEL_60:
            *(_DWORD *)a3 = 0;
            *(void *)(a3 + 8) = 0;
            *(_DWORD *)(a3 + 16) = 0;
            *(void *)(a3 + 24) = v5;
            return this;
          }
          continue;
        }
        *(_DWORD *)a3 = 1;
        *(void *)(a3 + 8) = v5;
        int v13 = 4108;
LABEL_72:
        *(_DWORD *)(a3 + 16) = v13;
        return this;
      case 0x18:
      case 0x3D:
      case 0xA7:
      case 0xDB:
      case 0xEA:
        unsigned int v14 = 2;
LABEL_31:
        this = swift::Demangle::__runtime::NodeFactory::createNode(a2, (__int16)v7);
        char v16 = (swift::Demangle::__runtime::Node *)this;
        int v17 = *(unsigned __int8 *)(v5 + 18);
        uint64_t v18 = (swift::Demangle::__runtime **)v5;
        if ((v17 - 1) < 2) {
          goto LABEL_35;
        }
        if (v17 != 5 || !*(_DWORD *)(v5 + 8))
        {
          *(_DWORD *)a3 = 1;
          *(void *)(a3 + 8) = v5;
          int v13 = 4069;
          goto LABEL_72;
        }
        uint64_t v18 = *(swift::Demangle::__runtime ***)v5;
LABEL_35:
        uint64_t v19 = *v18;
        if (swift::Demangle::__runtime::isSpecialized(*v18, v15))
        {
          this = ((uint64_t (*)(swift::Demangle::__runtime *__hidden, swift::Demangle::__runtime::Node *, swift::Demangle::__runtime::NodeFactory *))swift::Demangle::__runtime::getUnspecialized)(v19, a2, v20);
          if (*(_DWORD *)a3) {
            return this;
          }
          uint64_t v19 = *(swift::Demangle::__runtime **)(a3 + 24);
        }
        this = swift::Demangle::__runtime::Node::addChild(v16, v19, a2);
        if (v14 < 2)
        {
LABEL_82:
          *(_DWORD *)a3 = 0;
          *(void *)(a3 + 8) = 0;
          *(_DWORD *)(a3 + 16) = 0;
          *(void *)(a3 + 24) = v16;
          return this;
        }
        uint64_t v21 = v14;
        unint64_t v22 = 1;
        while (1)
        {
          unint64_t v24 = *(unsigned __int8 *)(v5 + 18);
          if (v24 == 2)
          {
            if (v24 > v22) {
              goto LABEL_47;
            }
          }
          else if (v24 == 5 && *(unsigned int *)(v5 + 8) > v22)
          {
LABEL_47:
            unsigned int v25 = v24 - 1;
            uint64_t v26 = v5;
            if (v25 >= 2) {
              uint64_t v26 = *(void *)v5;
            }
            char v23 = *(swift::Demangle::__runtime::Node **)(v26 + 8 * v22);
            goto LABEL_41;
          }
          char v23 = 0;
LABEL_41:
          this = swift::Demangle::__runtime::Node::addChild(v16, v23, a2);
          if (v21 == ++v22) {
            goto LABEL_82;
          }
        }
      case 0x47:
        int v27 = *(unsigned __int8 *)(v5 + 18);
        uint64_t v28 = v5;
        if (v27 == 2) {
          goto LABEL_57;
        }
        if (v27 != 5 || *(_DWORD *)(v5 + 8) <= 1u)
        {
          *(_DWORD *)a3 = 1;
          *(void *)(a3 + 8) = v5;
          int v13 = 4120;
          goto LABEL_72;
        }
        uint64_t v28 = *(void *)v5;
LABEL_57:
        uint64_t v29 = *(swift::Demangle::__runtime **)(v28 + 8);
        this = swift::Demangle::__runtime::isSpecialized(v29, v7);
        if ((this & 1) == 0) {
          goto LABEL_60;
        }
        this = (unint64_t)swift::Demangle::__runtime::getUnspecialized((uint64_t *)&v37, v29, a2, v30);
        if (v37)
        {
          *(_OWORD *)a3 = v37;
          *(void *)(a3 + 16) = v38;
          return this;
        }
        Node = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(a2, 71);
        char v16 = Node;
        int v34 = *(unsigned __int8 *)(v5 + 18);
        uint64_t v35 = (swift::Demangle::__runtime::Node **)v5;
        if ((v34 - 1) < 2) {
          goto LABEL_77;
        }
        if (v34 == 5 && *(_DWORD *)(v5 + 8))
        {
          uint64_t v35 = *(swift::Demangle::__runtime::Node ***)v5;
LABEL_77:
          char v36 = *v35;
        }
        else
        {
          char v36 = 0;
        }
        swift::Demangle::__runtime::Node::addChild(Node, v36, a2);
        this = swift::Demangle::__runtime::Node::addChild(v16, v39, a2);
        if (*(unsigned char *)(v5 + 18) == 5 && *(_DWORD *)(v5 + 8) == 3) {
          this = swift::Demangle::__runtime::Node::addChild(v16, *(swift::Demangle::__runtime::Node **)(*(void *)v5 + 16), a2);
        }
        goto LABEL_82;
      case 0x53:
        int v31 = *(unsigned __int8 *)(v5 + 18);
        if ((v31 - 1) < 2) {
          goto LABEL_65;
        }
        if (v31 == 5 && *(_DWORD *)(v5 + 8))
        {
          uint64_t v5 = *(void *)v5;
LABEL_65:
          uint64_t v32 = *(void *)v5;
          if (*(_WORD *)(*(void *)v5 + 16) == 232)
          {
            *(_DWORD *)a3 = 0;
            *(void *)(a3 + 8) = 0;
            *(_DWORD *)(a3 + 16) = 0;
            *(void *)(a3 + 24) = v32;
            return this;
          }
          *(_DWORD *)a3 = 1;
          *(void *)(a3 + 8) = v32;
          int v13 = 4103;
        }
        else
        {
          *(_DWORD *)a3 = 1;
          *(void *)(a3 + 8) = v5;
          int v13 = 4101;
        }
        goto LABEL_72;
      default:
        *(_DWORD *)a3 = 5;
        *(void *)(a3 + 8) = v5;
        int v13 = 4137;
        goto LABEL_72;
    }
  }
}

void *anonymous namespace'::Remangler::mangleAnonymousContext@<X0>(const void **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  unsigned int v7 = a3 + 1;
  int v8 = *((unsigned __int8 *)a2 + 18);
  uint64_t v9 = a2;
  if (v8 != 2)
  {
    if (v8 != 5 || *((_DWORD *)a2 + 2) < 2u)
    {
      *(_DWORD *)a4 = 0;
      *(void *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 16) = 0;
      goto LABEL_8;
    }
    uint64_t v9 = *(swift::Demangle::__runtime::Node **)a2;
  }
  if (*(_DWORD *)a4) {
    return result;
  }
  int v8 = *((unsigned __int8 *)a2 + 18);
LABEL_8:
  int v11 = (swift::Demangle::__runtime::Node **)a2;
  if ((v8 - 1) < 2) {
    goto LABEL_12;
  }
  if (v8 == 5 && *((_DWORD *)a2 + 2))
  {
    int v11 = *(swift::Demangle::__runtime::Node ***)a2;
LABEL_12:
    if (*(_DWORD *)a4) {
      return result;
    }
    if (*((unsigned char *)a2 + 18) != 5) {
      goto LABEL_19;
    }
    goto LABEL_16;
  }
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  if (v8 != 5) {
    goto LABEL_19;
  }
LABEL_16:
  if (*((_DWORD *)a2 + 2) >= 3u)
  {
    if (*(_DWORD *)a4) {
      return result;
    }
    goto LABEL_36;
  }
LABEL_19:
  unsigned int v12 = *((_DWORD *)this + 3184);
  size_t v13 = *((unsigned int *)this + 3185);
  unsigned int v14 = (char *)this[1591];
  if (v12 >= v13)
  {
    uint64_t v15 = this[1593];
    char v16 = (char *)v15[1];
    if (&v14[v13] == v16)
    {
      unint64_t v18 = (unint64_t)&v14[v13 + 1];
      unint64_t v17 = v15[2];
      if (v18 <= v17)
      {
        v15[1] = v18;
        LODWORD(v19) = 1;
LABEL_34:
        *((_DWORD *)this + 3185) = v13 + v19;
        goto LABEL_35;
      }
    }
    else
    {
      unint64_t v17 = v15[2];
    }
    if ((2 * v13) <= 4) {
      uint64_t v19 = 4;
    }
    else {
      uint64_t v19 = (2 * v13);
    }
    size_t v20 = v19 + v13;
    if (!v16 || (unint64_t)&v16[v20] > v17)
    {
      unint64_t v21 = 2 * v15[4];
      if (v21 <= v20 + 1) {
        unint64_t v21 = v20 + 1;
      }
      v15[4] = v21;
      unint64_t v22 = v21 + 8;
      char v23 = malloc_type_malloc(v21 + 8, 0xD0263BC5uLL);
      unint64_t v24 = (char *)v23 + v22;
      void *v23 = v15[3];
      char v16 = (char *)(v23 + 1);
      v15[2] = v24;
      v15[3] = v23;
    }
    v15[1] = &v16[v20];
    if (v13) {
      memcpy(v16, this[1591], v13);
    }
    this[1591] = v16;
    LODWORD(v13) = *((_DWORD *)this + 3185);
    unsigned int v14 = v16;
    unsigned int v12 = *((_DWORD *)this + 3184);
    goto LABEL_34;
  }
LABEL_35:
  *((_DWORD *)this + 3184) = v12 + 1;
  v14[v12] = 121;
LABEL_36:
  unint64_t result = swift::Demangle::__runtime::CharVector::append((char **)this + 1591, "XZ", 2uLL, this[1593]);
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  return result;
}

void *anonymous namespace'::Remangler::mangleAnyProtocolConformanceList@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  BOOL v13 = 1;
  int v6 = *((unsigned __int8 *)a2 + 18);
  unsigned int v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      uint64_t v8 = *(void *)a2;
      unsigned int v7 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_9:
      uint64_t v9 = (swift::Demangle::__runtime::Node *)(v8 + 8 * *((unsigned int *)a2 + 2));
      if (v7 == v9) {
        goto LABEL_19;
      }
      goto LABEL_14;
    }
    unsigned int v7 = 0;
  }
  if (v6 != 1)
  {
    if (v6 == 2)
    {
      uint64_t v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 16);
      if (v7 == (swift::Demangle::__runtime::Node *)((char *)a2 + 16)) {
        goto LABEL_19;
      }
      goto LABEL_14;
    }
    if (v6 != 5)
    {
      uint64_t v9 = 0;
      if (!v7) {
        goto LABEL_19;
      }
      goto LABEL_14;
    }
    uint64_t v8 = *(void *)a2;
    goto LABEL_9;
  }
  uint64_t v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 8);
  if (v7 == (swift::Demangle::__runtime::Node *)((char *)a2 + 8))
  {
LABEL_19:
    BOOL v12 = 1;
LABEL_20:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
LABEL_14:
  int v10 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4) {
      return result;
    }
    unsigned int v7 = (swift::Demangle::__runtime::Node *)((char *)v7 + 8);
    if (v7 == v9)
    {
      BOOL v12 = v13;
      goto LABEL_20;
    }
  }
}

unsigned int *anonymous namespace'::Remangler::mangleArgumentTuple@<X0>(unsigned int *this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  if ((v6 - 1) < 2) {
    goto LABEL_5;
  }
  if (v6 == 5 && *((_DWORD *)a2 + 2))
  {
    a2 = (swift::Demangle::__runtime::Node **)*a2;
LABEL_5:
    unsigned int v7 = *a2;
    goto LABEL_7;
  }
  unsigned int v7 = 0;
LABEL_7:
  if (*((_WORD *)v7 + 8) == 232)
  {
    int v8 = *((unsigned __int8 *)v7 + 18);
    if ((v8 - 1) >= 2)
    {
      if (v8 != 5 || !*((_DWORD *)v7 + 2))
      {
        unsigned int v7 = 0;
        goto LABEL_14;
      }
      unsigned int v7 = *(swift::Demangle::__runtime::Node **)v7;
    }
    unsigned int v7 = *(swift::Demangle::__runtime::Node **)v7;
  }
LABEL_14:
  if (*((_WORD *)v7 + 8) == 223)
  {
    int v9 = *((unsigned __int8 *)v7 + 18);
    if ((v9 - 1) >= 2 && (v9 != 5 || !*((_DWORD *)v7 + 2)))
    {
      unsigned int v11 = this[3184];
      size_t v12 = this[3185];
      BOOL v13 = (char *)*((void *)this + 1591);
      if (v11 < v12)
      {
LABEL_38:
        v4[3184] = v11 + 1;
        v13[v11] = 121;
        *(_DWORD *)a4 = 0;
        *(void *)(a4 + 8) = 0;
        *(_DWORD *)(a4 + 16) = 0;
        return this;
      }
      unsigned int v14 = (void *)*((void *)this + 1593);
      uint64_t v15 = (char *)v14[1];
      if (&v13[v12] == v15)
      {
        unint64_t v17 = (unint64_t)&v13[v12 + 1];
        unint64_t v16 = v14[2];
        if (v17 <= v16)
        {
          v14[1] = v17;
          LODWORD(v18) = 1;
LABEL_37:
          v4[3185] = v12 + v18;
          goto LABEL_38;
        }
      }
      else
      {
        unint64_t v16 = v14[2];
      }
      if ((2 * v12) <= 4) {
        uint64_t v18 = 4;
      }
      else {
        uint64_t v18 = (2 * v12);
      }
      size_t v19 = v18 + v12;
      if (!v15 || (unint64_t)&v15[v19] > v16)
      {
        unint64_t v20 = 2 * v14[4];
        if (v20 <= v19 + 1) {
          unint64_t v20 = v19 + 1;
        }
        v14[4] = v20;
        unint64_t v21 = v20 + 8;
        this = (unsigned int *)malloc_type_malloc(v20 + 8, 0xD0263BC5uLL);
        unint64_t v22 = (char *)this + v21;
        *(void *)this = v14[3];
        uint64_t v15 = (char *)(this + 2);
        v14[2] = v22;
        v14[3] = this;
      }
      v14[1] = &v15[v19];
      if (v12) {
        this = (unsigned int *)memcpy(v15, *((const void **)v4 + 1591), v12);
      }
      *((void *)v4 + 1591) = v15;
      LODWORD(v12) = v4[3185];
      BOOL v13 = v15;
      unsigned int v11 = v4[3184];
      goto LABEL_37;
    }
  }
  unsigned int v10 = a3 + 1;
}

uint64_t anonymous namespace'::Remangler::mangleAssociatedTypeRef@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  long long v17 = 0uLL;
  LOBYTE(v18) = 0;
  if (result) {
    goto LABEL_23;
  }
  int v9 = *((unsigned __int8 *)a2 + 18);
  unsigned int v10 = (swift::Demangle::__runtime::Node **)a2;
  if ((v9 - 1) >= 2)
  {
    if (v9 == 5)
    {
      uint64_t v11 = *(void *)a2;
      unsigned int v10 = *(swift::Demangle::__runtime::Node ***)a2;
      goto LABEL_10;
    }
    unsigned int v10 = 0;
  }
  if (v9 == 1)
  {
    size_t v12 = (swift::Demangle::__runtime::Node **)((char *)a2 + 8);
    if (v10 != v12) {
      goto LABEL_17;
    }
    goto LABEL_20;
  }
  if (v9 == 2)
  {
    size_t v12 = (swift::Demangle::__runtime::Node **)((char *)a2 + 16);
    if (v10 != v12) {
      goto LABEL_17;
    }
LABEL_20:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    uint64_t result = (uint64_t)swift::Demangle::__runtime::CharVector::append(this + 1591, "Qa", 2uLL, this[1593]);
    unint64_t v14 = (unint64_t)this[1585];
    if (v14 > 0xF)
    {
      int v16 = *((_DWORD *)this + 3178) + 16;
      long long v19 = v17;
      uint64_t v20 = v18;
      int v21 = v16;
      uint64_t result = (uint64_t)std::__hash_table<std::__hash_value_type<swift::Demangle::__runtime::SubstitutionEntry,unsigned int>,std::__unordered_map_hasher<swift::Demangle::__runtime::SubstitutionEntry,std::__hash_value_type<swift::Demangle::__runtime::SubstitutionEntry,unsigned int>,swift::Demangle::__runtime::SubstitutionEntry::Hasher,std::equal_to<swift::Demangle::__runtime::SubstitutionEntry>,true>,std::__unordered_map_equal<swift::Demangle::__runtime::SubstitutionEntry,std::__hash_value_type<swift::Demangle::__runtime::SubstitutionEntry,unsigned int>,std::equal_to<swift::Demangle::__runtime::SubstitutionEntry>,swift::Demangle::__runtime::SubstitutionEntry::Hasher,true>,std::allocator<std::__hash_value_type<swift::Demangle::__runtime::SubstitutionEntry,unsigned int>>>::__emplace_unique_key_args<swift::Demangle::__runtime::SubstitutionEntry,std::pair<swift::Demangle::__runtime::SubstitutionEntry const,unsigned int>>((uint64_t)(this + 1586), (uint64_t)&v19, &v19);
    }
    else
    {
      this[1585] = (char *)(v14 + 1);
      uint64_t v15 = &this[3 * v14 + 1537];
      *(_OWORD *)uint64_t v15 = v17;
      *((unsigned char *)v15 + 16) = v18;
    }
LABEL_23:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
  if (v9 != 5)
  {
    size_t v12 = 0;
    if (!v10) {
      goto LABEL_20;
    }
    goto LABEL_17;
  }
  uint64_t v11 = *(void *)a2;
LABEL_10:
  size_t v12 = (swift::Demangle::__runtime::Node **)(v11 + 8 * *((unsigned int *)a2 + 2));
  if (v10 == v12) {
    goto LABEL_20;
  }
LABEL_17:
  unsigned int v13 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4) {
      return result;
    }
    if (++v10 == v12) {
      goto LABEL_20;
    }
  }
}

void *anonymous namespace'::Remangler::mangleAssociatedTypeMetadataAccessor@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6 = *((unsigned __int8 *)a2 + 18);
  unsigned int v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      uint64_t v8 = *(void *)a2;
      unsigned int v7 = *(swift::Demangle::__runtime::Node **)a2;
      goto LABEL_9;
    }
    unsigned int v7 = 0;
  }
  switch(v6)
  {
    case 1:
      int v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 8);
      if (v7 == (swift::Demangle::__runtime::Node *)((char *)a2 + 8)) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 2:
      int v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 16);
      if (v7 == (swift::Demangle::__runtime::Node *)((char *)a2 + 16)) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 5:
      uint64_t v8 = *(void *)a2;
LABEL_9:
      int v9 = (swift::Demangle::__runtime::Node *)(v8 + 8 * *((unsigned int *)a2 + 2));
      if (v7 == v9) {
        goto LABEL_19;
      }
      goto LABEL_16;
  }
  int v9 = 0;
  if (!v7)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    uint64_t result = swift::Demangle::__runtime::CharVector::append(this + 1591, "Wt", 2uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
LABEL_16:
  unsigned int v10 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4) {
      return result;
    }
    unsigned int v7 = (swift::Demangle::__runtime::Node *)((char *)v7 + 8);
    if (v7 == v9) {
      goto LABEL_19;
    }
  }
}

void *anonymous namespace'::Remangler::mangleDefaultAssociatedTypeMetadataAccessor@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6 = *((unsigned __int8 *)a2 + 18);
  unsigned int v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      uint64_t v8 = *(void *)a2;
      unsigned int v7 = *(swift::Demangle::__runtime::Node **)a2;
      goto LABEL_9;
    }
    unsigned int v7 = 0;
  }
  switch(v6)
  {
    case 1:
      int v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 8);
      if (v7 == (swift::Demangle::__runtime::Node *)((char *)a2 + 8)) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 2:
      int v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 16);
      if (v7 == (swift::Demangle::__runtime::Node *)((char *)a2 + 16)) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 5:
      uint64_t v8 = *(void *)a2;
LABEL_9:
      int v9 = (swift::Demangle::__runtime::Node *)(v8 + 8 * *((unsigned int *)a2 + 2));
      if (v7 == v9) {
        goto LABEL_19;
      }
      goto LABEL_16;
  }
  int v9 = 0;
  if (!v7)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    uint64_t result = swift::Demangle::__runtime::CharVector::append(this + 1591, "TM", 2uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
LABEL_16:
  unsigned int v10 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4) {
      return result;
    }
    unsigned int v7 = (swift::Demangle::__runtime::Node *)((char *)v7 + 8);
    if (v7 == v9) {
      goto LABEL_19;
    }
  }
}

void *anonymous namespace'::Remangler::mangleAccessorAttachedMacroExpansion@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  unsigned int v7 = a3 + 1;
  int v8 = *((unsigned __int8 *)a2 + 18);
  int v9 = a2;
  if ((v8 - 1) >= 2)
  {
    if (v8 != 5 || !*((_DWORD *)a2 + 2))
    {
      *(_DWORD *)a4 = 0;
      *(void *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 16) = 0;
      goto LABEL_8;
    }
    int v9 = (swift::Demangle::__runtime::Node **)*a2;
  }
  if (*(_DWORD *)a4) {
    return result;
  }
  int v8 = *((unsigned __int8 *)a2 + 18);
LABEL_8:
  uint64_t v11 = (swift::Demangle::__runtime::Node *)a2;
  if (v8 != 2)
  {
    if (v8 != 5 || *((_DWORD *)a2 + 2) < 2u)
    {
      *(_DWORD *)a4 = 0;
      *(void *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 16) = 0;
      if (v8 != 5) {
        goto LABEL_19;
      }
      goto LABEL_16;
    }
    uint64_t v11 = *a2;
  }
  if (*(_DWORD *)a4) {
    return result;
  }
  if (*((unsigned char *)a2 + 18) != 5) {
    goto LABEL_19;
  }
LABEL_16:
  if (*((_DWORD *)a2 + 2) > 2u)
  {
    if (*(_DWORD *)a4) {
      return result;
    }
    goto LABEL_20;
  }
LABEL_19:
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
LABEL_20:
  uint64_t result = swift::Demangle::__runtime::CharVector::append(this + 1591, "fMa", 3uLL, this[1593]);
  if (*((unsigned char *)a2 + 18) == 5 && *((_DWORD *)a2 + 2) >= 4u)
  {
    size_t v12 = (swift::Demangle::__runtime::Node *)*((void *)*a2 + 3);
  }
  else
  {
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
  }
  return result;
}

void *anonymous namespace'::Remangler::mangleAssociatedTypeWitnessTableAccessor@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6 = *((unsigned __int8 *)a2 + 18);
  unsigned int v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      uint64_t v8 = *(void *)a2;
      unsigned int v7 = *(swift::Demangle::__runtime::Node **)a2;
      goto LABEL_9;
    }
    unsigned int v7 = 0;
  }
  switch(v6)
  {
    case 1:
      int v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 8);
      if (v7 == (swift::Demangle::__runtime::Node *)((char *)a2 + 8)) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 2:
      int v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 16);
      if (v7 == (swift::Demangle::__runtime::Node *)((char *)a2 + 16)) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 5:
      uint64_t v8 = *(void *)a2;
LABEL_9:
      int v9 = (swift::Demangle::__runtime::Node *)(v8 + 8 * *((unsigned int *)a2 + 2));
      if (v7 == v9) {
        goto LABEL_19;
      }
      goto LABEL_16;
  }
  int v9 = 0;
  if (!v7)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    uint64_t result = swift::Demangle::__runtime::CharVector::append(this + 1591, "WT", 2uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
LABEL_16:
  unsigned int v10 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4) {
      return result;
    }
    unsigned int v7 = (swift::Demangle::__runtime::Node *)((char *)v7 + 8);
    if (v7 == v9) {
      goto LABEL_19;
    }
  }
}

void *anonymous namespace'::Remangler::mangleBaseWitnessTableAccessor@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6 = *((unsigned __int8 *)a2 + 18);
  unsigned int v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      uint64_t v8 = *(void *)a2;
      unsigned int v7 = *(swift::Demangle::__runtime::Node **)a2;
      goto LABEL_9;
    }
    unsigned int v7 = 0;
  }
  switch(v6)
  {
    case 1:
      int v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 8);
      if (v7 == (swift::Demangle::__runtime::Node *)((char *)a2 + 8)) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 2:
      int v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 16);
      if (v7 == (swift::Demangle::__runtime::Node *)((char *)a2 + 16)) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 5:
      uint64_t v8 = *(void *)a2;
LABEL_9:
      int v9 = (swift::Demangle::__runtime::Node *)(v8 + 8 * *((unsigned int *)a2 + 2));
      if (v7 == v9) {
        goto LABEL_19;
      }
      goto LABEL_16;
  }
  int v9 = 0;
  if (!v7)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    uint64_t result = swift::Demangle::__runtime::CharVector::append(this + 1591, "Wb", 2uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
LABEL_16:
  unsigned int v10 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4) {
      return result;
    }
    unsigned int v7 = (swift::Demangle::__runtime::Node *)((char *)v7 + 8);
    if (v7 == v9) {
      goto LABEL_19;
    }
  }
}

void *anonymous namespace'::Remangler::mangleAutoClosureType@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v7 = *((unsigned __int8 *)a2 + 18);
  switch(v7)
  {
    case 1:
      goto LABEL_6;
    case 5:
      uint64_t v7 = *((unsigned int *)a2 + 2);
      if (v7) {
        goto LABEL_6;
      }
      break;
    case 2:
      uint64_t v7 = 2;
LABEL_6:
      unsigned int v8 = a3 + 1;
      for (uint64_t i = v7 - 1; i != -1; --i)
      {
        unint64_t v10 = *((unsigned __int8 *)a2 + 18);
        unsigned int v11 = v10 - 1;
        if (v10 != 1)
        {
          if (v10 == 5)
          {
            unint64_t v10 = *((unsigned int *)a2 + 2);
          }
          else
          {
            if (v10 != 2) {
              goto LABEL_7;
            }
            unint64_t v10 = 2;
          }
        }
        if (v10 <= i)
        {
LABEL_7:
          *(_DWORD *)a4 = 0;
          *(void *)(a4 + 8) = 0;
          *(_DWORD *)(a4 + 16) = 0;
          continue;
        }
        size_t v12 = a2;
        if (v11 >= 2) {
          size_t v12 = *(swift::Demangle::__runtime::Node **)a2;
        }
        if (*(_DWORD *)a4) {
          return result;
        }
      }
      break;
  }
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  uint64_t result = swift::Demangle::__runtime::CharVector::append(this + 1591, "XK", 2uLL, this[1593]);
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  return result;
}

void *anonymous namespace'::Remangler::mangleBodyAttachedMacroExpansion@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  unsigned int v7 = a3 + 1;
  int v8 = *((unsigned __int8 *)a2 + 18);
  int v9 = a2;
  if ((v8 - 1) >= 2)
  {
    if (v8 != 5 || !*((_DWORD *)a2 + 2))
    {
      *(_DWORD *)a4 = 0;
      *(void *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 16) = 0;
      goto LABEL_8;
    }
    int v9 = (swift::Demangle::__runtime::Node **)*a2;
  }
  if (*(_DWORD *)a4) {
    return result;
  }
  int v8 = *((unsigned __int8 *)a2 + 18);
LABEL_8:
  unsigned int v11 = (swift::Demangle::__runtime::Node *)a2;
  if (v8 != 2)
  {
    if (v8 != 5 || *((_DWORD *)a2 + 2) < 2u)
    {
      *(_DWORD *)a4 = 0;
      *(void *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 16) = 0;
      if (v8 != 5) {
        goto LABEL_19;
      }
      goto LABEL_16;
    }
    unsigned int v11 = *a2;
  }
  if (*(_DWORD *)a4) {
    return result;
  }
  if (*((unsigned char *)a2 + 18) != 5) {
    goto LABEL_19;
  }
LABEL_16:
  if (*((_DWORD *)a2 + 2) > 2u)
  {
    if (*(_DWORD *)a4) {
      return result;
    }
    goto LABEL_20;
  }
LABEL_19:
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
LABEL_20:
  uint64_t result = swift::Demangle::__runtime::CharVector::append(this + 1591, "fMb", 3uLL, this[1593]);
  if (*((unsigned char *)a2 + 18) == 5 && *((_DWORD *)a2 + 2) >= 4u)
  {
    size_t v12 = (swift::Demangle::__runtime::Node *)*((void *)*a2 + 3);
  }
  else
  {
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
  }
  return result;
}

uint64_t anonymous namespace'::Remangler::mangleBoundGenericEnum@<X0>(uint64_t this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v5 = a2;
  uint64_t v6 = this;
  int v8 = *((unsigned __int8 *)a2 + 18);
  int v9 = a2;
  if ((v8 - 1) < 2) {
    goto LABEL_5;
  }
  if (v8 == 5 && *((_DWORD *)a2 + 2))
  {
    int v9 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_5:
    unint64_t v10 = *(uint64_t **)v9;
    goto LABEL_7;
  }
  unint64_t v10 = 0;
LABEL_7:
  int v11 = *((unsigned __int8 *)v10 + 18);
  if ((v11 - 1) < 2)
  {
LABEL_11:
    size_t v12 = (uint64_t *)*v10;
    goto LABEL_13;
  }
  if (v11 == 5 && *((_DWORD *)v10 + 2))
  {
    unint64_t v10 = (uint64_t *)*v10;
    goto LABEL_11;
  }
  size_t v12 = 0;
LABEL_13:
  if (*((_WORD *)v12 + 8) != 61)
  {
    *(_DWORD *)a4 = 1;
    *(void *)(a4 + 8) = a2;
    *(_DWORD *)(a4 + 16) = 843;
    return this;
  }
  int v13 = *((unsigned __int8 *)v12 + 18);
  unint64_t v14 = (int ***)v12;
  if ((v13 - 1) >= 2)
  {
    if (v13 != 5)
    {
      uint64_t v15 = 0;
      if (v13 == 2)
      {
LABEL_26:
        uint64_t v16 = v12[1];
        goto LABEL_29;
      }
      goto LABEL_23;
    }
    if (!*((_DWORD *)v12 + 2))
    {
      uint64_t v15 = 0;
      goto LABEL_28;
    }
    unint64_t v14 = (int ***)*v12;
  }
  uint64_t v15 = *v14;
  if (v13 == 2) {
    goto LABEL_26;
  }
LABEL_23:
  if (v13 == 5 && *((_DWORD *)v12 + 2) >= 2u)
  {
    size_t v12 = (uint64_t *)*v12;
    goto LABEL_26;
  }
LABEL_28:
  uint64_t v16 = 0;
LABEL_29:
  if (*((_WORD *)v15 + 8) == 153 && v15[1] == (int *)((char *)&dword_4 + 1))
  {
    long long v17 = *v15;
    int v18 = *v17;
    int v19 = *((unsigned __int8 *)v17 + 4);
    BOOL v20 = v18 == 1718187859 && v19 == 116;
    if (v20 && *(_WORD *)(v16 + 16) == 101 && *(void *)(v16 + 8) == 8 && **(void **)v16 == 0x6C616E6F6974704FLL)
    {
      v24[0] = 0;
      v24[1] = 0;
      char v25 = 0;
      if (this) {
        goto LABEL_51;
      }
      int v22 = *((unsigned __int8 *)v5 + 18);
      if (v22 != 2)
      {
        if (v22 != 5 || *((_DWORD *)v5 + 2) < 2u)
        {
          char v23 = 0;
          goto LABEL_49;
        }
        uint64_t v5 = *(swift::Demangle::__runtime::Node **)v5;
      }
      char v23 = (swift::Demangle::__runtime::Node *)*((void *)v5 + 1);
LABEL_49:
      if (*(_DWORD *)a4) {
        return this;
      }
      swift::Demangle::__runtime::CharVector::append((char **)(v6 + 12728), "Sg", 2uLL, *(void **)(v6 + 12744));
      this = (uint64_t)swift::Demangle::__runtime::RemanglerBase::addSubstitution((char *)v6, (const swift::Demangle::__runtime::SubstitutionEntry *)v24);
LABEL_51:
      *(_DWORD *)a4 = 0;
      *(void *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 16) = 0;
      return this;
    }
  }
  unsigned int v21 = a3 + 1;
}

void *anonymous namespace'::Remangler::mangleBoundGenericFunction@<X0>(const void **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  long long v28 = 0uLL;
  LOBYTE(v29) = 0;
  if (result) {
    goto LABEL_2;
  }
  uint64_t result = (void *)swift::Demangle::__runtime::getUnspecialized((unint64_t)a2, (swift::Demangle::__runtime::Node *)*this, (uint64_t)&v25);
  if (v25)
  {
    *(_OWORD *)a4 = v25;
    *(void *)(a4 + 16) = v26;
    return result;
  }
  int v9 = a3 + 1;
  if (!*(_DWORD *)a4)
  {
    char v24 = 121;
    if (!*(_DWORD *)a4)
    {
      unsigned int v10 = *((_DWORD *)this + 3184);
      size_t v11 = *((unsigned int *)this + 3185);
      size_t v12 = (char *)this[1591];
      if (v10 < v11) {
        goto LABEL_24;
      }
      int v13 = this[1593];
      unint64_t v14 = (char *)v13[1];
      if (&v12[v11] == v14)
      {
        unint64_t v16 = (unint64_t)&v12[v11 + 1];
        unint64_t v15 = v13[2];
        if (v16 <= v15)
        {
          v13[1] = v16;
          LODWORD(v17) = 1;
LABEL_23:
          *((_DWORD *)this + 3185) = v11 + v17;
LABEL_24:
          *((_DWORD *)this + 3184) = v10 + 1;
          v12[v10] = 71;
          unint64_t v21 = (unint64_t)this[1585];
          if (v21 > 0xF)
          {
            int v23 = *((_DWORD *)this + 3178) + 16;
            long long v30 = v28;
            uint64_t v31 = v29;
            int v32 = v23;
            uint64_t result = std::__hash_table<std::__hash_value_type<swift::Demangle::__runtime::SubstitutionEntry,unsigned int>,std::__unordered_map_hasher<swift::Demangle::__runtime::SubstitutionEntry,std::__hash_value_type<swift::Demangle::__runtime::SubstitutionEntry,unsigned int>,swift::Demangle::__runtime::SubstitutionEntry::Hasher,std::equal_to<swift::Demangle::__runtime::SubstitutionEntry>,true>,std::__unordered_map_equal<swift::Demangle::__runtime::SubstitutionEntry,std::__hash_value_type<swift::Demangle::__runtime::SubstitutionEntry,unsigned int>,std::equal_to<swift::Demangle::__runtime::SubstitutionEntry>,swift::Demangle::__runtime::SubstitutionEntry::Hasher,true>,std::allocator<std::__hash_value_type<swift::Demangle::__runtime::SubstitutionEntry,unsigned int>>>::__emplace_unique_key_args<swift::Demangle::__runtime::SubstitutionEntry,std::pair<swift::Demangle::__runtime::SubstitutionEntry const,unsigned int>>((uint64_t)(this + 1586), (uint64_t)&v30, &v30);
          }
          else
          {
            this[1585] = (const void *)(v21 + 1);
            int v22 = &this[3 * v21 + 1537];
            *(_OWORD *)int v22 = v28;
            *((unsigned char *)v22 + 16) = v29;
          }
LABEL_2:
          *(_DWORD *)a4 = 0;
          *(void *)(a4 + 8) = 0;
          *(_DWORD *)(a4 + 16) = 0;
          return result;
        }
      }
      else
      {
        unint64_t v15 = v13[2];
      }
      if ((2 * v11) <= 4) {
        uint64_t v17 = 4;
      }
      else {
        uint64_t v17 = (2 * v11);
      }
      size_t v18 = v17 + v11;
      if (!v14 || (unint64_t)&v14[v18] > v15)
      {
        unint64_t v19 = 2 * v13[4];
        if (v19 <= v18 + 1) {
          unint64_t v19 = v18 + 1;
        }
        v13[4] = v19;
        unint64_t v20 = v19 + 8;
        uint64_t result = malloc_type_malloc(v19 + 8, 0xD0263BC5uLL);
        *uint64_t result = v13[3];
        unint64_t v14 = (char *)(result + 1);
        v13[2] = (char *)result + v20;
        v13[3] = result;
      }
      v13[1] = &v14[v18];
      if (v11) {
        uint64_t result = memcpy(v14, this[1591], v11);
      }
      this[1591] = v14;
      LODWORD(v11) = *((_DWORD *)this + 3185);
      size_t v12 = v14;
      unsigned int v10 = *((_DWORD *)this + 3184);
      goto LABEL_23;
    }
  }
  return result;
}

uint64_t anonymous namespace'::Remangler::mangleBuiltinTypeName@<X0>(uint64_t this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = this;
  uint64_t v6 = (const void **)(this + 12728);
  unsigned int v7 = *(_DWORD *)(this + 12736);
  size_t v8 = *(unsigned int *)(this + 12740);
  int v9 = *(char **)(this + 12728);
  if (v7 < v8) {
    goto LABEL_20;
  }
  unsigned int v10 = *(void **)(this + 12744);
  size_t v11 = (char *)v10[1];
  if (&v9[v8] != v11)
  {
    unint64_t v12 = v10[2];
LABEL_5:
    if ((2 * v8) <= 4) {
      uint64_t v14 = 4;
    }
    else {
      uint64_t v14 = (2 * v8);
    }
    size_t v15 = v14 + v8;
    if (v11) {
      BOOL v16 = (unint64_t)&v11[v14 + v8] > v12;
    }
    else {
      BOOL v16 = 1;
    }
    int v9 = (char *)v10[1];
    if (v16)
    {
      unint64_t v17 = 2 * v10[4];
      if (v17 <= v15 + 1) {
        unint64_t v17 = v15 + 1;
      }
      v10[4] = v17;
      unint64_t v18 = v17 + 8;
      this = (uint64_t)malloc_type_malloc(v17 + 8, 0xD0263BC5uLL);
      *(void *)this = v10[3];
      int v9 = (char *)(this + 8);
      v10[2] = this + v18;
      v10[3] = this;
    }
    v10[1] = &v9[v15];
    if (v8) {
      this = (uint64_t)memcpy(v9, *v6, v8);
    }
    *(void *)(v4 + 12728) = v9;
    LODWORD(v8) = *(_DWORD *)(v4 + 12740);
    unsigned int v7 = *(_DWORD *)(v4 + 12736);
    goto LABEL_19;
  }
  unint64_t v13 = (unint64_t)&v9[v8 + 1];
  unint64_t v12 = v10[2];
  if (v13 > v12) {
    goto LABEL_5;
  }
  v10[1] = v13;
  LODWORD(v14) = 1;
LABEL_19:
  *(_DWORD *)(v4 + 12740) = v8 + v14;
LABEL_20:
  *(_DWORD *)(v4 + 12736) = v7 + 1;
  v9[v7] = 66;
  uint64_t v20 = *(void *)a2;
  unint64_t v19 = *((void *)a2 + 1);
  switch(v19)
  {
    case 0xBuLL:
      if (*(void *)v20 != 0x2E6E69746C697542 || *(void *)(v20 + 3) != 0x626F4A2E6E69746CLL) {
        goto LABEL_29;
      }
      int v22 = (char **)v6;
      char v23 = 106;
      goto LABEL_213;
    case 0xCuLL:
      this = memcmp(*(const void **)a2, "Builtin.Word", *((void *)a2 + 1));
      if (!this)
      {
        int v22 = (char **)v6;
        char v23 = 119;
        goto LABEL_213;
      }
LABEL_29:
      if (*(void *)v20 != 0x2E6E69746C697542 || *(void *)(v20 + 3) != 0x746E492E6E69746CLL) {
        goto LABEL_162;
      }
      goto LABEL_168;
    case 0x10uLL:
      if (*(void *)v20 == 0x2E6E69746C697542 && *(void *)(v20 + 8) == 0x726F747563657845)
      {
        int v22 = (char **)v6;
        char v23 = 101;
        goto LABEL_213;
      }
      if (*(void *)v20 == 0x2E6E69746C697542 && *(void *)(v20 + 8) == 0x6E656B6F544C4953)
      {
        int v22 = (char **)v6;
        char v23 = 116;
        goto LABEL_213;
      }
      goto LABEL_153;
    case 0x11uLL:
      this = memcmp(*(const void **)a2, "Builtin.PackIndex", *((void *)a2 + 1));
      if (!this)
      {
        int v22 = (char **)v6;
        char v23 = 80;
        goto LABEL_213;
      }
      if (*(void *)v20 != 0x2E6E69746C697542 || *(void *)(v20 + 3) != 0x746E492E6E69746CLL) {
        goto LABEL_158;
      }
      goto LABEL_168;
    case 0x12uLL:
      if (*(void *)v20 != 0x2E6E69746C697542
        || *(void *)(v20 + 8) != 0x746E696F50776152
        || *(_WORD *)(v20 + 16) != 29285)
      {
        if (*(void *)v20 == 0x2E6E69746C697542
          && *(void *)(v20 + 8) == 0x726574694C746E49
          && *(_WORD *)(v20 + 16) == 27745)
        {
          int v22 = (char **)v6;
          char v23 = 73;
          goto LABEL_213;
        }
LABEL_153:
        if (*(void *)v20 == 0x2E6E69746C697542 && *(void *)(v20 + 3) == 0x746E492E6E69746CLL)
        {
LABEL_168:
          uint64_t v74 = 11;
          if (v19 < 0xB) {
            uint64_t v74 = v19;
          }
          long long v75 = (const void *)(v20 + v74);
          size_t v76 = v19 - v74;
          uint64_t v77 = (char **)v6;
          char v78 = 105;
        }
        else
        {
          if (v19 < 0xE)
          {
LABEL_162:
            if (*(void *)v20 != 0x2E6E69746C697542 || *(void *)(v20 + 3) != 0x6365562E6E69746CLL)
            {
LABEL_166:
              *(_DWORD *)a3 = 9;
              *(void *)(a3 + 8) = a2;
              int v73 = 949;
LABEL_167:
              *(_DWORD *)(a3 + 16) = v73;
              return this;
            }
            uint64_t v79 = 11;
            if (v19 < 0xB) {
              uint64_t v79 = v19;
            }
            v80 = (char *)(v20 + v79);
            unint64_t v81 = v19 - v79;
            if (v19 >= 0xC)
            {
              __int16 v88 = memchr(v80, 120, v19 - v79);
              unint64_t v82 = -1;
              if (v88) {
                unint64_t v82 = v88 - v80;
              }
            }
            else
            {
              unint64_t v82 = -1;
            }
            BOOL v89 = v81 > v82;
            if (v81 >= v82) {
              size_t v90 = v82;
            }
            else {
              size_t v90 = v81;
            }
            uint64_t v91 = (unsigned __int16 *)&v80[v90];
            uint64_t v92 = v89;
            if (v89) {
              uint64_t v91 = (unsigned __int16 *)((char *)v91 + 1);
            }
            v138 = v91;
            size_t v139 = v81 - v90 - v92;
            if (v139 == 10
              && ((v93 = *(void *)v91, v94 = v91[4], v93 == 0x746E696F50776152) ? (BOOL v95 = v94 == 29285) : (BOOL v95 = 0),
                  v95))
            {
              v99 = (char **)v6;
              char v100 = 112;
            }
            else
            {
              if (__swift::__runtime::llvm::StringRef::consume_front((const void **)&v138, "FPIEEE", 6uLL))
              {
                v96 = (char **)v6;
                char v97 = 102;
              }
              else
              {
                this = __swift::__runtime::llvm::StringRef::consume_front((const void **)&v138, "Int", 3uLL);
                if (!this)
                {
                  *(_DWORD *)a3 = 8;
                  *(void *)(a3 + 8) = a2;
                  int v73 = 945;
                  goto LABEL_167;
                }
                v96 = (char **)v6;
                char v97 = 105;
              }
              v98 = swift::Demangle::__runtime::RemanglerBuffer::operator<<(v96, v97);
              swift::Demangle::__runtime::CharVector::append(v98, v138, v139, v98[2]);
              v99 = v98;
              char v100 = 95;
            }
            swift::Demangle::__runtime::RemanglerBuffer::operator<<(v99, v100);
            swift::Demangle::__runtime::CharVector::append((char **)v6, "Bv", 2uLL, *(void **)(v4 + 12744));
            char v85 = *(char **)(v4 + 12744);
            uint64_t v84 = (char **)v6;
            int v86 = v80;
            size_t v87 = v90;
            goto LABEL_212;
          }
LABEL_158:
          if (*(void *)v20 != 0x2E6E69746C697542 || *(void *)(v20 + 6) != 0x4545454950462E6ELL) {
            goto LABEL_162;
          }
          uint64_t v83 = 14;
          if (v19 < 0xE) {
            uint64_t v83 = v19;
          }
          long long v75 = (const void *)(v20 + v83);
          size_t v76 = v19 - v83;
          uint64_t v77 = (char **)v6;
          char v78 = 102;
        }
        uint64_t v84 = swift::Demangle::__runtime::RemanglerBuffer::operator<<(v77, v78);
        uint64_t v6 = (const void **)v84;
        char v85 = v84[2];
        int v86 = v75;
        size_t v87 = v76;
LABEL_212:
        swift::Demangle::__runtime::CharVector::append(v84, v86, v87, v85);
        int v22 = (char **)v6;
        char v23 = 95;
LABEL_213:
        this = (uint64_t)swift::Demangle::__runtime::RemanglerBuffer::operator<<(v22, v23);
        goto LABEL_214;
      }
      unsigned int v101 = *(_DWORD *)(v4 + 12736);
      size_t v102 = *(unsigned int *)(v4 + 12740);
      v103 = *(char **)(v4 + 12728);
      if (v101 < v102) {
        goto LABEL_257;
      }
      v104 = *(void **)(v4 + 12744);
      v105 = (char *)v104[1];
      if (&v103[v102] == v105)
      {
        unint64_t v123 = (unint64_t)&v103[v102 + 1];
        unint64_t v106 = v104[2];
        if (v123 <= v106)
        {
          v104[1] = v123;
          LODWORD(v124) = 1;
LABEL_256:
          *(_DWORD *)(v4 + 12740) = v102 + v124;
LABEL_257:
          *(_DWORD *)(v4 + 12736) = v101 + 1;
          v103[v101] = 112;
          goto LABEL_214;
        }
      }
      else
      {
        unint64_t v106 = v104[2];
      }
      if ((2 * v102) <= 4) {
        uint64_t v124 = 4;
      }
      else {
        uint64_t v124 = (2 * v102);
      }
      size_t v125 = v124 + v102;
      if (!v105 || (unint64_t)&v105[v125] > v106)
      {
        unint64_t v126 = 2 * v104[4];
        if (v126 <= v125 + 1) {
          unint64_t v126 = v125 + 1;
        }
        v104[4] = v126;
        unint64_t v127 = v126 + 8;
        this = (uint64_t)malloc_type_malloc(v126 + 8, 0xD0263BC5uLL);
        *(void *)this = v104[3];
        v105 = (char *)(this + 8);
        v104[2] = this + v127;
        v104[3] = this;
      }
      v104[1] = &v105[v125];
      if (v102) {
        this = (uint64_t)memcpy(v105, *v6, v102);
      }
      *(void *)(v4 + 12728) = v105;
      LODWORD(v102) = *(_DWORD *)(v4 + 12740);
      v103 = v105;
      unsigned int v101 = *(_DWORD *)(v4 + 12736);
      goto LABEL_256;
    case 0x14uLL:
      if (*(void *)v20 == 0x2E6E69746C697542
        && *(void *)(v20 + 8) == 0x624F656764697242
        && *(_DWORD *)(v20 + 16) == 1952671082)
      {
        unsigned int v107 = *(_DWORD *)(v4 + 12736);
        size_t v108 = *(unsigned int *)(v4 + 12740);
        v109 = *(char **)(v4 + 12728);
        if (v107 < v108)
        {
LABEL_271:
          *(_DWORD *)(v4 + 12736) = v107 + 1;
          v109[v107] = 98;
          goto LABEL_214;
        }
        v110 = *(void **)(v4 + 12744);
        v111 = (char *)v110[1];
        if (&v109[v108] == v111)
        {
          unint64_t v128 = (unint64_t)&v109[v108 + 1];
          unint64_t v112 = v110[2];
          if (v128 <= v112)
          {
            v110[1] = v128;
            LODWORD(v129) = 1;
LABEL_270:
            *(_DWORD *)(v4 + 12740) = v108 + v129;
            goto LABEL_271;
          }
        }
        else
        {
          unint64_t v112 = v110[2];
        }
        if ((2 * v108) <= 4) {
          uint64_t v129 = 4;
        }
        else {
          uint64_t v129 = (2 * v108);
        }
        size_t v130 = v129 + v108;
        if (!v111 || (unint64_t)&v111[v130] > v112)
        {
          unint64_t v131 = 2 * v110[4];
          if (v131 <= v130 + 1) {
            unint64_t v131 = v130 + 1;
          }
          v110[4] = v131;
          unint64_t v132 = v131 + 8;
          this = (uint64_t)malloc_type_malloc(v131 + 8, 0xD0263BC5uLL);
          *(void *)this = v110[3];
          v111 = (char *)(this + 8);
          v110[2] = this + v132;
          v110[3] = this;
        }
        v110[1] = &v111[v130];
        if (v108) {
          this = (uint64_t)memcpy(v111, *v6, v108);
        }
        *(void *)(v4 + 12728) = v111;
        LODWORD(v108) = *(_DWORD *)(v4 + 12740);
        v109 = v111;
        unsigned int v107 = *(_DWORD *)(v4 + 12736);
        goto LABEL_270;
      }
      if (*(void *)v20 != 0x2E6E69746C697542
        || *(void *)(v20 + 8) != 0x624F65766974614ELL
        || *(_DWORD *)(v20 + 16) != 1952671082)
      {
        goto LABEL_153;
      }
      unsigned int v36 = *(_DWORD *)(v4 + 12736);
      size_t v37 = *(unsigned int *)(v4 + 12740);
      uint64_t v38 = *(char **)(v4 + 12728);
      if (v36 >= v37)
      {
        char v39 = *(void **)(v4 + 12744);
        uint64_t v40 = (char *)v39[1];
        if (&v38[v37] == v40)
        {
          unint64_t v133 = (unint64_t)&v38[v37 + 1];
          unint64_t v41 = v39[2];
          if (v133 <= v41)
          {
            v39[1] = v133;
            LODWORD(v134) = 1;
LABEL_289:
            *(_DWORD *)(v4 + 12740) = v37 + v134;
            goto LABEL_290;
          }
        }
        else
        {
          unint64_t v41 = v39[2];
        }
        if ((2 * v37) <= 4) {
          uint64_t v134 = 4;
        }
        else {
          uint64_t v134 = (2 * v37);
        }
        size_t v135 = v134 + v37;
        if (!v40 || (unint64_t)&v40[v135] > v41)
        {
          unint64_t v136 = 2 * v39[4];
          if (v136 <= v135 + 1) {
            unint64_t v136 = v135 + 1;
          }
          v39[4] = v136;
          unint64_t v137 = v136 + 8;
          this = (uint64_t)malloc_type_malloc(v136 + 8, 0xD0263BC5uLL);
          *(void *)this = v39[3];
          uint64_t v40 = (char *)(this + 8);
          v39[2] = this + v137;
          v39[3] = this;
        }
        v39[1] = &v40[v135];
        if (v37) {
          this = (uint64_t)memcpy(v40, *v6, v37);
        }
        *(void *)(v4 + 12728) = v40;
        LODWORD(v37) = *(_DWORD *)(v4 + 12740);
        uint64_t v38 = v40;
        unsigned int v36 = *(_DWORD *)(v4 + 12736);
        goto LABEL_289;
      }
LABEL_290:
      *(_DWORD *)(v4 + 12736) = v36 + 1;
      v38[v36] = 111;
LABEL_214:
      *(_DWORD *)a3 = 0;
      *(void *)(a3 + 8) = 0;
      *(_DWORD *)(a3 + 16) = 0;
      return this;
    case 0x15uLL:
      if (*(void *)v20 != 0x2E6E69746C697542
        || *(void *)(v20 + 8) != 0x4F6E776F6E6B6E55
        || *(void *)(v20 + 13) != 0x7463656A624F6E77)
      {
        goto LABEL_153;
      }
      unsigned int v44 = *(_DWORD *)(v4 + 12736);
      size_t v45 = *(unsigned int *)(v4 + 12740);
      uint64_t v46 = *(char **)(v4 + 12728);
      if (v44 < v45) {
        goto LABEL_229;
      }
      uint64_t v47 = *(void **)(v4 + 12744);
      char v48 = (char *)v47[1];
      if (&v46[v45] == v48)
      {
        unint64_t v113 = (unint64_t)&v46[v45 + 1];
        unint64_t v49 = v47[2];
        if (v113 <= v49)
        {
          v47[1] = v113;
          LODWORD(v114) = 1;
          goto LABEL_228;
        }
      }
      else
      {
        unint64_t v49 = v47[2];
      }
      if ((2 * v45) <= 4) {
        uint64_t v114 = 4;
      }
      else {
        uint64_t v114 = (2 * v45);
      }
      size_t v115 = v114 + v45;
      if (!v48 || (unint64_t)&v48[v115] > v49)
      {
        unint64_t v116 = 2 * v47[4];
        if (v116 <= v115 + 1) {
          unint64_t v116 = v115 + 1;
        }
        v47[4] = v116;
        unint64_t v117 = v116 + 8;
        this = (uint64_t)malloc_type_malloc(v116 + 8, 0xD0263BC5uLL);
        *(void *)this = v47[3];
        char v48 = (char *)(this + 8);
        v47[2] = this + v117;
        v47[3] = this;
      }
      v47[1] = &v48[v115];
      if (v45) {
        this = (uint64_t)memcpy(v48, *v6, v45);
      }
      *(void *)(v4 + 12728) = v48;
      LODWORD(v45) = *(_DWORD *)(v4 + 12740);
      uint64_t v46 = v48;
      unsigned int v44 = *(_DWORD *)(v4 + 12736);
LABEL_228:
      *(_DWORD *)(v4 + 12740) = v45 + v114;
LABEL_229:
      *(_DWORD *)(v4 + 12736) = v44 + 1;
      v46[v44] = 79;
      goto LABEL_214;
    case 0x19uLL:
      if (*(void *)v20 != 0x2E6E69746C697542
        || *(void *)(v20 + 8) != 0x6156656661736E55
        || *(void *)(v20 + 16) != 0x656666754265756CLL
        || *(unsigned char *)(v20 + 24) != 114)
      {
        goto LABEL_153;
      }
      unsigned int v53 = *(_DWORD *)(v4 + 12736);
      size_t v54 = *(unsigned int *)(v4 + 12740);
      uint64_t v55 = *(char **)(v4 + 12728);
      if (v53 < v54) {
        goto LABEL_243;
      }
      uint64_t v56 = *(void **)(v4 + 12744);
      char v57 = (char *)v56[1];
      if (&v55[v54] == v57)
      {
        unint64_t v118 = (unint64_t)&v55[v54 + 1];
        unint64_t v58 = v56[2];
        if (v118 <= v58)
        {
          v56[1] = v118;
          LODWORD(v119) = 1;
          goto LABEL_242;
        }
      }
      else
      {
        unint64_t v58 = v56[2];
      }
      if ((2 * v54) <= 4) {
        uint64_t v119 = 4;
      }
      else {
        uint64_t v119 = (2 * v54);
      }
      size_t v120 = v119 + v54;
      if (!v57 || (unint64_t)&v57[v120] > v58)
      {
        unint64_t v121 = 2 * v56[4];
        if (v121 <= v120 + 1) {
          unint64_t v121 = v120 + 1;
        }
        v56[4] = v121;
        unint64_t v122 = v121 + 8;
        this = (uint64_t)malloc_type_malloc(v121 + 8, 0xD0263BC5uLL);
        *(void *)this = v56[3];
        char v57 = (char *)(this + 8);
        void v56[2] = this + v122;
        v56[3] = this;
      }
      v56[1] = &v57[v120];
      if (v54) {
        this = (uint64_t)memcpy(v57, *v6, v54);
      }
      *(void *)(v4 + 12728) = v57;
      LODWORD(v54) = *(_DWORD *)(v4 + 12740);
      uint64_t v55 = v57;
      unsigned int v53 = *(_DWORD *)(v4 + 12736);
LABEL_242:
      *(_DWORD *)(v4 + 12740) = v54 + v119;
LABEL_243:
      *(_DWORD *)(v4 + 12736) = v53 + 1;
      v55[v53] = 66;
      goto LABEL_214;
    case 0x1BuLL:
      if (*(void *)v20 != 0x2E6E69746C697542
        || *(void *)(v20 + 8) != 0x41746C7561666544
        || *(void *)(v20 + 16) != 0x726F7453726F7463
        || *(void *)(v20 + 19) != 0x656761726F745372)
      {
        goto LABEL_153;
      }
      int v22 = (char **)v6;
      char v23 = 68;
      goto LABEL_213;
    case 0x1DuLL:
      if (*(void *)v20 != 0x2E6E69746C697542
        || *(void *)(v20 + 8) != 0x6661736E55776152
        || *(void *)(v20 + 16) != 0x756E69746E6F4365
        || *(void *)(v20 + 21) != 0x6E6F697461756E69)
      {
        goto LABEL_153;
      }
      int v22 = (char **)v6;
      char v23 = 99;
      goto LABEL_213;
    case 0x29uLL:
      if (*(void *)v20 != 0x2E6E69746C697542
        || *(void *)(v20 + 8) != 0x75616665446E6F4ELL
        || *(void *)(v20 + 16) != 0x697274736944746CLL
        || *(void *)(v20 + 24) != 0x7463416465747562
        || *(void *)(v20 + 32) != 0x6761726F7453726FLL
        || *(unsigned char *)(v20 + 40) != 101)
      {
        goto LABEL_153;
      }
      int v22 = (char **)v6;
      char v23 = 100;
      goto LABEL_213;
    default:
      if (v19 < 0xB) {
        goto LABEL_166;
      }
      goto LABEL_153;
  }
}

void *anonymous namespace'::Remangler::mangleCFunctionPointer@<X0>(swift::Demangle::__runtime::NodeFactory **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v4 = a2;
  uint64_t v7 = *((unsigned __int8 *)a2 + 18);
  size_t v8 = a2;
  if ((v7 - 1) >= 2)
  {
    if (v7 != 5)
    {
LABEL_11:
      switch(v7)
      {
        case 1:
LABEL_16:
          unsigned int v10 = a3 + 1;
          uint64_t v11 = v7 - 1;
          while (1)
          {
            unint64_t v12 = *((unsigned __int8 *)v4 + 18);
            unsigned int v13 = v12 - 1;
            if (v12 != 1)
            {
              if (v12 == 5)
              {
                unint64_t v12 = *((unsigned int *)v4 + 2);
              }
              else
              {
                if (v12 != 2) {
                  goto LABEL_17;
                }
                unint64_t v12 = 2;
              }
            }
            if (v12 > v11)
            {
              uint64_t v14 = v4;
              if (v13 >= 2) {
                uint64_t v14 = *(swift::Demangle::__runtime::Node **)v4;
              }
              if (*(_DWORD *)a4) {
                return result;
              }
              goto LABEL_18;
            }
LABEL_17:
            *(_DWORD *)a4 = 0;
            *(void *)(a4 + 8) = 0;
            *(_DWORD *)(a4 + 16) = 0;
LABEL_18:
            if (--v11 == -1) {
              goto LABEL_29;
            }
          }
        case 5:
          uint64_t v7 = *((unsigned int *)a2 + 2);
          if (v7) {
            goto LABEL_16;
          }
          break;
        case 2:
          uint64_t v7 = 2;
          goto LABEL_16;
      }
LABEL_29:
      *(_DWORD *)a4 = 0;
      *(void *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 16) = 0;
      BOOL v16 = (char **)(this + 1591);
      unint64_t v17 = this[1593];
      unint64_t v18 = "XC";
      size_t v19 = 2;
      goto LABEL_51;
    }
    if (!*((_DWORD *)a2 + 2)) {
      goto LABEL_29;
    }
    size_t v8 = *(swift::Demangle::__runtime::Node **)a2;
  }
  if (*(_WORD *)(*(void *)v8 + 16) != 23) {
    goto LABEL_11;
  }
  if (v7 != 1)
  {
    if (v7 == 5)
    {
      uint64_t v7 = *((unsigned int *)a2 + 2);
    }
    else
    {
      BOOL v9 = v7 == 2;
      uint64_t v7 = 2;
      if (!v9) {
        uint64_t v7 = 0;
      }
    }
  }
  unsigned int v20 = a3 + 1;
  uint64_t v21 = v7 - 1;
  while (v21)
  {
    unint64_t v22 = *((unsigned __int8 *)v4 + 18);
    unsigned int v23 = v22 - 1;
    if (v22 != 1)
    {
      if (v22 == 5)
      {
        unint64_t v22 = *((unsigned int *)v4 + 2);
      }
      else
      {
        if (v22 != 2) {
          goto LABEL_32;
        }
        unint64_t v22 = 2;
      }
    }
    if (v22 <= v21)
    {
LABEL_32:
      *(_DWORD *)a4 = 0;
      *(void *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 16) = 0;
      --v21;
    }
    else
    {
      char v24 = v4;
      if (v23 >= 2) {
        char v24 = *(swift::Demangle::__runtime::Node **)v4;
      }
      if (*(_DWORD *)a4) {
        return result;
      }
    }
  }
  swift::Demangle::__runtime::CharVector::append((char **)this + 1591, "XzC", 3uLL, this[1593]);
  int v25 = *((unsigned __int8 *)v4 + 18);
  if ((v25 - 1) < 2) {
    goto LABEL_48;
  }
  if (v25 == 5 && *((_DWORD *)v4 + 2))
  {
    uint64_t v4 = *(swift::Demangle::__runtime::Node **)v4;
LABEL_48:
    uint64_t v26 = *(swift::Demangle::__runtime::Node **)v4;
  }
  else
  {
    uint64_t v26 = 0;
  }
  swift::Demangle::__runtime::CharVector::append((unsigned int *)this + 3182, *((void *)v26 + 1), this[1593]);
  unint64_t v18 = *(const char **)v26;
  size_t v19 = *((void *)v26 + 1);
  unint64_t v17 = this[1593];
  BOOL v16 = (char **)(this + 1591);
LABEL_51:
  uint64_t result = swift::Demangle::__runtime::CharVector::append(v16, v18, v19, v17);
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  return result;
}

void *anonymous namespace'::Remangler::mangleClangType@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = (char **)((char *)this + 12728);
  swift::Demangle::__runtime::CharVector::append((unsigned int *)this + 3182, *((void *)a2 + 1), *((swift::Demangle::__runtime::NodeFactory **)this + 1593));
  uint64_t result = swift::Demangle::__runtime::CharVector::append(v6, *(const void **)a2, *((void *)a2 + 1), *((void **)this + 1593));
  *(_DWORD *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 16) = 0;
  return result;
}

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleClassMetadataBaseOffset@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v4 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      int v8 = 321;
      int v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  if (*(_DWORD *)a4) {
    return this;
  }
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::__runtime::CharVector::append((char **)v4 + 1591, "Mo", 2uLL, *((void **)v4 + 1593));
  int v7 = 0;
  a2 = 0;
  int v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleConcreteProtocolConformance@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6 = this;
  int v8 = *((unsigned __int8 *)a2 + 18);
  BOOL v9 = a2;
  if ((v8 - 1) < 2) {
    goto LABEL_5;
  }
  if (v8 == 5 && *((_DWORD *)a2 + 2))
  {
    BOOL v9 = (swift::Demangle::__runtime::Node **)*a2;
LABEL_5:
    unsigned int v10 = *v9;
    goto LABEL_7;
  }
  unsigned int v10 = 0;
LABEL_7:
  int v11 = *((unsigned __int8 *)v10 + 18);
  if (v11 != 1)
  {
    if (v11 != 5 || *((_DWORD *)v10 + 2) != 1)
    {
      int v16 = 321;
      int v17 = 10;
LABEL_18:
      *(_DWORD *)a4 = v17;
      *(void *)(a4 + 8) = v10;
      *(_DWORD *)(a4 + 16) = v16;
      return this;
    }
    unsigned int v10 = *(swift::Demangle::__runtime::Node **)v10;
  }
  if (*(_DWORD *)a4) {
    return this;
  }
  unsigned int v12 = a3 + 1;
  int v13 = *((unsigned __int8 *)a2 + 18);
  uint64_t v14 = (swift::Demangle::__runtime::Node *)a2;
  if (v13 == 2) {
    goto LABEL_16;
  }
  if (v13 == 5 && *((_DWORD *)a2 + 2) >= 2u)
  {
    uint64_t v14 = *a2;
LABEL_16:
    size_t v15 = (swift::Demangle::__runtime::Node *)*((void *)v14 + 1);
    goto LABEL_21;
  }
  size_t v15 = 0;
LABEL_21:
  if (!*(_DWORD *)a4)
  {
    if (*((unsigned char *)a2 + 18) != 5 || *((_DWORD *)a2 + 2) < 3u)
    {
      swift::Demangle::__runtime::CharVector::append((char **)v6 + 1591, "y", 1uLL, *((void **)v6 + 1593));
LABEL_27:
      this = (_anonymous_namespace_::Remangler *)swift::Demangle::__runtime::CharVector::append((char **)v6 + 1591, "HC", 2uLL, *((void **)v6 + 1593));
      int v17 = 0;
      unsigned int v10 = 0;
      int v16 = 0;
      goto LABEL_18;
    }
    if (!*(_DWORD *)a4) {
      goto LABEL_27;
    }
  }
  return this;
}

void *anonymous namespace'::Remangler::manglePackProtocolConformance@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6 = *((unsigned __int8 *)a2 + 18);
  if ((v6 - 1) < 2) {
    goto LABEL_5;
  }
  if (v6 == 5 && *((_DWORD *)a2 + 2))
  {
    a2 = (swift::Demangle::__runtime::Node **)*a2;
LABEL_5:
    int v7 = *a2;
    goto LABEL_7;
  }
  int v7 = 0;
LABEL_7:
  if (!*(_DWORD *)a4)
  {
    uint64_t result = swift::Demangle::__runtime::CharVector::append(this + 1591, "HX", 2uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
  }
  return result;
}

void *anonymous namespace'::Remangler::mangleConformanceAttachedMacroExpansion@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  unsigned int v7 = a3 + 1;
  int v8 = *((unsigned __int8 *)a2 + 18);
  BOOL v9 = a2;
  if ((v8 - 1) >= 2)
  {
    if (v8 != 5 || !*((_DWORD *)a2 + 2))
    {
      *(_DWORD *)a4 = 0;
      *(void *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 16) = 0;
      goto LABEL_8;
    }
    BOOL v9 = (swift::Demangle::__runtime::Node **)*a2;
  }
  if (*(_DWORD *)a4) {
    return result;
  }
  int v8 = *((unsigned __int8 *)a2 + 18);
LABEL_8:
  int v11 = (swift::Demangle::__runtime::Node *)a2;
  if (v8 != 2)
  {
    if (v8 != 5 || *((_DWORD *)a2 + 2) < 2u)
    {
      *(_DWORD *)a4 = 0;
      *(void *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 16) = 0;
      if (v8 != 5) {
        goto LABEL_19;
      }
      goto LABEL_16;
    }
    int v11 = *a2;
  }
  if (*(_DWORD *)a4) {
    return result;
  }
  if (*((unsigned char *)a2 + 18) != 5) {
    goto LABEL_19;
  }
LABEL_16:
  if (*((_DWORD *)a2 + 2) > 2u)
  {
    if (*(_DWORD *)a4) {
      return result;
    }
    goto LABEL_20;
  }
LABEL_19:
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
LABEL_20:
  uint64_t result = swift::Demangle::__runtime::CharVector::append(this + 1591, "fMc", 3uLL, this[1593]);
  if (*((unsigned char *)a2 + 18) == 5 && *((_DWORD *)a2 + 2) >= 4u)
  {
    unsigned int v12 = (swift::Demangle::__runtime::Node *)*((void *)*a2 + 3);
  }
  else
  {
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
  }
  return result;
}

void *anonymous namespace'::Remangler::mangleCoroutineContinuationPrototype@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6 = *((unsigned __int8 *)a2 + 18);
  unsigned int v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      uint64_t v8 = *(void *)a2;
      unsigned int v7 = *(swift::Demangle::__runtime::Node **)a2;
      goto LABEL_9;
    }
    unsigned int v7 = 0;
  }
  switch(v6)
  {
    case 1:
      BOOL v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 8);
      if (v7 == (swift::Demangle::__runtime::Node *)((char *)a2 + 8)) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 2:
      BOOL v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 16);
      if (v7 == (swift::Demangle::__runtime::Node *)((char *)a2 + 16)) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 5:
      uint64_t v8 = *(void *)a2;
LABEL_9:
      BOOL v9 = (swift::Demangle::__runtime::Node *)(v8 + 8 * *((unsigned int *)a2 + 2));
      if (v7 == v9) {
        goto LABEL_19;
      }
      goto LABEL_16;
  }
  BOOL v9 = 0;
  if (!v7)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    uint64_t result = swift::Demangle::__runtime::CharVector::append(this + 1591, "TC", 2uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
LABEL_16:
  unsigned int v10 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4) {
      return result;
    }
    unsigned int v7 = (swift::Demangle::__runtime::Node *)((char *)v7 + 8);
    if (v7 == v9) {
      goto LABEL_19;
    }
  }
}

void *anonymous namespace'::Remangler::mangleDeallocator@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6 = *((unsigned __int8 *)a2 + 18);
  unsigned int v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      uint64_t v8 = *(void *)a2;
      unsigned int v7 = *(swift::Demangle::__runtime::Node **)a2;
      goto LABEL_9;
    }
    unsigned int v7 = 0;
  }
  switch(v6)
  {
    case 1:
      BOOL v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 8);
      if (v7 == (swift::Demangle::__runtime::Node *)((char *)a2 + 8)) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 2:
      BOOL v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 16);
      if (v7 == (swift::Demangle::__runtime::Node *)((char *)a2 + 16)) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 5:
      uint64_t v8 = *(void *)a2;
LABEL_9:
      BOOL v9 = (swift::Demangle::__runtime::Node *)(v8 + 8 * *((unsigned int *)a2 + 2));
      if (v7 == v9) {
        goto LABEL_19;
      }
      goto LABEL_16;
  }
  BOOL v9 = 0;
  if (!v7)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    uint64_t result = swift::Demangle::__runtime::CharVector::append(this + 1591, "fD", 2uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
LABEL_16:
  unsigned int v10 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4) {
      return result;
    }
    unsigned int v7 = (swift::Demangle::__runtime::Node *)((char *)v7 + 8);
    if (v7 == v9) {
      goto LABEL_19;
    }
  }
}

void *anonymous namespace'::Remangler::mangleDefaultArgumentInitializer@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v4 = a2;
  unsigned int v7 = a3 + 1;
  int v8 = *((unsigned __int8 *)a2 + 18);
  BOOL v9 = (swift::Demangle::__runtime::Node **)a2;
  if ((v8 - 1) >= 2)
  {
    if (v8 != 5 || !*((_DWORD *)a2 + 2))
    {
      *(_DWORD *)a4 = 0;
      *(void *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 16) = 0;
      goto LABEL_8;
    }
    BOOL v9 = *(swift::Demangle::__runtime::Node ***)a2;
  }
  if (*(_DWORD *)a4) {
    return result;
  }
LABEL_8:
  uint64_t result = swift::Demangle::__runtime::CharVector::append(this + 1591, "fA", 2uLL, this[1593]);
  int v11 = *((unsigned __int8 *)v4 + 18);
  if (v11 != 2)
  {
    if (v11 != 5 || *((_DWORD *)v4 + 2) < 2u)
    {
      *(_DWORD *)a4 = 0;
      *(void *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 16) = 0;
      return result;
    }
    uint64_t v4 = *(swift::Demangle::__runtime::Node **)v4;
  }
  unsigned int v12 = (swift::Demangle::__runtime::Node *)*((void *)v4 + 1);
}

uint64_t anonymous namespace'::Remangler::mangleDependentAssociatedConformance@<X0>(uint64_t this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v5 = a2;
  int v6 = (_anonymous_namespace_::Remangler *)this;
  int v8 = *((unsigned __int8 *)a2 + 18);
  BOOL v9 = (swift::Demangle::__runtime::Node **)a2;
  if ((v8 - 1) < 2) {
    goto LABEL_5;
  }
  if (v8 == 5 && *((_DWORD *)a2 + 2))
  {
    BOOL v9 = *(swift::Demangle::__runtime::Node ***)a2;
LABEL_5:
    unsigned int v10 = *v9;
    goto LABEL_7;
  }
  unsigned int v10 = 0;
LABEL_7:
  int v11 = *((unsigned __int8 *)v10 + 18);
  if (v11 != 1)
  {
    if (v11 != 5 || *((_DWORD *)v10 + 2) != 1)
    {
      int v14 = 321;
      int v15 = 10;
LABEL_44:
      *(_DWORD *)a4 = v15;
      *(void *)(a4 + 8) = v10;
      *(_DWORD *)(a4 + 16) = v14;
      return this;
    }
    unsigned int v10 = *(swift::Demangle::__runtime::Node **)v10;
  }
  if (*(_DWORD *)a4) {
    return this;
  }
  int v12 = *((unsigned __int8 *)v5 + 18);
  if (v12 == 2) {
    goto LABEL_16;
  }
  if (v12 == 5 && *((_DWORD *)v5 + 2) >= 2u)
  {
    uint64_t v5 = *(swift::Demangle::__runtime::Node **)v5;
LABEL_16:
    int v13 = (uint64_t *)*((void *)v5 + 1);
    goto LABEL_19;
  }
  int v13 = 0;
LABEL_19:
  if (*((_WORD *)v13 + 8) != 232) {
    goto LABEL_26;
  }
  int v16 = *((unsigned __int8 *)v13 + 18);
  if ((v16 - 1) < 2) {
    goto LABEL_24;
  }
  if (v16 == 5 && *((_DWORD *)v13 + 2))
  {
    int v13 = (uint64_t *)*v13;
LABEL_24:
    int v13 = (uint64_t *)*v13;
    goto LABEL_26;
  }
  int v13 = 0;
LABEL_26:
  if (this)
  {
LABEL_43:
    int v15 = 0;
    unsigned int v10 = 0;
    int v14 = 0;
    goto LABEL_44;
  }
  int v17 = *((unsigned __int8 *)v13 + 18);
  unint64_t v18 = (swift::Demangle::__runtime::Node **)v13;
  if ((v17 - 1) >= 2)
  {
    if (v17 == 5)
    {
      size_t v19 = (uint64_t *)*v13;
      unint64_t v18 = (swift::Demangle::__runtime::Node **)*v13;
LABEL_35:
      unsigned int v20 = (swift::Demangle::__runtime::Node **)&v19[*((unsigned int *)v13 + 2)];
      goto LABEL_39;
    }
    unint64_t v18 = 0;
  }
  switch(v17)
  {
    case 1:
      unsigned int v20 = (swift::Demangle::__runtime::Node **)(v13 + 1);
      break;
    case 2:
      unsigned int v20 = (swift::Demangle::__runtime::Node **)(v13 + 2);
      break;
    case 5:
      size_t v19 = (uint64_t *)*v13;
      goto LABEL_35;
    default:
      unsigned int v20 = 0;
      break;
  }
LABEL_39:
  if (v18 == v20) {
    goto LABEL_43;
  }
  unsigned int v21 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4) {
      return this;
    }
    if (++v18 == v20) {
      goto LABEL_43;
    }
  }
}

void anonymous namespace'::Remangler::mangleDependentAssociatedTypeRef(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v5 = a2;
  int v8 = *((unsigned __int8 *)a2 + 18);
  BOOL v9 = a2;
  if ((v8 - 1) < 2) {
    goto LABEL_5;
  }
  if (v8 == 5 && *((_DWORD *)a2 + 2))
  {
    BOOL v9 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_5:
    uint64_t v10 = *(void *)v9;
    goto LABEL_7;
  }
  uint64_t v10 = 0;
LABEL_7:
  long long v15 = 0uLL;
  LOBYTE(v16) = 0;
  {
    unint64_t v11 = *((void *)this + 1585);
    if (v11 > 0xF)
    {
      int v13 = *((_DWORD *)this + 3178) + 16;
      long long v17 = v15;
      uint64_t v18 = v16;
      int v19 = v13;
      std::__hash_table<std::__hash_value_type<swift::Demangle::__runtime::SubstitutionEntry,unsigned int>,std::__unordered_map_hasher<swift::Demangle::__runtime::SubstitutionEntry,std::__hash_value_type<swift::Demangle::__runtime::SubstitutionEntry,unsigned int>,swift::Demangle::__runtime::SubstitutionEntry::Hasher,std::equal_to<swift::Demangle::__runtime::SubstitutionEntry>,true>,std::__unordered_map_equal<swift::Demangle::__runtime::SubstitutionEntry,std::__hash_value_type<swift::Demangle::__runtime::SubstitutionEntry,unsigned int>,std::equal_to<swift::Demangle::__runtime::SubstitutionEntry>,swift::Demangle::__runtime::SubstitutionEntry::Hasher,true>,std::allocator<std::__hash_value_type<swift::Demangle::__runtime::SubstitutionEntry,unsigned int>>>::__emplace_unique_key_args<swift::Demangle::__runtime::SubstitutionEntry,std::pair<swift::Demangle::__runtime::SubstitutionEntry const,unsigned int>>((uint64_t)this + 12688, (uint64_t)&v17, &v17);
    }
    else
    {
      *((void *)this + 1585) = v11 + 1;
      int v12 = (char *)this + 24 * v11 + 12296;
      *(_OWORD *)int v12 = v15;
      v12[16] = v16;
    }
  }
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  int v14 = *((unsigned __int8 *)v5 + 18);
  if (v14 == 2) {
    goto LABEL_15;
  }
  if (v14 == 5 && *((_DWORD *)v5 + 2) >= 2u)
  {
    uint64_t v5 = *(swift::Demangle::__runtime::Node **)v5;
LABEL_15:
    return;
  }
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
}

uint64_t *anonymous namespace'::Remangler::mangleDependentGenericConformanceRequirement@<X0>(uint64_t *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v5 = this;
  int v7 = *((unsigned __int8 *)a2 + 18);
  int v8 = a2;
  if (v7 != 2)
  {
    if (v7 != 5 || *((_DWORD *)a2 + 2) != 2)
    {
      *(_DWORD *)a4 = 1;
      *(void *)(a4 + 8) = a2;
      *(_DWORD *)(a4 + 16) = 1048;
      return this;
    }
    int v8 = *(swift::Demangle::__runtime::Node **)a2;
  }
  BOOL v9 = (uint64_t *)*((void *)v8 + 1);
  int v10 = *((unsigned __int8 *)v9 + 18);
  unint64_t v11 = v9;
  if ((v10 - 1) >= 2)
  {
    if (v10 != 5 || !*((_DWORD *)v9 + 2))
    {
      *(_DWORD *)a4 = 1;
      *(void *)(a4 + 8) = v9;
      *(_DWORD *)(a4 + 16) = 1050;
      return this;
    }
    unint64_t v11 = (uint64_t *)*v9;
  }
  unsigned int v12 = a3 + 1;
  if (*(_WORD *)(*v11 + 16) != 180)
  {
    if (*(_DWORD *)a4) {
      return this;
    }
    int v13 = *((unsigned __int8 *)a2 + 18);
    int v14 = (swift::Demangle::__runtime::Node **)a2;
    if ((v13 - 1) >= 2)
    {
      if (v13 != 5 || !*((_DWORD *)a2 + 2))
      {
        long long v15 = 0;
LABEL_30:
        if (v29)
        {
LABEL_52:
          *(_OWORD *)a4 = v29;
          *(void *)(a4 + 16) = v30;
          return this;
        }
        int v19 = v32;
        if ((v31 & 0x80000000) == 0 && !v32)
        {
          *(_DWORD *)a4 = 1;
          *(void *)(a4 + 8) = a2;
          *(_DWORD *)(a4 + 16) = 1082;
          return this;
        }
        if (v31 == 1)
        {
          int v27 = "Rc";
        }
        else if (v31)
        {
          if (v31 == -1)
          {
            char v24 = (char **)(v5 + 1591);
            int v25 = (void *)v5[1593];
            uint64_t v26 = "RB";
            goto LABEL_65;
          }
          int v27 = "RC";
        }
        else
        {
          int v27 = "Rb";
        }
        goto LABEL_72;
      }
      int v14 = *(swift::Demangle::__runtime::Node ***)a2;
    }
    long long v15 = *v14;
    goto LABEL_30;
  }
  if (*((_WORD *)v9 + 8) != 232) {
    goto LABEL_25;
  }
  if ((v10 - 1) < 2) {
    goto LABEL_15;
  }
  if (v10 == 5 && *((_DWORD *)v9 + 2))
  {
    BOOL v9 = (uint64_t *)*v9;
LABEL_15:
    BOOL v9 = (uint64_t *)*v9;
    goto LABEL_25;
  }
  BOOL v9 = 0;
LABEL_25:
  {
    int v16 = *((unsigned __int8 *)v9 + 18);
    long long v17 = (swift::Demangle::__runtime::Node **)v9;
    if ((v16 - 1) >= 2)
    {
      if (v16 == 5)
      {
        uint64_t v18 = (uint64_t *)*v9;
        long long v17 = (swift::Demangle::__runtime::Node **)*v9;
LABEL_39:
        unsigned int v20 = (swift::Demangle::__runtime::Node **)&v18[*((unsigned int *)v9 + 2)];
        goto LABEL_45;
      }
      long long v17 = 0;
    }
    switch(v16)
    {
      case 1:
        unsigned int v20 = (swift::Demangle::__runtime::Node **)(v9 + 1);
        goto LABEL_45;
      case 2:
        unsigned int v20 = (swift::Demangle::__runtime::Node **)(v9 + 2);
        goto LABEL_45;
      case 5:
        uint64_t v18 = (uint64_t *)*v9;
        goto LABEL_39;
    }
    unsigned int v20 = 0;
LABEL_45:
    while (v17 != v20)
    {
      if (*(_DWORD *)a4) {
        return this;
      }
      ++v17;
    }
  }
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  int v21 = *((unsigned __int8 *)a2 + 18);
  unint64_t v22 = (swift::Demangle::__runtime::Node **)a2;
  if ((v21 - 1) < 2) {
    goto LABEL_50;
  }
  unsigned int v23 = 0;
  if (v21 != 5) {
    goto LABEL_51;
  }
  if (*((_DWORD *)a2 + 2))
  {
    unint64_t v22 = *(swift::Demangle::__runtime::Node ***)a2;
LABEL_50:
    unsigned int v23 = *v22;
    goto LABEL_51;
  }
  unsigned int v23 = 0;
LABEL_51:
  if (v29) {
    goto LABEL_52;
  }
  int v19 = v32;
  if ((v31 & 0x80000000) == 0 && !v32)
  {
    *(_DWORD *)a4 = 1;
    *(void *)(a4 + 8) = a2;
    *(_DWORD *)(a4 + 16) = 1058;
    return this;
  }
  if (v31 == 1)
  {
    int v27 = "Rp";
LABEL_72:
    size_t v28 = 2;
    goto LABEL_73;
  }
  if (!v31)
  {
    int v27 = "R";
    size_t v28 = 1;
LABEL_73:
    swift::Demangle::__runtime::CharVector::append((char **)v5 + 1591, v27, v28, (void *)v5[1593]);
    goto LABEL_74;
  }
  if (v31 != -1)
  {
    int v27 = "RP";
    goto LABEL_72;
  }
  char v24 = (char **)(v5 + 1591);
  int v25 = (void *)v5[1593];
  uint64_t v26 = "RQ";
LABEL_65:
  this = (uint64_t *)swift::Demangle::__runtime::CharVector::append(v24, v26, 2uLL, v25);
LABEL_74:
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  return this;
}

unsigned int *anonymous namespace'::Remangler::mangleDependentGenericParamType@<X0>(unsigned int *this@<X0>, uint64_t **a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = (uint64_t)this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  int v7 = (uint64_t *)a2;
  if ((v6 - 1) >= 2) {
    int v7 = *a2;
  }
  if (!*(void *)*v7)
  {
    int v8 = a2;
    if (v6 == 5) {
      int v8 = (uint64_t **)*a2;
    }
    if (!*v8[1])
    {
      unsigned int v23 = this[3184];
      size_t v24 = this[3185];
      int v25 = (char *)*((void *)this + 1591);
      if (v23 < v24)
      {
LABEL_46:
        *(_DWORD *)(v4 + 12736) = v23 + 1;
        v25[v23] = 120;
        goto LABEL_27;
      }
      uint64_t v26 = (void *)*((void *)this + 1593);
      int v27 = (char *)v26[1];
      if (&v25[v24] == v27)
      {
        unint64_t v29 = (unint64_t)&v25[v24 + 1];
        unint64_t v28 = v26[2];
        if (v29 <= v28)
        {
          v26[1] = v29;
          LODWORD(v30) = 1;
LABEL_45:
          *(_DWORD *)(v4 + 12740) = v24 + v30;
          goto LABEL_46;
        }
      }
      else
      {
        unint64_t v28 = v26[2];
      }
      if ((2 * v24) <= 4) {
        uint64_t v30 = 4;
      }
      else {
        uint64_t v30 = (2 * v24);
      }
      size_t v31 = v30 + v24;
      if (!v27 || (unint64_t)&v27[v31] > v28)
      {
        unint64_t v32 = 2 * v26[4];
        if (v32 <= v31 + 1) {
          unint64_t v32 = v31 + 1;
        }
        v26[4] = v32;
        unint64_t v33 = v32 + 8;
        this = (unsigned int *)malloc_type_malloc(v32 + 8, 0xD0263BC5uLL);
        int v34 = (char *)this + v33;
        *(void *)this = v26[3];
        int v27 = (char *)(this + 2);
        v26[2] = v34;
        v26[3] = this;
      }
      v26[1] = &v27[v31];
      if (v24) {
        this = (unsigned int *)memcpy(v27, *(const void **)(v4 + 12728), v24);
      }
      *(void *)(v4 + 12728) = v27;
      LODWORD(v24) = *(_DWORD *)(v4 + 12740);
      int v25 = v27;
      unsigned int v23 = *(_DWORD *)(v4 + 12736);
      goto LABEL_45;
    }
  }
  unsigned int v9 = this[3184];
  size_t v10 = this[3185];
  unint64_t v11 = (char *)*((void *)this + 1591);
  if (v9 >= v10)
  {
    unsigned int v12 = (void *)*((void *)this + 1593);
    int v13 = (char *)v12[1];
    if (&v11[v10] == v13)
    {
      unint64_t v15 = (unint64_t)&v11[v10 + 1];
      unint64_t v14 = v12[2];
      if (v15 <= v14)
      {
        v12[1] = v15;
        LODWORD(v16) = 1;
LABEL_25:
        *(_DWORD *)(v4 + 12740) = v10 + v16;
        goto LABEL_26;
      }
    }
    else
    {
      unint64_t v14 = v12[2];
    }
    if ((2 * v10) <= 4) {
      uint64_t v16 = 4;
    }
    else {
      uint64_t v16 = (2 * v10);
    }
    size_t v17 = v16 + v10;
    if (v13) {
      BOOL v18 = (unint64_t)&v13[v16 + v10] > v14;
    }
    else {
      BOOL v18 = 1;
    }
    unint64_t v11 = (char *)v12[1];
    if (v18)
    {
      unint64_t v19 = 2 * v12[4];
      if (v19 <= v17 + 1) {
        unint64_t v19 = v17 + 1;
      }
      v12[4] = v19;
      unint64_t v20 = v19 + 8;
      int v21 = malloc_type_malloc(v19 + 8, 0xD0263BC5uLL);
      unint64_t v22 = (char *)v21 + v20;
      void *v21 = v12[3];
      unint64_t v11 = (char *)(v21 + 1);
      v12[2] = v22;
      v12[3] = v21;
    }
    v12[1] = &v11[v17];
    if (v10) {
      memcpy(v11, *(const void **)(v4 + 12728), v10);
    }
    *(void *)(v4 + 12728) = v11;
    LODWORD(v10) = *(_DWORD *)(v4 + 12740);
    unsigned int v9 = *(_DWORD *)(v4 + 12736);
    goto LABEL_25;
  }
LABEL_26:
  *(_DWORD *)(v4 + 12736) = v9 + 1;
  v11[v9] = 113;
LABEL_27:
  *(_DWORD *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 16) = 0;
  return this;
}

uint64_t *anonymous namespace'::Remangler::mangleDependentGenericSameTypeRequirement@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v7 = a3 + 1;
  int v8 = *((unsigned __int8 *)a2 + 18);
  unsigned int v9 = a2;
  if (v8 != 2)
  {
    if (v8 != 5 || *((_DWORD *)a2 + 2) < 2u)
    {
      *(_DWORD *)a4 = 0;
      *(void *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 16) = 0;
      goto LABEL_8;
    }
    unsigned int v9 = *(swift::Demangle::__runtime::Node **)a2;
  }
  if (*(_DWORD *)a4) {
    return result;
  }
  int v8 = *((unsigned __int8 *)a2 + 18);
LABEL_8:
  unint64_t v11 = (swift::Demangle::__runtime::Node **)a2;
  if ((v8 - 1) < 2)
  {
LABEL_12:
    unsigned int v12 = *v11;
    goto LABEL_14;
  }
  if (v8 == 5 && *((_DWORD *)a2 + 2))
  {
    unint64_t v11 = *(swift::Demangle::__runtime::Node ***)a2;
    goto LABEL_12;
  }
  unsigned int v12 = 0;
LABEL_14:
  if (v15)
  {
    *(_OWORD *)a4 = v15;
    *(void *)(a4 + 16) = v16;
    return result;
  }
  int v13 = v18;
  if ((v17 & 0x80000000) == 0 && !v18)
  {
    *(_DWORD *)a4 = 1;
    *(void *)(a4 + 8) = a2;
    *(_DWORD *)(a4 + 16) = 1162;
    return result;
  }
  if (v17 == 1)
  {
    unint64_t v14 = "Rt";
LABEL_26:
    swift::Demangle::__runtime::CharVector::append(this + 1591, v14, 2uLL, this[1593]);
    goto LABEL_27;
  }
  if (!v17)
  {
    unint64_t v14 = "Rs";
    goto LABEL_26;
  }
  if (v17 != -1)
  {
    unint64_t v14 = "RT";
    goto LABEL_26;
  }
  uint64_t result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "RS", 2uLL, this[1593]);
LABEL_27:
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  return result;
}

uint64_t *anonymous namespace'::Remangler::mangleDependentGenericSameShapeRequirement@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v7 = a3 + 1;
  int v8 = *((unsigned __int8 *)a2 + 18);
  unsigned int v9 = a2;
  if (v8 != 2)
  {
    if (v8 != 5 || *((_DWORD *)a2 + 2) < 2u)
    {
      *(_DWORD *)a4 = 0;
      *(void *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 16) = 0;
      goto LABEL_8;
    }
    unsigned int v9 = *(swift::Demangle::__runtime::Node **)a2;
  }
  if (*(_DWORD *)a4) {
    return result;
  }
  int v8 = *((unsigned __int8 *)a2 + 18);
LABEL_8:
  unint64_t v11 = (swift::Demangle::__runtime::Node **)a2;
  if ((v8 - 1) < 2)
  {
LABEL_12:
    unsigned int v12 = *v11;
    goto LABEL_14;
  }
  if (v8 == 5 && *((_DWORD *)a2 + 2))
  {
    unint64_t v11 = *(swift::Demangle::__runtime::Node ***)a2;
    goto LABEL_12;
  }
  unsigned int v12 = 0;
LABEL_14:
  if (v14)
  {
    *(_OWORD *)a4 = v14;
    *(void *)(a4 + 16) = v15;
  }
  else
  {
    int v13 = v17;
    if (v16 < 0 || v17)
    {
      if (v16)
      {
        *(_DWORD *)a4 = 1;
      }
      else
      {
        swift::Demangle::__runtime::CharVector::append(this + 1591, "Rh", 2uLL, this[1593]);
        *(_DWORD *)a4 = 0;
      }
      *(void *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 16) = 0;
    }
    else
    {
      *(_DWORD *)a4 = 1;
      *(void *)(a4 + 8) = a2;
      *(_DWORD *)(a4 + 16) = 1190;
    }
  }
  return result;
}

uint64_t *anonymous namespace'::Remangler::mangleDependentGenericLayoutRequirement@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t *a4@<X8>)
{
  int v7 = *((unsigned __int8 *)a2 + 18);
  int v8 = a2;
  if ((v7 - 1) < 2) {
    goto LABEL_5;
  }
  if (v7 == 5 && *((_DWORD *)a2 + 2))
  {
    int v8 = (swift::Demangle::__runtime::Node **)*a2;
LABEL_5:
    unsigned int v9 = *v8;
    goto LABEL_7;
  }
  unsigned int v9 = 0;
LABEL_7:
  unsigned int v10 = a3 + 1;
  if (v33)
  {
    *(_OWORD *)a4 = v33;
    a4[2] = v34;
    return result;
  }
  unsigned int v12 = v36;
  if ((v35 & 0x80000000) == 0 && !v36)
  {
    *(_DWORD *)a4 = 1;
    a4[1] = (uint64_t)a2;
    *((_DWORD *)a4 + 4) = 1210;
    return result;
  }
  if (v35 == -1)
  {
    uint64_t result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "RL", 2uLL, this[1593]);
  }
  else
  {
    int v13 = "RM";
    if (v35 == 1) {
      int v13 = "Rm";
    }
    if (v35) {
      long long v14 = v13;
    }
    else {
      long long v14 = "Rl";
    }
    swift::Demangle::__runtime::CharVector::append(this + 1591, v14, 2uLL, this[1593]);
  }
  if (*((unsigned char *)a2 + 18) != 5)
  {
    int v17 = a2[1];
    if (*((_WORD *)v17 + 8) == 101)
    {
      uint64_t v18 = *((void *)v17 + 1);
      uint64_t v15 = (swift::Demangle::__runtime::Node *)a2;
      if (v18 != 1) {
        goto LABEL_23;
      }
      goto LABEL_26;
    }
LABEL_29:
    *(_DWORD *)a4 = 1;
    a4[1] = (uint64_t)a2;
    *((_DWORD *)a4 + 4) = 1221;
    return result;
  }
  uint64_t v15 = *a2;
  uint64_t v16 = *((void *)*a2 + 1);
  if (*(_WORD *)(v16 + 16) != 101) {
    goto LABEL_29;
  }
  if (*(void *)(v16 + 8) != 1)
  {
LABEL_23:
    *(_DWORD *)a4 = 1;
    a4[1] = (uint64_t)a2;
    *((_DWORD *)a4 + 4) = 1222;
    return result;
  }
LABEL_26:
  char v19 = ***((unsigned char ***)v15 + 1);
  unsigned int v20 = *((_DWORD *)this + 3184);
  size_t v21 = *((unsigned int *)this + 3185);
  unint64_t v22 = this[1591];
  if (v20 < v21) {
    goto LABEL_44;
  }
  unsigned int v23 = this[1593];
  size_t v24 = (char *)*((void *)v23 + 1);
  if (&v22[v21] != v24)
  {
    unint64_t v25 = *((void *)v23 + 2);
LABEL_31:
    if ((2 * v21) <= 4) {
      uint64_t v27 = 4;
    }
    else {
      uint64_t v27 = (2 * v21);
    }
    size_t v28 = v27 + v21;
    if (!v24 || (unint64_t)&v24[v28] > v25)
    {
      unint64_t v29 = 2 * *((void *)v23 + 4);
      if (v29 <= v28 + 1) {
        unint64_t v29 = v28 + 1;
      }
      *((void *)v23 + 4) = v29;
      char v32 = v19;
      unint64_t v30 = v29 + 8;
      uint64_t result = (uint64_t *)malloc_type_malloc(v29 + 8, 0xD0263BC5uLL);
      *uint64_t result = *((void *)v23 + 3);
      size_t v24 = (char *)(result + 1);
      size_t v31 = (char *)result + v30;
      char v19 = v32;
      *((void *)v23 + 2) = v31;
      *((void *)v23 + 3) = result;
    }
    *((void *)v23 + 1) = &v24[v28];
    if (v21) {
      uint64_t result = (uint64_t *)memcpy(v24, this[1591], v21);
    }
    this[1591] = v24;
    LODWORD(v21) = *((_DWORD *)this + 3185);
    unint64_t v22 = v24;
    unsigned int v20 = *((_DWORD *)this + 3184);
    goto LABEL_43;
  }
  unint64_t v26 = (unint64_t)&v22[v21 + 1];
  unint64_t v25 = *((void *)v23 + 2);
  if (v26 > v25) {
    goto LABEL_31;
  }
  *((void *)v23 + 1) = v26;
  LODWORD(v27) = 1;
LABEL_43:
  *((_DWORD *)this + 3185) = v21 + v27;
LABEL_44:
  *((_DWORD *)this + 3184) = v20 + 1;
  v22[v20] = v19;
  if (*((unsigned char *)a2 + 18) != 5) {
    goto LABEL_50;
  }
  if (*((_DWORD *)a2 + 2) >= 3u)
  {
    if (*(_DWORD *)a4) {
      return result;
    }
    if (*((unsigned char *)a2 + 18) != 5) {
      goto LABEL_50;
    }
  }
  if (*((_DWORD *)a2 + 2) < 4u
  {
LABEL_50:
    *(_DWORD *)a4 = 0;
    a4[1] = 0;
    *((_DWORD *)a4 + 4) = 0;
  }
  return result;
}

char *anonymous namespace'::Remangler::mangleDependentGenericParamPackMarker@<X0>(char *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3 = a2;
  uint64_t v4 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  int v7 = a2;
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      int v10 = 1265;
      int v11 = 1;
      goto LABEL_21;
    }
    int v7 = *(swift::Demangle::__runtime::Node **)a2;
  }
  if (*(_WORD *)(*(void *)v7 + 16) == 232)
  {
    swift::Demangle::__runtime::CharVector::append((char **)this + 1591, "Rv", 2uLL, *((void **)this + 1593));
    int v8 = *((unsigned __int8 *)v3 + 18);
    if ((v8 - 1) >= 2)
    {
      if (v8 != 5 || !*((_DWORD *)v3 + 2))
      {
        unsigned int v9 = 0;
LABEL_14:
        int v12 = *((unsigned __int8 *)v9 + 18);
        if ((v12 - 1) >= 2)
        {
          if (v12 != 5 || !*((_DWORD *)v9 + 2))
          {
            int v13 = 0;
            goto LABEL_20;
          }
          unsigned int v9 = (uint64_t **)*v9;
        }
        int v13 = (uint64_t **)*v9;
LABEL_20:
        int v11 = 0;
        uint64_t v3 = 0;
        int v10 = 0;
        goto LABEL_21;
      }
      uint64_t v3 = *(swift::Demangle::__runtime::Node **)v3;
    }
    unsigned int v9 = *(uint64_t ***)v3;
    goto LABEL_14;
  }
  int v10 = 1266;
  int v11 = 1;
LABEL_21:
  *(_DWORD *)a3 = v11;
  *(void *)(a3 + 8) = v3;
  *(_DWORD *)(a3 + 16) = v10;
  return this;
}

uint64_t *anonymous namespace'::Remangler::mangleDependentGenericSignature@<X0>(uint64_t *this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v5 = (uint64_t)this;
  uint64_t v7 = *((unsigned __int8 *)a2 + 18);
  if (v7 == 1) {
    goto LABEL_6;
  }
  if (v7 == 5)
  {
    uint64_t v7 = *((unsigned int *)a2 + 2);
    if (v7) {
      goto LABEL_6;
    }
LABEL_29:
    uint64_t v8 = 0;
    goto LABEL_31;
  }
  if (v7 != 2) {
    goto LABEL_29;
  }
  uint64_t v7 = 2;
LABEL_6:
  uint64_t v8 = 0;
  unint64_t v9 = 0;
  unsigned int v10 = a3 + 1;
  do
  {
    unint64_t v11 = *((unsigned __int8 *)a2 + 18);
    if ((v11 - 1) >= 2)
    {
      char v12 = 0;
      int v13 = *a2;
    }
    else
    {
      char v12 = 1;
      int v13 = (swift::Demangle::__runtime::Node *)a2;
    }
    if (*(_WORD *)(*((void *)v13 + v9) + 16) == 37)
    {
      uint64_t v8 = v9 + 1;
      goto LABEL_8;
    }
    if (v11 == 1) {
      goto LABEL_17;
    }
    if (v11 != 5)
    {
      if (v11 != 2) {
        goto LABEL_23;
      }
      unint64_t v11 = 2;
LABEL_17:
      if (v11 <= v9) {
        goto LABEL_23;
      }
      goto LABEL_18;
    }
    if (*((unsigned int *)a2 + 2) <= v9)
    {
LABEL_23:
      *(_DWORD *)a4 = 0;
      *(void *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 16) = 0;
      goto LABEL_8;
    }
LABEL_18:
    long long v14 = (swift::Demangle::__runtime::Node *)a2;
    if ((v12 & 1) == 0) {
      long long v14 = *a2;
    }
    if (*(_DWORD *)a4) {
      return this;
    }
LABEL_8:
    ++v9;
  }
  while (v7 != v9);
  if (v8 == 1)
  {
    uint64_t v15 = (swift::Demangle::__runtime::Node *)a2;
    if (*((unsigned __int8 *)a2 + 18) - 1 >= 2) {
      uint64_t v15 = *a2;
    }
    if (**(void **)v15 == 1)
    {
      uint64_t v16 = (_DWORD *)(v5 + 12736);
      goto LABEL_76;
    }
    uint64_t v8 = 1;
  }
LABEL_31:
  uint64_t v16 = (_DWORD *)(v5 + 12736);
  unsigned int v17 = *(_DWORD *)(v5 + 12736);
  size_t v18 = *(unsigned int *)(v5 + 12740);
  char v19 = *(char **)(v5 + 12728);
  if (v17 >= v18)
  {
    unsigned int v20 = *(void **)(v5 + 12744);
    size_t v21 = (char *)v20[1];
    if (&v19[v18] != v21)
    {
      unint64_t v22 = v20[2];
      goto LABEL_35;
    }
    unint64_t v23 = (unint64_t)&v19[v18 + 1];
    unint64_t v22 = v20[2];
    if (v23 <= v22)
    {
      v20[1] = v23;
      LODWORD(v24) = 1;
    }
    else
    {
LABEL_35:
      if ((2 * v18) <= 4) {
        uint64_t v24 = 4;
      }
      else {
        uint64_t v24 = (2 * v18);
      }
      size_t v25 = v24 + v18;
      if (!v21 || (unint64_t)&v21[v25] > v22)
      {
        unint64_t v26 = 2 * v20[4];
        if (v26 <= v25 + 1) {
          unint64_t v26 = v25 + 1;
        }
        v20[4] = v26;
        unint64_t v27 = v26 + 8;
        this = (uint64_t *)malloc_type_malloc(v26 + 8, 0xD0263BC5uLL);
        size_t v28 = (char *)this + v27;
        *this = v20[3];
        size_t v21 = (char *)(this + 1);
        v20[2] = v28;
        v20[3] = this;
      }
      v20[1] = &v21[v25];
      if (v18) {
        this = (uint64_t *)memcpy(v21, *(const void **)(v5 + 12728), v18);
      }
      *(void *)(v5 + 12728) = v21;
      LODWORD(v18) = *(_DWORD *)(v5 + 12740);
      char v19 = v21;
      unsigned int v17 = *(_DWORD *)(v5 + 12736);
    }
    uint64_t v16 = (_DWORD *)(v5 + 12736);
    *(_DWORD *)(v5 + 12740) = v18 + v24;
  }
  *uint64_t v16 = v17 + 1;
  v19[v17] = 114;
  if (v8)
  {
    uint64_t v29 = 0;
    while (1)
    {
      char v32 = (swift::Demangle::__runtime::Node *)a2;
      if (*((unsigned __int8 *)a2 + 18) - 1 >= 2) {
        char v32 = *a2;
      }
      uint64_t v33 = **((void **)v32 + v29);
      if (v33)
      {
        goto LABEL_53;
      }
      unsigned int v31 = *(_DWORD *)(v5 + 12736);
      size_t v30 = *(unsigned int *)(v5 + 12740);
      uint64_t v34 = *(unsigned char **)(v5 + 12728);
      if (v31 >= v30) {
        break;
      }
LABEL_52:
      *uint64_t v16 = v31 + 1;
      v34[v31] = 122;
LABEL_53:
      if (v8 == ++v29) {
        goto LABEL_76;
      }
    }
    int v35 = *(void **)(v5 + 12744);
    unsigned int v36 = (unsigned char *)v35[1];
    if (&v34[v30] != v36)
    {
      unint64_t v37 = v35[2];
      goto LABEL_62;
    }
    unint64_t v38 = (unint64_t)&v34[v30 + 1];
    unint64_t v37 = v35[2];
    if (v38 <= v37)
    {
      v35[1] = v38;
      LODWORD(v39) = 1;
    }
    else
    {
LABEL_62:
      if ((2 * v30) <= 4) {
        uint64_t v39 = 4;
      }
      else {
        uint64_t v39 = (2 * v30);
      }
      size_t v40 = v39 + v30;
      if (v36) {
        BOOL v41 = (unint64_t)&v36[v39 + v30] > v37;
      }
      else {
        BOOL v41 = 1;
      }
      uint64_t v34 = (unsigned char *)v35[1];
      if (v41)
      {
        unint64_t v42 = 2 * v35[4];
        if (v42 <= v40 + 1) {
          unint64_t v42 = v40 + 1;
        }
        v35[4] = v42;
        unint64_t v43 = v42 + 8;
        this = (uint64_t *)malloc_type_malloc(v42 + 8, 0xD0263BC5uLL);
        unsigned int v44 = (char *)this + v43;
        *this = v35[3];
        uint64_t v34 = this + 1;
        v35[2] = v44;
        v35[3] = this;
      }
      v35[1] = &v34[v40];
      if (v30) {
        this = (uint64_t *)memcpy(v34, *(const void **)(v5 + 12728), v30);
      }
      *(void *)(v5 + 12728) = v34;
      LODWORD(v30) = *(_DWORD *)(v5 + 12740);
      unsigned int v31 = *(_DWORD *)(v5 + 12736);
      uint64_t v16 = (_DWORD *)(v5 + 12736);
    }
    *(_DWORD *)(v5 + 12740) = v30 + v39;
    goto LABEL_52;
  }
LABEL_76:
  unsigned int v45 = *(_DWORD *)(v5 + 12736);
  size_t v46 = *(unsigned int *)(v5 + 12740);
  uint64_t v47 = *(char **)(v5 + 12728);
  if (v45 >= v46)
  {
    char v48 = *(void **)(v5 + 12744);
    unint64_t v49 = (char *)v48[1];
    if (&v47[v46] != v49)
    {
      unint64_t v50 = v48[2];
      goto LABEL_80;
    }
    unint64_t v51 = (unint64_t)&v47[v46 + 1];
    unint64_t v50 = v48[2];
    if (v51 <= v50)
    {
      v48[1] = v51;
      LODWORD(v52) = 1;
    }
    else
    {
LABEL_80:
      if ((2 * v46) <= 4) {
        uint64_t v52 = 4;
      }
      else {
        uint64_t v52 = (2 * v46);
      }
      size_t v53 = v52 + v46;
      if (!v49 || (unint64_t)&v49[v53] > v50)
      {
        unint64_t v54 = 2 * v48[4];
        if (v54 <= v53 + 1) {
          unint64_t v54 = v53 + 1;
        }
        v48[4] = v54;
        unint64_t v55 = v54 + 8;
        this = (uint64_t *)malloc_type_malloc(v54 + 8, 0xD0263BC5uLL);
        uint64_t v56 = (char *)this + v55;
        *this = v48[3];
        unint64_t v49 = (char *)(this + 1);
        v48[2] = v56;
        v48[3] = this;
      }
      v48[1] = &v49[v53];
      if (v46) {
        this = (uint64_t *)memcpy(v49, *(const void **)(v5 + 12728), v46);
      }
      *(void *)(v5 + 12728) = v49;
      LODWORD(v46) = *(_DWORD *)(v5 + 12740);
      uint64_t v47 = v49;
      unsigned int v45 = *(_DWORD *)(v5 + 12736);
    }
    *(_DWORD *)(v5 + 12740) = v46 + v52;
  }
  *uint64_t v16 = v45 + 1;
  v47[v45] = 108;
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  return this;
}

uint64_t *anonymous namespace'::Remangler::mangleDependentGenericType@<X0>(uint64_t *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v5 = (uint64_t)this;
  uint64_t v7 = *((unsigned __int8 *)a2 + 18);
  switch(v7)
  {
    case 1:
      goto LABEL_6;
    case 5:
      uint64_t v7 = *((unsigned int *)a2 + 2);
      if (v7) {
        goto LABEL_6;
      }
      break;
    case 2:
      uint64_t v7 = 2;
LABEL_6:
      unsigned int v8 = a3 + 1;
      for (uint64_t i = v7 - 1; i != -1; --i)
      {
        unint64_t v10 = *((unsigned __int8 *)a2 + 18);
        unsigned int v11 = v10 - 1;
        if (v10 != 1)
        {
          if (v10 == 5)
          {
            unint64_t v10 = *((unsigned int *)a2 + 2);
          }
          else
          {
            if (v10 != 2) {
              goto LABEL_7;
            }
            unint64_t v10 = 2;
          }
        }
        if (v10 <= i)
        {
LABEL_7:
          *(_DWORD *)a4 = 0;
          *(void *)(a4 + 8) = 0;
          *(_DWORD *)(a4 + 16) = 0;
          continue;
        }
        char v12 = a2;
        if (v11 >= 2) {
          char v12 = *(swift::Demangle::__runtime::Node **)a2;
        }
        if (*(_DWORD *)a4) {
          return this;
        }
      }
      break;
  }
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  unsigned int v13 = *(_DWORD *)(v5 + 12736);
  size_t v14 = *(unsigned int *)(v5 + 12740);
  uint64_t v15 = *(char **)(v5 + 12728);
  if (v13 >= v14)
  {
    uint64_t v16 = *(void **)(v5 + 12744);
    unsigned int v17 = (char *)v16[1];
    if (&v15[v14] == v17)
    {
      unint64_t v19 = (unint64_t)&v15[v14 + 1];
      unint64_t v18 = v16[2];
      if (v19 <= v18)
      {
        v16[1] = v19;
        LODWORD(v20) = 1;
LABEL_35:
        *(_DWORD *)(v5 + 12740) = v14 + v20;
        goto LABEL_36;
      }
    }
    else
    {
      unint64_t v18 = v16[2];
    }
    if ((2 * v14) <= 4) {
      uint64_t v20 = 4;
    }
    else {
      uint64_t v20 = (2 * v14);
    }
    size_t v21 = v20 + v14;
    if (!v17 || (unint64_t)&v17[v21] > v18)
    {
      unint64_t v22 = 2 * v16[4];
      if (v22 <= v21 + 1) {
        unint64_t v22 = v21 + 1;
      }
      v16[4] = v22;
      unint64_t v23 = v22 + 8;
      this = (uint64_t *)malloc_type_malloc(v22 + 8, 0xD0263BC5uLL);
      uint64_t v24 = (char *)this + v23;
      *this = v16[3];
      unsigned int v17 = (char *)(this + 1);
      v16[2] = v24;
      v16[3] = this;
    }
    v16[1] = &v17[v21];
    if (v14) {
      this = (uint64_t *)memcpy(v17, *(const void **)(v5 + 12728), v14);
    }
    *(void *)(v5 + 12728) = v17;
    LODWORD(v14) = *(_DWORD *)(v5 + 12740);
    uint64_t v15 = v17;
    unsigned int v13 = *(_DWORD *)(v5 + 12736);
    goto LABEL_35;
  }
LABEL_36:
  *(_DWORD *)(v5 + 12736) = v13 + 1;
  v15[v13] = 117;
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  return this;
}

void *anonymous namespace'::Remangler::mangleDependentMemberType@<X0>(const void **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  if (v52)
  {
    *(_OWORD *)a4 = v52;
    *(void *)(a4 + 16) = v53;
    return result;
  }
  if (v54 == -1) {
    goto LABEL_82;
  }
  unsigned int v8 = (uint64_t **)v55;
  if (v54 != 1)
  {
    if (!v54)
    {
      *(_DWORD *)a4 = 12;
      *(void *)(a4 + 8) = a2;
      *(_DWORD *)(a4 + 16) = 1289;
      return result;
    }
    unsigned int v15 = *((_DWORD *)this + 3184);
    size_t v16 = *((unsigned int *)this + 3185);
    unsigned int v17 = (char *)this[1591];
    if (v15 < v16)
    {
LABEL_44:
      *((_DWORD *)this + 3184) = v15 + 1;
      v17[v15] = 81;
      if (v8)
      {
        goto LABEL_82;
      }
      unsigned int v26 = *((_DWORD *)this + 3184);
      size_t v37 = *((unsigned int *)this + 3185);
      size_t v28 = (char *)this[1591];
      if (v26 < v37) {
        goto LABEL_80;
      }
      unint64_t v38 = this[1593];
      uint64_t v39 = (char *)v38[1];
      if (&v28[v37] == v39)
      {
        unint64_t v46 = (unint64_t)&v28[v37 + 1];
        unint64_t v40 = v38[2];
        if (v46 <= v40)
        {
          v38[1] = v46;
          LODWORD(v47) = 1;
LABEL_79:
          *((_DWORD *)this + 3185) = v37 + v47;
LABEL_80:
          *((_DWORD *)this + 3184) = v26 + 1;
          char v51 = 88;
          goto LABEL_81;
        }
      }
      else
      {
        unint64_t v40 = v38[2];
      }
      if ((2 * v37) <= 4) {
        uint64_t v47 = 4;
      }
      else {
        uint64_t v47 = (2 * v37);
      }
      size_t v48 = v47 + v37;
      if (!v39 || (unint64_t)&v39[v48] > v40)
      {
        unint64_t v49 = 2 * v38[4];
        if (v49 <= v48 + 1) {
          unint64_t v49 = v48 + 1;
        }
        v38[4] = v49;
        unint64_t v50 = v49 + 8;
        uint64_t result = malloc_type_malloc(v49 + 8, 0xD0263BC5uLL);
        *uint64_t result = v38[3];
        uint64_t v39 = (char *)(result + 1);
        v38[2] = (char *)result + v50;
        v38[3] = result;
      }
      v38[1] = &v39[v48];
      if (v37) {
        uint64_t result = memcpy(v39, this[1591], v37);
      }
      this[1591] = v39;
      LODWORD(v37) = *((_DWORD *)this + 3185);
      size_t v28 = v39;
      unsigned int v26 = *((_DWORD *)this + 3184);
      goto LABEL_79;
    }
    unint64_t v18 = this[1593];
    unint64_t v19 = (char *)v18[1];
    if (&v17[v16] == v19)
    {
      unint64_t v32 = (unint64_t)&v17[v16 + 1];
      unint64_t v20 = v18[2];
      if (v32 <= v20)
      {
        v18[1] = v32;
        LODWORD(v33) = 1;
LABEL_43:
        *((_DWORD *)this + 3185) = v16 + v33;
        goto LABEL_44;
      }
    }
    else
    {
      unint64_t v20 = v18[2];
    }
    if ((2 * v16) <= 4) {
      uint64_t v33 = 4;
    }
    else {
      uint64_t v33 = (2 * v16);
    }
    size_t v34 = v33 + v16;
    if (!v19 || (unint64_t)&v19[v34] > v20)
    {
      unint64_t v35 = 2 * v18[4];
      if (v35 <= v34 + 1) {
        unint64_t v35 = v34 + 1;
      }
      v18[4] = v35;
      unint64_t v36 = v35 + 8;
      uint64_t result = malloc_type_malloc(v35 + 8, 0xD0263BC5uLL);
      *uint64_t result = v18[3];
      unint64_t v19 = (char *)(result + 1);
      v18[2] = (char *)result + v36;
      v18[3] = result;
    }
    v18[1] = &v19[v34];
    if (v16) {
      uint64_t result = memcpy(v19, this[1591], v16);
    }
    this[1591] = v19;
    LODWORD(v16) = *((_DWORD *)this + 3185);
    unsigned int v17 = v19;
    unsigned int v15 = *((_DWORD *)this + 3184);
    goto LABEL_43;
  }
  unsigned int v9 = *((_DWORD *)this + 3184);
  size_t v10 = *((unsigned int *)this + 3185);
  unsigned int v11 = (char *)this[1591];
  if (v9 >= v10)
  {
    char v12 = this[1593];
    unsigned int v13 = (char *)v12[1];
    if (&v11[v10] == v13)
    {
      unint64_t v21 = (unint64_t)&v11[v10 + 1];
      unint64_t v14 = v12[2];
      if (v21 <= v14)
      {
        v12[1] = v21;
        LODWORD(v22) = 1;
LABEL_25:
        *((_DWORD *)this + 3185) = v10 + v22;
        goto LABEL_26;
      }
    }
    else
    {
      unint64_t v14 = v12[2];
    }
    if ((2 * v10) <= 4) {
      uint64_t v22 = 4;
    }
    else {
      uint64_t v22 = (2 * v10);
    }
    size_t v23 = v22 + v10;
    if (!v13 || (unint64_t)&v13[v23] > v14)
    {
      unint64_t v24 = 2 * v12[4];
      if (v24 <= v23 + 1) {
        unint64_t v24 = v23 + 1;
      }
      v12[4] = v24;
      unint64_t v25 = v24 + 8;
      uint64_t result = malloc_type_malloc(v24 + 8, 0xD0263BC5uLL);
      *uint64_t result = v12[3];
      unsigned int v13 = (char *)(result + 1);
      v12[2] = (char *)result + v25;
      v12[3] = result;
    }
    v12[1] = &v13[v23];
    if (v10) {
      uint64_t result = memcpy(v13, this[1591], v10);
    }
    this[1591] = v13;
    LODWORD(v10) = *((_DWORD *)this + 3185);
    unsigned int v11 = v13;
    unsigned int v9 = *((_DWORD *)this + 3184);
    goto LABEL_25;
  }
LABEL_26:
  *((_DWORD *)this + 3184) = v9 + 1;
  v11[v9] = 81;
  if (!v8)
  {
    unsigned int v26 = *((_DWORD *)this + 3184);
    size_t v27 = *((unsigned int *)this + 3185);
    size_t v28 = (char *)this[1591];
    if (v26 < v27)
    {
LABEL_77:
      *((_DWORD *)this + 3184) = v26 + 1;
      char v51 = 120;
LABEL_81:
      v28[v26] = v51;
      goto LABEL_82;
    }
    uint64_t v29 = this[1593];
    size_t v30 = (char *)v29[1];
    if (&v28[v27] == v30)
    {
      unint64_t v41 = (unint64_t)&v28[v27 + 1];
      unint64_t v31 = v29[2];
      if (v41 <= v31)
      {
        v29[1] = v41;
        LODWORD(v42) = 1;
LABEL_76:
        *((_DWORD *)this + 3185) = v27 + v42;
        goto LABEL_77;
      }
    }
    else
    {
      unint64_t v31 = v29[2];
    }
    if ((2 * v27) <= 4) {
      uint64_t v42 = 4;
    }
    else {
      uint64_t v42 = (2 * v27);
    }
    size_t v43 = v42 + v27;
    if (!v30 || (unint64_t)&v30[v43] > v31)
    {
      unint64_t v44 = 2 * v29[4];
      if (v44 <= v43 + 1) {
        unint64_t v44 = v43 + 1;
      }
      v29[4] = v44;
      unint64_t v45 = v44 + 8;
      uint64_t result = malloc_type_malloc(v44 + 8, 0xD0263BC5uLL);
      *uint64_t result = v29[3];
      size_t v30 = (char *)(result + 1);
      v29[2] = (char *)result + v45;
      v29[3] = result;
    }
    v29[1] = &v30[v43];
    if (v27) {
      uint64_t result = memcpy(v30, this[1591], v27);
    }
    this[1591] = v30;
    LODWORD(v27) = *((_DWORD *)this + 3185);
    size_t v28 = v30;
    unsigned int v26 = *((_DWORD *)this + 3184);
    goto LABEL_76;
  }
LABEL_82:
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  return result;
}

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleDependentProtocolConformanceRoot@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v6 = (uint64_t)this;
  int v8 = *((unsigned __int8 *)a2 + 18);
  unsigned int v9 = a2;
  if ((v8 - 1) < 2) {
    goto LABEL_5;
  }
  if (v8 == 5 && *((_DWORD *)a2 + 2))
  {
    unsigned int v9 = (swift::Demangle::__runtime::Node **)*a2;
LABEL_5:
    size_t v10 = *v9;
    goto LABEL_7;
  }
  size_t v10 = 0;
LABEL_7:
  int v11 = *((unsigned __int8 *)v10 + 18);
  if (v11 != 1)
  {
    if (v11 != 5 || *((_DWORD *)v10 + 2) != 1)
    {
      int v15 = 321;
      int v16 = 10;
LABEL_18:
      *(_DWORD *)a4 = v16;
      *(void *)(a4 + 8) = v10;
      *(_DWORD *)(a4 + 16) = v15;
      return this;
    }
    size_t v10 = *(swift::Demangle::__runtime::Node **)v10;
  }
  if (*(_DWORD *)a4) {
    return this;
  }
  int v12 = *((unsigned __int8 *)a2 + 18);
  unsigned int v13 = (swift::Demangle::__runtime::Node *)a2;
  if (v12 == 2) {
    goto LABEL_16;
  }
  if (v12 == 5 && *((_DWORD *)a2 + 2) >= 2u)
  {
    unsigned int v13 = *a2;
LABEL_16:
    unint64_t v14 = (uint64_t *)*((void *)v13 + 1);
    goto LABEL_21;
  }
  unint64_t v14 = 0;
LABEL_21:
  if (*((_WORD *)v14 + 8) != 232) {
    goto LABEL_28;
  }
  int v17 = *((unsigned __int8 *)v14 + 18);
  if ((v17 - 1) < 2) {
    goto LABEL_26;
  }
  if (v17 == 5 && *((_DWORD *)v14 + 2))
  {
    unint64_t v14 = (uint64_t *)*v14;
LABEL_26:
    unint64_t v14 = (uint64_t *)*v14;
    goto LABEL_28;
  }
  unint64_t v14 = 0;
LABEL_28:
  {
LABEL_45:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    this = (_anonymous_namespace_::Remangler *)swift::Demangle::__runtime::CharVector::append((char **)(v6 + 12728), "HD", 2uLL, *(void **)(v6 + 12744));
    size_t v10 = 0;
    if (*((unsigned char *)a2 + 18) == 5)
    {
      if (*((_DWORD *)a2 + 2) < 3u) {
        size_t v10 = 0;
      }
      else {
        size_t v10 = (swift::Demangle::__runtime::Node *)*((void *)*a2 + 2);
      }
    }
    int v23 = *((unsigned __int16 *)v10 + 8);
    if (v23 == 246 || v23 == 102)
    {
      int v24 = *((unsigned __int8 *)v10 + 18);
      if ((v23 != 102) == (v24 == 4))
      {
        int v15 = 2713;
        int v16 = 1;
      }
      else
      {
        if (v24 == 4) {
          uint64_t v25 = *(void *)v10 + 2;
        }
        else {
          uint64_t v25 = 1;
        }
        int v16 = 0;
        size_t v10 = 0;
        int v15 = 0;
      }
    }
    else
    {
      int v15 = 2711;
      int v16 = 1;
    }
    goto LABEL_18;
  }
  int v18 = *((unsigned __int8 *)v14 + 18);
  unint64_t v19 = (swift::Demangle::__runtime::Node **)v14;
  if ((v18 - 1) >= 2)
  {
    if (v18 == 5)
    {
      unint64_t v20 = (uint64_t *)*v14;
      unint64_t v19 = (swift::Demangle::__runtime::Node **)*v14;
LABEL_37:
      unint64_t v21 = (swift::Demangle::__runtime::Node **)&v20[*((unsigned int *)v14 + 2)];
      goto LABEL_41;
    }
    unint64_t v19 = 0;
  }
  switch(v18)
  {
    case 1:
      unint64_t v21 = (swift::Demangle::__runtime::Node **)(v14 + 1);
      break;
    case 2:
      unint64_t v21 = (swift::Demangle::__runtime::Node **)(v14 + 2);
      break;
    case 5:
      unint64_t v20 = (uint64_t *)*v14;
      goto LABEL_37;
    default:
      unint64_t v21 = 0;
      break;
  }
LABEL_41:
  if (v19 == v21) {
    goto LABEL_45;
  }
  unsigned int v22 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4) {
      return this;
    }
    if (++v19 == v21) {
      goto LABEL_45;
    }
  }
}

void *anonymous namespace'::Remangler::mangleDependentProtocolConformanceInherited@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v7 = *((unsigned __int8 *)a2 + 18);
  int v8 = a2;
  if ((v7 - 1) < 2) {
    goto LABEL_5;
  }
  if (v7 == 5 && *((_DWORD *)a2 + 2))
  {
    int v8 = (swift::Demangle::__runtime::Node **)*a2;
LABEL_5:
    unsigned int v9 = *v8;
    goto LABEL_7;
  }
  unsigned int v9 = 0;
LABEL_7:
  unsigned int v10 = a3 + 1;
  if (*(_DWORD *)a4) {
    return result;
  }
  int v12 = *((unsigned __int8 *)a2 + 18);
  unsigned int v13 = (swift::Demangle::__runtime::Node *)a2;
  if (v12 == 2) {
    goto LABEL_12;
  }
  if (v12 == 5 && *((_DWORD *)a2 + 2) >= 2u)
  {
    unsigned int v13 = *a2;
LABEL_12:
    unint64_t v14 = (swift::Demangle::__runtime::Node *)*((void *)v13 + 1);
    goto LABEL_14;
  }
  unint64_t v14 = 0;
LABEL_14:
  if (*((_WORD *)v14 + 8) == 232)
  {
    int v15 = *((unsigned __int8 *)v14 + 18);
    if ((v15 - 1) >= 2)
    {
      if (v15 != 5 || !*((_DWORD *)v14 + 2))
      {
        unint64_t v14 = 0;
        goto LABEL_21;
      }
      unint64_t v14 = *(swift::Demangle::__runtime::Node **)v14;
    }
    unint64_t v14 = *(swift::Demangle::__runtime::Node **)v14;
  }
LABEL_21:
  {
    int v16 = *((unsigned __int8 *)v14 + 18);
    int v17 = (swift::Demangle::__runtime::Node **)v14;
    if ((v16 - 1) >= 2)
    {
      if (v16 == 5)
      {
        int v18 = *(swift::Demangle::__runtime::Node **)v14;
        int v17 = *(swift::Demangle::__runtime::Node ***)v14;
LABEL_30:
        unint64_t v19 = (swift::Demangle::__runtime::Node **)((char *)v18 + 8 * *((unsigned int *)v14 + 2));
        goto LABEL_36;
      }
      int v17 = 0;
    }
    switch(v16)
    {
      case 1:
        unint64_t v19 = (swift::Demangle::__runtime::Node **)((char *)v14 + 8);
        goto LABEL_36;
      case 2:
        unint64_t v19 = (swift::Demangle::__runtime::Node **)((char *)v14 + 16);
        goto LABEL_36;
      case 5:
        int v18 = *(swift::Demangle::__runtime::Node **)v14;
        goto LABEL_30;
    }
    unint64_t v19 = 0;
LABEL_36:
    while (v17 != v19)
    {
      if (*(_DWORD *)a4) {
        return result;
      }
      ++v17;
    }
  }
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  uint64_t result = swift::Demangle::__runtime::CharVector::append(this + 1591, "HI", 2uLL, this[1593]);
  uint64_t v20 = 0;
  if (*((unsigned char *)a2 + 18) == 5)
  {
    if (*((_DWORD *)a2 + 2) < 3u) {
      uint64_t v20 = 0;
    }
    else {
      uint64_t v20 = *((void *)*a2 + 2);
    }
  }
  int v21 = *(unsigned __int16 *)(v20 + 16);
  if (v21 == 246 || v21 == 102)
  {
    int v22 = *(unsigned __int8 *)(v20 + 18);
    if ((v21 != 102) == (v22 == 4))
    {
      int v24 = 2713;
      int v25 = 1;
    }
    else
    {
      if (v22 == 4) {
        uint64_t v23 = *(void *)v20 + 2;
      }
      else {
        uint64_t v23 = 1;
      }
      int v25 = 0;
      uint64_t v20 = 0;
      int v24 = 0;
    }
  }
  else
  {
    int v24 = 2711;
    int v25 = 1;
  }
  *(_DWORD *)a4 = v25;
  *(void *)(a4 + 8) = v20;
  *(_DWORD *)(a4 + 16) = v24;
  return result;
}

void *anonymous namespace'::Remangler::mangleDependentProtocolConformanceAssociated@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v8 = *((unsigned __int8 *)a2 + 18);
  unsigned int v9 = a2;
  if ((v8 - 1) < 2) {
    goto LABEL_5;
  }
  if (v8 == 5 && *((_DWORD *)a2 + 2))
  {
    unsigned int v9 = (swift::Demangle::__runtime::Node **)*a2;
LABEL_5:
    unsigned int v10 = *v9;
    goto LABEL_7;
  }
  unsigned int v10 = 0;
LABEL_7:
  if (*(_DWORD *)a4) {
    return result;
  }
  int v12 = *((unsigned __int8 *)a2 + 18);
  unsigned int v13 = (swift::Demangle::__runtime::Node *)a2;
  if (v12 == 2) {
    goto LABEL_12;
  }
  if (v12 == 5 && *((_DWORD *)a2 + 2) >= 2u)
  {
    unsigned int v13 = *a2;
LABEL_12:
    unint64_t v14 = (swift::Demangle::__runtime::Node *)*((void *)v13 + 1);
    goto LABEL_14;
  }
  unint64_t v14 = 0;
LABEL_14:
  int v15 = *((unsigned __int8 *)v14 + 18);
  int v16 = (swift::Demangle::__runtime::Node **)v14;
  if ((v15 - 1) < 2)
  {
LABEL_18:
    int v17 = *v16;
    goto LABEL_20;
  }
  if (v15 == 5 && *((_DWORD *)v14 + 2))
  {
    int v16 = *(swift::Demangle::__runtime::Node ***)v14;
    goto LABEL_18;
  }
  int v17 = 0;
LABEL_20:
  int v18 = *((unsigned __int8 *)v17 + 18);
  if (v18 != 1)
  {
    if (v18 != 5 || *((_DWORD *)v17 + 2) != 1)
    {
      int v21 = 321;
      int v22 = 10;
LABEL_31:
      *(_DWORD *)a4 = v22;
      *(void *)(a4 + 8) = v17;
      *(_DWORD *)(a4 + 16) = v21;
      return result;
    }
    int v17 = *(swift::Demangle::__runtime::Node **)v17;
  }
  if (*(_DWORD *)a4) {
    return result;
  }
  int v19 = *((unsigned __int8 *)v14 + 18);
  if (v19 == 2) {
    goto LABEL_29;
  }
  if (v19 == 5 && *((_DWORD *)v14 + 2) >= 2u)
  {
    unint64_t v14 = *(swift::Demangle::__runtime::Node **)v14;
LABEL_29:
    uint64_t v20 = (uint64_t *)*((void *)v14 + 1);
    goto LABEL_34;
  }
  uint64_t v20 = 0;
LABEL_34:
  if (*((_WORD *)v20 + 8) != 232) {
    goto LABEL_41;
  }
  int v23 = *((unsigned __int8 *)v20 + 18);
  if ((v23 - 1) < 2) {
    goto LABEL_39;
  }
  if (v23 == 5 && *((_DWORD *)v20 + 2))
  {
    uint64_t v20 = (uint64_t *)*v20;
LABEL_39:
    uint64_t v20 = (uint64_t *)*v20;
    goto LABEL_41;
  }
  uint64_t v20 = 0;
LABEL_41:
  {
LABEL_58:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    uint64_t result = swift::Demangle::__runtime::CharVector::append(this + 1591, "HA", 2uLL, this[1593]);
    int v17 = 0;
    if (*((unsigned char *)a2 + 18) == 5)
    {
      if (*((_DWORD *)a2 + 2) < 3u) {
        int v17 = 0;
      }
      else {
        int v17 = (swift::Demangle::__runtime::Node *)*((void *)*a2 + 2);
      }
    }
    int v29 = *((unsigned __int16 *)v17 + 8);
    if (v29 == 246 || v29 == 102)
    {
      int v30 = *((unsigned __int8 *)v17 + 18);
      if ((v29 != 102) == (v30 == 4))
      {
        int v21 = 2713;
        int v22 = 1;
      }
      else
      {
        if (v30 == 4) {
          uint64_t v31 = *(void *)v17 + 2;
        }
        else {
          uint64_t v31 = 1;
        }
        int v22 = 0;
        int v17 = 0;
        int v21 = 0;
      }
    }
    else
    {
      int v21 = 2711;
      int v22 = 1;
    }
    goto LABEL_31;
  }
  int v24 = *((unsigned __int8 *)v20 + 18);
  int v25 = (swift::Demangle::__runtime::Node **)v20;
  if ((v24 - 1) >= 2)
  {
    if (v24 == 5)
    {
      unsigned int v26 = (uint64_t *)*v20;
      int v25 = (swift::Demangle::__runtime::Node **)*v20;
LABEL_50:
      size_t v27 = (swift::Demangle::__runtime::Node **)&v26[*((unsigned int *)v20 + 2)];
      goto LABEL_54;
    }
    int v25 = 0;
  }
  switch(v24)
  {
    case 1:
      size_t v27 = (swift::Demangle::__runtime::Node **)(v20 + 1);
      break;
    case 2:
      size_t v27 = (swift::Demangle::__runtime::Node **)(v20 + 2);
      break;
    case 5:
      unsigned int v26 = (uint64_t *)*v20;
      goto LABEL_50;
    default:
      size_t v27 = 0;
      break;
  }
LABEL_54:
  if (v25 == v27) {
    goto LABEL_58;
  }
  unsigned int v28 = a3 + 2;
  while (1)
  {
    if (*(_DWORD *)a4) {
      return result;
    }
    if (++v25 == v27) {
      goto LABEL_58;
    }
  }
}

uint64_t *anonymous namespace'::Remangler::mangleDestructor@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6 = *((unsigned __int8 *)a2 + 18);
  int v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      uint64_t v8 = *(void *)a2;
      int v7 = *(swift::Demangle::__runtime::Node **)a2;
      goto LABEL_9;
    }
    int v7 = 0;
  }
  switch(v6)
  {
    case 1:
      unsigned int v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 8);
      if (v7 == (swift::Demangle::__runtime::Node *)((char *)a2 + 8)) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 2:
      unsigned int v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 16);
      if (v7 == (swift::Demangle::__runtime::Node *)((char *)a2 + 16)) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 5:
      uint64_t v8 = *(void *)a2;
LABEL_9:
      unsigned int v9 = (swift::Demangle::__runtime::Node *)(v8 + 8 * *((unsigned int *)a2 + 2));
      if (v7 == v9) {
        goto LABEL_19;
      }
      goto LABEL_16;
  }
  unsigned int v9 = 0;
  if (!v7)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    uint64_t result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "fd", 2uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
LABEL_16:
  unsigned int v10 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4) {
      return result;
    }
    int v7 = (swift::Demangle::__runtime::Node *)((char *)v7 + 8);
    if (v7 == v9) {
      goto LABEL_19;
    }
  }
}

uint64_t *anonymous namespace'::Remangler::mangleDidSet@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = *((unsigned __int8 *)a2 + 18);
  if ((v4 - 1) >= 2)
  {
    if (v4 != 5 || !*((_DWORD *)a2 + 2))
    {
      uint64_t v5 = 0;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  uint64_t v5 = *(void *)a2;
}

_DWORD *anonymous namespace'::Remangler::mangleDirectness@<X0>(_DWORD *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3 = this;
  if (*(void *)a2 == 1)
  {
    uint64_t v5 = this + 3184;
    unsigned int v6 = this[3184];
    size_t v10 = this[3185];
    uint64_t v8 = (char *)*((void *)this + 1591);
    if (v6 < v10)
    {
LABEL_42:
      char v9 = 105;
      goto LABEL_43;
    }
    int v11 = (void *)*((void *)this + 1593);
    int v12 = (char *)v11[1];
    if (&v8[v10] == v12)
    {
      unint64_t v24 = (unint64_t)&v8[v10 + 1];
      unint64_t v13 = v11[2];
      if (v24 <= v13)
      {
        v11[1] = v24;
        LODWORD(v25) = 1;
LABEL_41:
        *((_DWORD *)v3 + 3185) = v10 + v25;
        goto LABEL_42;
      }
    }
    else
    {
      unint64_t v13 = v11[2];
    }
    if ((2 * v10) <= 4) {
      uint64_t v25 = 4;
    }
    else {
      uint64_t v25 = (2 * v10);
    }
    size_t v26 = v25 + v10;
    if (v12) {
      BOOL v27 = (unint64_t)&v12[v25 + v10] > v13;
    }
    else {
      BOOL v27 = 1;
    }
    uint64_t v8 = (char *)v11[1];
    if (v27)
    {
      unint64_t v28 = 2 * v11[4];
      if (v28 <= v26 + 1) {
        unint64_t v28 = v26 + 1;
      }
      v11[4] = v28;
      unint64_t v29 = v28 + 8;
      this = malloc_type_malloc(v28 + 8, 0xD0263BC5uLL);
      int v30 = (char *)this + v29;
      *(void *)this = v11[3];
      uint64_t v8 = (char *)(this + 2);
      v11[2] = v30;
      v11[3] = this;
    }
    v11[1] = &v8[v26];
    if (v10) {
      this = memcpy(v8, *((const void **)v3 + 1591), v10);
    }
    *((void *)v3 + 1591) = v8;
    LODWORD(v10) = *((_DWORD *)v3 + 3185);
    unsigned int v6 = *((_DWORD *)v3 + 3184);
    goto LABEL_41;
  }
  if (!*(void *)a2)
  {
    uint64_t v5 = this + 3184;
    unsigned int v6 = this[3184];
    size_t v7 = this[3185];
    uint64_t v8 = (char *)*((void *)this + 1591);
    if (v6 < v7)
    {
      char v9 = 100;
LABEL_43:
      int v15 = 0;
      a2 = 0;
      int v14 = 0;
      _DWORD *v5 = v6 + 1;
      v8[v6] = v9;
      goto LABEL_44;
    }
    int v16 = (void *)*((void *)this + 1593);
    int v17 = (char *)v16[1];
    if (&v8[v7] == v17)
    {
      unint64_t v19 = (unint64_t)&v8[v7 + 1];
      unint64_t v18 = v16[2];
      if (v19 <= v18)
      {
        v16[1] = v19;
        LODWORD(v20) = 1;
LABEL_39:
        *((_DWORD *)v3 + 3185) = v7 + v20;
        char v9 = 100;
        goto LABEL_43;
      }
    }
    else
    {
      unint64_t v18 = v16[2];
    }
    if ((2 * v7) <= 4) {
      uint64_t v20 = 4;
    }
    else {
      uint64_t v20 = (2 * v7);
    }
    size_t v21 = v20 + v7;
    if (!v17 || (unint64_t)&v17[v21] > v18)
    {
      unint64_t v22 = 2 * v16[4];
      if (v22 <= v21 + 1) {
        unint64_t v22 = v21 + 1;
      }
      v16[4] = v22;
      unint64_t v23 = v22 + 8;
      this = malloc_type_malloc(v22 + 8, 0xD0263BC5uLL);
      *(void *)this = v16[3];
      int v17 = (char *)(this + 2);
      v16[2] = (char *)this + v23;
      v16[3] = this;
    }
    v16[1] = &v17[v21];
    if (v7) {
      this = memcpy(v17, *((const void **)v3 + 1591), v7);
    }
    *((void *)v3 + 1591) = v17;
    LODWORD(v7) = *((_DWORD *)v3 + 3185);
    uint64_t v8 = v17;
    unsigned int v6 = *((_DWORD *)v3 + 3184);
    goto LABEL_39;
  }
  int v14 = 1335;
  int v15 = 13;
LABEL_44:
  *(_DWORD *)a3 = v15;
  *(void *)(a3 + 8) = a2;
  *(_DWORD *)(a3 + 16) = v14;
  return this;
}

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleDynamicSelf@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      int v8 = 321;
      int v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  if (*(_DWORD *)a4) {
    return this;
  }
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::__runtime::CharVector::append((char **)v4 + 1591, "XD", 2uLL, *((void **)v4 + 1593));
  int v7 = 0;
  a2 = 0;
  int v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleEnumCase@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      int v8 = 321;
      int v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  if (*(_DWORD *)a4) {
    return this;
  }
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::__runtime::CharVector::append((char **)v4 + 1591, "WC", 2uLL, *((void **)v4 + 1593));
  int v7 = 0;
  a2 = 0;
  int v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

uint64_t *anonymous namespace'::Remangler::mangleEscapingAutoClosureType@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v7 = *((unsigned __int8 *)a2 + 18);
  switch(v7)
  {
    case 1:
      goto LABEL_6;
    case 5:
      uint64_t v7 = *((unsigned int *)a2 + 2);
      if (v7) {
        goto LABEL_6;
      }
      break;
    case 2:
      uint64_t v7 = 2;
LABEL_6:
      unsigned int v8 = a3 + 1;
      for (uint64_t i = v7 - 1; i != -1; --i)
      {
        unint64_t v10 = *((unsigned __int8 *)a2 + 18);
        unsigned int v11 = v10 - 1;
        if (v10 != 1)
        {
          if (v10 == 5)
          {
            unint64_t v10 = *((unsigned int *)a2 + 2);
          }
          else
          {
            if (v10 != 2) {
              goto LABEL_7;
            }
            unint64_t v10 = 2;
          }
        }
        if (v10 <= i)
        {
LABEL_7:
          *(_DWORD *)a4 = 0;
          *(void *)(a4 + 8) = 0;
          *(_DWORD *)(a4 + 16) = 0;
          continue;
        }
        int v12 = a2;
        if (v11 >= 2) {
          int v12 = *(swift::Demangle::__runtime::Node **)a2;
        }
        if (*(_DWORD *)a4) {
          return result;
        }
      }
      break;
  }
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  uint64_t result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "XA", 2uLL, this[1593]);
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  return result;
}

uint64_t *anonymous namespace'::Remangler::mangleNoEscapeFunctionType@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v7 = *((unsigned __int8 *)a2 + 18);
  switch(v7)
  {
    case 1:
      goto LABEL_6;
    case 5:
      uint64_t v7 = *((unsigned int *)a2 + 2);
      if (v7) {
        goto LABEL_6;
      }
      break;
    case 2:
      uint64_t v7 = 2;
LABEL_6:
      unsigned int v8 = a3 + 1;
      for (uint64_t i = v7 - 1; i != -1; --i)
      {
        unint64_t v10 = *((unsigned __int8 *)a2 + 18);
        unsigned int v11 = v10 - 1;
        if (v10 != 1)
        {
          if (v10 == 5)
          {
            unint64_t v10 = *((unsigned int *)a2 + 2);
          }
          else
          {
            if (v10 != 2) {
              goto LABEL_7;
            }
            unint64_t v10 = 2;
          }
        }
        if (v10 <= i)
        {
LABEL_7:
          *(_DWORD *)a4 = 0;
          *(void *)(a4 + 8) = 0;
          *(_DWORD *)(a4 + 16) = 0;
          continue;
        }
        int v12 = a2;
        if (v11 >= 2) {
          int v12 = *(swift::Demangle::__runtime::Node **)a2;
        }
        if (*(_DWORD *)a4) {
          return result;
        }
      }
      break;
  }
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  uint64_t result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "XE", 2uLL, this[1593]);
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  return result;
}

uint64_t *anonymous namespace'::Remangler::mangleGlobalActorFunctionType@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6 = *((unsigned __int8 *)a2 + 18);
  uint64_t v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      uint64_t v8 = *(void *)a2;
      uint64_t v7 = *(swift::Demangle::__runtime::Node **)a2;
      goto LABEL_9;
    }
    uint64_t v7 = 0;
  }
  switch(v6)
  {
    case 1:
      char v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 8);
      if (v7 == (swift::Demangle::__runtime::Node *)((char *)a2 + 8)) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 2:
      char v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 16);
      if (v7 == (swift::Demangle::__runtime::Node *)((char *)a2 + 16)) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 5:
      uint64_t v8 = *(void *)a2;
LABEL_9:
      char v9 = (swift::Demangle::__runtime::Node *)(v8 + 8 * *((unsigned int *)a2 + 2));
      if (v7 == v9) {
        goto LABEL_19;
      }
      goto LABEL_16;
  }
  char v9 = 0;
  if (!v7)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    uint64_t result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "Yc", 2uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
LABEL_16:
  unsigned int v10 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4) {
      return result;
    }
    uint64_t v7 = (swift::Demangle::__runtime::Node *)((char *)v7 + 8);
    if (v7 == v9) {
      goto LABEL_19;
    }
  }
}

void *anonymous namespace'::Remangler::mangleDifferentiableFunctionType@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, uint64_t a3@<X8>)
{
  int v6 = (const void **)(this + 1591);
  uint64_t result = swift::Demangle::__runtime::CharVector::append(this + 1591, "Yj", 2uLL, this[1593]);
  uint64_t v8 = *(void *)a2;
  unsigned int v9 = *((_DWORD *)this + 3184);
  size_t v10 = *((unsigned int *)this + 3185);
  unsigned int v11 = this[1591];
  if (v9 >= v10)
  {
    int v12 = this[1593];
    unint64_t v13 = (char *)*((void *)v12 + 1);
    if (&v11[v10] == v13)
    {
      unint64_t v15 = (unint64_t)&v11[v10 + 1];
      unint64_t v14 = *((void *)v12 + 2);
      if (v15 <= v14)
      {
        *((void *)v12 + 1) = v15;
        LODWORD(v16) = 1;
LABEL_20:
        *((_DWORD *)this + 3185) = v10 + v16;
        goto LABEL_21;
      }
    }
    else
    {
      unint64_t v14 = *((void *)v12 + 2);
    }
    if ((2 * v10) <= 4) {
      uint64_t v16 = 4;
    }
    else {
      uint64_t v16 = (2 * v10);
    }
    size_t v17 = v16 + v10;
    if (v13) {
      BOOL v18 = (unint64_t)&v13[v16 + v10] > v14;
    }
    else {
      BOOL v18 = 1;
    }
    unsigned int v11 = (char *)*((void *)v12 + 1);
    if (v18)
    {
      unint64_t v19 = 2 * *((void *)v12 + 4);
      if (v19 <= v17 + 1) {
        unint64_t v19 = v17 + 1;
      }
      *((void *)v12 + 4) = v19;
      unint64_t v20 = v19 + 8;
      uint64_t result = malloc_type_malloc(v19 + 8, 0xD0263BC5uLL);
      size_t v21 = (char *)result + v20;
      *uint64_t result = *((void *)v12 + 3);
      unsigned int v11 = (char *)(result + 1);
      *((void *)v12 + 2) = v21;
      *((void *)v12 + 3) = result;
    }
    *((void *)v12 + 1) = &v11[v17];
    if (v10) {
      uint64_t result = memcpy(v11, *v6, v10);
    }
    this[1591] = v11;
    LODWORD(v10) = *((_DWORD *)this + 3185);
    unsigned int v9 = *((_DWORD *)this + 3184);
    goto LABEL_20;
  }
LABEL_21:
  *((_DWORD *)this + 3184) = v9 + 1;
  v11[v9] = v8;
  *(_DWORD *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 16) = 0;
  return result;
}

uint64_t *anonymous namespace'::Remangler::mangleExistentialMetatype@<X0>(uint64_t *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = a2;
  uint64_t v5 = this;
  int v7 = *((unsigned __int8 *)a2 + 18);
  uint64_t v8 = a2;
  if ((v7 - 1) >= 2) {
    uint64_t v8 = *(swift::Demangle::__runtime::Node **)a2;
  }
  unsigned int v9 = a3 + 1;
  if (*(_WORD *)(*(void *)v8 + 16) != 146)
  {
    if (v7 != 1)
    {
      if (v7 != 5 || *((_DWORD *)a2 + 2) != 1)
      {
        *(_DWORD *)a4 = 10;
        *(void *)(a4 + 8) = a2;
        *(_DWORD *)(a4 + 16) = 321;
        return this;
      }
      int v4 = *(swift::Demangle::__runtime::Node **)a2;
    }
    if (*(_DWORD *)a4) {
      return this;
    }
    this = (uint64_t *)swift::Demangle::__runtime::CharVector::append((char **)v5 + 1591, "Xp", 2uLL, (void *)v5[1593]);
    goto LABEL_25;
  }
  size_t v10 = a2;
  if (v7 != 2)
  {
    if (v7 != 5 || *((_DWORD *)a2 + 2) < 2u)
    {
      *(_DWORD *)a4 = 0;
      *(void *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 16) = 0;
      goto LABEL_17;
    }
    size_t v10 = *(swift::Demangle::__runtime::Node **)a2;
  }
  if (*(_DWORD *)a4) {
    return this;
  }
LABEL_17:
  this = (uint64_t *)swift::Demangle::__runtime::CharVector::append((char **)v5 + 1591, "Xm", 2uLL, (void *)v5[1593]);
  int v11 = *((unsigned __int8 *)v4 + 18);
  if ((v11 - 1) >= 2)
  {
    if (v11 == 5 && *((_DWORD *)v4 + 2))
    {
      int v4 = *(swift::Demangle::__runtime::Node **)v4;
      goto LABEL_21;
    }
LABEL_25:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return this;
  }
LABEL_21:
  int v12 = *(swift::Demangle::__runtime::Node **)v4;
}

uint64_t *anonymous namespace'::Remangler::mangleExplicitClosure@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = a2;
  unsigned int v7 = a3 + 1;
  int v8 = *((unsigned __int8 *)a2 + 18);
  unsigned int v9 = (swift::Demangle::__runtime::Node **)a2;
  if ((v8 - 1) < 2)
  {
LABEL_5:
    if (*(_DWORD *)a4) {
      return result;
    }
    if (*((unsigned char *)v4 + 18) != 5) {
      goto LABEL_12;
    }
    goto LABEL_9;
  }
  if (v8 == 5 && *((_DWORD *)a2 + 2))
  {
    unsigned int v9 = *(swift::Demangle::__runtime::Node ***)a2;
    goto LABEL_5;
  }
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  if (v8 != 5)
  {
LABEL_12:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    goto LABEL_13;
  }
LABEL_9:
  if (*((_DWORD *)v4 + 2) <= 2u) {
    goto LABEL_12;
  }
  if (*(_DWORD *)a4) {
    return result;
  }
LABEL_13:
  uint64_t result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "fU", 2uLL, this[1593]);
  int v11 = *((unsigned __int8 *)v4 + 18);
  if (v11 != 2)
  {
    if (v11 != 5 || *((_DWORD *)v4 + 2) < 2u)
    {
      *(_DWORD *)a4 = 0;
      *(void *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 16) = 0;
      return result;
    }
    int v4 = *(swift::Demangle::__runtime::Node **)v4;
  }
  int v12 = (swift::Demangle::__runtime::Node *)*((void *)v4 + 1);
}

uint64_t *anonymous namespace'::Remangler::mangleExtension@<X0>(uint64_t *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v5 = this;
  unsigned int v7 = a3 + 1;
  int v8 = *((unsigned __int8 *)a2 + 18);
  unsigned int v9 = a2;
  if (v8 != 2)
  {
    if (v8 != 5 || *((_DWORD *)a2 + 2) < 2u)
    {
      *(_DWORD *)a4 = 0;
      *(void *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 16) = 0;
      goto LABEL_8;
    }
    unsigned int v9 = *(swift::Demangle::__runtime::Node **)a2;
  }
  if (*(_DWORD *)a4) {
    return this;
  }
  int v8 = *((unsigned __int8 *)a2 + 18);
LABEL_8:
  size_t v10 = (swift::Demangle::__runtime::Node **)a2;
  if ((v8 - 1) >= 2)
  {
    if (v8 != 5 || !*((_DWORD *)a2 + 2))
    {
      *(_DWORD *)a4 = 0;
      *(void *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 16) = 0;
      if (v8 != 5) {
        goto LABEL_18;
      }
      goto LABEL_16;
    }
    size_t v10 = *(swift::Demangle::__runtime::Node ***)a2;
  }
  if (*(_DWORD *)a4) {
    return this;
  }
  if (*((unsigned char *)a2 + 18) != 5)
  {
LABEL_18:
    unsigned int v11 = *((_DWORD *)v5 + 3184);
    size_t v12 = *((unsigned int *)v5 + 3185);
    unint64_t v13 = (char *)v5[1591];
    if (v11 < v12)
    {
LABEL_35:
      *((_DWORD *)v5 + 3184) = v11 + 1;
      v13[v11] = 69;
      *(_DWORD *)a4 = 0;
      *(void *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 16) = 0;
      return this;
    }
    unint64_t v14 = (void *)v5[1593];
    unint64_t v15 = (char *)v14[1];
    if (&v13[v12] == v15)
    {
      unint64_t v17 = (unint64_t)&v13[v12 + 1];
      unint64_t v16 = v14[2];
      if (v17 <= v16)
      {
        v14[1] = v17;
        LODWORD(v18) = 1;
LABEL_34:
        *((_DWORD *)v5 + 3185) = v12 + v18;
        goto LABEL_35;
      }
    }
    else
    {
      unint64_t v16 = v14[2];
    }
    if ((2 * v12) <= 4) {
      uint64_t v18 = 4;
    }
    else {
      uint64_t v18 = (2 * v12);
    }
    size_t v19 = v18 + v12;
    if (!v15 || (unint64_t)&v15[v19] > v16)
    {
      unint64_t v20 = 2 * v14[4];
      if (v20 <= v19 + 1) {
        unint64_t v20 = v19 + 1;
      }
      v14[4] = v20;
      unint64_t v21 = v20 + 8;
      this = (uint64_t *)malloc_type_malloc(v20 + 8, 0xD0263BC5uLL);
      unint64_t v22 = (char *)this + v21;
      *this = v14[3];
      unint64_t v15 = (char *)(this + 1);
      v14[2] = v22;
      v14[3] = this;
    }
    v14[1] = &v15[v19];
    if (v12) {
      this = (uint64_t *)memcpy(v15, (const void *)v5[1591], v12);
    }
    v5[1591] = (uint64_t)v15;
    LODWORD(v12) = *((_DWORD *)v5 + 3185);
    unint64_t v13 = v15;
    unsigned int v11 = *((_DWORD *)v5 + 3184);
    goto LABEL_34;
  }
LABEL_16:
  if (*((_DWORD *)a2 + 2) != 3) {
    goto LABEL_18;
  }
  if (!*(_DWORD *)a4) {
    goto LABEL_18;
  }
  return this;
}

uint64_t *anonymous namespace'::Remangler::mangleExtensionAttachedMacroExpansion@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  unsigned int v7 = a3 + 1;
  int v8 = *((unsigned __int8 *)a2 + 18);
  unsigned int v9 = a2;
  if ((v8 - 1) >= 2)
  {
    if (v8 != 5 || !*((_DWORD *)a2 + 2))
    {
      *(_DWORD *)a4 = 0;
      *(void *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 16) = 0;
      goto LABEL_8;
    }
    unsigned int v9 = (swift::Demangle::__runtime::Node **)*a2;
  }
  if (*(_DWORD *)a4) {
    return result;
  }
  int v8 = *((unsigned __int8 *)a2 + 18);
LABEL_8:
  unsigned int v11 = (swift::Demangle::__runtime::Node *)a2;
  if (v8 != 2)
  {
    if (v8 != 5 || *((_DWORD *)a2 + 2) < 2u)
    {
      *(_DWORD *)a4 = 0;
      *(void *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 16) = 0;
      if (v8 != 5) {
        goto LABEL_19;
      }
      goto LABEL_16;
    }
    unsigned int v11 = *a2;
  }
  if (*(_DWORD *)a4) {
    return result;
  }
  if (*((unsigned char *)a2 + 18) != 5) {
    goto LABEL_19;
  }
LABEL_16:
  if (*((_DWORD *)a2 + 2) > 2u)
  {
    if (*(_DWORD *)a4) {
      return result;
    }
    goto LABEL_20;
  }
LABEL_19:
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
LABEL_20:
  uint64_t result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "fMe", 3uLL, this[1593]);
  if (*((unsigned char *)a2 + 18) == 5 && *((_DWORD *)a2 + 2) >= 4u)
  {
    size_t v12 = (swift::Demangle::__runtime::Node *)*((void *)*a2 + 3);
  }
  else
  {
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
  }
  return result;
}

uint64_t *anonymous namespace'::Remangler::mangleFieldOffset@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = a2;
  unsigned int v7 = a3 + 1;
  int v8 = *((unsigned __int8 *)a2 + 18);
  unsigned int v9 = a2;
  if (v8 != 2)
  {
    if (v8 != 5 || *((_DWORD *)a2 + 2) < 2u)
    {
      *(_DWORD *)a4 = 0;
      *(void *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 16) = 0;
      goto LABEL_8;
    }
    unsigned int v9 = *(swift::Demangle::__runtime::Node **)a2;
  }
  if (*(_DWORD *)a4) {
    return result;
  }
LABEL_8:
  uint64_t result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "Wv", 2uLL, this[1593]);
  int v11 = *((unsigned __int8 *)v4 + 18);
  if ((v11 - 1) >= 2)
  {
    if (v11 != 5 || !*((_DWORD *)v4 + 2))
    {
      *(_DWORD *)a4 = 0;
      *(void *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 16) = 0;
      return result;
    }
    int v4 = *(swift::Demangle::__runtime::Node **)v4;
  }
  size_t v12 = *(swift::Demangle::__runtime::Node **)v4;
}

uint64_t *anonymous namespace'::Remangler::mangleFreestandingMacroExpansion@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  unsigned int v7 = a3 + 1;
  int v8 = *((unsigned __int8 *)a2 + 18);
  unsigned int v9 = a2;
  if ((v8 - 1) < 2)
  {
LABEL_5:
    if (*(_DWORD *)a4) {
      return result;
    }
    int v8 = *((unsigned __int8 *)a2 + 18);
    if (v8 != 5) {
      goto LABEL_13;
    }
    goto LABEL_9;
  }
  if (v8 == 5 && *((_DWORD *)a2 + 2))
  {
    unsigned int v9 = (swift::Demangle::__runtime::Node **)*a2;
    goto LABEL_5;
  }
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  if (v8 != 5) {
    goto LABEL_13;
  }
LABEL_9:
  if (*((_DWORD *)a2 + 2) < 4u || (int v11 = (swift::Demangle::__runtime::Node *)*((void *)*a2 + 3)) == 0)
  {
LABEL_15:
    if (*((_DWORD *)a2 + 2) >= 2u)
    {
      size_t v12 = *a2;
LABEL_17:
      if (*(_DWORD *)a4) {
        return result;
      }
      goto LABEL_20;
    }
    goto LABEL_19;
  }
  if (*(_DWORD *)a4) {
    return result;
  }
  int v8 = *((unsigned __int8 *)a2 + 18);
LABEL_13:
  size_t v12 = (swift::Demangle::__runtime::Node *)a2;
  if (v8 == 2) {
    goto LABEL_17;
  }
  if (v8 == 5) {
    goto LABEL_15;
  }
LABEL_19:
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
LABEL_20:
  uint64_t result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "fMf", 3uLL, this[1593]);
  if (*((unsigned char *)a2 + 18) == 5 && *((_DWORD *)a2 + 2) >= 3u)
  {
    unint64_t v13 = (swift::Demangle::__runtime::Node *)*((void *)*a2 + 2);
  }
  else
  {
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
  }
  return result;
}

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleFullTypeMetadata@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      int v8 = 321;
      int v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  if (*(_DWORD *)a4) {
    return this;
  }
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::__runtime::CharVector::append((char **)v4 + 1591, "Mf", 2uLL, *((void **)v4 + 1593));
  int v7 = 0;
  a2 = 0;
  int v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

void *anonymous namespace'::Remangler::mangleFunction@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  unsigned int v7 = a3 + 1;
  int v8 = *((unsigned __int8 *)a2 + 18);
  unsigned int v9 = a2;
  if ((v8 - 1) >= 2)
  {
    if (v8 != 5 || !*((_DWORD *)a2 + 2))
    {
      *(_DWORD *)a4 = 0;
      *(void *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 16) = 0;
      goto LABEL_8;
    }
    unsigned int v9 = (swift::Demangle::__runtime::Node **)*a2;
  }
  if (*(_DWORD *)a4) {
    return result;
  }
  int v8 = *((unsigned __int8 *)a2 + 18);
LABEL_8:
  int v11 = (swift::Demangle::__runtime::Node *)a2;
  if (v8 == 2) {
    goto LABEL_12;
  }
  if (v8 == 5 && *((_DWORD *)a2 + 2) >= 2u)
  {
    int v11 = *a2;
LABEL_12:
    if (*(_DWORD *)a4) {
      return result;
    }
    int v8 = *((unsigned __int8 *)a2 + 18);
    if (v8 != 5) {
      goto LABEL_14;
    }
    goto LABEL_16;
  }
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  if (v8 != 5)
  {
LABEL_14:
    size_t v12 = 0;
    BOOL v13 = 0;
    goto LABEL_21;
  }
LABEL_16:
  BOOL v13 = *(unsigned __int16 *)(*((void *)*a2 + 2) + 16) == 290;
  unint64_t v14 = 2;
  if (*(_WORD *)(*((void *)*a2 + 2) + 16) == 290) {
    unint64_t v14 = 3;
  }
  if (v14 >= *((unsigned int *)a2 + 2)) {
    size_t v12 = 0;
  }
  else {
    size_t v12 = (swift::Demangle::__runtime::Node *)*((void *)*a2 + v14);
  }
LABEL_21:
  int v15 = *((unsigned __int8 *)v12 + 18);
  if ((v15 - 1) < 2) {
    goto LABEL_25;
  }
  if (v15 == 5 && *((_DWORD *)v12 + 2))
  {
    size_t v12 = *(swift::Demangle::__runtime::Node **)v12;
LABEL_25:
    unint64_t v16 = *(swift::Demangle::__runtime::Node **)v12;
    if (!v13) {
      goto LABEL_33;
    }
    goto LABEL_28;
  }
  unint64_t v16 = 0;
  if (!v13) {
    goto LABEL_33;
  }
LABEL_28:
  if (v8 == 5 && *((_DWORD *)a2 + 2) > 2u)
  {
    if (*(_DWORD *)a4) {
      return result;
    }
  }
  else
  {
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
  }
LABEL_33:
  if (*((_WORD *)v16 + 8) != 44)
  {
    uint64_t v20 = *((unsigned __int8 *)v16 + 18);
    if (v20 != 1)
    {
      if (v20 == 5)
      {
        uint64_t v20 = *((unsigned int *)v16 + 2);
        if (v20) {
          goto LABEL_55;
        }
      }
      else if (v20 == 2)
      {
        uint64_t v20 = 2;
        goto LABEL_55;
      }
LABEL_68:
      *(_DWORD *)a4 = 0;
      *(void *)(a4 + 8) = 0;
      unint64_t v28 = (_DWORD *)(a4 + 16);
      goto LABEL_91;
    }
LABEL_55:
    uint64_t v24 = v20 - 1;
    while (1)
    {
      unint64_t v25 = *((unsigned __int8 *)v16 + 18);
      unsigned int v26 = v25 - 1;
      if (v25 != 1)
      {
        if (v25 == 5)
        {
          unint64_t v25 = *((unsigned int *)v16 + 2);
        }
        else
        {
          if (v25 != 2) {
            goto LABEL_56;
          }
          unint64_t v25 = 2;
        }
      }
      if (v25 > v24)
      {
        BOOL v27 = v16;
        if (v26 >= 2) {
          BOOL v27 = *(swift::Demangle::__runtime::Node **)v16;
        }
        if (*(_DWORD *)a4) {
          return result;
        }
        goto LABEL_57;
      }
LABEL_56:
      *(_DWORD *)a4 = 0;
      *(void *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 16) = 0;
LABEL_57:
      if (--v24 == -1) {
        goto LABEL_68;
      }
    }
  }
  int v17 = *((unsigned __int8 *)v16 + 18);
  uint64_t v18 = v16;
  if (v17 == 2)
  {
LABEL_38:
    size_t v19 = (uint64_t *)*((void *)v18 + 1);
    goto LABEL_44;
  }
  if (v17 == 5 && *((_DWORD *)v16 + 2) >= 2u)
  {
    uint64_t v18 = *(swift::Demangle::__runtime::Node **)v16;
    goto LABEL_38;
  }
  size_t v19 = 0;
LABEL_44:
  int v21 = *((unsigned __int8 *)v19 + 18);
  if ((v21 - 1) >= 2)
  {
    if (v21 != 5 || !*((_DWORD *)v19 + 2))
    {
      unint64_t v22 = 0;
      goto LABEL_50;
    }
    size_t v19 = (uint64_t *)*v19;
  }
  unint64_t v22 = (uint64_t *)*v19;
LABEL_50:
  uint64_t v23 = *((unsigned __int8 *)v22 + 18);
  if (v23 != 1)
  {
    if (v23 == 5)
    {
      uint64_t v23 = *((unsigned int *)v22 + 2);
      if (!v23) {
        goto LABEL_84;
      }
    }
    else
    {
      if (v23 != 2) {
        goto LABEL_84;
      }
      uint64_t v23 = 2;
    }
  }
  uint64_t v29 = v23 - 1;
  do
  {
    unint64_t v30 = *((unsigned __int8 *)v22 + 18);
    unsigned int v31 = v30 - 1;
    if (v30 != 1)
    {
      if (v30 == 5)
      {
        unint64_t v30 = *((unsigned int *)v22 + 2);
      }
      else
      {
        if (v30 != 2) {
          goto LABEL_71;
        }
        unint64_t v30 = 2;
      }
    }
    if (v30 <= v29)
    {
LABEL_71:
      *(_DWORD *)a4 = 0;
      *(void *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 16) = 0;
      goto LABEL_72;
    }
    unint64_t v32 = v22;
    if (v31 >= 2) {
      unint64_t v32 = (uint64_t *)*v22;
    }
    if (*(_DWORD *)a4) {
      return result;
    }
LABEL_72:
    --v29;
  }
  while (v29 != -1);
  int v17 = *((unsigned __int8 *)v16 + 18);
LABEL_84:
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  unint64_t v28 = (_DWORD *)(a4 + 16);
  if ((v17 - 1) < 2)
  {
LABEL_88:
    if (!*(_DWORD *)a4) {
      goto LABEL_92;
    }
  }
  else
  {
    if (v17 == 5 && *((_DWORD *)v16 + 2))
    {
      unint64_t v16 = *(swift::Demangle::__runtime::Node **)v16;
      goto LABEL_88;
    }
    *(void *)(a4 + 8) = 0;
LABEL_91:
    *unint64_t v28 = 0;
LABEL_92:
    uint64_t result = swift::Demangle::__runtime::CharVector::append(this + 1591, "F", 1uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
  }
  return result;
}

void anonymous namespace'::Remangler::mangleFunctionSignatureSpecialization(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = a3;
  uint64_t v5 = a2;
  int v8 = *((unsigned __int8 *)a2 + 18);
  unsigned int v9 = a2;
  if ((v8 - 1) >= 2)
  {
    if (v8 == 5)
    {
      uint64_t v10 = *(void *)a2;
      unsigned int v9 = *(swift::Demangle::__runtime::Node **)a2;
      goto LABEL_9;
    }
    unsigned int v9 = 0;
  }
  switch(v8)
  {
    case 1:
      int v11 = (swift::Demangle::__runtime::Node *)((char *)a2 + 8);
      if (v9 != (swift::Demangle::__runtime::Node *)((char *)a2 + 8)) {
        goto LABEL_16;
      }
      break;
    case 2:
      int v11 = (swift::Demangle::__runtime::Node *)((char *)a2 + 16);
      if (v9 != (swift::Demangle::__runtime::Node *)((char *)a2 + 16)) {
        goto LABEL_16;
      }
      break;
    case 5:
      uint64_t v10 = *(void *)a2;
LABEL_9:
      int v11 = (swift::Demangle::__runtime::Node *)(v10 + 8 * *((unsigned int *)a2 + 2));
      if (v9 == v11) {
        break;
      }
      goto LABEL_16;
    default:
      int v11 = 0;
      if (!v9) {
        break;
      }
LABEL_16:
      int v70 = (char *)this + 12688;
      unsigned int v12 = a3 + 2;
      while (1)
      {
        unint64_t v14 = *(_DWORD ***)v9;
        if (*(_WORD *)(*(void *)v9 + 16) == 78)
        {
          int v15 = *((unsigned __int8 *)v14 + 18);
          unint64_t v16 = *(_DWORD ***)v9;
          if ((v15 - 1) < 2) {
            goto LABEL_25;
          }
          if (v15 == 5 && *((_DWORD *)v14 + 2)) {
            break;
          }
        }
LABEL_19:
        unsigned int v9 = (swift::Demangle::__runtime::Node *)((char *)v9 + 8);
        if (v9 == v11) {
          goto LABEL_90;
        }
      }
      unint64_t v16 = (_DWORD **)*v14;
LABEL_25:
      switch(**v16)
      {
        case 0:
        case 1:
          if (v15 == 2) {
            goto LABEL_30;
          }
          if (v15 == 5 && *((_DWORD *)v14 + 2) >= 2u)
          {
            unint64_t v14 = (_DWORD **)*v14;
LABEL_30:
            NodeWithAllocatedText = (swift::Demangle::__runtime::Node *)v14[1];
          }
          else
          {
            NodeWithAllocatedText = 0;
          }
LABEL_87:
          memset(&v74, 0, 17);
          {
            unint64_t v44 = *((void *)this + 1585);
            if (v44 > 0xF)
            {
              int v13 = *((_DWORD *)this + 3178) + 16;
              std::string v75 = v74;
              int v76 = v13;
              std::__hash_table<std::__hash_value_type<swift::Demangle::__runtime::SubstitutionEntry,unsigned int>,std::__unordered_map_hasher<swift::Demangle::__runtime::SubstitutionEntry,std::__hash_value_type<swift::Demangle::__runtime::SubstitutionEntry,unsigned int>,swift::Demangle::__runtime::SubstitutionEntry::Hasher,std::equal_to<swift::Demangle::__runtime::SubstitutionEntry>,true>,std::__unordered_map_equal<swift::Demangle::__runtime::SubstitutionEntry,std::__hash_value_type<swift::Demangle::__runtime::SubstitutionEntry,unsigned int>,std::equal_to<swift::Demangle::__runtime::SubstitutionEntry>,swift::Demangle::__runtime::SubstitutionEntry::Hasher,true>,std::allocator<std::__hash_value_type<swift::Demangle::__runtime::SubstitutionEntry,unsigned int>>>::__emplace_unique_key_args<swift::Demangle::__runtime::SubstitutionEntry,std::pair<swift::Demangle::__runtime::SubstitutionEntry const,unsigned int>>((uint64_t)v70, (uint64_t)&v75, &v75);
            }
            else
            {
              *((void *)this + 1585) = v44 + 1;
              unint64_t v45 = (char *)this + 24 * v44 + 12296;
              *(_OWORD *)unint64_t v45 = *(_OWORD *)&v74.__r_.__value_.__l.__data_;
              v45[16] = v74.__r_.__value_.__s.__data_[16];
            }
          }
          *(_DWORD *)a4 = 0;
          *(void *)(a4 + 8) = 0;
          *(_DWORD *)(a4 + 16) = 0;
          goto LABEL_19;
        case 4:
          NodeWithAllocatedText = (swift::Demangle::__runtime::Node *)*((void *)*v14 + 2);
          std::string::size_type v20 = *((void *)NodeWithAllocatedText + 1);
          if (v20)
          {
            int v21 = *(const std::string::value_type **)NodeWithAllocatedText;
            int v22 = **(unsigned __int8 **)NodeWithAllocatedText;
            if (v22 == 95 || (v22 - 48) <= 9)
            {
              int v69 = v4;
              *((unsigned char *)&v75.__r_.__value_.__s + 23) = 1;
              LOWORD(v75.__r_.__value_.__l.__data_) = 95;
              std::string::append(&v75, v21, v20);
              uint64_t v24 = *(void **)this;
              if ((v75.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                unint64_t v25 = &v75;
              }
              else {
                unint64_t v25 = (std::string *)v75.__r_.__value_.__r.__words[0];
              }
              if ((v75.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                std::string::size_type size = HIBYTE(v75.__r_.__value_.__r.__words[2]);
              }
              else {
                std::string::size_type size = v75.__r_.__value_.__l.__size_;
              }
              if (size)
              {
                BOOL v27 = (char *)v24[1];
                if (!v27 || (unint64_t v28 = &v27[size], (unint64_t)&v27[size] > v24[2]))
                {
                  unint64_t v29 = 2 * v24[4];
                  if (v29 <= size + 1) {
                    unint64_t v29 = size + 1;
                  }
                  v24[4] = v29;
                  unint64_t v30 = v29 + 8;
                  unsigned int v31 = v25;
                  unint64_t v32 = malloc_type_malloc(v29 + 8, 0xD0263BC5uLL);
                  unint64_t v25 = v31;
                  *unint64_t v32 = v24[3];
                  BOOL v27 = (char *)(v32 + 1);
                  void v24[2] = (char *)v32 + v30;
                  v24[3] = v32;
                  unint64_t v28 = (char *)v32 + size + 8;
                }
                v24[1] = v28;
                memmove(v27, v25, size);
              }
              else
              {
                BOOL v27 = 0;
              }
              NodeWithAllocatedText = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNodeWithAllocatedText(v24, 101, (uint64_t)v27, size);
              if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v75.__r_.__value_.__l.__data_);
              }
              int v4 = v69;
            }
          }
          goto LABEL_87;
        case 5:
        case 9:
          uint64_t v18 = *(void *)v9;
          if (v15 == 2) {
            goto LABEL_35;
          }
          if (v15 == 5 && *((_DWORD *)v14 + 2) >= 2u)
          {
            uint64_t v18 = (uint64_t)*v14;
LABEL_35:
            uint64_t v19 = *(void *)(v18 + 8);
          }
          else
          {
            uint64_t v19 = 0;
          }
          memset(&v74, 0, 17);
          {
            unint64_t v33 = *((void *)this + 1585);
            if (v33 > 0xF)
            {
              int v35 = *((_DWORD *)this + 3178) + 16;
              std::string v75 = v74;
              int v76 = v35;
              std::__hash_table<std::__hash_value_type<swift::Demangle::__runtime::SubstitutionEntry,unsigned int>,std::__unordered_map_hasher<swift::Demangle::__runtime::SubstitutionEntry,std::__hash_value_type<swift::Demangle::__runtime::SubstitutionEntry,unsigned int>,swift::Demangle::__runtime::SubstitutionEntry::Hasher,std::equal_to<swift::Demangle::__runtime::SubstitutionEntry>,true>,std::__unordered_map_equal<swift::Demangle::__runtime::SubstitutionEntry,std::__hash_value_type<swift::Demangle::__runtime::SubstitutionEntry,unsigned int>,std::equal_to<swift::Demangle::__runtime::SubstitutionEntry>,swift::Demangle::__runtime::SubstitutionEntry::Hasher,true>,std::allocator<std::__hash_value_type<swift::Demangle::__runtime::SubstitutionEntry,unsigned int>>>::__emplace_unique_key_args<swift::Demangle::__runtime::SubstitutionEntry,std::pair<swift::Demangle::__runtime::SubstitutionEntry const,unsigned int>>((uint64_t)v70, (uint64_t)&v75, &v75);
            }
            else
            {
              *((void *)this + 1585) = v33 + 1;
              size_t v34 = (char *)this + 24 * v33 + 12296;
              *(_OWORD *)size_t v34 = *(_OWORD *)&v74.__r_.__value_.__l.__data_;
              v34[16] = v74.__r_.__value_.__s.__data_[16];
            }
          }
          *(_DWORD *)a4 = 0;
          *(void *)(a4 + 8) = 0;
          *(_DWORD *)(a4 + 16) = 0;
          int v36 = *((unsigned __int8 *)v14 + 18);
          switch(v36)
          {
            case 1:
              goto LABEL_64;
            case 2:
              goto LABEL_19;
            case 5:
              int v36 = *((_DWORD *)v14 + 2);
              if (v36 == 2) {
                goto LABEL_19;
              }
LABEL_64:
              unsigned int v37 = 2;
              break;
            default:
              int v36 = 0;
              unsigned int v37 = 2;
              break;
          }
          break;
        default:
          goto LABEL_19;
      }
      while (1)
      {
        unint64_t v38 = v37;
        unint64_t v39 = *((unsigned __int8 *)v14 + 18);
        unsigned int v40 = v39 - 1;
        if (v39 == 1) {
          goto LABEL_70;
        }
        if (v39 != 5) {
          break;
        }
        if (*((unsigned int *)v14 + 2) > v38)
        {
LABEL_71:
          unint64_t v41 = v14;
          if (v40 >= 2) {
            unint64_t v41 = (_DWORD **)*v14;
          }
          uint64_t v42 = (swift::Demangle::__runtime::Node *)v41[v38];
          goto LABEL_76;
        }
LABEL_75:
        uint64_t v42 = 0;
LABEL_76:
        int v43 = *((unsigned __int8 *)v42 + 18);
        if (v43 != 1)
        {
          if (v43 != 5 || *((_DWORD *)v42 + 2) != 1)
          {
            *(_DWORD *)a4 = 10;
            *(void *)(a4 + 8) = v42;
            *(_DWORD *)(a4 + 16) = 321;
            return;
          }
          uint64_t v42 = *(swift::Demangle::__runtime::Node **)v42;
        }
        if (*(_DWORD *)a4) {
          return;
        }
        unsigned int v37 = v38 + 1;
        if (v36 == v38 + 1) {
          goto LABEL_19;
        }
      }
      if (v39 != 2) {
        goto LABEL_75;
      }
      unint64_t v39 = 2;
LABEL_70:
      if (v39 > v38) {
        goto LABEL_71;
      }
      goto LABEL_75;
  }
LABEL_90:
  unint64_t v46 = (char **)((char *)this + 12728);
  swift::Demangle::__runtime::CharVector::append((char **)this + 1591, "Tf", 2uLL, *((void **)this + 1593));
  int v47 = *((unsigned __int8 *)v5 + 18);
  size_t v48 = v5;
  if ((v47 - 1) >= 2)
  {
    if (v47 == 5)
    {
      unint64_t v49 = *(void *)v5;
      size_t v48 = *(swift::Demangle::__runtime::Node **)v5;
      goto LABEL_99;
    }
    size_t v48 = 0;
  }
  switch(v47)
  {
    case 1:
      unint64_t v50 = (swift::Demangle::__runtime::Node *)((char *)v5 + 8);
      if (v48 == (swift::Demangle::__runtime::Node *)((char *)v5 + 8)) {
        goto LABEL_135;
      }
      break;
    case 2:
      unint64_t v50 = (swift::Demangle::__runtime::Node *)((char *)v5 + 16);
      if (v48 == (swift::Demangle::__runtime::Node *)((char *)v5 + 16)) {
        goto LABEL_135;
      }
      break;
    case 5:
      unint64_t v49 = *(void *)v5;
LABEL_99:
      unint64_t v50 = (swift::Demangle::__runtime::Node *)(v49 + 8 * *((unsigned int *)v5 + 2));
      if (v48 == v50)
      {
LABEL_135:
        swift::Demangle::__runtime::CharVector::append(v46, "_n", 2uLL, *((void **)this + 1593));
        goto LABEL_136;
      }
      break;
    default:
      unint64_t v50 = 0;
      if (!v48) {
        goto LABEL_135;
      }
      break;
  }
  char v51 = 0;
  uint64_t v52 = (v4 + 1);
  v71 = v50;
  uint64_t v72 = v5;
  uint64_t v73 = a4;
  do
  {
    uint64_t v53 = *(swift::Demangle::__runtime::Node **)v48;
    if (*(_WORD *)(*(void *)v48 + 16) != 79) {
      goto LABEL_129;
    }
    uint64_t v54 = v52;
    unsigned int v55 = *((_DWORD *)this + 3184);
    size_t v56 = *((unsigned int *)this + 3185);
    char v57 = (char *)*((void *)this + 1591);
    if (v55 >= v56)
    {
      unint64_t v58 = (void *)*((void *)this + 1593);
      uint64_t v59 = (char *)v58[1];
      if (&v57[v56] == v59)
      {
        unint64_t v61 = (unint64_t)&v57[v56 + 1];
        unint64_t v60 = v58[2];
        if (v61 <= v60)
        {
          v58[1] = v61;
          LODWORD(v62) = 1;
          uint64_t v5 = v72;
LABEL_127:
          *((_DWORD *)this + 3185) = v56 + v62;
          goto LABEL_128;
        }
      }
      else
      {
        unint64_t v60 = v58[2];
      }
      if ((2 * v56) <= 4) {
        uint64_t v62 = 4;
      }
      else {
        uint64_t v62 = (2 * v56);
      }
      size_t v63 = v62 + v56;
      if (v59) {
        BOOL v64 = (unint64_t)&v59[v62 + v56] > v60;
      }
      else {
        BOOL v64 = 1;
      }
      char v57 = (char *)v58[1];
      if (v64)
      {
        unint64_t v65 = 2 * v58[4];
        if (v65 <= v63 + 1) {
          unint64_t v65 = v63 + 1;
        }
        v58[4] = v65;
        unint64_t v66 = v65 + 8;
        long long v67 = malloc_type_malloc(v65 + 8, 0xD0263BC5uLL);
        void *v67 = v58[3];
        char v57 = (char *)(v67 + 1);
        long long v68 = (char *)v67 + v66;
        unint64_t v46 = (char **)((char *)this + 12728);
        v58[2] = v68;
        v58[3] = v67;
      }
      v58[1] = &v57[v63];
      if (v56) {
        memcpy(v57, *v46, v56);
      }
      *((void *)this + 1591) = v57;
      LODWORD(v56) = *((_DWORD *)this + 3185);
      unsigned int v55 = *((_DWORD *)this + 3184);
      unint64_t v50 = v71;
      uint64_t v5 = v72;
      goto LABEL_127;
    }
LABEL_128:
    *((_DWORD *)this + 3184) = v55 + 1;
    v57[v55] = 95;
    char v51 = 1;
    uint64_t v52 = v54;
    a4 = v73;
LABEL_129:
    if (*(_DWORD *)a4) {
      return;
    }
    if (*((_WORD *)v53 + 8) == 216 && *((unsigned char *)v5 + 18) == 4) {
      swift::Demangle::__runtime::CharVector::append((unsigned int *)v46, *(void *)v5, *((swift::Demangle::__runtime::NodeFactory **)this + 1593));
    }
    size_t v48 = (swift::Demangle::__runtime::Node *)((char *)v48 + 8);
  }
  while (v48 != v50);
  if ((v51 & 1) == 0) {
    goto LABEL_135;
  }
LABEL_136:
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
}

uint64_t anonymous namespace'::Remangler::mangleFunctionSignatureSpecializationParam@<X0>(uint64_t this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3 = a2;
  uint64_t v4 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  unsigned int v7 = a2;
  if ((v6 - 1) < 2) {
    goto LABEL_5;
  }
  if (v6 != 5 || !*((_DWORD *)a2 + 2))
  {
    unsigned int v12 = *(_DWORD *)(this + 12736);
    size_t v13 = *(unsigned int *)(this + 12740);
    unint64_t v14 = *(unsigned char **)(this + 12728);
    if (v12 < v13)
    {
LABEL_30:
      int v31 = 0;
      uint64_t v3 = 0;
      int v32 = 0;
      *(_DWORD *)(v4 + 12736) = v12 + 1;
      v14[v12] = 110;
      goto LABEL_206;
    }
    int v15 = *(void **)(this + 12744);
    unint64_t v16 = (unsigned char *)v15[1];
    if (&v14[v13] == v16)
    {
      unint64_t v24 = (unint64_t)&v14[v13 + 1];
      unint64_t v17 = v15[2];
      if (v24 <= v17)
      {
        v15[1] = v24;
        LODWORD(v25) = 1;
LABEL_29:
        *(_DWORD *)(v4 + 12740) = v13 + v25;
        goto LABEL_30;
      }
    }
    else
    {
      unint64_t v17 = v15[2];
    }
    if ((2 * v13) <= 4) {
      uint64_t v25 = 4;
    }
    else {
      uint64_t v25 = (2 * v13);
    }
    size_t v26 = v25 + v13;
    if (v16) {
      BOOL v27 = (unint64_t)&v16[v25 + v13] > v17;
    }
    else {
      BOOL v27 = 1;
    }
    unint64_t v14 = (unsigned char *)v15[1];
    if (v27)
    {
      unint64_t v28 = 2 * v15[4];
      if (v28 <= v26 + 1) {
        unint64_t v28 = v26 + 1;
      }
      v15[4] = v28;
      unint64_t v29 = v28 + 8;
      this = (uint64_t)malloc_type_malloc(v28 + 8, 0xD0263BC5uLL);
      uint64_t v30 = this + v29;
      *(void *)this = v15[3];
      unint64_t v14 = (unsigned char *)(this + 8);
      v15[2] = v30;
      v15[3] = this;
    }
    v15[1] = &v14[v26];
    if (v13) {
      this = (uint64_t)memcpy(v14, *(const void **)(v4 + 12728), v13);
    }
    *(void *)(v4 + 12728) = v14;
    LODWORD(v13) = *(_DWORD *)(v4 + 12740);
    unsigned int v12 = *(_DWORD *)(v4 + 12736);
    goto LABEL_29;
  }
  unsigned int v7 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_5:
  int v8 = **(_DWORD **)v7;
  switch(v8)
  {
    case 0:
      unsigned int v9 = (char **)(this + 12728);
      uint64_t v10 = *(void **)(v4 + 12744);
      int v11 = "pf";
      goto LABEL_59;
    case 1:
      unsigned int v9 = (char **)(this + 12728);
      uint64_t v10 = *(void **)(v4 + 12744);
      int v11 = "pg";
      goto LABEL_59;
    case 2:
      unint64_t v33 = (char **)(this + 12728);
      size_t v34 = *(void **)(this + 12744);
      int v35 = "pi";
      goto LABEL_34;
    case 3:
      unint64_t v33 = (char **)(this + 12728);
      size_t v34 = *(void **)(this + 12744);
      int v35 = "pd";
LABEL_34:
      swift::Demangle::__runtime::CharVector::append(v33, v35, 2uLL, v34);
      if (*((unsigned char *)v3 + 18) == 5) {
        uint64_t v3 = *(swift::Demangle::__runtime::Node **)v3;
      }
      uint64_t v36 = *((void *)v3 + 1);
      int v11 = *(const char **)v36;
      size_t v37 = *(void *)(v36 + 8);
      uint64_t v10 = *(void **)(v4 + 12744);
      unsigned int v9 = v33;
      goto LABEL_60;
    case 4:
      unint64_t v38 = (const void **)(this + 12728);
      swift::Demangle::__runtime::CharVector::append((char **)(this + 12728), "ps", 2uLL, *(void **)(this + 12744));
      unint64_t v39 = v3;
      if (*((unsigned char *)v3 + 18) == 5) {
        unint64_t v39 = *(swift::Demangle::__runtime::Node **)v3;
      }
      unsigned int v40 = (uint64_t *)*((void *)v39 + 1);
      this = *v40;
      uint64_t v41 = v40[1];
      if (v41 == 4)
      {
        this = memcmp((const void *)this, "objc", 4uLL);
        if (!this)
        {
          this = (uint64_t)swift::Demangle::__runtime::RemanglerBuffer::operator<<((char **)(v4 + 12728), 99);
          goto LABEL_61;
        }
        goto LABEL_74;
      }
      if (v41 != 3)
      {
        if (v41 == 2 && *(_WORD *)this == 14453)
        {
          unsigned int v18 = *(_DWORD *)(v4 + 12736);
          size_t v42 = *(unsigned int *)(v4 + 12740);
          std::string::size_type v20 = *(char **)(v4 + 12728);
          if (v18 < v42)
          {
LABEL_222:
            int v31 = 0;
            uint64_t v3 = 0;
            int v32 = 0;
            *(_DWORD *)(v4 + 12736) = v18 + 1;
            char v85 = 98;
            goto LABEL_205;
          }
          int v43 = *(void **)(v4 + 12744);
          unint64_t v44 = (char *)v43[1];
          if (&v20[v42] == v44)
          {
            unint64_t v130 = (unint64_t)&v20[v42 + 1];
            unint64_t v45 = v43[2];
            if (v130 <= v45)
            {
              v43[1] = v130;
              LODWORD(v131) = 1;
LABEL_221:
              *(_DWORD *)(v4 + 12740) = v42 + v131;
              goto LABEL_222;
            }
          }
          else
          {
            unint64_t v45 = v43[2];
          }
          if ((2 * v42) <= 4) {
            uint64_t v131 = 4;
          }
          else {
            uint64_t v131 = (2 * v42);
          }
          size_t v132 = v131 + v42;
          if (!v44 || (unint64_t)&v44[v132] > v45)
          {
            unint64_t v133 = 2 * v43[4];
            if (v133 <= v132 + 1) {
              unint64_t v133 = v132 + 1;
            }
            v43[4] = v133;
            unint64_t v134 = v133 + 8;
            this = (uint64_t)malloc_type_malloc(v133 + 8, 0xD0263BC5uLL);
            uint64_t v135 = this + v134;
            *(void *)this = v43[3];
            unint64_t v44 = (char *)(this + 8);
            v43[2] = v135;
            v43[3] = this;
          }
          v43[1] = &v44[v132];
          if (v42) {
            this = (uint64_t)memcpy(v44, *v38, v42);
          }
          *(void *)(v4 + 12728) = v44;
          LODWORD(v42) = *(_DWORD *)(v4 + 12740);
          std::string::size_type v20 = v44;
          unsigned int v18 = *(_DWORD *)(v4 + 12736);
          goto LABEL_221;
        }
LABEL_74:
        int v32 = 1570;
        int v31 = 14;
        goto LABEL_206;
      }
      this = memcmp((const void *)this, "u16", 3uLL);
      if (this) {
        goto LABEL_74;
      }
      this = (uint64_t)swift::Demangle::__runtime::RemanglerBuffer::operator<<((char **)(v4 + 12728), 119);
      goto LABEL_61;
    case 5:
      unsigned int v46 = *(_DWORD *)(this + 12736);
      size_t v47 = *(unsigned int *)(this + 12740);
      size_t v48 = *(char **)(this + 12728);
      if (v46 < v47) {
        goto LABEL_107;
      }
      unint64_t v49 = *(void **)(this + 12744);
      unint64_t v50 = (char *)v49[1];
      if (&v48[v47] == v50)
      {
        unint64_t v86 = (unint64_t)&v48[v47 + 1];
        unint64_t v51 = v49[2];
        if (v86 <= v51)
        {
          v49[1] = v86;
          LODWORD(v87) = 1;
          goto LABEL_106;
        }
      }
      else
      {
        unint64_t v51 = v49[2];
      }
      if ((2 * v47) <= 4) {
        uint64_t v87 = 4;
      }
      else {
        uint64_t v87 = (2 * v47);
      }
      size_t v88 = v87 + v47;
      if (v50) {
        BOOL v89 = (unint64_t)&v50[v87 + v47] > v51;
      }
      else {
        BOOL v89 = 1;
      }
      size_t v48 = (char *)v49[1];
      if (v89)
      {
        unint64_t v90 = 2 * v49[4];
        if (v90 <= v88 + 1) {
          unint64_t v90 = v88 + 1;
        }
        v49[4] = v90;
        unint64_t v91 = v90 + 8;
        this = (uint64_t)malloc_type_malloc(v90 + 8, 0xD0263BC5uLL);
        uint64_t v92 = this + v91;
        *(void *)this = v49[3];
        size_t v48 = (char *)(this + 8);
        v49[2] = v92;
        v49[3] = this;
      }
      v49[1] = &v48[v88];
      if (v47) {
        this = (uint64_t)memcpy(v48, *(const void **)(v4 + 12728), v47);
      }
      *(void *)(v4 + 12728) = v48;
      LODWORD(v47) = *(_DWORD *)(v4 + 12740);
      unsigned int v46 = *(_DWORD *)(v4 + 12736);
LABEL_106:
      *(_DWORD *)(v4 + 12740) = v47 + v87;
LABEL_107:
      int v31 = 0;
      uint64_t v3 = 0;
      int v32 = 0;
      *(_DWORD *)(v4 + 12736) = v46 + 1;
      v48[v46] = 99;
      goto LABEL_206;
    case 6:
      unsigned int v52 = *(_DWORD *)(this + 12736);
      size_t v53 = *(unsigned int *)(this + 12740);
      uint64_t v54 = *(char **)(this + 12728);
      if (v52 < v53) {
        goto LABEL_124;
      }
      unsigned int v55 = *(void **)(this + 12744);
      size_t v56 = (char *)v55[1];
      if (&v54[v53] == v56)
      {
        unint64_t v93 = (unint64_t)&v54[v53 + 1];
        unint64_t v57 = v55[2];
        if (v93 <= v57)
        {
          v55[1] = v93;
          LODWORD(v94) = 1;
          goto LABEL_123;
        }
      }
      else
      {
        unint64_t v57 = v55[2];
      }
      if ((2 * v53) <= 4) {
        uint64_t v94 = 4;
      }
      else {
        uint64_t v94 = (2 * v53);
      }
      size_t v95 = v94 + v53;
      if (v56) {
        BOOL v96 = (unint64_t)&v56[v94 + v53] > v57;
      }
      else {
        BOOL v96 = 1;
      }
      uint64_t v54 = (char *)v55[1];
      if (v96)
      {
        unint64_t v97 = 2 * v55[4];
        if (v97 <= v95 + 1) {
          unint64_t v97 = v95 + 1;
        }
        v55[4] = v97;
        unint64_t v98 = v97 + 8;
        this = (uint64_t)malloc_type_malloc(v97 + 8, 0xD0263BC5uLL);
        uint64_t v99 = this + v98;
        *(void *)this = v55[3];
        uint64_t v54 = (char *)(this + 8);
        v55[2] = v99;
        v55[3] = this;
      }
      v55[1] = &v54[v95];
      if (v53) {
        this = (uint64_t)memcpy(v54, *(const void **)(v4 + 12728), v53);
      }
      *(void *)(v4 + 12728) = v54;
      LODWORD(v53) = *(_DWORD *)(v4 + 12740);
      unsigned int v52 = *(_DWORD *)(v4 + 12736);
LABEL_123:
      *(_DWORD *)(v4 + 12740) = v53 + v94;
LABEL_124:
      int v31 = 0;
      uint64_t v3 = 0;
      int v32 = 0;
      *(_DWORD *)(v4 + 12736) = v52 + 1;
      v54[v52] = 105;
      goto LABEL_206;
    case 7:
      unsigned int v58 = *(_DWORD *)(this + 12736);
      size_t v59 = *(unsigned int *)(this + 12740);
      unint64_t v60 = *(char **)(this + 12728);
      if (v58 < v59) {
        goto LABEL_141;
      }
      unint64_t v61 = *(void **)(this + 12744);
      uint64_t v62 = (char *)v61[1];
      if (&v60[v59] == v62)
      {
        unint64_t v100 = (unint64_t)&v60[v59 + 1];
        unint64_t v63 = v61[2];
        if (v100 <= v63)
        {
          v61[1] = v100;
          LODWORD(v101) = 1;
          goto LABEL_140;
        }
      }
      else
      {
        unint64_t v63 = v61[2];
      }
      if ((2 * v59) <= 4) {
        uint64_t v101 = 4;
      }
      else {
        uint64_t v101 = (2 * v59);
      }
      size_t v102 = v101 + v59;
      if (v62) {
        BOOL v103 = (unint64_t)&v62[v101 + v59] > v63;
      }
      else {
        BOOL v103 = 1;
      }
      unint64_t v60 = (char *)v61[1];
      if (v103)
      {
        unint64_t v104 = 2 * v61[4];
        if (v104 <= v102 + 1) {
          unint64_t v104 = v102 + 1;
        }
        v61[4] = v104;
        unint64_t v105 = v104 + 8;
        this = (uint64_t)malloc_type_malloc(v104 + 8, 0xD0263BC5uLL);
        uint64_t v106 = this + v105;
        *(void *)this = v61[3];
        unint64_t v60 = (char *)(this + 8);
        v61[2] = v106;
        v61[3] = this;
      }
      v61[1] = &v60[v102];
      if (v59) {
        this = (uint64_t)memcpy(v60, *(const void **)(v4 + 12728), v59);
      }
      *(void *)(v4 + 12728) = v60;
      LODWORD(v59) = *(_DWORD *)(v4 + 12740);
      unsigned int v58 = *(_DWORD *)(v4 + 12736);
LABEL_140:
      *(_DWORD *)(v4 + 12740) = v59 + v101;
LABEL_141:
      int v31 = 0;
      uint64_t v3 = 0;
      int v32 = 0;
      *(_DWORD *)(v4 + 12736) = v58 + 1;
      v60[v58] = 115;
      goto LABEL_206;
    case 8:
      unsigned int v64 = *(_DWORD *)(this + 12736);
      size_t v65 = *(unsigned int *)(this + 12740);
      unint64_t v66 = *(char **)(this + 12728);
      if (v64 < v65) {
        goto LABEL_158;
      }
      long long v67 = *(void **)(this + 12744);
      long long v68 = (char *)v67[1];
      if (&v66[v65] == v68)
      {
        unint64_t v107 = (unint64_t)&v66[v65 + 1];
        unint64_t v69 = v67[2];
        if (v107 <= v69)
        {
          v67[1] = v107;
          LODWORD(v108) = 1;
          goto LABEL_157;
        }
      }
      else
      {
        unint64_t v69 = v67[2];
      }
      if ((2 * v65) <= 4) {
        uint64_t v108 = 4;
      }
      else {
        uint64_t v108 = (2 * v65);
      }
      size_t v109 = v108 + v65;
      if (v68) {
        BOOL v110 = (unint64_t)&v68[v108 + v65] > v69;
      }
      else {
        BOOL v110 = 1;
      }
      unint64_t v66 = (char *)v67[1];
      if (v110)
      {
        unint64_t v111 = 2 * v67[4];
        if (v111 <= v109 + 1) {
          unint64_t v111 = v109 + 1;
        }
        v67[4] = v111;
        unint64_t v112 = v111 + 8;
        this = (uint64_t)malloc_type_malloc(v111 + 8, 0xD0263BC5uLL);
        uint64_t v113 = this + v112;
        *(void *)this = v67[3];
        unint64_t v66 = (char *)(this + 8);
        v67[2] = v113;
        v67[3] = this;
      }
      v67[1] = &v66[v109];
      if (v65) {
        this = (uint64_t)memcpy(v66, *(const void **)(v4 + 12728), v65);
      }
      *(void *)(v4 + 12728) = v66;
      LODWORD(v65) = *(_DWORD *)(v4 + 12740);
      unsigned int v64 = *(_DWORD *)(v4 + 12736);
LABEL_157:
      *(_DWORD *)(v4 + 12740) = v65 + v108;
LABEL_158:
      int v31 = 0;
      uint64_t v3 = 0;
      int v32 = 0;
      *(_DWORD *)(v4 + 12736) = v64 + 1;
      v66[v64] = 114;
      goto LABEL_206;
    case 9:
      unsigned int v9 = (char **)(this + 12728);
      uint64_t v10 = *(void **)(v4 + 12744);
      int v11 = "pk";
LABEL_59:
      size_t v37 = 2;
LABEL_60:
      this = (uint64_t)swift::Demangle::__runtime::CharVector::append(v9, v11, v37, v10);
      goto LABEL_61;
    default:
      if (v8 == 256)
      {
        unsigned int v18 = *(_DWORD *)(this + 12736);
        size_t v19 = *(unsigned int *)(this + 12740);
        std::string::size_type v20 = *(char **)(this + 12728);
        if (v18 < v19)
        {
LABEL_90:
          int v31 = 0;
          uint64_t v3 = 0;
          int v32 = 0;
          *(_DWORD *)(v4 + 12736) = v18 + 1;
          char v85 = 120;
          goto LABEL_205;
        }
        int v21 = *(void **)(this + 12744);
        int v22 = (char *)v21[1];
        if (&v20[v19] == v22)
        {
          unint64_t v79 = (unint64_t)&v20[v19 + 1];
          unint64_t v23 = v21[2];
          if (v79 <= v23)
          {
            v21[1] = v79;
            LODWORD(v80) = 1;
LABEL_89:
            *(_DWORD *)(v4 + 12740) = v19 + v80;
            goto LABEL_90;
          }
        }
        else
        {
          unint64_t v23 = v21[2];
        }
        if ((2 * v19) <= 4) {
          uint64_t v80 = 4;
        }
        else {
          uint64_t v80 = (2 * v19);
        }
        size_t v81 = v80 + v19;
        if (!v22 || (unint64_t)&v22[v81] > v23)
        {
          unint64_t v82 = 2 * v21[4];
          if (v82 <= v81 + 1) {
            unint64_t v82 = v81 + 1;
          }
          v21[4] = v82;
          unint64_t v83 = v82 + 8;
          this = (uint64_t)malloc_type_malloc(v82 + 8, 0xD0263BC5uLL);
          uint64_t v84 = this + v83;
          *(void *)this = v21[3];
          int v22 = (char *)(this + 8);
          v21[2] = v84;
          v21[3] = this;
        }
        v21[1] = &v22[v81];
        if (v19) {
          this = (uint64_t)memcpy(v22, *(const void **)(v4 + 12728), v19);
        }
        *(void *)(v4 + 12728) = v22;
        LODWORD(v19) = *(_DWORD *)(v4 + 12740);
        std::string::size_type v20 = v22;
        unsigned int v18 = *(_DWORD *)(v4 + 12736);
        goto LABEL_89;
      }
      if ((v8 & 0x400) != 0)
      {
        uint64_t v72 = (const void **)(this + 12728);
        unsigned int v73 = *(_DWORD *)(this + 12736);
        size_t v74 = *(unsigned int *)(this + 12740);
        std::string v75 = *(char **)(this + 12728);
        if (v73 < v74) {
          goto LABEL_173;
        }
        int v76 = *(void **)(this + 12744);
        uint64_t v77 = (char *)v76[1];
        if (&v75[v74] == v77)
        {
          unint64_t v114 = (unint64_t)&v75[v74 + 1];
          unint64_t v78 = v76[2];
          if (v114 <= v78)
          {
            v76[1] = v114;
            LODWORD(v115) = 1;
LABEL_172:
            *(_DWORD *)(v4 + 12740) = v74 + v115;
LABEL_173:
            *(_DWORD *)(v4 + 12736) = v73 + 1;
            v75[v73] = 101;
            if ((v8 & 0x40) != 0)
            {
              this = (uint64_t)swift::Demangle::__runtime::RemanglerBuffer::operator<<((char **)(v4 + 12728), 68);
              if ((v8 & 0x80) == 0) {
                goto LABEL_175;
              }
            }
            else if ((v8 & 0x80) == 0)
            {
              goto LABEL_175;
            }
            this = (uint64_t)swift::Demangle::__runtime::RemanglerBuffer::operator<<((char **)(v4 + 12728), 71);
            if ((v8 & 0x200) == 0) {
              goto LABEL_181;
            }
            goto LABEL_179;
          }
        }
        else
        {
          unint64_t v78 = v76[2];
        }
        if ((2 * v74) <= 4) {
          uint64_t v115 = 4;
        }
        else {
          uint64_t v115 = (2 * v74);
        }
        size_t v116 = v115 + v74;
        if (!v77 || (unint64_t)&v77[v116] > v78)
        {
          unint64_t v117 = 2 * v76[4];
          if (v117 <= v116 + 1) {
            unint64_t v117 = v116 + 1;
          }
          v76[4] = v117;
          unint64_t v118 = v117 + 8;
          this = (uint64_t)malloc_type_malloc(v117 + 8, 0xD0263BC5uLL);
          uint64_t v119 = this + v118;
          *(void *)this = v76[3];
          uint64_t v77 = (char *)(this + 8);
          v76[2] = v119;
          v76[3] = this;
        }
        v76[1] = &v77[v116];
        if (v74) {
          this = (uint64_t)memcpy(v77, *v72, v74);
        }
        *(void *)(v4 + 12728) = v77;
        LODWORD(v74) = *(_DWORD *)(v4 + 12740);
        std::string v75 = v77;
        unsigned int v73 = *(_DWORD *)(v4 + 12736);
        goto LABEL_172;
      }
      if ((v8 & 0x40) != 0)
      {
        uint64_t v72 = (const void **)(this + 12728);
        this = (uint64_t)swift::Demangle::__runtime::RemanglerBuffer::operator<<((char **)(this + 12728), 100);
        if ((v8 & 0x80) != 0) {
          this = (uint64_t)swift::Demangle::__runtime::RemanglerBuffer::operator<<((char **)(v4 + 12728), 71);
        }
LABEL_175:
        if ((v8 & 0x200) == 0) {
          goto LABEL_181;
        }
LABEL_179:
        int v70 = (char **)v72;
        char v71 = 79;
        goto LABEL_180;
      }
      if ((v8 & 0x80) != 0)
      {
        int v70 = (char **)(this + 12728);
        char v71 = 103;
      }
      else
      {
        if ((v8 & 0x200) == 0) {
          goto LABEL_181;
        }
        int v70 = (char **)(this + 12728);
        char v71 = 111;
      }
LABEL_180:
      this = (uint64_t)swift::Demangle::__runtime::RemanglerBuffer::operator<<(v70, v71);
LABEL_181:
      if ((v8 & 0x100) != 0)
      {
        unsigned int v18 = *(_DWORD *)(v4 + 12736);
        size_t v120 = *(unsigned int *)(v4 + 12740);
        std::string::size_type v20 = *(char **)(v4 + 12728);
        if (v18 < v120)
        {
LABEL_204:
          int v31 = 0;
          uint64_t v3 = 0;
          int v32 = 0;
          *(_DWORD *)(v4 + 12736) = v18 + 1;
          char v85 = 88;
LABEL_205:
          v20[v18] = v85;
          goto LABEL_206;
        }
        unint64_t v121 = *(void **)(v4 + 12744);
        unint64_t v122 = (char *)v121[1];
        if (&v20[v120] == v122)
        {
          unint64_t v124 = (unint64_t)&v20[v120 + 1];
          unint64_t v123 = v121[2];
          if (v124 <= v123)
          {
            v121[1] = v124;
            LODWORD(v125) = 1;
LABEL_203:
            *(_DWORD *)(v4 + 12740) = v120 + v125;
            goto LABEL_204;
          }
        }
        else
        {
          unint64_t v123 = v121[2];
        }
        if ((2 * v120) <= 4) {
          uint64_t v125 = 4;
        }
        else {
          uint64_t v125 = (2 * v120);
        }
        size_t v126 = v125 + v120;
        if (!v122 || (unint64_t)&v122[v126] > v123)
        {
          unint64_t v127 = 2 * v121[4];
          if (v127 <= v126 + 1) {
            unint64_t v127 = v126 + 1;
          }
          v121[4] = v127;
          unint64_t v128 = v127 + 8;
          this = (uint64_t)malloc_type_malloc(v127 + 8, 0xD0263BC5uLL);
          uint64_t v129 = this + v128;
          *(void *)this = v121[3];
          unint64_t v122 = (char *)(this + 8);
          v121[2] = v129;
          v121[3] = this;
        }
        v121[1] = &v122[v126];
        if (v120) {
          this = (uint64_t)memcpy(v122, *(const void **)(v4 + 12728), v120);
        }
        *(void *)(v4 + 12728) = v122;
        LODWORD(v120) = *(_DWORD *)(v4 + 12740);
        std::string::size_type v20 = v122;
        unsigned int v18 = *(_DWORD *)(v4 + 12736);
        goto LABEL_203;
      }
LABEL_61:
      int v31 = 0;
      uint64_t v3 = 0;
      int v32 = 0;
LABEL_206:
      *(_DWORD *)a3 = v31;
      *(void *)(a3 + 8) = v3;
      *(_DWORD *)(a3 + 16) = v32;
      return this;
  }
}

uint64_t *anonymous namespace'::Remangler::mangleFunctionType@<X0>(uint64_t *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v5 = (uint64_t)this;
  uint64_t v7 = *((unsigned __int8 *)a2 + 18);
  switch(v7)
  {
    case 1:
      goto LABEL_6;
    case 5:
      uint64_t v7 = *((unsigned int *)a2 + 2);
      if (v7) {
        goto LABEL_6;
      }
      break;
    case 2:
      uint64_t v7 = 2;
LABEL_6:
      unsigned int v8 = a3 + 1;
      for (uint64_t i = v7 - 1; i != -1; --i)
      {
        unint64_t v10 = *((unsigned __int8 *)a2 + 18);
        unsigned int v11 = v10 - 1;
        if (v10 != 1)
        {
          if (v10 == 5)
          {
            unint64_t v10 = *((unsigned int *)a2 + 2);
          }
          else
          {
            if (v10 != 2) {
              goto LABEL_7;
            }
            unint64_t v10 = 2;
          }
        }
        if (v10 <= i)
        {
LABEL_7:
          *(_DWORD *)a4 = 0;
          *(void *)(a4 + 8) = 0;
          *(_DWORD *)(a4 + 16) = 0;
          continue;
        }
        unsigned int v12 = a2;
        if (v11 >= 2) {
          unsigned int v12 = *(swift::Demangle::__runtime::Node **)a2;
        }
        if (*(_DWORD *)a4) {
          return this;
        }
      }
      break;
  }
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  unsigned int v13 = *(_DWORD *)(v5 + 12736);
  size_t v14 = *(unsigned int *)(v5 + 12740);
  int v15 = *(char **)(v5 + 12728);
  if (v13 >= v14)
  {
    unint64_t v16 = *(void **)(v5 + 12744);
    unint64_t v17 = (char *)v16[1];
    if (&v15[v14] == v17)
    {
      unint64_t v19 = (unint64_t)&v15[v14 + 1];
      unint64_t v18 = v16[2];
      if (v19 <= v18)
      {
        v16[1] = v19;
        LODWORD(v20) = 1;
LABEL_35:
        *(_DWORD *)(v5 + 12740) = v14 + v20;
        goto LABEL_36;
      }
    }
    else
    {
      unint64_t v18 = v16[2];
    }
    if ((2 * v14) <= 4) {
      uint64_t v20 = 4;
    }
    else {
      uint64_t v20 = (2 * v14);
    }
    size_t v21 = v20 + v14;
    if (!v17 || (unint64_t)&v17[v21] > v18)
    {
      unint64_t v22 = 2 * v16[4];
      if (v22 <= v21 + 1) {
        unint64_t v22 = v21 + 1;
      }
      v16[4] = v22;
      unint64_t v23 = v22 + 8;
      this = (uint64_t *)malloc_type_malloc(v22 + 8, 0xD0263BC5uLL);
      unint64_t v24 = (char *)this + v23;
      *this = v16[3];
      unint64_t v17 = (char *)(this + 1);
      v16[2] = v24;
      v16[3] = this;
    }
    v16[1] = &v17[v21];
    if (v14) {
      this = (uint64_t *)memcpy(v17, *(const void **)(v5 + 12728), v14);
    }
    *(void *)(v5 + 12728) = v17;
    LODWORD(v14) = *(_DWORD *)(v5 + 12740);
    int v15 = v17;
    unsigned int v13 = *(_DWORD *)(v5 + 12736);
    goto LABEL_35;
  }
LABEL_36:
  *(_DWORD *)(v5 + 12736) = v13 + 1;
  v15[v13] = 99;
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  return this;
}

uint64_t *anonymous namespace'::Remangler::mangleConstrainedExistential@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v4 = a2;
  unsigned int v7 = a3 + 1;
  int v8 = *((unsigned __int8 *)a2 + 18);
  unsigned int v9 = (swift::Demangle::__runtime::Node **)a2;
  if ((v8 - 1) >= 2)
  {
    if (v8 != 5 || !*((_DWORD *)a2 + 2))
    {
      *(_DWORD *)a4 = 0;
      *(void *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 16) = 0;
      if (v8 == 2) {
        goto LABEL_12;
      }
      goto LABEL_9;
    }
    unsigned int v9 = *(swift::Demangle::__runtime::Node ***)a2;
  }
  if (*(_DWORD *)a4) {
    return result;
  }
  int v8 = *((unsigned __int8 *)v4 + 18);
  if (v8 == 2)
  {
LABEL_12:
    if (*(_DWORD *)a4) {
      return result;
    }
    goto LABEL_15;
  }
LABEL_9:
  if (v8 == 5 && *((_DWORD *)v4 + 2) >= 2u)
  {
    uint64_t v4 = *(swift::Demangle::__runtime::Node **)v4;
    goto LABEL_12;
  }
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
LABEL_15:
  uint64_t result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "XP", 2uLL, this[1593]);
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  return result;
}

unsigned int *anonymous namespace'::Remangler::mangleConstrainedExistentialRequirementList@<X0>(unsigned int *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v5 = (_anonymous_namespace_::Remangler *)this;
  BOOL v13 = 1;
  uint64_t v7 = *((unsigned __int8 *)a2 + 18);
  switch(v7)
  {
    case 1:
      goto LABEL_6;
    case 5:
      uint64_t v7 = *((unsigned int *)a2 + 2);
      if (v7) {
        goto LABEL_6;
      }
      break;
    case 2:
      uint64_t v7 = 2;
LABEL_6:
      unint64_t v8 = 0;
      unsigned int v9 = a3 + 1;
      while (1)
      {
        unint64_t v10 = *((unsigned __int8 *)a2 + 18);
        unsigned int v11 = v10 - 1;
        if (v10 == 1) {
          goto LABEL_13;
        }
        if (v10 != 5) {
          break;
        }
        if (*((unsigned int *)a2 + 2) <= v8)
        {
LABEL_7:
          *(_DWORD *)a4 = 0;
          *(void *)(a4 + 8) = 0;
          *(_DWORD *)(a4 + 16) = 0;
          goto LABEL_8;
        }
LABEL_16:
        unsigned int v12 = a2;
        if (v11 >= 2) {
          unsigned int v12 = *(swift::Demangle::__runtime::Node **)a2;
        }
        if (*(_DWORD *)a4) {
          return this;
        }
LABEL_8:
        if (v7 == ++v8) {
          goto LABEL_20;
        }
      }
      if (v10 != 2) {
        goto LABEL_7;
      }
      unint64_t v10 = 2;
LABEL_13:
      if (v10 <= v8) {
        goto LABEL_7;
      }
      goto LABEL_16;
  }
LABEL_20:
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  return this;
}

uint64_t *anonymous namespace'::Remangler::mangleGenericPartialSpecialization@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v8 = *((unsigned __int8 *)a2 + 18);
  unsigned int v9 = a2;
  if ((v8 - 1) >= 2)
  {
    if (v8 == 5)
    {
      uint64_t v10 = *(void *)a2;
      unsigned int v9 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_9:
      unsigned int v11 = (swift::Demangle::__runtime::Node *)(v10 + 8 * *((unsigned int *)a2 + 2));
      goto LABEL_15;
    }
    unsigned int v9 = 0;
  }
  switch(v8)
  {
    case 1:
      unsigned int v11 = (swift::Demangle::__runtime::Node *)((char *)a2 + 8);
      goto LABEL_15;
    case 2:
      unsigned int v11 = (swift::Demangle::__runtime::Node *)((char *)a2 + 16);
      goto LABEL_15;
    case 5:
      uint64_t v10 = *(void *)a2;
      goto LABEL_9;
  }
  unsigned int v11 = 0;
LABEL_15:
  while (v9 != v11)
  {
    unsigned int v12 = *(swift::Demangle::__runtime::Node **)v9;
    if (*(_WORD *)(*(void *)v9 + 16) == 94)
    {
      int v19 = *((unsigned __int8 *)v12 + 18);
      if ((v19 - 1) >= 2)
      {
        if (v19 != 5 || !*((_DWORD *)v12 + 2))
        {
          *(_DWORD *)a4 = 0;
          *(void *)(a4 + 8) = 0;
          *(_DWORD *)(a4 + 16) = 0;
          break;
        }
        unsigned int v12 = *(swift::Demangle::__runtime::Node **)v12;
      }
      if (*(_DWORD *)a4) {
        return result;
      }
      break;
    }
    unsigned int v9 = (swift::Demangle::__runtime::Node *)((char *)v9 + 8);
  }
  BOOL v13 = (swift::Demangle::__runtime::Node **)((char *)a2 + 16);
  if (*((_WORD *)a2 + 8) == 87) {
    size_t v14 = "TP";
  }
  else {
    size_t v14 = "Tp";
  }
  uint64_t result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, v14, 2uLL, this[1593]);
  int v16 = *((unsigned __int8 *)a2 + 18);
  unint64_t v17 = (swift::Demangle::__runtime::Node **)a2;
  if ((v16 - 1) >= 2)
  {
    if (v16 == 5)
    {
      uint64_t v18 = *(void *)a2;
      unint64_t v17 = *(swift::Demangle::__runtime::Node ***)a2;
      goto LABEL_33;
    }
    unint64_t v17 = 0;
  }
  if (v16 == 1)
  {
    BOOL v13 = (swift::Demangle::__runtime::Node **)((char *)a2 + 8);
LABEL_36:
    if (v17 != v13) {
      goto LABEL_37;
    }
    goto LABEL_43;
  }
  if (v16 == 2) {
    goto LABEL_36;
  }
  if (v16 != 5)
  {
    BOOL v13 = 0;
    if (v17) {
      goto LABEL_37;
    }
LABEL_43:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
  uint64_t v18 = *(void *)a2;
LABEL_33:
  BOOL v13 = (swift::Demangle::__runtime::Node **)(v18 + 8 * *((unsigned int *)a2 + 2));
  if (v17 == v13) {
    goto LABEL_43;
  }
LABEL_37:
  unsigned int v20 = a3 + 1;
  while (1)
  {
    if (*((_WORD *)*v17 + 8) != 94)
    {
      if (*(_DWORD *)a4) {
        return result;
      }
    }
    if (++v17 == v13) {
      goto LABEL_43;
    }
  }
}

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleGenericProtocolWitnessTable@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v4 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      int v8 = 321;
      int v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  if (*(_DWORD *)a4) {
    return this;
  }
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::__runtime::CharVector::append((char **)v4 + 1591, "WG", 2uLL, *((void **)v4 + 1593));
  int v7 = 0;
  a2 = 0;
  int v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleGenericProtocolWitnessTableInstantiationFunction@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v4 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      int v8 = 321;
      int v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  if (*(_DWORD *)a4) {
    return this;
  }
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::__runtime::CharVector::append((char **)v4 + 1591, "WI", 2uLL, *((void **)v4 + 1593));
  int v7 = 0;
  a2 = 0;
  int v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleResilientProtocolWitnessTable@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v4 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      int v8 = 321;
      int v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  if (*(_DWORD *)a4) {
    return this;
  }
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::__runtime::CharVector::append((char **)v4 + 1591, "Wr", 2uLL, *((void **)v4 + 1593));
  int v7 = 0;
  a2 = 0;
  int v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleGenericTypeMetadataPattern@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v4 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      int v8 = 321;
      int v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  if (*(_DWORD *)a4) {
    return this;
  }
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::__runtime::CharVector::append((char **)v4 + 1591, "MP", 2uLL, *((void **)v4 + 1593));
  int v7 = 0;
  a2 = 0;
  int v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

uint64_t *anonymous namespace'::Remangler::mangleGetter@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = *((unsigned __int8 *)a2 + 18);
  if ((v4 - 1) >= 2)
  {
    if (v4 != 5 || !*((_DWORD *)a2 + 2))
    {
      uint64_t v5 = 0;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  uint64_t v5 = *(void *)a2;
}

uint64_t *anonymous namespace'::Remangler::mangleGlobal@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "$s", 2uLL, this[1593]);
  int v9 = *((unsigned __int8 *)a2 + 18);
  uint64_t v10 = a2;
  if ((v9 - 1) >= 2)
  {
    if (v9 == 5)
    {
      uint64_t v11 = *(void *)a2;
      uint64_t v10 = *(swift::Demangle::__runtime::Node **)a2;
      goto LABEL_9;
    }
    uint64_t v10 = 0;
  }
  switch(v9)
  {
    case 1:
      unsigned int v12 = (swift::Demangle::__runtime::Node *)((char *)a2 + 8);
      if (v10 == (swift::Demangle::__runtime::Node *)((char *)a2 + 8)) {
        goto LABEL_31;
      }
      goto LABEL_16;
    case 2:
      unsigned int v12 = (swift::Demangle::__runtime::Node *)((char *)a2 + 16);
      if (v10 == (swift::Demangle::__runtime::Node *)((char *)a2 + 16)) {
        goto LABEL_31;
      }
      goto LABEL_16;
    case 5:
      uint64_t v11 = *(void *)a2;
LABEL_9:
      unsigned int v12 = (swift::Demangle::__runtime::Node *)(v11 + 8 * *((unsigned int *)a2 + 2));
      if (v10 == v12) {
        goto LABEL_31;
      }
      goto LABEL_16;
  }
  unsigned int v12 = 0;
  if (v10)
  {
LABEL_16:
    char v13 = 0;
    unsigned int v14 = a3 + 1;
    do
    {
      char v15 = 1;
      switch(*(_WORD *)(*(void *)v10 + 16))
      {
        case 0x35:
        case 0x36:
        case 0x37:
        case 0x38:
        case 0x3A:
        case 0x3B:
        case 0x3C:
        case 0x4D:
        case 0x56:
        case 0x57:
        case 0x5B:
        case 0x5C:
        case 0x5D:
        case 0x5F:
        case 0x60:
        case 0x90:
        case 0xA0:
        case 0xA4:
        case 0x100:
        case 0x115:
        case 0x11F:
        case 0x120:
        case 0x13F:
        case 0x148:
        case 0x149:
        case 0x14A:
        case 0x14C:
        case 0x14D:
        case 0x154:
          goto LABEL_18;
        default:
          if (*(_DWORD *)a4) {
            return result;
          }
          if ((v13 & 1) == 0) {
            goto LABEL_30;
          }
          int v16 = v10;
          break;
      }
      while (1)
      {
        int v17 = *((unsigned __int8 *)a2 + 18);
        uint64_t v18 = a2;
        if ((v17 - 1) < 2) {
          goto LABEL_26;
        }
        if (v17 != 5) {
          break;
        }
        uint64_t v18 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_26:
        if (v16 == v18) {
          goto LABEL_30;
        }
LABEL_27:
        int v19 = (swift::Demangle::__runtime::Node *)*((void *)v16 - 1);
        int v16 = (swift::Demangle::__runtime::Node *)((char *)v16 - 8);
        if (*(_DWORD *)a4) {
          return result;
        }
      }
      if (v16) {
        goto LABEL_27;
      }
LABEL_30:
      char v15 = 0;
LABEL_18:
      uint64_t v10 = (swift::Demangle::__runtime::Node *)((char *)v10 + 8);
      char v13 = v15;
    }
    while (v10 != v12);
  }
LABEL_31:
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  return result;
}

uint64_t *anonymous namespace'::Remangler::mangleGlobalGetter@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = *((unsigned __int8 *)a2 + 18);
  if ((v4 - 1) >= 2)
  {
    if (v4 != 5 || !*((_DWORD *)a2 + 2))
    {
      uint64_t v5 = 0;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  uint64_t v5 = *(void *)a2;
}

void anonymous namespace'::Remangler::mangleIdentifier(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, uint64_t a3@<X8>)
{
  long long v9 = 0uLL;
  LOBYTE(v10) = 0;
  {
    unint64_t v6 = *((void *)this + 1585);
    if (v6 > 0xF)
    {
      int v8 = *((_DWORD *)this + 3178) + 16;
      long long v11 = v9;
      uint64_t v12 = v10;
      int v13 = v8;
      std::__hash_table<std::__hash_value_type<swift::Demangle::__runtime::SubstitutionEntry,unsigned int>,std::__unordered_map_hasher<swift::Demangle::__runtime::SubstitutionEntry,std::__hash_value_type<swift::Demangle::__runtime::SubstitutionEntry,unsigned int>,swift::Demangle::__runtime::SubstitutionEntry::Hasher,std::equal_to<swift::Demangle::__runtime::SubstitutionEntry>,true>,std::__unordered_map_equal<swift::Demangle::__runtime::SubstitutionEntry,std::__hash_value_type<swift::Demangle::__runtime::SubstitutionEntry,unsigned int>,std::equal_to<swift::Demangle::__runtime::SubstitutionEntry>,swift::Demangle::__runtime::SubstitutionEntry::Hasher,true>,std::allocator<std::__hash_value_type<swift::Demangle::__runtime::SubstitutionEntry,unsigned int>>>::__emplace_unique_key_args<swift::Demangle::__runtime::SubstitutionEntry,std::pair<swift::Demangle::__runtime::SubstitutionEntry const,unsigned int>>((uint64_t)this + 12688, (uint64_t)&v11, &v11);
    }
    else
    {
      *((void *)this + 1585) = v6 + 1;
      int v7 = (char *)this + 24 * v6 + 12296;
      *(_OWORD *)int v7 = v9;
      v7[16] = v10;
    }
  }
  *(_DWORD *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 16) = 0;
}

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleIVarInitializer@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      int v8 = 321;
      int v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  if (*(_DWORD *)a4) {
    return this;
  }
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::__runtime::CharVector::append((char **)v4 + 1591, "fe", 2uLL, *((void **)v4 + 1593));
  int v7 = 0;
  a2 = 0;
  int v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleIVarDestroyer@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      int v8 = 321;
      int v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  if (*(_DWORD *)a4) {
    return this;
  }
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::__runtime::CharVector::append((char **)v4 + 1591, "fE", 2uLL, *((void **)v4 + 1593));
  int v7 = 0;
  a2 = 0;
  int v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

unsigned int *anonymous namespace'::Remangler::mangleImplEscaping@<X0>(unsigned int *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = this;
  unsigned int v5 = this[3184];
  size_t v6 = this[3185];
  int v7 = (char *)*((void *)this + 1591);
  if (v5 >= v6)
  {
    int v8 = (void *)*((void *)this + 1593);
    long long v9 = (char *)v8[1];
    if (&v7[v6] == v9)
    {
      unint64_t v11 = (unint64_t)&v7[v6 + 1];
      unint64_t v10 = v8[2];
      if (v11 <= v10)
      {
        v8[1] = v11;
        LODWORD(v12) = 1;
LABEL_20:
        v3[3185] = v6 + v12;
        goto LABEL_21;
      }
    }
    else
    {
      unint64_t v10 = v8[2];
    }
    if ((2 * v6) <= 4) {
      uint64_t v12 = 4;
    }
    else {
      uint64_t v12 = (2 * v6);
    }
    size_t v13 = v12 + v6;
    if (v9) {
      BOOL v14 = (unint64_t)&v9[v12 + v6] > v10;
    }
    else {
      BOOL v14 = 1;
    }
    int v7 = (char *)v8[1];
    if (v14)
    {
      unint64_t v15 = 2 * v8[4];
      if (v15 <= v13 + 1) {
        unint64_t v15 = v13 + 1;
      }
      v8[4] = v15;
      unint64_t v16 = v15 + 8;
      this = (unsigned int *)malloc_type_malloc(v15 + 8, 0xD0263BC5uLL);
      int v17 = (char *)this + v16;
      *(void *)this = v8[3];
      int v7 = (char *)(this + 2);
      v8[2] = v17;
      v8[3] = this;
    }
    v8[1] = &v7[v13];
    if (v6) {
      this = (unsigned int *)memcpy(v7, *((const void **)v3 + 1591), v6);
    }
    *((void *)v3 + 1591) = v7;
    LODWORD(v6) = v3[3185];
    unsigned int v5 = v3[3184];
    goto LABEL_20;
  }
LABEL_21:
  v3[3184] = v5 + 1;
  v7[v5] = 101;
  *(_DWORD *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(_DWORD *)(a2 + 16) = 0;
  return this;
}

unsigned int *anonymous namespace'::Remangler::mangleImplConvention@<X0>(unsigned int *this@<X0>, uint64_t **a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3 = this;
  unsigned int v5 = *a2;
  size_t v6 = a2[1];
  if (v6 == (uint64_t *)((char *)&dword_C + 1))
  {
    uint64_t v11 = *v5;
    uint64_t v12 = *(uint64_t *)((char *)v5 + 5);
    if (v11 != 0x5F65656C6C616340 || v12 != 0x64656E776F5F6565) {
      goto LABEL_23;
    }
    char v10 = 120;
    goto LABEL_25;
  }
  if (v6 == (uint64_t *)((char *)&dword_10 + 2))
  {
    uint64_t v14 = *v5;
    uint64_t v15 = v5[1];
    int v16 = *((unsigned __int16 *)v5 + 8);
    if (v14 != 0x5F65656C6C616340 || v15 != 0x65746E6172617567 || v16 != 25701) {
      goto LABEL_23;
    }
    char v10 = 103;
LABEL_25:
    unsigned int v21 = this[3184];
    size_t v22 = this[3185];
    unint64_t v23 = (char *)*((void *)this + 1591);
    if (v21 < v22)
    {
LABEL_42:
      int v20 = 0;
      a2 = 0;
      int v19 = 0;
      v3[3184] = v21 + 1;
      v23[v21] = v10;
      goto LABEL_43;
    }
    unint64_t v24 = (void *)*((void *)this + 1593);
    uint64_t v25 = (char *)v24[1];
    if (&v23[v22] == v25)
    {
      unint64_t v27 = (unint64_t)&v23[v22 + 1];
      unint64_t v26 = v24[2];
      if (v27 <= v26)
      {
        v24[1] = v27;
        LODWORD(v28) = 1;
LABEL_41:
        v3[3185] = v22 + v28;
        goto LABEL_42;
      }
    }
    else
    {
      unint64_t v26 = v24[2];
    }
    if ((2 * v22) <= 4) {
      uint64_t v28 = 4;
    }
    else {
      uint64_t v28 = (2 * v22);
    }
    size_t v29 = v28 + v22;
    if (!v25 || (unint64_t)&v25[v29] > v26)
    {
      unint64_t v30 = 2 * v24[4];
      if (v30 <= v29 + 1) {
        unint64_t v30 = v29 + 1;
      }
      v24[4] = v30;
      unint64_t v31 = v30 + 8;
      this = (unsigned int *)malloc_type_malloc(v30 + 8, 0xD0263BC5uLL);
      int v32 = (char *)this + v31;
      *(void *)this = v24[3];
      uint64_t v25 = (char *)(this + 2);
      void v24[2] = v32;
      v24[3] = this;
    }
    v24[1] = &v25[v29];
    if (v22) {
      this = (unsigned int *)memcpy(v25, *((const void **)v3 + 1591), v22);
    }
    *((void *)v3 + 1591) = v25;
    LODWORD(v22) = v3[3185];
    unint64_t v23 = v25;
    unsigned int v21 = v3[3184];
    goto LABEL_41;
  }
  if (v6 == (uint64_t *)((char *)&dword_C + 3))
  {
    uint64_t v7 = *v5;
    uint64_t v8 = *(uint64_t *)((char *)v5 + 7);
    if (v7 == 0x5F65656C6C616340 && v8 == 0x64656E776F6E755FLL)
    {
      char v10 = 121;
      goto LABEL_25;
    }
  }
LABEL_23:
  int v19 = 1882;
  int v20 = 15;
LABEL_43:
  *(_DWORD *)a3 = v20;
  *(void *)(a3 + 8) = a2;
  *(_DWORD *)(a3 + 16) = v19;
  return this;
}

unsigned int *anonymous namespace'::Remangler::mangleImplDifferentiabilityKind@<X0>(unsigned int *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3 = this;
  uint64_t v5 = *(void *)a2;
  unsigned int v6 = this[3184];
  size_t v7 = this[3185];
  uint64_t v8 = (char *)*((void *)this + 1591);
  if (v6 >= v7)
  {
    long long v9 = (void *)*((void *)this + 1593);
    char v10 = (char *)v9[1];
    if (&v8[v7] == v10)
    {
      unint64_t v12 = (unint64_t)&v8[v7 + 1];
      unint64_t v11 = v9[2];
      if (v12 <= v11)
      {
        v9[1] = v12;
        LODWORD(v13) = 1;
LABEL_20:
        v3[3185] = v7 + v13;
        goto LABEL_21;
      }
    }
    else
    {
      unint64_t v11 = v9[2];
    }
    if ((2 * v7) <= 4) {
      uint64_t v13 = 4;
    }
    else {
      uint64_t v13 = (2 * v7);
    }
    size_t v14 = v13 + v7;
    if (v10) {
      BOOL v15 = (unint64_t)&v10[v13 + v7] > v11;
    }
    else {
      BOOL v15 = 1;
    }
    uint64_t v8 = (char *)v9[1];
    if (v15)
    {
      unint64_t v16 = 2 * v9[4];
      if (v16 <= v14 + 1) {
        unint64_t v16 = v14 + 1;
      }
      v9[4] = v16;
      unint64_t v17 = v16 + 8;
      this = (unsigned int *)malloc_type_malloc(v16 + 8, 0xD0263BC5uLL);
      uint64_t v18 = (char *)this + v17;
      *(void *)this = v9[3];
      uint64_t v8 = (char *)(this + 2);
      v9[2] = v18;
      v9[3] = this;
    }
    v9[1] = &v8[v14];
    if (v7) {
      this = (unsigned int *)memcpy(v8, *((const void **)v3 + 1591), v7);
    }
    *((void *)v3 + 1591) = v8;
    LODWORD(v7) = v3[3185];
    unsigned int v6 = v3[3184];
    goto LABEL_20;
  }
LABEL_21:
  v3[3184] = v6 + 1;
  v8[v6] = v5;
  *(_DWORD *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 16) = 0;
  return this;
}

unsigned int *anonymous namespace'::Remangler::mangleImplErasedIsolation@<X0>(unsigned int *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = this;
  unsigned int v5 = this[3184];
  size_t v6 = this[3185];
  size_t v7 = (char *)*((void *)this + 1591);
  if (v5 >= v6)
  {
    uint64_t v8 = (void *)*((void *)this + 1593);
    long long v9 = (char *)v8[1];
    if (&v7[v6] == v9)
    {
      unint64_t v11 = (unint64_t)&v7[v6 + 1];
      unint64_t v10 = v8[2];
      if (v11 <= v10)
      {
        v8[1] = v11;
        LODWORD(v12) = 1;
LABEL_20:
        v3[3185] = v6 + v12;
        goto LABEL_21;
      }
    }
    else
    {
      unint64_t v10 = v8[2];
    }
    if ((2 * v6) <= 4) {
      uint64_t v12 = 4;
    }
    else {
      uint64_t v12 = (2 * v6);
    }
    size_t v13 = v12 + v6;
    if (v9) {
      BOOL v14 = (unint64_t)&v9[v12 + v6] > v10;
    }
    else {
      BOOL v14 = 1;
    }
    size_t v7 = (char *)v8[1];
    if (v14)
    {
      unint64_t v15 = 2 * v8[4];
      if (v15 <= v13 + 1) {
        unint64_t v15 = v13 + 1;
      }
      v8[4] = v15;
      unint64_t v16 = v15 + 8;
      this = (unsigned int *)malloc_type_malloc(v15 + 8, 0xD0263BC5uLL);
      unint64_t v17 = (char *)this + v16;
      *(void *)this = v8[3];
      size_t v7 = (char *)(this + 2);
      v8[2] = v17;
      v8[3] = this;
    }
    v8[1] = &v7[v13];
    if (v6) {
      this = (unsigned int *)memcpy(v7, *((const void **)v3 + 1591), v6);
    }
    *((void *)v3 + 1591) = v7;
    LODWORD(v6) = v3[3185];
    unsigned int v5 = v3[3184];
    goto LABEL_20;
  }
LABEL_21:
  v3[3184] = v5 + 1;
  v7[v5] = 65;
  *(_DWORD *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(_DWORD *)(a2 + 16) = 0;
  return this;
}

unsigned int *anonymous namespace'::Remangler::mangleImplSendingResult@<X0>(unsigned int *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = this;
  unsigned int v5 = this[3184];
  size_t v6 = this[3185];
  size_t v7 = (char *)*((void *)this + 1591);
  if (v5 >= v6)
  {
    uint64_t v8 = (void *)*((void *)this + 1593);
    long long v9 = (char *)v8[1];
    if (&v7[v6] == v9)
    {
      unint64_t v11 = (unint64_t)&v7[v6 + 1];
      unint64_t v10 = v8[2];
      if (v11 <= v10)
      {
        v8[1] = v11;
        LODWORD(v12) = 1;
LABEL_20:
        v3[3185] = v6 + v12;
        goto LABEL_21;
      }
    }
    else
    {
      unint64_t v10 = v8[2];
    }
    if ((2 * v6) <= 4) {
      uint64_t v12 = 4;
    }
    else {
      uint64_t v12 = (2 * v6);
    }
    size_t v13 = v12 + v6;
    if (v9) {
      BOOL v14 = (unint64_t)&v9[v12 + v6] > v10;
    }
    else {
      BOOL v14 = 1;
    }
    size_t v7 = (char *)v8[1];
    if (v14)
    {
      unint64_t v15 = 2 * v8[4];
      if (v15 <= v13 + 1) {
        unint64_t v15 = v13 + 1;
      }
      v8[4] = v15;
      unint64_t v16 = v15 + 8;
      this = (unsigned int *)malloc_type_malloc(v15 + 8, 0xD0263BC5uLL);
      unint64_t v17 = (char *)this + v16;
      *(void *)this = v8[3];
      size_t v7 = (char *)(this + 2);
      v8[2] = v17;
      v8[3] = this;
    }
    v8[1] = &v7[v13];
    if (v6) {
      this = (unsigned int *)memcpy(v7, *((const void **)v3 + 1591), v6);
    }
    *((void *)v3 + 1591) = v7;
    LODWORD(v6) = v3[3185];
    unsigned int v5 = v3[3184];
    goto LABEL_20;
  }
LABEL_21:
  v3[3184] = v5 + 1;
  v7[v5] = 84;
  *(_DWORD *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(_DWORD *)(a2 + 16) = 0;
  return this;
}

unsigned int *anonymous namespace'::Remangler::mangleImplParameterResultDifferentiability@<X0>(unsigned int *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, uint64_t a3@<X8>)
{
  if (*((unsigned char *)a2 + 18) != 3)
  {
    int v6 = 1890;
    int v7 = 1;
    goto LABEL_29;
  }
  uint64_t v4 = *((void *)a2 + 1);
  if (!v4)
  {
    int v7 = 0;
    a2 = 0;
    int v6 = 0;
    goto LABEL_29;
  }
  if (v4 == 13 && **(void **)a2 == 0x76697265446F6E40 && *(void *)(*(void *)a2 + 5) == 0x6576697461766972)
  {
    uint64_t v8 = this;
    unsigned int v9 = this[3184];
    size_t v10 = this[3185];
    unint64_t v11 = (char *)*((void *)this + 1591);
    if (v9 < v10)
    {
LABEL_28:
      int v7 = 0;
      a2 = 0;
      int v6 = 0;
      v8[3184] = v9 + 1;
      v11[v9] = 119;
      goto LABEL_29;
    }
    uint64_t v12 = (void *)*((void *)this + 1593);
    size_t v13 = (char *)v12[1];
    if (&v11[v10] == v13)
    {
      unint64_t v15 = (unint64_t)&v11[v10 + 1];
      unint64_t v14 = v12[2];
      if (v15 <= v14)
      {
        v12[1] = v15;
        LODWORD(v16) = 1;
LABEL_27:
        v8[3185] = v10 + v16;
        goto LABEL_28;
      }
    }
    else
    {
      unint64_t v14 = v12[2];
    }
    if ((2 * v10) <= 4) {
      uint64_t v16 = 4;
    }
    else {
      uint64_t v16 = (2 * v10);
    }
    size_t v17 = v16 + v10;
    if (!v13 || (unint64_t)&v13[v17] > v14)
    {
      unint64_t v18 = 2 * v12[4];
      if (v18 <= v17 + 1) {
        unint64_t v18 = v17 + 1;
      }
      v12[4] = v18;
      unint64_t v19 = v18 + 8;
      this = (unsigned int *)malloc_type_malloc(v18 + 8, 0xD0263BC5uLL);
      int v20 = (char *)this + v19;
      *(void *)this = v12[3];
      size_t v13 = (char *)(this + 2);
      v12[2] = v20;
      v12[3] = this;
    }
    v12[1] = &v13[v17];
    if (v10) {
      this = (unsigned int *)memcpy(v13, *((const void **)v8 + 1591), v10);
    }
    *((void *)v8 + 1591) = v13;
    LODWORD(v10) = v8[3185];
    unint64_t v11 = v13;
    unsigned int v9 = v8[3184];
    goto LABEL_27;
  }
  int v6 = 1898;
  int v7 = 16;
LABEL_29:
  *(_DWORD *)a3 = v7;
  *(void *)(a3 + 8) = a2;
  *(_DWORD *)(a3 + 16) = v6;
  return this;
}

unsigned int *anonymous namespace'::Remangler::mangleImplParameterSending@<X0>(unsigned int *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, uint64_t a3@<X8>)
{
  if (*((unsigned char *)a2 + 18) != 3)
  {
    int v5 = 1906;
    int v6 = 1;
    goto LABEL_9;
  }
  if (*((void *)a2 + 1) == 7 && **(_DWORD **)a2 == 1684956531 && *(_DWORD *)(*(void *)a2 + 3) == 1735289188)
  {
    int v7 = this;
    unsigned int v8 = this[3184];
    size_t v9 = this[3185];
    size_t v10 = (char *)*((void *)this + 1591);
    if (v8 < v9)
    {
LABEL_27:
      int v6 = 0;
      a2 = 0;
      int v5 = 0;
      v7[3184] = v8 + 1;
      v10[v8] = 84;
      goto LABEL_9;
    }
    unint64_t v11 = (void *)*((void *)this + 1593);
    uint64_t v12 = (char *)v11[1];
    if (&v10[v9] == v12)
    {
      unint64_t v14 = (unint64_t)&v10[v9 + 1];
      unint64_t v13 = v11[2];
      if (v14 <= v13)
      {
        v11[1] = v14;
        LODWORD(v15) = 1;
LABEL_26:
        v7[3185] = v9 + v15;
        goto LABEL_27;
      }
    }
    else
    {
      unint64_t v13 = v11[2];
    }
    if ((2 * v9) <= 4) {
      uint64_t v15 = 4;
    }
    else {
      uint64_t v15 = (2 * v9);
    }
    size_t v16 = v15 + v9;
    if (!v12 || (unint64_t)&v12[v16] > v13)
    {
      unint64_t v17 = 2 * v11[4];
      if (v17 <= v16 + 1) {
        unint64_t v17 = v16 + 1;
      }
      v11[4] = v17;
      unint64_t v18 = v17 + 8;
      this = (unsigned int *)malloc_type_malloc(v17 + 8, 0xD0263BC5uLL);
      unint64_t v19 = (char *)this + v18;
      *(void *)this = v11[3];
      uint64_t v12 = (char *)(this + 2);
      v11[2] = v19;
      v11[3] = this;
    }
    v11[1] = &v12[v16];
    if (v9) {
      this = (unsigned int *)memcpy(v12, *((const void **)v7 + 1591), v9);
    }
    *((void *)v7 + 1591) = v12;
    LODWORD(v9) = v7[3185];
    size_t v10 = v12;
    unsigned int v8 = v7[3184];
    goto LABEL_26;
  }
  int v5 = 1910;
  int v6 = 19;
LABEL_9:
  *(_DWORD *)a3 = v6;
  *(void *)(a3 + 8) = a2;
  *(_DWORD *)(a3 + 16) = v5;
  return this;
}

char *anonymous namespace'::Remangler::mangleImplFunctionConvention@<X0>(char *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3 = a2;
  uint64_t v4 = (unsigned int *)this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  int v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 != 5 || !*((_DWORD *)a2 + 2)) {
      goto LABEL_47;
    }
    int v7 = *(swift::Demangle::__runtime::Node **)a2;
  }
  if (*(unsigned char *)(*(void *)v7 + 18) != 3)
  {
LABEL_47:
    int v11 = 1936;
    int v12 = 1;
    goto LABEL_48;
  }
  unsigned int v8 = a2;
  if ((v6 - 1) >= 2) {
    unsigned int v8 = *(swift::Demangle::__runtime::Node **)a2;
  }
  size_t v9 = *(uint64_t **)v8;
  uint64_t v10 = *(void *)(*(void *)v8 + 8);
  int v11 = 1936;
  int v12 = 1;
  uint64_t v13 = *v9;
  switch(v10)
  {
    case 1:
      if (*(unsigned char *)v13 == 99)
      {
        char v14 = 67;
        goto LABEL_17;
      }
      int v11 = 1936;
      break;
    case 5:
      if (*(_DWORD *)v13 != 1668246626 || *(unsigned char *)(v13 + 4) != 107) {
        goto LABEL_47;
      }
      char v14 = 66;
LABEL_17:
      size_t v16 = a2;
      if (v6 != 2)
      {
        if (v6 != 5 || *((_DWORD *)a2 + 2) < 2u) {
          goto LABEL_51;
        }
        size_t v16 = *(swift::Demangle::__runtime::Node **)a2;
      }
      if (*(_WORD *)(*((void *)v16 + 1) + 16) != 23) {
        goto LABEL_51;
      }
      unint64_t v17 = (const void **)(this + 12728);
      unsigned int v18 = *((_DWORD *)this + 3184);
      size_t v19 = *((unsigned int *)this + 3185);
      int v20 = (char *)*((void *)this + 1591);
      if (v18 < v19) {
        goto LABEL_83;
      }
      unsigned int v21 = (void *)*((void *)this + 1593);
      size_t v22 = (char *)v21[1];
      if (&v20[v19] == v22)
      {
        unint64_t v40 = (unint64_t)&v20[v19 + 1];
        unint64_t v23 = v21[2];
        if (v40 <= v23)
        {
          v21[1] = v40;
          LODWORD(v41) = 1;
          goto LABEL_82;
        }
      }
      else
      {
        unint64_t v23 = v21[2];
      }
      if ((2 * v19) <= 4) {
        uint64_t v41 = 4;
      }
      else {
        uint64_t v41 = (2 * v19);
      }
      size_t v42 = v41 + v19;
      if (!v22 || (unint64_t)&v22[v42] > v23)
      {
        unint64_t v43 = 2 * v21[4];
        if (v43 <= v42 + 1) {
          unint64_t v43 = v42 + 1;
        }
        v21[4] = v43;
        unint64_t v44 = v43 + 8;
        unint64_t v45 = malloc_type_malloc(v43 + 8, 0xD0263BC5uLL);
        unsigned int v46 = (char *)v45 + v44;
        void *v45 = v21[3];
        size_t v22 = (char *)(v45 + 1);
        v21[2] = v46;
        v21[3] = v45;
      }
      v21[1] = &v22[v42];
      if (v19) {
        memcpy(v22, *v17, v19);
      }
      *((void *)v4 + 1591) = v22;
      LODWORD(v19) = v4[3185];
      int v20 = v22;
      unsigned int v18 = v4[3184];
LABEL_82:
      v4[3185] = v19 + v41;
LABEL_83:
      v4[3184] = v18 + 1;
      v20[v18] = 122;
      unsigned int v47 = v4[3184];
      size_t v48 = v4[3185];
      unint64_t v49 = (char *)*((void *)v4 + 1591);
      if (v47 < v48) {
        goto LABEL_100;
      }
      unint64_t v50 = (void *)*((void *)v4 + 1593);
      unint64_t v51 = (char *)v50[1];
      if (&v49[v48] == v51)
      {
        unint64_t v53 = (unint64_t)&v49[v48 + 1];
        unint64_t v52 = v50[2];
        if (v53 <= v52)
        {
          v50[1] = v53;
          LODWORD(v54) = 1;
          goto LABEL_99;
        }
      }
      else
      {
        unint64_t v52 = v50[2];
      }
      if ((2 * v48) <= 4) {
        uint64_t v54 = 4;
      }
      else {
        uint64_t v54 = (2 * v48);
      }
      size_t v55 = v54 + v48;
      if (!v51 || (unint64_t)&v51[v55] > v52)
      {
        unint64_t v56 = 2 * v50[4];
        if (v56 <= v55 + 1) {
          unint64_t v56 = v55 + 1;
        }
        v50[4] = v56;
        unint64_t v57 = v56 + 8;
        unsigned int v58 = malloc_type_malloc(v56 + 8, 0xD0263BC5uLL);
        size_t v59 = (char *)v58 + v57;
        *unsigned int v58 = v50[3];
        unint64_t v51 = (char *)(v58 + 1);
        v50[2] = v59;
        v50[3] = v58;
      }
      v50[1] = &v51[v55];
      if (v48) {
        memcpy(v51, *v17, v48);
      }
      *((void *)v4 + 1591) = v51;
      LODWORD(v48) = v4[3185];
      unint64_t v49 = v51;
      unsigned int v47 = v4[3184];
LABEL_99:
      v4[3185] = v48 + v54;
LABEL_100:
      v4[3184] = v47 + 1;
      v49[v47] = v14;
      int v60 = *((unsigned __int8 *)v3 + 18);
      if (v60 == 2) {
        goto LABEL_104;
      }
      if (v60 == 5 && *((_DWORD *)v3 + 2) >= 2u)
      {
        uint64_t v3 = *(swift::Demangle::__runtime::Node **)v3;
LABEL_104:
        uint64_t v61 = *((void *)v3 + 1);
      }
      else
      {
        uint64_t v61 = 0;
      }
      swift::Demangle::__runtime::CharVector::append(v4 + 3182, *(void *)(v61 + 8), *((swift::Demangle::__runtime::NodeFactory **)v4 + 1593));
      this = (char *)swift::Demangle::__runtime::CharVector::append((char **)v4 + 1591, *(const void **)v61, *(void *)(v61 + 8), *((void **)v4 + 1593));
      int v12 = 0;
      uint64_t v3 = 0;
      int v11 = 0;
      break;
    case 6:
      if (*(_DWORD *)v13 != 1752458605 || *(_WORD *)(v13 + 4) != 25711) {
        goto LABEL_47;
      }
      char v14 = 77;
      goto LABEL_51;
    case 7:
      if (*(_DWORD *)v13 != 1936682083 || *(_DWORD *)(v13 + 3) != 1701999987) {
        goto LABEL_47;
      }
      char v14 = 75;
      goto LABEL_51;
    case 11:
      if (*(void *)v13 != 0x74656D5F636A626FLL || *(void *)(v13 + 3) != 0x646F6874656D5F63) {
        goto LABEL_47;
      }
      char v14 = 79;
      goto LABEL_51;
    case 14:
      if (*(void *)v13 != 0x5F7373656E746977 || *(void *)(v13 + 6) != 0x646F6874656D5F73) {
        goto LABEL_47;
      }
      char v14 = 87;
LABEL_51:
      unsigned int v28 = *((_DWORD *)this + 3184);
      size_t v29 = *((unsigned int *)this + 3185);
      unint64_t v30 = (char *)*((void *)this + 1591);
      if (v28 < v29) {
        goto LABEL_67;
      }
      unint64_t v31 = (void *)*((void *)this + 1593);
      int v32 = (char *)v31[1];
      if (&v30[v29] == v32)
      {
        unint64_t v34 = (unint64_t)&v30[v29 + 1];
        unint64_t v33 = v31[2];
        if (v34 <= v33)
        {
          v31[1] = v34;
          LODWORD(v35) = 1;
          goto LABEL_66;
        }
      }
      else
      {
        unint64_t v33 = v31[2];
      }
      if ((2 * v29) <= 4) {
        uint64_t v35 = 4;
      }
      else {
        uint64_t v35 = (2 * v29);
      }
      size_t v36 = v35 + v29;
      if (!v32 || (unint64_t)&v32[v36] > v33)
      {
        unint64_t v37 = 2 * v31[4];
        if (v37 <= v36 + 1) {
          unint64_t v37 = v36 + 1;
        }
        v31[4] = v37;
        unint64_t v38 = v37 + 8;
        this = (char *)malloc_type_malloc(v37 + 8, 0xD0263BC5uLL);
        unint64_t v39 = &this[v38];
        *(void *)this = v31[3];
        int v32 = this + 8;
        v31[2] = v39;
        v31[3] = this;
      }
      v31[1] = &v32[v36];
      if (v29) {
        this = (char *)memcpy(v32, *((const void **)v4 + 1591), v29);
      }
      *((void *)v4 + 1591) = v32;
      LODWORD(v29) = v4[3185];
      unint64_t v30 = v32;
      unsigned int v28 = v4[3184];
LABEL_66:
      v4[3185] = v29 + v35;
LABEL_67:
      int v12 = 0;
      uint64_t v3 = 0;
      int v11 = 0;
      v4[3184] = v28 + 1;
      v30[v28] = v14;
      break;
    default:
      break;
  }
LABEL_48:
  *(_DWORD *)a3 = v12;
  *(void *)(a3 + 8) = v3;
  *(_DWORD *)(a3 + 16) = v11;
  return this;
}

uint64_t *anonymous namespace'::Remangler::mangleImplFunctionType@<X0>(uint64_t *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v4 = a2;
  uint64_t v5 = (uint64_t)this;
  int v7 = *((unsigned __int8 *)a2 + 18);
  unsigned int v8 = a2;
  if ((v7 - 1) >= 2)
  {
    if (v7 == 5)
    {
      uint64_t v9 = *(void *)a2;
      unsigned int v8 = *(swift::Demangle::__runtime::Node **)a2;
      goto LABEL_9;
    }
    unsigned int v8 = 0;
  }
  switch(v7)
  {
    case 1:
      uint64_t v10 = (swift::Demangle::__runtime::Node *)((char *)a2 + 8);
      if (v8 == (swift::Demangle::__runtime::Node *)((char *)a2 + 8)) {
        goto LABEL_30;
      }
      break;
    case 2:
      uint64_t v10 = (swift::Demangle::__runtime::Node *)((char *)a2 + 16);
      if (v8 == (swift::Demangle::__runtime::Node *)((char *)a2 + 16)) {
        goto LABEL_30;
      }
      break;
    case 5:
      uint64_t v9 = *(void *)a2;
LABEL_9:
      uint64_t v10 = (swift::Demangle::__runtime::Node *)(v9 + 8 * *((unsigned int *)a2 + 2));
      if (v8 != v10) {
        break;
      }
LABEL_30:
      unint64_t v26 = (const char *)&unk_BFEA3;
      char v27 = 1;
      char v28 = 1;
      goto LABEL_31;
    default:
      uint64_t v10 = 0;
      if (!v8) {
        goto LABEL_30;
      }
      break;
  }
  int v11 = 0;
  int v12 = 0;
  uint64_t v13 = 0;
  unsigned int v14 = a3 + 1;
  v289 = (const char *)&unk_BFEA3;
  while (2)
  {
    unint64_t v17 = v11;
    size_t v16 = *(swift::Demangle::__runtime::Node **)v8;
    int v11 = *(swift::Demangle::__runtime::Node **)v8;
    switch(*(_WORD *)(*(void *)v8 + 16))
    {
      case '+':
        goto LABEL_13;
      case '.':
        v289 = "P";
        int v11 = *(swift::Demangle::__runtime::Node **)v8;
        goto LABEL_13;
      case 't':
        int v11 = v17;
        uint64_t v13 = *(swift::Demangle::__runtime::Node **)v8;
        goto LABEL_13;
      case 'v':
      case 'x':
      case 'y':
      case 'z':
        int v18 = *((unsigned __int8 *)v16 + 18);
        uint64_t v15 = 1;
        if (v18 == 2) {
          goto LABEL_12;
        }
        if (v18 != 5)
        {
          int v50 = 1984;
          goto LABEL_475;
        }
        uint64_t v19 = *((unsigned int *)v16 + 2);
        if ((v19 - 2) > 2)
        {
          int v50 = 1984;
          LODWORD(v15) = 1;
          goto LABEL_475;
        }
        uint64_t v15 = v19 - 1;
        size_t v16 = *(swift::Demangle::__runtime::Node **)v16;
LABEL_12:
        int v11 = v17;
        if (*(_DWORD *)a4) {
          return this;
        }
LABEL_13:
        unsigned int v8 = (swift::Demangle::__runtime::Node *)((char *)v8 + 8);
        if (v8 != v10) {
          continue;
        }
        if (v11)
        {
          if (*(_DWORD *)a4) {
            return this;
          }
        }
        BOOL v292 = v13 == 0;
        if (!v13) {
          goto LABEL_528;
        }
        unsigned int v20 = *(_DWORD *)(v5 + 12736);
        size_t v21 = *(unsigned int *)(v5 + 12740);
        size_t v22 = *(char **)(v5 + 12728);
        if (v20 < v21) {
          goto LABEL_501;
        }
        unint64_t v23 = *(void **)(v5 + 12744);
        unint64_t v24 = (char *)v23[1];
        if (&v22[v21] == v24)
        {
          unint64_t v249 = (unint64_t)&v22[v21 + 1];
          unint64_t v25 = v23[2];
          if (v249 <= v25)
          {
            v23[1] = v249;
            int v256 = 1;
            goto LABEL_500;
          }
        }
        else
        {
          unint64_t v25 = v23[2];
        }
        LODWORD(v250) = 2 * v21;
        if ((2 * v21) <= 4) {
          uint64_t v250 = 4;
        }
        else {
          uint64_t v250 = v250;
        }
        int v288 = v250;
        size_t v251 = v250 + v21;
        if (!v24 || (unint64_t)&v24[v251] > v25)
        {
          unint64_t v252 = 2 * v23[4];
          if (v252 <= v251 + 1) {
            unint64_t v252 = v251 + 1;
          }
          v23[4] = v252;
          unint64_t v253 = v252 + 8;
          v254 = malloc_type_malloc(v252 + 8, 0xD0263BC5uLL);
          v255 = (char *)v254 + v253;
          void *v254 = v23[3];
          unint64_t v24 = (char *)(v254 + 1);
          v23[2] = v255;
          v23[3] = v254;
        }
        v23[1] = &v24[v251];
        if (v21) {
          memcpy(v24, *(const void **)(v5 + 12728), v21);
        }
        *(void *)(v5 + 12728) = v24;
        LODWORD(v21) = *(_DWORD *)(v5 + 12740);
        size_t v22 = v24;
        unsigned int v20 = *(_DWORD *)(v5 + 12736);
        int v256 = v288;
LABEL_500:
        *(_DWORD *)(v5 + 12740) = v21 + v256;
LABEL_501:
        *(_DWORD *)(v5 + 12736) = v20 + 1;
        v22[v20] = 121;
        int v257 = *((unsigned __int8 *)v13 + 18);
        v258 = v13;
        if ((v257 - 1) < 2) {
          goto LABEL_505;
        }
        if (v257 == 5 && *((_DWORD *)v13 + 2))
        {
          v258 = *(swift::Demangle::__runtime::Node **)v13;
LABEL_505:
          uint64_t v259 = *(void *)v258;
        }
        else
        {
          uint64_t v259 = 0;
        }
        int v260 = *(unsigned __int8 *)(v259 + 18);
        v261 = (swift::Demangle::__runtime::Node **)v259;
        if ((v260 - 1) < 2) {
          goto LABEL_511;
        }
        if (v260 == 5)
        {
          v262 = *(swift::Demangle::__runtime::Node **)v259;
          v261 = *(swift::Demangle::__runtime::Node ***)v259;
LABEL_515:
          v263 = (swift::Demangle::__runtime::Node **)((char *)v262 + 8 * *(unsigned int *)(v259 + 8));
          goto LABEL_519;
        }
        v261 = 0;
LABEL_511:
        switch(v260)
        {
          case 1:
            v263 = (swift::Demangle::__runtime::Node **)(v259 + 8);
            break;
          case 2:
            v263 = (swift::Demangle::__runtime::Node **)(v259 + 16);
            break;
          case 5:
            v262 = *(swift::Demangle::__runtime::Node **)v259;
            goto LABEL_515;
          default:
            v263 = 0;
            break;
        }
LABEL_519:
        if (v261 != v263)
        {
          do
          {
            if (*(_DWORD *)a4) {
              return this;
            }
            ++v261;
          }
          while (v261 != v263);
          int v257 = *((unsigned __int8 *)v13 + 18);
        }
        *(_DWORD *)a4 = 0;
        *(void *)(a4 + 8) = 0;
        *(_DWORD *)(a4 + 16) = 0;
        if (v257 == 2) {
          goto LABEL_527;
        }
        if (v257 == 5 && *((_DWORD *)v13 + 2) >= 2u)
        {
          uint64_t v13 = *(swift::Demangle::__runtime::Node **)v13;
LABEL_527:
          if (*(_DWORD *)a4) {
            return this;
          }
        }
LABEL_528:
        if (!v12)
        {
          char v27 = 1;
LABEL_535:
          unint64_t v26 = v289;
          goto LABEL_590;
        }
        int v264 = *((unsigned __int8 *)v12 + 18);
        v265 = (swift::Demangle::__runtime::Node **)v12;
        if ((v264 - 1) < 2) {
          goto LABEL_533;
        }
        if (v264 == 5 && *((_DWORD *)v12 + 2))
        {
          v265 = *(swift::Demangle::__runtime::Node ***)v12;
LABEL_533:
          v266 = *v265;
        }
        else
        {
          v266 = 0;
        }
        if (*(_DWORD *)a4) {
          return this;
        }
        unsigned int v267 = *(_DWORD *)(v5 + 12736);
        size_t v268 = *(unsigned int *)(v5 + 12740);
        v269 = *(char **)(v5 + 12728);
        if (v267 < v268) {
          goto LABEL_563;
        }
        v270 = *(void **)(v5 + 12744);
        v271 = (char *)v270[1];
        if (&v269[v268] == v271)
        {
          unint64_t v273 = (unint64_t)&v269[v268 + 1];
          unint64_t v272 = v270[2];
          if (v273 <= v272)
          {
            v270[1] = v273;
            LODWORD(v274) = 1;
            goto LABEL_562;
          }
        }
        else
        {
          unint64_t v272 = v270[2];
        }
        if ((2 * v268) <= 4) {
          uint64_t v274 = 4;
        }
        else {
          uint64_t v274 = (2 * v268);
        }
        size_t v275 = v274 + v268;
        if (!v271 || (unint64_t)&v271[v275] > v272)
        {
          unint64_t v276 = 2 * v270[4];
          if (v276 <= v275 + 1) {
            unint64_t v276 = v275 + 1;
          }
          v270[4] = v276;
          unint64_t v277 = v276 + 8;
          v278 = malloc_type_malloc(v276 + 8, 0xD0263BC5uLL);
          v279 = (char *)v278 + v277;
          void *v278 = v270[3];
          v271 = (char *)(v278 + 1);
          v270[2] = v279;
          v270[3] = v278;
        }
        v270[1] = &v271[v275];
        if (v268) {
          memcpy(v271, *(const void **)(v5 + 12728), v268);
        }
        *(void *)(v5 + 12728) = v271;
        LODWORD(v268) = *(_DWORD *)(v5 + 12740);
        v269 = v271;
        unsigned int v267 = *(_DWORD *)(v5 + 12736);
LABEL_562:
        *(_DWORD *)(v5 + 12740) = v268 + v274;
LABEL_563:
        *(_DWORD *)(v5 + 12736) = v267 + 1;
        v269[v267] = 121;
        int v280 = *((unsigned __int8 *)v12 + 18);
        v281 = v12;
        if (v280 == 2) {
          goto LABEL_567;
        }
        if (v280 == 5 && *((_DWORD *)v12 + 2) >= 2u)
        {
          v281 = *(swift::Demangle::__runtime::Node **)v12;
LABEL_567:
          uint64_t v282 = *((void *)v281 + 1);
        }
        else
        {
          uint64_t v282 = 0;
        }
        int v283 = *(unsigned __int8 *)(v282 + 18);
        v284 = (swift::Demangle::__runtime::Node **)v282;
        if ((v283 - 1) < 2) {
          goto LABEL_573;
        }
        if (v283 == 5)
        {
          v285 = *(swift::Demangle::__runtime::Node **)v282;
          v284 = *(swift::Demangle::__runtime::Node ***)v282;
LABEL_577:
          v286 = (swift::Demangle::__runtime::Node **)((char *)v285 + 8 * *(unsigned int *)(v282 + 8));
          goto LABEL_581;
        }
        v284 = 0;
LABEL_573:
        switch(v283)
        {
          case 1:
            v286 = (swift::Demangle::__runtime::Node **)(v282 + 8);
            break;
          case 2:
            v286 = (swift::Demangle::__runtime::Node **)(v282 + 16);
            break;
          case 5:
            v285 = *(swift::Demangle::__runtime::Node **)v282;
            goto LABEL_577;
          default:
            v286 = 0;
            break;
        }
LABEL_581:
        if (v284 != v286)
        {
          do
          {
            if (*(_DWORD *)a4) {
              return this;
            }
            ++v284;
          }
          while (v284 != v286);
          int v280 = *((unsigned __int8 *)v12 + 18);
        }
        unint64_t v26 = v289;
        *(_DWORD *)a4 = 0;
        *(void *)(a4 + 8) = 0;
        *(_DWORD *)(a4 + 16) = 0;
        if (v280 == 5 && *((_DWORD *)v12 + 2) >= 3u)
        {
          uint64_t v287 = *(void *)(*(void *)v12 + 16);
          if (*(_WORD *)(v287 + 16) == 235) {
          else
          }
          if (*(_DWORD *)a4) {
            return this;
          }
          char v27 = 0;
          goto LABEL_535;
        }
        char v27 = 0;
LABEL_590:
        char v28 = v292;
        break;
      case 'w':
        int v11 = v17;
        int v12 = *(swift::Demangle::__runtime::Node **)v8;
        goto LABEL_13;
      default:
        int v11 = v17;
        goto LABEL_13;
    }
    break;
  }
LABEL_31:
  v293 = (const void **)(v5 + 12728);
  unsigned int v29 = *(_DWORD *)(v5 + 12736);
  size_t v30 = *(unsigned int *)(v5 + 12740);
  unint64_t v31 = *(char **)(v5 + 12728);
  if (v29 < v30) {
    goto LABEL_51;
  }
  int v32 = *(void **)(v5 + 12744);
  unint64_t v33 = (char *)v32[1];
  if (&v31[v30] != v33)
  {
    unint64_t v34 = v32[2];
LABEL_39:
    v290 = v26;
    char v36 = v28;
    if ((2 * v30) <= 4) {
      uint64_t v37 = 4;
    }
    else {
      uint64_t v37 = (2 * v30);
    }
    size_t v38 = v37 + v30;
    if (!v33 || (unint64_t)&v33[v38] > v34)
    {
      unint64_t v39 = 2 * v32[4];
      if (v39 <= v38 + 1) {
        unint64_t v39 = v38 + 1;
      }
      v32[4] = v39;
      unint64_t v40 = v39 + 8;
      uint64_t v41 = malloc_type_malloc(v39 + 8, 0xD0263BC5uLL);
      size_t v42 = (char *)v41 + v40;
      *uint64_t v41 = v32[3];
      unint64_t v33 = (char *)(v41 + 1);
      v32[2] = v42;
      v32[3] = v41;
    }
    v32[1] = &v33[v38];
    if (v30) {
      memcpy(v33, *v293, v30);
    }
    *(void *)(v5 + 12728) = v33;
    LODWORD(v30) = *(_DWORD *)(v5 + 12740);
    unint64_t v31 = v33;
    unsigned int v29 = *(_DWORD *)(v5 + 12736);
    char v28 = v36;
    unint64_t v26 = v290;
    goto LABEL_50;
  }
  unint64_t v35 = (unint64_t)&v31[v30 + 1];
  unint64_t v34 = v32[2];
  if (v35 > v34) {
    goto LABEL_39;
  }
  v32[1] = v35;
  LODWORD(v37) = 1;
LABEL_50:
  *(_DWORD *)(v5 + 12740) = v30 + v37;
LABEL_51:
  *(_DWORD *)(v5 + 12736) = v29 + 1;
  v31[v29] = 73;
  if (v27)
  {
    if (v28) {
      goto LABEL_53;
    }
LABEL_74:
    unsigned int v60 = *(_DWORD *)(v5 + 12736);
    size_t v61 = *(unsigned int *)(v5 + 12740);
    uint64_t v62 = *(char **)(v5 + 12728);
    if (v60 < v61) {
      goto LABEL_90;
    }
    unint64_t v63 = *(void **)(v5 + 12744);
    unsigned int v64 = (char *)v63[1];
    if (&v62[v61] == v64)
    {
      unint64_t v66 = (unint64_t)&v62[v61 + 1];
      unint64_t v65 = v63[2];
      if (v66 <= v65)
      {
        v63[1] = v66;
        LODWORD(v67) = 1;
LABEL_89:
        *(_DWORD *)(v5 + 12740) = v61 + v67;
LABEL_90:
        *(_DWORD *)(v5 + 12736) = v60 + 1;
        v62[v60] = 73;
        if (v26) {
          goto LABEL_54;
        }
        goto LABEL_91;
      }
    }
    else
    {
      unint64_t v65 = v63[2];
    }
    if ((2 * v61) <= 4) {
      uint64_t v67 = 4;
    }
    else {
      uint64_t v67 = (2 * v61);
    }
    size_t v68 = v67 + v61;
    if (!v64 || (unint64_t)&v64[v68] > v65)
    {
      unint64_t v69 = 2 * v63[4];
      if (v69 <= v68 + 1) {
        unint64_t v69 = v68 + 1;
      }
      v63[4] = v69;
      unint64_t v70 = v69 + 8;
      char v71 = malloc_type_malloc(v69 + 8, 0xD0263BC5uLL);
      uint64_t v72 = (char *)v71 + v70;
      void *v71 = v63[3];
      unsigned int v64 = (char *)(v71 + 1);
      v63[2] = v72;
      v63[3] = v71;
    }
    v63[1] = &v64[v68];
    if (v61) {
      memcpy(v64, *v293, v61);
    }
    *(void *)(v5 + 12728) = v64;
    LODWORD(v61) = *(_DWORD *)(v5 + 12740);
    uint64_t v62 = v64;
    unsigned int v60 = *(_DWORD *)(v5 + 12736);
    goto LABEL_89;
  }
  unsigned int v44 = *(_DWORD *)(v5 + 12736);
  size_t v45 = *(unsigned int *)(v5 + 12740);
  unsigned int v46 = *(char **)(v5 + 12728);
  if (v44 >= v45)
  {
    unsigned int v47 = *(void **)(v5 + 12744);
    size_t v48 = (char *)v47[1];
    if (&v46[v45] == v48)
    {
      unint64_t v51 = (unint64_t)&v46[v45 + 1];
      unint64_t v49 = v47[2];
      if (v51 <= v49)
      {
        v47[1] = v51;
        LODWORD(v54) = 1;
LABEL_72:
        *(_DWORD *)(v5 + 12740) = v45 + v54;
        goto LABEL_73;
      }
    }
    else
    {
      unint64_t v49 = v47[2];
    }
    unint64_t v52 = v26;
    char v53 = v28;
    if ((2 * v45) <= 4) {
      uint64_t v54 = 4;
    }
    else {
      uint64_t v54 = (2 * v45);
    }
    size_t v55 = v54 + v45;
    if (!v48 || (unint64_t)&v48[v55] > v49)
    {
      unint64_t v56 = 2 * v47[4];
      if (v56 <= v55 + 1) {
        unint64_t v56 = v55 + 1;
      }
      v47[4] = v56;
      unint64_t v57 = v56 + 8;
      unsigned int v58 = malloc_type_malloc(v56 + 8, 0xD0263BC5uLL);
      size_t v59 = (char *)v58 + v57;
      *unsigned int v58 = v47[3];
      size_t v48 = (char *)(v58 + 1);
      v47[2] = v59;
      v47[3] = v58;
    }
    v47[1] = &v48[v55];
    if (v45) {
      memcpy(v48, *v293, v45);
    }
    *(void *)(v5 + 12728) = v48;
    LODWORD(v45) = *(_DWORD *)(v5 + 12740);
    unsigned int v46 = v48;
    unsigned int v44 = *(_DWORD *)(v5 + 12736);
    char v28 = v53;
    unint64_t v26 = v52;
    goto LABEL_72;
  }
LABEL_73:
  *(_DWORD *)(v5 + 12736) = v44 + 1;
  v46[v44] = 115;
  if ((v28 & 1) == 0) {
    goto LABEL_74;
  }
LABEL_53:
  if (v26)
  {
LABEL_54:
    size_t v43 = strlen(v26);
    goto LABEL_92;
  }
LABEL_91:
  size_t v43 = 0;
LABEL_92:
  this = (uint64_t *)swift::Demangle::__runtime::CharVector::append((char **)v293, v26, v43, *(void **)(v5 + 12744));
  int v73 = *((unsigned __int8 *)v4 + 18);
  size_t v74 = (swift::Demangle::__runtime::Node **)v4;
  if ((v73 - 1) >= 2)
  {
    if (v73 == 5)
    {
      std::string v75 = *(swift::Demangle::__runtime::Node ***)v4;
      size_t v74 = *(swift::Demangle::__runtime::Node ***)v4;
      goto LABEL_100;
    }
    size_t v74 = 0;
  }
  if (v73 == 1)
  {
    int v76 = (swift::Demangle::__runtime::Node **)((char *)v4 + 8);
    if (v74 != (swift::Demangle::__runtime::Node **)((char *)v4 + 8)) {
      goto LABEL_107;
    }
    goto LABEL_455;
  }
  if (v73 == 2)
  {
    int v76 = (swift::Demangle::__runtime::Node **)((char *)v4 + 16);
    if (v74 != (swift::Demangle::__runtime::Node **)((char *)v4 + 16)) {
      goto LABEL_107;
    }
LABEL_455:
    unsigned int v236 = *(_DWORD *)(v5 + 12736);
    size_t v237 = *(unsigned int *)(v5 + 12740);
    v238 = *(unsigned char **)(v5 + 12728);
    if (v236 < v237)
    {
LABEL_474:
      LODWORD(v15) = 0;
      uint64_t v4 = 0;
      int v50 = 0;
      *(_DWORD *)(v5 + 12736) = v236 + 1;
      v238[v236] = 95;
      goto LABEL_475;
    }
    v239 = *(void **)(v5 + 12744);
    v240 = (unsigned char *)v239[1];
    if (&v238[v237] == v240)
    {
      unint64_t v242 = (unint64_t)&v238[v237 + 1];
      unint64_t v241 = v239[2];
      if (v242 <= v241)
      {
        v239[1] = v242;
        LODWORD(v243) = 1;
LABEL_473:
        *(_DWORD *)(v5 + 12740) = v237 + v243;
        goto LABEL_474;
      }
    }
    else
    {
      unint64_t v241 = v239[2];
    }
    if ((2 * v237) <= 4) {
      uint64_t v243 = 4;
    }
    else {
      uint64_t v243 = (2 * v237);
    }
    size_t v244 = v243 + v237;
    if (v240) {
      BOOL v245 = (unint64_t)&v240[v243 + v237] > v241;
    }
    else {
      BOOL v245 = 1;
    }
    v238 = (unsigned char *)v239[1];
    if (v245)
    {
      unint64_t v246 = 2 * v239[4];
      if (v246 <= v244 + 1) {
        unint64_t v246 = v244 + 1;
      }
      v239[4] = v246;
      unint64_t v247 = v246 + 8;
      this = (uint64_t *)malloc_type_malloc(v246 + 8, 0xD0263BC5uLL);
      v248 = (char *)this + v247;
      *this = v239[3];
      v238 = this + 1;
      v239[2] = v248;
      v239[3] = this;
    }
    v239[1] = &v238[v244];
    if (v237) {
      this = (uint64_t *)memcpy(v238, *v293, v237);
    }
    *(void *)(v5 + 12728) = v238;
    LODWORD(v237) = *(_DWORD *)(v5 + 12740);
    unsigned int v236 = *(_DWORD *)(v5 + 12736);
    goto LABEL_473;
  }
  if (v73 != 5)
  {
    int v76 = 0;
    if (!v74) {
      goto LABEL_455;
    }
    goto LABEL_107;
  }
  std::string v75 = *(swift::Demangle::__runtime::Node ***)v4;
LABEL_100:
  int v76 = &v75[*((unsigned int *)v4 + 2)];
  if (v74 == v76) {
    goto LABEL_455;
  }
LABEL_107:
  v291 = v76;
  while (2)
  {
    uint64_t v4 = *v74;
    switch(*((_WORD *)*v74 + 8))
    {
      case 'i':
        unsigned int v79 = *(_DWORD *)(v5 + 12736);
        size_t v81 = *(unsigned int *)(v5 + 12740);
        unint64_t v78 = *(char **)(v5 + 12728);
        if (v79 < v81)
        {
          char v82 = 101;
          goto LABEL_111;
        }
        uint64_t v108 = *(void **)(v5 + 12744);
        size_t v109 = (char *)v108[1];
        if (&v78[v81] == v109)
        {
          unint64_t v189 = (unint64_t)&v78[v81 + 1];
          unint64_t v110 = v108[2];
          if (v189 <= v110)
          {
            v108[1] = v189;
            LODWORD(v190) = 1;
            goto LABEL_338;
          }
        }
        else
        {
          unint64_t v110 = v108[2];
        }
        if ((2 * v81) <= 4) {
          uint64_t v190 = 4;
        }
        else {
          uint64_t v190 = (2 * v81);
        }
        size_t v191 = v190 + v81;
        if (v109) {
          BOOL v192 = (unint64_t)&v109[v190 + v81] > v110;
        }
        else {
          BOOL v192 = 1;
        }
        unint64_t v78 = (char *)v108[1];
        if (v192)
        {
          unint64_t v193 = 2 * v108[4];
          if (v193 <= v191 + 1) {
            unint64_t v193 = v191 + 1;
          }
          v108[4] = v193;
          unint64_t v194 = v193 + 8;
          this = (uint64_t *)malloc_type_malloc(v193 + 8, 0xD0263BC5uLL);
          v195 = (char *)this + v194;
          *this = v108[3];
          unint64_t v78 = (char *)(this + 1);
          v108[2] = v195;
          v108[3] = this;
        }
        v108[1] = &v78[v191];
        if (v81) {
          this = (uint64_t *)memcpy(v78, *v293, v81);
        }
        *(void *)(v5 + 12728) = v78;
        LODWORD(v81) = *(_DWORD *)(v5 + 12740);
        unsigned int v79 = *(_DWORD *)(v5 + 12736);
LABEL_338:
        int v80 = v81 + v190;
        char v82 = 101;
        goto LABEL_110;
      case 'j':
        int v50 = 2059;
        LODWORD(v15) = 15;
        unint64_t v83 = *(swift::Demangle::__runtime::Node ***)v4;
        switch(*((void *)v4 + 1))
        {
          case 0xDLL:
            if (*v83 != (swift::Demangle::__runtime::Node *)0x5F65656C6C616340
              || *(swift::Demangle::__runtime::Node **)((char *)v83 + 5) != (swift::Demangle::__runtime::Node *)0x64656E776F5F6565)
            {
              goto LABEL_544;
            }
            char v82 = 120;
            goto LABEL_372;
          case 0xFLL:
            if (*v83 != (swift::Demangle::__runtime::Node *)0x5F65656C6C616340
              || *(swift::Demangle::__runtime::Node **)((char *)v83 + 7) != (swift::Demangle::__runtime::Node *)0x64656E776F6E755FLL)
            {
              goto LABEL_544;
            }
            char v82 = 121;
            goto LABEL_372;
          case 0x11:
            unint64_t v124 = *v83;
            uint64_t v125 = v83[1];
            int v126 = *((unsigned __int8 *)v83 + 16);
            if (v124 != (swift::Demangle::__runtime::Node *)0x746E65766E6F6340
              || v125 != (swift::Demangle::__runtime::Node *)0x6E696874286E6F69
              || v126 != 41)
            {
              goto LABEL_544;
            }
            char v82 = 116;
            goto LABEL_372;
          case 0x12:
            uint64_t v129 = *v83;
            unint64_t v130 = v83[1];
            int v131 = *((unsigned __int16 *)v83 + 8);
            if (v129 != (swift::Demangle::__runtime::Node *)0x5F65656C6C616340
              || v130 != (swift::Demangle::__runtime::Node *)0x65746E6172617567
              || v131 != 25701)
            {
LABEL_544:
              int v50 = 2059;
              LODWORD(v15) = 15;
              goto LABEL_475;
            }
            char v82 = 103;
LABEL_372:
            unsigned int v79 = *(_DWORD *)(v5 + 12736);
            size_t v77 = *(unsigned int *)(v5 + 12740);
            unint64_t v78 = *(char **)(v5 + 12728);
            if (v79 < v77) {
              goto LABEL_111;
            }
            v210 = *(void **)(v5 + 12744);
            v211 = (char *)v210[1];
            if (&v78[v77] != v211)
            {
              unint64_t v212 = v210[2];
LABEL_376:
              if ((2 * v77) <= 4) {
                uint64_t v135 = 4;
              }
              else {
                uint64_t v135 = (2 * v77);
              }
              size_t v214 = v135 + v77;
              if (!v211 || (unint64_t)&v211[v214] > v212)
              {
                unint64_t v215 = 2 * v210[4];
                if (v215 <= v214 + 1) {
                  unint64_t v215 = v214 + 1;
                }
                v210[4] = v215;
                unint64_t v216 = v215 + 8;
                this = (uint64_t *)malloc_type_malloc(v215 + 8, 0xD0263BC5uLL);
                *this = v210[3];
                v211 = (char *)(this + 1);
                v210[2] = (char *)this + v216;
                v210[3] = this;
              }
              v210[1] = &v211[v214];
              if (v77) {
                this = (uint64_t *)memcpy(v211, *v293, v77);
              }
              *(void *)(v5 + 12728) = v211;
              LODWORD(v77) = *(_DWORD *)(v5 + 12740);
              unint64_t v78 = v211;
              unsigned int v79 = *(_DWORD *)(v5 + 12736);
              int v76 = v291;
              goto LABEL_109;
            }
            unint64_t v213 = (unint64_t)&v78[v77 + 1];
            unint64_t v212 = v210[2];
            if (v213 > v212) {
              goto LABEL_376;
            }
            v210[1] = v213;
LABEL_388:
            LODWORD(v135) = 1;
LABEL_109:
            int v80 = v77 + v135;
LABEL_110:
            *(_DWORD *)(v5 + 12740) = v80;
LABEL_111:
            *(_DWORD *)(v5 + 12736) = v79 + 1;
            v78[v79] = v82;
            break;
          default:
            goto LABEL_475;
        }
        goto LABEL_112;
      case 'k':
        char v82 = *(unsigned char *)v4;
        unsigned int v79 = *(_DWORD *)(v5 + 12736);
        size_t v77 = *(unsigned int *)(v5 + 12740);
        unint64_t v78 = *(char **)(v5 + 12728);
        if (v79 < v77) {
          goto LABEL_111;
        }
        char v85 = *(void **)(v5 + 12744);
        unint64_t v86 = (char *)v85[1];
        if (&v78[v77] == v86)
        {
          unint64_t v134 = (unint64_t)&v78[v77 + 1];
          unint64_t v87 = v85[2];
          if (v134 <= v87)
          {
            v85[1] = v134;
            goto LABEL_388;
          }
        }
        else
        {
          unint64_t v87 = v85[2];
        }
        if ((2 * v77) <= 4) {
          uint64_t v135 = 4;
        }
        else {
          uint64_t v135 = (2 * v77);
        }
        size_t v136 = v135 + v77;
        if (v86) {
          BOOL v137 = (unint64_t)&v86[v135 + v77] > v87;
        }
        else {
          BOOL v137 = 1;
        }
        unint64_t v78 = (char *)v85[1];
        if (v137)
        {
          unint64_t v138 = 2 * v85[4];
          if (v138 <= v136 + 1) {
            unint64_t v138 = v136 + 1;
          }
          v85[4] = v138;
          unint64_t v139 = v138 + 8;
          this = (uint64_t *)malloc_type_malloc(v138 + 8, 0xD0263BC5uLL);
          v140 = (char *)this + v139;
          *this = v85[3];
          unint64_t v78 = (char *)(this + 1);
          v85[2] = v140;
          v85[3] = this;
        }
        v85[1] = &v78[v136];
        if (v77) {
          this = (uint64_t *)memcpy(v78, *v293, v77);
        }
        *(void *)(v5 + 12728) = v78;
        LODWORD(v77) = *(_DWORD *)(v5 + 12740);
        unsigned int v79 = *(_DWORD *)(v5 + 12736);
        goto LABEL_109;
      case 'l':
        unsigned int v79 = *(_DWORD *)(v5 + 12736);
        size_t v88 = *(unsigned int *)(v5 + 12740);
        unint64_t v78 = *(char **)(v5 + 12728);
        if (v79 < v88)
        {
          char v82 = 65;
          goto LABEL_111;
        }
        unint64_t v111 = *(void **)(v5 + 12744);
        unint64_t v112 = (char *)v111[1];
        if (&v78[v88] == v112)
        {
          unint64_t v196 = (unint64_t)&v78[v88 + 1];
          unint64_t v113 = v111[2];
          if (v196 <= v113)
          {
            v111[1] = v196;
            LODWORD(v197) = 1;
            goto LABEL_354;
          }
        }
        else
        {
          unint64_t v113 = v111[2];
        }
        if ((2 * v88) <= 4) {
          uint64_t v197 = 4;
        }
        else {
          uint64_t v197 = (2 * v88);
        }
        size_t v198 = v197 + v88;
        if (v112) {
          BOOL v199 = (unint64_t)&v112[v197 + v88] > v113;
        }
        else {
          BOOL v199 = 1;
        }
        unint64_t v78 = (char *)v111[1];
        if (v199)
        {
          unint64_t v200 = 2 * v111[4];
          if (v200 <= v198 + 1) {
            unint64_t v200 = v198 + 1;
          }
          v111[4] = v200;
          unint64_t v201 = v200 + 8;
          this = (uint64_t *)malloc_type_malloc(v200 + 8, 0xD0263BC5uLL);
          v202 = (char *)this + v201;
          *this = v111[3];
          unint64_t v78 = (char *)(this + 1);
          v111[2] = v202;
          v111[3] = this;
        }
        v111[1] = &v78[v198];
        if (v88) {
          this = (uint64_t *)memcpy(v78, *v293, v88);
        }
        *(void *)(v5 + 12728) = v78;
        LODWORD(v88) = *(_DWORD *)(v5 + 12740);
        unsigned int v79 = *(_DWORD *)(v5 + 12736);
LABEL_354:
        int v80 = v88 + v197;
        char v82 = 65;
        goto LABEL_110;
      case 'm':
        unsigned int v79 = *(_DWORD *)(v5 + 12736);
        size_t v89 = *(unsigned int *)(v5 + 12740);
        unint64_t v78 = *(char **)(v5 + 12728);
        if (v79 < v89)
        {
          char v82 = 84;
          goto LABEL_111;
        }
        unint64_t v114 = *(void **)(v5 + 12744);
        uint64_t v115 = (char *)v114[1];
        if (&v78[v89] == v115)
        {
          unint64_t v203 = (unint64_t)&v78[v89 + 1];
          unint64_t v116 = v114[2];
          if (v203 <= v116)
          {
            v114[1] = v203;
            LODWORD(v204) = 1;
            goto LABEL_370;
          }
        }
        else
        {
          unint64_t v116 = v114[2];
        }
        if ((2 * v89) <= 4) {
          uint64_t v204 = 4;
        }
        else {
          uint64_t v204 = (2 * v89);
        }
        size_t v205 = v204 + v89;
        if (v115) {
          BOOL v206 = (unint64_t)&v115[v204 + v89] > v116;
        }
        else {
          BOOL v206 = 1;
        }
        unint64_t v78 = (char *)v114[1];
        if (v206)
        {
          unint64_t v207 = 2 * v114[4];
          if (v207 <= v205 + 1) {
            unint64_t v207 = v205 + 1;
          }
          v114[4] = v207;
          unint64_t v208 = v207 + 8;
          this = (uint64_t *)malloc_type_malloc(v207 + 8, 0xD0263BC5uLL);
          v209 = (char *)this + v208;
          *this = v114[3];
          unint64_t v78 = (char *)(this + 1);
          v114[2] = v209;
          v114[3] = this;
        }
        v114[1] = &v78[v205];
        if (v89) {
          this = (uint64_t *)memcpy(v78, *v293, v89);
        }
        *(void *)(v5 + 12728) = v78;
        LODWORD(v89) = *(_DWORD *)(v5 + 12740);
        unsigned int v79 = *(_DWORD *)(v5 + 12736);
LABEL_370:
        int v80 = v89 + v204;
        char v82 = 84;
        goto LABEL_110;
      case 'p':
        unint64_t v90 = *(swift::Demangle::__runtime::Node ***)v4;
        uint64_t v91 = *((void *)v4 + 1);
        switch(v91)
        {
          case 6:
            int v117 = *(_DWORD *)v90;
            int v118 = *((unsigned __int16 *)v90 + 2);
            if (v117 != 2037604672 || v118 != 25454)
            {
LABEL_543:
              int v50 = 2076;
              LODWORD(v15) = 17;
              goto LABEL_475;
            }
            char v82 = 72;
            break;
          case 9:
            size_t v120 = *v90;
            int v121 = *((unsigned __int8 *)v90 + 8);
            if (v120 != (swift::Demangle::__runtime::Node *)0x6C6261646E655340 || v121 != 101) {
              goto LABEL_543;
            }
            char v82 = 104;
            break;
          case 11:
            if (*v90 == (swift::Demangle::__runtime::Node *)0x6F5F646C65697940
              && *(swift::Demangle::__runtime::Node **)((char *)v90 + 3) == (swift::Demangle::__runtime::Node *)0x65636E6F5F646C65)
            {
              char v82 = 65;
            }
            else
            {
              unint64_t v93 = *v90;
              uint64_t v94 = *(uint64_t *)((char *)v90 + 3);
              if (v93 != (swift::Demangle::__runtime::Node *)0x6D5F646C65697940 || v94 != 0x796E616D5F646C65) {
                goto LABEL_543;
              }
              char v82 = 71;
            }
            break;
          default:
            goto LABEL_543;
        }
        goto LABEL_372;
      case 'q':
        goto LABEL_452;
      case 'v':
        goto LABEL_224;
      case 'x':
        goto LABEL_289;
      case 'y':
        unsigned int v96 = *(_DWORD *)(v5 + 12736);
        size_t v97 = *(unsigned int *)(v5 + 12740);
        unint64_t v98 = *(char **)(v5 + 12728);
        if (v96 < v97) {
          goto LABEL_223;
        }
        uint64_t v99 = *(void **)(v5 + 12744);
        unint64_t v100 = (char *)v99[1];
        if (&v98[v97] == v100)
        {
          unint64_t v141 = (unint64_t)&v98[v97 + 1];
          unint64_t v101 = v99[2];
          if (v141 <= v101)
          {
            v99[1] = v141;
            LODWORD(v142) = 1;
            goto LABEL_222;
          }
        }
        else
        {
          unint64_t v101 = v99[2];
        }
        if ((2 * v97) <= 4) {
          uint64_t v142 = 4;
        }
        else {
          uint64_t v142 = (2 * v97);
        }
        size_t v143 = v142 + v97;
        if (v100) {
          BOOL v144 = (unint64_t)&v100[v142 + v97] > v101;
        }
        else {
          BOOL v144 = 1;
        }
        unint64_t v98 = (char *)v99[1];
        if (v144)
        {
          unint64_t v145 = 2 * v99[4];
          if (v145 <= v143 + 1) {
            unint64_t v145 = v143 + 1;
          }
          v99[4] = v145;
          unint64_t v146 = v145 + 8;
          v147 = malloc_type_malloc(v145 + 8, 0xD0263BC5uLL);
          v148 = (char *)v147 + v146;
          void *v147 = v99[3];
          unint64_t v98 = (char *)(v147 + 1);
          v99[2] = v148;
          v99[3] = v147;
        }
        v99[1] = &v98[v143];
        if (v97) {
          memcpy(v98, *v293, v97);
        }
        *(void *)(v5 + 12728) = v98;
        LODWORD(v97) = *(_DWORD *)(v5 + 12740);
        unsigned int v96 = *(_DWORD *)(v5 + 12736);
LABEL_222:
        *(_DWORD *)(v5 + 12740) = v97 + v142;
LABEL_223:
        *(_DWORD *)(v5 + 12736) = v96 + 1;
        v98[v96] = 89;
LABEL_224:
        int v149 = *((unsigned __int8 *)v4 + 18);
        v150 = (swift::Demangle::__runtime::Node **)v4;
        if ((v149 - 1) >= 2) {
          v150 = *(swift::Demangle::__runtime::Node ***)v4;
        }
        break;
      case 'z':
        unsigned int v102 = *(_DWORD *)(v5 + 12736);
        size_t v103 = *(unsigned int *)(v5 + 12740);
        unint64_t v104 = *(char **)(v5 + 12728);
        if (v102 < v103) {
          goto LABEL_288;
        }
        unint64_t v105 = *(void **)(v5 + 12744);
        uint64_t v106 = (char *)v105[1];
        if (&v104[v103] == v106)
        {
          unint64_t v163 = (unint64_t)&v104[v103 + 1];
          unint64_t v107 = v105[2];
          if (v163 <= v107)
          {
            v105[1] = v163;
            LODWORD(v164) = 1;
            goto LABEL_287;
          }
        }
        else
        {
          unint64_t v107 = v105[2];
        }
        if ((2 * v103) <= 4) {
          uint64_t v164 = 4;
        }
        else {
          uint64_t v164 = (2 * v103);
        }
        size_t v165 = v164 + v103;
        if (v106) {
          BOOL v166 = (unint64_t)&v106[v164 + v103] > v107;
        }
        else {
          BOOL v166 = 1;
        }
        unint64_t v104 = (char *)v105[1];
        if (v166)
        {
          unint64_t v167 = 2 * v105[4];
          if (v167 <= v165 + 1) {
            unint64_t v167 = v165 + 1;
          }
          v105[4] = v167;
          unint64_t v168 = v167 + 8;
          this = (uint64_t *)malloc_type_malloc(v167 + 8, 0xD0263BC5uLL);
          v169 = (char *)this + v168;
          *this = v105[3];
          unint64_t v104 = (char *)(this + 1);
          v105[2] = v169;
          v105[3] = this;
        }
        v105[1] = &v104[v165];
        if (v103) {
          this = (uint64_t *)memcpy(v104, *v293, v103);
        }
        *(void *)(v5 + 12728) = v104;
        LODWORD(v103) = *(_DWORD *)(v5 + 12740);
        unsigned int v102 = *(_DWORD *)(v5 + 12736);
LABEL_287:
        *(_DWORD *)(v5 + 12740) = v103 + v164;
LABEL_288:
        *(_DWORD *)(v5 + 12736) = v102 + 1;
        v104[v102] = 122;
LABEL_289:
        int v170 = *((unsigned __int8 *)v4 + 18);
        v171 = (swift::Demangle::__runtime::Node **)v4;
        if ((v170 - 1) >= 2) {
          v171 = *(swift::Demangle::__runtime::Node ***)v4;
        }
        v172 = *v171;
        uint64_t v173 = *((void *)v172 + 1);
        v174 = *(int **)v172;
        switch(v173)
        {
          case 4:
            if (*v174 != 1953853248) {
              goto LABEL_477;
            }
            char v151 = 114;
            goto LABEL_426;
          case 6:
            int v175 = *v174;
            int v176 = *((unsigned __int16 *)v174 + 2);
            if (v175 != 1853321024 || v176 != 25701) {
              goto LABEL_477;
            }
            char v151 = 111;
            goto LABEL_426;
          case 8:
            if (*(void *)v174 != 0x64656E776F6E7540) {
              goto LABEL_477;
            }
            char v151 = 100;
            goto LABEL_426;
          case 9:
            uint64_t v178 = *(void *)v174;
            int v179 = *((unsigned __int8 *)v174 + 8);
            if (v178 != 0x756F5F6B63617040 || v179 != 116) {
              goto LABEL_477;
            }
            char v151 = 107;
            goto LABEL_426;
          case 13:
            uint64_t v181 = *(void *)v174;
            uint64_t v182 = *(void *)((char *)v174 + 5);
            if (v181 != 0x6C65726F74756140 || v182 != 0x64657361656C6572) {
              goto LABEL_477;
            }
            char v151 = 97;
            goto LABEL_426;
          case 22:
            uint64_t v184 = *(void *)v174;
            uint64_t v185 = *((void *)v174 + 1);
            uint64_t v186 = *(void *)((char *)v174 + 14);
            if (v184 != 0x64656E776F6E7540 || v185 != 0x705F72656E6E695FLL || v186 != 0x7265746E696F705FLL) {
              goto LABEL_477;
            }
            char v151 = 117;
            goto LABEL_426;
          default:
LABEL_477:
            if ((v170 - 1) < 2) {
              goto LABEL_481;
            }
            if (v170 == 5 && *((_DWORD *)v4 + 2))
            {
              uint64_t v4 = *(swift::Demangle::__runtime::Node **)v4;
LABEL_481:
              uint64_t v4 = *(swift::Demangle::__runtime::Node **)v4;
            }
            else
            {
              uint64_t v4 = 0;
            }
            int v50 = 2132;
            LODWORD(v15) = 18;
            break;
        }
        goto LABEL_475;
      default:
        goto LABEL_112;
    }
    char v151 = 0;
    v152 = *v150;
    this = *(uint64_t **)v152;
    size_t v153 = *((void *)v152 + 1);
    int v154 = 1;
    switch(v153)
    {
      case 3uLL:
        if (*(_WORD *)this != 26944 || *((unsigned char *)this + 2) != 110) {
          goto LABEL_483;
        }
        int v154 = 0;
        char v151 = 105;
        goto LABEL_391;
      case 6uLL:
        if (*(_DWORD *)this == 1869506880 && *((_WORD *)this + 2) == 29813)
        {
          int v154 = 0;
          char v151 = 108;
        }
        else
        {
          if (*(_DWORD *)this == 1853321024 && *((_WORD *)this + 2) == 25701)
          {
            char v151 = 120;
            goto LABEL_426;
          }
LABEL_247:
          char v151 = 0;
          int v154 = 1;
        }
LABEL_391:
        if (v153 == 8 && v154 != 0)
        {
          if (*this == 0x64656E776F6E7540)
          {
            char v151 = 121;
          }
          else if (((v154 ^ 1) & 1) == 0)
          {
            goto LABEL_483;
          }
          goto LABEL_426;
        }
        char v218 = v154 ^ 1;
        if (v153 == 16) {
          char v219 = v154 ^ 1;
        }
        else {
          char v219 = 1;
        }
        if ((v219 & 1) == 0)
        {
LABEL_400:
          this = (uint64_t *)memcmp(this, "@pack_guaranteed", v153);
          if (this) {
            goto LABEL_483;
          }
          char v151 = 112;
          goto LABEL_426;
        }
        if (v153 != 11) {
          char v218 = 1;
        }
        if ((v218 & 1) == 0)
        {
          if (*this == 0x776F5F6B63617040 && *(uint64_t *)((char *)this + 3) == 0x64656E776F5F6B63)
          {
            char v151 = 118;
            goto LABEL_426;
          }
          goto LABEL_418;
        }
        char v221 = v154 ^ 1;
        if (v153 != 11) {
          char v221 = 1;
        }
        if ((v221 & 1) == 0)
        {
LABEL_418:
          this = (uint64_t *)memcmp(this, "@pack_inout", v153);
          if (this) {
            goto LABEL_483;
          }
          char v151 = 109;
LABEL_426:
          unsigned int v222 = *(_DWORD *)(v5 + 12736);
          size_t v223 = *(unsigned int *)(v5 + 12740);
          v224 = *(char **)(v5 + 12728);
          if (v222 < v223) {
            goto LABEL_442;
          }
          v225 = *(void **)(v5 + 12744);
          v226 = (char *)v225[1];
          if (&v224[v223] != v226)
          {
            unint64_t v227 = v225[2];
LABEL_430:
            if ((2 * v223) <= 4) {
              uint64_t v229 = 4;
            }
            else {
              uint64_t v229 = (2 * v223);
            }
            size_t v230 = v229 + v223;
            if (!v226 || (unint64_t)&v226[v230] > v227)
            {
              unint64_t v231 = 2 * v225[4];
              if (v231 <= v230 + 1) {
                unint64_t v231 = v230 + 1;
              }
              v225[4] = v231;
              unint64_t v232 = v231 + 8;
              this = (uint64_t *)malloc_type_malloc(v231 + 8, 0xD0263BC5uLL);
              v233 = (char *)this + v232;
              *this = v225[3];
              v226 = (char *)(this + 1);
              v225[2] = v233;
              v225[3] = this;
            }
            v225[1] = &v226[v230];
            if (v223) {
              this = (uint64_t *)memcpy(v226, *v293, v223);
            }
            *(void *)(v5 + 12728) = v226;
            LODWORD(v223) = *(_DWORD *)(v5 + 12740);
            v224 = v226;
            unsigned int v222 = *(_DWORD *)(v5 + 12736);
            int v76 = v291;
            goto LABEL_441;
          }
          unint64_t v228 = (unint64_t)&v224[v223 + 1];
          unint64_t v227 = v225[2];
          if (v228 > v227) {
            goto LABEL_430;
          }
          v225[1] = v228;
          LODWORD(v229) = 1;
LABEL_441:
          *(_DWORD *)(v5 + 12740) = v223 + v229;
LABEL_442:
          *(_DWORD *)(v5 + 12736) = v222 + 1;
          v224[v222] = v151;
          if (*((unsigned char *)v4 + 18) == 5)
          {
            int v234 = *((_DWORD *)v4 + 2);
            if (v234 == 4)
            {
              if (*(_DWORD *)a4) {
                return this;
              }
              if (*((unsigned char *)v4 + 18) == 5 && *((_DWORD *)v4 + 2) >= 3u) {
                v235 = *(swift::Demangle::__runtime::Node **)(*(void *)v4 + 16);
              }
              else {
                v235 = 0;
              }
            }
            else
            {
              if (v234 != 3) {
                goto LABEL_112;
              }
            }
LABEL_452:
            if (*(_DWORD *)a4) {
              return this;
            }
          }
LABEL_112:
          if (++v74 == v76) {
            goto LABEL_455;
          }
          continue;
        }
        if (!v154) {
          goto LABEL_426;
        }
LABEL_483:
        if ((v149 - 1) < 2) {
          goto LABEL_487;
        }
        if (v149 == 5 && *((_DWORD *)v4 + 2))
        {
          uint64_t v4 = *(swift::Demangle::__runtime::Node **)v4;
LABEL_487:
          uint64_t v4 = *(swift::Demangle::__runtime::Node **)v4;
        }
        else
        {
          uint64_t v4 = 0;
        }
        int v50 = 2103;
        LODWORD(v15) = 18;
LABEL_475:
        *(_DWORD *)a4 = v15;
        *(void *)(a4 + 8) = v4;
        *(_DWORD *)(a4 + 16) = v50;
        return this;
      case 0xBuLL:
        if (*this != 0x746E617261756740 || *(uint64_t *)((char *)this + 3) != 0x646565746E617261) {
          goto LABEL_247;
        }
        char v151 = 103;
        goto LABEL_426;
      case 0xCuLL:
        if (*this != 0x736E6F635F6E6940 || *((_DWORD *)this + 2) != 1953390964) {
          goto LABEL_483;
        }
        char v151 = 99;
        goto LABEL_426;
      case 0xDuLL:
        if (*this != 0x636F6C6C61656440 || *(uint64_t *)((char *)this + 5) != 0x676E697461636F6CLL) {
          goto LABEL_483;
        }
        char v151 = 101;
        goto LABEL_426;
      case 0xEuLL:
        if (*this != 0x726175675F6E6940 || *(uint64_t *)((char *)this + 6) != 0x646565746E617261) {
          goto LABEL_483;
        }
        char v151 = 110;
        goto LABEL_426;
      case 0x10uLL:
        if (*this != 0x615F74756F6E6940 || this[1] != 0x656C62617361696CLL) {
          goto LABEL_400;
        }
        char v151 = 98;
        goto LABEL_426;
      default:
        goto LABEL_391;
    }
  }
}

uint64_t *anonymous namespace'::Remangler::mangleImplicitClosure@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v4 = a2;
  unsigned int v7 = a3 + 1;
  int v8 = *((unsigned __int8 *)a2 + 18);
  uint64_t v9 = (swift::Demangle::__runtime::Node **)a2;
  if ((v8 - 1) < 2)
  {
LABEL_5:
    if (*(_DWORD *)a4) {
      return result;
    }
    if (*((unsigned char *)v4 + 18) != 5) {
      goto LABEL_12;
    }
    goto LABEL_9;
  }
  if (v8 == 5 && *((_DWORD *)a2 + 2))
  {
    uint64_t v9 = *(swift::Demangle::__runtime::Node ***)a2;
    goto LABEL_5;
  }
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  if (v8 != 5)
  {
LABEL_12:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    goto LABEL_13;
  }
LABEL_9:
  if (*((_DWORD *)v4 + 2) <= 2u) {
    goto LABEL_12;
  }
  if (*(_DWORD *)a4) {
    return result;
  }
LABEL_13:
  uint64_t result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "fu", 2uLL, this[1593]);
  int v11 = *((unsigned __int8 *)v4 + 18);
  if (v11 != 2)
  {
    if (v11 != 5 || *((_DWORD *)v4 + 2) < 2u)
    {
      *(_DWORD *)a4 = 0;
      *(void *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 16) = 0;
      return result;
    }
    uint64_t v4 = *(swift::Demangle::__runtime::Node **)v4;
  }
  int v12 = (swift::Demangle::__runtime::Node *)*((void *)v4 + 1);
}

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleInOut@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v4 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 == 1)
  {
LABEL_5:
    if (*(_DWORD *)a4) {
      return this;
    }
    unsigned int v7 = *((_DWORD *)v4 + 3184);
    size_t v8 = *((unsigned int *)v4 + 3185);
    uint64_t v9 = (unsigned char *)*((void *)v4 + 1591);
    if (v7 < v8) {
      goto LABEL_27;
    }
    uint64_t v10 = (void *)*((void *)v4 + 1593);
    int v11 = (unsigned char *)v10[1];
    if (&v9[v8] == v11)
    {
      unint64_t v15 = (unint64_t)&v9[v8 + 1];
      unint64_t v12 = v10[2];
      if (v15 <= v12)
      {
        v10[1] = v15;
        LODWORD(v16) = 1;
LABEL_26:
        *((_DWORD *)v4 + 3185) = v8 + v16;
LABEL_27:
        int v14 = 0;
        a2 = 0;
        int v13 = 0;
        *((_DWORD *)v4 + 3184) = v7 + 1;
        v9[v7] = 122;
        goto LABEL_28;
      }
    }
    else
    {
      unint64_t v12 = v10[2];
    }
    if ((2 * v8) <= 4) {
      uint64_t v16 = 4;
    }
    else {
      uint64_t v16 = (2 * v8);
    }
    size_t v17 = v16 + v8;
    if (v11) {
      BOOL v18 = (unint64_t)&v11[v16 + v8] > v12;
    }
    else {
      BOOL v18 = 1;
    }
    uint64_t v9 = (unsigned char *)v10[1];
    if (v18)
    {
      unint64_t v19 = 2 * v10[4];
      if (v19 <= v17 + 1) {
        unint64_t v19 = v17 + 1;
      }
      v10[4] = v19;
      unint64_t v20 = v19 + 8;
      this = (_anonymous_namespace_::Remangler *)malloc_type_malloc(v19 + 8, 0xD0263BC5uLL);
      size_t v21 = (char *)this + v20;
      *(void *)this = v10[3];
      uint64_t v9 = (char *)this + 8;
      v10[2] = v21;
      v10[3] = this;
    }
    v10[1] = &v9[v17];
    if (v8) {
      this = (_anonymous_namespace_::Remangler *)memcpy(v9, *((const void **)v4 + 1591), v8);
    }
    *((void *)v4 + 1591) = v9;
    LODWORD(v8) = *((_DWORD *)v4 + 3185);
    unsigned int v7 = *((_DWORD *)v4 + 3184);
    goto LABEL_26;
  }
  if (v6 == 5 && *((_DWORD *)a2 + 2) == 1)
  {
    a2 = *(swift::Demangle::__runtime::Node **)a2;
    goto LABEL_5;
  }
  int v13 = 321;
  int v14 = 10;
LABEL_28:
  *(_DWORD *)a4 = v14;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v13;
  return this;
}

void *anonymous namespace'::Remangler::mangleInfixOperator@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result = swift::Demangle::__runtime::CharVector::append(this + 1591, "oi", 2uLL, this[1593]);
  *(_DWORD *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 16) = 0;
  return result;
}

uint64_t *anonymous namespace'::Remangler::mangleInitializer@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6 = *((unsigned __int8 *)a2 + 18);
  unsigned int v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      uint64_t v8 = *(void *)a2;
      unsigned int v7 = *(swift::Demangle::__runtime::Node **)a2;
      goto LABEL_9;
    }
    unsigned int v7 = 0;
  }
  switch(v6)
  {
    case 1:
      uint64_t v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 8);
      if (v7 == (swift::Demangle::__runtime::Node *)((char *)a2 + 8)) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 2:
      uint64_t v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 16);
      if (v7 == (swift::Demangle::__runtime::Node *)((char *)a2 + 16)) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 5:
      uint64_t v8 = *(void *)a2;
LABEL_9:
      uint64_t v9 = (swift::Demangle::__runtime::Node *)(v8 + 8 * *((unsigned int *)a2 + 2));
      if (v7 == v9) {
        goto LABEL_19;
      }
      goto LABEL_16;
  }
  uint64_t v9 = 0;
  if (!v7)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    uint64_t result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "fi", 2uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
LABEL_16:
  unsigned int v10 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4) {
      return result;
    }
    unsigned int v7 = (swift::Demangle::__runtime::Node *)((char *)v7 + 8);
    if (v7 == v9) {
      goto LABEL_19;
    }
  }
}

uint64_t *anonymous namespace'::Remangler::mangleInitAccessor@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = *((unsigned __int8 *)a2 + 18);
  if ((v4 - 1) >= 2)
  {
    if (v4 != 5 || !*((_DWORD *)a2 + 2))
    {
      uint64_t v5 = 0;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  uint64_t v5 = *(void *)a2;
}

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleIsolated@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      int v8 = 321;
      int v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  if (*(_DWORD *)a4) {
    return this;
  }
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::__runtime::CharVector::append((char **)v4 + 1591, "Yi", 2uLL, *((void **)v4 + 1593));
  int v7 = 0;
  a2 = 0;
  int v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleSending@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      int v8 = 321;
      int v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  if (*(_DWORD *)a4) {
    return this;
  }
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::__runtime::CharVector::append((char **)v4 + 1591, "Yu", 2uLL, *((void **)v4 + 1593));
  int v7 = 0;
  a2 = 0;
  int v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

uint64_t *anonymous namespace'::Remangler::mangleLazyProtocolWitnessTableAccessor@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6 = *((unsigned __int8 *)a2 + 18);
  int v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      uint64_t v8 = *(void *)a2;
      int v7 = *(swift::Demangle::__runtime::Node **)a2;
      goto LABEL_9;
    }
    int v7 = 0;
  }
  switch(v6)
  {
    case 1:
      uint64_t v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 8);
      if (v7 == (swift::Demangle::__runtime::Node *)((char *)a2 + 8)) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 2:
      uint64_t v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 16);
      if (v7 == (swift::Demangle::__runtime::Node *)((char *)a2 + 16)) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 5:
      uint64_t v8 = *(void *)a2;
LABEL_9:
      uint64_t v9 = (swift::Demangle::__runtime::Node *)(v8 + 8 * *((unsigned int *)a2 + 2));
      if (v7 == v9) {
        goto LABEL_19;
      }
      goto LABEL_16;
  }
  uint64_t v9 = 0;
  if (!v7)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    uint64_t result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "Wl", 2uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
LABEL_16:
  unsigned int v10 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4) {
      return result;
    }
    int v7 = (swift::Demangle::__runtime::Node *)((char *)v7 + 8);
    if (v7 == v9) {
      goto LABEL_19;
    }
  }
}

uint64_t *anonymous namespace'::Remangler::mangleLazyProtocolWitnessTableCacheVariable@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6 = *((unsigned __int8 *)a2 + 18);
  int v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      uint64_t v8 = *(void *)a2;
      int v7 = *(swift::Demangle::__runtime::Node **)a2;
      goto LABEL_9;
    }
    int v7 = 0;
  }
  switch(v6)
  {
    case 1:
      uint64_t v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 8);
      if (v7 == (swift::Demangle::__runtime::Node *)((char *)a2 + 8)) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 2:
      uint64_t v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 16);
      if (v7 == (swift::Demangle::__runtime::Node *)((char *)a2 + 16)) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 5:
      uint64_t v8 = *(void *)a2;
LABEL_9:
      uint64_t v9 = (swift::Demangle::__runtime::Node *)(v8 + 8 * *((unsigned int *)a2 + 2));
      if (v7 == v9) {
        goto LABEL_19;
      }
      goto LABEL_16;
  }
  uint64_t v9 = 0;
  if (!v7)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    uint64_t result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "WL", 2uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
LABEL_16:
  unsigned int v10 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4) {
      return result;
    }
    int v7 = (swift::Demangle::__runtime::Node *)((char *)v7 + 8);
    if (v7 == v9) {
      goto LABEL_19;
    }
  }
}

uint64_t *anonymous namespace'::Remangler::mangleLocalDeclName@<X0>(uint64_t *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = a2;
  uint64_t v5 = this;
  unsigned int v7 = a3 + 1;
  int v8 = *((unsigned __int8 *)a2 + 18);
  uint64_t v9 = a2;
  if (v8 != 2)
  {
    if (v8 != 5 || *((_DWORD *)a2 + 2) < 2u)
    {
      *(_DWORD *)a4 = 0;
      *(void *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 16) = 0;
      goto LABEL_8;
    }
    uint64_t v9 = *(swift::Demangle::__runtime::Node **)a2;
  }
  if (*(_DWORD *)a4) {
    return this;
  }
LABEL_8:
  unsigned int v10 = *((_DWORD *)v5 + 3184);
  size_t v11 = *((unsigned int *)v5 + 3185);
  unint64_t v12 = (char *)v5[1591];
  if (v10 < v11) {
    goto LABEL_28;
  }
  int v13 = (void *)v5[1593];
  int v14 = (char *)v13[1];
  if (&v12[v11] != v14)
  {
    unint64_t v15 = v13[2];
LABEL_12:
    if ((2 * v11) <= 4) {
      uint64_t v17 = 4;
    }
    else {
      uint64_t v17 = (2 * v11);
    }
    size_t v18 = v17 + v11;
    if (v14) {
      BOOL v19 = (unint64_t)&v14[v17 + v11] > v15;
    }
    else {
      BOOL v19 = 1;
    }
    unint64_t v12 = (char *)v13[1];
    if (v19)
    {
      unint64_t v20 = 2 * v13[4];
      if (v20 <= v18 + 1) {
        unint64_t v20 = v18 + 1;
      }
      v13[4] = v20;
      unint64_t v21 = v20 + 8;
      this = (uint64_t *)malloc_type_malloc(v20 + 8, 0xD0263BC5uLL);
      size_t v22 = (char *)this + v21;
      *this = v13[3];
      unint64_t v12 = (char *)(this + 1);
      v13[2] = v22;
      v13[3] = this;
    }
    v13[1] = &v12[v18];
    if (v11) {
      this = (uint64_t *)memcpy(v12, (const void *)v5[1591], v11);
    }
    v5[1591] = (uint64_t)v12;
    LODWORD(v11) = *((_DWORD *)v5 + 3185);
    unsigned int v10 = *((_DWORD *)v5 + 3184);
    goto LABEL_27;
  }
  unint64_t v16 = (unint64_t)&v12[v11 + 1];
  unint64_t v15 = v13[2];
  if (v16 > v15) {
    goto LABEL_12;
  }
  v13[1] = v16;
  LODWORD(v17) = 1;
LABEL_27:
  *((_DWORD *)v5 + 3185) = v11 + v17;
LABEL_28:
  *((_DWORD *)v5 + 3184) = v10 + 1;
  v12[v10] = 76;
  int v23 = *((unsigned __int8 *)v4 + 18);
  if ((v23 - 1) >= 2)
  {
    if (v23 != 5 || !*((_DWORD *)v4 + 2))
    {
      *(_DWORD *)a4 = 0;
      *(void *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 16) = 0;
      return this;
    }
    int v4 = *(swift::Demangle::__runtime::Node **)v4;
  }
  unint64_t v24 = *(swift::Demangle::__runtime::Node **)v4;
}

uint64_t *anonymous namespace'::Remangler::mangleMacro@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6 = *((unsigned __int8 *)a2 + 18);
  unsigned int v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      uint64_t v8 = *(void *)a2;
      unsigned int v7 = *(swift::Demangle::__runtime::Node **)a2;
      goto LABEL_9;
    }
    unsigned int v7 = 0;
  }
  switch(v6)
  {
    case 1:
      uint64_t v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 8);
      if (v7 == (swift::Demangle::__runtime::Node *)((char *)a2 + 8)) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 2:
      uint64_t v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 16);
      if (v7 == (swift::Demangle::__runtime::Node *)((char *)a2 + 16)) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 5:
      uint64_t v8 = *(void *)a2;
LABEL_9:
      uint64_t v9 = (swift::Demangle::__runtime::Node *)(v8 + 8 * *((unsigned int *)a2 + 2));
      if (v7 == v9) {
        goto LABEL_19;
      }
      goto LABEL_16;
  }
  uint64_t v9 = 0;
  if (!v7)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    uint64_t result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "fm", 2uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
LABEL_16:
  unsigned int v10 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4) {
      return result;
    }
    unsigned int v7 = (swift::Demangle::__runtime::Node *)((char *)v7 + 8);
    if (v7 == v9) {
      goto LABEL_19;
    }
  }
}

uint64_t *anonymous namespace'::Remangler::mangleMacroExpansionLoc@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  unsigned int v7 = a3 + 1;
  int v8 = *((unsigned __int8 *)a2 + 18);
  uint64_t v9 = a2;
  if ((v8 - 1) >= 2)
  {
    if (v8 != 5 || !*((_DWORD *)a2 + 2))
    {
      *(_DWORD *)a4 = 0;
      *(void *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 16) = 0;
      goto LABEL_8;
    }
    uint64_t v9 = (swift::Demangle::__runtime::Node **)*a2;
  }
  if (*(_DWORD *)a4) {
    return result;
  }
  int v8 = *((unsigned __int8 *)a2 + 18);
LABEL_8:
  size_t v11 = (swift::Demangle::__runtime::Node *)a2;
  if (v8 == 2) {
    goto LABEL_12;
  }
  if (v8 == 5 && *((_DWORD *)a2 + 2) >= 2u)
  {
    size_t v11 = *a2;
LABEL_12:
    if (*(_DWORD *)a4) {
      return result;
    }
    goto LABEL_15;
  }
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
LABEL_15:
  unint64_t v12 = (uint64_t *)*((void *)*a2 + 3);
  uint64_t v13 = **((void **)*a2 + 2);
  uint64_t v14 = *v12;
  swift::Demangle::__runtime::CharVector::append(this + 1591, "fMX", 3uLL, this[1593]);
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  return result;
}

uint64_t *anonymous namespace'::Remangler::mangleMacroExpansionUniqueName@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  unsigned int v7 = a3 + 1;
  int v8 = *((unsigned __int8 *)a2 + 18);
  uint64_t v9 = a2;
  if ((v8 - 1) < 2)
  {
LABEL_5:
    if (*(_DWORD *)a4) {
      return result;
    }
    int v8 = *((unsigned __int8 *)a2 + 18);
    if (v8 != 5) {
      goto LABEL_13;
    }
    goto LABEL_9;
  }
  if (v8 == 5 && *((_DWORD *)a2 + 2))
  {
    uint64_t v9 = (swift::Demangle::__runtime::Node **)*a2;
    goto LABEL_5;
  }
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  if (v8 != 5) {
    goto LABEL_13;
  }
LABEL_9:
  if (*((_DWORD *)a2 + 2) < 4u || (size_t v11 = (swift::Demangle::__runtime::Node *)*((void *)*a2 + 3)) == 0)
  {
LABEL_15:
    if (*((_DWORD *)a2 + 2) >= 2u)
    {
      unint64_t v12 = *a2;
LABEL_17:
      if (*(_DWORD *)a4) {
        return result;
      }
      goto LABEL_20;
    }
    goto LABEL_19;
  }
  if (*(_DWORD *)a4) {
    return result;
  }
  int v8 = *((unsigned __int8 *)a2 + 18);
LABEL_13:
  unint64_t v12 = (swift::Demangle::__runtime::Node *)a2;
  if (v8 == 2) {
    goto LABEL_17;
  }
  if (v8 == 5) {
    goto LABEL_15;
  }
LABEL_19:
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
LABEL_20:
  uint64_t result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "fMu", 3uLL, this[1593]);
  if (*((unsigned char *)a2 + 18) == 5 && *((_DWORD *)a2 + 2) >= 3u)
  {
    uint64_t v13 = (swift::Demangle::__runtime::Node *)*((void *)*a2 + 2);
  }
  else
  {
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
  }
  return result;
}

uint64_t *anonymous namespace'::Remangler::mangleMaterializeForSet@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = *((unsigned __int8 *)a2 + 18);
  if ((v4 - 1) >= 2)
  {
    if (v4 != 5 || !*((_DWORD *)a2 + 2))
    {
      uint64_t v5 = 0;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  uint64_t v5 = *(void *)a2;
}

uint64_t *anonymous namespace'::Remangler::mangleMemberAttachedMacroExpansion@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  unsigned int v7 = a3 + 1;
  int v8 = *((unsigned __int8 *)a2 + 18);
  uint64_t v9 = a2;
  if ((v8 - 1) >= 2)
  {
    if (v8 != 5 || !*((_DWORD *)a2 + 2))
    {
      *(_DWORD *)a4 = 0;
      *(void *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 16) = 0;
      goto LABEL_8;
    }
    uint64_t v9 = (swift::Demangle::__runtime::Node **)*a2;
  }
  if (*(_DWORD *)a4) {
    return result;
  }
  int v8 = *((unsigned __int8 *)a2 + 18);
LABEL_8:
  size_t v11 = (swift::Demangle::__runtime::Node *)a2;
  if (v8 != 2)
  {
    if (v8 != 5 || *((_DWORD *)a2 + 2) < 2u)
    {
      *(_DWORD *)a4 = 0;
      *(void *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 16) = 0;
      if (v8 != 5) {
        goto LABEL_19;
      }
      goto LABEL_16;
    }
    size_t v11 = *a2;
  }
  if (*(_DWORD *)a4) {
    return result;
  }
  if (*((unsigned char *)a2 + 18) != 5) {
    goto LABEL_19;
  }
LABEL_16:
  if (*((_DWORD *)a2 + 2) > 2u)
  {
    if (*(_DWORD *)a4) {
      return result;
    }
    goto LABEL_20;
  }
LABEL_19:
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
LABEL_20:
  uint64_t result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "fMm", 3uLL, this[1593]);
  if (*((unsigned char *)a2 + 18) == 5 && *((_DWORD *)a2 + 2) >= 4u)
  {
    unint64_t v12 = (swift::Demangle::__runtime::Node *)*((void *)*a2 + 3);
  }
  else
  {
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
  }
  return result;
}

uint64_t *anonymous namespace'::Remangler::mangleMemberAttributeAttachedMacroExpansion@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  unsigned int v7 = a3 + 1;
  int v8 = *((unsigned __int8 *)a2 + 18);
  uint64_t v9 = a2;
  if ((v8 - 1) >= 2)
  {
    if (v8 != 5 || !*((_DWORD *)a2 + 2))
    {
      *(_DWORD *)a4 = 0;
      *(void *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 16) = 0;
      goto LABEL_8;
    }
    uint64_t v9 = (swift::Demangle::__runtime::Node **)*a2;
  }
  if (*(_DWORD *)a4) {
    return result;
  }
  int v8 = *((unsigned __int8 *)a2 + 18);
LABEL_8:
  size_t v11 = (swift::Demangle::__runtime::Node *)a2;
  if (v8 != 2)
  {
    if (v8 != 5 || *((_DWORD *)a2 + 2) < 2u)
    {
      *(_DWORD *)a4 = 0;
      *(void *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 16) = 0;
      if (v8 != 5) {
        goto LABEL_19;
      }
      goto LABEL_16;
    }
    size_t v11 = *a2;
  }
  if (*(_DWORD *)a4) {
    return result;
  }
  if (*((unsigned char *)a2 + 18) != 5) {
    goto LABEL_19;
  }
LABEL_16:
  if (*((_DWORD *)a2 + 2) > 2u)
  {
    if (*(_DWORD *)a4) {
      return result;
    }
    goto LABEL_20;
  }
LABEL_19:
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
LABEL_20:
  uint64_t result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "fMr", 3uLL, this[1593]);
  if (*((unsigned char *)a2 + 18) == 5 && *((_DWORD *)a2 + 2) >= 4u)
  {
    unint64_t v12 = (swift::Demangle::__runtime::Node *)*((void *)*a2 + 3);
  }
  else
  {
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
  }
  return result;
}

uint64_t *anonymous namespace'::Remangler::mangleMetatype@<X0>(uint64_t *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = a2;
  uint64_t v5 = this;
  int v7 = *((unsigned __int8 *)a2 + 18);
  int v8 = a2;
  if ((v7 - 1) >= 2) {
    int v8 = *(swift::Demangle::__runtime::Node **)a2;
  }
  unsigned int v9 = a3 + 1;
  if (*(_WORD *)(*(void *)v8 + 16) != 146)
  {
    if (v7 != 1)
    {
      if (v7 != 5 || *((_DWORD *)a2 + 2) != 1)
      {
        int v19 = 321;
        int v18 = 10;
        goto LABEL_41;
      }
      int v4 = *(swift::Demangle::__runtime::Node **)a2;
    }
    if (*(_DWORD *)a4) {
      return this;
    }
    unsigned int v11 = *((_DWORD *)v5 + 3184);
    size_t v12 = *((unsigned int *)v5 + 3185);
    uint64_t v13 = (char *)v5[1591];
    if (v11 < v12)
    {
LABEL_40:
      int v18 = 0;
      int v4 = 0;
      int v19 = 0;
      *((_DWORD *)v5 + 3184) = v11 + 1;
      v13[v11] = 109;
      goto LABEL_41;
    }
    uint64_t v14 = (void *)v5[1593];
    unint64_t v15 = (char *)v14[1];
    if (&v13[v12] == v15)
    {
      unint64_t v20 = (unint64_t)&v13[v12 + 1];
      unint64_t v16 = v14[2];
      if (v20 <= v16)
      {
        v14[1] = v20;
        LODWORD(v21) = 1;
LABEL_39:
        *((_DWORD *)v5 + 3185) = v12 + v21;
        goto LABEL_40;
      }
    }
    else
    {
      unint64_t v16 = v14[2];
    }
    if ((2 * v12) <= 4) {
      uint64_t v21 = 4;
    }
    else {
      uint64_t v21 = (2 * v12);
    }
    size_t v22 = v21 + v12;
    if (!v15 || (unint64_t)&v15[v22] > v16)
    {
      unint64_t v23 = 2 * v14[4];
      if (v23 <= v22 + 1) {
        unint64_t v23 = v22 + 1;
      }
      v14[4] = v23;
      unint64_t v24 = v23 + 8;
      this = (uint64_t *)malloc_type_malloc(v23 + 8, 0xD0263BC5uLL);
      unint64_t v25 = (char *)this + v24;
      *this = v14[3];
      unint64_t v15 = (char *)(this + 1);
      v14[2] = v25;
      v14[3] = this;
    }
    v14[1] = &v15[v22];
    if (v12) {
      this = (uint64_t *)memcpy(v15, (const void *)v5[1591], v12);
    }
    v5[1591] = (uint64_t)v15;
    LODWORD(v12) = *((_DWORD *)v5 + 3185);
    uint64_t v13 = v15;
    unsigned int v11 = *((_DWORD *)v5 + 3184);
    goto LABEL_39;
  }
  unsigned int v10 = a2;
  if (v7 != 2)
  {
    if (v7 != 5 || *((_DWORD *)a2 + 2) < 2u)
    {
      *(_DWORD *)a4 = 0;
      *(void *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 16) = 0;
      goto LABEL_19;
    }
    unsigned int v10 = *(swift::Demangle::__runtime::Node **)a2;
  }
  if (*(_DWORD *)a4) {
    return this;
  }
LABEL_19:
  this = (uint64_t *)swift::Demangle::__runtime::CharVector::append((char **)v5 + 1591, "XM", 2uLL, (void *)v5[1593]);
  int v17 = *((unsigned __int8 *)v4 + 18);
  if ((v17 - 1) < 2) {
    goto LABEL_23;
  }
  if (v17 == 5 && *((_DWORD *)v4 + 2))
  {
    int v4 = *(swift::Demangle::__runtime::Node **)v4;
LABEL_23:
    if (*(_DWORD *)a4) {
      return this;
    }
  }
  int v18 = 0;
  int v4 = 0;
  int v19 = 0;
LABEL_41:
  *(_DWORD *)a4 = v18;
  *(void *)(a4 + 8) = v4;
  *(_DWORD *)(a4 + 16) = v19;
  return this;
}

uint64_t anonymous namespace'::Remangler::mangleMetatypeRepresentation@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3 = a2;
  uint64_t result = *(void *)a2;
  uint64_t v7 = *((void *)a2 + 1);
  if (v7 == 14)
  {
    uint64_t result = memcmp((const void *)result, "@objc_metatype", 0xEuLL);
    if (result) {
      goto LABEL_17;
    }
    unsigned int v9 = (_DWORD *)((char *)this + 12736);
    unsigned int v10 = *((_DWORD *)this + 3184);
    size_t v16 = *((unsigned int *)this + 3185);
    size_t v12 = (char *)*((void *)this + 1591);
    if (v10 < v16) {
      goto LABEL_60;
    }
    int v17 = (void *)*((void *)this + 1593);
    int v18 = (char *)v17[1];
    if (&v12[v16] == v18)
    {
      unint64_t v27 = (unint64_t)&v12[v16 + 1];
      unint64_t v19 = v17[2];
      if (v27 <= v19)
      {
        v17[1] = v27;
        LODWORD(v28) = 1;
LABEL_59:
        *((_DWORD *)this + 3185) = v16 + v28;
LABEL_60:
        char v23 = 111;
        goto LABEL_66;
      }
    }
    else
    {
      unint64_t v19 = v17[2];
    }
    if ((2 * v16) <= 4) {
      uint64_t v28 = 4;
    }
    else {
      uint64_t v28 = (2 * v16);
    }
    size_t v29 = v28 + v16;
    if (!v18 || (unint64_t)&v18[v29] > v19)
    {
      unint64_t v30 = 2 * v17[4];
      if (v30 <= v29 + 1) {
        unint64_t v30 = v29 + 1;
      }
      v17[4] = v30;
      unint64_t v31 = v30 + 8;
      uint64_t result = (uint64_t)malloc_type_malloc(v30 + 8, 0xD0263BC5uLL);
      uint64_t v32 = result + v31;
      *(void *)uint64_t result = v17[3];
      int v18 = (char *)(result + 8);
      v17[2] = v32;
      v17[3] = result;
    }
    v17[1] = &v18[v29];
    if (v16) {
      uint64_t result = (uint64_t)memcpy(v18, *((const void **)this + 1591), v16);
    }
    *((void *)this + 1591) = v18;
    LODWORD(v16) = *((_DWORD *)this + 3185);
    size_t v12 = v18;
    unsigned int v10 = *((_DWORD *)this + 3184);
    goto LABEL_59;
  }
  if (v7 != 6)
  {
    if (v7 != 5) {
      goto LABEL_17;
    }
    if (*(_DWORD *)result != 1768453184 || *(unsigned char *)(result + 4) != 110) {
      goto LABEL_17;
    }
    unsigned int v9 = (_DWORD *)((char *)this + 12736);
    unsigned int v10 = *((_DWORD *)this + 3184);
    size_t v11 = *((unsigned int *)this + 3185);
    size_t v12 = (char *)*((void *)this + 1591);
    if (v10 < v11) {
      goto LABEL_65;
    }
    uint64_t v13 = (void *)*((void *)this + 1593);
    uint64_t v14 = (char *)v13[1];
    if (&v12[v11] == v14)
    {
      unint64_t v39 = (unint64_t)&v12[v11 + 1];
      unint64_t v15 = v13[2];
      if (v39 <= v15)
      {
        v13[1] = v39;
        LODWORD(v40) = 1;
LABEL_64:
        *((_DWORD *)this + 3185) = v11 + v40;
LABEL_65:
        char v23 = 116;
        goto LABEL_66;
      }
    }
    else
    {
      unint64_t v15 = v13[2];
    }
    if ((2 * v11) <= 4) {
      uint64_t v40 = 4;
    }
    else {
      uint64_t v40 = (2 * v11);
    }
    size_t v41 = v40 + v11;
    if (!v14 || (unint64_t)&v14[v41] > v15)
    {
      unint64_t v42 = 2 * v13[4];
      if (v42 <= v41 + 1) {
        unint64_t v42 = v41 + 1;
      }
      v13[4] = v42;
      unint64_t v43 = v42 + 8;
      uint64_t result = (uint64_t)malloc_type_malloc(v42 + 8, 0xD0263BC5uLL);
      uint64_t v44 = result + v43;
      *(void *)uint64_t result = v13[3];
      uint64_t v14 = (char *)(result + 8);
      v13[2] = v44;
      v13[3] = result;
    }
    v13[1] = &v14[v41];
    if (v11) {
      uint64_t result = (uint64_t)memcpy(v14, *((const void **)this + 1591), v11);
    }
    *((void *)this + 1591) = v14;
    LODWORD(v11) = *((_DWORD *)this + 3185);
    size_t v12 = v14;
    unsigned int v10 = *((_DWORD *)this + 3184);
    goto LABEL_64;
  }
  uint64_t result = memcmp((const void *)result, "@thick", 6uLL);
  if (!result)
  {
    unsigned int v9 = (_DWORD *)((char *)this + 12736);
    unsigned int v10 = *((_DWORD *)this + 3184);
    size_t v22 = *((unsigned int *)this + 3185);
    size_t v12 = (char *)*((void *)this + 1591);
    if (v10 < v22)
    {
      char v23 = 84;
LABEL_66:
      int v21 = 0;
      uint64_t v3 = 0;
      int v20 = 0;
      *unsigned int v9 = v10 + 1;
      v12[v10] = v23;
      goto LABEL_67;
    }
    unint64_t v24 = (void *)*((void *)this + 1593);
    unint64_t v25 = (char *)v24[1];
    if (&v12[v22] == v25)
    {
      unint64_t v33 = (unint64_t)&v12[v22 + 1];
      unint64_t v26 = v24[2];
      if (v33 <= v26)
      {
        v24[1] = v33;
        LODWORD(v34) = 1;
LABEL_62:
        *((_DWORD *)this + 3185) = v22 + v34;
        char v23 = 84;
        goto LABEL_66;
      }
    }
    else
    {
      unint64_t v26 = v24[2];
    }
    if ((2 * v22) <= 4) {
      uint64_t v34 = 4;
    }
    else {
      uint64_t v34 = (2 * v22);
    }
    size_t v35 = v34 + v22;
    if (!v25 || (unint64_t)&v25[v35] > v26)
    {
      unint64_t v36 = 2 * v24[4];
      if (v36 <= v35 + 1) {
        unint64_t v36 = v35 + 1;
      }
      v24[4] = v36;
      unint64_t v37 = v36 + 8;
      uint64_t result = (uint64_t)malloc_type_malloc(v36 + 8, 0xD0263BC5uLL);
      uint64_t v38 = result + v37;
      *(void *)uint64_t result = v24[3];
      unint64_t v25 = (char *)(result + 8);
      void v24[2] = v38;
      v24[3] = result;
    }
    v24[1] = &v25[v35];
    if (v22) {
      uint64_t result = (uint64_t)memcpy(v25, *((const void **)this + 1591), v22);
    }
    *((void *)this + 1591) = v25;
    LODWORD(v22) = *((_DWORD *)this + 3185);
    size_t v12 = v25;
    unsigned int v10 = *((_DWORD *)this + 3184);
    goto LABEL_62;
  }
LABEL_17:
  int v20 = 2316;
  int v21 = 20;
LABEL_67:
  *(_DWORD *)a3 = v21;
  *(void *)(a3 + 8) = v3;
  *(_DWORD *)(a3 + 16) = v20;
  return result;
}

uint64_t *anonymous namespace'::Remangler::mangleMetaclass@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6 = *((unsigned __int8 *)a2 + 18);
  uint64_t v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      uint64_t v8 = *(void *)a2;
      uint64_t v7 = *(swift::Demangle::__runtime::Node **)a2;
      goto LABEL_9;
    }
    uint64_t v7 = 0;
  }
  switch(v6)
  {
    case 1:
      unsigned int v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 8);
      if (v7 == (swift::Demangle::__runtime::Node *)((char *)a2 + 8)) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 2:
      unsigned int v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 16);
      if (v7 == (swift::Demangle::__runtime::Node *)((char *)a2 + 16)) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 5:
      uint64_t v8 = *(void *)a2;
LABEL_9:
      unsigned int v9 = (swift::Demangle::__runtime::Node *)(v8 + 8 * *((unsigned int *)a2 + 2));
      if (v7 == v9) {
        goto LABEL_19;
      }
      goto LABEL_16;
  }
  unsigned int v9 = 0;
  if (!v7)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    uint64_t result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "Mm", 2uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
LABEL_16:
  unsigned int v10 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4) {
      return result;
    }
    uint64_t v7 = (swift::Demangle::__runtime::Node *)((char *)v7 + 8);
    if (v7 == v9) {
      goto LABEL_19;
    }
  }
}

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleMethodLookupFunction@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      int v8 = 321;
      int v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  if (*(_DWORD *)a4) {
    return this;
  }
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::__runtime::CharVector::append((char **)v4 + 1591, "Mu", 2uLL, *((void **)v4 + 1593));
  int v7 = 0;
  a2 = 0;
  int v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleObjCMetadataUpdateFunction@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      int v8 = 321;
      int v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  if (*(_DWORD *)a4) {
    return this;
  }
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::__runtime::CharVector::append((char **)v4 + 1591, "MU", 2uLL, *((void **)v4 + 1593));
  int v7 = 0;
  a2 = 0;
  int v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleObjCResilientClassStub@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      int v8 = 321;
      int v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  if (*(_DWORD *)a4) {
    return this;
  }
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::__runtime::CharVector::append((char **)v4 + 1591, "Ms", 2uLL, *((void **)v4 + 1593));
  int v7 = 0;
  a2 = 0;
  int v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleFullObjCResilientClassStub@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      int v8 = 321;
      int v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  if (*(_DWORD *)a4) {
    return this;
  }
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::__runtime::CharVector::append((char **)v4 + 1591, "Mt", 2uLL, *((void **)v4 + 1593));
  int v7 = 0;
  a2 = 0;
  int v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

uint64_t *anonymous namespace'::Remangler::mangleModifyAccessor@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = *((unsigned __int8 *)a2 + 18);
  if ((v4 - 1) >= 2)
  {
    if (v4 != 5 || !*((_DWORD *)a2 + 2))
    {
      uint64_t v5 = 0;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  uint64_t v5 = *(void *)a2;
}

void anonymous namespace'::Remangler::mangleModule(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, uint64_t a3@<X8>)
{
  int v6 = *(unsigned __int16 **)a2;
  uint64_t v7 = *((void *)a2 + 1);
  switch(v7)
  {
    case 3:
      int v17 = *v6;
      int v18 = *((unsigned __int8 *)v6 + 2);
      if (v17 != 24415 || v18 != 67) {
        break;
      }
      int v20 = (char **)((char *)this + 12728);
      int v21 = (void *)*((void *)this + 1593);
      size_t v22 = "So";
      goto LABEL_27;
    case 15:
      uint64_t v23 = *(void *)v6;
      uint64_t v24 = *(void *)((char *)v6 + 7);
      if (v23 != 0x746E79535F435F5FLL || v24 != 0x64657A6973656874) {
        break;
      }
      int v20 = (char **)((char *)this + 12728);
      int v21 = (void *)*((void *)this + 1593);
      size_t v22 = "SC";
LABEL_27:
      swift::Demangle::__runtime::CharVector::append(v20, v22, 2uLL, v21);
      goto LABEL_43;
    case 5:
      int v8 = *(_DWORD *)v6;
      int v9 = *((unsigned __int8 *)v6 + 4);
      if (v8 == 1718187859 && v9 == 116)
      {
        unsigned int v11 = *((_DWORD *)this + 3184);
        size_t v12 = *((unsigned int *)this + 3185);
        uint64_t v13 = (char *)*((void *)this + 1591);
        if (v11 < v12)
        {
LABEL_42:
          *((_DWORD *)this + 3184) = v11 + 1;
          v13[v11] = 115;
          goto LABEL_43;
        }
        uint64_t v14 = (void *)*((void *)this + 1593);
        unint64_t v15 = (char *)v14[1];
        if (&v13[v12] == v15)
        {
          unint64_t v29 = (unint64_t)&v13[v12 + 1];
          unint64_t v16 = v14[2];
          if (v29 <= v16)
          {
            v14[1] = v29;
            LODWORD(v30) = 1;
LABEL_41:
            *((_DWORD *)this + 3185) = v12 + v30;
            goto LABEL_42;
          }
        }
        else
        {
          unint64_t v16 = v14[2];
        }
        if ((2 * v12) <= 4) {
          uint64_t v30 = 4;
        }
        else {
          uint64_t v30 = (2 * v12);
        }
        size_t v31 = v30 + v12;
        if (!v15 || (unint64_t)&v15[v31] > v16)
        {
          unint64_t v32 = 2 * v14[4];
          if (v32 <= v31 + 1) {
            unint64_t v32 = v31 + 1;
          }
          v14[4] = v32;
          unint64_t v33 = v32 + 8;
          uint64_t v34 = malloc_type_malloc(v32 + 8, 0xD0263BC5uLL);
          void *v34 = v14[3];
          unint64_t v15 = (char *)(v34 + 1);
          v14[2] = (char *)v34 + v33;
          v14[3] = v34;
        }
        v14[1] = &v15[v31];
        if (v12) {
          memcpy(v15, *((const void **)this + 1591), v12);
        }
        *((void *)this + 1591) = v15;
        LODWORD(v12) = *((_DWORD *)this + 3185);
        uint64_t v13 = v15;
        unsigned int v11 = *((_DWORD *)this + 3184);
        goto LABEL_41;
      }
      break;
  }
  long long v35 = 0uLL;
  LOBYTE(v36) = 0;
  {
    unint64_t v26 = *((void *)this + 1585);
    if (v26 > 0xF)
    {
      int v28 = *((_DWORD *)this + 3178) + 16;
      long long v37 = v35;
      uint64_t v38 = v36;
      int v39 = v28;
      std::__hash_table<std::__hash_value_type<swift::Demangle::__runtime::SubstitutionEntry,unsigned int>,std::__unordered_map_hasher<swift::Demangle::__runtime::SubstitutionEntry,std::__hash_value_type<swift::Demangle::__runtime::SubstitutionEntry,unsigned int>,swift::Demangle::__runtime::SubstitutionEntry::Hasher,std::equal_to<swift::Demangle::__runtime::SubstitutionEntry>,true>,std::__unordered_map_equal<swift::Demangle::__runtime::SubstitutionEntry,std::__hash_value_type<swift::Demangle::__runtime::SubstitutionEntry,unsigned int>,std::equal_to<swift::Demangle::__runtime::SubstitutionEntry>,swift::Demangle::__runtime::SubstitutionEntry::Hasher,true>,std::allocator<std::__hash_value_type<swift::Demangle::__runtime::SubstitutionEntry,unsigned int>>>::__emplace_unique_key_args<swift::Demangle::__runtime::SubstitutionEntry,std::pair<swift::Demangle::__runtime::SubstitutionEntry const,unsigned int>>((uint64_t)this + 12688, (uint64_t)&v37, &v37);
    }
    else
    {
      *((void *)this + 1585) = v26 + 1;
      unint64_t v27 = (char *)this + 24 * v26 + 12296;
      *(_OWORD *)unint64_t v27 = v35;
      v27[16] = v36;
    }
  }
LABEL_43:
  *(_DWORD *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 16) = 0;
}

uint64_t *anonymous namespace'::Remangler::mangleNativeOwningAddressor@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = *((unsigned __int8 *)a2 + 18);
  if ((v4 - 1) >= 2)
  {
    if (v4 != 5 || !*((_DWORD *)a2 + 2))
    {
      uint64_t v5 = 0;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  uint64_t v5 = *(void *)a2;
}

uint64_t *anonymous namespace'::Remangler::mangleNativeOwningMutableAddressor@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = *((unsigned __int8 *)a2 + 18);
  if ((v4 - 1) >= 2)
  {
    if (v4 != 5 || !*((_DWORD *)a2 + 2))
    {
      uint64_t v5 = 0;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  uint64_t v5 = *(void *)a2;
}

uint64_t *anonymous namespace'::Remangler::mangleNativePinningAddressor@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = *((unsigned __int8 *)a2 + 18);
  if ((v4 - 1) >= 2)
  {
    if (v4 != 5 || !*((_DWORD *)a2 + 2))
    {
      uint64_t v5 = 0;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  uint64_t v5 = *(void *)a2;
}

uint64_t *anonymous namespace'::Remangler::mangleNativePinningMutableAddressor@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = *((unsigned __int8 *)a2 + 18);
  if ((v4 - 1) >= 2)
  {
    if (v4 != 5 || !*((_DWORD *)a2 + 2))
    {
      uint64_t v5 = 0;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  uint64_t v5 = *(void *)a2;
}

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleNominalTypeDescriptor@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      int v8 = 321;
      int v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  if (*(_DWORD *)a4) {
    return this;
  }
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::__runtime::CharVector::append((char **)v4 + 1591, "Mn", 2uLL, *((void **)v4 + 1593));
  int v7 = 0;
  a2 = 0;
  int v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleNominalTypeDescriptorRecord@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      int v8 = 321;
      int v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  if (*(_DWORD *)a4) {
    return this;
  }
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::__runtime::CharVector::append((char **)v4 + 1591, "Hn", 2uLL, *((void **)v4 + 1593));
  int v7 = 0;
  a2 = 0;
  int v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

uint64_t *anonymous namespace'::Remangler::mangleObjCAsyncCompletionHandlerImpl@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  unsigned int v7 = a3 + 1;
  int v8 = *((unsigned __int8 *)a2 + 18);
  int v9 = a2;
  if ((v8 - 1) >= 2)
  {
    if (v8 != 5 || !*((_DWORD *)a2 + 2))
    {
      *(_DWORD *)a4 = 0;
      *(void *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 16) = 0;
      goto LABEL_8;
    }
    int v9 = (swift::Demangle::__runtime::Node **)*a2;
  }
  if (*(_DWORD *)a4) {
    return result;
  }
  int v8 = *((unsigned __int8 *)a2 + 18);
LABEL_8:
  unsigned int v11 = (swift::Demangle::__runtime::Node *)a2;
  if (v8 == 2) {
    goto LABEL_12;
  }
  if (v8 == 5 && *((_DWORD *)a2 + 2) >= 2u)
  {
    unsigned int v11 = *a2;
LABEL_12:
    if (*(_DWORD *)a4) {
      return result;
    }
    if (*((unsigned char *)a2 + 18) != 5) {
      goto LABEL_18;
    }
LABEL_16:
    if (*((_DWORD *)a2 + 2) == 4)
    {
      if (*(_DWORD *)a4) {
        return result;
      }
    }
    goto LABEL_18;
  }
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  if (v8 == 5) {
    goto LABEL_16;
  }
LABEL_18:
  uint64_t result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "Tz", 2uLL, this[1593]);
  if (*((unsigned char *)a2 + 18) == 5 && *((_DWORD *)a2 + 2) >= 3u)
  {
    size_t v12 = (swift::Demangle::__runtime::Node *)*((void *)*a2 + 2);
  }
  else
  {
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
  }
  return result;
}

uint64_t *anonymous namespace'::Remangler::manglePredefinedObjCAsyncCompletionHandlerImpl@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6 = *((unsigned __int8 *)a2 + 18);
  unsigned int v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      uint64_t v8 = *(void *)a2;
      unsigned int v7 = *(swift::Demangle::__runtime::Node **)a2;
      goto LABEL_9;
    }
    unsigned int v7 = 0;
  }
  switch(v6)
  {
    case 1:
      int v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 8);
      if (v7 == (swift::Demangle::__runtime::Node *)((char *)a2 + 8)) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 2:
      int v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 16);
      if (v7 == (swift::Demangle::__runtime::Node *)((char *)a2 + 16)) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 5:
      uint64_t v8 = *(void *)a2;
LABEL_9:
      int v9 = (swift::Demangle::__runtime::Node *)(v8 + 8 * *((unsigned int *)a2 + 2));
      if (v7 == v9) {
        goto LABEL_19;
      }
      goto LABEL_16;
  }
  int v9 = 0;
  if (!v7)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    uint64_t result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "TZ", 2uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
LABEL_16:
  unsigned int v10 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4) {
      return result;
    }
    unsigned int v7 = (swift::Demangle::__runtime::Node *)((char *)v7 + 8);
    if (v7 == v9) {
      goto LABEL_19;
    }
  }
}

uint64_t *anonymous namespace'::Remangler::mangleObjCBlock@<X0>(swift::Demangle::__runtime::NodeFactory **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = a2;
  uint64_t v7 = *((unsigned __int8 *)a2 + 18);
  uint64_t v8 = a2;
  if ((v7 - 1) >= 2)
  {
    if (v7 != 5)
    {
LABEL_11:
      switch(v7)
      {
        case 1:
LABEL_16:
          unsigned int v10 = a3 + 1;
          uint64_t v11 = v7 - 1;
          while (1)
          {
            unint64_t v12 = *((unsigned __int8 *)v4 + 18);
            unsigned int v13 = v12 - 1;
            if (v12 != 1)
            {
              if (v12 == 5)
              {
                unint64_t v12 = *((unsigned int *)v4 + 2);
              }
              else
              {
                if (v12 != 2) {
                  goto LABEL_17;
                }
                unint64_t v12 = 2;
              }
            }
            if (v12 > v11)
            {
              uint64_t v14 = v4;
              if (v13 >= 2) {
                uint64_t v14 = *(swift::Demangle::__runtime::Node **)v4;
              }
              if (*(_DWORD *)a4) {
                return result;
              }
              goto LABEL_18;
            }
LABEL_17:
            *(_DWORD *)a4 = 0;
            *(void *)(a4 + 8) = 0;
            *(_DWORD *)(a4 + 16) = 0;
LABEL_18:
            if (--v11 == -1) {
              goto LABEL_29;
            }
          }
        case 5:
          uint64_t v7 = *((unsigned int *)a2 + 2);
          if (v7) {
            goto LABEL_16;
          }
          break;
        case 2:
          uint64_t v7 = 2;
          goto LABEL_16;
      }
LABEL_29:
      *(_DWORD *)a4 = 0;
      *(void *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 16) = 0;
      unint64_t v16 = (char **)(this + 1591);
      int v17 = this[1593];
      int v18 = "XB";
      size_t v19 = 2;
      goto LABEL_51;
    }
    if (!*((_DWORD *)a2 + 2)) {
      goto LABEL_29;
    }
    uint64_t v8 = *(swift::Demangle::__runtime::Node **)a2;
  }
  if (*(_WORD *)(*(void *)v8 + 16) != 23) {
    goto LABEL_11;
  }
  if (v7 != 1)
  {
    if (v7 == 5)
    {
      uint64_t v7 = *((unsigned int *)a2 + 2);
    }
    else
    {
      BOOL v9 = v7 == 2;
      uint64_t v7 = 2;
      if (!v9) {
        uint64_t v7 = 0;
      }
    }
  }
  unsigned int v20 = a3 + 1;
  uint64_t v21 = v7 - 1;
  while (v21)
  {
    unint64_t v22 = *((unsigned __int8 *)v4 + 18);
    unsigned int v23 = v22 - 1;
    if (v22 != 1)
    {
      if (v22 == 5)
      {
        unint64_t v22 = *((unsigned int *)v4 + 2);
      }
      else
      {
        if (v22 != 2) {
          goto LABEL_32;
        }
        unint64_t v22 = 2;
      }
    }
    if (v22 <= v21)
    {
LABEL_32:
      *(_DWORD *)a4 = 0;
      *(void *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 16) = 0;
      --v21;
    }
    else
    {
      uint64_t v24 = v4;
      if (v23 >= 2) {
        uint64_t v24 = *(swift::Demangle::__runtime::Node **)v4;
      }
      if (*(_DWORD *)a4) {
        return result;
      }
    }
  }
  swift::Demangle::__runtime::CharVector::append((char **)this + 1591, "XzB", 3uLL, this[1593]);
  int v25 = *((unsigned __int8 *)v4 + 18);
  if ((v25 - 1) < 2) {
    goto LABEL_48;
  }
  if (v25 == 5 && *((_DWORD *)v4 + 2))
  {
    int v4 = *(swift::Demangle::__runtime::Node **)v4;
LABEL_48:
    unint64_t v26 = *(swift::Demangle::__runtime::Node **)v4;
  }
  else
  {
    unint64_t v26 = 0;
  }
  swift::Demangle::__runtime::CharVector::append((unsigned int *)this + 3182, *((void *)v26 + 1), this[1593]);
  int v18 = *(const char **)v26;
  size_t v19 = *((void *)v26 + 1);
  int v17 = this[1593];
  unint64_t v16 = (char **)(this + 1591);
LABEL_51:
  uint64_t result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(v16, v18, v19, v17);
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  return result;
}

uint64_t *anonymous namespace'::Remangler::mangleEscapingObjCBlock@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v7 = *((unsigned __int8 *)a2 + 18);
  switch(v7)
  {
    case 1:
      goto LABEL_6;
    case 5:
      uint64_t v7 = *((unsigned int *)a2 + 2);
      if (v7) {
        goto LABEL_6;
      }
      break;
    case 2:
      uint64_t v7 = 2;
LABEL_6:
      unsigned int v8 = a3 + 1;
      for (uint64_t i = v7 - 1; i != -1; --i)
      {
        unint64_t v10 = *((unsigned __int8 *)a2 + 18);
        unsigned int v11 = v10 - 1;
        if (v10 != 1)
        {
          if (v10 == 5)
          {
            unint64_t v10 = *((unsigned int *)a2 + 2);
          }
          else
          {
            if (v10 != 2) {
              goto LABEL_7;
            }
            unint64_t v10 = 2;
          }
        }
        if (v10 <= i)
        {
LABEL_7:
          *(_DWORD *)a4 = 0;
          *(void *)(a4 + 8) = 0;
          *(_DWORD *)(a4 + 16) = 0;
          continue;
        }
        unint64_t v12 = a2;
        if (v11 >= 2) {
          unint64_t v12 = *(swift::Demangle::__runtime::Node **)a2;
        }
        if (*(_DWORD *)a4) {
          return result;
        }
      }
      break;
  }
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  uint64_t result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "XL", 2uLL, this[1593]);
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  return result;
}

uint64_t *anonymous namespace'::Remangler::mangleOwningAddressor@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = *((unsigned __int8 *)a2 + 18);
  if ((v4 - 1) >= 2)
  {
    if (v4 != 5 || !*((_DWORD *)a2 + 2))
    {
      uint64_t v5 = 0;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  uint64_t v5 = *(void *)a2;
}

uint64_t *anonymous namespace'::Remangler::mangleOwningMutableAddressor@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = *((unsigned __int8 *)a2 + 18);
  if ((v4 - 1) >= 2)
  {
    if (v4 != 5 || !*((_DWORD *)a2 + 2))
    {
      uint64_t v5 = 0;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  uint64_t v5 = *(void *)a2;
}

uint64_t *anonymous namespace'::Remangler::manglePartialApplyForwarder@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v7 = *((unsigned __int8 *)a2 + 18);
  switch(v7)
  {
    case 1:
      goto LABEL_6;
    case 5:
      uint64_t v7 = *((unsigned int *)a2 + 2);
      if (v7) {
        goto LABEL_6;
      }
      break;
    case 2:
      uint64_t v7 = 2;
LABEL_6:
      unsigned int v8 = a3 + 1;
      for (uint64_t i = v7 - 1; i != -1; --i)
      {
        unint64_t v10 = *((unsigned __int8 *)a2 + 18);
        unsigned int v11 = v10 - 1;
        if (v10 != 1)
        {
          if (v10 == 5)
          {
            unint64_t v10 = *((unsigned int *)a2 + 2);
          }
          else
          {
            if (v10 != 2) {
              goto LABEL_7;
            }
            unint64_t v10 = 2;
          }
        }
        if (v10 <= i)
        {
LABEL_7:
          *(_DWORD *)a4 = 0;
          *(void *)(a4 + 8) = 0;
          *(_DWORD *)(a4 + 16) = 0;
          continue;
        }
        unint64_t v12 = a2;
        if (v11 >= 2) {
          unint64_t v12 = *(swift::Demangle::__runtime::Node **)a2;
        }
        if (*(_DWORD *)a4) {
          return result;
        }
      }
      break;
  }
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  uint64_t result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "TA", 2uLL, this[1593]);
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  return result;
}

uint64_t *anonymous namespace'::Remangler::manglePartialApplyObjCForwarder@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v7 = *((unsigned __int8 *)a2 + 18);
  switch(v7)
  {
    case 1:
      goto LABEL_6;
    case 5:
      uint64_t v7 = *((unsigned int *)a2 + 2);
      if (v7) {
        goto LABEL_6;
      }
      break;
    case 2:
      uint64_t v7 = 2;
LABEL_6:
      unsigned int v8 = a3 + 1;
      for (uint64_t i = v7 - 1; i != -1; --i)
      {
        unint64_t v10 = *((unsigned __int8 *)a2 + 18);
        unsigned int v11 = v10 - 1;
        if (v10 != 1)
        {
          if (v10 == 5)
          {
            unint64_t v10 = *((unsigned int *)a2 + 2);
          }
          else
          {
            if (v10 != 2) {
              goto LABEL_7;
            }
            unint64_t v10 = 2;
          }
        }
        if (v10 <= i)
        {
LABEL_7:
          *(_DWORD *)a4 = 0;
          *(void *)(a4 + 8) = 0;
          *(_DWORD *)(a4 + 16) = 0;
          continue;
        }
        unint64_t v12 = a2;
        if (v11 >= 2) {
          unint64_t v12 = *(swift::Demangle::__runtime::Node **)a2;
        }
        if (*(_DWORD *)a4) {
          return result;
        }
      }
      break;
  }
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  uint64_t result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "Ta", 2uLL, this[1593]);
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  return result;
}

uint64_t *anonymous namespace'::Remangler::manglePeerAttachedMacroExpansion@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  unsigned int v7 = a3 + 1;
  int v8 = *((unsigned __int8 *)a2 + 18);
  BOOL v9 = a2;
  if ((v8 - 1) >= 2)
  {
    if (v8 != 5 || !*((_DWORD *)a2 + 2))
    {
      *(_DWORD *)a4 = 0;
      *(void *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 16) = 0;
      goto LABEL_8;
    }
    BOOL v9 = (swift::Demangle::__runtime::Node **)*a2;
  }
  if (*(_DWORD *)a4) {
    return result;
  }
  int v8 = *((unsigned __int8 *)a2 + 18);
LABEL_8:
  unsigned int v11 = (swift::Demangle::__runtime::Node *)a2;
  if (v8 != 2)
  {
    if (v8 != 5 || *((_DWORD *)a2 + 2) < 2u)
    {
      *(_DWORD *)a4 = 0;
      *(void *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 16) = 0;
      if (v8 != 5) {
        goto LABEL_19;
      }
      goto LABEL_16;
    }
    unsigned int v11 = *a2;
  }
  if (*(_DWORD *)a4) {
    return result;
  }
  if (*((unsigned char *)a2 + 18) != 5) {
    goto LABEL_19;
  }
LABEL_16:
  if (*((_DWORD *)a2 + 2) > 2u)
  {
    if (*(_DWORD *)a4) {
      return result;
    }
    goto LABEL_20;
  }
LABEL_19:
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
LABEL_20:
  uint64_t result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "fMp", 3uLL, this[1593]);
  if (*((unsigned char *)a2 + 18) == 5 && *((_DWORD *)a2 + 2) >= 4u)
  {
    unint64_t v12 = (swift::Demangle::__runtime::Node *)*((void *)*a2 + 3);
  }
  else
  {
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
  }
  return result;
}

void *anonymous namespace'::Remangler::manglePostfixOperator@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result = swift::Demangle::__runtime::CharVector::append(this + 1591, "oP", 2uLL, this[1593]);
  *(_DWORD *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 16) = 0;
  return result;
}

uint64_t *anonymous namespace'::Remangler::manglePreambleAttachedMacroExpansion@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  unsigned int v7 = a3 + 1;
  int v8 = *((unsigned __int8 *)a2 + 18);
  BOOL v9 = a2;
  if ((v8 - 1) >= 2)
  {
    if (v8 != 5 || !*((_DWORD *)a2 + 2))
    {
      *(_DWORD *)a4 = 0;
      *(void *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 16) = 0;
      goto LABEL_8;
    }
    BOOL v9 = (swift::Demangle::__runtime::Node **)*a2;
  }
  if (*(_DWORD *)a4) {
    return result;
  }
  int v8 = *((unsigned __int8 *)a2 + 18);
LABEL_8:
  unsigned int v11 = (swift::Demangle::__runtime::Node *)a2;
  if (v8 != 2)
  {
    if (v8 != 5 || *((_DWORD *)a2 + 2) < 2u)
    {
      *(_DWORD *)a4 = 0;
      *(void *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 16) = 0;
      if (v8 != 5) {
        goto LABEL_19;
      }
      goto LABEL_16;
    }
    unsigned int v11 = *a2;
  }
  if (*(_DWORD *)a4) {
    return result;
  }
  if (*((unsigned char *)a2 + 18) != 5) {
    goto LABEL_19;
  }
LABEL_16:
  if (*((_DWORD *)a2 + 2) > 2u)
  {
    if (*(_DWORD *)a4) {
      return result;
    }
    goto LABEL_20;
  }
LABEL_19:
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
LABEL_20:
  uint64_t result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "fMq", 3uLL, this[1593]);
  if (*((unsigned char *)a2 + 18) == 5 && *((_DWORD *)a2 + 2) >= 4u)
  {
    unint64_t v12 = (swift::Demangle::__runtime::Node *)*((void *)*a2 + 3);
  }
  else
  {
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
  }
  return result;
}

void *anonymous namespace'::Remangler::manglePrefixOperator@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result = swift::Demangle::__runtime::CharVector::append(this + 1591, "op", 2uLL, this[1593]);
  *(_DWORD *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 16) = 0;
  return result;
}

uint64_t *anonymous namespace'::Remangler::manglePrivateDeclName@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v7 = *((unsigned __int8 *)a2 + 18);
  if (v7 != 1)
  {
    if (v7 == 5)
    {
      uint64_t v7 = *((unsigned int *)a2 + 2);
      if (!v7)
      {
        *(_DWORD *)a4 = 0;
        *(void *)(a4 + 8) = 0;
        *(_DWORD *)(a4 + 16) = 0;
        uint64_t v14 = (char **)((char *)this + 12728);
        goto LABEL_24;
      }
    }
    else
    {
      if (v7 != 2) {
        goto LABEL_20;
      }
      uint64_t v7 = 2;
    }
  }
  unsigned int v8 = a3 + 1;
  uint64_t v9 = v7 - 1;
  do
  {
    unint64_t v10 = *((unsigned __int8 *)a2 + 18);
    unsigned int v11 = v10 - 1;
    if (v10 != 1)
    {
      if (v10 == 5)
      {
        unint64_t v10 = *((unsigned int *)a2 + 2);
      }
      else
      {
        if (v10 != 2) {
          goto LABEL_7;
        }
        unint64_t v10 = 2;
      }
    }
    if (v10 <= v9)
    {
LABEL_7:
      *(_DWORD *)a4 = 0;
      *(void *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 16) = 0;
      goto LABEL_8;
    }
    unint64_t v12 = a2;
    if (v11 >= 2) {
      unint64_t v12 = *(swift::Demangle::__runtime::Node **)a2;
    }
    if (*(_DWORD *)a4) {
      return result;
    }
LABEL_8:
    --v9;
  }
  while (v9 != -1);
  LODWORD(v7) = *((unsigned __int8 *)a2 + 18);
LABEL_20:
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  uint64_t v14 = (char **)((char *)this + 12728);
  if (v7 != 1)
  {
    if (v7 != 5)
    {
LABEL_26:
      unint64_t v15 = "LL";
      goto LABEL_27;
    }
LABEL_24:
    if (*((_DWORD *)a2 + 2) != 1) {
      goto LABEL_26;
    }
  }
  unint64_t v15 = "Ll";
LABEL_27:
  uint64_t result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(v14, v15, 2uLL, *((void **)this + 1593));
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  return result;
}

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::manglePropertyDescriptor@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      int v8 = 321;
      int v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  if (*(_DWORD *)a4) {
    return this;
  }
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::__runtime::CharVector::append((char **)v4 + 1591, "MV", 2uLL, *((void **)v4 + 1593));
  int v7 = 0;
  a2 = 0;
  int v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

uint64_t *anonymous namespace'::Remangler::manglePropertyWrapperBackingInitializer@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6 = *((unsigned __int8 *)a2 + 18);
  int v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      uint64_t v8 = *(void *)a2;
      int v7 = *(swift::Demangle::__runtime::Node **)a2;
      goto LABEL_9;
    }
    int v7 = 0;
  }
  switch(v6)
  {
    case 1:
      uint64_t v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 8);
      if (v7 == (swift::Demangle::__runtime::Node *)((char *)a2 + 8)) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 2:
      uint64_t v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 16);
      if (v7 == (swift::Demangle::__runtime::Node *)((char *)a2 + 16)) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 5:
      uint64_t v8 = *(void *)a2;
LABEL_9:
      uint64_t v9 = (swift::Demangle::__runtime::Node *)(v8 + 8 * *((unsigned int *)a2 + 2));
      if (v7 == v9) {
        goto LABEL_19;
      }
      goto LABEL_16;
  }
  uint64_t v9 = 0;
  if (!v7)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    uint64_t result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "fP", 2uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
LABEL_16:
  unsigned int v10 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4) {
      return result;
    }
    int v7 = (swift::Demangle::__runtime::Node *)((char *)v7 + 8);
    if (v7 == v9) {
      goto LABEL_19;
    }
  }
}

uint64_t *anonymous namespace'::Remangler::manglePropertyWrapperInitFromProjectedValue@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6 = *((unsigned __int8 *)a2 + 18);
  int v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      uint64_t v8 = *(void *)a2;
      int v7 = *(swift::Demangle::__runtime::Node **)a2;
      goto LABEL_9;
    }
    int v7 = 0;
  }
  switch(v6)
  {
    case 1:
      uint64_t v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 8);
      if (v7 == (swift::Demangle::__runtime::Node *)((char *)a2 + 8)) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 2:
      uint64_t v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 16);
      if (v7 == (swift::Demangle::__runtime::Node *)((char *)a2 + 16)) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 5:
      uint64_t v8 = *(void *)a2;
LABEL_9:
      uint64_t v9 = (swift::Demangle::__runtime::Node *)(v8 + 8 * *((unsigned int *)a2 + 2));
      if (v7 == v9) {
        goto LABEL_19;
      }
      goto LABEL_16;
  }
  uint64_t v9 = 0;
  if (!v7)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    uint64_t result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "fW", 2uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
LABEL_16:
  unsigned int v10 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4) {
      return result;
    }
    int v7 = (swift::Demangle::__runtime::Node *)((char *)v7 + 8);
    if (v7 == v9) {
      goto LABEL_19;
    }
  }
}

uint64_t *anonymous namespace'::Remangler::mangleProtocolConformance@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v7 = *((unsigned __int8 *)a2 + 18);
  uint64_t v8 = a2;
  if ((v7 - 1) < 2) {
    goto LABEL_5;
  }
  if (v7 == 5 && *((_DWORD *)a2 + 2))
  {
    uint64_t v8 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_5:
    uint64_t v9 = *(swift::Demangle::__runtime::Node **)v8;
    goto LABEL_7;
  }
  uint64_t v9 = 0;
LABEL_7:
  int v10 = *((unsigned __int8 *)v9 + 18);
  if ((v10 - 1) < 2)
  {
LABEL_11:
    unsigned int v11 = *(swift::Demangle::__runtime::Node **)v9;
    goto LABEL_13;
  }
  if (v10 == 5 && *((_DWORD *)v9 + 2))
  {
    uint64_t v9 = *(swift::Demangle::__runtime::Node **)v9;
    goto LABEL_11;
  }
  unsigned int v11 = 0;
LABEL_13:
  if (*((_WORD *)v11 + 8) != 44)
  {
LABEL_27:
    uint64_t v14 = 0;
    goto LABEL_28;
  }
  int v12 = *((unsigned __int8 *)v11 + 18);
  unsigned int v13 = (swift::Demangle::__runtime::Node **)v11;
  if ((v12 - 1) < 2) {
    goto LABEL_18;
  }
  if (v12 != 5)
  {
    uint64_t v14 = 0;
    if (v12 == 2)
    {
LABEL_24:
      unsigned int v11 = (swift::Demangle::__runtime::Node *)*((void *)v11 + 1);
      goto LABEL_28;
    }
    goto LABEL_21;
  }
  if (!*((_DWORD *)v11 + 2))
  {
    unsigned int v11 = 0;
    goto LABEL_27;
  }
  unsigned int v13 = *(swift::Demangle::__runtime::Node ***)v11;
LABEL_18:
  uint64_t v14 = *v13;
  if (v12 == 2) {
    goto LABEL_24;
  }
LABEL_21:
  if (v12 == 5 && *((_DWORD *)v11 + 2) >= 2u)
  {
    unsigned int v11 = *(swift::Demangle::__runtime::Node **)v11;
    goto LABEL_24;
  }
  unsigned int v11 = 0;
LABEL_28:
  unsigned int v15 = a3 + 1;
  if (*(_DWORD *)a4) {
    return result;
  }
  int v17 = *((unsigned __int8 *)a2 + 18);
  if (v17 == 5)
  {
    if (*((_DWORD *)a2 + 2) != 4)
    {
LABEL_36:
      if (*((_DWORD *)a2 + 2) >= 2u)
      {
        int v18 = *(swift::Demangle::__runtime::Node **)a2;
        goto LABEL_38;
      }
      goto LABEL_39;
    }
    if (*(_DWORD *)a4) {
      return result;
    }
    int v17 = *((unsigned __int8 *)a2 + 18);
  }
  int v18 = a2;
  if (v17 == 2)
  {
LABEL_38:
    size_t v19 = (uint64_t *)*((void *)v18 + 1);
    goto LABEL_40;
  }
  if (v17 == 5) {
    goto LABEL_36;
  }
LABEL_39:
  size_t v19 = 0;
LABEL_40:
  if (*((_WORD *)v19 + 8) != 232) {
    goto LABEL_47;
  }
  int v20 = *((unsigned __int8 *)v19 + 18);
  if ((v20 - 1) < 2) {
    goto LABEL_45;
  }
  if (v20 == 5 && *((_DWORD *)v19 + 2))
  {
    size_t v19 = (uint64_t *)*v19;
LABEL_45:
    size_t v19 = (uint64_t *)*v19;
    goto LABEL_47;
  }
  size_t v19 = 0;
LABEL_47:
  if ((result & 1) == 0)
  {
    int v21 = *((unsigned __int8 *)v19 + 18);
    unint64_t v22 = (swift::Demangle::__runtime::Node **)v19;
    if ((v21 - 1) >= 2)
    {
      if (v21 == 5)
      {
        unsigned int v23 = (uint64_t *)*v19;
        unint64_t v22 = (swift::Demangle::__runtime::Node **)*v19;
LABEL_56:
        uint64_t v24 = (swift::Demangle::__runtime::Node **)&v23[*((unsigned int *)v19 + 2)];
        goto LABEL_62;
      }
      unint64_t v22 = 0;
    }
    switch(v21)
    {
      case 1:
        uint64_t v24 = (swift::Demangle::__runtime::Node **)(v19 + 1);
        goto LABEL_62;
      case 2:
        uint64_t v24 = (swift::Demangle::__runtime::Node **)(v19 + 2);
        goto LABEL_62;
      case 5:
        unsigned int v23 = (uint64_t *)*v19;
        goto LABEL_56;
    }
    uint64_t v24 = 0;
LABEL_62:
    while (v22 != v24)
    {
      if (*(_DWORD *)a4) {
        return result;
      }
      ++v22;
    }
  }
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  if (*((unsigned char *)a2 + 18) == 5 && *((_DWORD *)a2 + 2) > 2u)
  {
    if (*(_DWORD *)a4) {
      return result;
    }
  }
  else
  {
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
  }
  {
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
  }
  return result;
}

uint64_t *anonymous namespace'::Remangler::mangleProtocolConformanceRefInTypeModule@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v7 = *((unsigned __int8 *)a2 + 18);
  if ((v7 - 1) < 2) {
    goto LABEL_5;
  }
  if (v7 == 5 && *((_DWORD *)a2 + 2))
  {
    a2 = (swift::Demangle::__runtime::Node **)*a2;
LABEL_5:
    uint64_t v8 = *a2;
    goto LABEL_7;
  }
  uint64_t v8 = 0;
LABEL_7:
  if (*((_WORD *)v8 + 8) != 232) {
    goto LABEL_14;
  }
  int v9 = *((unsigned __int8 *)v8 + 18);
  if ((v9 - 1) < 2) {
    goto LABEL_12;
  }
  if (v9 == 5 && *((_DWORD *)v8 + 2))
  {
    uint64_t v8 = *(swift::Demangle::__runtime::Node **)v8;
LABEL_12:
    uint64_t v8 = *(swift::Demangle::__runtime::Node **)v8;
    goto LABEL_14;
  }
  uint64_t v8 = 0;
LABEL_14:
    goto LABEL_33;
  int v10 = *((unsigned __int8 *)v8 + 18);
  unsigned int v11 = (swift::Demangle::__runtime::Node **)v8;
  if ((v10 - 1) >= 2)
  {
    if (v10 == 5)
    {
      int v12 = *(swift::Demangle::__runtime::Node **)v8;
      unsigned int v11 = *(swift::Demangle::__runtime::Node ***)v8;
      goto LABEL_23;
    }
    unsigned int v11 = 0;
  }
  if (v10 == 1)
  {
    unsigned int v13 = (swift::Demangle::__runtime::Node **)((char *)v8 + 8);
    if (v11 == v13) {
      goto LABEL_33;
    }
    goto LABEL_30;
  }
  if (v10 == 2)
  {
    unsigned int v13 = (swift::Demangle::__runtime::Node **)((char *)v8 + 16);
    if (v11 == v13) {
      goto LABEL_33;
    }
    goto LABEL_30;
  }
  if (v10 != 5)
  {
    unsigned int v13 = 0;
    if (v11) {
      goto LABEL_30;
    }
LABEL_33:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    uint64_t result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "HP", 2uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
  int v12 = *(swift::Demangle::__runtime::Node **)v8;
LABEL_23:
  unsigned int v13 = (swift::Demangle::__runtime::Node **)((char *)v12 + 8 * *((unsigned int *)v8 + 2));
  if (v11 == v13) {
    goto LABEL_33;
  }
LABEL_30:
  unsigned int v14 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4) {
      return result;
    }
    if (++v11 == v13) {
      goto LABEL_33;
    }
  }
}

uint64_t *anonymous namespace'::Remangler::mangleProtocolConformanceRefInProtocolModule@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v7 = *((unsigned __int8 *)a2 + 18);
  if ((v7 - 1) < 2) {
    goto LABEL_5;
  }
  if (v7 == 5 && *((_DWORD *)a2 + 2))
  {
    a2 = (swift::Demangle::__runtime::Node **)*a2;
LABEL_5:
    uint64_t v8 = *a2;
    goto LABEL_7;
  }
  uint64_t v8 = 0;
LABEL_7:
  if (*((_WORD *)v8 + 8) != 232) {
    goto LABEL_14;
  }
  int v9 = *((unsigned __int8 *)v8 + 18);
  if ((v9 - 1) < 2) {
    goto LABEL_12;
  }
  if (v9 == 5 && *((_DWORD *)v8 + 2))
  {
    uint64_t v8 = *(swift::Demangle::__runtime::Node **)v8;
LABEL_12:
    uint64_t v8 = *(swift::Demangle::__runtime::Node **)v8;
    goto LABEL_14;
  }
  uint64_t v8 = 0;
LABEL_14:
    goto LABEL_33;
  int v10 = *((unsigned __int8 *)v8 + 18);
  unsigned int v11 = (swift::Demangle::__runtime::Node **)v8;
  if ((v10 - 1) >= 2)
  {
    if (v10 == 5)
    {
      int v12 = *(swift::Demangle::__runtime::Node **)v8;
      unsigned int v11 = *(swift::Demangle::__runtime::Node ***)v8;
      goto LABEL_23;
    }
    unsigned int v11 = 0;
  }
  if (v10 == 1)
  {
    unsigned int v13 = (swift::Demangle::__runtime::Node **)((char *)v8 + 8);
    if (v11 == v13) {
      goto LABEL_33;
    }
    goto LABEL_30;
  }
  if (v10 == 2)
  {
    unsigned int v13 = (swift::Demangle::__runtime::Node **)((char *)v8 + 16);
    if (v11 == v13) {
      goto LABEL_33;
    }
    goto LABEL_30;
  }
  if (v10 != 5)
  {
    unsigned int v13 = 0;
    if (v11) {
      goto LABEL_30;
    }
LABEL_33:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    uint64_t result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "Hp", 2uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
  int v12 = *(swift::Demangle::__runtime::Node **)v8;
LABEL_23:
  unsigned int v13 = (swift::Demangle::__runtime::Node **)((char *)v12 + 8 * *((unsigned int *)v8 + 2));
  if (v11 == v13) {
    goto LABEL_33;
  }
LABEL_30:
  unsigned int v14 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4) {
      return result;
    }
    if (++v11 == v13) {
      goto LABEL_33;
    }
  }
}

uint64_t *anonymous namespace'::Remangler::mangleProtocolConformanceRefInOtherModule@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = a2;
  int v7 = *((unsigned __int8 *)a2 + 18);
  uint64_t v8 = a2;
  if ((v7 - 1) < 2) {
    goto LABEL_5;
  }
  if (v7 == 5 && *((_DWORD *)a2 + 2))
  {
    uint64_t v8 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_5:
    int v9 = *(uint64_t **)v8;
    goto LABEL_7;
  }
  int v9 = 0;
LABEL_7:
  unsigned int v10 = a3 + 1;
  if (*((_WORD *)v9 + 8) != 232) {
    goto LABEL_14;
  }
  int v11 = *((unsigned __int8 *)v9 + 18);
  if ((v11 - 1) < 2) {
    goto LABEL_12;
  }
  if (v11 == 5 && *((_DWORD *)v9 + 2))
  {
    int v9 = (uint64_t *)*v9;
LABEL_12:
    int v9 = (uint64_t *)*v9;
    goto LABEL_14;
  }
  int v9 = 0;
LABEL_14:
  if ((result & 1) == 0)
  {
    int v13 = *((unsigned __int8 *)v9 + 18);
    unsigned int v14 = (swift::Demangle::__runtime::Node **)v9;
    if ((v13 - 1) >= 2)
    {
      if (v13 == 5)
      {
        unsigned int v15 = (uint64_t *)*v9;
        unsigned int v14 = (swift::Demangle::__runtime::Node **)*v9;
LABEL_23:
        unint64_t v16 = (swift::Demangle::__runtime::Node **)&v15[*((unsigned int *)v9 + 2)];
        goto LABEL_29;
      }
      unsigned int v14 = 0;
    }
    switch(v13)
    {
      case 1:
        unint64_t v16 = (swift::Demangle::__runtime::Node **)(v9 + 1);
        goto LABEL_29;
      case 2:
        unint64_t v16 = (swift::Demangle::__runtime::Node **)(v9 + 2);
        goto LABEL_29;
      case 5:
        unsigned int v15 = (uint64_t *)*v9;
        goto LABEL_23;
    }
    unint64_t v16 = 0;
LABEL_29:
    while (v14 != v16)
    {
      if (*(_DWORD *)a4) {
        return result;
      }
      ++v14;
    }
  }
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  int v17 = *((unsigned __int8 *)v4 + 18);
  if (v17 != 2)
  {
    if (v17 != 5 || *((_DWORD *)v4 + 2) < 2u)
    {
      *(_DWORD *)a4 = 0;
      *(void *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 16) = 0;
      return result;
    }
    int v4 = *(swift::Demangle::__runtime::Node **)v4;
  }
  int v18 = (swift::Demangle::__runtime::Node *)*((void *)v4 + 1);
}

uint64_t *anonymous namespace'::Remangler::mangleProtocolDescriptor@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v7 = *((unsigned __int8 *)a2 + 18);
  if ((v7 - 1) < 2) {
    goto LABEL_5;
  }
  if (v7 == 5 && *((_DWORD *)a2 + 2))
  {
    a2 = (swift::Demangle::__runtime::Node **)*a2;
LABEL_5:
    uint64_t v8 = *a2;
    goto LABEL_7;
  }
  uint64_t v8 = 0;
LABEL_7:
  if (*((_WORD *)v8 + 8) != 232) {
    goto LABEL_14;
  }
  int v9 = *((unsigned __int8 *)v8 + 18);
  if ((v9 - 1) < 2) {
    goto LABEL_12;
  }
  if (v9 == 5 && *((_DWORD *)v8 + 2))
  {
    uint64_t v8 = *(swift::Demangle::__runtime::Node **)v8;
LABEL_12:
    uint64_t v8 = *(swift::Demangle::__runtime::Node **)v8;
    goto LABEL_14;
  }
  uint64_t v8 = 0;
LABEL_14:
    goto LABEL_33;
  int v10 = *((unsigned __int8 *)v8 + 18);
  int v11 = (swift::Demangle::__runtime::Node **)v8;
  if ((v10 - 1) >= 2)
  {
    if (v10 == 5)
    {
      int v12 = *(swift::Demangle::__runtime::Node **)v8;
      int v11 = *(swift::Demangle::__runtime::Node ***)v8;
      goto LABEL_23;
    }
    int v11 = 0;
  }
  if (v10 == 1)
  {
    int v13 = (swift::Demangle::__runtime::Node **)((char *)v8 + 8);
    if (v11 == v13) {
      goto LABEL_33;
    }
    goto LABEL_30;
  }
  if (v10 == 2)
  {
    int v13 = (swift::Demangle::__runtime::Node **)((char *)v8 + 16);
    if (v11 == v13) {
      goto LABEL_33;
    }
    goto LABEL_30;
  }
  if (v10 != 5)
  {
    int v13 = 0;
    if (v11) {
      goto LABEL_30;
    }
LABEL_33:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    uint64_t result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "Mp", 2uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
  int v12 = *(swift::Demangle::__runtime::Node **)v8;
LABEL_23:
  int v13 = (swift::Demangle::__runtime::Node **)((char *)v12 + 8 * *((unsigned int *)v8 + 2));
  if (v11 == v13) {
    goto LABEL_33;
  }
LABEL_30:
  unsigned int v14 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4) {
      return result;
    }
    if (++v11 == v13) {
      goto LABEL_33;
    }
  }
}

uint64_t *anonymous namespace'::Remangler::mangleProtocolDescriptorRecord@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v7 = *((unsigned __int8 *)a2 + 18);
  if ((v7 - 1) < 2) {
    goto LABEL_5;
  }
  if (v7 == 5 && *((_DWORD *)a2 + 2))
  {
    a2 = (swift::Demangle::__runtime::Node **)*a2;
LABEL_5:
    uint64_t v8 = *a2;
    goto LABEL_7;
  }
  uint64_t v8 = 0;
LABEL_7:
  if (*((_WORD *)v8 + 8) != 232) {
    goto LABEL_14;
  }
  int v9 = *((unsigned __int8 *)v8 + 18);
  if ((v9 - 1) < 2) {
    goto LABEL_12;
  }
  if (v9 == 5 && *((_DWORD *)v8 + 2))
  {
    uint64_t v8 = *(swift::Demangle::__runtime::Node **)v8;
LABEL_12:
    uint64_t v8 = *(swift::Demangle::__runtime::Node **)v8;
    goto LABEL_14;
  }
  uint64_t v8 = 0;
LABEL_14:
    goto LABEL_33;
  int v10 = *((unsigned __int8 *)v8 + 18);
  int v11 = (swift::Demangle::__runtime::Node **)v8;
  if ((v10 - 1) >= 2)
  {
    if (v10 == 5)
    {
      int v12 = *(swift::Demangle::__runtime::Node **)v8;
      int v11 = *(swift::Demangle::__runtime::Node ***)v8;
      goto LABEL_23;
    }
    int v11 = 0;
  }
  if (v10 == 1)
  {
    int v13 = (swift::Demangle::__runtime::Node **)((char *)v8 + 8);
    if (v11 == v13) {
      goto LABEL_33;
    }
    goto LABEL_30;
  }
  if (v10 == 2)
  {
    int v13 = (swift::Demangle::__runtime::Node **)((char *)v8 + 16);
    if (v11 == v13) {
      goto LABEL_33;
    }
    goto LABEL_30;
  }
  if (v10 != 5)
  {
    int v13 = 0;
    if (v11) {
      goto LABEL_30;
    }
LABEL_33:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    uint64_t result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "Hr", 2uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
  int v12 = *(swift::Demangle::__runtime::Node **)v8;
LABEL_23:
  int v13 = (swift::Demangle::__runtime::Node **)((char *)v12 + 8 * *((unsigned int *)v8 + 2));
  if (v11 == v13) {
    goto LABEL_33;
  }
LABEL_30:
  unsigned int v14 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4) {
      return result;
    }
    if (++v11 == v13) {
      goto LABEL_33;
    }
  }
}

void *anonymous namespace'::Remangler::mangleProtocolConformanceDescriptor@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6 = *((unsigned __int8 *)a2 + 18);
  if ((v6 - 1) < 2) {
    goto LABEL_5;
  }
  if (v6 == 5 && *((_DWORD *)a2 + 2))
  {
    a2 = (swift::Demangle::__runtime::Node **)*a2;
LABEL_5:
    int v7 = *a2;
    goto LABEL_7;
  }
  int v7 = 0;
LABEL_7:
  if (!*(_DWORD *)a4)
  {
    uint64_t result = swift::Demangle::__runtime::CharVector::append(this + 1591, "Mc", 2uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
  }
  return result;
}

void *anonymous namespace'::Remangler::mangleProtocolConformanceDescriptorRecord@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6 = *((unsigned __int8 *)a2 + 18);
  if ((v6 - 1) < 2) {
    goto LABEL_5;
  }
  if (v6 == 5 && *((_DWORD *)a2 + 2))
  {
    a2 = (swift::Demangle::__runtime::Node **)*a2;
LABEL_5:
    int v7 = *a2;
    goto LABEL_7;
  }
  int v7 = 0;
LABEL_7:
  if (!*(_DWORD *)a4)
  {
    uint64_t result = swift::Demangle::__runtime::CharVector::append(this + 1591, "Hc", 2uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
  }
  return result;
}

uint64_t *anonymous namespace'::Remangler::mangleProtocolListWithClass@<X0>(const void **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = a2;
  int v5 = *((unsigned __int8 *)a2 + 18);
  int v6 = (swift::Demangle::__runtime::Node **)a2;
  if ((v5 - 1) < 2)
  {
LABEL_5:
    int v7 = *v6;
    if (v5 == 2) {
      goto LABEL_11;
    }
LABEL_8:
    if (v5 == 5 && *((_DWORD *)v4 + 2) >= 2u)
    {
      int v4 = *(swift::Demangle::__runtime::Node **)v4;
      goto LABEL_11;
    }
LABEL_13:
    uint64_t v8 = 0;
  }
  if (v5 == 5)
  {
    if (!*((_DWORD *)a2 + 2))
    {
      int v7 = 0;
      goto LABEL_13;
    }
    int v6 = *(swift::Demangle::__runtime::Node ***)a2;
    goto LABEL_5;
  }
  int v7 = 0;
  if (v5 != 2) {
    goto LABEL_8;
  }
LABEL_11:
  uint64_t v8 = (swift::Demangle::__runtime::Node *)*((void *)v4 + 1);
}

uint64_t *anonymous namespace'::Remangler::mangleProtocolListWithAnyObject@<X0>(const void **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = *((unsigned __int8 *)a2 + 18);
  if ((v4 - 1) >= 2)
  {
    if (v4 != 5 || !*((_DWORD *)a2 + 2))
    {
      int v5 = 0;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  int v5 = *(swift::Demangle::__runtime::Node **)a2;
}

uint64_t *anonymous namespace'::Remangler::mangleProtocolSelfConformanceDescriptor@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v7 = *((unsigned __int8 *)a2 + 18);
  if ((v7 - 1) < 2) {
    goto LABEL_5;
  }
  if (v7 == 5 && *((_DWORD *)a2 + 2))
  {
    a2 = (swift::Demangle::__runtime::Node **)*a2;
LABEL_5:
    uint64_t v8 = *a2;
    goto LABEL_7;
  }
  uint64_t v8 = 0;
LABEL_7:
  if (*((_WORD *)v8 + 8) != 232) {
    goto LABEL_14;
  }
  int v9 = *((unsigned __int8 *)v8 + 18);
  if ((v9 - 1) < 2) {
    goto LABEL_12;
  }
  if (v9 == 5 && *((_DWORD *)v8 + 2))
  {
    uint64_t v8 = *(swift::Demangle::__runtime::Node **)v8;
LABEL_12:
    uint64_t v8 = *(swift::Demangle::__runtime::Node **)v8;
    goto LABEL_14;
  }
  uint64_t v8 = 0;
LABEL_14:
    goto LABEL_33;
  int v10 = *((unsigned __int8 *)v8 + 18);
  int v11 = (swift::Demangle::__runtime::Node **)v8;
  if ((v10 - 1) >= 2)
  {
    if (v10 == 5)
    {
      int v12 = *(swift::Demangle::__runtime::Node **)v8;
      int v11 = *(swift::Demangle::__runtime::Node ***)v8;
      goto LABEL_23;
    }
    int v11 = 0;
  }
  if (v10 == 1)
  {
    int v13 = (swift::Demangle::__runtime::Node **)((char *)v8 + 8);
    if (v11 == v13) {
      goto LABEL_33;
    }
    goto LABEL_30;
  }
  if (v10 == 2)
  {
    int v13 = (swift::Demangle::__runtime::Node **)((char *)v8 + 16);
    if (v11 == v13) {
      goto LABEL_33;
    }
    goto LABEL_30;
  }
  if (v10 != 5)
  {
    int v13 = 0;
    if (v11) {
      goto LABEL_30;
    }
LABEL_33:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    uint64_t result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "MS", 2uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
  int v12 = *(swift::Demangle::__runtime::Node **)v8;
LABEL_23:
  int v13 = (swift::Demangle::__runtime::Node **)((char *)v12 + 8 * *((unsigned int *)v8 + 2));
  if (v11 == v13) {
    goto LABEL_33;
  }
LABEL_30:
  unsigned int v14 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4) {
      return result;
    }
    if (++v11 == v13) {
      goto LABEL_33;
    }
  }
}

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleProtocolSelfConformanceWitness@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      int v8 = 321;
      int v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  if (*(_DWORD *)a4) {
    return this;
  }
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::__runtime::CharVector::append((char **)v4 + 1591, "TS", 2uLL, *((void **)v4 + 1593));
  int v7 = 0;
  a2 = 0;
  int v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

uint64_t *anonymous namespace'::Remangler::mangleProtocolSelfConformanceWitnessTable@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v7 = *((unsigned __int8 *)a2 + 18);
  if ((v7 - 1) < 2) {
    goto LABEL_5;
  }
  if (v7 == 5 && *((_DWORD *)a2 + 2))
  {
    a2 = (swift::Demangle::__runtime::Node **)*a2;
LABEL_5:
    int v8 = *a2;
    goto LABEL_7;
  }
  int v8 = 0;
LABEL_7:
  if (*((_WORD *)v8 + 8) != 232) {
    goto LABEL_14;
  }
  int v9 = *((unsigned __int8 *)v8 + 18);
  if ((v9 - 1) < 2) {
    goto LABEL_12;
  }
  if (v9 == 5 && *((_DWORD *)v8 + 2))
  {
    int v8 = *(swift::Demangle::__runtime::Node **)v8;
LABEL_12:
    int v8 = *(swift::Demangle::__runtime::Node **)v8;
    goto LABEL_14;
  }
  int v8 = 0;
LABEL_14:
    goto LABEL_33;
  int v10 = *((unsigned __int8 *)v8 + 18);
  int v11 = (swift::Demangle::__runtime::Node **)v8;
  if ((v10 - 1) >= 2)
  {
    if (v10 == 5)
    {
      int v12 = *(swift::Demangle::__runtime::Node **)v8;
      int v11 = *(swift::Demangle::__runtime::Node ***)v8;
      goto LABEL_23;
    }
    int v11 = 0;
  }
  if (v10 == 1)
  {
    int v13 = (swift::Demangle::__runtime::Node **)((char *)v8 + 8);
    if (v11 == v13) {
      goto LABEL_33;
    }
    goto LABEL_30;
  }
  if (v10 == 2)
  {
    int v13 = (swift::Demangle::__runtime::Node **)((char *)v8 + 16);
    if (v11 == v13) {
      goto LABEL_33;
    }
    goto LABEL_30;
  }
  if (v10 != 5)
  {
    int v13 = 0;
    if (v11) {
      goto LABEL_30;
    }
LABEL_33:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    uint64_t result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "WS", 2uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
  int v12 = *(swift::Demangle::__runtime::Node **)v8;
LABEL_23:
  int v13 = (swift::Demangle::__runtime::Node **)((char *)v12 + 8 * *((unsigned int *)v8 + 2));
  if (v11 == v13) {
    goto LABEL_33;
  }
LABEL_30:
  unsigned int v14 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4) {
      return result;
    }
    if (++v11 == v13) {
      goto LABEL_33;
    }
  }
}

uint64_t *anonymous namespace'::Remangler::mangleProtocolWitness@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6 = *((unsigned __int8 *)a2 + 18);
  int v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      uint64_t v8 = *(void *)a2;
      int v7 = *(swift::Demangle::__runtime::Node **)a2;
      goto LABEL_9;
    }
    int v7 = 0;
  }
  switch(v6)
  {
    case 1:
      int v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 8);
      if (v7 == (swift::Demangle::__runtime::Node *)((char *)a2 + 8)) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 2:
      int v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 16);
      if (v7 == (swift::Demangle::__runtime::Node *)((char *)a2 + 16)) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 5:
      uint64_t v8 = *(void *)a2;
LABEL_9:
      int v9 = (swift::Demangle::__runtime::Node *)(v8 + 8 * *((unsigned int *)a2 + 2));
      if (v7 == v9) {
        goto LABEL_19;
      }
      goto LABEL_16;
  }
  int v9 = 0;
  if (!v7)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    uint64_t result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "TW", 2uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
LABEL_16:
  unsigned int v10 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4) {
      return result;
    }
    int v7 = (swift::Demangle::__runtime::Node *)((char *)v7 + 8);
    if (v7 == v9) {
      goto LABEL_19;
    }
  }
}

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleProtocolWitnessTable@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      int v8 = 321;
      int v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  if (*(_DWORD *)a4) {
    return this;
  }
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::__runtime::CharVector::append((char **)v4 + 1591, "WP", 2uLL, *((void **)v4 + 1593));
  int v7 = 0;
  a2 = 0;
  int v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleProtocolWitnessTableAccessor@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      int v8 = 321;
      int v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  if (*(_DWORD *)a4) {
    return this;
  }
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::__runtime::CharVector::append((char **)v4 + 1591, "Wa", 2uLL, *((void **)v4 + 1593));
  int v7 = 0;
  a2 = 0;
  int v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleProtocolWitnessTablePattern@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      int v8 = 321;
      int v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  if (*(_DWORD *)a4) {
    return this;
  }
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::__runtime::CharVector::append((char **)v4 + 1591, "Wp", 2uLL, *((void **)v4 + 1593));
  int v7 = 0;
  a2 = 0;
  int v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

uint64_t *anonymous namespace'::Remangler::mangleReabstractionThunk@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v7 = *((unsigned __int8 *)a2 + 18);
  switch(v7)
  {
    case 1:
      goto LABEL_6;
    case 5:
      uint64_t v7 = *((unsigned int *)a2 + 2);
      if (v7) {
        goto LABEL_6;
      }
      break;
    case 2:
      uint64_t v7 = 2;
LABEL_6:
      unsigned int v8 = a3 + 1;
      for (uint64_t i = v7 - 1; i != -1; --i)
      {
        unint64_t v10 = *((unsigned __int8 *)a2 + 18);
        unsigned int v11 = v10 - 1;
        if (v10 != 1)
        {
          if (v10 == 5)
          {
            unint64_t v10 = *((unsigned int *)a2 + 2);
          }
          else
          {
            if (v10 != 2) {
              goto LABEL_7;
            }
            unint64_t v10 = 2;
          }
        }
        if (v10 <= i)
        {
LABEL_7:
          *(_DWORD *)a4 = 0;
          *(void *)(a4 + 8) = 0;
          *(_DWORD *)(a4 + 16) = 0;
          continue;
        }
        int v12 = a2;
        if (v11 >= 2) {
          int v12 = *(swift::Demangle::__runtime::Node **)a2;
        }
        if (*(_DWORD *)a4) {
          return result;
        }
      }
      break;
  }
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  uint64_t result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "Tr", 2uLL, this[1593]);
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  return result;
}

uint64_t *anonymous namespace'::Remangler::mangleReabstractionThunkHelper@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v7 = *((unsigned __int8 *)a2 + 18);
  switch(v7)
  {
    case 1:
      goto LABEL_6;
    case 5:
      uint64_t v7 = *((unsigned int *)a2 + 2);
      if (v7) {
        goto LABEL_6;
      }
      break;
    case 2:
      uint64_t v7 = 2;
LABEL_6:
      unsigned int v8 = a3 + 1;
      for (uint64_t i = v7 - 1; i != -1; --i)
      {
        unint64_t v10 = *((unsigned __int8 *)a2 + 18);
        unsigned int v11 = v10 - 1;
        if (v10 != 1)
        {
          if (v10 == 5)
          {
            unint64_t v10 = *((unsigned int *)a2 + 2);
          }
          else
          {
            if (v10 != 2) {
              goto LABEL_7;
            }
            unint64_t v10 = 2;
          }
        }
        if (v10 <= i)
        {
LABEL_7:
          *(_DWORD *)a4 = 0;
          *(void *)(a4 + 8) = 0;
          *(_DWORD *)(a4 + 16) = 0;
          continue;
        }
        int v12 = a2;
        if (v11 >= 2) {
          int v12 = *(swift::Demangle::__runtime::Node **)a2;
        }
        if (*(_DWORD *)a4) {
          return result;
        }
      }
      break;
  }
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  uint64_t result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "TR", 2uLL, this[1593]);
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  return result;
}

uint64_t *anonymous namespace'::Remangler::mangleReabstractionThunkHelperWithSelf@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v7 = *((unsigned __int8 *)a2 + 18);
  switch(v7)
  {
    case 1:
      goto LABEL_6;
    case 5:
      uint64_t v7 = *((unsigned int *)a2 + 2);
      if (v7) {
        goto LABEL_6;
      }
      break;
    case 2:
      uint64_t v7 = 2;
LABEL_6:
      unsigned int v8 = a3 + 1;
      for (uint64_t i = v7 - 1; i != -1; --i)
      {
        unint64_t v10 = *((unsigned __int8 *)a2 + 18);
        unsigned int v11 = v10 - 1;
        if (v10 != 1)
        {
          if (v10 == 5)
          {
            unint64_t v10 = *((unsigned int *)a2 + 2);
          }
          else
          {
            if (v10 != 2) {
              goto LABEL_7;
            }
            unint64_t v10 = 2;
          }
        }
        if (v10 <= i)
        {
LABEL_7:
          *(_DWORD *)a4 = 0;
          *(void *)(a4 + 8) = 0;
          *(_DWORD *)(a4 + 16) = 0;
          continue;
        }
        int v12 = a2;
        if (v11 >= 2) {
          int v12 = *(swift::Demangle::__runtime::Node **)a2;
        }
        if (*(_DWORD *)a4) {
          return result;
        }
      }
      break;
  }
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  uint64_t result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "Ty", 2uLL, this[1593]);
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  return result;
}

uint64_t *anonymous namespace'::Remangler::mangleReabstractionThunkHelperWithGlobalActor@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6 = *((unsigned __int8 *)a2 + 18);
  uint64_t v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      uint64_t v8 = *(void *)a2;
      uint64_t v7 = *(swift::Demangle::__runtime::Node **)a2;
      goto LABEL_9;
    }
    uint64_t v7 = 0;
  }
  switch(v6)
  {
    case 1:
      int v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 8);
      if (v7 == (swift::Demangle::__runtime::Node *)((char *)a2 + 8)) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 2:
      int v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 16);
      if (v7 == (swift::Demangle::__runtime::Node *)((char *)a2 + 16)) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 5:
      uint64_t v8 = *(void *)a2;
LABEL_9:
      int v9 = (swift::Demangle::__runtime::Node *)(v8 + 8 * *((unsigned int *)a2 + 2));
      if (v7 == v9) {
        goto LABEL_19;
      }
      goto LABEL_16;
  }
  int v9 = 0;
  if (!v7)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    uint64_t result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "TU", 2uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
LABEL_16:
  unsigned int v10 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4) {
      return result;
    }
    uint64_t v7 = (swift::Demangle::__runtime::Node *)((char *)v7 + 8);
    if (v7 == v9) {
      goto LABEL_19;
    }
  }
}

uint64_t *anonymous namespace'::Remangler::mangleReadAccessor@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = *((unsigned __int8 *)a2 + 18);
  if ((v4 - 1) >= 2)
  {
    if (v4 != 5 || !*((_DWORD *)a2 + 2))
    {
      uint64_t v5 = 0;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  uint64_t v5 = *(void *)a2;
}

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleRelatedEntityDeclName@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = a2;
  uint64_t v5 = this;
  int v7 = *((unsigned __int8 *)a2 + 18);
  uint64_t v8 = a2;
  if (v7 != 2)
  {
    if (v7 != 5 || *((_DWORD *)a2 + 2) < 2u)
    {
      *(_DWORD *)a4 = 0;
      *(void *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 16) = 0;
      goto LABEL_8;
    }
    uint64_t v8 = *(swift::Demangle::__runtime::Node **)a2;
  }
  if (*(_DWORD *)a4) {
    return this;
  }
  int v7 = *((unsigned __int8 *)v4 + 18);
LABEL_8:
  if ((v7 - 1) >= 2)
  {
    if (v7 != 5 || !*((_DWORD *)v4 + 2))
    {
      int v9 = 0;
      goto LABEL_14;
    }
    int v4 = *(swift::Demangle::__runtime::Node **)v4;
  }
  int v9 = *(swift::Demangle::__runtime::Node **)v4;
LABEL_14:
  if (*((void *)v9 + 1) == 1)
  {
    swift::Demangle::__runtime::CharVector::append((char **)v5 + 1591, "L", 1uLL, *((void **)v5 + 1593));
    this = (_anonymous_namespace_::Remangler *)swift::Demangle::__runtime::CharVector::append((char **)v5 + 1591, *(const void **)v9, *((void *)v9 + 1), *((void **)v5 + 1593));
    int v10 = 0;
    int v9 = 0;
    int v11 = 0;
  }
  else
  {
    int v11 = 3024;
    int v10 = 21;
  }
  *(_DWORD *)a4 = v10;
  *(void *)(a4 + 8) = v9;
  *(_DWORD *)(a4 + 16) = v11;
  return this;
}

void *anonymous namespace'::Remangler::mangleRetroactiveConformance@<X0>(const void **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = (uint64_t *)a2;
  int v7 = *((unsigned __int8 *)a2 + 18);
  uint64_t v8 = a2;
  if (v7 == 2) {
    goto LABEL_5;
  }
  if (v7 == 5 && *((_DWORD *)a2 + 2) >= 2u)
  {
    uint64_t v8 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_5:
    int v9 = (swift::Demangle::__runtime::Node *)*((void *)v8 + 1);
    goto LABEL_7;
  }
  int v9 = 0;
LABEL_7:
  if (*(_DWORD *)a4) {
    return result;
  }
  unsigned int v11 = *((_DWORD *)this + 3184);
  size_t v12 = *((unsigned int *)this + 3185);
  int v13 = (char *)this[1591];
  if (v11 >= v12)
  {
    unsigned int v14 = this[1593];
    unsigned int v15 = (char *)v14[1];
    if (&v13[v12] == v15)
    {
      unint64_t v17 = (unint64_t)&v13[v12 + 1];
      unint64_t v16 = v14[2];
      if (v17 <= v16)
      {
        v14[1] = v17;
        LODWORD(v18) = 1;
LABEL_24:
        *((_DWORD *)this + 3185) = v12 + v18;
        goto LABEL_25;
      }
    }
    else
    {
      unint64_t v16 = v14[2];
    }
    if ((2 * v12) <= 4) {
      uint64_t v18 = 4;
    }
    else {
      uint64_t v18 = (2 * v12);
    }
    size_t v19 = v18 + v12;
    if (!v15 || (unint64_t)&v15[v19] > v16)
    {
      unint64_t v20 = 2 * v14[4];
      if (v20 <= v19 + 1) {
        unint64_t v20 = v19 + 1;
      }
      v14[4] = v20;
      unint64_t v21 = v20 + 8;
      unint64_t v22 = malloc_type_malloc(v20 + 8, 0xD0263BC5uLL);
      unsigned int v23 = (char *)v22 + v21;
      void *v22 = v14[3];
      unsigned int v15 = (char *)(v22 + 1);
      v14[2] = v23;
      v14[3] = v22;
    }
    v14[1] = &v15[v19];
    if (v12) {
      memcpy(v15, this[1591], v12);
    }
    this[1591] = v15;
    LODWORD(v12) = *((_DWORD *)this + 3185);
    int v13 = v15;
    unsigned int v11 = *((_DWORD *)this + 3184);
    goto LABEL_24;
  }
LABEL_25:
  *((_DWORD *)this + 3184) = v11 + 1;
  v13[v11] = 103;
  if (*((unsigned __int8 *)v4 + 18) - 1 >= 2) {
    int v4 = (uint64_t *)*v4;
  }
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  return result;
}

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleShared@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 == 1)
  {
LABEL_5:
    if (*(_DWORD *)a4) {
      return this;
    }
    unsigned int v7 = *((_DWORD *)v4 + 3184);
    size_t v8 = *((unsigned int *)v4 + 3185);
    int v9 = (unsigned char *)*((void *)v4 + 1591);
    if (v7 < v8) {
      goto LABEL_27;
    }
    int v10 = (void *)*((void *)v4 + 1593);
    unsigned int v11 = (unsigned char *)v10[1];
    if (&v9[v8] == v11)
    {
      unint64_t v15 = (unint64_t)&v9[v8 + 1];
      unint64_t v12 = v10[2];
      if (v15 <= v12)
      {
        v10[1] = v15;
        LODWORD(v16) = 1;
LABEL_26:
        *((_DWORD *)v4 + 3185) = v8 + v16;
LABEL_27:
        int v14 = 0;
        a2 = 0;
        int v13 = 0;
        *((_DWORD *)v4 + 3184) = v7 + 1;
        v9[v7] = 104;
        goto LABEL_28;
      }
    }
    else
    {
      unint64_t v12 = v10[2];
    }
    if ((2 * v8) <= 4) {
      uint64_t v16 = 4;
    }
    else {
      uint64_t v16 = (2 * v8);
    }
    size_t v17 = v16 + v8;
    if (v11) {
      BOOL v18 = (unint64_t)&v11[v16 + v8] > v12;
    }
    else {
      BOOL v18 = 1;
    }
    int v9 = (unsigned char *)v10[1];
    if (v18)
    {
      unint64_t v19 = 2 * v10[4];
      if (v19 <= v17 + 1) {
        unint64_t v19 = v17 + 1;
      }
      v10[4] = v19;
      unint64_t v20 = v19 + 8;
      this = (_anonymous_namespace_::Remangler *)malloc_type_malloc(v19 + 8, 0xD0263BC5uLL);
      unint64_t v21 = (char *)this + v20;
      *(void *)this = v10[3];
      int v9 = (char *)this + 8;
      v10[2] = v21;
      v10[3] = this;
    }
    v10[1] = &v9[v17];
    if (v8) {
      this = (_anonymous_namespace_::Remangler *)memcpy(v9, *((const void **)v4 + 1591), v8);
    }
    *((void *)v4 + 1591) = v9;
    LODWORD(v8) = *((_DWORD *)v4 + 3185);
    unsigned int v7 = *((_DWORD *)v4 + 3184);
    goto LABEL_26;
  }
  if (v6 == 5 && *((_DWORD *)a2 + 2) == 1)
  {
    a2 = *(swift::Demangle::__runtime::Node **)a2;
    goto LABEL_5;
  }
  int v13 = 321;
  int v14 = 10;
LABEL_28:
  *(_DWORD *)a4 = v14;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v13;
  return this;
}

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleOwned@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 == 1)
  {
LABEL_5:
    if (*(_DWORD *)a4) {
      return this;
    }
    unsigned int v7 = *((_DWORD *)v4 + 3184);
    size_t v8 = *((unsigned int *)v4 + 3185);
    int v9 = (unsigned char *)*((void *)v4 + 1591);
    if (v7 < v8) {
      goto LABEL_27;
    }
    int v10 = (void *)*((void *)v4 + 1593);
    unsigned int v11 = (unsigned char *)v10[1];
    if (&v9[v8] == v11)
    {
      unint64_t v15 = (unint64_t)&v9[v8 + 1];
      unint64_t v12 = v10[2];
      if (v15 <= v12)
      {
        v10[1] = v15;
        LODWORD(v16) = 1;
LABEL_26:
        *((_DWORD *)v4 + 3185) = v8 + v16;
LABEL_27:
        int v14 = 0;
        a2 = 0;
        int v13 = 0;
        *((_DWORD *)v4 + 3184) = v7 + 1;
        v9[v7] = 110;
        goto LABEL_28;
      }
    }
    else
    {
      unint64_t v12 = v10[2];
    }
    if ((2 * v8) <= 4) {
      uint64_t v16 = 4;
    }
    else {
      uint64_t v16 = (2 * v8);
    }
    size_t v17 = v16 + v8;
    if (v11) {
      BOOL v18 = (unint64_t)&v11[v16 + v8] > v12;
    }
    else {
      BOOL v18 = 1;
    }
    int v9 = (unsigned char *)v10[1];
    if (v18)
    {
      unint64_t v19 = 2 * v10[4];
      if (v19 <= v17 + 1) {
        unint64_t v19 = v17 + 1;
      }
      v10[4] = v19;
      unint64_t v20 = v19 + 8;
      this = (_anonymous_namespace_::Remangler *)malloc_type_malloc(v19 + 8, 0xD0263BC5uLL);
      unint64_t v21 = (char *)this + v20;
      *(void *)this = v10[3];
      int v9 = (char *)this + 8;
      v10[2] = v21;
      v10[3] = this;
    }
    v10[1] = &v9[v17];
    if (v8) {
      this = (_anonymous_namespace_::Remangler *)memcpy(v9, *((const void **)v4 + 1591), v8);
    }
    *((void *)v4 + 1591) = v9;
    LODWORD(v8) = *((_DWORD *)v4 + 3185);
    unsigned int v7 = *((_DWORD *)v4 + 3184);
    goto LABEL_26;
  }
  if (v6 == 5 && *((_DWORD *)a2 + 2) == 1)
  {
    a2 = *(swift::Demangle::__runtime::Node **)a2;
    goto LABEL_5;
  }
  int v13 = 321;
  int v14 = 10;
LABEL_28:
  *(_DWORD *)a4 = v14;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v13;
  return this;
}

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleSILBoxType@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      int v8 = 321;
      int v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  if (*(_DWORD *)a4) {
    return this;
  }
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::__runtime::CharVector::append((char **)v4 + 1591, "Xb", 2uLL, *((void **)v4 + 1593));
  int v7 = 0;
  a2 = 0;
  int v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

char **anonymous namespace'::Remangler::mangleSILBoxTypeWithLayout@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v5 = a2;
  int v6 = this;
  int v8 = *((unsigned __int8 *)a2 + 18);
  int v9 = a2;
  if (v8 != 1)
  {
    if (v8 != 5 || (*((_DWORD *)a2 + 2) | 2) != 3)
    {
      int v12 = 3591;
      goto LABEL_13;
    }
    int v9 = *(swift::Demangle::__runtime::Node **)a2;
  }
  if (*(_WORD *)(*(void *)v9 + 16) != 212)
  {
    int v12 = 3593;
    goto LABEL_13;
  }
  int v10 = a2;
  if ((v8 - 1) >= 2)
  {
    if (v8 != 5 || !*((_DWORD *)a2 + 2))
    {
      unsigned int v11 = 0;
      goto LABEL_17;
    }
    int v10 = *(swift::Demangle::__runtime::Node **)a2;
  }
  unsigned int v11 = *(uint64_t **)v10;
LABEL_17:
  this = (char **)swift::Demangle::__runtime::NodeFactory::createNode(*this, 235);
  int v14 = (swift::Demangle::__runtime::Node *)this;
  unsigned int v15 = *((unsigned __int8 *)v11 + 18);
  if (v15 != 1)
  {
    if (v15 == 5)
    {
      unsigned int v15 = *((_DWORD *)v11 + 2);
      if (!v15) {
        goto LABEL_60;
      }
    }
    else if (v15 != 2)
    {
LABEL_60:
      int v32 = a3 + 1;
      if (*(_DWORD *)a4) {
        return this;
      }
      if (*((unsigned char *)v5 + 18) == 5 && *((_DWORD *)v5 + 2) == 3)
      {
        uint64_t v33 = *(void *)(*(void *)v5 + 8);
        if (*(_WORD *)(v33 + 16) != 43)
        {
          int v12 = 3621;
          goto LABEL_13;
        }
        uint64_t v34 = *(swift::Demangle::__runtime::Node **)(*(void *)v5 + 16);
        if (*((_WORD *)v34 + 8) != 235)
        {
          int v12 = 3622;
          goto LABEL_13;
        }
        if (*(_DWORD *)a4) {
          return this;
        }
        if (*(_DWORD *)a4) {
          return this;
        }
        long long v35 = "XX";
      }
      else
      {
        long long v35 = "Xx";
      }
      this = (char **)swift::Demangle::__runtime::CharVector::append(v6 + 1591, v35, 2uLL, v6[1593]);
      int v13 = 0;
      uint64_t v5 = 0;
      int v12 = 0;
      goto LABEL_14;
    }
  }
  unint64_t v16 = 0;
  uint64_t v17 = v15;
  while (1)
  {
    unint64_t v20 = *((unsigned __int8 *)v11 + 18);
    if ((v20 - 1) >= 2)
    {
      char v21 = 0;
      unint64_t v22 = (uint64_t *)*v11;
    }
    else
    {
      char v21 = 1;
      unint64_t v22 = v11;
    }
    if (*(_WORD *)(v22[v16] + 16) != 214)
    {
      unsigned int v23 = v11;
      if ((v21 & 1) == 0) {
        unsigned int v23 = (uint64_t *)*v11;
      }
      if (*(_WORD *)(v23[v16] + 16) != 213) {
        break;
      }
    }
    if (v20 == 1) {
      goto LABEL_39;
    }
    if (v20 != 5)
    {
      if (v20 != 2) {
        goto LABEL_44;
      }
      unint64_t v20 = 2;
LABEL_39:
      if (v20 <= v16) {
        goto LABEL_44;
      }
      goto LABEL_40;
    }
    if (*((unsigned int *)v11 + 2) <= v16)
    {
LABEL_44:
      int v25 = 0;
      goto LABEL_45;
    }
LABEL_40:
    uint64_t v24 = v11;
    if ((v21 & 1) == 0) {
      uint64_t v24 = (uint64_t *)*v11;
    }
    int v25 = (swift::Demangle::__runtime::Node *)v24[v16];
LABEL_45:
    int v26 = *((unsigned __int8 *)v25 + 18);
    unint64_t v27 = (unint64_t *)v25;
    if (v26 != 1)
    {
      if (v26 != 5 || *((_DWORD *)v25 + 2) != 1)
      {
LABEL_68:
        int v12 = 3604;
        int v13 = 1;
        uint64_t v5 = v25;
        goto LABEL_14;
      }
      unint64_t v27 = *(unint64_t **)v25;
    }
    if (*(_WORD *)(*v27 + 16) != 232) {
      goto LABEL_68;
    }
    int v28 = (unint64_t *)v25;
    if ((v26 - 1) < 2) {
      goto LABEL_54;
    }
    if (v26 == 5 && *((_DWORD *)v25 + 2))
    {
      int v28 = *(unint64_t **)v25;
LABEL_54:
      unint64_t v18 = *v28;
      goto LABEL_56;
    }
    unint64_t v18 = 0;
LABEL_56:
    if (*((_WORD *)v25 + 8) != 213) {
      goto LABEL_27;
    }
    Node = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(*v6, 123);
    uint64_t v30 = Node;
    int v31 = *(unsigned __int8 *)(v18 + 18);
    if ((v31 - 1) >= 2)
    {
      if (v31 != 5 || !*(_DWORD *)(v18 + 8))
      {
        unint64_t v19 = 0;
        goto LABEL_26;
      }
      unint64_t v18 = *(void *)v18;
    }
    unint64_t v19 = *(swift::Demangle::__runtime::Node **)v18;
LABEL_26:
    swift::Demangle::__runtime::Node::addChild(Node, v19, (swift::Demangle::__runtime::NodeFactory *)*v6);
    unint64_t v18 = swift::Demangle::__runtime::NodeFactory::createNode(*v6, 232);
    swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v18, v30, (swift::Demangle::__runtime::NodeFactory *)*v6);
LABEL_27:
    this = (char **)swift::Demangle::__runtime::Node::addChild(v14, (swift::Demangle::__runtime::Node *)v18, (swift::Demangle::__runtime::NodeFactory *)*v6);
    if (v17 == ++v16) {
      goto LABEL_60;
    }
  }
  if (v20 == 1) {
    goto LABEL_77;
  }
  if (v20 != 5)
  {
    if (v20 == 2)
    {
      unint64_t v20 = 2;
      goto LABEL_77;
    }
    goto LABEL_81;
  }
  unint64_t v20 = *((unsigned int *)v11 + 2);
LABEL_77:
  if (v20 <= v16)
  {
LABEL_81:
    uint64_t v5 = 0;
  }
  else
  {
    if ((v21 & 1) == 0) {
      unsigned int v11 = (uint64_t *)*v11;
    }
    uint64_t v5 = (swift::Demangle::__runtime::Node *)v11[v16];
  }
  int v12 = 3600;
LABEL_13:
  int v13 = 1;
LABEL_14:
  *(_DWORD *)a4 = v13;
  *(void *)(a4 + 8) = v5;
  *(_DWORD *)(a4 + 16) = v12;
  return this;
}

uint64_t *anonymous namespace'::Remangler::mangleSetter@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = *((unsigned __int8 *)a2 + 18);
  if ((v4 - 1) >= 2)
  {
    if (v4 != 5 || !*((_DWORD *)a2 + 2))
    {
      uint64_t v5 = 0;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  uint64_t v5 = *(void *)a2;
}

unsigned int *anonymous namespace'::Remangler::mangleIsSerialized@<X0>(unsigned int *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = this;
  unsigned int v5 = this[3184];
  size_t v6 = this[3185];
  int v7 = (char *)*((void *)this + 1591);
  if (v5 >= v6)
  {
    int v8 = (void *)*((void *)this + 1593);
    int v9 = (char *)v8[1];
    if (&v7[v6] == v9)
    {
      unint64_t v11 = (unint64_t)&v7[v6 + 1];
      unint64_t v10 = v8[2];
      if (v11 <= v10)
      {
        v8[1] = v11;
        LODWORD(v12) = 1;
LABEL_20:
        v3[3185] = v6 + v12;
        goto LABEL_21;
      }
    }
    else
    {
      unint64_t v10 = v8[2];
    }
    if ((2 * v6) <= 4) {
      uint64_t v12 = 4;
    }
    else {
      uint64_t v12 = (2 * v6);
    }
    size_t v13 = v12 + v6;
    if (v9) {
      BOOL v14 = (unint64_t)&v9[v12 + v6] > v10;
    }
    else {
      BOOL v14 = 1;
    }
    int v7 = (char *)v8[1];
    if (v14)
    {
      unint64_t v15 = 2 * v8[4];
      if (v15 <= v13 + 1) {
        unint64_t v15 = v13 + 1;
      }
      v8[4] = v15;
      unint64_t v16 = v15 + 8;
      this = (unsigned int *)malloc_type_malloc(v15 + 8, 0xD0263BC5uLL);
      uint64_t v17 = (char *)this + v16;
      *(void *)this = v8[3];
      int v7 = (char *)(this + 2);
      v8[2] = v17;
      v8[3] = this;
    }
    v8[1] = &v7[v13];
    if (v6) {
      this = (unsigned int *)memcpy(v7, *((const void **)v3 + 1591), v6);
    }
    *((void *)v3 + 1591) = v7;
    LODWORD(v6) = v3[3185];
    unsigned int v5 = v3[3184];
    goto LABEL_20;
  }
LABEL_21:
  v3[3184] = v5 + 1;
  v7[v5] = 113;
  *(_DWORD *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(_DWORD *)(a2 + 16) = 0;
  return this;
}

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleStatic@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 == 1)
  {
LABEL_5:
    if (*(_DWORD *)a4) {
      return this;
    }
    unsigned int v7 = *((_DWORD *)v4 + 3184);
    size_t v8 = *((unsigned int *)v4 + 3185);
    int v9 = (unsigned char *)*((void *)v4 + 1591);
    if (v7 < v8) {
      goto LABEL_27;
    }
    unint64_t v10 = (void *)*((void *)v4 + 1593);
    unint64_t v11 = (unsigned char *)v10[1];
    if (&v9[v8] == v11)
    {
      unint64_t v15 = (unint64_t)&v9[v8 + 1];
      unint64_t v12 = v10[2];
      if (v15 <= v12)
      {
        v10[1] = v15;
        LODWORD(v16) = 1;
LABEL_26:
        *((_DWORD *)v4 + 3185) = v8 + v16;
LABEL_27:
        int v14 = 0;
        a2 = 0;
        int v13 = 0;
        *((_DWORD *)v4 + 3184) = v7 + 1;
        v9[v7] = 90;
        goto LABEL_28;
      }
    }
    else
    {
      unint64_t v12 = v10[2];
    }
    if ((2 * v8) <= 4) {
      uint64_t v16 = 4;
    }
    else {
      uint64_t v16 = (2 * v8);
    }
    size_t v17 = v16 + v8;
    if (v11) {
      BOOL v18 = (unint64_t)&v11[v16 + v8] > v12;
    }
    else {
      BOOL v18 = 1;
    }
    int v9 = (unsigned char *)v10[1];
    if (v18)
    {
      unint64_t v19 = 2 * v10[4];
      if (v19 <= v17 + 1) {
        unint64_t v19 = v17 + 1;
      }
      v10[4] = v19;
      unint64_t v20 = v19 + 8;
      this = (_anonymous_namespace_::Remangler *)malloc_type_malloc(v19 + 8, 0xD0263BC5uLL);
      char v21 = (char *)this + v20;
      *(void *)this = v10[3];
      int v9 = (char *)this + 8;
      v10[2] = v21;
      v10[3] = this;
    }
    v10[1] = &v9[v17];
    if (v8) {
      this = (_anonymous_namespace_::Remangler *)memcpy(v9, *((const void **)v4 + 1591), v8);
    }
    *((void *)v4 + 1591) = v9;
    LODWORD(v8) = *((_DWORD *)v4 + 3185);
    unsigned int v7 = *((_DWORD *)v4 + 3184);
    goto LABEL_26;
  }
  if (v6 == 5 && *((_DWORD *)a2 + 2) == 1)
  {
    a2 = *(swift::Demangle::__runtime::Node **)a2;
    goto LABEL_5;
  }
  int v13 = 321;
  int v14 = 10;
LABEL_28:
  *(_DWORD *)a4 = v14;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v13;
  return this;
}

uint64_t *anonymous namespace'::Remangler::mangleThinFunctionType@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v7 = *((unsigned __int8 *)a2 + 18);
  switch(v7)
  {
    case 1:
      goto LABEL_6;
    case 5:
      uint64_t v7 = *((unsigned int *)a2 + 2);
      if (v7) {
        goto LABEL_6;
      }
      break;
    case 2:
      uint64_t v7 = 2;
LABEL_6:
      unsigned int v8 = a3 + 1;
      for (uint64_t i = v7 - 1; i != -1; --i)
      {
        unint64_t v10 = *((unsigned __int8 *)a2 + 18);
        unsigned int v11 = v10 - 1;
        if (v10 != 1)
        {
          if (v10 == 5)
          {
            unint64_t v10 = *((unsigned int *)a2 + 2);
          }
          else
          {
            if (v10 != 2) {
              goto LABEL_7;
            }
            unint64_t v10 = 2;
          }
        }
        if (v10 <= i)
        {
LABEL_7:
          *(_DWORD *)a4 = 0;
          *(void *)(a4 + 8) = 0;
          *(_DWORD *)(a4 + 16) = 0;
          continue;
        }
        unint64_t v12 = a2;
        if (v11 >= 2) {
          unint64_t v12 = *(swift::Demangle::__runtime::Node **)a2;
        }
        if (*(_DWORD *)a4) {
          return result;
        }
      }
      break;
  }
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  uint64_t result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "Xf", 2uLL, this[1593]);
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  return result;
}

void *anonymous namespace'::Remangler::mangleTuple@<X0>(const void **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  if (!*(_DWORD *)a4)
  {
    unsigned int v7 = *((_DWORD *)this + 3184);
    size_t v8 = *((unsigned int *)this + 3185);
    int v9 = this[1591];
    if (v7 < v8)
    {
LABEL_22:
      *((_DWORD *)this + 3184) = v7 + 1;
      v9[v7] = 116;
      *(_DWORD *)a4 = 0;
      *(void *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 16) = 0;
      return result;
    }
    unint64_t v10 = this[1593];
    unsigned int v11 = (unsigned char *)v10[1];
    if (&v9[v8] == v11)
    {
      unint64_t v13 = (unint64_t)&v9[v8 + 1];
      unint64_t v12 = v10[2];
      if (v13 <= v12)
      {
        v10[1] = v13;
        LODWORD(v14) = 1;
LABEL_21:
        *((_DWORD *)this + 3185) = v8 + v14;
        goto LABEL_22;
      }
    }
    else
    {
      unint64_t v12 = v10[2];
    }
    if ((2 * v8) <= 4) {
      uint64_t v14 = 4;
    }
    else {
      uint64_t v14 = (2 * v8);
    }
    size_t v15 = v14 + v8;
    if (v11) {
      BOOL v16 = (unint64_t)&v11[v14 + v8] > v12;
    }
    else {
      BOOL v16 = 1;
    }
    int v9 = (unsigned char *)v10[1];
    if (v16)
    {
      unint64_t v17 = 2 * v10[4];
      if (v17 <= v15 + 1) {
        unint64_t v17 = v15 + 1;
      }
      v10[4] = v17;
      unint64_t v18 = v17 + 8;
      uint64_t result = malloc_type_malloc(v17 + 8, 0xD0263BC5uLL);
      unint64_t v19 = (char *)result + v18;
      *uint64_t result = v10[3];
      int v9 = result + 1;
      v10[2] = v19;
      v10[3] = result;
    }
    v10[1] = &v9[v15];
    if (v8) {
      uint64_t result = memcpy(v9, this[1591], v8);
    }
    this[1591] = v9;
    LODWORD(v8) = *((_DWORD *)this + 3185);
    unsigned int v7 = *((_DWORD *)this + 3184);
    goto LABEL_21;
  }
  return result;
}

void *anonymous namespace'::Remangler::manglePack@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  if (!*(_DWORD *)a4)
  {
    uint64_t result = swift::Demangle::__runtime::CharVector::append(this + 1591, "QP", 2uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
  }
  return result;
}

void *anonymous namespace'::Remangler::mangleSILPackDirect@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  if (!*(_DWORD *)a4)
  {
    uint64_t result = swift::Demangle::__runtime::CharVector::append(this + 1591, "QSd", 3uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
  }
  return result;
}

void *anonymous namespace'::Remangler::mangleSILPackIndirect@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  if (!*(_DWORD *)a4)
  {
    uint64_t result = swift::Demangle::__runtime::CharVector::append(this + 1591, "QSi", 3uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
  }
  return result;
}

uint64_t *anonymous namespace'::Remangler::manglePackExpansion@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6 = *((unsigned __int8 *)a2 + 18);
  unsigned int v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      uint64_t v8 = *(void *)a2;
      unsigned int v7 = *(swift::Demangle::__runtime::Node **)a2;
      goto LABEL_9;
    }
    unsigned int v7 = 0;
  }
  switch(v6)
  {
    case 1:
      int v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 8);
      if (v7 == (swift::Demangle::__runtime::Node *)((char *)a2 + 8)) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 2:
      int v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 16);
      if (v7 == (swift::Demangle::__runtime::Node *)((char *)a2 + 16)) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 5:
      uint64_t v8 = *(void *)a2;
LABEL_9:
      int v9 = (swift::Demangle::__runtime::Node *)(v8 + 8 * *((unsigned int *)a2 + 2));
      if (v7 == v9) {
        goto LABEL_19;
      }
      goto LABEL_16;
  }
  int v9 = 0;
  if (!v7)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    uint64_t result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "Qp", 2uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
LABEL_16:
  unsigned int v10 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4) {
      return result;
    }
    unsigned int v7 = (swift::Demangle::__runtime::Node *)((char *)v7 + 8);
    if (v7 == v9) {
      goto LABEL_19;
    }
  }
}

uint64_t *anonymous namespace'::Remangler::manglePackElement@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = a2;
  unsigned int v7 = a3 + 1;
  int v8 = *((unsigned __int8 *)a2 + 18);
  int v9 = (swift::Demangle::__runtime::Node **)a2;
  if ((v8 - 1) >= 2)
  {
    if (v8 != 5 || !*((_DWORD *)a2 + 2))
    {
      *(_DWORD *)a4 = 0;
      *(void *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 16) = 0;
      goto LABEL_8;
    }
    int v9 = *(swift::Demangle::__runtime::Node ***)a2;
  }
  if (*(_DWORD *)a4) {
    return result;
  }
LABEL_8:
  uint64_t result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "Qe", 2uLL, this[1593]);
  int v11 = *((unsigned __int8 *)v4 + 18);
  if (v11 == 2) {
    goto LABEL_12;
  }
  if (v11 == 5 && *((_DWORD *)v4 + 2) >= 2u)
  {
    int v4 = *(swift::Demangle::__runtime::Node **)v4;
LABEL_12:
    if (*(_DWORD *)a4) {
      return result;
    }
  }
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  return result;
}

unsigned int *anonymous namespace'::Remangler::mangleTypeList@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  BOOL v7 = 1;
  BOOL v15 = 1;
  uint64_t v8 = *((unsigned __int8 *)a2 + 18);
  switch(v8)
  {
    case 1:
      goto LABEL_6;
    case 5:
      uint64_t v8 = *((unsigned int *)a2 + 2);
      if (v8) {
        goto LABEL_6;
      }
      break;
    case 2:
      uint64_t v8 = 2;
LABEL_6:
      unint64_t v9 = 0;
      unsigned int v10 = a3 + 1;
      while (1)
      {
        unint64_t v11 = *((unsigned __int8 *)a2 + 18);
        unsigned int v12 = v11 - 1;
        if (v11 == 1) {
          goto LABEL_13;
        }
        if (v11 != 5) {
          break;
        }
        if (*((unsigned int *)a2 + 2) > v9)
        {
LABEL_16:
          unint64_t v13 = a2;
          if (v12 >= 2) {
            unint64_t v13 = *(swift::Demangle::__runtime::Node **)a2;
          }
          if (*(_DWORD *)a4) {
            return result;
          }
          goto LABEL_8;
        }
LABEL_7:
        *(_DWORD *)a4 = 0;
        *(void *)(a4 + 8) = 0;
        *(_DWORD *)(a4 + 16) = 0;
LABEL_8:
        if (v8 == ++v9)
        {
          BOOL v7 = v15;
          goto LABEL_21;
        }
      }
      if (v11 != 2) {
        goto LABEL_7;
      }
      unint64_t v11 = 2;
LABEL_13:
      if (v11 > v9) {
        goto LABEL_16;
      }
      goto LABEL_7;
  }
LABEL_21:
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  return result;
}

uint64_t *anonymous namespace'::Remangler::mangleTypeMangling@<X0>(uint64_t *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v4 = (uint64_t)this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  BOOL v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      uint64_t v8 = *(void *)a2;
      BOOL v7 = *(swift::Demangle::__runtime::Node **)a2;
      goto LABEL_9;
    }
    BOOL v7 = 0;
  }
  if (v6 == 1)
  {
    unint64_t v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 8);
    if (v7 != (swift::Demangle::__runtime::Node *)((char *)a2 + 8)) {
      goto LABEL_16;
    }
    goto LABEL_19;
  }
  if (v6 == 2)
  {
    unint64_t v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 16);
    if (v7 != (swift::Demangle::__runtime::Node *)((char *)a2 + 16)) {
      goto LABEL_16;
    }
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    unsigned int v11 = *(_DWORD *)(v4 + 12736);
    size_t v12 = *(unsigned int *)(v4 + 12740);
    unint64_t v13 = *(unsigned char **)(v4 + 12728);
    if (v11 < v12)
    {
LABEL_39:
      *(_DWORD *)(v4 + 12736) = v11 + 1;
      v13[v11] = 68;
      *(_DWORD *)a4 = 0;
      *(void *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 16) = 0;
      return this;
    }
    uint64_t v14 = *(void **)(v4 + 12744);
    BOOL v15 = (unsigned char *)v14[1];
    if (&v13[v12] == v15)
    {
      unint64_t v17 = (unint64_t)&v13[v12 + 1];
      unint64_t v16 = v14[2];
      if (v17 <= v16)
      {
        v14[1] = v17;
        LODWORD(v18) = 1;
LABEL_38:
        *(_DWORD *)(v4 + 12740) = v12 + v18;
        goto LABEL_39;
      }
    }
    else
    {
      unint64_t v16 = v14[2];
    }
    if ((2 * v12) <= 4) {
      uint64_t v18 = 4;
    }
    else {
      uint64_t v18 = (2 * v12);
    }
    size_t v19 = v18 + v12;
    if (v15) {
      BOOL v20 = (unint64_t)&v15[v18 + v12] > v16;
    }
    else {
      BOOL v20 = 1;
    }
    unint64_t v13 = (unsigned char *)v14[1];
    if (v20)
    {
      unint64_t v21 = 2 * v14[4];
      if (v21 <= v19 + 1) {
        unint64_t v21 = v19 + 1;
      }
      v14[4] = v21;
      unint64_t v22 = v21 + 8;
      this = (uint64_t *)malloc_type_malloc(v21 + 8, 0xD0263BC5uLL);
      unsigned int v23 = (char *)this + v22;
      *this = v14[3];
      unint64_t v13 = this + 1;
      v14[2] = v23;
      v14[3] = this;
    }
    v14[1] = &v13[v19];
    if (v12) {
      this = (uint64_t *)memcpy(v13, *(const void **)(v4 + 12728), v12);
    }
    *(void *)(v4 + 12728) = v13;
    LODWORD(v12) = *(_DWORD *)(v4 + 12740);
    unsigned int v11 = *(_DWORD *)(v4 + 12736);
    goto LABEL_38;
  }
  if (v6 != 5)
  {
    unint64_t v9 = 0;
    if (!v7) {
      goto LABEL_19;
    }
    goto LABEL_16;
  }
  uint64_t v8 = *(void *)a2;
LABEL_9:
  unint64_t v9 = (swift::Demangle::__runtime::Node *)(v8 + 8 * *((unsigned int *)a2 + 2));
  if (v7 == v9) {
    goto LABEL_19;
  }
LABEL_16:
  unsigned int v10 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4) {
      return this;
    }
    BOOL v7 = (swift::Demangle::__runtime::Node *)((char *)v7 + 8);
    if (v7 == v9) {
      goto LABEL_19;
    }
  }
}

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleTypeMetadata@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v4 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      int v8 = 321;
      int v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  if (*(_DWORD *)a4) {
    return this;
  }
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::__runtime::CharVector::append((char **)v4 + 1591, "N", 1uLL, *((void **)v4 + 1593));
  int v7 = 0;
  a2 = 0;
  int v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleTypeMetadataAccessFunction@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v4 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      int v8 = 321;
      int v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  if (*(_DWORD *)a4) {
    return this;
  }
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::__runtime::CharVector::append((char **)v4 + 1591, "Ma", 2uLL, *((void **)v4 + 1593));
  int v7 = 0;
  a2 = 0;
  int v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleTypeMetadataCompletionFunction@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v4 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      int v8 = 321;
      int v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  if (*(_DWORD *)a4) {
    return this;
  }
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::__runtime::CharVector::append((char **)v4 + 1591, "Mr", 2uLL, *((void **)v4 + 1593));
  int v7 = 0;
  a2 = 0;
  int v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleTypeMetadataInstantiationCache@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v4 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      int v8 = 321;
      int v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  if (*(_DWORD *)a4) {
    return this;
  }
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::__runtime::CharVector::append((char **)v4 + 1591, "MI", 2uLL, *((void **)v4 + 1593));
  int v7 = 0;
  a2 = 0;
  int v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleTypeMetadataInstantiationFunction@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v4 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      int v8 = 321;
      int v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  if (*(_DWORD *)a4) {
    return this;
  }
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::__runtime::CharVector::append((char **)v4 + 1591, "Mi", 2uLL, *((void **)v4 + 1593));
  int v7 = 0;
  a2 = 0;
  int v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleTypeMetadataSingletonInitializationCache@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v4 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      int v8 = 321;
      int v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  if (*(_DWORD *)a4) {
    return this;
  }
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::__runtime::CharVector::append((char **)v4 + 1591, "Ml", 2uLL, *((void **)v4 + 1593));
  int v7 = 0;
  a2 = 0;
  int v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

uint64_t *anonymous namespace'::Remangler::mangleTypeMetadataDemanglingCache@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6 = *((unsigned __int8 *)a2 + 18);
  int v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      uint64_t v8 = *(void *)a2;
      int v7 = *(swift::Demangle::__runtime::Node **)a2;
      goto LABEL_9;
    }
    int v7 = 0;
  }
  switch(v6)
  {
    case 1:
      unint64_t v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 8);
      if (v7 == (swift::Demangle::__runtime::Node *)((char *)a2 + 8)) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 2:
      unint64_t v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 16);
      if (v7 == (swift::Demangle::__runtime::Node *)((char *)a2 + 16)) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 5:
      uint64_t v8 = *(void *)a2;
LABEL_9:
      unint64_t v9 = (swift::Demangle::__runtime::Node *)(v8 + 8 * *((unsigned int *)a2 + 2));
      if (v7 == v9) {
        goto LABEL_19;
      }
      goto LABEL_16;
  }
  unint64_t v9 = 0;
  if (!v7)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    uint64_t result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "MD", 2uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
LABEL_16:
  unsigned int v10 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4) {
      return result;
    }
    int v7 = (swift::Demangle::__runtime::Node *)((char *)v7 + 8);
    if (v7 == v9) {
      goto LABEL_19;
    }
  }
}

uint64_t *anonymous namespace'::Remangler::mangleTypeMetadataLazyCache@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6 = *((unsigned __int8 *)a2 + 18);
  int v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      uint64_t v8 = *(void *)a2;
      int v7 = *(swift::Demangle::__runtime::Node **)a2;
      goto LABEL_9;
    }
    int v7 = 0;
  }
  switch(v6)
  {
    case 1:
      unint64_t v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 8);
      if (v7 == (swift::Demangle::__runtime::Node *)((char *)a2 + 8)) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 2:
      unint64_t v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 16);
      if (v7 == (swift::Demangle::__runtime::Node *)((char *)a2 + 16)) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 5:
      uint64_t v8 = *(void *)a2;
LABEL_9:
      unint64_t v9 = (swift::Demangle::__runtime::Node *)(v8 + 8 * *((unsigned int *)a2 + 2));
      if (v7 == v9) {
        goto LABEL_19;
      }
      goto LABEL_16;
  }
  unint64_t v9 = 0;
  if (!v7)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    uint64_t result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "ML", 2uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
LABEL_16:
  unsigned int v10 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4) {
      return result;
    }
    int v7 = (swift::Demangle::__runtime::Node *)((char *)v7 + 8);
    if (v7 == v9) {
      goto LABEL_19;
    }
  }
}

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleWeak@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v4 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      int v8 = 321;
      int v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  if (*(_DWORD *)a4) {
    return this;
  }
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::__runtime::CharVector::append((char **)v4 + 1591, "Xw", 2uLL, *((void **)v4 + 1593));
  int v7 = 0;
  a2 = 0;
  int v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleUnowned@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v4 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      int v8 = 321;
      int v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  if (*(_DWORD *)a4) {
    return this;
  }
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::__runtime::CharVector::append((char **)v4 + 1591, "Xo", 2uLL, *((void **)v4 + 1593));
  int v7 = 0;
  a2 = 0;
  int v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleUnmanaged@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v4 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      int v8 = 321;
      int v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  if (*(_DWORD *)a4) {
    return this;
  }
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::__runtime::CharVector::append((char **)v4 + 1591, "Xu", 2uLL, *((void **)v4 + 1593));
  int v7 = 0;
  a2 = 0;
  int v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

uint64_t *anonymous namespace'::Remangler::mangleUnsafeAddressor@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = *((unsigned __int8 *)a2 + 18);
  if ((v4 - 1) >= 2)
  {
    if (v4 != 5 || !*((_DWORD *)a2 + 2))
    {
      uint64_t v5 = 0;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  uint64_t v5 = *(void *)a2;
}

uint64_t *anonymous namespace'::Remangler::mangleUnsafeMutableAddressor@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = *((unsigned __int8 *)a2 + 18);
  if ((v4 - 1) >= 2)
  {
    if (v4 != 5 || !*((_DWORD *)a2 + 2))
    {
      uint64_t v5 = 0;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  uint64_t v5 = *(void *)a2;
}

uint64_t *anonymous namespace'::Remangler::mangleValueWitness@<X0>(const void **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = a2;
  int v7 = *((unsigned __int8 *)a2 + 18);
  int v8 = a2;
  if (v7 != 2)
  {
    if (v7 != 5 || *((_DWORD *)a2 + 2) < 2u)
    {
      *(_DWORD *)a4 = 0;
      *(void *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 16) = 0;
      goto LABEL_8;
    }
    int v8 = *(swift::Demangle::__runtime::Node **)a2;
  }
  if (*(_DWORD *)a4) {
    return result;
  }
  int v7 = *((unsigned __int8 *)v4 + 18);
LABEL_8:
  if ((v7 - 1) >= 2) {
    int v4 = *(swift::Demangle::__runtime::Node **)v4;
  }
  switch(**(_DWORD **)v4)
  {
    case 0:
      char v10 = 0;
      unsigned int v11 = "al";
      break;
    case 1:
      char v10 = 0;
      unsigned int v11 = "ca";
      break;
    case 2:
      char v10 = 0;
      unsigned int v11 = "ta";
      break;
    case 3:
      char v10 = 0;
      unsigned int v11 = "de";
      break;
    case 4:
      char v10 = 0;
      unsigned int v11 = "xx";
      break;
    case 5:
      char v10 = 0;
      unsigned int v11 = "XX";
      break;
    case 6:
      char v10 = 0;
      unsigned int v11 = "Xx";
      break;
    case 7:
      char v10 = 0;
      unsigned int v11 = "CP";
      break;
    case 8:
      char v10 = 0;
      unsigned int v11 = "Cp";
      break;
    case 9:
      char v10 = 0;
      unsigned int v11 = "cp";
      break;
    case 0xA:
      char v10 = 0;
      unsigned int v11 = "Tk";
      break;
    case 0xB:
      char v10 = 0;
      unsigned int v11 = "tk";
      break;
    case 0xC:
      char v10 = 0;
      unsigned int v11 = "pr";
      break;
    case 0xD:
      char v10 = 0;
      unsigned int v11 = "TK";
      break;
    case 0xE:
      char v10 = 0;
      unsigned int v11 = "Cc";
      break;
    case 0xF:
      char v10 = 0;
      unsigned int v11 = "Tt";
      break;
    case 0x10:
      char v10 = 0;
      unsigned int v11 = "tT";
      break;
    case 0x11:
      char v10 = 0;
      unsigned int v11 = "xs";
      break;
    case 0x12:
      char v10 = 0;
      unsigned int v11 = "xg";
      break;
    case 0x13:
      char v10 = 0;
      unsigned int v11 = "ug";
      break;
    case 0x14:
      char v10 = 0;
      unsigned int v11 = "up";
      break;
    case 0x15:
      char v10 = 0;
      unsigned int v11 = "ui";
      break;
    case 0x16:
      char v10 = 0;
      unsigned int v11 = "et";
      break;
    case 0x17:
      char v10 = 0;
      unsigned int v11 = "st";
      break;
    default:
      unsigned int v11 = 0;
      char v10 = 1;
      break;
  }
  unsigned int v12 = *((_DWORD *)this + 3184);
  size_t v13 = *((unsigned int *)this + 3185);
  uint64_t v14 = (char *)this[1591];
  if (v12 < v13) {
    goto LABEL_52;
  }
  BOOL v15 = this[1593];
  unint64_t v16 = (char *)v15[1];
  if (&v14[v13] != v16)
  {
    unint64_t v17 = v15[2];
LABEL_40:
    if ((2 * v13) <= 4) {
      uint64_t v19 = 4;
    }
    else {
      uint64_t v19 = (2 * v13);
    }
    size_t v20 = v19 + v13;
    if (!v16 || (unint64_t)&v16[v20] > v17)
    {
      unint64_t v21 = 2 * v15[4];
      if (v21 <= v20 + 1) {
        unint64_t v21 = v20 + 1;
      }
      v15[4] = v21;
      unint64_t v22 = v21 + 8;
      unsigned int v23 = malloc_type_malloc(v21 + 8, 0xD0263BC5uLL);
      uint64_t v24 = (char *)v23 + v22;
      void *v23 = v15[3];
      unint64_t v16 = (char *)(v23 + 1);
      v15[2] = v24;
      v15[3] = v23;
    }
    v15[1] = &v16[v20];
    if (v13) {
      memcpy(v16, this[1591], v13);
    }
    this[1591] = v16;
    LODWORD(v13) = *((_DWORD *)this + 3185);
    uint64_t v14 = v16;
    unsigned int v12 = *((_DWORD *)this + 3184);
    goto LABEL_51;
  }
  unint64_t v18 = (unint64_t)&v14[v13 + 1];
  unint64_t v17 = v15[2];
  if (v18 > v17) {
    goto LABEL_40;
  }
  v15[1] = v18;
  LODWORD(v19) = 1;
LABEL_51:
  *((_DWORD *)this + 3185) = v13 + v19;
LABEL_52:
  *((_DWORD *)this + 3184) = v12 + 1;
  v14[v12] = 119;
  if (v10) {
    size_t v25 = 0;
  }
  else {
    size_t v25 = strlen(v11);
  }
  uint64_t result = (uint64_t *)swift::Demangle::__runtime::CharVector::append((char **)this + 1591, v11, v25, this[1593]);
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  return result;
}

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleValueWitnessTable@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      int v8 = 321;
      int v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  if (*(_DWORD *)a4) {
    return this;
  }
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::__runtime::CharVector::append((char **)v4 + 1591, "WV", 2uLL, *((void **)v4 + 1593));
  int v7 = 0;
  a2 = 0;
  int v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

uint64_t *anonymous namespace'::Remangler::mangleVTableThunk@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6 = *((unsigned __int8 *)a2 + 18);
  int v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      uint64_t v8 = *(void *)a2;
      int v7 = *(swift::Demangle::__runtime::Node **)a2;
      goto LABEL_9;
    }
    int v7 = 0;
  }
  switch(v6)
  {
    case 1:
      unint64_t v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 8);
      if (v7 == (swift::Demangle::__runtime::Node *)((char *)a2 + 8)) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 2:
      unint64_t v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 16);
      if (v7 == (swift::Demangle::__runtime::Node *)((char *)a2 + 16)) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 5:
      uint64_t v8 = *(void *)a2;
LABEL_9:
      unint64_t v9 = (swift::Demangle::__runtime::Node *)(v8 + 8 * *((unsigned int *)a2 + 2));
      if (v7 == v9) {
        goto LABEL_19;
      }
      goto LABEL_16;
  }
  unint64_t v9 = 0;
  if (!v7)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    uint64_t result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "TV", 2uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
LABEL_16:
  unsigned int v10 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4) {
      return result;
    }
    int v7 = (swift::Demangle::__runtime::Node *)((char *)v7 + 8);
    if (v7 == v9) {
      goto LABEL_19;
    }
  }
}

uint64_t *anonymous namespace'::Remangler::mangleWillSet@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = *((unsigned __int8 *)a2 + 18);
  if ((v4 - 1) >= 2)
  {
    if (v4 != 5 || !*((_DWORD *)a2 + 2))
    {
      uint64_t v5 = 0;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  uint64_t v5 = *(void *)a2;
}

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleReflectionMetadataBuiltinDescriptor@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      int v8 = 321;
      int v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  if (*(_DWORD *)a4) {
    return this;
  }
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::__runtime::CharVector::append((char **)v4 + 1591, "MB", 2uLL, *((void **)v4 + 1593));
  int v7 = 0;
  a2 = 0;
  int v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleReflectionMetadataFieldDescriptor@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      int v8 = 321;
      int v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  if (*(_DWORD *)a4) {
    return this;
  }
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::__runtime::CharVector::append((char **)v4 + 1591, "MF", 2uLL, *((void **)v4 + 1593));
  int v7 = 0;
  a2 = 0;
  int v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleReflectionMetadataAssocTypeDescriptor@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      int v8 = 321;
      int v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  if (*(_DWORD *)a4) {
    return this;
  }
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::__runtime::CharVector::append((char **)v4 + 1591, "MA", 2uLL, *((void **)v4 + 1593));
  int v7 = 0;
  a2 = 0;
  int v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleReflectionMetadataSuperclassDescriptor@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      int v8 = 321;
      int v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  if (*(_DWORD *)a4) {
    return this;
  }
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::__runtime::CharVector::append((char **)v4 + 1591, "MC", 2uLL, *((void **)v4 + 1593));
  int v7 = 0;
  a2 = 0;
  int v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

uint64_t *anonymous namespace'::Remangler::mangleGenericTypeParamDecl@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6 = *((unsigned __int8 *)a2 + 18);
  int v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      uint64_t v8 = *(void *)a2;
      int v7 = *(swift::Demangle::__runtime::Node **)a2;
      goto LABEL_9;
    }
    int v7 = 0;
  }
  switch(v6)
  {
    case 1:
      unint64_t v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 8);
      if (v7 == (swift::Demangle::__runtime::Node *)((char *)a2 + 8)) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 2:
      unint64_t v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 16);
      if (v7 == (swift::Demangle::__runtime::Node *)((char *)a2 + 16)) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 5:
      uint64_t v8 = *(void *)a2;
LABEL_9:
      unint64_t v9 = (swift::Demangle::__runtime::Node *)(v8 + 8 * *((unsigned int *)a2 + 2));
      if (v7 == v9) {
        goto LABEL_19;
      }
      goto LABEL_16;
  }
  unint64_t v9 = 0;
  if (!v7)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    uint64_t result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "fp", 2uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
LABEL_16:
  unsigned int v10 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4) {
      return result;
    }
    int v7 = (swift::Demangle::__runtime::Node *)((char *)v7 + 8);
    if (v7 == v9) {
      goto LABEL_19;
    }
  }
}

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleCurryThunk@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      int v8 = 321;
      int v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  if (*(_DWORD *)a4) {
    return this;
  }
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::__runtime::CharVector::append((char **)v4 + 1591, "Tc", 2uLL, *((void **)v4 + 1593));
  int v7 = 0;
  a2 = 0;
  int v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleDispatchThunk@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      int v8 = 321;
      int v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  if (*(_DWORD *)a4) {
    return this;
  }
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::__runtime::CharVector::append((char **)v4 + 1591, "Tj", 2uLL, *((void **)v4 + 1593));
  int v7 = 0;
  a2 = 0;
  int v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleMethodDescriptor@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      int v8 = 321;
      int v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  if (*(_DWORD *)a4) {
    return this;
  }
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::__runtime::CharVector::append((char **)v4 + 1591, "Tq", 2uLL, *((void **)v4 + 1593));
  int v7 = 0;
  a2 = 0;
  int v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

uint64_t *anonymous namespace'::Remangler::mangleProtocolRequirementsBaseDescriptor@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v7 = *((unsigned __int8 *)a2 + 18);
  if ((v7 - 1) < 2) {
    goto LABEL_5;
  }
  if (v7 == 5 && *((_DWORD *)a2 + 2))
  {
    a2 = (swift::Demangle::__runtime::Node **)*a2;
LABEL_5:
    int v8 = *a2;
    goto LABEL_7;
  }
  int v8 = 0;
LABEL_7:
  if (*((_WORD *)v8 + 8) != 232) {
    goto LABEL_14;
  }
  int v9 = *((unsigned __int8 *)v8 + 18);
  if ((v9 - 1) < 2) {
    goto LABEL_12;
  }
  if (v9 == 5 && *((_DWORD *)v8 + 2))
  {
    int v8 = *(swift::Demangle::__runtime::Node **)v8;
LABEL_12:
    int v8 = *(swift::Demangle::__runtime::Node **)v8;
    goto LABEL_14;
  }
  int v8 = 0;
LABEL_14:
    goto LABEL_33;
  int v10 = *((unsigned __int8 *)v8 + 18);
  unsigned int v11 = (swift::Demangle::__runtime::Node **)v8;
  if ((v10 - 1) >= 2)
  {
    if (v10 == 5)
    {
      unsigned int v12 = *(swift::Demangle::__runtime::Node **)v8;
      unsigned int v11 = *(swift::Demangle::__runtime::Node ***)v8;
      goto LABEL_23;
    }
    unsigned int v11 = 0;
  }
  if (v10 == 1)
  {
    size_t v13 = (swift::Demangle::__runtime::Node **)((char *)v8 + 8);
    if (v11 == v13) {
      goto LABEL_33;
    }
    goto LABEL_30;
  }
  if (v10 == 2)
  {
    size_t v13 = (swift::Demangle::__runtime::Node **)((char *)v8 + 16);
    if (v11 == v13) {
      goto LABEL_33;
    }
    goto LABEL_30;
  }
  if (v10 != 5)
  {
    size_t v13 = 0;
    if (v11) {
      goto LABEL_30;
    }
LABEL_33:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    uint64_t result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "TL", 2uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
  unsigned int v12 = *(swift::Demangle::__runtime::Node **)v8;
LABEL_23:
  size_t v13 = (swift::Demangle::__runtime::Node **)((char *)v12 + 8 * *((unsigned int *)v8 + 2));
  if (v11 == v13) {
    goto LABEL_33;
  }
LABEL_30:
  unsigned int v14 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4) {
      return result;
    }
    if (++v11 == v13) {
      goto LABEL_33;
    }
  }
}

uint64_t *anonymous namespace'::Remangler::mangleAssociatedConformanceDescriptor@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v7 = *((unsigned __int8 *)a2 + 18);
  int v8 = a2;
  if ((v7 - 1) < 2) {
    goto LABEL_5;
  }
  if (v7 == 5 && *((_DWORD *)a2 + 2))
  {
    int v8 = (swift::Demangle::__runtime::Node **)*a2;
LABEL_5:
    int v9 = *v8;
    goto LABEL_7;
  }
  int v9 = 0;
LABEL_7:
  unsigned int v10 = a3 + 1;
  if (*(_DWORD *)a4) {
    return result;
  }
  int v12 = *((unsigned __int8 *)a2 + 18);
  size_t v13 = (swift::Demangle::__runtime::Node *)a2;
  if (v12 == 2) {
    goto LABEL_12;
  }
  if (v12 == 5 && *((_DWORD *)a2 + 2) >= 2u)
  {
    size_t v13 = *a2;
LABEL_12:
    unsigned int v14 = (swift::Demangle::__runtime::Node *)*((void *)v13 + 1);
    goto LABEL_14;
  }
  unsigned int v14 = 0;
LABEL_14:
  if (*(_DWORD *)a4) {
    return result;
  }
  if (*((unsigned char *)a2 + 18) == 5 && *((_DWORD *)a2 + 2) >= 3u) {
    BOOL v15 = (swift::Demangle::__runtime::Node *)*((void *)*a2 + 2);
  }
  else {
    BOOL v15 = 0;
  }
  if (*((_WORD *)v15 + 8) == 232)
  {
    int v16 = *((unsigned __int8 *)v15 + 18);
    if ((v16 - 1) >= 2)
    {
      if (v16 != 5 || !*((_DWORD *)v15 + 2))
      {
        BOOL v15 = 0;
        goto LABEL_26;
      }
      BOOL v15 = *(swift::Demangle::__runtime::Node **)v15;
    }
    BOOL v15 = *(swift::Demangle::__runtime::Node **)v15;
  }
LABEL_26:
  {
    int v17 = *((unsigned __int8 *)v15 + 18);
    unint64_t v18 = (swift::Demangle::__runtime::Node **)v15;
    if ((v17 - 1) >= 2)
    {
      if (v17 == 5)
      {
        uint64_t v19 = *(swift::Demangle::__runtime::Node **)v15;
        unint64_t v18 = *(swift::Demangle::__runtime::Node ***)v15;
LABEL_35:
        size_t v20 = (swift::Demangle::__runtime::Node **)((char *)v19 + 8 * *((unsigned int *)v15 + 2));
        goto LABEL_41;
      }
      unint64_t v18 = 0;
    }
    switch(v17)
    {
      case 1:
        size_t v20 = (swift::Demangle::__runtime::Node **)((char *)v15 + 8);
        goto LABEL_41;
      case 2:
        size_t v20 = (swift::Demangle::__runtime::Node **)((char *)v15 + 16);
        goto LABEL_41;
      case 5:
        uint64_t v19 = *(swift::Demangle::__runtime::Node **)v15;
        goto LABEL_35;
    }
    size_t v20 = 0;
LABEL_41:
    while (v18 != v20)
    {
      if (*(_DWORD *)a4) {
        return result;
      }
      ++v18;
    }
  }
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  uint64_t result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "Tn", 2uLL, this[1593]);
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  return result;
}

uint64_t *anonymous namespace'::Remangler::mangleDefaultAssociatedConformanceAccessor@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v7 = *((unsigned __int8 *)a2 + 18);
  int v8 = a2;
  if ((v7 - 1) < 2) {
    goto LABEL_5;
  }
  if (v7 == 5 && *((_DWORD *)a2 + 2))
  {
    int v8 = (swift::Demangle::__runtime::Node **)*a2;
LABEL_5:
    int v9 = *v8;
    goto LABEL_7;
  }
  int v9 = 0;
LABEL_7:
  unsigned int v10 = a3 + 1;
  if (*(_DWORD *)a4) {
    return result;
  }
  int v12 = *((unsigned __int8 *)a2 + 18);
  size_t v13 = (swift::Demangle::__runtime::Node *)a2;
  if (v12 == 2) {
    goto LABEL_12;
  }
  if (v12 == 5 && *((_DWORD *)a2 + 2) >= 2u)
  {
    size_t v13 = *a2;
LABEL_12:
    unsigned int v14 = (swift::Demangle::__runtime::Node *)*((void *)v13 + 1);
    goto LABEL_14;
  }
  unsigned int v14 = 0;
LABEL_14:
  if (*(_DWORD *)a4) {
    return result;
  }
  if (*((unsigned char *)a2 + 18) == 5 && *((_DWORD *)a2 + 2) >= 3u) {
    BOOL v15 = (swift::Demangle::__runtime::Node *)*((void *)*a2 + 2);
  }
  else {
    BOOL v15 = 0;
  }
  if (*((_WORD *)v15 + 8) == 232)
  {
    int v16 = *((unsigned __int8 *)v15 + 18);
    if ((v16 - 1) >= 2)
    {
      if (v16 != 5 || !*((_DWORD *)v15 + 2))
      {
        BOOL v15 = 0;
        goto LABEL_26;
      }
      BOOL v15 = *(swift::Demangle::__runtime::Node **)v15;
    }
    BOOL v15 = *(swift::Demangle::__runtime::Node **)v15;
  }
LABEL_26:
  {
    int v17 = *((unsigned __int8 *)v15 + 18);
    unint64_t v18 = (swift::Demangle::__runtime::Node **)v15;
    if ((v17 - 1) >= 2)
    {
      if (v17 == 5)
      {
        uint64_t v19 = *(swift::Demangle::__runtime::Node **)v15;
        unint64_t v18 = *(swift::Demangle::__runtime::Node ***)v15;
LABEL_35:
        size_t v20 = (swift::Demangle::__runtime::Node **)((char *)v19 + 8 * *((unsigned int *)v15 + 2));
        goto LABEL_41;
      }
      unint64_t v18 = 0;
    }
    switch(v17)
    {
      case 1:
        size_t v20 = (swift::Demangle::__runtime::Node **)((char *)v15 + 8);
        goto LABEL_41;
      case 2:
        size_t v20 = (swift::Demangle::__runtime::Node **)((char *)v15 + 16);
        goto LABEL_41;
      case 5:
        uint64_t v19 = *(swift::Demangle::__runtime::Node **)v15;
        goto LABEL_35;
    }
    size_t v20 = 0;
LABEL_41:
    while (v18 != v20)
    {
      if (*(_DWORD *)a4) {
        return result;
      }
      ++v18;
    }
  }
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  uint64_t result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "TN", 2uLL, this[1593]);
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  return result;
}

uint64_t *anonymous namespace'::Remangler::mangleBaseConformanceDescriptor@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = a2;
  int v7 = *((unsigned __int8 *)a2 + 18);
  int v8 = (swift::Demangle::__runtime::Node **)a2;
  if ((v7 - 1) < 2) {
    goto LABEL_5;
  }
  if (v7 == 5 && *((_DWORD *)a2 + 2))
  {
    int v8 = *(swift::Demangle::__runtime::Node ***)a2;
LABEL_5:
    int v9 = *v8;
    goto LABEL_7;
  }
  int v9 = 0;
LABEL_7:
  unsigned int v10 = a3 + 1;
  if (*(_DWORD *)a4) {
    return result;
  }
  int v12 = *((unsigned __int8 *)v4 + 18);
  if (v12 == 2) {
    goto LABEL_12;
  }
  if (v12 == 5 && *((_DWORD *)v4 + 2) >= 2u)
  {
    int v4 = *(swift::Demangle::__runtime::Node **)v4;
LABEL_12:
    size_t v13 = (swift::Demangle::__runtime::Node *)*((void *)v4 + 1);
    goto LABEL_14;
  }
  size_t v13 = 0;
LABEL_14:
  if (*((_WORD *)v13 + 8) == 232)
  {
    int v14 = *((unsigned __int8 *)v13 + 18);
    if ((v14 - 1) >= 2)
    {
      if (v14 != 5 || !*((_DWORD *)v13 + 2))
      {
        size_t v13 = 0;
        goto LABEL_21;
      }
      size_t v13 = *(swift::Demangle::__runtime::Node **)v13;
    }
    size_t v13 = *(swift::Demangle::__runtime::Node **)v13;
  }
LABEL_21:
  {
    int v15 = *((unsigned __int8 *)v13 + 18);
    int v16 = (swift::Demangle::__runtime::Node **)v13;
    if ((v15 - 1) >= 2)
    {
      if (v15 == 5)
      {
        int v17 = *(swift::Demangle::__runtime::Node **)v13;
        int v16 = *(swift::Demangle::__runtime::Node ***)v13;
LABEL_30:
        unint64_t v18 = (swift::Demangle::__runtime::Node **)((char *)v17 + 8 * *((unsigned int *)v13 + 2));
        goto LABEL_36;
      }
      int v16 = 0;
    }
    switch(v15)
    {
      case 1:
        unint64_t v18 = (swift::Demangle::__runtime::Node **)((char *)v13 + 8);
        goto LABEL_36;
      case 2:
        unint64_t v18 = (swift::Demangle::__runtime::Node **)((char *)v13 + 16);
        goto LABEL_36;
      case 5:
        int v17 = *(swift::Demangle::__runtime::Node **)v13;
        goto LABEL_30;
    }
    unint64_t v18 = 0;
LABEL_36:
    while (v16 != v18)
    {
      if (*(_DWORD *)a4) {
        return result;
      }
      ++v16;
    }
  }
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  uint64_t result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "Tb", 2uLL, this[1593]);
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  return result;
}

uint64_t *anonymous namespace'::Remangler::mangleAssociatedTypeDescriptor@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6 = *((unsigned __int8 *)a2 + 18);
  int v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      uint64_t v8 = *(void *)a2;
      int v7 = *(swift::Demangle::__runtime::Node **)a2;
      goto LABEL_9;
    }
    int v7 = 0;
  }
  switch(v6)
  {
    case 1:
      int v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 8);
      if (v7 == (swift::Demangle::__runtime::Node *)((char *)a2 + 8)) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 2:
      int v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 16);
      if (v7 == (swift::Demangle::__runtime::Node *)((char *)a2 + 16)) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 5:
      uint64_t v8 = *(void *)a2;
LABEL_9:
      int v9 = (swift::Demangle::__runtime::Node *)(v8 + 8 * *((unsigned int *)a2 + 2));
      if (v7 == v9) {
        goto LABEL_19;
      }
      goto LABEL_16;
  }
  int v9 = 0;
  if (!v7)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    uint64_t result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "Tl", 2uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
LABEL_16:
  unsigned int v10 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4) {
      return result;
    }
    int v7 = (swift::Demangle::__runtime::Node *)((char *)v7 + 8);
    if (v7 == v9) {
      goto LABEL_19;
    }
  }
}

unsigned int *anonymous namespace'::Remangler::mangleThrowsAnnotation@<X0>(unsigned int *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = this;
  unsigned int v5 = this[3184];
  size_t v6 = this[3185];
  int v7 = (char *)*((void *)this + 1591);
  if (v5 >= v6)
  {
    uint64_t v8 = (void *)*((void *)this + 1593);
    int v9 = (char *)v8[1];
    if (&v7[v6] == v9)
    {
      unint64_t v11 = (unint64_t)&v7[v6 + 1];
      unint64_t v10 = v8[2];
      if (v11 <= v10)
      {
        v8[1] = v11;
        LODWORD(v12) = 1;
LABEL_20:
        v3[3185] = v6 + v12;
        goto LABEL_21;
      }
    }
    else
    {
      unint64_t v10 = v8[2];
    }
    if ((2 * v6) <= 4) {
      uint64_t v12 = 4;
    }
    else {
      uint64_t v12 = (2 * v6);
    }
    size_t v13 = v12 + v6;
    if (v9) {
      BOOL v14 = (unint64_t)&v9[v12 + v6] > v10;
    }
    else {
      BOOL v14 = 1;
    }
    int v7 = (char *)v8[1];
    if (v14)
    {
      unint64_t v15 = 2 * v8[4];
      if (v15 <= v13 + 1) {
        unint64_t v15 = v13 + 1;
      }
      v8[4] = v15;
      unint64_t v16 = v15 + 8;
      this = (unsigned int *)malloc_type_malloc(v15 + 8, 0xD0263BC5uLL);
      int v17 = (char *)this + v16;
      *(void *)this = v8[3];
      int v7 = (char *)(this + 2);
      v8[2] = v17;
      v8[3] = this;
    }
    v8[1] = &v7[v13];
    if (v6) {
      this = (unsigned int *)memcpy(v7, *((const void **)v3 + 1591), v6);
    }
    *((void *)v3 + 1591) = v7;
    LODWORD(v6) = v3[3185];
    unsigned int v5 = v3[3184];
    goto LABEL_20;
  }
LABEL_21:
  v3[3184] = v5 + 1;
  v7[v5] = 75;
  *(_DWORD *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(_DWORD *)(a2 + 16) = 0;
  return this;
}

uint64_t *anonymous namespace'::Remangler::mangleTypedThrowsAnnotation@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6 = *((unsigned __int8 *)a2 + 18);
  int v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      uint64_t v8 = *(void *)a2;
      int v7 = *(swift::Demangle::__runtime::Node **)a2;
      goto LABEL_9;
    }
    int v7 = 0;
  }
  switch(v6)
  {
    case 1:
      int v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 8);
      if (v7 == (swift::Demangle::__runtime::Node *)((char *)a2 + 8)) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 2:
      int v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 16);
      if (v7 == (swift::Demangle::__runtime::Node *)((char *)a2 + 16)) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 5:
      uint64_t v8 = *(void *)a2;
LABEL_9:
      int v9 = (swift::Demangle::__runtime::Node *)(v8 + 8 * *((unsigned int *)a2 + 2));
      if (v7 == v9) {
        goto LABEL_19;
      }
      goto LABEL_16;
  }
  int v9 = 0;
  if (!v7)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    uint64_t result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "YK", 2uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
LABEL_16:
  unsigned int v10 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4) {
      return result;
    }
    int v7 = (swift::Demangle::__runtime::Node *)((char *)v7 + 8);
    if (v7 == v9) {
      goto LABEL_19;
    }
  }
}

unsigned int *anonymous namespace'::Remangler::mangleEmptyList@<X0>(unsigned int *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = this;
  unsigned int v5 = this[3184];
  size_t v6 = this[3185];
  int v7 = (char *)*((void *)this + 1591);
  if (v5 >= v6)
  {
    uint64_t v8 = (void *)*((void *)this + 1593);
    int v9 = (char *)v8[1];
    if (&v7[v6] == v9)
    {
      unint64_t v11 = (unint64_t)&v7[v6 + 1];
      unint64_t v10 = v8[2];
      if (v11 <= v10)
      {
        v8[1] = v11;
        LODWORD(v12) = 1;
LABEL_20:
        v3[3185] = v6 + v12;
        goto LABEL_21;
      }
    }
    else
    {
      unint64_t v10 = v8[2];
    }
    if ((2 * v6) <= 4) {
      uint64_t v12 = 4;
    }
    else {
      uint64_t v12 = (2 * v6);
    }
    size_t v13 = v12 + v6;
    if (v9) {
      BOOL v14 = (unint64_t)&v9[v12 + v6] > v10;
    }
    else {
      BOOL v14 = 1;
    }
    int v7 = (char *)v8[1];
    if (v14)
    {
      unint64_t v15 = 2 * v8[4];
      if (v15 <= v13 + 1) {
        unint64_t v15 = v13 + 1;
      }
      v8[4] = v15;
      unint64_t v16 = v15 + 8;
      this = (unsigned int *)malloc_type_malloc(v15 + 8, 0xD0263BC5uLL);
      int v17 = (char *)this + v16;
      *(void *)this = v8[3];
      int v7 = (char *)(this + 2);
      v8[2] = v17;
      v8[3] = this;
    }
    v8[1] = &v7[v13];
    if (v6) {
      this = (unsigned int *)memcpy(v7, *((const void **)v3 + 1591), v6);
    }
    *((void *)v3 + 1591) = v7;
    LODWORD(v6) = v3[3185];
    unsigned int v5 = v3[3184];
    goto LABEL_20;
  }
LABEL_21:
  v3[3184] = v5 + 1;
  v7[v5] = 121;
  *(_DWORD *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(_DWORD *)(a2 + 16) = 0;
  return this;
}

unsigned int *anonymous namespace'::Remangler::mangleFirstElementMarker@<X0>(unsigned int *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = this;
  unsigned int v5 = this[3184];
  size_t v6 = this[3185];
  int v7 = (char *)*((void *)this + 1591);
  if (v5 >= v6)
  {
    uint64_t v8 = (void *)*((void *)this + 1593);
    int v9 = (char *)v8[1];
    if (&v7[v6] == v9)
    {
      unint64_t v11 = (unint64_t)&v7[v6 + 1];
      unint64_t v10 = v8[2];
      if (v11 <= v10)
      {
        v8[1] = v11;
        LODWORD(v12) = 1;
LABEL_20:
        v3[3185] = v6 + v12;
        goto LABEL_21;
      }
    }
    else
    {
      unint64_t v10 = v8[2];
    }
    if ((2 * v6) <= 4) {
      uint64_t v12 = 4;
    }
    else {
      uint64_t v12 = (2 * v6);
    }
    size_t v13 = v12 + v6;
    if (v9) {
      BOOL v14 = (unint64_t)&v9[v12 + v6] > v10;
    }
    else {
      BOOL v14 = 1;
    }
    int v7 = (char *)v8[1];
    if (v14)
    {
      unint64_t v15 = 2 * v8[4];
      if (v15 <= v13 + 1) {
        unint64_t v15 = v13 + 1;
      }
      v8[4] = v15;
      unint64_t v16 = v15 + 8;
      this = (unsigned int *)malloc_type_malloc(v15 + 8, 0xD0263BC5uLL);
      int v17 = (char *)this + v16;
      *(void *)this = v8[3];
      int v7 = (char *)(this + 2);
      v8[2] = v17;
      v8[3] = this;
    }
    v8[1] = &v7[v13];
    if (v6) {
      this = (unsigned int *)memcpy(v7, *((const void **)v3 + 1591), v6);
    }
    *((void *)v3 + 1591) = v7;
    LODWORD(v6) = v3[3185];
    unsigned int v5 = v3[3184];
    goto LABEL_20;
  }
LABEL_21:
  v3[3184] = v5 + 1;
  v7[v5] = 95;
  *(_DWORD *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(_DWORD *)(a2 + 16) = 0;
  return this;
}

unsigned int *anonymous namespace'::Remangler::mangleVariadicMarker@<X0>(unsigned int *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = this;
  unsigned int v5 = this[3184];
  size_t v6 = this[3185];
  int v7 = (char *)*((void *)this + 1591);
  if (v5 >= v6)
  {
    uint64_t v8 = (void *)*((void *)this + 1593);
    int v9 = (char *)v8[1];
    if (&v7[v6] == v9)
    {
      unint64_t v11 = (unint64_t)&v7[v6 + 1];
      unint64_t v10 = v8[2];
      if (v11 <= v10)
      {
        v8[1] = v11;
        LODWORD(v12) = 1;
LABEL_20:
        v3[3185] = v6 + v12;
        goto LABEL_21;
      }
    }
    else
    {
      unint64_t v10 = v8[2];
    }
    if ((2 * v6) <= 4) {
      uint64_t v12 = 4;
    }
    else {
      uint64_t v12 = (2 * v6);
    }
    size_t v13 = v12 + v6;
    if (v9) {
      BOOL v14 = (unint64_t)&v9[v12 + v6] > v10;
    }
    else {
      BOOL v14 = 1;
    }
    int v7 = (char *)v8[1];
    if (v14)
    {
      unint64_t v15 = 2 * v8[4];
      if (v15 <= v13 + 1) {
        unint64_t v15 = v13 + 1;
      }
      v8[4] = v15;
      unint64_t v16 = v15 + 8;
      this = (unsigned int *)malloc_type_malloc(v15 + 8, 0xD0263BC5uLL);
      int v17 = (char *)this + v16;
      *(void *)this = v8[3];
      int v7 = (char *)(this + 2);
      v8[2] = v17;
      v8[3] = this;
    }
    v8[1] = &v7[v13];
    if (v6) {
      this = (unsigned int *)memcpy(v7, *((const void **)v3 + 1591), v6);
    }
    *((void *)v3 + 1591) = v7;
    LODWORD(v6) = v3[3185];
    unsigned int v5 = v3[3184];
    goto LABEL_20;
  }
LABEL_21:
  v3[3184] = v5 + 1;
  v7[v5] = 100;
  *(_DWORD *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(_DWORD *)(a2 + 16) = 0;
  return this;
}

void *anonymous namespace'::Remangler::mangleOutlinedBridgedMethod@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, uint64_t a3@<X8>)
{
  size_t v6 = this + 1591;
  swift::Demangle::__runtime::CharVector::append(this + 1591, "Te", 2uLL, this[1593]);
  swift::Demangle::__runtime::CharVector::append(v6, *(const void **)a2, *((void *)a2 + 1), this[1593]);
  uint64_t result = swift::Demangle::__runtime::CharVector::append(v6, "_", 1uLL, this[1593]);
  *(_DWORD *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 16) = 0;
  return result;
}

uint64_t *anonymous namespace'::Remangler::mangleOutlinedCopy@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6 = *((unsigned __int8 *)a2 + 18);
  int v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      uint64_t v8 = *(void *)a2;
      int v7 = *(swift::Demangle::__runtime::Node **)a2;
      goto LABEL_9;
    }
    int v7 = 0;
  }
  switch(v6)
  {
    case 1:
      int v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 8);
      if (v7 == (swift::Demangle::__runtime::Node *)((char *)a2 + 8)) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 2:
      int v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 16);
      if (v7 == (swift::Demangle::__runtime::Node *)((char *)a2 + 16)) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 5:
      uint64_t v8 = *(void *)a2;
LABEL_9:
      int v9 = (swift::Demangle::__runtime::Node *)(v8 + 8 * *((unsigned int *)a2 + 2));
      if (v7 == v9) {
        goto LABEL_19;
      }
      goto LABEL_16;
  }
  int v9 = 0;
  if (!v7)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    uint64_t result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "WOy", 3uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
LABEL_16:
  unsigned int v10 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4) {
      return result;
    }
    int v7 = (swift::Demangle::__runtime::Node *)((char *)v7 + 8);
    if (v7 == v9) {
      goto LABEL_19;
    }
  }
}

uint64_t *anonymous namespace'::Remangler::mangleOutlinedConsume@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6 = *((unsigned __int8 *)a2 + 18);
  int v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      uint64_t v8 = *(void *)a2;
      int v7 = *(swift::Demangle::__runtime::Node **)a2;
      goto LABEL_9;
    }
    int v7 = 0;
  }
  switch(v6)
  {
    case 1:
      int v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 8);
      if (v7 == (swift::Demangle::__runtime::Node *)((char *)a2 + 8)) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 2:
      int v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 16);
      if (v7 == (swift::Demangle::__runtime::Node *)((char *)a2 + 16)) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 5:
      uint64_t v8 = *(void *)a2;
LABEL_9:
      int v9 = (swift::Demangle::__runtime::Node *)(v8 + 8 * *((unsigned int *)a2 + 2));
      if (v7 == v9) {
        goto LABEL_19;
      }
      goto LABEL_16;
  }
  int v9 = 0;
  if (!v7)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    uint64_t result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "WOe", 3uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
LABEL_16:
  unsigned int v10 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4) {
      return result;
    }
    int v7 = (swift::Demangle::__runtime::Node *)((char *)v7 + 8);
    if (v7 == v9) {
      goto LABEL_19;
    }
  }
}

uint64_t *anonymous namespace'::Remangler::mangleOutlinedRetain@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6 = *((unsigned __int8 *)a2 + 18);
  int v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      uint64_t v8 = *(void *)a2;
      int v7 = *(swift::Demangle::__runtime::Node **)a2;
      goto LABEL_9;
    }
    int v7 = 0;
  }
  switch(v6)
  {
    case 1:
      int v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 8);
      if (v7 == (swift::Demangle::__runtime::Node *)((char *)a2 + 8)) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 2:
      int v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 16);
      if (v7 == (swift::Demangle::__runtime::Node *)((char *)a2 + 16)) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 5:
      uint64_t v8 = *(void *)a2;
LABEL_9:
      int v9 = (swift::Demangle::__runtime::Node *)(v8 + 8 * *((unsigned int *)a2 + 2));
      if (v7 == v9) {
        goto LABEL_19;
      }
      goto LABEL_16;
  }
  int v9 = 0;
  if (!v7)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    uint64_t result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "WOr", 3uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
LABEL_16:
  unsigned int v10 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4) {
      return result;
    }
    int v7 = (swift::Demangle::__runtime::Node *)((char *)v7 + 8);
    if (v7 == v9) {
      goto LABEL_19;
    }
  }
}

uint64_t *anonymous namespace'::Remangler::mangleOutlinedRelease@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6 = *((unsigned __int8 *)a2 + 18);
  int v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      uint64_t v8 = *(void *)a2;
      int v7 = *(swift::Demangle::__runtime::Node **)a2;
      goto LABEL_9;
    }
    int v7 = 0;
  }
  switch(v6)
  {
    case 1:
      int v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 8);
      if (v7 == (swift::Demangle::__runtime::Node *)((char *)a2 + 8)) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 2:
      int v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 16);
      if (v7 == (swift::Demangle::__runtime::Node *)((char *)a2 + 16)) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 5:
      uint64_t v8 = *(void *)a2;
LABEL_9:
      int v9 = (swift::Demangle::__runtime::Node *)(v8 + 8 * *((unsigned int *)a2 + 2));
      if (v7 == v9) {
        goto LABEL_19;
      }
      goto LABEL_16;
  }
  int v9 = 0;
  if (!v7)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    uint64_t result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "WOs", 3uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
LABEL_16:
  unsigned int v10 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4) {
      return result;
    }
    int v7 = (swift::Demangle::__runtime::Node *)((char *)v7 + 8);
    if (v7 == v9) {
      goto LABEL_19;
    }
  }
}

uint64_t *anonymous namespace'::Remangler::mangleOutlinedInitializeWithTake@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6 = *((unsigned __int8 *)a2 + 18);
  int v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      uint64_t v8 = *(void *)a2;
      int v7 = *(swift::Demangle::__runtime::Node **)a2;
      goto LABEL_9;
    }
    int v7 = 0;
  }
  switch(v6)
  {
    case 1:
      int v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 8);
      if (v7 == (swift::Demangle::__runtime::Node *)((char *)a2 + 8)) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 2:
      int v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 16);
      if (v7 == (swift::Demangle::__runtime::Node *)((char *)a2 + 16)) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 5:
      uint64_t v8 = *(void *)a2;
LABEL_9:
      int v9 = (swift::Demangle::__runtime::Node *)(v8 + 8 * *((unsigned int *)a2 + 2));
      if (v7 == v9) {
        goto LABEL_19;
      }
      goto LABEL_16;
  }
  int v9 = 0;
  if (!v7)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    uint64_t result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "WOb", 3uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
LABEL_16:
  unsigned int v10 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4) {
      return result;
    }
    int v7 = (swift::Demangle::__runtime::Node *)((char *)v7 + 8);
    if (v7 == v9) {
      goto LABEL_19;
    }
  }
}

uint64_t *anonymous namespace'::Remangler::mangleOutlinedInitializeWithCopy@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6 = *((unsigned __int8 *)a2 + 18);
  int v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      uint64_t v8 = *(void *)a2;
      int v7 = *(swift::Demangle::__runtime::Node **)a2;
      goto LABEL_9;
    }
    int v7 = 0;
  }
  switch(v6)
  {
    case 1:
      int v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 8);
      if (v7 == (swift::Demangle::__runtime::Node *)((char *)a2 + 8)) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 2:
      int v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 16);
      if (v7 == (swift::Demangle::__runtime::Node *)((char *)a2 + 16)) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 5:
      uint64_t v8 = *(void *)a2;
LABEL_9:
      int v9 = (swift::Demangle::__runtime::Node *)(v8 + 8 * *((unsigned int *)a2 + 2));
      if (v7 == v9) {
        goto LABEL_19;
      }
      goto LABEL_16;
  }
  int v9 = 0;
  if (!v7)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    uint64_t result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "WOc", 3uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
LABEL_16:
  unsigned int v10 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4) {
      return result;
    }
    int v7 = (swift::Demangle::__runtime::Node *)((char *)v7 + 8);
    if (v7 == v9) {
      goto LABEL_19;
    }
  }
}

uint64_t *anonymous namespace'::Remangler::mangleOutlinedAssignWithTake@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6 = *((unsigned __int8 *)a2 + 18);
  int v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      uint64_t v8 = *(void *)a2;
      int v7 = *(swift::Demangle::__runtime::Node **)a2;
      goto LABEL_9;
    }
    int v7 = 0;
  }
  switch(v6)
  {
    case 1:
      int v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 8);
      if (v7 == (swift::Demangle::__runtime::Node *)((char *)a2 + 8)) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 2:
      int v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 16);
      if (v7 == (swift::Demangle::__runtime::Node *)((char *)a2 + 16)) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 5:
      uint64_t v8 = *(void *)a2;
LABEL_9:
      int v9 = (swift::Demangle::__runtime::Node *)(v8 + 8 * *((unsigned int *)a2 + 2));
      if (v7 == v9) {
        goto LABEL_19;
      }
      goto LABEL_16;
  }
  int v9 = 0;
  if (!v7)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    uint64_t result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "WOd", 3uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
LABEL_16:
  unsigned int v10 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4) {
      return result;
    }
    int v7 = (swift::Demangle::__runtime::Node *)((char *)v7 + 8);
    if (v7 == v9) {
      goto LABEL_19;
    }
  }
}

uint64_t *anonymous namespace'::Remangler::mangleOutlinedAssignWithCopy@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6 = *((unsigned __int8 *)a2 + 18);
  int v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      uint64_t v8 = *(void *)a2;
      int v7 = *(swift::Demangle::__runtime::Node **)a2;
      goto LABEL_9;
    }
    int v7 = 0;
  }
  switch(v6)
  {
    case 1:
      int v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 8);
      if (v7 == (swift::Demangle::__runtime::Node *)((char *)a2 + 8)) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 2:
      int v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 16);
      if (v7 == (swift::Demangle::__runtime::Node *)((char *)a2 + 16)) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 5:
      uint64_t v8 = *(void *)a2;
LABEL_9:
      int v9 = (swift::Demangle::__runtime::Node *)(v8 + 8 * *((unsigned int *)a2 + 2));
      if (v7 == v9) {
        goto LABEL_19;
      }
      goto LABEL_16;
  }
  int v9 = 0;
  if (!v7)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    uint64_t result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "WOf", 3uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
LABEL_16:
  unsigned int v10 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4) {
      return result;
    }
    int v7 = (swift::Demangle::__runtime::Node *)((char *)v7 + 8);
    if (v7 == v9) {
      goto LABEL_19;
    }
  }
}

uint64_t *anonymous namespace'::Remangler::mangleOutlinedDestroy@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6 = *((unsigned __int8 *)a2 + 18);
  int v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      uint64_t v8 = *(void *)a2;
      int v7 = *(swift::Demangle::__runtime::Node **)a2;
      goto LABEL_9;
    }
    int v7 = 0;
  }
  switch(v6)
  {
    case 1:
      int v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 8);
      if (v7 == (swift::Demangle::__runtime::Node *)((char *)a2 + 8)) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 2:
      int v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 16);
      if (v7 == (swift::Demangle::__runtime::Node *)((char *)a2 + 16)) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 5:
      uint64_t v8 = *(void *)a2;
LABEL_9:
      int v9 = (swift::Demangle::__runtime::Node *)(v8 + 8 * *((unsigned int *)a2 + 2));
      if (v7 == v9) {
        goto LABEL_19;
      }
      goto LABEL_16;
  }
  int v9 = 0;
  if (!v7)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    uint64_t result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "WOh", 3uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
LABEL_16:
  unsigned int v10 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4) {
      return result;
    }
    int v7 = (swift::Demangle::__runtime::Node *)((char *)v7 + 8);
    if (v7 == v9) {
      goto LABEL_19;
    }
  }
}

char *anonymous namespace'::Remangler::mangleOutlinedVariable@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, uint64_t a3@<X8>)
{
  swift::Demangle::__runtime::CharVector::append(this + 1591, "Tv", 2uLL, this[1593]);
  *(_DWORD *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 16) = 0;
  return result;
}

void *anonymous namespace'::Remangler::mangleOutlinedReadOnlyObject@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, uint64_t a3@<X8>)
{
  int v6 = (const void **)(this + 1591);
  swift::Demangle::__runtime::CharVector::append(this + 1591, "Tv", 2uLL, this[1593]);
  unsigned int v8 = *((_DWORD *)this + 3184);
  size_t v9 = *((unsigned int *)this + 3185);
  unsigned int v10 = this[1591];
  if (v8 >= v9)
  {
    unint64_t v11 = this[1593];
    uint64_t v12 = (char *)*((void *)v11 + 1);
    if (&v10[v9] == v12)
    {
      unint64_t v14 = (unint64_t)&v10[v9 + 1];
      unint64_t v13 = *((void *)v11 + 2);
      if (v14 <= v13)
      {
        *((void *)v11 + 1) = v14;
        LODWORD(v15) = 1;
LABEL_20:
        *((_DWORD *)this + 3185) = v9 + v15;
        goto LABEL_21;
      }
    }
    else
    {
      unint64_t v13 = *((void *)v11 + 2);
    }
    if ((2 * v9) <= 4) {
      uint64_t v15 = 4;
    }
    else {
      uint64_t v15 = (2 * v9);
    }
    size_t v16 = v15 + v9;
    if (v12) {
      BOOL v17 = (unint64_t)&v12[v15 + v9] > v13;
    }
    else {
      BOOL v17 = 1;
    }
    unsigned int v10 = (char *)*((void *)v11 + 1);
    if (v17)
    {
      unint64_t v18 = 2 * *((void *)v11 + 4);
      if (v18 <= v16 + 1) {
        unint64_t v18 = v16 + 1;
      }
      *((void *)v11 + 4) = v18;
      unint64_t v19 = v18 + 8;
      uint64_t result = malloc_type_malloc(v18 + 8, 0xD0263BC5uLL);
      size_t v20 = (char *)result + v19;
      *uint64_t result = *((void *)v11 + 3);
      unsigned int v10 = (char *)(result + 1);
      *((void *)v11 + 2) = v20;
      *((void *)v11 + 3) = result;
    }
    *((void *)v11 + 1) = &v10[v16];
    if (v9) {
      uint64_t result = memcpy(v10, *v6, v9);
    }
    this[1591] = v10;
    LODWORD(v9) = *((_DWORD *)this + 3185);
    unsigned int v8 = *((_DWORD *)this + 3184);
    goto LABEL_20;
  }
LABEL_21:
  *((_DWORD *)this + 3184) = v8 + 1;
  v10[v8] = 114;
  *(_DWORD *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 16) = 0;
  return result;
}

unsigned int *anonymous namespace'::Remangler::mangleAssocTypePath@<X0>(unsigned int *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = (_anonymous_namespace_::Remangler *)this;
  BOOL v11 = 1;
  int v6 = *((unsigned __int8 *)a2 + 18);
  int v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      uint64_t v8 = *(void *)a2;
      int v7 = *(swift::Demangle::__runtime::Node **)a2;
      goto LABEL_9;
    }
    int v7 = 0;
  }
  switch(v6)
  {
    case 1:
      size_t v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 8);
      if (v7 == (swift::Demangle::__runtime::Node *)((char *)a2 + 8)) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 2:
      size_t v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 16);
      if (v7 == (swift::Demangle::__runtime::Node *)((char *)a2 + 16)) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 5:
      uint64_t v8 = *(void *)a2;
LABEL_9:
      size_t v9 = (swift::Demangle::__runtime::Node *)(v8 + 8 * *((unsigned int *)a2 + 2));
      if (v7 == v9) {
        goto LABEL_19;
      }
      goto LABEL_16;
  }
  size_t v9 = 0;
  if (!v7)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return this;
  }
LABEL_16:
  unsigned int v10 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4) {
      return this;
    }
    int v7 = (swift::Demangle::__runtime::Node *)((char *)v7 + 8);
    if (v7 == v9) {
      goto LABEL_19;
    }
  }
}

uint64_t *anonymous namespace'::Remangler::mangleLabelList@<X0>(uint64_t *this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = a2;
  uint64_t v5 = (uint64_t)this;
  uint64_t v7 = *((unsigned __int8 *)a2 + 18);
  switch(v7)
  {
    case 1:
LABEL_10:
      unint64_t v14 = &v4[v7];
      unsigned int v15 = a3 + 1;
      while (1)
      {
        if (*(_DWORD *)a4) {
          return this;
        }
        if (++v4 == v14) {
          goto LABEL_29;
        }
      }
    case 2:
      uint64_t v7 = 2;
      goto LABEL_10;
    case 5:
      uint64_t v7 = *((unsigned int *)a2 + 2);
      if (v7)
      {
        int v4 = (swift::Demangle::__runtime::Node **)*a2;
        goto LABEL_10;
      }
      break;
  }
  unsigned int v8 = *((_DWORD *)this + 3184);
  size_t v9 = *((unsigned int *)this + 3185);
  unsigned int v10 = (char *)this[1591];
  if (v8 >= v9)
  {
    BOOL v11 = (void *)this[1593];
    uint64_t v12 = (char *)v11[1];
    if (&v10[v9] == v12)
    {
      unint64_t v16 = (unint64_t)&v10[v9 + 1];
      unint64_t v13 = v11[2];
      if (v16 <= v13)
      {
        v11[1] = v16;
        LODWORD(v17) = 1;
LABEL_27:
        *(_DWORD *)(v5 + 12740) = v9 + v17;
        goto LABEL_28;
      }
    }
    else
    {
      unint64_t v13 = v11[2];
    }
    if ((2 * v9) <= 4) {
      uint64_t v17 = 4;
    }
    else {
      uint64_t v17 = (2 * v9);
    }
    size_t v18 = v17 + v9;
    if (!v12 || (unint64_t)&v12[v18] > v13)
    {
      unint64_t v19 = 2 * v11[4];
      if (v19 <= v18 + 1) {
        unint64_t v19 = v18 + 1;
      }
      v11[4] = v19;
      unint64_t v20 = v19 + 8;
      this = (uint64_t *)malloc_type_malloc(v19 + 8, 0xD0263BC5uLL);
      unint64_t v21 = (char *)this + v20;
      *this = v11[3];
      uint64_t v12 = (char *)(this + 1);
      v11[2] = v21;
      v11[3] = this;
    }
    v11[1] = &v12[v18];
    if (v9) {
      this = (uint64_t *)memcpy(v12, *(const void **)(v5 + 12728), v9);
    }
    *(void *)(v5 + 12728) = v12;
    LODWORD(v9) = *(_DWORD *)(v5 + 12740);
    unsigned int v10 = v12;
    unsigned int v8 = *(_DWORD *)(v5 + 12736);
    goto LABEL_27;
  }
LABEL_28:
  *(_DWORD *)(v5 + 12736) = v8 + 1;
  v10[v8] = 121;
LABEL_29:
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  return this;
}

uint64_t *anonymous namespace'::Remangler::mangleModuleDescriptor@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6 = *((unsigned __int8 *)a2 + 18);
  if ((v6 - 1) < 2) {
    goto LABEL_5;
  }
  if (v6 == 5 && *((_DWORD *)a2 + 2))
  {
    a2 = (swift::Demangle::__runtime::Node **)*a2;
LABEL_5:
    uint64_t v7 = *a2;
    goto LABEL_7;
  }
  uint64_t v7 = 0;
LABEL_7:
  if (!*(_DWORD *)a4)
  {
    uint64_t result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "MXM", 3uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
  }
  return result;
}

uint64_t *anonymous namespace'::Remangler::mangleExtensionDescriptor@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6 = *((unsigned __int8 *)a2 + 18);
  if ((v6 - 1) < 2) {
    goto LABEL_5;
  }
  if (v6 == 5 && *((_DWORD *)a2 + 2))
  {
    a2 = (swift::Demangle::__runtime::Node **)*a2;
LABEL_5:
    uint64_t v7 = *a2;
    goto LABEL_7;
  }
  uint64_t v7 = 0;
LABEL_7:
  if (!*(_DWORD *)a4)
  {
    uint64_t result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "MXE", 3uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
  }
  return result;
}

uint64_t *anonymous namespace'::Remangler::mangleAnonymousDescriptor@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = a2;
  int v7 = *((unsigned __int8 *)a2 + 18);
  unsigned int v8 = (swift::Demangle::__runtime::Node **)a2;
  if ((v7 - 1) < 2) {
    goto LABEL_5;
  }
  if (v7 == 5 && *((_DWORD *)a2 + 2))
  {
    unsigned int v8 = *(swift::Demangle::__runtime::Node ***)a2;
LABEL_5:
    size_t v9 = *v8;
    goto LABEL_7;
  }
  size_t v9 = 0;
LABEL_7:
  if (*(_DWORD *)a4) {
    return result;
  }
  int v11 = *((unsigned __int8 *)v4 + 18);
  if (v11 == 1) {
    goto LABEL_13;
  }
  if (v11 == 2) {
    goto LABEL_16;
  }
  if (v11 != 5 || (int v12 = *((_DWORD *)v4 + 2)) == 0)
  {
    uint64_t v16 = 0;
LABEL_17:
    long long v20 = 0uLL;
    LOBYTE(v21) = 0;
    {
      unint64_t v17 = *((void *)this + 1585);
      if (v17 > 0xF)
      {
        int v19 = *((_DWORD *)this + 3178) + 16;
        long long v22 = v20;
        uint64_t v23 = v21;
        int v24 = v19;
        std::__hash_table<std::__hash_value_type<swift::Demangle::__runtime::SubstitutionEntry,unsigned int>,std::__unordered_map_hasher<swift::Demangle::__runtime::SubstitutionEntry,std::__hash_value_type<swift::Demangle::__runtime::SubstitutionEntry,unsigned int>,swift::Demangle::__runtime::SubstitutionEntry::Hasher,std::equal_to<swift::Demangle::__runtime::SubstitutionEntry>,true>,std::__unordered_map_equal<swift::Demangle::__runtime::SubstitutionEntry,std::__hash_value_type<swift::Demangle::__runtime::SubstitutionEntry,unsigned int>,std::equal_to<swift::Demangle::__runtime::SubstitutionEntry>,swift::Demangle::__runtime::SubstitutionEntry::Hasher,true>,std::allocator<std::__hash_value_type<swift::Demangle::__runtime::SubstitutionEntry,unsigned int>>>::__emplace_unique_key_args<swift::Demangle::__runtime::SubstitutionEntry,std::pair<swift::Demangle::__runtime::SubstitutionEntry const,unsigned int>>((uint64_t)this + 12688, (uint64_t)&v22, &v22);
      }
      else
      {
        *((void *)this + 1585) = v17 + 1;
        size_t v18 = (char *)this + 24 * v17 + 12296;
        *(_OWORD *)size_t v18 = v20;
        v18[16] = v21;
      }
    }
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    unint64_t v13 = (char **)((char *)this + 12728);
    unint64_t v14 = (void *)*((void *)this + 1593);
    unsigned int v15 = "MXY";
    goto LABEL_22;
  }
  if (v12 != 1)
  {
    int v4 = *(swift::Demangle::__runtime::Node **)v4;
LABEL_16:
    uint64_t v16 = *((void *)v4 + 1);
    goto LABEL_17;
  }
LABEL_13:
  unint64_t v13 = (char **)((char *)this + 12728);
  unint64_t v14 = (void *)*((void *)this + 1593);
  unsigned int v15 = "MXX";
LABEL_22:
  uint64_t result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(v13, v15, 3uLL, v14);
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  return result;
}

uint64_t *anonymous namespace'::Remangler::mangleAssociatedTypeGenericParamRef@<X0>(uint64_t *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = a2;
  uint64_t v5 = this;
  int v7 = *((unsigned __int8 *)a2 + 18);
  unsigned int v8 = (swift::Demangle::__runtime::Node **)a2;
  if ((v7 - 1) < 2) {
    goto LABEL_5;
  }
  if (v7 == 5 && *((_DWORD *)a2 + 2))
  {
    unsigned int v8 = *(swift::Demangle::__runtime::Node ***)a2;
LABEL_5:
    size_t v9 = *v8;
    goto LABEL_7;
  }
  size_t v9 = 0;
LABEL_7:
  int v10 = *((unsigned __int8 *)v9 + 18);
  if (v10 == 1) {
    goto LABEL_11;
  }
  if (v10 == 5 && *((_DWORD *)v9 + 2) == 1)
  {
    size_t v9 = *(swift::Demangle::__runtime::Node **)v9;
LABEL_11:
    unsigned int v11 = a3 + 2;
    if (*(_DWORD *)a4) {
      return this;
    }
    int v12 = *((unsigned __int8 *)v4 + 18);
    if (v12 != 2)
    {
      if (v12 != 5 || *((_DWORD *)v4 + 2) < 2u)
      {
        uint64_t v13 = 0;
        goto LABEL_19;
      }
      int v4 = *(swift::Demangle::__runtime::Node **)v4;
    }
    uint64_t v13 = *((void *)v4 + 1);
LABEL_19:
    BOOL v20 = 1;
    int v16 = *(unsigned __int8 *)(v13 + 18);
    unint64_t v17 = (swift::Demangle::__runtime::Node **)v13;
    if ((v16 - 1) >= 2)
    {
      if (v16 == 5)
      {
        size_t v18 = *(swift::Demangle::__runtime::Node **)v13;
        unint64_t v17 = *(swift::Demangle::__runtime::Node ***)v13;
LABEL_27:
        int v19 = (swift::Demangle::__runtime::Node **)((char *)v18 + 8 * *(unsigned int *)(v13 + 8));
        goto LABEL_33;
      }
      unint64_t v17 = 0;
    }
    switch(v16)
    {
      case 1:
        int v19 = (swift::Demangle::__runtime::Node **)(v13 + 8);
        goto LABEL_33;
      case 2:
        int v19 = (swift::Demangle::__runtime::Node **)(v13 + 16);
        goto LABEL_33;
      case 5:
        size_t v18 = *(swift::Demangle::__runtime::Node **)v13;
        goto LABEL_27;
    }
    int v19 = 0;
LABEL_33:
    while (v17 != v19)
    {
      if (*(_DWORD *)a4) {
        return this;
      }
      ++v17;
    }
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    this = (uint64_t *)swift::Demangle::__runtime::CharVector::append((char **)v5 + 1591, "MXA", 3uLL, (void *)v5[1593]);
    int v15 = 0;
    size_t v9 = 0;
    int v14 = 0;
    goto LABEL_35;
  }
  int v14 = 321;
  int v15 = 10;
LABEL_35:
  *(_DWORD *)a4 = v15;
  *(void *)(a4 + 8) = v9;
  *(_DWORD *)(a4 + 16) = v14;
  return this;
}

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleSugaredOptional@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  if ((v6 - 1) < 2) {
    goto LABEL_5;
  }
  if (v6 == 5 && *((_DWORD *)a2 + 2))
  {
    a2 = (swift::Demangle::__runtime::Node **)*a2;
LABEL_5:
    int v7 = *a2;
    goto LABEL_7;
  }
  int v7 = 0;
LABEL_7:
  int v8 = *((unsigned __int8 *)v7 + 18);
  if (v8 != 1)
  {
    if (v8 != 5 || *((_DWORD *)v7 + 2) != 1)
    {
      int v10 = 321;
      int v9 = 10;
      goto LABEL_14;
    }
    int v7 = *(swift::Demangle::__runtime::Node **)v7;
  }
  if (*(_DWORD *)a4) {
    return this;
  }
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::__runtime::CharVector::append((char **)v4 + 1591, "XSq", 3uLL, *((void **)v4 + 1593));
  int v9 = 0;
  int v7 = 0;
  int v10 = 0;
LABEL_14:
  *(_DWORD *)a4 = v9;
  *(void *)(a4 + 8) = v7;
  *(_DWORD *)(a4 + 16) = v10;
  return this;
}

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleSugaredArray@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  if ((v6 - 1) < 2) {
    goto LABEL_5;
  }
  if (v6 == 5 && *((_DWORD *)a2 + 2))
  {
    a2 = (swift::Demangle::__runtime::Node **)*a2;
LABEL_5:
    int v7 = *a2;
    goto LABEL_7;
  }
  int v7 = 0;
LABEL_7:
  int v8 = *((unsigned __int8 *)v7 + 18);
  if (v8 != 1)
  {
    if (v8 != 5 || *((_DWORD *)v7 + 2) != 1)
    {
      int v10 = 321;
      int v9 = 10;
      goto LABEL_14;
    }
    int v7 = *(swift::Demangle::__runtime::Node **)v7;
  }
  if (*(_DWORD *)a4) {
    return this;
  }
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::__runtime::CharVector::append((char **)v4 + 1591, "XSa", 3uLL, *((void **)v4 + 1593));
  int v9 = 0;
  int v7 = 0;
  int v10 = 0;
LABEL_14:
  *(_DWORD *)a4 = v9;
  *(void *)(a4 + 8) = v7;
  *(_DWORD *)(a4 + 16) = v10;
  return this;
}

uint64_t *anonymous namespace'::Remangler::mangleSugaredDictionary@<X0>(uint64_t *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = a2;
  uint64_t v5 = this;
  int v7 = *((unsigned __int8 *)a2 + 18);
  int v8 = (swift::Demangle::__runtime::Node **)a2;
  if ((v7 - 1) < 2) {
    goto LABEL_5;
  }
  if (v7 == 5 && *((_DWORD *)a2 + 2))
  {
    int v8 = *(swift::Demangle::__runtime::Node ***)a2;
LABEL_5:
    int v9 = *v8;
    goto LABEL_7;
  }
  int v9 = 0;
LABEL_7:
  int v10 = *((unsigned __int8 *)v9 + 18);
  if (v10 != 1)
  {
    if (v10 != 5 || *((_DWORD *)v9 + 2) != 1) {
      goto LABEL_24;
    }
    int v9 = *(swift::Demangle::__runtime::Node **)v9;
  }
  unsigned int v11 = a3 + 2;
  if (*(_DWORD *)a4) {
    return this;
  }
  int v12 = *((unsigned __int8 *)v4 + 18);
  if (v12 == 2) {
    goto LABEL_16;
  }
  if (v12 == 5 && *((_DWORD *)v4 + 2) >= 2u)
  {
    int v4 = *(swift::Demangle::__runtime::Node **)v4;
LABEL_16:
    int v9 = (swift::Demangle::__runtime::Node *)*((void *)v4 + 1);
    goto LABEL_18;
  }
  int v9 = 0;
LABEL_18:
  int v13 = *((unsigned __int8 *)v9 + 18);
  if (v13 != 1)
  {
    if (v13 == 5 && *((_DWORD *)v9 + 2) == 1)
    {
      int v9 = *(swift::Demangle::__runtime::Node **)v9;
      goto LABEL_22;
    }
LABEL_24:
    int v15 = 321;
    int v14 = 10;
    goto LABEL_25;
  }
LABEL_22:
  if (*(_DWORD *)a4) {
    return this;
  }
  this = (uint64_t *)swift::Demangle::__runtime::CharVector::append((char **)v5 + 1591, "XSD", 3uLL, (void *)v5[1593]);
  int v14 = 0;
  int v9 = 0;
  int v15 = 0;
LABEL_25:
  *(_DWORD *)a4 = v14;
  *(void *)(a4 + 8) = v9;
  *(_DWORD *)(a4 + 16) = v15;
  return this;
}

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleSugaredParen@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  if ((v6 - 1) < 2) {
    goto LABEL_5;
  }
  if (v6 == 5 && *((_DWORD *)a2 + 2))
  {
    a2 = (swift::Demangle::__runtime::Node **)*a2;
LABEL_5:
    int v7 = *a2;
    goto LABEL_7;
  }
  int v7 = 0;
LABEL_7:
  int v8 = *((unsigned __int8 *)v7 + 18);
  if (v8 != 1)
  {
    if (v8 != 5 || *((_DWORD *)v7 + 2) != 1)
    {
      int v10 = 321;
      int v9 = 10;
      goto LABEL_14;
    }
    int v7 = *(swift::Demangle::__runtime::Node **)v7;
  }
  if (*(_DWORD *)a4) {
    return this;
  }
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::__runtime::CharVector::append((char **)v4 + 1591, "XSp", 3uLL, *((void **)v4 + 1593));
  int v9 = 0;
  int v7 = 0;
  int v10 = 0;
LABEL_14:
  *(_DWORD *)a4 = v9;
  *(void *)(a4 + 8) = v7;
  *(_DWORD *)(a4 + 16) = v10;
  return this;
}

uint64_t *anonymous namespace'::Remangler::mangleOpaqueType@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v5 = a2;
  long long v51 = 0uLL;
  LOBYTE(v52) = 0;
  if (result) {
    goto LABEL_2;
  }
  if (*((unsigned char *)v5 + 18) != 5 || *((_DWORD *)v5 + 2) <= 2u)
  {
    *(_DWORD *)a4 = 1;
    *(void *)(a4 + 8) = v5;
    *(_DWORD *)(a4 + 16) = 3771;
    return result;
  }
  unsigned int v9 = a3 + 1;
  if (*(_DWORD *)a4) {
    return result;
  }
  if (*((unsigned char *)v5 + 18) == 5 && *((_DWORD *)v5 + 2) >= 3u) {
    int v10 = (uint64_t *)*((void *)*v5 + 2);
  }
  else {
    int v10 = 0;
  }
  unint64_t v11 = 0;
  int v12 = (const void **)((char *)this + 12728);
  unint64_t v49 = v10;
  while (1)
  {
    unint64_t v13 = *((unsigned __int8 *)v10 + 18);
    if (v13 != 1)
    {
      if (v13 == 5)
      {
        unint64_t v13 = *((unsigned int *)v10 + 2);
      }
      else
      {
        if (v13 != 2) {
          break;
        }
        unint64_t v13 = 2;
      }
    }
    if (v13 <= v11) {
      break;
    }
    if (v11) {
      char v14 = 95;
    }
    else {
      char v14 = 121;
    }
    unsigned int v15 = *((_DWORD *)this + 3184);
    size_t v16 = *((unsigned int *)this + 3185);
    unint64_t v17 = (char *)*((void *)this + 1591);
    if (v15 >= v16)
    {
      unint64_t v50 = v11;
      size_t v18 = (void *)*((void *)this + 1593);
      int v19 = (char *)v18[1];
      if (&v17[v16] != v19)
      {
        unint64_t v20 = v18[2];
        goto LABEL_26;
      }
      unint64_t v21 = (unint64_t)&v17[v16 + 1];
      unint64_t v20 = v18[2];
      if (v21 <= v20)
      {
        v18[1] = v21;
        LODWORD(v22) = 1;
      }
      else
      {
LABEL_26:
        if ((2 * v16) <= 4) {
          uint64_t v22 = 4;
        }
        else {
          uint64_t v22 = (2 * v16);
        }
        size_t v23 = v22 + v16;
        if (!v19 || (unint64_t)&v19[v23] > v20)
        {
          unint64_t v24 = 2 * v18[4];
          if (v24 <= v23 + 1) {
            unint64_t v24 = v23 + 1;
          }
          v18[4] = v24;
          size_t v48 = v12;
          unint64_t v25 = v24 + 8;
          char v26 = v14;
          unint64_t v27 = malloc_type_malloc(v24 + 8, 0xD0263BC5uLL);
          char v14 = v26;
          *unint64_t v27 = v18[3];
          int v19 = (char *)(v27 + 1);
          int v28 = (char *)v27 + v25;
          int v12 = v48;
          v18[2] = v28;
          v18[3] = v27;
        }
        v18[1] = &v19[v23];
        if (v16)
        {
          char v29 = v14;
          memcpy(v19, *v12, v16);
          char v14 = v29;
        }
        *((void *)this + 1591) = v19;
        LODWORD(v16) = *((_DWORD *)this + 3185);
        unint64_t v17 = v19;
        unsigned int v15 = *((_DWORD *)this + 3184);
        int v10 = v49;
      }
      unint64_t v11 = v50;
      *((_DWORD *)this + 3185) = v16 + v22;
    }
    *((_DWORD *)this + 3184) = v15 + 1;
    v17[v15] = v14;
    unint64_t v30 = *((unsigned __int8 *)v10 + 18);
    unsigned int v31 = v30 - 1;
    if (v30 == 1) {
      goto LABEL_42;
    }
    if (v30 != 5)
    {
      if (v30 != 2) {
        goto LABEL_47;
      }
      unint64_t v30 = 2;
LABEL_42:
      if (v30 <= v11) {
        goto LABEL_47;
      }
      goto LABEL_43;
    }
    if (*((unsigned int *)v10 + 2) <= v11)
    {
LABEL_47:
      uint64_t v33 = 0;
      goto LABEL_48;
    }
LABEL_43:
    int v32 = v10;
    if (v31 >= 2) {
      int v32 = (uint64_t *)*v10;
    }
    uint64_t v33 = v32[v11];
LABEL_48:
    int v34 = *(unsigned __int8 *)(v33 + 18);
    long long v35 = (swift::Demangle::__runtime::Node **)v33;
    if ((v34 - 1) >= 2)
    {
      if (v34 == 5)
      {
        uint64_t v36 = *(swift::Demangle::__runtime::Node **)v33;
        long long v35 = *(swift::Demangle::__runtime::Node ***)v33;
LABEL_56:
        long long v37 = (swift::Demangle::__runtime::Node **)((char *)v36 + 8 * *(unsigned int *)(v33 + 8));
        goto LABEL_62;
      }
      long long v35 = 0;
    }
    switch(v34)
    {
      case 1:
        long long v37 = (swift::Demangle::__runtime::Node **)(v33 + 8);
        goto LABEL_62;
      case 2:
        long long v37 = (swift::Demangle::__runtime::Node **)(v33 + 16);
        goto LABEL_62;
      case 5:
        uint64_t v36 = *(swift::Demangle::__runtime::Node **)v33;
        goto LABEL_56;
    }
    long long v37 = 0;
LABEL_62:
    while (v35 != v37)
    {
      if (*(_DWORD *)a4) {
        return result;
      }
      ++v35;
    }
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    ++v11;
    *(_DWORD *)(a4 + 16) = 0;
  }
  if (*((unsigned char *)v5 + 18) == 5 && *((_DWORD *)v5 + 2) >= 4u)
  {
    unint64_t v38 = 0;
    int v39 = (uint64_t *)*((void *)*v5 + 3);
    while (1)
    {
      unint64_t v41 = *((unsigned __int8 *)v39 + 18);
      switch(v41)
      {
        case 1:
          unint64_t v42 = *((unsigned __int8 *)v39 + 18);
          break;
        case 5:
          unint64_t v42 = *((unsigned int *)v39 + 2);
          break;
        case 2:
          unint64_t v42 = 2;
          break;
        default:
          goto LABEL_85;
      }
      if (v42 <= v38) {
        break;
      }
      unsigned int v43 = v41 - 1;
      if (v41 != 1)
      {
        if (v41 == 5) {
          unint64_t v41 = *((unsigned int *)v39 + 2);
        }
        else {
          unint64_t v41 = 2;
        }
      }
      if (v41 <= v38)
      {
        uint64_t v40 = 0;
      }
      else
      {
        uint64_t v44 = v39;
        if (v43 >= 2) {
          uint64_t v44 = (uint64_t *)*v39;
        }
        uint64_t v40 = (swift::Demangle::__runtime::Node *)v44[v38];
      }
      ++v38;
      if (*(_DWORD *)a4) {
        return result;
      }
    }
  }
LABEL_85:
  swift::Demangle::__runtime::CharVector::append((char **)v12, "Qo", 2uLL, *((void **)this + 1593));
  if (*((unsigned char *)v5 + 18) == 5) {
    uint64_t v5 = (swift::Demangle::__runtime::Node **)*v5;
  }
  unint64_t v45 = *((void *)this + 1585);
  if (v45 > 0xF)
  {
    int v47 = *((_DWORD *)this + 3178) + 16;
    long long v53 = v51;
    uint64_t v54 = v52;
    int v55 = v47;
    uint64_t result = (uint64_t *)std::__hash_table<std::__hash_value_type<swift::Demangle::__runtime::SubstitutionEntry,unsigned int>,std::__unordered_map_hasher<swift::Demangle::__runtime::SubstitutionEntry,std::__hash_value_type<swift::Demangle::__runtime::SubstitutionEntry,unsigned int>,swift::Demangle::__runtime::SubstitutionEntry::Hasher,std::equal_to<swift::Demangle::__runtime::SubstitutionEntry>,true>,std::__unordered_map_equal<swift::Demangle::__runtime::SubstitutionEntry,std::__hash_value_type<swift::Demangle::__runtime::SubstitutionEntry,unsigned int>,std::equal_to<swift::Demangle::__runtime::SubstitutionEntry>,swift::Demangle::__runtime::SubstitutionEntry::Hasher,true>,std::allocator<std::__hash_value_type<swift::Demangle::__runtime::SubstitutionEntry,unsigned int>>>::__emplace_unique_key_args<swift::Demangle::__runtime::SubstitutionEntry,std::pair<swift::Demangle::__runtime::SubstitutionEntry const,unsigned int>>((uint64_t)this + 12688, (uint64_t)&v53, &v53);
  }
  else
  {
    *((void *)this + 1585) = v45 + 1;
    unsigned int v46 = (char *)this + 24 * v45 + 12296;
    *(_OWORD *)unsigned int v46 = v51;
    v46[16] = v52;
  }
LABEL_2:
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  return result;
}

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleOpaqueTypeDescriptor@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      int v8 = 321;
      int v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  if (*(_DWORD *)a4) {
    return this;
  }
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::__runtime::CharVector::append((char **)v4 + 1591, "MQ", 2uLL, *((void **)v4 + 1593));
  int v7 = 0;
  a2 = 0;
  int v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleOpaqueTypeDescriptorRecord@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      int v8 = 321;
      int v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  if (*(_DWORD *)a4) {
    return this;
  }
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::__runtime::CharVector::append((char **)v4 + 1591, "Ho", 2uLL, *((void **)v4 + 1593));
  int v7 = 0;
  a2 = 0;
  int v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleOpaqueTypeDescriptorAccessor@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      int v8 = 321;
      int v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  if (*(_DWORD *)a4) {
    return this;
  }
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::__runtime::CharVector::append((char **)v4 + 1591, "Mg", 2uLL, *((void **)v4 + 1593));
  int v7 = 0;
  a2 = 0;
  int v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleOpaqueTypeDescriptorAccessorImpl@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      int v8 = 321;
      int v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  if (*(_DWORD *)a4) {
    return this;
  }
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::__runtime::CharVector::append((char **)v4 + 1591, "Mh", 2uLL, *((void **)v4 + 1593));
  int v7 = 0;
  a2 = 0;
  int v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleOpaqueTypeDescriptorAccessorKey@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      int v8 = 321;
      int v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  if (*(_DWORD *)a4) {
    return this;
  }
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::__runtime::CharVector::append((char **)v4 + 1591, "Mj", 2uLL, *((void **)v4 + 1593));
  int v7 = 0;
  a2 = 0;
  int v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleOpaqueTypeDescriptorAccessorVar@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      int v8 = 321;
      int v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  if (*(_DWORD *)a4) {
    return this;
  }
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::__runtime::CharVector::append((char **)v4 + 1591, "Mk", 2uLL, *((void **)v4 + 1593));
  int v7 = 0;
  a2 = 0;
  int v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

void *anonymous namespace'::Remangler::mangleOpaqueReturnType@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3 = (uint64_t *)a2;
  int v6 = *((unsigned __int8 *)a2 + 18);
  int v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 != 5 || !*((_DWORD *)a2 + 2)) {
      goto LABEL_9;
    }
    int v7 = *(swift::Demangle::__runtime::Node **)a2;
  }
  if (*(_WORD *)(*(void *)v7 + 16) != 341)
  {
LABEL_9:
    uint64_t result = swift::Demangle::__runtime::CharVector::append(this + 1591, "Qr", 2uLL, this[1593]);
    goto LABEL_10;
  }
  swift::Demangle::__runtime::CharVector::append(this + 1591, "QR", 2uLL, this[1593]);
  if (*((unsigned __int8 *)v3 + 18) - 1 >= 2) {
    uint64_t v3 = (uint64_t *)*v3;
  }
LABEL_10:
  *(_DWORD *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 16) = 0;
  return result;
}

uint64_t *anonymous namespace'::Remangler::mangleOpaqueReturnTypeOf@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6 = *((unsigned __int8 *)a2 + 18);
  if ((v6 - 1) < 2) {
    goto LABEL_5;
  }
  if (v6 == 5 && *((_DWORD *)a2 + 2))
  {
    a2 = (swift::Demangle::__runtime::Node **)*a2;
LABEL_5:
    int v7 = *a2;
    goto LABEL_7;
  }
  int v7 = 0;
LABEL_7:
  if (!*(_DWORD *)a4)
  {
    uint64_t result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "QO", 2uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
  }
  return result;
}

uint64_t *anonymous namespace'::Remangler::mangleCanonicalSpecializedGenericMetaclass@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6 = *((unsigned __int8 *)a2 + 18);
  int v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      uint64_t v8 = *(void *)a2;
      int v7 = *(swift::Demangle::__runtime::Node **)a2;
      goto LABEL_9;
    }
    int v7 = 0;
  }
  switch(v6)
  {
    case 1:
      unsigned int v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 8);
      if (v7 == (swift::Demangle::__runtime::Node *)((char *)a2 + 8)) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 2:
      unsigned int v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 16);
      if (v7 == (swift::Demangle::__runtime::Node *)((char *)a2 + 16)) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 5:
      uint64_t v8 = *(void *)a2;
LABEL_9:
      unsigned int v9 = (swift::Demangle::__runtime::Node *)(v8 + 8 * *((unsigned int *)a2 + 2));
      if (v7 == v9) {
        goto LABEL_19;
      }
      goto LABEL_16;
  }
  unsigned int v9 = 0;
  if (!v7)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    uint64_t result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "MM", 2uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
LABEL_16:
  unsigned int v10 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4) {
      return result;
    }
    int v7 = (swift::Demangle::__runtime::Node *)((char *)v7 + 8);
    if (v7 == v9) {
      goto LABEL_19;
    }
  }
}

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleCanonicalSpecializedGenericTypeMetadataAccessFunction@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      int v8 = 321;
      int v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  if (*(_DWORD *)a4) {
    return this;
  }
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::__runtime::CharVector::append((char **)v4 + 1591, "Mb", 2uLL, *((void **)v4 + 1593));
  int v7 = 0;
  a2 = 0;
  int v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleMetadataInstantiationCache@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      int v8 = 321;
      int v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  if (*(_DWORD *)a4) {
    return this;
  }
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::__runtime::CharVector::append((char **)v4 + 1591, "MK", 2uLL, *((void **)v4 + 1593));
  int v7 = 0;
  a2 = 0;
  int v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleNoncanonicalSpecializedGenericTypeMetadata@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      int v8 = 321;
      int v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  if (*(_DWORD *)a4) {
    return this;
  }
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::__runtime::CharVector::append((char **)v4 + 1591, "MN", 2uLL, *((void **)v4 + 1593));
  int v7 = 0;
  a2 = 0;
  int v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleNoncanonicalSpecializedGenericTypeMetadataCache@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      int v8 = 321;
      int v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  if (*(_DWORD *)a4) {
    return this;
  }
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::__runtime::CharVector::append((char **)v4 + 1591, "MJ", 2uLL, *((void **)v4 + 1593));
  int v7 = 0;
  a2 = 0;
  int v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

uint64_t *anonymous namespace'::Remangler::mangleGlobalVariableOnceFunction@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6 = *((unsigned __int8 *)a2 + 18);
  int v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      uint64_t v8 = *(void *)a2;
      int v7 = *(swift::Demangle::__runtime::Node **)a2;
      goto LABEL_9;
    }
    int v7 = 0;
  }
  switch(v6)
  {
    case 1:
      unsigned int v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 8);
      if (v7 == (swift::Demangle::__runtime::Node *)((char *)a2 + 8)) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 2:
      unsigned int v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 16);
      if (v7 == (swift::Demangle::__runtime::Node *)((char *)a2 + 16)) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 5:
      uint64_t v8 = *(void *)a2;
LABEL_9:
      unsigned int v9 = (swift::Demangle::__runtime::Node *)(v8 + 8 * *((unsigned int *)a2 + 2));
      if (v7 == v9) {
        goto LABEL_19;
      }
      goto LABEL_16;
  }
  unsigned int v9 = 0;
  if (!v7)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    uint64_t result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "WZ", 2uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
LABEL_16:
  unsigned int v10 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4) {
      return result;
    }
    int v7 = (swift::Demangle::__runtime::Node *)((char *)v7 + 8);
    if (v7 == v9) {
      goto LABEL_19;
    }
  }
}

uint64_t *anonymous namespace'::Remangler::mangleGlobalVariableOnceToken@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6 = *((unsigned __int8 *)a2 + 18);
  int v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      uint64_t v8 = *(void *)a2;
      int v7 = *(swift::Demangle::__runtime::Node **)a2;
      goto LABEL_9;
    }
    int v7 = 0;
  }
  switch(v6)
  {
    case 1:
      unsigned int v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 8);
      if (v7 == (swift::Demangle::__runtime::Node *)((char *)a2 + 8)) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 2:
      unsigned int v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 16);
      if (v7 == (swift::Demangle::__runtime::Node *)((char *)a2 + 16)) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 5:
      uint64_t v8 = *(void *)a2;
LABEL_9:
      unsigned int v9 = (swift::Demangle::__runtime::Node *)(v8 + 8 * *((unsigned int *)a2 + 2));
      if (v7 == v9) {
        goto LABEL_19;
      }
      goto LABEL_16;
  }
  unsigned int v9 = 0;
  if (!v7)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    uint64_t result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "Wz", 2uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
LABEL_16:
  unsigned int v10 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4) {
      return result;
    }
    int v7 = (swift::Demangle::__runtime::Node *)((char *)v7 + 8);
    if (v7 == v9) {
      goto LABEL_19;
    }
  }
}

uint64_t *anonymous namespace'::Remangler::mangleGlobalVariableOnceDeclList@<X0>(uint64_t *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v5 = (uint64_t)this;
  unsigned int v7 = *((unsigned __int8 *)a2 + 18);
  if (v7 == 1) {
    goto LABEL_6;
  }
  if (v7 != 5)
  {
    if (v7 != 2) {
      goto LABEL_36;
    }
    goto LABEL_6;
  }
  unsigned int v7 = *((_DWORD *)a2 + 2);
  if (v7)
  {
LABEL_6:
    unint64_t v8 = 0;
    unsigned int v9 = a3 + 1;
    uint64_t v10 = v7;
    unsigned int v27 = a3 + 1;
    while (1)
    {
      unint64_t v14 = *((unsigned __int8 *)a2 + 18);
      unsigned int v15 = v14 - 1;
      if (v14 == 1) {
        goto LABEL_14;
      }
      if (v14 != 5) {
        break;
      }
      if (*((unsigned int *)a2 + 2) <= v8)
      {
LABEL_19:
        unint64_t v17 = 0;
        goto LABEL_20;
      }
LABEL_15:
      size_t v16 = a2;
      if (v15 >= 2) {
        size_t v16 = *(swift::Demangle::__runtime::Node **)a2;
      }
      unint64_t v17 = (swift::Demangle::__runtime::Node *)*((void *)v16 + v8);
LABEL_20:
      if (*(_DWORD *)a4) {
        return this;
      }
      unsigned int v13 = *(_DWORD *)(v5 + 12736);
      size_t v11 = *(unsigned int *)(v5 + 12740);
      int v12 = *(char **)(v5 + 12728);
      if (v13 >= v11)
      {
        size_t v18 = *(void **)(v5 + 12744);
        int v19 = (char *)v18[1];
        if (&v12[v11] != v19)
        {
          unint64_t v20 = v18[2];
          goto LABEL_25;
        }
        unint64_t v21 = (unint64_t)&v12[v11 + 1];
        unint64_t v20 = v18[2];
        if (v21 <= v20)
        {
          v18[1] = v21;
          LODWORD(v22) = 1;
        }
        else
        {
LABEL_25:
          if ((2 * v11) <= 4) {
            uint64_t v22 = 4;
          }
          else {
            uint64_t v22 = (2 * v11);
          }
          size_t v23 = v22 + v11;
          if (!v19 || (unint64_t)&v19[v23] > v20)
          {
            unint64_t v24 = 2 * v18[4];
            if (v24 <= v23 + 1) {
              unint64_t v24 = v23 + 1;
            }
            v18[4] = v24;
            unint64_t v25 = v24 + 8;
            this = (uint64_t *)malloc_type_malloc(v24 + 8, 0xD0263BC5uLL);
            char v26 = (char *)this + v25;
            *this = v18[3];
            int v19 = (char *)(this + 1);
            v18[2] = v26;
            v18[3] = this;
          }
          v18[1] = &v19[v23];
          if (v11) {
            this = (uint64_t *)memcpy(v19, *(const void **)(v5 + 12728), v11);
          }
          *(void *)(v5 + 12728) = v19;
          LODWORD(v11) = *(_DWORD *)(v5 + 12740);
          int v12 = v19;
          unsigned int v13 = *(_DWORD *)(v5 + 12736);
        }
        *(_DWORD *)(v5 + 12740) = v11 + v22;
        unsigned int v9 = v27;
      }
      *(_DWORD *)(v5 + 12736) = v13 + 1;
      v12[v13] = 95;
      if (v10 == ++v8) {
        goto LABEL_36;
      }
    }
    if (v14 != 2) {
      goto LABEL_19;
    }
    unint64_t v14 = 2;
LABEL_14:
    if (v14 <= v8) {
      goto LABEL_19;
    }
    goto LABEL_15;
  }
LABEL_36:
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  return this;
}

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleCanonicalPrespecializedGenericTypeCachingOnceToken@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      int v8 = 321;
      int v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  if (*(_DWORD *)a4) {
    return this;
  }
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::__runtime::CharVector::append((char **)v4 + 1591, "Mz", 2uLL, *((void **)v4 + 1593));
  int v7 = 0;
  a2 = 0;
  int v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

uint64_t *anonymous namespace'::Remangler::mangleAutoDiffSelfReorderingReabstractionThunk@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t *a4@<X8>)
{
  int v4 = a2;
  int v7 = *((unsigned __int8 *)a2 + 18);
  if ((v7 - 1) >= 2)
  {
    if (v7 == 5) {
      int v4 = *(swift::Demangle::__runtime::Node **)a2;
    }
    else {
      int v4 = 0;
    }
  }
  unsigned int v8 = a3 + 1;
  if (!*(_DWORD *)a4)
  {
    if (!*(_DWORD *)a4)
    {
      size_t v11 = (swift::Demangle::__runtime::Node **)((char *)v4 + 16);
      uint64_t v10 = *((void *)v4 + 2);
      if (*(_WORD *)(v10 + 16) == 43)
      {
        if (*(_DWORD *)a4) {
          return result;
        }
        size_t v11 = (swift::Demangle::__runtime::Node **)((char *)v4 + 24);
      }
      swift::Demangle::__runtime::CharVector::append(this + 1591, "TJO", 3uLL, this[1593]);
      int v12 = *v11;
    }
  }
  return result;
}

uint64_t *anonymous namespace'::Remangler::mangleAutoDiffSubsetParametersThunk@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v7 = *((unsigned __int8 *)a2 + 18);
  unsigned int v8 = a2;
  if ((v7 - 1) >= 2)
  {
    if (v7 == 5) {
      unsigned int v8 = (swift::Demangle::__runtime::Node **)*a2;
    }
    else {
      unsigned int v8 = 0;
    }
  }
  unsigned int v9 = a3 + 1;
  while (1)
  {
    int v10 = *((unsigned __int8 *)a2 + 18);
    if (v10 != 5) {
      break;
    }
    if (v8 == (swift::Demangle::__runtime::Node **)((char *)*a2 + 8 * *((unsigned int *)a2 + 2))) {
      goto LABEL_19;
    }
LABEL_16:
    unsigned int v13 = *v8;
    if (*((_WORD *)*v8 + 8) == 321) {
      goto LABEL_19;
    }
    ++v8;
    if (*(_DWORD *)a4) {
      return result;
    }
  }
  if (v10 == 1) {
    size_t v11 = a2 + 1;
  }
  else {
    size_t v11 = 0;
  }
  if (v10 == 2) {
    int v12 = a2 + 2;
  }
  else {
    int v12 = v11;
  }
  if (v8 != v12) {
    goto LABEL_16;
  }
LABEL_19:
  unsigned int v15 = (const void **)(this + 1591);
  swift::Demangle::__runtime::CharVector::append(this + 1591, "TJS", 3uLL, this[1593]);
  if (!*(_DWORD *)a4)
  {
    if (!*(_DWORD *)a4)
    {
      unsigned int v16 = *((_DWORD *)this + 3184);
      size_t v17 = *((unsigned int *)this + 3185);
      size_t v18 = this[1591];
      if (v16 >= v17)
      {
        int v19 = this[1593];
        unint64_t v20 = (char *)*((void *)v19 + 1);
        if (&v18[v17] != v20)
        {
          unint64_t v21 = *((void *)v19 + 2);
          goto LABEL_25;
        }
        unint64_t v22 = (unint64_t)&v18[v17 + 1];
        unint64_t v21 = *((void *)v19 + 2);
        if (v22 <= v21)
        {
          *((void *)v19 + 1) = v22;
          LODWORD(v23) = 1;
        }
        else
        {
LABEL_25:
          if ((2 * v17) <= 4) {
            uint64_t v23 = 4;
          }
          else {
            uint64_t v23 = (2 * v17);
          }
          size_t v24 = v23 + v17;
          if (!v20 || (unint64_t)&v20[v24] > v21)
          {
            unint64_t v25 = 2 * *((void *)v19 + 4);
            if (v25 <= v24 + 1) {
              unint64_t v25 = v24 + 1;
            }
            *((void *)v19 + 4) = v25;
            unint64_t v26 = v25 + 8;
            unsigned int v27 = malloc_type_malloc(v25 + 8, 0xD0263BC5uLL);
            int v28 = (char *)v27 + v26;
            *unsigned int v27 = *((void *)v19 + 3);
            unint64_t v20 = (char *)(v27 + 1);
            *((void *)v19 + 2) = v28;
            *((void *)v19 + 3) = v27;
          }
          *((void *)v19 + 1) = &v20[v24];
          if (v17) {
            memcpy(v20, *v15, v17);
          }
          this[1591] = v20;
          LODWORD(v17) = *((_DWORD *)this + 3185);
          size_t v18 = v20;
          unsigned int v16 = *((_DWORD *)this + 3184);
        }
        *((_DWORD *)this + 3185) = v17 + v23;
      }
      *((_DWORD *)this + 3184) = v16 + 1;
      v18[v16] = 112;
      if (!*(_DWORD *)a4)
      {
        unsigned int v29 = *((_DWORD *)this + 3184);
        size_t v30 = *((unsigned int *)this + 3185);
        unsigned int v31 = this[1591];
        if (v29 >= v30)
        {
          int v32 = this[1593];
          uint64_t v33 = (char *)*((void *)v32 + 1);
          if (&v31[v30] != v33)
          {
            unint64_t v34 = *((void *)v32 + 2);
            goto LABEL_43;
          }
          unint64_t v35 = (unint64_t)&v31[v30 + 1];
          unint64_t v34 = *((void *)v32 + 2);
          if (v35 <= v34)
          {
            *((void *)v32 + 1) = v35;
            LODWORD(v36) = 1;
          }
          else
          {
LABEL_43:
            if ((2 * v30) <= 4) {
              uint64_t v36 = 4;
            }
            else {
              uint64_t v36 = (2 * v30);
            }
            size_t v37 = v36 + v30;
            if (!v33 || (unint64_t)&v33[v37] > v34)
            {
              unint64_t v38 = 2 * *((void *)v32 + 4);
              if (v38 <= v37 + 1) {
                unint64_t v38 = v37 + 1;
              }
              *((void *)v32 + 4) = v38;
              unint64_t v39 = v38 + 8;
              uint64_t v40 = malloc_type_malloc(v38 + 8, 0xD0263BC5uLL);
              unint64_t v41 = (char *)v40 + v39;
              void *v40 = *((void *)v32 + 3);
              uint64_t v33 = (char *)(v40 + 1);
              *((void *)v32 + 2) = v41;
              *((void *)v32 + 3) = v40;
            }
            *((void *)v32 + 1) = &v33[v37];
            if (v30) {
              memcpy(v33, *v15, v30);
            }
            this[1591] = v33;
            LODWORD(v30) = *((_DWORD *)this + 3185);
            unsigned int v31 = v33;
            unsigned int v29 = *((_DWORD *)this + 3184);
          }
          *((_DWORD *)this + 3185) = v30 + v36;
        }
        *((_DWORD *)this + 3184) = v29 + 1;
        v31[v29] = 114;
        if (!*(_DWORD *)a4)
        {
          unsigned int v42 = *((_DWORD *)this + 3184);
          size_t v43 = *((unsigned int *)this + 3185);
          uint64_t v44 = this[1591];
          if (v42 >= v43)
          {
            unint64_t v45 = this[1593];
            unsigned int v46 = (char *)*((void *)v45 + 1);
            if (&v44[v43] != v46)
            {
              unint64_t v47 = *((void *)v45 + 2);
              goto LABEL_61;
            }
            unint64_t v48 = (unint64_t)&v44[v43 + 1];
            unint64_t v47 = *((void *)v45 + 2);
            if (v48 <= v47)
            {
              *((void *)v45 + 1) = v48;
              LODWORD(v49) = 1;
            }
            else
            {
LABEL_61:
              if ((2 * v43) <= 4) {
                uint64_t v49 = 4;
              }
              else {
                uint64_t v49 = (2 * v43);
              }
              size_t v50 = v49 + v43;
              if (!v46 || (unint64_t)&v46[v50] > v47)
              {
                unint64_t v51 = 2 * *((void *)v45 + 4);
                if (v51 <= v50 + 1) {
                  unint64_t v51 = v50 + 1;
                }
                *((void *)v45 + 4) = v51;
                unint64_t v52 = v51 + 8;
                uint64_t result = (uint64_t *)malloc_type_malloc(v51 + 8, 0xD0263BC5uLL);
                long long v53 = (char *)result + v52;
                *uint64_t result = *((void *)v45 + 3);
                unsigned int v46 = (char *)(result + 1);
                *((void *)v45 + 2) = v53;
                *((void *)v45 + 3) = result;
              }
              *((void *)v45 + 1) = &v46[v50];
              if (v43) {
                uint64_t result = (uint64_t *)memcpy(v46, *v15, v43);
              }
              this[1591] = v46;
              LODWORD(v43) = *((_DWORD *)this + 3185);
              uint64_t v44 = v46;
              unsigned int v42 = *((_DWORD *)this + 3184);
            }
            *((_DWORD *)this + 3185) = v43 + v49;
          }
          *((_DWORD *)this + 3184) = v42 + 1;
          v44[v42] = 80;
          *(_DWORD *)a4 = 0;
          *(void *)(a4 + 8) = 0;
          *(_DWORD *)(a4 + 16) = 0;
        }
      }
    }
  }
  return result;
}

uint64_t *anonymous namespace'::Remangler::mangleDifferentiabilityWitness@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = a2;
  int v7 = *((unsigned __int8 *)a2 + 18);
  unsigned int v8 = a2;
  if ((v7 - 1) >= 2)
  {
    if (v7 == 5) {
      unsigned int v8 = *(swift::Demangle::__runtime::Node **)a2;
    }
    else {
      unsigned int v8 = 0;
    }
  }
  unsigned int v9 = (unsigned int *)((char *)a2 + 8);
  unsigned int v10 = a3 + 1;
  while (1)
  {
    int v11 = *((unsigned __int8 *)v4 + 18);
    if (v11 != 5) {
      break;
    }
    if (v8 == (swift::Demangle::__runtime::Node *)(*(void *)v4 + 8 * *((unsigned int *)v4 + 2))) {
      goto LABEL_18;
    }
LABEL_15:
    unsigned int v13 = *(swift::Demangle::__runtime::Node **)v8;
    if (*(_WORD *)(*(void *)v8 + 16) == 102) {
      goto LABEL_18;
    }
    unsigned int v8 = (swift::Demangle::__runtime::Node *)((char *)v8 + 8);
    if (*(_DWORD *)a4) {
      return result;
    }
  }
  if (v11 == 1) {
    int v12 = (swift::Demangle::__runtime::Node *)((char *)v4 + 8);
  }
  else {
    int v12 = 0;
  }
  if (v11 == 2) {
    int v12 = (swift::Demangle::__runtime::Node *)((char *)v4 + 16);
  }
  if (v8 != v12) {
    goto LABEL_15;
  }
LABEL_18:
  if (v11 == 1)
  {
    uint64_t v15 = 0;
  }
  else
  {
    if (v11 == 5)
    {
      uint64_t v15 = *((unsigned int *)v4 + 2) - 1;
      unsigned int v16 = *(swift::Demangle::__runtime::Node **)v4;
      goto LABEL_24;
    }
    uint64_t v15 = 1;
  }
  unsigned int v16 = v4;
LABEL_24:
  if (*(_WORD *)(*((void *)v16 + v15) + 16) != 43) {
    goto LABEL_34;
  }
  if (v11 == 1)
  {
    uint64_t v18 = 0;
    goto LABEL_32;
  }
  if (v11 == 5)
  {
    uint64_t v19 = *v9;
    if (!v19)
    {
      size_t v17 = 0;
      goto LABEL_33;
    }
    uint64_t v18 = v19 - 1;
    int v4 = *(swift::Demangle::__runtime::Node **)v4;
LABEL_32:
    size_t v17 = (swift::Demangle::__runtime::Node *)*((void *)v4 + v18);
    goto LABEL_33;
  }
  size_t v17 = 0;
  if (v11 == 2)
  {
    uint64_t v18 = 1;
    goto LABEL_32;
  }
LABEL_33:
  if (!*(_DWORD *)a4)
  {
LABEL_34:
    unint64_t v20 = (const void **)(this + 1591);
    swift::Demangle::__runtime::CharVector::append(this + 1591, "WJ", 2uLL, this[1593]);
    char v21 = **(unsigned char **)v8;
    unsigned int v22 = *((_DWORD *)this + 3184);
    size_t v23 = *((unsigned int *)this + 3185);
    size_t v24 = this[1591];
    if (v22 >= v23)
    {
      unint64_t v25 = this[1593];
      unint64_t v26 = (char *)*((void *)v25 + 1);
      if (&v24[v23] != v26)
      {
        unint64_t v27 = *((void *)v25 + 2);
        goto LABEL_38;
      }
      unint64_t v28 = (unint64_t)&v24[v23 + 1];
      unint64_t v27 = *((void *)v25 + 2);
      if (v28 <= v27)
      {
        *((void *)v25 + 1) = v28;
        LODWORD(v29) = 1;
        unint64_t v20 = (const void **)(this + 1591);
      }
      else
      {
LABEL_38:
        if ((2 * v23) <= 4) {
          uint64_t v29 = 4;
        }
        else {
          uint64_t v29 = (2 * v23);
        }
        size_t v30 = v29 + v23;
        if (!v26 || (unint64_t)&v26[v30] > v27)
        {
          unint64_t v31 = 2 * *((void *)v25 + 4);
          if (v31 <= v30 + 1) {
            unint64_t v31 = v30 + 1;
          }
          *((void *)v25 + 4) = v31;
          unint64_t v32 = v31 + 8;
          uint64_t v33 = malloc_type_malloc(v31 + 8, 0xD0263BC5uLL);
          unint64_t v34 = (char *)v33 + v32;
          void *v33 = *((void *)v25 + 3);
          unint64_t v26 = (char *)(v33 + 1);
          *((void *)v25 + 2) = v34;
          *((void *)v25 + 3) = v33;
        }
        *((void *)v25 + 1) = &v26[v30];
        unint64_t v20 = (const void **)(this + 1591);
        if (v23) {
          memcpy(v26, this[1591], v23);
        }
        this[1591] = v26;
        LODWORD(v23) = *((_DWORD *)this + 3185);
        size_t v24 = v26;
        unsigned int v22 = *((_DWORD *)this + 3184);
      }
      *((_DWORD *)this + 3185) = v23 + v29;
    }
    *((_DWORD *)this + 3184) = v22 + 1;
    v24[v22] = v21;
    if (!*(_DWORD *)a4)
    {
      unsigned int v35 = *((_DWORD *)this + 3184);
      size_t v36 = *((unsigned int *)this + 3185);
      size_t v37 = this[1591];
      if (v35 >= v36)
      {
        unint64_t v38 = this[1593];
        unint64_t v39 = (char *)*((void *)v38 + 1);
        if (&v37[v36] != v39)
        {
          unint64_t v40 = *((void *)v38 + 2);
          goto LABEL_56;
        }
        unint64_t v41 = (unint64_t)&v37[v36 + 1];
        unint64_t v40 = *((void *)v38 + 2);
        if (v41 <= v40)
        {
          *((void *)v38 + 1) = v41;
          LODWORD(v42) = 1;
        }
        else
        {
LABEL_56:
          if ((2 * v36) <= 4) {
            uint64_t v42 = 4;
          }
          else {
            uint64_t v42 = (2 * v36);
          }
          size_t v43 = v42 + v36;
          if (!v39 || (unint64_t)&v39[v43] > v40)
          {
            unint64_t v44 = 2 * *((void *)v38 + 4);
            if (v44 <= v43 + 1) {
              unint64_t v44 = v43 + 1;
            }
            *((void *)v38 + 4) = v44;
            unint64_t v45 = v44 + 8;
            unsigned int v46 = malloc_type_malloc(v44 + 8, 0xD0263BC5uLL);
            unint64_t v47 = (char *)v46 + v45;
            *unsigned int v46 = *((void *)v38 + 3);
            unint64_t v39 = (char *)(v46 + 1);
            *((void *)v38 + 2) = v47;
            *((void *)v38 + 3) = v46;
          }
          *((void *)v38 + 1) = &v39[v43];
          if (v36) {
            memcpy(v39, *v20, v36);
          }
          this[1591] = v39;
          LODWORD(v36) = *((_DWORD *)this + 3185);
          size_t v37 = v39;
          unsigned int v35 = *((_DWORD *)this + 3184);
        }
        *((_DWORD *)this + 3185) = v36 + v42;
      }
      *((_DWORD *)this + 3184) = v35 + 1;
      v37[v35] = 112;
      if (!*(_DWORD *)a4)
      {
        unsigned int v48 = *((_DWORD *)this + 3184);
        size_t v49 = *((unsigned int *)this + 3185);
        size_t v50 = this[1591];
        if (v48 >= v49)
        {
          unint64_t v51 = this[1593];
          unint64_t v52 = (char *)*((void *)v51 + 1);
          if (&v50[v49] != v52)
          {
            unint64_t v53 = *((void *)v51 + 2);
            goto LABEL_75;
          }
          unint64_t v54 = (unint64_t)&v50[v49 + 1];
          unint64_t v53 = *((void *)v51 + 2);
          if (v54 <= v53)
          {
            *((void *)v51 + 1) = v54;
            LODWORD(v55) = 1;
          }
          else
          {
LABEL_75:
            if ((2 * v49) <= 4) {
              uint64_t v55 = 4;
            }
            else {
              uint64_t v55 = (2 * v49);
            }
            size_t v56 = v55 + v49;
            if (!v52 || (unint64_t)&v52[v56] > v53)
            {
              unint64_t v57 = 2 * *((void *)v51 + 4);
              if (v57 <= v56 + 1) {
                unint64_t v57 = v56 + 1;
              }
              *((void *)v51 + 4) = v57;
              unint64_t v58 = v57 + 8;
              uint64_t result = (uint64_t *)malloc_type_malloc(v57 + 8, 0xD0263BC5uLL);
              size_t v59 = (char *)result + v58;
              *uint64_t result = *((void *)v51 + 3);
              unint64_t v52 = (char *)(result + 1);
              *((void *)v51 + 2) = v59;
              *((void *)v51 + 3) = result;
            }
            *((void *)v51 + 1) = &v52[v56];
            if (v49) {
              uint64_t result = (uint64_t *)memcpy(v52, *v20, v49);
            }
            this[1591] = v52;
            LODWORD(v49) = *((_DWORD *)this + 3185);
            size_t v50 = v52;
            unsigned int v48 = *((_DWORD *)this + 3184);
          }
          *((_DWORD *)this + 3185) = v49 + v55;
        }
        *((_DWORD *)this + 3184) = v48 + 1;
        v50[v48] = 114;
        *(_DWORD *)a4 = 0;
        *(void *)(a4 + 8) = 0;
        *(_DWORD *)(a4 + 16) = 0;
      }
    }
  }
  return result;
}

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleNoDerivative@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      int v8 = 321;
      int v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  if (*(_DWORD *)a4) {
    return this;
  }
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::__runtime::CharVector::append((char **)v4 + 1591, "Yk", 2uLL, *((void **)v4 + 1593));
  int v7 = 0;
  a2 = 0;
  int v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

uint64_t *anonymous namespace'::Remangler::mangleAsyncAwaitResumePartialFunction@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "TQ", 2uLL, this[1593]);
  int v9 = *((unsigned __int8 *)a2 + 18);
  if ((v9 - 1) >= 2)
  {
    if (v9 != 5 || !*((_DWORD *)a2 + 2))
    {
      *(_DWORD *)a4 = 0;
      *(void *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 16) = 0;
      return result;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  unsigned int v10 = *(swift::Demangle::__runtime::Node **)a2;
}

uint64_t *anonymous namespace'::Remangler::mangleAsyncSuspendResumePartialFunction@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "TY", 2uLL, this[1593]);
  int v9 = *((unsigned __int8 *)a2 + 18);
  if ((v9 - 1) >= 2)
  {
    if (v9 != 5 || !*((_DWORD *)a2 + 2))
    {
      *(_DWORD *)a4 = 0;
      *(void *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 16) = 0;
      return result;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  unsigned int v10 = *(swift::Demangle::__runtime::Node **)a2;
}

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleCompileTimeConst@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      int v8 = 321;
      int v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  if (*(_DWORD *)a4) {
    return this;
  }
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::__runtime::CharVector::append((char **)v4 + 1591, "Yt", 2uLL, *((void **)v4 + 1593));
  int v7 = 0;
  a2 = 0;
  int v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

uint64_t *anonymous namespace'::Remangler::mangleExtendedExistentialTypeShape@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v7 = *((unsigned __int8 *)a2 + 18);
  if (v7 == 1) {
    goto LABEL_7;
  }
  int v8 = (swift::Demangle::__runtime::Node **)a2;
  if (v7 == 2) {
    goto LABEL_11;
  }
  if (v7 == 5)
  {
    int v9 = *((_DWORD *)a2 + 2);
    if (!v9)
    {
      unsigned int v10 = 0;
      goto LABEL_16;
    }
    if (v9 == 1)
    {
      a2 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_7:
      unsigned int v10 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_16:
      int v12 = "Xg";
      goto LABEL_17;
    }
    int v8 = *(swift::Demangle::__runtime::Node ***)a2;
LABEL_11:
    int v11 = *v8;
    if (v7 == 2) {
      goto LABEL_15;
    }
    goto LABEL_12;
  }
  int v11 = 0;
LABEL_12:
  if (v7 != 5 || *((_DWORD *)a2 + 2) < 2u)
  {
    unsigned int v10 = 0;
    if (!v11) {
      goto LABEL_16;
    }
    goto LABEL_20;
  }
  a2 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_15:
  unsigned int v10 = (swift::Demangle::__runtime::Node *)*((void *)a2 + 1);
  if (!v11) {
    goto LABEL_16;
  }
LABEL_20:
  if (*(_DWORD *)a4) {
    return result;
  }
  int v12 = "XG";
LABEL_17:
  if (!*(_DWORD *)a4)
  {
    uint64_t result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, v12, 2uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
  }
  return result;
}

uint64_t *anonymous namespace'::Remangler::mangleUniquable@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6 = *((unsigned __int8 *)a2 + 18);
  if ((v6 - 1) < 2) {
    goto LABEL_5;
  }
  if (v6 == 5 && *((_DWORD *)a2 + 2))
  {
    a2 = (swift::Demangle::__runtime::Node **)*a2;
LABEL_5:
    int v7 = *a2;
    goto LABEL_7;
  }
  int v7 = 0;
LABEL_7:
  if (!*(_DWORD *)a4)
  {
    uint64_t result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "Mq", 2uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
  }
  return result;
}

uint64_t *anonymous namespace'::Remangler::mangleSymbolicExtendedExistentialType@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v7 = *((unsigned __int8 *)a2 + 18);
  int v8 = a2;
  if ((v7 - 1) < 2) {
    goto LABEL_5;
  }
  if (v7 == 5 && *((_DWORD *)a2 + 2))
  {
    int v8 = (swift::Demangle::__runtime::Node **)*a2;
LABEL_5:
    int v9 = *v8;
    goto LABEL_7;
  }
  int v9 = 0;
LABEL_7:
  unsigned int v10 = a3 + 1;
  if (*(_DWORD *)a4) {
    return result;
  }
  int v12 = *((unsigned __int8 *)a2 + 18);
  unsigned int v13 = (swift::Demangle::__runtime::Node *)a2;
  if (v12 == 2) {
    goto LABEL_12;
  }
  if (v12 == 5 && *((_DWORD *)a2 + 2) >= 2u)
  {
    unsigned int v13 = *a2;
LABEL_12:
    uint64_t v14 = *((void *)v13 + 1);
    goto LABEL_14;
  }
  uint64_t v14 = 0;
LABEL_14:
  int v15 = *(unsigned __int8 *)(v14 + 18);
  unsigned int v16 = (swift::Demangle::__runtime::Node **)v14;
  if ((v15 - 1) >= 2)
  {
    if (v15 == 5)
    {
      size_t v17 = *(swift::Demangle::__runtime::Node **)v14;
      unsigned int v16 = *(swift::Demangle::__runtime::Node ***)v14;
      goto LABEL_22;
    }
    unsigned int v16 = 0;
  }
  switch(v15)
  {
    case 1:
      uint64_t v18 = (swift::Demangle::__runtime::Node **)(v14 + 8);
      if (v16 != (swift::Demangle::__runtime::Node **)(v14 + 8)) {
        goto LABEL_30;
      }
      goto LABEL_27;
    case 2:
      uint64_t v18 = (swift::Demangle::__runtime::Node **)(v14 + 16);
      if (v16 != (swift::Demangle::__runtime::Node **)(v14 + 16)) {
        goto LABEL_30;
      }
LABEL_27:
      if (v12 == 5) {
        goto LABEL_33;
      }
      goto LABEL_49;
    case 5:
      size_t v17 = *(swift::Demangle::__runtime::Node **)v14;
LABEL_22:
      uint64_t v18 = (swift::Demangle::__runtime::Node **)((char *)v17 + 8 * *(unsigned int *)(v14 + 8));
      if (v16 != v18) {
        goto LABEL_30;
      }
      goto LABEL_27;
  }
  uint64_t v18 = 0;
  if (!v16) {
    goto LABEL_27;
  }
  do
  {
LABEL_30:
    if (*(_DWORD *)a4) {
      return result;
    }
    ++v16;
  }
  while (v16 != v18);
  if (*((unsigned char *)a2 + 18) == 5)
  {
LABEL_33:
    if (*((_DWORD *)a2 + 2) >= 3u)
    {
      uint64_t v19 = *((void *)*a2 + 2);
      int v20 = *(unsigned __int8 *)(v19 + 18);
      char v21 = (swift::Demangle::__runtime::Node **)v19;
      if ((v20 - 1) >= 2)
      {
        if (v20 == 5)
        {
          unsigned int v22 = *(swift::Demangle::__runtime::Node **)v19;
          char v21 = *(swift::Demangle::__runtime::Node ***)v19;
LABEL_42:
          size_t v23 = (swift::Demangle::__runtime::Node **)((char *)v22 + 8 * *(unsigned int *)(v19 + 8));
          goto LABEL_48;
        }
        char v21 = 0;
      }
      switch(v20)
      {
        case 1:
          size_t v23 = (swift::Demangle::__runtime::Node **)(v19 + 8);
          goto LABEL_48;
        case 2:
          size_t v23 = (swift::Demangle::__runtime::Node **)(v19 + 16);
          goto LABEL_48;
        case 5:
          unsigned int v22 = *(swift::Demangle::__runtime::Node **)v19;
          goto LABEL_42;
      }
      size_t v23 = 0;
LABEL_48:
      while (v21 != v23)
      {
        if (*(_DWORD *)a4) {
          return result;
        }
        ++v21;
      }
    }
  }
LABEL_49:
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  return result;
}

unsigned int *anonymous namespace'::Remangler::mangleMetatypeParamsRemoved@<X0>(unsigned int *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = this;
  unsigned int v5 = this[3184];
  size_t v6 = this[3185];
  int v7 = (char *)*((void *)this + 1591);
  if (v5 >= v6)
  {
    int v8 = (void *)*((void *)this + 1593);
    int v9 = (char *)v8[1];
    if (&v7[v6] == v9)
    {
      unint64_t v11 = (unint64_t)&v7[v6 + 1];
      unint64_t v10 = v8[2];
      if (v11 <= v10)
      {
        v8[1] = v11;
        LODWORD(v12) = 1;
LABEL_20:
        v3[3185] = v6 + v12;
        goto LABEL_21;
      }
    }
    else
    {
      unint64_t v10 = v8[2];
    }
    if ((2 * v6) <= 4) {
      uint64_t v12 = 4;
    }
    else {
      uint64_t v12 = (2 * v6);
    }
    size_t v13 = v12 + v6;
    if (v9) {
      BOOL v14 = (unint64_t)&v9[v12 + v6] > v10;
    }
    else {
      BOOL v14 = 1;
    }
    int v7 = (char *)v8[1];
    if (v14)
    {
      unint64_t v15 = 2 * v8[4];
      if (v15 <= v13 + 1) {
        unint64_t v15 = v13 + 1;
      }
      v8[4] = v15;
      unint64_t v16 = v15 + 8;
      this = (unsigned int *)malloc_type_malloc(v15 + 8, 0xD0263BC5uLL);
      size_t v17 = (char *)this + v16;
      *(void *)this = v8[3];
      int v7 = (char *)(this + 2);
      v8[2] = v17;
      v8[3] = this;
    }
    v8[1] = &v7[v13];
    if (v6) {
      this = (unsigned int *)memcpy(v7, *((const void **)v3 + 1591), v6);
    }
    *((void *)v3 + 1591) = v7;
    LODWORD(v6) = v3[3185];
    unsigned int v5 = v3[3184];
    goto LABEL_20;
  }
LABEL_21:
  v3[3184] = v5 + 1;
  v7[v5] = 109;
  *(_DWORD *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(_DWORD *)(a2 + 16) = 0;
  return this;
}

uint64_t *anonymous namespace'::Remangler::mangleOutlinedEnumTagStore@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = a2;
  int v7 = *((unsigned __int8 *)a2 + 18);
  int v8 = (swift::Demangle::__runtime::Node **)a2;
  if (v7 != 1)
  {
    int v9 = (swift::Demangle::__runtime::Node **)a2;
    if (v7 == 2)
    {
LABEL_7:
      if (*(_DWORD *)a4) {
        return result;
      }
      swift::Demangle::__runtime::CharVector::append(this + 1591, "WOi", 3uLL, this[1593]);
      if (*((unsigned char *)v4 + 18) == 5) {
        int v4 = *(swift::Demangle::__runtime::Node **)v4;
      }
      uint64_t v12 = (uint64_t **)((char *)v4 + 8);
      goto LABEL_23;
    }
    if (v7 != 5 || (int v10 = *((_DWORD *)a2 + 2)) == 0)
    {
      size_t v13 = 0;
      goto LABEL_14;
    }
    if (v10 == 2)
    {
      int v9 = *(swift::Demangle::__runtime::Node ***)a2;
      goto LABEL_7;
    }
    int v8 = *(swift::Demangle::__runtime::Node ***)a2;
  }
  size_t v13 = *v8;
LABEL_14:
  unsigned int v14 = a3 + 1;
  if (*(_DWORD *)a4) {
    return result;
  }
  int v15 = *((unsigned __int8 *)v4 + 18);
  unint64_t v16 = v4;
  if (v15 != 2)
  {
    if (v15 != 5 || *((_DWORD *)v4 + 2) < 2u)
    {
      size_t v17 = 0;
      goto LABEL_21;
    }
    unint64_t v16 = *(swift::Demangle::__runtime::Node **)v4;
  }
  size_t v17 = (swift::Demangle::__runtime::Node *)*((void *)v16 + 1);
LABEL_21:
  if (*(_DWORD *)a4) {
    return result;
  }
  swift::Demangle::__runtime::CharVector::append(this + 1591, "WOi", 3uLL, this[1593]);
  uint64_t v12 = (uint64_t **)(*(void *)v4 + 16);
LABEL_23:
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  return result;
}

uint64_t *anonymous namespace'::Remangler::mangleOutlinedEnumProjectDataForLoad@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = a2;
  int v7 = *((unsigned __int8 *)a2 + 18);
  int v8 = (swift::Demangle::__runtime::Node **)a2;
  if (v7 != 1)
  {
    int v9 = (swift::Demangle::__runtime::Node **)a2;
    if (v7 == 2)
    {
LABEL_7:
      if (*(_DWORD *)a4) {
        return result;
      }
      swift::Demangle::__runtime::CharVector::append(this + 1591, "WOj", 3uLL, this[1593]);
      if (*((unsigned char *)v4 + 18) == 5) {
        int v4 = *(swift::Demangle::__runtime::Node **)v4;
      }
      uint64_t v12 = (uint64_t **)((char *)v4 + 8);
      goto LABEL_23;
    }
    if (v7 != 5 || (int v10 = *((_DWORD *)a2 + 2)) == 0)
    {
      size_t v13 = 0;
      goto LABEL_14;
    }
    if (v10 == 2)
    {
      int v9 = *(swift::Demangle::__runtime::Node ***)a2;
      goto LABEL_7;
    }
    int v8 = *(swift::Demangle::__runtime::Node ***)a2;
  }
  size_t v13 = *v8;
LABEL_14:
  unsigned int v14 = a3 + 1;
  if (*(_DWORD *)a4) {
    return result;
  }
  int v15 = *((unsigned __int8 *)v4 + 18);
  unint64_t v16 = v4;
  if (v15 != 2)
  {
    if (v15 != 5 || *((_DWORD *)v4 + 2) < 2u)
    {
      size_t v17 = 0;
      goto LABEL_21;
    }
    unint64_t v16 = *(swift::Demangle::__runtime::Node **)v4;
  }
  size_t v17 = (swift::Demangle::__runtime::Node *)*((void *)v16 + 1);
LABEL_21:
  if (*(_DWORD *)a4) {
    return result;
  }
  swift::Demangle::__runtime::CharVector::append(this + 1591, "WOj", 3uLL, this[1593]);
  uint64_t v12 = (uint64_t **)(*(void *)v4 + 16);
LABEL_23:
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  return result;
}

uint64_t *anonymous namespace'::Remangler::mangleOutlinedEnumGetTag@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6 = *((unsigned __int8 *)a2 + 18);
  int v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      uint64_t v8 = *(void *)a2;
      int v7 = *(swift::Demangle::__runtime::Node **)a2;
      goto LABEL_9;
    }
    int v7 = 0;
  }
  switch(v6)
  {
    case 1:
      int v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 8);
      if (v7 == (swift::Demangle::__runtime::Node *)((char *)a2 + 8)) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 2:
      int v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 16);
      if (v7 == (swift::Demangle::__runtime::Node *)((char *)a2 + 16)) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 5:
      uint64_t v8 = *(void *)a2;
LABEL_9:
      int v9 = (swift::Demangle::__runtime::Node *)(v8 + 8 * *((unsigned int *)a2 + 2));
      if (v7 == v9) {
        goto LABEL_19;
      }
      goto LABEL_16;
  }
  int v9 = 0;
  if (!v7)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    uint64_t result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "WOg", 3uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
LABEL_16:
  unsigned int v10 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4) {
      return result;
    }
    int v7 = (swift::Demangle::__runtime::Node *)((char *)v7 + 8);
    if (v7 == v9) {
      goto LABEL_19;
    }
  }
}

unsigned int *anonymous namespace'::Remangler::mangleAsyncRemoved@<X0>(unsigned int *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = this;
  unsigned int v5 = this[3184];
  size_t v6 = this[3185];
  int v7 = (char *)*((void *)this + 1591);
  if (v5 >= v6)
  {
    uint64_t v8 = (void *)*((void *)this + 1593);
    int v9 = (char *)v8[1];
    if (&v7[v6] == v9)
    {
      unint64_t v11 = (unint64_t)&v7[v6 + 1];
      unint64_t v10 = v8[2];
      if (v11 <= v10)
      {
        v8[1] = v11;
        LODWORD(v12) = 1;
LABEL_20:
        v3[3185] = v6 + v12;
        goto LABEL_21;
      }
    }
    else
    {
      unint64_t v10 = v8[2];
    }
    if ((2 * v6) <= 4) {
      uint64_t v12 = 4;
    }
    else {
      uint64_t v12 = (2 * v6);
    }
    size_t v13 = v12 + v6;
    if (v9) {
      BOOL v14 = (unint64_t)&v9[v12 + v6] > v10;
    }
    else {
      BOOL v14 = 1;
    }
    int v7 = (char *)v8[1];
    if (v14)
    {
      unint64_t v15 = 2 * v8[4];
      if (v15 <= v13 + 1) {
        unint64_t v15 = v13 + 1;
      }
      v8[4] = v15;
      unint64_t v16 = v15 + 8;
      this = (unsigned int *)malloc_type_malloc(v15 + 8, 0xD0263BC5uLL);
      size_t v17 = (char *)this + v16;
      *(void *)this = v8[3];
      int v7 = (char *)(this + 2);
      v8[2] = v17;
      v8[3] = this;
    }
    v8[1] = &v7[v13];
    if (v6) {
      this = (unsigned int *)memcpy(v7, *((const void **)v3 + 1591), v6);
    }
    *((void *)v3 + 1591) = v7;
    LODWORD(v6) = v3[3185];
    unsigned int v5 = v3[3184];
    goto LABEL_20;
  }
LABEL_21:
  v3[3184] = v5 + 1;
  v7[v5] = 97;
  *(_DWORD *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(_DWORD *)(a2 + 16) = 0;
  return this;
}

uint64_t *anonymous namespace'::Remangler::mangleParamLifetimeDependence@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = a2;
  int v7 = *((unsigned __int8 *)a2 + 18);
  uint64_t v8 = a2;
  if (v7 != 2)
  {
    if (v7 != 5 || *((_DWORD *)a2 + 2) < 2u)
    {
      *(_DWORD *)a4 = 0;
      *(void *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 16) = 0;
      goto LABEL_8;
    }
    uint64_t v8 = *(swift::Demangle::__runtime::Node **)a2;
  }
  if (*(_DWORD *)a4) {
    return result;
  }
LABEL_8:
  uint64_t result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "Yl", 2uLL, this[1593]);
  if (*((unsigned __int8 *)v4 + 18) - 1 >= 2) {
    int v4 = *(swift::Demangle::__runtime::Node **)v4;
  }
  char v10 = **(unsigned char **)v4;
  unsigned int v11 = *((_DWORD *)this + 3184);
  size_t v12 = *((unsigned int *)this + 3185);
  size_t v13 = this[1591];
  if (v11 < v12) {
    goto LABEL_27;
  }
  BOOL v14 = this[1593];
  unint64_t v15 = (char *)*((void *)v14 + 1);
  if (&v13[v12] != v15)
  {
    unint64_t v16 = *((void *)v14 + 2);
LABEL_14:
    if ((2 * v12) <= 4) {
      uint64_t v18 = 4;
    }
    else {
      uint64_t v18 = (2 * v12);
    }
    size_t v19 = v18 + v12;
    if (!v15 || (unint64_t)&v15[v19] > v16)
    {
      unint64_t v20 = 2 * *((void *)v14 + 4);
      if (v20 <= v19 + 1) {
        unint64_t v20 = v19 + 1;
      }
      *((void *)v14 + 4) = v20;
      unint64_t v21 = v20 + 8;
      uint64_t result = (uint64_t *)malloc_type_malloc(v20 + 8, 0xD0263BC5uLL);
      unsigned int v22 = (char *)result + v21;
      *uint64_t result = *((void *)v14 + 3);
      unint64_t v15 = (char *)(result + 1);
      *((void *)v14 + 2) = v22;
      *((void *)v14 + 3) = result;
    }
    *((void *)v14 + 1) = &v15[v19];
    if (v12) {
      uint64_t result = (uint64_t *)memcpy(v15, this[1591], v12);
    }
    this[1591] = v15;
    LODWORD(v12) = *((_DWORD *)this + 3185);
    size_t v13 = v15;
    unsigned int v11 = *((_DWORD *)this + 3184);
    goto LABEL_26;
  }
  unint64_t v17 = (unint64_t)&v13[v12 + 1];
  unint64_t v16 = *((void *)v14 + 2);
  if (v17 > v16) {
    goto LABEL_14;
  }
  *((void *)v14 + 1) = v17;
  LODWORD(v18) = 1;
LABEL_26:
  *((_DWORD *)this + 3185) = v12 + v18;
LABEL_27:
  *((_DWORD *)this + 3184) = v11 + 1;
  v13[v11] = v10;
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  return result;
}

void *anonymous namespace'::Remangler::mangleSelfLifetimeDependence@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, uint64_t a3@<X8>)
{
  size_t v6 = (const void **)(this + 1591);
  uint64_t result = swift::Demangle::__runtime::CharVector::append(this + 1591, "YL", 2uLL, this[1593]);
  uint64_t v8 = *(void *)a2;
  unsigned int v9 = *((_DWORD *)this + 3184);
  size_t v10 = *((unsigned int *)this + 3185);
  unsigned int v11 = this[1591];
  if (v9 >= v10)
  {
    size_t v12 = this[1593];
    size_t v13 = (char *)*((void *)v12 + 1);
    if (&v11[v10] == v13)
    {
      unint64_t v15 = (unint64_t)&v11[v10 + 1];
      unint64_t v14 = *((void *)v12 + 2);
      if (v15 <= v14)
      {
        *((void *)v12 + 1) = v15;
        LODWORD(v16) = 1;
LABEL_20:
        *((_DWORD *)this + 3185) = v10 + v16;
        goto LABEL_21;
      }
    }
    else
    {
      unint64_t v14 = *((void *)v12 + 2);
    }
    if ((2 * v10) <= 4) {
      uint64_t v16 = 4;
    }
    else {
      uint64_t v16 = (2 * v10);
    }
    size_t v17 = v16 + v10;
    if (v13) {
      BOOL v18 = (unint64_t)&v13[v16 + v10] > v14;
    }
    else {
      BOOL v18 = 1;
    }
    unsigned int v11 = (char *)*((void *)v12 + 1);
    if (v18)
    {
      unint64_t v19 = 2 * *((void *)v12 + 4);
      if (v19 <= v17 + 1) {
        unint64_t v19 = v17 + 1;
      }
      *((void *)v12 + 4) = v19;
      unint64_t v20 = v19 + 8;
      uint64_t result = malloc_type_malloc(v19 + 8, 0xD0263BC5uLL);
      unint64_t v21 = (char *)result + v20;
      *uint64_t result = *((void *)v12 + 3);
      unsigned int v11 = (char *)(result + 1);
      *((void *)v12 + 2) = v21;
      *((void *)v12 + 3) = result;
    }
    *((void *)v12 + 1) = &v11[v17];
    if (v10) {
      uint64_t result = memcpy(v11, *v6, v10);
    }
    this[1591] = v11;
    LODWORD(v10) = *((_DWORD *)this + 3185);
    unsigned int v9 = *((_DWORD *)this + 3184);
    goto LABEL_20;
  }
LABEL_21:
  *((_DWORD *)this + 3184) = v9 + 1;
  v11[v9] = v8;
  *(_DWORD *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 16) = 0;
  return result;
}

uint64_t *anonymous namespace'::Remangler::mangleOutlinedInitializeWithCopyNoValueWitness@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6 = *((unsigned __int8 *)a2 + 18);
  int v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      uint64_t v8 = *(void *)a2;
      int v7 = *(swift::Demangle::__runtime::Node **)a2;
      goto LABEL_9;
    }
    int v7 = 0;
  }
  switch(v6)
  {
    case 1:
      unsigned int v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 8);
      if (v7 == (swift::Demangle::__runtime::Node *)((char *)a2 + 8)) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 2:
      unsigned int v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 16);
      if (v7 == (swift::Demangle::__runtime::Node *)((char *)a2 + 16)) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 5:
      uint64_t v8 = *(void *)a2;
LABEL_9:
      unsigned int v9 = (swift::Demangle::__runtime::Node *)(v8 + 8 * *((unsigned int *)a2 + 2));
      if (v7 == v9) {
        goto LABEL_19;
      }
      goto LABEL_16;
  }
  unsigned int v9 = 0;
  if (!v7)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    uint64_t result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "WOC", 3uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
LABEL_16:
  unsigned int v10 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4) {
      return result;
    }
    int v7 = (swift::Demangle::__runtime::Node *)((char *)v7 + 8);
    if (v7 == v9) {
      goto LABEL_19;
    }
  }
}

uint64_t *anonymous namespace'::Remangler::mangleOutlinedAssignWithTakeNoValueWitness@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6 = *((unsigned __int8 *)a2 + 18);
  int v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      uint64_t v8 = *(void *)a2;
      int v7 = *(swift::Demangle::__runtime::Node **)a2;
      goto LABEL_9;
    }
    int v7 = 0;
  }
  switch(v6)
  {
    case 1:
      unsigned int v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 8);
      if (v7 == (swift::Demangle::__runtime::Node *)((char *)a2 + 8)) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 2:
      unsigned int v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 16);
      if (v7 == (swift::Demangle::__runtime::Node *)((char *)a2 + 16)) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 5:
      uint64_t v8 = *(void *)a2;
LABEL_9:
      unsigned int v9 = (swift::Demangle::__runtime::Node *)(v8 + 8 * *((unsigned int *)a2 + 2));
      if (v7 == v9) {
        goto LABEL_19;
      }
      goto LABEL_16;
  }
  unsigned int v9 = 0;
  if (!v7)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    uint64_t result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "WOD", 3uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
LABEL_16:
  unsigned int v10 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4) {
      return result;
    }
    int v7 = (swift::Demangle::__runtime::Node *)((char *)v7 + 8);
    if (v7 == v9) {
      goto LABEL_19;
    }
  }
}

uint64_t *anonymous namespace'::Remangler::mangleOutlinedAssignWithCopyNoValueWitness@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6 = *((unsigned __int8 *)a2 + 18);
  int v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      uint64_t v8 = *(void *)a2;
      int v7 = *(swift::Demangle::__runtime::Node **)a2;
      goto LABEL_9;
    }
    int v7 = 0;
  }
  switch(v6)
  {
    case 1:
      unsigned int v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 8);
      if (v7 == (swift::Demangle::__runtime::Node *)((char *)a2 + 8)) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 2:
      unsigned int v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 16);
      if (v7 == (swift::Demangle::__runtime::Node *)((char *)a2 + 16)) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 5:
      uint64_t v8 = *(void *)a2;
LABEL_9:
      unsigned int v9 = (swift::Demangle::__runtime::Node *)(v8 + 8 * *((unsigned int *)a2 + 2));
      if (v7 == v9) {
        goto LABEL_19;
      }
      goto LABEL_16;
  }
  unsigned int v9 = 0;
  if (!v7)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    uint64_t result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "WOF", 3uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
LABEL_16:
  unsigned int v10 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4) {
      return result;
    }
    int v7 = (swift::Demangle::__runtime::Node *)((char *)v7 + 8);
    if (v7 == v9) {
      goto LABEL_19;
    }
  }
}

uint64_t *anonymous namespace'::Remangler::mangleOutlinedDestroyNoValueWitness@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6 = *((unsigned __int8 *)a2 + 18);
  int v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      uint64_t v8 = *(void *)a2;
      int v7 = *(swift::Demangle::__runtime::Node **)a2;
      goto LABEL_9;
    }
    int v7 = 0;
  }
  switch(v6)
  {
    case 1:
      unsigned int v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 8);
      if (v7 == (swift::Demangle::__runtime::Node *)((char *)a2 + 8)) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 2:
      unsigned int v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 16);
      if (v7 == (swift::Demangle::__runtime::Node *)((char *)a2 + 16)) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 5:
      uint64_t v8 = *(void *)a2;
LABEL_9:
      unsigned int v9 = (swift::Demangle::__runtime::Node *)(v8 + 8 * *((unsigned int *)a2 + 2));
      if (v7 == v9) {
        goto LABEL_19;
      }
      goto LABEL_16;
  }
  unsigned int v9 = 0;
  if (!v7)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    uint64_t result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "WOH", 3uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
LABEL_16:
  unsigned int v10 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4) {
      return result;
    }
    int v7 = (swift::Demangle::__runtime::Node *)((char *)v7 + 8);
    if (v7 == v9) {
      goto LABEL_19;
    }
  }
}

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleDependentGenericInverseConformanceRequirement@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = a2;
  uint64_t v5 = (uint64_t)this;
  int v7 = *((unsigned __int8 *)a2 + 18);
  if (v7 == 2)
  {
    uint64_t v8 = (swift::Demangle::__runtime::Node **)a2;
  }
  else
  {
    if (v7 != 5 || *((_DWORD *)a2 + 2) != 2)
    {
      *(_DWORD *)a4 = 1;
      *(void *)(a4 + 8) = a2;
      *(_DWORD *)(a4 + 16) = 1103;
      return this;
    }
    uint64_t v8 = *(swift::Demangle::__runtime::Node ***)a2;
  }
  if (v11)
  {
    *(_OWORD *)a4 = v11;
    *(void *)(a4 + 16) = v12;
    return this;
  }
  unsigned int v9 = v14;
  if ((v13 & 0x80000000) == 0 && !v14)
  {
    *(_DWORD *)a4 = 1;
    *(void *)(a4 + 8) = v4;
    *(_DWORD *)(a4 + 16) = 1112;
    return this;
  }
  if (v13 == 1)
  {
    unsigned int v10 = "Rj";
LABEL_21:
    swift::Demangle::__runtime::CharVector::append((char **)(v5 + 12728), v10, 2uLL, *(void **)(v5 + 12744));
    if (*((unsigned char *)v4 + 18) == 5) {
      int v4 = *(swift::Demangle::__runtime::Node **)v4;
    }
    goto LABEL_24;
  }
  if (!v13)
  {
    unsigned int v10 = "Ri";
    goto LABEL_21;
  }
  if (v13 != -1)
  {
    unsigned int v10 = "RJ";
    goto LABEL_21;
  }
  swift::Demangle::__runtime::CharVector::append((char **)(v5 + 12728), "RI", 2uLL, *(void **)(v5 + 12744));
  if (*((unsigned char *)v4 + 18) == 5) {
    int v4 = *(swift::Demangle::__runtime::Node **)v4;
  }
LABEL_24:
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  return this;
}

uint64_t *anonymous namespace'::Remangler::mangleAnyConstructor@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, char a3@<W2>, int a4@<W3>, uint64_t a5@<X8>)
{
  int v8 = *((unsigned __int8 *)a2 + 18);
  unsigned int v9 = a2;
  if ((v8 - 1) >= 2)
  {
    if (v8 == 5)
    {
      uint64_t v10 = *(void *)a2;
      unsigned int v9 = *(swift::Demangle::__runtime::Node **)a2;
      goto LABEL_9;
    }
    unsigned int v9 = 0;
  }
  if (v8 == 1)
  {
    long long v11 = (swift::Demangle::__runtime::Node *)((char *)a2 + 8);
    if (v9 != (swift::Demangle::__runtime::Node *)((char *)a2 + 8)) {
      goto LABEL_16;
    }
    goto LABEL_19;
  }
  if (v8 == 2)
  {
    long long v11 = (swift::Demangle::__runtime::Node *)((char *)a2 + 16);
    if (v9 != (swift::Demangle::__runtime::Node *)((char *)a2 + 16)) {
      goto LABEL_16;
    }
LABEL_19:
    *(_DWORD *)a5 = 0;
    *(void *)(a5 + 8) = 0;
    *(_DWORD *)(a5 + 16) = 0;
    uint64_t result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "f", 1uLL, this[1593]);
    unsigned int v14 = *((_DWORD *)this + 3184);
    size_t v15 = *((unsigned int *)this + 3185);
    uint64_t v16 = this[1591];
    if (v14 < v15)
    {
LABEL_36:
      *((_DWORD *)this + 3184) = v14 + 1;
      v16[v14] = a3;
      *(_DWORD *)a5 = 0;
      *(void *)(a5 + 8) = 0;
      *(_DWORD *)(a5 + 16) = 0;
      return result;
    }
    size_t v17 = this[1593];
    BOOL v18 = (char *)*((void *)v17 + 1);
    if (&v16[v15] == v18)
    {
      unint64_t v20 = (unint64_t)&v16[v15 + 1];
      unint64_t v19 = *((void *)v17 + 2);
      if (v20 <= v19)
      {
        *((void *)v17 + 1) = v20;
        LODWORD(v21) = 1;
LABEL_35:
        *((_DWORD *)this + 3185) = v15 + v21;
        goto LABEL_36;
      }
    }
    else
    {
      unint64_t v19 = *((void *)v17 + 2);
    }
    if ((2 * v15) <= 4) {
      uint64_t v21 = 4;
    }
    else {
      uint64_t v21 = (2 * v15);
    }
    size_t v22 = v21 + v15;
    if (!v18 || (unint64_t)&v18[v22] > v19)
    {
      unint64_t v23 = 2 * *((void *)v17 + 4);
      if (v23 <= v22 + 1) {
        unint64_t v23 = v22 + 1;
      }
      *((void *)v17 + 4) = v23;
      unint64_t v24 = v23 + 8;
      uint64_t result = (uint64_t *)malloc_type_malloc(v23 + 8, 0xD0263BC5uLL);
      unint64_t v25 = (char *)result + v24;
      *uint64_t result = *((void *)v17 + 3);
      BOOL v18 = (char *)(result + 1);
      *((void *)v17 + 2) = v25;
      *((void *)v17 + 3) = result;
    }
    *((void *)v17 + 1) = &v18[v22];
    if (v15) {
      uint64_t result = (uint64_t *)memcpy(v18, this[1591], v15);
    }
    this[1591] = v18;
    LODWORD(v15) = *((_DWORD *)this + 3185);
    uint64_t v16 = v18;
    unsigned int v14 = *((_DWORD *)this + 3184);
    goto LABEL_35;
  }
  if (v8 != 5)
  {
    long long v11 = 0;
    if (!v9) {
      goto LABEL_19;
    }
    goto LABEL_16;
  }
  uint64_t v10 = *(void *)a2;
LABEL_9:
  long long v11 = (swift::Demangle::__runtime::Node *)(v10 + 8 * *((unsigned int *)a2 + 2));
  if (v9 == v11) {
    goto LABEL_19;
  }
LABEL_16:
  unsigned int v12 = a4 + 1;
  while (1)
  {
    if (*(_DWORD *)a5) {
      return result;
    }
    unsigned int v9 = (swift::Demangle::__runtime::Node *)((char *)v9 + 8);
    if (v9 == v11) {
      goto LABEL_19;
    }
  }
}

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleChildNodes@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v5 = this;
  int v7 = *((unsigned __int8 *)a2 + 18);
  int v8 = a2;
  if ((v7 - 1) >= 2)
  {
    if (v7 == 5)
    {
      unsigned int v9 = *a2;
      int v8 = (swift::Demangle::__runtime::Node **)*a2;
LABEL_9:
      uint64_t v10 = (swift::Demangle::__runtime::Node **)((char *)v9 + 8 * *((unsigned int *)a2 + 2));
      goto LABEL_15;
    }
    int v8 = 0;
  }
  switch(v7)
  {
    case 1:
      uint64_t v10 = a2 + 1;
      goto LABEL_15;
    case 2:
      uint64_t v10 = a2 + 2;
      goto LABEL_15;
    case 5:
      unsigned int v9 = *a2;
      goto LABEL_9;
  }
  uint64_t v10 = 0;
LABEL_15:
  while (v8 != v10)
  {
    if (*(_DWORD *)a4) {
      return this;
    }
    ++v8;
  }
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  return this;
}

char **swift::Demangle::__runtime::RemanglerBuffer::operator<<(char **a1, char a2)
{
  unsigned int v4 = *((_DWORD *)a1 + 2);
  size_t v5 = *((unsigned int *)a1 + 3);
  int v6 = *a1;
  if (v4 >= v5)
  {
    int v7 = a1[2];
    int v8 = (char *)*((void *)v7 + 1);
    if (&v6[v5] == v8)
    {
      unint64_t v10 = (unint64_t)&v6[v5 + 1];
      unint64_t v9 = *((void *)v7 + 2);
      if (v10 <= v9)
      {
        *((void *)v7 + 1) = v10;
        LODWORD(v11) = 1;
LABEL_20:
        *((_DWORD *)a1 + 3) = v5 + v11;
        goto LABEL_21;
      }
    }
    else
    {
      unint64_t v9 = *((void *)v7 + 2);
    }
    if ((2 * v5) <= 4) {
      uint64_t v11 = 4;
    }
    else {
      uint64_t v11 = (2 * v5);
    }
    size_t v12 = v11 + v5;
    if (v8) {
      BOOL v13 = (unint64_t)&v8[v11 + v5] > v9;
    }
    else {
      BOOL v13 = 1;
    }
    int v6 = (char *)*((void *)v7 + 1);
    if (v13)
    {
      unint64_t v14 = 2 * *((void *)v7 + 4);
      if (v14 <= v12 + 1) {
        unint64_t v14 = v12 + 1;
      }
      *((void *)v7 + 4) = v14;
      unint64_t v15 = v14 + 8;
      uint64_t v16 = malloc_type_malloc(v14 + 8, 0xD0263BC5uLL);
      size_t v17 = (char *)v16 + v15;
      *uint64_t v16 = *((void *)v7 + 3);
      int v6 = (char *)(v16 + 1);
      *((void *)v7 + 2) = v17;
      *((void *)v7 + 3) = v16;
    }
    *((void *)v7 + 1) = &v6[v12];
    if (v5) {
      memcpy(v6, *a1, v5);
    }
    *a1 = v6;
    unsigned int v4 = *((_DWORD *)a1 + 2);
    LODWORD(v5) = *((_DWORD *)a1 + 3);
    goto LABEL_20;
  }
LABEL_21:
  *((_DWORD *)a1 + 2) = v4 + 1;
  v6[v4] = a2;
  return a1;
}

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleAnyProtocolConformance@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  size_t v5 = this;
  switch(*((_WORD *)a2 + 8))
  {
    case 0x1A:
      int v6 = a3 + 1;
    case 0x1B:
      int v7 = *((unsigned __int8 *)a2 + 18);
      if ((v7 - 1) < 2) {
        goto LABEL_9;
      }
      if (v7 == 5 && *((_DWORD *)a2 + 2))
      {
        a2 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_9:
        int v8 = *(swift::Demangle::__runtime::Node **)a2;
      }
      else
      {
        int v8 = 0;
      }
      if (!*(_DWORD *)a4)
      {
        this = (_anonymous_namespace_::Remangler *)swift::Demangle::__runtime::CharVector::append((char **)v5 + 1591, "HX", 2uLL, *((void **)v5 + 1593));
        goto LABEL_22;
      }
      return this;
    case 0x2F:
      int v9 = a3 + 1;
    case 0x30:
      int v10 = a3 + 1;
    case 0x31:
      int v11 = a3 + 1;
    default:
LABEL_22:
      *(_DWORD *)a4 = 0;
      *(void *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 16) = 0;
      return this;
  }
}

unsigned int *anonymous namespace'::Remangler::mangleListSeparator(unsigned int *this, BOOL *a2)
{
  if (*a2)
  {
    uint64_t v3 = this;
    unsigned int v4 = this[3184];
    size_t v5 = this[3185];
    int v6 = (unsigned char *)*((void *)this + 1591);
    if (v4 < v5)
    {
LABEL_21:
      v3[3184] = v4 + 1;
      v6[v4] = 95;
      *a2 = 0;
      return this;
    }
    int v7 = (void *)*((void *)this + 1593);
    int v8 = (unsigned char *)v7[1];
    if (&v6[v5] == v8)
    {
      unint64_t v10 = (unint64_t)&v6[v5 + 1];
      unint64_t v9 = v7[2];
      if (v10 <= v9)
      {
        v7[1] = v10;
        LODWORD(v11) = 1;
LABEL_20:
        v3[3185] = v5 + v11;
        goto LABEL_21;
      }
    }
    else
    {
      unint64_t v9 = v7[2];
    }
    if ((2 * v5) <= 4) {
      uint64_t v11 = 4;
    }
    else {
      uint64_t v11 = (2 * v5);
    }
    size_t v12 = v11 + v5;
    if (v8) {
      BOOL v13 = (unint64_t)&v8[v11 + v5] > v9;
    }
    else {
      BOOL v13 = 1;
    }
    int v6 = (unsigned char *)v7[1];
    if (v13)
    {
      unint64_t v14 = 2 * v7[4];
      if (v14 <= v12 + 1) {
        unint64_t v14 = v12 + 1;
      }
      v7[4] = v14;
      unint64_t v15 = v14 + 8;
      this = (unsigned int *)malloc_type_malloc(v14 + 8, 0xD0263BC5uLL);
      uint64_t v16 = (char *)this + v15;
      *(void *)this = v7[3];
      int v6 = this + 2;
      v7[2] = v16;
      v7[3] = this;
    }
    v7[1] = &v6[v12];
    if (v5) {
      this = (unsigned int *)memcpy(v6, *((const void **)v3 + 1591), v5);
    }
    *((void *)v3 + 1591) = v6;
    LODWORD(v5) = v3[3185];
    unsigned int v4 = v3[3184];
    goto LABEL_20;
  }
  return this;
}

unsigned int *anonymous namespace'::Remangler::mangleEndOfList(unsigned int *this, int a2)
{
  if (a2)
  {
    uint64_t v2 = this;
    unsigned int v3 = this[3184];
    size_t v4 = this[3185];
    size_t v5 = (unsigned char *)*((void *)this + 1591);
    if (v3 < v4)
    {
LABEL_21:
      v2[3184] = v3 + 1;
      v5[v3] = 121;
      return this;
    }
    int v6 = (void *)*((void *)this + 1593);
    int v7 = (unsigned char *)v6[1];
    if (&v5[v4] == v7)
    {
      unint64_t v9 = (unint64_t)&v5[v4 + 1];
      unint64_t v8 = v6[2];
      if (v9 <= v8)
      {
        v6[1] = v9;
        LODWORD(v10) = 1;
LABEL_20:
        v2[3185] = v4 + v10;
        goto LABEL_21;
      }
    }
    else
    {
      unint64_t v8 = v6[2];
    }
    if ((2 * v4) <= 4) {
      uint64_t v10 = 4;
    }
    else {
      uint64_t v10 = (2 * v4);
    }
    size_t v11 = v10 + v4;
    if (v7) {
      BOOL v12 = (unint64_t)&v7[v10 + v4] > v8;
    }
    else {
      BOOL v12 = 1;
    }
    size_t v5 = (unsigned char *)v6[1];
    if (v12)
    {
      unint64_t v13 = 2 * v6[4];
      if (v13 <= v11 + 1) {
        unint64_t v13 = v11 + 1;
      }
      v6[4] = v13;
      unint64_t v14 = v13 + 8;
      this = (unsigned int *)malloc_type_malloc(v13 + 8, 0xD0263BC5uLL);
      unint64_t v15 = (char *)this + v14;
      *(void *)this = v6[3];
      size_t v5 = this + 2;
      v6[2] = v15;
      v6[3] = this;
    }
    v6[1] = &v5[v11];
    if (v4) {
      this = (unsigned int *)memcpy(v5, *((const void **)v2 + 1591), v4);
    }
    *((void *)v2 + 1591) = v5;
    LODWORD(v4) = v2[3185];
    unsigned int v3 = v2[3184];
    goto LABEL_20;
  }
  return this;
}

uint64_t anonymous namespace'::Remangler::trySubstitution(_anonymous_namespace_::Remangler *this, swift::Demangle::__runtime::Node *a2, swift::Demangle::__runtime::SubstitutionEntry *a3, int a4)
{
    return 1;
  swift::Demangle::__runtime::RemanglerBase::entryForNode((uint64_t *)&__s2, this, a2, a4);
  *(_OWORD *)a3 = __s2;
  *((unsigned char *)a3 + 16) = v36;
  unsigned int Substitution = swift::Demangle::__runtime::RemanglerBase::findSubstitution(this, (swift::Demangle::__runtime::Node **)a3);
  if ((Substitution & 0x80000000) != 0) {
    return 0;
  }
  uint64_t v9 = Substitution - 26;
  if (Substitution >= 0x1A)
  {
    unsigned int v10 = *((_DWORD *)this + 3184);
    size_t v11 = *((unsigned int *)this + 3185);
    BOOL v12 = (char *)*((void *)this + 1591);
    if (v10 < v11)
    {
LABEL_25:
      *((_DWORD *)this + 3184) = v10 + 1;
      v12[v10] = 65;
      return 1;
    }
    unint64_t v13 = (void *)*((void *)this + 1593);
    unint64_t v14 = (char *)v13[1];
    if (&v12[v11] == v14)
    {
      unint64_t v23 = (unint64_t)&v12[v11 + 1];
      unint64_t v15 = v13[2];
      if (v23 <= v15)
      {
        v13[1] = v23;
        LODWORD(v24) = 1;
LABEL_24:
        *((_DWORD *)this + 3185) = v11 + v24;
        goto LABEL_25;
      }
    }
    else
    {
      unint64_t v15 = v13[2];
    }
    if ((2 * v11) <= 4) {
      uint64_t v24 = 4;
    }
    else {
      uint64_t v24 = (2 * v11);
    }
    size_t v25 = v24 + v11;
    if (!v14 || (unint64_t)&v14[v25] > v15)
    {
      unint64_t v26 = 2 * v13[4];
      if (v26 <= v25 + 1) {
        unint64_t v26 = v25 + 1;
      }
      v13[4] = v26;
      unint64_t v27 = v26 + 8;
      unint64_t v28 = malloc_type_malloc(v26 + 8, 0xD0263BC5uLL);
      *unint64_t v28 = v13[3];
      unint64_t v14 = (char *)(v28 + 1);
      v13[2] = (char *)v28 + v27;
      v13[3] = v28;
    }
    v13[1] = &v14[v25];
    if (v11) {
      memcpy(v14, *((const void **)this + 1591), v11);
    }
    *((void *)this + 1591) = v14;
    LODWORD(v11) = *((_DWORD *)this + 3185);
    BOOL v12 = v14;
    unsigned int v10 = *((_DWORD *)this + 3184);
    goto LABEL_24;
  }
  LOBYTE(__s2) = Substitution + 65;
  {
    unsigned int v17 = *((_DWORD *)this + 3184);
    size_t v18 = *((unsigned int *)this + 3185);
    unint64_t v19 = (char *)*((void *)this + 1591);
    if (v17 < v18)
    {
LABEL_41:
      *((_DWORD *)this + 3184) = v17 + 1;
      v19[v17] = 65;
      swift::Demangle::__runtime::CharVector::append((char **)this + 1591, &__s2, 1uLL, *((void **)this + 1593));
      return 1;
    }
    unint64_t v20 = (void *)*((void *)this + 1593);
    uint64_t v21 = (char *)v20[1];
    if (&v19[v18] == v21)
    {
      unint64_t v29 = (unint64_t)&v19[v18 + 1];
      unint64_t v22 = v20[2];
      if (v29 <= v22)
      {
        v20[1] = v29;
        LODWORD(v30) = 1;
LABEL_40:
        *((_DWORD *)this + 3185) = v18 + v30;
        goto LABEL_41;
      }
    }
    else
    {
      unint64_t v22 = v20[2];
    }
    if ((2 * v18) <= 4) {
      uint64_t v30 = 4;
    }
    else {
      uint64_t v30 = (2 * v18);
    }
    size_t v31 = v30 + v18;
    if (!v21 || (unint64_t)&v21[v31] > v22)
    {
      unint64_t v32 = 2 * v20[4];
      if (v32 <= v31 + 1) {
        unint64_t v32 = v31 + 1;
      }
      v20[4] = v32;
      unint64_t v33 = v32 + 8;
      unint64_t v34 = malloc_type_malloc(v32 + 8, 0xD0263BC5uLL);
      void *v34 = v20[3];
      uint64_t v21 = (char *)(v34 + 1);
      v20[2] = (char *)v34 + v33;
      v20[3] = v34;
    }
    v20[1] = &v21[v31];
    if (v18) {
      memcpy(v21, *((const void **)this + 1591), v18);
    }
    *((void *)this + 1591) = v21;
    LODWORD(v18) = *((_DWORD *)this + 3185);
    unint64_t v19 = v21;
    unsigned int v17 = *((_DWORD *)this + 3184);
    goto LABEL_40;
  }
  return 1;
}

BOOL anonymous namespace'::Remangler::mangleStandardSubstitution(_anonymous_namespace_::Remangler *this, swift::Demangle::__runtime::Node *a2)
{
  BOOL v3 = 0;
  unsigned int v4 = *((unsigned __int16 *)a2 + 8);
  if (v4 <= 0xB3)
  {
    if (v4 != 24 && v4 != 61) {
      return v3;
    }
LABEL_7:
    int v5 = *((unsigned __int8 *)a2 + 18);
    int v6 = a2;
    if ((v5 - 1) >= 2)
    {
      if (v5 != 5 || !*((_DWORD *)a2 + 2))
      {
        int v7 = 0;
LABEL_13:
        if (*((_WORD *)v7 + 8) != 153 || v7[1] != 5) {
          return 0;
        }
        unint64_t v8 = (int *)*v7;
        int v9 = *v8;
        int v10 = *((unsigned __int8 *)v8 + 4);
        if (v9 != 1718187859 || v10 != 116) {
          return 0;
        }
        if (v5 == 5)
        {
          if (*(_WORD *)(*(void *)(*(void *)a2 + 8) + 16) == 101)
          {
            a2 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_25:
            swift::Mangle::__runtime::getStandardTypeSubst(**((void ***)a2 + 1), *(void *)(*((void *)a2 + 1) + 8), 1, (uint64_t)&v25);
            BOOL v3 = v27 != 0;
            if (!v27
            {
              return v3;
            }
            unsigned int v13 = *((_DWORD *)this + 3184);
            size_t v14 = *((unsigned int *)this + 3185);
            unint64_t v15 = (char *)*((void *)this + 1591);
            if (v13 < v14)
            {
LABEL_44:
              *((_DWORD *)this + 3184) = v13 + 1;
              v15[v13] = 83;
              swift::Demangle::__runtime::CharVector::append((char **)this + 1591, v25, v26, *((void **)this + 1593));
              return v3;
            }
            uint64_t v16 = (void *)*((void *)this + 1593);
            unsigned int v17 = (char *)v16[1];
            if (&v15[v14] == v17)
            {
              unint64_t v19 = (unint64_t)&v15[v14 + 1];
              unint64_t v18 = v16[2];
              if (v19 <= v18)
              {
                v16[1] = v19;
                LODWORD(v20) = 1;
LABEL_43:
                *((_DWORD *)this + 3185) = v14 + v20;
                goto LABEL_44;
              }
            }
            else
            {
              unint64_t v18 = v16[2];
            }
            if ((2 * v14) <= 4) {
              uint64_t v20 = 4;
            }
            else {
              uint64_t v20 = (2 * v14);
            }
            size_t v21 = v20 + v14;
            if (!v17 || (unint64_t)&v17[v21] > v18)
            {
              unint64_t v22 = 2 * v16[4];
              if (v22 <= v21 + 1) {
                unint64_t v22 = v21 + 1;
              }
              v16[4] = v22;
              unint64_t v23 = v22 + 8;
              uint64_t v24 = malloc_type_malloc(v22 + 8, 0xD0263BC5uLL);
              *uint64_t v24 = v16[3];
              unsigned int v17 = (char *)(v24 + 1);
              v16[2] = (char *)v24 + v23;
              v16[3] = v24;
            }
            v16[1] = &v17[v21];
            if (v14) {
              memcpy(v17, *((const void **)this + 1591), v14);
            }
            *((void *)this + 1591) = v17;
            LODWORD(v14) = *((_DWORD *)this + 3185);
            unint64_t v15 = v17;
            unsigned int v13 = *((_DWORD *)this + 3184);
            goto LABEL_43;
          }
        }
        else if (*(_WORD *)(*((void *)a2 + 1) + 16) == 101)
        {
          goto LABEL_25;
        }
        return 0;
      }
      int v6 = *(swift::Demangle::__runtime::Node **)a2;
    }
    int v7 = *(uint64_t **)v6;
    goto LABEL_13;
  }
  if (v4 == 219 || v4 == 180) {
    goto LABEL_7;
  }
  return v3;
}

char *anonymous namespace'::Remangler::mangleIndex(char *this, uint64_t a2)
{
  uint64_t v2 = (unsigned int *)this;
  BOOL v3 = (const void **)(this + 12728);
  if (a2) {
    this = (char *)swift::Demangle::__runtime::CharVector::append((unsigned int *)this + 3182, a2 - 1, *((swift::Demangle::__runtime::NodeFactory **)this + 1593));
  }
  unsigned int v4 = v2[3184];
  size_t v5 = v2[3185];
  int v6 = (char *)*((void *)v2 + 1591);
  if (v4 >= v5)
  {
    int v7 = (void *)*((void *)v2 + 1593);
    unint64_t v8 = (char *)v7[1];
    if (&v6[v5] == v8)
    {
      unint64_t v10 = (unint64_t)&v6[v5 + 1];
      unint64_t v9 = v7[2];
      if (v10 <= v9)
      {
        v7[1] = v10;
        LODWORD(v11) = 1;
LABEL_21:
        v2[3185] = v5 + v11;
        goto LABEL_22;
      }
    }
    else
    {
      unint64_t v9 = v7[2];
    }
    if ((2 * v5) <= 4) {
      uint64_t v11 = 4;
    }
    else {
      uint64_t v11 = (2 * v5);
    }
    size_t v12 = v11 + v5;
    if (v8) {
      BOOL v13 = (unint64_t)&v8[v11 + v5] > v9;
    }
    else {
      BOOL v13 = 1;
    }
    int v6 = (char *)v7[1];
    if (v13)
    {
      unint64_t v14 = 2 * v7[4];
      if (v14 <= v12 + 1) {
        unint64_t v14 = v12 + 1;
      }
      v7[4] = v14;
      unint64_t v15 = v14 + 8;
      this = (char *)malloc_type_malloc(v14 + 8, 0xD0263BC5uLL);
      uint64_t v16 = &this[v15];
      *(void *)this = v7[3];
      int v6 = this + 8;
      v7[2] = v16;
      v7[3] = this;
    }
    v7[1] = &v6[v12];
    if (v5) {
      this = (char *)memcpy(v6, *v3, v5);
    }
    *((void *)v2 + 1591) = v6;
    LODWORD(v5) = v2[3185];
    unsigned int v4 = v2[3184];
    goto LABEL_21;
  }
LABEL_22:
  v2[3184] = v4 + 1;
  v6[v4] = 95;
  return this;
}

uint64_t swift::Mangle::__runtime::SubstitutionMerging::tryMergeSubst<anonymous namespace'::Remangler>(unint64_t *a1, uint64_t a2, void *__s2, size_t __n, int a5)
{
  char v5 = a5;
  unint64_t v8 = *(unsigned int *)(a2 + 12736);
  unint64_t v9 = a1[2];
  if (v9 - 1 > 0x7FE) {
    goto LABEL_24;
  }
  unint64_t v11 = *a1;
  unint64_t v10 = a1[1];
  if (v10 + *a1 != v8 || *((unsigned __int8 *)a1 + 24) != a5) {
    goto LABEL_24;
  }
  unint64_t v14 = (unsigned int *)(a2 + 12728);
  unint64_t v15 = *(char **)(a2 + 12728);
  unint64_t v16 = v8 - v10;
  if (v8 < v8 - v10) {
    unint64_t v16 = *(unsigned int *)(a2 + 12736);
  }
  if (v8 <= v10) {
    unint64_t v16 = 0;
  }
  unint64_t v17 = v8 - v16;
  if (v8 == v16)
  {
    if (!__n) {
      goto LABEL_29;
    }
    size_t v22 = 0;
    size_t v21 = &v15[v8];
  }
  else
  {
    unint64_t v18 = 0;
    unint64_t v19 = &v15[v16];
    while (v19[v18] - 48 <= 9)
    {
      if (v17 == ++v18)
      {
        unint64_t v18 = -1;
        break;
      }
    }
    if (v17 >= v18) {
      unint64_t v20 = v18;
    }
    else {
      unint64_t v20 = v17;
    }
    size_t v21 = &v19[v20];
    size_t v22 = v17 - v20;
    if (v17 - v20 == __n)
    {
      if (v17 <= v18) {
        goto LABEL_29;
      }
      size_t v43 = (unsigned int *)(a2 + 12728);
      int v23 = memcmp(v21, __s2, __n);
      if (v23 && (v5 & 1) == 0)
      {
        size_t v22 = __n;
        unint64_t v14 = v43;
        goto LABEL_25;
      }
      unint64_t v14 = v43;
      if (!v23)
      {
LABEL_29:
        a1[2] = v9 + 1;
        *(_DWORD *)(a2 + 12736) = v11;
        size_t v31 = (char **)v14;
        swift::Demangle::__runtime::CharVector::append(v14, v9 + 1, *(swift::Demangle::__runtime::NodeFactory **)(a2 + 12744));
        swift::Demangle::__runtime::CharVector::append(v31, __s2, __n, *(void **)(a2 + 12744));
        a1[1] = *(unsigned int *)(a2 + 12736) - *a1;
        return 1;
      }
LABEL_24:
      uint64_t result = 0;
      *a1 = v8 + 1;
      a1[1] = __n;
      a1[2] = 1;
      *((unsigned char *)a1 + 24) = v5;
      return result;
    }
  }
  if (a5) {
    goto LABEL_24;
  }
LABEL_25:
  *a1 = v8;
  a1[2] = 1;
  unsigned int v25 = v8 - 1;
  *(_DWORD *)(a2 + 12736) = v8 - 1;
  char v26 = v21[v22 - 1] + 32;
  size_t v27 = *(unsigned int *)(a2 + 12740);
  if (v25 >= v27)
  {
    unint64_t v28 = *(void **)(a2 + 12744);
    unint64_t v29 = (char *)v28[1];
    if (&v15[v27] == v29)
    {
      unint64_t v32 = (unint64_t)&v15[v27 + 1];
      unint64_t v30 = v28[2];
      if (v32 <= v30)
      {
        v28[1] = v32;
        LODWORD(v33) = 1;
LABEL_43:
        *(_DWORD *)(a2 + 12740) = v27 + v33;
        goto LABEL_44;
      }
    }
    else
    {
      unint64_t v30 = v28[2];
    }
    if ((2 * v27) <= 4) {
      uint64_t v33 = 4;
    }
    else {
      uint64_t v33 = (2 * v27);
    }
    size_t v34 = v33 + v27;
    if (!v29 || (unint64_t)&v29[v34] > v30)
    {
      unint64_t v35 = 2 * v28[4];
      if (v35 <= v34 + 1) {
        unint64_t v35 = v34 + 1;
      }
      v28[4] = v35;
      unint64_t v36 = v35 + 8;
      int v44 = v33;
      char v37 = v26;
      unint64_t v38 = v14;
      unint64_t v39 = malloc_type_malloc(v35 + 8, 0xD0263BC5uLL);
      unint64_t v14 = v38;
      char v26 = v37;
      LODWORD(v33) = v44;
      unint64_t v40 = (char *)v39 + v36;
      *unint64_t v39 = v28[3];
      unint64_t v29 = (char *)(v39 + 1);
      v28[2] = v40;
      v28[3] = v39;
    }
    v28[1] = &v29[v34];
    if (v27)
    {
      size_t v41 = v27;
      uint64_t v42 = v14;
      memcpy(v29, *(const void **)v14, v41);
      unint64_t v14 = v42;
    }
    *(void *)(a2 + 12728) = v29;
    LODWORD(v27) = *(_DWORD *)(a2 + 12740);
    unint64_t v15 = v29;
    unsigned int v25 = *(_DWORD *)(a2 + 12736);
    goto LABEL_43;
  }
LABEL_44:
  *(_DWORD *)(a2 + 12736) = v25 + 1;
  v15[v25] = v26;
  swift::Demangle::__runtime::CharVector::append((char **)v14, __s2, __n, *(void **)(a2 + 12744));
  uint64_t result = 1;
  a1[1] = 1;
  return result;
}

uint64_t *anonymous namespace'::Remangler::mangleChildNodesReversed@<X0>(uint64_t *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X8>)
{
  int v6 = (_anonymous_namespace_::Remangler *)this;
  uint64_t v8 = *((unsigned __int8 *)a2 + 18);
  switch(v8)
  {
    case 1:
      goto LABEL_6;
    case 5:
      uint64_t v8 = *((unsigned int *)a2 + 2);
      if (v8) {
        goto LABEL_6;
      }
      break;
    case 2:
      uint64_t v8 = 2;
LABEL_6:
      for (uint64_t i = v8 - 1; i != -1; --i)
      {
        unint64_t v10 = *((unsigned __int8 *)a2 + 18);
        unsigned int v11 = v10 - 1;
        if (v10 != 1)
        {
          if (v10 == 5)
          {
            unint64_t v10 = *((unsigned int *)a2 + 2);
          }
          else
          {
            if (v10 != 2) {
              goto LABEL_7;
            }
            unint64_t v10 = 2;
          }
        }
        if (v10 <= i)
        {
LABEL_7:
          *(_DWORD *)a4 = 0;
          *(void *)(a4 + 8) = 0;
          *(_DWORD *)(a4 + 16) = 0;
          continue;
        }
        size_t v12 = a2;
        if (v11 >= 2) {
          size_t v12 = *(swift::Demangle::__runtime::Node **)a2;
        }
        if (*(_DWORD *)a4) {
          return this;
        }
      }
      break;
  }
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  return this;
}

uint64_t anonymous namespace'::Remangler::mangleAnyNominalType@<X0>(uint64_t this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X8>)
{
  if (a3 >= 0x401)
  {
    *(_DWORD *)a4 = 3;
    *(void *)(a4 + 8) = a2;
    int v6 = 542;
LABEL_3:
    *(_DWORD *)(a4 + 16) = v6;
    return this;
  }
  uint64_t v8 = this;
  this = swift::Demangle::__runtime::isSpecialized(a2, a2);
  if (!this)
  {
    unsigned int v9 = *((unsigned __int16 *)a2 + 8);
    if (v9 > 0xDA)
    {
      switch(v9)
      {
        case 0xEAu:
          unint64_t v10 = "a";
          break;
        case 0xE9u:
          unint64_t v19 = (swift::Demangle::__runtime::Node *)(*(uint64_t (**)(void, void, void))(v8 + 12824))(*(void *)(v8 + 12832), 0, *(void *)a2);
        case 0xDBu:
          unint64_t v10 = "V";
          break;
        default:
          goto LABEL_37;
      }
    }
    else
    {
      switch(v9)
      {
        case 0x18u:
          unint64_t v10 = "C";
          break;
        case 0x3Du:
          unint64_t v10 = "O";
          break;
        case 0xA7u:
          unint64_t v10 = "XY";
          uint64_t v11 = a4;
          uint64_t v12 = v8;
          BOOL v13 = (swift::Demangle::__runtime::Node **)a2;
          size_t v14 = 2;
LABEL_31:
        default:
LABEL_37:
          *(_DWORD *)a4 = 5;
          *(void *)(a4 + 8) = a2;
          int v6 = 584;
          goto LABEL_3;
      }
    }
    uint64_t v11 = a4;
    uint64_t v12 = v8;
    BOOL v13 = (swift::Demangle::__runtime::Node **)a2;
    size_t v14 = 1;
    goto LABEL_31;
  }
  v28[0] = 0;
  v28[1] = 0;
  char v29 = 0;
  if (this)
  {
LABEL_7:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return this;
  }
  this = swift::Demangle::__runtime::getUnspecialized((unint64_t)a2, *(swift::Demangle::__runtime::Node **)v8, (uint64_t)&v25);
  if (v25)
  {
    *(_OWORD *)a4 = v25;
    *(void *)(a4 + 16) = v26;
    return this;
  }
  unsigned int v15 = a3 + 1;
  if (!*(_DWORD *)a4)
  {
    char v24 = 121;
    if (!*(_DWORD *)a4)
    {
      if (*((unsigned char *)a2 + 18) != 5 || *((_DWORD *)a2 + 2) != 3) {
        goto LABEL_52;
      }
      unint64_t v16 = *(uint64_t **)(*(void *)a2 + 16);
      uint64_t v17 = *((unsigned __int8 *)v16 + 18);
      if (v17 != 1)
      {
        if (v17 != 5)
        {
          if (v17 == 2)
          {
            uint64_t v17 = 2;
            unint64_t v18 = 0;
            goto LABEL_40;
          }
          goto LABEL_52;
        }
        uint64_t v17 = *((unsigned int *)v16 + 2);
        if (!v17)
        {
LABEL_52:
          swift::Demangle::__runtime::RemanglerBuffer::operator<<((char **)(v8 + 12728), 71);
          this = (uint64_t)swift::Demangle::__runtime::RemanglerBase::addSubstitution((char *)v8, (const swift::Demangle::__runtime::SubstitutionEntry *)v28);
          goto LABEL_7;
        }
      }
      unint64_t v18 = 0;
      while (1)
      {
LABEL_40:
        unint64_t v20 = *((unsigned __int8 *)v16 + 18);
        unsigned int v21 = v20 - 1;
        if (v20 != 1)
        {
          if (v20 == 5)
          {
            unint64_t v20 = *((unsigned int *)v16 + 2);
          }
          else
          {
            if (v20 != 2) {
              goto LABEL_49;
            }
            unint64_t v20 = 2;
          }
        }
        if (v20 > v18)
        {
          size_t v22 = v16;
          if (v21 >= 2) {
            size_t v22 = (uint64_t *)*v16;
          }
          int v23 = (swift::Demangle::__runtime::Node *)v22[v18];
          goto LABEL_50;
        }
LABEL_49:
        int v23 = 0;
LABEL_50:
        if (*(_DWORD *)a4) {
          return this;
        }
        if (v17 == ++v18) {
          goto LABEL_52;
        }
      }
    }
  }
  return this;
}

unsigned int *anonymous namespace'::Remangler::mangleGenericArgs@<X0>(unsigned int *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, char *a3@<X2>, int a4@<W3>, BOOL a5@<W4>, uint64_t a6@<X8>)
{
  int v7 = 0;
  int v8 = 0;
  int v9 = *((unsigned __int16 *)a2 + 8);
  uint64_t v12 = a2;
  uint64_t v13 = (uint64_t)this;
  int v14 = 0;
  switch(*((_WORD *)a2 + 8))
  {
    case 0:
    case 0x1D:
    case 0x21:
    case 0x32:
    case 0x33:
    case 0x46:
    case 0x4C:
    case 0x62:
    case 0x75:
    case 0x7D:
    case 0x98:
    case 0xB2:
    case 0xB3:
    case 0xCC:
    case 0xD7:
    case 0xDA:
    case 0xDC:
    case 0xFA:
    case 0xFB:
    case 0xFE:
    case 0x101:
      if (!a5) {
        goto LABEL_26;
      }
      int v15 = *((unsigned __int8 *)a2 + 18);
      unint64_t v16 = (swift::Demangle::__runtime::Node **)a2;
      if ((v15 - 1) < 2) {
        goto LABEL_7;
      }
      if (v15 == 5 && *((_DWORD *)a2 + 2))
      {
        unint64_t v16 = *(swift::Demangle::__runtime::Node ***)a2;
LABEL_7:
        uint64_t v17 = *v16;
      }
      else
      {
        uint64_t v17 = 0;
      }
      if (!*(_DWORD *)a6)
      {
        this = (unsigned int *)swift::Demangle::__runtime::nodeConsumesGenericArgs(v12, v24);
        if (this) {
          goto LABEL_38;
        }
        goto LABEL_26;
      }
      return this;
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 0xA:
    case 0xB:
    case 0xC:
    case 0x14:
    case 0x15:
    case 0x16:
    case 0x17:
    case 0x19:
    case 0x1A:
    case 0x1B:
    case 0x1C:
    case 0x1E:
    case 0x1F:
    case 0x20:
    case 0x22:
    case 0x23:
    case 0x24:
    case 0x25:
    case 0x26:
    case 0x27:
    case 0x28:
    case 0x29:
    case 0x2A:
    case 0x2B:
    case 0x2C:
    case 0x2D:
    case 0x2E:
    case 0x2F:
    case 0x30:
    case 0x31:
    case 0x34:
    case 0x35:
    case 0x36:
    case 0x37:
    case 0x38:
    case 0x39:
    case 0x3A:
    case 0x3B:
    case 0x3C:
    case 0x3E:
    case 0x3F:
    case 0x40:
    case 0x41:
    case 0x42:
    case 0x43:
    case 0x44:
    case 0x45:
    case 0x48:
    case 0x49:
    case 0x4A:
    case 0x4B:
    case 0x4D:
    case 0x4E:
    case 0x4F:
    case 0x50:
    case 0x51:
    case 0x52:
    case 0x54:
    case 0x55:
    case 0x56:
    case 0x57:
    case 0x58:
    case 0x59:
    case 0x5A:
    case 0x5B:
    case 0x5C:
    case 0x5D:
    case 0x5E:
    case 0x5F:
    case 0x60:
    case 0x61:
    case 0x63:
    case 0x64:
    case 0x65:
    case 0x66:
    case 0x67:
    case 0x68:
    case 0x69:
    case 0x6A:
    case 0x6B:
    case 0x6C:
    case 0x6D:
    case 0x6E:
    case 0x6F:
    case 0x70:
    case 0x71:
    case 0x72:
    case 0x73:
    case 0x74:
    case 0x76:
    case 0x77:
    case 0x78:
    case 0x79:
    case 0x7A:
    case 0x7B:
    case 0x7C:
    case 0x7E:
    case 0x7F:
    case 0x80:
    case 0x81:
    case 0x82:
    case 0x83:
    case 0x84:
    case 0x85:
    case 0x86:
    case 0x87:
    case 0x88:
    case 0x89:
    case 0x8A:
    case 0x8B:
    case 0x8C:
    case 0x8D:
    case 0x8E:
    case 0x8F:
    case 0x90:
    case 0x91:
    case 0x92:
    case 0x93:
    case 0x94:
    case 0x95:
    case 0x96:
    case 0x97:
    case 0x99:
    case 0x9A:
    case 0x9B:
    case 0x9C:
    case 0x9D:
    case 0x9E:
    case 0x9F:
    case 0xA0:
    case 0xA1:
    case 0xA2:
    case 0xA3:
    case 0xA4:
    case 0xA5:
    case 0xA6:
    case 0xA7:
    case 0xA8:
    case 0xA9:
    case 0xAA:
    case 0xAB:
    case 0xAC:
    case 0xAD:
    case 0xAE:
    case 0xAF:
    case 0xB0:
    case 0xB1:
    case 0xB5:
    case 0xB6:
    case 0xB7:
    case 0xB8:
    case 0xB9:
    case 0xBA:
    case 0xBB:
    case 0xBC:
    case 0xBD:
    case 0xBE:
    case 0xBF:
    case 0xC0:
    case 0xC1:
    case 0xC2:
    case 0xC3:
    case 0xC4:
    case 0xC5:
    case 0xC6:
    case 0xC7:
    case 0xC8:
    case 0xC9:
    case 0xCA:
    case 0xCB:
    case 0xCD:
    case 0xCE:
    case 0xCF:
    case 0xD0:
    case 0xD1:
    case 0xD2:
    case 0xD3:
    case 0xD4:
    case 0xD5:
    case 0xD6:
    case 0xD8:
    case 0xD9:
    case 0xDD:
    case 0xDE:
    case 0xDF:
    case 0xE0:
    case 0xE1:
    case 0xE2:
    case 0xE3:
    case 0xE4:
    case 0xE5:
    case 0xE6:
    case 0xE7:
    case 0xE8:
    case 0xE9:
    case 0xEB:
    case 0xEC:
    case 0xED:
    case 0xEE:
    case 0xEF:
    case 0xF0:
    case 0xF1:
    case 0xF2:
    case 0xF3:
    case 0xF4:
    case 0xF5:
    case 0xF6:
    case 0xF7:
    case 0xF8:
    case 0xF9:
    case 0xFC:
    case 0xFD:
    case 0xFF:
    case 0x100:
      goto LABEL_75;
    case 0xD:
    case 0xE:
    case 0xF:
    case 0x10:
    case 0x11:
    case 0x12:
      BOOL v18 = v9 == 18 || a5;
      int v19 = *((unsigned __int8 *)a2 + 18);
      unint64_t v20 = a2;
      if ((v19 - 1) < 2) {
        goto LABEL_15;
      }
      if (v19 == 5 && *((_DWORD *)a2 + 2))
      {
        unint64_t v20 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_15:
        uint64_t v21 = *(void *)v20;
      }
      else
      {
        uint64_t v21 = 0;
      }
      if (*(_WORD *)(v21 + 16) != 232)
      {
        int v14 = 653;
        goto LABEL_35;
      }
      int v25 = *(unsigned __int8 *)(v21 + 18);
      if ((v25 - 1) < 2) {
        goto LABEL_33;
      }
      if (v25 == 5 && *(_DWORD *)(v21 + 8))
      {
        uint64_t v21 = *(void *)v21;
LABEL_33:
        uint64_t v26 = *(void *)v21;
      }
      else
      {
        uint64_t v26 = 0;
      }
      if (*(_WORD *)(v26 + 16) != 233) {
        goto LABEL_78;
      }
      uint64_t v34 = (*((uint64_t (**)(void, void, void))this + 1603))(*((void *)this + 1604), 0, *(void *)v26);
      int v35 = *(unsigned __int8 *)(v34 + 18);
      if ((v35 - 1) < 2) {
        goto LABEL_47;
      }
      if (v35 == 5 && *(_DWORD *)(v34 + 8))
      {
        uint64_t v34 = *(void *)v34;
LABEL_47:
        uint64_t v26 = *(void *)v34;
      }
      else
      {
        uint64_t v26 = 0;
      }
LABEL_78:
      int v54 = *(unsigned __int8 *)(v26 + 18);
      if ((v54 - 1) < 2) {
        goto LABEL_82;
      }
      if (v54 == 5 && *(_DWORD *)(v26 + 8))
      {
        uint64_t v26 = *(void *)v26;
LABEL_82:
        uint64_t v55 = *(swift::Demangle::__runtime::Node **)v26;
      }
      else
      {
        uint64_t v55 = 0;
      }
      unsigned int v56 = a4 + 1;
      if (*(_DWORD *)a6) {
        return this;
      }
      char v57 = *a3;
      unsigned int v58 = *(_DWORD *)(v13 + 12736);
      size_t v59 = *(unsigned int *)(v13 + 12740);
      unsigned int v60 = *(char **)(v13 + 12728);
      if (v58 < v59) {
        goto LABEL_125;
      }
      size_t v61 = *(void **)(v13 + 12744);
      uint64_t v62 = (char *)v61[1];
      if (&v60[v59] == v62)
      {
        unint64_t v71 = (unint64_t)&v60[v59 + 1];
        unint64_t v63 = v61[2];
        if (v71 <= v63)
        {
          v61[1] = v71;
          LODWORD(v72) = 1;
          goto LABEL_124;
        }
      }
      else
      {
        unint64_t v63 = v61[2];
      }
      char v96 = *a3;
      if ((2 * v59) <= 4) {
        uint64_t v72 = 4;
      }
      else {
        uint64_t v72 = (2 * v59);
      }
      size_t v73 = v72 + v59;
      if (!v62 || (unint64_t)&v62[v73] > v63)
      {
        unint64_t v74 = 2 * v61[4];
        if (v74 <= v73 + 1) {
          unint64_t v74 = v73 + 1;
        }
        v61[4] = v74;
        unint64_t v75 = v74 + 8;
        this = (unsigned int *)malloc_type_malloc(v74 + 8, 0xD0263BC5uLL);
        int v76 = (char *)this + v75;
        *(void *)this = v61[3];
        uint64_t v62 = (char *)(this + 2);
        v61[2] = v76;
        v61[3] = this;
      }
      v61[1] = &v62[v73];
      if (v59) {
        this = (unsigned int *)memcpy(v62, *(const void **)(v13 + 12728), v59);
      }
      *(void *)(v13 + 12728) = v62;
      LODWORD(v59) = *(_DWORD *)(v13 + 12740);
      unsigned int v60 = v62;
      unsigned int v58 = *(_DWORD *)(v13 + 12736);
      char v57 = v96;
LABEL_124:
      *(_DWORD *)(v13 + 12740) = v59 + v72;
LABEL_125:
      *(_DWORD *)(v13 + 12736) = v58 + 1;
      v60[v58] = v57;
      *a3 = 95;
      int v77 = *((unsigned __int8 *)v12 + 18);
      if (v77 == 2) {
        goto LABEL_129;
      }
      if (v77 == 5 && *((_DWORD *)v12 + 2) >= 2u)
      {
        uint64_t v12 = *(swift::Demangle::__runtime::Node **)v12;
LABEL_129:
        uint64_t v78 = *((void *)v12 + 1);
      }
      else
      {
        uint64_t v78 = 0;
      }
      int v79 = *(unsigned __int8 *)(v78 + 18);
      int v80 = (swift::Demangle::__runtime::Node **)v78;
      if ((v79 - 1) < 2) {
        goto LABEL_135;
      }
      if (v79 == 5)
      {
        size_t v81 = *(swift::Demangle::__runtime::Node **)v78;
        int v80 = *(swift::Demangle::__runtime::Node ***)v78;
LABEL_139:
        char v82 = (swift::Demangle::__runtime::Node **)((char *)v81 + 8 * *(unsigned int *)(v78 + 8));
        goto LABEL_143;
      }
      int v80 = 0;
LABEL_135:
      switch(v79)
      {
        case 1:
          char v82 = (swift::Demangle::__runtime::Node **)(v78 + 8);
          break;
        case 2:
          char v82 = (swift::Demangle::__runtime::Node **)(v78 + 16);
          break;
        case 5:
          size_t v81 = *(swift::Demangle::__runtime::Node **)v78;
          goto LABEL_139;
        default:
          char v82 = 0;
          break;
      }
LABEL_143:
      if (v80 == v82) {
        goto LABEL_26;
      }
      while (1)
      {
        if (*(_DWORD *)a6) {
          return this;
        }
        int v8 = 0;
        int v7 = 0;
        int v14 = 0;
        if (++v80 == v82) {
          goto LABEL_75;
        }
      }
    case 0x13:
      int v36 = *((unsigned __int8 *)a2 + 18);
      char v37 = a2;
      if ((v36 - 1) < 2) {
        goto LABEL_52;
      }
      if (v36 == 5 && *((_DWORD *)a2 + 2))
      {
        char v37 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_52:
        unint64_t v38 = *(swift::Demangle::__runtime::Node **)v37;
      }
      else
      {
        unint64_t v38 = 0;
      }
      int v64 = *((unsigned __int16 *)v38 + 8);
      if (v64 != 76 && v64 != 29)
      {
        int v14 = 682;
LABEL_35:
        int v8 = 1;
        int v7 = a2;
        goto LABEL_75;
      }
      int v66 = *((unsigned __int8 *)v38 + 18);
      if ((v66 - 1) < 2) {
        goto LABEL_104;
      }
      if (v66 == 5 && *((_DWORD *)v38 + 2))
      {
        unint64_t v38 = *(swift::Demangle::__runtime::Node **)v38;
LABEL_104:
        uint64_t v67 = *(swift::Demangle::__runtime::Node **)v38;
      }
      else
      {
        uint64_t v67 = 0;
      }
      unsigned int v68 = a4 + 1;
      if (*(_DWORD *)a6) {
        return this;
      }
      swift::Demangle::__runtime::RemanglerBuffer::operator<<((char **)(v13 + 12728), *a3);
      *a3 = 95;
      int v69 = *((unsigned __int8 *)v12 + 18);
      if (v69 == 2) {
        goto LABEL_111;
      }
      if (v69 == 5 && *((_DWORD *)v12 + 2) >= 2u)
      {
        uint64_t v12 = *(swift::Demangle::__runtime::Node **)v12;
LABEL_111:
        unint64_t v70 = (swift::Demangle::__runtime::Node **)*((void *)v12 + 1);
      }
      else
      {
        unint64_t v70 = 0;
      }
LABEL_91:
      if (*(_DWORD *)a6) {
        return this;
      }
      goto LABEL_26;
    case 0x18:
    case 0x3D:
    case 0xB4:
    case 0xDB:
    case 0xEA:
      if (v9 == 234) {
        LOBYTE(a5) = 1;
      }
      int v22 = *((unsigned __int8 *)a2 + 18);
      if ((v22 - 1) < 2) {
        goto LABEL_22;
      }
      if (v22 == 5 && *((_DWORD *)a2 + 2))
      {
        uint64_t v12 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_22:
        int v23 = *(swift::Demangle::__runtime::Node **)v12;
      }
      else
      {
        int v23 = 0;
      }
      if (*(_DWORD *)a6) {
        return this;
      }
LABEL_38:
      char v27 = *a3;
      unsigned int v28 = *(_DWORD *)(v13 + 12736);
      size_t v29 = *(unsigned int *)(v13 + 12740);
      unint64_t v30 = *(char **)(v13 + 12728);
      if (v28 < v29) {
        goto LABEL_74;
      }
      size_t v31 = *(void **)(v13 + 12744);
      unint64_t v32 = (char *)v31[1];
      if (&v30[v29] == v32)
      {
        unint64_t v48 = (unint64_t)&v30[v29 + 1];
        unint64_t v33 = v31[2];
        if (v48 <= v33)
        {
          v31[1] = v48;
          LODWORD(v49) = 1;
          goto LABEL_73;
        }
      }
      else
      {
        unint64_t v33 = v31[2];
      }
      if ((2 * v29) <= 4) {
        uint64_t v49 = 4;
      }
      else {
        uint64_t v49 = (2 * v29);
      }
      size_t v50 = v49 + v29;
      if (!v32 || (unint64_t)&v32[v50] > v33)
      {
        unint64_t v51 = 2 * v31[4];
        if (v51 <= v50 + 1) {
          unint64_t v51 = v50 + 1;
        }
        v31[4] = v51;
        unint64_t v52 = v51 + 8;
        this = (unsigned int *)malloc_type_malloc(v51 + 8, 0xD0263BC5uLL);
        unint64_t v53 = (char *)this + v52;
        *(void *)this = v31[3];
        unint64_t v32 = (char *)(this + 2);
        v31[2] = v53;
        v31[3] = this;
      }
      v31[1] = &v32[v50];
      if (v29) {
        this = (unsigned int *)memcpy(v32, *(const void **)(v13 + 12728), v29);
      }
      *(void *)(v13 + 12728) = v32;
      LODWORD(v29) = *(_DWORD *)(v13 + 12740);
      unint64_t v30 = v32;
      unsigned int v28 = *(_DWORD *)(v13 + 12736);
LABEL_73:
      *(_DWORD *)(v13 + 12740) = v29 + v49;
LABEL_74:
      int v8 = 0;
      int v7 = 0;
      int v14 = 0;
      *(_DWORD *)(v13 + 12736) = v28 + 1;
      v30[v28] = v27;
      *a3 = 95;
      goto LABEL_75;
    case 0x47:
      int v39 = *((unsigned __int8 *)a2 + 18);
      if (v39 == 2) {
        goto LABEL_57;
      }
      if (v39 == 5 && *((_DWORD *)a2 + 2) >= 2u)
      {
        uint64_t v12 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_57:
        unint64_t v40 = (swift::Demangle::__runtime::Node *)*((void *)v12 + 1);
      }
      else
      {
        unint64_t v40 = 0;
      }
      goto LABEL_91;
    case 0x53:
      char v41 = *a3;
      unsigned int v42 = this[3184];
      size_t v43 = this[3185];
      int v44 = (char *)*((void *)this + 1591);
      if (v42 < v43) {
        goto LABEL_163;
      }
      unint64_t v45 = (void *)*((void *)this + 1593);
      unsigned int v46 = (char *)v45[1];
      if (&v44[v43] == v46)
      {
        unint64_t v83 = (unint64_t)&v44[v43 + 1];
        unint64_t v47 = v45[2];
        if (v83 <= v47)
        {
          v45[1] = v83;
          LODWORD(v84) = 1;
          goto LABEL_162;
        }
      }
      else
      {
        unint64_t v47 = v45[2];
      }
      char v97 = *a3;
      if ((2 * v43) <= 4) {
        uint64_t v84 = 4;
      }
      else {
        uint64_t v84 = (2 * v43);
      }
      size_t v85 = v84 + v43;
      if (v46) {
        BOOL v86 = (unint64_t)&v46[v84 + v43] > v47;
      }
      else {
        BOOL v86 = 1;
      }
      int v44 = (char *)v45[1];
      if (v86)
      {
        unint64_t v87 = 2 * v45[4];
        if (v87 <= v85 + 1) {
          unint64_t v87 = v85 + 1;
        }
        v45[4] = v87;
        unint64_t v88 = v87 + 8;
        this = (unsigned int *)malloc_type_malloc(v87 + 8, 0xD0263BC5uLL);
        size_t v89 = (char *)this + v88;
        *(void *)this = v45[3];
        int v44 = (char *)(this + 2);
        v45[2] = v89;
        v45[3] = this;
      }
      v45[1] = &v44[v85];
      if (v43) {
        this = (unsigned int *)memcpy(v44, *(const void **)(v13 + 12728), v43);
      }
      *(void *)(v13 + 12728) = v44;
      LODWORD(v43) = *(_DWORD *)(v13 + 12740);
      unsigned int v42 = *(_DWORD *)(v13 + 12736);
      char v41 = v97;
LABEL_162:
      *(_DWORD *)(v13 + 12740) = v43 + v84;
LABEL_163:
      *(_DWORD *)(v13 + 12736) = v42 + 1;
      v44[v42] = v41;
      *a3 = 95;
      int v90 = *((unsigned __int8 *)v12 + 18);
      if (v90 == 2) {
        goto LABEL_167;
      }
      if (v90 == 5 && *((_DWORD *)v12 + 2) >= 2u)
      {
        uint64_t v12 = *(swift::Demangle::__runtime::Node **)v12;
LABEL_167:
        uint64_t v91 = *((void *)v12 + 1);
      }
      else
      {
        uint64_t v91 = 0;
      }
      int v92 = *(unsigned __int8 *)(v91 + 18);
      unint64_t v93 = (swift::Demangle::__runtime::Node **)v91;
      if ((v92 - 1) < 2) {
        goto LABEL_173;
      }
      if (v92 == 5)
      {
        uint64_t v94 = *(swift::Demangle::__runtime::Node **)v91;
        unint64_t v93 = *(swift::Demangle::__runtime::Node ***)v91;
LABEL_177:
        size_t v95 = (swift::Demangle::__runtime::Node **)((char *)v94 + 8 * *(unsigned int *)(v91 + 8));
        goto LABEL_181;
      }
      unint64_t v93 = 0;
LABEL_173:
      switch(v92)
      {
        case 1:
          size_t v95 = (swift::Demangle::__runtime::Node **)(v91 + 8);
          break;
        case 2:
          size_t v95 = (swift::Demangle::__runtime::Node **)(v91 + 16);
          break;
        case 5:
          uint64_t v94 = *(swift::Demangle::__runtime::Node **)v91;
          goto LABEL_177;
        default:
          size_t v95 = 0;
          break;
      }
LABEL_181:
      if (v93 == v95)
      {
LABEL_26:
        int v8 = 0;
        int v7 = 0;
        int v14 = 0;
LABEL_75:
        *(_DWORD *)a6 = v8;
        *(void *)(a6 + 8) = v7;
        *(_DWORD *)(a6 + 16) = v14;
      }
      else
      {
        while (1)
        {
          if (*(_DWORD *)a6) {
            break;
          }
          int v8 = 0;
          int v7 = 0;
          int v14 = 0;
          if (++v93 == v95) {
            goto LABEL_75;
          }
        }
      }
      return this;
    default:
      int v14 = 0;
      goto LABEL_75;
  }
}

uint64_t anonymous namespace'::Remangler::mangleAnyGenericType@<X0>(uint64_t a1@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, const void *a3@<X2>, size_t a4@<X3>, int a5@<W4>, uint64_t a6@<X8>)
{
  long long v21 = 0uLL;
  LOBYTE(v22) = 0;
  if (result) {
    goto LABEL_23;
  }
  int v13 = *((unsigned __int8 *)a2 + 18);
  int v14 = a2;
  if ((v13 - 1) >= 2)
  {
    if (v13 == 5)
    {
      int v15 = *a2;
      int v14 = (swift::Demangle::__runtime::Node **)*a2;
      goto LABEL_10;
    }
    int v14 = 0;
  }
  if (v13 == 1)
  {
    unint64_t v16 = a2 + 1;
    if (v14 != v16) {
      goto LABEL_17;
    }
    goto LABEL_20;
  }
  if (v13 == 2)
  {
    unint64_t v16 = a2 + 2;
    if (v14 != v16) {
      goto LABEL_17;
    }
LABEL_20:
    *(_DWORD *)a6 = 0;
    *(void *)(a6 + 8) = 0;
    *(_DWORD *)(a6 + 16) = 0;
    uint64_t result = (uint64_t)swift::Demangle::__runtime::CharVector::append((char **)(a1 + 12728), a3, a4, *(void **)(a1 + 12744));
    unint64_t v18 = *(void *)(a1 + 12680);
    if (v18 > 0xF)
    {
      int v20 = *(_DWORD *)(a1 + 12712) + 16;
      long long v23 = v21;
      uint64_t v24 = v22;
      int v25 = v20;
      uint64_t result = (uint64_t)std::__hash_table<std::__hash_value_type<swift::Demangle::__runtime::SubstitutionEntry,unsigned int>,std::__unordered_map_hasher<swift::Demangle::__runtime::SubstitutionEntry,std::__hash_value_type<swift::Demangle::__runtime::SubstitutionEntry,unsigned int>,swift::Demangle::__runtime::SubstitutionEntry::Hasher,std::equal_to<swift::Demangle::__runtime::SubstitutionEntry>,true>,std::__unordered_map_equal<swift::Demangle::__runtime::SubstitutionEntry,std::__hash_value_type<swift::Demangle::__runtime::SubstitutionEntry,unsigned int>,std::equal_to<swift::Demangle::__runtime::SubstitutionEntry>,swift::Demangle::__runtime::SubstitutionEntry::Hasher,true>,std::allocator<std::__hash_value_type<swift::Demangle::__runtime::SubstitutionEntry,unsigned int>>>::__emplace_unique_key_args<swift::Demangle::__runtime::SubstitutionEntry,std::pair<swift::Demangle::__runtime::SubstitutionEntry const,unsigned int>>(a1 + 12688, (uint64_t)&v23, &v23);
    }
    else
    {
      *(void *)(a1 + 12680) = v18 + 1;
      uint64_t v19 = a1 + 24 * v18 + 12296;
      *(_OWORD *)uint64_t v19 = v21;
      *(unsigned char *)(v19 + 16) = v22;
    }
LABEL_23:
    *(_DWORD *)a6 = 0;
    *(void *)(a6 + 8) = 0;
    *(_DWORD *)(a6 + 16) = 0;
    return result;
  }
  if (v13 != 5)
  {
    unint64_t v16 = 0;
    if (!v14) {
      goto LABEL_20;
    }
    goto LABEL_17;
  }
  int v15 = *a2;
LABEL_10:
  unint64_t v16 = (swift::Demangle::__runtime::Node **)((char *)v15 + 8 * *((unsigned int *)a2 + 2));
  if (v14 == v16) {
    goto LABEL_20;
  }
LABEL_17:
  unsigned int v17 = a5 + 1;
  while (1)
  {
    if (*(_DWORD *)a6) {
      return result;
    }
    if (++v14 == v16) {
      goto LABEL_20;
    }
  }
}

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleSingleChildNode@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = *((unsigned __int8 *)a2 + 18);
  if (v4 == 1) {
  if (v4 == 5 && *((_DWORD *)a2 + 2) == 1)
  }
  {
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  *(_DWORD *)a4 = 10;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = 321;
  return this;
}

uint64_t __swift::__runtime::llvm::StringRef::consume_front(const void **a1, const void *a2, size_t a3)
{
  size_t v3 = (size_t)a1[1];
  if (v3 < a3) {
    return 0;
  }
  int v6 = (char *)*a1;
  if (a3)
  {
    if (memcmp(*a1, a2, a3)) {
      return 0;
    }
  }
  if (v3 >= a3) {
    size_t v8 = a3;
  }
  else {
    size_t v8 = v3;
  }
  *a1 = &v6[v8];
  a1[1] = (const void *)(v3 - v8);
  return 1;
}

uint64_t anonymous namespace'::Remangler::mangleConstrainedType@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  char v5 = a2;
  int v6 = this;
  if (*((_WORD *)a2 + 8) != 232) {
    goto LABEL_8;
  }
  int v8 = *((unsigned __int8 *)a2 + 18);
  if ((v8 - 1) >= 2)
  {
    if (v8 != 5 || !*((_DWORD *)a2 + 2))
    {
      char v5 = 0;
      goto LABEL_8;
    }
    char v5 = *(swift::Demangle::__runtime::Node **)a2;
  }
  char v5 = *(swift::Demangle::__runtime::Node **)v5;
LABEL_8:
  long long v42 = 0uLL;
  LOBYTE(v43) = 0;
  if (result)
  {
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    *(_DWORD *)(a4 + 24) = -1;
    *(void *)(a4 + 32) = 0;
    return result;
  }
  int v38 = a3;
  uint64_t v39 = a4;
  unsigned int v10 = 0;
  unsigned int v11 = 0;
  uint64_t v12 = 0;
  while (1)
  {
    int v14 = *((unsigned __int16 *)v5 + 8);
    if (v14 != 45) {
      break;
    }
    int v15 = *((unsigned __int8 *)v5 + 18);
    unint64_t v16 = v5;
    if (v15 != 2)
    {
      if (v15 != 5 || *((_DWORD *)v5 + 2) < 2u)
      {
        uint64_t v17 = 0;
        if (v11 < v10) {
          goto LABEL_40;
        }
LABEL_22:
        unint64_t v18 = *(void **)v6;
        uint64_t v19 = &v12[8 * v10];
        int v20 = *(char **)(*(void *)v6 + 8);
        if (v19 != v20)
        {
          unint64_t v21 = v18[2];
          goto LABEL_25;
        }
        uint64_t v22 = v19 + 8;
        unint64_t v21 = v18[2];
        if ((unint64_t)v22 <= v21)
        {
          v18[1] = v22;
          LODWORD(v23) = 1;
        }
        else
        {
LABEL_25:
          __src = v12;
          if (2 * v10 <= 4) {
            uint64_t v23 = 4;
          }
          else {
            uint64_t v23 = 2 * v10;
          }
          uint64_t v24 = 8 * (v23 + v10);
          int v25 = (char *)((unint64_t)(v20 + 7) & 0xFFFFFFFFFFFFFFF8);
          v18[1] = v25;
          if (v25) {
            BOOL v26 = (unint64_t)&v25[v24] > v21;
          }
          else {
            BOOL v26 = 1;
          }
          if (v26)
          {
            unint64_t v27 = 2 * v18[4];
            if (v27 <= v24 + 8) {
              unint64_t v27 = v24 + 8;
            }
            v18[4] = v27;
            unsigned int v40 = v11;
            unsigned int v28 = v6;
            unint64_t v29 = v27 + 8;
            uint64_t result = (uint64_t)malloc_type_malloc(v27 + 8, 0xD0263BC5uLL);
            *(void *)uint64_t result = v18[3];
            int v25 = (char *)((result + 15) & 0xFFFFFFFFFFFFFFF8);
            uint64_t v30 = result + v29;
            int v6 = v28;
            unsigned int v11 = v40;
            v18[2] = v30;
            v18[3] = result;
          }
          v18[1] = &v25[v24];
          if (v10) {
            uint64_t result = (uint64_t)memcpy(v25, __src, 8 * v10);
          }
          uint64_t v12 = v25;
        }
        v10 += v23;
        int v15 = *((unsigned __int8 *)v5 + 18);
        goto LABEL_40;
      }
      unint64_t v16 = *(swift::Demangle::__runtime::Node **)v5;
    }
    uint64_t v17 = *((void *)v16 + 1);
    if (v11 >= v10) {
      goto LABEL_22;
    }
LABEL_40:
    *(void *)&v12[8 * v11] = v17;
    if ((v15 - 1) >= 2)
    {
      if (v15 != 5 || !*((_DWORD *)v5 + 2))
      {
        int v13 = 0;
        goto LABEL_46;
      }
      char v5 = *(swift::Demangle::__runtime::Node **)v5;
    }
    int v13 = *(swift::Demangle::__runtime::Node **)v5;
LABEL_46:
    int v31 = *((unsigned __int8 *)v13 + 18);
    if ((v31 - 1) < 2)
    {
LABEL_13:
      char v5 = *(swift::Demangle::__runtime::Node **)v13;
      ++v11;
    }
    else
    {
      if (v31 == 5 && *((_DWORD *)v13 + 2))
      {
        int v13 = *(swift::Demangle::__runtime::Node **)v13;
        goto LABEL_13;
      }
      char v5 = 0;
      ++v11;
    }
  }
  if (v14 != 38 && v14 != 85)
  {
    if (!v44)
    {
      if (!v11)
      {
        *(_DWORD *)uint64_t v39 = 0;
        *(void *)(v39 + 8) = 0;
        *(_DWORD *)(v39 + 16) = 0;
        *(_DWORD *)(v39 + 24) = -1;
        *(void *)(v39 + 32) = 0;
        return result;
      }
      char v5 = 0;
LABEL_53:
      if (!v44)
      {
        if (v11 == 1) {
          unint64_t v32 = (const char *)&unk_BFEA3;
        }
        else {
          unint64_t v32 = "_";
        }
        uint64_t result = (uint64_t)swift::Demangle::__runtime::CharVector::append((char **)v6 + 1591, v32, v11 != 1, *((void **)v6 + 1593));
        if (v11 < 2)
        {
LABEL_61:
          unint64_t v35 = *((void *)v6 + 1585);
          if (v35 > 0xF)
          {
            int v37 = *((_DWORD *)v6 + 3178) + 16;
            long long v44 = v42;
            uint64_t v45 = v43;
            int v46 = v37;
            uint64_t result = (uint64_t)std::__hash_table<std::__hash_value_type<swift::Demangle::__runtime::SubstitutionEntry,unsigned int>,std::__unordered_map_hasher<swift::Demangle::__runtime::SubstitutionEntry,std::__hash_value_type<swift::Demangle::__runtime::SubstitutionEntry,unsigned int>,swift::Demangle::__runtime::SubstitutionEntry::Hasher,std::equal_to<swift::Demangle::__runtime::SubstitutionEntry>,true>,std::__unordered_map_equal<swift::Demangle::__runtime::SubstitutionEntry,std::__hash_value_type<swift::Demangle::__runtime::SubstitutionEntry,unsigned int>,std::equal_to<swift::Demangle::__runtime::SubstitutionEntry>,swift::Demangle::__runtime::SubstitutionEntry::Hasher,true>,std::allocator<std::__hash_value_type<swift::Demangle::__runtime::SubstitutionEntry,unsigned int>>>::__emplace_unique_key_args<swift::Demangle::__runtime::SubstitutionEntry,std::pair<swift::Demangle::__runtime::SubstitutionEntry const,unsigned int>>((uint64_t)v6 + 12688, (uint64_t)&v44, &v44);
          }
          else
          {
            *((void *)v6 + 1585) = v35 + 1;
            uint64_t v36 = (uint64_t)v6 + 24 * v35 + 12296;
            *(_OWORD *)uint64_t v36 = v42;
            *(unsigned char *)(v36 + 16) = v43;
          }
          goto LABEL_68;
        }
        unsigned int v33 = v11 - 2;
        unsigned int v34 = 2;
        while (1)
        {
          if (v44) {
            break;
          }
          uint64_t result = (uint64_t)swift::Demangle::__runtime::CharVector::append((char **)v6 + 1591, &unk_BFEA3, 0, *((void **)v6 + 1593));
          ++v34;
          --v33;
          if (v34 > v11) {
            goto LABEL_61;
          }
        }
      }
    }
    *(_OWORD *)uint64_t v39 = v44;
    *(void *)(v39 + 16) = v45;
    *(_DWORD *)(v39 + 24) = 0;
    *(void *)(v39 + 32) = 0;
    return result;
  }
  if (v11) {
    goto LABEL_53;
  }
LABEL_68:
  *(_DWORD *)uint64_t v39 = 0;
  *(void *)(v39 + 8) = 0;
  *(_DWORD *)(v39 + 16) = 0;
  *(_DWORD *)(v39 + 24) = v11;
  *(void *)(v39 + 32) = v5;
  return result;
}

char *anonymous namespace'::Remangler::mangleDependentGenericParamIndex(char *this, uint64_t **a2, const char *__s, char a4)
{
  uint64_t v4 = (uint64_t)this;
  if (*((_WORD *)a2 + 8) == 85)
  {
    unsigned int v5 = *((_DWORD *)this + 3184);
    size_t v6 = *((unsigned int *)this + 3185);
    int v7 = (unsigned char *)*((void *)this + 1591);
    if (v5 < v6)
    {
LABEL_37:
      *(_DWORD *)(v4 + 12736) = v5 + 1;
      v7[v5] = 115;
      return this;
    }
    int v8 = (void *)*((void *)this + 1593);
    int v9 = (unsigned char *)v8[1];
    if (&v7[v6] == v9)
    {
      unint64_t v27 = (unint64_t)&v7[v6 + 1];
      unint64_t v10 = v8[2];
      if (v27 <= v10)
      {
        v8[1] = v27;
        LODWORD(v28) = 1;
LABEL_36:
        *(_DWORD *)(v4 + 12740) = v6 + v28;
        goto LABEL_37;
      }
    }
    else
    {
      unint64_t v10 = v8[2];
    }
    if ((2 * v6) <= 4) {
      uint64_t v28 = 4;
    }
    else {
      uint64_t v28 = (2 * v6);
    }
    size_t v29 = v28 + v6;
    if (v9) {
      BOOL v30 = (unint64_t)&v9[v28 + v6] > v10;
    }
    else {
      BOOL v30 = 1;
    }
    int v7 = (unsigned char *)v8[1];
    if (v30)
    {
      unint64_t v31 = 2 * v8[4];
      if (v31 <= v29 + 1) {
        unint64_t v31 = v29 + 1;
      }
      v8[4] = v31;
      unint64_t v32 = v31 + 8;
      this = (char *)malloc_type_malloc(v31 + 8, 0xD0263BC5uLL);
      unsigned int v33 = &this[v32];
      *(void *)this = v8[3];
      int v7 = this + 8;
      v8[2] = v33;
      v8[3] = this;
    }
    v8[1] = &v7[v29];
    if (v6) {
      this = (char *)memcpy(v7, *(const void **)(v4 + 12728), v6);
    }
    *(void *)(v4 + 12728) = v7;
    LODWORD(v6) = *(_DWORD *)(v4 + 12740);
    unsigned int v5 = *(_DWORD *)(v4 + 12736);
    goto LABEL_36;
  }
  int v13 = *((unsigned __int8 *)a2 + 18);
  if ((v13 - 1) >= 2)
  {
    if (v13 == 5) {
      int v14 = (swift::Demangle::__runtime::Node *)*a2;
    }
    else {
      int v14 = (swift::Demangle::__runtime::Node *)a2;
    }
    a2 = (uint64_t **)*a2;
  }
  else
  {
    int v14 = (swift::Demangle::__runtime::Node *)a2;
  }
  uint64_t v15 = **a2;
  uint64_t v16 = **((void **)v14 + 1);
  if (!v15)
  {
    uint64_t v19 = (char **)(this + 12728);
    if (v16)
    {
      if (__s) {
        size_t v20 = strlen(__s);
      }
      else {
        size_t v20 = 0;
      }
      swift::Demangle::__runtime::CharVector::append(v19, __s, v20, *(void **)(v4 + 12744));
      uint64_t v48 = v16 - 1;
      unint64_t v47 = (char *)v4;
      goto LABEL_58;
    }
    unsigned int v34 = *((_DWORD *)this + 3184);
    size_t v35 = *((unsigned int *)this + 3185);
    uint64_t v36 = (char *)*((void *)this + 1591);
    if (v34 < v35)
    {
LABEL_76:
      *(_DWORD *)(v4 + 12736) = v34 + 1;
      v36[v34] = a4;
      return this;
    }
    int v37 = (void *)*((void *)this + 1593);
    int v38 = (char *)v37[1];
    if (&v36[v35] == v38)
    {
      unint64_t v49 = (unint64_t)&v36[v35 + 1];
      unint64_t v39 = v37[2];
      if (v49 <= v39)
      {
        v37[1] = v49;
        LODWORD(v50) = 1;
LABEL_75:
        *(_DWORD *)(v4 + 12740) = v35 + v50;
        goto LABEL_76;
      }
    }
    else
    {
      unint64_t v39 = v37[2];
    }
    if ((2 * v35) <= 4) {
      uint64_t v50 = 4;
    }
    else {
      uint64_t v50 = (2 * v35);
    }
    size_t v51 = v50 + v35;
    if (!v38 || (unint64_t)&v38[v51] > v39)
    {
      unint64_t v52 = 2 * v37[4];
      if (v52 <= v51 + 1) {
        unint64_t v52 = v51 + 1;
      }
      v37[4] = v52;
      unint64_t v53 = v52 + 8;
      this = (char *)malloc_type_malloc(v52 + 8, 0xD0263BC5uLL);
      int v54 = &this[v53];
      *(void *)this = v37[3];
      int v38 = this + 8;
      v37[2] = v54;
      v37[3] = this;
    }
    v37[1] = &v38[v51];
    if (v35) {
      this = (char *)memcpy(v38, *v19, v35);
    }
    *(void *)(v4 + 12728) = v38;
    LODWORD(v35) = *(_DWORD *)(v4 + 12740);
    uint64_t v36 = v38;
    unsigned int v34 = *(_DWORD *)(v4 + 12736);
    goto LABEL_75;
  }
  uint64_t v17 = (char **)(this + 12728);
  if (__s) {
    size_t v18 = strlen(__s);
  }
  else {
    size_t v18 = 0;
  }
  swift::Demangle::__runtime::CharVector::append(v17, __s, v18, *(void **)(v4 + 12744));
  unsigned int v21 = *(_DWORD *)(v4 + 12736);
  size_t v22 = *(unsigned int *)(v4 + 12740);
  uint64_t v23 = *(char **)(v4 + 12728);
  if (v21 < v22) {
    goto LABEL_54;
  }
  uint64_t v24 = *(void **)(v4 + 12744);
  int v25 = (char *)v24[1];
  if (&v23[v22] != v25)
  {
    unint64_t v26 = v24[2];
LABEL_42:
    if ((2 * v22) <= 4) {
      uint64_t v41 = 4;
    }
    else {
      uint64_t v41 = (2 * v22);
    }
    size_t v42 = v41 + v22;
    if (!v25 || (unint64_t)&v25[v42] > v26)
    {
      unint64_t v43 = 2 * v24[4];
      if (v43 <= v42 + 1) {
        unint64_t v43 = v42 + 1;
      }
      v24[4] = v43;
      unint64_t v44 = v43 + 8;
      uint64_t v45 = malloc_type_malloc(v43 + 8, 0xD0263BC5uLL);
      int v46 = (char *)v45 + v44;
      void *v45 = v24[3];
      int v25 = (char *)(v45 + 1);
      void v24[2] = v46;
      v24[3] = v45;
    }
    v24[1] = &v25[v42];
    if (v22) {
      memcpy(v25, *v17, v22);
    }
    *(void *)(v4 + 12728) = v25;
    LODWORD(v22) = *(_DWORD *)(v4 + 12740);
    uint64_t v23 = v25;
    unsigned int v21 = *(_DWORD *)(v4 + 12736);
    goto LABEL_53;
  }
  unint64_t v40 = (unint64_t)&v23[v22 + 1];
  unint64_t v26 = v24[2];
  if (v40 > v26) {
    goto LABEL_42;
  }
  v24[1] = v40;
  LODWORD(v41) = 1;
LABEL_53:
  *(_DWORD *)(v4 + 12740) = v22 + v41;
LABEL_54:
  *(_DWORD *)(v4 + 12736) = v21 + 1;
  v23[v21] = 100;
  unint64_t v47 = (char *)v4;
  uint64_t v48 = v16;
LABEL_58:
}

uint64_t *anonymous namespace'::Remangler::mangleAbstractStorage@<X0>(uint64_t *result@<X0>, uint64_t a2@<X1>, const void *a3@<X2>, size_t a4@<X3>, int a5@<W4>, uint64_t a6@<X8>)
{
  uint64_t v8 = a2;
  int v9 = result;
  int v11 = *(unsigned __int8 *)(a2 + 18);
  uint64_t v12 = (swift::Demangle::__runtime::Node **)a2;
  if ((v11 - 1) >= 2)
  {
    if (v11 == 5)
    {
      int v13 = *(swift::Demangle::__runtime::Node **)a2;
      uint64_t v12 = *(swift::Demangle::__runtime::Node ***)a2;
      goto LABEL_9;
    }
    uint64_t v12 = 0;
  }
  if (v11 == 1)
  {
    int v14 = (swift::Demangle::__runtime::Node **)(a2 + 8);
    if (v12 != (swift::Demangle::__runtime::Node **)(a2 + 8)) {
      goto LABEL_16;
    }
    goto LABEL_19;
  }
  if (v11 == 2)
  {
    int v14 = (swift::Demangle::__runtime::Node **)(a2 + 16);
    if (v12 != (swift::Demangle::__runtime::Node **)(a2 + 16)) {
      goto LABEL_16;
    }
LABEL_19:
    *(_DWORD *)a6 = 0;
    *(void *)(a6 + 8) = 0;
    *(_DWORD *)(a6 + 16) = 0;
    int v16 = *(unsigned __int16 *)(v8 + 16);
    if (v16 == 220)
    {
      uint64_t v17 = "i";
    }
    else
    {
      if (v16 != 254)
      {
        int v19 = 712;
        int v18 = 6;
        goto LABEL_25;
      }
      uint64_t v17 = "v";
    }
    swift::Demangle::__runtime::CharVector::append((char **)v9 + 1591, v17, 1uLL, (void *)v9[1593]);
    uint64_t result = (uint64_t *)swift::Demangle::__runtime::CharVector::append((char **)v9 + 1591, a3, a4, (void *)v9[1593]);
    int v18 = 0;
    uint64_t v8 = 0;
    int v19 = 0;
LABEL_25:
    *(_DWORD *)a6 = v18;
    *(void *)(a6 + 8) = v8;
    *(_DWORD *)(a6 + 16) = v19;
    return result;
  }
  if (v11 != 5)
  {
    int v14 = 0;
    if (!v12) {
      goto LABEL_19;
    }
    goto LABEL_16;
  }
  int v13 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_9:
  int v14 = (swift::Demangle::__runtime::Node **)((char *)v13 + 8 * *(unsigned int *)(a2 + 8));
  if (v12 == v14) {
    goto LABEL_19;
  }
LABEL_16:
  unsigned int v15 = a5 + 1;
  while (1)
  {
    if (*(_DWORD *)a6) {
      return result;
    }
    if (++v12 == v14) {
      goto LABEL_19;
    }
  }
}

uint64_t *anonymous namespace'::Remangler::mangleGenericSpecializationNode@<X0>(uint64_t *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, const char *a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  size_t v6 = a2;
  uint64_t v7 = (uint64_t)this;
  BOOL v23 = 1;
  int v9 = *((unsigned __int8 *)a2 + 18);
  unint64_t v10 = a2;
  if ((v9 - 1) >= 2)
  {
    if (v9 == 5)
    {
      uint64_t v11 = *(void *)a2;
      unint64_t v10 = *(swift::Demangle::__runtime::Node **)a2;
      goto LABEL_9;
    }
    unint64_t v10 = 0;
  }
  switch(v9)
  {
    case 1:
      uint64_t v12 = (swift::Demangle::__runtime::Node *)((char *)a2 + 8);
      if (v10 == (swift::Demangle::__runtime::Node *)((char *)a2 + 8)) {
        goto LABEL_27;
      }
      break;
    case 2:
      uint64_t v12 = (swift::Demangle::__runtime::Node *)((char *)a2 + 16);
      if (v10 == (swift::Demangle::__runtime::Node *)((char *)a2 + 16)) {
        goto LABEL_27;
      }
      break;
    case 5:
      uint64_t v11 = *(void *)a2;
LABEL_9:
      uint64_t v12 = (swift::Demangle::__runtime::Node *)(v11 + 8 * *((unsigned int *)a2 + 2));
      if (v10 == v12)
      {
LABEL_27:
        int v16 = 1706;
        int v17 = 1;
        goto LABEL_28;
      }
      break;
    default:
      uint64_t v12 = 0;
      if (!v10) {
        goto LABEL_27;
      }
      break;
  }
  unsigned int v13 = a4 + 1;
  do
  {
    int v14 = *(swift::Demangle::__runtime::Node **)v10;
    if (*(_WORD *)(*(void *)v10 + 16) == 94)
    {
      int v15 = *((unsigned __int8 *)v14 + 18);
      if ((v15 - 1) >= 2)
      {
        if (v15 != 5 || !*((_DWORD *)v14 + 2))
        {
          *(_DWORD *)a5 = 0;
          *(void *)(a5 + 8) = 0;
          *(_DWORD *)(a5 + 16) = 0;
LABEL_20:
          goto LABEL_21;
        }
        int v14 = *(swift::Demangle::__runtime::Node **)v14;
      }
      if (*(_DWORD *)a5) {
        return this;
      }
      goto LABEL_20;
    }
LABEL_21:
    unint64_t v10 = (swift::Demangle::__runtime::Node *)((char *)v10 + 8);
  }
  while (v10 != v12);
  if (v23) {
    goto LABEL_27;
  }
  if (a3) {
    size_t v18 = strlen(a3);
  }
  else {
    size_t v18 = 0;
  }
  this = (uint64_t *)swift::Demangle::__runtime::CharVector::append((char **)(v7 + 12728), a3, v18, *(void **)(v7 + 12744));
  int v19 = *((unsigned __int8 *)v6 + 18);
  size_t v20 = (swift::Demangle::__runtime::Node **)v6;
  if ((v19 - 1) >= 2)
  {
    if (v19 == 5)
    {
      unsigned int v21 = *(swift::Demangle::__runtime::Node ***)v6;
      size_t v20 = *(swift::Demangle::__runtime::Node ***)v6;
LABEL_41:
      size_t v22 = &v21[*((unsigned int *)v6 + 2)];
      goto LABEL_46;
    }
    size_t v20 = 0;
  }
  switch(v19)
  {
    case 1:
      size_t v22 = (swift::Demangle::__runtime::Node **)((char *)v6 + 8);
      goto LABEL_46;
    case 2:
      size_t v22 = (swift::Demangle::__runtime::Node **)((char *)v6 + 16);
      goto LABEL_46;
    case 5:
      unsigned int v21 = *(swift::Demangle::__runtime::Node ***)v6;
      goto LABEL_41;
  }
  size_t v22 = 0;
LABEL_46:
  while (v20 != v22)
  {
    if (*((_WORD *)*v20 + 8) != 94)
    {
      if (*(_DWORD *)a5) {
        return this;
      }
    }
    ++v20;
  }
  int v17 = 0;
  size_t v6 = 0;
  int v16 = 0;
LABEL_28:
  *(_DWORD *)a5 = v17;
  *(void *)(a5 + 8) = v6;
  *(_DWORD *)(a5 + 16) = v16;
  return this;
}

void anonymous namespace'::Remangler::mangleIdentifierImpl(_anonymous_namespace_::Remangler *this, swift::Demangle::__runtime::Node *a2, int a3)
{
  memset(&v11, 0, 17);
  {
    if (a3)
    {
      swift::Mangle::__runtime::translateOperator(*(char **)a2, *((void *)a2 + 1), &__p);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = __p.__r_.__value_.__l.__size_;
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
    else
    {
    }
    unint64_t v8 = *((void *)this + 1585);
    if (v8 > 0xF)
    {
      int v10 = *((_DWORD *)this + 3178) + 16;
      std::string __p = v11;
      int v13 = v10;
      std::__hash_table<std::__hash_value_type<swift::Demangle::__runtime::SubstitutionEntry,unsigned int>,std::__unordered_map_hasher<swift::Demangle::__runtime::SubstitutionEntry,std::__hash_value_type<swift::Demangle::__runtime::SubstitutionEntry,unsigned int>,swift::Demangle::__runtime::SubstitutionEntry::Hasher,std::equal_to<swift::Demangle::__runtime::SubstitutionEntry>,true>,std::__unordered_map_equal<swift::Demangle::__runtime::SubstitutionEntry,std::__hash_value_type<swift::Demangle::__runtime::SubstitutionEntry,unsigned int>,std::equal_to<swift::Demangle::__runtime::SubstitutionEntry>,swift::Demangle::__runtime::SubstitutionEntry::Hasher,true>,std::allocator<std::__hash_value_type<swift::Demangle::__runtime::SubstitutionEntry,unsigned int>>>::__emplace_unique_key_args<swift::Demangle::__runtime::SubstitutionEntry,std::pair<swift::Demangle::__runtime::SubstitutionEntry const,unsigned int>>((uint64_t)this + 12688, (uint64_t)&__p, &__p);
    }
    else
    {
      *((void *)this + 1585) = v8 + 1;
      int v9 = (char *)this + 24 * v8 + 12296;
      *(_OWORD *)int v9 = *(_OWORD *)&v11.__r_.__value_.__l.__data_;
      v9[16] = v11.__r_.__value_.__s.__data_[16];
    }
  }
}

void swift::Mangle::__runtime::mangleIdentifier<anonymous namespace'::Remangler>(uint64_t a1, char *a2, uint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v4 = a2;
  uint64_t v5 = a1;
  unint64_t v6 = *(unsigned int *)(a1 + 12768);
  unint64_t v147 = v6;
  if (!*(unsigned char *)(a1 + 12752) || (v7 = swift::Mangle::__runtime::needsPunycodeEncoding(a2, a3), unint64_t v6 = v147, !v7))
  {
    unint64_t v17 = 0;
    v150 = (void *)(v5 + 12760);
    unint64_t v145 = (const void **)(v5 + 12728);
    unint64_t v146 = v4;
    uint64_t v142 = (void *)(v5 + 12776);
    unint64_t v18 = -1;
    uint64_t v140 = (16 * v6) | 8;
    while (1)
    {
      if (v17 >= v3)
      {
        int v21 = 0;
        if (v18 == -1) {
          goto LABEL_19;
        }
      }
      else
      {
        int v21 = v4[v17];
        if (v18 == -1) {
          goto LABEL_19;
        }
      }
      if (!v21
        || v21 == 95
        || (v21 - 65) <= 0x19 && v4[v17 - 1] - 91 <= 0xFFFFFFE5)
      {
        break;
      }
LABEL_28:
      if (++v17 > v3)
      {
        if (*(_DWORD *)(v5 + 12784))
        {
          unsigned int v40 = *(_DWORD *)(v5 + 12736);
          size_t v41 = *(unsigned int *)(v5 + 12740);
          size_t v42 = *(char **)(v5 + 12728);
          if (v40 >= v41)
          {
            unint64_t v43 = *(void **)(v5 + 12744);
            unint64_t v44 = (char *)v43[1];
            if (&v42[v41] != v44)
            {
              unint64_t v45 = v43[2];
              goto LABEL_74;
            }
            unint64_t v46 = (unint64_t)&v42[v41 + 1];
            unint64_t v45 = v43[2];
            if (v46 <= v45)
            {
              v43[1] = v46;
              LODWORD(v47) = 1;
            }
            else
            {
LABEL_74:
              if ((2 * v41) <= 4) {
                uint64_t v47 = 4;
              }
              else {
                uint64_t v47 = (2 * v41);
              }
              size_t v48 = v47 + v41;
              if (!v44 || (unint64_t)&v44[v48] > v45)
              {
                unint64_t v49 = 2 * v43[4];
                if (v49 <= v48 + 1) {
                  unint64_t v49 = v48 + 1;
                }
                v43[4] = v49;
                unint64_t v50 = v49 + 8;
                size_t v51 = malloc_type_malloc(v49 + 8, 0xD0263BC5uLL);
                *size_t v51 = v43[3];
                unint64_t v44 = (char *)(v51 + 1);
                unint64_t v52 = (char *)v51 + v50;
                uint64_t v4 = v146;
                v43[2] = v52;
                v43[3] = v51;
              }
              v43[1] = &v44[v48];
              if (v41) {
                memcpy(v44, *v145, v41);
              }
              *(void *)(v5 + 12728) = v44;
              LODWORD(v41) = *(_DWORD *)(v5 + 12740);
              size_t v42 = v44;
              unsigned int v40 = *(_DWORD *)(v5 + 12736);
            }
            *(_DWORD *)(v5 + 12740) = v41 + v47;
          }
          *(_DWORD *)(v5 + 12736) = v40 + 1;
          v42[v40] = 48;
        }
        __p.__r_.__value_.__r.__words[0] = v3;
        LODWORD(__p.__r_.__value_.__r.__words[1]) = -1;
        swift::Demangle::__runtime::Vector<swift::Mangle::__runtime::WordReplacement>::push_back((uint64_t)v142, (__n128 *)&__p, *(void **)v5);
        unint64_t v53 = v147;
        uint64_t v141 = *(unsigned int *)(v5 + 12784);
        if (!v141)
        {
LABEL_195:
          *(_DWORD *)(v5 + 12784) = 0;
          return;
        }
        unint64_t v54 = 0;
        unint64_t v55 = 0;
        while (2)
        {
          uint64_t v61 = *v142 + 16 * v54;
          unint64_t v62 = *(void *)v61 - v55;
          unint64_t v144 = v54;
          if (*(void *)v61 > v55)
          {
            uint64_t v148 = *v142 + 16 * v54;
            unint64_t v63 = v53;
            swift::Demangle::__runtime::CharVector::append((unsigned int *)v145, v62, *(swift::Demangle::__runtime::NodeFactory **)(v5 + 12744));
            unint64_t v53 = v63;
            uint64_t v61 = v148;
            char v64 = 1;
            while (1)
            {
              if (v53 < *(unsigned int *)(v5 + 12768))
              {
                unsigned int v68 = (void *)(*v150 + 16 * v53);
                if (v55 == *v68)
                {
                  *unsigned int v68 = *(unsigned int *)(v5 + 12736);
                  ++v53;
                }
              }
              LODWORD(v69) = v4[v55];
              if (v64)
              {
                unsigned int v66 = *(_DWORD *)(v5 + 12736);
                if ((v69 - 48) <= 9)
                {
                  size_t v70 = *(unsigned int *)(v5 + 12740);
                  unint64_t v71 = *(char **)(v5 + 12728);
                  if (v66 < v70)
                  {
                    LOBYTE(v69) = 88;
                    goto LABEL_99;
                  }
                  size_t v85 = *(void **)(v5 + 12744);
                  BOOL v86 = (char *)v85[1];
                  if (&v71[v70] != v86)
                  {
                    unint64_t v87 = v85[2];
                    goto LABEL_129;
                  }
                  unint64_t v88 = (unint64_t)&v71[v70 + 1];
                  unint64_t v87 = v85[2];
                  if (v88 <= v87)
                  {
                    v85[1] = v88;
                    LODWORD(v69) = 1;
                    BOOL v86 = v71;
                  }
                  else
                  {
LABEL_129:
                    unint64_t v89 = v53;
                    if ((2 * v70) <= 4) {
                      uint64_t v69 = 4;
                    }
                    else {
                      uint64_t v69 = (2 * v70);
                    }
                    size_t v90 = v69 + v70;
                    if (!v86 || (unint64_t)&v86[v90] > v87)
                    {
                      unint64_t v91 = 2 * v85[4];
                      if (v91 <= v90 + 1) {
                        unint64_t v91 = v90 + 1;
                      }
                      v85[4] = v91;
                      unint64_t v92 = v91 + 8;
                      unint64_t v93 = malloc_type_malloc(v91 + 8, 0xD0263BC5uLL);
                      void *v93 = v85[3];
                      BOOL v86 = (char *)(v93 + 1);
                      v85[2] = (char *)v93 + v92;
                      v85[3] = v93;
                    }
                    v85[1] = &v86[v90];
                    if (v70) {
                      memcpy(v86, *v145, v70);
                    }
                    uint64_t v5 = a1;
                    *(void *)(a1 + 12728) = v86;
                    LODWORD(v70) = *(_DWORD *)(a1 + 12740);
                    unsigned int v66 = *(_DWORD *)(a1 + 12736);
                    unint64_t v53 = v89;
                  }
                  int v67 = v70 + v69;
                  LOBYTE(v69) = 88;
                  unint64_t v71 = v86;
                  uint64_t v4 = v146;
                  goto LABEL_98;
                }
              }
              else
              {
                unsigned int v66 = *(_DWORD *)(v5 + 12736);
              }
              size_t v65 = *(unsigned int *)(v5 + 12740);
              unint64_t v71 = *(char **)(v5 + 12728);
              if (v66 < v65) {
                goto LABEL_99;
              }
              uint64_t v72 = *(void **)(v5 + 12744);
              size_t v73 = (char *)v72[1];
              if (&v71[v65] != v73) {
                break;
              }
              unint64_t v75 = (unint64_t)&v71[v65 + 1];
              unint64_t v74 = v72[2];
              if (v75 > v74) {
                goto LABEL_112;
              }
              v72[1] = v75;
              LODWORD(v78) = 1;
              uint64_t v5 = a1;
LABEL_97:
              int v67 = v65 + v78;
LABEL_98:
              *(_DWORD *)(v5 + 12740) = v67;
LABEL_99:
              char v64 = 0;
              *(_DWORD *)(v5 + 12736) = v66 + 1;
              v71[v66] = v69;
              if (++v55 >= *(void *)v61) {
                goto LABEL_142;
              }
            }
            unint64_t v74 = v72[2];
LABEL_112:
            unint64_t v76 = v53;
            unint64_t v77 = v3;
            if ((2 * v65) <= 4) {
              uint64_t v78 = 4;
            }
            else {
              uint64_t v78 = (2 * v65);
            }
            size_t v79 = v78 + v65;
            if (v73) {
              BOOL v80 = (unint64_t)&v73[v78 + v65] > v74;
            }
            else {
              BOOL v80 = 1;
            }
            unint64_t v71 = (char *)v72[1];
            if (v80)
            {
              unint64_t v81 = 2 * v72[4];
              if (v81 <= v79 + 1) {
                unint64_t v81 = v79 + 1;
              }
              v72[4] = v81;
              unint64_t v82 = v81 + 8;
              unint64_t v83 = malloc_type_malloc(v81 + 8, 0xD0263BC5uLL);
              *unint64_t v83 = v72[3];
              unint64_t v71 = (char *)(v83 + 1);
              uint64_t v84 = (char *)v83 + v82;
              uint64_t v4 = v146;
              v72[2] = v84;
              v72[3] = v83;
            }
            v72[1] = &v71[v79];
            if (v65) {
              memcpy(v71, *v145, v65);
            }
            uint64_t v5 = a1;
            *(void *)(a1 + 12728) = v71;
            LODWORD(v65) = *(_DWORD *)(a1 + 12740);
            unsigned int v66 = *(_DWORD *)(a1 + 12736);
            unint64_t v3 = v77;
            unint64_t v53 = v76;
            uint64_t v61 = v148;
            goto LABEL_97;
          }
LABEL_142:
          uint64_t v94 = *(unsigned int *)(v61 + 8);
          if ((v94 & 0x80000000) != 0) {
            goto LABEL_93;
          }
          v55 += *(void *)(*(void *)(v5 + 12760) + 16 * v94 + 8);
          size_t v95 = *(void **)(v5 + 12744);
          unsigned int v57 = *(_DWORD *)(v5 + 12736);
          size_t v56 = *(unsigned int *)(v5 + 12740);
          unsigned int v60 = *(char **)(v5 + 12728);
          if (v144 < v141 - 2)
          {
            char v96 = v94 + 97;
            if (v57 >= v56)
            {
              char v97 = (char *)v95[1];
              if (&v60[v56] != v97)
              {
                unint64_t v98 = v95[2];
                goto LABEL_151;
              }
              unint64_t v101 = (unint64_t)&v60[v56 + 1];
              unint64_t v98 = v95[2];
              if (v101 <= v98)
              {
                v95[1] = v101;
                int v58 = 1;
                char v97 = v60;
              }
              else
              {
LABEL_151:
                LODWORD(v102) = 2 * v56;
                if ((2 * v56) <= 4) {
                  uint64_t v102 = 4;
                }
                else {
                  uint64_t v102 = v102;
                }
                int v149 = v102;
                size_t v103 = v102 + v56;
                if (!v97 || (unint64_t)&v97[v103] > v98)
                {
                  unint64_t v104 = 2 * v95[4];
                  if (v104 <= v103 + 1) {
                    unint64_t v104 = v103 + 1;
                  }
                  v95[4] = v104;
                  unint64_t v105 = v104 + 8;
                  unint64_t v106 = v53;
                  unint64_t v107 = malloc_type_malloc(v104 + 8, 0xD0263BC5uLL);
                  unint64_t v53 = v106;
                  *unint64_t v107 = v95[3];
                  char v97 = (char *)(v107 + 1);
                  uint64_t v108 = (char *)v107 + v105;
                  uint64_t v4 = v146;
                  v95[2] = v108;
                  v95[3] = v107;
                }
                v95[1] = &v97[v103];
                if (v56)
                {
                  unint64_t v109 = v53;
                  memcpy(v97, *v145, v56);
                  unint64_t v53 = v109;
                }
                *(void *)(v5 + 12728) = v97;
                LODWORD(v56) = *(_DWORD *)(v5 + 12740);
                unsigned int v57 = *(_DWORD *)(v5 + 12736);
                int v58 = v149;
              }
              int v59 = v56 + v58;
LABEL_91:
              *(_DWORD *)(v5 + 12740) = v59;
              unsigned int v60 = v97;
            }
LABEL_92:
            *(_DWORD *)(v5 + 12736) = v57 + 1;
            v60[v57] = v96;
LABEL_93:
            unint64_t v54 = v144 + 1;
            if (v144 + 1 == v141) {
              goto LABEL_195;
            }
            continue;
          }
          break;
        }
        if (v57 >= v56)
        {
          uint64_t v99 = (char *)v95[1];
          if (&v60[v56] != v99)
          {
            unint64_t v100 = v95[2];
            goto LABEL_162;
          }
          unint64_t v110 = (unint64_t)&v60[v56 + 1];
          unint64_t v100 = v95[2];
          if (v110 <= v100)
          {
            v95[1] = v110;
            LODWORD(v112) = 1;
          }
          else
          {
LABEL_162:
            unint64_t v111 = v53;
            if ((2 * v56) <= 4) {
              uint64_t v112 = 4;
            }
            else {
              uint64_t v112 = (2 * v56);
            }
            size_t v113 = v112 + v56;
            if (!v99 || (unint64_t)&v99[v113] > v100)
            {
              unint64_t v114 = 2 * v95[4];
              if (v114 <= v113 + 1) {
                unint64_t v114 = v113 + 1;
              }
              v95[4] = v114;
              unint64_t v115 = v114 + 8;
              unint64_t v116 = malloc_type_malloc(v114 + 8, 0xD0263BC5uLL);
              *unint64_t v116 = v95[3];
              uint64_t v99 = (char *)(v116 + 1);
              int v117 = (char *)v116 + v115;
              uint64_t v4 = v146;
              v95[2] = v117;
              v95[3] = v116;
            }
            v95[1] = &v99[v113];
            if (v56) {
              memcpy(v99, *v145, v56);
            }
            *(void *)(a1 + 12728) = v99;
            LODWORD(v56) = *(_DWORD *)(a1 + 12740);
            unsigned int v60 = v99;
            unsigned int v57 = *(_DWORD *)(a1 + 12736);
            unint64_t v53 = v111;
            uint64_t v5 = a1;
          }
          *(_DWORD *)(v5 + 12740) = v56 + v112;
        }
        *(_DWORD *)(v5 + 12736) = v57 + 1;
        v60[v57] = v94 + 65;
        if (v55 != v3) {
          goto LABEL_93;
        }
        unsigned int v57 = *(_DWORD *)(v5 + 12736);
        size_t v118 = *(unsigned int *)(v5 + 12740);
        unsigned int v60 = *(char **)(v5 + 12728);
        if (v57 < v118)
        {
          char v96 = 48;
          unint64_t v55 = v3;
          goto LABEL_92;
        }
        uint64_t v119 = *(void **)(v5 + 12744);
        char v97 = (char *)v119[1];
        if (&v60[v118] != v97)
        {
          unint64_t v120 = v119[2];
          goto LABEL_182;
        }
        unint64_t v121 = (unint64_t)&v60[v118 + 1];
        unint64_t v120 = v119[2];
        if (v121 <= v120)
        {
          v119[1] = v121;
          LODWORD(v122) = 1;
          char v97 = v60;
        }
        else
        {
LABEL_182:
          if ((2 * v118) <= 4) {
            uint64_t v122 = 4;
          }
          else {
            uint64_t v122 = (2 * v118);
          }
          size_t v123 = v122 + v118;
          if (!v97 || (unint64_t)&v97[v123] > v120)
          {
            unint64_t v124 = 2 * v119[4];
            if (v124 <= v123 + 1) {
              unint64_t v124 = v123 + 1;
            }
            v119[4] = v124;
            unint64_t v125 = v124 + 8;
            unint64_t v126 = v53;
            unint64_t v127 = malloc_type_malloc(v124 + 8, 0xD0263BC5uLL);
            unint64_t v53 = v126;
            *unint64_t v127 = v119[3];
            char v97 = (char *)(v127 + 1);
            unint64_t v128 = (char *)v127 + v125;
            uint64_t v4 = v146;
            v119[2] = v128;
            v119[3] = v127;
          }
          v119[1] = &v97[v123];
          if (v118)
          {
            unint64_t v129 = v53;
            memcpy(v97, *v145, v118);
            unint64_t v53 = v129;
          }
          *(void *)(v5 + 12728) = v97;
          LODWORD(v118) = *(_DWORD *)(v5 + 12740);
          unsigned int v57 = *(_DWORD *)(v5 + 12736);
        }
        int v59 = v118 + v122;
        char v96 = 48;
        unint64_t v55 = v3;
        goto LABEL_91;
      }
    }
    std::string::size_type v22 = v18;
    if (v3 >= v18) {
      unint64_t v23 = v18;
    }
    else {
      unint64_t v23 = v3;
    }
    uint64_t v24 = &v4[v23];
    size_t v25 = v3 - v23;
    std::string::size_type v143 = v17 - v18;
    if (v25 >= v17 - v18) {
      size_t v26 = v17 - v18;
    }
    else {
      size_t v26 = v25;
    }
    if (!v6) {
      goto LABEL_54;
    }
    uint64_t v27 = 0;
    uint64_t v28 = *(void *)(a1 + 12728);
    unint64_t v29 = *(unsigned int *)(a1 + 12736);
    BOOL v30 = (unint64_t *)(*v150 + 8);
    while (1)
    {
      unint64_t v31 = *(v30 - 1);
      unint64_t v32 = *v30;
      if (v29 < v31) {
        unint64_t v31 = v29;
      }
      if (v29 - v31 < v32) {
        unint64_t v32 = v29 - v31;
      }
      if (v26 == v32)
      {
        if (!v26) {
          break;
        }
        int v33 = memcmp(v24, (const void *)(v28 + v31), v26);
        unint64_t v6 = v147;
        if (!v33) {
          break;
        }
      }
      v30 += 2;
      if (v6 == ++v27) {
        goto LABEL_54;
      }
    }
    if ((v27 & 0x80000000) == 0)
    {
      uint64_t v4 = v146;
    }
    else
    {
LABEL_54:
      uint64_t v34 = *(unsigned int *)(a1 + 12768);
      uint64_t v4 = v146;
      if (v6 >= v34) {
        goto LABEL_66;
      }
      size_t v35 = (unint64_t *)(*v150 + v140);
      unint64_t v36 = v6;
      while (1)
      {
        unint64_t v37 = *(v35 - 1);
        unint64_t v38 = *v35;
        if (v3 < v37) {
          unint64_t v37 = v3;
        }
        if (v3 - v37 < v38) {
          unint64_t v38 = v3 - v37;
        }
        if (v26 == v38)
        {
          if (!v26) {
            break;
          }
          int v39 = memcmp(v24, &v146[v37], v26);
          unint64_t v6 = v147;
          if (!v39) {
            break;
          }
        }
        v35 += 2;
        if (v34 == ++v36) {
          goto LABEL_66;
        }
      }
      if ((v36 & 0x80000000) != 0)
      {
LABEL_66:
        uint64_t v5 = a1;
        if (v143 < 2 || v34 > 0x19)
        {
LABEL_19:
          if ((v21 - 58) >= 0xFFFFFFF6 || v21 == 95 || v21 == 0) {
            unint64_t v18 = -1;
          }
          else {
            unint64_t v18 = v17;
          }
          goto LABEL_28;
        }
        __p.__r_.__value_.__r.__words[0] = v22;
        __p.__r_.__value_.__l.__size_ = v143;
        swift::Demangle::__runtime::Vector<swift::Mangle::__runtime::WordReplacement>::push_back((uint64_t)v150, (__n128 *)&__p, *(void **)a1);
LABEL_18:
        unint64_t v6 = v147;
        goto LABEL_19;
      }
      LODWORD(v27) = v36;
    }
    uint64_t v5 = a1;
    __p.__r_.__value_.__r.__words[0] = v22;
    LODWORD(__p.__r_.__value_.__r.__words[1]) = v27;
    swift::Demangle::__runtime::Vector<swift::Mangle::__runtime::WordReplacement>::push_back((uint64_t)v142, (__n128 *)&__p, *(void **)a1);
    goto LABEL_18;
  }
  memset(&__p, 0, sizeof(__p));
  swift::Punycode::__runtime::encodePunycodeUTF8(v4, v3, &__p, 1);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  int v10 = (const void **)(v5 + 12728);
  swift::Demangle::__runtime::CharVector::append((char **)(v5 + 12728), "00", 2uLL, *(void **)(v5 + 12744));
  swift::Demangle::__runtime::CharVector::append((unsigned int *)(v5 + 12728), size, *(swift::Demangle::__runtime::NodeFactory **)(v5 + 12744));
  int v11 = p_p->__r_.__value_.__s.__data_[0];
  if (v11 != 95 && (v11 - 48) > 9) {
    goto LABEL_214;
  }
  unsigned int v13 = *(_DWORD *)(v5 + 12736);
  uint64_t v14 = v5;
  size_t v15 = *(unsigned int *)(v5 + 12740);
  int v16 = *(char **)(v14 + 12728);
  if (v13 >= v15)
  {
    unint64_t v130 = *(void **)(v14 + 12744);
    int v131 = (char *)v130[1];
    if (&v16[v15] == v131)
    {
      unint64_t v133 = (unint64_t)&v16[v15 + 1];
      unint64_t v132 = v130[2];
      if (v133 <= v132)
      {
        v130[1] = v133;
        LODWORD(v134) = 1;
        uint64_t v139 = a1;
LABEL_212:
        *(_DWORD *)(v139 + 12740) = v15 + v134;
        uint64_t v5 = v139;
        goto LABEL_213;
      }
    }
    else
    {
      unint64_t v132 = v130[2];
    }
    if ((2 * v15) <= 4) {
      uint64_t v134 = 4;
    }
    else {
      uint64_t v134 = (2 * v15);
    }
    size_t v135 = v134 + v15;
    if (!v131 || (unint64_t)&v131[v135] > v132)
    {
      unint64_t v136 = 2 * v130[4];
      if (v136 <= v135 + 1) {
        unint64_t v136 = v135 + 1;
      }
      v130[4] = v136;
      unint64_t v137 = v136 + 8;
      unint64_t v138 = malloc_type_malloc(v136 + 8, 0xD0263BC5uLL);
      void *v138 = v130[3];
      int v131 = (char *)(v138 + 1);
      v130[2] = (char *)v138 + v137;
      v130[3] = v138;
    }
    v130[1] = &v131[v135];
    if (v15) {
      memcpy(v131, *v10, v15);
    }
    uint64_t v139 = a1;
    *(void *)(a1 + 12728) = v131;
    LODWORD(v15) = *(_DWORD *)(a1 + 12740);
    int v16 = v131;
    unsigned int v13 = *(_DWORD *)(a1 + 12736);
    goto LABEL_212;
  }
  uint64_t v5 = v14;
LABEL_213:
  *(_DWORD *)(v5 + 12736) = v13 + 1;
  v16[v13] = 95;
LABEL_214:
  swift::Demangle::__runtime::CharVector::append((char **)v10, p_p, size, *(void **)(v5 + 12744));
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

__n128 swift::Demangle::__runtime::Vector<swift::Mangle::__runtime::WordReplacement>::push_back(uint64_t a1, __n128 *a2, void *a3)
{
  unsigned int v5 = *(_DWORD *)(a1 + 8);
  uint64_t v6 = *(unsigned int *)(a1 + 12);
  int v7 = *(__n128 **)a1;
  if (v5 >= v6)
  {
    int v9 = &v7[v6];
    int v10 = (char *)a3[1];
    if (v9 == (__n128 *)v10)
    {
      uint64_t v12 = (char *)&v9[1];
      unint64_t v11 = a3[2];
      if ((unint64_t)v12 <= v11)
      {
        a3[1] = v12;
        LODWORD(v13) = 1;
LABEL_17:
        *(_DWORD *)(a1 + 12) = v6 + v13;
        goto LABEL_18;
      }
    }
    else
    {
      unint64_t v11 = a3[2];
    }
    if ((2 * v6) <= 4) {
      uint64_t v13 = 4;
    }
    else {
      uint64_t v13 = (2 * v6);
    }
    uint64_t v14 = v13 + v6;
    int v7 = (__n128 *)((unint64_t)(v10 + 7) & 0xFFFFFFFFFFFFFFF8);
    a3[1] = v7;
    if (!v7 || (unint64_t)v7[v14].n128_u64 > v11)
    {
      unint64_t v15 = 2 * a3[4];
      if (v15 <= ((v14 * 16) | 8uLL)) {
        unint64_t v15 = (v14 * 16) | 8;
      }
      a3[4] = v15;
      unint64_t v16 = v15 + 8;
      unint64_t v17 = malloc_type_malloc(v15 + 8, 0xD0263BC5uLL);
      unint64_t v18 = (char *)v17 + v16;
      void *v17 = a3[3];
      int v7 = (__n128 *)(((unint64_t)v17 + 15) & 0xFFFFFFFFFFFFFFF8);
      a3[2] = v18;
      a3[3] = v17;
    }
    a3[1] = &v7[v14];
    if (v6) {
      memcpy(v7, *(const void **)a1, 16 * v6);
    }
    *(void *)a1 = v7;
    unsigned int v5 = *(_DWORD *)(a1 + 8);
    LODWORD(v6) = *(_DWORD *)(a1 + 12);
    goto LABEL_17;
  }
LABEL_18:
  *(_DWORD *)(a1 + 8) = v5 + 1;
  __n128 result = *a2;
  v7[v5] = *a2;
  return result;
}

uint64_t *anonymous namespace'::Remangler::mangleKeyPathThunkHelper@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, const void *a3@<X2>, size_t a4@<X3>, int a5@<W4>, uint64_t a6@<X8>)
{
  int v12 = *(unsigned __int8 *)(a2 + 18);
  uint64_t v13 = (swift::Demangle::__runtime::Node **)a2;
  if ((v12 - 1) >= 2)
  {
    if (v12 == 5)
    {
      uint64_t v14 = *(swift::Demangle::__runtime::Node **)a2;
      uint64_t v13 = *(swift::Demangle::__runtime::Node ***)a2;
      goto LABEL_9;
    }
    uint64_t v13 = 0;
  }
  if (v12 == 1)
  {
    unint64_t v15 = (swift::Demangle::__runtime::Node **)(a2 + 8);
    if (v13 != (swift::Demangle::__runtime::Node **)(a2 + 8)) {
      goto LABEL_18;
    }
LABEL_21:
    __n128 result = (uint64_t *)swift::Demangle::__runtime::CharVector::append((char **)(a1 + 12728), a3, a4, *(void **)(a1 + 12744));
    int v17 = *(unsigned __int8 *)(a2 + 18);
    unint64_t v18 = (swift::Demangle::__runtime::Node **)a2;
    if ((v17 - 1) >= 2)
    {
      if (v17 == 5)
      {
        int v19 = *(swift::Demangle::__runtime::Node **)a2;
        unint64_t v18 = *(swift::Demangle::__runtime::Node ***)a2;
LABEL_29:
        size_t v20 = (swift::Demangle::__runtime::Node **)((char *)v19 + 8 * *(unsigned int *)(a2 + 8));
        if (v18 == v20) {
          goto LABEL_41;
        }
        goto LABEL_36;
      }
      unint64_t v18 = 0;
    }
    switch(v17)
    {
      case 1:
        size_t v20 = (swift::Demangle::__runtime::Node **)(a2 + 8);
        if (v18 == v20) {
          goto LABEL_41;
        }
        break;
      case 2:
        size_t v20 = (swift::Demangle::__runtime::Node **)(a2 + 16);
        if (v18 == v20) {
          goto LABEL_41;
        }
        break;
      case 5:
        int v19 = *(swift::Demangle::__runtime::Node **)a2;
        goto LABEL_29;
      default:
        size_t v20 = 0;
        if (!v18)
        {
LABEL_41:
          *(_DWORD *)a6 = 0;
          *(void *)(a6 + 8) = 0;
          *(_DWORD *)(a6 + 16) = 0;
          return result;
        }
        break;
    }
LABEL_36:
    unsigned int v21 = a5 + 1;
    while (1)
    {
      if (*((_WORD *)*v18 + 8) == 217)
      {
        if (*(_DWORD *)a6) {
          return result;
        }
      }
      if (++v18 == v20) {
        goto LABEL_41;
      }
    }
  }
  if (v12 == 2)
  {
    unint64_t v15 = (swift::Demangle::__runtime::Node **)(a2 + 16);
    if (v13 != (swift::Demangle::__runtime::Node **)(a2 + 16)) {
      goto LABEL_18;
    }
    goto LABEL_21;
  }
  if (v12 != 5)
  {
    unint64_t v15 = 0;
    if (v13) {
      goto LABEL_18;
    }
    goto LABEL_21;
  }
  uint64_t v14 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_9:
  unint64_t v15 = (swift::Demangle::__runtime::Node **)((char *)v14 + 8 * *(unsigned int *)(a2 + 8));
  if (v13 == v15) {
    goto LABEL_21;
  }
LABEL_18:
  while (1)
  {
    if (*((_WORD *)*v13 + 8) != 217)
    {
      if (*(_DWORD *)a6) {
        return result;
      }
    }
    if (++v13 == v15) {
      goto LABEL_21;
    }
  }
}

uint64_t *anonymous namespace'::Remangler::mangleProtocolList@<X0>(const void **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, swift::Demangle::__runtime::Node *a3@<X2>, int a4@<W3>, int a5@<W4>, uint64_t a6@<X8>)
{
  int v11 = *((unsigned __int8 *)a2 + 18);
  if ((v11 - 1) >= 2)
  {
    if (v11 != 5 || !*((_DWORD *)a2 + 2))
    {
      int v12 = 0;
      goto LABEL_7;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  int v12 = *(swift::Demangle::__runtime::Node ***)a2;
LABEL_7:
  BOOL v43 = 1;
  int v13 = *((unsigned __int8 *)v12 + 18);
  uint64_t v14 = v12;
  if ((v13 - 1) >= 2)
  {
    if (v13 == 5)
    {
      unint64_t v15 = *v12;
      uint64_t v14 = (swift::Demangle::__runtime::Node **)*v12;
      goto LABEL_15;
    }
    uint64_t v14 = 0;
  }
  switch(v13)
  {
    case 1:
      unint64_t v16 = v12 + 1;
      if (v14 != v12 + 1) {
        goto LABEL_18;
      }
      goto LABEL_43;
    case 2:
      unint64_t v16 = v12 + 2;
      if (v14 != v12 + 2) {
        goto LABEL_18;
      }
      goto LABEL_43;
    case 5:
      unint64_t v15 = *v12;
LABEL_15:
      unint64_t v16 = (swift::Demangle::__runtime::Node **)((char *)v15 + 8 * *((unsigned int *)v12 + 2));
      if (v14 != v16) {
        goto LABEL_18;
      }
      goto LABEL_43;
  }
  unint64_t v16 = 0;
  if (!v14)
  {
LABEL_43:
    BOOL v24 = 1;
    goto LABEL_44;
  }
  do
  {
LABEL_18:
    int v17 = *v14;
    if (*((_WORD *)*v14 + 8) != 232) {
      goto LABEL_25;
    }
    int v18 = *((unsigned __int8 *)v17 + 18);
    if ((v18 - 1) < 2) {
      goto LABEL_23;
    }
    if (v18 == 5 && *((_DWORD *)v17 + 2))
    {
      int v17 = *(swift::Demangle::__runtime::Node **)v17;
LABEL_23:
      int v17 = *(swift::Demangle::__runtime::Node **)v17;
      goto LABEL_25;
    }
    int v17 = 0;
LABEL_25:
    {
      int v19 = *((unsigned __int8 *)v17 + 18);
      size_t v20 = (swift::Demangle::__runtime::Node **)v17;
      if ((v19 - 1) >= 2)
      {
        if (v19 == 5)
        {
          unsigned int v21 = *(swift::Demangle::__runtime::Node **)v17;
          size_t v20 = *(swift::Demangle::__runtime::Node ***)v17;
LABEL_34:
          std::string::size_type v22 = (swift::Demangle::__runtime::Node **)((char *)v21 + 8 * *((unsigned int *)v17 + 2));
          goto LABEL_40;
        }
        size_t v20 = 0;
      }
      switch(v19)
      {
        case 1:
          std::string::size_type v22 = (swift::Demangle::__runtime::Node **)((char *)v17 + 8);
          goto LABEL_40;
        case 2:
          std::string::size_type v22 = (swift::Demangle::__runtime::Node **)((char *)v17 + 16);
          goto LABEL_40;
        case 5:
          unsigned int v21 = *(swift::Demangle::__runtime::Node **)v17;
          goto LABEL_34;
      }
      std::string::size_type v22 = 0;
LABEL_40:
      while (v20 != v22)
      {
        if (*(_DWORD *)a6) {
          return result;
        }
        ++v20;
      }
    }
    *(_DWORD *)a6 = 0;
    *(void *)(a6 + 8) = 0;
    *(_DWORD *)(a6 + 16) = 0;
    ++v14;
  }
  while (v14 != v16);
  BOOL v24 = v43;
LABEL_44:
  if (!a3)
  {
    unint64_t v29 = this[1593];
    if (a4)
    {
      uint64_t v28 = "Xl";
      size_t v26 = (char **)(this + 1591);
      uint64_t v27 = this[1593];
LABEL_57:
      __n128 result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(v26, v28, 2uLL, v27);
      int v30 = 0;
      a3 = 0;
      int v31 = 0;
      goto LABEL_78;
    }
    unsigned int v32 = *((_DWORD *)this + 3184);
    size_t v33 = *((unsigned int *)this + 3185);
    uint64_t v34 = (char *)this[1591];
    if (v32 < v33) {
      goto LABEL_77;
    }
    size_t v35 = (char *)v29[1];
    if (&v34[v33] == v35)
    {
      unint64_t v37 = (unint64_t)&v34[v33 + 1];
      unint64_t v36 = v29[2];
      if (v37 <= v36)
      {
        v29[1] = v37;
        LODWORD(v38) = 1;
LABEL_76:
        *((_DWORD *)this + 3185) = v33 + v38;
LABEL_77:
        int v30 = 0;
        a3 = 0;
        int v31 = 0;
        *((_DWORD *)this + 3184) = v32 + 1;
        v34[v32] = 112;
        goto LABEL_78;
      }
    }
    else
    {
      unint64_t v36 = v29[2];
    }
    if ((2 * v33) <= 4) {
      uint64_t v38 = 4;
    }
    else {
      uint64_t v38 = (2 * v33);
    }
    size_t v39 = v38 + v33;
    if (!v35 || (unint64_t)&v35[v39] > v36)
    {
      unint64_t v40 = 2 * v29[4];
      if (v40 <= v39 + 1) {
        unint64_t v40 = v39 + 1;
      }
      v29[4] = v40;
      unint64_t v41 = v40 + 8;
      __n128 result = (uint64_t *)malloc_type_malloc(v40 + 8, 0xD0263BC5uLL);
      size_t v42 = (char *)result + v41;
      *__n128 result = v29[3];
      size_t v35 = (char *)(result + 1);
      v29[2] = v42;
      v29[3] = result;
    }
    v29[1] = &v35[v39];
    if (v33) {
      __n128 result = (uint64_t *)memcpy(v35, this[1591], v33);
    }
    this[1591] = v35;
    LODWORD(v33) = *((_DWORD *)this + 3185);
    uint64_t v34 = v35;
    unsigned int v32 = *((_DWORD *)this + 3184);
    goto LABEL_76;
  }
  int v25 = *((unsigned __int8 *)a3 + 18);
  if (v25 == 1) {
    goto LABEL_49;
  }
  if (v25 != 5 || *((_DWORD *)a3 + 2) != 1)
  {
    int v31 = 321;
    int v30 = 10;
LABEL_78:
    *(_DWORD *)a6 = v30;
    *(void *)(a6 + 8) = a3;
    *(_DWORD *)(a6 + 16) = v31;
    return result;
  }
  a3 = *(swift::Demangle::__runtime::Node **)a3;
LABEL_49:
  if (!*(_DWORD *)a6)
  {
    size_t v26 = (char **)(this + 1591);
    uint64_t v27 = this[1593];
    uint64_t v28 = "Xc";
    goto LABEL_57;
  }
  return result;
}

uint64_t *anonymous namespace'::Remangler::mangleAutoDiffFunctionOrSimpleThunk@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, const void *a3@<X2>, size_t a4@<X3>, int a5@<W4>, uint64_t a6@<X8>)
{
  int v11 = *(unsigned __int8 *)(a2 + 18);
  int v12 = (swift::Demangle::__runtime::Node **)a2;
  if ((v11 - 1) >= 2)
  {
    if (v11 == 5) {
      int v12 = *(swift::Demangle::__runtime::Node ***)a2;
    }
    else {
      int v12 = 0;
    }
  }
  unsigned int v13 = a5 + 1;
  while (1)
  {
    int v14 = *(unsigned __int8 *)(a2 + 18);
    if (v14 != 5) {
      break;
    }
    if (v12 == (swift::Demangle::__runtime::Node **)(*(void *)a2 + 8 * *(unsigned int *)(a2 + 8))) {
      goto LABEL_19;
    }
LABEL_16:
    int v17 = *v12;
    if (*((_WORD *)*v12 + 8) == 321) {
      goto LABEL_19;
    }
    ++v12;
    if (*(_DWORD *)a6) {
      return result;
    }
  }
  if (v14 == 1) {
    unint64_t v15 = (swift::Demangle::__runtime::Node **)(a2 + 8);
  }
  else {
    unint64_t v15 = 0;
  }
  if (v14 == 2) {
    unint64_t v16 = (swift::Demangle::__runtime::Node **)(a2 + 16);
  }
  else {
    unint64_t v16 = v15;
  }
  if (v12 != v16) {
    goto LABEL_16;
  }
LABEL_19:
  int v19 = (const void **)(a1 + 12728);
  swift::Demangle::__runtime::CharVector::append((char **)(a1 + 12728), a3, a4, *(void **)(a1 + 12744));
  if (!*(_DWORD *)a6)
  {
    if (!*(_DWORD *)a6)
    {
      unsigned int v20 = *(_DWORD *)(a1 + 12736);
      size_t v21 = *(unsigned int *)(a1 + 12740);
      std::string::size_type v22 = *(char **)(a1 + 12728);
      if (v20 >= v21)
      {
        unint64_t v23 = *(void **)(a1 + 12744);
        BOOL v24 = (char *)v23[1];
        if (&v22[v21] != v24)
        {
          unint64_t v25 = v23[2];
          goto LABEL_25;
        }
        unint64_t v26 = (unint64_t)&v22[v21 + 1];
        unint64_t v25 = v23[2];
        if (v26 <= v25)
        {
          v23[1] = v26;
          LODWORD(v27) = 1;
        }
        else
        {
LABEL_25:
          if ((2 * v21) <= 4) {
            uint64_t v27 = 4;
          }
          else {
            uint64_t v27 = (2 * v21);
          }
          size_t v28 = v27 + v21;
          if (!v24 || (unint64_t)&v24[v28] > v25)
          {
            unint64_t v29 = 2 * v23[4];
            if (v29 <= v28 + 1) {
              unint64_t v29 = v28 + 1;
            }
            v23[4] = v29;
            unint64_t v30 = v29 + 8;
            int v31 = malloc_type_malloc(v29 + 8, 0xD0263BC5uLL);
            unsigned int v32 = (char *)v31 + v30;
            void *v31 = v23[3];
            BOOL v24 = (char *)(v31 + 1);
            v23[2] = v32;
            v23[3] = v31;
          }
          v23[1] = &v24[v28];
          if (v21) {
            memcpy(v24, *v19, v21);
          }
          *(void *)(a1 + 12728) = v24;
          LODWORD(v21) = *(_DWORD *)(a1 + 12740);
          std::string::size_type v22 = v24;
          unsigned int v20 = *(_DWORD *)(a1 + 12736);
        }
        *(_DWORD *)(a1 + 12740) = v21 + v27;
      }
      *(_DWORD *)(a1 + 12736) = v20 + 1;
      v22[v20] = 112;
      if (!*(_DWORD *)a6)
      {
        unsigned int v33 = *(_DWORD *)(a1 + 12736);
        size_t v34 = *(unsigned int *)(a1 + 12740);
        size_t v35 = *(char **)(a1 + 12728);
        if (v33 >= v34)
        {
          unint64_t v36 = *(void **)(a1 + 12744);
          unint64_t v37 = (char *)v36[1];
          if (&v35[v34] != v37)
          {
            unint64_t v38 = v36[2];
            goto LABEL_43;
          }
          unint64_t v39 = (unint64_t)&v35[v34 + 1];
          unint64_t v38 = v36[2];
          if (v39 <= v38)
          {
            v36[1] = v39;
            LODWORD(v40) = 1;
          }
          else
          {
LABEL_43:
            if ((2 * v34) <= 4) {
              uint64_t v40 = 4;
            }
            else {
              uint64_t v40 = (2 * v34);
            }
            size_t v41 = v40 + v34;
            if (!v37 || (unint64_t)&v37[v41] > v38)
            {
              unint64_t v42 = 2 * v36[4];
              if (v42 <= v41 + 1) {
                unint64_t v42 = v41 + 1;
              }
              v36[4] = v42;
              unint64_t v43 = v42 + 8;
              __n128 result = (uint64_t *)malloc_type_malloc(v42 + 8, 0xD0263BC5uLL);
              unint64_t v44 = (char *)result + v43;
              *__n128 result = v36[3];
              unint64_t v37 = (char *)(result + 1);
              v36[2] = v44;
              v36[3] = result;
            }
            v36[1] = &v37[v41];
            if (v34) {
              __n128 result = (uint64_t *)memcpy(v37, *v19, v34);
            }
            *(void *)(a1 + 12728) = v37;
            LODWORD(v34) = *(_DWORD *)(a1 + 12740);
            size_t v35 = v37;
            unsigned int v33 = *(_DWORD *)(a1 + 12736);
          }
          *(_DWORD *)(a1 + 12740) = v34 + v40;
        }
        *(_DWORD *)(a1 + 12736) = v33 + 1;
        v35[v33] = 114;
        *(_DWORD *)a6 = 0;
        *(void *)(a6 + 8) = 0;
        *(_DWORD *)(a6 + 16) = 0;
      }
    }
  }
  return result;
}

uint64_t *std::__hash_table<std::__hash_value_type<swift::Demangle::__runtime::SubstitutionEntry,unsigned int>,std::__unordered_map_hasher<swift::Demangle::__runtime::SubstitutionEntry,std::__hash_value_type<swift::Demangle::__runtime::SubstitutionEntry,unsigned int>,swift::Demangle::__runtime::SubstitutionEntry::Hasher,std::equal_to<swift::Demangle::__runtime::SubstitutionEntry>,true>,std::__unordered_map_equal<swift::Demangle::__runtime::SubstitutionEntry,std::__hash_value_type<swift::Demangle::__runtime::SubstitutionEntry,unsigned int>,std::equal_to<swift::Demangle::__runtime::SubstitutionEntry>,swift::Demangle::__runtime::SubstitutionEntry::Hasher,true>,std::allocator<std::__hash_value_type<swift::Demangle::__runtime::SubstitutionEntry,unsigned int>>>::find<swift::Demangle::__runtime::SubstitutionEntry>(void *a1, uint64_t a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0;
  }
  unint64_t v4 = *(void *)(a2 + 8);
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v2);
  v5.i16[0] = vaddlv_u8(v5);
  unint64_t v6 = v5.u32[0];
  if (v5.u32[0] > 1uLL)
  {
    unint64_t v7 = *(void *)(a2 + 8);
    if (v4 >= *(void *)&v2) {
      unint64_t v7 = v4 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v7 = (*(void *)&v2 - 1) & v4;
  }
  unint64_t v8 = *(uint64_t ***)(*a1 + 8 * v7);
  if (!v8) {
    return 0;
  }
  for (uint64_t i = *v8; i; uint64_t i = (uint64_t *)*i)
  {
    unint64_t v10 = i[1];
    if (v10 == v4)
    {
      if (i[3] == *(void *)(a2 + 8) && *((unsigned __int8 *)i + 32) == *(unsigned __int8 *)(a2 + 16))
      {
        int v11 = *(swift::Demangle::__runtime::Node **)a2;
        if (*((unsigned char *)i + 32))
        {
          if (swift::Demangle::__runtime::SubstitutionEntry::identifierEquals((swift::Demangle::__runtime::SubstitutionEntry *)i[2], *(swift::Demangle::__runtime::Node **)a2, v11))
          {
            return i;
          }
        }
        else if (swift::Demangle::__runtime::SubstitutionEntry::deepEquals((swift::Demangle::__runtime::SubstitutionEntry *)(i + 2), (swift::Demangle::__runtime::Node *)i[2], v11))
        {
          return i;
        }
      }
    }
    else
    {
      if (v6 <= 1)
      {
        v10 &= *(void *)&v2 - 1;
      }
      else if (v10 >= *(void *)&v2)
      {
        v10 %= *(void *)&v2;
      }
      if (v10 != v7) {
        return 0;
      }
    }
  }
  return i;
}

char *std::__hash_table<std::__hash_value_type<swift::Demangle::__runtime::SubstitutionEntry,unsigned int>,std::__unordered_map_hasher<swift::Demangle::__runtime::SubstitutionEntry,std::__hash_value_type<swift::Demangle::__runtime::SubstitutionEntry,unsigned int>,swift::Demangle::__runtime::SubstitutionEntry::Hasher,std::equal_to<swift::Demangle::__runtime::SubstitutionEntry>,true>,std::__unordered_map_equal<swift::Demangle::__runtime::SubstitutionEntry,std::__hash_value_type<swift::Demangle::__runtime::SubstitutionEntry,unsigned int>,std::equal_to<swift::Demangle::__runtime::SubstitutionEntry>,swift::Demangle::__runtime::SubstitutionEntry::Hasher,true>,std::allocator<std::__hash_value_type<swift::Demangle::__runtime::SubstitutionEntry,unsigned int>>>::__emplace_unique_key_args<swift::Demangle::__runtime::SubstitutionEntry,std::pair<swift::Demangle::__runtime::SubstitutionEntry const,unsigned int>>(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  unint64_t v6 = *(void *)(a2 + 8);
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v9.i16[0] = vaddlv_u8(v9);
    unint64_t v10 = v9.u32[0];
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v3 = *(void *)(a2 + 8);
      if (v6 >= v7) {
        unint64_t v3 = v6 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
    int v11 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v11)
    {
      int v12 = (char *)*v11;
      if (*v11)
      {
        do
        {
          unint64_t v13 = *((void *)v12 + 1);
          if (v13 == v6)
          {
            if (*((void *)v12 + 3) == *(void *)(a2 + 8) && v12[32] == *(unsigned char *)(a2 + 16))
            {
              int v14 = *(swift::Demangle::__runtime::Node **)a2;
              if (v12[32])
              {
                if (swift::Demangle::__runtime::SubstitutionEntry::identifierEquals(*((swift::Demangle::__runtime::SubstitutionEntry **)v12 + 2), *(swift::Demangle::__runtime::Node **)a2, v14))
                {
                  return v12;
                }
              }
              else if (swift::Demangle::__runtime::SubstitutionEntry::deepEquals((swift::Demangle::__runtime::SubstitutionEntry *)(v12 + 16), *((swift::Demangle::__runtime::Node **)v12 + 2), v14))
              {
                return v12;
              }
            }
          }
          else
          {
            if (v10 <= 1)
            {
              v13 &= v7 - 1;
            }
            else if (v13 >= v7)
            {
              v13 %= v7;
            }
            if (v13 != v3) {
              break;
            }
          }
          int v12 = *(char **)v12;
        }
        while (v12);
      }
    }
  }
  int v12 = (char *)operator new(0x30uLL);
  *(void *)int v12 = 0;
  *((void *)v12 + 1) = v6;
  long long v15 = a3[1];
  *((_OWORD *)v12 + 1) = *a3;
  *((_OWORD *)v12 + 2) = v15;
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (!v7 || (float)(v17 * (float)v7) < v16)
  {
    BOOL v18 = 1;
    if (v7 >= 3) {
      BOOL v18 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v7);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t prime = v20;
    }
    else {
      size_t prime = v19;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v22 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v22) {
      goto LABEL_36;
    }
    if (prime < *(void *)&v22)
    {
      unint64_t v23 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v22 < 3uLL || (uint8x8_t v24 = (uint8x8_t)vcnt_s8(v22), v24.i16[0] = vaddlv_u8(v24), v24.u32[0] > 1uLL))
      {
        unint64_t v23 = std::__next_prime(v23);
      }
      else
      {
        uint64_t v25 = 1 << -(char)__clz(v23 - 1);
        if (v23 >= 2) {
          unint64_t v23 = v25;
        }
      }
      if (prime <= v23) {
        size_t prime = v23;
      }
      if (prime < *(void *)&v22) {
LABEL_36:
      }
        std::__hash_table<std::__hash_value_type<swift::reflection::TypeRefID,swift::reflection::ObjCClassTypeRef const*>,std::__unordered_map_hasher<swift::reflection::TypeRefID,std::__hash_value_type<swift::reflection::TypeRefID,swift::reflection::ObjCClassTypeRef const*>,swift::reflection::TypeRefID::Hash,swift::reflection::TypeRefID::Equal,true>,std::__unordered_map_equal<swift::reflection::TypeRefID,std::__hash_value_type<swift::reflection::TypeRefID,swift::reflection::ObjCClassTypeRef const*>,swift::reflection::TypeRefID::Equal,swift::reflection::TypeRefID::Hash,true>,std::allocator<std::__hash_value_type<swift::reflection::TypeRefID,swift::reflection::ObjCClassTypeRef const*>>>::__do_rehash<true>(a1, prime);
    }
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
  }
  uint64_t v26 = *(void *)a1;
  uint64_t v27 = *(void **)(*(void *)a1 + 8 * v3);
  if (v27)
  {
    *(void *)int v12 = *v27;
LABEL_60:
    *uint64_t v27 = v12;
    goto LABEL_61;
  }
  *(void *)int v12 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v12;
  *(void *)(v26 + 8 * v3) = a1 + 16;
  if (*(void *)v12)
  {
    unint64_t v28 = *(void *)(*(void *)v12 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v28 >= v7) {
        v28 %= v7;
      }
    }
    else
    {
      v28 &= v7 - 1;
    }
    uint64_t v27 = (void *)(*(void *)a1 + 8 * v28);
    goto LABEL_60;
  }
LABEL_61:
  ++*(void *)(a1 + 24);
  return v12;
}

uint64_t __swift::__runtime::llvm::function_ref<swift::Demangle::__runtime::Node * ()(swift::Demangle::__runtime::SymbolicReferenceKind,void const*)>::callback_fn<swift::Demangle::__runtime::mangleNode(swift::Demangle::__runtime::Node *)::$_0>()
{
  return 0;
}

const char *swift::Demangle::__runtime::getNodeKindString(unsigned int a1)
{
  if (a1 > 0x162) {
    return "Demangle::Node::Kind::???";
  }
  else {
    return off_C95D8[(__int16)a1];
  }
}

double swift::Demangle::__runtime::getNodeTreeAsString@<D0>(swift::Demangle::__runtime *this@<X0>, std::string *a2@<X8>)
{
  memset(&v5, 0, sizeof(v5));
  printNode(&v5, this, 0);
  double result = *(double *)&v5.__r_.__value_.__l.__data_;
  *a2 = v5;
  return result;
}

void printNode(std::string *a1, const swift::Demangle::__runtime::Node *a2, int a3)
{
  for (int i = 2 * a3; i; --i)
    std::string::push_back(a1, 32);
  if (a2)
  {
    std::string::append(a1, "kind=", 5uLL);
    unint64_t v7 = (char *)a2 + 16;
    NodeKindString = swift::Demangle::__runtime::getNodeKindString(*((unsigned __int16 *)a2 + 8));
    size_t v9 = strlen(NodeKindString);
    std::string::append(a1, NodeKindString, v9);
    int v10 = *((unsigned __int8 *)a2 + 18);
    if (v10 == 3)
    {
      std::string::append(a1, ", text=\"", 8uLL);
      std::string::append(a1, *(const std::string::value_type **)a2, *((void *)a2 + 1));
      std::string::push_back(a1, 34);
      int v10 = *((unsigned __int8 *)a2 + 18);
    }
    if (v10 == 4)
    {
      std::string::append(a1, ", index=", 8uLL);
      swift::Demangle::__runtime::DemanglerPrinter::operator<<(a1, *(void *)a2);
    }
    std::string::push_back(a1, 10);
    int v11 = *((unsigned __int8 *)a2 + 18);
    int v12 = (const std::string::value_type *)a2;
    if ((v11 - 1) >= 2)
    {
      if (v11 == 5)
      {
        unint64_t v13 = *(const std::string::value_type **)a2;
        int v12 = *(const std::string::value_type **)a2;
        goto LABEL_19;
      }
      int v12 = 0;
    }
    switch(v11)
    {
      case 1:
        unint64_t v7 = (char *)a2 + 8;
        break;
      case 2:
        break;
      case 5:
        unint64_t v13 = *(const std::string::value_type **)a2;
LABEL_19:
        unint64_t v7 = &v13[8 * *((unsigned int *)a2 + 2)];
        if (v12 == v7) {
          return;
        }
        goto LABEL_23;
      default:
        unint64_t v7 = 0;
        if (!v12) {
          return;
        }
LABEL_23:
        unsigned int v14 = a3 + 1;
        do
        {
          long long v15 = *(const swift::Demangle::__runtime::Node **)v12;
          v12 += 8;
          printNode((swift::Demangle::__runtime::DemanglerPrinter *)a1, v15, v14);
        }
        while (v12 != v7);
        return;
    }
    if (v12 == v7) {
      return;
    }
    goto LABEL_23;
  }

  std::string::append(a1, "<<NULL>>", 8uLL);
}

void swift::Demangle::__runtime::Node::dump(swift::Demangle::__runtime::Node *this)
{
  memset(&v3, 0, sizeof(v3));
  printNode(&v3, this, 0);
  std::string __p = v3;
  if ((v3.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)v3.__r_.__value_.__r.__words[0];
  }
  fputs((const char *)p_p, __stderrp);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

uint64_t swift::Demangle::__runtime::Demangler::dump(swift::Demangle::__runtime::Demangler *this)
{
  if (*((_DWORD *)this + 28))
  {
    uint64_t v2 = 0;
    do
    {
      fprintf(__stderrp, "Substitution[%c]:\n", v2 + 65);
      std::string v3 = *(const swift::Demangle::__runtime::Node **)(*((void *)this + 13) + 8 * v2);
      memset(&v10, 0, sizeof(v10));
      printNode(&v10, v3, 0);
      std::string __p = v10;
      if ((v10.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)v10.__r_.__value_.__r.__words[0];
      }
      fputs((const char *)p_p, __stderrp);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      fputc(10, __stderrp);
      ++v2;
    }
    while (*((_DWORD *)this + 28) > v2);
  }
  if (*((_DWORD *)this + 24))
  {
    uint64_t v5 = 0;
    do
    {
      fprintf(__stderrp, "NodeStack[%u]:\n", v5);
      unint64_t v6 = *(const swift::Demangle::__runtime::Node **)(*((void *)this + 11) + 8 * v5);
      memset(&v10, 0, sizeof(v10));
      printNode(&v10, v6, 0);
      std::string __p = v10;
      if ((v10.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        unint64_t v7 = &__p;
      }
      else {
        unint64_t v7 = (std::string *)v10.__r_.__value_.__r.__words[0];
      }
      fputs((const char *)v7, __stderrp);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      fputc(10, __stderrp);
      ++v5;
    }
    while (*((_DWORD *)this + 24) > v5);
  }
  return fprintf(__stderrp, "Position = %zd:\n%.*s\n%*s\n", *((void *)this + 9), *((void *)this + 8), *((const char **)this + 7), *((void *)this + 9) + 1, "^");
}

void swift::Demangle::__runtime::fatal(swift::Demangle::__runtime *this, char *a2, const char *a3, char *a4, ...)
{
  va_start(va, a4);
  swift::Demangle::__runtime::fatalv(this, a2, va, a4);
}

void swift::Demangle::__runtime::fatalv(swift::Demangle::__runtime *this, char *__format, va_list a3, char *a4)
{
}

void swift::Demangle::__runtime::warn(swift::Demangle::__runtime *this, char *a2, const char *a3, char *a4, ...)
{
  va_start(va, a4);
  swift::Demangle::__runtime::warnv(this, a2, va, a4);
}

void swift::Demangle::__runtime::warnv(swift::Demangle::__runtime *this, char *__format, va_list a3, char *a4)
{
  int v5 = vsnprintf(0, 0, __format, a3);
  if ((v5 & 0x80000000) == 0)
  {
    size_t v6 = (v5 + 1);
    unint64_t v7 = (char *)malloc_type_malloc(v6, 0xAB2EFD28uLL);
    if (v7)
    {
      unint64_t v8 = v7;
      if ((vsnprintf(v7, v6, __format, a3) & 0x80000000) == 0)
      {
        fputs(v8, __stderrp);
        fflush(__stderrp);
        asl_log(0, 0, 3, "%s", v8);
        free(v8);
        return;
      }
      free(v8);
    }
  }
  fputs("unable to format warning message", __stderrp);
  fflush(__stderrp);
  asl_log(0, 0, 3, "%s", "unable to format warning message");
}

void demangleFatal(char *__format, va_list a2, char *a3)
{
  int v4 = vsnprintf(0, 0, __format, a2);
  if ((v4 & 0x80000000) == 0)
  {
    size_t v6 = (v4 + 1);
    unint64_t v7 = (char *)malloc_type_malloc(v6, 0xAB2EFD28uLL);
    if (v7)
    {
      unint64_t v8 = v7;
      if ((vsnprintf(v7, v6, __format, a2) & 0x80000000) == 0)
      {
        reportError(v8, v9);
        abort();
      }
      free(v8);
    }
  }
  reportError("unable to format fatal error message", v5);
  abort();
}

void reportError(const char *a1, const char *a2)
{
  fputs(a1, __stderrp);
  fflush(__stderrp);
  asl_log(0, 0, 3, "%s", a1);
  int v4 = 0;
  unint64_t v8 = 0;
  for (int i = (void *)qword_CC078[0]; ; int i = v7)
  {
    if (v4)
    {
      free(v4);
      unint64_t v8 = 0;
    }
    if (i) {
      break;
    }
    size_t v6 = strdup(a1);
    unint64_t v7 = 0;
    unint64_t v8 = v6;
    atomic_compare_exchange_strong_explicit(qword_CC078, (unint64_t *)&v7, (unint64_t)v6, memory_order_release, memory_order_relaxed);
    if (!v7) {
      return;
    }
LABEL_3:
    int v4 = v8;
  }
  demangle_asprintf(&v8, v3, i, a1);
  unint64_t v7 = i;
  atomic_compare_exchange_strong_explicit(qword_CC078, (unint64_t *)&v7, (unint64_t)v8, memory_order_release, memory_order_relaxed);
  if (v7 != i) {
    goto LABEL_3;
  }
  if (malloc_size(i))
  {
    free(i);
  }
}

void demangle_asprintf(char **a1, const char *a2, ...)
{
  va_start(va, a2);
  int v3 = vsnprintf(0, 0, "%s%s", va);
  *a1 = 0;
  if ((v3 & 0x80000000) == 0)
  {
    size_t v4 = (v3 + 1);
    int v5 = (char *)malloc_type_malloc(v4, 0xAB2EFD28uLL);
    if (v5)
    {
      size_t v6 = v5;
      if (vsnprintf(v5, v4, "%s%s", va) < 0) {
        free(v6);
      }
      else {
        *a1 = v6;
      }
    }
  }
}

swift::Demangle::__runtime::Node *swift::Demangle::__runtime::demangleOldSymbolAsNode(_WORD *a1, size_t a2, swift::Demangle::__runtime::NodeFactory *a3)
{
  int v3 = 0;
  std::string __p = 0;
  unint64_t v144 = 0;
  uint64_t v145 = 0;
  __src = a1;
  size_t __len = a2;
  uint64_t v148 = a3;
  if (a2 < 2) {
    goto LABEL_4;
  }
  if (*a1 != 21599) {
    goto LABEL_3;
  }
  size_t v6 = a1 + 1;
  unint64_t v7 = a2 - 2;
  __src = a1 + 1;
  size_t __len = a2 - 2;
  Node = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(a3, 99);
  if (v7 < 2) {
    goto LABEL_228;
  }
  if (*v6 != 21332)
  {
    switch(*v6)
    {
      case 0x6F54:
        __src = v6 + 1;
        size_t __len = v7 - 2;
        size_t v9 = a3;
        __int16 v10 = 164;
        break;
      case 0x4F54:
        __src = v6 + 1;
        size_t __len = v7 - 2;
        size_t v9 = a3;
        __int16 v10 = 160;
        break;
      case 0x4454:
        __src = v6 + 1;
        size_t __len = v7 - 2;
        size_t v9 = a3;
        __int16 v10 = 55;
        break;
      case 0x6454:
        __src = v6 + 1;
        size_t __len = v7 - 2;
        size_t v9 = a3;
        __int16 v10 = 56;
        break;
      case 0x5654:
        __src = v6 + 1;
        size_t __len = v7 - 2;
        size_t v9 = a3;
        __int16 v10 = 256;
        break;
      default:
        goto LABEL_228;
    }
    unint64_t v132 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(v9, v10);
    swift::Demangle::__runtime::Node::addChild(Node, v132, a3);
LABEL_228:
    if (!v133) {
      goto LABEL_3;
    }
    swift::Demangle::__runtime::Node::addChild(Node, v133, v148);
    size_t v134 = __len;
    if (__len)
    {
      size_t v135 = v148;
      unint64_t v136 = __src;
      __src = (char *)__src + __len;
      size_t __len = 0;
      unint64_t v137 = (char *)*((void *)v148 + 1);
      if (!v137 || (unint64_t v138 = &v137[v134], (unint64_t)&v137[v134] > *((void *)v148 + 2)))
      {
        unint64_t v139 = 2 * *((void *)v148 + 4);
        if (v139 <= v134 + 1) {
          unint64_t v139 = v134 + 1;
        }
        *((void *)v148 + 4) = v139;
        unint64_t v140 = v139 + 8;
        uint64_t v141 = malloc_type_malloc(v139 + 8, 0xD0263BC5uLL);
        *uint64_t v141 = *((void *)v135 + 3);
        unint64_t v137 = (char *)(v141 + 1);
        *((void *)v135 + 2) = (char *)v141 + v140;
        *((void *)v135 + 3) = v141;
        unint64_t v138 = (char *)v141 + v134 + 8;
      }
      *((void *)v135 + 1) = v138;
      memmove(v137, v136, v134);
      NodeWithAllocatedText = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNodeWithAllocatedText(v135, 221, (uint64_t)v137, v134);
      swift::Demangle::__runtime::Node::addChild(Node, NodeWithAllocatedText, v148);
    }
    int v3 = Node;
    goto LABEL_4;
  }
  int v11 = (unsigned __int8 *)(v6 + 1);
  size_t v12 = v7 - 2;
  __src = v6 + 1;
  size_t __len = v7 - 2;
  if (v7 == 2) {
    goto LABEL_3;
  }
  unint64_t v13 = "u16";
  while (1)
  {
    int v14 = *v11;
    switch(v14)
    {
      case 'f':
        __src = v11 + 1;
        size_t __len = v12 - 1;
        float v16 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(v148, 77);
        size_t v17 = __len;
        if (__len)
        {
          BOOL v18 = (char *)__src;
          int v19 = *(unsigned __int8 *)__src;
          if (v19 == 113)
          {
            __src = (char *)__src + 1;
            --__len;
            unint64_t v20 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(v148, 217);
            swift::Demangle::__runtime::Node::addChild(v16, v20, v148);
            size_t v17 = __len;
            size_t v21 = v148;
            if (!__len)
            {
              uint64_t v32 = 4294967294;
              goto LABEL_46;
            }
            BOOL v18 = (char *)__src;
            LOBYTE(v19) = *(unsigned char *)__src;
          }
          else
          {
            size_t v21 = v148;
          }
          __src = v18 + 1;
          size_t __len = v17 - 1;
          uint64_t v32 = ((char)v19 - 48);
        }
        else
        {
          size_t v21 = v148;
          uint64_t v32 = 4294967294;
        }
LABEL_46:
        unsigned int v33 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(v21, 216, v32);
        while (1)
        {
          while (1)
          {
            swift::Demangle::__runtime::Node::addChild(v16, v33, v148);
            size_t v29 = __len;
            if (__len)
            {
              unint64_t v30 = (char *)__src;
              if (*(unsigned char *)__src == 95) {
                goto LABEL_217;
              }
            }
            unsigned int v33 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(v148, 78);
            size_t v34 = __len;
            if (__len < 2)
            {
              if (!__len) {
                goto LABEL_3;
              }
              size_t v35 = (unsigned __int8 *)__src;
              goto LABEL_52;
            }
            size_t v35 = (unsigned __int8 *)__src;
            if (*(_WORD *)__src == 24430)
            {
              unint64_t v39 = (char *)__src + 2;
              size_t v40 = __len - 2;
              goto LABEL_146;
            }
            if (*(_WORD *)__src == 28771) {
              break;
            }
            switch(*(_WORD *)__src)
            {
              case 0x6C63:
                __src = (char *)__src + 2;
                __len -= 2;
                if (!v43) {
                  goto LABEL_3;
                }
                unint64_t v44 = v43;
                unint64_t v45 = v13;
                unint64_t v46 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(v148, 80, 5);
                swift::Demangle::__runtime::Node::addChild(v33, v46, v148);
                uint64_t v47 = v148;
                size_t v48 = *(void *)(v44 + 8);
                if (v48)
                {
                  unint64_t v49 = *(const void **)v44;
                  unint64_t v50 = (char *)*((void *)v148 + 1);
                  if (!v50 || (size_t v51 = &v50[v48], (unint64_t)&v50[v48] > *((void *)v148 + 2)))
                  {
                    unint64_t v52 = 2 * *((void *)v148 + 4);
                    if (v52 <= v48 + 1) {
                      unint64_t v52 = v48 + 1;
                    }
                    *((void *)v148 + 4) = v52;
                    unint64_t v53 = v52 + 8;
                    unint64_t v54 = malloc_type_malloc(v52 + 8, 0xD0263BC5uLL);
                    void *v54 = *((void *)v47 + 3);
                    unint64_t v50 = (char *)(v54 + 1);
                    *((void *)v47 + 2) = (char *)v54 + v53;
                    *((void *)v47 + 3) = v54;
                    size_t v51 = (char *)v54 + v48 + 8;
                  }
                  *((void *)v47 + 1) = v51;
                  memmove(v50, v49, v48);
                }
                else
                {
                  unint64_t v50 = 0;
                }
                size_t v79 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNodeWithAllocatedText(v47, 81, (uint64_t)v50, v48);
                swift::Demangle::__runtime::Node::addChild(v33, v79, v148);
                unint64_t v13 = v45;
                if (__len)
                {
LABEL_138:
                  if (*(unsigned char *)__src != 95) {
                    goto LABEL_139;
                  }
                }
                else
                {
LABEL_139:
                  while (1)
                  {
                    if (!v80) {
                      break;
                    }
                    unint64_t v81 = v80;
                    unint64_t v82 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(v148, 232);
                    swift::Demangle::__runtime::Node::addChild(v82, v81, v148);
                    if (!v82) {
                      break;
                    }
                    swift::Demangle::__runtime::Node::addChild(v33, v82, v148);
                    if (__len) {
                      goto LABEL_138;
                    }
                  }
                }
                if (!__len || *(unsigned char *)__src != 95) {
                  goto LABEL_3;
                }
                unint64_t v39 = (char *)__src + 1;
                size_t v40 = __len - 1;
LABEL_146:
                __src = v39;
                size_t __len = v40;
                break;
              case 0x5F69:
                __src = (char *)__src + 2;
                __len -= 2;
                unint64_t v38 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(v148, 80, 6);
                if (!v38) {
                  goto LABEL_3;
                }
                goto LABEL_76;
              case 0x5F6B:
                __src = (char *)__src + 2;
                __len -= 2;
                unint64_t v38 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(v148, 80, 7);
                if (!v38) {
                  goto LABEL_3;
                }
                goto LABEL_76;
              case 0x5F72:
                __src = (char *)__src + 2;
                __len -= 2;
                unint64_t v38 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(v148, 80, 8);
                if (!v38) {
                  goto LABEL_3;
                }
                goto LABEL_76;
              default:
LABEL_52:
                int v36 = *v35;
                if (v36 == 100)
                {
                  ++v35;
                  size_t v34 = __len - 1;
                  __src = v35;
                  size_t __len = v34;
                  if (!v34) {
                    goto LABEL_3;
                  }
                  int v36 = *v35;
                  uint64_t v37 = 64;
                }
                else
                {
                  uint64_t v37 = 0;
                }
                if (v36 == 103)
                {
                  ++v35;
                  --v34;
                  __src = v35;
                  size_t __len = v34;
                  if (!v34) {
                    goto LABEL_3;
                  }
                  v37 |= 0x80uLL;
                  int v36 = *v35;
                }
                if (v36 == 111)
                {
                  ++v35;
                  --v34;
                  __src = v35;
                  size_t __len = v34;
                  if (!v34) {
                    goto LABEL_3;
                  }
                  v37 |= 0x200uLL;
                  int v36 = *v35;
                }
                if (v36 == 115)
                {
                  ++v35;
                  --v34;
                  __src = v35;
                  size_t __len = v34;
                  if (!v34) {
                    goto LABEL_3;
                  }
                  v37 |= 0x100uLL;
                  int v36 = *v35;
                }
                if (v36 != 95) {
                  goto LABEL_3;
                }
                __src = v35 + 1;
                size_t __len = v34 - 1;
                if (!v37) {
                  goto LABEL_3;
                }
                unint64_t v38 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(v148, 80, v37);
                if (!v38) {
                  goto LABEL_3;
                }
LABEL_76:
                swift::Demangle::__runtime::Node::addChild(v33, v38, v148);
                break;
            }
          }
          size_t v41 = (char *)__src + 2;
          size_t v42 = __len - 2;
          __src = (char *)__src + 2;
          __len -= 2;
          if (v34 - 2 >= 2)
          {
            if (*v41 != 29286) {
              goto LABEL_90;
            }
            if (v42 >= 2) {
              uint64_t v83 = 2;
            }
            else {
              uint64_t v83 = v42;
            }
            __src = (char *)v41 + v83;
            size_t __len = v42 - v83;
            if (!v84 || !__len || *(unsigned char *)__src != 95) {
              goto LABEL_3;
            }
            unint64_t v57 = v84;
            int v58 = v13;
            __src = (char *)__src + 1;
            --__len;
            int v59 = v148;
            uint64_t v60 = 0;
LABEL_154:
            size_t v85 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(v59, 80, v60);
            swift::Demangle::__runtime::Node::addChild(v33, v85, v148);
            BOOL v86 = v148;
            size_t v87 = *(void *)(v57 + 8);
            if (v87)
            {
              unint64_t v88 = *(const void **)v57;
              unint64_t v89 = (char *)*((void *)v148 + 1);
              if (!v89 || (size_t v90 = &v89[v87], (unint64_t)&v89[v87] > *((void *)v148 + 2)))
              {
                unint64_t v91 = 2 * *((void *)v148 + 4);
                if (v91 <= v87 + 1) {
                  unint64_t v91 = v87 + 1;
                }
                *((void *)v148 + 4) = v91;
                unint64_t v92 = v91 + 8;
                unint64_t v93 = malloc_type_malloc(v91 + 8, 0xD0263BC5uLL);
                void *v93 = *((void *)v86 + 3);
                unint64_t v89 = (char *)(v93 + 1);
                *((void *)v86 + 2) = (char *)v93 + v92;
                *((void *)v86 + 3) = v93;
                size_t v90 = (char *)v93 + v87 + 8;
              }
              *((void *)v86 + 1) = v90;
              memmove(v89, v88, v87);
            }
            else
            {
              unint64_t v89 = 0;
            }
            uint64_t v94 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNodeWithAllocatedText(v86, 81, (uint64_t)v89, v87);
            swift::Demangle::__runtime::Node::addChild(v33, v94, v148);
            unint64_t v13 = v58;
          }
          else
          {
            if (v34 < 3) {
              goto LABEL_3;
            }
LABEL_90:
            int v55 = *(unsigned __int8 *)v41;
            if (v55 == 105)
            {
              uint64_t v61 = (unsigned __int8 *)v41 + 1;
              memset(&v149, 0, sizeof(v149));
              size_t v62 = v42 - 1;
              __src = (char *)v41 + 1;
              size_t __len = v62;
              if (v62)
              {
                while (1)
                {
                  int v63 = *v61;
                  if (v63 == 95) {
                    break;
                  }
                  std::string::push_back(&v149, v63);
                  uint64_t v61 = (unsigned __int8 *)__src;
                  if (__len) {
                    uint64_t v61 = (unsigned __int8 *)__src + 1;
                  }
                  size_t v62 = __len - (__len != 0);
                  __src = v61;
                  size_t __len = v62;
                  if (!v62) {
                    goto LABEL_181;
                  }
                }
                __src = v61 + 1;
                size_t __len = v62 - 1;
                size_t v95 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(v148, 80, 2);
                swift::Demangle::__runtime::Node::addChild(v33, v95, v148);
                char v96 = v148;
                if ((v149.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  char v97 = &v149;
                }
                else {
                  char v97 = (std::string *)v149.__r_.__value_.__r.__words[0];
                }
                if ((v149.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  std::string::size_type size = HIBYTE(v149.__r_.__value_.__r.__words[2]);
                }
                else {
                  std::string::size_type size = v149.__r_.__value_.__l.__size_;
                }
                if (size)
                {
                  uint64_t v99 = (char *)*((void *)v148 + 1);
                  if (!v99 || (unint64_t v100 = &v99[size], (unint64_t)&v99[size] > *((void *)v148 + 2)))
                  {
                    unint64_t v101 = 2 * *((void *)v148 + 4);
                    if (v101 <= size + 1) {
                      unint64_t v101 = size + 1;
                    }
                    *((void *)v148 + 4) = v101;
                    unint64_t v102 = v101 + 8;
                    size_t v103 = malloc_type_malloc(v101 + 8, 0xD0263BC5uLL);
                    void *v103 = *((void *)v96 + 3);
                    uint64_t v99 = (char *)(v103 + 1);
                    *((void *)v96 + 2) = (char *)v103 + v102;
                    *((void *)v96 + 3) = v103;
                    unint64_t v100 = (char *)v103 + size + 8;
                  }
                  *((void *)v96 + 1) = v100;
                  memmove(v99, v97, size);
                }
                else
                {
                  uint64_t v99 = 0;
                }
                uint64_t v108 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNodeWithAllocatedText(v96, 81, (uint64_t)v99, size);
                swift::Demangle::__runtime::Node::addChild(v33, v108, v148);
                char v107 = 1;
                unint64_t v13 = "u16";
                goto LABEL_182;
              }
            }
            else
            {
              if (v55 == 103)
              {
                __src = (char *)v41 + 1;
                size_t __len = v42 - 1;
                if (!v56 || !__len || *(unsigned char *)__src != 95) {
                  goto LABEL_3;
                }
                unint64_t v57 = v56;
                int v58 = v13;
                __src = (char *)__src + 1;
                --__len;
                int v59 = v148;
                uint64_t v60 = 1;
                goto LABEL_154;
              }
              if (v42 >= 2 && *v41 == 27750)
              {
                unint64_t v104 = (unsigned __int8 *)(v41 + 1);
                size_t v105 = v42 - 2;
                __src = v104;
                size_t __len = v42 - 2;
                memset(&v149, 0, sizeof(v149));
                if (v42 >= 3)
                {
                  while (1)
                  {
                    int v106 = *v104;
                    if (v106 == 95) {
                      break;
                    }
                    std::string::push_back(&v149, v106);
                    unint64_t v104 = (unsigned __int8 *)__src;
                    if (__len) {
                      unint64_t v104 = (unsigned __int8 *)__src + 1;
                    }
                    size_t v105 = __len - (__len != 0);
                    __src = v104;
                    size_t __len = v105;
                    if (!v105) {
                      goto LABEL_181;
                    }
                  }
                  if (v105)
                  {
                    __src = v104 + 1;
                    size_t __len = v105 - 1;
                    unint64_t v109 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(v148, 80, 3);
                    swift::Demangle::__runtime::Node::addChild(v33, v109, v148);
                    unint64_t v110 = v148;
                    if ((v149.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                      unint64_t v111 = &v149;
                    }
                    else {
                      unint64_t v111 = (std::string *)v149.__r_.__value_.__r.__words[0];
                    }
                    if ((v149.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                      size_t v112 = HIBYTE(v149.__r_.__value_.__r.__words[2]);
                    }
                    else {
                      size_t v112 = v149.__r_.__value_.__l.__size_;
                    }
                    if (v112)
                    {
                      size_t v113 = (char *)*((void *)v148 + 1);
                      if (!v113 || (unint64_t v114 = &v113[v112], (unint64_t)&v113[v112] > *((void *)v148 + 2)))
                      {
                        unint64_t v115 = 2 * *((void *)v148 + 4);
                        if (v115 <= v112 + 1) {
                          unint64_t v115 = v112 + 1;
                        }
                        *((void *)v148 + 4) = v115;
                        unint64_t v116 = v115 + 8;
                        int v117 = malloc_type_malloc(v115 + 8, 0xD0263BC5uLL);
                        *int v117 = *((void *)v110 + 3);
                        size_t v113 = (char *)(v117 + 1);
                        *((void *)v110 + 2) = (char *)v117 + v116;
                        *((void *)v110 + 3) = v117;
                        unint64_t v114 = (char *)v117 + v112 + 8;
                      }
                      *((void *)v110 + 1) = v114;
                      memmove(v113, v111, v112);
                    }
                    else
                    {
                      size_t v113 = 0;
                    }
                    size_t v118 = v110;
                    uint64_t v119 = (uint64_t)v113;
                    uint64_t v120 = v112;
                    goto LABEL_215;
                  }
                  goto LABEL_202;
                }
              }
              else
              {
                if (v55 != 115) {
                  goto LABEL_3;
                }
                __src = (char *)v41 + 1;
                size_t __len = v42 - 1;
                if (v42 == 1) {
                  goto LABEL_3;
                }
                if (*((unsigned char *)v41 + 1) != 101) {
                  goto LABEL_3;
                }
                __src = v41 + 1;
                size_t __len = v42 - 2;
                if (v42 == 2) {
                  goto LABEL_3;
                }
                int v64 = *((unsigned __int8 *)v41 + 2);
                if ((v64 - 50) < 0xFFFFFFFE) {
                  goto LABEL_3;
                }
                memset(&v149, 0, sizeof(v149));
                if (v64 == 48) {
                  size_t v65 = "u8";
                }
                else {
                  size_t v65 = v13;
                }
                std::string::append(&v149, v65);
                unsigned int v66 = __src;
                if (__len) {
                  unsigned int v66 = (char *)__src + 1;
                }
                size_t v67 = __len - (__len != 0);
                __src = v66;
                size_t __len = v67;
                if (v67)
                {
                  if (*v66 == 118)
                  {
                    __src = v66 + 1;
                    size_t __len = v67 - 1;
                    if (v68)
                    {
                      if (__len)
                      {
                        if (*(unsigned char *)__src == 95)
                        {
                          unint64_t v69 = v68;
                          __src = (char *)__src + 1;
                          --__len;
                          size_t v70 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(v148, 80, 4);
                          swift::Demangle::__runtime::Node::addChild(v33, v70, v148);
                          unint64_t v71 = v148;
                          if ((v149.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                            uint64_t v72 = &v149;
                          }
                          else {
                            uint64_t v72 = (std::string *)v149.__r_.__value_.__r.__words[0];
                          }
                          if ((v149.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                            std::string::size_type v73 = HIBYTE(v149.__r_.__value_.__r.__words[2]);
                          }
                          else {
                            std::string::size_type v73 = v149.__r_.__value_.__l.__size_;
                          }
                          if (v73)
                          {
                            unint64_t v74 = (char *)*((void *)v148 + 1);
                            if (!v74 || (unint64_t v75 = &v74[v73], (unint64_t)&v74[v73] > *((void *)v148 + 2)))
                            {
                              unint64_t v76 = 2 * *((void *)v148 + 4);
                              if (v76 <= v73 + 1) {
                                unint64_t v76 = v73 + 1;
                              }
                              *((void *)v148 + 4) = v76;
                              unint64_t v77 = v76 + 8;
                              uint64_t v78 = malloc_type_malloc(v76 + 8, 0xD0263BC5uLL);
                              *uint64_t v78 = *((void *)v71 + 3);
                              unint64_t v74 = (char *)(v78 + 1);
                              *((void *)v71 + 2) = (char *)v78 + v77;
                              *((void *)v71 + 3) = v78;
                              unint64_t v75 = (char *)v78 + v73 + 8;
                            }
                            *((void *)v71 + 1) = v75;
                            memmove(v74, v72, v73);
                          }
                          else
                          {
                            unint64_t v74 = 0;
                          }
                          unint64_t v121 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNodeWithAllocatedText(v71, 81, (uint64_t)v74, v73);
                          swift::Demangle::__runtime::Node::addChild(v33, v121, v148);
                          uint64_t v122 = v148;
                          size_t v123 = *(void *)(v69 + 8);
                          if (v123)
                          {
                            unint64_t v124 = *(const void **)v69;
                            unint64_t v125 = (char *)*((void *)v148 + 1);
                            if (!v125 || (unint64_t v126 = &v125[v123], (unint64_t)&v125[v123] > *((void *)v148 + 2)))
                            {
                              unint64_t v127 = 2 * *((void *)v148 + 4);
                              if (v127 <= v123 + 1) {
                                unint64_t v127 = v123 + 1;
                              }
                              *((void *)v148 + 4) = v127;
                              unint64_t v128 = v127 + 8;
                              unint64_t v129 = malloc_type_malloc(v127 + 8, 0xD0263BC5uLL);
                              *unint64_t v129 = *((void *)v122 + 3);
                              unint64_t v125 = (char *)(v129 + 1);
                              *((void *)v122 + 2) = (char *)v129 + v128;
                              *((void *)v122 + 3) = v129;
                              unint64_t v126 = (char *)v129 + v123 + 8;
                            }
                            *((void *)v122 + 1) = v126;
                            memmove(v125, v124, v123);
                          }
                          else
                          {
                            unint64_t v125 = 0;
                          }
                          size_t v118 = v122;
                          uint64_t v119 = (uint64_t)v125;
                          uint64_t v120 = v123;
LABEL_215:
                          unint64_t v130 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNodeWithAllocatedText(v118, 81, v119, v120);
                          swift::Demangle::__runtime::Node::addChild(v33, v130, v148);
                          char v107 = 1;
                          unint64_t v13 = "u16";
                          goto LABEL_182;
                        }
LABEL_202:
                        char v107 = 0;
                        goto LABEL_182;
                      }
                    }
                  }
                }
              }
            }
LABEL_181:
            char v107 = 0;
LABEL_182:
            if (SHIBYTE(v149.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v149.__r_.__value_.__l.__data_);
            }
            int v3 = 0;
            if ((v107 & 1) == 0) {
              goto LABEL_4;
            }
          }
        }
      case 'g':
        __int16 v15 = 91;
        break;
      case 'r':
        __int16 v15 = 92;
        break;
      default:
        goto LABEL_3;
    }
    __src = v11 + 1;
    size_t __len = v12 - 1;
    float v16 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(v148, v15);
    size_t v22 = __len;
    if (!__len)
    {
      uint64_t v26 = v148;
      uint64_t v27 = 4294967294;
      goto LABEL_33;
    }
    unint64_t v23 = (char *)__src;
    int v24 = *(unsigned __int8 *)__src;
    if (v24 != 113)
    {
      uint64_t v26 = v148;
      goto LABEL_32;
    }
    __src = (char *)__src + 1;
    --__len;
    uint64_t v25 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(v148, 217);
    swift::Demangle::__runtime::Node::addChild(v16, v25, v148);
    size_t v22 = __len;
    uint64_t v26 = v148;
    if (__len)
    {
      unint64_t v23 = (char *)__src;
      LOBYTE(v24) = *(unsigned char *)__src;
LABEL_32:
      __src = v23 + 1;
      size_t __len = v22 - 1;
      uint64_t v27 = ((char)v24 - 48);
      goto LABEL_33;
    }
    uint64_t v27 = 4294967294;
LABEL_33:
    unint64_t v28 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(v26, 216, v27);
    while (1)
    {
      swift::Demangle::__runtime::Node::addChild(v16, v28, v148);
      size_t v29 = __len;
      if (__len)
      {
        unint64_t v30 = (char *)__src;
        if (*(unsigned char *)__src == 95) {
          break;
        }
      }
      unint64_t v28 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(v148, 94);
      if (!v3) {
        goto LABEL_4;
      }
      int v31 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(v148, 232);
      swift::Demangle::__runtime::Node::addChild(v31, v3, v148);
      if (!v31) {
        goto LABEL_3;
      }
      while (1)
      {
        swift::Demangle::__runtime::Node::addChild(v28, v31, v148);
        if (__len)
        {
          if (*(unsigned char *)__src == 95) {
            break;
          }
        }
        int v3 = 0;
        if (!v31) {
          goto LABEL_4;
        }
      }
      __src = (char *)__src + 1;
      --__len;
    }
LABEL_217:
    __src = v30 + 1;
    size_t __len = v29 - 1;
    if (!v16) {
      goto LABEL_3;
    }
    swift::Demangle::__runtime::Node::addChild(Node, v16, v148);
    unint64_t v144 = __p;
    if (__len < 4) {
      break;
    }
    int v131 = __src;
    if (*(_DWORD *)__src != 1398035551) {
      goto LABEL_239;
    }
    int v3 = 0;
    int v11 = (unsigned __int8 *)__src + 4;
    size_t v12 = __len - 4;
    __src = (char *)__src + 4;
    size_t __len = v12;
    if (!v12) {
      goto LABEL_4;
    }
  }
  if (__len >= 2)
  {
    int v131 = __src;
LABEL_239:
    if (*v131 == 21599)
    {
      __src = v131 + 1;
      __len -= 2;
      goto LABEL_228;
    }
  }
LABEL_3:
  int v3 = 0;
LABEL_4:
  if (__p)
  {
    unint64_t v144 = __p;
    operator delete(__p);
  }
  return v3;
}

swift::Demangle::__runtime::Node *anonymous namespace'::OldDemangler::demangleGlobal(_anonymous_namespace_::OldDemangler *this, unsigned int a2)
{
  if (a2 > 0x400) {
    return 0;
  }
  unint64_t v3 = *((void *)this + 4);
  if (!v3) {
    return 0;
  }
  int v5 = (unsigned char *)*((void *)this + 3);
  if (*v5 != 77)
  {
    unint64_t v8 = v3 - 2;
    if (v3 < 2 || *(_WORD *)v5 != 16720)
    {
      switch(*v5)
      {
        case 'T':
          unint64_t v9 = v3 - 1;
          *((void *)this + 3) = v5 + 1;
          *((void *)this + 4) = v9;
          if (!v9) {
            return 0;
          }
          int v10 = v5[1];
          switch(v10)
          {
            case 'r':
              *((void *)this + 3) = v5 + 2;
              *((void *)this + 4) = v8;
              int v11 = (void *)*((void *)this + 5);
              __int16 v12 = 200;
              break;
            case 'W':
              *((void *)this + 3) = v5 + 2;
              *((void *)this + 4) = v8;
              Node = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(*((void **)this + 5), 196);
              unsigned int v36 = a2 + 1;
              if (v37)
              {
                swift::Demangle::__runtime::Node::addChild(Node, v37, *((swift::Demangle::__runtime::NodeFactory **)this + 5));
                if (v14) {
                  goto LABEL_17;
                }
              }
              return 0;
            case 'R':
              *((void *)this + 3) = v5 + 2;
              *((void *)this + 4) = v8;
              int v11 = (void *)*((void *)this + 5);
              __int16 v12 = 201;
              break;
            default:
              return 0;
          }
          Node = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(v11, v12);
            return 0;
          return Node;
        case 'W':
          unint64_t v22 = v3 - 1;
          *((void *)this + 3) = v5 + 1;
          *((void *)this + 4) = v22;
          Node = 0;
          if (v22)
          {
            switch(v5[1])
            {
              case 'G':
                *((void *)this + 3) = v5 + 2;
                *((void *)this + 4) = v8;
                unint64_t v23 = (void *)*((void *)this + 5);
                __int16 v24 = 88;
                goto LABEL_67;
              case 'I':
                *((void *)this + 3) = v5 + 2;
                *((void *)this + 4) = v8;
                unint64_t v23 = (void *)*((void *)this + 5);
                __int16 v24 = 89;
                goto LABEL_67;
              case 'L':
                *((void *)this + 3) = v5 + 2;
                *((void *)this + 4) = v8;
                unint64_t v38 = (void *)*((void *)this + 5);
                __int16 v39 = 136;
                goto LABEL_70;
              case 'P':
                *((void *)this + 3) = v5 + 2;
                *((void *)this + 4) = v8;
                unint64_t v23 = (void *)*((void *)this + 5);
                __int16 v24 = 197;
                goto LABEL_67;
              case 'T':
                *((void *)this + 3) = v5 + 2;
                *((void *)this + 4) = v8;
                Node = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(*((void **)this + 5), 9);
                unsigned int v40 = a2 + 1;
                if (!v41) {
                  return 0;
                }
                swift::Demangle::__runtime::Node::addChild(Node, v41, *((swift::Demangle::__runtime::NodeFactory **)this + 5));
                if (!v42) {
                  return 0;
                }
                swift::Demangle::__runtime::Node::addChild(Node, v42, *((swift::Demangle::__runtime::NodeFactory **)this + 5));
                if (!v14) {
                  return 0;
                }
                goto LABEL_17;
              case 'V':
                *((void *)this + 3) = v5 + 2;
                *((void *)this + 4) = v8;
                size_t v6 = (void *)*((void *)this + 5);
                __int16 v7 = 253;
                goto LABEL_16;
              case 'a':
                *((void *)this + 3) = v5 + 2;
                *((void *)this + 4) = v8;
                unint64_t v23 = (void *)*((void *)this + 5);
                __int16 v24 = 198;
LABEL_67:
                Node = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(v23, v24);
                if (!v14) {
                  return 0;
                }
                goto LABEL_17;
              case 'l':
                *((void *)this + 3) = v5 + 2;
                *((void *)this + 4) = v8;
                unint64_t v38 = (void *)*((void *)this + 5);
                __int16 v39 = 135;
LABEL_70:
                Node = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(v38, v39);
                unsigned int v43 = a2 + 1;
                if (!v44) {
                  return 0;
                }
                swift::Demangle::__runtime::Node::addChild(Node, v44, *((swift::Demangle::__runtime::NodeFactory **)this + 5));
                if (!v14) {
                  return 0;
                }
                goto LABEL_17;
              case 't':
                *((void *)this + 3) = v5 + 2;
                *((void *)this + 4) = v8;
                Node = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(*((void **)this + 5), 6);
                if (!v45) {
                  return 0;
                }
                swift::Demangle::__runtime::Node::addChild(Node, v45, *((swift::Demangle::__runtime::NodeFactory **)this + 5));
                if (!v14) {
                  return 0;
                }
                goto LABEL_17;
              case 'v':
                *((void *)this + 3) = v5 + 2;
                *((void *)this + 4) = v8;
                unint64_t v46 = swift::Demangle::__runtime::NodeFactory::createNode(*((void **)this + 5), 73);
                uint64_t v47 = *((void *)this + 4);
                if (!v47) {
                  return 0;
                }
                size_t v48 = (swift::Demangle::__runtime::Node *)v46;
                unint64_t v49 = (unsigned __int8 *)*((void *)this + 3);
                int v50 = *v49;
                if (v50 == 100)
                {
                  uint64_t v51 = 0;
                }
                else
                {
                  Node = 0;
                  if (v50 != 105) {
                    return Node;
                  }
                  uint64_t v51 = 1;
                }
                *((void *)this + 3) = v49 + 1;
                *((void *)this + 4) = v47 - 1;
                unint64_t v52 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(*((void **)this + 5), 52, v51);
                swift::Demangle::__runtime::Node::addChild(v48, v52, *((swift::Demangle::__runtime::NodeFactory **)this + 5));
                if (!v53) {
                  return 0;
                }
                swift::Demangle::__runtime::Node::addChild(v48, v53, *((swift::Demangle::__runtime::NodeFactory **)this + 5));
                Node = v48;
                break;
              default:
                return Node;
            }
          }
          return Node;
        case 't':
          *((void *)this + 3) = v5 + 1;
          *((void *)this + 4) = v3 - 1;
          uint64_t v25 = (void *)*((void *)this + 5);
          __int16 v26 = 236;
LABEL_43:
          Node = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(v25, v26);
          if (!v33) {
            return 0;
          }
          size_t v34 = v33;
          size_t v35 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(*((void **)this + 5), 232);
          swift::Demangle::__runtime::Node::addChild(v35, v34, *((swift::Demangle::__runtime::NodeFactory **)this + 5));
          if (!v35) {
            return 0;
          }
          float v16 = (swift::Demangle::__runtime::NodeFactory *)*((void *)this + 5);
          size_t v17 = Node;
          __int16 v15 = v35;
          goto LABEL_18;
        case 'w':
          *((void *)this + 3) = v5 + 1;
          *((void *)this + 4) = v3 - 1;
          if ((v27 & 0xFF00000000) == 0) {
            return 0;
          }
          unsigned int v28 = v27;
          Node = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(*((void **)this + 5), 252);
          size_t v29 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(*((void **)this + 5), 102, v28);
          swift::Demangle::__runtime::Node::addChild(Node, v29, *((swift::Demangle::__runtime::NodeFactory **)this + 5));
          if (!v14) {
            return 0;
          }
          goto LABEL_17;
        default:
          unsigned int v20 = a2 + 1;
      }
    }
    BOOL v18 = v5 + 2;
    *((void *)this + 3) = v18;
    *((void *)this + 4) = v3 - 2;
    if (v3 >= 3 && *v18 == 111)
    {
      *((void *)this + 3) = v18 + 1;
      *((void *)this + 4) = v3 - 3;
      __int16 v19 = 171;
    }
    else
    {
      __int16 v19 = 170;
    }
    Node = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(*((void **)this + 5), v19);
    unint64_t v30 = *((void *)this + 4);
    if (v30 < 3) {
      return Node;
    }
    uint64_t v31 = *((void *)this + 3);
    if (*(_WORD *)v31 != 24415 || *(unsigned char *)(v31 + 2) != 84) {
      return Node;
    }
    *((void *)this + 3) = v31 + 3;
    *((void *)this + 4) = v30 - 3;
    if (v14) {
      goto LABEL_17;
    }
    return 0;
  }
  *((void *)this + 3) = v5 + 1;
  *((void *)this + 4) = v3 - 1;
  if (v3 != 1)
  {
    switch(v5[1])
    {
      case 'L':
        *((void *)this + 3) = v5 + 2;
        *((void *)this + 4) = v3 - 2;
        size_t v6 = (void *)*((void *)this + 5);
        __int16 v7 = 244;
        goto LABEL_16;
      case 'P':
        *((void *)this + 3) = v5 + 2;
        *((void *)this + 4) = v3 - 2;
        uint64_t v25 = (void *)*((void *)this + 5);
        __int16 v26 = 97;
        goto LABEL_43;
      case 'a':
        *((void *)this + 3) = v5 + 2;
        *((void *)this + 4) = v3 - 2;
        uint64_t v25 = (void *)*((void *)this + 5);
        __int16 v26 = 238;
        goto LABEL_43;
      case 'f':
        *((void *)this + 3) = v5 + 2;
        *((void *)this + 4) = v3 - 2;
        size_t v6 = (void *)*((void *)this + 5);
        __int16 v7 = 75;
        goto LABEL_16;
      case 'm':
        *((void *)this + 3) = v5 + 2;
        *((void *)this + 4) = v3 - 2;
        size_t v6 = (void *)*((void *)this + 5);
        __int16 v7 = 147;
        goto LABEL_16;
      case 'n':
        *((void *)this + 3) = v5 + 2;
        *((void *)this + 4) = v3 - 2;
        size_t v6 = (void *)*((void *)this + 5);
        __int16 v7 = 158;
        goto LABEL_16;
      case 'p':
        *((void *)this + 3) = v5 + 2;
        *((void *)this + 4) = v3 - 2;
        Node = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(*((void **)this + 5), 186);
        if (!v14) {
          return 0;
        }
        goto LABEL_17;
      default:
        break;
    }
  }
  size_t v6 = (void *)*((void *)this + 5);
  __int16 v7 = 237;
LABEL_16:
  Node = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(v6, v7);
  if (!v14) {
    return 0;
  }
LABEL_17:
  __int16 v15 = (swift::Demangle::__runtime::Node *)v14;
  float v16 = (swift::Demangle::__runtime::NodeFactory *)*((void *)this + 5);
  size_t v17 = Node;
LABEL_18:
  swift::Demangle::__runtime::Node::addChild(v17, v15, v16);
  return Node;
}

swift::Demangle::__runtime::Node *anonymous namespace'::OldDemangler::demangleType(swift::Demangle::__runtime::NodeFactory **this, unsigned int a2)
{
  if (!v3) {
    return 0;
  }
  size_t v4 = v3;
  Node = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(this[5], 232);
  swift::Demangle::__runtime::Node::addChild(Node, v4, this[5]);
  return Node;
}

swift::Demangle::__runtime::Node *anonymous namespace'::OldDemangler::demangleProtocolConformance(swift::Demangle::__runtime::NodeFactory **this, int a2)
{
  unsigned int v3 = a2 + 1;
  if (!v4) {
    return 0;
  }
  int v5 = v4;
  Node = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(this[5], 232);
  swift::Demangle::__runtime::Node::addChild(Node, v5, this[5]);
  if (!Node) {
    return 0;
  }
  if (!v7) {
    return 0;
  }
  unint64_t v8 = v7;
  unint64_t v9 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(this[5], 232);
  swift::Demangle::__runtime::Node::addChild(v9, v8, this[5]);
  if (!v9) {
    return 0;
  }
  if (!v10) {
    return 0;
  }
  int v11 = v10;
  __int16 v12 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(this[5], 182);
  swift::Demangle::__runtime::Node::addChild(v12, Node, this[5]);
  swift::Demangle::__runtime::Node::addChild(v12, v9, this[5]);
  swift::Demangle::__runtime::Node::addChild(v12, v11, this[5]);
  return v12;
}

swift::Demangle::__runtime::Node *anonymous namespace'::OldDemangler::demangleTypeImpl(_anonymous_namespace_::OldDemangler *this, unsigned int a2)
{
  if (a2 <= 0x400)
  {
    uint64_t v3 = *((void *)this + 4);
    if (v3)
    {
      int v5 = (char *)*((void *)this + 3);
      int v8 = *v5;
      size_t v6 = v5 + 1;
      char v7 = *v5;
      *((void *)this + 3) = v5 + 1;
      *((void *)this + 4) = v3 - 1;
      switch(v8)
      {
        case 'B':
          unint64_t v9 = 0;
          if (v3 == 1) {
            return v9;
          }
          int v10 = v5[1];
          *((void *)this + 3) = v5 + 2;
          *((void *)this + 4) = v3 - 2;
          switch(v10)
          {
            case 'B':
              int v11 = (void *)*((void *)this + 5);
              __int16 v12 = "Builtin.UnsafeValueBuffer";
              goto LABEL_149;
            case 'O':
              int v11 = (void *)*((void *)this + 5);
              __int16 v12 = "Builtin.UnknownObject";
              goto LABEL_149;
            case 'b':
              int v11 = (void *)*((void *)this + 5);
              __int16 v12 = "Builtin.BridgeObject";
              goto LABEL_149;
            case 'f':
              unint64_t v98 = 0;
                return 0;
              int v64 = (void *)*((void *)this + 5);
              memset(&v97, 0, sizeof(v97));
              size_t v65 = "Builtin.FPIEEE";
              std::string::size_type v66 = 14;
              goto LABEL_126;
            case 'i':
              unint64_t v98 = 0;
                return 0;
              int v64 = (void *)*((void *)this + 5);
              memset(&v97, 0, sizeof(v97));
              size_t v65 = "Builtin.Int";
              std::string::size_type v66 = 11;
LABEL_126:
              std::string::append(&v97, v65, v66);
              unint64_t v67 = v98;
              unint64_t v68 = &v97;
              goto LABEL_127;
            case 'o':
              int v11 = (void *)*((void *)this + 5);
              __int16 v12 = "Builtin.NativeObject";
              goto LABEL_149;
            case 'p':
              int v11 = (void *)*((void *)this + 5);
              __int16 v12 = "Builtin.RawPointer";
              goto LABEL_149;
            case 't':
              int v11 = (void *)*((void *)this + 5);
              __int16 v12 = "Builtin.SILToken";
              goto LABEL_149;
            case 'v':
              unint64_t v98 = 0;
                return 0;
              uint64_t v73 = *((void *)this + 4);
              if (!v73) {
                return 0;
              }
              unint64_t v74 = (unsigned char *)*((void *)this + 3);
              if (*v74 != 66) {
                return 0;
              }
              *((void *)this + 3) = v74 + 1;
              *((void *)this + 4) = v73 - 1;
              if (v73 == 1) {
                return 0;
              }
              int v75 = v74[1];
              if (v75 == 102)
              {
                *((void *)this + 3) = v74 + 2;
                *((void *)this + 4) = v73 - 2;
                unint64_t v96 = 0;
                unint64_t v9 = 0;
                  return v9;
                int v64 = (void *)*((void *)this + 5);
                memset(&v97, 0, sizeof(v97));
                std::string::append(&v97, "Builtin.Vec", 0xBuLL);
                unint64_t v76 = swift::Demangle::__runtime::DemanglerPrinter::operator<<(&v97, v98);
                unint64_t v77 = v76;
                uint64_t v78 = "xFPIEEE";
                std::string::size_type v79 = 7;
                goto LABEL_175;
              }
              if (v75 == 112)
              {
                *((void *)this + 3) = v74 + 2;
                *((void *)this + 4) = v73 - 2;
                int v64 = (void *)*((void *)this + 5);
                memset(&v97, 0, sizeof(v97));
                std::string::append(&v97, "Builtin.Vec", 0xBuLL);
                size_t v95 = swift::Demangle::__runtime::DemanglerPrinter::operator<<(&v97, v98);
                std::string::append(v95, "xRawPointer", 0xBuLL);
                size_t v70 = HIBYTE(v95->__r_.__value_.__r.__words[2]);
                BOOL v71 = (v70 & 0x80u) != 0;
                size_t size = v95->__r_.__value_.__l.__size_;
                if ((v70 & 0x80u) == 0) {
                  __int16 v19 = v95;
                }
                else {
                  __int16 v19 = (std::string *)v95->__r_.__value_.__r.__words[0];
                }
LABEL_130:
                if (v71) {
                  size_t v21 = size;
                }
                else {
                  size_t v21 = v70;
                }
                BOOL v18 = v64;
                __int16 v20 = 20;
                goto LABEL_134;
              }
              if (v75 != 105) {
                return 0;
              }
              *((void *)this + 3) = v74 + 2;
              *((void *)this + 4) = v73 - 2;
              unint64_t v96 = 0;
              unint64_t v9 = 0;
              {
                int v64 = (void *)*((void *)this + 5);
                memset(&v97, 0, sizeof(v97));
                std::string::append(&v97, "Builtin.Vec", 0xBuLL);
                unint64_t v76 = swift::Demangle::__runtime::DemanglerPrinter::operator<<(&v97, v98);
                unint64_t v77 = v76;
                uint64_t v78 = "xInt";
                std::string::size_type v79 = 4;
LABEL_175:
                std::string::append(v76, v78, v79);
                unint64_t v67 = v96;
                unint64_t v68 = v77;
LABEL_127:
                unint64_t v69 = swift::Demangle::__runtime::DemanglerPrinter::operator<<(v68, v67);
                size_t v70 = HIBYTE(v69->__r_.__value_.__r.__words[2]);
                BOOL v71 = (v70 & 0x80u) != 0;
                size_t size = v69->__r_.__value_.__l.__size_;
                if ((v70 & 0x80u) == 0) {
                  __int16 v19 = v69;
                }
                else {
                  __int16 v19 = (std::string *)v69->__r_.__value_.__r.__words[0];
                }
                goto LABEL_130;
              }
              break;
            case 'w':
              int v11 = (void *)*((void *)this + 5);
              __int16 v12 = "Builtin.Word";
LABEL_149:
              return (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(v11, 20, v12);
            default:
              return v9;
          }
          return v9;
        case 'D':
          if (!v9) {
            return v9;
          }
          Node = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(*((void **)this + 5), 232);
          swift::Demangle::__runtime::Node::addChild(Node, v9, *((swift::Demangle::__runtime::NodeFactory **)this + 5));
          if (!Node) {
            return 0;
          }
          float v16 = (void *)*((void *)this + 5);
          __int16 v17 = 57;
          goto LABEL_35;
        case 'E':
          if (v3 == 1) {
            return 0;
          }
          if (*v6 != 82) {
            return 0;
          }
          *((void *)this + 3) = v5 + 2;
          *((void *)this + 4) = v3 - 2;
          if (v3 == 2 || v5[2] != 82) {
            return 0;
          }
          *((void *)this + 3) = v5 + 3;
          *((void *)this + 4) = v3 - 3;
          BOOL v18 = (void *)*((void *)this + 5);
          memset(&v97, 0, sizeof(v97));
          __int16 v19 = &v97;
          __int16 v20 = 63;
          size_t v21 = 0;
LABEL_134:
          unint64_t v9 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(v18, v20, v19, v21);
          if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v97.__r_.__value_.__l.__data_);
          }
          return v9;
        case 'F':
          int v22 = a2 + 1;
          __int16 v23 = 82;
          goto LABEL_60;
        case 'G':
          if (!v24) {
            return 0;
          }
        case 'K':
          int v22 = a2 + 1;
          __int16 v23 = 11;
          goto LABEL_60;
        case 'M':
          if (!v26) {
            return 0;
          }
          Node = (swift::Demangle::__runtime::Node *)v26;
          float v16 = (void *)*((void *)this + 5);
          __int16 v17 = 145;
          goto LABEL_35;
        case 'P':
          if (v3 == 1 || *v6 != 77)
          {
LABEL_108:
            int v59 = a2 + 1;
          }
          *((void *)this + 3) = v5 + 2;
          *((void *)this + 4) = v3 - 2;
          if (!v27) {
            return 0;
          }
          Node = (swift::Demangle::__runtime::Node *)v27;
          float v16 = (void *)*((void *)this + 5);
          __int16 v17 = 69;
LABEL_35:
          unsigned int v28 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(v16, v17);
          unint64_t v9 = v28;
          size_t v29 = (swift::Demangle::__runtime::NodeFactory *)*((void *)this + 5);
          unint64_t v30 = Node;
          goto LABEL_76;
        case 'Q':
          if (v3 == 1) {
            goto LABEL_83;
          }
          int v31 = *v6;
          if (v31 != 85)
          {
            if (v31 == 117)
            {
              *((void *)this + 3) = v5 + 2;
              *((void *)this + 4) = v3 - 2;
              uint64_t v32 = (void *)*((void *)this + 5);
              return (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(v32, 308);
            }
            else
            {
LABEL_83:
              int v48 = a2 + 1;
            }
          }
          *((void *)this + 3) = v5 + 2;
          *((void *)this + 4) = v3 - 2;
          v97.__r_.__value_.__r.__words[0] = 0;
          unint64_t v9 = 0;
            return v9;
          unint64_t v9 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(*((void **)this + 5), 308);
          unint64_t v40 = swift::Demangle::__runtime::NodeFactory::createNode(*((void **)this + 5), 341, (uint64_t)v97.__r_.__value_.__l.__data_);
LABEL_65:
          unint64_t v30 = (swift::Demangle::__runtime::Node *)v40;
          size_t v29 = (swift::Demangle::__runtime::NodeFactory *)*((void *)this + 5);
          unsigned int v28 = v9;
          goto LABEL_76;
        case 'R':
          unsigned int v33 = (void *)*((void *)this + 5);
          __int16 v34 = 123;
          goto LABEL_64;
        case 'S':
        case 'T':
          int v35 = a2 + 1;
          int v36 = 0;
          goto LABEL_70;
        case 'W':
          int v37 = a2 + 1;
        case 'X':
          unint64_t v9 = 0;
          if (v3 == 1) {
            return v9;
          }
          switch(*v6)
          {
            case 'B':
              *((void *)this + 3) = v5 + 2;
              *((void *)this + 4) = v3 - 2;
              if (v3 == 2 || v5[2] != 71)
              {
                unint64_t v38 = 0;
              }
              else
              {
                *((void *)this + 3) = v5 + 3;
                *((void *)this + 4) = v3 - 3;
                if (!v38) {
                  return 0;
                }
              }
              unint64_t v80 = swift::Demangle::__runtime::NodeFactory::createNode(*((void **)this + 5), 212);
              uint64_t v81 = *((void *)this + 4);
              if (!v81) {
                return 0;
              }
              unint64_t v82 = (swift::Demangle::__runtime::Node *)v80;
              unsigned int v83 = a2 + 1;
              break;
            case 'F':
              *((void *)this + 3) = v5 + 2;
              *((void *)this + 4) = v3 - 2;
              int v49 = a2 + 1;
            case 'M':
              *((void *)this + 3) = v5 + 2;
              *((void *)this + 4) = v3 - 2;
              if (!v50) {
                return 0;
              }
              unint64_t v38 = (unsigned __int16 *)v50;
              if (!v51) {
                return 0;
              }
              unint64_t v52 = (swift::Demangle::__runtime::Node *)v51;
              unint64_t v53 = (void *)*((void *)this + 5);
              __int16 v54 = 145;
              goto LABEL_106;
            case 'P':
              *((void *)this + 3) = v5 + 2;
              *((void *)this + 4) = v3 - 2;
              if (v3 == 2 || v5[2] != 77) {
                goto LABEL_108;
              }
              *((void *)this + 3) = v5 + 3;
              *((void *)this + 4) = v3 - 3;
              if (!v55) {
                return 0;
              }
              unint64_t v38 = (unsigned __int16 *)v55;
              if (!v56) {
                return 0;
              }
              unint64_t v52 = (swift::Demangle::__runtime::Node *)v56;
              unint64_t v53 = (void *)*((void *)this + 5);
              __int16 v54 = 69;
LABEL_106:
              unint64_t v57 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(v53, v54);
              unint64_t v9 = v57;
              int v58 = (swift::Demangle::__runtime::NodeFactory *)*((void *)this + 5);
              goto LABEL_107;
            case 'b':
              *((void *)this + 3) = v5 + 2;
              *((void *)this + 4) = v3 - 2;
              if (!v60) {
                return 0;
              }
              Node = (swift::Demangle::__runtime::Node *)v60;
              float v16 = (void *)*((void *)this + 5);
              __int16 v17 = 210;
              goto LABEL_35;
            case 'f':
              *((void *)this + 3) = v5 + 2;
              *((void *)this + 4) = v3 - 2;
              int v22 = a2 + 1;
              __int16 v23 = 222;
              goto LABEL_60;
            case 'o':
              *((void *)this + 3) = v5 + 2;
              *((void *)this + 4) = v3 - 2;
              if (!v61) {
                return 0;
              }
              Node = (swift::Demangle::__runtime::Node *)v61;
              float v16 = (void *)*((void *)this + 5);
              __int16 v17 = 248;
              goto LABEL_35;
            case 'u':
              *((void *)this + 3) = v5 + 2;
              *((void *)this + 4) = v3 - 2;
              if (!v62) {
                return 0;
              }
              Node = (swift::Demangle::__runtime::Node *)v62;
              float v16 = (void *)*((void *)this + 5);
              __int16 v17 = 249;
              goto LABEL_35;
            case 'w':
              *((void *)this + 3) = v5 + 2;
              *((void *)this + 4) = v3 - 2;
              if (!v63) {
                return 0;
              }
              Node = (swift::Demangle::__runtime::Node *)v63;
              float v16 = (void *)*((void *)this + 5);
              __int16 v17 = 247;
              goto LABEL_35;
            default:
              return v9;
          }
          while (2)
          {
            unint64_t v84 = (unsigned __int8 *)*((void *)this + 3);
            int v85 = *v84;
            if (v85 == 105)
            {
              __int16 v86 = 214;
              goto LABEL_159;
            }
            if (v85 == 109)
            {
              __int16 v86 = 213;
LABEL_159:
              *((void *)this + 3) = v84 + 1;
              *((void *)this + 4) = v81 - 1;
              if (v87)
              {
                unint64_t v88 = (swift::Demangle::__runtime::Node *)v87;
                unint64_t v89 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(*((void **)this + 5), 232);
                swift::Demangle::__runtime::Node::addChild(v89, v88, *((swift::Demangle::__runtime::NodeFactory **)this + 5));
                if (v89)
                {
                  size_t v90 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(*((void **)this + 5), v86);
                  swift::Demangle::__runtime::Node::addChild(v90, v89, *((swift::Demangle::__runtime::NodeFactory **)this + 5));
                  swift::Demangle::__runtime::Node::addChild(v82, v90, *((swift::Demangle::__runtime::NodeFactory **)this + 5));
                  unint64_t v9 = 0;
                  uint64_t v81 = *((void *)this + 4);
                  if (!v81) {
                    return v9;
                  }
                  continue;
                }
              }
              return 0;
            }
            break;
          }
          if (v85 != 95) {
            return 0;
          }
          *((void *)this + 3) = v84 + 1;
          *((void *)this + 4) = v81 - 1;
          if (v38)
          {
            unint64_t v91 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(*((void **)this + 5), 235);
            uint64_t v92 = *((void *)this + 4);
            if (!v92) {
              goto LABEL_167;
            }
LABEL_166:
            unint64_t v93 = (unsigned char *)*((void *)this + 3);
            if (*v93 != 95)
            {
LABEL_167:
              while (1)
              {
                if (!v94) {
                  return 0;
                }
                swift::Demangle::__runtime::Node::addChild(v91, v94, *((swift::Demangle::__runtime::NodeFactory **)this + 5));
                uint64_t v92 = *((void *)this + 4);
                if (v92) {
                  goto LABEL_166;
                }
              }
            }
            unint64_t v52 = v91;
            *((void *)this + 3) = v93 + 1;
            *((void *)this + 4) = v92 - 1;
          }
          else
          {
            unint64_t v52 = 0;
          }
          unint64_t v9 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(*((void **)this + 5), 211);
          swift::Demangle::__runtime::Node::addChild(v9, v82, *((swift::Demangle::__runtime::NodeFactory **)this + 5));
          if (v38)
          {
            int v58 = (swift::Demangle::__runtime::NodeFactory *)*((void *)this + 5);
            unint64_t v57 = v9;
LABEL_107:
            swift::Demangle::__runtime::Node::addChild(v57, (swift::Demangle::__runtime::Node *)v38, v58);
            size_t v29 = (swift::Demangle::__runtime::NodeFactory *)*((void *)this + 5);
            unsigned int v28 = v9;
            unint64_t v30 = v52;
LABEL_76:
            swift::Demangle::__runtime::Node::addChild(v28, v30, v29);
          }
          return v9;
        case 'a':
          int v39 = a2 + 1;
          __int16 v14 = 234;
          goto LABEL_92;
        case 'b':
          int v22 = a2 + 1;
          __int16 v23 = 165;
          goto LABEL_60;
        case 'c':
          int v22 = a2 + 1;
          __int16 v23 = 22;
          goto LABEL_60;
        case 'f':
          int v22 = a2 + 1;
          __int16 v23 = 245;
LABEL_60:
        case 'k':
          unsigned int v33 = (void *)*((void *)this + 5);
          __int16 v34 = 326;
LABEL_64:
          unint64_t v9 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(v33, v34);
          if (v40) {
            goto LABEL_65;
          }
          return 0;
        case 'q':
          int v41 = a2 + 1;
        case 't':
          int v35 = a2 + 1;
          int v36 = 1;
LABEL_70:
        case 'u':
          unsigned int v42 = a2 + 1;
          if (!v43) {
            return 0;
          }
          unint64_t v44 = (swift::Demangle::__runtime::Node *)v43;
          if (!v45) {
            return 0;
          }
          unint64_t v46 = (swift::Demangle::__runtime::Node *)v45;
          unint64_t v9 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(*((void **)this + 5), 44);
          swift::Demangle::__runtime::Node::addChild(v9, v44, *((swift::Demangle::__runtime::NodeFactory **)this + 5));
          size_t v29 = (swift::Demangle::__runtime::NodeFactory *)*((void *)this + 5);
          unsigned int v28 = v9;
          unint64_t v30 = v46;
          goto LABEL_76;
        case 'w':
          int v47 = a2 + 1;
        case 'x':
        default:
          if ((v7 - 67) > 0x13 || ((1 << (v7 - 67)) & 0x81001) == 0) {
            return 0;
          }
          switch(v7)
          {
            case 'C':
              __int16 v14 = 24;
              break;
            case 'O':
              __int16 v14 = 61;
              break;
            case 'V':
              __int16 v14 = 219;
              break;
            default:
              __int16 v14 = 101;
              break;
          }
          int v39 = a2 + 1;
LABEL_92:
      }
    }
  }
  return 0;
}

uint64_t anonymous namespace'::OldDemangler::demangleBuiltinSize(_anonymous_namespace_::OldDemangler *this, unint64_t *a2)
{
  uint64_t v2 = *((void *)this + 4);
  if (!v2) {
    return 0;
  }
  uint64_t v3 = (unsigned __int8 *)*((void *)this + 3);
  size_t v4 = v3 + 1;
  int v5 = *v3;
  *((void *)this + 3) = v3 + 1;
  *((void *)this + 4) = v2 - 1;
  if ((v5 - 48) > 9) {
    return 0;
  }
  uint64_t v6 = (v5 - 48);
  *a2 = v6;
  if (v2 == 1) {
    return 0;
  }
  char v7 = v3 + 2;
  uint64_t v8 = v2 - 2;
  while (1)
  {
    int v9 = *v4;
    if ((v9 - 58) < 0xFFFFFFF6) {
      break;
    }
    uint64_t v6 = (v9 - 48) + 10 * v6;
    *a2 = v6;
    ++v4;
    *((void *)this + 3) = v7;
    *((void *)this + 4) = v8;
    ++v7;
    if (--v8 == -1) {
      return 0;
    }
  }
  if (v9 != 95) {
    return 0;
  }
  *((void *)this + 3) = v7;
  *((void *)this + 4) = v8;
  return 1;
}

uint64_t anonymous namespace'::OldDemangler::demangleNatural(_anonymous_namespace_::OldDemangler *this, unint64_t *a2)
{
  uint64_t v2 = *((void *)this + 4);
  if (!v2) {
    return 0;
  }
  uint64_t v3 = (unsigned __int8 *)*((void *)this + 3);
  size_t v4 = v3 + 1;
  int v5 = *v3;
  *((void *)this + 3) = v3 + 1;
  *((void *)this + 4) = v2 - 1;
  if ((v5 - 48) > 9) {
    return 0;
  }
  uint64_t v6 = (v5 - 48);
  *a2 = v6;
  if (v2 != 1)
  {
    char v7 = v3 + 2;
    uint64_t v8 = v2 - 2;
    do
    {
      int v9 = *v4;
      if ((v9 - 58) < 0xFFFFFFF6) {
        break;
      }
      uint64_t v6 = (v9 - 48) + 10 * v6;
      *a2 = v6;
      ++v4;
      *((void *)this + 3) = v7;
      *((void *)this + 4) = v8;
      ++v7;
      --v8;
    }
    while (v8 != -1);
  }
  return 1;
}

swift::Demangle::__runtime::Node *anonymous namespace'::OldDemangler::demangleDeclarationName(uint64_t a1, __int16 a2, int a3)
{
  if (!v5) {
    return 0;
  }
  uint64_t v6 = v5;
  if (!v7) {
    return 0;
  }
  uint64_t v8 = (swift::Demangle::__runtime::Node *)v7;
  Node = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(*(void **)(a1 + 40), a2);
  swift::Demangle::__runtime::Node::addChild(Node, v6, *(swift::Demangle::__runtime::NodeFactory **)(a1 + 40));
  swift::Demangle::__runtime::Node::addChild(Node, v8, *(swift::Demangle::__runtime::NodeFactory **)(a1 + 40));
  int v11 = *(swift::Demangle::__runtime::Node ***)(a1 + 8);
  unint64_t v10 = *(void *)(a1 + 16);
  if ((unint64_t)v11 >= v10)
  {
    unint64_t v13 = *(char **)a1;
    uint64_t v14 = (uint64_t)v11 - *(void *)a1;
    uint64_t v15 = v14 >> 3;
    unint64_t v16 = (v14 >> 3) + 1;
    if (v16 >> 61) {
      abort();
    }
    uint64_t v17 = v10 - (void)v13;
    if (v17 >> 2 > v16) {
      unint64_t v16 = v17 >> 2;
    }
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v18 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v18 = v16;
    }
    if (v18)
    {
      if (v18 >> 61) {
        std::__throw_bad_array_new_length[abi:nn180100]();
      }
      __int16 v19 = operator new(8 * v18);
    }
    else
    {
      __int16 v19 = 0;
    }
    __int16 v20 = (swift::Demangle::__runtime::Node **)&v19[8 * v15];
    size_t v21 = &v19[8 * v18];
    *__int16 v20 = Node;
    __int16 v12 = v20 + 1;
    if (v11 != (swift::Demangle::__runtime::Node **)v13)
    {
      unint64_t v22 = (char *)v11 - v13 - 8;
      if (v22 < 0x58) {
        goto LABEL_32;
      }
      if ((unint64_t)((char *)v11 - v19 - v14) < 0x20) {
        goto LABEL_32;
      }
      uint64_t v23 = (v22 >> 3) + 1;
      uint64_t v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
      uint64_t v25 = &v11[v24 / 0xFFFFFFFFFFFFFFF8];
      __int16 v20 = (swift::Demangle::__runtime::Node **)((char *)v20 - v24);
      uint64_t v26 = &v19[8 * v15 - 16];
      uint64_t v27 = v11 - 2;
      uint64_t v28 = v23 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v29 = *(_OWORD *)v27;
        *(v26 - 1) = *((_OWORD *)v27 - 1);
        _OWORD *v26 = v29;
        v26 -= 2;
        v27 -= 4;
        v28 -= 4;
      }
      while (v28);
      int v11 = v25;
      if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_32:
        do
        {
          unint64_t v30 = *--v11;
          *--__int16 v20 = v30;
        }
        while (v11 != (swift::Demangle::__runtime::Node **)v13);
      }
      int v11 = *(swift::Demangle::__runtime::Node ***)a1;
    }
    *(void *)a1 = v20;
    *(void *)(a1 + 8) = v12;
    *(void *)(a1 + 16) = v21;
    if (v11) {
      operator delete(v11);
    }
  }
  else
  {
    *int v11 = Node;
    __int16 v12 = v11 + 1;
  }
  *(void *)(a1 + 8) = v12;
  return Node;
}

swift::Demangle::__runtime::Node *anonymous namespace'::OldDemangler::demangleFunctionType(_anonymous_namespace_::OldDemangler *this, __int16 a2, int a3)
{
  uint64_t v6 = *((void *)this + 4);
  if (!v6)
  {
    BOOL v10 = 0;
    BOOL v12 = 0;
    int v13 = 0;
    Node = 0;
    BOOL v9 = 0;
    goto LABEL_28;
  }
  unint64_t v7 = (unsigned __int8 *)*((void *)this + 3);
  int v8 = *v7;
  BOOL v9 = v8 == 122;
  if (v8 == 122)
  {
    ++v7;
    --v6;
    *((void *)this + 3) = v7;
    *((void *)this + 4) = v6;
    if (!v6)
    {
      BOOL v10 = 0;
      BOOL v12 = 0;
      int v13 = 0;
      Node = 0;
      BOOL v9 = 1;
      goto LABEL_28;
    }
    int v8 = *v7;
  }
  BOOL v10 = v8 == 121;
  if (v8 == 121)
  {
    ++v7;
    --v6;
    *((void *)this + 3) = v7;
    *((void *)this + 4) = v6;
    if (!v6)
    {
      BOOL v12 = 0;
      int v13 = 0;
      Node = 0;
      BOOL v10 = 1;
      goto LABEL_28;
    }
  }
  int v11 = *v7;
  BOOL v12 = v11 == 90;
  if (v11 == 90)
  {
    ++v7;
    --v6;
    *((void *)this + 3) = v7;
    *((void *)this + 4) = v6;
    if (!v6)
    {
      int v13 = 0;
      Node = 0;
      BOOL v12 = 1;
      goto LABEL_28;
    }
    int v11 = *v7;
  }
  if (v11 == 68)
  {
    *((void *)this + 3) = v7 + 1;
    *((void *)this + 4) = v6 - 1;
    if (v6 == 1)
    {
      uint64_t v6 = 0;
      int v13 = 46;
      ++v7;
    }
    else
    {
      int v13 = v7[1];
      v7 += 2;
      v6 -= 2;
      *((void *)this + 3) = v7;
      *((void *)this + 4) = v6;
    }
    HIDWORD(v15) = v13;
    LODWORD(v15) = (v13 << 24) - 1677721600;
    unsigned int v16 = (v15 >> 25);
    if (v16 <= 7 && ((1 << v16) & 0x93) != 0)
    {
      if (!v6)
      {
LABEL_27:
        Node = 0;
        goto LABEL_28;
      }
    }
    else
    {
      int v13 = 0;
      if (!v6) {
        goto LABEL_27;
      }
    }
  }
  else
  {
    int v13 = 0;
  }
  if (*v7 != 89) {
    goto LABEL_27;
  }
  *((void *)this + 3) = v7 + 1;
  *((void *)this + 4) = v6 - 1;
  if (!v17) {
    return 0;
  }
  unint64_t v18 = (swift::Demangle::__runtime::Node *)v17;
  Node = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(*((void **)this + 5), 232);
  swift::Demangle::__runtime::Node::addChild(Node, v18, *((swift::Demangle::__runtime::NodeFactory **)this + 5));
  if (!Node) {
    return 0;
  }
LABEL_28:
  unsigned int v19 = a3 + 1;
  if (!v20) {
    return 0;
  }
  size_t v21 = (swift::Demangle::__runtime::Node *)v20;
  unint64_t v22 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(*((void **)this + 5), 232);
  swift::Demangle::__runtime::Node::addChild(v22, v21, *((swift::Demangle::__runtime::NodeFactory **)this + 5));
  if (!v22) {
    return 0;
  }
  if (!v23) {
    return 0;
  }
  uint64_t v24 = (swift::Demangle::__runtime::Node *)v23;
  uint64_t v25 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(*((void **)this + 5), 232);
  swift::Demangle::__runtime::Node::addChild(v25, v24, *((swift::Demangle::__runtime::NodeFactory **)this + 5));
  if (!v25) {
    return 0;
  }
  uint64_t v26 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(*((void **)this + 5), a2);
  if (v9)
  {
    uint64_t v27 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(*((void **)this + 5), 272);
    swift::Demangle::__runtime::Node::addChild(v26, v27, *((swift::Demangle::__runtime::NodeFactory **)this + 5));
    if (!v12) {
      goto LABEL_34;
    }
  }
  else if (!v12)
  {
LABEL_34:
    if (v10) {
      goto LABEL_35;
    }
    goto LABEL_41;
  }
  unint64_t v30 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(*((void **)this + 5), 271);
  swift::Demangle::__runtime::Node::addChild(v26, v30, *((swift::Demangle::__runtime::NodeFactory **)this + 5));
  if (v10)
  {
LABEL_35:
    uint64_t v28 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(*((void **)this + 5), 66);
    swift::Demangle::__runtime::Node::addChild(v26, v28, *((swift::Demangle::__runtime::NodeFactory **)this + 5));
    if (!v13) {
      goto LABEL_43;
    }
    goto LABEL_42;
  }
LABEL_41:
  if (v13)
  {
LABEL_42:
    int v31 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(*((void **)this + 5), 68, (char)v13);
    swift::Demangle::__runtime::Node::addChild(v26, v31, *((swift::Demangle::__runtime::NodeFactory **)this + 5));
  }
LABEL_43:
  if (Node)
  {
    uint64_t v32 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(*((void **)this + 5), 67);
    swift::Demangle::__runtime::Node::addChild(v32, Node, *((swift::Demangle::__runtime::NodeFactory **)this + 5));
    swift::Demangle::__runtime::Node::addChild(v26, v32, *((swift::Demangle::__runtime::NodeFactory **)this + 5));
  }
  unsigned int v33 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(*((void **)this + 5), 3);
  swift::Demangle::__runtime::Node::addChild(v26, v33, *((swift::Demangle::__runtime::NodeFactory **)this + 5));
  swift::Demangle::__runtime::Node::addChild(v33, v22, *((swift::Demangle::__runtime::NodeFactory **)this + 5));
  __int16 v34 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(*((void **)this + 5), 207);
  swift::Demangle::__runtime::Node::addChild(v34, v25, *((swift::Demangle::__runtime::NodeFactory **)this + 5));
  swift::Demangle::__runtime::Node::addChild(v26, v34, *((swift::Demangle::__runtime::NodeFactory **)this + 5));
  return v26;
}

unsigned __int16 *anonymous namespace'::OldDemangler::demangleGenericSignature(_anonymous_namespace_::OldDemangler *this, int a2, int a3)
{
  int v5 = (void *)*((void *)this + 5);
  if (a3) {
    __int16 v6 = 46;
  }
  else {
    __int16 v6 = 43;
  }
  unint64_t Node = swift::Demangle::__runtime::NodeFactory::createNode(v5, v6);
  uint64_t v8 = *((void *)this + 4);
  if (v8)
  {
    BOOL v9 = (swift::Demangle::__runtime::Node *)Node;
    uint64_t v10 = -1;
    while (1)
    {
      BOOL v12 = (unsigned __int8 *)*((void *)this + 3);
      int v13 = *v12;
      if (v13 == 122)
      {
        uint64_t v10 = 0;
        *((void *)this + 3) = v12 + 1;
        *((void *)this + 4) = v8 - 1;
        goto LABEL_7;
      }
      if (v13 == 82 || v13 == 114) {
        break;
      }
      uint64_t v14 = v12 + 1;
      *((void *)this + 3) = v12 + 1;
      *((void *)this + 4) = v8 - 1;
      if (v13 == 95)
      {
        uint64_t v15 = 0;
      }
      else
      {
        if ((v13 - 58) < 0xFFFFFFF6 || v8 == 1) {
          return 0;
        }
        uint64_t v17 = (v13 - 48);
        unint64_t v18 = v12 + 2;
        uint64_t v19 = v8 - 2;
        while (1)
        {
          int v20 = *v14;
          if ((v20 - 58) < 0xFFFFFFF6) {
            break;
          }
          uint64_t v17 = (v20 - 48) + 10 * v17;
          ++v14;
          *((void *)this + 3) = v18;
          *((void *)this + 4) = v19;
          ++v18;
          if (--v19 == -1) {
            return 0;
          }
        }
        if (v20 != 95) {
          return 0;
        }
        *((void *)this + 3) = v18;
        *((void *)this + 4) = v19;
        uint64_t v15 = v17 + 1;
      }
      uint64_t v10 = v15 + 1;
LABEL_7:
      int v11 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(*((void **)this + 5), 37, v10);
      swift::Demangle::__runtime::Node::addChild(v9, v11, *((swift::Demangle::__runtime::NodeFactory **)this + 5));
      uint64_t v8 = *((void *)this + 4);
      if (!v8) {
        return 0;
      }
    }
    if (v10 != -1
      || (v21 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(*((void **)this + 5), 37, 1), swift::Demangle::__runtime::Node::addChild(v9, v21, *((swift::Demangle::__runtime::NodeFactory **)this + 5)), (uint64_t v8 = *((void *)this + 4)) != 0))
    {
      unint64_t v22 = (unsigned __int8 *)*((void *)this + 3);
      int v23 = *v22;
      if (v23 == 114)
      {
LABEL_103:
        *((void *)this + 3) = v22 + 1;
        *((void *)this + 4) = v8 - 1;
        return (unsigned __int16 *)v9;
      }
      if (v23 == 82)
      {
        --v8;
        unsigned int v24 = a2 + 2;
        int v25 = a2 + 4;
        *((void *)this + 3) = v22 + 1;
        *((void *)this + 4) = v8;
        if (v8) {
          goto LABEL_29;
        }
LABEL_42:
        if (v28)
        {
          while (1)
          {
            __int16 v34 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(*((void **)this + 5), 232);
            swift::Demangle::__runtime::Node::addChild(v34, v28, *((swift::Demangle::__runtime::NodeFactory **)this + 5));
            if (!v34) {
              return 0;
            }
            uint64_t v35 = *((void *)this + 4);
            if (!v35) {
              return 0;
            }
            int v36 = (unsigned __int8 *)*((void *)this + 3);
            unsigned int v37 = *v36;
            if (v37 > 0x6B)
            {
              if (v37 == 108)
              {
                uint64_t v63 = -1;
                unint64_t v64 = -1;
                *((void *)this + 3) = v36 + 1;
                *((void *)this + 4) = v35 - 1;
                unint64_t v44 = 0;
                if (v35 != 1)
                {
                  uint64_t v45 = "U";
                  switch(v36[1])
                  {
                    case 'B':
                      uint64_t v45 = "B";
                      goto LABEL_87;
                    case 'E':
                      *((void *)this + 3) = v36 + 2;
                      *((void *)this + 4) = v35 - 2;
                        goto LABEL_100;
                      uint64_t v50 = *((void *)this + 4);
                      if (!v50) {
                        goto LABEL_100;
                      }
                      uint64_t v51 = (unsigned char *)*((void *)this + 3);
                      if (*v51 != 95) {
                        goto LABEL_100;
                      }
                      *((void *)this + 3) = v51 + 1;
                      *((void *)this + 4) = v50 - 1;
                      uint64_t v45 = "E";
                        goto LABEL_100;
                      goto LABEL_88;
                    case 'M':
                      *((void *)this + 3) = v36 + 2;
                      *((void *)this + 4) = v35 - 2;
                        goto LABEL_100;
                      uint64_t v52 = *((void *)this + 4);
                      if (!v52) {
                        goto LABEL_100;
                      }
                      unint64_t v53 = (unsigned char *)*((void *)this + 3);
                      if (*v53 != 95) {
                        goto LABEL_100;
                      }
                      *((void *)this + 3) = v53 + 1;
                      *((void *)this + 4) = v52 - 1;
                      uint64_t v45 = "M";
                        goto LABEL_100;
                      goto LABEL_88;
                    case 'N':
                      uint64_t v45 = "N";
                      goto LABEL_87;
                    case 'R':
                      uint64_t v45 = "R";
                      goto LABEL_87;
                    case 'S':
                      *((void *)this + 3) = v36 + 2;
                      *((void *)this + 4) = v35 - 2;
                      uint64_t v45 = "S";
                        goto LABEL_100;
                      goto LABEL_88;
                    case 'T':
                      uint64_t v45 = "T";
                      goto LABEL_87;
                    case 'U':
LABEL_87:
                      *((void *)this + 3) = v36 + 2;
                      *((void *)this + 4) = v35 - 2;
                      goto LABEL_88;
                    case 'e':
                      *((void *)this + 3) = v36 + 2;
                      *((void *)this + 4) = v35 - 2;
                      uint64_t v45 = "e";
                        goto LABEL_100;
                      goto LABEL_88;
                    case 'm':
                      *((void *)this + 3) = v36 + 2;
                      *((void *)this + 4) = v35 - 2;
                      uint64_t v45 = "m";
                        goto LABEL_100;
LABEL_88:
                      __int16 v54 = (void *)*((void *)this + 5);
                      unint64_t v55 = (char *)v54[1];
                      if (!v55 || (uint64_t v56 = v55 + 1, (unint64_t)(v55 + 1) > v54[2]))
                      {
                        unint64_t v57 = 2 * v54[4];
                        if (v57 <= 2) {
                          unint64_t v57 = 2;
                        }
                        v54[4] = v57;
                        unint64_t v58 = v57 + 8;
                        int v59 = malloc_type_malloc(v57 + 8, 0xD0263BC5uLL);
                        void *v59 = v54[3];
                        uint64_t v56 = (char *)v59 + 9;
                        unint64_t v55 = (char *)(v59 + 1);
                        v54[2] = (char *)v59 + v58;
                        v54[3] = v59;
                      }
                      v54[1] = v56;
                      *unint64_t v55 = *v45;
                      unint64_t NodeWithAllocatedText = swift::Demangle::__runtime::NodeFactory::createNodeWithAllocatedText(v54, 101, (uint64_t)v55, 1);
                      if (NodeWithAllocatedText)
                      {
                        uint64_t v61 = (swift::Demangle::__runtime::Node *)NodeWithAllocatedText;
                        unint64_t v44 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(*((void **)this + 5), 41);
                        swift::Demangle::__runtime::Node::addChild(v44, v34, *((swift::Demangle::__runtime::NodeFactory **)this + 5));
                        swift::Demangle::__runtime::Node::addChild(v44, v61, *((swift::Demangle::__runtime::NodeFactory **)this + 5));
                        if (v64 != -1)
                        {
                          uint64_t v62 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(*((void **)this + 5), 161, v64);
                          swift::Demangle::__runtime::Node::addChild(v44, v62, *((swift::Demangle::__runtime::NodeFactory **)this + 5));
                          if (v63 != -1)
                          {
                            int v49 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(*((void **)this + 5), 161, v63);
                            int v47 = (swift::Demangle::__runtime::NodeFactory *)*((void *)this + 5);
                            int v48 = v44;
                            goto LABEL_68;
                          }
                        }
                      }
                      else
                      {
LABEL_100:
                        unint64_t v44 = 0;
                      }
                      break;
                    default:
                      goto LABEL_69;
                  }
                }
                goto LABEL_69;
              }
              if (v37 == 122)
              {
                *((void *)this + 3) = v36 + 1;
                *((void *)this + 4) = v35 - 1;
                if (!result) {
                  return result;
                }
                int v41 = (swift::Demangle::__runtime::Node *)result;
                unint64_t v40 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(*((void **)this + 5), 232);
                swift::Demangle::__runtime::Node::addChild(v40, v41, *((swift::Demangle::__runtime::NodeFactory **)this + 5));
                if (!v40) {
                  return 0;
                }
                unsigned int v42 = (void *)*((void *)this + 5);
                __int16 v43 = 39;
                goto LABEL_67;
              }
            }
            else
            {
              if (v37 == 67)
              {
                if (!result) {
                  return result;
                }
                goto LABEL_65;
              }
              if (v37 == 83)
              {
                *((void *)this + 3) = v36 + 1;
                *((void *)this + 4) = v35 - 1;
                if (!result) {
                  return result;
                }
                unint64_t v38 = (swift::Demangle::__runtime::Node *)result;
                int v39 = result[8];
                if (v39 != 24 && v39 != 180)
                {
                  if (v39 != 153) {
                    return 0;
                  }
                  unint64_t v38 = (swift::Demangle::__runtime::Node *)result;
                  if (!result) {
                    return result;
                  }
                }
                unint64_t v40 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(*((void **)this + 5), 232);
                swift::Demangle::__runtime::Node::addChild(v40, v38, *((swift::Demangle::__runtime::NodeFactory **)this + 5));
                goto LABEL_66;
              }
            }
            if (!result) {
              return result;
            }
LABEL_65:
            unint64_t v46 = (swift::Demangle::__runtime::Node *)result;
            unint64_t v40 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(*((void **)this + 5), 232);
            swift::Demangle::__runtime::Node::addChild(v40, v46, *((swift::Demangle::__runtime::NodeFactory **)this + 5));
            if (!v40) {
              return 0;
            }
LABEL_66:
            unsigned int v42 = (void *)*((void *)this + 5);
            __int16 v43 = 36;
LABEL_67:
            unint64_t v44 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(v42, v43);
            swift::Demangle::__runtime::Node::addChild(v44, v34, *((swift::Demangle::__runtime::NodeFactory **)this + 5));
            int v47 = (swift::Demangle::__runtime::NodeFactory *)*((void *)this + 5);
            int v48 = v44;
            int v49 = v40;
LABEL_68:
            swift::Demangle::__runtime::Node::addChild(v48, v49, v47);
LABEL_69:
            if (!v44) {
              return 0;
            }
            swift::Demangle::__runtime::Node::addChild(v9, v44, *((swift::Demangle::__runtime::NodeFactory **)this + 5));
            uint64_t v8 = *((void *)this + 4);
            if (!v8) {
              goto LABEL_42;
            }
LABEL_29:
            unint64_t v22 = (unsigned __int8 *)*((void *)this + 3);
            int v26 = *v22;
            switch(v26)
            {
              case 'W':
                *((void *)this + 3) = v22 + 1;
                *((void *)this + 4) = v8 - 1;
                if (!result) {
                  return result;
                }
                uint64_t v28 = (swift::Demangle::__runtime::Node *)result;
                while (1)
                {
                  uint64_t v30 = *((void *)this + 4);
                  if (v30)
                  {
                    int v31 = (unsigned char *)*((void *)this + 3);
                    if (*v31 == 95) {
                      break;
                    }
                  }
                  long long v29 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(*((void **)this + 5), 232);
                  swift::Demangle::__runtime::Node::addChild(v29, v28, *((swift::Demangle::__runtime::NodeFactory **)this + 5));
                  double result = 0;
                  if (!v28) {
                    return result;
                  }
                }
                *((void *)this + 3) = v31 + 1;
                *((void *)this + 4) = v30 - 1;
                break;
              case 'w':
                *((void *)this + 3) = v22 + 1;
                *((void *)this + 4) = v8 - 1;
                if (!result) {
                  return result;
                }
                uint64_t v32 = (swift::Demangle::__runtime::Node *)result;
                unsigned int v33 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(*((void **)this + 5), 232);
                swift::Demangle::__runtime::Node::addChild(v33, v32, *((swift::Demangle::__runtime::NodeFactory **)this + 5));
                if (!v28) {
                  return 0;
                }
                break;
              case 'r':
                goto LABEL_103;
              default:
                goto LABEL_42;
            }
          }
        }
      }
    }
  }
  return 0;
}

unint64_t anonymous namespace'::OldDemangler::demangleMetatypeRepresentation(_anonymous_namespace_::OldDemangler *this)
{
  uint64_t v1 = *((void *)this + 4);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = (unsigned __int8 *)*((void *)this + 3);
  int v3 = *v2;
  if (v3 == 116)
  {
    size_t v4 = "@thin";
    goto LABEL_9;
  }
  if (v3 == 111)
  {
    size_t v4 = "@objc_metatype";
    goto LABEL_9;
  }
  if (v3 != 84) {
    return 0;
  }
  size_t v4 = "@thick";
LABEL_9:
  *((void *)this + 3) = v2 + 1;
  *((void *)this + 4) = v1 - 1;
  return swift::Demangle::__runtime::NodeFactory::createNode(*((void **)this + 5), 146, v4);
}

swift::Demangle::__runtime::Node *anonymous namespace'::OldDemangler::demangleProtocolList(_anonymous_namespace_::OldDemangler *this, int a2)
{
  unint64_t Node = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(*((void **)this + 5), 190);
  int v5 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(*((void **)this + 5), 235);
  swift::Demangle::__runtime::Node::addChild(Node, v5, *((swift::Demangle::__runtime::NodeFactory **)this + 5));
  unsigned int v6 = a2 + 1;
  uint64_t v7 = *((void *)this + 4);
  if (v7)
  {
LABEL_2:
    uint64_t v8 = (unsigned char *)*((void *)this + 3);
    if (*v8 != 95) {
      goto LABEL_3;
    }
    *((void *)this + 3) = v8 + 1;
    *((void *)this + 4) = v7 - 1;
  }
  else
  {
LABEL_3:
    while (1)
    {
      if (!v9) {
        return 0;
      }
      uint64_t v10 = v9;
      int v11 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(*((void **)this + 5), 232);
      swift::Demangle::__runtime::Node::addChild(v11, v10, *((swift::Demangle::__runtime::NodeFactory **)this + 5));
      if (!v11) {
        return 0;
      }
      swift::Demangle::__runtime::Node::addChild(v5, v11, *((swift::Demangle::__runtime::NodeFactory **)this + 5));
      uint64_t v7 = *((void *)this + 4);
      if (v7) {
        goto LABEL_2;
      }
    }
  }
  return Node;
}

uint64_t anonymous namespace'::OldDemangler::demangleIndex(_anonymous_namespace_::OldDemangler *this, unint64_t *a2)
{
  uint64_t v2 = *((void *)this + 4);
  if (v2)
  {
    int v3 = (unsigned __int8 *)*((void *)this + 3);
    size_t v4 = v3 + 1;
    int v5 = *v3;
    *((void *)this + 3) = v3 + 1;
    *((void *)this + 4) = v2 - 1;
    if (v5 == 95)
    {
      unint64_t v6 = 0;
LABEL_4:
      *a2 = v6;
      return 1;
    }
    if ((v5 - 48) <= 9)
    {
      uint64_t v8 = (v5 - 48);
      *a2 = v8;
      if (v2 != 1)
      {
        BOOL v9 = v3 + 2;
        uint64_t v10 = v2 - 2;
        while (1)
        {
          int v11 = *v4;
          if ((v11 - 58) < 0xFFFFFFF6) {
            break;
          }
          uint64_t v8 = (v11 - 48) + 10 * v8;
          *a2 = v8;
          ++v4;
          *((void *)this + 3) = v9;
          *((void *)this + 4) = v10;
          ++v9;
          if (--v10 == -1) {
            return 0;
          }
        }
        if (v11 == 95)
        {
          *((void *)this + 3) = v9;
          *((void *)this + 4) = v10;
          unint64_t v6 = v8 + 1;
          goto LABEL_4;
        }
      }
    }
  }
  return 0;
}

swift::Demangle::__runtime::Node *anonymous namespace'::OldDemangler::demangleArchetypeType(_anonymous_namespace_::OldDemangler *this, int a2)
{
  int v14 = a2;
  v13[0] = this;
  v13[1] = &v14;
  uint64_t v2 = *((void *)this + 4);
  if (!v2) {
    return 0;
  }
  int v3 = (unsigned __int8 *)*((void *)this + 3);
  int v4 = *v3;
  if (v4 == 115)
  {
    *((void *)this + 3) = v3 + 1;
    *((void *)this + 4) = v2 - 1;
    unint64_t v6 = (void *)*((void *)this + 5);
    uint64_t v7 = v6[1];
    uint64_t v8 = (char *)(v7 + 5);
    if (v7) {
      BOOL v9 = (unint64_t)v8 > v6[2];
    }
    else {
      BOOL v9 = 1;
    }
    if (v9)
    {
      unint64_t v10 = 2 * v6[4];
      if (v10 <= 6) {
        unint64_t v10 = 6;
      }
      v6[4] = v10;
      unint64_t v11 = v10 + 8;
      BOOL v12 = malloc_type_malloc(v10 + 8, 0xD0263BC5uLL);
      *BOOL v12 = v6[3];
      uint64_t v8 = (char *)v12 + 13;
      uint64_t v7 = (uint64_t)(v12 + 1);
      v6[2] = (char *)v12 + v11;
      v6[3] = v12;
    }
    v6[1] = v8;
    *(unsigned char *)(v7 + 4) = 116;
    *(_DWORD *)uint64_t v7 = 1718187859;
    double result = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNodeWithAllocatedText(v6, 153, v7, 5);
  }
  if (v4 != 83)
  {
    if (v4 == 81)
    {
      *((void *)this + 3) = v3 + 1;
      *((void *)this + 4) = v2 - 1;
      if (!result) {
        return result;
      }
    }
    return 0;
  }
  *((void *)this + 3) = v3 + 1;
  *((void *)this + 4) = v2 - 1;
  if (result) {
  return result;
  }
}

swift::Demangle::__runtime::Node *anonymous namespace'::OldDemangler::demangleDependentType(_anonymous_namespace_::OldDemangler *this, int a2)
{
  if (!*((void *)this + 4)) {
    return 0;
  }
  int v3 = **((unsigned __int8 **)this + 3);
  if (v3 == 95 || v3 == 100 || (v3 - 48) < 0xA)
  {
  }
  int v5 = a2 + 1;
  if (!v6) {
    return 0;
  }
  uint64_t v7 = (swift::Demangle::__runtime::Node *)v6;
  unint64_t Node = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(*((void **)this + 5), 232);
  swift::Demangle::__runtime::Node::addChild(Node, v7, *((swift::Demangle::__runtime::NodeFactory **)this + 5));
  if (!Node) {
    return 0;
  }
}

swift::Demangle::__runtime::Node *anonymous namespace'::OldDemangler::getDependentGenericParamType(_anonymous_namespace_::OldDemangler *this, swift::Demangle::__runtime *a2, unsigned int a3)
{
  memset(&v13, 0, sizeof(v13));
  uint64_t v4 = a2;
  uint64_t v5 = a3;
  swift::Demangle::__runtime::genericParameterName((swift::Demangle::__runtime *)a2, a3, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  std::string::append(&v13, (const std::string::value_type *)p_p, size);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  unint64_t Node = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(*((void **)this + 5), 38);
  BOOL v9 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(*((void **)this + 5), 102, v4);
  swift::Demangle::__runtime::Node::addChild(Node, v9, *((swift::Demangle::__runtime::NodeFactory **)this + 5));
  unint64_t v10 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(*((void **)this + 5), 102, v5);
  swift::Demangle::__runtime::Node::addChild(Node, v10, *((swift::Demangle::__runtime::NodeFactory **)this + 5));
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v13.__r_.__value_.__l.__data_);
  }
  return Node;
}

swift::Demangle::__runtime::Node *anonymous namespace'::OldDemangler::demangleAssociatedTypeSimple(swift::Demangle::__runtime::NodeFactory **this, int a2)
{
  if (result)
  {
    uint64_t v5 = result;
    unint64_t Node = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(this[5], 232);
    swift::Demangle::__runtime::Node::addChild(Node, v5, this[5]);
  }
  return result;
}

swift::Demangle::__runtime::Node *anonymous namespace'::OldDemangler::demangleAssociatedTypeCompound(swift::Demangle::__runtime::NodeFactory **this, int a2)
{
  if (v4)
  {
    int v5 = a2 + 1;
    while (1)
    {
      uint64_t v7 = this[4];
      if (v7)
      {
        uint64_t v8 = this[3];
        if (*(unsigned char *)v8 == 95) {
          break;
        }
      }
      unint64_t Node = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(this[5], 232);
      swift::Demangle::__runtime::Node::addChild(Node, v4, this[5]);
      if (!v4) {
        return v4;
      }
    }
    this[3] = (swift::Demangle::__runtime::NodeFactory *)((char *)v8 + 1);
    this[4] = (swift::Demangle::__runtime::NodeFactory *)((char *)v7 - 1);
  }
  return v4;
}

swift::Demangle::__runtime::Node *anonymous namespace'::OldDemangler::demangleSubstitutionIndex(_anonymous_namespace_::OldDemangler *this)
{
  uint64_t v1 = *((void *)this + 4);
  if (!v1) {
    return 0;
  }
  int v3 = (unsigned char *)*((void *)this + 3);
  switch(*v3)
  {
    case 'C':
      *((void *)this + 3) = v3 + 1;
      *((void *)this + 4) = v1 - 1;
      uint64_t v4 = (void *)*((void *)this + 5);
      int v5 = (unsigned char *)v4[1];
      uint64_t v6 = v5 + 15;
      if (v5) {
        BOOL v7 = (unint64_t)v6 > v4[2];
      }
      else {
        BOOL v7 = 1;
      }
      if (v7)
      {
        unint64_t v8 = 2 * v4[4];
        if (v8 <= 0x10) {
          unint64_t v8 = 16;
        }
        v4[4] = v8;
        unint64_t v9 = v8 + 8;
        unint64_t v10 = malloc_type_malloc(v8 + 8, 0xD0263BC5uLL);
        int v5 = v10 + 1;
        *unint64_t v10 = v4[3];
        uint64_t v6 = (char *)v10 + 23;
        v4[2] = (char *)v10 + v9;
        v4[3] = v10;
      }
      v4[1] = v6;
      qmemcpy(v5, "__C_Synthesized", 15);
      unint64_t v11 = v4;
      uint64_t v12 = 15;
      goto LABEL_27;
    case 'P':
      *((void *)this + 3) = v3 + 1;
      *((void *)this + 4) = v1 - 1;
      std::string v13 = "UnsafePointer";
      goto LABEL_41;
    case 'Q':
      *((void *)this + 3) = v3 + 1;
      *((void *)this + 4) = v1 - 1;
      std::string v13 = "ImplicitlyUnwrappedOptional";
      __int16 v14 = 61;
      size_t v15 = 27;
      goto LABEL_49;
    case 'R':
      *((void *)this + 3) = v3 + 1;
      *((void *)this + 4) = v1 - 1;
      std::string v13 = "UnsafeBufferPointer";
      __int16 v14 = 219;
      size_t v15 = 19;
      goto LABEL_49;
    case 'S':
      *((void *)this + 3) = v3 + 1;
      *((void *)this + 4) = v1 - 1;
      std::string v13 = "String";
      goto LABEL_43;
    case 'V':
      *((void *)this + 3) = v3 + 1;
      *((void *)this + 4) = v1 - 1;
      std::string v13 = "UnsafeRawPointer";
      __int16 v14 = 219;
      size_t v15 = 16;
      goto LABEL_49;
    case 'a':
      *((void *)this + 3) = v3 + 1;
      *((void *)this + 4) = v1 - 1;
      std::string v13 = "Array";
      goto LABEL_38;
    case 'b':
      *((void *)this + 3) = v3 + 1;
      *((void *)this + 4) = v1 - 1;
      std::string v13 = "Bool";
      goto LABEL_47;
    case 'c':
      *((void *)this + 3) = v3 + 1;
      *((void *)this + 4) = v1 - 1;
      std::string v13 = "UnicodeScalar";
LABEL_41:
      __int16 v14 = 219;
      size_t v15 = 13;
      goto LABEL_49;
    case 'd':
      *((void *)this + 3) = v3 + 1;
      *((void *)this + 4) = v1 - 1;
      std::string v13 = "Double";
LABEL_43:
      __int16 v14 = 219;
      size_t v15 = 6;
      goto LABEL_49;
    case 'f':
      *((void *)this + 3) = v3 + 1;
      *((void *)this + 4) = v1 - 1;
      std::string v13 = "Float";
LABEL_38:
      __int16 v14 = 219;
      size_t v15 = 5;
      goto LABEL_49;
    case 'i':
      *((void *)this + 3) = v3 + 1;
      *((void *)this + 4) = v1 - 1;
      std::string v13 = "Int";
      __int16 v14 = 219;
      size_t v15 = 3;
      goto LABEL_49;
    case 'o':
      *((void *)this + 3) = v3 + 1;
      *((void *)this + 4) = v1 - 1;
      unsigned int v16 = (void *)*((void *)this + 5);
      int v5 = (unsigned char *)v16[1];
      uint64_t v17 = v5 + 3;
      if (v5) {
        BOOL v18 = (unint64_t)v17 > v16[2];
      }
      else {
        BOOL v18 = 1;
      }
      if (v18)
      {
        unint64_t v19 = 2 * v16[4];
        if (v19 <= 4) {
          unint64_t v19 = 4;
        }
        v16[4] = v19;
        unint64_t v20 = v19 + 8;
        size_t v21 = malloc_type_malloc(v19 + 8, 0xD0263BC5uLL);
        int v5 = v21 + 1;
        void *v21 = v16[3];
        uint64_t v17 = (char *)v21 + 11;
        v16[2] = (char *)v21 + v20;
        v16[3] = v21;
      }
      v16[1] = v17;
      v5[2] = 67;
      *(_WORD *)int v5 = 24415;
      unint64_t v11 = v16;
      uint64_t v12 = 3;
LABEL_27:
      return (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNodeWithAllocatedText(v11, 153, (uint64_t)v5, v12);
    case 'p':
      *((void *)this + 3) = v3 + 1;
      *((void *)this + 4) = v1 - 1;
      std::string v13 = "UnsafeMutablePointer";
      __int16 v14 = 219;
      size_t v15 = 20;
      goto LABEL_49;
    case 'q':
      *((void *)this + 3) = v3 + 1;
      *((void *)this + 4) = v1 - 1;
      std::string v13 = "Optional";
      __int16 v14 = 61;
      size_t v15 = 8;
      goto LABEL_49;
    case 'r':
      *((void *)this + 3) = v3 + 1;
      *((void *)this + 4) = v1 - 1;
      std::string v13 = "UnsafeMutableBufferPointer";
      __int16 v14 = 219;
      size_t v15 = 26;
      goto LABEL_49;
    case 'u':
      *((void *)this + 3) = v3 + 1;
      *((void *)this + 4) = v1 - 1;
      std::string v13 = "UInt";
LABEL_47:
      __int16 v14 = 219;
      size_t v15 = 4;
      goto LABEL_49;
    case 'v':
      *((void *)this + 3) = v3 + 1;
      *((void *)this + 4) = v1 - 1;
      std::string v13 = "UnsafeMutableRawPointer";
      __int16 v14 = 219;
      size_t v15 = 23;
LABEL_49:
    default:
      unint64_t v24 = 0;
      double result = 0;
      if (!v23) {
        return result;
      }
      if (v24 >= (uint64_t)(*((void *)this + 1) - *(void *)this) >> 3) {
        return 0;
      }
      double result = *(swift::Demangle::__runtime::Node **)(*(void *)this + 8 * v24);
      break;
  }
  return result;
}

swift::Demangle::__runtime::Node *anonymous namespace'::OldDemangler::demangleTuple(uint64_t a1, int a2, int a3)
{
  unint64_t Node = swift::Demangle::__runtime::NodeFactory::createNode(*(void **)(a1 + 40), 223);
  uint64_t v8 = *(void *)(a1 + 32);
  if (!v8) {
    return 0;
  }
  unint64_t v9 = (swift::Demangle::__runtime::Node *)Node;
  unint64_t v10 = *(unsigned char **)(a1 + 24);
  if (*v10 != 95)
  {
    unsigned int v13 = a3 + 1;
    while (1)
    {
      unint64_t v11 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(*(void **)(a1 + 40), 224);
      if (!*(void *)(a1 + 32)) {
        break;
      }
      int v14 = **(unsigned __int8 **)(a1 + 24);
      if (v14 != 111) {
        goto LABEL_12;
      }
LABEL_13:
      unint64_t v3 = v3 & 0xFFFFFFFF00000000 | 0x100E1;
      if (!v15) {
        return 0;
      }
      swift::Demangle::__runtime::Node::addChild(v11, v15, *(swift::Demangle::__runtime::NodeFactory **)(a1 + 40));
LABEL_15:
      if (!v16) {
        return 0;
      }
      uint64_t v17 = (swift::Demangle::__runtime::Node *)v16;
      BOOL v18 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(*(void **)(a1 + 40), 232);
      swift::Demangle::__runtime::Node::addChild(v18, v17, *(swift::Demangle::__runtime::NodeFactory **)(a1 + 40));
      if (!v18) {
        return 0;
      }
      swift::Demangle::__runtime::Node::addChild(v11, v18, *(swift::Demangle::__runtime::NodeFactory **)(a1 + 40));
      swift::Demangle::__runtime::Node::addChild(v9, v11, *(swift::Demangle::__runtime::NodeFactory **)(a1 + 40));
      uint64_t v8 = *(void *)(a1 + 32);
      if (!v8) {
        return 0;
      }
      unint64_t v10 = *(unsigned char **)(a1 + 24);
      if (*v10 == 95) {
        goto LABEL_4;
      }
    }
    int v14 = 46;
LABEL_12:
    if ((v14 - 48) > 9) {
      goto LABEL_15;
    }
    goto LABEL_13;
  }
  unint64_t v11 = 0;
LABEL_4:
  *(void *)(a1 + 24) = v10 + 1;
  *(void *)(a1 + 32) = v8 - 1;
  if (a2 == 1 && v11)
  {
    swift::Demangle::__runtime::Node::reverseChildren((int8x16_t *)v11, 0);
    uint64_t v12 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(*(void **)(a1 + 40), 276);
    swift::Demangle::__runtime::Node::addChild(v11, v12, *(swift::Demangle::__runtime::NodeFactory **)(a1 + 40));
    swift::Demangle::__runtime::Node::reverseChildren((int8x16_t *)v11, 0);
  }
  return v9;
}

swift::Demangle::__runtime::Node *anonymous namespace'::OldDemangler::demangleImplFunctionType(_anonymous_namespace_::OldDemangler *this, int a2)
{
  unint64_t Node = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(*((void **)this + 5), 115);
  uint64_t v5 = *((void *)this + 4);
  if (v5 && (uint64_t v6 = (unsigned char *)*((void *)this + 3), *v6 == 116))
  {
    *((void *)this + 3) = v6 + 1;
    *((void *)this + 4) = v5 - 1;
    BOOL v7 = "@convention(thin)";
    size_t v8 = 17;
  }
  else
  {
    if (!v10) {
      return 0;
    }
    BOOL v7 = v9;
    size_t v8 = v10;
  }
  unint64_t v11 = (void *)*((void *)this + 5);
  uint64_t v12 = (char *)v11[1];
  unsigned int v13 = &v12[v8];
  if (v12) {
    BOOL v14 = (unint64_t)v13 > v11[2];
  }
  else {
    BOOL v14 = 1;
  }
  if (v14)
  {
    unint64_t v15 = 2 * v11[4];
    if (v15 <= v8 + 1) {
      unint64_t v15 = v8 + 1;
    }
    v11[4] = v15;
    unint64_t v16 = v15 + 8;
    uint64_t v17 = malloc_type_malloc(v15 + 8, 0xD0263BC5uLL);
    BOOL v18 = (char *)v17 + v16;
    void *v17 = v11[3];
    uint64_t v12 = (char *)(v17 + 1);
    v11[2] = v18;
    v11[3] = v17;
    unsigned int v13 = (char *)v17 + v8 + 8;
  }
  v11[1] = v13;
  memmove(v12, v7, v8);
  unint64_t NodeWithAllocatedText = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNodeWithAllocatedText(v11, 106, (uint64_t)v12, v8);
  swift::Demangle::__runtime::Node::addChild(Node, NodeWithAllocatedText, *((swift::Demangle::__runtime::NodeFactory **)this + 5));
  uint64_t v20 = *((void *)this + 4);
  if (!v20) {
    return 0;
  }
  size_t v21 = (unsigned char *)*((void *)this + 3);
  if (*v21 == 67)
  {
    *((void *)this + 3) = v21 + 1;
    *((void *)this + 4) = v20 - 1;
    double result = 0;
    if (v20 != 1)
    {
      int v23 = "block";
      size_t v24 = 5;
      switch(v21[1])
      {
        case 'O':
          int v23 = "objc_method";
          size_t v24 = 11;
          goto LABEL_22;
        case 'b':
          goto LABEL_22;
        case 'c':
          int v23 = "c";
          size_t v24 = 1;
          goto LABEL_22;
        case 'm':
          int v23 = "method";
          size_t v24 = 6;
          goto LABEL_22;
        case 'w':
          int v23 = "witness_method";
          size_t v24 = 14;
LABEL_22:
          *((void *)this + 3) = v21 + 2;
          *((void *)this + 4) = v20 - 2;
          int v25 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(*((void **)this + 5), 113);
          int v26 = (void *)*((void *)this + 5);
          uint64_t v27 = (char *)v26[1];
          if (!v27 || (uint64_t v28 = &v27[v24], (unint64_t)&v27[v24] > v26[2]))
          {
            unint64_t v29 = 2 * v26[4];
            if (v29 <= v24 + 1) {
              unint64_t v29 = v24 + 1;
            }
            v26[4] = v29;
            unint64_t v30 = v29 + 8;
            int v31 = malloc_type_malloc(v29 + 8, 0xD0263BC5uLL);
            uint64_t v32 = (char *)v31 + v30;
            void *v31 = v26[3];
            uint64_t v27 = (char *)(v31 + 1);
            v26[2] = v32;
            v26[3] = v31;
            uint64_t v28 = (char *)v31 + v24 + 8;
          }
          v26[1] = v28;
          memmove(v27, v23, v24);
          unsigned int v33 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNodeWithAllocatedText(v26, 114, (uint64_t)v27, v24);
          swift::Demangle::__runtime::Node::addChild(v25, v33, *((swift::Demangle::__runtime::NodeFactory **)this + 5));
          swift::Demangle::__runtime::Node::addChild(Node, v25, *((swift::Demangle::__runtime::NodeFactory **)this + 5));
          uint64_t v20 = *((void *)this + 4);
          if (v20) {
            goto LABEL_28;
          }
          return 0;
        default:
          return result;
      }
    }
    return result;
  }
LABEL_28:
  __int16 v34 = (unsigned __int8 *)*((void *)this + 3);
  int v35 = *v34;
  if (v35 == 104)
  {
    *((void *)this + 3) = v34 + 1;
    *((void *)this + 4) = v20 - 1;
    int v36 = (void *)*((void *)this + 5);
    uint64_t v37 = v36[1];
    if (!v37 || (unint64_t v38 = (char *)(v37 + 9), (unint64_t)(v37 + 9) > v36[2]))
    {
      unint64_t v39 = 2 * v36[4];
      if (v39 <= 0xA) {
        unint64_t v39 = 10;
      }
      v36[4] = v39;
      unint64_t v40 = v39 + 8;
      int v41 = malloc_type_malloc(v39 + 8, 0xD0263BC5uLL);
      uint64_t v37 = (uint64_t)(v41 + 1);
      *int v41 = v36[3];
      unint64_t v38 = (char *)v41 + 17;
      v36[2] = (char *)v41 + v40;
      v36[3] = v41;
    }
    v36[1] = v38;
    *(void *)uint64_t v37 = *(void *)"@Sendable";
    *(unsigned char *)(v37 + 8) = 101;
    unsigned int v42 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNodeWithAllocatedText(v36, 112, v37, 9);
    swift::Demangle::__runtime::Node::addChild(Node, v42, *((swift::Demangle::__runtime::NodeFactory **)this + 5));
    uint64_t v20 = *((void *)this + 4);
    if (!v20) {
      return 0;
    }
    __int16 v34 = (unsigned __int8 *)*((void *)this + 3);
    int v35 = *v34;
  }
  if (v35 == 72)
  {
    *((void *)this + 3) = v34 + 1;
    *((void *)this + 4) = v20 - 1;
    __int16 v43 = (void *)*((void *)this + 5);
    uint64_t v44 = v43[1];
    if (!v44 || (uint64_t v45 = (char *)(v44 + 6), (unint64_t)(v44 + 6) > v43[2]))
    {
      unint64_t v46 = 2 * v43[4];
      if (v46 <= 7) {
        unint64_t v46 = 7;
      }
      v43[4] = v46;
      unint64_t v47 = v46 + 8;
      int v48 = malloc_type_malloc(v46 + 8, 0xD0263BC5uLL);
      uint64_t v44 = (uint64_t)(v48 + 1);
      *int v48 = v43[3];
      uint64_t v45 = (char *)v48 + 14;
      v43[2] = (char *)v48 + v47;
      v43[3] = v48;
    }
    v43[1] = v45;
    *(_WORD *)(v44 + 4) = 25454;
    *(_DWORD *)uint64_t v44 = 2037604672;
    int v49 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNodeWithAllocatedText(v43, 112, v44, 6);
    swift::Demangle::__runtime::Node::addChild(Node, v49, *((swift::Demangle::__runtime::NodeFactory **)this + 5));
    uint64_t v20 = *((void *)this + 4);
    if (!v20) {
      return 0;
    }
    __int16 v34 = (unsigned __int8 *)*((void *)this + 3);
    int v35 = *v34;
  }
  if ((v35 | 0x20) == 0x67)
  {
    *((void *)this + 3) = v34 + 1;
    *((void *)this + 4) = v20 - 1;
    if (!result) {
      return result;
    }
    swift::Demangle::__runtime::Node::addChild(Node, result, *((swift::Demangle::__runtime::NodeFactory **)this + 5));
    uint64_t v20 = *((void *)this + 4);
    if (!v20) {
      return 0;
    }
    __int16 v34 = (unsigned __int8 *)*((void *)this + 3);
    int v35 = *v34;
  }
  if (v35 != 95) {
    return 0;
  }
  uint64_t v50 = v20 - 1;
  *((void *)this + 3) = v34 + 1;
  *((void *)this + 4) = v50;
  int v51 = a2 + 2;
  if (!v50) {
    goto LABEL_51;
  }
LABEL_50:
  uint64_t v52 = (unsigned char *)*((void *)this + 3);
  if (*v52 == 95)
  {
    uint64_t v53 = v50 - 1;
    *((void *)this + 3) = v52 + 1;
    *((void *)this + 4) = v53;
    if (!v53) {
      goto LABEL_58;
    }
LABEL_57:
    __int16 v54 = (unsigned char *)*((void *)this + 3);
    if (*v54 == 95)
    {
      *((void *)this + 3) = v54 + 1;
      *((void *)this + 4) = v53 - 1;
      return Node;
    }
    else
    {
LABEL_58:
      while (1)
      {
        if (!result) {
          break;
        }
        swift::Demangle::__runtime::Node::addChild(Node, result, *((swift::Demangle::__runtime::NodeFactory **)this + 5));
        uint64_t v53 = *((void *)this + 4);
        if (v53) {
          goto LABEL_57;
        }
      }
    }
  }
  else
  {
LABEL_51:
    while (1)
    {
      if (!result) {
        break;
      }
      swift::Demangle::__runtime::Node::addChild(Node, result, *((swift::Demangle::__runtime::NodeFactory **)this + 5));
      uint64_t v50 = *((void *)this + 4);
      if (v50) {
        goto LABEL_50;
      }
    }
  }
  return result;
}

swift::Demangle::__runtime::Node *anonymous namespace'::OldDemangler::demangleContext(_anonymous_namespace_::OldDemangler *this, int a2)
{
  uint64_t v2 = *((void *)this + 4);
  if (v2)
  {
    uint64_t v5 = (unsigned char *)*((void *)this + 3);
    switch(*v5)
    {
      case 'E':
        *((void *)this + 3) = v5 + 1;
        *((void *)this + 4) = v2 - 1;
        unint64_t Node = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(*((void **)this + 5), 71);
        unsigned int v7 = a2 + 1;
        if (!v8) {
          return 0;
        }
        unint64_t v9 = (swift::Demangle::__runtime::Node *)v8;
        if (!v10) {
          return 0;
        }
        unint64_t v11 = (swift::Demangle::__runtime::Node *)v10;
        swift::Demangle::__runtime::Node::addChild(Node, v9, *((swift::Demangle::__runtime::NodeFactory **)this + 5));
        uint64_t v12 = (swift::Demangle::__runtime::NodeFactory *)*((void *)this + 5);
        unsigned int v13 = Node;
        BOOL v14 = v11;
        goto LABEL_24;
      case 'G':
        *((void *)this + 3) = v5 + 1;
        *((void *)this + 4) = v2 - 1;
        if (!v20) {
          return 0;
        }
      case 'S':
        *((void *)this + 3) = v5 + 1;
        *((void *)this + 4) = v2 - 1;
      case 'e':
        *((void *)this + 3) = v5 + 1;
        *((void *)this + 4) = v2 - 1;
        unint64_t Node = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(*((void **)this + 5), 71);
        unsigned int v21 = a2 + 1;
        if (!v22) {
          return 0;
        }
        int v23 = (swift::Demangle::__runtime::Node *)v22;
        if (!v24) {
          return 0;
        }
        int v25 = v24;
        if (!v26) {
          return 0;
        }
        uint64_t v27 = (swift::Demangle::__runtime::Node *)v26;
        swift::Demangle::__runtime::Node::addChild(Node, v23, *((swift::Demangle::__runtime::NodeFactory **)this + 5));
        swift::Demangle::__runtime::Node::addChild(Node, v27, *((swift::Demangle::__runtime::NodeFactory **)this + 5));
        uint64_t v12 = (swift::Demangle::__runtime::NodeFactory *)*((void *)this + 5);
        unsigned int v13 = Node;
        BOOL v14 = (swift::Demangle::__runtime::Node *)v25;
LABEL_24:
        swift::Demangle::__runtime::Node::addChild(v13, v14, v12);
        return Node;
      case 's':
        *((void *)this + 3) = v5 + 1;
        *((void *)this + 4) = v2 - 1;
        uint64_t v28 = (void *)*((void *)this + 5);
        uint64_t v29 = v28[1];
        unint64_t v30 = (char *)(v29 + 5);
        if (v29) {
          BOOL v31 = (unint64_t)v30 > v28[2];
        }
        else {
          BOOL v31 = 1;
        }
        if (v31)
        {
          unint64_t v32 = 2 * v28[4];
          if (v32 <= 6) {
            unint64_t v32 = 6;
          }
          v28[4] = v32;
          unint64_t v33 = v32 + 8;
          __int16 v34 = malloc_type_malloc(v32 + 8, 0xD0263BC5uLL);
          uint64_t v29 = (uint64_t)(v34 + 1);
          void *v34 = v28[3];
          unint64_t v30 = (char *)v34 + 13;
          void v28[2] = (char *)v34 + v33;
          v28[3] = v34;
        }
        v28[1] = v30;
        *(unsigned char *)(v29 + 4) = 116;
        *(_DWORD *)uint64_t v29 = 1718187859;
        return (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNodeWithAllocatedText(v28, 153, v29, 5);
      default:
        unsigned int v15 = (char)*v5 - 67;
        BOOL v31 = v15 > 0x33;
        uint64_t v16 = (1 << v15) & 0x9000000883049;
        unsigned int v17 = a2 + 1;
        if (v31 || v16 == 0)
        {
        }
        else
        {
        }
    }
  }
  return 0;
}

unint64_t anonymous namespace'::OldDemangler::demangleDeclName(_anonymous_namespace_::OldDemangler *this)
{
  uint64_t v2 = *((void *)this + 4);
  if (v2)
  {
    unint64_t v3 = (unsigned __int8 *)*((void *)this + 3);
    int v4 = *v3;
    if (v4 == 80)
    {
      *((void *)this + 3) = v3 + 1;
      *((void *)this + 4) = v2 - 1;
      if (v15)
      {
        unint64_t v9 = (swift::Demangle::__runtime::Node *)v15;
        if (v16)
        {
          unint64_t v11 = (swift::Demangle::__runtime::Node *)v16;
          uint64_t v12 = (void *)*((void *)this + 5);
          __int16 v13 = 176;
          goto LABEL_16;
        }
      }
      return 0;
    }
    if (v4 == 76)
    {
      *((void *)this + 3) = v3 + 1;
      *((void *)this + 4) = v2 - 1;
      if (v2 != 1)
      {
        int v5 = v3[1];
        uint64_t v6 = v3 + 2;
        *((void *)this + 3) = v3 + 2;
        *((void *)this + 4) = v2 - 2;
        if (v5 == 95)
        {
          uint64_t v7 = 0;
        }
        else
        {
          unsigned int v17 = 0;
          if (v2 == 2 || (v5 - 58) < 0xFFFFFFF6) {
            return (unint64_t)v17;
          }
          uint64_t v18 = (v5 - 48);
          unint64_t v19 = v3 + 3;
          uint64_t v20 = v2 - 3;
          while (1)
          {
            int v21 = *v6;
            if ((v21 - 58) < 0xFFFFFFF6) {
              break;
            }
            uint64_t v18 = (v21 - 48) + 10 * v18;
            ++v6;
            *((void *)this + 3) = v19;
            *((void *)this + 4) = v20;
            ++v19;
            if (--v20 == -1) {
              return 0;
            }
          }
          if (v21 != 95) {
            return 0;
          }
          *((void *)this + 3) = v19;
          *((void *)this + 4) = v20;
          uint64_t v7 = v18 + 1;
        }
        unint64_t Node = swift::Demangle::__runtime::NodeFactory::createNode(*((void **)this + 5), 161, v7);
        if (Node)
        {
          unint64_t v9 = (swift::Demangle::__runtime::Node *)Node;
          if (v10)
          {
            unint64_t v11 = (swift::Demangle::__runtime::Node *)v10;
            uint64_t v12 = (void *)*((void *)this + 5);
            __int16 v13 = 137;
LABEL_16:
            unsigned int v17 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(v12, v13);
            swift::Demangle::__runtime::Node::addChild(v17, v9, *((swift::Demangle::__runtime::NodeFactory **)this + 5));
            swift::Demangle::__runtime::Node::addChild(v17, v11, *((swift::Demangle::__runtime::NodeFactory **)this + 5));
            return (unint64_t)v17;
          }
        }
      }
      return 0;
    }
  }
}

unint64_t anonymous namespace'::OldDemangler::demangleModule(_anonymous_namespace_::OldDemangler *this)
{
  uint64_t v2 = *((void *)this + 4);
  if (!v2) {
    goto LABEL_15;
  }
  unint64_t v3 = (unsigned __int8 *)*((void *)this + 3);
  int v4 = *v3;
  if (v4 == 83)
  {
    *((void *)this + 3) = v3 + 1;
    *((void *)this + 4) = v2 - 1;
    if (!v18) {
      return 0;
    }
    if (*((_WORD *)v18 + 8) == 153) {
      return (unint64_t)v18;
    }
    return 0;
  }
  if (v4 != 115)
  {
LABEL_15:
    unint64_t v14 = v13;
    if (v13)
    {
      unint64_t v16 = (unint64_t *)*((void *)this + 1);
      unint64_t v15 = *((void *)this + 2);
      if ((unint64_t)v16 >= v15)
      {
        unint64_t v19 = *(unint64_t **)this;
        uint64_t v20 = (uint64_t)v16 - *(void *)this;
        uint64_t v21 = v20 >> 3;
        unint64_t v22 = (v20 >> 3) + 1;
        if (v22 >> 61) {
          abort();
        }
        uint64_t v23 = v15 - (void)v19;
        if (v23 >> 2 > v22) {
          unint64_t v22 = v23 >> 2;
        }
        if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v24 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v24 = v22;
        }
        if (v24)
        {
          if (v24 >> 61) {
            std::__throw_bad_array_new_length[abi:nn180100]();
          }
          int v25 = operator new(8 * v24);
        }
        else
        {
          int v25 = 0;
        }
        uint64_t v26 = (unint64_t *)&v25[8 * v21];
        uint64_t v27 = &v25[8 * v24];
        unint64_t *v26 = v14;
        unsigned int v17 = v26 + 1;
        if (v16 != v19)
        {
          unint64_t v28 = (char *)v16 - (char *)v19 - 8;
          if (v28 < 0x58) {
            goto LABEL_49;
          }
          if ((unint64_t)((char *)v16 - v25 - v20) < 0x20) {
            goto LABEL_49;
          }
          uint64_t v29 = (v28 >> 3) + 1;
          uint64_t v30 = 8 * (v29 & 0x3FFFFFFFFFFFFFFCLL);
          BOOL v31 = &v16[v30 / 0xFFFFFFFFFFFFFFF8];
          uint64_t v26 = (unint64_t *)((char *)v26 - v30);
          unint64_t v32 = &v25[8 * v21 - 16];
          unint64_t v33 = v16 - 2;
          uint64_t v34 = v29 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v35 = *(_OWORD *)v33;
            *(v32 - 1) = *((_OWORD *)v33 - 1);
            *unint64_t v32 = v35;
            v32 -= 2;
            v33 -= 4;
            v34 -= 4;
          }
          while (v34);
          unint64_t v16 = v31;
          if (v29 != (v29 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_49:
            do
            {
              unint64_t v36 = *--v16;
              *--uint64_t v26 = v36;
            }
            while (v16 != v19);
          }
          unint64_t v16 = *(unint64_t **)this;
        }
        *(void *)this = v26;
        *((void *)this + 1) = v17;
        *((void *)this + 2) = v27;
        if (v16) {
          operator delete(v16);
        }
      }
      else
      {
        *unint64_t v16 = v13;
        unsigned int v17 = v16 + 1;
      }
      *((void *)this + 1) = v17;
    }
    return v14;
  }
  *((void *)this + 3) = v3 + 1;
  *((void *)this + 4) = v2 - 1;
  int v5 = (void *)*((void *)this + 5);
  uint64_t v6 = v5[1];
  uint64_t v7 = (char *)(v6 + 5);
  if (v6) {
    BOOL v8 = (unint64_t)v7 > v5[2];
  }
  else {
    BOOL v8 = 1;
  }
  if (v8)
  {
    unint64_t v9 = 2 * v5[4];
    if (v9 <= 6) {
      unint64_t v9 = 6;
    }
    v5[4] = v9;
    unint64_t v10 = v9 + 8;
    unint64_t v11 = malloc_type_malloc(v9 + 8, 0xD0263BC5uLL);
    uint64_t v6 = (uint64_t)(v11 + 1);
    *unint64_t v11 = v5[3];
    uint64_t v7 = (char *)v11 + 13;
    v5[2] = (char *)v11 + v10;
    v5[3] = v11;
  }
  v5[1] = v7;
  *(unsigned char *)(v6 + 4) = 116;
  *(_DWORD *)uint64_t v6 = 1718187859;

  return swift::Demangle::__runtime::NodeFactory::createNodeWithAllocatedText(v5, 153, v6, 5);
}

swift::Demangle::__runtime::Node *anonymous namespace'::OldDemangler::demangleEntity(_anonymous_namespace_::OldDemangler *this, unsigned int a2)
{
  if (a2 > 0x400) {
    return 0;
  }
  uint64_t v5 = *((void *)this + 4);
  if (!v5) {
    goto LABEL_12;
  }
  uint64_t v6 = (unsigned char *)*((void *)this + 3);
  int v7 = *v6;
  if (v7 != 90)
  {
    if (v7 != 70) {
      goto LABEL_8;
    }
LABEL_16:
    int v9 = 0;
    __int16 v10 = 76;
    goto LABEL_19;
  }
  ++v6;
  --v5;
  *((void *)this + 3) = v6;
  *((void *)this + 4) = v5;
  if (!v5) {
    goto LABEL_12;
  }
  if (*v6 == 70) {
    goto LABEL_16;
  }
LABEL_8:
  int v8 = *v6;
  switch(v8)
  {
    case 'I':
      __int16 v10 = 125;
      int v9 = 1;
      goto LABEL_19;
    case 'i':
      int v9 = 0;
      __int16 v10 = 220;
LABEL_19:
      *((void *)this + 3) = v6 + 1;
      *((void *)this + 4) = v5 - 1;
      unsigned int v11 = a2 + 1;
      if (v12)
      {
        unint64_t v13 = (swift::Demangle::__runtime::Node *)v12;
        uint64_t v14 = *((void *)this + 4);
        if (v14)
        {
          unint64_t v15 = (unsigned __int8 *)*((void *)this + 3);
          int v16 = *v15;
          int v17 = 0;
          __int16 v18 = 31;
          switch(*v15)
          {
            case 'C':
              __int16 v18 = 0;
              int v17 = 1;
              goto LABEL_46;
            case 'D':
              goto LABEL_46;
            case 'E':
              int v17 = 0;
              __int16 v18 = 104;
              goto LABEL_46;
            case 'G':
              *((void *)this + 3) = v15 + 1;
              *((void *)this + 4) = v14 - 1;
              if (!v22) {
                return 0;
              }
              uint64_t v23 = (_DWORD *)v22;
              __int16 v24 = 100;
              goto LABEL_74;
            case 'M':
              *((void *)this + 3) = v15 + 1;
              *((void *)this + 4) = v14 - 1;
              if (!v25) {
                return 0;
              }
              uint64_t v23 = (_DWORD *)v25;
              __int16 v24 = 152;
              goto LABEL_74;
            case 'U':
              *((void *)this + 3) = v15 + 1;
              *((void *)this + 4) = v14 - 1;
              if (!v26) {
                return 0;
              }
              uint64_t v20 = (swift::Demangle::__runtime::Node *)v26;
              __int16 v10 = 70;
              int v17 = 1;
              goto LABEL_47;
            case 'W':
              *((void *)this + 3) = v15 + 1;
              *((void *)this + 4) = v14 - 1;
              if (!v27) {
                return 0;
              }
              uint64_t v23 = (_DWORD *)v27;
              __int16 v24 = 51;
              goto LABEL_74;
            case 'a':
              *((void *)this + 3) = v15 + 1;
              *((void *)this + 4) = v14 - 1;
              unint64_t Node = 0;
              if (v14 != 1)
              {
                __int16 v24 = 169;
                switch(v15[1])
                {
                  case 'O':
                    goto LABEL_73;
                  case 'o':
                    __int16 v24 = 155;
                    goto LABEL_73;
                  case 'p':
                    __int16 v24 = 157;
                    goto LABEL_73;
                  case 'u':
                    __int16 v24 = 251;
                    goto LABEL_73;
                  default:
                    return Node;
                }
              }
              return Node;
            case 'c':
              __int16 v18 = 29;
              int v17 = 1;
              goto LABEL_46;
            case 'd':
              int v17 = 0;
              __int16 v18 = 50;
              goto LABEL_46;
            case 'e':
              int v17 = 0;
              __int16 v18 = 103;
              goto LABEL_46;
            case 'g':
              *((void *)this + 3) = v15 + 1;
              *((void *)this + 4) = v14 - 1;
              if (!v35) {
                return 0;
              }
              uint64_t v23 = (_DWORD *)v35;
              __int16 v24 = 98;
              goto LABEL_74;
            case 'l':
              *((void *)this + 3) = v15 + 1;
              *((void *)this + 4) = v14 - 1;
              unint64_t Node = 0;
              if (v14 != 1)
              {
                __int16 v24 = 168;
                switch(v15[1])
                {
                  case 'O':
                    goto LABEL_73;
                  case 'o':
                    __int16 v24 = 154;
                    goto LABEL_73;
                  case 'p':
                    __int16 v24 = 156;
                    goto LABEL_73;
                  case 'u':
                    __int16 v24 = 250;
LABEL_73:
                    *((void *)this + 3) = v15 + 2;
                    *((void *)this + 4) = v14 - 2;
                    if (v23) {
                      goto LABEL_74;
                    }
                    return 0;
                  default:
                    return Node;
                }
              }
              return Node;
            case 'm':
              *((void *)this + 3) = v15 + 1;
              *((void *)this + 4) = v14 - 1;
              if (!v36) {
                return 0;
              }
              uint64_t v23 = (_DWORD *)v36;
              __int16 v24 = 141;
              goto LABEL_74;
            case 'r':
              *((void *)this + 3) = v15 + 1;
              *((void *)this + 4) = v14 - 1;
              if (!v37) {
                return 0;
              }
              uint64_t v23 = (_DWORD *)v37;
              __int16 v24 = 204;
              goto LABEL_74;
            case 's':
              *((void *)this + 3) = v15 + 1;
              *((void *)this + 4) = v14 - 1;
              if (!v38) {
                return 0;
              }
              uint64_t v23 = (_DWORD *)v38;
              __int16 v24 = 215;
              goto LABEL_74;
            case 'u':
              *((void *)this + 3) = v15 + 1;
              *((void *)this + 4) = v14 - 1;
              if (!v39) {
                return 0;
              }
              uint64_t v20 = (swift::Demangle::__runtime::Node *)v39;
              __int16 v10 = 117;
              int v17 = 1;
              goto LABEL_47;
            case 'w':
              *((void *)this + 3) = v15 + 1;
              *((void *)this + 4) = v14 - 1;
              if (!v40) {
                return 0;
              }
              uint64_t v23 = (_DWORD *)v40;
              __int16 v24 = 257;
LABEL_74:
              unint64_t v28 = (swift::Demangle::__runtime::NodeFactory **)((char *)this + 40);
              unint64_t Node = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(*((void **)this + 5), v24);
              int v41 = *((unsigned __int16 *)v23 + 8);
              if (v41 != 176)
              {
                if (v41 != 101 || *((void *)v23 + 1) != 9) {
                  goto LABEL_92;
                }
                if (**(void **)v23 != 0x7069726373627573 || *(unsigned char *)(*(void *)v23 + 8) != 116) {
                  goto LABEL_92;
                }
                uint64_t v23 = 0;
                goto LABEL_109;
              }
              int v43 = *((unsigned __int8 *)v23 + 18);
              uint64_t v44 = v23;
              if (v43 != 2)
              {
                if (v43 != 5 || v23[2] < 2u)
                {
LABEL_92:
                  uint64_t v50 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(*v28, 254);
                  swift::Demangle::__runtime::Node::addChild(v50, v13, *v28);
                  swift::Demangle::__runtime::Node::addChild(v50, (swift::Demangle::__runtime::Node *)v23, *v28);
                  char v51 = 0;
                  goto LABEL_93;
                }
                uint64_t v44 = *(_DWORD **)v23;
              }
              uint64_t v45 = (uint64_t **)*((void *)v44 + 1);
              if (v45[1] != (uint64_t *)((char *)&dword_8 + 1)) {
                goto LABEL_92;
              }
              unint64_t v46 = *v45;
              uint64_t v47 = *v46;
              int v48 = *((unsigned __int8 *)v46 + 8);
              if (v47 != 0x7069726373627573 || v48 != 116) {
                goto LABEL_92;
              }
              if (v43 == 2) {
                goto LABEL_106;
              }
              if (v23[2])
              {
                uint64_t v23 = *(_DWORD **)v23;
LABEL_106:
                unint64_t v57 = *(swift::Demangle::__runtime::Node **)v23;
              }
              else
              {
                unint64_t v57 = 0;
              }
              uint64_t v23 = (_DWORD *)swift::Demangle::__runtime::NodeFactory::createNode(*v28, 176);
              swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v23, v57, *v28);
LABEL_109:
              uint64_t v50 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(*v28, 220);
              swift::Demangle::__runtime::Node::addChild(v50, v13, *v28);
              char v51 = 1;
LABEL_93:
              if (!v52) {
                return 0;
              }
              uint64_t v53 = (swift::Demangle::__runtime::Node *)v52;
              __int16 v54 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(*v28, 232);
              swift::Demangle::__runtime::Node::addChild(v54, v53, *v28);
              if (!v54) {
                return 0;
              }
              swift::Demangle::__runtime::Node::addChild(v50, v54, *v28);
              char v55 = v51 ^ 1;
              if (!v23) {
                char v55 = 1;
              }
              if ((v55 & 1) == 0) {
                swift::Demangle::__runtime::Node::addChild(v50, (swift::Demangle::__runtime::Node *)v23, *v28);
              }
              unint64_t v32 = *v28;
              unint64_t v33 = Node;
              uint64_t v34 = v50;
              goto LABEL_100;
            default:
              if (!v9) {
                goto LABEL_24;
              }
              if (v16 == 105)
              {
                int v17 = 0;
                __int16 v18 = 125;
LABEL_46:
                uint64_t v20 = 0;
                *((void *)this + 3) = v15 + 1;
                *((void *)this + 4) = v14 - 1;
                __int16 v10 = v18;
                goto LABEL_47;
              }
              if (v16 == 65)
              {
                *((void *)this + 3) = v15 + 1;
                *((void *)this + 4) = v14 - 1;
                if (v21)
                {
                  uint64_t v20 = (swift::Demangle::__runtime::Node *)v21;
                  int v17 = 0;
                  __int16 v10 = 33;
                  goto LABEL_47;
                }
              }
              return 0;
          }
        }
        if ((v9 & 1) == 0)
        {
LABEL_24:
          if (v19)
          {
            uint64_t v20 = (swift::Demangle::__runtime::Node *)v19;
            int v17 = 1;
LABEL_47:
            unint64_t v28 = (swift::Demangle::__runtime::NodeFactory **)((char *)this + 40);
            unint64_t Node = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(*((void **)this + 5), v10);
            swift::Demangle::__runtime::Node::addChild(Node, v13, *((swift::Demangle::__runtime::NodeFactory **)this + 5));
            if (v20) {
              swift::Demangle::__runtime::Node::addChild(Node, v20, *v28);
            }
            if (!v17) {
              goto LABEL_101;
            }
            if (v29)
            {
              uint64_t v30 = (swift::Demangle::__runtime::Node *)v29;
              BOOL v31 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(*v28, 232);
              swift::Demangle::__runtime::Node::addChild(v31, v30, *v28);
              if (v31)
              {
                unint64_t v32 = *v28;
                unint64_t v33 = Node;
                uint64_t v34 = v31;
LABEL_100:
                swift::Demangle::__runtime::Node::addChild(v33, v34, v32);
LABEL_101:
                if (v7 == 90)
                {
                  uint64_t v56 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(*v28, 218);
                  swift::Demangle::__runtime::Node::addChild(v56, Node, *v28);
                  return v56;
                }
                return Node;
              }
            }
          }
        }
      }
      return 0;
    case 'v':
      int v9 = 0;
      __int16 v10 = 254;
      goto LABEL_19;
  }
LABEL_12:
}

unint64_t anonymous namespace'::OldDemangler::demangleIdentifier(void *a1, int a2)
{
  uint64_t v2 = a1[4];
  if (!v2) {
    return 0;
  }
  int v4 = (unsigned __int8 *)a1[3];
  int v5 = *v4;
  if (v5 == 88)
  {
    ++v4;
    std::string __p = 0;
    unint64_t v27 = 0;
    uint64_t v28 = 0;
    --v2;
    a1[3] = v4;
    a1[4] = v2;
    if (!v2)
    {
LABEL_14:
      char v9 = 0;
      if (BYTE2(a2)) {
        __int16 v8 = a2;
      }
      else {
        __int16 v8 = 101;
      }
      if (!v2) {
        goto LABEL_39;
      }
      goto LABEL_22;
    }
  }
  else
  {
    std::string __p = 0;
    unint64_t v27 = 0;
    uint64_t v28 = 0;
  }
  if (*v4 != 111) {
    goto LABEL_14;
  }
  unint64_t NodeWithAllocatedText = 0;
  a1[3] = v4 + 1;
  a1[4] = v2 - 1;
  if (!BYTE2(a2) && v2 != 1)
  {
    int v7 = (char)v4[1];
    v4 += 2;
    v2 -= 2;
    a1[3] = v4;
    a1[4] = v2;
    switch(v7)
    {
      case 'p':
        __int16 v8 = 175;
        break;
      case 'i':
        __int16 v8 = 124;
        break;
      case 'P':
        __int16 v8 = 173;
        break;
      default:
        goto LABEL_39;
    }
    char v9 = 1;
    if (!v2) {
      goto LABEL_39;
    }
LABEL_22:
    p_p = (std::string *)(v4 + 1);
    int v10 = *v4;
    unint64_t v12 = v2 - 1;
    a1[3] = v4 + 1;
    a1[4] = v12;
    if ((v10 - 48) > 9) {
      goto LABEL_39;
    }
    unint64_t size = (v10 - 48);
    if (v12)
    {
      uint64_t v14 = v4 + 2;
      do
      {
        int v15 = p_p->__r_.__value_.__s.__data_[0];
        if ((v15 - 58) < 0xFFFFFFF6) {
          break;
        }
        unint64_t size = (v15 - 48) + 10 * size;
        p_p = (std::string *)((char *)p_p + 1);
        --v12;
        a1[3] = v14;
        a1[4] = v12;
        ++v14;
      }
      while (v12);
    }
    if (v12 < size) {
      goto LABEL_39;
    }
    a1[3] = (char *)p_p + size;
    a1[4] = v12 - size;
    if (v5 != 88)
    {
LABEL_36:
      if (size)
      {
        memset(&v25, 0, sizeof(v25));
        if (v9)
        {
          std::string::reserve(&v25, size);
          do
          {
            uint64_t v17 = p_p->__r_.__value_.__s.__data_[0];
            if ((v17 & 0x8000000000000000) == 0)
            {
              if ((v17 - 123) < 0xE6u
                || (uint64_t v17 = (v17 - 97), ((0x17007A2uLL >> v17) & 1) != 0))
              {
                unint64_t NodeWithAllocatedText = 0;
                if ((SHIBYTE(v25.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                  goto LABEL_40;
                }
                goto LABEL_68;
              }
            }
            std::string::push_back(&v25, v17);
            p_p = (std::string *)((char *)p_p + 1);
            --size;
          }
          while (size);
          if ((v25.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            p_p = &v25;
          }
          else {
            p_p = (std::string *)v25.__r_.__value_.__r.__words[0];
          }
          if ((v25.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            unint64_t size = HIBYTE(v25.__r_.__value_.__r.__words[2]);
          }
          else {
            unint64_t size = v25.__r_.__value_.__l.__size_;
          }
          __int16 v18 = (void *)a1[5];
          if (!size)
          {
            unint64_t v19 = 0;
            goto LABEL_67;
          }
        }
        else
        {
          __int16 v18 = (void *)a1[5];
        }
        unint64_t v19 = (char *)v18[1];
        uint64_t v20 = &v19[size];
        if (v19) {
          BOOL v21 = (unint64_t)v20 > v18[2];
        }
        else {
          BOOL v21 = 1;
        }
        if (v21)
        {
          unint64_t v22 = 2 * v18[4];
          if (v22 <= size + 1) {
            unint64_t v22 = size + 1;
          }
          v18[4] = v22;
          unint64_t v23 = v22 + 8;
          __int16 v24 = malloc_type_malloc(v22 + 8, 0xD0263BC5uLL);
          *__int16 v24 = v18[3];
          unint64_t v19 = (char *)(v24 + 1);
          v18[2] = (char *)v24 + v23;
          v18[3] = v24;
          uint64_t v20 = (char *)v24 + size + 8;
        }
        v18[1] = v20;
        memmove(v19, p_p, size);
LABEL_67:
        unint64_t NodeWithAllocatedText = swift::Demangle::__runtime::NodeFactory::createNodeWithAllocatedText(v18, v8, (uint64_t)v19, size);
        if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
LABEL_68:
        }
          operator delete(v25.__r_.__value_.__l.__data_);
        goto LABEL_40;
      }
      goto LABEL_39;
    }
    if (swift::Punycode::__runtime::decodePunycodeUTF8((unsigned __int8 *)p_p, size, (uint64_t)&__p))
    {
      if (v28 >= 0) {
        p_p = (std::string *)&__p;
      }
      else {
        p_p = (std::string *)__p;
      }
      if (v28 >= 0) {
        unint64_t size = HIBYTE(v28);
      }
      else {
        unint64_t size = v27;
      }
      goto LABEL_36;
    }
LABEL_39:
    unint64_t NodeWithAllocatedText = 0;
  }
LABEL_40:
  if (SHIBYTE(v28) < 0) {
    operator delete(__p);
  }
  return NodeWithAllocatedText;
}

swift::Demangle::__runtime::Node *anonymous namespace'::OldDemangler::demangleNominalType(_anonymous_namespace_::OldDemangler *this)
{
  uint64_t v1 = *((void *)this + 4);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = (unsigned char *)*((void *)this + 3);
  switch(*v2)
  {
    case 'C':
      *((void *)this + 3) = v2 + 1;
      *((void *)this + 4) = v1 - 1;
      goto LABEL_4;
    case 'O':
      *((void *)this + 3) = v2 + 1;
      *((void *)this + 4) = v1 - 1;
      goto LABEL_4;
    case 'P':
      *((void *)this + 3) = v2 + 1;
      *((void *)this + 4) = v1 - 1;
      goto LABEL_4;
    case 'S':
      *((void *)this + 3) = v2 + 1;
      *((void *)this + 4) = v1 - 1;
    case 'V':
      *((void *)this + 3) = v2 + 1;
      *((void *)this + 4) = v1 - 1;
LABEL_4:
      break;
    default:
      return 0;
  }
  return result;
}

unint64_t anonymous namespace'::OldDemangler::demangleIndexAsNode(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (v1)
  {
    uint64_t v2 = *(unsigned __int8 **)(a1 + 24);
    unint64_t v3 = v2 + 1;
    int v4 = *v2;
    *(void *)(a1 + 24) = v2 + 1;
    *(void *)(a1 + 32) = v1 - 1;
    if (v4 == 95)
    {
      uint64_t v5 = 0;
      return swift::Demangle::__runtime::NodeFactory::createNode(*(void **)(a1 + 40), 161, v5);
    }
    if ((v4 - 58) >= 0xFFFFFFF6 && v1 != 1)
    {
      uint64_t v8 = (v4 - 48);
      char v9 = v2 + 2;
      uint64_t v10 = v1 - 2;
      while (1)
      {
        int v11 = *v3;
        if ((v11 - 58) < 0xFFFFFFF6) {
          break;
        }
        uint64_t v8 = (v11 - 48) + 10 * v8;
        ++v3;
        *(void *)(a1 + 24) = v9;
        *(void *)(a1 + 32) = v10;
        ++v9;
        if (--v10 == -1) {
          return 0;
        }
      }
      if (v11 == 95)
      {
        *(void *)(a1 + 24) = v9;
        *(void *)(a1 + 32) = v10;
        uint64_t v5 = v8 + 1;
        return swift::Demangle::__runtime::NodeFactory::createNode(*(void **)(a1 + 40), 161, v5);
      }
    }
  }
  return 0;
}

swift::Demangle::__runtime::Node *anonymous namespace'::OldDemangler::demangleBoundGenericArgs(swift::Demangle::__runtime::NodeFactory **this, swift::Demangle::__runtime::Node *a2, int a3)
{
  int v4 = a2;
  int v6 = *((unsigned __int8 *)a2 + 18);
  int v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 != 5 || !*((_DWORD *)a2 + 2)) {
      return 0;
    }
    int v7 = *(swift::Demangle::__runtime::Node **)a2;
  }
  uint64_t v8 = *(swift::Demangle::__runtime::Node **)v7;
  int v9 = *(unsigned __int16 *)(*(void *)v7 + 16);
  if (v9 == 71 || v9 == 76 || v9 == 153) {
    goto LABEL_30;
  }
  if (!v10) {
    return 0;
  }
  int v11 = (swift::Demangle::__runtime::Node *)v10;
  unint64_t Node = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(this[5], *((_WORD *)v4 + 8));
  swift::Demangle::__runtime::Node::addChild(Node, v11, this[5]);
  for (unint64_t i = 1; ; ++i)
  {
    unint64_t v15 = *((unsigned __int8 *)v4 + 18);
    if (v15 == 1)
    {
      if (v15 <= i) {
        goto LABEL_29;
      }
      goto LABEL_20;
    }
    if (v15 != 5) {
      break;
    }
    if (*((unsigned int *)v4 + 2) <= i) {
      goto LABEL_29;
    }
LABEL_20:
    unsigned int v16 = v15 - 1;
    if (v15 == 1) {
      goto LABEL_23;
    }
    if (v15 != 5)
    {
      unint64_t v15 = 2;
LABEL_23:
      if (v15 <= i) {
        goto LABEL_10;
      }
      goto LABEL_26;
    }
    if (*((unsigned int *)v4 + 2) <= i)
    {
LABEL_10:
      uint64_t v14 = 0;
      goto LABEL_11;
    }
LABEL_26:
    uint64_t v17 = v4;
    if (v16 >= 2) {
      uint64_t v17 = *(swift::Demangle::__runtime::Node **)v4;
    }
    uint64_t v14 = (swift::Demangle::__runtime::Node *)*((void *)v17 + i);
LABEL_11:
    swift::Demangle::__runtime::Node::addChild(Node, v14, this[5]);
  }
  if (v15 == 2 && i < 2) {
    goto LABEL_20;
  }
LABEL_29:
  int v4 = Node;
LABEL_30:
  unint64_t v18 = swift::Demangle::__runtime::NodeFactory::createNode(this[5], 235);
  unsigned int v19 = a3 + 1;
  uint64_t v20 = this[4];
  while (1)
  {
    if (v20)
    {
      BOOL v21 = this[3];
      if (*(unsigned char *)v21 == 95) {
        break;
      }
    }
    if (v22)
    {
      unint64_t v23 = (swift::Demangle::__runtime::Node *)v22;
      __int16 v24 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(this[5], 232);
      swift::Demangle::__runtime::Node::addChild(v24, v23, this[5]);
      if (v24)
      {
        swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v18, v24, this[5]);
        uint64_t v20 = this[4];
        if (v20) {
          continue;
        }
      }
    }
    return 0;
  }
  this[3] = (swift::Demangle::__runtime::NodeFactory *)((char *)v21 + 1);
  this[4] = (swift::Demangle::__runtime::NodeFactory *)((char *)v20 - 1);
  int v26 = *(unsigned __int8 *)(v18 + 18);
  if ((v26 - 1) < 2 || v26 == 5 && *(_DWORD *)(v18 + 8))
  {
    unint64_t v27 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(this[5], 232);
    swift::Demangle::__runtime::Node::addChild(v27, v4, this[5]);
    int v28 = *((unsigned __int16 *)v4 + 8);
    switch(v28)
    {
      case 24:
        __int16 v29 = 13;
        break;
      case 61:
        __int16 v29 = 14;
        break;
      case 219:
        __int16 v29 = 15;
        break;
      default:
        return 0;
    }
    int v4 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(this[5], v29);
    swift::Demangle::__runtime::Node::addChild(v4, v27, this[5]);
    swift::Demangle::__runtime::Node::addChild(v4, (swift::Demangle::__runtime::Node *)v18, this[5]);
  }
  return v4;
}

swift::Demangle::__runtime::Node *anonymous namespace'::OldDemangler::demangleProtocolNameGivenContext(swift::Demangle::__runtime::NodeFactory **this, swift::Demangle::__runtime::Node *a2)
{
  if (!v4) {
    return 0;
  }
  uint64_t v5 = (swift::Demangle::__runtime::Node *)v4;
  unint64_t Node = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(this[5], 180);
  swift::Demangle::__runtime::Node::addChild(Node, a2, this[5]);
  swift::Demangle::__runtime::Node::addChild(Node, v5, this[5]);
  uint64_t v8 = (char *)this[1];
  int v7 = this[2];
  if (v8 >= (char *)v7)
  {
    uint64_t v10 = *this;
    uint64_t v11 = v8 - (char *)*this;
    uint64_t v12 = v11 >> 3;
    unint64_t v13 = (v11 >> 3) + 1;
    if (v13 >> 61) {
      abort();
    }
    uint64_t v14 = v7 - v10;
    if (v14 >> 2 > v13) {
      unint64_t v13 = v14 >> 2;
    }
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v15 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v15 = v13;
    }
    if (v15)
    {
      if (v15 >> 61) {
        std::__throw_bad_array_new_length[abi:nn180100]();
      }
      unsigned int v16 = operator new(8 * v15);
    }
    else
    {
      unsigned int v16 = 0;
    }
    uint64_t v17 = (swift::Demangle::__runtime::Node **)&v16[8 * v12];
    unint64_t v18 = (swift::Demangle::__runtime::NodeFactory *)&v16[8 * v15];
    swift::Demangle::__runtime::Node *v17 = Node;
    int v9 = (swift::Demangle::__runtime::NodeFactory *)(v17 + 1);
    if (v8 != (char *)v10)
    {
      unint64_t v19 = v8 - (char *)v10 - 8;
      if (v19 < 0x58) {
        goto LABEL_31;
      }
      if ((unint64_t)(v8 - v16 - v11) < 0x20) {
        goto LABEL_31;
      }
      uint64_t v20 = (v19 >> 3) + 1;
      uint64_t v21 = 8 * (v20 & 0x3FFFFFFFFFFFFFFCLL);
      uint64_t v22 = &v8[-v21];
      uint64_t v17 = (swift::Demangle::__runtime::Node **)((char *)v17 - v21);
      unint64_t v23 = &v16[8 * v12 - 16];
      __int16 v24 = v8 - 16;
      uint64_t v25 = v20 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v26 = *(_OWORD *)v24;
        *(v23 - 1) = *((_OWORD *)v24 - 1);
        _OWORD *v23 = v26;
        v23 -= 2;
        v24 -= 32;
        v25 -= 4;
      }
      while (v25);
      uint64_t v8 = v22;
      if (v20 != (v20 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_31:
        do
        {
          unint64_t v27 = (swift::Demangle::__runtime::Node *)*((void *)v8 - 1);
          v8 -= 8;
          *--uint64_t v17 = v27;
        }
        while (v8 != (char *)v10);
      }
      uint64_t v8 = (char *)*this;
    }
    *this = (swift::Demangle::__runtime::NodeFactory *)v17;
    this[1] = v9;
    this[2] = v18;
    if (v8) {
      operator delete(v8);
    }
  }
  else
  {
    *(void *)uint64_t v8 = Node;
    int v9 = (swift::Demangle::__runtime::NodeFactory *)(v8 + 8);
  }
  this[1] = v9;
  return Node;
}

swift::Demangle::__runtime::Node *anonymous namespace'::OldDemangler::demangleProtocolName(swift::Demangle::__runtime::NodeFactory **this, unsigned int a2)
{
  if (!v3) {
    return 0;
  }
  unint64_t v4 = v3;
  unint64_t Node = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(this[5], 232);
  swift::Demangle::__runtime::Node::addChild(Node, v4, this[5]);
  return Node;
}

swift::Demangle::__runtime::Node *anonymous namespace'::OldDemangler::demangleGenericParamIndex(_anonymous_namespace_::OldDemangler *this)
{
  uint64_t v1 = *((void *)this + 4);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = (unsigned __int8 *)*((void *)this + 3);
  int v3 = *v2;
  if (v3 == 120)
  {
    uint64_t v8 = 0;
    unsigned int v11 = 0;
    *((void *)this + 3) = v2 + 1;
    *((void *)this + 4) = v1 - 1;
  }
  unint64_t v4 = v2 + 1;
  if (v3 == 100)
  {
    *((void *)this + 3) = v4;
    *((void *)this + 4) = v1 - 1;
    if (v1 != 1)
    {
      int v5 = v2[1];
      unint64_t i = v2 + 2;
      uint64_t v7 = v1 - 2;
      *((void *)this + 3) = v2 + 2;
      *((void *)this + 4) = v1 - 2;
      if (v5 == 95)
      {
        uint64_t v8 = (swift::Demangle::__runtime *)((char *)&dword_0 + 1);
        if (v1 == 2) {
          return 0;
        }
      }
      else
      {
        if ((v5 - 58) < 0xFFFFFFF6 || v1 == 2) {
          return 0;
        }
        int v19 = v5 - 48;
        uint64_t v20 = v2 + 3;
        uint64_t v7 = v1 - 3;
        for (unint64_t i = v20; ; ++i)
        {
          int v21 = *(i - 1);
          if ((v21 - 58) < 0xFFFFFFF6) {
            break;
          }
          int v19 = v21 + 10 * v19 - 48;
          *((void *)this + 3) = v20;
          *((void *)this + 4) = v7;
          ++v20;
          if (--v7 == -1) {
            return 0;
          }
        }
        if (v21 != 95) {
          return 0;
        }
        *((void *)this + 3) = v20;
        *((void *)this + 4) = v7;
        uint64_t v8 = (swift::Demangle::__runtime *)(v19 + 2);
        if (!v7) {
          return 0;
        }
      }
      int v9 = i + 1;
      int v10 = *i;
      *((void *)this + 3) = i + 1;
      *((void *)this + 4) = v7 - 1;
      if (v10 == 95)
      {
        unsigned int v11 = 0;
      }
      if ((v10 - 58) >= 0xFFFFFFF6 && v7 != 1)
      {
        int v23 = v10 - 48;
        __int16 v24 = i + 2;
        uint64_t v25 = v7 - 2;
        while (1)
        {
          int v26 = *v9;
          if ((v26 - 58) < 0xFFFFFFF6) {
            break;
          }
          int v23 = v26 + 10 * v23 - 48;
          ++v9;
          *((void *)this + 3) = v24;
          *((void *)this + 4) = v25;
          ++v24;
          if (--v25 == -1) {
            return 0;
          }
        }
        if (v26 == 95)
        {
          *((void *)this + 3) = v24;
          *((void *)this + 4) = v25;
          unsigned int v11 = v23 + 1;
        }
      }
    }
  }
  else
  {
    *((void *)this + 3) = v4;
    *((void *)this + 4) = v1 - 1;
    if (v3 == 95)
    {
      uint64_t v8 = 0;
      unsigned int v11 = 1;
    }
    if ((v3 - 58) >= 0xFFFFFFF6 && v1 != 1)
    {
      int v14 = v3 - 48;
      unint64_t v15 = v2 + 2;
      uint64_t v16 = v1 - 2;
      while (1)
      {
        int v17 = *v4;
        if ((v17 - 58) < 0xFFFFFFF6) {
          break;
        }
        int v14 = v17 + 10 * v14 - 48;
        ++v4;
        *((void *)this + 3) = v15;
        *((void *)this + 4) = v16;
        ++v15;
        if (--v16 == -1) {
          return 0;
        }
      }
      if (v17 == 95)
      {
        uint64_t v8 = 0;
        *((void *)this + 3) = v15;
        *((void *)this + 4) = v16;
        unsigned int v11 = v14 + 2;
      }
    }
  }
  return 0;
}

swift::Demangle::__runtime::Node *anonymous namespace'::OldDemangler::demangleProtocolNameImpl(_anonymous_namespace_::OldDemangler *this, unsigned int a2)
{
  if (a2 > 0x400) {
    return 0;
  }
  uint64_t v5 = *((void *)this + 4);
  if (v5)
  {
    int v6 = (unsigned __int8 *)*((void *)this + 3);
    int v7 = *v6;
    if (v7 == 115)
    {
      *((void *)this + 3) = v6 + 1;
      *((void *)this + 4) = v5 - 1;
      int v10 = (void *)*((void *)this + 5);
      uint64_t v11 = v10[1];
      uint64_t v12 = (char *)(v11 + 5);
      if (v11) {
        BOOL v13 = (unint64_t)v12 > v10[2];
      }
      else {
        BOOL v13 = 1;
      }
      if (v13)
      {
        unint64_t v14 = 2 * v10[4];
        if (v14 <= 6) {
          unint64_t v14 = 6;
        }
        v10[4] = v14;
        unint64_t v15 = v14 + 8;
        uint64_t v16 = malloc_type_malloc(v14 + 8, 0xD0263BC5uLL);
        uint64_t v11 = (uint64_t)(v16 + 1);
        *uint64_t v16 = v10[3];
        uint64_t v12 = (char *)v16 + 13;
        v10[2] = (char *)v16 + v15;
        v10[3] = v16;
      }
      v10[1] = v12;
      *(unsigned char *)(v11 + 4) = 116;
      *(_DWORD *)uint64_t v11 = 1718187859;
      unint64_t NodeWithAllocatedText = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNodeWithAllocatedText(v10, 153, v11, 5);
LABEL_23:
    }
    if (v7 == 83)
    {
      *((void *)this + 3) = v6 + 1;
      *((void *)this + 4) = v5 - 1;
      unint64_t NodeWithAllocatedText = v8;
      if (!v8) {
        return NodeWithAllocatedText;
      }
      int v9 = *((unsigned __int16 *)v8 + 8);
      if (v9 == 180) {
        return NodeWithAllocatedText;
      }
      if (v9 != 153) {
        return 0;
      }
      goto LABEL_23;
    }
  }
}

swift::Demangle::__runtime::Node *anonymous namespace'::OldDemangler::demangleArchetypeType(unsigned int)::{lambda(swift::Demangle::__runtime::Node *)#1}::operator()(void **a1, swift::Demangle::__runtime::Node *a2)
{
  uint64_t v3 = (uint64_t)*a1;
  if (!v4) {
    return 0;
  }
  uint64_t v5 = (swift::Demangle::__runtime::Node *)v4;
  unint64_t Node = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(*(void **)(v3 + 40), 5);
  swift::Demangle::__runtime::Node::addChild(Node, a2, *(swift::Demangle::__runtime::NodeFactory **)(v3 + 40));
  swift::Demangle::__runtime::Node::addChild(Node, v5, *(swift::Demangle::__runtime::NodeFactory **)(v3 + 40));
  uint64_t v8 = *(char **)(v3 + 8);
  unint64_t v7 = *(void *)(v3 + 16);
  if ((unint64_t)v8 >= v7)
  {
    int v10 = *(char **)v3;
    uint64_t v11 = (uint64_t)&v8[-*(void *)v3];
    uint64_t v12 = v11 >> 3;
    unint64_t v13 = (v11 >> 3) + 1;
    if (v13 >> 61) {
      abort();
    }
    uint64_t v14 = v7 - (void)v10;
    if (v14 >> 2 > v13) {
      unint64_t v13 = v14 >> 2;
    }
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v15 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v15 = v13;
    }
    if (v15)
    {
      if (v15 >> 61) {
        std::__throw_bad_array_new_length[abi:nn180100]();
      }
      uint64_t v16 = operator new(8 * v15);
    }
    else
    {
      uint64_t v16 = 0;
    }
    int v17 = (swift::Demangle::__runtime::Node **)&v16[8 * v12];
    unint64_t v18 = &v16[8 * v15];
    swift::Demangle::__runtime::Node *v17 = Node;
    int v9 = v17 + 1;
    if (v8 != v10)
    {
      unint64_t v19 = v8 - v10 - 8;
      if (v19 < 0x58) {
        goto LABEL_31;
      }
      if ((unint64_t)(v8 - &v16[v11]) < 0x20) {
        goto LABEL_31;
      }
      uint64_t v20 = (v19 >> 3) + 1;
      uint64_t v21 = 8 * (v20 & 0x3FFFFFFFFFFFFFFCLL);
      uint64_t v22 = &v8[-v21];
      int v17 = (swift::Demangle::__runtime::Node **)((char *)v17 - v21);
      int v23 = &v16[8 * v12 - 16];
      __int16 v24 = v8 - 16;
      uint64_t v25 = v20 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v26 = *(_OWORD *)v24;
        *(v23 - 1) = *((_OWORD *)v24 - 1);
        _OWORD *v23 = v26;
        v23 -= 2;
        v24 -= 32;
        v25 -= 4;
      }
      while (v25);
      uint64_t v8 = v22;
      if (v20 != (v20 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_31:
        do
        {
          unint64_t v27 = (swift::Demangle::__runtime::Node *)*((void *)v8 - 1);
          v8 -= 8;
          *--int v17 = v27;
        }
        while (v8 != v10);
      }
      uint64_t v8 = *(char **)v3;
    }
    *(void *)uint64_t v3 = v17;
    *(void *)(v3 + 8) = v9;
    *(void *)(v3 + 16) = v18;
    if (v8) {
      operator delete(v8);
    }
  }
  else
  {
    *(void *)uint64_t v8 = Node;
    int v9 = v8 + 8;
  }
  *(void *)(v3 + 8) = v9;
  return Node;
}

swift::Demangle::__runtime::Node *anonymous namespace'::OldDemangler::demangleDependentMemberTypeName(_anonymous_namespace_::OldDemangler *this, swift::Demangle::__runtime::Node *a2, int a3)
{
  uint64_t v5 = *((void *)this + 4);
  if (!v5)
  {
LABEL_7:
    int v10 = 0;
LABEL_8:
    if (!v11) {
      return 0;
    }
    uint64_t v12 = (swift::Demangle::__runtime::Node *)v11;
    unint64_t Node = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(*((void **)this + 5), 35);
    if (!Node) {
      return 0;
    }
    int v9 = Node;
    swift::Demangle::__runtime::Node::addChild(Node, v12, *((swift::Demangle::__runtime::NodeFactory **)this + 5));
    if (v10) {
      swift::Demangle::__runtime::Node::addChild(v9, v10, *((swift::Demangle::__runtime::NodeFactory **)this + 5));
    }
    unint64_t v15 = (swift::Demangle::__runtime::Node **)*((void *)this + 1);
    unint64_t v14 = *((void *)this + 2);
    if ((unint64_t)v15 >= v14)
    {
      unint64_t v19 = *(char **)this;
      uint64_t v20 = (uint64_t)v15 - *(void *)this;
      uint64_t v21 = v20 >> 3;
      unint64_t v22 = (v20 >> 3) + 1;
      if (v22 >> 61) {
        abort();
      }
      uint64_t v23 = v14 - (void)v19;
      if (v23 >> 2 > v22) {
        unint64_t v22 = v23 >> 2;
      }
      if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v24 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v24 = v22;
      }
      if (v24)
      {
        if (v24 >> 61) {
          std::__throw_bad_array_new_length[abi:nn180100]();
        }
        uint64_t v25 = operator new(8 * v24);
      }
      else
      {
        uint64_t v25 = 0;
      }
      long long v26 = (swift::Demangle::__runtime::Node **)&v25[8 * v21];
      unint64_t v27 = &v25[8 * v24];
      unint64_t *v26 = v9;
      uint64_t v16 = v26 + 1;
      if (v15 != (swift::Demangle::__runtime::Node **)v19)
      {
        unint64_t v28 = (char *)v15 - v19 - 8;
        if (v28 < 0x58) {
          goto LABEL_45;
        }
        if ((unint64_t)((char *)v15 - v25 - v20) < 0x20) {
          goto LABEL_45;
        }
        uint64_t v29 = (v28 >> 3) + 1;
        uint64_t v30 = 8 * (v29 & 0x3FFFFFFFFFFFFFFCLL);
        BOOL v31 = &v15[v30 / 0xFFFFFFFFFFFFFFF8];
        long long v26 = (swift::Demangle::__runtime::Node **)((char *)v26 - v30);
        unint64_t v32 = &v25[8 * v21 - 16];
        unint64_t v33 = v15 - 2;
        uint64_t v34 = v29 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v35 = *(_OWORD *)v33;
          *(v32 - 1) = *((_OWORD *)v33 - 1);
          *unint64_t v32 = v35;
          v32 -= 2;
          v33 -= 4;
          v34 -= 4;
        }
        while (v34);
        unint64_t v15 = v31;
        if (v29 != (v29 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_45:
          do
          {
            unint64_t v36 = *--v15;
            *--long long v26 = v36;
          }
          while (v15 != (swift::Demangle::__runtime::Node **)v19);
        }
        unint64_t v15 = *(swift::Demangle::__runtime::Node ***)this;
      }
      *(void *)this = v26;
      *((void *)this + 1) = v16;
      *((void *)this + 2) = v27;
      if (v15) {
        operator delete(v15);
      }
    }
    else
    {
      unsigned __int8 *v15 = v9;
      uint64_t v16 = v15 + 1;
    }
    *((void *)this + 1) = v16;
    goto LABEL_39;
  }
  int v6 = (unsigned __int8 *)*((void *)this + 3);
  int v7 = *v6;
  if (v7 != 80)
  {
    if (v7 == 83)
    {
      *((void *)this + 3) = v6 + 1;
      *((void *)this + 4) = v5 - 1;
      if (!v8) {
        return 0;
      }
      int v9 = v8;
      if (*((_WORD *)v8 + 8) != 35) {
        return 0;
      }
LABEL_39:
      int v10 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(*((void **)this + 5), 45);
      swift::Demangle::__runtime::Node::addChild(v10, a2, *((swift::Demangle::__runtime::NodeFactory **)this + 5));
      swift::Demangle::__runtime::Node::addChild(v10, v9, *((swift::Demangle::__runtime::NodeFactory **)this + 5));
      return v10;
    }
    goto LABEL_7;
  }
  *((void *)this + 3) = v6 + 1;
  *((void *)this + 4) = v5 - 1;
  if (v17)
  {
    unint64_t v18 = v17;
    int v10 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(*((void **)this + 5), 232);
    swift::Demangle::__runtime::Node::addChild(v10, v18, *((swift::Demangle::__runtime::NodeFactory **)this + 5));
    if (!v10) {
      return v10;
    }
    goto LABEL_8;
  }
  return 0;
}

swift::Demangle::__runtime::Node *anonymous namespace'::OldDemangler::createSwiftType(uint64_t a1, __int16 a2, const void *a3, size_t a4)
{
  unint64_t Node = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(*(void **)(a1 + 40), a2);
  uint64_t v8 = *(void **)(a1 + 40);
  uint64_t v9 = v8[1];
  int v10 = (char *)(v9 + 5);
  if (v9) {
    BOOL v11 = (unint64_t)v10 > v8[2];
  }
  else {
    BOOL v11 = 1;
  }
  if (v11)
  {
    unint64_t v12 = 2 * v8[4];
    if (v12 <= 6) {
      unint64_t v12 = 6;
    }
    v8[4] = v12;
    unint64_t v13 = v12 + 8;
    unint64_t v14 = malloc_type_malloc(v12 + 8, 0xD0263BC5uLL);
    uint64_t v9 = (uint64_t)(v14 + 1);
    void *v14 = v8[3];
    int v10 = (char *)v14 + 13;
    v8[2] = (char *)v14 + v13;
    v8[3] = v14;
  }
  v8[1] = v10;
  *(unsigned char *)(v9 + 4) = 116;
  *(_DWORD *)uint64_t v9 = 1718187859;
  unint64_t NodeWithAllocatedText = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNodeWithAllocatedText(v8, 153, v9, 5);
  swift::Demangle::__runtime::Node::addChild(Node, NodeWithAllocatedText, *(swift::Demangle::__runtime::NodeFactory **)(a1 + 40));
  uint64_t v16 = *(void **)(a1 + 40);
  if (a4)
  {
    int v17 = (char *)v16[1];
    unint64_t v18 = &v17[a4];
    if (v17) {
      BOOL v19 = (unint64_t)v18 > v16[2];
    }
    else {
      BOOL v19 = 1;
    }
    if (v19)
    {
      unint64_t v20 = 2 * v16[4];
      if (v20 <= a4 + 1) {
        unint64_t v20 = a4 + 1;
      }
      v16[4] = v20;
      unint64_t v21 = v20 + 8;
      unint64_t v22 = malloc_type_malloc(v20 + 8, 0xD0263BC5uLL);
      uint64_t v23 = (char *)v22 + v21;
      void *v22 = v16[3];
      int v17 = (char *)(v22 + 1);
      v16[2] = v23;
      v16[3] = v22;
      unint64_t v18 = (char *)v22 + a4 + 8;
    }
    v16[1] = v18;
    memmove(v17, a3, a4);
  }
  else
  {
    int v17 = 0;
  }
  unint64_t v24 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNodeWithAllocatedText(v16, 101, (uint64_t)v17, a4);
  swift::Demangle::__runtime::Node::addChild(Node, v24, *(swift::Demangle::__runtime::NodeFactory **)(a1 + 40));
  return Node;
}

const char *anonymous namespace'::OldDemangler::demangleImplConvention(uint64_t a1, unsigned int a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (!v2) {
    return 0;
  }
  double result = 0;
  uint64_t v5 = *(unsigned char **)(a1 + 24);
  switch(*v5)
  {
    case 'D':
      *(void *)(a1 + 24) = v5 + 1;
      *(void *)(a1 + 32) = v2 - 1;
      if (a2 == 2) {
        return "@unowned_inner_pointer";
      }
      else {
        return 0;
      }
    case 'a':
      *(void *)(a1 + 24) = v5 + 1;
      *(void *)(a1 + 32) = v2 - 1;
      int v6 = "@autoreleased";
      BOOL v7 = a2 == 2;
      goto LABEL_19;
    case 'd':
      *(void *)(a1 + 24) = v5 + 1;
      *(void *)(a1 + 32) = v2 - 1;
      if (a2 >= 3) {
        return 0;
      }
      return off_CA0F0[a2];
    case 'e':
      *(void *)(a1 + 24) = v5 + 1;
      *(void *)(a1 + 32) = v2 - 1;
      int v6 = "@deallocating";
      BOOL v7 = a2 == 1;
LABEL_19:
      if (v7) {
        return v6;
      }
      else {
        return 0;
      }
    case 'g':
      *(void *)(a1 + 24) = v5 + 1;
      *(void *)(a1 + 32) = v2 - 1;
      uint64_t v8 = "@guaranteed";
      uint64_t v9 = "@callee_guaranteed";
      if (a2) {
        uint64_t v9 = 0;
      }
      BOOL v10 = a2 == 1;
      goto LABEL_25;
    case 'i':
      *(void *)(a1 + 24) = v5 + 1;
      *(void *)(a1 + 32) = v2 - 1;
      uint64_t v8 = "@out";
      uint64_t v9 = "@in";
      if (a2 != 1) {
        uint64_t v9 = 0;
      }
      BOOL v10 = a2 == 2;
LABEL_25:
      if (v10) {
        double result = v8;
      }
      else {
        double result = v9;
      }
      break;
    case 'l':
      *(void *)(a1 + 24) = v5 + 1;
      *(void *)(a1 + 32) = v2 - 1;
      if (a2 == 1) {
        double result = "@inout";
      }
      else {
        double result = 0;
      }
      break;
    case 'o':
      *(void *)(a1 + 24) = v5 + 1;
      *(void *)(a1 + 32) = v2 - 1;
      if (a2 >= 3) {
        return 0;
      }
      double result = off_CA108[a2];
      break;
    default:
      return result;
  }
  return result;
}

swift::Demangle::__runtime::Node *anonymous namespace'::OldDemangler::demangleImplParameterOrResult(uint64_t a1, int a2, int a3)
{
  __int16 v4 = a2;
  uint64_t v6 = *(void *)(a1 + 32);
  if (!v6 || (BOOL v7 = *(unsigned char **)(a1 + 24), *v7 != 122))
  {
    if (a2 == 118)
    {
      unsigned int v8 = 1;
      goto LABEL_9;
    }
    if ((a2 & 0xFFFFFFFD) == 0x78)
    {
      unsigned int v8 = 2;
      goto LABEL_9;
    }
    return 0;
  }
  *(void *)(a1 + 24) = v7 + 1;
  *(void *)(a1 + 32) = v6 - 1;
  if (a2 != 120) {
    return 0;
  }
  unsigned int v8 = 2;
  __int16 v4 = 122;
LABEL_9:
  if (!v10) {
    return 0;
  }
  BOOL v11 = v9;
  size_t v12 = v10;
  if (!v13) {
    return 0;
  }
  unint64_t v14 = (swift::Demangle::__runtime::Node *)v13;
  unint64_t Node = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(*(void **)(a1 + 40), 232);
  swift::Demangle::__runtime::Node::addChild(Node, v14, *(swift::Demangle::__runtime::NodeFactory **)(a1 + 40));
  if (!Node) {
    return 0;
  }
  uint64_t v16 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(*(void **)(a1 + 40), v4);
  int v17 = *(void **)(a1 + 40);
  unint64_t v18 = (char *)v17[1];
  if (!v18 || (BOOL v19 = &v18[v12], (unint64_t)&v18[v12] > v17[2]))
  {
    unint64_t v20 = 2 * v17[4];
    if (v20 <= v12 + 1) {
      unint64_t v20 = v12 + 1;
    }
    v17[4] = v20;
    unint64_t v21 = v20 + 8;
    unint64_t v22 = malloc_type_malloc(v20 + 8, 0xD0263BC5uLL);
    uint64_t v23 = (char *)v22 + v21;
    void *v22 = v17[3];
    unint64_t v18 = (char *)(v22 + 1);
    v17[2] = v23;
    v17[3] = v22;
    BOOL v19 = (char *)v22 + v12 + 8;
  }
  v17[1] = v19;
  memmove(v18, v11, v12);
  unint64_t NodeWithAllocatedText = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNodeWithAllocatedText(v17, 106, (uint64_t)v18, v12);
  swift::Demangle::__runtime::Node::addChild(v16, NodeWithAllocatedText, *(swift::Demangle::__runtime::NodeFactory **)(a1 + 40));
  swift::Demangle::__runtime::Node::addChild(v16, Node, *(swift::Demangle::__runtime::NodeFactory **)(a1 + 40));
  return v16;
}

unint64_t anonymous namespace'::OldDemangler::demangleValueWitnessKind(_anonymous_namespace_::OldDemangler *this)
{
  unint64_t v1 = *((void *)this + 4);
  if (v1)
  {
    uint64_t v2 = (unsigned char *)*((void *)this + 3);
    LOBYTE(v6) = *v2;
    *((void *)this + 3) = v2 + 1;
    *((void *)this + 4) = v1 - 1;
    if (v1 == 1)
    {
      unint64_t v1 = 0;
      uint64_t v4 = 0;
    }
    else
    {
      char v3 = v2[1];
      *((void *)this + 3) = v2 + 2;
      *((void *)this + 4) = v1 - 2;
      HIBYTE(v6) = v3;
      switch(v6)
      {
        case 27745:
          uint64_t v4 = 0;
          unint64_t v1 = 0x100000000;
          break;
        case 24931:
          unint64_t v1 = 0x100000000;
          uint64_t v4 = 1;
          break;
        case 24948:
          unint64_t v1 = 0x100000000;
          uint64_t v4 = 2;
          break;
        case 25956:
          unint64_t v1 = 0x100000000;
          uint64_t v4 = 3;
          break;
        case 30840:
          unint64_t v1 = 0x100000000;
          uint64_t v4 = 4;
          break;
        case 22616:
          unint64_t v1 = 0x100000000;
          uint64_t v4 = 5;
          break;
        case 30808:
          unint64_t v1 = 0x100000000;
          uint64_t v4 = 6;
          break;
        case 20547:
          unint64_t v1 = 0x100000000;
          uint64_t v4 = 7;
          break;
        case 28739:
          unint64_t v1 = 0x100000000;
          uint64_t v4 = 8;
          break;
        case 28771:
          unint64_t v1 = 0x100000000;
          uint64_t v4 = 9;
          break;
        case 27476:
          unint64_t v1 = 0x100000000;
          uint64_t v4 = 10;
          break;
        case 27508:
          unint64_t v1 = 0x100000000;
          uint64_t v4 = 11;
          break;
        case 29296:
          unint64_t v1 = 0x100000000;
          uint64_t v4 = 12;
          break;
        case 19284:
          unint64_t v1 = 0x100000000;
          uint64_t v4 = 13;
          break;
        case 25411:
          unint64_t v1 = 0x100000000;
          uint64_t v4 = 14;
          break;
        case 29780:
          unint64_t v1 = 0x100000000;
          uint64_t v4 = 15;
          break;
        case 21620:
          unint64_t v1 = 0x100000000;
          uint64_t v4 = 16;
          break;
        case 29560:
          unint64_t v1 = 0x100000000;
          uint64_t v4 = 17;
          break;
        case 26488:
          unint64_t v1 = 0x100000000;
          uint64_t v4 = 18;
          break;
        case 26485:
          unint64_t v1 = 0x100000000;
          uint64_t v4 = 19;
          break;
        case 28789:
          unint64_t v1 = 0x100000000;
          uint64_t v4 = 20;
          break;
        case 26997:
          unint64_t v1 = 0x100000000;
          uint64_t v4 = 21;
          break;
        case 29797:
          unint64_t v1 = 0x100000000;
          uint64_t v4 = 22;
          break;
        default:
          unint64_t v1 = (unint64_t)(v6 == 29811) << 32;
          uint64_t v4 = 23;
          if (v6 != 29811) {
            uint64_t v4 = 0;
          }
          break;
      }
    }
  }
  else
  {
    uint64_t v4 = 0;
  }
  return v4 | v1;
}

swift::Demangle::__runtime::Node *anonymous namespace'::OldDemangler::demangleReabstractSignature(_anonymous_namespace_::OldDemangler *this, swift::Demangle::__runtime::Node *a2, int a3)
{
  uint64_t v6 = *((void *)this + 4);
  if (v6)
  {
    BOOL v7 = (unsigned char *)*((void *)this + 3);
    if (*v7 == 71)
    {
      *((void *)this + 3) = v7 + 1;
      *((void *)this + 4) = v6 - 1;
      if (!result) {
        return result;
      }
      swift::Demangle::__runtime::Node::addChild(a2, result, *((swift::Demangle::__runtime::NodeFactory **)this + 5));
    }
  }
  unsigned int v9 = a3 + 1;
  if (result)
  {
    size_t v10 = result;
    unint64_t Node = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(*((void **)this + 5), 232);
    swift::Demangle::__runtime::Node::addChild(Node, v10, *((swift::Demangle::__runtime::NodeFactory **)this + 5));
    if (!Node) {
      return 0;
    }
    swift::Demangle::__runtime::Node::addChild(a2, Node, *((swift::Demangle::__runtime::NodeFactory **)this + 5));
    if (!result) {
      return result;
    }
    size_t v12 = result;
    uint64_t v13 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(*((void **)this + 5), 232);
    swift::Demangle::__runtime::Node::addChild(v13, v12, *((swift::Demangle::__runtime::NodeFactory **)this + 5));
    if (v13)
    {
      swift::Demangle::__runtime::Node::addChild(a2, v13, *((swift::Demangle::__runtime::NodeFactory **)this + 5));
      return (swift::Demangle::__runtime::Node *)(&dword_0 + 1);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void *swift::reflection::MetadataSource::dump(swift::reflection::MetadataSource *this)
{
  uint64_t v2 = &std::cerr;
  int v3 = 0;
  swift::reflection::MetadataSourceVisitor<PrintMetadataSource,void>::visit((PrintMetadataSource *)&v2, this);
  return std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&std::cerr, (uint64_t)"\n", 1);
}

void *swift::reflection::MetadataSource::dump(const swift::reflection::ClosureBindingMetadataSource *a1, void *a2, int a3)
{
  uint64_t v5 = a2;
  int v6 = a3;
  swift::reflection::MetadataSourceVisitor<PrintMetadataSource,void>::visit((PrintMetadataSource *)&v5, a1);
  return std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a2, (uint64_t)"\n", 1);
}

PrintMetadataSource *swift::reflection::MetadataSourceVisitor<PrintMetadataSource,void>::visit(PrintMetadataSource *this, const swift::reflection::ClosureBindingMetadataSource *a2)
{
  switch(*((_DWORD *)a2 + 2))
  {
    case 0:
      this = (PrintMetadataSource *)PrintMetadataSource::visitClosureBindingMetadataSource(this, a2);
      break;
    case 1:
      this = (PrintMetadataSource *)PrintMetadataSource::visitReferenceCaptureMetadataSource(this, a2);
      break;
    case 2:
      this = (PrintMetadataSource *)PrintMetadataSource::visitMetadataCaptureMetadataSource(this, a2);
      break;
    case 3:
      this = (PrintMetadataSource *)PrintMetadataSource::visitGenericArgumentMetadataSource(this, a2);
      break;
    case 4:
      this = (PrintMetadataSource *)PrintMetadataSource::visitSelfMetadataSource(this, a2);
      break;
    case 5:
      this = (PrintMetadataSource *)PrintMetadataSource::visitSelfWitnessTableMetadataSource((void **)this);
      break;
    default:
      return this;
  }
  return this;
}

void *PrintMetadataSource::visitClosureBindingMetadataSource(PrintMetadataSource *this, const swift::reflection::ClosureBindingMetadataSource *a2)
{
  char v11 = 15;
  strcpy((char *)__p, "closure_binding");
  for (int i = *((_DWORD *)this + 2); i; --i)
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)" ", 1);
  uint64_t v5 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)"(", 1);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v5, (uint64_t)__p, 15);
  if (v11 < 0) {
    operator delete(__p[0]);
  }
  char v9 = 5;
  strcpy((char *)v8, "index");
  std::to_string(&v7, *((_DWORD *)a2 + 3));
  PrintMetadataSource::printField((void **)this, (uint64_t)v8, (uint64_t)&v7);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v7.__r_.__value_.__l.__data_);
    if ((v9 & 0x80000000) == 0) {
      return std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)")", 1);
    }
LABEL_9:
    operator delete(v8[0]);
    return std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)")", 1);
  }
  if (v9 < 0) {
    goto LABEL_9;
  }
  return std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)")", 1);
}

void *PrintMetadataSource::visitReferenceCaptureMetadataSource(PrintMetadataSource *this, const swift::reflection::ReferenceCaptureMetadataSource *a2)
{
  char v11 = 17;
  strcpy(__p, "reference_capture");
  for (int i = *((_DWORD *)this + 2); i; --i)
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)" ", 1);
  uint64_t v5 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)"(", 1);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v5, (uint64_t)__p, 17);
  if (v11 < 0) {
    operator delete(*(void **)__p);
  }
  char v9 = 5;
  strcpy((char *)v8, "index");
  std::to_string(&v7, *((_DWORD *)a2 + 3));
  PrintMetadataSource::printField((void **)this, (uint64_t)v8, (uint64_t)&v7);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v7.__r_.__value_.__l.__data_);
    if ((v9 & 0x80000000) == 0) {
      return std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)")", 1);
    }
LABEL_9:
    operator delete(v8[0]);
    return std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)")", 1);
  }
  if (v9 < 0) {
    goto LABEL_9;
  }
  return std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)")", 1);
}

void *PrintMetadataSource::visitMetadataCaptureMetadataSource(PrintMetadataSource *this, const swift::reflection::MetadataCaptureMetadataSource *a2)
{
  char v11 = 16;
  strcpy(__p, "metadata_capture");
  for (int i = *((_DWORD *)this + 2); i; --i)
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)" ", 1);
  uint64_t v5 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)"(", 1);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v5, (uint64_t)__p, 16);
  if (v11 < 0) {
    operator delete(*(void **)__p);
  }
  char v9 = 5;
  strcpy((char *)v8, "index");
  std::to_string(&v7, *((_DWORD *)a2 + 3));
  PrintMetadataSource::printField((void **)this, (uint64_t)v8, (uint64_t)&v7);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v7.__r_.__value_.__l.__data_);
    if ((v9 & 0x80000000) == 0) {
      return std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)")", 1);
    }
LABEL_9:
    operator delete(v8[0]);
    return std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)")", 1);
  }
  if (v9 < 0) {
    goto LABEL_9;
  }
  return std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)")", 1);
}

void *PrintMetadataSource::visitGenericArgumentMetadataSource(PrintMetadataSource *this, const swift::reflection::GenericArgumentMetadataSource *a2)
{
  char v12 = 16;
  strcpy(__p, "generic_argument");
  for (int i = *((_DWORD *)this + 2); i; --i)
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)" ", 1);
  uint64_t v5 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)"(", 1);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v5, (uint64_t)__p, 16);
  if (v12 < 0) {
    operator delete(*(void **)__p);
  }
  char v10 = 5;
  strcpy((char *)v9, "index");
  std::to_string(&v8, *((_DWORD *)a2 + 3));
  PrintMetadataSource::printField((void **)this, (uint64_t)v9, (uint64_t)&v8);
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v8.__r_.__value_.__l.__data_);
    if ((v10 & 0x80000000) == 0) {
      goto LABEL_7;
    }
LABEL_9:
    operator delete(v9[0]);
    goto LABEL_7;
  }
  if (v10 < 0) {
    goto LABEL_9;
  }
LABEL_7:
  uint64_t v6 = *((void *)a2 + 2);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)"\n", 1);
  *((_DWORD *)this + 2) += 2;
  swift::reflection::MetadataSourceVisitor<PrintMetadataSource,void>::visit(this, v6);
  *((_DWORD *)this + 2) -= 2;
  return std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)")", 1);
}

void *PrintMetadataSource::visitSelfMetadataSource(PrintMetadataSource *this, const swift::reflection::SelfMetadataSource *a2)
{
  char v7 = 4;
  strcpy((char *)__p, "self");
  for (int i = *((_DWORD *)this + 2); i; --i)
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)" ", 1);
  uint64_t v4 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)"(", 1);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v4, (uint64_t)__p, 4);
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  return std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)")", 1);
}

void *PrintMetadataSource::visitSelfWitnessTableMetadataSource(void **a1)
{
  char v6 = 18;
  strcpy(__p, "self_witness_table");
  for (int i = *((_DWORD *)a1 + 2); i; --i)
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*a1, (uint64_t)" ", 1);
  int v3 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*a1, (uint64_t)"(", 1);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v3, (uint64_t)__p, 18);
  if (v6 < 0) {
    operator delete(*(void **)__p);
  }
  return std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*a1, (uint64_t)")", 1);
}

uint64_t PrintMetadataSource::printField(void **a1, uint64_t a2, uint64_t a3)
{
  if (*(char *)(a2 + 23) < 0) {
    uint64_t v6 = *(void *)(a2 + 8);
  }
  else {
    uint64_t v6 = *(unsigned __int8 *)(a2 + 23);
  }
  char v7 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*a1, (uint64_t)" ", 1);
  if (v6)
  {
    int v8 = *(char *)(a2 + 23);
    if (v8 >= 0) {
      uint64_t v9 = a2;
    }
    else {
      uint64_t v9 = *(void *)a2;
    }
    if (v8 >= 0) {
      uint64_t v10 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      uint64_t v10 = *(void *)(a2 + 8);
    }
    char v11 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v7, v9, v10);
    char v7 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v11, (uint64_t)"=", 1);
  }
  int v12 = *(char *)(a3 + 23);
  if (v12 >= 0) {
    uint64_t v13 = a3;
  }
  else {
    uint64_t v13 = *(void *)a3;
  }
  if (v12 >= 0) {
    uint64_t v14 = *(unsigned __int8 *)(a3 + 23);
  }
  else {
    uint64_t v14 = *(void *)(a3 + 8);
  }
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v7, v13, v14);
  return (uint64_t)*a1;
}

void *swift::reflection::TypeInfo::dump(long long **this)
{
  uint64_t v2 = &std::cerr;
  int v3 = 0;
  return std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&std::cerr, (uint64_t)"\n", 1);
}

void *swift::reflection::TypeInfo::dump(long long **a1, void *a2, int a3)
{
  uint64_t v5 = a2;
  int v6 = a3;
  return std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a2, (uint64_t)"\n", 1);
}

void *swift::reflection::anonymous namespace'::PrintTypeInfo::print(swift::reflection::_anonymous_namespace_::PrintTypeInfo *this, long long **a2)
{
  switch(*((_DWORD *)a2 + 2))
  {
    case 0:
      v43[24] = 7;
      strcpy(&v43[1], "builtin");
      for (int i = *((_DWORD *)this + 2); i; --i)
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)" ", 1);
      uint64_t v5 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)"(", 1);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v5, (uint64_t)&v43[1], 7);
      if ((v43[24] & 0x80000000) != 0) {
        operator delete(*(void **)&v43[1]);
      }
      return std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)")", 1);
    case 1:
      switch(*((_DWORD *)a2 + 8))
      {
        case 0:
          int v6 = "invalid";
          goto LABEL_90;
        case 1:
          int v6 = "tuple";
          goto LABEL_90;
        case 2:
          int v6 = "struct";
          goto LABEL_90;
        case 3:
          int v6 = "thick_function";
          goto LABEL_90;
        case 4:
          int v6 = "opaque_existential";
          goto LABEL_90;
        case 5:
          int v6 = "class_existential";
          goto LABEL_90;
        case 6:
          int v6 = "existential_metatype";
          goto LABEL_90;
        case 7:
          int v6 = "error_existential";
          goto LABEL_90;
        case 8:
          int v6 = "class_instance";
          goto LABEL_90;
        case 9:
          int v6 = "closure_context";
LABEL_90:
          std::string::basic_string[abi:nn180100]<0>(&v43[1], v6);
          if ((v43[24] & 0x80000000) != 0) {
            operator delete(*(void **)&v43[1]);
          }
          break;
        default:
          break;
      }
      int v17 = *((_DWORD *)this + 2);
      *((_DWORD *)this + 2) = v17 + 2;
      uint64_t v30 = a2[5];
      BOOL v31 = a2[6];
      if (v30 == v31) {
        goto LABEL_120;
      }
      while (1)
      {
        if (*((char *)v30 + 23) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)&v43[1], *(const std::string::value_type **)v30, *((void *)v30 + 1));
        }
        else
        {
          long long v32 = *v30;
          *(void *)&v43[17] = *((void *)v30 + 2);
          *(_OWORD *)&v43[1] = v32;
        }
        long long v33 = *(long long *)((char *)v30 + 24);
        uint64_t v45 = (const swift::reflection::TypeInfo *)*((void *)v30 + 5);
        long long __val = v33;
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)"\n", 1);
        v43[0] = 5;
        strcpy((char *)v42, "field");
        for (int j = *((_DWORD *)this + 2); j; --j)
          std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)" ", 1);
        long long v35 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)"(", 1);
        if (v43[0] >= 0) {
          unint64_t v36 = v42;
        }
        else {
          unint64_t v36 = (void **)v42[0];
        }
        if (v43[0] >= 0) {
          uint64_t v37 = v43[0];
        }
        else {
          uint64_t v37 = (uint64_t)v42[1];
        }
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v35, (uint64_t)v36, v37);
        if ((v43[0] & 0x80000000) != 0) {
          operator delete(v42[0]);
        }
        uint64_t v38 = v43[24];
        if (v43[24] < 0) {
          uint64_t v38 = *(void *)&v43[9];
        }
        if (v38)
        {
          v43[0] = 4;
          strcpy((char *)v42, "name");
          if ((v43[0] & 0x80000000) != 0) {
            operator delete(v42[0]);
          }
        }
        v43[0] = 6;
        strcpy((char *)v42, "offset");
        std::to_string(&v41, __val);
        if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v41.__r_.__value_.__l.__data_);
          if ((v43[0] & 0x80000000) != 0) {
LABEL_118:
          }
            operator delete(v42[0]);
        }
        else if ((v43[0] & 0x80000000) != 0)
        {
          goto LABEL_118;
        }
        unint64_t v39 = v45;
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)"\n", 1);
        *((_DWORD *)this + 2) += 2;
        *((_DWORD *)this + 2) -= 2;
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)")", 1);
        if ((v43[24] & 0x80000000) != 0) {
          operator delete(*(void **)&v43[1]);
        }
        v30 += 3;
        if (v30 == v31) {
          goto LABEL_119;
        }
      }
    case 2:
      v43[24] = 9;
      strcpy(&v43[1], "reference");
      for (int k = *((_DWORD *)this + 2); k; --k)
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)" ", 1);
      int v8 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)"(", 1);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v8, (uint64_t)&v43[1], 9);
      if ((v43[24] & 0x80000000) != 0) {
        operator delete(*(void **)&v43[1]);
      }
      switch(*((_DWORD *)a2 + 8))
      {
        case 0:
          v43[24] = 4;
          strcpy(&v43[1], "kind");
          v43[0] = 6;
          strcpy((char *)v42, "strong");
          goto LABEL_69;
        case 1:
          v43[24] = 4;
          strcpy(&v43[1], "kind");
          v43[0] = 4;
          strcpy((char *)v42, "weak");
          goto LABEL_69;
        case 2:
          v43[24] = 4;
          strcpy(&v43[1], "kind");
          v43[0] = 7;
          strcpy((char *)v42, "unowned");
          goto LABEL_69;
        case 3:
          v43[24] = 4;
          strcpy(v43, "\tkind");
          strcpy((char *)v42, "unmanaged");
LABEL_69:
          if ((v43[0] & 0x80000000) != 0) {
            operator delete(v42[0]);
          }
          if ((v43[24] & 0x80000000) != 0) {
            operator delete(*(void **)&v43[1]);
          }
          break;
        default:
          break;
      }
      int v29 = *((_DWORD *)a2 + 9);
      if (v29 == 1)
      {
        v43[24] = 11;
        strcpy(&v43[1], "refcounting");
        v43[0] = 7;
        strcpy((char *)v42, "unknown");
      }
      else
      {
        if (v29) {
          return std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)")", 1);
        }
        v43[24] = 11;
        strcpy(&v43[1], "refcounting");
        v43[0] = 6;
        strcpy((char *)v42, "native");
      }
      if ((v43[0] & 0x80000000) != 0) {
        operator delete(v42[0]);
      }
LABEL_79:
      if ((v43[24] & 0x80000000) != 0) {
        operator delete(*(void **)&v43[1]);
      }
      return std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)")", 1);
    case 3:
      v43[24] = 7;
      strcpy(&v43[1], "invalid");
      for (int m = *((_DWORD *)this + 2); m; --m)
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)" ", 1);
      uint64_t v10 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)"(", 1);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v10, (uint64_t)&v43[1], 7);
      goto LABEL_79;
    case 4:
      int v11 = *((_DWORD *)a2 + 8);
      if (v11 == 2)
      {
        v43[24] = 18;
        strcpy(&v43[1], "multi_payload_enum");
        for (int n = *((_DWORD *)this + 2); n; --n)
          std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)" ", 1);
        uint64_t v13 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)"(", 1);
        uint64_t v14 = 18;
      }
      else if (v11 == 1)
      {
        v43[24] = 19;
        strcpy(&v43[1], "single_payload_enum");
        for (iint i = *((_DWORD *)this + 2); ii; --ii)
          std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)" ", 1);
        uint64_t v13 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)"(", 1);
        uint64_t v14 = 19;
      }
      else
      {
        if (v11) {
          goto LABEL_32;
        }
        v43[24] = 15;
        strcpy(&v43[1], "no_payload_enum");
        for (int jj = *((_DWORD *)this + 2); jj; --jj)
          std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)" ", 1);
        uint64_t v13 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)"(", 1);
        uint64_t v14 = 15;
      }
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v13, (uint64_t)&v43[1], v14);
      if ((v43[24] & 0x80000000) != 0) {
        operator delete(*(void **)&v43[1]);
      }
LABEL_32:
      int v17 = *((_DWORD *)this + 2);
      *((_DWORD *)this + 2) = v17 + 2;
      unint64_t v18 = a2[5];
      BOOL v19 = a2[6];
      if (v18 == v19) {
        goto LABEL_120;
      }
      int v20 = -1;
      break;
    default:
      abort();
  }
  do
  {
    if (*((char *)v18 + 23) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&v43[1], *(const std::string::value_type **)v18, *((void *)v18 + 1));
    }
    else
    {
      long long v21 = *v18;
      *(void *)&v43[17] = *((void *)v18 + 2);
      *(_OWORD *)&v43[1] = v21;
    }
    long long v22 = *(long long *)((char *)v18 + 24);
    uint64_t v45 = (const swift::reflection::TypeInfo *)*((void *)v18 + 5);
    long long __val = v22;
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)"\n", 1);
    v43[0] = 4;
    strcpy((char *)v42, "case");
    for (kint k = *((_DWORD *)this + 2); kk; --kk)
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)" ", 1);
    unint64_t v24 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)"(", 1);
    if (v43[0] >= 0) {
      uint64_t v25 = v42;
    }
    else {
      uint64_t v25 = (void **)v42[0];
    }
    if (v43[0] >= 0) {
      uint64_t v26 = v43[0];
    }
    else {
      uint64_t v26 = (uint64_t)v42[1];
    }
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v24, (uint64_t)v25, v26);
    if ((v43[0] & 0x80000000) != 0) {
      operator delete(v42[0]);
    }
    uint64_t v27 = v43[24];
    if (v43[24] < 0) {
      uint64_t v27 = *(void *)&v43[9];
    }
    if (v27)
    {
      v43[0] = 4;
      strcpy((char *)v42, "name");
      if ((v43[0] & 0x80000000) != 0) {
        operator delete(v42[0]);
      }
    }
    ++v20;
    v43[0] = 5;
    strcpy((char *)v42, "index");
    std::to_string(&v41, v20);
    if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v41.__r_.__value_.__l.__data_);
      if ((v43[0] & 0x80000000) == 0) {
        goto LABEL_55;
      }
LABEL_58:
      operator delete(v42[0]);
      if (!*((void *)&__val + 1)) {
        goto LABEL_62;
      }
LABEL_59:
      v43[0] = 6;
      strcpy((char *)v42, "offset");
      std::to_string(&v41, __val);
      if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v41.__r_.__value_.__l.__data_);
        if ((v43[0] & 0x80000000) == 0) {
          goto LABEL_61;
        }
      }
      else if ((v43[0] & 0x80000000) == 0)
      {
LABEL_61:
        unint64_t v28 = v45;
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)"\n", 1);
        *((_DWORD *)this + 2) += 2;
        *((_DWORD *)this + 2) -= 2;
        goto LABEL_62;
      }
      operator delete(v42[0]);
      goto LABEL_61;
    }
    if ((v43[0] & 0x80000000) != 0) {
      goto LABEL_58;
    }
LABEL_55:
    if (*((void *)&__val + 1)) {
      goto LABEL_59;
    }
LABEL_62:
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)")", 1);
    if ((v43[24] & 0x80000000) != 0) {
      operator delete(*(void **)&v43[1]);
    }
    v18 += 3;
  }
  while (v18 != v19);
LABEL_119:
  int v17 = *((_DWORD *)this + 2) - 2;
LABEL_120:
  *((_DWORD *)this + 2) = v17;
  return std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)")", 1);
}

void *swift::reflection::ReferenceTypeInfo::getSpareBits@<X0>(swift::reflection::ReferenceTypeInfo *this@<X0>, swift::reflection::TypeRefBuilder **a2@<X1>, uint64_t a3@<X8>)
{
  MultiPayloadEnumPointerMasint k = swift::reflection::TypeRefBuilder::getMultiPayloadEnumPointerMask(*a2);
  size_t v7 = *((unsigned int *)this + 3);
  uint64_t __src = MultiPayloadEnumPointerMask;
  *(_DWORD *)a3 = v7;
  double result = malloc_type_calloc(1uLL, v7, 0xE41FC33AuLL);
  *(void *)(a3 + 8) = result;
  if (result)
  {
    if (v7 >= 8) {
      size_t v9 = 8;
    }
    else {
      size_t v9 = v7;
    }
    return memcpy(result, &__src, v9);
  }
  else
  {
    *(_DWORD *)a3 = 0;
  }
  return result;
}

uint64_t swift::reflection::TypeRefBuilder::getMultiPayloadEnumPointerMask(swift::reflection::TypeRefBuilder *this)
{
  uint64_t v2 = (char *)this + 624;
  uint64_t v3 = *((void *)this + 91);
  if (!v3)
  {
    uint64_t v4 = *((void *)this + 78);
    char v14 = 2;
    strcpy((char *)__p, "Bp");
    uint64_t v3 = swift::reflection::BuiltinTypeRef::create<swift::reflection::TypeRefBuilder>(v4, (uint64_t)__p);
    *((void *)this + 91) = v3;
    if (v14 < 0)
    {
      operator delete(__p[0]);
      uint64_t v3 = *((void *)this + 91);
    }
  }
  uint64_t TypeInfo = swift::reflection::TypeConverter::getTypeInfo((uint64_t)v2, v3, 0);
  if (*((unsigned char *)this + 2184)) {
    return *((void *)this + 272);
  }
  int v6 = *(_DWORD *)(TypeInfo + 12);
  int v11 = operator new(0x38uLL);
  long long v12 = xmmword_C6C10;
  strcpy((char *)v11, "_swift_debug_multiPayloadEnumPointerSpareBitsMask");
  LODWORD(__p[0]) = v6;
  uint64_t v7 = *((void *)this + 271);
  if (v7)
  {
    *((void *)this + 272) = (*(uint64_t (**)(uint64_t, void **, void **))(*(void *)v7 + 48))(v7, &v11, __p);
    *((unsigned char *)this + 2184) = v8;
    if (SHIBYTE(v12) < 0)
    {
      operator delete(v11);
      if (!*((unsigned char *)this + 2184)) {
        goto LABEL_10;
      }
    }
    else if (!v8)
    {
LABEL_10:
      if (v6 == 4)
      {
        *((unsigned char *)this + 2184) = 1;
        *((void *)this + 272) = 3;
      }
      else
      {
        *((void *)this + 272) = 0xF000000000000007;
        *((unsigned char *)this + 2184) = 1;
      }
    }
    return *((void *)this + 272);
  }
  uint64_t v10 = std::__throw_bad_function_call[abi:nn180100]();
  return swift::reflection::BuiltinTypeInfo::BuiltinTypeInfo(v10);
}

uint64_t swift::reflection::BuiltinTypeInfo::BuiltinTypeInfo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v4 = *(unsigned char *)(a3 + 24);
  *(_DWORD *)(a1 + 8) = 0;
  *(_OWORD *)(a1 + 12) = *(_OWORD *)(a3 + 8);
  *(unsigned char *)(a1 + 28) = v4;
  *(void *)a1 = &off_CA130;
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)a3 + 16))(a3);
  if (v6 >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  uint64_t v7 = (const void *)v5;
  size_t v8 = v6;
  if (v6 >= 0x17)
  {
    uint64_t v10 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17) {
      uint64_t v10 = v6 | 7;
    }
    uint64_t v11 = v10 + 1;
    size_t v9 = operator new(v10 + 1);
    *(void *)(a1 + 40) = v8;
    *(void *)(a1 + 48) = v11 | 0x8000000000000000;
    *(void *)(a1 + 32) = v9;
  }
  else
  {
    size_t v9 = (void *)(a1 + 32);
    *(unsigned char *)(a1 + 55) = v6;
    if (!v6) {
      goto LABEL_9;
    }
  }
  memmove(v9, v7, v8);
LABEL_9:
  *((unsigned char *)v9 + v8) = 0;
  return a1;
}

{
  char v4;
  uint64_t v5;
  unint64_t v6;
  const void *v7;
  size_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;

  char v4 = *(unsigned char *)(a3 + 24);
  *(_DWORD *)(a1 + 8) = 0;
  *(_OWORD *)(a1 + 12) = *(_OWORD *)(a3 + 8);
  *(unsigned char *)(a1 + 28) = v4;
  *(void *)a1 = &off_CA130;
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)a3 + 16))(a3);
  if (v6 >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  uint64_t v7 = (const void *)v5;
  size_t v8 = v6;
  if (v6 >= 0x17)
  {
    uint64_t v10 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17) {
      uint64_t v10 = v6 | 7;
    }
    uint64_t v11 = v10 + 1;
    size_t v9 = operator new(v10 + 1);
    *(void *)(a1 + 40) = v8;
    *(void *)(a1 + 48) = v11 | 0x8000000000000000;
    *(void *)(a1 + 32) = v9;
  }
  else
  {
    size_t v9 = (void *)(a1 + 32);
    *(unsigned char *)(a1 + 55) = v6;
    if (!v6) {
      goto LABEL_9;
    }
  }
  memmove(v9, v7, v8);
LABEL_9:
  *((unsigned char *)v9 + v8) = 0;
  return a1;
}

uint64_t swift::reflection::BuiltinTypeInfo::BuiltinTypeInfo(uint64_t this, int a2, int a3, int a4, int a5, char a6)
{
  *(_DWORD *)(this + 8) = 0;
  *(_DWORD *)(this + 12) = a2;
  *(_DWORD *)(this + 16) = a3;
  *(_DWORD *)(this + 20) = a4;
  *(_DWORD *)(this + 24) = a5;
  *(unsigned char *)(this + 28) = a6;
  *(void *)this = &off_CA130;
  *(void *)(this + 40) = 0;
  *(void *)(this + 48) = 0;
  *(void *)(this + 32) = 0;
  return this;
}

{
  *(_DWORD *)(this + 8) = 0;
  *(_DWORD *)(this + 12) = a2;
  *(_DWORD *)(this + 16) = a3;
  *(_DWORD *)(this + 20) = a4;
  *(_DWORD *)(this + 24) = a5;
  *(unsigned char *)(this + 28) = a6;
  *(void *)this = &off_CA130;
  *(void *)(this + 40) = 0;
  *(void *)(this + 48) = 0;
  *(void *)(this + 32) = 0;
  return this;
}

uint64_t swift::reflection::BuiltinTypeInfo::readExtraInhabitantIndex(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  if (!*(_DWORD *)(a1 + 24)) {
    goto LABEL_27;
  }
  size_t v8 = (_OWORD *)(a1 + 32);
  if (*(char *)(a1 + 55) < 0)
  {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a1 + 32), *(void *)(a1 + 40));
  }
  else
  {
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *v8;
    __p.__r_.__value_.__r.__words[2] = *(void *)(a1 + 48);
  }
  p_p = &__p;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  if (size < 2
    || LOWORD(p_p->__r_.__value_.__l.__data_) != 26946
    || p_p->__r_.__value_.__s.__data_[size - 1] != 95
    || ((uint64_t v11 = (uint64_t)p_p->__r_.__value_.__r.__words + 2, v12 = size - 2, v13 = size - 3, v12 >= v13)
      ? (uint64_t v14 = v13)
      : (uint64_t v14 = v12),
        (unint64_t v25 = 0,
         (__swift::__runtime::llvm::getAsUnsignedInteger(v11, v14, (__swift::__runtime::llvm::StringRef *)((char *)&dword_8 + 2), &v25) & 1) != 0)|| (unsigned int v15 = v25, v25 > 0xFF)))
  {
    unsigned int v15 = 0;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (v15) {
      goto LABEL_20;
    }
  }
  else if (v15)
  {
LABEL_20:
    if (v15 <= 0x40)
    {
      unsigned int v16 = *(_DWORD *)(a1 + 12);
      if (v16 <= 8 && v15 < 8 * v16)
      {
        unint64_t v25 = 0;
        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t *))(*(void *)a2 + 32))(a2, a3, &v25);
        if (result)
        {
          int v18 = v25 + (-1 << v15);
          if (!(v25 >> v15)) {
            int v18 = -1;
          }
          *a4 = v18;
        }
        return result;
      }
    }
LABEL_27:
    *a4 = -1;
    return 1;
  }
  int v19 = *(char *)(a1 + 55);
  if (v19 < 0)
  {
    if (*(void *)(a1 + 40) != 4) {
      return swift::remote::MemoryReader::readHeapObjectExtraInhabitantIndex(a2, a3, a4);
    }
    size_t v8 = *(_OWORD **)v8;
  }
  else if (v19 != 4)
  {
    return swift::remote::MemoryReader::readHeapObjectExtraInhabitantIndex(a2, a3, a4);
  }
  if (*(_DWORD *)v8 != 1717074297) {
    return swift::remote::MemoryReader::readHeapObjectExtraInhabitantIndex(a2, a3, a4);
  }
  unsigned __int8 v26 = 0;
  int v20 = (**(uint64_t (***)(uint64_t, void, void, unsigned __int8 *))a2)(a2, 0, 0, &v26);
  uint64_t result = 0;
  if (v20)
  {
    unint64_t v25 = 0;
    uint64_t result = (**(uint64_t (***)(uint64_t, uint64_t, void, unint64_t *))a2)(a2, 4, 0, &v25);
    if (result)
    {
      unint64_t v24 = 0;
      uint64_t v21 = v26 >= 8u ? 8 : v26;
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, uint64_t))(*(void *)a2 + 32))(a2, a3, &v24, v21);
      if (result)
      {
        if (v24 >= v25) {
          int v22 = -1;
        }
        else {
          int v22 = v24;
        }
        *a4 = v22;
      }
    }
  }
  return result;
}

uint64_t swift::remote::MemoryReader::readHeapObjectExtraInhabitantIndex(uint64_t a1, uint64_t a2, int *a3)
{
  unsigned __int8 v14 = 0;
  int v6 = (**(uint64_t (***)(uint64_t, void, void, unsigned __int8 *))a1)(a1, 0, 0, &v14);
  uint64_t result = 0;
  if (v6)
  {
    unint64_t v13 = 0;
    uint64_t result = (**(uint64_t (***)(uint64_t, uint64_t, void, unint64_t *))a1)(a1, 4, 0, &v13);
    if (result)
    {
      char v12 = 0;
      int v8 = (**(uint64_t (***)(uint64_t, uint64_t, void, char *))a1)(a1, 3, 0, &v12);
      uint64_t result = 0;
      if (v8)
      {
        unint64_t v11 = 0;
        uint64_t v9 = v14 >= 8u ? 8 : v14;
        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, uint64_t))(*(void *)a1 + 32))(a1, a2, &v11, v9);
        if (result)
        {
          if (v11 >= v13) {
            int v10 = -1;
          }
          else {
            int v10 = v11 >> v12;
          }
          *a3 = v10;
        }
      }
    }
  }
  return result;
}

void swift::reflection::BuiltinTypeInfo::getSpareBits(swift::reflection::BuiltinTypeInfo *this@<X0>, swift::reflection::TypeRefBuilder **a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v7 = (_OWORD *)((char *)this + 32);
  if (*((char *)this + 55) < 0)
  {
    std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)this + 4), *((void *)this + 5));
  }
  else
  {
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *v7;
    __p.__r_.__value_.__r.__words[2] = *((void *)this + 6);
  }
  p_p = &__p;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  if (size >= 2 && LOWORD(p_p->__r_.__value_.__l.__data_) == 26946 && p_p->__r_.__value_.__s.__data_[size - 1] == 95)
  {
    uint64_t v10 = (uint64_t)p_p->__r_.__value_.__r.__words + 2;
    std::string::size_type v11 = size - 2;
    std::string::size_type v12 = size - 3;
    uint64_t v13 = v11 >= v12 ? v12 : v11;
    unint64_t __src = 0;
    if ((__swift::__runtime::llvm::getAsUnsignedInteger(v10, v13, (__swift::__runtime::llvm::StringRef *)((char *)&dword_8 + 2), &__src) & 1) == 0)
    {
      int v14 = __src;
      if (__src <= 0xFF)
      {
        if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_17;
        }
LABEL_21:
        operator delete(__p.__r_.__value_.__l.__data_);
        if (v14) {
          goto LABEL_18;
        }
        goto LABEL_22;
      }
    }
  }
  int v14 = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_21;
  }
LABEL_17:
  if (v14)
  {
LABEL_18:
    size_t v15 = *((unsigned int *)this + 3);
    *(_DWORD *)a3 = v15;
    if ((v15 - 134217729) >> 27 == 31)
    {
      int v17 = malloc_type_malloc(v15, 0x223A25D8uLL);
      *(void *)(a3 + 8) = v17;
      if (v17) {
        memset(v17, 255, v15);
      }
      else {
        *(_DWORD *)a3 = 0;
      }
    }
    else
    {
      *(_DWORD *)a3 = 0;
      *(void *)(a3 + 8) = 0;
    }
    swift::reflection::BitMask::keepOnlyMostSignificantBits(a3, 8 * *((_DWORD *)this + 3) - v14);
    return;
  }
LABEL_22:
  int v16 = *((char *)this + 55);
  if (v16 < 0)
  {
    if (*((void *)this + 5) != 4) {
      goto LABEL_31;
    }
    uint64_t v7 = *(_OWORD **)v7;
  }
  else if (v16 != 4)
  {
    goto LABEL_31;
  }
  if (*(_DWORD *)v7 != 1884844153 && *(_DWORD *)v7 != 1717074297)
  {
LABEL_31:
    size_t v18 = *((unsigned int *)this + 3);
    *(_DWORD *)a3 = v18;
    if ((v18 - 134217729) >> 27 == 31)
    {
      int v20 = malloc_type_malloc(v18, 0x223A25D8uLL);
      int v19 = v20;
      *(void *)(a3 + 8) = v20;
      if (v20)
      {
        memset(v20, 255, v18);
      }
      else
      {
        size_t v18 = 0;
        *(_DWORD *)a3 = 0;
      }
    }
    else
    {
      size_t v18 = 0;
      int v19 = 0;
      *(_DWORD *)a3 = 0;
      *(void *)(a3 + 8) = 0;
    }
    bzero(v19, v18);
    return;
  }
  MultiPayloadEnumPointerMasint k = swift::reflection::TypeRefBuilder::getMultiPayloadEnumPointerMask(*a2);
  size_t v22 = *((unsigned int *)this + 3);
  unint64_t __src = MultiPayloadEnumPointerMask;
  *(_DWORD *)a3 = v22;
  uint64_t v23 = malloc_type_calloc(1uLL, v22, 0xE41FC33AuLL);
  *(void *)(a3 + 8) = v23;
  if (v23)
  {
    if (v22 >= 8) {
      size_t v24 = 8;
    }
    else {
      size_t v24 = v22;
    }
    memcpy(v23, &__src, v24);
  }
  else
  {
    *(_DWORD *)a3 = 0;
  }
}

uint64_t swift::reflection::BitMask::keepOnlyMostSignificantBits(uint64_t this, unsigned int a2)
{
  if (*(_DWORD *)this)
  {
    unsigned int v2 = 0;
    unsigned int v3 = *(_DWORD *)this - 1;
    do
    {
      if (v2 >= a2)
      {
        *(unsigned char *)(*(void *)(this + 8) + v3) = 0;
      }
      else
      {
        uint64_t v5 = *(void *)(this + 8);
        unsigned int v6 = *(unsigned __int8 *)(v5 + v3);
        v2 += v6 >> 7;
        if (v2 >= a2) {
          *(unsigned char *)(v5 + v3) = v6 & 0xBF;
        }
        else {
          v2 += (v6 >> 6) & 1;
        }
        uint64_t v7 = *(void *)(this + 8);
        unsigned int v8 = *(unsigned __int8 *)(v7 + v3);
        if (v2 >= a2) {
          *(unsigned char *)(v7 + v3) = v8 & 0xDF;
        }
        else {
          v2 += (v8 >> 5) & 1;
        }
        uint64_t v9 = *(void *)(this + 8);
        unsigned int v10 = *(unsigned __int8 *)(v9 + v3);
        if (v2 >= a2) {
          *(unsigned char *)(v9 + v3) = v10 & 0xEF;
        }
        else {
          v2 += (v10 >> 4) & 1;
        }
        uint64_t v11 = *(void *)(this + 8);
        unsigned int v12 = *(unsigned __int8 *)(v11 + v3);
        if (v2 >= a2) {
          *(unsigned char *)(v11 + v3) = v12 & 0xF7;
        }
        else {
          v2 += (v12 >> 3) & 1;
        }
        uint64_t v13 = *(void *)(this + 8);
        unsigned int v14 = *(unsigned __int8 *)(v13 + v3);
        if (v2 >= a2) {
          *(unsigned char *)(v13 + v3) = v14 & 0xFB;
        }
        else {
          v2 += (v14 >> 2) & 1;
        }
        uint64_t v15 = *(void *)(this + 8);
        unsigned int v16 = *(unsigned __int8 *)(v15 + v3);
        if (v2 >= a2) {
          *(unsigned char *)(v15 + v3) = v16 & 0xFD;
        }
        else {
          v2 += (v16 >> 1) & 1;
        }
        uint64_t v17 = *(void *)(this + 8);
        char v18 = *(unsigned char *)(v17 + v3);
        if (v2 >= a2) {
          *(unsigned char *)(v17 + v3) = v18 & 0xFE;
        }
        else {
          v2 += v18 & 1;
        }
      }
    }
    while (v3--);
  }
  return this;
}

uint64_t swift::reflection::RecordTypeInfo::readExtraInhabitantIndex(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  *a4 = -1;
  switch(*(_DWORD *)(a1 + 32))
  {
    case 1:
    case 2:
      uint64_t v8 = *(void *)(a1 + 40);
      uint64_t v9 = *(void *)(a1 + 48);
      if (v9 == v8) {
        goto LABEL_15;
      }
      for (uint64_t i = v8 + 48; i != v9; i += 48)
      {
        if (*(_DWORD *)(*(void *)(v8 + 40) + 24) < *(_DWORD *)(*(void *)(i + 40) + 24)) {
          uint64_t v8 = i;
        }
      }
      uint64_t v11 = ***(uint64_t (****)(void))(v8 + 40);
      return v11();
    case 3:
      unsigned int v16 = *(long long **)(a1 + 40);
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 48) - (void)v16) >> 4) < 2) {
        goto LABEL_17;
      }
      if (*((char *)v16 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v24, *(const std::string::value_type **)v16, *((void *)v16 + 1));
        int v19 = *(long long **)(a1 + 40);
      }
      else
      {
        long long v18 = *v16;
        v24.__r_.__value_.__r.__words[2] = *((void *)v16 + 2);
        *(_OWORD *)&v24.__r_.__value_.__l.__data_ = v18;
        int v19 = v16;
      }
      long long v20 = *(long long *)((char *)v16 + 24);
      unsigned __int8 v26 = (uint64_t (***)(void, uint64_t, uint64_t, _DWORD *))*((void *)v16 + 5);
      long long v25 = v20;
      if (*((char *)v19 + 71) < 0) {
        std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)v19 + 6), *((void *)v19 + 7));
      }
      else {
        std::string __p = *(std::string *)((unsigned char *)v19 + 2);
      }
      long long v22 = *(long long *)((char *)v19 + 72);
      uint64_t v23 = *((void *)v19 + 11);
      if (v25)
      {
        uint64_t v15 = 0;
        if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_20;
        }
      }
      else
      {
        uint64_t v15 = (**v26)(v26, a2, a3, a4);
        if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_20;
        }
      }
      operator delete(__p.__r_.__value_.__l.__data_);
      goto LABEL_20;
    case 4:
    case 6:
      uint64_t v13 = *(long long **)(a1 + 40);
      if (*(long long **)(a1 + 48) == v13) {
        goto LABEL_17;
      }
      goto LABEL_13;
    case 5:
    case 7:
      uint64_t v13 = *(long long **)(a1 + 40);
      if (*(long long **)(a1 + 48) == v13)
      {
LABEL_15:
        uint64_t v15 = 1;
      }
      else
      {
LABEL_13:
        if (*((char *)v13 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v24, *(const std::string::value_type **)v13, *((void *)v13 + 1));
        }
        else
        {
          long long v14 = *v13;
          v24.__r_.__value_.__r.__words[2] = *((void *)v13 + 2);
          *(_OWORD *)&v24.__r_.__value_.__l.__data_ = v14;
        }
        uint64_t v17 = (uint64_t (***)(void, uint64_t, uint64_t, _DWORD *))*((void *)v13 + 5);
        long long v25 = *(long long *)((char *)v13 + 24);
        unsigned __int8 v26 = v17;
        uint64_t v15 = (**v17)(v17, a2, v25 + a3, a4);
LABEL_20:
        if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v24.__r_.__value_.__l.__data_);
        }
      }
      break;
    default:
LABEL_17:
      uint64_t v15 = 0;
      break;
  }
  return v15;
}

void swift::reflection::RecordTypeInfo::getSpareBits(swift::reflection::RecordTypeInfo *this@<X0>, swift::reflection::TypeConverter *a2@<X1>, BOOL *a3@<X2>, uint64_t a4@<X8>)
{
  size_t v8 = *((unsigned int *)this + 3);
  *(_DWORD *)a4 = v8;
  if ((v8 - 134217729) >> 27 == 31)
  {
    uint64_t v11 = (int8x16_t *)malloc_type_malloc(v8, 0x223A25D8uLL);
    uint64_t v9 = v11;
    *(void *)(a4 + 8) = v11;
    if (v11)
    {
      memset(v11, 255, v8);
      int v10 = *((_DWORD *)this + 8);
      if (!v10) {
        return;
      }
    }
    else
    {
      LODWORD(v8) = 0;
      *(_DWORD *)a4 = 0;
      int v10 = *((_DWORD *)this + 8);
      if (!v10) {
        return;
      }
    }
  }
  else
  {
    uint64_t v9 = 0;
    LODWORD(v8) = 0;
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    int v10 = *((_DWORD *)this + 8);
    if (!v10) {
      return;
    }
  }
  if (v10 == 4)
  {
    uint64_t v12 = *((void *)a2 + 13);
    if (!v12)
    {
      uint64_t v13 = *(void *)a2;
      *((unsigned char *)&__p.__r_.__value_.__s + 23) = 2;
      strcpy((char *)&__p, "Bp");
      uint64_t v12 = swift::reflection::BuiltinTypeRef::create<swift::reflection::TypeRefBuilder>(v13, (uint64_t)&__p);
      *((void *)a2 + 13) = v12;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__p.__r_.__value_.__l.__data_);
        uint64_t v12 = *((void *)a2 + 13);
      }
    }
    uint64_t TypeInfo = swift::reflection::TypeConverter::getTypeInfo((uint64_t)a2, v12, 0);
    size_t v15 = (3 * *(_DWORD *)(TypeInfo + 12));
    if ((v15 - 134217729) >> 27 == 31)
    {
      long long v18 = malloc_type_malloc((3 * *(_DWORD *)(TypeInfo + 12)), 0x223A25D8uLL);
      uint64_t v17 = v18;
      if (v18)
      {
        memset(v18, 255, v15);
        unsigned int v16 = v15;
LABEL_18:
        bzero(v17, v15);
        int v19 = (int8x16_t *)malloc_type_malloc(v16, 0x46DD872BuLL);
        memcpy(v19, v17, v16);
        if (!v8) {
          goto LABEL_29;
        }
        size_t v20 = v8 >= v16 ? v16 : v8;
        if (!v20) {
          goto LABEL_29;
        }
        if (v20 < 8 || v9 < (int8x16_t *)&v19->i8[v20] && v19 < (int8x16_t *)&v9->i8[v20])
        {
          uint64_t v21 = 0;
LABEL_27:
          long long v22 = &v9->i8[v21];
          size_t v23 = v20 - v21;
          std::string v24 = &v19->i8[v21];
          do
          {
            char v25 = *v24++;
            *v22++ &= v25;
            --v23;
          }
          while (v23);
LABEL_29:
          free(v19);
          *a3 = 1;
          free(v17);
          goto LABEL_30;
        }
        if (v20 >= 0x20)
        {
          uint64_t v21 = v20 & 0xFFFFFFE0;
          uint64_t v50 = v19 + 1;
          char v51 = v9 + 1;
          uint64_t v52 = v21;
          do
          {
            int8x16_t v53 = vandq_s8(*v51, *v50);
            v51[-1] = vandq_s8(v51[-1], v50[-1]);
            *char v51 = v53;
            v50 += 2;
            v51 += 2;
            v52 -= 32;
          }
          while (v52);
          if (v21 == v20) {
            goto LABEL_29;
          }
          if ((v20 & 0x18) == 0) {
            goto LABEL_27;
          }
        }
        else
        {
          uint64_t v21 = 0;
        }
        uint64_t v54 = v21;
        uint64_t v21 = v20 & 0xFFFFFFF8;
        char v55 = (int8x8_t *)&v19->i8[v54];
        uint64_t v56 = (int8x8_t *)&v9->i8[v54];
        uint64_t v57 = v54 - v21;
        do
        {
          int8x8_t v58 = *v55++;
          int8x8_t *v56 = vand_s8(*v56, v58);
          ++v56;
          v57 += 8;
        }
        while (v57);
        if (v21 == v20) {
          goto LABEL_29;
        }
        goto LABEL_27;
      }
      unsigned int v16 = 0;
    }
    else
    {
      unsigned int v16 = 0;
      uint64_t v17 = 0;
    }
    size_t v15 = 0;
    goto LABEL_18;
  }
LABEL_30:
  unsigned __int8 v26 = (long long *)*((void *)this + 5);
  uint64_t v27 = (long long *)*((void *)this + 6);
  if (v26 != v27)
  {
    while (1)
    {
      if (*((char *)v26 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v26, *((void *)v26 + 1));
      }
      else
      {
        long long v28 = *v26;
        __p.__r_.__value_.__r.__words[2] = *((void *)v26 + 2);
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v28;
      }
      long long v29 = *(long long *)((char *)v26 + 24);
      uint64_t v63 = *((void *)v26 + 5);
      long long v62 = v29;
      if (!*((void *)&v29 + 1)) {
        goto LABEL_56;
      }
      (*(void (**)(size_t *__return_ptr))(*(void *)v63 + 8))(&size);
      size_t v30 = size;
      BOOL v31 = (int8x16_t *)malloc_type_malloc(size, 0x46DD872BuLL);
      memcpy(v31, __src, v30);
      int v32 = v62;
      LODWORD(v33) = v8 - v62;
      if (v8 > v62)
      {
        uint64_t v33 = v33 >= v30 ? v30 : v33;
        if (v33) {
          break;
        }
      }
LABEL_55:
      free(v31);
      free(__src);
LABEL_56:
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      v26 += 3;
      if (v26 == v27) {
        return;
      }
    }
    if (v33 >= 8)
    {
      uint64_t v34 = 0;
      if (__CFADD__(v62, v33 - 1) || (unint64_t)(v33 - 1) >> 32) {
        goto LABEL_53;
      }
      if (v31 >= (int8x16_t *)&v9->i8[v33 + v62] || &v9->i8[v62] >= &v31->i8[v33])
      {
        if (v33 >= 0x20)
        {
          uint64_t v34 = v33 & 0xFFFFFFE0;
          unint64_t v40 = v31 + 1;
          unsigned int v41 = v62;
          uint64_t v42 = v34;
          do
          {
            int v43 = (int8x16_t *)((char *)v9 + v41);
            int8x16_t v44 = vandq_s8(v43[1], *v40);
            *int v43 = vandq_s8(*v43, v40[-1]);
            v43[1] = v44;
            v40 += 2;
            v41 += 32;
            v42 -= 32;
          }
          while (v42);
          if (v34 == v33) {
            goto LABEL_55;
          }
          if ((v33 & 0x18) == 0) {
            goto LABEL_53;
          }
        }
        else
        {
          uint64_t v34 = 0;
        }
        uint64_t v45 = v34;
        uint64_t v34 = v33 & 0xFFFFFFF8;
        unint64_t v46 = (int8x8_t *)&v31->i8[v45];
        uint64_t v47 = v45 - v34;
        int v48 = v32 + v45;
        do
        {
          int8x8_t v49 = *v46++;
          *(int8x8_t *)&v9->i8[v48] = vand_s8(*(int8x8_t *)&v9->i8[v48], v49);
          v48 += 8;
          v47 += 8;
        }
        while (v47);
        if (v34 == v33) {
          goto LABEL_55;
        }
        goto LABEL_53;
      }
    }
    uint64_t v34 = 0;
LABEL_53:
    uint64_t v36 = v33 - v34;
    int v37 = v32 + v34;
    uint64_t v38 = &v31->i8[v34];
    do
    {
      char v39 = *v38++;
      v9->i8[v37++] &= v39;
      --v36;
    }
    while (v36);
    goto LABEL_55;
  }
}

uint64_t swift::reflection::RecordTypeInfoBuilder::addField(swift::reflection::RecordTypeInfoBuilder *this, int a2, unsigned int a3, unsigned int a4, char a5)
{
  unsigned int v5 = *((_DWORD *)this + 3);
  uint64_t v6 = (a3 + *((_DWORD *)this + 2) - 1) & -a3;
  if (v5 <= a3) {
    unsigned int v5 = a3;
  }
  *((_DWORD *)this + 2) = v6 + a2;
  *((_DWORD *)this + 3) = v5;
  if (*((unsigned char *)this + 20)) {
    char v7 = a5;
  }
  else {
    char v7 = 0;
  }
  *((unsigned char *)this + 20) = v7;
  unsigned int v8 = *((_DWORD *)this + 6);
  if (v8 <= 9)
  {
    if (((1 << v8) & 0x3E9) != 0)
    {
      if (*((unsigned char *)this + 56)) {
        *((_DWORD *)this + 4) = a4;
      }
    }
    else
    {
      unsigned int v9 = *((_DWORD *)this + 4);
      if (v9 <= a4) {
        unsigned int v9 = a4;
      }
      *((_DWORD *)this + 4) = v9;
    }
  }
  *((unsigned char *)this + 56) = 0;
  return v6;
}

void swift::reflection::RecordTypeInfoBuilder::addField(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t TypeInfo = swift::reflection::TypeConverter::getTypeInfo(*(void *)a1, a3, a4);
  if (!TypeInfo)
  {
    *(unsigned char *)(a1 + 57) = 1;
    return;
  }
  uint64_t v8 = TypeInfo;
  unsigned int v9 = *(_DWORD *)(TypeInfo + 16);
  unsigned int v10 = *(_DWORD *)(TypeInfo + 24);
  int v11 = *(unsigned __int8 *)(TypeInfo + 28);
  int v12 = v9 + *(_DWORD *)(a1 + 8) - 1;
  int v13 = -v9;
  if (*(_DWORD *)(a1 + 12) > v9) {
    unsigned int v9 = *(_DWORD *)(a1 + 12);
  }
  unsigned int v14 = v12 & v13;
  *(_DWORD *)(a1 + 8) = (v12 & v13) + *(_DWORD *)(TypeInfo + 12);
  *(_DWORD *)(a1 + 12) = v9;
  if (v11) {
    BOOL v15 = *(unsigned char *)(a1 + 20) == 0;
  }
  else {
    BOOL v15 = 1;
  }
  char v16 = !v15;
  *(unsigned char *)(a1 + 20) = v16;
  unsigned int v17 = *(_DWORD *)(a1 + 24);
  if (v17 <= 9)
  {
    if (((1 << v17) & 0x3E9) != 0)
    {
      if (!*(unsigned char *)(a1 + 56)) {
        goto LABEL_18;
      }
    }
    else if (*(_DWORD *)(a1 + 16) > v10)
    {
      unsigned int v10 = *(_DWORD *)(a1 + 16);
    }
    *(_DWORD *)(a1 + 16) = v10;
  }
LABEL_18:
  *(unsigned char *)(a1 + 56) = 0;
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string __p = *(std::string *)a2;
  }
  *(void *)&long long v24 = v14 | 0xFFFFFFFF00000000;
  *((void *)&v24 + 1) = a3;
  uint64_t v25 = v8;
  unint64_t v18 = *(void *)(a1 + 40);
  if (v18 >= *(void *)(a1 + 48))
  {
    uint64_t v21 = std::vector<swift::reflection::FieldInfo>::__push_back_slow_path<swift::reflection::FieldInfo>((void **)(a1 + 32), (uint64_t)&__p);
    int v22 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    *(void *)(a1 + 40) = v21;
    if (v22 < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    long long v19 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    *(void *)(v18 + 16) = *((void *)&__p.__r_.__value_.__l + 2);
    *(_OWORD *)unint64_t v18 = v19;
    long long v20 = v24;
    *(void *)(v18 + 40) = v25;
    *(_OWORD *)(v18 + 24) = v20;
    *(void *)(a1 + 40) = v18 + 48;
  }
}

uint64_t swift::reflection::TypeConverter::getTypeInfo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v32 = a2;
  if (!a2) {
    return 0;
  }
  if (a3) {
    uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)a3 + 24))(a3);
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v29 = a2;
  uint64_t v30 = v6;
  uint64_t v33 = 0;
  if (__swift::__runtime::llvm::DenseMapBase<__swift::__runtime::llvm::DenseMap<std::pair<swift::reflection::TypeRef const*,void *>,swift::reflection::TypeInfo const*,__swift::__runtime::llvm::DenseMapInfo<std::pair<swift::reflection::TypeRef const*,void *>>,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<swift::reflection::TypeRef const*,void *>,swift::reflection::TypeInfo const*>>,std::pair<swift::reflection::TypeRef const*,void *>,swift::reflection::TypeInfo const*,__swift::__runtime::llvm::DenseMapInfo<std::pair<swift::reflection::TypeRef const*,void *>>,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<swift::reflection::TypeRef const*,void *>,swift::reflection::TypeInfo const*>>::LookupBucketFor<std::pair<swift::reflection::TypeRef const*,void *>>((uint64_t *)(a1 + 32), &v29, &v33)&& v33 != (void *)(*(void *)(a1 + 32) + 24 * *(unsigned int *)(a1 + 48)))
  {
    return v33[2];
  }
  uint64_t v8 = *(void *)(a1 + 56);
  int v9 = *(_DWORD *)(a1 + 72);
  if (v9)
  {
    int v10 = v9 - 1;
    unsigned int v11 = ((a2 >> 4) ^ (a2 >> 9)) & v10;
    int v12 = (uint64_t *)(v8 + 8 * v11);
    uint64_t v13 = *v12;
    if (*v12 == a2) {
      return 0;
    }
    size_t v23 = 0;
    int v24 = 1;
    while (v13 != -4096)
    {
      if (v23) {
        BOOL v25 = 0;
      }
      else {
        BOOL v25 = v13 == -8192;
      }
      if (v25) {
        size_t v23 = v12;
      }
      unsigned int v26 = v11 + v24++;
      unsigned int v11 = v26 & v10;
      int v12 = (uint64_t *)(v8 + 8 * v11);
      uint64_t v13 = *v12;
      if (*v12 == a2) {
        return 0;
      }
    }
    if (v23) {
      BOOL v15 = v23;
    }
    else {
      BOOL v15 = v12;
    }
  }
  else
  {
    BOOL v15 = 0;
  }
  __swift::__runtime::llvm::DenseMapBase<__swift::__runtime::llvm::DenseMap<swift::reflection::TypeRef const*,__swift::__runtime::llvm::detail::DenseSetEmpty,__swift::__runtime::llvm::DenseMapInfo<swift::reflection::TypeRef const*>,__swift::__runtime::llvm::detail::DenseSetPair<swift::reflection::TypeRef const*>>,swift::reflection::TypeRef const*,__swift::__runtime::llvm::detail::DenseSetEmpty,__swift::__runtime::llvm::DenseMapInfo<swift::reflection::TypeRef const*>,__swift::__runtime::llvm::detail::DenseSetPair<swift::reflection::TypeRef const*>>::InsertIntoBucket<swift::reflection::TypeRef const* const&,__swift::__runtime::llvm::detail::DenseSetEmpty&>(a1 + 56, v15, &v32);
  uint64_t v29 = a1;
  uint64_t v30 = a3;
  uint64_t v7 = swift::reflection::TypeRefVisitor<swift::reflection::LowerType,swift::reflection::TypeInfo const*>::visit((swift::reflection::LowerType *)&v29, v32);
  uint64_t v29 = v32;
  uint64_t v30 = v6;
  uint64_t v31 = v7;
  uint64_t v33 = 0;
  if ((__swift::__runtime::llvm::DenseMapBase<__swift::__runtime::llvm::DenseMap<std::pair<swift::reflection::TypeRef const*,void *>,swift::reflection::TypeInfo const*,__swift::__runtime::llvm::DenseMapInfo<std::pair<swift::reflection::TypeRef const*,void *>>,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<swift::reflection::TypeRef const*,void *>,swift::reflection::TypeInfo const*>>,std::pair<swift::reflection::TypeRef const*,void *>,swift::reflection::TypeInfo const*,__swift::__runtime::llvm::DenseMapInfo<std::pair<swift::reflection::TypeRef const*,void *>>,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<swift::reflection::TypeRef const*,void *>,swift::reflection::TypeInfo const*>>::LookupBucketFor<std::pair<swift::reflection::TypeRef const*,void *>>((uint64_t *)(a1 + 32), &v29, &v33) & 1) == 0)
  {
    char v16 = __swift::__runtime::llvm::DenseMapBase<__swift::__runtime::llvm::DenseMap<std::pair<swift::reflection::TypeRef const*,void *>,swift::reflection::TypeInfo const*,__swift::__runtime::llvm::DenseMapInfo<std::pair<swift::reflection::TypeRef const*,void *>>,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<swift::reflection::TypeRef const*,void *>,swift::reflection::TypeInfo const*>>,std::pair<swift::reflection::TypeRef const*,void *>,swift::reflection::TypeInfo const*,__swift::__runtime::llvm::DenseMapInfo<std::pair<swift::reflection::TypeRef const*,void *>>,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<swift::reflection::TypeRef const*,void *>,swift::reflection::TypeInfo const*>>::InsertIntoBucketImpl<std::pair<swift::reflection::TypeRef const*,void *>>(a1 + 32, (uint64_t)&v29, &v29, v33);
    *char v16 = v29;
    v16[1] = v30;
    v16[2] = v31;
  }
  int v17 = *(_DWORD *)(a1 + 72);
  if (v17)
  {
    uint64_t v18 = *(void *)(a1 + 56);
    unsigned int v19 = v17 - 1;
    LODWORD(v20) = ((v32 >> 4) ^ (v32 >> 9)) & (v17 - 1);
    uint64_t v21 = (uint64_t *)(v18 + 8 * v20);
    uint64_t v22 = *v21;
    if (v32 == *v21)
    {
LABEL_17:
      uint64_t *v21 = -8192;
      *(int32x2_t *)(a1 + 64) = vadd_s32(*(int32x2_t *)(a1 + 64), (int32x2_t)0x1FFFFFFFFLL);
    }
    else
    {
      int v27 = 1;
      while (v22 != -4096)
      {
        int v28 = v20 + v27++;
        uint64_t v20 = v28 & v19;
        uint64_t v22 = *(void *)(v18 + 8 * v20);
        if (v32 == v22)
        {
          uint64_t v21 = (uint64_t *)(v18 + 8 * v20);
          goto LABEL_17;
        }
      }
    }
  }
  return v7;
}

uint64_t swift::reflection::RecordTypeInfoBuilder::build(swift::reflection::RecordTypeInfoBuilder *this)
{
  if (!*((unsigned char *)this + 57)) {
    operator new();
  }
  return 0;
}

uint64_t swift::reflection::TypeConverter::getReferenceTypeInfo(uint64_t a1, unsigned int a2, uint64_t a3)
{
  int v3 = a3;
  unint64_t v11 = a2 | (unint64_t)(a3 << 32);
  __p[0] = 0;
  if (__swift::__runtime::llvm::DenseMapBase<__swift::__runtime::llvm::DenseMap<std::pair<unsigned int,unsigned int>,swift::reflection::TypeRef const*,__swift::__runtime::llvm::DenseMapInfo<std::pair<unsigned int,unsigned int>>,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<unsigned int,unsigned int>,swift::reflection::TypeRef const*>>,std::pair<unsigned int,unsigned int>,swift::reflection::TypeRef const*,__swift::__runtime::llvm::DenseMapInfo<std::pair<unsigned int,unsigned int>>,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<unsigned int,unsigned int>,swift::reflection::TypeRef const*>>::LookupBucketFor<std::pair<unsigned int,unsigned int>>((uint64_t *)(a1 + 80), (int *)&v11, __p)&& __p[0] != (void *)(*(void *)(a1 + 80) + 16 * *(unsigned int *)(a1 + 96)))
  {
    return *((void *)__p[0] + 1);
  }
  if (v3 == 1)
  {
    uint64_t v6 = *(const swift::reflection::TypeRef **)(a1 + 120);
    if (!v6)
    {
      uint64_t v8 = *(swift::reflection::TypeRefBuilder **)a1;
      char v13 = 2;
      strcpy((char *)__p, "BO");
      uint64_t v6 = (const swift::reflection::TypeRef *)swift::reflection::BuiltinTypeRef::create<swift::reflection::TypeRefBuilder>((uint64_t)v8, (uint64_t)__p);
      *(void *)(a1 + 120) = v6;
      if (v13 < 0)
      {
        operator delete(__p[0]);
        uint64_t v6 = *(const swift::reflection::TypeRef **)(a1 + 120);
      }
    }
  }
  else if (v3)
  {
    uint64_t v6 = 0;
  }
  else
  {
    uint64_t v6 = *(const swift::reflection::TypeRef **)(a1 + 112);
    if (!v6)
    {
      uint64_t v7 = *(void *)a1;
      char v13 = 2;
      strcpy((char *)__p, "Bo");
      uint64_t v6 = (const swift::reflection::TypeRef *)swift::reflection::BuiltinTypeRef::create<swift::reflection::TypeRefBuilder>(v7, (uint64_t)__p);
      *(void *)(a1 + 112) = v6;
      if (v13 < 0)
      {
        operator delete(__p[0]);
        uint64_t v6 = *(const swift::reflection::TypeRef **)(a1 + 112);
      }
    }
  }
  swift::reflection::TypeRefBuilder::getBuiltinTypeDescriptor(*(swift::reflection::TypeRefBuilder **)a1, v6, &v10);
  if (v10) {
    operator new();
  }
  return 0;
}

uint64_t swift::reflection::TypeConverter::getNativeObjectTypeRef(swift::reflection::TypeConverter *this)
{
  uint64_t result = *((void *)this + 14);
  if (!result)
  {
    uint64_t v3 = *(void *)this;
    char v5 = 2;
    strcpy((char *)__p, "Bo");
    uint64_t result = swift::reflection::BuiltinTypeRef::create<swift::reflection::TypeRefBuilder>(v3, (uint64_t)__p);
    *((void *)this + 14) = result;
    if (v5 < 0)
    {
      operator delete(__p[0]);
      return *((void *)this + 14);
    }
  }
  return result;
}

uint64_t swift::reflection::TypeConverter::getUnknownObjectTypeRef(swift::reflection::TypeConverter *this)
{
  uint64_t result = *((void *)this + 15);
  if (!result)
  {
    uint64_t v3 = *(void *)this;
    char v5 = 2;
    strcpy((char *)__p, "BO");
    uint64_t result = swift::reflection::BuiltinTypeRef::create<swift::reflection::TypeRefBuilder>(v3, (uint64_t)__p);
    *((void *)this + 15) = result;
    if (v5 < 0)
    {
      operator delete(__p[0]);
      return *((void *)this + 15);
    }
  }
  return result;
}

uint64_t swift::reflection::TypeConverter::getThinFunctionTypeInfo(swift::reflection::TypeConverter *this)
{
  uint64_t v1 = *((void *)this + 18);
  if (!v1)
  {
    char v4 = *(swift::reflection::TypeRefBuilder **)this;
    char v5 = (const swift::reflection::TypeRef *)*((void *)this + 16);
    if (!v5)
    {
      char v7 = 4;
      strcpy((char *)__p, "yyXf");
      char v5 = (const swift::reflection::TypeRef *)swift::reflection::BuiltinTypeRef::create<swift::reflection::TypeRefBuilder>((uint64_t)v4, (uint64_t)__p);
      *((void *)this + 16) = v5;
      if (v7 < 0)
      {
        operator delete(__p[0]);
        char v5 = (const swift::reflection::TypeRef *)*((void *)this + 16);
      }
    }
    swift::reflection::TypeRefBuilder::getBuiltinTypeDescriptor(v4, v5, __p);
    if (__p[0]) {
      swift::reflection::TypeConverter::makeTypeInfo<swift::reflection::BuiltinTypeInfo,swift::reflection::TypeRefBuilder &,swift::reflection::BuiltinTypeDescriptorBase &>();
    }
    return 0;
  }
  return v1;
}

uint64_t swift::reflection::TypeConverter::getThinFunctionTypeRef(swift::reflection::TypeConverter *this)
{
  uint64_t result = *((void *)this + 16);
  if (!result)
  {
    uint64_t v3 = *(void *)this;
    char v5 = 4;
    strcpy((char *)__p, "yyXf");
    uint64_t result = swift::reflection::BuiltinTypeRef::create<swift::reflection::TypeRefBuilder>(v3, (uint64_t)__p);
    *((void *)this + 16) = result;
    if (v5 < 0)
    {
      operator delete(__p[0]);
      return *((void *)this + 16);
    }
  }
  return result;
}

void swift::reflection::TypeConverter::makeTypeInfo<swift::reflection::BuiltinTypeInfo,swift::reflection::TypeRefBuilder &,swift::reflection::BuiltinTypeDescriptorBase &>()
{
}

uint64_t swift::reflection::TypeConverter::getThickFunctionTypeInfo(swift::reflection::TypeConverter *this)
{
  uint64_t v1 = *((void *)this + 19);
  if (!v1)
  {
    v13[0] = this;
    v13[1] = 0x100000000;
    int v14 = 0;
    char v15 = 1;
    int v16 = 3;
    uint64_t v18 = 0;
    uint64_t v19 = 0;
    int v17 = 0;
    __int16 v20 = 1;
    char v12 = 8;
    strcpy((char *)__p, "function");
    uint64_t v3 = *((void *)this + 16);
    if (!v3)
    {
      uint64_t v4 = *(void *)this;
      char v22 = 4;
      strcpy((char *)v21, "yyXf");
      uint64_t v3 = swift::reflection::BuiltinTypeRef::create<swift::reflection::TypeRefBuilder>(v4, (uint64_t)v21);
      *((void *)this + 16) = v3;
      if (v22 < 0)
      {
        operator delete(v21[0]);
        uint64_t v3 = *((void *)this + 16);
      }
    }
    swift::reflection::RecordTypeInfoBuilder::addField((uint64_t)v13, (uint64_t)__p, v3, 0);
    uint64_t v5 = *((void *)this + 14);
    char v12 = 7;
    strcpy((char *)__p, "context");
    if (!v5)
    {
      uint64_t v6 = *(void *)this;
      char v22 = 2;
      strcpy((char *)v21, "Bo");
      uint64_t v5 = swift::reflection::BuiltinTypeRef::create<swift::reflection::TypeRefBuilder>(v6, (uint64_t)v21);
      *((void *)this + 14) = v5;
      if (v22 < 0)
      {
        operator delete(v21[0]);
        uint64_t v5 = *((void *)this + 14);
      }
    }
    swift::reflection::RecordTypeInfoBuilder::addField((uint64_t)v13, (uint64_t)__p, v5, 0);
    if (v12 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v1 = swift::reflection::RecordTypeInfoBuilder::build((swift::reflection::RecordTypeInfoBuilder *)v13);
    *((void *)this + 19) = v1;
    char v7 = (void **)v17;
    if (v17)
    {
      uint64_t v8 = v18;
      int v9 = v17;
      if (v18 != v17)
      {
        do
        {
          if (*((char *)v8 - 25) < 0) {
            operator delete(*(v8 - 6));
          }
          v8 -= 6;
        }
        while (v8 != v7);
        int v9 = v17;
      }
      uint64_t v18 = v7;
      operator delete(v9);
    }
  }
  return v1;
}

uint64_t swift::reflection::TypeConverter::getAnyMetatypeTypeInfo(swift::reflection::TypeConverter *this)
{
  uint64_t v1 = *((void *)this + 20);
  if (!v1)
  {
    uint64_t v4 = *(swift::reflection::TypeRefBuilder **)this;
    uint64_t v5 = (const swift::reflection::TypeRef *)*((void *)this + 17);
    if (!v5)
    {
      char v7 = 4;
      strcpy((char *)__p, "ypXp");
      uint64_t v5 = (const swift::reflection::TypeRef *)swift::reflection::BuiltinTypeRef::create<swift::reflection::TypeRefBuilder>((uint64_t)v4, (uint64_t)__p);
      *((void *)this + 17) = v5;
      if (v7 < 0)
      {
        operator delete(__p[0]);
        uint64_t v5 = (const swift::reflection::TypeRef *)*((void *)this + 17);
      }
    }
    swift::reflection::TypeRefBuilder::getBuiltinTypeDescriptor(v4, v5, __p);
    if (__p[0]) {
      swift::reflection::TypeConverter::makeTypeInfo<swift::reflection::BuiltinTypeInfo,swift::reflection::TypeRefBuilder &,swift::reflection::BuiltinTypeDescriptorBase &>();
    }
    return 0;
  }
  return v1;
}

uint64_t swift::reflection::TypeConverter::getAnyMetatypeTypeRef(swift::reflection::TypeConverter *this)
{
  uint64_t result = *((void *)this + 17);
  if (!result)
  {
    uint64_t v3 = *(void *)this;
    char v5 = 4;
    strcpy((char *)__p, "ypXp");
    uint64_t result = swift::reflection::BuiltinTypeRef::create<swift::reflection::TypeRefBuilder>(v3, (uint64_t)__p);
    *((void *)this + 17) = result;
    if (v5 < 0)
    {
      operator delete(__p[0]);
      return *((void *)this + 17);
    }
  }
  return result;
}

uint64_t swift::reflection::TypeConverter::getDefaultActorStorageTypeInfo(swift::reflection::TypeConverter *this)
{
  uint64_t v1 = *((void *)this + 21);
  if (!v1)
  {
    uint64_t v4 = *(swift::reflection::TypeRefBuilder **)this;
    char v5 = (const swift::reflection::TypeRef *)*((void *)this + 13);
    if (!v5)
    {
      char v8 = 2;
      strcpy((char *)__p, "Bp");
      char v5 = (const swift::reflection::TypeRef *)swift::reflection::BuiltinTypeRef::create<swift::reflection::TypeRefBuilder>((uint64_t)v4, (uint64_t)__p);
      *((void *)this + 13) = v5;
      if (v8 < 0)
      {
        operator delete(__p[0]);
        char v5 = (const swift::reflection::TypeRef *)*((void *)this + 13);
      }
    }
    swift::reflection::TypeRefBuilder::getBuiltinTypeDescriptor(v4, v5, &v6);
    if (v6) {
      operator new();
    }
    return 0;
  }
  return v1;
}

uint64_t swift::reflection::TypeConverter::getRawPointerTypeRef(swift::reflection::TypeConverter *this)
{
  uint64_t result = *((void *)this + 13);
  if (!result)
  {
    uint64_t v3 = *(void *)this;
    char v5 = 2;
    strcpy((char *)__p, "Bp");
    uint64_t result = swift::reflection::BuiltinTypeRef::create<swift::reflection::TypeRefBuilder>(v3, (uint64_t)__p);
    *((void *)this + 13) = result;
    if (v5 < 0)
    {
      operator delete(__p[0]);
      return *((void *)this + 13);
    }
  }
  return result;
}

uint64_t swift::reflection::TypeConverter::getEmptyTypeInfo(swift::reflection::TypeConverter *this)
{
  if (!*((void *)this + 22)) {
    operator new();
  }
  return *((void *)this + 22);
}

uint64_t swift::reflection::TypeConverter::hasFixedSize(swift::reflection::TypeConverter *this, const swift::reflection::TypeRef *a2)
{
  uint64_t result = 0;
  if (a2)
  {
    switch(*((_DWORD *)a2 + 2))
    {
      case 0:
      case 1:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 0xB:
      case 0xC:
      case 0xD:
      case 0x10:
      case 0x11:
      case 0x12:
      case 0x13:
      case 0x14:
        uint64_t result = 1;
        break;
      case 2:
        uint64_t result = swift::reflection::HasFixedSize::visitBoundGenericTypeRef((swift::reflection::HasFixedSize *)&v3, a2);
        break;
      case 3:
        uint64_t result = swift::reflection::HasFixedSize::visitTupleTypeRef((swift::reflection::HasFixedSize *)&v3, a2);
        break;
      default:
        return result;
    }
  }
  return result;
}

uint64_t swift::reflection::combineRepresentations(uint64_t result, int a2)
{
  int v3 = result == 1 || a2 == 1;
  if (a2 == 2) {
    int v3 = 2;
  }
  if (result == 2) {
    unsigned int v4 = 2;
  }
  else {
    unsigned int v4 = v3;
  }
  if (result == a2) {
    return result;
  }
  else {
    return v4;
  }
}

uint64_t swift::reflection::TypeRefVisitor<swift::reflection::LowerType,swift::reflection::TypeInfo const*>::visit(swift::reflection::LowerType *this, uint64_t a2)
{
  uint64_t v2 = 0;
  if (!a2) {
    return v2;
  }
  switch(*(_DWORD *)(a2 + 8))
  {
    case 0:
      return swift::reflection::LowerType::visitBuiltinTypeRef((swift::reflection::TypeRefBuilder ***)this, (const swift::reflection::BuiltinTypeRef *)a2);
    case 1:
    case 2:
      return swift::reflection::LowerType::visitAnyNominalTypeRef(this, (const swift::reflection::TypeRef *)a2);
    case 3:
      return swift::reflection::LowerType::visitTupleTypeRef(this, (const swift::reflection::TupleTypeRef *)a2);
    case 4:
      return swift::reflection::LowerType::visitFunctionTypeRef((uint64_t **)this, (const swift::reflection::FunctionTypeRef *)a2);
    case 5:
      goto LABEL_21;
    case 6:
      a2 = *(void *)(a2 + 16);
LABEL_21:
      char v12 = *(swift::reflection::TypeRefBuilder ***)this;
      *(_OWORD *)std::string __p = 0u;
      long long v14 = 0u;
      uint64_t v15 = 0x100000000;
      char v16 = 0;
      int v17 = 0;
      char v18 = 0;
      swift::reflection::ExistentialTypeInfoBuilder::addProtocolComposition((swift::reflection::ExistentialTypeInfoBuilder *)&v12, (const swift::reflection::ProtocolCompositionTypeRef *)a2);
      uint64_t v7 = swift::reflection::ExistentialTypeInfoBuilder::build((uint64_t)&v12, *((void *)this + 1));
      goto LABEL_28;
    case 7:
      return swift::reflection::LowerType::visitMetatypeTypeRef((uint64_t **)this, (const swift::reflection::MetatypeTypeRef *)a2);
    case 8:
      uint64_t v2 = 0;
      char v12 = *(swift::reflection::TypeRefBuilder ***)this;
      *(_OWORD *)std::string __p = 0u;
      long long v14 = 0u;
      uint64_t v15 = 0x100000000;
      char v16 = 0;
      int v17 = 0;
      char v18 = 0;
      char v8 = *(const swift::reflection::ProtocolCompositionTypeRef **)(a2 + 16);
      if (!v8 || *((_DWORD *)v8 + 2) != 5) {
        return v2;
      }
      swift::reflection::ExistentialTypeInfoBuilder::addProtocolComposition((swift::reflection::ExistentialTypeInfoBuilder *)&v12, v8);
      uint64_t v7 = swift::reflection::ExistentialTypeInfoBuilder::buildMetatype((uint64_t)&v12, *((void *)this + 1));
LABEL_28:
      uint64_t v2 = v7;
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      return v2;
    case 0xB:
    case 0xC:
    case 0xD:
      unsigned int v4 = *(swift::reflection::TypeRefBuilder ***)this;
      uint64_t v5 = 1;
      goto LABEL_8;
    case 0x10:
      uint64_t TypeInfo = swift::reflection::TypeConverter::getTypeInfo(*(void *)this, *(void *)(a2 + 16), *((void *)this + 1));
      uint64_t v10 = (uint64_t *)this;
      uint64_t v11 = 1;
      goto LABEL_34;
    case 0x11:
      uint64_t TypeInfo = swift::reflection::TypeConverter::getTypeInfo(*(void *)this, *(void *)(a2 + 16), *((void *)this + 1));
      uint64_t v10 = (uint64_t *)this;
      uint64_t v11 = 2;
      goto LABEL_34;
    case 0x12:
      uint64_t TypeInfo = swift::reflection::TypeConverter::getTypeInfo(*(void *)this, *(void *)(a2 + 16), *((void *)this + 1));
      uint64_t v10 = (uint64_t *)this;
      uint64_t v11 = 3;
LABEL_34:
      uint64_t result = swift::reflection::LowerType::rebuildStorageTypeInfo(v10, TypeInfo, v11);
      break;
    case 0x13:
    case 0x14:
      unsigned int v4 = *(swift::reflection::TypeRefBuilder ***)this;
      uint64_t v5 = 0;
LABEL_8:
      uint64_t result = swift::reflection::TypeConverter::getReferenceTypeInfo((uint64_t)v4, 0, v5);
      break;
    default:
      return v2;
  }
  return result;
}

uint64_t swift::reflection::TypeConverter::getClassInstanceTypeInfo(swift::reflection::TypeRefBuilder **a1, const swift::reflection::TypeRef *a2, int a3, uint64_t a4)
{
  swift::reflection::TypeRefBuilder::getFieldDescriptor(*a1, a2, &v37);
  char v8 = v37;
  if (!v37) {
    return 0;
  }
  unsigned int v9 = (unsigned __int16)v37[4];
  if (v9 > 7) {
    abort();
  }
  if (((1 << v9) & 0x7D) != 0)
  {
    uint64_t v10 = 0;
    int v37 = 0;
LABEL_5:
    (*(void (**)(_WORD *))(*(void *)v8 + 8))(v8);
    return v10;
  }
  uint64_t v28 = 0;
  uint64_t v29 = a1;
  *(void *)uint64_t v30 = 0x100000000;
  *(_DWORD *)&v30[8] = 0;
  char v31 = 1;
  int v32 = 8;
  uint64_t v34 = 0;
  uint64_t v35 = 0;
  uint64_t v33 = 0;
  __int16 v36 = 1;
  unsigned int v26 = 0;
  int v27 = 0;
  int FieldTypeRefs = swift::reflection::TypeRefBuilder::getFieldTypeRefs(*a1, a2, v37, a4, (uint64_t)&v26);
  uint64_t v10 = 0;
  if (FieldTypeRefs)
  {
    *(_DWORD *)uint64_t v30 = a3;
    *(void *)&v30[4] = 1;
    LOBYTE(v36) = 0;
    char v13 = (char *)v26;
    long long v14 = (char *)v27;
    if (v26 != v27)
    {
      do
      {
        if (v13[23] < 0)
        {
          std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v13, *((void *)v13 + 1));
        }
        else
        {
          long long v15 = *(_OWORD *)v13;
          __p.__r_.__value_.__r.__words[2] = *((void *)v13 + 2);
          *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v15;
        }
        long long v16 = *(_OWORD *)(v13 + 24);
        __int16 v25 = *((_WORD *)v13 + 20);
        long long v24 = v16;
        swift::reflection::RecordTypeInfoBuilder::addField((uint64_t)&v29, (uint64_t)&__p, *((uint64_t *)&v16 + 1), a4);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        v13 += 48;
      }
      while (v13 != v14);
    }
    uint64_t v10 = swift::reflection::RecordTypeInfoBuilder::build((swift::reflection::RecordTypeInfoBuilder *)&v29);
  }
  int v17 = (void **)v26;
  if (v26)
  {
    char v18 = v27;
    uint64_t v19 = v26;
    if (v27 != v26)
    {
      do
      {
        if (*((char *)v18 - 25) < 0) {
          operator delete(*(v18 - 6));
        }
        v18 -= 6;
      }
      while (v18 != v17);
      uint64_t v19 = v26;
    }
    int v27 = v17;
    operator delete(v19);
  }
  __int16 v20 = (void **)v33;
  if (v33)
  {
    uint64_t v21 = v34;
    char v22 = v33;
    if (v34 != v33)
    {
      do
      {
        if (*((char *)v21 - 25) < 0) {
          operator delete(*(v21 - 6));
        }
        v21 -= 6;
      }
      while (v21 != v20);
      char v22 = v33;
    }
    uint64_t v34 = v20;
    operator delete(v22);
  }
  char v8 = v37;
  int v37 = 0;
  if (v8) {
    goto LABEL_5;
  }
  return v10;
}

void swift::reflection::BuiltinTypeInfo::~BuiltinTypeInfo(void **this)
{
  *this = &off_CA130;
  if (*((char *)this + 55) < 0) {
    operator delete(this[4]);
  }
}

{
  uint64_t vars8;

  *this = &off_CA130;
  if (*((char *)this + 55) < 0) {
    operator delete(this[4]);
  }

  operator delete();
}

void swift::reflection::RecordTypeInfo::~RecordTypeInfo(swift::reflection::RecordTypeInfo *this)
{
  *(void *)this = &off_CA160;
  uint64_t v2 = *((void *)this + 5);
  if (v2)
  {
    uint64_t v3 = *((void *)this + 6);
    unsigned int v4 = (void *)*((void *)this + 5);
    if (v3 != v2)
    {
      do
      {
        if (*(char *)(v3 - 25) < 0) {
          operator delete(*(void **)(v3 - 48));
        }
        v3 -= 48;
      }
      while (v3 != v2);
      unsigned int v4 = (void *)*((void *)this + 5);
    }
    *((void *)this + 6) = v2;
    operator delete(v4);
  }
}

{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t vars8;

  *(void *)this = &off_CA160;
  uint64_t v2 = *((void *)this + 5);
  if (v2)
  {
    uint64_t v3 = *((void *)this + 6);
    unsigned int v4 = (void *)*((void *)this + 5);
    if (v3 != v2)
    {
      do
      {
        if (*(char *)(v3 - 25) < 0) {
          operator delete(*(void **)(v3 - 48));
        }
        v3 -= 48;
      }
      while (v3 != v2);
      unsigned int v4 = (void *)*((void *)this + 5);
    }
    *((void *)this + 6) = v2;
    operator delete(v4);
  }

  operator delete();
}

uint64_t swift::reflection::ReferenceTypeInfo::readExtraInhabitantIndex(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  if (*(_DWORD *)(a1 + 24)) {
    return swift::remote::MemoryReader::readHeapObjectExtraInhabitantIndex(a2, a3, a4);
  }
  *a4 = -1;
  return 1;
}

void swift::reflection::ReferenceTypeInfo::~ReferenceTypeInfo(swift::reflection::ReferenceTypeInfo *this)
{
}

void *swift::reflection::anonymous namespace'::PrintTypeInfo::printHeader(void **a1, uint64_t a2)
{
  for (int i = *((_DWORD *)a1 + 2); i; --i)
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*a1, (uint64_t)" ", 1);
  uint64_t v5 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*a1, (uint64_t)"(", 1);
  int v6 = *(char *)(a2 + 23);
  if (v6 >= 0) {
    uint64_t v7 = a2;
  }
  else {
    uint64_t v7 = *(void *)a2;
  }
  if (v6 >= 0) {
    uint64_t v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    uint64_t v8 = *(void *)(a2 + 8);
  }

  return std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v5, v7, v8);
}

void swift::reflection::anonymous namespace'::PrintTypeInfo::printBasic(swift::reflection::_anonymous_namespace_::PrintTypeInfo *this, const swift::reflection::TypeInfo *a2)
{
  char v8 = 4;
  strcpy(__p, "size");
  std::to_string(&v6, *((_DWORD *)a2 + 3));
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v6.__r_.__value_.__l.__data_);
    if ((v8 & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  else if ((v8 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)__p);
LABEL_3:
  char v8 = 9;
  strcpy(__p, "alignment");
  std::to_string(&v6, *((_DWORD *)a2 + 4));
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v6.__r_.__value_.__l.__data_);
    if ((v8 & 0x80000000) == 0) {
      goto LABEL_5;
    }
  }
  else if ((v8 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(*(void **)__p);
LABEL_5:
  char v8 = 6;
  strcpy(__p, "stride");
  std::to_string(&v6, *((_DWORD *)a2 + 5));
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v6.__r_.__value_.__l.__data_);
    if ((v8 & 0x80000000) == 0) {
      goto LABEL_7;
    }
  }
  else if ((v8 & 0x80000000) == 0)
  {
    goto LABEL_7;
  }
  operator delete(*(void **)__p);
LABEL_7:
  char v8 = 21;
  strcpy(__p, "num_extra_inhabitants");
  std::to_string(&v6, *((_DWORD *)a2 + 6));
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v6.__r_.__value_.__l.__data_);
    if ((v8 & 0x80000000) == 0) {
      goto LABEL_9;
    }
  }
  else if ((v8 & 0x80000000) == 0)
  {
    goto LABEL_9;
  }
  operator delete(*(void **)__p);
LABEL_9:
  char v8 = 15;
  strcpy(__p, "bitwise_takable");
  int v4 = *((unsigned __int8 *)a2 + 28);
  *((unsigned char *)&v6.__r_.__value_.__s + 23) = 1;
  if (v4) {
    unsigned __int8 v5 = 49;
  }
  else {
    unsigned __int8 v5 = 48;
  }
  LOWORD(v6.__r_.__value_.__l.__data_) = v5;
  if ((SHIBYTE(v6.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((v8 & 0x80000000) == 0) {
      return;
    }
LABEL_24:
    operator delete(*(void **)__p);
    return;
  }
  operator delete(v6.__r_.__value_.__l.__data_);
  if (v8 < 0) {
    goto LABEL_24;
  }
}

void *swift::reflection::anonymous namespace'::PrintTypeInfo::printField(void **a1, uint64_t a2, uint64_t a3)
{
  if (*(char *)(a2 + 23) >= 0) {
    uint64_t v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    uint64_t v5 = *(void *)(a2 + 8);
  }
  std::string v6 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*a1, (uint64_t)" ", 1);
  int v7 = *(char *)(a2 + 23);
  if (v7 >= 0) {
    uint64_t v8 = a2;
  }
  else {
    uint64_t v8 = *(void *)a2;
  }
  if (v7 >= 0) {
    uint64_t v9 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    uint64_t v9 = *(void *)(a2 + 8);
  }
  uint64_t result = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v6, v8, v9);
  if (v5)
  {
    uint64_t v11 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(result, (uint64_t)"=", 1);
    int v12 = *(char *)(a3 + 23);
    if (v12 >= 0) {
      uint64_t v13 = a3;
    }
    else {
      uint64_t v13 = *(void *)a3;
    }
    if (v12 >= 0) {
      uint64_t v14 = *(unsigned __int8 *)(a3 + 23);
    }
    else {
      uint64_t v14 = *(void *)(a3 + 8);
    }
    return std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v11, v13, v14);
  }
  return result;
}

uint64_t swift::reflection::TypeInfo::readExtraInhabitantIndex()
{
  return 0;
}

void swift::reflection::TypeInfo::getSpareBits(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  size_t v3 = *(unsigned int *)(a1 + 12);
  *(_DWORD *)a2 = v3;
  if ((v3 - 134217729) >> 27 == 31)
  {
    uint64_t v5 = malloc_type_malloc(v3, 0x223A25D8uLL);
    int v4 = v5;
    *(void *)(a2 + 8) = v5;
    if (v5)
    {
      memset(v5, 255, v3);
    }
    else
    {
      size_t v3 = 0;
      *(_DWORD *)a2 = 0;
    }
  }
  else
  {
    size_t v3 = 0;
    int v4 = 0;
    *(_DWORD *)a2 = 0;
    *(void *)(a2 + 8) = 0;
  }

  bzero(v4, v3);
}

void swift::reflection::TypeInfo::~TypeInfo(swift::reflection::TypeInfo *this)
{
}

char *std::vector<swift::reflection::FieldInfo>::__push_back_slow_path<swift::reflection::FieldInfo>(void **a1, uint64_t a2)
{
  unint64_t v2 = 0xAAAAAAAAAAAAAAABLL * (((unsigned char *)a1[1] - (unsigned char *)*a1) >> 4);
  unint64_t v3 = v2 + 1;
  if (v2 + 1 > 0x555555555555555) {
    abort();
  }
  if (0x5555555555555556 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 4) > v3) {
    unint64_t v3 = 0x5555555555555556 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v6 = 0x555555555555555;
  }
  else {
    unint64_t v6 = v3;
  }
  if (v6)
  {
    if (v6 > 0x555555555555555) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    int v7 = (char *)operator new(48 * v6);
  }
  else
  {
    int v7 = 0;
  }
  uint64_t v8 = &v7[48 * v2];
  uint64_t v9 = &v7[48 * v6];
  *(_OWORD *)uint64_t v8 = *(_OWORD *)a2;
  *((void *)v8 + 2) = *(void *)(a2 + 16);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  *(_OWORD *)(v8 + 24) = *(_OWORD *)(a2 + 24);
  *((void *)v8 + 5) = *(void *)(a2 + 40);
  uint64_t v10 = v8 + 48;
  uint64_t v11 = (void **)*a1;
  int v12 = (void **)a1[1];
  if (v12 == *a1)
  {
    *a1 = v8;
    a1[1] = v10;
    a1[2] = v9;
  }
  else
  {
    do
    {
      long long v13 = *((_OWORD *)v12 - 3);
      *((void *)v8 - 4) = *(v12 - 4);
      *((_OWORD *)v8 - 3) = v13;
      *(v12 - 5) = 0;
      *(v12 - 4) = 0;
      *(v12 - 6) = 0;
      long long v14 = *(_OWORD *)(v12 - 3);
      *((void *)v8 - 1) = *(v12 - 1);
      *(_OWORD *)(v8 - 24) = v14;
      v8 -= 48;
      v12 -= 6;
    }
    while (v12 != v11);
    int v12 = (void **)*a1;
    long long v15 = (void **)a1[1];
    *a1 = v8;
    a1[1] = v10;
    a1[2] = v9;
    while (v15 != v12)
    {
      if (*((char *)v15 - 25) < 0) {
        operator delete(*(v15 - 6));
      }
      v15 -= 6;
    }
  }
  if (v12) {
    operator delete(v12);
  }
  return v10;
}

uint64_t swift::reflection::RecordTypeInfo::RecordTypeInfo(uint64_t a1, int a2, int a3, int a4, int a5, char a6, int a7, uint64_t *a8)
{
  *(_DWORD *)(a1 + 8) = 1;
  *(_DWORD *)(a1 + 12) = a2;
  *(_DWORD *)(a1 + 16) = a3;
  *(_DWORD *)(a1 + 20) = a4;
  *(_DWORD *)(a1 + 24) = a5;
  *(unsigned char *)(a1 + 28) = a6;
  *(void *)a1 = &off_CA160;
  *(_DWORD *)(a1 + 32) = a7;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 40) = 0;
  uint64_t v9 = *a8;
  uint64_t v10 = a8[1];
  int64_t v11 = v10 - *a8;
  if (v10 != *a8)
  {
    unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * (v11 >> 4);
    if (v12 >= 0x555555555555556) {
      abort();
    }
    long long v13 = (char *)operator new(v11);
    uint64_t v14 = 0;
    *(void *)(a1 + 40) = v13;
    *(void *)(a1 + 48) = v13;
    *(void *)(a1 + 56) = &v13[48 * v12];
    do
    {
      int v17 = (std::string *)&v13[v14];
      char v18 = (long long *)(v9 + v14);
      if (*(char *)(v9 + v14 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v17, *(const std::string::value_type **)v18, *((void *)v18 + 1));
      }
      else
      {
        long long v19 = *v18;
        v17->__r_.__value_.__r.__words[2] = *((void *)v18 + 2);
        *(_OWORD *)&v17->__r_.__value_.__l.__data_ = v19;
      }
      long long v15 = &v13[v14];
      long long v16 = *(_OWORD *)(v9 + v14 + 24);
      *((void *)v15 + 5) = *(void *)(v9 + v14 + 40);
      *(_OWORD *)(v15 + 24) = v16;
      v14 += 48;
    }
    while (v9 + v14 != v10);
    *(void *)(a1 + 48) = &v13[v14];
  }
  return a1;
}

void *std::vector<std::unique_ptr<swift::reflection::TypeInfo const>>::__push_back_slow_path<std::unique_ptr<swift::reflection::TypeInfo const>>(void *a1, uint64_t *a2)
{
  uint64_t v2 = a1[1] - *a1;
  uint64_t v3 = v2 >> 3;
  unint64_t v4 = (v2 >> 3) + 1;
  if (v4 >> 61) {
    abort();
  }
  uint64_t v7 = a1[2] - *a1;
  if (v7 >> 2 > v4) {
    unint64_t v4 = v7 >> 2;
  }
  if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v8 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v8 = v4;
  }
  if (v8)
  {
    if (v8 >> 61) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    uint64_t v9 = (char *)operator new(8 * v8);
  }
  else
  {
    uint64_t v9 = 0;
  }
  uint64_t v10 = &v9[8 * v3];
  int64_t v11 = &v9[8 * v8];
  uint64_t v12 = *a2;
  *a2 = 0;
  *(void *)uint64_t v10 = v12;
  long long v13 = v10 + 8;
  uint64_t v14 = (char *)*a1;
  long long v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v10;
    a1[1] = v13;
    a1[2] = v11;
  }
  else
  {
    unint64_t v16 = (unint64_t)&v15[-*a1 - 8];
    if (v16 < 0x78 || &v15[-(v16 & 0xFFFFFFFFFFFFFFF8) - 8] < v10 && &v9[v2 - (v16 & 0xFFFFFFFFFFFFFFF8) - 8] < v15) {
      goto LABEL_31;
    }
    uint64_t v17 = (v16 >> 3) + 1;
    uint64_t v18 = 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL);
    long long v19 = &v15[-v18];
    v10 -= v18;
    __int16 v20 = &v9[8 * v3 - 16];
    uint64_t v21 = v15 - 16;
    uint64_t v22 = v17 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v24 = *((_OWORD *)v21 - 1);
      long long v23 = *(_OWORD *)v21;
      *((_OWORD *)v21 - 1) = 0uLL;
      *(_OWORD *)uint64_t v21 = 0uLL;
      *((_OWORD *)v20 - 1) = v24;
      *(_OWORD *)__int16 v20 = v23;
      v20 -= 32;
      v21 -= 32;
      v22 -= 4;
    }
    while (v22);
    long long v15 = v19;
    if (v17 != (v17 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_31:
      do
      {
        uint64_t v25 = *((void *)v15 - 1);
        v15 -= 8;
        *(void *)long long v15 = 0;
        *((void *)v10 - 1) = v25;
        v10 -= 8;
      }
      while (v15 != v14);
    }
    long long v15 = (char *)*a1;
    unsigned int v26 = (char *)a1[1];
    *a1 = v10;
    a1[1] = v13;
    a1[2] = v11;
    while (v26 != v15)
    {
      uint64_t v28 = *((void *)v26 - 1);
      v26 -= 8;
      uint64_t v27 = v28;
      *(void *)unsigned int v26 = 0;
      if (v28) {
        (*(void (**)(uint64_t))(*(void *)v27 + 24))(v27);
      }
    }
  }
  if (v15) {
    operator delete(v15);
  }
  return v13;
}

uint64_t swift::reflection::HasFixedSize::visitBoundGenericTypeRef(swift::reflection::HasFixedSize *this, const swift::reflection::BoundGenericTypeRef *a2)
{
  if (swift::reflection::NominalTypeTrait::isClass((const swift::reflection::BoundGenericTypeRef *)((char *)a2 + 16))) {
    return 1;
  }
  uint64_t v5 = (const swift::reflection::BoundGenericTypeRef **)*((void *)a2 + 6);
  unint64_t v4 = (const swift::reflection::BoundGenericTypeRef **)*((void *)a2 + 7);
  if (v5 == v4) {
    return 1;
  }
  while (1)
  {
    uint64_t v7 = *v5;
    if (!*v5) {
      break;
    }
    uint64_t result = 0;
    unsigned int v8 = *((_DWORD *)v7 + 2);
    if (v8 > 0x14) {
      return result;
    }
    if (((1 << v8) & 0x1F39F3) == 0)
    {
      if (v8 == 2)
      {
        uint64_t result = swift::reflection::HasFixedSize::visitBoundGenericTypeRef(this, v7);
        if (!result) {
          return result;
        }
      }
      else
      {
        if (v8 != 3) {
          return result;
        }
        if ((swift::reflection::HasFixedSize::visitTupleTypeRef(this, v7) & 1) == 0) {
          return 0;
        }
      }
    }
    if (++v5 == v4) {
      return 1;
    }
  }
  return 0;
}

uint64_t swift::reflection::HasFixedSize::visitTupleTypeRef(swift::reflection::HasFixedSize *this, const swift::reflection::TupleTypeRef *a2)
{
  uint64_t v2 = (const swift::reflection::BoundGenericTypeRef **)*((void *)a2 + 2);
  uint64_t v3 = (const swift::reflection::BoundGenericTypeRef **)*((void *)a2 + 3);
  if (v2 == v3) {
    return 1;
  }
  while (1)
  {
    unint64_t v6 = *v2;
    if (!*v2) {
      break;
    }
    uint64_t result = 0;
    unsigned int v7 = *((_DWORD *)v6 + 2);
    if (v7 > 0x14) {
      return result;
    }
    if (((1 << v7) & 0x1F39F3) == 0)
    {
      if (v7 == 2)
      {
        uint64_t result = swift::reflection::HasFixedSize::visitBoundGenericTypeRef(this, v6);
        if (!result) {
          return result;
        }
      }
      else
      {
        if (v7 != 3) {
          return result;
        }
        if ((swift::reflection::HasFixedSize::visitTupleTypeRef(this, v6) & 1) == 0) {
          return 0;
        }
      }
    }
    if (++v2 == v3) {
      return 1;
    }
  }
  return 0;
}

uint64_t __swift::__runtime::llvm::DenseMapBase<__swift::__runtime::llvm::DenseMap<std::pair<swift::reflection::TypeRef const*,void *>,swift::reflection::TypeInfo const*,__swift::__runtime::llvm::DenseMapInfo<std::pair<swift::reflection::TypeRef const*,void *>>,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<swift::reflection::TypeRef const*,void *>,swift::reflection::TypeInfo const*>>,std::pair<swift::reflection::TypeRef const*,void *>,swift::reflection::TypeInfo const*,__swift::__runtime::llvm::DenseMapInfo<std::pair<swift::reflection::TypeRef const*,void *>>,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<swift::reflection::TypeRef const*,void *>,swift::reflection::TypeInfo const*>>::LookupBucketFor<std::pair<swift::reflection::TypeRef const*,void *>>(uint64_t *a1, uint64_t *a2, void *a3)
{
  int v3 = *((_DWORD *)a1 + 4);
  if (v3)
  {
    uint64_t v4 = *a1;
    uint64_t v5 = *a2;
    uint64_t v6 = a2[1];
    unint64_t v7 = ((v6 >> 4) ^ (v6 >> 9) | ((unint64_t)((*a2 >> 4) ^ (*a2 >> 9)) << 32))
       + ~((unint64_t)((v6 >> 4) ^ (v6 >> 9)) << 32);
    unint64_t v8 = (v7 ^ (v7 >> 22)) + ~((v7 ^ (v7 >> 22)) << 13);
    unint64_t v9 = (9 * (v8 ^ (v8 >> 8))) ^ ((9 * (v8 ^ (v8 >> 8))) >> 15);
    int v10 = ((v9 + ~(v9 << 27)) >> 31) ^ (v9 + ~(v9 << 27));
    int v11 = v3 - 1;
    unsigned int v12 = (v3 - 1) & v10;
    long long v13 = (void *)(*a1 + 24 * v12);
    uint64_t v15 = *v13;
    uint64_t v14 = v13[1];
    if (v5 == *v13 && v6 == v14)
    {
      uint64_t result = 1;
      *a3 = v13;
    }
    else
    {
      uint64_t v17 = 0;
      int v18 = 1;
      uint64_t result = 1;
      while (v15 != -4096 || v14 != -4096)
      {
        if (v17) {
          BOOL v20 = 0;
        }
        else {
          BOOL v20 = v14 == -8192;
        }
        if (v20 && v15 == -8192) {
          uint64_t v17 = v13;
        }
        unsigned int v22 = v12 + v18++;
        unsigned int v12 = v22 & v11;
        long long v13 = (void *)(v4 + 24 * (v22 & v11));
        uint64_t v15 = *v13;
        uint64_t v14 = v13[1];
        if (v5 == *v13 && v6 == v14)
        {
          *a3 = v13;
          return result;
        }
      }
      uint64_t result = 0;
      if (v17) {
        long long v13 = v17;
      }
      *a3 = v13;
    }
  }
  else
  {
    uint64_t result = 0;
    *a3 = 0;
  }
  return result;
}

uint64_t *__swift::__runtime::llvm::DenseMapBase<__swift::__runtime::llvm::DenseMap<swift::reflection::TypeRef const*,__swift::__runtime::llvm::detail::DenseSetEmpty,__swift::__runtime::llvm::DenseMapInfo<swift::reflection::TypeRef const*>,__swift::__runtime::llvm::detail::DenseSetPair<swift::reflection::TypeRef const*>>,swift::reflection::TypeRef const*,__swift::__runtime::llvm::detail::DenseSetEmpty,__swift::__runtime::llvm::DenseMapInfo<swift::reflection::TypeRef const*>,__swift::__runtime::llvm::detail::DenseSetPair<swift::reflection::TypeRef const*>>::InsertIntoBucket<swift::reflection::TypeRef const* const&,__swift::__runtime::llvm::detail::DenseSetEmpty&>(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
LABEL_3:
    uint64_t v8 = *a2;
    goto LABEL_4;
  }
  __swift::__runtime::llvm::DenseMap<swift::reflection::TypeRef const*,__swift::__runtime::llvm::detail::DenseSetEmpty,__swift::__runtime::llvm::DenseMapInfo<swift::reflection::TypeRef const*>,__swift::__runtime::llvm::detail::DenseSetPair<swift::reflection::TypeRef const*>>::grow(a1, v7);
  uint64_t v8 = *a3;
  int v10 = *(_DWORD *)(a1 + 16) - 1;
  unsigned int v11 = ((*a3 >> 4) ^ (*a3 >> 9)) & v10;
  a2 = (uint64_t *)(*(void *)a1 + 8 * v11);
  uint64_t v12 = *a2;
  if (*a3 != *a2)
  {
    long long v13 = 0;
    int v14 = 1;
    while (v12 != -4096)
    {
      if (v13) {
        BOOL v15 = 0;
      }
      else {
        BOOL v15 = v12 == -8192;
      }
      if (v15) {
        long long v13 = a2;
      }
      unsigned int v16 = v11 + v14++;
      unsigned int v11 = v16 & v10;
      a2 = (uint64_t *)(*(void *)a1 + 8 * (v16 & v10));
      uint64_t v12 = *a2;
      if (v8 == *a2) {
        goto LABEL_4;
      }
    }
    if (v13) {
      a2 = v13;
    }
    goto LABEL_3;
  }
LABEL_4:
  ++*(_DWORD *)(a1 + 8);
  if (v8 != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  *a2 = *a3;
  return a2;
}

void __swift::__runtime::llvm::DenseMap<swift::reflection::TypeRef const*,__swift::__runtime::llvm::detail::DenseSetEmpty,__swift::__runtime::llvm::DenseMapInfo<swift::reflection::TypeRef const*>,__swift::__runtime::llvm::detail::DenseSetPair<swift::reflection::TypeRef const*>>::grow(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  uint64_t v4 = *(__swift::__runtime::llvm **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  buffer = (int64x2_t *)__swift::__runtime::llvm::allocate_buffer(8 * v8, (std::align_val_t)8uLL);
  int v10 = (char *)buffer;
  *(void *)a1 = buffer;
  if (v4)
  {
    *(void *)(a1 + 8) = 0;
    uint64_t v11 = *(unsigned int *)(a1 + 16);
    if (v11)
    {
      unint64_t v12 = (v11 - 1) & 0x1FFFFFFFFFFFFFFFLL;
      if (v12 < 3) {
        goto LABEL_41;
      }
      unint64_t v13 = v12 + 1;
      int v10 = &buffer->i8[8 * (v13 & 0x3FFFFFFFFFFFFFFCLL)];
      int v14 = buffer + 1;
      int64x2_t v15 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
      uint64_t v16 = v13 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v14[-1] = v15;
        int64x2_t *v14 = v15;
        v14 += 2;
        v16 -= 4;
      }
      while (v16);
      if (v13 != (v13 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_41:
        do
        {
          *(void *)int v10 = -4096;
          v10 += 8;
        }
        while (v10 != (char *)buffer + 8 * v11);
      }
    }
    if (v3)
    {
      int v17 = 0;
      int v18 = v11 - 1;
      long long v19 = v4;
      do
      {
        uint64_t v28 = *(void *)v19;
        if ((*(void *)v19 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          unsigned int v29 = ((v28 >> 4) ^ (v28 >> 9)) & v18;
          uint64_t v27 = (void *)(*(void *)a1 + 8 * v29);
          uint64_t v30 = *v27;
          if (v28 != *v27)
          {
            char v31 = 0;
            int v32 = 1;
            while (v30 != -4096)
            {
              if (v31) {
                BOOL v33 = 0;
              }
              else {
                BOOL v33 = v30 == -8192;
              }
              if (v33) {
                char v31 = v27;
              }
              unsigned int v34 = v29 + v32++;
              unsigned int v29 = v34 & v18;
              uint64_t v27 = (void *)(*(void *)a1 + 8 * (v34 & v18));
              uint64_t v30 = *v27;
              if (v28 == *v27) {
                goto LABEL_23;
              }
            }
            if (v31) {
              uint64_t v27 = v31;
            }
          }
LABEL_23:
          *uint64_t v27 = v28;
          *(_DWORD *)(a1 + 8) = ++v17;
        }
        long long v19 = (__swift::__runtime::llvm *)((char *)v19 + 8);
      }
      while (v19 != (__swift::__runtime::llvm *)((char *)v4 + 8 * v3));
    }
    __swift::__runtime::llvm::deallocate_buffer(v4, (void *)(8 * v3), (std::align_val_t)8uLL);
  }
  else
  {
    *(void *)(a1 + 8) = 0;
    uint64_t v20 = *(unsigned int *)(a1 + 16);
    if (v20)
    {
      unint64_t v21 = (v20 - 1) & 0x1FFFFFFFFFFFFFFFLL;
      if (v21 < 3) {
        goto LABEL_18;
      }
      unint64_t v22 = v21 + 1;
      int v10 = &buffer->i8[8 * (v22 & 0x3FFFFFFFFFFFFFFCLL)];
      long long v23 = buffer + 1;
      int64x2_t v24 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
      uint64_t v25 = v22 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v23[-1] = v24;
        int64x2_t *v23 = v24;
        v23 += 2;
        v25 -= 4;
      }
      while (v25);
      if (v22 != (v22 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_18:
        unsigned int v26 = &buffer->i8[8 * v20];
        do
        {
          *(void *)int v10 = -4096;
          v10 += 8;
        }
        while (v10 != v26);
      }
    }
  }
}

uint64_t swift::reflection::LowerType::visitBuiltinTypeRef(swift::reflection::TypeRefBuilder ***this, const swift::reflection::BuiltinTypeRef *a2)
{
  uint64_t v2 = (void *)((char *)a2 + 16);
  int v3 = *((char *)a2 + 39);
  if (v3 < 0)
  {
    if (*((void *)a2 + 3) != 2)
    {
LABEL_9:
      swift::reflection::TypeRefBuilder::getBuiltinTypeDescriptor(**this, a2, &v8);
      if (v8) {
        swift::reflection::TypeConverter::makeTypeInfo<swift::reflection::BuiltinTypeInfo,swift::reflection::TypeRefBuilder &,swift::reflection::BuiltinTypeDescriptorBase &>();
      }
      return 0;
    }
    uint64_t v2 = (void *)*v2;
  }
  else if (v3 != 2)
  {
    goto LABEL_9;
  }
  if (*(_WORD *)v2 == 28482)
  {
    unint64_t v5 = *this;
    uint64_t v6 = 0;
LABEL_14:
    return swift::reflection::TypeConverter::getReferenceTypeInfo((uint64_t)v5, 0, v6);
  }
  if (*(_WORD *)v2 == 20290)
  {
    unint64_t v5 = *this;
    uint64_t v6 = 1;
    goto LABEL_14;
  }
  if (*(_WORD *)v2 != 17474) {
    goto LABEL_9;
  }
  int v7 = *this;

  return swift::reflection::TypeConverter::getDefaultActorStorageTypeInfo((swift::reflection::TypeConverter *)v7);
}

uint64_t swift::reflection::LowerType::visitTupleTypeRef(swift::reflection::LowerType *this, const swift::reflection::TupleTypeRef *a2)
{
  v12[0] = *(void *)this;
  v12[1] = 0x100000000;
  int v13 = 0;
  char v14 = 1;
  int v15 = 1;
  int v17 = 0;
  uint64_t v18 = 0;
  std::string __p = 0;
  __int16 v19 = 1;
  uint64_t v2 = (uint64_t *)*((void *)a2 + 2);
  int v3 = (uint64_t *)*((void *)a2 + 3);
  while (v2 != v3)
  {
    uint64_t v5 = *v2++;
    v11[23] = 0;
    v11[0] = 0;
    swift::reflection::RecordTypeInfoBuilder::addField((uint64_t)v12, (uint64_t)v11, v5, *((void *)this + 1));
  }
  uint64_t v6 = swift::reflection::RecordTypeInfoBuilder::build((swift::reflection::RecordTypeInfoBuilder *)v12);
  int v7 = (void **)__p;
  if (__p)
  {
    uint64_t v8 = v17;
    unint64_t v9 = __p;
    if (v17 != __p)
    {
      do
      {
        if (*((char *)v8 - 25) < 0) {
          operator delete(*(v8 - 6));
        }
        v8 -= 6;
      }
      while (v8 != v7);
      unint64_t v9 = __p;
    }
    int v17 = v7;
    operator delete(v9);
  }
  return v6;
}

uint64_t swift::reflection::LowerType::visitFunctionTypeRef(uint64_t **this, const swift::reflection::FunctionTypeRef *a2)
{
  int v3 = *((unsigned __int8 *)a2 + 50);
  if ((v3 - 2) < 2)
  {
    uint64_t v6 = *this;
    uint64_t v7 = (*this)[16];
    if (!v7)
    {
      uint64_t v8 = *v6;
      char v11 = 4;
      strcpy((char *)__p, "yyXf");
      uint64_t v7 = swift::reflection::BuiltinTypeRef::create<swift::reflection::TypeRefBuilder>(v8, (uint64_t)__p);
      v6[16] = v7;
      if (v11 < 0)
      {
        operator delete(__p[0]);
        uint64_t v7 = v6[16];
      }
    }
    return swift::reflection::TypeConverter::getTypeInfo(v6, v7, this[1]);
  }
  else if (v3 == 1)
  {
    uint64_t v9 = (uint64_t)*this;
    return swift::reflection::TypeConverter::getReferenceTypeInfo(v9, 0, 1);
  }
  else
  {
    if (*((unsigned char *)a2 + 50)) {
      abort();
    }
    uint64_t v4 = (swift::reflection::TypeConverter *)*this;
    return swift::reflection::TypeConverter::getThickFunctionTypeInfo(v4);
  }
}

uint64_t swift::reflection::LowerType::visitMetatypeTypeRef(uint64_t **this, const swift::reflection::MetatypeTypeRef *a2)
{
  int v3 = swift::reflection::TypeRefVisitor<swift::reflection::HasSingletonMetatype,swift::reflection::MetatypeRepresentation>::visit((uint64_t)__p, (uint64_t)a2);
  if (v3 == 2) {
    return 0;
  }
  if (v3 == 1)
  {
    uint64_t v5 = *this;
    uint64_t v6 = (*this)[17];
    if (!v6)
    {
      uint64_t v7 = *v5;
      char v10 = 4;
      strcpy((char *)__p, "ypXp");
      uint64_t v6 = swift::reflection::BuiltinTypeRef::create<swift::reflection::TypeRefBuilder>(v7, (uint64_t)__p);
      v5[17] = v6;
      if (v10 < 0)
      {
        operator delete(__p[0]);
        uint64_t v6 = v5[17];
      }
    }
    return swift::reflection::TypeConverter::getTypeInfo(v5, v6, this[1]);
  }
  else
  {
    if (v3) {
      abort();
    }
    uint64_t v4 = (*this)[22];
    if (!v4) {
      operator new();
    }
  }
  return v4;
}

uint64_t swift::reflection::LowerType::visitAnyNominalTypeRef(swift::reflection::LowerType *this, const swift::reflection::TypeRef *a2)
{
  swift::reflection::TypeRefBuilder::getFieldDescriptor(**(swift::reflection::TypeRefBuilder ***)this, a2, &v51);
  uint64_t v4 = v51;
  if (v51)
  {
    int v5 = (unsigned __int16)v51[4];
    if (v51[4]) {
      goto LABEL_20;
    }
  }
  swift::reflection::TypeRefBuilder::getBuiltinTypeDescriptor(**(swift::reflection::TypeRefBuilder ***)this, a2, &__p);
  if (!__p.__r_.__value_.__r.__words[0])
  {
    uint64_t v4 = v51;
    if (!v51)
    {
      if (!*((void *)this + 1)) {
        goto LABEL_72;
      }
      unsigned int v18 = 0;
      std::string::size_type size = 0;
      memset(&v45, 0, sizeof(v45));
      if (a2 && (*((_DWORD *)a2 + 2) - 3) >= 0xFFFFFFFE)
      {
        std::string::operator=(&v45, (const std::string *)((char *)a2 + 16));
        unsigned int v18 = HIBYTE(v45.__r_.__value_.__r.__words[2]);
        std::string::size_type size = v45.__r_.__value_.__l.__size_;
      }
      if ((v18 & 0x80u) == 0) {
        std::string::size_type v20 = v18;
      }
      else {
        std::string::size_type v20 = size;
      }
      if (v20
        && ((v18 & 0x80u) == 0 ? (unint64_t v21 = &v45) : (unint64_t v21 = (std::string *)v45.__r_.__value_.__r.__words[0]),
            (uint64_t v22 = (*(uint64_t (**)(void, std::string *))(**((void **)this + 1) + 16))(*((void *)this + 1), v21)) != 0))
      {
        Referenceuint64_t TypeInfo = v22;
        int v23 = 0;
      }
      else
      {
        Referenceuint64_t TypeInfo = 0;
        int v23 = 1;
      }
      if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v45.__r_.__value_.__l.__data_);
      }
      if (v23) {
LABEL_72:
      }
        Referenceuint64_t TypeInfo = 0;
      goto LABEL_84;
    }
    int v5 = (unsigned __int16)v51[4];
LABEL_20:
    switch(v5)
    {
      case 0:
        uint64_t v25 = *(swift::Demangle::__runtime::NodeFactory ***)this;
        uint64_t v24 = *((void *)this + 1);
        uint64_t v44 = 0;
        v45.__r_.__value_.__r.__words[0] = (std::string::size_type)v25;
        v45.__r_.__value_.__l.__size_ = 0x100000000;
        LODWORD(v45.__r_.__value_.__r.__words[2]) = 0;
        LODWORD(v46) = 2;
        v45.__r_.__value_.__s.__data_[20] = 1;
        int v48 = 0;
        uint64_t v49 = 0;
        uint64_t v47 = 0;
        __int16 v50 = 1;
        uint64_t v42 = 0;
        int v43 = 0;
        int FieldTypeRefs = swift::reflection::TypeRefBuilder::getFieldTypeRefs(*v25, a2, v4, v24, (uint64_t)&v42);
        Referenceuint64_t TypeInfo = 0;
        if (FieldTypeRefs)
        {
          uint64_t v27 = (char *)v42;
          uint64_t v28 = (char *)v43;
          if (v42 != v43)
          {
            do
            {
              if (v27[23] < 0)
              {
                std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v27, *((void *)v27 + 1));
              }
              else
              {
                long long v29 = *(_OWORD *)v27;
                __p.__r_.__value_.__r.__words[2] = *((void *)v27 + 2);
                *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v29;
              }
              long long v30 = *(_OWORD *)(v27 + 24);
              __int16 v41 = *((_WORD *)v27 + 20);
              long long v40 = v30;
              swift::reflection::RecordTypeInfoBuilder::addField((uint64_t)&v45, (uint64_t)&__p, *((uint64_t *)&v30 + 1), *((void *)this + 1));
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(__p.__r_.__value_.__l.__data_);
              }
              v27 += 48;
            }
            while (v27 != v28);
          }
          Referenceuint64_t TypeInfo = swift::reflection::RecordTypeInfoBuilder::build((swift::reflection::RecordTypeInfoBuilder *)&v45);
        }
        BOOL v33 = (void **)v42;
        if (v42)
        {
          unsigned int v34 = v43;
          uint64_t v35 = v42;
          if (v43 != v42)
          {
            do
            {
              if (*((char *)v34 - 25) < 0) {
                operator delete(*(v34 - 6));
              }
              v34 -= 6;
            }
            while (v34 != v33);
            uint64_t v35 = v42;
          }
          int v43 = v33;
          operator delete(v35);
        }
        __int16 v36 = (void **)v47;
        if (!v47) {
          goto LABEL_84;
        }
        int v37 = v48;
        int v17 = v47;
        if (v48 != v47)
        {
          do
          {
            if (*((char *)v37 - 25) < 0) {
              operator delete(*(v37 - 6));
            }
            v37 -= 6;
          }
          while (v37 != v36);
          int v17 = v47;
        }
        int v48 = v36;
        goto LABEL_83;
      case 1:
        char v31 = *(swift::reflection::TypeRefBuilder ***)this;
        uint64_t v32 = 0;
        goto LABEL_58;
      case 2:
      case 3:
        uint64_t v14 = *((void *)this + 1);
        v45.__r_.__value_.__r.__words[0] = *(void *)this;
        v45.__r_.__value_.__l.__size_ = 0x100000000;
        LODWORD(v45.__r_.__value_.__r.__words[2]) = 0;
        v45.__r_.__value_.__s.__data_[20] = 1;
        uint64_t v47 = 0;
        int v48 = 0;
        unint64_t v46 = 0;
        LOBYTE(v49) = 0;
        Referenceuint64_t TypeInfo = swift::reflection::EnumTypeInfoBuilder::build((uint32x2_t *)&v45, a2, v4, v14);
        int v15 = v46;
        if (!v46) {
          goto LABEL_84;
        }
        uint64_t v16 = (void **)v47;
        int v17 = v46;
        if (v47 != v46)
        {
          do
          {
            if (*((char *)v16 - 25) < 0) {
              operator delete(*(v16 - 6));
            }
            v16 -= 6;
          }
          while (v16 != v15);
          int v17 = v46;
        }
        uint64_t v47 = v15;
LABEL_83:
        operator delete(v17);
        break;
      case 4:
      case 5:
      case 6:
        Referenceuint64_t TypeInfo = 0;
        char v51 = 0;
        goto LABEL_85;
      case 7:
        char v31 = *(swift::reflection::TypeRefBuilder ***)this;
        uint64_t v32 = 1;
LABEL_58:
        Referenceuint64_t TypeInfo = swift::reflection::TypeConverter::getReferenceTypeInfo((uint64_t)v31, 0, v32);
        break;
      default:
        abort();
    }
    goto LABEL_84;
  }
  if (!*((void *)this + 1)) {
    goto LABEL_25;
  }
  unsigned int v6 = 0;
  std::string::size_type v7 = 0;
  memset(&v45, 0, sizeof(v45));
  if (a2 && (*((_DWORD *)a2 + 2) - 3) >= 0xFFFFFFFE)
  {
    std::string::operator=(&v45, (const std::string *)((char *)a2 + 16));
    unsigned int v6 = HIBYTE(v45.__r_.__value_.__r.__words[2]);
    std::string::size_type v7 = v45.__r_.__value_.__l.__size_;
  }
  if ((v6 & 0x80u) == 0) {
    std::string::size_type v8 = v6;
  }
  else {
    std::string::size_type v8 = v7;
  }
  if (v8
    && ((v6 & 0x80u) == 0 ? (uint64_t v9 = &v45) : (uint64_t v9 = (std::string *)v45.__r_.__value_.__r.__words[0]),
        (uint64_t v10 = (*(uint64_t (**)(void, std::string *))(**((void **)this + 1) + 16))(*((void *)this + 1), v9)) != 0))
  {
    Referenceuint64_t TypeInfo = v10;
    int v12 = 0;
    if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0) {
      goto LABEL_23;
    }
  }
  else
  {
    Referenceuint64_t TypeInfo = 0;
    int v12 = 1;
    if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0) {
LABEL_23:
    }
      operator delete(v45.__r_.__value_.__l.__data_);
  }
  std::string::size_type v13 = __p.__r_.__value_.__r.__words[0];
  if (((ReferenceTypeInfo != 0) & ~v12) == 0) {
LABEL_25:
  }
    swift::reflection::TypeConverter::makeTypeInfo<swift::reflection::BuiltinTypeInfo,swift::reflection::TypeRefBuilder &,swift::reflection::BuiltinTypeDescriptorBase &>();
  __p.__r_.__value_.__r.__words[0] = 0;
  if (v13) {
    (*(void (**)(std::string::size_type))(*(void *)v13 + 8))(v13);
  }
LABEL_84:
  uint64_t v4 = v51;
  char v51 = 0;
  if (v4) {
LABEL_85:
  }
    (*(void (**)(_WORD *))(*(void *)v4 + 8))(v4);
  return ReferenceTypeInfo;
}

uint64_t swift::reflection::EnumTypeInfoBuilder::build(uint32x2_t *a1, swift::reflection::TypeRef *a2, _WORD *a3, uint64_t a4)
{
  size_t v90 = 0;
  unint64_t v91 = 0;
  uint64_t v92 = 0;
  if ((swift::reflection::TypeRefBuilder::getFieldTypeRefs(**(swift::Demangle::__runtime::NodeFactory ***)a1, a2, a3, a4, (uint64_t)&v90) & 1) == 0)
  {
    uint64_t v18 = 0;
    a1[6].i8[0] = 1;
    goto LABEL_140;
  }
  uint64_t v73 = a2;
  std::string::size_type v8 = v90;
  std::string::size_type v7 = (char *)v91;
  if (v90 != (char *)v91)
  {
    int v9 = 0;
    int v74 = 0;
    uint64_t v76 = 0;
    int v10 = 0;
    int v75 = 0;
    while (1)
    {
      if (v8[23] < 0)
      {
        std::string::__init_copy_ctor_external(&v87, *(const std::string::value_type **)v8, *((void *)v8 + 1));
      }
      else
      {
        long long v11 = *(_OWORD *)v8;
        v87.__r_.__value_.__r.__words[2] = *((void *)v8 + 2);
        *(_OWORD *)&v87.__r_.__value_.__l.__data_ = v11;
      }
      long long v12 = *(_OWORD *)(v8 + 24);
      LOWORD(v89) = *((_WORD *)v8 + 20);
      long long v88 = v12;
      if (!*((void *)&v12 + 1)) {
        break;
      }
      if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v84, v87.__r_.__value_.__l.__data_, v87.__r_.__value_.__l.__size_);
      }
      else {
        std::string v84 = v87;
      }
      __int16 v86 = v89;
      long long v85 = v88;
      if ((_BYTE)v89)
      {
        std::string::size_type v13 = (swift::Demangle::__runtime::NodeFactory **)*a1;
        uint64_t v14 = *(void *)(*(void *)a1 + 112);
        if (!v14)
        {
          uint64_t v15 = (uint64_t)*v13;
          char v95 = 2;
          strcpy((char *)&v93, "Bo");
          uint64_t v14 = swift::reflection::BuiltinTypeRef::create<swift::reflection::TypeRefBuilder>(v15, (uint64_t)&v93);
          v13[14] = (swift::Demangle::__runtime::NodeFactory *)v14;
          if (v95 < 0)
          {
            operator delete(v93);
            uint64_t v14 = (uint64_t)v13[14];
          }
        }
      }
      else
      {
        uint64_t v14 = *((void *)&v85 + 1);
      }
      if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v84.__r_.__value_.__l.__data_);
      }
      uint64_t v16 = ((uint64_t (*)(void, void, void))swift::reflection::TypeConverter::getTypeInfo)(*a1, v14, a4);
      if (v16)
      {
        if (BYTE1(v89))
        {
          ++v10;
          goto LABEL_26;
        }
        if (*(_DWORD *)(v16 + 12))
        {
          ++v75;
LABEL_26:
          uint64_t v76 = v14;
        }
        else
        {
          ++v74;
        }
        swift::reflection::EnumTypeInfoBuilder::addCase(a1, (uint64_t)&v87, v14, v16);
LABEL_28:
        char v17 = 1;
        if ((SHIBYTE(v87.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_30;
        }
        goto LABEL_29;
      }
      char v17 = 0;
      a1[6].i8[0] = 1;
      if ((SHIBYTE(v87.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_30;
      }
LABEL_29:
      operator delete(v87.__r_.__value_.__l.__data_);
LABEL_30:
      if ((v17 & 1) == 0)
      {
        uint64_t v18 = 0;
        goto LABEL_140;
      }
      v8 += 48;
      if (v8 == v7) {
        goto LABEL_36;
      }
    }
    ++v9;
    swift::reflection::EnumTypeInfoBuilder::addCase((uint64_t)a1, (uint64_t)&v87);
    goto LABEL_28;
  }
  int v75 = 0;
  int v10 = 0;
  uint64_t v76 = 0;
  int v74 = 0;
  int v9 = 0;
LABEL_36:
  int v19 = v10 + v75;
  unsigned int v83 = v10 + v75;
  uint32x2_t v20 = a1[3];
  uint32x2_t v21 = a1[4];
  if (*(void *)&v20 == *(void *)&v21) {
    operator new();
  }
  int v22 = v19 + v74;
  if (v19 + v74 != 1)
  {
    if (!v22)
    {
      int v82 = 0;
      goto LABEL_44;
    }
    int v22 = 2;
  }
  int v82 = v22;
LABEL_44:
  int v23 = (int *)&a1[1];
  if (a1[1].i32[0] > 0x100000u) {
    operator new();
  }
  if (*(void *)&v21 - *(void *)&v20 != 48)
  {
    unsigned int v24 = v9 + v74;
    if (v19 != 1)
    {
      if (!v19)
      {
        if (v24 > 0xFF)
        {
          if (HIWORD(v24))
          {
            LODWORD(v87.__r_.__value_.__l.__data_) = 4;
            int v25 = -v24;
          }
          else
          {
            LODWORD(v87.__r_.__value_.__l.__data_) = 2;
            int v25 = 0x10000 - v24;
          }
        }
        else
        {
          LODWORD(v87.__r_.__value_.__l.__data_) = 1;
          int v25 = 256 - v24;
        }
        LODWORD(v93) = v25;
        if (v74)
        {
          LODWORD(v93) = 0;
        }
        else if (v25 < 0)
        {
          LODWORD(v93) = 0x7FFFFFFF;
        }
        swift::reflection::TypeConverter::makeTypeInfo<swift::reflection::NoPayloadEnumTypeInfo,unsigned int &,unsigned int &,unsigned int &,unsigned int &,swift::reflection::EnumKind &,std::vector<swift::reflection::FieldInfo> &>();
      }
      swift::reflection::TypeRefBuilder::getBuiltinTypeDescriptor(**(swift::reflection::TypeRefBuilder ***)a1, v73, &v81);
      uint64_t v31 = v81;
      if (!v81 || v10)
      {
        uint64_t EnumTagCounts = swift::getEnumTagCounts((swift *)*v23, v24, v83);
        int v37 = *v23 + HIDWORD(EnumTagCounts);
        int *v23 = v37;
        unsigned int v38 = (1 << (8 * BYTE4(EnumTagCounts))) - EnumTagCounts;
        if (v38 >= 0x7FFFFFFF) {
          unsigned int v38 = 0x7FFFFFFF;
        }
        if (HIDWORD(EnumTagCounts) <= 3) {
          int v39 = v38;
        }
        else {
          int v39 = 0x7FFFFFFF;
        }
        a1[2].i32[0] = v39;
        unsigned int v40 = (v37 + a1[1].i32[1] - 1) & -a1[1].i32[1];
        if (v40 <= 1) {
          unsigned int v40 = 1;
        }
        LODWORD(v87.__r_.__value_.__l.__data_) = v40;
        swift::reflection::TypeConverter::makeTypeInfo<swift::reflection::TaggedMultiPayloadEnumTypeInfo,unsigned int &,unsigned int &,unsigned int &,unsigned int &,BOOL &,std::vector<swift::reflection::FieldInfo> &,unsigned int &>();
      }
      size_t v33 = *(unsigned int *)(v81 + 8);
      __int32 v32 = *(_DWORD *)(v81 + 12);
      a1[1].i32[1] = v32;
      a1[1].i32[0] = v33;
      a1[2].i32[0] = *(_DWORD *)(v31 + 20);
      a1[2].i8[4] = *(unsigned char *)(v31 + 24);
      unsigned int v34 = (v33 + v32 - 1) & -v32;
      if (v34 <= 1) {
        unsigned int v34 = 1;
      }
      unsigned int v80 = v34;
      LODWORD(v93) = v33;
      if ((v33 - 134217729) >> 27 == 31)
      {
        uint64_t v42 = (int8x16_t *)malloc_type_malloc(v33, 0x223A25D8uLL);
        uint64_t v35 = v42;
        uint64_t v94 = v42;
        if (v42)
        {
          memset(v42, 255, v33);
        }
        else
        {
          LODWORD(v33) = 0;
          LODWORD(v93) = 0;
        }
      }
      else
      {
        uint64_t v35 = 0;
        LODWORD(v33) = 0;
        LODWORD(v93) = 0;
        uint64_t v94 = 0;
      }
      char v79 = 0;
      uint32x2_t v44 = a1[3];
      uint32x2_t v45 = a1[4];
      if (*(void *)&v44 == *(void *)&v45)
      {
LABEL_121:
        if (v33)
        {
          if (v35->i8[0])
          {
            BOOL v66 = 0;
          }
          else
          {
            uint64_t v67 = 1;
            do
            {
              unint64_t v68 = v67;
              if (v33 == v67) {
                break;
              }
              ++v67;
            }
            while (!v35->i8[v68]);
            BOOL v66 = v68 >= v33;
          }
          if (!v66 && !v79) {
            swift::reflection::TypeConverter::makeTypeInfo<swift::reflection::MultiPayloadEnumTypeInfo,unsigned int &,unsigned int &,unsigned int &,unsigned int &,BOOL &,std::vector<swift::reflection::FieldInfo> &,swift::reflection::BitMask &,unsigned int &>();
          }
        }
        swift::reflection::TypeConverter::makeTypeInfo<swift::reflection::TaggedMultiPayloadEnumTypeInfo,unsigned int &,unsigned int &,unsigned int &,unsigned int &,BOOL &,std::vector<swift::reflection::FieldInfo> &,unsigned int &>();
      }
      while (1)
      {
        if (*(char *)(*(void *)&v44 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v87, **(const std::string::value_type ***)&v44, *(void *)(*(void *)&v44 + 8));
        }
        else
        {
          long long v46 = *(_OWORD *)*(void *)&v44;
          v87.__r_.__value_.__r.__words[2] = *(void *)(*(void *)&v44 + 16);
          *(_OWORD *)&v87.__r_.__value_.__l.__data_ = v46;
        }
        long long v47 = *(_OWORD *)(*(void *)&v44 + 24);
        uint64_t v89 = *(void *)(*(void *)&v44 + 40);
        long long v88 = v47;
        if (!*((void *)&v47 + 1)) {
          goto LABEL_111;
        }
        (*(void (**)(size_t *__return_ptr))(*(void *)v89 + 8))(&size);
        size_t v48 = size;
        uint64_t v49 = (int8x16_t *)malloc_type_malloc(size, 0x46DD872BuLL);
        memcpy(v49, __src, v48);
        if (v33)
        {
          size_t v50 = v33 >= v48 ? v48 : v33;
          if (v50) {
            break;
          }
        }
LABEL_110:
        free(v49);
        free(__src);
LABEL_111:
        if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v87.__r_.__value_.__l.__data_);
        }
        *(void *)&v44 += 48;
        if (*(void *)&v44 == *(void *)&v45) {
          goto LABEL_121;
        }
      }
      if (v50 < 8
        || (v35 < (int8x16_t *)&v49->i8[v50] ? (BOOL v51 = v49 >= (int8x16_t *)&v35->i8[v50]) : (BOOL v51 = 1), !v51))
      {
        uint64_t v52 = 0;
LABEL_108:
        int8x16_t v53 = &v35->i8[v52];
        size_t v54 = v50 - v52;
        char v55 = &v49->i8[v52];
        do
        {
          char v56 = *v55++;
          *v53++ &= v56;
          --v54;
        }
        while (v54);
        goto LABEL_110;
      }
      if (v50 >= 0x20)
      {
        uint64_t v52 = v50 & 0xFFFFFFE0;
        uint64_t v57 = v49 + 1;
        uint64_t v58 = v52;
        int v59 = v35 + 1;
        do
        {
          int8x16_t v60 = vandq_s8(*v59, *v57);
          v59[-1] = vandq_s8(v59[-1], v57[-1]);
          int8x16_t *v59 = v60;
          v57 += 2;
          v59 += 2;
          v58 -= 32;
        }
        while (v58);
        if (v52 == v50) {
          goto LABEL_110;
        }
        if ((v50 & 0x18) == 0) {
          goto LABEL_108;
        }
      }
      else
      {
        uint64_t v52 = 0;
      }
      uint64_t v61 = v52;
      uint64_t v52 = v50 & 0xFFFFFFF8;
      long long v62 = (int8x8_t *)&v49->i8[v61];
      uint64_t v63 = (int8x8_t *)&v35->i8[v61];
      uint64_t v64 = v61 - v52;
      do
      {
        int8x8_t v65 = *v62++;
        *uint64_t v63 = vand_s8(*v63, v65);
        ++v63;
        v64 += 8;
      }
      while (v64);
      if (v52 == v50) {
        goto LABEL_110;
      }
      goto LABEL_108;
    }
    uint64_t v26 = ((uint64_t (*)(void, void, void))swift::reflection::TypeConverter::getTypeInfo)(*a1, v76, a4);
    uint64_t v18 = 0;
    if (!v76 || !v26) {
      goto LABEL_140;
    }
    unsigned int v27 = *(_DWORD *)(v26 + 24);
    BOOL v51 = v27 >= v24;
    unsigned int v28 = v27 - v24;
    if (v51)
    {
      a1[2].i32[0] = v28;
      unsigned int v41 = a1[1].u32[0];
      unsigned int v30 = a1[1].u32[1];
      goto LABEL_139;
    }
    a1[2].i32[0] = 0;
    unsigned int v29 = a1[1].u32[0];
    if (v29 <= 3)
    {
      unsigned int v43 = ((v24 + ~(-1 << (8 * v29))) >> (8 * v29)) + 1;
      if (v43 < 2)
      {
        unsigned int v30 = 0;
        goto LABEL_136;
      }
      if (v43 >= 0x100)
      {
        if (v43 >= 0x10000) {
          unsigned int v30 = 4;
        }
        else {
          unsigned int v30 = 2;
        }
        goto LABEL_136;
      }
    }
    unsigned int v30 = 1;
LABEL_136:
    unsigned int v41 = v30 + v29;
    if (a1[1].i32[1] > v30) {
      unsigned int v30 = a1[1].u32[1];
    }
    a1[1].i32[0] = v41;
    a1[1].i32[1] = v30;
LABEL_139:
    LODWORD(v87.__r_.__value_.__l.__data_) = (v41 + v30 - 1) & -v30;
    swift::reflection::TypeConverter::makeTypeInfo<swift::reflection::SinglePayloadEnumTypeInfo,unsigned int &,unsigned int &,unsigned int &,unsigned int &,BOOL &,swift::reflection::EnumKind &,std::vector<swift::reflection::FieldInfo> &>();
  }
  if (!v19) {
    swift::reflection::TypeConverter::makeTypeInfo<swift::reflection::TrivialEnumTypeInfo,swift::reflection::EnumKind &,std::vector<swift::reflection::FieldInfo> &>();
  }
  uint64_t v18 = ((uint64_t (*)(void, void, void))swift::reflection::TypeConverter::getTypeInfo)(*a1, v76, a4);
LABEL_140:
  unint64_t v69 = (void **)v90;
  if (v90)
  {
    size_t v70 = v91;
    BOOL v71 = v90;
    if (v91 != (void **)v90)
    {
      do
      {
        if (*((char *)v70 - 25) < 0) {
          operator delete(*(v70 - 6));
        }
        v70 -= 6;
      }
      while (v70 != v69);
      BOOL v71 = v90;
    }
    unint64_t v91 = v69;
    operator delete(v71);
  }
  return v18;
}

void swift::reflection::EnumTypeInfoBuilder::addCase(uint64_t a1, uint64_t a2)
{
  {
    uint64_t v9 = a2;
    a2 = v9;
    if (v8)
    {
      swift::reflection::EnumTypeInfoBuilder::addCase(std::string const&)::emptyTI = (uint64_t)&off_CA1C0;
      dword_CC028 = 3;
      unk_CC034 = 0;
      *(void *)algn_CC02C = 0;
      byte_CC03C = 1;
      __cxa_atexit((void (*)(void *))swift::reflection::TypeInfo::~TypeInfo, &swift::reflection::EnumTypeInfoBuilder::addCase(std::string const&)::emptyTI, &dword_0);
      a2 = v9;
    }
  }
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v10, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v10 = *(std::string *)a2;
  }
  long long v11 = 0xFFFFFFFF00000000;
  long long v12 = &swift::reflection::EnumTypeInfoBuilder::addCase(std::string const&)::emptyTI;
  unint64_t v3 = *(void *)(a1 + 32);
  if (v3 >= *(void *)(a1 + 40))
  {
    unsigned int v6 = std::vector<swift::reflection::FieldInfo>::__push_back_slow_path<swift::reflection::FieldInfo>((void **)(a1 + 24), (uint64_t)&v10);
    int v7 = SHIBYTE(v10.__r_.__value_.__r.__words[2]);
    *(void *)(a1 + 32) = v6;
    if (v7 < 0) {
      operator delete(v10.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    long long v4 = *(_OWORD *)&v10.__r_.__value_.__l.__data_;
    *(void *)(v3 + 16) = *((void *)&v10.__r_.__value_.__l + 2);
    *(_OWORD *)unint64_t v3 = v4;
    long long v5 = v11;
    *(void *)(v3 + 40) = v12;
    *(_OWORD *)(v3 + 24) = v5;
    *(void *)(a1 + 32) = v3 + 48;
  }
}

void swift::reflection::EnumTypeInfoBuilder::addCase(uint32x2_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4)
  {
    unsigned int v6 = (uint64_t *)a4;
    a1[1] = vmax_u32(a1[1], *(uint32x2_t *)(a4 + 12));
    if (*(unsigned char *)(a4 + 28)) {
      BOOL v7 = a1[2].i8[4] == 0;
    }
    else {
      BOOL v7 = 1;
    }
    char v8 = !v7;
    a1[2].i8[4] = v8;
  }
  else
  {
    a1[6].i8[0] = 1;
    unsigned int v6 = &swift::reflection::EnumTypeInfoBuilder::addCase(std::string const&,swift::reflection::TypeRef const*,swift::reflection::TypeInfo const*)::emptyTI;
    {
      uint64_t v15 = a2;
      a2 = v15;
      if (v14)
      {
        swift::reflection::EnumTypeInfoBuilder::addCase(std::string const&,swift::reflection::TypeRef const*,swift::reflection::TypeInfo const*)::emptyTI = (uint64_t)&off_CA1C0;
        dword_CC050 = 3;
        unk_CC05C = 0;
        *(void *)algn_CC054 = 0;
        byte_CC064 = 1;
        __cxa_atexit((void (*)(void *))swift::reflection::TypeInfo::~TypeInfo, &swift::reflection::EnumTypeInfoBuilder::addCase(std::string const&,swift::reflection::TypeRef const*,swift::reflection::TypeInfo const*)::emptyTI, &dword_0);
        a2 = v15;
      }
    }
  }
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v16, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v16 = *(std::string *)a2;
  }
  *(void *)&long long v17 = 0xFFFFFFFF00000000;
  *((void *)&v17 + 1) = a3;
  uint64_t v18 = v6;
  uint32x2_t v9 = a1[4];
  if (*(void *)&v9 >= *(void *)&a1[5])
  {
    long long v12 = std::vector<swift::reflection::FieldInfo>::__push_back_slow_path<swift::reflection::FieldInfo>((void **)&a1[3], (uint64_t)&v16);
    int v13 = SHIBYTE(v16.__r_.__value_.__r.__words[2]);
    a1[4] = (uint32x2_t)v12;
    if (v13 < 0) {
      operator delete(v16.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    long long v10 = *(_OWORD *)&v16.__r_.__value_.__l.__data_;
    *(void *)(*(void *)&v9 + 16) = *((void *)&v16.__r_.__value_.__l + 2);
    *(_OWORD *)*(void *)&uint32x2_t v9 = v10;
    long long v11 = v17;
    *(void *)(*(void *)&v9 + 40) = v18;
    *(_OWORD *)(*(void *)&v9 + 24) = v11;
    a1[4] = (uint32x2_t)(*(void *)&v9 + 48);
  }
}

void swift::reflection::TypeConverter::makeTypeInfo<swift::reflection::TrivialEnumTypeInfo,swift::reflection::EnumKind &,std::vector<swift::reflection::FieldInfo> &>()
{
}

void swift::reflection::TypeConverter::makeTypeInfo<swift::reflection::NoPayloadEnumTypeInfo,unsigned int &,unsigned int &,unsigned int &,unsigned int &,swift::reflection::EnumKind &,std::vector<swift::reflection::FieldInfo> &>()
{
}

uint64_t swift::getEnumTagCounts(swift *this, int a2, unsigned int a3)
{
  LODWORD(v3) = ((~(-1 << (8 * (_BYTE)this)) + a2) >> (8 * (_BYTE)this)) + a3;
  if ((unint64_t)this >= 4) {
    LODWORD(v3) = a3 + 1;
  }
  if (a2) {
    uint64_t v3 = v3;
  }
  else {
    uint64_t v3 = a3;
  }
  uint64_t v4 = 0x100000000;
  uint64_t v5 = 0x400000000;
  if (v3 < 0x10000) {
    uint64_t v5 = 0x200000000;
  }
  if (v3 >= 0x100) {
    uint64_t v4 = v5;
  }
  if (v3 < 2) {
    uint64_t v4 = 0;
  }
  return v4 | v3;
}

void swift::reflection::TypeConverter::makeTypeInfo<swift::reflection::SinglePayloadEnumTypeInfo,unsigned int &,unsigned int &,unsigned int &,unsigned int &,BOOL &,swift::reflection::EnumKind &,std::vector<swift::reflection::FieldInfo> &>()
{
}

void swift::reflection::TypeConverter::makeTypeInfo<swift::reflection::TaggedMultiPayloadEnumTypeInfo,unsigned int &,unsigned int &,unsigned int &,unsigned int &,BOOL &,std::vector<swift::reflection::FieldInfo> &,unsigned int &>()
{
}

void swift::reflection::TypeConverter::makeTypeInfo<swift::reflection::MultiPayloadEnumTypeInfo,unsigned int &,unsigned int &,unsigned int &,unsigned int &,BOOL &,std::vector<swift::reflection::FieldInfo> &,swift::reflection::BitMask &,unsigned int &>()
{
}

uint64_t swift::reflection::EmptyEnumTypeInfo::EmptyEnumTypeInfo(uint64_t a1, uint64_t *a2)
{
  *(_OWORD *)(a1 + 8) = xmmword_C6C30;
  *(_DWORD *)(a1 + 24) = 0;
  *(unsigned char *)(a1 + 28) = 1;
  *(void *)a1 = &off_CA228;
  *(_DWORD *)(a1 + 32) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 40) = 0;
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  int64_t v5 = v4 - *a2;
  if (v4 != *a2)
  {
    unint64_t v6 = 0xAAAAAAAAAAAAAAABLL * (v5 >> 4);
    if (v6 >= 0x555555555555556) {
      abort();
    }
    BOOL v7 = (char *)operator new(v5);
    uint64_t v8 = 0;
    *(void *)(a1 + 40) = v7;
    *(void *)(a1 + 48) = v7;
    *(void *)(a1 + 56) = &v7[48 * v6];
    do
    {
      long long v11 = (std::string *)&v7[v8];
      long long v12 = (long long *)(v3 + v8);
      if (*(char *)(v3 + v8 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v11, *(const std::string::value_type **)v12, *((void *)v12 + 1));
      }
      else
      {
        long long v13 = *v12;
        v11->__r_.__value_.__r.__words[2] = *((void *)v12 + 2);
        *(_OWORD *)&v11->__r_.__value_.__l.__data_ = v13;
      }
      uint32x2_t v9 = &v7[v8];
      long long v10 = *(_OWORD *)(v3 + v8 + 24);
      *((void *)v9 + 5) = *(void *)(v3 + v8 + 40);
      *(_OWORD *)(v9 + 24) = v10;
      v8 += 48;
    }
    while (v3 + v8 != v4);
    *(void *)(a1 + 48) = &v7[v8];
  }
  *(void *)a1 = &off_CA1F0;
  return a1;
}

uint64_t swift::reflection::EnumTypeInfo::EnumTypeInfo(uint64_t a1, int a2, int a3, int a4, int a5, char a6, int a7, uint64_t *a8)
{
  *(_DWORD *)(a1 + 8) = 4;
  *(_DWORD *)(a1 + 12) = a2;
  *(_DWORD *)(a1 + 16) = a3;
  *(_DWORD *)(a1 + 20) = a4;
  *(_DWORD *)(a1 + 24) = a5;
  *(unsigned char *)(a1 + 28) = a6;
  *(void *)a1 = &off_CA228;
  *(_DWORD *)(a1 + 32) = a7;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 40) = 0;
  uint64_t v9 = *a8;
  uint64_t v10 = a8[1];
  int64_t v11 = v10 - *a8;
  if (v10 != *a8)
  {
    unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * (v11 >> 4);
    if (v12 >= 0x555555555555556) {
      abort();
    }
    long long v13 = (char *)operator new(v11);
    uint64_t v14 = 0;
    *(void *)(a1 + 40) = v13;
    *(void *)(a1 + 48) = v13;
    *(void *)(a1 + 56) = &v13[48 * v12];
    do
    {
      long long v17 = (std::string *)&v13[v14];
      uint64_t v18 = (long long *)(v9 + v14);
      if (*(char *)(v9 + v14 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v17, *(const std::string::value_type **)v18, *((void *)v18 + 1));
      }
      else
      {
        long long v19 = *v18;
        v17->__r_.__value_.__r.__words[2] = *((void *)v18 + 2);
        *(_OWORD *)&v17->__r_.__value_.__l.__data_ = v19;
      }
      uint64_t v15 = &v13[v14];
      long long v16 = *(_OWORD *)(v9 + v14 + 24);
      *((void *)v15 + 5) = *(void *)(v9 + v14 + 40);
      *(_OWORD *)(v15 + 24) = v16;
      v14 += 48;
    }
    while (v9 + v14 != v10);
    *(void *)(a1 + 48) = &v13[v14];
  }
  return a1;
}

uint64_t swift::reflection::EmptyEnumTypeInfo::readExtraInhabitantIndex()
{
  return 0;
}

void swift::reflection::EmptyEnumTypeInfo::getSpareBits(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  size_t v3 = *(unsigned int *)(a1 + 12);
  *(_DWORD *)a2 = v3;
  if ((v3 - 134217729) >> 27 == 31)
  {
    int64_t v5 = malloc_type_malloc(v3, 0x223A25D8uLL);
    uint64_t v4 = v5;
    *(void *)(a2 + 8) = v5;
    if (v5)
    {
      memset(v5, 255, v3);
    }
    else
    {
      size_t v3 = 0;
      *(_DWORD *)a2 = 0;
    }
  }
  else
  {
    size_t v3 = 0;
    uint64_t v4 = 0;
    *(_DWORD *)a2 = 0;
    *(void *)(a2 + 8) = 0;
  }

  bzero(v4, v3);
}

void swift::reflection::EmptyEnumTypeInfo::~EmptyEnumTypeInfo(swift::reflection::EmptyEnumTypeInfo *this)
{
  *(void *)this = &off_CA228;
  uint64_t v2 = *((void *)this + 5);
  if (v2)
  {
    uint64_t v3 = *((void *)this + 6);
    uint64_t v4 = (void *)*((void *)this + 5);
    if (v3 != v2)
    {
      do
      {
        if (*(char *)(v3 - 25) < 0) {
          operator delete(*(void **)(v3 - 48));
        }
        v3 -= 48;
      }
      while (v3 != v2);
      uint64_t v4 = (void *)*((void *)this + 5);
    }
    *((void *)this + 6) = v2;
    operator delete(v4);
  }
}

{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t vars8;

  *(void *)this = &off_CA228;
  uint64_t v2 = *((void *)this + 5);
  if (v2)
  {
    uint64_t v3 = *((void *)this + 6);
    uint64_t v4 = (void *)*((void *)this + 5);
    if (v3 != v2)
    {
      do
      {
        if (*(char *)(v3 - 25) < 0) {
          operator delete(*(void **)(v3 - 48));
        }
        v3 -= 48;
      }
      while (v3 != v2);
      uint64_t v4 = (void *)*((void *)this + 5);
    }
    *((void *)this + 6) = v2;
    operator delete(v4);
  }

  operator delete();
}

uint64_t swift::reflection::EmptyEnumTypeInfo::projectEnumValue()
{
  return 0;
}

uint64_t swift::reflection::UnsupportedEnumTypeInfo::readExtraInhabitantIndex()
{
  return 0;
}

void swift::reflection::UnsupportedEnumTypeInfo::getSpareBits(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  size_t v3 = *(unsigned int *)(a1 + 12);
  *(_DWORD *)a2 = v3;
  if ((v3 - 134217729) >> 27 == 31)
  {
    int64_t v5 = malloc_type_malloc(v3, 0x223A25D8uLL);
    uint64_t v4 = v5;
    *(void *)(a2 + 8) = v5;
    if (v5)
    {
      memset(v5, 255, v3);
    }
    else
    {
      size_t v3 = 0;
      *(_DWORD *)a2 = 0;
    }
  }
  else
  {
    size_t v3 = 0;
    uint64_t v4 = 0;
    *(_DWORD *)a2 = 0;
    *(void *)(a2 + 8) = 0;
  }

  bzero(v4, v3);
}

void swift::reflection::UnsupportedEnumTypeInfo::~UnsupportedEnumTypeInfo(swift::reflection::UnsupportedEnumTypeInfo *this)
{
  *(void *)this = &off_CA228;
  uint64_t v2 = *((void *)this + 5);
  if (v2)
  {
    uint64_t v3 = *((void *)this + 6);
    uint64_t v4 = (void *)*((void *)this + 5);
    if (v3 != v2)
    {
      do
      {
        if (*(char *)(v3 - 25) < 0) {
          operator delete(*(void **)(v3 - 48));
        }
        v3 -= 48;
      }
      while (v3 != v2);
      uint64_t v4 = (void *)*((void *)this + 5);
    }
    *((void *)this + 6) = v2;
    operator delete(v4);
  }
}

{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t vars8;

  *(void *)this = &off_CA228;
  uint64_t v2 = *((void *)this + 5);
  if (v2)
  {
    uint64_t v3 = *((void *)this + 6);
    uint64_t v4 = (void *)*((void *)this + 5);
    if (v3 != v2)
    {
      do
      {
        if (*(char *)(v3 - 25) < 0) {
          operator delete(*(void **)(v3 - 48));
        }
        v3 -= 48;
      }
      while (v3 != v2);
      uint64_t v4 = (void *)*((void *)this + 5);
    }
    *((void *)this + 6) = v2;
    operator delete(v4);
  }

  operator delete();
}

uint64_t swift::reflection::UnsupportedEnumTypeInfo::projectEnumValue()
{
  return 0;
}

uint64_t swift::reflection::TrivialEnumTypeInfo::TrivialEnumTypeInfo(uint64_t a1, int a2, uint64_t *a3)
{
  *(_OWORD *)(a1 + 8) = xmmword_C6C30;
  *(_DWORD *)(a1 + 24) = 0;
  *(unsigned char *)(a1 + 28) = 1;
  *(void *)a1 = &off_CA228;
  *(_DWORD *)(a1 + 32) = a2;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 40) = 0;
  uint64_t v4 = *a3;
  uint64_t v5 = a3[1];
  int64_t v6 = v5 - *a3;
  if (v5 != *a3)
  {
    unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * (v6 >> 4);
    if (v7 >= 0x555555555555556) {
      abort();
    }
    uint64_t v8 = (char *)operator new(v6);
    uint64_t v9 = 0;
    *(void *)(a1 + 40) = v8;
    *(void *)(a1 + 48) = v8;
    *(void *)(a1 + 56) = &v8[48 * v7];
    do
    {
      unint64_t v12 = (std::string *)&v8[v9];
      long long v13 = (long long *)(v4 + v9);
      if (*(char *)(v4 + v9 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v12, *(const std::string::value_type **)v13, *((void *)v13 + 1));
      }
      else
      {
        long long v14 = *v13;
        v12->__r_.__value_.__r.__words[2] = *((void *)v13 + 2);
        *(_OWORD *)&v12->__r_.__value_.__l.__data_ = v14;
      }
      uint64_t v10 = &v8[v9];
      long long v11 = *(_OWORD *)(v4 + v9 + 24);
      *((void *)v10 + 5) = *(void *)(v4 + v9 + 40);
      *(_OWORD *)(v10 + 24) = v11;
      v9 += 48;
    }
    while (v4 + v9 != v5);
    *(void *)(a1 + 48) = &v8[v9];
  }
  *(void *)a1 = &off_CA298;
  return a1;
}

uint64_t swift::reflection::TrivialEnumTypeInfo::readExtraInhabitantIndex(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  *a4 = -1;
  return 1;
}

void swift::reflection::TrivialEnumTypeInfo::getSpareBits(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  size_t v3 = *(unsigned int *)(a1 + 12);
  *(_DWORD *)a2 = v3;
  if ((v3 - 134217729) >> 27 == 31)
  {
    uint64_t v5 = malloc_type_malloc(v3, 0x223A25D8uLL);
    uint64_t v4 = v5;
    *(void *)(a2 + 8) = v5;
    if (v5)
    {
      memset(v5, 255, v3);
    }
    else
    {
      size_t v3 = 0;
      *(_DWORD *)a2 = 0;
    }
  }
  else
  {
    size_t v3 = 0;
    uint64_t v4 = 0;
    *(_DWORD *)a2 = 0;
    *(void *)(a2 + 8) = 0;
  }

  bzero(v4, v3);
}

void swift::reflection::TrivialEnumTypeInfo::~TrivialEnumTypeInfo(swift::reflection::TrivialEnumTypeInfo *this)
{
  *(void *)this = &off_CA228;
  uint64_t v2 = *((void *)this + 5);
  if (v2)
  {
    uint64_t v3 = *((void *)this + 6);
    uint64_t v4 = (void *)*((void *)this + 5);
    if (v3 != v2)
    {
      do
      {
        if (*(char *)(v3 - 25) < 0) {
          operator delete(*(void **)(v3 - 48));
        }
        v3 -= 48;
      }
      while (v3 != v2);
      uint64_t v4 = (void *)*((void *)this + 5);
    }
    *((void *)this + 6) = v2;
    operator delete(v4);
  }
}

{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t vars8;

  *(void *)this = &off_CA228;
  uint64_t v2 = *((void *)this + 5);
  if (v2)
  {
    uint64_t v3 = *((void *)this + 6);
    uint64_t v4 = (void *)*((void *)this + 5);
    if (v3 != v2)
    {
      do
      {
        if (*(char *)(v3 - 25) < 0) {
          operator delete(*(void **)(v3 - 48));
        }
        v3 -= 48;
      }
      while (v3 != v2);
      uint64_t v4 = (void *)*((void *)this + 5);
    }
    *((void *)this + 6) = v2;
    operator delete(v4);
  }

  operator delete();
}

uint64_t swift::reflection::TrivialEnumTypeInfo::projectEnumValue(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  *a4 = 0;
  return 1;
}

uint64_t swift::reflection::NoPayloadEnumTypeInfo::NoPayloadEnumTypeInfo(uint64_t a1, int a2, int a3, int a4, int a5, int a6, uint64_t *a7)
{
  *(_DWORD *)(a1 + 8) = 4;
  *(_DWORD *)(a1 + 12) = a2;
  *(_DWORD *)(a1 + 16) = a3;
  *(_DWORD *)(a1 + 20) = a4;
  *(_DWORD *)(a1 + 24) = a5;
  *(unsigned char *)(a1 + 28) = 1;
  *(void *)a1 = &off_CA228;
  *(_DWORD *)(a1 + 32) = a6;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 40) = 0;
  uint64_t v8 = *a7;
  uint64_t v9 = a7[1];
  int64_t v10 = v9 - *a7;
  if (v9 != *a7)
  {
    unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * (v10 >> 4);
    if (v11 >= 0x555555555555556) {
      abort();
    }
    unint64_t v12 = (char *)operator new(v10);
    uint64_t v13 = 0;
    *(void *)(a1 + 40) = v12;
    *(void *)(a1 + 48) = v12;
    *(void *)(a1 + 56) = &v12[48 * v11];
    do
    {
      long long v16 = (std::string *)&v12[v13];
      long long v17 = (long long *)(v8 + v13);
      if (*(char *)(v8 + v13 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v16, *(const std::string::value_type **)v17, *((void *)v17 + 1));
      }
      else
      {
        long long v18 = *v17;
        v16->__r_.__value_.__r.__words[2] = *((void *)v17 + 2);
        *(_OWORD *)&v16->__r_.__value_.__l.__data_ = v18;
      }
      long long v14 = &v12[v13];
      long long v15 = *(_OWORD *)(v8 + v13 + 24);
      *((void *)v14 + 5) = *(void *)(v8 + v13 + 40);
      *(_OWORD *)(v14 + 24) = v15;
      v13 += 48;
    }
    while (v8 + v13 != v9);
    *(void *)(a1 + 48) = &v12[v13];
  }
  *(void *)a1 = &off_CA2D0;
  return a1;
}

uint64_t swift::reflection::NoPayloadEnumTypeInfo::readExtraInhabitantIndex(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  unsigned int v6 = *(_DWORD *)(a1 + 12);
  unsigned int v11 = 0;
  if (v6 >= 4) {
    uint64_t v7 = 4;
  }
  else {
    uint64_t v7 = v6;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, unsigned int *, uint64_t))(*(void *)a2 + 32))(a2, a3, &v11, v7);
  if (result)
  {
    unsigned int v9 = -1431655765 * ((*(void *)(a1 + 48) - *(void *)(a1 + 40)) >> 4);
    int v10 = v11 - v9;
    if (v11 < v9) {
      int v10 = -1;
    }
    *a4 = v10;
  }
  return result;
}

int8x16_t *swift::reflection::NoPayloadEnumTypeInfo::getSpareBits@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  size_t v3 = *(unsigned int *)(a1 + 12);
  unsigned int v4 = -1431655765 * ((*(void *)(a1 + 48) - *(void *)(a1 + 40)) >> 4) - 1;
  unsigned int v5 = v4 | HIWORD(v4) | ((v4 | HIWORD(v4)) >> 8);
  unsigned int v6 = v5 | (v5 >> 4) | ((v5 | (v5 >> 4)) >> 2);
  uint64_t __src = v6 | (v6 >> 1);
  *(_DWORD *)a2 = v3;
  uint64_t result = (int8x16_t *)malloc_type_calloc(1uLL, v3, 0xE41FC33AuLL);
  *(void *)(a2 + 8) = result;
  if (!result)
  {
    *(_DWORD *)a2 = 0;
    return result;
  }
  uint64_t v8 = result;
  if (v3 >= 8) {
    size_t v9 = 8;
  }
  else {
    size_t v9 = v3;
  }
  uint64_t result = (int8x16_t *)memcpy(result, &__src, v9);
  if (v3)
  {
    if (v3 < 8)
    {
      uint64_t v10 = 0;
      goto LABEL_18;
    }
    if (v3 >= 0x20)
    {
      uint64_t v10 = v3 & 0xFFFFFFE0;
      unsigned int v11 = v8 + 1;
      uint64_t v12 = v10;
      do
      {
        int8x16_t v13 = vmvnq_s8(*v11);
        v11[-1] = vmvnq_s8(v11[-1]);
        *unsigned int v11 = v13;
        v11 += 2;
        v12 -= 32;
      }
      while (v12);
      if (v10 == v3) {
        return result;
      }
      if ((v3 & 0x18) == 0)
      {
LABEL_18:
        size_t v17 = v3 - v10;
        long long v18 = &v8->i8[v10];
        do
        {
          __int8 *v18 = ~*v18;
          ++v18;
          --v17;
        }
        while (v17);
        return result;
      }
    }
    else
    {
      uint64_t v10 = 0;
    }
    uint64_t v14 = v10;
    uint64_t v10 = v3 & 0xFFFFFFF8;
    long long v15 = (int8x8_t *)&v8->i8[v14];
    uint64_t v16 = v14 - v10;
    do
    {
      int8x8_t *v15 = vmvn_s8(*v15);
      ++v15;
      v16 += 8;
    }
    while (v16);
    if (v10 != v3) {
      goto LABEL_18;
    }
  }
  return result;
}

void swift::reflection::NoPayloadEnumTypeInfo::~NoPayloadEnumTypeInfo(swift::reflection::NoPayloadEnumTypeInfo *this)
{
  *(void *)this = &off_CA228;
  uint64_t v2 = *((void *)this + 5);
  if (v2)
  {
    uint64_t v3 = *((void *)this + 6);
    unsigned int v4 = (void *)*((void *)this + 5);
    if (v3 != v2)
    {
      do
      {
        if (*(char *)(v3 - 25) < 0) {
          operator delete(*(void **)(v3 - 48));
        }
        v3 -= 48;
      }
      while (v3 != v2);
      unsigned int v4 = (void *)*((void *)this + 5);
    }
    *((void *)this + 6) = v2;
    operator delete(v4);
  }
}

{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t vars8;

  *(void *)this = &off_CA228;
  uint64_t v2 = *((void *)this + 5);
  if (v2)
  {
    uint64_t v3 = *((void *)this + 6);
    unsigned int v4 = (void *)*((void *)this + 5);
    if (v3 != v2)
    {
      do
      {
        if (*(char *)(v3 - 25) < 0) {
          operator delete(*(void **)(v3 - 48));
        }
        v3 -= 48;
      }
      while (v3 != v2);
      unsigned int v4 = (void *)*((void *)this + 5);
    }
    *((void *)this + 6) = v2;
    operator delete(v4);
  }

  operator delete();
}

uint64_t swift::reflection::NoPayloadEnumTypeInfo::projectEnumValue(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int *a4)
{
  unsigned int v6 = *(_DWORD *)(a1 + 12);
  int v14 = 0;
  if (v6 >= 4) {
    uint64_t v7 = 4;
  }
  else {
    uint64_t v7 = v6;
  }
  int v8 = (*(uint64_t (**)(uint64_t, uint64_t, int *, uint64_t))(*(void *)a2 + 32))(a2, a3, &v14, v7);
  uint64_t result = 0;
  if (v8)
  {
    unsigned int v10 = -1431655765 * ((*(void *)(a1 + 48) - *(void *)(a1 + 40)) >> 4);
    unsigned int v11 = (v10 - 1) | ((v10 - 1) >> 16) | (((v10 - 1) | ((v10 - 1) >> 16)) >> 8);
    unsigned int v12 = v11 | (v11 >> 4) | ((v11 | (v11 >> 4)) >> 2);
    unsigned int v13 = (v12 | (v12 >> 1)) & v14;
    if (v13 >= v10)
    {
      return 0;
    }
    else
    {
      *a4 = v13;
      return 1;
    }
  }
  return result;
}

uint64_t swift::reflection::SinglePayloadEnumTypeInfo::readExtraInhabitantIndex(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  int v8 = *(long long **)(a1 + 40);
  if (*((char *)v8 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v8, *((void *)v8 + 1));
  }
  else
  {
    long long v9 = *v8;
    __p.__r_.__value_.__r.__words[2] = *((void *)v8 + 2);
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v9;
  }
  long long v10 = *(long long *)((char *)v8 + 24);
  uint64_t v11 = *((void *)v8 + 5);
  uint64_t v20 = v11;
  long long v19 = v10;
  if (*(_DWORD *)(a1 + 12) >= *(_DWORD *)(v11 + 12))
  {
    int v12 = -1431655765 * ((*(void *)(a1 + 48) - *(void *)(a1 + 40)) >> 4);
    unsigned int v13 = v12 - 1;
    if (v12 == 1)
    {
      int v14 = -1;
      goto LABEL_14;
    }
    if ((**(unsigned int (***)(uint64_t, uint64_t, uint64_t, int *))v11)(v11, a2, a3, a4))
    {
      if (*a4 < v13 || *a4 < 0) {
        int v14 = -1;
      }
      else {
        int v14 = *a4 - v13;
      }
LABEL_14:
      *a4 = v14;
      uint64_t v16 = 1;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        goto LABEL_17;
      }
      return v16;
    }
  }
  uint64_t v16 = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
LABEL_17:
  }
    operator delete(__p.__r_.__value_.__l.__data_);
  return v16;
}

void swift::reflection::SinglePayloadEnumTypeInfo::getSpareBits(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unsigned int v4 = *(long long **)(a1 + 40);
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v4, *((void *)v4 + 1));
  }
  else
  {
    long long v5 = *v4;
    __p.__r_.__value_.__r.__words[2] = *((void *)v4 + 2);
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v5;
  }
  long long v6 = *(long long *)((char *)v4 + 24);
  uint64_t v25 = *((void *)v4 + 5);
  long long v24 = v6;
  unsigned int v7 = *(_DWORD *)(v25 + 12);
  size_t v8 = *(unsigned int *)(a1 + 12);
  if (v8 <= v7)
  {
    *(_DWORD *)a2 = v8;
    if ((v8 - 134217729) >> 27 == 31)
    {
      uint64_t v11 = malloc_type_malloc(v8, 0x223A25D8uLL);
      long long v9 = v11;
      *(void *)(a2 + 8) = v11;
      if (v11)
      {
        memset(v11, 255, v8);
      }
      else
      {
        size_t v8 = 0;
        *(_DWORD *)a2 = 0;
      }
    }
    else
    {
      size_t v8 = 0;
      long long v9 = 0;
      *(_DWORD *)a2 = 0;
      *(void *)(a2 + 8) = 0;
    }
    bzero(v9, v8);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
LABEL_31:
    }
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    *(_DWORD *)a2 = v8;
    if ((v8 - 134217729) >> 27 == 31)
    {
      long long v10 = malloc_type_malloc(v8, 0x223A25D8uLL);
      *(void *)(a2 + 8) = v10;
      if (v10) {
        memset(v10, 255, v8);
      }
      else {
        *(_DWORD *)a2 = 0;
      }
    }
    else
    {
      *(_DWORD *)a2 = 0;
      *(void *)(a2 + 8) = 0;
    }
    swift::reflection::BitMask::keepOnlyMostSignificantBits(a2, 8 * (v8 - v7));
    size_t v12 = *(unsigned int *)(a1 + 12);
    unsigned int v13 = -1431655765 * ((*(void *)(a1 + 48) - *(void *)(a1 + 40)) >> 4) - 1;
    unsigned int v14 = v13 | HIWORD(v13) | ((v13 | HIWORD(v13)) >> 8);
    unsigned int v15 = v14 | (v14 >> 4) | ((v14 | (v14 >> 4)) >> 2);
    uint64_t __src = v15 | (v15 >> 1);
    uint64_t v16 = malloc_type_calloc(1uLL, v12, 0xE41FC33AuLL);
    size_t v17 = v16;
    if (v16)
    {
      if (v12 >= 8) {
        size_t v18 = 8;
      }
      else {
        size_t v18 = v12;
      }
      memcpy(v16, &__src, v18);
    }
    else
    {
      LODWORD(v12) = 0;
    }
    long long v19 = malloc_type_malloc(v12, 0x46DD872BuLL);
    memcpy(v19, v17, v12);
    LODWORD(v20) = *(_DWORD *)a2 - v7;
    if (*(_DWORD *)a2 > v7)
    {
      if (v20 >= v12) {
        uint64_t v20 = v12;
      }
      else {
        uint64_t v20 = v20;
      }
      if (v20)
      {
        uint32x2_t v21 = (char *)v19;
        do
        {
          char v22 = *v21++;
          *(unsigned char *)(*(void *)(a2 + 8) + v7++) &= ~v22;
          --v20;
        }
        while (v20);
      }
    }
    free(v19);
    free(v17);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      goto LABEL_31;
    }
  }
}

void swift::reflection::SinglePayloadEnumTypeInfo::~SinglePayloadEnumTypeInfo(swift::reflection::SinglePayloadEnumTypeInfo *this)
{
  *(void *)this = &off_CA228;
  uint64_t v2 = *((void *)this + 5);
  if (v2)
  {
    uint64_t v3 = *((void *)this + 6);
    unsigned int v4 = (void *)*((void *)this + 5);
    if (v3 != v2)
    {
      do
      {
        if (*(char *)(v3 - 25) < 0) {
          operator delete(*(void **)(v3 - 48));
        }
        v3 -= 48;
      }
      while (v3 != v2);
      unsigned int v4 = (void *)*((void *)this + 5);
    }
    *((void *)this + 6) = v2;
    operator delete(v4);
  }
}

{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t vars8;

  *(void *)this = &off_CA228;
  uint64_t v2 = *((void *)this + 5);
  if (v2)
  {
    uint64_t v3 = *((void *)this + 6);
    unsigned int v4 = (void *)*((void *)this + 5);
    if (v3 != v2)
    {
      do
      {
        if (*(char *)(v3 - 25) < 0) {
          operator delete(*(void **)(v3 - 48));
        }
        v3 -= 48;
      }
      while (v3 != v2);
      unsigned int v4 = (void *)*((void *)this + 5);
    }
    *((void *)this + 6) = v2;
    operator delete(v4);
  }

  operator delete();
}

uint64_t swift::reflection::SinglePayloadEnumTypeInfo::projectEnumValue(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int *a4)
{
  size_t v8 = *(long long **)(a1 + 40);
  if (*((char *)v8 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v25, *(const std::string::value_type **)v8, *((void *)v8 + 1));
  }
  else
  {
    long long v9 = *v8;
    v25.__r_.__value_.__r.__words[2] = *((void *)v8 + 2);
    *(_OWORD *)&v25.__r_.__value_.__l.__data_ = v9;
  }
  long long v10 = *(long long *)((char *)v8 + 24);
  uint64_t v11 = *((void *)v8 + 5);
  uint64_t v27 = v11;
  long long v26 = v10;
  unint64_t v12 = *(unsigned int *)(v11 + 12);
  int v13 = *(_DWORD *)(a1 + 12);
  int v24 = 0;
  if (v13 == v12) {
    goto LABEL_5;
  }
  unsigned int v18 = v13 - v12;
  if (v18 >= 4) {
    uint64_t v19 = 4;
  }
  else {
    uint64_t v19 = v18;
  }
  if (!(*(unsigned int (**)(uint64_t, unint64_t, int *, uint64_t))(*(void *)a2 + 32))(a2, v12 + a3, &v24, v19))
  {
LABEL_27:
    uint64_t v15 = 0;
    if ((SHIBYTE(v25.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return v15;
    }
    goto LABEL_10;
  }
  uint64_t v11 = v27;
  if (v24)
  {
    int v20 = *(_DWORD *)(v27 + 24);
    int v23 = 0;
    if (v12 >= 4) {
      uint64_t v21 = 4;
    }
    else {
      uint64_t v21 = v12;
    }
    if ((*(unsigned int (**)(uint64_t, uint64_t, int *, uint64_t))(*(void *)a2 + 32))(a2, a3, &v23, v21))
    {
      uint64_t v22 = 1 << (8 * v12);
      if (v12 > 3) {
        LODWORD(v22) = 0x7FFFFFFF;
      }
      unsigned int v16 = v20 + v23 + (v24 - 1) * v22 + 1;
LABEL_24:
      if (v16 >= -1431655765 * ((*(void *)(a1 + 48) - *(void *)(a1 + 40)) >> 4))
      {
        uint64_t v15 = 0;
        *a4 = -1;
        if ((SHIBYTE(v25.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          return v15;
        }
      }
      else
      {
        *a4 = v16;
        uint64_t v15 = 1;
        if ((SHIBYTE(v25.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          return v15;
        }
      }
      goto LABEL_10;
    }
    goto LABEL_27;
  }
LABEL_5:
  int v23 = 0;
  char v14 = (**(uint64_t (***)(uint64_t, uint64_t, uint64_t, int *))v11)(v11, a2, a3, &v23);
  uint64_t v15 = 0;
  if (v23 >= 0) {
    unsigned int v16 = v23 + 1;
  }
  else {
    unsigned int v16 = 0;
  }
  if (v14) {
    goto LABEL_24;
  }
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
LABEL_10:
  }
    operator delete(v25.__r_.__value_.__l.__data_);
  return v15;
}

uint64_t swift::reflection::TaggedMultiPayloadEnumTypeInfo::readExtraInhabitantIndex(swift::reflection::EnumTypeInfo *this, uint64_t a2, uint64_t a3, int *a4)
{
  size_t v8 = (long long *)*((void *)this + 5);
  long long v9 = (long long *)*((void *)this + 6);
  if (v8 == v9)
  {
    unsigned int v10 = 0;
  }
  else
  {
    unsigned int v10 = 0;
    do
    {
      if (*((char *)v8 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v8, *((void *)v8 + 1));
      }
      else
      {
        long long v11 = *v8;
        __p.__r_.__value_.__r.__words[2] = *((void *)v8 + 2);
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v11;
      }
      long long v12 = *(long long *)((char *)v8 + 24);
      uint64_t v21 = *((void *)v8 + 5);
      long long v20 = v12;
      if (*((void *)&v12 + 1) && *(_DWORD *)(v21 + 12) > v10) {
        unsigned int v10 = *(_DWORD *)(v21 + 12);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      v8 += 3;
    }
    while (v8 != v9);
  }
  int NumPayloadCases = swift::reflection::EnumTypeInfo::getNumPayloadCases(this);
  uint64_t v14 = *((unsigned int *)this + 3);
  LODWORD(__p.__r_.__value_.__l.__data_) = 0;
  if (v14 - (unint64_t)v10 >= 4) {
    uint64_t v15 = 4;
  }
  else {
    uint64_t v15 = v14 - v10;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, std::string *, uint64_t))(*(void *)a2 + 32))(a2, v10 + a3, &__p, v15);
  if (result)
  {
    if (v14 - v10 <= 3) {
      int v17 = ~(-1 << (8 * (v14 - v10)));
    }
    else {
      int v17 = -1;
    }
    int v18 = v17 - LODWORD(__p.__r_.__value_.__l.__data_);
    if (LODWORD(__p.__r_.__value_.__l.__data_) < NumPayloadCases + 1) {
      int v18 = -1;
    }
    *a4 = v18;
  }
  return result;
}

void swift::reflection::TaggedMultiPayloadEnumTypeInfo::getSpareBits(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unsigned int v4 = *(long long **)(a1 + 40);
  for (int i = *(long long **)(a1 + 48); v4 != i; v4 += 3)
  {
    if (*((char *)v4 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v12, *(const std::string::value_type **)v4, *((void *)v4 + 1));
    }
    else
    {
      long long v6 = *v4;
      v12.__r_.__value_.__r.__words[2] = *((void *)v4 + 2);
      *(_OWORD *)&v12.__r_.__value_.__l.__data_ = v6;
    }
    long long v7 = *(long long *)((char *)v4 + 24);
    uint64_t v14 = *((void *)v4 + 5);
    long long v13 = v7;
    if (*((void *)&v7 + 1))
    {
      (*(void (**)(void **__return_ptr))(*(void *)v14 + 8))(v11);
      free(v11[1]);
    }
    if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v12.__r_.__value_.__l.__data_);
    }
  }
  size_t v8 = *(unsigned int *)(a1 + 12);
  *(_DWORD *)a2 = v8;
  if ((v8 - 134217729) >> 27 == 31)
  {
    unsigned int v10 = malloc_type_malloc(v8, 0x223A25D8uLL);
    long long v9 = v10;
    *(void *)(a2 + 8) = v10;
    if (v10)
    {
      memset(v10, 255, v8);
    }
    else
    {
      size_t v8 = 0;
      *(_DWORD *)a2 = 0;
    }
  }
  else
  {
    size_t v8 = 0;
    long long v9 = 0;
    *(_DWORD *)a2 = 0;
    *(void *)(a2 + 8) = 0;
  }
  bzero(v9, v8);
}

void swift::reflection::TaggedMultiPayloadEnumTypeInfo::~TaggedMultiPayloadEnumTypeInfo(swift::reflection::TaggedMultiPayloadEnumTypeInfo *this)
{
  *(void *)this = &off_CA228;
  uint64_t v2 = *((void *)this + 5);
  if (v2)
  {
    uint64_t v3 = *((void *)this + 6);
    unsigned int v4 = (void *)*((void *)this + 5);
    if (v3 != v2)
    {
      do
      {
        if (*(char *)(v3 - 25) < 0) {
          operator delete(*(void **)(v3 - 48));
        }
        v3 -= 48;
      }
      while (v3 != v2);
      unsigned int v4 = (void *)*((void *)this + 5);
    }
    *((void *)this + 6) = v2;
    operator delete(v4);
  }
}

{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t vars8;

  *(void *)this = &off_CA228;
  uint64_t v2 = *((void *)this + 5);
  if (v2)
  {
    uint64_t v3 = *((void *)this + 6);
    unsigned int v4 = (void *)*((void *)this + 5);
    if (v3 != v2)
    {
      do
      {
        if (*(char *)(v3 - 25) < 0) {
          operator delete(*(void **)(v3 - 48));
        }
        v3 -= 48;
      }
      while (v3 != v2);
      unsigned int v4 = (void *)*((void *)this + 5);
    }
    *((void *)this + 6) = v2;
    operator delete(v4);
  }

  operator delete();
}

uint64_t swift::reflection::TaggedMultiPayloadEnumTypeInfo::projectEnumValue(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int *a4)
{
  long long v9 = *(long long **)(a1 + 40);
  size_t v8 = *(long long **)(a1 + 48);
  if (v9 == v8)
  {
    unsigned int v10 = 0;
    uint64_t v13 = *(void *)(a1 + 40);
  }
  else
  {
    unsigned int v10 = 0;
    do
    {
      if (*((char *)v9 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v25, *(const std::string::value_type **)v9, *((void *)v9 + 1));
      }
      else
      {
        long long v11 = *v9;
        v25.__r_.__value_.__r.__words[2] = *((void *)v9 + 2);
        *(_OWORD *)&v25.__r_.__value_.__l.__data_ = v11;
      }
      long long v12 = *(long long *)((char *)v9 + 24);
      uint64_t v27 = *((void *)v9 + 5);
      long long v26 = v12;
      if (*((void *)&v12 + 1) && *(_DWORD *)(v27 + 12) > v10) {
        unsigned int v10 = *(_DWORD *)(v27 + 12);
      }
      if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v25.__r_.__value_.__l.__data_);
      }
      v9 += 3;
    }
    while (v9 != v8);
    long long v9 = *(long long **)(a1 + 40);
    uint64_t v13 = *(void *)(a1 + 48);
  }
  uint64_t v14 = v10;
  unsigned int v15 = *(_DWORD *)(a1 + 64);
  uint64_t v16 = *(unsigned int *)(a1 + 12);
  LODWORD(v25.__r_.__value_.__l.__data_) = 0;
  if (v16 - (unint64_t)v10 >= 4) {
    uint64_t v17 = 4;
  }
  else {
    uint64_t v17 = v16 - v10;
  }
  int v18 = (*(uint64_t (**)(uint64_t, uint64_t, std::string *, uint64_t))(*(void *)a2 + 32))(a2, v10 + a3, &v25, v17);
  uint64_t result = 0;
  if (v18)
  {
    unsigned int data = v25.__r_.__value_.__l.__data_;
    if (((uint64_t)v25.__r_.__value_.__l.__data_ & 0x80000000) == 0)
    {
      if (LODWORD(v25.__r_.__value_.__l.__data_) < v15)
      {
LABEL_20:
        *a4 = data;
        return 1;
      }
      if (v10 < 4)
      {
        unsigned int v22 = -1431655765 * ((unint64_t)(v13 - (void)v9) >> 4);
        unsigned int v23 = ~(-1 << (8 * (v16 - v10)));
        if (LODWORD(v25.__r_.__value_.__l.__data_) <= (v22 - v15) / v23 + v15)
        {
          int v24 = 0;
          if ((*(unsigned int (**)(uint64_t, uint64_t, int *, uint64_t))(*(void *)a2 + 32))(a2, a3, &v24, v14))
          {
            unsigned int data = v24 + v15 + (LODWORD(v25.__r_.__value_.__l.__data_) - v15) * v23;
            if (data < v22) {
              goto LABEL_20;
            }
          }
        }
      }
      else if (LODWORD(v25.__r_.__value_.__l.__data_) <= v15)
      {
        int v24 = 0;
        uint64_t v21 = v10 >= 4uLL ? 4 : v10;
        if ((*(unsigned int (**)(uint64_t, uint64_t, int *, uint64_t))(*(void *)a2 + 32))(a2, a3, &v24, v21))
        {
          unsigned int data = v24 + v15;
          if (v24 + v15 < -1431655765 * ((*(void *)(a1 + 48) - *(void *)(a1 + 40)) >> 4)) {
            goto LABEL_20;
          }
        }
      }
    }
    return 0;
  }
  return result;
}

uint64_t swift::reflection::EnumTypeInfo::getNumPayloadCases(swift::reflection::EnumTypeInfo *this)
{
  uint64_t v1 = *((void *)this + 5);
  uint64_t v2 = *((void *)this + 6);
  int64_t v3 = v2 - v1;
  if (v2 == v1) {
    return 0;
  }
  if (0xAAAAAAAAAAAAAAABLL * (v3 >> 4) >= 0x555555555555556) {
    abort();
  }
  unsigned int v4 = (int64x2_t *)operator new(v3);
  unint64_t v5 = 0;
  do
  {
    size_t v8 = (long long *)(v1 + v5);
    long long v9 = (std::string *)&v4[v5 / 0x10];
    if (*(char *)(v1 + v5 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)v8, *((void *)v8 + 1));
    }
    else
    {
      long long v10 = *v8;
      v9->__r_.__value_.__r.__words[2] = *((void *)v8 + 2);
      *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v10;
    }
    long long v6 = &v4[v5 / 0x10];
    int64x2_t v7 = *(int64x2_t *)(v1 + v5 + 24);
    v6[2].i64[1] = *(void *)(v1 + v5 + 40);
    *(int64x2_t *)((char *)v6 + 24) = v7;
    v5 += 48;
  }
  while (v1 + v5 != v2);
  if (v5)
  {
    uint64_t v11 = 3 * ((uint64_t)v5 / 48);
    if ((unint64_t)(v11 * 16 - 48) >= 0x180)
    {
      unint64_t v15 = (v11 * 16 - 48) / 0x30uLL + 1;
      uint64_t v16 = v15 & 7;
      if ((v15 & 7) == 0) {
        uint64_t v16 = 8;
      }
      unint64_t v17 = v15 - v16;
      uint64_t v13 = &v4[3 * v17];
      int v18 = v4 + 14;
      int32x4_t v19 = 0uLL;
      int32x4_t v20 = 0uLL;
      do
      {
        int32x4_t v19 = vsubq_s32(v19, (int32x4_t)vmvnq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vceqzq_s64(vzip1q_s64(v18[-12], v18[-9])), (int32x4_t)vceqzq_s64(vzip1q_s64(v18[-6], v18[-3])))));
        int32x4_t v20 = vsubq_s32(v20, (int32x4_t)vmvnq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vceqzq_s64(vzip1q_s64(*v18, v18[3])), (int32x4_t)vceqzq_s64(vzip1q_s64(v18[6], v18[9])))));
        v18 += 24;
        v17 -= 8;
      }
      while (v17);
      LODWORD(v12) = vaddvq_s32(vaddq_s32(v20, v19));
    }
    else
    {
      LODWORD(v12) = 0;
      uint64_t v13 = v4;
    }
    do
    {
      if (v13[2].i64[0]) {
        uint64_t v12 = (v12 + 1);
      }
      else {
        uint64_t v12 = v12;
      }
      v13 += 3;
    }
    while (v13 != &v4[3 * ((uint64_t)v5 / 48)]);
    do
    {
      if (*((char *)&v4[v11 - 1] - 9) < 0) {
        operator delete((void *)v4[v11 - 3].i64[0]);
      }
      v11 -= 3;
    }
    while (v11 * 16);
  }
  else
  {
    uint64_t v12 = 0;
  }
  operator delete(v4);
  return v12;
}

uint64_t swift::reflection::MultiPayloadEnumTypeInfo::readExtraInhabitantIndex(swift::reflection::MultiPayloadEnumTypeInfo *this, uint64_t a2, uint64_t a3, int *a4)
{
  size_t v8 = (long long *)*((void *)this + 5);
  long long v9 = (long long *)*((void *)this + 6);
  if (v8 == v9)
  {
    unsigned int v10 = 0;
  }
  else
  {
    unsigned int v10 = 0;
    do
    {
      if (*((char *)v8 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v95, *(const std::string::value_type **)v8, *((void *)v8 + 1));
      }
      else
      {
        long long v11 = *v8;
        v95.__r_.__value_.__r.__words[2] = *((void *)v8 + 2);
        *(_OWORD *)&v95.__r_.__value_.__l.__data_ = v11;
      }
      long long v12 = *(long long *)((char *)v8 + 24);
      uint64_t v97 = *((void *)v8 + 5);
      long long v96 = v12;
      if (*((void *)&v12 + 1) && *(_DWORD *)(v97 + 12) > v10) {
        unsigned int v10 = *(_DWORD *)(v97 + 12);
      }
      if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v95.__r_.__value_.__l.__data_);
      }
      v8 += 3;
    }
    while (v8 != v9);
  }
  swift::reflection::MultiPayloadEnumTypeInfo::getMultiPayloadTagBitsMask(this, (uint64_t)&size);
  if (!size)
  {
    unsigned int v14 = 0;
    goto LABEL_22;
  }
  if (size == 1)
  {
    uint64_t v13 = 0;
    unsigned int v14 = 0;
LABEL_20:
    uint64_t v21 = size - v13;
    unsigned int v22 = (unsigned __int8 *)__src + v13;
    do
    {
      unsigned int v23 = *v22++;
      v14 += *(_DWORD *)((char *)swift::reflection::BitMask::countSetBits(void)const::counter
                       + (((unint64_t)v23 >> 2) & 0x3C))
           + swift::reflection::BitMask::countSetBits(void)const::counter[v23 & 0xF];
      --v21;
    }
    while (v21);
    goto LABEL_22;
  }
  int v15 = 0;
  int v16 = 0;
  uint64_t v13 = size & 0xFFFFFFFE;
  unint64_t v17 = (unsigned __int8 *)__src + 1;
  uint64_t v18 = v13;
  do
  {
    unint64_t v19 = *(v17 - 1);
    unsigned int v20 = *v17;
    v17 += 2;
    v15 += *(_DWORD *)((char *)swift::reflection::BitMask::countSetBits(void)const::counter + ((v19 >> 2) & 0x3C))
         + swift::reflection::BitMask::countSetBits(void)const::counter[v19 & 0xF];
    v16 += *(_DWORD *)((char *)swift::reflection::BitMask::countSetBits(void)const::counter
                     + (((unint64_t)v20 >> 2) & 0x3C))
         + swift::reflection::BitMask::countSetBits(void)const::counter[v20 & 0xF];
    v18 -= 2;
  }
  while (v18);
  unsigned int v14 = v16 + v15;
  if (v13 != size) {
    goto LABEL_20;
  }
LABEL_22:
  int v92 = 0;
  uint64_t v24 = 0;
  if (swift::reflection::BitMask::readMaskedInteger<unsigned int>((unsigned int *)&size, a2, a3, &v92))
  {
    uint64_t v88 = a3;
    uint64_t v89 = a2;
    std::string v25 = a4;
    int v26 = v92;
    unsigned int v90 = *((_DWORD *)this + 16);
    unsigned int v27 = v90;
    unsigned int v28 = (int8x16_t *)malloc_type_malloc(v90, 0x46DD872BuLL);
    unint64_t v91 = v28;
    memcpy(v28, *((const void **)this + 9), v90);
    unsigned int v30 = (long long *)*((void *)this + 5);
    unsigned int v29 = (long long *)*((void *)this + 6);
    int v87 = v26;
    for (unsigned int i = 0; v30 != v29; v30 += 3)
    {
      if (*((char *)v30 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v95, *(const std::string::value_type **)v30, *((void *)v30 + 1));
      }
      else
      {
        long long v32 = *v30;
        v95.__r_.__value_.__r.__words[2] = *((void *)v30 + 2);
        *(_OWORD *)&v95.__r_.__value_.__l.__data_ = v32;
      }
      long long v33 = *(long long *)((char *)v30 + 24);
      uint64_t v97 = *((void *)v30 + 5);
      long long v96 = v33;
      if (*((void *)&v33 + 1) && *(_DWORD *)(v97 + 12) > i) {
        unsigned int i = *(_DWORD *)(v97 + 12);
      }
      if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v95.__r_.__value_.__l.__data_);
      }
    }
    if (v90 > i)
    {
      unsigned int v90 = i;
      unsigned int v27 = i;
    }
    size_t v34 = size;
    uint64_t v35 = (int8x16_t *)malloc_type_malloc(size, 0x46DD872BuLL);
    memcpy(v35, __src, v34);
    if (!v27)
    {
      free(v35);
      unsigned int v38 = v25;
      uint64_t v40 = v88;
      uint64_t v39 = v89;
      goto LABEL_60;
    }
    if (v27 >= v34) {
      uint64_t v36 = v34;
    }
    else {
      uint64_t v36 = v27;
    }
    if (!v36)
    {
      free(v35);
      unsigned int v38 = v25;
      uint64_t v40 = v88;
      uint64_t v39 = v89;
LABEL_50:
      if (v27 >= 2)
      {
        int v47 = 0;
        int v48 = 0;
        uint64_t v45 = v27 & 0xFFFFFFFE;
        uint64_t v49 = &v28->u8[1];
        uint64_t v50 = v45;
        do
        {
          unint64_t v51 = *(v49 - 1);
          unsigned int v52 = *v49;
          v49 += 2;
          v47 += *(_DWORD *)((char *)swift::reflection::BitMask::countSetBits(void)const::counter + ((v51 >> 2) & 0x3C))
               + swift::reflection::BitMask::countSetBits(void)const::counter[v51 & 0xF];
          v48 += *(_DWORD *)((char *)swift::reflection::BitMask::countSetBits(void)const::counter
                           + (((unint64_t)v52 >> 2) & 0x3C))
               + swift::reflection::BitMask::countSetBits(void)const::counter[v52 & 0xF];
          v50 -= 2;
        }
        while (v50);
        int v46 = v48 + v47;
        if (v45 == v27)
        {
LABEL_57:
          if (v46 >= 1)
          {
            LODWORD(v95.__r_.__value_.__l.__data_) = 0;
            uint64_t v24 = 0;
            if (!swift::reflection::BitMask::readMaskedInteger<unsigned int>(&v90, v39, v40, &v95)) {
              goto LABEL_87;
            }
            v87 |= LODWORD(v95.__r_.__value_.__l.__data_) << v14;
            v14 += v46;
          }
LABEL_60:
          int data = 0;
          uint64_t v57 = *((unsigned int *)this + 3);
          unint64_t v58 = v57 - v10;
          LODWORD(v95.__r_.__value_.__l.__data_) = 0;
          if (v10 == v57 || v14 > 0x1F)
          {
LABEL_67:
            unsigned int v60 = (data << v14) | v87;
            unsigned int NumPayloadCases = swift::reflection::EnumTypeInfo::getNumPayloadCases(this);
            if (NumPayloadCases == -1431655765 * ((*((void *)this + 6) - *((void *)this + 5)) >> 4))
            {
LABEL_81:
              int v75 = -1;
              if (v60 >= NumPayloadCases)
              {
                if (v14 + 8 * v58 <= 0x1F) {
                  unsigned int v76 = ~(-1 << (v14 + 8 * v58));
                }
                else {
                  unsigned int v76 = -1;
                }
                int v75 = v76 - v60;
              }
              *unsigned int v38 = v75;
              uint64_t v24 = 1;
              goto LABEL_87;
            }
            uint64_t v62 = *((unsigned int *)this + 16);
            if (v62)
            {
              uint64_t v63 = *((void *)this + 9);
              if (v62 == 1)
              {
                uint64_t v64 = 0;
                int v65 = 0;
              }
              else
              {
                int v66 = 0;
                int v67 = 0;
                uint64_t v64 = v62 & 0xFFFFFFFE;
                unint64_t v68 = (unsigned __int8 *)(v63 + 1);
                uint64_t v69 = v64;
                do
                {
                  unint64_t v70 = *(v68 - 1);
                  unsigned int v71 = *v68;
                  v68 += 2;
                  v66 += *(_DWORD *)((char *)swift::reflection::BitMask::countSetBits(void)const::counter
                                   + ((v70 >> 2) & 0x3C))
                       + swift::reflection::BitMask::countSetBits(void)const::counter[v70 & 0xF];
                  v67 += *(_DWORD *)((char *)swift::reflection::BitMask::countSetBits(void)const::counter
                                   + (((unint64_t)v71 >> 2) & 0x3C))
                       + swift::reflection::BitMask::countSetBits(void)const::counter[v71 & 0xF];
                  v69 -= 2;
                }
                while (v69);
                int v65 = v67 + v66;
                if (v64 == v62) {
                  goto LABEL_80;
                }
              }
              uint64_t v72 = v62 - v64;
              uint64_t v73 = (unsigned __int8 *)(v63 + v64);
              do
              {
                unsigned int v74 = *v73++;
                v65 += *(_DWORD *)((char *)swift::reflection::BitMask::countSetBits(void)const::counter
                                 + (((unint64_t)v74 >> 2) & 0x3C))
                     + swift::reflection::BitMask::countSetBits(void)const::counter[v74 & 0xF];
                --v72;
              }
              while (v72);
            }
            else
            {
              LOBYTE(v65) = 0;
            }
LABEL_80:
            NumPayloadCases += (~NumPayloadCases
                              - 1431655765 * ((*((void *)this + 6) - *((void *)this + 5)) >> 4)
                              + (1 << (8 * v62 - v65))) >> (8 * v62 - v65);
            goto LABEL_81;
          }
          if (v58 >= 4) {
            uint64_t v59 = 4;
          }
          else {
            uint64_t v59 = v57 - v10;
          }
          if ((*(unsigned int (**)(uint64_t, uint64_t, std::string *, uint64_t))(*(void *)v39 + 32))(v39, v10 + v40, &v95, v59))
          {
            int data = (int)v95.__r_.__value_.__l.__data_;
            goto LABEL_67;
          }
          uint64_t v24 = 0;
LABEL_87:
          free(v91);
          goto LABEL_88;
        }
      }
      else
      {
        uint64_t v45 = 0;
        int v46 = 0;
      }
      uint64_t v53 = v27 - v45;
      size_t v54 = &v28->u8[v45];
      do
      {
        unsigned int v55 = *v54++;
        v46 += *(_DWORD *)((char *)swift::reflection::BitMask::countSetBits(void)const::counter
                         + (((unint64_t)v55 >> 2) & 0x3C))
             + swift::reflection::BitMask::countSetBits(void)const::counter[v55 & 0xF];
        --v53;
      }
      while (v53);
      goto LABEL_57;
    }
    if (v36 < 8 || v28 < (int8x16_t *)&v35->i8[v36] && v35 < (int8x16_t *)&v28->i8[v36])
    {
      uint64_t v37 = 0;
      unsigned int v38 = v25;
      uint64_t v40 = v88;
      uint64_t v39 = v89;
LABEL_45:
      unsigned int v41 = &v28->i8[v37];
      uint64_t v42 = v36 - v37;
      unsigned int v43 = &v35->i8[v37];
      do
      {
        char v44 = *v43++;
        *v41++ &= ~v44;
        --v42;
      }
      while (v42);
LABEL_47:
      free(v35);
      goto LABEL_50;
    }
    if (v36 >= 0x20)
    {
      uint64_t v37 = v36 & 0xFFFFFFE0;
      uint64_t v78 = v35 + 1;
      char v79 = v28 + 1;
      uint64_t v80 = v37;
      unsigned int v38 = v25;
      uint64_t v40 = v88;
      do
      {
        int8x16_t v81 = vbicq_s8(*v79, *v78);
        v79[-1] = vbicq_s8(v79[-1], v78[-1]);
        *char v79 = v81;
        v78 += 2;
        v79 += 2;
        v80 -= 32;
      }
      while (v80);
      uint64_t v39 = v89;
      if (v37 == v36) {
        goto LABEL_47;
      }
      if ((v36 & 0x18) == 0) {
        goto LABEL_45;
      }
    }
    else
    {
      uint64_t v37 = 0;
      unsigned int v38 = v25;
      uint64_t v40 = v88;
      uint64_t v39 = v89;
    }
    uint64_t v82 = v37;
    uint64_t v37 = v36 & 0xFFFFFFF8;
    unsigned int v83 = (int8x8_t *)&v35->i8[v82];
    std::string v84 = (int8x8_t *)&v28->i8[v82];
    uint64_t v85 = v82 - v37;
    do
    {
      int8x8_t v86 = *v83++;
      int8x8_t *v84 = vbic_s8(*v84, v86);
      ++v84;
      v85 += 8;
    }
    while (v85);
    if (v37 == v36) {
      goto LABEL_47;
    }
    goto LABEL_45;
  }
LABEL_88:
  free(__src);
  return v24;
}

void swift::reflection::MultiPayloadEnumTypeInfo::getSpareBits(const void **this@<X0>, uint64_t a2@<X8>)
{
  size_t v6 = *((unsigned int *)this + 16);
  *(_DWORD *)a2 = v6;
  int64x2_t v7 = (int8x16_t *)malloc_type_malloc(v6, 0x46DD872BuLL);
  *(void *)(a2 + 8) = v7;
  memcpy(v7, this[9], v6);
  swift::reflection::MultiPayloadEnumTypeInfo::getMultiPayloadTagBitsMask((swift::reflection::MultiPayloadEnumTypeInfo *)this, (uint64_t)&v25);
  size_t v8 = (char *)v26;
  if (v6)
  {
    size_t v9 = v6 >= v25 ? v25 : v6;
    if (v9)
    {
      if (v9 < 8 || (v7 < (int8x16_t *)((char *)v26 + v9) ? (BOOL v10 = v26 >= &v7->i8[v9]) : (BOOL v10 = 1), !v10))
      {
        uint64_t v11 = 0;
        goto LABEL_15;
      }
      if (v9 >= 0x20)
      {
        uint64_t v11 = v9 & 0xFFFFFFE0;
        int v16 = (int8x16_t *)((char *)v26 + 16);
        unint64_t v17 = v7 + 1;
        uint64_t v18 = v11;
        do
        {
          int8x16_t v19 = vbicq_s8(*v17, *v16);
          v17[-1] = vbicq_s8(v17[-1], v16[-1]);
          int8x16_t *v17 = v19;
          v16 += 2;
          v17 += 2;
          v18 -= 32;
        }
        while (v18);
        if (v11 == v9) {
          goto LABEL_17;
        }
        if ((v9 & 0x18) == 0)
        {
LABEL_15:
          long long v12 = &v7->i8[v11];
          size_t v13 = v9 - v11;
          unsigned int v14 = &v8[v11];
          do
          {
            char v15 = *v14++;
            *v12++ &= ~v15;
            --v13;
          }
          while (v13);
          goto LABEL_17;
        }
      }
      else
      {
        uint64_t v11 = 0;
      }
      uint64_t v20 = v11;
      uint64_t v11 = v9 & 0xFFFFFFF8;
      uint64_t v21 = (int8x8_t *)&v8[v20];
      unsigned int v22 = (int8x8_t *)&v7->i8[v20];
      uint64_t v23 = v20 - v11;
      do
      {
        int8x8_t v24 = *v21++;
        int8x8_t *v22 = vbic_s8(*v22, v24);
        ++v22;
        v23 += 8;
      }
      while (v23);
      if (v11 != v9) {
        goto LABEL_15;
      }
    }
  }
LABEL_17:
  free(v8);
}

void swift::reflection::MultiPayloadEnumTypeInfo::~MultiPayloadEnumTypeInfo(void **this)
{
  *this = &off_CA378;
  free(this[9]);
  *this = &off_CA228;
  uint64_t v2 = (void **)this[5];
  if (v2)
  {
    int64_t v3 = (void **)this[6];
    unsigned int v4 = this[5];
    if (v3 != v2)
    {
      do
      {
        if (*((char *)v3 - 25) < 0) {
          operator delete(*(v3 - 6));
        }
        v3 -= 6;
      }
      while (v3 != v2);
      unsigned int v4 = this[5];
    }
    this[6] = v2;
    operator delete(v4);
  }
}

{
  void **v2;
  void **v3;
  void *v4;
  uint64_t vars8;

  *this = &off_CA378;
  free(this[9]);
  *this = &off_CA228;
  uint64_t v2 = (void **)this[5];
  if (v2)
  {
    int64_t v3 = (void **)this[6];
    unsigned int v4 = this[5];
    if (v3 != v2)
    {
      do
      {
        if (*((char *)v3 - 25) < 0) {
          operator delete(*(v3 - 6));
        }
        v3 -= 6;
      }
      while (v3 != v2);
      unsigned int v4 = this[5];
    }
    this[6] = v2;
    operator delete(v4);
  }

  operator delete();
}

unint64_t swift::reflection::MultiPayloadEnumTypeInfo::projectEnumValue(swift::reflection::MultiPayloadEnumTypeInfo *this, uint64_t a2, uint64_t a3, unsigned int *a4)
{
  size_t v8 = (long long *)*((void *)this + 5);
  size_t v9 = (long long *)*((void *)this + 6);
  if (v8 == v9)
  {
    unsigned int v10 = 0;
  }
  else
  {
    unsigned int v10 = 0;
    do
    {
      if (*((char *)v8 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v62, *(const std::string::value_type **)v8, *((void *)v8 + 1));
      }
      else
      {
        long long v11 = *v8;
        v62.__r_.__value_.__r.__words[2] = *((void *)v8 + 2);
        *(_OWORD *)&v62.__r_.__value_.__l.__data_ = v11;
      }
      long long v12 = *(long long *)((char *)v8 + 24);
      uint64_t v64 = *((void *)v8 + 5);
      long long v63 = v12;
      if (*((void *)&v12 + 1) && *(_DWORD *)(v64 + 12) > v10) {
        unsigned int v10 = *(_DWORD *)(v64 + 12);
      }
      if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v62.__r_.__value_.__l.__data_);
      }
      v8 += 3;
    }
    while (v8 != v9);
  }
  uint64_t v13 = *((unsigned int *)this + 3);
  int v61 = 0;
  if (v10 == v13
    || ((unint64_t v14 = v13 - v10, v14 >= 4) ? (v15 = 4) : (v15 = v14),
        (*(unsigned int (**)(uint64_t, uint64_t, int *, uint64_t))(*(void *)a2 + 32))(a2, v10 + a3, &v61, v15)))
  {
    swift::reflection::MultiPayloadEnumTypeInfo::getMultiPayloadTagBitsMask(this, (uint64_t)&v62);
    if (!LODWORD(v62.__r_.__value_.__l.__data_))
    {
      uint64_t v60 = 0;
      swift::reflection::BitMask::readMaskedInteger<unsigned long long>((unsigned int *)&v62, a2, a3, &v60);
      LOBYTE(v17) = 0;
      unint64_t v18 = 0;
      if ((v19 & 1) == 0) {
        goto LABEL_67;
      }
      goto LABEL_32;
    }
    if (LODWORD(v62.__r_.__value_.__l.__data_) == 1)
    {
      uint64_t v16 = 0;
      int v17 = 0;
    }
    else
    {
      int v20 = 0;
      int v21 = 0;
      uint64_t v16 = (uint64_t)v62.__r_.__value_.__l.__data_ & 0xFFFFFFFE;
      unsigned int v22 = (unsigned __int8 *)(v62.__r_.__value_.__l.__size_ + 1);
      uint64_t v23 = v16;
      do
      {
        unint64_t v24 = *(v22 - 1);
        unsigned int v25 = *v22;
        v22 += 2;
        v20 += *(_DWORD *)((char *)swift::reflection::BitMask::countSetBits(void)const::counter + ((v24 >> 2) & 0x3C))
             + swift::reflection::BitMask::countSetBits(void)const::counter[v24 & 0xF];
        v21 += *(_DWORD *)((char *)swift::reflection::BitMask::countSetBits(void)const::counter
                         + (((unint64_t)v25 >> 2) & 0x3C))
             + swift::reflection::BitMask::countSetBits(void)const::counter[v25 & 0xF];
        v23 -= 2;
      }
      while (v23);
      int v17 = v21 + v20;
      if (v16 == LODWORD(v62.__r_.__value_.__l.__data_))
      {
LABEL_29:
        uint64_t v60 = 0;
        swift::reflection::BitMask::readMaskedInteger<unsigned long long>((unsigned int *)&v62, a2, a3, &v60);
        if ((v29 & 1) == 0)
        {
          unint64_t v18 = 0;
          goto LABEL_67;
        }
        if (v17 >= 32)
        {
          unsigned int v30 = v60;
          goto LABEL_33;
        }
LABEL_32:
        unsigned int v30 = (v61 << v17) | v60;
LABEL_33:
        if (v30 < *((_DWORD *)this + 20))
        {
          *a4 = v30;
          unint64_t v18 = 1;
LABEL_67:
          free((void *)v62.__r_.__value_.__l.__size_);
          return v18;
        }
        unsigned int v58 = *((_DWORD *)this + 16);
        unint64_t v18 = v58;
        uint64_t v31 = (int8x16_t *)malloc_type_malloc(v58, 0x46DD872BuLL);
        uint64_t v59 = v31;
        memcpy(v31, *((const void **)this + 9), v58);
        if (!v58)
        {
          uint64_t v57 = 0;
          swift::reflection::BitMask::readMaskedInteger<unsigned long long>(&v58, a2, a3, &v57);
          LOBYTE(v33) = 0;
          if (v34) {
            goto LABEL_61;
          }
          goto LABEL_66;
        }
        if (v58 < 8)
        {
          unint64_t v32 = 0;
          goto LABEL_50;
        }
        if (v58 >= 0x20)
        {
          unint64_t v32 = v58 & 0xFFFFFFE0;
          uint64_t v35 = v31 + 1;
          unint64_t v36 = v32;
          do
          {
            int8x16_t v37 = vmvnq_s8(*v35);
            v35[-1] = vmvnq_s8(v35[-1]);
            int8x16_t *v35 = v37;
            v35 += 2;
            v36 -= 32;
          }
          while (v36);
          if (v32 == v18) {
            goto LABEL_51;
          }
          if ((v18 & 0x18) == 0)
          {
            do
            {
LABEL_50:
              v31->i8[v32] = ~v31->i8[v32];
              ++v32;
            }
            while (v32 < v18);
            goto LABEL_51;
          }
        }
        else
        {
          unint64_t v32 = 0;
        }
        unint64_t v38 = v32;
        unint64_t v32 = v18 & 0xFFFFFFF8;
        uint64_t v39 = (int8x8_t *)&v31->i8[v38];
        unint64_t v40 = v38 - v32;
        do
        {
          *uint64_t v39 = vmvn_s8(*v39);
          ++v39;
          v40 += 8;
        }
        while (v40);
        if (v32 != v18) {
          goto LABEL_50;
        }
LABEL_51:
        if (v18 >= 2)
        {
          int v42 = 0;
          int v43 = 0;
          uint64_t v41 = v18 & 0xFFFFFFFE;
          char v44 = &v31->u8[1];
          uint64_t v45 = v41;
          do
          {
            unint64_t v46 = *(v44 - 1);
            unsigned int v47 = *v44;
            v44 += 2;
            v42 += *(_DWORD *)((char *)swift::reflection::BitMask::countSetBits(void)const::counter + ((v46 >> 2) & 0x3C))
                 + swift::reflection::BitMask::countSetBits(void)const::counter[v46 & 0xF];
            v43 += *(_DWORD *)((char *)swift::reflection::BitMask::countSetBits(void)const::counter
                             + (((unint64_t)v47 >> 2) & 0x3C))
                 + swift::reflection::BitMask::countSetBits(void)const::counter[v47 & 0xF];
            v45 -= 2;
          }
          while (v45);
          int v33 = v43 + v42;
          if (v41 == v18) {
            goto LABEL_58;
          }
        }
        else
        {
          uint64_t v41 = 0;
          int v33 = 0;
        }
        uint64_t v48 = v18 - v41;
        uint64_t v49 = &v31->u8[v41];
        do
        {
          unsigned int v50 = *v49++;
          v33 += *(_DWORD *)((char *)swift::reflection::BitMask::countSetBits(void)const::counter
                           + (((unint64_t)v50 >> 2) & 0x3C))
               + swift::reflection::BitMask::countSetBits(void)const::counter[v50 & 0xF];
          --v48;
        }
        while (v48);
LABEL_58:
        uint64_t v57 = 0;
        swift::reflection::BitMask::readMaskedInteger<unsigned long long>(&v58, a2, a3, &v57);
        if (v51)
        {
          if (v33 >= 32)
          {
            int v52 = v57;
            int v53 = *((_DWORD *)this + 20);
LABEL_62:
            unsigned int v54 = v53 + v52;
            unsigned int v55 = -1431655765 * ((*((void *)this + 6) - *((void *)this + 5)) >> 4);
            unint64_t v18 = v54 < v55;
            if (v54 >= v55) {
              unsigned int v54 = -1;
            }
            *a4 = v54;
            goto LABEL_66;
          }
LABEL_61:
          int v52 = *((_DWORD *)this + 20);
          int v53 = ((v30 - v52) << v33) | v57;
          goto LABEL_62;
        }
        unint64_t v18 = 0;
LABEL_66:
        free(v59);
        goto LABEL_67;
      }
    }
    uint64_t v26 = LODWORD(v62.__r_.__value_.__l.__data_) - v16;
    unsigned int v27 = (unsigned __int8 *)(v62.__r_.__value_.__l.__size_ + v16);
    do
    {
      unsigned int v28 = *v27++;
      v17 += *(_DWORD *)((char *)swift::reflection::BitMask::countSetBits(void)const::counter
                       + (((unint64_t)v28 >> 2) & 0x3C))
           + swift::reflection::BitMask::countSetBits(void)const::counter[v28 & 0xF];
      --v26;
    }
    while (v26);
    goto LABEL_29;
  }
  return 0;
}

uint64_t swift::reflection::MultiPayloadEnumTypeInfo::getMultiPayloadTagBitsMask@<X0>(swift::reflection::MultiPayloadEnumTypeInfo *this@<X0>, uint64_t a2@<X8>)
{
  unsigned int v4 = 0;
  unsigned int v5 = *((_DWORD *)this + 20)
     - (*((_DWORD *)this + 20) >= -1431655765 * ((*((void *)this + 6) - *((void *)this + 5)) >> 4));
  if (v5)
  {
    do
    {
      ++v4;
      BOOL v6 = v5 > 1;
      v5 >>= 1;
    }
    while (v6);
  }
  size_t v7 = *((unsigned int *)this + 16);
  *(_DWORD *)a2 = v7;
  size_t v8 = malloc_type_malloc(v7, 0x46DD872BuLL);
  *(void *)(a2 + 8) = v8;
  memcpy(v8, *((const void **)this + 9), v7);
  size_t v9 = (long long *)*((void *)this + 5);
  unsigned int v10 = (long long *)*((void *)this + 6);
  if (v9 == v10)
  {
    unsigned int v11 = 0;
  }
  else
  {
    unsigned int v11 = 0;
    do
    {
      if (*((char *)v9 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v9, *((void *)v9 + 1));
      }
      else
      {
        long long v12 = *v9;
        __p.__r_.__value_.__r.__words[2] = *((void *)v9 + 2);
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v12;
      }
      long long v13 = *(long long *)((char *)v9 + 24);
      uint64_t v17 = *((void *)v9 + 5);
      long long v16 = v13;
      if (*((void *)&v13 + 1) && *(_DWORD *)(v17 + 12) > v11) {
        unsigned int v11 = *(_DWORD *)(v17 + 12);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      v9 += 3;
    }
    while (v9 != v10);
  }
  if (v7 > v11) {
    *(_DWORD *)a2 = v11;
  }
  return swift::reflection::BitMask::keepOnlyMostSignificantBits(a2, v4);
}

uint64_t swift::reflection::BitMask::readMaskedInteger<unsigned int>(unsigned int *a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  (*(void (**)(char **__return_ptr, uint64_t, uint64_t, void))(*(void *)a2 + 24))(&v17, a2, a3, *a1);
  BOOL v6 = v17;
  if (v17)
  {
    uint64_t v7 = *a1;
    if (v7)
    {
      int v8 = 0;
      size_t v9 = (char *)*((void *)a1 + 1);
      int v10 = 1;
      unsigned int v11 = v17;
      while (1)
      {
        char v13 = *v9++;
        char v12 = v13;
        if (v13)
        {
          v8 |= (*v11 << 31 >> 31) & v10;
          v10 *= 2;
          if ((v12 & 2) == 0)
          {
LABEL_7:
            if ((v12 & 4) == 0) {
              goto LABEL_8;
            }
            goto LABEL_16;
          }
        }
        else if ((v12 & 2) == 0)
        {
          goto LABEL_7;
        }
        v8 |= v10 & (*v11 << 30 >> 31);
        v10 *= 2;
        if ((v12 & 4) == 0)
        {
LABEL_8:
          if ((v12 & 8) == 0) {
            goto LABEL_9;
          }
          goto LABEL_17;
        }
LABEL_16:
        v8 |= v10 & (*v11 << 29 >> 31);
        v10 *= 2;
        if ((v12 & 8) == 0)
        {
LABEL_9:
          if ((v12 & 0x10) == 0) {
            goto LABEL_10;
          }
          goto LABEL_18;
        }
LABEL_17:
        v8 |= v10 & (*v11 << 28 >> 31);
        v10 *= 2;
        if ((v12 & 0x10) == 0)
        {
LABEL_10:
          if ((v12 & 0x20) == 0) {
            goto LABEL_11;
          }
          goto LABEL_19;
        }
LABEL_18:
        v8 |= v10 & (*v11 << 27 >> 31);
        v10 *= 2;
        if ((v12 & 0x20) == 0)
        {
LABEL_11:
          if ((v12 & 0x40) == 0) {
            goto LABEL_12;
          }
          goto LABEL_20;
        }
LABEL_19:
        v8 |= v10 & (*v11 << 26 >> 31);
        v10 *= 2;
        if ((v12 & 0x40) == 0)
        {
LABEL_12:
          if (v12 < 0) {
            goto LABEL_21;
          }
          goto LABEL_4;
        }
LABEL_20:
        v8 |= v10 & (*v11 << 25 >> 31);
        v10 *= 2;
        if (v12 < 0)
        {
LABEL_21:
          if (*v11 < 0) {
            int v14 = v10;
          }
          else {
            int v14 = 0;
          }
          v8 |= v14;
          v10 *= 2;
        }
LABEL_4:
        ++v11;
        if (!--v7) {
          goto LABEL_27;
        }
      }
    }
    int v8 = 0;
LABEL_27:
    *a4 = v8;
    uint64_t v17 = 0;
    int v20 = v6;
    if (!v19)
    {
      uint64_t v16 = std::__throw_bad_function_call[abi:nn180100]();
      return swift::reflection::BitMask::readMaskedInteger<unsigned long long>(v16);
    }
    (*(void (**)(void *, char **))(*v19 + 48))(v19, &v20);
  }
  else
  {
    uint64_t v17 = 0;
  }
  if (v19 == v18)
  {
    (*(void (**)(void *))(v18[0] + 32))(v18);
  }
  else if (v19)
  {
    (*(void (**)(void *))(*v19 + 40))(v19);
  }
  return v6 != 0;
}

void swift::reflection::BitMask::readMaskedInteger<unsigned long long>(unsigned int *a1, uint64_t a2, uint64_t a3, void *a4)
{
  (*(void (**)(unsigned char **__return_ptr, uint64_t, uint64_t, void))(*(void *)a2 + 24))(&v24, a2, a3, *a1);
  BOOL v6 = v24;
  if (v24)
  {
    uint64_t v7 = *a1;
    if (v7)
    {
      uint64_t v8 = 0;
      size_t v9 = (char *)*((void *)a1 + 1);
      uint64_t v10 = 1;
      unsigned int v11 = v24;
      while (1)
      {
        char v13 = *v9++;
        char v12 = v13;
        if (v13)
        {
          if (*v11) {
            uint64_t v14 = v10;
          }
          else {
            uint64_t v14 = 0;
          }
          v8 |= v14;
          v10 *= 2;
          if ((v12 & 2) == 0)
          {
LABEL_7:
            if ((v12 & 4) == 0) {
              goto LABEL_8;
            }
            goto LABEL_22;
          }
        }
        else if ((v12 & 2) == 0)
        {
          goto LABEL_7;
        }
        if ((*v11 & 2) != 0) {
          uint64_t v15 = v10;
        }
        else {
          uint64_t v15 = 0;
        }
        v8 |= v15;
        v10 *= 2;
        if ((v12 & 4) == 0)
        {
LABEL_8:
          if ((v12 & 8) == 0) {
            goto LABEL_9;
          }
          goto LABEL_26;
        }
LABEL_22:
        if ((*v11 & 4) != 0) {
          uint64_t v16 = v10;
        }
        else {
          uint64_t v16 = 0;
        }
        v8 |= v16;
        v10 *= 2;
        if ((v12 & 8) == 0)
        {
LABEL_9:
          if ((v12 & 0x10) == 0) {
            goto LABEL_10;
          }
          goto LABEL_30;
        }
LABEL_26:
        if ((*v11 & 8) != 0) {
          uint64_t v17 = v10;
        }
        else {
          uint64_t v17 = 0;
        }
        v8 |= v17;
        v10 *= 2;
        if ((v12 & 0x10) == 0)
        {
LABEL_10:
          if ((v12 & 0x20) == 0) {
            goto LABEL_11;
          }
          goto LABEL_34;
        }
LABEL_30:
        if ((*v11 & 0x10) != 0) {
          uint64_t v18 = v10;
        }
        else {
          uint64_t v18 = 0;
        }
        v8 |= v18;
        v10 *= 2;
        if ((v12 & 0x20) == 0)
        {
LABEL_11:
          if ((v12 & 0x40) != 0) {
            goto LABEL_38;
          }
          goto LABEL_12;
        }
LABEL_34:
        if ((*v11 & 0x20) != 0) {
          uint64_t v19 = v10;
        }
        else {
          uint64_t v19 = 0;
        }
        v8 |= v19;
        v10 *= 2;
        if ((v12 & 0x40) != 0)
        {
LABEL_38:
          if ((*v11 & 0x40) != 0) {
            uint64_t v20 = v10;
          }
          else {
            uint64_t v20 = 0;
          }
          v8 |= v20;
          v10 *= 2;
          if ((v12 & 0x80) == 0) {
            goto LABEL_4;
          }
LABEL_42:
          if ((char)*v11 < 0) {
            uint64_t v21 = v10;
          }
          else {
            uint64_t v21 = 0;
          }
          v8 |= v21;
          v10 *= 2;
          goto LABEL_4;
        }
LABEL_12:
        if (v12 < 0) {
          goto LABEL_42;
        }
LABEL_4:
        ++v11;
        if (!--v7) {
          goto LABEL_48;
        }
      }
    }
    uint64_t v8 = 0;
LABEL_48:
    *a4 = v8;
    unint64_t v24 = 0;
    unsigned int v27 = v6;
    if (!v26)
    {
      unsigned int v22 = (swift::reflection::ExistentialTypeInfoBuilder *)std::__throw_bad_function_call[abi:nn180100]();
      swift::reflection::ExistentialTypeInfoBuilder::addProtocolComposition(v22, v23);
      return;
    }
    (*(void (**)(void *, unsigned char **))(*v26 + 48))(v26, &v27);
  }
  else
  {
    unint64_t v24 = 0;
  }
  if (v26 == v25)
  {
    (*(void (**)(void *))(v25[0] + 32))(v25);
  }
  else if (v26)
  {
    (*(void (**)(void *))(*v26 + 40))(v26);
  }
}

void swift::reflection::ExistentialTypeInfoBuilder::addProtocolComposition(swift::reflection::ExistentialTypeInfoBuilder *this, const swift::reflection::ProtocolCompositionTypeRef *a2)
{
  unsigned int v4 = (const swift::reflection::TypeRef **)*((void *)a2 + 2);
  unsigned int v5 = (const swift::reflection::TypeRef **)*((void *)a2 + 3);
  while (v4 != v5)
  {
    BOOL v6 = *v4++;
    swift::reflection::ExistentialTypeInfoBuilder::addProtocol(this, v6);
  }
  if (*((unsigned char *)a2 + 48)) {
    *((_DWORD *)this + 10) = 1;
  }
  uint64_t v7 = (const swift::reflection::TypeRef *)*((void *)a2 + 5);
  if (v7)
  {
    int v8 = *((_DWORD *)v7 + 2);
    if ((v8 - 1) >= 2)
    {
      if (v8 == 12)
      {
        *((_DWORD *)this + 10) = 1;
        return;
      }
    }
    else
    {
      swift::reflection::TypeRefBuilder::getFieldDescriptor(**(swift::reflection::TypeRefBuilder ***)this, v7, &v11);
      uint64_t v9 = v11;
      if (v11)
      {
        int v10 = *(unsigned __int16 *)(v11 + 8);
        if (v10 != 7)
        {
          if (v10 != 1)
          {
            *((unsigned char *)this + 56) = 1;
            goto LABEL_16;
          }
          *((_DWORD *)this + 11) = 0;
        }
        *((_DWORD *)this + 10) = 1;
LABEL_16:
        uint64_t v11 = 0;
        (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
        return;
      }
    }
    *((unsigned char *)this + 56) = 1;
  }
}

uint64_t swift::reflection::ExistentialTypeInfoBuilder::build(uint64_t a1, uint64_t a2)
{
  swift::reflection::ExistentialTypeInfoBuilder::examineProtocols(a1);
  if (*(unsigned char *)(a1 + 56)) {
    return 0;
  }
  if (!*(unsigned char *)(a1 + 48))
  {
    int v8 = *(_DWORD *)(a1 + 40);
    if (v8)
    {
      if (v8 != 2)
      {
        if (v8 == 1)
        {
          unsigned int v30 = *(swift::reflection::TypeConverter **)a1;
          unint64_t v31 = 0x100000000;
          int v32 = 0;
          char v33 = 1;
          unsigned int v34 = 5;
          unint64_t v36 = 0;
          uint64_t v37 = 0;
          uint64_t v35 = 0;
          __int16 v38 = 1;
          if (*(_DWORD *)(a1 + 44) == 1)
          {
            std::string::basic_string[abi:nn180100]<0>(__p, "object");
            uint64_t UnknownObjectTypeRef = swift::reflection::TypeConverter::getUnknownObjectTypeRef(*(swift::reflection::TypeConverter **)a1);
          }
          else
          {
            std::string::basic_string[abi:nn180100]<0>(__p, "object");
            uint64_t UnknownObjectTypeRef = swift::reflection::TypeConverter::getNativeObjectTypeRef(*(swift::reflection::TypeConverter **)a1);
          }
          swift::reflection::RecordTypeInfoBuilder::addField((uint64_t)&v30, (uint64_t)__p, UnknownObjectTypeRef, a2);
          if (v40 < 0) {
            operator delete(__p[0]);
          }
        }
        else
        {
          unsigned int v30 = *(swift::reflection::TypeConverter **)a1;
          unint64_t v31 = 0x100000000;
          int v32 = 0;
          char v33 = 1;
          unsigned int v34 = 0;
          unint64_t v36 = 0;
          uint64_t v37 = 0;
          uint64_t v35 = 0;
          __int16 v38 = 1;
        }
LABEL_35:
        if (*(_DWORD *)(a1 + 52))
        {
          unsigned int v21 = 0;
          do
          {
            char v29 = 6;
            strcpy(v28, "wtable");
            unsigned int v22 = *(swift::reflection::TypeConverter **)a1;
            uint64_t v23 = *(void *)(*(void *)a1 + 104);
            if (!v23)
            {
              uint64_t v24 = *(void *)v22;
              char v40 = 2;
              strcpy((char *)__p, "Bp");
              uint64_t v23 = swift::reflection::BuiltinTypeRef::create<swift::reflection::TypeRefBuilder>(v24, (uint64_t)__p);
              *((void *)v22 + 13) = v23;
              if (v40 < 0)
              {
                operator delete(__p[0]);
                uint64_t v23 = *((void *)v22 + 13);
              }
            }
            swift::reflection::RecordTypeInfoBuilder::addField((uint64_t)&v30, (uint64_t)v28, v23, a2);
            ++v21;
          }
          while (v21 < *(_DWORD *)(a1 + 52));
        }
        uint64_t v4 = swift::reflection::RecordTypeInfoBuilder::build((swift::reflection::RecordTypeInfoBuilder *)&v30);
        unsigned int v25 = (void **)v35;
        if (!v35) {
          return v4;
        }
        goto LABEL_42;
      }
      uint64_t v19 = *(swift::reflection::TypeConverter **)a1;
      unsigned int v30 = v19;
      unint64_t v31 = 0x100000000;
      int v32 = 0;
      char v33 = 1;
      unsigned int v34 = 7;
      unint64_t v36 = 0;
      uint64_t v37 = 0;
      uint64_t v35 = 0;
      __int16 v38 = 1;
      char v29 = 5;
      strcpy(v28, "error");
      uint64_t v17 = *((void *)v19 + 15);
      if (!v17)
      {
        uint64_t v20 = *(void *)v19;
        char v40 = 2;
        strcpy((char *)__p, "BO");
        uint64_t v17 = swift::reflection::BuiltinTypeRef::create<swift::reflection::TypeRefBuilder>(v20, (uint64_t)__p);
        *((void *)v19 + 15) = v17;
        if (v40 < 0)
        {
          operator delete(__p[0]);
          uint64_t v17 = *((void *)v19 + 15);
        }
      }
    }
    else
    {
      int v10 = *(swift::reflection::TypeConverter **)a1;
      unsigned int v30 = v10;
      unint64_t v31 = 0x100000000;
      int v32 = 0;
      char v33 = 1;
      unsigned int v34 = 4;
      unint64_t v36 = 0;
      uint64_t v37 = 0;
      uint64_t v35 = 0;
      __int16 v38 = 1;
      uint64_t v11 = *((void *)v10 + 13);
      if (!v11)
      {
        uint64_t v12 = *(void *)v10;
        char v40 = 2;
        strcpy((char *)__p, "Bp");
        uint64_t v11 = swift::reflection::BuiltinTypeRef::create<swift::reflection::TypeRefBuilder>(v12, (uint64_t)__p);
        *((void *)v10 + 13) = v11;
        if (v40 < 0)
        {
          operator delete(__p[0]);
          uint64_t v11 = *((void *)v10 + 13);
        }
      }
      uint64_t TypeInfo = swift::reflection::TypeConverter::getTypeInfo(v10, v11, a2);
      if (!TypeInfo)
      {
        uint64_t v4 = 0;
        unsigned int v25 = (void **)v35;
        if (!v35) {
          return v4;
        }
LABEL_42:
        uint64_t v26 = v36;
        unsigned int v27 = v25;
        if (v36 != v25)
        {
          do
          {
            if (*((char *)v26 - 25) < 0) {
              operator delete(*(v26 - 6));
            }
            v26 -= 6;
          }
          while (v26 != v25);
          unsigned int v27 = v35;
        }
        unint64_t v36 = v25;
        operator delete(v27);
        return v4;
      }
      unsigned int v14 = *(_DWORD *)(TypeInfo + 16);
      unsigned int v15 = ((v14 + v31 - 1) & -v14) + 3 * *(_DWORD *)(TypeInfo + 12);
      if (HIDWORD(v31) > v14) {
        unsigned int v14 = HIDWORD(v31);
      }
      unint64_t v31 = __PAIR64__(v14, v15);
      if (v34 <= 9 && ((1 << v34) & 0x3E9) != 0 && (_BYTE)v38) {
        int v32 = 0;
      }
      LOBYTE(v38) = 0;
      char v29 = 8;
      strcpy(v28, "metadata");
      uint64_t v16 = *(swift::reflection::TypeConverter **)a1;
      uint64_t v17 = *(void *)(*(void *)a1 + 136);
      if (!v17)
      {
        uint64_t v18 = *(void *)v16;
        char v40 = 4;
        strcpy((char *)__p, "ypXp");
        uint64_t v17 = swift::reflection::BuiltinTypeRef::create<swift::reflection::TypeRefBuilder>(v18, (uint64_t)__p);
        *((void *)v16 + 17) = v17;
        if (v40 < 0)
        {
          operator delete(__p[0]);
          uint64_t v17 = *((void *)v16 + 17);
        }
      }
    }
    swift::reflection::RecordTypeInfoBuilder::addField((uint64_t)&v30, (uint64_t)v28, v17, a2);
    goto LABEL_35;
  }
  if (*(_DWORD *)(a1 + 52)) {
    return 0;
  }
  BOOL v6 = *(swift::reflection::TypeConverter **)a1;
  uint64_t v7 = *(unsigned int *)(a1 + 44);

  return swift::reflection::TypeConverter::getReferenceTypeInfo((uint64_t)v6, 0, v7);
}

void swift::reflection::ExistentialTypeInfoBuilder::addProtocol(swift::reflection::ExistentialTypeInfoBuilder *this, const swift::reflection::TypeRef *a2)
{
  unsigned int v5 = (char *)*((void *)this + 2);
  unint64_t v4 = *((void *)this + 3);
  BOOL v6 = v5;
  if ((unint64_t)v5 >= v4)
  {
    int v8 = (char *)*((void *)this + 1);
    uint64_t v9 = (v5 - v8) >> 3;
    unint64_t v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 61) {
      abort();
    }
    uint64_t v11 = v4 - (void)v8;
    if (v11 >> 2 > v10) {
      unint64_t v10 = v11 >> 2;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v10;
    }
    if (v12)
    {
      if (v12 >> 61) {
        std::__throw_bad_array_new_length[abi:nn180100]();
      }
      char v13 = (char *)operator new(8 * v12);
    }
    else
    {
      char v13 = 0;
    }
    unsigned int v14 = &v13[8 * v9];
    unsigned int v15 = &v13[8 * v12];
    *(void *)unsigned int v14 = a2;
    uint64_t v7 = v14 + 8;
    if (v5 != v8)
    {
      unint64_t v16 = v5 - v8 - 8;
      if (v16 < 0x58) {
        goto LABEL_28;
      }
      if ((unint64_t)(v8 - v13) < 0x20) {
        goto LABEL_28;
      }
      uint64_t v17 = (v16 >> 3) + 1;
      uint64_t v18 = 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL);
      BOOL v6 = &v5[-v18];
      v14 -= v18;
      uint64_t v19 = &v13[8 * v9 - 16];
      uint64_t v20 = (long long *)(v5 - 16);
      uint64_t v21 = v17 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v22 = *v20;
        *((_OWORD *)v19 - 1) = *(v20 - 1);
        *(_OWORD *)uint64_t v19 = v22;
        v19 -= 32;
        v20 -= 2;
        v21 -= 4;
      }
      while (v21);
      if (v17 != (v17 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_28:
        do
        {
          uint64_t v23 = *((void *)v6 - 1);
          v6 -= 8;
          *((void *)v14 - 1) = v23;
          v14 -= 8;
        }
        while (v6 != v8);
      }
      BOOL v6 = (char *)*((void *)this + 1);
    }
    *((void *)this + 1) = v14;
    *((void *)this + 2) = v7;
    *((void *)this + 3) = v15;
    if (v6) {
      operator delete(v6);
    }
  }
  else
  {
    *(void *)unsigned int v5 = a2;
    uint64_t v7 = v5 + 8;
  }
  *((void *)this + 2) = v7;
}

uint64_t swift::reflection::ExistentialTypeInfoBuilder::examineProtocols(uint64_t this)
{
  uint64_t v1 = (void *)this;
  if (*(_DWORD *)(this + 40))
  {
    int64_t v3 = *(const swift::reflection::TypeRef ***)(this + 8);
    uint64_t v2 = *(const swift::reflection::TypeRef ***)(this + 16);
    goto LABEL_8;
  }
  int64_t v3 = *(const swift::reflection::TypeRef ***)(this + 8);
  uint64_t v2 = *(const swift::reflection::TypeRef ***)(this + 16);
  if ((char *)v2 - (char *)v3 != 8 || (v3 != v2 ? (BOOL v4 = *(void *)(this + 32) == 0) : (BOOL v4 = 0), !v4))
  {
LABEL_8:
    if (v3 == v2) {
      return this;
    }
    while (1)
    {
      unsigned int v5 = *v3;
      int v6 = *((_DWORD *)*v3 + 2);
      BOOL v8 = v6 == 1 || v6 == 13;
      if (v5 && v8)
      {
        if (v6 == 13)
        {
          *((unsigned char *)v1 + 48) = 1;
          goto LABEL_11;
        }
        swift::reflection::TypeRefBuilder::getFieldDescriptor(*(swift::reflection::TypeRefBuilder **)*v1, *v3, &v16);
        this = v16;
        if (v16)
        {
          switch(*(_WORD *)(v16 + 8))
          {
            case 0:
            case 1:
            case 2:
            case 3:
            case 7:
              goto LABEL_24;
            case 4:
              ++*((_DWORD *)v1 + 13);
              goto LABEL_25;
            case 5:
              *((_DWORD *)v1 + 10) = 1;
              ++*((_DWORD *)v1 + 13);
              uint64_t v9 = swift::reflection::TypeRefBuilder::lookupSuperclass(*(swift::reflection::TypeRefBuilder **)*v1, v5);
              if (v9)
              {
                uint64_t TypeInfo = swift::reflection::TypeConverter::getTypeInfo(*v1, v9, 0);
                if (TypeInfo && *(_DWORD *)(TypeInfo + 8) == 2)
                {
                  if (!*(_DWORD *)(TypeInfo + 36)) {
                    *((_DWORD *)v1 + 11) = 0;
                  }
                }
                else
                {
LABEL_24:
                  *((unsigned char *)v1 + 56) = 1;
                }
              }
              goto LABEL_25;
            case 6:
              *((unsigned char *)v1 + 48) = 1;
LABEL_25:
              this = v16;
              uint64_t v16 = 0;
              if (this) {
                goto LABEL_26;
              }
              goto LABEL_11;
            default:
              uint64_t v16 = 0;
LABEL_26:
              this = (*(uint64_t (**)(uint64_t))(*(void *)this + 8))(this);
              break;
          }
          goto LABEL_11;
        }
      }
      *((unsigned char *)v1 + 56) = 1;
LABEL_11:
      if (++v3 == v2) {
        return this;
      }
    }
  }
  uint64_t v11 = *(const swift::reflection::TypeRef ***)(this + 8);
  while (1)
  {
    unint64_t v12 = *v11;
    if (*v11) {
      BOOL v13 = *((_DWORD *)*v11 + 2) == 1;
    }
    else {
      BOOL v13 = 0;
    }
    if (!v13) {
      goto LABEL_37;
    }
    unsigned int v14 = (void *)((char *)v12 + 16);
    int v15 = *((char *)v12 + 39);
    if (v15 < 0)
    {
      if (*((void *)v12 + 3) != 8) {
        goto LABEL_37;
      }
      unsigned int v14 = (void *)*v14;
    }
    else if (v15 != 8)
    {
      goto LABEL_37;
    }
    if (*v14 == 0x50726F7272453573) {
      break;
    }
LABEL_37:
    if (++v11 == v2) {
      goto LABEL_8;
    }
  }
  *(_DWORD *)(this + 40) = 2;
  return this;
}

uint64_t swift::reflection::TypeRefVisitor<swift::reflection::HasSingletonMetatype,swift::reflection::MetatypeRepresentation>::visit(uint64_t a1, uint64_t a2)
{
  if (!a2) {
    return 0;
  }
  uint64_t v2 = a2;
  while (1)
  {
    int v4 = *(_DWORD *)(v2 + 8);
    if (v4 != 7) {
      break;
    }
    if (*(unsigned char *)(v2 + 24)) {
      return 1;
    }
    uint64_t v2 = *(void *)(v2 + 16);
    if (!v2) {
      return 0;
    }
  }
  uint64_t isClass = 0;
  switch(v4)
  {
    case 1:
    case 2:
      uint64_t isClass = swift::reflection::NominalTypeTrait::isClass((swift::reflection::NominalTypeTrait *)(v2 + 16));
      break;
    case 3:
      uint64_t v7 = *(uint64_t **)(v2 + 16);
      int v6 = *(uint64_t **)(v2 + 24);
      if (v7 == v6) {
        return 0;
      }
      LODWORD(isClass) = 0;
      do
      {
        uint64_t v8 = *v7++;
        int v9 = swift::reflection::TypeRefVisitor<swift::reflection::HasSingletonMetatype,swift::reflection::MetatypeRepresentation>::visit(a1, v8);
        unsigned int v11 = isClass == 1 || v9 == 1;
        if (v9 == 2) {
          unsigned int v11 = 2;
        }
        if (isClass == 2) {
          unsigned int v11 = 2;
        }
        if (isClass == v9) {
          uint64_t isClass = isClass;
        }
        else {
          uint64_t isClass = v11;
        }
      }
      while (v7 != v6);
      break;
    case 4:
      uint64_t isClass = swift::reflection::TypeRefVisitor<swift::reflection::HasSingletonMetatype,swift::reflection::MetatypeRepresentation>::visit(a1, *(void *)(v2 + 40));
      uint64_t v14 = *(void *)(v2 + 16);
      for (uint64_t i = *(void *)(v2 + 24); v14 != i; v14 += 32)
      {
        int v15 = swift::reflection::TypeRefVisitor<swift::reflection::HasSingletonMetatype,swift::reflection::MetatypeRepresentation>::visit(a1, *(void *)(v14 + 16));
        unsigned int v17 = isClass == 1 || v15 == 1;
        if (v15 == 2) {
          unsigned int v17 = 2;
        }
        if (isClass == 2) {
          unsigned int v17 = 2;
        }
        if (isClass == v15) {
          uint64_t isClass = isClass;
        }
        else {
          uint64_t isClass = v17;
        }
      }
      break;
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
      uint64_t isClass = 2;
      break;
    default:
      return isClass;
  }
  return isClass;
}

uint64_t swift::reflection::ExistentialTypeInfoBuilder::buildMetatype(uint64_t a1, uint64_t a2)
{
  swift::reflection::ExistentialTypeInfoBuilder::examineProtocols(a1);
  if (*(unsigned char *)(a1 + 56)) {
    return 0;
  }
  if (!*(unsigned char *)(a1 + 48))
  {
    uint64_t v7 = *(uint64_t **)a1;
    v19[0] = v7;
    v19[1] = 0x100000000;
    int v20 = 0;
    char v21 = 1;
    int v22 = 6;
    uint64_t v24 = 0;
    uint64_t v25 = 0;
    uint64_t v23 = 0;
    __int16 v26 = 1;
    char v18 = 8;
    strcpy(v17, "metadata");
    uint64_t v8 = v7[17];
    if (!v8)
    {
      uint64_t v9 = *v7;
      char v28 = 4;
      strcpy((char *)__p, "ypXp");
      uint64_t v8 = swift::reflection::BuiltinTypeRef::create<swift::reflection::TypeRefBuilder>(v9, (uint64_t)__p);
      v7[17] = v8;
      if (v28 < 0)
      {
        operator delete(__p[0]);
        uint64_t v8 = v7[17];
      }
    }
    swift::reflection::RecordTypeInfoBuilder::addField((uint64_t)v19, (uint64_t)v17, v8, a2);
    if (*(_DWORD *)(a1 + 52))
    {
      unsigned int v10 = 0;
      do
      {
        char v18 = 6;
        strcpy(v17, "wtable");
        unsigned int v11 = *(uint64_t **)a1;
        uint64_t v12 = *(void *)(*(void *)a1 + 104);
        if (!v12)
        {
          uint64_t v13 = *v11;
          char v28 = 2;
          strcpy((char *)__p, "Bp");
          uint64_t v12 = swift::reflection::BuiltinTypeRef::create<swift::reflection::TypeRefBuilder>(v13, (uint64_t)__p);
          v11[13] = v12;
          if (v28 < 0)
          {
            operator delete(__p[0]);
            uint64_t v12 = v11[13];
          }
        }
        swift::reflection::RecordTypeInfoBuilder::addField((uint64_t)v19, (uint64_t)v17, v12, a2);
        ++v10;
      }
      while (v10 < *(_DWORD *)(a1 + 52));
    }
    uint64_t v4 = swift::reflection::RecordTypeInfoBuilder::build((swift::reflection::RecordTypeInfoBuilder *)v19);
    uint64_t v14 = (void **)v23;
    if (v23)
    {
      int v15 = v24;
      uint64_t v16 = v23;
      if (v24 != v23)
      {
        do
        {
          if (*((char *)v15 - 25) < 0) {
            operator delete(*(v15 - 6));
          }
          v15 -= 6;
        }
        while (v15 != v14);
        uint64_t v16 = v23;
      }
      uint64_t v24 = v14;
      operator delete(v16);
    }
    return v4;
  }
  if (*(_DWORD *)(a1 + 52)) {
    return 0;
  }
  int v6 = *(swift::reflection::TypeConverter **)a1;

  return swift::reflection::TypeConverter::getAnyMetatypeTypeInfo(v6);
}

uint64_t swift::reflection::LowerType::rebuildStorageTypeInfo(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t TypeInfo = a2;
  if (!a2) {
    return TypeInfo;
  }
  unsigned int v6 = a3 - 1;
  while (1)
  {
    int v7 = *(_DWORD *)(TypeInfo + 8);
    if (v7 != 4) {
      break;
    }
    if (*(_DWORD *)(TypeInfo + 32) != 1) {
      return 0;
    }
    uint64_t v8 = *(void *)(TypeInfo + 40);
    if (*(void *)(TypeInfo + 48) - v8 != 96) {
      return 0;
    }
    int v9 = *(char *)(v8 + 23);
    if (v9 < 0)
    {
      if (*(void *)(v8 + 8) != 4) {
        return 0;
      }
      unsigned int v10 = *(_DWORD **)v8;
    }
    else
    {
      unsigned int v10 = *(_DWORD **)(TypeInfo + 40);
      if (v9 != 4) {
        return 0;
      }
    }
    if (*v10 != 1701670771) {
      return 0;
    }
    unsigned int v11 = (void *)(v8 + 48);
    int v12 = *(char *)(v8 + 71);
    if (v12 < 0)
    {
      if (*(void *)(v8 + 56) != 4) {
        return 0;
      }
      unsigned int v11 = (void *)*v11;
    }
    else if (v12 != 4)
    {
      return 0;
    }
    uint64_t TypeInfo = 0;
    BOOL v13 = *(_DWORD *)v11 != 1701736302;
    if (v6 <= 2 && !v13)
    {
      uint64_t TypeInfo = swift::reflection::TypeConverter::getTypeInfo(*a1, *(void *)(v8 + 32), a1[1]);
      if (TypeInfo) {
        continue;
      }
    }
    return TypeInfo;
  }
  if (v7 == 1)
  {
    if (*(_DWORD *)(TypeInfo + 32) != 5) {
      return 0;
    }
    char v17 = *(unsigned char *)(TypeInfo + 28);
    std::string __p = 0;
    unsigned int v50 = 0;
    char v51 = 0;
    uint64_t v18 = *(void *)(TypeInfo + 40);
    uint64_t v19 = *(void *)(TypeInfo + 48);
    if (v18 == v19) {
LABEL_86:
    }
      operator new();
    while (1)
    {
      int v21 = *(char *)(v18 + 23);
      if (v21 < 0)
      {
        std::string::size_type v24 = *(void *)(v18 + 8);
        if (v24 != 6)
        {
          uint64_t v23 = v50;
          if (v50 < v51) {
            goto LABEL_70;
          }
          goto LABEL_31;
        }
        int v22 = *(const std::string::value_type **)v18;
      }
      else
      {
        int v22 = (const std::string::value_type *)v18;
        if (v21 != 6)
        {
          uint64_t v23 = v50;
          if (v50 < v51) {
            goto LABEL_46;
          }
          goto LABEL_31;
        }
      }
      int v25 = *(_DWORD *)v22;
      int v26 = *((unsigned __int16 *)v22 + 2);
      if (v25 == 1701470831 && v26 == 29795)
      {
        uint64_t v29 = swift::reflection::LowerType::rebuildStorageTypeInfo(a1, *(void *)(v18 + 40), a3);
        if (v17) {
          BOOL v30 = *(unsigned char *)(v29 + 28) == 0;
        }
        else {
          BOOL v30 = 1;
        }
        char v17 = !v30;
        if (*(char *)(v18 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v46, *(const std::string::value_type **)v18, *(void *)(v18 + 8));
        }
        else
        {
          long long v31 = *(_OWORD *)v18;
          v46.__r_.__value_.__r.__words[2] = *(void *)(v18 + 16);
          *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v31;
        }
        LODWORD(v47) = *(_DWORD *)(v18 + 24);
        DWORD1(v47) = -1;
        *((void *)&v47 + 1) = *(void *)(v18 + 32);
        uint64_t v48 = v29;
        int v32 = (void **)v50;
        if (v50 >= v51)
        {
          unint64_t v36 = (void **)__p;
          unint64_t v37 = 0xAAAAAAAAAAAAAAABLL * ((v50 - (unsigned char *)__p) >> 4);
          unint64_t v38 = v37 + 1;
          if (v37 + 1 > 0x555555555555555) {
            abort();
          }
          if (0x5555555555555556 * ((v51 - (unsigned char *)__p) >> 4) > v38) {
            unint64_t v38 = 0x5555555555555556 * ((v51 - (unsigned char *)__p) >> 4);
          }
          if (0xAAAAAAAAAAAAAAABLL * ((v51 - (unsigned char *)__p) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
            unint64_t v39 = 0x555555555555555;
          }
          else {
            unint64_t v39 = v38;
          }
          if (v39)
          {
            if (v39 > 0x555555555555555) {
              std::__throw_bad_array_new_length[abi:nn180100]();
            }
            char v40 = (char *)operator new(48 * v39);
          }
          else
          {
            char v40 = 0;
          }
          int v42 = &v40[48 * v37];
          *(std::string *)int v42 = v46;
          memset(&v46, 0, sizeof(v46));
          *(_OWORD *)(v42 + 24) = v47;
          *((void *)v42 + 5) = v48;
          uint64_t v35 = v42 + 48;
          if (v32 == v36)
          {
            std::string __p = v42;
            unsigned int v50 = v42 + 48;
            char v51 = &v40[48 * v39];
          }
          else
          {
            do
            {
              long long v43 = *((_OWORD *)v32 - 3);
              *((void *)v42 - 4) = *(v32 - 4);
              *((_OWORD *)v42 - 3) = v43;
              *(v32 - 5) = 0;
              *(v32 - 4) = 0;
              *(v32 - 6) = 0;
              long long v44 = *(_OWORD *)(v32 - 3);
              *((void *)v42 - 1) = *(v32 - 1);
              *(_OWORD *)(v42 - 24) = v44;
              v42 -= 48;
              v32 -= 6;
            }
            while (v32 != v36);
            int v32 = (void **)__p;
            uint64_t v45 = (void **)v50;
            std::string __p = v42;
            unsigned int v50 = v35;
            char v51 = &v40[48 * v39];
            while (v45 != v32)
            {
              if (*((char *)v45 - 25) < 0) {
                operator delete(*(v45 - 6));
              }
              v45 -= 6;
            }
          }
          if (v32) {
            operator delete(v32);
          }
        }
        else
        {
          long long v33 = *(_OWORD *)&v46.__r_.__value_.__l.__data_;
          *((void *)v50 + 2) = *((void *)&v46.__r_.__value_.__l + 2);
          *(_OWORD *)int v32 = v33;
          memset(&v46, 0, sizeof(v46));
          uint64_t v34 = v48;
          *(_OWORD *)(v32 + 3) = v47;
          v32[5] = (void *)v34;
          uint64_t v35 = (char *)(v32 + 6);
        }
        unsigned int v50 = v35;
        if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v46.__r_.__value_.__l.__data_);
        }
        goto LABEL_33;
      }
      uint64_t v23 = v50;
      if (v50 < v51)
      {
        if (v21 < 0)
        {
          std::string::size_type v24 = *(void *)(v18 + 8);
LABEL_70:
          std::string::__init_copy_ctor_external((std::string *)v23, *(const std::string::value_type **)v18, v24);
        }
        else
        {
LABEL_46:
          long long v28 = *(_OWORD *)v18;
          *((void *)v23 + 2) = *(void *)(v18 + 16);
          *(_OWORD *)uint64_t v23 = v28;
        }
        long long v41 = *(_OWORD *)(v18 + 24);
        *((void *)v23 + 5) = *(void *)(v18 + 40);
        *(_OWORD *)(v23 + 24) = v41;
        int v20 = v23 + 48;
        goto LABEL_32;
      }
LABEL_31:
      int v20 = std::vector<swift::reflection::FieldInfo>::__push_back_slow_path<swift::reflection::FieldInfo const&>((uint64_t)&__p, v18);
LABEL_32:
      unsigned int v50 = v20;
LABEL_33:
      v18 += 48;
      if (v18 == v19) {
        goto LABEL_86;
      }
    }
  }
  if (v7 != 2) {
    return 0;
  }
  uint64_t v14 = *a1;
  uint64_t v15 = *(unsigned int *)(TypeInfo + 36);

  return swift::reflection::TypeConverter::getReferenceTypeInfo(v14, a3, v15);
}

char *std::vector<swift::reflection::FieldInfo>::__push_back_slow_path<swift::reflection::FieldInfo const&>(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void ***)a1;
  int64_t v3 = *(void ***)(a1 + 8);
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v3 - *(void *)a1) >> 4);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x555555555555555) {
    abort();
  }
  if (0x5555555555555556 * ((uint64_t)(*(void *)(a1 + 16) - (void)v2) >> 4) > v5) {
    unint64_t v5 = 0x5555555555555556 * ((uint64_t)(*(void *)(a1 + 16) - (void)v2) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 16) - (void)v2) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v8 = 0x555555555555555;
  }
  else {
    unint64_t v8 = v5;
  }
  if (v8)
  {
    if (v8 > 0x555555555555555) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    int v9 = (std::string *)operator new(48 * v8);
  }
  else
  {
    int v9 = 0;
  }
  unsigned int v10 = v9 + 2 * v4;
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9 + 2 * v4, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
    uint64_t v2 = *(void ***)a1;
    int64_t v3 = *(void ***)(a1 + 8);
  }
  else
  {
    *(_OWORD *)&v10->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    v10->__r_.__value_.__r.__words[2] = *(void *)(a2 + 16);
  }
  unsigned int v11 = &v9[2 * v8];
  int v12 = v9 + 2 * v4;
  *(_OWORD *)&v12[1].__r_.__value_.__l.__data_ = *(_OWORD *)(a2 + 24);
  v12[1].__r_.__value_.__r.__words[2] = *(void *)(a2 + 40);
  BOOL v13 = (char *)&v10[2];
  if (v3 == v2)
  {
    *(void *)a1 = v10;
    *(void *)(a1 + 8) = v13;
    *(void *)(a1 + 16) = v11;
  }
  else
  {
    do
    {
      long long v14 = *((_OWORD *)v3 - 3);
      v10[-2].__r_.__value_.__r.__words[2] = (std::string::size_type)*(v3 - 4);
      *(_OWORD *)&v10[-2].__r_.__value_.__l.__data_ = v14;
      *(v3 - 5) = 0;
      *(v3 - 4) = 0;
      *(v3 - 6) = 0;
      long long v15 = *(_OWORD *)(v3 - 3);
      v10[-1].__r_.__value_.__r.__words[2] = (std::string::size_type)*(v3 - 1);
      *(_OWORD *)&v10[-1].__r_.__value_.__l.__data_ = v15;
      v10 -= 2;
      v3 -= 6;
    }
    while (v3 != v2);
    uint64_t v2 = *(void ***)a1;
    uint64_t v16 = *(void ***)(a1 + 8);
    *(void *)a1 = v10;
    *(void *)(a1 + 8) = v13;
    *(void *)(a1 + 16) = v11;
    while (v16 != v2)
    {
      if (*((char *)v16 - 25) < 0) {
        operator delete(*(v16 - 6));
      }
      v16 -= 6;
    }
  }
  if (v2) {
    operator delete(v2);
  }
  return v13;
}

void *__swift::__runtime::llvm::DenseMapBase<__swift::__runtime::llvm::DenseMap<std::pair<swift::reflection::TypeRef const*,void *>,swift::reflection::TypeInfo const*,__swift::__runtime::llvm::DenseMapInfo<std::pair<swift::reflection::TypeRef const*,void *>>,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<swift::reflection::TypeRef const*,void *>,swift::reflection::TypeInfo const*>>,std::pair<swift::reflection::TypeRef const*,void *>,swift::reflection::TypeInfo const*,__swift::__runtime::llvm::DenseMapInfo<std::pair<swift::reflection::TypeRef const*,void *>>,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<swift::reflection::TypeRef const*,void *>,swift::reflection::TypeInfo const*>>::InsertIntoBucketImpl<std::pair<swift::reflection::TypeRef const*,void *>>(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4)
{
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
    goto LABEL_8;
  }
  if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
  {
LABEL_8:
    __swift::__runtime::llvm::DenseMap<std::pair<swift::reflection::TypeRef const*,void *>,swift::reflection::TypeInfo const*,__swift::__runtime::llvm::DenseMapInfo<std::pair<swift::reflection::TypeRef const*,void *>>,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<swift::reflection::TypeRef const*,void *>,swift::reflection::TypeInfo const*>>::grow(a1, v7);
    int v9 = 0;
    __swift::__runtime::llvm::DenseMapBase<__swift::__runtime::llvm::DenseMap<std::pair<swift::reflection::TypeRef const*,void *>,swift::reflection::TypeInfo const*,__swift::__runtime::llvm::DenseMapInfo<std::pair<swift::reflection::TypeRef const*,void *>>,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<swift::reflection::TypeRef const*,void *>,swift::reflection::TypeInfo const*>>,std::pair<swift::reflection::TypeRef const*,void *>,swift::reflection::TypeInfo const*,__swift::__runtime::llvm::DenseMapInfo<std::pair<swift::reflection::TypeRef const*,void *>>,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<swift::reflection::TypeRef const*,void *>,swift::reflection::TypeInfo const*>>::LookupBucketFor<std::pair<swift::reflection::TypeRef const*,void *>>((uint64_t *)a1, a3, &v9);
    a4 = v9;
  }
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096 || a4[1] != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  return a4;
}

void __swift::__runtime::llvm::DenseMap<std::pair<swift::reflection::TypeRef const*,void *>,swift::reflection::TypeInfo const*,__swift::__runtime::llvm::DenseMapInfo<std::pair<swift::reflection::TypeRef const*,void *>>,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<swift::reflection::TypeRef const*,void *>,swift::reflection::TypeInfo const*>>::grow(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  unint64_t v4 = *(__swift::__runtime::llvm **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  buffer = (int64x2_t *)__swift::__runtime::llvm::allocate_buffer(24 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = buffer;
  if (!v4)
  {
    *(void *)(a1 + 8) = 0;
    unsigned int v13 = *(_DWORD *)(a1 + 16);
    if (!v13) {
      return;
    }
    unint64_t v14 = 24 * v13 - 24;
    if (v14 >= 0x18)
    {
      unint64_t v26 = v14 / 0x18 + 1;
      long long v15 = (int64x2_t *)((char *)buffer + 24 * (v26 & 0x1FFFFFFFFFFFFFFELL));
      int64x2_t v27 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
      uint64_t v28 = v26 & 0x1FFFFFFFFFFFFFFELL;
      uint64_t v29 = buffer;
      do
      {
        int64x2_t *v29 = v27;
        *(int64x2_t *)((char *)v29 + 24) = v27;
        v29 += 3;
        v28 -= 2;
      }
      while (v28);
      if (v26 == (v26 & 0x1FFFFFFFFFFFFFFELL)) {
        return;
      }
    }
    else
    {
      long long v15 = buffer;
    }
    BOOL v30 = (int64x2_t *)((char *)buffer + 24 * v13);
    int64x2_t v31 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
    do
    {
      int64x2_t *v15 = v31;
      long long v15 = (int64x2_t *)((char *)v15 + 24);
    }
    while (v15 != v30);
    return;
  }
  *(void *)(a1 + 8) = 0;
  unsigned int v10 = *(_DWORD *)(a1 + 16);
  if (v10)
  {
    unint64_t v11 = 24 * v10 - 24;
    if (v11 >= 0x18)
    {
      unint64_t v16 = v11 / 0x18 + 1;
      int v12 = (int64x2_t *)((char *)buffer + 24 * (v16 & 0x1FFFFFFFFFFFFFFELL));
      int64x2_t v17 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
      uint64_t v18 = v16 & 0x1FFFFFFFFFFFFFFELL;
      uint64_t v19 = buffer;
      do
      {
        *uint64_t v19 = v17;
        *(int64x2_t *)((char *)v19 + 24) = v17;
        v19 += 3;
        v18 -= 2;
      }
      while (v18);
      if (v16 == (v16 & 0x1FFFFFFFFFFFFFFELL)) {
        goto LABEL_16;
      }
    }
    else
    {
      int v12 = buffer;
    }
    int v20 = (int64x2_t *)((char *)buffer + 24 * v10);
    int64x2_t v21 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
    do
    {
      *int v12 = v21;
      int v12 = (int64x2_t *)((char *)v12 + 24);
    }
    while (v12 != v20);
  }
LABEL_16:
  if (v3)
  {
    uint64_t v22 = 24 * v3;
    uint64_t v23 = (uint64_t *)v4;
    do
    {
      uint64_t v25 = v23[1];
      if ((*v23 != -4096 || v25 != -4096) && (*v23 != -8192 || v25 != -8192))
      {
        int v32 = 0;
        __swift::__runtime::llvm::DenseMapBase<__swift::__runtime::llvm::DenseMap<std::pair<swift::reflection::TypeRef const*,void *>,swift::reflection::TypeInfo const*,__swift::__runtime::llvm::DenseMapInfo<std::pair<swift::reflection::TypeRef const*,void *>>,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<swift::reflection::TypeRef const*,void *>,swift::reflection::TypeInfo const*>>,std::pair<swift::reflection::TypeRef const*,void *>,swift::reflection::TypeInfo const*,__swift::__runtime::llvm::DenseMapInfo<std::pair<swift::reflection::TypeRef const*,void *>>,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<swift::reflection::TypeRef const*,void *>,swift::reflection::TypeInfo const*>>::LookupBucketFor<std::pair<swift::reflection::TypeRef const*,void *>>((uint64_t *)a1, v23, &v32);
        std::string::size_type v24 = v32;
        *int v32 = *v23;
        v24[1] = v23[1];
        void v24[2] = v23[2];
        ++*(_DWORD *)(a1 + 8);
      }
      v23 += 3;
      v22 -= 24;
    }
    while (v22);
  }
  __swift::__runtime::llvm::deallocate_buffer(v4, (void *)(24 * v3), (std::align_val_t)8uLL);
}

uint64_t swift::reflection::OpaqueTypeRef::get(swift::reflection::OpaqueTypeRef *this)
{
  return swift::reflection::OpaqueTypeRef::Singleton;
}

void *swift::reflection::TypeRef::dump(swift::reflection::TypeRef *this)
{
  uint64_t v2 = &std::cerr;
  int v3 = 0;
  swift::reflection::TypeRefVisitor<PrintTypeRef,void>::visit((PrintTypeRef *)&v2, (uint64_t)this);
  return std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&std::cerr, (uint64_t)"\n", 1);
}

void *swift::reflection::TypeRef::dump(uint64_t a1, void *a2, int a3)
{
  unint64_t v5 = a2;
  int v6 = a3;
  swift::reflection::TypeRefVisitor<PrintTypeRef,void>::visit((PrintTypeRef *)&v5, a1);
  return std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a2, (uint64_t)"\n", 1);
}

void swift::reflection::TypeRefVisitor<PrintTypeRef,void>::visit(PrintTypeRef *a1, uint64_t a2)
{
  if (a2)
  {
    switch(*(_DWORD *)(a2 + 8))
    {
      case 0:
        PrintTypeRef::visitBuiltinTypeRef(a1, (const swift::reflection::BuiltinTypeRef *)a2);
      case 1:
        PrintTypeRef::visitNominalTypeRef(a1, (const swift::reflection::NominalTypeRef *)a2);
      case 2:
        PrintTypeRef::visitBoundGenericTypeRef(a1, (const swift::reflection::BoundGenericTypeRef *)a2);
      case 3:
        PrintTypeRef::visitTupleTypeRef(a1, (const swift::reflection::TupleTypeRef *)a2);
        return;
      case 4:
        PrintTypeRef::visitFunctionTypeRef(a1, (const swift::reflection::FunctionTypeRef *)a2);
        return;
      case 5:
        PrintTypeRef::visitProtocolCompositionTypeRef(a1, (const swift::reflection::ProtocolCompositionTypeRef *)a2);
        return;
      case 6:
        PrintTypeRef::visitConstrainedExistentialTypeRef(a1, (const swift::reflection::ConstrainedExistentialTypeRef *)a2);
        return;
      case 7:
        PrintTypeRef::visitMetatypeTypeRef(a1, (const swift::reflection::MetatypeTypeRef *)a2);
        return;
      case 8:
        char v13 = 20;
        strcpy(__p, "existential_metatype");
        for (int i = *((_DWORD *)a1 + 2); i; --i)
          std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(void **)a1, (uint64_t)" ", 1);
        unint64_t v5 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(void **)a1, (uint64_t)"(", 1);
        uint64_t v6 = 20;
        goto LABEL_63;
      case 9:
        PrintTypeRef::visitGenericTypeParameterTypeRef(a1, (const swift::reflection::GenericTypeParameterTypeRef *)a2);
        return;
      case 0xA:
        PrintTypeRef::visitDependentMemberTypeRef(a1, (const swift::reflection::DependentMemberTypeRef *)a2);
        return;
      case 0xB:
        PrintTypeRef::visitForeignClassTypeRef(a1, (const swift::reflection::ForeignClassTypeRef *)a2);
        return;
      case 0xC:
        PrintTypeRef::visitObjCClassTypeRef(a1, (const swift::reflection::ObjCClassTypeRef *)a2);
        return;
      case 0xD:
        PrintTypeRef::visitObjCProtocolTypeRef(a1, (const swift::reflection::ObjCProtocolTypeRef *)a2);
        return;
      case 0xE:
        PrintTypeRef::visitOpaqueTypeRef(a1, (const swift::reflection::OpaqueTypeRef *)a2);
        return;
      case 0xF:
        PrintTypeRef::visitOpaqueArchetypeTypeRef(a1, (const swift::reflection::OpaqueArchetypeTypeRef *)a2);
        return;
      case 0x10:
        char v13 = 12;
        strcpy(__p, "weak_storage");
        for (int j = *((_DWORD *)a1 + 2); j; --j)
          std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(void **)a1, (uint64_t)" ", 1);
        unint64_t v5 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(void **)a1, (uint64_t)"(", 1);
        uint64_t v6 = 12;
        goto LABEL_63;
      case 0x11:
        char v13 = 15;
        strcpy(__p, "unowned_storage");
        for (int k = *((_DWORD *)a1 + 2); k; --k)
          std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(void **)a1, (uint64_t)" ", 1);
        unint64_t v5 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(void **)a1, (uint64_t)"(", 1);
        uint64_t v6 = 15;
        goto LABEL_63;
      case 0x12:
        char v13 = 17;
        strcpy(__p, "unmanaged_storage");
        for (int m = *((_DWORD *)a1 + 2); m; --m)
          std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(void **)a1, (uint64_t)" ", 1);
        unint64_t v5 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(void **)a1, (uint64_t)"(", 1);
        uint64_t v6 = 17;
        goto LABEL_63;
      case 0x13:
        char v13 = 7;
        strcpy(__p, "sil_box");
        for (int n = *((_DWORD *)a1 + 2); n; --n)
          std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(void **)a1, (uint64_t)" ", 1);
        unint64_t v5 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(void **)a1, (uint64_t)"(", 1);
        uint64_t v6 = 7;
LABEL_63:
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v5, (uint64_t)__p, v6);
        if (v13 < 0) {
          operator delete(*(void **)__p);
        }
        uint64_t v11 = *(void *)(a2 + 16);
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(void **)a1, (uint64_t)"\n", 1);
        *((_DWORD *)a1 + 2) += 2;
        swift::reflection::TypeRefVisitor<PrintTypeRef,void>::visit(a1, v11);
        *((_DWORD *)a1 + 2) -= 2;
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(void **)a1, (uint64_t)")", 1);
        break;
      case 0x14:
        PrintTypeRef::visitSILBoxTypeWithLayoutTypeRef(a1, (const swift::reflection::SILBoxTypeWithLayoutTypeRef *)a2);
        break;
      default:
        return;
    }
  }
}

swift::Demangle::__runtime::Node *swift::reflection::TypeRef::getDemangling(swift::reflection::TypeRef *this, swift::Demangle::__runtime::Demangler *a2)
{
  uint64_t v6 = a2;
  uint64_t v2 = swift::reflection::TypeRefVisitor<DemanglingForTypeRef,swift::Demangle::__runtime::Node *>::visit((DemanglingForTypeRef *)&v6, (uint64_t)this);
  if (!v2) {
    return 0;
  }
  int v3 = v2;
  unint64_t Node = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(v6, 232);
  swift::Demangle::__runtime::Node::addChild(Node, v3, v6);
  return Node;
}

void swift::reflection::TypeRef::mangle(swift::reflection::TypeRef *this@<X0>, swift::Demangle::__runtime::Demangler *a2@<X1>, std::string *a3@<X8>)
{
  int v12 = a2;
  unint64_t v5 = swift::reflection::TypeRefVisitor<DemanglingForTypeRef,swift::Demangle::__runtime::Node *>::visit((DemanglingForTypeRef *)&v12, (uint64_t)this);
  if (v5
    && (uint64_t v6 = v5,
        int v7 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(v12, 232),
        swift::Demangle::__runtime::Node::addChild(v7, v6, v12),
        v7))
  {
    unint64_t Node = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(a2, 236);
    swift::Demangle::__runtime::Node::addChild(Node, v7, a2);
    int v9 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(a2, 99);
    swift::Demangle::__runtime::Node::addChild(v9, v7, a2);
    swift::Demangle::__runtime::mangleNode(v9, v10);
    if (v12)
    {
      char v11 = 0;
      a3->__r_.__value_.__s.__data_[0] = 0;
    }
    else
    {
      if (SHIBYTE(v14) < 0)
      {
        std::string::__init_copy_ctor_external(a3, (const std::string::value_type *)__p, *((std::string::size_type *)&__p + 1));
      }
      else
      {
        *(_OWORD *)&a3->__r_.__value_.__l.__data_ = __p;
        a3->__r_.__value_.__r.__words[2] = v14;
      }
      char v11 = 1;
    }
    a3[1].__r_.__value_.__s.__data_[0] = v11;
    if (SHIBYTE(v14) < 0) {
      operator delete((void *)__p);
    }
  }
  else
  {
    a3->__r_.__value_.__s.__data_[0] = 0;
    a3[1].__r_.__value_.__s.__data_[0] = 0;
  }
}

uint64_t swift::reflection::TypeRef::isConcrete(swift::reflection::TypeRef *this)
{
  v4[0] = 0;
  v4[1] = 0;
  unsigned int v5 = 0;
  int v3 = v4;
  uint64_t v1 = swift::reflection::TypeRefVisitor<TypeRefIsConcrete,BOOL>::visit((uint64_t **)&v3, (uint64_t)this);
  __swift::__runtime::llvm::deallocate_buffer(v4[0], (void *)(16 * v5), (std::align_val_t)8uLL);
  return v1;
}

uint64_t swift::reflection::TypeRefVisitor<TypeRefIsConcrete,BOOL>::visit(uint64_t **a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    while (2)
    {
      uint64_t v4 = 0;
      uint64_t result = 1;
      switch(*(_DWORD *)(v2 + 8))
      {
        case 0:
        case 0xB:
        case 0xC:
        case 0xD:
        case 0xE:
        case 0x14:
          return result;
        case 1:
          uint64_t v2 = *(void *)(v2 + 40);
          if (v2) {
            goto LABEL_6;
          }
          return 1;
        case 2:
          uint64_t v9 = *(void *)(v2 + 40);
          if (v9)
          {
            uint64_t result = swift::reflection::TypeRefVisitor<TypeRefIsConcrete,BOOL>::visit(a1, v9);
            if (!result) {
              return result;
            }
          }
          uint64_t v10 = *(void *)(v2 + 48);
          uint64_t v11 = *(void *)(v2 + 56);
          if (v10 == v11) {
            return 1;
          }
          uint64_t v12 = v10 + 8;
          do
          {
            uint64_t result = swift::reflection::TypeRefVisitor<TypeRefIsConcrete,BOOL>::visit(a1, *(void *)(v12 - 8));
            if (result) {
              BOOL v13 = v12 == v11;
            }
            else {
              BOOL v13 = 1;
            }
            v12 += 8;
          }
          while (!v13);
          return result;
        case 3:
          uint64_t v14 = *(void *)(v2 + 16);
          uint64_t v15 = *(void *)(v2 + 24);
          if (v14 != v15)
          {
            uint64_t v16 = v14 + 8;
            do
            {
              uint64_t result = swift::reflection::TypeRefVisitor<TypeRefIsConcrete,BOOL>::visit(a1, *(void *)(v16 - 8));
              if (result) {
                BOOL v17 = v16 == v15;
              }
              else {
                BOOL v17 = 1;
              }
              v16 += 8;
            }
            while (!v17);
          }
          return result;
        case 4:
          uint64_t v7 = *(void *)(v2 + 16);
          uint64_t v8 = *(void *)(v2 + 24);
          if (v7 == v8) {
            goto LABEL_13;
          }
          do
          {
            if ((swift::reflection::TypeRefVisitor<TypeRefIsConcrete,BOOL>::visit(a1, *(void *)(v7 + 16)) & 1) == 0) {
              return 0;
            }
            v7 += 32;
          }
          while (v7 != v8);
LABEL_13:
          uint64_t v2 = *(void *)(v2 + 40);
          if (!v2) {
            return 0;
          }
          continue;
        case 5:
          uint64_t v18 = *(void **)(v2 + 16);
          uint64_t v19 = *(void **)(v2 + 24);
          if (v18 == v19) {
            goto LABEL_39;
          }
          break;
        case 6:
        case 7:
        case 8:
        case 0x10:
        case 0x11:
        case 0x12:
        case 0x13:
          uint64_t v6 = (uint64_t *)(v2 + 16);
          goto LABEL_5;
        case 9:
          int64x2_t v21 = *a1;
          uint64_t v23 = *(void *)(v2 + 12);
          uint64_t v24 = 0;
          if (__swift::__runtime::llvm::DenseMapBase<__swift::__runtime::llvm::DenseMap<std::pair<unsigned int,unsigned int>,swift::reflection::TypeRef const*,__swift::__runtime::llvm::DenseMapInfo<std::pair<unsigned int,unsigned int>>,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<unsigned int,unsigned int>,swift::reflection::TypeRef const*>>,std::pair<unsigned int,unsigned int>,swift::reflection::TypeRef const*,__swift::__runtime::llvm::DenseMapInfo<std::pair<unsigned int,unsigned int>>,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<unsigned int,unsigned int>,swift::reflection::TypeRef const*>>::LookupBucketFor<std::pair<unsigned int,unsigned int>>(v21, (int *)&v23, &v24))uint64_t v22 = v24; {
          else
          }
            uint64_t v22 = *v21 + 16 * *((unsigned int *)v21 + 4);
          return v22 != **a1 + 16 * *((unsigned int *)*a1 + 4);
        case 0xA:
          uint64_t v6 = (uint64_t *)(v2 + 40);
LABEL_5:
          uint64_t v2 = *v6;
LABEL_6:
          if (!v2) {
            return 0;
          }
          continue;
        default:
          return v4;
      }
      break;
    }
    while ((swift::reflection::TypeRefVisitor<TypeRefIsConcrete,BOOL>::visit(a1, *v18) & 1) != 0)
    {
      if (++v18 == v19)
      {
LABEL_39:
        uint64_t v20 = *(void *)(v2 + 40);
        if (!v20) {
          return 1;
        }
        uint64_t result = swift::reflection::TypeRefVisitor<TypeRefIsConcrete,BOOL>::visit(a1, v20);
        if (result) {
          return 1;
        }
        return result;
      }
    }
  }
  return 0;
}

uint64_t swift::reflection::TypeRef::isConcreteAfterSubstitutions(uint64_t a1, uint64_t *a2)
{
  int v3 = a2;
  return swift::reflection::TypeRefVisitor<TypeRefIsConcrete,BOOL>::visit(&v3, a1);
}

uint64_t swift::reflection::NominalTypeTrait::getDepth(swift::reflection::NominalTypeTrait *this)
{
  unsigned int v1 = 0;
  uint64_t v2 = *((void *)this + 3);
  if (v2)
  {
    while (2)
    {
      int v3 = 0;
      while (1)
      {
        int v4 = *(_DWORD *)(v2 + 8);
        if (v4 != 1) {
          break;
        }
        ++v3;
        uint64_t v2 = *(void *)(v2 + 40);
        if (!v2) {
          return v3 + v1;
        }
      }
      if (v4 != 2) {
        return v3 + v1;
      }
      v1 += v3 + 1;
      uint64_t v2 = *(void *)(v2 + 40);
      if (v2) {
        continue;
      }
      break;
    }
  }
  return v1;
}

void swift::reflection::TypeRef::getSubstMap(swift::reflection::TypeRef *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v45 = 0;
  uint64_t v46 = 0;
  unsigned int v47 = 0;
  int v4 = *((_DWORD *)this + 2);
  if (v4 == 2)
  {
    uint64_t v6 = (uint64_t *)*((void *)this + 6);
    uint64_t v7 = (uint64_t *)*((void *)this + 7);
    if (v6 == v7)
    {
LABEL_35:
      BOOL v30 = (swift::reflection::TypeRef *)*((void *)this + 5);
      if (v30)
      {
        swift::reflection::TypeRef::getSubstMap((uint64_t *)&v41, v30);
        if (!v44)
        {
LABEL_50:
          *(unsigned char *)a2 = 0;
          *(unsigned char *)(a2 + 24) = 0;
          goto LABEL_69;
        }
        if (v42)
        {
          if (v43)
          {
            uint64_t v31 = 16 * v43;
            int v32 = v41;
            while (1)
            {
              int v33 = *((_DWORD *)v32 + 1);
              if ((*(_DWORD *)v32 != -1 || v33 != -1) && (*(_DWORD *)v32 != -2 || v33 != -2)) {
                break;
              }
              int v32 = (__swift::__runtime::llvm *)((char *)v32 + 16);
              v31 -= 16;
              if (!v31) {
                goto LABEL_67;
              }
            }
          }
          else
          {
            int v32 = v41;
          }
          unint64_t v36 = (__swift::__runtime::llvm *)((char *)v41 + 16 * v43);
          if (v32 != v36)
          {
LABEL_54:
            uint64_t v48 = 0;
            if ((__swift::__runtime::llvm::DenseMapBase<__swift::__runtime::llvm::DenseMap<std::pair<unsigned int,unsigned int>,swift::reflection::TypeRef const*,__swift::__runtime::llvm::DenseMapInfo<std::pair<unsigned int,unsigned int>>,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<unsigned int,unsigned int>,swift::reflection::TypeRef const*>>,std::pair<unsigned int,unsigned int>,swift::reflection::TypeRef const*,__swift::__runtime::llvm::DenseMapInfo<std::pair<unsigned int,unsigned int>>,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<unsigned int,unsigned int>,swift::reflection::TypeRef const*>>::LookupBucketFor<std::pair<unsigned int,unsigned int>>((uint64_t *)&v45, (int *)v32, &v48) & 1) == 0)
            {
              unint64_t v37 = __swift::__runtime::llvm::DenseMapBase<__swift::__runtime::llvm::DenseMap<std::pair<unsigned int,unsigned int>,swift::reflection::TypeRef const*,__swift::__runtime::llvm::DenseMapInfo<std::pair<unsigned int,unsigned int>>,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<unsigned int,unsigned int>,swift::reflection::TypeRef const*>>,std::pair<unsigned int,unsigned int>,swift::reflection::TypeRef const*,__swift::__runtime::llvm::DenseMapInfo<std::pair<unsigned int,unsigned int>>,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<unsigned int,unsigned int>,swift::reflection::TypeRef const*>>::InsertIntoBucketImpl<std::pair<unsigned int,unsigned int>>((uint64_t)&v45, (uint64_t)v32, (int *)v32, v48);
              void *v37 = *(void *)v32;
              v37[1] = *((void *)v32 + 1);
            }
            while (1)
            {
              int v32 = (__swift::__runtime::llvm *)((char *)v32 + 16);
              if (v32 == v36) {
                break;
              }
              int v38 = *((_DWORD *)v32 + 1);
              if ((*(_DWORD *)v32 != -1 || v38 != -1) && (*(_DWORD *)v32 != -2 || v38 != -2))
              {
                if (v32 != v36) {
                  goto LABEL_54;
                }
                break;
              }
            }
            if (!v44) {
              goto LABEL_68;
            }
          }
        }
LABEL_67:
        __swift::__runtime::llvm::deallocate_buffer(v41, (void *)(16 * v43), (std::align_val_t)8uLL);
      }
LABEL_68:
      *(void *)a2 = v45;
      *(void *)(a2 + 8) = v46;
      uint64_t v45 = 0;
      uint64_t v46 = 0;
      *(_DWORD *)(a2 + 16) = v47;
      unsigned int v47 = 0;
      *(unsigned char *)(a2 + 24) = 1;
      goto LABEL_69;
    }
    unsigned int Depth = swift::reflection::NominalTypeTrait::getDepth((swift::reflection::TypeRef *)((char *)this + 16));
    uint64_t v9 = 0;
    uint64_t v10 = Depth;
    unint64_t v11 = (unint64_t)(37 * Depth) << 32;
    while (1)
    {
      uint64_t v20 = *v6;
      long long v41 = 0;
      uint64_t v42 = 0;
      unsigned int v43 = 0;
      uint64_t v48 = &v41;
      char v21 = swift::reflection::TypeRefVisitor<TypeRefIsConcrete,BOOL>::visit((uint64_t **)&v48, v20);
      __swift::__runtime::llvm::deallocate_buffer(v41, (void *)(16 * v43), (std::align_val_t)8uLL);
      if ((v21 & 1) == 0) {
        goto LABEL_50;
      }
      long long v41 = (__swift::__runtime::llvm *)(v10 | (v9 << 32));
      uint64_t v42 = v20;
      if (v47)
      {
        unint64_t v12 = (v11 | (37 * v9)) + ~((unint64_t)(37 * v9) << 32);
        unint64_t v13 = (v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13);
        unint64_t v14 = (9 * (v13 ^ (v13 >> 8))) ^ ((9 * (v13 ^ (v13 >> 8))) >> 15);
        unsigned int v15 = (v47 - 1) & (((v14 + ~(v14 << 27)) >> 31) ^ (v14 + ~(v14 << 27)));
        uint64_t v16 = (_DWORD *)((char *)v45 + 16 * v15);
        int v17 = *v16;
        int v18 = v16[1];
        if (v10 == *v16 && v9 == v18) {
          goto LABEL_12;
        }
        uint64_t v24 = 0;
        int v25 = 1;
        while (v17 != -1 || v18 != -1)
        {
          if (v24) {
            BOOL v26 = 0;
          }
          else {
            BOOL v26 = v18 == -2;
          }
          if (v26 && v17 == -2) {
            uint64_t v24 = v16;
          }
          unsigned int v28 = v15 + v25++;
          unsigned int v15 = v28 & (v47 - 1);
          uint64_t v16 = (_DWORD *)((char *)v45 + 16 * v15);
          int v17 = *v16;
          int v18 = v16[1];
          if (v10 == *v16 && v9 == v18) {
            goto LABEL_12;
          }
        }
        if (v24) {
          uint64_t v22 = v24;
        }
        else {
          uint64_t v22 = v16;
        }
      }
      else
      {
        uint64_t v22 = 0;
      }
      uint64_t v23 = __swift::__runtime::llvm::DenseMapBase<__swift::__runtime::llvm::DenseMap<std::pair<unsigned int,unsigned int>,swift::reflection::TypeRef const*,__swift::__runtime::llvm::DenseMapInfo<std::pair<unsigned int,unsigned int>>,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<unsigned int,unsigned int>,swift::reflection::TypeRef const*>>,std::pair<unsigned int,unsigned int>,swift::reflection::TypeRef const*,__swift::__runtime::llvm::DenseMapInfo<std::pair<unsigned int,unsigned int>>,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<unsigned int,unsigned int>,swift::reflection::TypeRef const*>>::InsertIntoBucketImpl<std::pair<unsigned int,unsigned int>>((uint64_t)&v45, (uint64_t)&v41, (int *)&v41, v22);
      void *v23 = v41;
      v23[1] = v42;
LABEL_12:
      uint64_t v9 = (v9 + 1);
      if (++v6 == v7) {
        goto LABEL_35;
      }
    }
  }
  if (v4 != 1) {
    goto LABEL_68;
  }
  unsigned int v5 = (swift::reflection::TypeRef *)*((void *)this + 5);
  if (v5)
  {
    ((void (*)(swift::reflection::TypeRef *__hidden))swift::reflection::TypeRef::getSubstMap)(v5);
  }
  else
  {
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(_DWORD *)(a2 + 16) = 0;
    *(unsigned char *)(a2 + 24) = 1;
    __swift::__runtime::llvm::deallocate_buffer(0, 0, (std::align_val_t)8uLL);
  }
LABEL_69:
  __swift::__runtime::llvm::deallocate_buffer(v45, (void *)(16 * v47), (std::align_val_t)8uLL);
}

BOOL swift::reflection::NominalTypeTrait::isStruct(swift::reflection::NominalTypeTrait *this)
{
  int v1 = *((char *)this + 23);
  if (v1 >= 0) {
    return swift::Demangle::__runtime::isStruct((uint64_t)this, v1);
  }
  else {
    return swift::Demangle::__runtime::isStruct(*(void *)this, *((void *)this + 1));
  }
}

BOOL swift::reflection::NominalTypeTrait::isEnum(swift::reflection::NominalTypeTrait *this)
{
  int v1 = *((char *)this + 23);
  if (v1 >= 0) {
    return swift::Demangle::__runtime::isEnum((uint64_t)this, v1);
  }
  else {
    return swift::Demangle::__runtime::isEnum(*(void *)this, *((void *)this + 1));
  }
}

BOOL swift::reflection::NominalTypeTrait::isClass(swift::reflection::NominalTypeTrait *this)
{
  int v1 = *((char *)this + 23);
  if (v1 >= 0) {
    return swift::Demangle::__runtime::isClass((uint64_t)this, v1);
  }
  else {
    return swift::Demangle::__runtime::isClass(*(void *)this, *((void *)this + 1));
  }
}

BOOL swift::reflection::NominalTypeTrait::isProtocol(swift::reflection::NominalTypeTrait *this)
{
  int v1 = *((char *)this + 23);
  if (v1 >= 0) {
    return swift::Demangle::__runtime::isProtocol((uint64_t)this, v1);
  }
  else {
    return swift::Demangle::__runtime::isProtocol(*(void *)this, *((void *)this + 1));
  }
}

BOOL swift::reflection::NominalTypeTrait::isAlias(swift::reflection::NominalTypeTrait *this)
{
  int v1 = *((char *)this + 23);
  if (v1 >= 0) {
    return swift::Demangle::__runtime::isAlias((uint64_t)this, v1);
  }
  else {
    return swift::Demangle::__runtime::isAlias(*(void *)this, *((void *)this + 1));
  }
}

uint64_t swift::reflection::TypeRef::subst(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  __swift::__runtime::llvm::deallocate_buffer(0, 0, (std::align_val_t)8uLL);
  unint64_t v6 = *((unsigned int *)a3 + 4);
  if (v6)
  {
    buffer = (__swift::__runtime::llvm *)__swift::__runtime::llvm::allocate_buffer(16 * v6, (std::align_val_t)8uLL);
    uint64_t v8 = buffer;
    uint64_t v9 = 0;
    uint64_t v22 = a3[1];
    uint64_t v10 = *a3;
    do
    {
      uint64_t v11 = *(void *)(v10 + v9);
      *(void *)((char *)buffer + v9) = v11;
      if ((v11 & HIDWORD(v11)) != 0xFFFFFFFF && (v11 != -2 || HIDWORD(v11) != -2)) {
        *(void *)((char *)buffer + v9 + 8) = *(void *)(v10 + v9 + 8);
      }
      v9 += 16;
    }
    while (16 * v6 != v9);
  }
  else
  {
    uint64_t v8 = 0;
    uint64_t v22 = 0;
  }
  uint64_t v24 = 0;
  uint64_t v25 = 0;
  uint64_t v23 = a2;
  __swift::__runtime::llvm::deallocate_buffer(0, 0, (std::align_val_t)8uLL);
  unsigned int v26 = v6;
  if (v6)
  {
    unint64_t v13 = (void *)(16 * v6);
    unint64_t v14 = (__swift::__runtime::llvm *)__swift::__runtime::llvm::allocate_buffer(16 * v6, (std::align_val_t)8uLL);
    unint64_t v15 = 0;
    uint64_t v24 = v14;
    uint64_t v25 = v22;
    uint64_t v16 = (void *)((char *)v8 + 8);
    int v17 = (void *)((char *)v14 + 8);
    do
    {
      uint64_t v18 = *(v16 - 1);
      *(v17 - 1) = v18;
      if ((v18 & HIDWORD(v18)) != 0xFFFFFFFF && (v18 != -2 || HIDWORD(v18) != -2)) {
        void *v17 = *v16;
      }
      ++v15;
      v16 += 2;
      v17 += 2;
    }
    while (v15 < v6);
  }
  else
  {
    unint64_t v13 = 0;
    uint64_t v24 = 0;
    uint64_t v25 = 0;
  }
  char v27 = 0;
  uint64_t v20 = swift::reflection::TypeRefVisitor<TypeRefSubstitution,swift::reflection::TypeRef const*>::visit((uint64_t)&v23, a1);
  __swift::__runtime::llvm::deallocate_buffer(v24, (void *)(16 * v26), (std::align_val_t)8uLL);
  __swift::__runtime::llvm::deallocate_buffer(v8, v13, (std::align_val_t)8uLL);
  return v20;
}

uint64_t swift::reflection::TypeRefVisitor<TypeRefSubstitution,swift::reflection::TypeRef const*>::visit(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  if (a2)
  {
    switch(*(_DWORD *)(a2 + 8))
    {
      case 0:
      case 5:
      case 8:
      case 0xB:
      case 0xC:
      case 0xD:
      case 0xE:
      case 0x14:
        return v2;
      case 1:
        if (!*(void *)(a2 + 40)) {
          return v2;
        }
        uint64_t v12 = *(void *)a1;
        uint64_t v13 = swift::reflection::TypeRefVisitor<TypeRefSubstitution,swift::reflection::TypeRef const*>::visit(a1);
        return swift::reflection::NominalTypeRef::create<swift::reflection::TypeRefBuilder>(v12, v2 + 16, v13);
      case 2:
        return TypeRefSubstitution::visitBoundGenericTypeRef((TypeRefSubstitution *)a1, (const swift::reflection::BoundGenericTypeRef *)a2);
      case 3:
        return TypeRefSubstitution::visitTupleTypeRef((TypeRefSubstitution *)a1, (const swift::reflection::TupleTypeRef *)a2);
      case 4:
        return TypeRefSubstitution::visitFunctionTypeRef((TypeRefSubstitution *)a1, (const swift::reflection::FunctionTypeRef *)a2);
      case 6:
        return TypeRefSubstitution::visitConstrainedExistentialTypeRef((TypeRefSubstitution *)a1, (const swift::reflection::ConstrainedExistentialTypeRef *)a2);
      case 7:
        v22[0] = 0;
        v22[1] = 0;
        unsigned int v23 = 0;
        char v21 = v22;
        char v14 = swift::reflection::TypeRefVisitor<TypeRefIsConcrete,BOOL>::visit((uint64_t **)&v21, a2);
        __swift::__runtime::llvm::deallocate_buffer(v22[0], (void *)(16 * v23), (std::align_val_t)8uLL);
        if (v14) {
          return v2;
        }
        uint64_t v15 = *(void *)a1;
        uint64_t v16 = swift::reflection::TypeRefVisitor<TypeRefSubstitution,swift::reflection::TypeRef const*>::visit(a1);
        return swift::reflection::MetatypeTypeRef::create<swift::reflection::TypeRefBuilder>(v15, v16, 1);
      case 9:
        char v21 = *(__swift::__runtime::llvm ***)(a2 + 12);
        v22[0] = 0;
        if (!__swift::__runtime::llvm::DenseMapBase<__swift::__runtime::llvm::DenseMap<std::pair<unsigned int,unsigned int>,swift::reflection::TypeRef const*,__swift::__runtime::llvm::DenseMapInfo<std::pair<unsigned int,unsigned int>>,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<unsigned int,unsigned int>,swift::reflection::TypeRef const*>>,std::pair<unsigned int,unsigned int>,swift::reflection::TypeRef const*,__swift::__runtime::llvm::DenseMapInfo<std::pair<unsigned int,unsigned int>>,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<unsigned int,unsigned int>,swift::reflection::TypeRef const*>>::LookupBucketFor<std::pair<unsigned int,unsigned int>>((uint64_t *)(a1 + 8), (int *)&v21, v22))return v2; {
        unsigned int v5 = v22[0];
        }
        if (v22[0] == (__swift::__runtime::llvm *)(*(void *)(a1 + 8) + 16 * *(unsigned int *)(a1 + 24))) {
          return v2;
        }
        *(unsigned char *)(a1 + 32) = 1;
        uint64_t v6 = *((void *)v5 + 1);
        v22[0] = *(__swift::__runtime::llvm **)a1;
        return swift::reflection::TypeRefVisitor<ThickenMetatype,swift::reflection::TypeRef const*>::visit((ThickenMetatype *)v22, v6);
      case 0xA:
        return TypeRefSubstitution::visitDependentMemberTypeRef((swift::reflection::TypeRefBuilder **)a1, (const swift::reflection::DependentMemberTypeRef *)a2);
      case 0xF:
        return TypeRefSubstitution::visitOpaqueArchetypeTypeRef((TypeRefSubstitution *)a1, (const swift::reflection::OpaqueArchetypeTypeRef *)a2);
      case 0x10:
        uint64_t v8 = *(void *)a1;
        uint64_t v9 = swift::reflection::TypeRefVisitor<TypeRefSubstitution,swift::reflection::TypeRef const*>::visit(a1);
        return swift::reflection::WeakStorageTypeRef::create<swift::reflection::TypeRefBuilder>(v8, v9);
      case 0x11:
        uint64_t v17 = *(void *)a1;
        uint64_t v18 = swift::reflection::TypeRefVisitor<TypeRefSubstitution,swift::reflection::TypeRef const*>::visit(a1);
        return swift::reflection::UnownedStorageTypeRef::create<swift::reflection::TypeRefBuilder>(v17, v18);
      case 0x12:
        uint64_t v19 = *(void *)a1;
        uint64_t v20 = swift::reflection::TypeRefVisitor<TypeRefSubstitution,swift::reflection::TypeRef const*>::visit(a1);
        return swift::reflection::UnmanagedStorageTypeRef::create<swift::reflection::TypeRefBuilder>(v19, v20);
      case 0x13:
        uint64_t v10 = *(void *)a1;
        uint64_t v11 = swift::reflection::TypeRefVisitor<TypeRefSubstitution,swift::reflection::TypeRef const*>::visit(a1);
        return swift::reflection::SILBoxTypeRef::create<swift::reflection::TypeRefBuilder>(v10, v11);
      default:
        return 0;
    }
  }
  return v2;
}

uint64_t swift::reflection::TypeRef::subst(uint64_t a1, uint64_t a2, uint64_t *a3, unsigned char *a4)
{
  __swift::__runtime::llvm::deallocate_buffer(0, 0, (std::align_val_t)8uLL);
  unint64_t v8 = *((unsigned int *)a3 + 4);
  if (v8)
  {
    buffer = (__swift::__runtime::llvm *)__swift::__runtime::llvm::allocate_buffer(16 * v8, (std::align_val_t)8uLL);
    uint64_t v10 = buffer;
    uint64_t v11 = 0;
    uint64_t v24 = a3[1];
    uint64_t v12 = *a3;
    do
    {
      uint64_t v13 = *(void *)(v12 + v11);
      *(void *)((char *)buffer + v11) = v13;
      if ((v13 & HIDWORD(v13)) != 0xFFFFFFFF && (v13 != -2 || HIDWORD(v13) != -2)) {
        *(void *)((char *)buffer + v11 + 8) = *(void *)(v12 + v11 + 8);
      }
      v11 += 16;
    }
    while (16 * v8 != v11);
  }
  else
  {
    uint64_t v10 = 0;
    uint64_t v24 = 0;
  }
  unsigned int v26 = 0;
  uint64_t v27 = 0;
  uint64_t v25 = a2;
  __swift::__runtime::llvm::deallocate_buffer(0, 0, (std::align_val_t)8uLL);
  unsigned int v28 = v8;
  if (v8)
  {
    uint64_t v15 = (void *)(16 * v8);
    uint64_t v16 = (__swift::__runtime::llvm *)__swift::__runtime::llvm::allocate_buffer(16 * v8, (std::align_val_t)8uLL);
    unint64_t v17 = 0;
    unsigned int v26 = v16;
    uint64_t v27 = v24;
    uint64_t v18 = (void *)((char *)v10 + 8);
    uint64_t v19 = (void *)((char *)v16 + 8);
    do
    {
      uint64_t v20 = *(v18 - 1);
      *(v19 - 1) = v20;
      if ((v20 & HIDWORD(v20)) != 0xFFFFFFFF && (v20 != -2 || HIDWORD(v20) != -2)) {
        *uint64_t v19 = *v18;
      }
      ++v17;
      v18 += 2;
      v19 += 2;
    }
    while (v17 < v8);
  }
  else
  {
    uint64_t v15 = 0;
    unsigned int v26 = 0;
    uint64_t v27 = 0;
  }
  char v29 = 0;
  __swift::__runtime::llvm::deallocate_buffer(v10, v15, (std::align_val_t)8uLL);
  uint64_t v22 = swift::reflection::TypeRefVisitor<TypeRefSubstitution,swift::reflection::TypeRef const*>::visit((uint64_t)&v25, a1);
  *a4 = v29;
  __swift::__runtime::llvm::deallocate_buffer(v26, (void *)(16 * v28), (std::align_val_t)8uLL);
  return v22;
}

uint64_t swift::reflection::TypeRef::deriveSubstitutions(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a2;
  int v6 = *(_DWORD *)(a2 + 8);
  BOOL v7 = a2 == 0;
  if (a2)
  {
LABEL_2:
    if (v6 != 1) {
      goto LABEL_3;
    }
    if (a3 && *(_DWORD *)(a3 + 8) == 1)
    {
      uint64_t v9 = *(void *)(v4 + 40);
      uint64_t v10 = *(void *)(a3 + 40);
      if ((v9 == 0) != (v10 != 0))
      {
        uint64_t v11 = *(unsigned __int8 *)(v4 + 39);
        if ((v11 & 0x80u) == 0) {
          uint64_t v12 = *(unsigned __int8 *)(v4 + 39);
        }
        else {
          uint64_t v12 = *(void *)(v4 + 24);
        }
        uint64_t v13 = *(unsigned __int8 *)(a3 + 39);
        int v14 = (char)v13;
        if ((v13 & 0x80u) != 0) {
          uint64_t v13 = *(void *)(a3 + 24);
        }
        if (v12 == v13)
        {
          uint64_t v15 = (const void **)(v4 + 16);
          if (v14 >= 0) {
            uint64_t v16 = (unsigned __int8 *)(a3 + 16);
          }
          else {
            uint64_t v16 = *(unsigned __int8 **)(a3 + 16);
          }
          if ((v11 & 0x80) == 0)
          {
            if (*(unsigned char *)(v4 + 39))
            {
              while (*(unsigned __int8 *)v15 == *v16)
              {
                uint64_t v15 = (const void **)((char *)v15 + 1);
                ++v16;
                if (!--v11) {
                  return !v9 || swift::reflection::TypeRef::deriveSubstitutions(a1, v9, v10);
                }
              }
              return 0;
            }
            return !v9 || swift::reflection::TypeRef::deriveSubstitutions(a1, v9, v10);
          }
          if (!memcmp(*v15, v16, *(void *)(v4 + 24))) {
            return !v9 || swift::reflection::TypeRef::deriveSubstitutions(a1, v9, v10);
          }
        }
      }
      return 0;
    }
    return v4 == a3;
  }
  while (1)
  {
LABEL_3:
    if (!v7 && v6 == 2 && a3 && *(_DWORD *)(a3 + 8) == 2)
    {
      uint64_t v28 = *(void *)(v4 + 40);
      uint64_t v29 = *(void *)(a3 + 40);
      if ((v28 == 0) == (v29 != 0)) {
        return 0;
      }
      uint64_t v30 = *(unsigned __int8 *)(v4 + 39);
      if ((v30 & 0x80u) == 0) {
        uint64_t v31 = *(unsigned __int8 *)(v4 + 39);
      }
      else {
        uint64_t v31 = *(void *)(v4 + 24);
      }
      uint64_t v32 = *(unsigned __int8 *)(a3 + 39);
      int v33 = (char)v32;
      if ((v32 & 0x80u) != 0) {
        uint64_t v32 = *(void *)(a3 + 24);
      }
      if (v31 != v32) {
        return 0;
      }
      uint64_t v34 = (const void **)(v4 + 16);
      if (v33 >= 0) {
        uint64_t v35 = (unsigned __int8 *)(a3 + 16);
      }
      else {
        uint64_t v35 = *(unsigned __int8 **)(a3 + 16);
      }
      if ((v30 & 0x80) != 0)
      {
        if (memcmp(*v34, v35, *(void *)(v4 + 24))) {
          return 0;
        }
      }
      else if (*(unsigned char *)(v4 + 39))
      {
        while (*(unsigned __int8 *)v34 == *v35)
        {
          uint64_t v34 = (const void **)((char *)v34 + 1);
          ++v35;
          if (!--v30) {
            goto LABEL_95;
          }
        }
        return 0;
      }
LABEL_95:
      unint64_t v46 = *(void *)(v4 + 56) - *(void *)(v4 + 48);
      if (v46 != *(void *)(a3 + 56) - *(void *)(a3 + 48)) {
        return 0;
      }
      if (v28)
      {
        if (!swift::reflection::TypeRef::deriveSubstitutions(a1, v28, v29)) {
          return 0;
        }
        unint64_t v46 = *(void *)(v4 + 56) - *(void *)(v4 + 48);
      }
      if ((v46 & 0x7FFFFFFF8) == 0) {
        return 1;
      }
      if (!swift::reflection::TypeRef::deriveSubstitutions(a1, **(void **)(v4 + 48), **(void **)(a3 + 48)))return 0; {
      unint64_t v18 = (v46 >> 3);
      }
      uint64_t v47 = 1;
      do
      {
        unint64_t v20 = v47;
        if (v18 == v47) {
          break;
        }
        char v48 = swift::reflection::TypeRef::deriveSubstitutions(a1, *(void *)(*(void *)(v4 + 48) + 8 * v47), *(void *)(*(void *)(a3 + 48) + 8 * v47));
        uint64_t v47 = v20 + 1;
      }
      while ((v48 & 1) != 0);
      return v20 >= v18;
    }
    if (!v7 && v6 == 3)
    {
      if (!a3 || *(_DWORD *)(a3 + 8) != 3) {
        return v4 == a3;
      }
      uint64_t v17 = *(void *)(v4 + 24) - *(void *)(v4 + 16);
      if (v17 >> 3 != (uint64_t)(*(void *)(a3 + 24) - *(void *)(a3 + 16)) >> 3) {
        return 0;
      }
      if ((v17 & 0x7FFFFFFF8) == 0) {
        return 1;
      }
      if (!swift::reflection::TypeRef::deriveSubstitutions(a1, **(void **)(v4 + 16), **(void **)(a3 + 16)))return 0; {
      unint64_t v18 = ((unint64_t)v17 >> 3);
      }
      uint64_t v19 = 1;
      do
      {
        unint64_t v20 = v19;
        if (v18 == v19) {
          break;
        }
        char v21 = swift::reflection::TypeRef::deriveSubstitutions(a1, *(void *)(*(void *)(v4 + 16) + 8 * v19), *(void *)(*(void *)(a3 + 16) + 8 * v19));
        uint64_t v19 = v20 + 1;
      }
      while ((v21 & 1) != 0);
      return v20 >= v18;
    }
    if (!v7 && v6 == 4)
    {
      if (!a3 || *(_DWORD *)(a3 + 8) != 4) {
        return v4 == a3;
      }
      uint64_t v24 = *(unsigned char **)(v4 + 16);
      unsigned int v23 = *(unsigned char **)(v4 + 24);
      uint64_t v25 = v23 - v24;
      if (v23 == v24)
      {
        uint64_t v27 = 0;
        unsigned int v26 = 0;
      }
      else
      {
        if (v25 < 0) {
          goto LABEL_109;
        }
        unsigned int v26 = (char *)operator new(v23 - v24);
        uint64_t v27 = &v26[32 * (v25 >> 5)];
        memcpy(v26, v24, v25 - 4);
      }
      int v38 = *(unsigned char **)(a3 + 16);
      unint64_t v37 = *(unsigned char **)(a3 + 24);
      uint64_t v39 = v37 - v38;
      if (v37 == v38)
      {
        long long v41 = 0;
        char v40 = 0;
LABEL_80:
        uint64_t v42 = (v27 - v26) >> 5;
        if (v42 == (v41 - (char *)v40) >> 5)
        {
          if (v27 != v26)
          {
            unsigned int v43 = v26 + 16;
            char v44 = v40 + 2;
            while ((swift::reflection::TypeRef::deriveSubstitutions(a1, *v43, *v44) & 1) != 0)
            {
              v43 += 4;
              v44 += 4;
              if (!--v42) {
                goto LABEL_85;
              }
            }
            uint64_t v22 = 0;
LABEL_88:
            operator delete(v40);
LABEL_89:
            if (v26) {
              operator delete(v26);
            }
            return v22;
          }
LABEL_85:
          uint64_t v22 = swift::reflection::TypeRef::deriveSubstitutions(a1, *(void *)(v4 + 40), *(void *)(a3 + 40));
        }
        else
        {
          uint64_t v22 = 0;
        }
        if (!v40) {
          goto LABEL_89;
        }
        goto LABEL_88;
      }
      if ((v39 & 0x8000000000000000) == 0)
      {
        char v40 = operator new(v37 - v38);
        long long v41 = (char *)&v40[4 * (v39 >> 5)];
        memcpy(v40, v38, v39 - 4);
        goto LABEL_80;
      }
LABEL_109:
      abort();
    }
    if (v7 || v6 != 7) {
      break;
    }
    if (!a3 || *(_DWORD *)(a3 + 8) != 7) {
      return v4 == a3;
    }
LABEL_17:
    a3 = *(void *)(a3 + 16);
    uint64_t v4 = *(void *)(v4 + 16);
    int v6 = *(_DWORD *)(v4 + 8);
    BOOL v7 = v4 == 0;
    if (v4) {
      goto LABEL_2;
    }
  }
  if (!v7 && (v6 - 19) >= 0xFFFFFFFD)
  {
    if (!a3) {
      return v4 == a3;
    }
    int v8 = *(_DWORD *)(a3 + 8);
    if ((v8 - 19) < 0xFFFFFFFD) {
      return v4 == a3;
    }
    if (v6 != v8) {
      return 0;
    }
    goto LABEL_17;
  }
  if (v6 != 10)
  {
    if (v7 || v6 != 9) {
      return v4 == a3;
    }
    uint64_t v50 = *(void *)(v4 + 12);
    uint64_t v45 = __swift::__runtime::llvm::DenseMapBase<__swift::__runtime::llvm::DenseMap<std::pair<unsigned int,unsigned int>,swift::reflection::TypeRef const*,__swift::__runtime::llvm::DenseMapInfo<std::pair<unsigned int,unsigned int>>,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<unsigned int,unsigned int>,swift::reflection::TypeRef const*>>,std::pair<unsigned int,unsigned int>,swift::reflection::TypeRef const*,__swift::__runtime::llvm::DenseMapInfo<std::pair<unsigned int,unsigned int>>,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<unsigned int,unsigned int>,swift::reflection::TypeRef const*>>::find(a1, (int *)&v50);
    if (*(void *)a1 + 16 * *(unsigned int *)(a1 + 16) != v45) {
      return *(void *)(v45 + 8) == a3;
    }
    *(void *)__swift::__runtime::llvm::DenseMapBase<__swift::__runtime::llvm::DenseMap<std::pair<unsigned int,unsigned int>,swift::reflection::TypeRef const*,__swift::__runtime::llvm::DenseMapInfo<std::pair<unsigned int,unsigned int>>,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<unsigned int,unsigned int>,swift::reflection::TypeRef const*>>,std::pair<unsigned int,unsigned int>,swift::reflection::TypeRef const*,__swift::__runtime::llvm::DenseMapInfo<std::pair<unsigned int,unsigned int>>,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<unsigned int,unsigned int>,swift::reflection::TypeRef const*>>::operator[]((uint64_t *)a1, (int *)&v50) = a3;
  }
  return 1;
}

uint64_t __swift::__runtime::llvm::DenseMapBase<__swift::__runtime::llvm::DenseMap<std::pair<unsigned int,unsigned int>,swift::reflection::TypeRef const*,__swift::__runtime::llvm::DenseMapInfo<std::pair<unsigned int,unsigned int>>,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<unsigned int,unsigned int>,swift::reflection::TypeRef const*>>,std::pair<unsigned int,unsigned int>,swift::reflection::TypeRef const*,__swift::__runtime::llvm::DenseMapInfo<std::pair<unsigned int,unsigned int>>,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<unsigned int,unsigned int>,swift::reflection::TypeRef const*>>::find(uint64_t a1, int *a2)
{
  uint64_t v4 = 0;
  if (__swift::__runtime::llvm::DenseMapBase<__swift::__runtime::llvm::DenseMap<std::pair<unsigned int,unsigned int>,swift::reflection::TypeRef const*,__swift::__runtime::llvm::DenseMapInfo<std::pair<unsigned int,unsigned int>>,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<unsigned int,unsigned int>,swift::reflection::TypeRef const*>>,std::pair<unsigned int,unsigned int>,swift::reflection::TypeRef const*,__swift::__runtime::llvm::DenseMapInfo<std::pair<unsigned int,unsigned int>>,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<unsigned int,unsigned int>,swift::reflection::TypeRef const*>>::LookupBucketFor<std::pair<unsigned int,unsigned int>>((uint64_t *)a1, a2, &v4))return v4; {
  else
  }
    return *(void *)a1 + 16 * *(unsigned int *)(a1 + 16);
}

_DWORD *__swift::__runtime::llvm::DenseMapBase<__swift::__runtime::llvm::DenseMap<std::pair<unsigned int,unsigned int>,swift::reflection::TypeRef const*,__swift::__runtime::llvm::DenseMapInfo<std::pair<unsigned int,unsigned int>>,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<unsigned int,unsigned int>,swift::reflection::TypeRef const*>>,std::pair<unsigned int,unsigned int>,swift::reflection::TypeRef const*,__swift::__runtime::llvm::DenseMapInfo<std::pair<unsigned int,unsigned int>>,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<unsigned int,unsigned int>,swift::reflection::TypeRef const*>>::operator[](uint64_t *a1, int *a2)
{
  BOOL v7 = 0;
  char v4 = __swift::__runtime::llvm::DenseMapBase<__swift::__runtime::llvm::DenseMap<std::pair<unsigned int,unsigned int>,swift::reflection::TypeRef const*,__swift::__runtime::llvm::DenseMapInfo<std::pair<unsigned int,unsigned int>>,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<unsigned int,unsigned int>,swift::reflection::TypeRef const*>>,std::pair<unsigned int,unsigned int>,swift::reflection::TypeRef const*,__swift::__runtime::llvm::DenseMapInfo<std::pair<unsigned int,unsigned int>>,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<unsigned int,unsigned int>,swift::reflection::TypeRef const*>>::LookupBucketFor<std::pair<unsigned int,unsigned int>>(a1, a2, &v7);
  unsigned int v5 = v7;
  if ((v4 & 1) == 0)
  {
    unsigned int v5 = __swift::__runtime::llvm::DenseMapBase<__swift::__runtime::llvm::DenseMap<std::pair<unsigned int,unsigned int>,swift::reflection::TypeRef const*,__swift::__runtime::llvm::DenseMapInfo<std::pair<unsigned int,unsigned int>>,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<unsigned int,unsigned int>,swift::reflection::TypeRef const*>>,std::pair<unsigned int,unsigned int>,swift::reflection::TypeRef const*,__swift::__runtime::llvm::DenseMapInfo<std::pair<unsigned int,unsigned int>>,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<unsigned int,unsigned int>,swift::reflection::TypeRef const*>>::InsertIntoBucketImpl<std::pair<unsigned int,unsigned int>>((uint64_t)a1, (uint64_t)a2, a2, v7);
    *(void *)unsigned int v5 = *(void *)a2;
    *((void *)v5 + 1) = 0;
  }
  return v5 + 2;
}

void swift::reflection::OpaqueTypeRef::~OpaqueTypeRef(swift::reflection::OpaqueTypeRef *this)
{
}

swift::Demangle::__runtime::Node *swift::reflection::TypeRefVisitor<DemanglingForTypeRef,swift::Demangle::__runtime::Node *>::visit(DemanglingForTypeRef *a1, uint64_t a2)
{
  if (a2)
  {
    switch(*(_DWORD *)(a2 + 8))
    {
      case 0:
        return (swift::Demangle::__runtime::Node *)DemanglingForTypeRef::visitBuiltinTypeRef(a1, (const swift::reflection::BuiltinTypeRef *)a2);
      case 1:
        return DemanglingForTypeRef::visitNominalTypeRef((swift::Demangle::__runtime::NodeFactory **)a1, (const swift::reflection::NominalTypeRef *)a2);
      case 2:
        return DemanglingForTypeRef::visitBoundGenericTypeRef((swift::Demangle::__runtime::NodeFactory **)a1, (const swift::reflection::BoundGenericTypeRef *)a2);
      case 3:
        return DemanglingForTypeRef::visitTupleTypeRef((swift::Demangle::__runtime::NodeFactory **)a1, (const swift::reflection::TupleTypeRef *)a2);
      case 4:
        return DemanglingForTypeRef::visitFunctionTypeRef((swift::Demangle::__runtime::NodeFactory **)a1, (const swift::reflection::FunctionTypeRef *)a2);
      case 5:
        return DemanglingForTypeRef::visitProtocolCompositionTypeRef((swift::Demangle::__runtime::NodeFactory **)a1, (const swift::reflection::ProtocolCompositionTypeRef *)a2);
      case 6:
        return DemanglingForTypeRef::visitConstrainedExistentialTypeRef((swift::Demangle::__runtime::NodeFactory **)a1, (const swift::reflection::ConstrainedExistentialTypeRef *)a2);
      case 7:
        unint64_t Node = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(*(void **)a1, 145);
        if (*(unsigned char *)(a2 + 24)) {
          int v6 = "@thick";
        }
        else {
          int v6 = "@thin";
        }
        BOOL v7 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(*(void **)a1, 146, v6);
        swift::Demangle::__runtime::Node::addChild(Node, v7, *(swift::Demangle::__runtime::NodeFactory **)a1);
        goto LABEL_54;
      case 8:
        int v8 = *(swift::Demangle::__runtime::NodeFactory **)a1;
        __int16 v9 = 145;
        goto LABEL_53;
      case 9:
        unint64_t Node = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(*(void **)a1, 38);
        uint64_t v10 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(*(void **)a1, 102, *(unsigned int *)(a2 + 12));
        swift::Demangle::__runtime::Node::addChild(Node, v10, *(swift::Demangle::__runtime::NodeFactory **)a1);
        uint64_t v11 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(*(void **)a1, 102, *(unsigned int *)(a2 + 16));
        uint64_t v12 = *(swift::Demangle::__runtime::NodeFactory **)a1;
        uint64_t v13 = Node;
        goto LABEL_58;
      case 0xA:
        return DemanglingForTypeRef::visitDependentMemberTypeRef((swift::Demangle::__runtime::NodeFactory **)a1, (const swift::reflection::DependentMemberTypeRef *)a2);
      case 0xB:
        return (swift::Demangle::__runtime::Node *)DemanglingForTypeRef::visitBuiltinTypeRef(a1, (const swift::reflection::BuiltinTypeRef *)a2);
      case 0xC:
        return DemanglingForTypeRef::visitObjCClassTypeRef((swift::Demangle::__runtime::NodeFactory **)a1, (const swift::reflection::ObjCClassTypeRef *)a2);
      case 0xD:
        return DemanglingForTypeRef::visitObjCProtocolTypeRef((swift::Demangle::__runtime::NodeFactory **)a1, (const swift::reflection::ObjCProtocolTypeRef *)a2);
      case 0xE:
        int v14 = *(swift::Demangle::__runtime::NodeFactory **)a1;
        return (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(v14, 300);
      case 0xF:
        return DemanglingForTypeRef::visitOpaqueArchetypeTypeRef((swift::Demangle::__runtime::NodeFactory **)a1, (const swift::reflection::OpaqueArchetypeTypeRef *)a2);
      case 0x10:
        int v8 = *(swift::Demangle::__runtime::NodeFactory **)a1;
        __int16 v9 = 247;
        goto LABEL_53;
      case 0x11:
        int v8 = *(swift::Demangle::__runtime::NodeFactory **)a1;
        __int16 v9 = 248;
        goto LABEL_53;
      case 0x12:
        int v8 = *(swift::Demangle::__runtime::NodeFactory **)a1;
        __int16 v9 = 249;
        goto LABEL_53;
      case 0x13:
        int v8 = *(swift::Demangle::__runtime::NodeFactory **)a1;
        __int16 v9 = 210;
LABEL_53:
        unint64_t Node = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(v8, v9);
LABEL_54:
        uint64_t v15 = swift::reflection::TypeRefVisitor<DemanglingForTypeRef,swift::Demangle::__runtime::Node *>::visit(a1);
        if (v15)
        {
          uint64_t v16 = (swift::Demangle::__runtime::Node *)v15;
          uint64_t v17 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(*(void **)a1, 232);
          swift::Demangle::__runtime::Node::addChild(v17, v16, *(swift::Demangle::__runtime::NodeFactory **)a1);
        }
        else
        {
          uint64_t v17 = 0;
        }
        uint64_t v12 = *(swift::Demangle::__runtime::NodeFactory **)a1;
        uint64_t v13 = Node;
        uint64_t v11 = v17;
LABEL_58:
        swift::Demangle::__runtime::Node::addChild(v13, v11, v12);
        return Node;
      case 0x14:
        return DemanglingForTypeRef::visitSILBoxTypeWithLayoutTypeRef((swift::Demangle::__runtime::NodeFactory **)a1, (const swift::reflection::SILBoxTypeWithLayoutTypeRef *)a2);
      default:
        return 0;
    }
  }
  return 0;
}

unint64_t DemanglingForTypeRef::visitBuiltinTypeRef(DemanglingForTypeRef *this, const swift::reflection::BuiltinTypeRef *a2)
{
  uint64_t v4 = *((void *)a2 + 2);
  uint64_t v2 = (char *)a2 + 16;
  uint64_t v3 = v4;
  if (v2[23] < 0)
  {
    uint64_t v5 = *((void *)v2 + 1);
  }
  else
  {
    uint64_t v3 = (uint64_t)v2;
    uint64_t v5 = v2[23];
  }
  uint64_t v6 = *(void *)this;
  uint64_t v11 = 0;
  unint64_t v7 = swift::Demangle::__runtime::Demangler::demangleType(v6, v3, v5, v10);
  if (v11 == v10)
  {
    (*(void (**)(void *))(v10[0] + 32))(v10);
    if (!v7) {
      return v7;
    }
LABEL_10:
    if (*(_WORD *)(v7 + 16) != 232) {
      return v7;
    }
    int v8 = *(unsigned __int8 *)(v7 + 18);
    if ((v8 - 1) >= 2)
    {
      if (v8 != 5 || !*(_DWORD *)(v7 + 8)) {
        return v7;
      }
      unint64_t v7 = *(void *)v7;
    }
    return *(void *)v7;
  }
  if (v11) {
    (*(void (**)(void))(*v11 + 40))();
  }
  if (v7) {
    goto LABEL_10;
  }
  return v7;
}

swift::Demangle::__runtime::Node *DemanglingForTypeRef::visitNominalTypeRef(swift::Demangle::__runtime::NodeFactory **this, const swift::reflection::NominalTypeRef *a2)
{
  uint64_t v4 = (char *)a2 + 16;
  int v5 = *((char *)a2 + 39);
  if (v5 >= 0) {
    uint64_t v6 = (char *)a2 + 16;
  }
  else {
    uint64_t v6 = (char *)*((void *)a2 + 2);
  }
  uint64_t v7 = *((void *)v4 + 1);
  if (v5 >= 0) {
    uint64_t v8 = v5;
  }
  else {
    uint64_t v8 = v7;
  }
  uint64_t v9 = (uint64_t)*this;
  uint64_t v22 = 0;
  unint64_t v10 = swift::Demangle::__runtime::Demangler::demangleType(v9, (uint64_t)v6, v8, v21);
  if (v22 == v21)
  {
    (*(void (**)(void *))(v21[0] + 32))(v21);
    if (!v10) {
      return 0;
    }
  }
  else
  {
    if (v22) {
      (*(void (**)(void))(*v22 + 40))();
    }
    if (!v10) {
      return 0;
    }
  }
  if (*(_WORD *)(v10 + 16) == 232)
  {
    int v11 = *(unsigned __int8 *)(v10 + 18);
    if ((v11 - 1) >= 2)
    {
      if (v11 != 5 || !*(_DWORD *)(v10 + 8)) {
        goto LABEL_19;
      }
      unint64_t v10 = *(void *)v10;
    }
    unint64_t v10 = *(void *)v10;
    if (!v10) {
      return 0;
    }
  }
LABEL_19:
  int v12 = *(unsigned __int8 *)(v10 + 18);
  if (v12 == 2 || v12 == 5 && *(_DWORD *)(v10 + 8) == 2)
  {
    if (*((void *)a2 + 5))
    {
      uint64_t v13 = swift::reflection::TypeRefVisitor<DemanglingForTypeRef,swift::Demangle::__runtime::Node *>::visit(this);
      if (v13)
      {
        int v14 = (swift::Demangle::__runtime::Node *)v13;
        unint64_t Node = swift::Demangle::__runtime::NodeFactory::createNode(*this, 232);
        swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)Node, v14, *this);
        if (Node)
        {
          if (*(_WORD *)(Node + 16) != 232) {
            goto LABEL_31;
          }
          int v16 = *(unsigned __int8 *)(Node + 18);
          if ((v16 - 1) >= 2)
          {
            if (v16 != 5 || !*(_DWORD *)(Node + 8))
            {
LABEL_31:
              uint64_t v17 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(*this, *(_WORD *)(v10 + 16));
              swift::Demangle::__runtime::Node::addChild(v17, (swift::Demangle::__runtime::Node *)Node, *this);
              int v18 = *(unsigned __int8 *)(v10 + 18);
              if (v18 != 2)
              {
                if (v18 != 5 || *(_DWORD *)(v10 + 8) < 2u)
                {
                  uint64_t v19 = 0;
                  goto LABEL_40;
                }
                unint64_t v10 = *(void *)v10;
              }
              uint64_t v19 = *(swift::Demangle::__runtime::Node **)(v10 + 8);
LABEL_40:
              swift::Demangle::__runtime::Node::addChild(v17, v19, *this);
              return v17;
            }
            unint64_t Node = *(void *)Node;
          }
          unint64_t Node = *(void *)Node;
          goto LABEL_31;
        }
      }
    }
  }
  return (swift::Demangle::__runtime::Node *)v10;
}

swift::Demangle::__runtime::Node *DemanglingForTypeRef::visitBoundGenericTypeRef(swift::Demangle::__runtime::NodeFactory **this, const swift::reflection::BoundGenericTypeRef *a2)
{
  uint64_t v4 = (char *)a2 + 16;
  int v5 = *((char *)a2 + 39);
  if (v5 >= 0) {
    uint64_t v6 = (char *)a2 + 16;
  }
  else {
    uint64_t v6 = (char *)*((void *)a2 + 2);
  }
  if (v5 >= 0) {
    uint64_t v7 = *((unsigned __int8 *)a2 + 39);
  }
  else {
    uint64_t v7 = *((void *)a2 + 3);
  }
  if (swift::Demangle::__runtime::isStruct((uint64_t)v6, v7))
  {
    __int16 v8 = 15;
  }
  else
  {
    int v9 = *((char *)a2 + 39);
    if (v9 >= 0) {
      uint64_t v10 = (uint64_t)v4;
    }
    else {
      uint64_t v10 = *((void *)a2 + 2);
    }
    if (v9 >= 0) {
      uint64_t v11 = *((unsigned __int8 *)a2 + 39);
    }
    else {
      uint64_t v11 = *((void *)a2 + 3);
    }
    if (swift::Demangle::__runtime::isEnum(v10, v11))
    {
      __int16 v8 = 14;
    }
    else
    {
      int v12 = *((char *)a2 + 39);
      if (v12 >= 0) {
        uint64_t v13 = (uint64_t)v4;
      }
      else {
        uint64_t v13 = *((void *)a2 + 2);
      }
      if (v12 >= 0) {
        uint64_t v14 = *((unsigned __int8 *)a2 + 39);
      }
      else {
        uint64_t v14 = *((void *)a2 + 3);
      }
      if (swift::Demangle::__runtime::isClass(v13, v14)) {
        __int16 v8 = 13;
      }
      else {
        __int16 v8 = 17;
      }
    }
  }
  uint64_t v15 = (uint64_t)*this;
  int v16 = *((char *)a2 + 39);
  if (v16 >= 0) {
    uint64_t v17 = (uint64_t)v4;
  }
  else {
    uint64_t v17 = *((void *)a2 + 2);
  }
  if (v16 >= 0) {
    uint64_t v18 = *((unsigned __int8 *)a2 + 39);
  }
  else {
    uint64_t v18 = *((void *)a2 + 3);
  }
  char v40 = 0;
  unint64_t v19 = swift::Demangle::__runtime::Demangler::demangleType(v15, v17, v18, v39);
  if (v40 == v39)
  {
    (*(void (**)(void *))(v39[0] + 32))(v39);
  }
  else if (v40)
  {
    (*(void (**)(void))(*v40 + 40))();
  }
  unint64_t Node = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(*this, 235);
  uint64_t v21 = *((void *)a2 + 6);
  uint64_t v22 = *((void *)a2 + 7);
  while (v21 != v22)
  {
    uint64_t v24 = swift::reflection::TypeRefVisitor<DemanglingForTypeRef,swift::Demangle::__runtime::Node *>::visit(this);
    if (v24)
    {
      uint64_t v25 = (swift::Demangle::__runtime::Node *)v24;
      unsigned int v23 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(*this, 232);
      swift::Demangle::__runtime::Node::addChild(v23, v25, *this);
    }
    else
    {
      unsigned int v23 = 0;
    }
    swift::Demangle::__runtime::Node::addChild(Node, v23, *this);
    v21 += 8;
  }
  unsigned int v26 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(*this, v8);
  swift::Demangle::__runtime::Node::addChild(v26, (swift::Demangle::__runtime::Node *)v19, *this);
  swift::Demangle::__runtime::Node::addChild(v26, Node, *this);
  if (!*((void *)a2 + 5)) {
    return v26;
  }
  uint64_t v27 = swift::reflection::TypeRefVisitor<DemanglingForTypeRef,swift::Demangle::__runtime::Node *>::visit(this);
  if (!v27) {
    return v26;
  }
  uint64_t v28 = (swift::Demangle::__runtime::Node *)v27;
  unint64_t v29 = swift::Demangle::__runtime::NodeFactory::createNode(*this, 232);
  swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v29, v28, *this);
  if (!v29) {
    return v26;
  }
  int v30 = *(unsigned __int8 *)(v29 + 18);
  if ((v30 - 1) >= 2 && (v30 != 5 || !*(_DWORD *)(v29 + 8))) {
    return v26;
  }
  if (*(_WORD *)(v29 + 16) != 232) {
    return v26;
  }
  int v31 = *(unsigned __int8 *)(v19 + 18);
  unsigned int v32 = v31 - 1;
  if ((v31 - 1) >= 2 && (v31 != 5 || !*(_DWORD *)(v19 + 8))) {
    return v26;
  }
  if ((v30 - 1) < 2)
  {
LABEL_56:
    int v33 = *(swift::Demangle::__runtime::Node **)v29;
    if (v32 < 2) {
      goto LABEL_62;
    }
    goto LABEL_59;
  }
  if (v30 == 5 && *(_DWORD *)(v29 + 8))
  {
    unint64_t v29 = *(void *)v29;
    goto LABEL_56;
  }
  int v33 = 0;
  if (v32 < 2) {
    goto LABEL_62;
  }
LABEL_59:
  if (v31 != 5 || !*(_DWORD *)(v19 + 8))
  {
    uint64_t v34 = 0;
    goto LABEL_64;
  }
  unint64_t v19 = *(void *)v19;
LABEL_62:
  uint64_t v34 = *(void *)v19;
LABEL_64:
  int v35 = *(unsigned __int8 *)(v34 + 18);
  uint64_t v36 = v34;
  if (v35 == 2)
  {
LABEL_68:
    unint64_t v37 = *(swift::Demangle::__runtime::Node **)(v36 + 8);
    swift::Demangle::__runtime::Node::removeChildAt(v34, 1u);
    swift::Demangle::__runtime::Node::removeChildAt(v34, 0);
    swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v34, v33, *this);
    swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v34, v37, *this);
    return v26;
  }
  if (v35 == 5 && *(_DWORD *)(v34 + 8) == 2)
  {
    uint64_t v36 = *(void *)v34;
    goto LABEL_68;
  }
  return v26;
}

swift::Demangle::__runtime::Node *DemanglingForTypeRef::visitTupleTypeRef(swift::Demangle::__runtime::NodeFactory **this, const swift::reflection::TupleTypeRef *a2)
{
  unint64_t Node = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(*this, 223);
  uint64_t v5 = *((void *)a2 + 5);
  uint64_t v6 = *((void *)a2 + 6);
  int64_t v7 = v6 - v5;
  if (v6 == v5)
  {
    uint64_t v13 = 0;
    uint64_t v14 = 0;
  }
  else
  {
    if (0xAAAAAAAAAAAAAAABLL * (v7 >> 3) >= 0xAAAAAAAAAAAAAABLL) {
      abort();
    }
    __int16 v8 = (const std::string::value_type **)operator new(v7);
    uint64_t v9 = 0;
    do
    {
      uint64_t v10 = (long long *)(v5 + v9 * 8);
      uint64_t v11 = (std::string *)&v8[v9];
      if (*(char *)(v5 + v9 * 8 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v11, *(const std::string::value_type **)v10, *((void *)v10 + 1));
      }
      else
      {
        long long v12 = *v10;
        v11->__r_.__value_.__r.__words[2] = *((void *)v10 + 2);
        *(_OWORD *)&v11->__r_.__value_.__l.__data_ = v12;
      }
      v9 += 3;
    }
    while (v5 + v9 * 8 != v6);
    uint64_t v13 = v8;
    uint64_t v14 = (void **)&v8[v9];
  }
  uint64_t v15 = *((void *)a2 + 2);
  long long __p = v13;
  uint64_t v36 = *((void *)a2 + 3);
  uint64_t v34 = Node;
  while (v15 != v36 && v13 != (const std::string::value_type **)v14)
  {
    uint64_t v17 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(*this, 224);
    if (*((char *)v13 + 23) < 0) {
      std::string::__init_copy_ctor_external(&v37, *v13, (std::string::size_type)v13[1]);
    }
    else {
      std::string v37 = *(std::string *)v13;
    }
    if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v37.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v37.__r_.__value_.__l.__size_;
    }
    if (size)
    {
      unint64_t v19 = *this;
      if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        unint64_t v20 = &v37;
      }
      else {
        unint64_t v20 = (std::string *)v37.__r_.__value_.__r.__words[0];
      }
      uint64_t v21 = (char *)*((void *)v19 + 1);
      uint64_t v22 = &v21[size];
      if (v21) {
        BOOL v23 = (unint64_t)v22 > *((void *)v19 + 2);
      }
      else {
        BOOL v23 = 1;
      }
      if (v23)
      {
        unint64_t v24 = 2 * *((void *)v19 + 4);
        if (v24 <= size + 1) {
          unint64_t v24 = size + 1;
        }
        *((void *)v19 + 4) = v24;
        unint64_t v25 = v24 + 8;
        unsigned int v26 = malloc_type_malloc(v24 + 8, 0xD0263BC5uLL);
        void *v26 = *((void *)v19 + 3);
        uint64_t v21 = (char *)(v26 + 1);
        uint64_t v27 = (char *)v26 + v25;
        unint64_t Node = v34;
        *((void *)v19 + 2) = v27;
        *((void *)v19 + 3) = v26;
        uint64_t v22 = (char *)v26 + size + 8;
      }
      *((void *)v19 + 1) = v22;
      memmove(v21, v20, size);
      unint64_t NodeWithAllocatedText = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNodeWithAllocatedText(v19, 225, (uint64_t)v21, size);
      swift::Demangle::__runtime::Node::addChild(v17, NodeWithAllocatedText, *this);
    }
    uint64_t v29 = swift::reflection::TypeRefVisitor<DemanglingForTypeRef,swift::Demangle::__runtime::Node *>::visit(this);
    if (v29)
    {
      int v30 = (swift::Demangle::__runtime::Node *)v29;
      int v31 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(*this, 232);
      swift::Demangle::__runtime::Node::addChild(v31, v30, *this);
    }
    else
    {
      int v31 = 0;
    }
    swift::Demangle::__runtime::Node::addChild(v17, v31, *this);
    swift::Demangle::__runtime::Node::addChild(Node, v17, *this);
    if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v37.__r_.__value_.__l.__data_);
    }
    v13 += 3;
    v15 += 8;
  }
  unsigned int v32 = (void **)__p;
  if (__p)
  {
    while (v14 != v32)
    {
      if (*((char *)v14 - 1) < 0) {
        operator delete(*(v14 - 3));
      }
      v14 -= 3;
      unsigned int v32 = (void **)__p;
    }
    operator delete(__p);
  }
  return Node;
}

swift::Demangle::__runtime::Node *DemanglingForTypeRef::visitFunctionTypeRef(swift::Demangle::__runtime::NodeFactory **this, const swift::reflection::FunctionTypeRef *a2)
{
  uint64_t v4 = *((void *)a2 + 6);
  switch(BYTE2(v4))
  {
    case 0:
      if ((v4 & 0x4000000) != 0) {
        __int16 v5 = 82;
      }
      else {
        __int16 v5 = 65;
      }
      break;
    case 1:
      __int16 v5 = 165;
      break;
    case 2:
      __int16 v5 = 222;
      break;
    case 3:
      __int16 v5 = 22;
      break;
    default:
      __int16 v5 = 0;
      break;
  }
  uint64_t v60 = v62;
  uint64_t v61 = 0x800000000;
  uint64_t v6 = *((void *)a2 + 2);
  uint64_t v7 = *((void *)a2 + 3);
  if (v6 == v7)
  {
LABEL_33:
    unint64_t Node = (unsigned __int8 *)swift::Demangle::__runtime::NodeFactory::createNode(*this, 223);
    if (v61)
    {
      BOOL v23 = (swift::Demangle::__runtime::Node **)v60;
      unint64_t v24 = (swift::Demangle::__runtime::Node **)((char *)v60 + 16 * v61);
      do
      {
        uint64_t v29 = *v23;
        int v30 = *((unsigned __int8 *)v23 + 8);
        int v31 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(*this, 224);
        if (v30)
        {
          unsigned int v32 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(*this, 276);
          swift::Demangle::__runtime::Node::addChild(v31, v32, *this);
        }
        unsigned int v26 = *this;
        if (*((_WORD *)v29 + 8) == 232)
        {
          uint64_t v27 = v31;
          uint64_t v28 = v29;
        }
        else
        {
          unint64_t v25 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(*this, 232);
          swift::Demangle::__runtime::Node::addChild(v25, v29, *this);
          unsigned int v26 = *this;
          uint64_t v27 = v31;
          uint64_t v28 = v25;
        }
        swift::Demangle::__runtime::Node::addChild(v27, v28, v26);
        swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)Node, v31, *this);
        v23 += 2;
      }
      while (v23 != v24);
    }
    goto LABEL_41;
  }
  do
  {
    unint64_t v8 = *(unsigned int *)(v6 + 24);
    uint64_t v9 = swift::reflection::TypeRefVisitor<DemanglingForTypeRef,swift::Demangle::__runtime::Node *>::visit(this);
    if (v9)
    {
      uint64_t v10 = (swift::Demangle::__runtime::Node *)v9;
      uint64_t v11 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(*this, 232);
      swift::Demangle::__runtime::Node::addChild(v11, v10, *this);
      if ((v8 & 0x200) == 0) {
        goto LABEL_13;
      }
LABEL_12:
      long long v12 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(*this, 326);
      swift::Demangle::__runtime::Node::addChild(v12, v11, *this);
      uint64_t v11 = v12;
      goto LABEL_13;
    }
    uint64_t v11 = 0;
    if ((v8 & 0x200) != 0) {
      goto LABEL_12;
    }
LABEL_13:
    unsigned int v13 = (v8 & 0x7F) - 1;
    if (v13 <= 2)
    {
      uint64_t v18 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(*this, 0xD100D0007BuLL >> (16 * v13));
      swift::Demangle::__runtime::Node::addChild(v18, v11, *this);
      uint64_t v11 = v18;
      if ((v8 & 0x400) == 0)
      {
LABEL_15:
        if ((v8 & 0x800) == 0) {
          goto LABEL_17;
        }
LABEL_16:
        uint64_t v14 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(*this, 128);
        swift::Demangle::__runtime::Node::addChild(v14, v11, *this);
        uint64_t v11 = v14;
        goto LABEL_17;
      }
    }
    else if ((v8 & 0x400) == 0)
    {
      goto LABEL_15;
    }
    unint64_t v19 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(*this, 127);
    swift::Demangle::__runtime::Node::addChild(v19, v11, *this);
    uint64_t v11 = v19;
    if ((v8 & 0x800) != 0) {
      goto LABEL_16;
    }
LABEL_17:
    uint64_t v15 = v61;
    if (v61 >= (unint64_t)HIDWORD(v61))
    {
      __swift::__runtime::llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, (uint64_t)v62, v61 + 1, 16);
      uint64_t v15 = v61;
    }
    int v16 = (swift::Demangle::__runtime::Node **)((char *)v60 + 16 * v15);
    *int v16 = v11;
    v16[1] = (swift::Demangle::__runtime::Node *)((v8 >> 7) & 1);
    int v17 = v61;
    LODWORD(v61) = v61 + 1;
    v6 += 32;
  }
  while (v6 != v7);
  if (v17 || (*((unsigned char *)v60 + 8) & 1) != 0) {
    goto LABEL_33;
  }
  unint64_t Node = *(unsigned __int8 **)v60;
  int v21 = *(unsigned __int16 *)(*(void *)v60 + 16);
  if (v21 == 232)
  {
    uint64_t v22 = *(unsigned __int8 **)v60;
    if (Node[18] - 1 >= 2) {
      uint64_t v22 = *(unsigned __int8 **)Node;
    }
    int v21 = *(unsigned __int16 *)(*(void *)v22 + 16);
  }
  if (v21 == 223) {
    goto LABEL_33;
  }
LABEL_41:
  int v33 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(*this, 3);
  uint64_t v34 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(*this, 232);
  swift::Demangle::__runtime::Node::addChild(v34, (swift::Demangle::__runtime::Node *)Node, *this);
  swift::Demangle::__runtime::Node::addChild(v33, v34, *this);
  uint64_t v35 = swift::reflection::TypeRefVisitor<DemanglingForTypeRef,swift::Demangle::__runtime::Node *>::visit(this);
  if (v35)
  {
    uint64_t v36 = (swift::Demangle::__runtime::Node *)v35;
    std::string v37 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(*this, 232);
    swift::Demangle::__runtime::Node::addChild(v37, v36, *this);
  }
  else
  {
    std::string v37 = 0;
  }
  int v38 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(*this, 207);
  swift::Demangle::__runtime::Node::addChild(v38, v37, *this);
  uint64_t v39 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(*this, v5);
  if (!*((void *)a2 + 9))
  {
    int v44 = *((_DWORD *)a2 + 14);
    if ((v44 & 0xE) == 2)
    {
      uint64_t v45 = *this;
      __int16 v46 = 129;
    }
    else
    {
      if ((v44 & 0x10) == 0)
      {
        uint64_t v47 = *((void *)a2 + 6);
        if ((v47 & 0x8000000) != 0) {
          goto LABEL_63;
        }
        goto LABEL_53;
      }
      uint64_t v45 = *this;
      __int16 v46 = 130;
    }
    char v40 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(v45, v46);
    goto LABEL_62;
  }
  char v40 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(*this, 67);
  uint64_t v41 = swift::reflection::TypeRefVisitor<DemanglingForTypeRef,swift::Demangle::__runtime::Node *>::visit(this);
  if (v41)
  {
    uint64_t v42 = (swift::Demangle::__runtime::Node *)v41;
    unsigned int v43 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(*this, 232);
    swift::Demangle::__runtime::Node::addChild(v43, v42, *this);
  }
  else
  {
    unsigned int v43 = 0;
  }
  swift::Demangle::__runtime::Node::addChild(v40, v43, *this);
LABEL_62:
  swift::Demangle::__runtime::Node::addChild(v39, v40, *this);
  uint64_t v47 = *((void *)a2 + 6);
  if ((v47 & 0x8000000) != 0)
  {
LABEL_63:
    unint64_t v51 = *((void *)a2 + 8) - 1;
    if (v51 > 3) {
      uint64_t v52 = 0;
    }
    else {
      uint64_t v52 = qword_C6C90[v51];
    }
    int v53 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(*this, 68, v52);
    swift::Demangle::__runtime::Node::addChild(v39, v53, *this);
    if ((*((void *)a2 + 6) & 0x1000000) != 0) {
      goto LABEL_67;
    }
LABEL_54:
    uint64_t v48 = *((void *)a2 + 6);
    if ((v48 & 0x40000000) == 0) {
      goto LABEL_55;
    }
LABEL_74:
    uint64_t v59 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(*this, 66);
    swift::Demangle::__runtime::Node::addChild(v39, v59, *this);
    if ((*((void *)a2 + 6) & 0x20000000) == 0) {
      goto LABEL_57;
    }
LABEL_56:
    uint64_t v49 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(*this, 271);
    swift::Demangle::__runtime::Node::addChild(v39, v49, *this);
    goto LABEL_57;
  }
LABEL_53:
  if ((v47 & 0x1000000) == 0) {
    goto LABEL_54;
  }
LABEL_67:
  unsigned int v54 = *this;
  if (*((void *)a2 + 10))
  {
    unsigned int v55 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(v54, 273);
    uint64_t v56 = swift::reflection::TypeRefVisitor<DemanglingForTypeRef,swift::Demangle::__runtime::Node *>::visit(this);
    if (v56)
    {
      uint64_t v57 = (swift::Demangle::__runtime::Node *)v56;
      unsigned int v58 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(*this, 232);
      swift::Demangle::__runtime::Node::addChild(v58, v57, *this);
    }
    else
    {
      unsigned int v58 = 0;
    }
    swift::Demangle::__runtime::Node::addChild(v55, v58, *this);
  }
  else
  {
    unsigned int v55 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(v54, 272);
  }
  swift::Demangle::__runtime::Node::addChild(v39, v55, *this);
  uint64_t v48 = *((void *)a2 + 6);
  if ((v48 & 0x40000000) != 0) {
    goto LABEL_74;
  }
LABEL_55:
  if ((v48 & 0x20000000) != 0) {
    goto LABEL_56;
  }
LABEL_57:
  swift::Demangle::__runtime::Node::addChild(v39, v33, *this);
  swift::Demangle::__runtime::Node::addChild(v39, v38, *this);
  if (v60 != v62) {
    free(v60);
  }
  return v39;
}

swift::Demangle::__runtime::Node *DemanglingForTypeRef::visitProtocolCompositionTypeRef(swift::Demangle::__runtime::NodeFactory **this, const swift::reflection::ProtocolCompositionTypeRef *a2)
{
  unint64_t Node = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(*this, 235);
  uint64_t v5 = *((void *)a2 + 2);
  uint64_t v6 = *((void *)a2 + 3);
  while (v5 != v6)
  {
    uint64_t v9 = swift::reflection::TypeRefVisitor<DemanglingForTypeRef,swift::Demangle::__runtime::Node *>::visit(this);
    if (v9)
    {
      uint64_t v7 = (swift::Demangle::__runtime::Node *)v9;
      unint64_t v8 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(*this, 232);
      swift::Demangle::__runtime::Node::addChild(v8, v7, *this);
    }
    else
    {
      unint64_t v8 = 0;
    }
    swift::Demangle::__runtime::Node::addChild(Node, v8, *this);
    v5 += 8;
  }
  uint64_t v10 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(*this, 190);
  swift::Demangle::__runtime::Node::addChild(v10, Node, *this);
  if (*((void *)a2 + 5))
  {
    uint64_t v11 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(*this, 191);
    swift::Demangle::__runtime::Node::addChild(v11, v10, *this);
    uint64_t v12 = swift::reflection::TypeRefVisitor<DemanglingForTypeRef,swift::Demangle::__runtime::Node *>::visit(this);
    if (v12)
    {
      unsigned int v13 = (swift::Demangle::__runtime::Node *)v12;
      uint64_t v14 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(*this, 232);
      swift::Demangle::__runtime::Node::addChild(v14, v13, *this);
    }
    else
    {
      uint64_t v14 = 0;
    }
    int v16 = *this;
    uint64_t v15 = v11;
    int v17 = v14;
  }
  else
  {
    if (!*((unsigned char *)a2 + 48)) {
      return v10;
    }
    uint64_t v15 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(*this, 192);
    uint64_t v11 = v15;
    int v16 = *this;
    int v17 = v10;
  }
  swift::Demangle::__runtime::Node::addChild(v15, v17, v16);
  return v11;
}

swift::Demangle::__runtime::Node *DemanglingForTypeRef::visitConstrainedExistentialTypeRef(swift::Demangle::__runtime::NodeFactory **this, const swift::reflection::ConstrainedExistentialTypeRef *a2)
{
  unint64_t Node = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(*this, 83);
  uint64_t v5 = swift::reflection::TypeRefVisitor<DemanglingForTypeRef,swift::Demangle::__runtime::Node *>::visit(this);
  if (v5)
  {
    uint64_t v6 = (swift::Demangle::__runtime::Node *)v5;
    uint64_t v7 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(*this, 232);
    swift::Demangle::__runtime::Node::addChild(v7, v6, *this);
  }
  else
  {
    uint64_t v7 = 0;
  }
  swift::Demangle::__runtime::Node::addChild(Node, v7, *this);
  unint64_t v8 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(*this, 84);
  uint64_t v10 = (long long *)*((void *)a2 + 3);
  uint64_t v9 = (long long *)*((void *)a2 + 4);
  while (v10 != v9)
  {
    long long v11 = *v10++;
    long long v14 = v11;
    uint64_t v12 = DemanglingForTypeRef::visitTypeRefRequirement(this, &v14);
    swift::Demangle::__runtime::Node::addChild(v8, v12, *this);
  }
  swift::Demangle::__runtime::Node::addChild(Node, v8, *this);
  return Node;
}

swift::Demangle::__runtime::Node *DemanglingForTypeRef::visitDependentMemberTypeRef(swift::Demangle::__runtime::NodeFactory **this, const swift::reflection::DependentMemberTypeRef *a2)
{
  unint64_t Node = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(*this, 45);
  uint64_t v5 = swift::reflection::TypeRefVisitor<DemanglingForTypeRef,swift::Demangle::__runtime::Node *>::visit(this);
  if (v5)
  {
    uint64_t v6 = (swift::Demangle::__runtime::Node *)v5;
    uint64_t v7 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(*this, 232);
    swift::Demangle::__runtime::Node::addChild(v7, v6, *this);
  }
  else
  {
    uint64_t v7 = 0;
  }
  swift::Demangle::__runtime::Node::addChild(Node, v7, *this);
  unint64_t v8 = *this;
  int v9 = *((char *)a2 + 39);
  if (v9 >= 0) {
    uint64_t v10 = (char *)a2 + 16;
  }
  else {
    uint64_t v10 = (char *)*((void *)a2 + 2);
  }
  if (v9 >= 0) {
    size_t v11 = *((unsigned __int8 *)a2 + 39);
  }
  else {
    size_t v11 = *((void *)a2 + 3);
  }
  if (v11)
  {
    uint64_t v12 = (char *)*((void *)v8 + 1);
    unsigned int v13 = &v12[v11];
    if (v12) {
      BOOL v14 = (unint64_t)v13 > *((void *)v8 + 2);
    }
    else {
      BOOL v14 = 1;
    }
    if (v14)
    {
      unint64_t v15 = 2 * *((void *)v8 + 4);
      if (v15 <= v11 + 1) {
        unint64_t v15 = v11 + 1;
      }
      *((void *)v8 + 4) = v15;
      unint64_t v16 = v15 + 8;
      int v17 = malloc_type_malloc(v15 + 8, 0xD0263BC5uLL);
      void *v17 = *((void *)v8 + 3);
      uint64_t v12 = (char *)(v17 + 1);
      *((void *)v8 + 2) = (char *)v17 + v16;
      *((void *)v8 + 3) = v17;
      unsigned int v13 = (char *)v17 + v11 + 8;
    }
    *((void *)v8 + 1) = v13;
    memmove(v12, v10, v11);
  }
  else
  {
    uint64_t v12 = 0;
  }
  unint64_t NodeWithAllocatedText = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNodeWithAllocatedText(v8, 101, (uint64_t)v12, v11);
  if (*((char *)a2 + 71) < 0) {
    std::string::__init_copy_ctor_external(&v31, *((const std::string::value_type **)a2 + 6), *((void *)a2 + 7));
  }
  else {
    std::string v31 = *(std::string *)((unsigned char *)a2 + 2);
  }
  std::string::size_type size = HIBYTE(v31.__r_.__value_.__r.__words[2]);
  if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = v31.__r_.__value_.__l.__size_;
  }
  unint64_t v20 = *this;
  if (size)
  {
    int v21 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(*this, 35);
    swift::Demangle::__runtime::Node::addChild(v21, NodeWithAllocatedText, *this);
    uint64_t v22 = *this;
    if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      BOOL v23 = &v31;
    }
    else {
      BOOL v23 = (std::string *)v31.__r_.__value_.__r.__words[0];
    }
    if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v24 = HIBYTE(v31.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v24 = v31.__r_.__value_.__l.__size_;
    }
    int v30 = 0;
    unint64_t v25 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::demangleType((uint64_t)v22, (uint64_t)v23, v24, v29);
    if (v30 == v29)
    {
      (*(void (**)(void *))(v29[0] + 32))(v29);
    }
    else if (v30)
    {
      (*(void (**)(void))(*v30 + 40))();
    }
    swift::Demangle::__runtime::Node::addChild(v21, v25, *this);
    unint64_t v20 = *this;
    unsigned int v26 = Node;
    uint64_t v27 = v21;
  }
  else
  {
    unsigned int v26 = Node;
    uint64_t v27 = NodeWithAllocatedText;
  }
  swift::Demangle::__runtime::Node::addChild(v26, v27, v20);
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v31.__r_.__value_.__l.__data_);
  }
  return Node;
}

swift::Demangle::__runtime::Node *DemanglingForTypeRef::visitObjCClassTypeRef(swift::Demangle::__runtime::NodeFactory **this, const swift::reflection::ObjCClassTypeRef *a2)
{
  uint64_t v4 = *this;
  uint64_t v5 = *((void *)*this + 1);
  uint64_t v6 = (char *)(v5 + 3);
  if (v5) {
    BOOL v7 = (unint64_t)v6 > *((void *)*this + 2);
  }
  else {
    BOOL v7 = 1;
  }
  if (v7)
  {
    unint64_t v8 = 2 * *((void *)v4 + 4);
    if (v8 <= 4) {
      unint64_t v8 = 4;
    }
    *((void *)v4 + 4) = v8;
    unint64_t v9 = v8 + 8;
    uint64_t v10 = malloc_type_malloc(v8 + 8, 0xD0263BC5uLL);
    uint64_t v5 = (uint64_t)(v10 + 1);
    *uint64_t v10 = *((void *)v4 + 3);
    uint64_t v6 = (char *)v10 + 11;
    *((void *)v4 + 2) = (char *)v10 + v9;
    *((void *)v4 + 3) = v10;
  }
  *((void *)v4 + 1) = v6;
  *(unsigned char *)(v5 + 2) = 67;
  *(_WORD *)uint64_t v5 = 24415;
  unint64_t NodeWithAllocatedText = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNodeWithAllocatedText(v4, 153, v5, 3);
  unint64_t Node = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(*this, 24);
  swift::Demangle::__runtime::Node::addChild(Node, NodeWithAllocatedText, *this);
  unsigned int v13 = *this;
  unint64_t v16 = (size_t *)*((void *)a2 + 2);
  unint64_t v15 = (size_t *)((char *)a2 + 16);
  BOOL v14 = v16;
  int v17 = *((char *)v15 + 23);
  if (v17 >= 0) {
    uint64_t v18 = v15;
  }
  else {
    uint64_t v18 = v14;
  }
  if (v17 >= 0) {
    size_t v19 = *((unsigned __int8 *)v15 + 23);
  }
  else {
    size_t v19 = v15[1];
  }
  if (v19)
  {
    unint64_t v20 = (char *)*((void *)v13 + 1);
    int v21 = &v20[v19];
    if (v20) {
      BOOL v22 = (unint64_t)v21 > *((void *)v13 + 2);
    }
    else {
      BOOL v22 = 1;
    }
    if (v22)
    {
      unint64_t v23 = 2 * *((void *)v13 + 4);
      if (v23 <= v19 + 1) {
        unint64_t v23 = v19 + 1;
      }
      *((void *)v13 + 4) = v23;
      unint64_t v24 = v23 + 8;
      unint64_t v25 = malloc_type_malloc(v23 + 8, 0xD0263BC5uLL);
      unsigned int v26 = (char *)v25 + v24;
      void *v25 = *((void *)v13 + 3);
      unint64_t v20 = (char *)(v25 + 1);
      *((void *)v13 + 2) = v26;
      *((void *)v13 + 3) = v25;
      int v21 = (char *)v25 + v19 + 8;
    }
    *((void *)v13 + 1) = v21;
    memmove(v20, v18, v19);
  }
  else
  {
    unint64_t v20 = 0;
  }
  uint64_t v27 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNodeWithAllocatedText(v13, 101, (uint64_t)v20, v19);
  swift::Demangle::__runtime::Node::addChild(Node, v27, *this);
  return Node;
}

swift::Demangle::__runtime::Node *DemanglingForTypeRef::visitObjCProtocolTypeRef(swift::Demangle::__runtime::NodeFactory **this, const swift::reflection::ObjCProtocolTypeRef *a2)
{
  uint64_t v4 = *this;
  uint64_t v5 = *((void *)*this + 1);
  uint64_t v6 = (char *)(v5 + 3);
  if (v5) {
    BOOL v7 = (unint64_t)v6 > *((void *)*this + 2);
  }
  else {
    BOOL v7 = 1;
  }
  if (v7)
  {
    unint64_t v8 = 2 * *((void *)v4 + 4);
    if (v8 <= 4) {
      unint64_t v8 = 4;
    }
    *((void *)v4 + 4) = v8;
    unint64_t v9 = v8 + 8;
    uint64_t v10 = malloc_type_malloc(v8 + 8, 0xD0263BC5uLL);
    uint64_t v5 = (uint64_t)(v10 + 1);
    *uint64_t v10 = *((void *)v4 + 3);
    uint64_t v6 = (char *)v10 + 11;
    *((void *)v4 + 2) = (char *)v10 + v9;
    *((void *)v4 + 3) = v10;
  }
  *((void *)v4 + 1) = v6;
  *(unsigned char *)(v5 + 2) = 67;
  *(_WORD *)uint64_t v5 = 24415;
  unint64_t NodeWithAllocatedText = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNodeWithAllocatedText(v4, 153, v5, 3);
  unint64_t Node = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(*this, 180);
  swift::Demangle::__runtime::Node::addChild(Node, NodeWithAllocatedText, *this);
  unsigned int v13 = *this;
  unint64_t v16 = (size_t *)*((void *)a2 + 2);
  unint64_t v15 = (size_t *)((char *)a2 + 16);
  BOOL v14 = v16;
  int v17 = *((char *)v15 + 23);
  if (v17 >= 0) {
    uint64_t v18 = v15;
  }
  else {
    uint64_t v18 = v14;
  }
  if (v17 >= 0) {
    size_t v19 = *((unsigned __int8 *)v15 + 23);
  }
  else {
    size_t v19 = v15[1];
  }
  if (v19)
  {
    unint64_t v20 = (char *)*((void *)v13 + 1);
    int v21 = &v20[v19];
    if (v20) {
      BOOL v22 = (unint64_t)v21 > *((void *)v13 + 2);
    }
    else {
      BOOL v22 = 1;
    }
    if (v22)
    {
      unint64_t v23 = 2 * *((void *)v13 + 4);
      if (v23 <= v19 + 1) {
        unint64_t v23 = v19 + 1;
      }
      *((void *)v13 + 4) = v23;
      unint64_t v24 = v23 + 8;
      unint64_t v25 = malloc_type_malloc(v23 + 8, 0xD0263BC5uLL);
      unsigned int v26 = (char *)v25 + v24;
      void *v25 = *((void *)v13 + 3);
      unint64_t v20 = (char *)(v25 + 1);
      *((void *)v13 + 2) = v26;
      *((void *)v13 + 3) = v25;
      int v21 = (char *)v25 + v19 + 8;
    }
    *((void *)v13 + 1) = v21;
    memmove(v20, v18, v19);
  }
  else
  {
    unint64_t v20 = 0;
  }
  uint64_t v27 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNodeWithAllocatedText(v13, 101, (uint64_t)v20, v19);
  swift::Demangle::__runtime::Node::addChild(Node, v27, *this);
  return Node;
}

swift::Demangle::__runtime::Node *DemanglingForTypeRef::visitOpaqueArchetypeTypeRef(swift::Demangle::__runtime::NodeFactory **this, const swift::reflection::OpaqueArchetypeTypeRef *a2)
{
  uint64_t v4 = (uint64_t)*this;
  uint64_t v5 = (char *)a2 + 16;
  int v6 = *((char *)a2 + 39);
  if (v6 >= 0) {
    BOOL v7 = (char *)a2 + 16;
  }
  else {
    BOOL v7 = (char *)*((void *)a2 + 2);
  }
  uint64_t v8 = *((void *)v5 + 1);
  if (v6 >= 0) {
    uint64_t v9 = v6;
  }
  else {
    uint64_t v9 = v8;
  }
  unint64_t v25 = 0;
  uint64_t v10 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::demangleType(v4, (uint64_t)v7, v9, v24);
  if (v25 == v24)
  {
    (*(void (**)(void *))(v24[0] + 32))(v24);
    if (!v10) {
      return 0;
    }
  }
  else
  {
    if (v25) {
      (*(void (**)(void))(*v25 + 40))();
    }
    if (!v10) {
      return 0;
    }
  }
  unint64_t Node = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(*this, 102, *((unsigned int *)a2 + 16));
  size_t v11 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(*this, 235);
  uint64_t v12 = (uint64_t *)*((void *)a2 + 12);
  unsigned int v13 = (uint64_t *)*((void *)a2 + 13);
  if (v13 != v12)
  {
    while (1)
    {
      uint64_t v16 = *v12;
      uint64_t v15 = v12[1];
      int v17 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(*this, 235);
      if (v15) {
        break;
      }
LABEL_15:
      swift::Demangle::__runtime::Node::addChild(v11, v17, *this);
      v12 += 2;
      if (v12 == v13) {
        goto LABEL_14;
      }
    }
    uint64_t v18 = 8 * v15;
    while (1)
    {
      uint64_t v19 = swift::reflection::TypeRefVisitor<DemanglingForTypeRef,swift::Demangle::__runtime::Node *>::visit(this);
      if (!v19) {
        return 0;
      }
      unint64_t v20 = (swift::Demangle::__runtime::Node *)v19;
      int v21 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(*this, 232);
      swift::Demangle::__runtime::Node::addChild(v21, v20, *this);
      if (!v21) {
        return 0;
      }
      swift::Demangle::__runtime::Node::addChild(v17, v21, *this);
      v16 += 8;
      v18 -= 8;
      if (!v18) {
        goto LABEL_15;
      }
    }
  }
LABEL_14:
  BOOL v14 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(*this, 300);
  swift::Demangle::__runtime::Node::addChild(v14, v10, *this);
  swift::Demangle::__runtime::Node::addChild(v14, Node, *this);
  swift::Demangle::__runtime::Node::addChild(v14, v11, *this);
  return v14;
}

swift::Demangle::__runtime::Node *DemanglingForTypeRef::visitSILBoxTypeWithLayoutTypeRef(swift::Demangle::__runtime::NodeFactory **this, const swift::reflection::SILBoxTypeWithLayoutTypeRef *a2)
{
  unint64_t Node = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(*this, 211);
  uint64_t v5 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(*this, 212);
  int v6 = (void *)*((void *)a2 + 2);
  for (int i = (void *)*((void *)a2 + 3); v6 != i; ++v6)
  {
    if ((*v6 & 4) != 0) {
      __int16 v10 = 213;
    }
    else {
      __int16 v10 = 214;
    }
    size_t v11 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(*this, v10);
    uint64_t v12 = swift::reflection::TypeRefVisitor<DemanglingForTypeRef,swift::Demangle::__runtime::Node *>::visit(this);
    if (v12)
    {
      uint64_t v8 = (swift::Demangle::__runtime::Node *)v12;
      uint64_t v9 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(*this, 232);
      swift::Demangle::__runtime::Node::addChild(v9, v8, *this);
    }
    else
    {
      uint64_t v9 = 0;
    }
    swift::Demangle::__runtime::Node::addChild(v11, v9, *this);
    swift::Demangle::__runtime::Node::addChild(v5, v11, *this);
  }
  swift::Demangle::__runtime::Node::addChild(Node, v5, *this);
  unsigned int v13 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(*this, 43);
  BOOL v14 = (uint64_t *)*((void *)a2 + 5);
  uint64_t v15 = (uint64_t *)*((void *)a2 + 6);
  if (v14 != v15)
  {
    unsigned int v16 = 0;
    unsigned int v17 = 0;
    do
    {
      uint64_t v18 = *v14;
      if (*(_DWORD *)(*v14 + 8) == 9 && v18 != 0)
      {
        if (*(_DWORD *)(v18 + 12) > v16)
        {
          unint64_t v20 = *this;
          for (uint64_t j = v17; ; uint64_t j = 0)
          {
            BOOL v22 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(v20, 37, j);
            swift::Demangle::__runtime::Node::addChild(v13, v22, *this);
            if (*(_DWORD *)(v18 + 12) <= ++v16) {
              break;
            }
            unint64_t v20 = *this;
          }
          unsigned int v17 = 0;
        }
        ++v17;
      }
      v14 += 2;
    }
    while (v14 != v15);
  }
  unint64_t v23 = (_DWORD *)*((void *)a2 + 8);
  unint64_t v24 = (_DWORD *)*((void *)a2 + 9);
  while (v23 != v24)
  {
    unint64_t v25 = DemanglingForTypeRef::visitTypeRefRequirement(this, v23);
    if (v25) {
      swift::Demangle::__runtime::Node::addChild(v13, v25, *this);
    }
    v23 += 4;
  }
  swift::Demangle::__runtime::Node::addChild(Node, v13, *this);
  unsigned int v26 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(*this, 235);
  uint64_t v27 = *((void *)a2 + 5);
  uint64_t v28 = *((void *)a2 + 6);
  while (v27 != v28)
  {
    uint64_t v31 = swift::reflection::TypeRefVisitor<DemanglingForTypeRef,swift::Demangle::__runtime::Node *>::visit(this);
    if (v31)
    {
      uint64_t v29 = (swift::Demangle::__runtime::Node *)v31;
      int v30 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(*this, 232);
      swift::Demangle::__runtime::Node::addChild(v30, v29, *this);
    }
    else
    {
      int v30 = 0;
    }
    swift::Demangle::__runtime::Node::addChild(v26, v30, *this);
    v27 += 16;
  }
  swift::Demangle::__runtime::Node::addChild(Node, v26, *this);
  return Node;
}

swift::Demangle::__runtime::Node *DemanglingForTypeRef::visitTypeRefRequirement(swift::Demangle::__runtime::NodeFactory **a1, _DWORD *a2)
{
  if ((*a2 & 7) == 2)
  {
    uint64_t v3 = *a1;
    __int16 v4 = 39;
  }
  else
  {
    if ((*a2 & 7u) > 1) {
      return 0;
    }
    uint64_t v3 = *a1;
    __int16 v4 = 36;
  }
  unint64_t Node = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(v3, v4);
  uint64_t v6 = swift::reflection::TypeRefVisitor<DemanglingForTypeRef,swift::Demangle::__runtime::Node *>::visit(a1);
  if (v6)
  {
    BOOL v7 = (swift::Demangle::__runtime::Node *)v6;
    uint64_t v8 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(*a1, 232);
    swift::Demangle::__runtime::Node::addChild(v8, v7, *a1);
  }
  else
  {
    uint64_t v8 = 0;
  }
  swift::Demangle::__runtime::Node::addChild(Node, v8, *a1);
  uint64_t v9 = swift::reflection::TypeRefVisitor<DemanglingForTypeRef,swift::Demangle::__runtime::Node *>::visit(a1);
  if (v9)
  {
    __int16 v10 = (swift::Demangle::__runtime::Node *)v9;
    size_t v11 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(*a1, 232);
    swift::Demangle::__runtime::Node::addChild(v11, v10, *a1);
  }
  else
  {
    size_t v11 = 0;
  }
  swift::Demangle::__runtime::Node::addChild(Node, v11, *a1);
  return Node;
}

void PrintTypeRef::visitBuiltinTypeRef(PrintTypeRef *this, const swift::reflection::BuiltinTypeRef *a2)
{
  char v24 = 7;
  strcpy((char *)v23, "builtin");
  for (int i = *((_DWORD *)this + 2); i; --i)
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)" ", 1);
  uint64_t v5 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)"(", 1);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v5, (uint64_t)v23, 7);
  if (v24 < 0) {
    operator delete(v23[0]);
  }
  char v13 = 0;
  uint64_t v14 = 0x101010101010101;
  char v15 = 1;
  uint64_t v16 = 0x101010100000000;
  char v17 = 1;
  __int16 v18 = 256;
  char v19 = 1;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  v22[0] = off_C8B30;
  v22[1] = swift::Demangle::__runtime::genericParameterName;
  v22[3] = v22;
  uint64_t v9 = (swift::Demangle::__runtime *)*((void *)a2 + 2);
  uint64_t v8 = (const swift::reflection::BuiltinTypeRef *)((char *)a2 + 16);
  BOOL v7 = v9;
  int v10 = *((char *)v8 + 23);
  if (v10 >= 0) {
    size_t v11 = v8;
  }
  else {
    size_t v11 = v7;
  }
  if (v10 >= 0) {
    uint64_t v12 = (const char *)*((unsigned __int8 *)v8 + 23);
  }
  else {
    uint64_t v12 = (const char *)*((void *)v8 + 1);
  }
  swift::Demangle::__runtime::demangleTypeAsString(v11, v12, (unint64_t)&v13, v6);
}

void PrintTypeRef::visitNominalTypeRef(PrintTypeRef *this, const swift::reflection::NominalTypeRef *a2)
{
  __int16 v4 = (char *)a2 + 16;
  int v5 = *((char *)a2 + 39);
  if (v5 >= 0) {
    uint64_t v6 = (const swift::reflection::NominalTypeRef *)((char *)a2 + 16);
  }
  else {
    uint64_t v6 = (swift::Demangle::__runtime *)*((void *)a2 + 2);
  }
  if (v5 >= 0) {
    unint64_t v7 = *((unsigned __int8 *)a2 + 39);
  }
  else {
    unint64_t v7 = *((void *)a2 + 3);
  }
  if (swift::Demangle::__runtime::isStruct((uint64_t)v6, v7))
  {
    char v56 = 6;
    strcpy(v55, "struct");
    for (int i = *((_DWORD *)this + 2); i; --i)
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)" ", 1);
    uint64_t v9 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)"(", 1);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v9, (uint64_t)v55, 6);
    if (v56 < 0)
    {
      size_t v11 = *(void **)v55;
LABEL_61:
      operator delete(v11);
    }
  }
  else
  {
    int v12 = *((char *)a2 + 39);
    if (v12 >= 0) {
      uint64_t v13 = (uint64_t)v4;
    }
    else {
      uint64_t v13 = *((void *)a2 + 2);
    }
    if (v12 >= 0) {
      uint64_t v14 = *((unsigned __int8 *)a2 + 39);
    }
    else {
      uint64_t v14 = *((void *)a2 + 3);
    }
    if (swift::Demangle::__runtime::isEnum(v13, v14))
    {
      char v54 = 4;
      strcpy(v53, "enum");
      for (int j = *((_DWORD *)this + 2); j; --j)
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)" ", 1);
      uint64_t v16 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)"(", 1);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v16, (uint64_t)v53, 4);
      if (v54 < 0)
      {
        size_t v11 = *(void **)v53;
        goto LABEL_61;
      }
    }
    else
    {
      int v17 = *((char *)a2 + 39);
      if (v17 >= 0) {
        uint64_t v18 = (uint64_t)v4;
      }
      else {
        uint64_t v18 = *((void *)a2 + 2);
      }
      if (v17 >= 0) {
        uint64_t v19 = *((unsigned __int8 *)a2 + 39);
      }
      else {
        uint64_t v19 = *((void *)a2 + 3);
      }
      if (swift::Demangle::__runtime::isClass(v18, v19))
      {
        char v52 = 5;
        strcpy(v51, "class");
        for (int k = *((_DWORD *)this + 2); k; --k)
          std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)" ", 1);
        uint64_t v21 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)"(", 1);
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v21, (uint64_t)v51, 5);
        if (v52 < 0)
        {
          size_t v11 = *(void **)v51;
          goto LABEL_61;
        }
      }
      else
      {
        int v22 = *((char *)a2 + 39);
        if (v22 >= 0) {
          uint64_t v23 = (uint64_t)v4;
        }
        else {
          uint64_t v23 = *((void *)a2 + 2);
        }
        if (v22 >= 0) {
          unint64_t v24 = *((unsigned __int8 *)a2 + 39);
        }
        else {
          unint64_t v24 = *((void *)a2 + 3);
        }
        if (swift::Demangle::__runtime::isProtocol(v23, v24))
        {
          char v50 = 8;
          strcpy((char *)v49, "protocol");
          for (int m = *((_DWORD *)this + 2); m; --m)
            std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)" ", 1);
          unsigned int v26 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)"(", 1);
          std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v26, (uint64_t)v49, 8);
          if (v50 < 0) {
            operator delete(v49[0]);
          }
          uint64_t v6 = (swift::Demangle::__runtime *)swift::Demangle::__runtime::dropSwiftManglingPrefix((uint64_t)v6, v7);
          unint64_t v7 = v27;
        }
        else
        {
          int v28 = *((char *)a2 + 39);
          if (v28 >= 0) {
            uint64_t v29 = (uint64_t)v4;
          }
          else {
            uint64_t v29 = *((void *)a2 + 2);
          }
          if (v28 >= 0) {
            uint64_t v30 = *((unsigned __int8 *)a2 + 39);
          }
          else {
            uint64_t v30 = *((void *)a2 + 3);
          }
          if (swift::Demangle::__runtime::isAlias(v29, v30))
          {
            char v48 = 5;
            strcpy(v47, "alias");
            for (int n = *((_DWORD *)this + 2); n; --n)
              std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)" ", 1);
            unsigned int v32 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)"(", 1);
            std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v32, (uint64_t)v47, 5);
            if (v48 < 0)
            {
              size_t v11 = *(void **)v47;
              goto LABEL_61;
            }
          }
          else
          {
            char v46 = 7;
            strcpy((char *)__p, "nominal");
            for (iint i = *((_DWORD *)this + 2); ii; --ii)
              std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)" ", 1);
            uint64_t v34 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)"(", 1);
            std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v34, (uint64_t)__p, 7);
            if (v46 < 0)
            {
              size_t v11 = __p[0];
              goto LABEL_61;
            }
          }
        }
      }
    }
  }
  char v35 = 0;
  uint64_t v36 = 0x101010101010101;
  char v37 = 1;
  uint64_t v38 = 0x101010100000000;
  char v39 = 1;
  __int16 v40 = 256;
  char v41 = 1;
  uint64_t v42 = 0;
  uint64_t v43 = 0;
  v44[0] = off_C8B30;
  v44[1] = swift::Demangle::__runtime::genericParameterName;
  v44[3] = v44;
  swift::Demangle::__runtime::demangleTypeAsString(v6, (const char *)v7, (unint64_t)&v35, v10);
}

void PrintTypeRef::visitBoundGenericTypeRef(PrintTypeRef *this, const swift::reflection::BoundGenericTypeRef *a2)
{
  __int16 v4 = (const swift::reflection::BoundGenericTypeRef *)((char *)a2 + 16);
  int v5 = *((char *)a2 + 39);
  if (v5 >= 0) {
    uint64_t v6 = (char *)a2 + 16;
  }
  else {
    uint64_t v6 = (char *)*((void *)a2 + 2);
  }
  if (v5 >= 0) {
    uint64_t v7 = *((unsigned __int8 *)a2 + 39);
  }
  else {
    uint64_t v7 = *((void *)a2 + 3);
  }
  if (swift::Demangle::__runtime::isStruct((uint64_t)v6, v7))
  {
    v41[23] = 20;
    strcpy(v41, "bound_generic_struct");
    for (int i = *((_DWORD *)this + 2); i; --i)
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)" ", 1);
    uint64_t v9 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)"(", 1);
    int v10 = v41;
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v9, (uint64_t)v41, 20);
    if (v41[23] < 0) {
LABEL_11:
    }
      operator delete(*(void **)v10);
  }
  else
  {
    int v15 = *((char *)a2 + 39);
    if (v15 >= 0) {
      uint64_t v16 = (uint64_t)v4;
    }
    else {
      uint64_t v16 = *((void *)a2 + 2);
    }
    if (v15 >= 0) {
      uint64_t v17 = *((unsigned __int8 *)a2 + 39);
    }
    else {
      uint64_t v17 = *((void *)a2 + 3);
    }
    if (swift::Demangle::__runtime::isEnum(v16, v17))
    {
      v40[23] = 18;
      strcpy(v40, "bound_generic_enum");
      for (int j = *((_DWORD *)this + 2); j; --j)
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)" ", 1);
      uint64_t v19 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)"(", 1);
      int v10 = v40;
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v19, (uint64_t)v40, 18);
      if (v40[23] < 0) {
        goto LABEL_11;
      }
    }
    else
    {
      int v20 = *((char *)a2 + 39);
      if (v20 >= 0) {
        uint64_t v21 = (uint64_t)v4;
      }
      else {
        uint64_t v21 = *((void *)a2 + 2);
      }
      if (v20 >= 0) {
        uint64_t v22 = *((unsigned __int8 *)a2 + 39);
      }
      else {
        uint64_t v22 = *((void *)a2 + 3);
      }
      if (swift::Demangle::__runtime::isClass(v21, v22))
      {
        v39[23] = 19;
        strcpy(v39, "bound_generic_class");
        for (int k = *((_DWORD *)this + 2); k; --k)
          std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)" ", 1);
        unint64_t v24 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)"(", 1);
        int v10 = v39;
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v24, (uint64_t)v39, 19);
        if (v39[23] < 0) {
          goto LABEL_11;
        }
      }
      else
      {
        char v38 = 13;
        strcpy(v37, "bound_generic");
        for (int m = *((_DWORD *)this + 2); m; --m)
          std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)" ", 1);
        unsigned int v26 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)"(", 1);
        int v10 = v37;
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v26, (uint64_t)v37, 13);
        if (v38 < 0) {
          goto LABEL_11;
        }
      }
    }
  }
  char v27 = 0;
  uint64_t v28 = 0x101010101010101;
  char v29 = 1;
  uint64_t v30 = 0x101010100000000;
  char v31 = 1;
  __int16 v32 = 256;
  char v33 = 1;
  uint64_t v34 = 0;
  uint64_t v35 = 0;
  v36[0] = off_C8B30;
  v36[1] = swift::Demangle::__runtime::genericParameterName;
  v36[3] = v36;
  int v12 = *((char *)a2 + 39);
  if (v12 >= 0) {
    uint64_t v13 = v4;
  }
  else {
    uint64_t v13 = (swift::Demangle::__runtime *)*((void *)a2 + 2);
  }
  if (v12 >= 0) {
    uint64_t v14 = (const char *)*((unsigned __int8 *)a2 + 39);
  }
  else {
    uint64_t v14 = (const char *)*((void *)a2 + 3);
  }
  swift::Demangle::__runtime::demangleTypeAsString(v13, v14, (unint64_t)&v27, v11);
}

void PrintTypeRef::visitTupleTypeRef(PrintTypeRef *this, const swift::reflection::TupleTypeRef *a2)
{
  char v25 = 5;
  strcpy((char *)__p, "tuple");
  for (int i = *((_DWORD *)this + 2); i; --i)
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)" ", 1);
  int v5 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)"(", 1);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v5, (uint64_t)__p, 5);
  if (v25 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v6 = *((void *)a2 + 5);
  uint64_t v7 = *((void *)a2 + 6);
  int64_t v8 = v7 - v6;
  if (v7 == v6)
  {
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)")", 1);
  }
  else
  {
    if (0xAAAAAAAAAAAAAAABLL * (v8 >> 3) >= 0xAAAAAAAAAAAAAABLL) {
      abort();
    }
    uint64_t v9 = (char *)operator new(v8);
    uint64_t v10 = 0;
    do
    {
      size_t v11 = (long long *)(v6 + v10);
      int v12 = (std::string *)&v9[v10];
      if (*(char *)(v6 + v10 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v12, *(const std::string::value_type **)v11, *((void *)v11 + 1));
      }
      else
      {
        long long v13 = *v11;
        v12->__r_.__value_.__r.__words[2] = *((void *)v11 + 2);
        *(_OWORD *)&v12->__r_.__value_.__l.__data_ = v13;
      }
      v10 += 24;
    }
    while (v6 + v10 != v7);
    if (v10)
    {
      uint64_t v14 = v10 / 24;
      int v15 = (uint64_t *)*((void *)a2 + 2);
      uint64_t v16 = 24 * v14;
      uint64_t v17 = v9;
      do
      {
        if (v17[23] < 0) {
          std::string::__init_copy_ctor_external(&v23, *(const std::string::value_type **)v17, *((void *)v17 + 1));
        }
        else {
          std::string v23 = *(std::string *)v17;
        }
        if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(v23.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = v23.__r_.__value_.__l.__size_;
        }
        if (size)
        {
          if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v19 = &v23;
          }
          else {
            uint64_t v19 = (std::string *)v23.__r_.__value_.__r.__words[0];
          }
          int v20 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)v19, size);
          std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v20, (uint64_t)" = ", 3);
        }
        uint64_t v21 = *v15;
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)"\n", 1);
        *((_DWORD *)this + 2) += 2;
        swift::reflection::TypeRefVisitor<PrintTypeRef,void>::visit(this, v21);
        *((_DWORD *)this + 2) -= 2;
        if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v23.__r_.__value_.__l.__data_);
        }
        v17 += 24;
        ++v15;
        v16 -= 24;
      }
      while (v16);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)")", 1);
      uint64_t v22 = 24 * v14;
      do
      {
        if (v9[v22 - 1] < 0) {
          operator delete(*(void **)&v9[v22 - 24]);
        }
        v22 -= 24;
      }
      while (v22);
    }
    else
    {
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)")", 1);
    }
    operator delete(v9);
  }
}

void *PrintTypeRef::visitFunctionTypeRef(PrintTypeRef *this, const swift::reflection::FunctionTypeRef *a2)
{
  char v110 = 8;
  strcpy((char *)v109, "function");
  for (int i = *((_DWORD *)this + 2); i; --i)
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)" ", 1);
  int v5 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)"(", 1);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v5, (uint64_t)v109, 8);
  if (v110 < 0) {
    operator delete(v109[0]);
  }
  int v6 = *((unsigned __int8 *)a2 + 50);
  switch(v6)
  {
    case 3:
      char v100 = 10;
      strcpy(v99, "convention");
      char v98 = 1;
      LOWORD(v97) = 99;
      PrintMetadataSource::printField((void **)this, (uint64_t)v99, (uint64_t)&v97);
      if (v98 < 0)
      {
        operator delete(v97);
        if ((v100 & 0x80000000) == 0) {
          goto LABEL_24;
        }
      }
      else if ((v100 & 0x80000000) == 0)
      {
        goto LABEL_24;
      }
      uint64_t v7 = v99;
      break;
    case 2:
      char v104 = 10;
      strcpy(v103, "convention");
      char v102 = 4;
      strcpy((char *)v101, "thin");
      PrintMetadataSource::printField((void **)this, (uint64_t)v103, (uint64_t)v101);
      if (v102 < 0)
      {
        operator delete(v101[0]);
        if ((v104 & 0x80000000) == 0) {
          goto LABEL_24;
        }
      }
      else if ((v104 & 0x80000000) == 0)
      {
        goto LABEL_24;
      }
      uint64_t v7 = v103;
      break;
    case 1:
      char v108 = 10;
      strcpy(v107, "convention");
      char v106 = 5;
      strcpy((char *)v105, "block");
      PrintMetadataSource::printField((void **)this, (uint64_t)v107, (uint64_t)v105);
      if (v106 < 0)
      {
        operator delete(v105[0]);
        if ((v108 & 0x80000000) == 0) {
          goto LABEL_24;
        }
      }
      else if ((v108 & 0x80000000) == 0)
      {
        goto LABEL_24;
      }
      uint64_t v7 = v107;
      break;
    default:
      goto LABEL_24;
  }
  operator delete(*(void **)v7);
LABEL_24:
  switch(*((void *)a2 + 8))
  {
    case 1:
      char v96 = 14;
      strcpy(v95, "differentiable");
      char v94 = 7;
      strcpy((char *)__p, "forward");
      PrintMetadataSource::printField((void **)this, (uint64_t)v95, (uint64_t)__p);
      if (v94 < 0)
      {
        operator delete(__p[0]);
        if (v96 < 0)
        {
LABEL_38:
          int64_t v8 = v95;
          goto LABEL_45;
        }
      }
      else if (v96 < 0)
      {
        goto LABEL_38;
      }
LABEL_46:
      uint64_t v9 = *((void *)a2 + 9);
      if (v9)
      {
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)"\n", 1);
        int v10 = *((_DWORD *)this + 2);
        char v80 = 12;
        strcpy((char *)v79, "global-actor");
        int v11 = v10 + 2;
        *((_DWORD *)this + 2) = v10 + 2;
        if (v10 != -2)
        {
          do
          {
            std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)" ", 1);
            --v11;
          }
          while (v11);
        }
        int v12 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)"(", 1);
        if (v80 >= 0) {
          long long v13 = v79;
        }
        else {
          long long v13 = (void **)v79[0];
        }
        if (v80 >= 0) {
          uint64_t v14 = v80;
        }
        else {
          uint64_t v14 = (uint64_t)v79[1];
        }
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v12, (uint64_t)v13, v14);
        if (v80 < 0) {
          operator delete(v79[0]);
        }
        *((_DWORD *)this + 2) += 2;
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)"\n", 1);
        *((_DWORD *)this + 2) += 2;
        swift::reflection::TypeRefVisitor<PrintTypeRef,void>::visit(this, v9);
        *((_DWORD *)this + 2) -= 2;
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)")", 1);
      }
      if ((*((_DWORD *)a2 + 14) & 0xE) != 2) {
        goto LABEL_61;
      }
      char v78 = 8;
      strcpy((char *)v77, "isolated");
      char v76 = 3;
      LODWORD(v75) = 7958113;
      PrintMetadataSource::printField((void **)this, (uint64_t)v77, (uint64_t)&v75);
      if (v76 < 0)
      {
        operator delete(v75);
        if ((v78 & 0x80000000) == 0)
        {
LABEL_61:
          if ((*((unsigned char *)a2 + 56) & 0x10) == 0) {
            goto LABEL_70;
          }
          goto LABEL_62;
        }
      }
      else if ((v78 & 0x80000000) == 0)
      {
        goto LABEL_61;
      }
      operator delete(v77[0]);
      if ((*((unsigned char *)a2 + 56) & 0x10) == 0) {
        goto LABEL_70;
      }
LABEL_62:
      char v74 = 0;
      LOBYTE(v73) = 0;
      char v72 = 14;
      strcpy((char *)v71, "sending-result");
      PrintMetadataSource::printField((void **)this, (uint64_t)&v73, (uint64_t)v71);
      if (v72 < 0)
      {
        operator delete(v71[0]);
        if ((v74 & 0x80000000) == 0) {
          goto LABEL_70;
        }
      }
      else if ((v74 & 0x80000000) == 0)
      {
        goto LABEL_70;
      }
      operator delete(v73);
LABEL_70:
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)"\n", 1);
      int v15 = *((_DWORD *)this + 2);
      char v70 = 10;
      strcpy((char *)v69, "parameters");
      int v16 = v15 + 2;
      *((_DWORD *)this + 2) = v15 + 2;
      if (v15 != -2)
      {
        do
        {
          std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)" ", 1);
          --v16;
        }
        while (v16);
      }
      uint64_t v17 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)"(", 1);
      if (v70 >= 0) {
        uint64_t v18 = v69;
      }
      else {
        uint64_t v18 = (void **)v69[0];
      }
      if (v70 >= 0) {
        uint64_t v19 = v70;
      }
      else {
        uint64_t v19 = (uint64_t)v69[1];
      }
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v17, (uint64_t)v18, v19);
      if (v70 < 0) {
        operator delete(v69[0]);
      }
      uint64_t v20 = *((void *)a2 + 2);
      uint64_t v21 = *((void *)a2 + 3);
      if (v20 == v21)
      {
LABEL_153:
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)")", 1);
        goto LABEL_154;
      }
      break;
    case 2:
      char v92 = 14;
      strcpy(v91, "differentiable");
      char v90 = 7;
      strcpy((char *)v89, "reverse");
      PrintMetadataSource::printField((void **)this, (uint64_t)v91, (uint64_t)v89);
      if (v90 < 0)
      {
        operator delete(v89[0]);
        if ((v92 & 0x80000000) == 0) {
          goto LABEL_46;
        }
      }
      else if ((v92 & 0x80000000) == 0)
      {
        goto LABEL_46;
      }
      int64_t v8 = v91;
      goto LABEL_45;
    case 3:
      char v88 = 14;
      strcpy(v87, "differentiable");
      char v86 = 6;
      strcpy((char *)v85, "normal");
      PrintMetadataSource::printField((void **)this, (uint64_t)v87, (uint64_t)v85);
      if (v86 < 0)
      {
        operator delete(v85[0]);
        if ((v88 & 0x80000000) == 0) {
          goto LABEL_46;
        }
      }
      else if ((v88 & 0x80000000) == 0)
      {
        goto LABEL_46;
      }
      int64_t v8 = v87;
      goto LABEL_45;
    case 4:
      char v84 = 14;
      strcpy(v83, "differentiable");
      char v82 = 6;
      strcpy((char *)v81, "linear");
      PrintMetadataSource::printField((void **)this, (uint64_t)v83, (uint64_t)v81);
      if (v82 < 0)
      {
        operator delete(v81[0]);
        if ((v84 & 0x80000000) == 0) {
          goto LABEL_46;
        }
      }
      else if ((v84 & 0x80000000) == 0)
      {
        goto LABEL_46;
      }
      int64_t v8 = v83;
LABEL_45:
      operator delete(*(void **)v8);
      goto LABEL_46;
    default:
      goto LABEL_46;
  }
  do
  {
    int v22 = *(_DWORD *)(v20 + 24);
    if (!v22) {
      goto LABEL_150;
    }
    *((_DWORD *)this + 2) += 2;
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)"\n", 1);
    int v23 = v22 & 0x7F;
    switch(v23)
    {
      case 3:
        char v64 = 5;
        strcpy((char *)v63, "owned");
        for (int j = *((_DWORD *)this + 2); j; --j)
          std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)" ", 1);
        char v38 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)"(", 1);
        unsigned int v26 = (void **)v63;
        if (v64 >= 0) {
          char v39 = v63;
        }
        else {
          char v39 = (void *)v63[0];
        }
        if (v64 >= 0) {
          uint64_t v40 = v64;
        }
        else {
          uint64_t v40 = v63[1];
        }
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v38, (uint64_t)v39, v40);
        if (v64 < 0) {
LABEL_96:
        }
          operator delete(*v26);
        break;
      case 2:
        char v66 = 6;
        strcpy((char *)v65, "shared");
        for (int k = *((_DWORD *)this + 2); k; --k)
          std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)" ", 1);
        uint64_t v42 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)"(", 1);
        unsigned int v26 = (void **)v65;
        if (v66 >= 0) {
          uint64_t v43 = v65;
        }
        else {
          uint64_t v43 = (void *)v65[0];
        }
        if (v66 >= 0) {
          uint64_t v44 = v66;
        }
        else {
          uint64_t v44 = v65[1];
        }
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v42, (uint64_t)v43, v44);
        if (v66 < 0) {
          goto LABEL_96;
        }
        break;
      case 1:
        char v68 = 5;
        strcpy((char *)v67, "inout");
        for (int m = *((_DWORD *)this + 2); m; --m)
          std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)" ", 1);
        char v25 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)"(", 1);
        unsigned int v26 = (void **)v67;
        char v27 = v68 >= 0 ? v67 : (void *)v67[0];
        uint64_t v28 = v68 >= 0 ? v68 : v67[1];
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v25, (uint64_t)v27, v28);
        if (v68 < 0) {
          goto LABEL_96;
        }
        break;
    }
    if ((v22 & 0x400) == 0) {
      goto LABEL_107;
    }
    char v62 = 8;
    strcpy((char *)v61, "isolated");
    for (int n = *((_DWORD *)this + 2); n; --n)
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)" ", 1);
    uint64_t v30 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)"(", 1);
    char v31 = v62 >= 0 ? v61 : (void **)v61[0];
    __int16 v32 = v62 >= 0 ? (void *)v62 : v61[1];
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v30, (uint64_t)v31, (uint64_t)v32);
    if (v62 < 0)
    {
      operator delete(v61[0]);
      if ((v22 & 0x80) != 0)
      {
LABEL_108:
        char v60 = 8;
        strcpy((char *)v59, "variadic");
        for (iint i = *((_DWORD *)this + 2); ii; --ii)
          std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)" ", 1);
        uint64_t v34 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)"(", 1);
        if (v60 >= 0) {
          uint64_t v35 = v59;
        }
        else {
          uint64_t v35 = (void **)v59[0];
        }
        if (v60 >= 0) {
          uint64_t v36 = v60;
        }
        else {
          uint64_t v36 = (uint64_t)v59[1];
        }
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v34, (uint64_t)v35, v36);
        if (v60 < 0) {
          operator delete(v59[0]);
        }
      }
    }
    else
    {
LABEL_107:
      if ((v22 & 0x80) != 0) {
        goto LABEL_108;
      }
    }
    if ((v22 & 0x800) != 0)
    {
      char v58 = 7;
      strcpy((char *)v57, "sending");
      for (int jj = *((_DWORD *)this + 2); jj; --jj)
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)" ", 1);
      char v46 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)"(", 1);
      if (v58 >= 0) {
        uint64_t v47 = v57;
      }
      else {
        uint64_t v47 = (void **)v57[0];
      }
      if (v58 >= 0) {
        uint64_t v48 = v58;
      }
      else {
        uint64_t v48 = (uint64_t)v57[1];
      }
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v46, (uint64_t)v47, v48);
      if (v58 < 0) {
        operator delete(v57[0]);
      }
    }
LABEL_150:
    uint64_t v49 = *(void *)(v20 + 16);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)"\n", 1);
    *((_DWORD *)this + 2) += 2;
    swift::reflection::TypeRefVisitor<PrintTypeRef,void>::visit(this, v49);
    int v50 = *((_DWORD *)this + 2);
    *((_DWORD *)this + 2) = v50 - 2;
    if (v22)
    {
      *((_DWORD *)this + 2) = v50 - 4;
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)")", 1);
    }
    v20 += 32;
  }
  while (v20 != v21);
  if (*((void *)a2 + 2) == *((void *)a2 + 3)) {
    goto LABEL_153;
  }
LABEL_154:
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)"\n", 1);
  char v56 = 6;
  strcpy((char *)v55, "result");
  for (kint k = *((_DWORD *)this + 2); kk; --kk)
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)" ", 1);
  char v52 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)"(", 1);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v52, (uint64_t)v55, 6);
  if (v56 < 0) {
    operator delete(v55[0]);
  }
  uint64_t v53 = *((void *)a2 + 5);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)"\n", 1);
  *((_DWORD *)this + 2) += 2;
  swift::reflection::TypeRefVisitor<PrintTypeRef,void>::visit(this, v53);
  *((_DWORD *)this + 2) -= 2;
  uint64_t result = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)")", 1);
  *((_DWORD *)this + 2) -= 2;
  return result;
}

void *PrintTypeRef::visitProtocolCompositionTypeRef(PrintTypeRef *this, const swift::reflection::ProtocolCompositionTypeRef *a2)
{
  char v12 = 20;
  strcpy(__p, "protocol_composition");
  for (int i = *((_DWORD *)this + 2); i; --i)
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)" ", 1);
  int v5 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)"(", 1);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v5, (uint64_t)__p, 20);
  if ((v12 & 0x80000000) == 0)
  {
    if (!*((unsigned char *)a2 + 48)) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  operator delete(*(void **)__p);
  if (*((unsigned char *)a2 + 48)) {
LABEL_5:
  }
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)" any_object", 11);
LABEL_6:
  uint64_t v6 = *((void *)a2 + 5);
  if (v6)
  {
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)"\n", 1);
    *((_DWORD *)this + 2) += 2;
    swift::reflection::TypeRefVisitor<PrintTypeRef,void>::visit(this, v6);
    *((_DWORD *)this + 2) -= 2;
  }
  uint64_t v7 = (uint64_t *)*((void *)a2 + 2);
  for (int j = (uint64_t *)*((void *)a2 + 3); v7 != j; *((_DWORD *)this + 2) -= 2)
  {
    uint64_t v9 = *v7++;
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)"\n", 1);
    *((_DWORD *)this + 2) += 2;
    swift::reflection::TypeRefVisitor<PrintTypeRef,void>::visit(this, v9);
  }
  return std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)")", 1);
}

void *PrintTypeRef::visitConstrainedExistentialTypeRef(PrintTypeRef *this, const swift::reflection::ConstrainedExistentialTypeRef *a2)
{
  __int16 v4 = (char *)operator new(0x20uLL);
  strcpy(v4, "constrained_existential_type");
  for (int i = *((_DWORD *)this + 2); i; --i)
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)" ", 1);
  uint64_t v6 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)"(", 1);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v6, (uint64_t)v4, 28);
  operator delete(v4);
  uint64_t v7 = *((void *)a2 + 2);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)"\n", 1);
  *((_DWORD *)this + 2) += 2;
  swift::reflection::TypeRefVisitor<PrintTypeRef,void>::visit(this, v7);
  *((_DWORD *)this + 2) -= 2;
  uint64_t v9 = (long long *)*((void *)a2 + 3);
  int64_t v8 = (long long *)*((void *)a2 + 4);
  while (v9 != v8)
  {
    long long v10 = *v9++;
    long long v12 = v10;
    PrintTypeRef::visitTypeRefRequirement((void **)this, (uint64_t *)&v12);
  }
  return std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)")", 1);
}

void *PrintTypeRef::visitMetatypeTypeRef(PrintTypeRef *this, const swift::reflection::MetatypeTypeRef *a2)
{
  char v13 = 8;
  strcpy((char *)__p, "metatype");
  for (int i = *((_DWORD *)this + 2); i; --i)
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)" ", 1);
  int v5 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)"(", 1);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v5, (uint64_t)__p, 8);
  if ((v13 & 0x80000000) == 0)
  {
    if (!*((unsigned char *)a2 + 24)) {
      goto LABEL_9;
    }
LABEL_7:
    char v11 = 0;
    LOBYTE(v10) = 0;
    char v9 = 12;
    strcpy((char *)v8, "was_abstract");
    PrintMetadataSource::printField((void **)this, (uint64_t)&v10, (uint64_t)v8);
    if (v9 < 0)
    {
      operator delete(v8[0]);
      if ((v11 & 0x80000000) == 0) {
        goto LABEL_9;
      }
    }
    else if ((v11 & 0x80000000) == 0)
    {
      goto LABEL_9;
    }
    operator delete(v10);
    goto LABEL_9;
  }
  operator delete(__p[0]);
  if (*((unsigned char *)a2 + 24)) {
    goto LABEL_7;
  }
LABEL_9:
  uint64_t v6 = *((void *)a2 + 2);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)"\n", 1);
  *((_DWORD *)this + 2) += 2;
  swift::reflection::TypeRefVisitor<PrintTypeRef,void>::visit(this, v6);
  *((_DWORD *)this + 2) -= 2;
  return std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)")", 1);
}

void *PrintTypeRef::visitGenericTypeParameterTypeRef(PrintTypeRef *this, const swift::reflection::GenericTypeParameterTypeRef *a2)
{
  strcpy((char *)v13, "generic_type_parameter");
  HIBYTE(v13[2]) = 22;
  for (int i = *((_DWORD *)this + 2); i; --i)
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)" ", 1);
  int v5 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)"(", 1);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v5, (uint64_t)v13, 22);
  if (SHIBYTE(v13[2]) < 0) {
    operator delete(v13[0]);
  }
  char v12 = 5;
  strcpy((char *)__p, "depth");
  std::to_string(&v10, *((_DWORD *)a2 + 3));
  PrintMetadataSource::printField((void **)this, (uint64_t)__p, (uint64_t)&v10);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v10.__r_.__value_.__l.__data_);
    if ((v12 & 0x80000000) == 0) {
      goto LABEL_7;
    }
  }
  else if ((v12 & 0x80000000) == 0)
  {
    goto LABEL_7;
  }
  operator delete(__p[0]);
LABEL_7:
  char v9 = 5;
  strcpy((char *)v8, "index");
  std::to_string(&v7, *((_DWORD *)a2 + 4));
  PrintMetadataSource::printField((void **)this, (uint64_t)v8, (uint64_t)&v7);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v7.__r_.__value_.__l.__data_);
    if ((v9 & 0x80000000) == 0) {
      return std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)")", 1);
    }
LABEL_13:
    operator delete(v8[0]);
    return std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)")", 1);
  }
  if (v9 < 0) {
    goto LABEL_13;
  }
  return std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)")", 1);
}

void *PrintTypeRef::visitDependentMemberTypeRef(PrintTypeRef *this, const swift::reflection::DependentMemberTypeRef *a2)
{
  HIBYTE(v14[2]) = 16;
  strcpy((char *)v14, "dependent_member");
  for (int i = *((_DWORD *)this + 2); i; --i)
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)" ", 1);
  int v5 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)"(", 1);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v5, (uint64_t)v14, 16);
  if (SHIBYTE(v14[2]) < 0) {
    operator delete(v14[0]);
  }
  char v13 = 8;
  strcpy((char *)__p, "protocol");
  if (*((char *)a2 + 71) < 0) {
    std::string::__init_copy_ctor_external(&v11, *((const std::string::value_type **)a2 + 6), *((void *)a2 + 7));
  }
  else {
    std::string v11 = *(std::string *)((unsigned char *)a2 + 2);
  }
  PrintMetadataSource::printField((void **)this, (uint64_t)__p, (uint64_t)&v11);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v11.__r_.__value_.__l.__data_);
    if ((v13 & 0x80000000) == 0) {
      goto LABEL_10;
    }
  }
  else if ((v13 & 0x80000000) == 0)
  {
    goto LABEL_10;
  }
  operator delete(__p[0]);
LABEL_10:
  uint64_t v6 = *((void *)a2 + 5);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)"\n", 1);
  *((_DWORD *)this + 2) += 2;
  swift::reflection::TypeRefVisitor<PrintTypeRef,void>::visit(this, v6);
  *((_DWORD *)this + 2) -= 2;
  char v10 = 6;
  strcpy((char *)v9, "member");
  if (*((char *)a2 + 39) < 0) {
    std::string::__init_copy_ctor_external(&v8, *((const std::string::value_type **)a2 + 2), *((void *)a2 + 3));
  }
  else {
    std::string v8 = *(std::string *)((char *)a2 + 16);
  }
  PrintMetadataSource::printField((void **)this, (uint64_t)v9, (uint64_t)&v8);
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v8.__r_.__value_.__l.__data_);
    if ((v10 & 0x80000000) == 0) {
      return std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)")", 1);
    }
LABEL_19:
    operator delete(v9[0]);
    return std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)")", 1);
  }
  if (v10 < 0) {
    goto LABEL_19;
  }
  return std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)")", 1);
}

void *PrintTypeRef::visitForeignClassTypeRef(PrintTypeRef *this, const swift::reflection::ForeignClassTypeRef *a2)
{
  char v12 = 7;
  strcpy((char *)__p, "foreign");
  for (int i = *((_DWORD *)this + 2); i; --i)
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)" ", 1);
  int v5 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)"(", 1);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v5, (uint64_t)__p, 7);
  if (v12 < 0)
  {
    operator delete(__p[0]);
    int v6 = *((char *)a2 + 39);
    if ((v6 & 0x80000000) == 0)
    {
LABEL_5:
      if (v6)
      {
        char v10 = 4;
        strcpy((char *)v9, "name");
        std::string v8 = *(std::string *)((char *)a2 + 16);
        goto LABEL_10;
      }
      return std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)")", 1);
    }
  }
  else
  {
    int v6 = *((char *)a2 + 39);
    if ((v6 & 0x80000000) == 0) {
      goto LABEL_5;
    }
  }
  if (*((void *)a2 + 3))
  {
    char v10 = 4;
    strcpy((char *)v9, "name");
    std::string::__init_copy_ctor_external(&v8, *((const std::string::value_type **)a2 + 2), *((void *)a2 + 3));
LABEL_10:
    PrintMetadataSource::printField((void **)this, (uint64_t)v9, (uint64_t)&v8);
    if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v8.__r_.__value_.__l.__data_);
      if ((v10 & 0x80000000) == 0) {
        return std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)")", 1);
      }
    }
    else if ((v10 & 0x80000000) == 0)
    {
      return std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)")", 1);
    }
    operator delete(v9[0]);
  }
  return std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)")", 1);
}

void *PrintTypeRef::visitObjCClassTypeRef(PrintTypeRef *this, const swift::reflection::ObjCClassTypeRef *a2)
{
  char v12 = 17;
  strcpy(__p, "objective_c_class");
  for (int i = *((_DWORD *)this + 2); i; --i)
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)" ", 1);
  int v5 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)"(", 1);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v5, (uint64_t)__p, 17);
  if (v12 < 0)
  {
    operator delete(*(void **)__p);
    int v6 = *((char *)a2 + 39);
    if ((v6 & 0x80000000) == 0)
    {
LABEL_5:
      if (v6)
      {
        char v10 = 4;
        strcpy((char *)v9, "name");
        std::string v8 = *(std::string *)((char *)a2 + 16);
        goto LABEL_10;
      }
      return std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)")", 1);
    }
  }
  else
  {
    int v6 = *((char *)a2 + 39);
    if ((v6 & 0x80000000) == 0) {
      goto LABEL_5;
    }
  }
  if (*((void *)a2 + 3))
  {
    char v10 = 4;
    strcpy((char *)v9, "name");
    std::string::__init_copy_ctor_external(&v8, *((const std::string::value_type **)a2 + 2), *((void *)a2 + 3));
LABEL_10:
    PrintMetadataSource::printField((void **)this, (uint64_t)v9, (uint64_t)&v8);
    if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v8.__r_.__value_.__l.__data_);
      if ((v10 & 0x80000000) == 0) {
        return std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)")", 1);
      }
    }
    else if ((v10 & 0x80000000) == 0)
    {
      return std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)")", 1);
    }
    operator delete(v9[0]);
  }
  return std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)")", 1);
}

void *PrintTypeRef::visitObjCProtocolTypeRef(PrintTypeRef *this, const swift::reflection::ObjCProtocolTypeRef *a2)
{
  char v12 = 20;
  strcpy(__p, "objective_c_protocol");
  for (int i = *((_DWORD *)this + 2); i; --i)
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)" ", 1);
  int v5 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)"(", 1);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v5, (uint64_t)__p, 20);
  if (v12 < 0)
  {
    operator delete(*(void **)__p);
    int v6 = *((char *)a2 + 39);
    if ((v6 & 0x80000000) == 0)
    {
LABEL_5:
      if (v6)
      {
        char v10 = 4;
        strcpy((char *)v9, "name");
        std::string v8 = *(std::string *)((char *)a2 + 16);
        goto LABEL_10;
      }
      return std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)")", 1);
    }
  }
  else
  {
    int v6 = *((char *)a2 + 39);
    if ((v6 & 0x80000000) == 0) {
      goto LABEL_5;
    }
  }
  if (*((void *)a2 + 3))
  {
    char v10 = 4;
    strcpy((char *)v9, "name");
    std::string::__init_copy_ctor_external(&v8, *((const std::string::value_type **)a2 + 2), *((void *)a2 + 3));
LABEL_10:
    PrintMetadataSource::printField((void **)this, (uint64_t)v9, (uint64_t)&v8);
    if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v8.__r_.__value_.__l.__data_);
      if ((v10 & 0x80000000) == 0) {
        return std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)")", 1);
      }
    }
    else if ((v10 & 0x80000000) == 0)
    {
      return std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)")", 1);
    }
    operator delete(v9[0]);
  }
  return std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)")", 1);
}

void *PrintTypeRef::visitOpaqueTypeRef(PrintTypeRef *this, const swift::reflection::OpaqueTypeRef *a2)
{
  char v7 = 6;
  strcpy((char *)__p, "opaque");
  for (int i = *((_DWORD *)this + 2); i; --i)
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)" ", 1);
  __int16 v4 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)"(", 1);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v4, (uint64_t)__p, 6);
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  return std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)")", 1);
}

void *PrintTypeRef::visitOpaqueArchetypeTypeRef(PrintTypeRef *this, const swift::reflection::OpaqueArchetypeTypeRef *a2)
{
  char v39 = 16;
  strcpy(__p, "opaque_archetype");
  for (int i = *((_DWORD *)this + 2); i; --i)
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)" ", 1);
  int v5 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)"(", 1);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v5, (uint64_t)__p, 16);
  if (v39 < 0) {
    operator delete(*(void **)__p);
  }
  char v37 = 2;
  strcpy((char *)v36, "id");
  int v6 = *((char *)a2 + 39);
  if (v6 >= 0) {
    char v7 = (char *)a2 + 16;
  }
  else {
    char v7 = (char *)*((void *)a2 + 2);
  }
  if (v6 >= 0) {
    size_t v8 = *((unsigned __int8 *)a2 + 39);
  }
  else {
    size_t v8 = *((void *)a2 + 3);
  }
  if (!v7)
  {
    __dst = 0;
    size_t v34 = 0;
    unint64_t v35 = 0;
    goto LABEL_22;
  }
  if (v8 > 0x7FFFFFFFFFFFFFF7) {
    goto LABEL_57;
  }
  if (v8 >= 0x17)
  {
    uint64_t v10 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v8 | 7) != 0x17) {
      uint64_t v10 = v8 | 7;
    }
    uint64_t v11 = v10 + 1;
    p_dst = (void **)operator new(v10 + 1);
    size_t v34 = v8;
    unint64_t v35 = v11 | 0x8000000000000000;
    __dst = p_dst;
  }
  else
  {
    HIBYTE(v35) = v8;
    p_dst = (void **)&__dst;
    if (!v8) {
      goto LABEL_21;
    }
  }
  memmove(p_dst, v7, v8);
LABEL_21:
  *((unsigned char *)p_dst + v8) = 0;
LABEL_22:
  PrintMetadataSource::printField((void **)this, (uint64_t)v36, (uint64_t)&__dst);
  if (SHIBYTE(v35) < 0)
  {
    operator delete(__dst);
    if ((v37 & 0x80000000) == 0) {
      goto LABEL_24;
    }
  }
  else if ((v37 & 0x80000000) == 0)
  {
    goto LABEL_24;
  }
  operator delete(v36[0]);
LABEL_24:
  char v32 = 11;
  strcpy((char *)v31, "description");
  int v12 = *((char *)a2 + 63);
  if (v12 >= 0) {
    char v13 = (char *)a2 + 40;
  }
  else {
    char v13 = (char *)*((void *)a2 + 5);
  }
  if (v12 >= 0) {
    size_t v14 = *((unsigned __int8 *)a2 + 63);
  }
  else {
    size_t v14 = *((void *)a2 + 6);
  }
  if (!v13)
  {
    uint64_t v28 = 0;
    size_t v29 = 0;
    unint64_t v30 = 0;
    goto LABEL_43;
  }
  if (v14 > 0x7FFFFFFFFFFFFFF7) {
LABEL_57:
  }
    abort();
  if (v14 >= 0x17)
  {
    uint64_t v16 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v14 | 7) != 0x17) {
      uint64_t v16 = v14 | 7;
    }
    uint64_t v17 = v16 + 1;
    int v15 = operator new(v16 + 1);
    size_t v29 = v14;
    unint64_t v30 = v17 | 0x8000000000000000;
    uint64_t v28 = v15;
  }
  else
  {
    HIBYTE(v30) = v14;
    int v15 = &v28;
    if (!v14) {
      goto LABEL_42;
    }
  }
  memmove(v15, v13, v14);
LABEL_42:
  *((unsigned char *)v15 + v14) = 0;
LABEL_43:
  PrintMetadataSource::printField((void **)this, (uint64_t)v31, (uint64_t)&v28);
  if (SHIBYTE(v30) < 0)
  {
    operator delete(v28);
    if ((v32 & 0x80000000) == 0) {
      goto LABEL_45;
    }
  }
  else if ((v32 & 0x80000000) == 0)
  {
    goto LABEL_45;
  }
  operator delete(v31[0]);
LABEL_45:
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)" ordinal ", 9);
  uint64_t v18 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v18, (uint64_t)" ", 1);
  uint64_t v19 = *((void *)a2 + 12);
  for (uint64_t j = *((void *)a2 + 13); v19 != j; v19 += 16)
  {
    int v22 = *(uint64_t **)v19;
    uint64_t v21 = *(void *)(v19 + 8);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)"\n", 1);
    int v23 = *((_DWORD *)this + 2);
    int v24 = v23 + 2;
    if (v23 != -2)
    {
      do
      {
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)" ", 1);
        --v24;
      }
      while (v24);
    }
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)"args: <", 7);
    if (v21)
    {
      uint64_t v25 = 8 * v21;
      do
      {
        uint64_t v26 = *v22++;
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)"\n", 1);
        *((_DWORD *)this + 2) += 2;
        swift::reflection::TypeRefVisitor<PrintTypeRef,void>::visit(this, v26);
        *((_DWORD *)this + 2) -= 2;
        v25 -= 8;
      }
      while (v25);
    }
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)">", 1);
  }
  return std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)")", 1);
}

void *PrintTypeRef::visitSILBoxTypeWithLayoutTypeRef(PrintTypeRef *this, const swift::reflection::SILBoxTypeWithLayoutTypeRef *a2)
{
  char v42 = 20;
  strcpy(__p, "sil_box_with_layout\n");
  for (int i = *((_DWORD *)this + 2); i; --i)
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)" ", 1);
  int v5 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)"(", 1);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v5, (uint64_t)__p, 20);
  if (v42 < 0) {
    operator delete(*(void **)__p);
  }
  int v6 = *((_DWORD *)this + 2);
  char v40 = 7;
  strcpy((char *)v39, "layout\n");
  int v7 = v6 + 2;
  *((_DWORD *)this + 2) = v6 + 2;
  if (v6 != -2)
  {
    do
    {
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)" ", 1);
      --v7;
    }
    while (v7);
  }
  size_t v8 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)"(", 1);
  if (v40 >= 0) {
    char v9 = v39;
  }
  else {
    char v9 = (void **)v39[0];
  }
  if (v40 >= 0) {
    uint64_t v10 = v40;
  }
  else {
    uint64_t v10 = (uint64_t)v39[1];
  }
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v8, (uint64_t)v9, v10);
  if (v40 < 0) {
    operator delete(v39[0]);
  }
  int v11 = *((_DWORD *)this + 2);
  *((_DWORD *)this + 2) = v11 + 2;
  int v12 = (uint64_t *)*((void *)a2 + 2);
  char v13 = (uint64_t *)*((void *)a2 + 3);
  if (v12 != v13)
  {
    do
    {
      int v15 = "var";
      if ((*v12 & 4) == 0) {
        int v15 = "let";
      }
      char v38 = 3;
      LOWORD(v37[0]) = *(_WORD *)v15;
      WORD1(v37[0]) = *((unsigned __int8 *)v15 + 2);
      for (int j = *((_DWORD *)this + 2); j; --j)
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)" ", 1);
      uint64_t v17 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)"(", 1);
      if (v38 >= 0) {
        uint64_t v18 = v37;
      }
      else {
        uint64_t v18 = (void **)v37[0];
      }
      if (v38 >= 0) {
        uint64_t v19 = v38;
      }
      else {
        uint64_t v19 = (uint64_t)v37[1];
      }
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v17, (uint64_t)v18, v19);
      if (v38 < 0) {
        operator delete(v37[0]);
      }
      uint64_t v14 = *v12++;
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)"\n", 1);
      *((_DWORD *)this + 2) += 2;
      swift::reflection::TypeRefVisitor<PrintTypeRef,void>::visit(this, v14 & 0xFFFFFFFFFFFFFFF8);
      *((_DWORD *)this + 2) -= 2;
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)")", 1);
    }
    while (v12 != v13);
    int v11 = *((_DWORD *)this + 2) - 2;
  }
  *((_DWORD *)this + 2) = v11;
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)")\n", 2);
  HIBYTE(v36[2]) = 18;
  strcpy((char *)v36, "generic_signature\n");
  for (int k = *((_DWORD *)this + 2); k; --k)
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)" ", 1);
  uint64_t v21 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)"(", 1);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v21, (uint64_t)v36, 18);
  if (SHIBYTE(v36[2]) < 0) {
    operator delete(v36[0]);
  }
  int v22 = *((_DWORD *)this + 2);
  *((_DWORD *)this + 2) = v22 + 2;
  int v23 = (uint64_t *)*((void *)a2 + 5);
  int v24 = (uint64_t *)*((void *)a2 + 6);
  if (v23 != v24)
  {
    do
    {
      char v35 = 12;
      strcpy((char *)v34, "substitution");
      for (int m = *((_DWORD *)this + 2); m; --m)
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)" ", 1);
      uint64_t v28 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)"(", 1);
      if (v35 >= 0) {
        size_t v29 = v34;
      }
      else {
        size_t v29 = (void **)v34[0];
      }
      if (v35 >= 0) {
        uint64_t v30 = v35;
      }
      else {
        uint64_t v30 = (uint64_t)v34[1];
      }
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v28, (uint64_t)v29, v30);
      if (v35 < 0) {
        operator delete(v34[0]);
      }
      uint64_t v25 = *v23;
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)"\n", 1);
      *((_DWORD *)this + 2) += 2;
      swift::reflection::TypeRefVisitor<PrintTypeRef,void>::visit(this, v25);
      *((_DWORD *)this + 2) -= 2;
      uint64_t v26 = v23[1];
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)"\n", 1);
      *((_DWORD *)this + 2) += 2;
      swift::reflection::TypeRefVisitor<PrintTypeRef,void>::visit(this, v26);
      *((_DWORD *)this + 2) -= 2;
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)")", 1);
      v23 += 2;
    }
    while (v23 != v24);
    int v22 = *((_DWORD *)this + 2) - 2;
  }
  *((_DWORD *)this + 2) = v22;
  char v32 = (uint64_t *)*((void *)a2 + 8);
  for (int n = (uint64_t *)*((void *)a2 + 9); v32 != n; v32 += 2)
    PrintTypeRef::visitTypeRefRequirement((void **)this, v32);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)")", 1);
  return std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(void **)this, (uint64_t)")", 1);
}

void *PrintTypeRef::visitTypeRefRequirement(void **a1, uint64_t *a2)
{
  char v20 = 12;
  strcpy((char *)__p, "requirement ");
  for (int i = *((_DWORD *)a1 + 2); i; --i)
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*a1, (uint64_t)" ", 1);
  int v5 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*a1, (uint64_t)"(", 1);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v5, (uint64_t)__p, 12);
  if (v20 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v6 = *a2;
  switch(*(_DWORD *)a2 & 7)
  {
    case 0:
    case 1:
      unint64_t v7 = v6 & 0xFFFFFFFFFFFFFFF8;
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*a1, (uint64_t)"\n", 1);
      *((_DWORD *)a1 + 2) += 2;
      swift::reflection::TypeRefVisitor<PrintTypeRef,void>::visit(a1, v7);
      *((_DWORD *)a1 + 2) -= 2;
      size_t v8 = *a1;
      char v9 = " : ";
      uint64_t v10 = 3;
      goto LABEL_8;
    case 2:
      unint64_t v11 = v6 & 0xFFFFFFFFFFFFFFF8;
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*a1, (uint64_t)"\n", 1);
      *((_DWORD *)a1 + 2) += 2;
      swift::reflection::TypeRefVisitor<PrintTypeRef,void>::visit(a1, v11);
      *((_DWORD *)a1 + 2) -= 2;
      size_t v8 = *a1;
      char v9 = " == ";
      uint64_t v10 = 4;
LABEL_8:
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v8, (uint64_t)v9, v10);
      uint64_t v12 = a2[1];
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*a1, (uint64_t)"\n", 1);
      *((_DWORD *)a1 + 2) += 2;
      swift::reflection::TypeRefVisitor<PrintTypeRef,void>::visit(a1, v12);
      *((_DWORD *)a1 + 2) -= 2;
      return std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*a1, (uint64_t)")", 1);
    case 3:
      char v13 = *a1;
      uint64_t v14 = "layout requirement";
      uint64_t v15 = 18;
      goto LABEL_11;
    case 4:
      unint64_t v16 = v6 & 0xFFFFFFFFFFFFFFF8;
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*a1, (uint64_t)"\n", 1);
      *((_DWORD *)a1 + 2) += 2;
      swift::reflection::TypeRefVisitor<PrintTypeRef,void>::visit(a1, v16);
      *((_DWORD *)a1 + 2) -= 2;
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*a1, (uint64_t)".shape == ", 10);
      uint64_t v17 = a2[1];
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*a1, (uint64_t)"\n", 1);
      *((_DWORD *)a1 + 2) += 2;
      swift::reflection::TypeRefVisitor<PrintTypeRef,void>::visit(a1, v17);
      *((_DWORD *)a1 + 2) -= 2;
      char v13 = *a1;
      uint64_t v14 = ".shape";
      uint64_t v15 = 6;
LABEL_11:
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v13, (uint64_t)v14, v15);
      break;
    default:
      return std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*a1, (uint64_t)")", 1);
  }
  return std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*a1, (uint64_t)")", 1);
}

uint64_t TypeRefSubstitution::visitBoundGenericTypeRef(TypeRefSubstitution *this, const swift::reflection::BoundGenericTypeRef *a2)
{
  uint64_t v2 = a2;
  uint64_t v3 = (uint64_t *)this;
  if (*((void *)a2 + 5)) {
    uint64_t v4 = swift::reflection::TypeRefVisitor<TypeRefSubstitution,swift::reflection::TypeRef const*>::visit(this);
  }
  else {
    uint64_t v4 = 0;
  }
  uint64_t v5 = *((void *)v2 + 6);
  uint64_t v6 = *((void *)v2 + 7);
  if (v5 == v6)
  {
    unint64_t v7 = 0;
    uint64_t v28 = *v3;
    char v38 = 0;
    char v39 = 0;
    long long __p = 0;
    goto LABEL_40;
  }
  uint64_t v34 = v4;
  char v35 = v2;
  unint64_t v7 = 0;
  size_t v8 = 0;
  char v9 = 0;
  uint64_t v36 = v3;
  do
  {
    uint64_t v10 = swift::reflection::TypeRefVisitor<TypeRefSubstitution,swift::reflection::TypeRef const*>::visit(v3);
    uint64_t v11 = v10;
    if (v8 < v9)
    {
      *v8++ = v10;
      goto LABEL_7;
    }
    uint64_t v12 = v8 - v7;
    unint64_t v13 = v12 + 1;
    if ((unint64_t)(v12 + 1) >> 61) {
      goto LABEL_45;
    }
    if (((char *)v9 - (char *)v7) >> 2 > v13) {
      unint64_t v13 = ((char *)v9 - (char *)v7) >> 2;
    }
    if ((unint64_t)((char *)v9 - (char *)v7) >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v13;
    }
    if (v14)
    {
      if (v14 >> 61) {
        std::__throw_bad_array_new_length[abi:nn180100]();
      }
      uint64_t v15 = operator new(8 * v14);
    }
    else
    {
      uint64_t v15 = 0;
    }
    unint64_t v16 = (uint64_t *)&v15[8 * v12];
    *unint64_t v16 = v11;
    uint64_t v17 = v16 + 1;
    if (v8 != v7)
    {
      unint64_t v18 = (char *)v8 - (char *)v7 - 8;
      if (v18 >= 0x168)
      {
        unint64_t v20 = ((char *)(v8 - 1) - (char *)v7) & 0xFFFFFFFFFFFFFFF8;
        if (&v15[(char *)v8 - (char *)v7 - 8 - v20] > &v15[(char *)v8 - (char *)v7 - 8])
        {
          uint64_t v19 = v8;
        }
        else if ((uint64_t *)((char *)v8 - v20 - 8) > v8 - 1)
        {
          uint64_t v19 = v8;
        }
        else if ((unint64_t)((char *)v7 - v15) >= 0x20)
        {
          uint64_t v21 = (v18 >> 3) + 1;
          uint64_t v22 = 8 * (v21 & 0x3FFFFFFFFFFFFFFCLL);
          uint64_t v19 = &v8[v22 / 0xFFFFFFFFFFFFFFF8];
          unint64_t v16 = (uint64_t *)((char *)v16 - v22);
          int v23 = &v15[8 * v12 - 16];
          int v24 = v8 - 2;
          uint64_t v25 = v21 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v26 = *(_OWORD *)v24;
            *(v23 - 1) = *((_OWORD *)v24 - 1);
            _OWORD *v23 = v26;
            v23 -= 2;
            v24 -= 4;
            v25 -= 4;
          }
          while (v25);
          if (v21 == (v21 & 0x3FFFFFFFFFFFFFFCLL)) {
            goto LABEL_32;
          }
        }
        else
        {
          uint64_t v19 = v8;
        }
      }
      else
      {
        uint64_t v19 = v8;
      }
      do
      {
        uint64_t v27 = *--v19;
        *--unint64_t v16 = v27;
      }
      while (v19 != v7);
    }
LABEL_32:
    char v9 = (uint64_t *)&v15[8 * v14];
    if (v7) {
      operator delete(v7);
    }
    unint64_t v7 = v16;
    size_t v8 = v17;
    uint64_t v3 = v36;
LABEL_7:
    v5 += 8;
  }
  while (v5 != v6);
  uint64_t v28 = *v3;
  char v38 = 0;
  char v39 = 0;
  long long __p = 0;
  uint64_t v29 = (char *)v8 - (char *)v7;
  if (v8 != v7)
  {
    if (v29 < 0) {
LABEL_45:
    }
      abort();
    uint64_t v30 = (char *)operator new((char *)v8 - (char *)v7);
    char v31 = &v30[8 * (v29 >> 3)];
    long long __p = v30;
    char v39 = v31;
    memcpy(v30, v7, (char *)v8 - (char *)v7);
    char v38 = v31;
  }
  uint64_t v4 = v34;
  uint64_t v2 = v35;
LABEL_40:
  uint64_t v32 = swift::reflection::BoundGenericTypeRef::create<swift::reflection::TypeRefBuilder>(v28, (uint64_t)v2 + 16, (uint64_t **)&__p, v4);
  if (__p)
  {
    char v38 = __p;
    operator delete(__p);
  }
  if (v7) {
    operator delete(v7);
  }
  return v32;
}

uint64_t TypeRefSubstitution::visitTupleTypeRef(TypeRefSubstitution *this, const swift::reflection::TupleTypeRef *a2)
{
  uint64_t v2 = *((void *)a2 + 2);
  uint64_t v3 = *((void *)a2 + 3);
  if (v2 != v3)
  {
    uint64_t v4 = this;
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    unint64_t v7 = 0;
    while (1)
    {
      uint64_t v9 = swift::reflection::TypeRefVisitor<TypeRefSubstitution,swift::reflection::TypeRef const*>::visit(v4);
      uint64_t v10 = v9;
      if (v6 >= v7) {
        break;
      }
      *(void *)uint64_t v6 = v9;
      size_t v8 = v6 + 8;
LABEL_4:
      v2 += 8;
      uint64_t v6 = v8;
      if (v2 == v3) {
        goto LABEL_33;
      }
    }
    uint64_t v11 = (v6 - v5) >> 3;
    unint64_t v12 = v11 + 1;
    if ((unint64_t)(v11 + 1) >> 61) {
      goto LABEL_73;
    }
    if ((v7 - v5) >> 2 > v12) {
      unint64_t v12 = (v7 - v5) >> 2;
    }
    if ((unint64_t)(v7 - v5) >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v12;
    }
    if (v13)
    {
      if (v13 >> 61) {
        std::__throw_bad_array_new_length[abi:nn180100]();
      }
      unint64_t v14 = operator new(8 * v13);
    }
    else
    {
      unint64_t v14 = 0;
    }
    uint64_t v15 = (uint64_t *)&v14[8 * v11];
    uint64_t *v15 = v10;
    size_t v8 = (char *)(v15 + 1);
    if (v6 != v5)
    {
      unint64_t v16 = v6 - v5 - 8;
      if (v16 >= 0x168)
      {
        unint64_t v18 = (v6 - 8 - v5) & 0xFFFFFFFFFFFFFFF8;
        if (&v14[v6 - v5 - 8 - v18] > &v14[v6 - v5 - 8])
        {
          uint64_t v17 = v6;
        }
        else if (&v6[-v18 - 8] > v6 - 8)
        {
          uint64_t v17 = v6;
        }
        else if ((unint64_t)(v5 - v14) >= 0x20)
        {
          uint64_t v19 = (v16 >> 3) + 1;
          uint64_t v20 = 8 * (v19 & 0x3FFFFFFFFFFFFFFCLL);
          uint64_t v17 = &v6[-v20];
          uint64_t v15 = (uint64_t *)((char *)v15 - v20);
          uint64_t v21 = &v14[8 * v11 - 16];
          uint64_t v22 = v6 - 16;
          uint64_t v23 = v19 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v24 = *(_OWORD *)v22;
            *(v21 - 1) = *((_OWORD *)v22 - 1);
            _OWORD *v21 = v24;
            v21 -= 2;
            v22 -= 32;
            v23 -= 4;
          }
          while (v23);
          if (v19 == (v19 & 0x3FFFFFFFFFFFFFFCLL)) {
            goto LABEL_29;
          }
        }
        else
        {
          uint64_t v17 = v6;
        }
      }
      else
      {
        uint64_t v17 = v6;
      }
      do
      {
        uint64_t v25 = *((void *)v17 - 1);
        v17 -= 8;
        *--uint64_t v15 = v25;
      }
      while (v17 != v5);
    }
LABEL_29:
    unint64_t v7 = &v14[8 * v13];
    if (v5) {
      operator delete(v5);
    }
    uint64_t v5 = (char *)v15;
    uint64_t v4 = this;
    goto LABEL_4;
  }
  size_t v8 = 0;
  uint64_t v5 = 0;
LABEL_33:
  uint64_t v26 = *((void *)a2 + 5);
  uint64_t v27 = *((void *)a2 + 6);
  int64_t v28 = v27 - v26;
  if (v27 == v26)
  {
    uint64_t v29 = 0;
    uint64_t v34 = 0;
  }
  else
  {
    if (0xAAAAAAAAAAAAAAABLL * (v28 >> 3) > 0xAAAAAAAAAAAAAAALL) {
      goto LABEL_73;
    }
    uint64_t v29 = (char *)operator new(v28);
    uint64_t v30 = 0;
    do
    {
      char v31 = (long long *)(v26 + v30);
      uint64_t v32 = (std::string *)&v29[v30];
      if (*(char *)(v26 + v30 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v32, *(const std::string::value_type **)v31, *((void *)v31 + 1));
      }
      else
      {
        long long v33 = *v31;
        v32->__r_.__value_.__r.__words[2] = *((void *)v31 + 2);
        *(_OWORD *)&v32->__r_.__value_.__l.__data_ = v33;
      }
      v30 += 24;
    }
    while (v26 + v30 != v27);
    uint64_t v34 = &v29[v30];
  }
  uint64_t v35 = *(void *)this;
  char v56 = 0;
  uint64_t v57 = 0;
  unsigned int v55 = 0;
  uint64_t v36 = v8 - v5;
  if (v8 != v5)
  {
    if (v36 < 0) {
      goto LABEL_73;
    }
    char v37 = (char *)operator new(v8 - v5);
    char v38 = &v37[8 * (v36 >> 3)];
    unsigned int v55 = v37;
    uint64_t v57 = v38;
    memcpy(v37, v5, v8 - v5);
    char v56 = v38;
  }
  long long __p = 0;
  uint64_t v53 = 0;
  char v54 = 0;
  int64_t v39 = v34 - v29;
  if (v34 == v29) {
    goto LABEL_53;
  }
  unint64_t v40 = 0xAAAAAAAAAAAAAAABLL * (v39 >> 3);
  if (v40 > 0xAAAAAAAAAAAAAAALL) {
LABEL_73:
  }
    abort();
  char v41 = (char *)operator new(v39);
  uint64_t v42 = 0;
  long long __p = v41;
  char v54 = &v41[24 * v40];
  do
  {
    uint64_t v43 = &v29[v42];
    uint64_t v44 = (std::string *)&v41[v42];
    if (v29[v42 + 23] < 0)
    {
      std::string::__init_copy_ctor_external(v44, *(const std::string::value_type **)v43, *((void *)v43 + 1));
    }
    else
    {
      *(_OWORD *)&v44->__r_.__value_.__l.__data_ = *(_OWORD *)v43;
      v44->__r_.__value_.__r.__words[2] = *((void *)v43 + 2);
    }
    v42 += 24;
  }
  while (&v29[v42] != v34);
  uint64_t v53 = &v41[v42];
LABEL_53:
  uint64_t v45 = swift::reflection::TupleTypeRef::create<swift::reflection::TypeRefBuilder>(v35, (uint64_t)&v55, (long long **)&__p);
  char v46 = (void **)__p;
  if (__p)
  {
    uint64_t v47 = (void **)v53;
    uint64_t v48 = __p;
    if (v53 != __p)
    {
      do
      {
        if (*((char *)v47 - 1) < 0) {
          operator delete(*(v47 - 3));
        }
        v47 -= 3;
      }
      while (v47 != v46);
      uint64_t v48 = __p;
    }
    uint64_t v53 = (char *)v46;
    operator delete(v48);
  }
  if (v55)
  {
    char v56 = v55;
    operator delete(v55);
  }
  if (v29)
  {
    while (v34 != v29)
    {
      if (*(v34 - 1) < 0) {
        operator delete(*((void **)v34 - 3));
      }
      v34 -= 24;
    }
    operator delete(v29);
    if (v5) {
      goto LABEL_65;
    }
  }
  else if (v5)
  {
LABEL_65:
    operator delete(v5);
  }
  return v45;
}

uint64_t TypeRefSubstitution::visitFunctionTypeRef(TypeRefSubstitution *this, const swift::reflection::FunctionTypeRef *a2)
{
  uint64_t v3 = (uint64_t *)*((void *)a2 + 2);
  uint64_t v4 = (uint64_t *)*((void *)a2 + 3);
  if (v3 != v4)
  {
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    unint64_t v7 = 0;
    uint64_t v34 = (uint64_t *)*((void *)a2 + 3);
    while (1)
    {
      uint64_t v8 = swift::reflection::TypeRefVisitor<TypeRefSubstitution,swift::reflection::TypeRef const*>::visit(this);
      uint64_t v9 = v8;
      uint64_t v10 = *v3;
      uint64_t v11 = v3[1];
      int v12 = *((_DWORD *)v3 + 6);
      if (v6 < v7)
      {
        *(void *)uint64_t v6 = v10;
        *((void *)v6 + 1) = v11;
        *((void *)v6 + 2) = v8;
        *((_DWORD *)v6 + 6) = v12;
        v6 += 32;
      }
      else
      {
        unint64_t v13 = this;
        uint64_t v14 = (v6 - v5) >> 5;
        unint64_t v15 = v14 + 1;
        if ((unint64_t)(v14 + 1) >> 59) {
          goto LABEL_38;
        }
        if ((v7 - v5) >> 4 > v15) {
          unint64_t v15 = (v7 - v5) >> 4;
        }
        if ((unint64_t)(v7 - v5) >= 0x7FFFFFFFFFFFFFE0) {
          unint64_t v16 = 0x7FFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v16 = v15;
        }
        if (v16)
        {
          if (v16 >> 59) {
            std::__throw_bad_array_new_length[abi:nn180100]();
          }
          uint64_t v17 = (char *)operator new(32 * v16);
        }
        else
        {
          uint64_t v17 = 0;
        }
        unint64_t v18 = &v17[32 * v14];
        *(void *)unint64_t v18 = v10;
        *((void *)v18 + 1) = v11;
        *((void *)v18 + 2) = v9;
        *((_DWORD *)v18 + 6) = v12;
        if (v6 == v5)
        {
          uint64_t v21 = &v17[32 * v14];
          this = v13;
        }
        else
        {
          uint64_t v19 = &v17[32 * v14];
          this = v13;
          do
          {
            long long v20 = *((_OWORD *)v6 - 2);
            uint64_t v21 = v19 - 32;
            *(_OWORD *)(v19 - 20) = *(_OWORD *)(v6 - 20);
            *((_OWORD *)v19 - 2) = v20;
            v6 -= 32;
            v19 -= 32;
          }
          while (v6 != v5);
        }
        unint64_t v7 = &v17[32 * v16];
        uint64_t v6 = v18 + 32;
        uint64_t v4 = v34;
        if (v5) {
          operator delete(v5);
        }
        uint64_t v5 = v21;
      }
      v3 += 4;
      if (v3 == v4) {
        goto LABEL_25;
      }
    }
  }
  uint64_t v6 = 0;
  uint64_t v5 = 0;
LABEL_25:
  uint64_t v22 = swift::reflection::TypeRefVisitor<TypeRefSubstitution,swift::reflection::TypeRef const*>::visit(this);
  unint64_t v23 = *((void *)a2 + 6);
  unsigned int v24 = *((_DWORD *)a2 + 14);
  if (*((void *)a2 + 9))
  {
    uint64_t v25 = swift::reflection::TypeRefVisitor<TypeRefSubstitution,swift::reflection::TypeRef const*>::visit(this);
    if (*((void *)a2 + 10))
    {
LABEL_27:
      uint64_t v26 = swift::reflection::TypeRefVisitor<TypeRefSubstitution,swift::reflection::TypeRef const*>::visit(this);
      goto LABEL_30;
    }
  }
  else
  {
    uint64_t v25 = 0;
    if (*((void *)a2 + 10)) {
      goto LABEL_27;
    }
  }
  uint64_t v26 = 0;
LABEL_30:
  uint64_t v27 = *(void *)this;
  uint64_t v36 = 0;
  char v37 = 0;
  long long __p = 0;
  int64_t v28 = v6 - v5;
  if (v28)
  {
    if (v28 < 0) {
LABEL_38:
    }
      abort();
    uint64_t v29 = (char *)operator new(v28);
    uint64_t v30 = &v29[32 * (v28 >> 5)];
    long long __p = v29;
    char v37 = v30;
    memcpy(v29, v5, v28 - 4);
    uint64_t v36 = v30;
  }
  uint64_t v31 = swift::reflection::FunctionTypeRef::create<swift::reflection::TypeRefBuilder>(v27, (uint64_t *)&__p, v22, v23, v24, *((void *)a2 + 8), v25, v26);
  if (__p)
  {
    uint64_t v36 = __p;
    operator delete(__p);
  }
  if (v5) {
    operator delete(v5);
  }
  return v31;
}

uint64_t TypeRefSubstitution::visitConstrainedExistentialTypeRef(TypeRefSubstitution *this, const swift::reflection::ConstrainedExistentialTypeRef *a2)
{
  uint64_t v4 = (uint64_t *)*((void *)a2 + 3);
  uint64_t v5 = (uint64_t *)*((void *)a2 + 4);
  if (v4 != v5)
  {
    uint64_t v6 = 0;
    unint64_t v7 = 0;
    uint64_t v8 = 0;
    while (1)
    {
      uint64_t v9 = *v4;
      uint64_t v10 = swift::reflection::TypeRefVisitor<TypeRefSubstitution,swift::reflection::TypeRef const*>::visit(this);
      if (!v10) {
        goto LABEL_4;
      }
      unint64_t v11 = v10;
      uint64_t v12 = v9 & 7;
      if (v12 == 3)
      {
        unsigned __int8 v13 = v10 & 0xF8 | 3;
        unint64_t v11 = v10 & 0xFFFFFFFFFFFFFFF8 | 3;
        if (v8 < v7) {
          goto LABEL_3;
        }
      }
      else
      {
        uint64_t v14 = swift::reflection::TypeRefVisitor<TypeRefSubstitution,swift::reflection::TypeRef const*>::visit(this);
        if (!v14) {
          goto LABEL_4;
        }
        unsigned __int8 v13 = v11 & 0xF8 | v12;
        uint64_t v2 = v14;
        if (v8 < v7)
        {
LABEL_3:
          unint64_t *v8 = v11 & 0xFFFFFFFFFFFFFF00 | v13;
          v8[1] = v2;
          v8 += 2;
          goto LABEL_4;
        }
      }
      uint64_t v15 = ((char *)v8 - (char *)v6) >> 4;
      unint64_t v16 = v15 + 1;
      if ((unint64_t)(v15 + 1) >> 60) {
        goto LABEL_38;
      }
      if (v7 - v6 > v16) {
        unint64_t v16 = v7 - v6;
      }
      if ((unint64_t)((char *)v7 - (char *)v6) >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v17 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v17 = v16;
      }
      if (v17)
      {
        if (v17 >> 60) {
          std::__throw_bad_array_new_length[abi:nn180100]();
        }
        unint64_t v18 = (char *)operator new(16 * v17);
      }
      else
      {
        unint64_t v18 = 0;
      }
      uint64_t v19 = (unint64_t *)&v18[16 * v15];
      *uint64_t v19 = v11 & 0xFFFFFFFFFFFFFF00 | v13;
      v19[1] = v2;
      if (v8 == v6)
      {
        uint64_t v21 = &v18[16 * v15];
      }
      else
      {
        long long v20 = &v18[16 * v15];
        do
        {
          uint64_t v21 = v20 - 16;
          *((_OWORD *)v20 - 1) = *((_OWORD *)v8 - 1);
          v8 -= 2;
          v20 -= 16;
        }
        while (v8 != v6);
      }
      unint64_t v7 = (unint64_t *)&v18[16 * v17];
      uint64_t v8 = v19 + 2;
      if (v6) {
        operator delete(v6);
      }
      uint64_t v6 = (unint64_t *)v21;
LABEL_4:
      v4 += 2;
      if (v4 == v5) {
        goto LABEL_30;
      }
    }
  }
  uint64_t v8 = 0;
  uint64_t v6 = 0;
LABEL_30:
  uint64_t v22 = *(void *)this;
  uint64_t v23 = *((void *)a2 + 2);
  uint64_t v31 = 0;
  uint64_t v32 = 0;
  long long __p = 0;
  uint64_t v24 = (char *)v8 - (char *)v6;
  if (v8 != v6)
  {
    if (v24 < 0) {
LABEL_38:
    }
      abort();
    uint64_t v25 = (char *)operator new((char *)v8 - (char *)v6);
    uint64_t v26 = &v25[16 * (v24 >> 4)];
    long long __p = v25;
    uint64_t v32 = v26;
    memcpy(v25, v6, (char *)v8 - (char *)v6);
    uint64_t v31 = v26;
  }
  uint64_t v27 = swift::reflection::ConstrainedExistentialTypeRef::create<swift::reflection::TypeRefBuilder>(v22, v23, (uint64_t)&__p);
  if (__p)
  {
    uint64_t v31 = __p;
    operator delete(__p);
  }
  if (v6) {
    operator delete(v6);
  }
  return v27;
}

uint64_t TypeRefSubstitution::visitDependentMemberTypeRef(swift::reflection::TypeRefBuilder **this, const swift::reflection::DependentMemberTypeRef *a2)
{
  uint64_t v4 = swift::reflection::TypeRefVisitor<TypeRefSubstitution,swift::reflection::TypeRef const*>::visit(this);
  uint64_t v5 = (char *)a2 + 16;
  do
  {
    uint64_t v6 = (const swift::reflection::TypeRef *)v4;
    if (v4 && (*(_DWORD *)(v4 + 8) - 3) >= 0xFFFFFFFE)
    {
      int v7 = *((char *)a2 + 71);
      uint64_t v8 = v7 >= 0
         ? (const swift::reflection::DependentMemberTypeRef *)((char *)a2 + 48)
         : (const swift::reflection::DependentMemberTypeRef *)*((void *)a2 + 6);
      size_t v9 = v7 >= 0 ? *((unsigned __int8 *)a2 + 71) : *((void *)a2 + 7);
      uint64_t v10 = swift::reflection::TypeRefBuilder::ReflectionTypeDescriptorFinder::lookupTypeWitness((void *)*this + 210, v4 + 16, (uint64_t)a2 + 16, v8, v9);
      if (v10)
      {
        uint64_t v11 = v10;
        if ((*((char *)a2 + 71) & 0x80000000) == 0) {
          goto LABEL_20;
        }
LABEL_13:
        std::string::__init_copy_ctor_external(&v43, *((const std::string::value_type **)a2 + 6), *((void *)a2 + 7));
        char v44 = 0;
        if (v11) {
          goto LABEL_21;
        }
LABEL_14:
        uint64_t v12 = (uint64_t)*this;
        if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::__init_copy_ctor_external(&v40, v43.__r_.__value_.__l.__data_, v43.__r_.__value_.__l.__size_);
          char v41 = v44;
          char v42 = 1;
          if (v44)
          {
            uint64_t v13 = 0;
            if ((SHIBYTE(v40.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
              goto LABEL_55;
            }
LABEL_49:
            uint64_t v31 = (void *)v40.__r_.__value_.__r.__words[0];
            goto LABEL_59;
          }
        }
        else
        {
          std::string v40 = v43;
          char v41 = 0;
          char v42 = 1;
        }
        uint64_t v13 = swift::reflection::DependentMemberTypeRef::create<swift::reflection::TypeRefBuilder>(v12, (uint64_t)a2 + 16, (uint64_t)v6, (uint64_t)&v40);
        if (!v42 || (SHIBYTE(v40.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_55;
        }
        goto LABEL_49;
      }
    }
    uint64_t v4 = swift::reflection::TypeRefBuilder::lookupSuperclass(*this, v6);
  }
  while (v4);
  uint64_t v11 = 0;
  if (*((char *)a2 + 71) < 0) {
    goto LABEL_13;
  }
LABEL_20:
  std::string v43 = *(std::string *)((unsigned char *)a2 + 2);
  char v44 = 0;
  if (!v11) {
    goto LABEL_14;
  }
LABEL_21:
  swift::reflection::TypeRef::getSubstMap(v6, (uint64_t)v37);
  uint64_t v14 = *this;
  if (v39)
  {
    __swift::__runtime::llvm::deallocate_buffer(0, 0, (std::align_val_t)8uLL);
    unint64_t v15 = v38;
    if (v38)
    {
      size_t v16 = 16 * v38;
      buffer = (__swift::__runtime::llvm *)__swift::__runtime::llvm::allocate_buffer(v16, (std::align_val_t)8uLL);
      unint64_t v18 = buffer;
      uint64_t v19 = 0;
      long long v33 = v37[1];
      long long v20 = v37[0];
      do
      {
        uint64_t v21 = *(void *)((char *)v20 + v19);
        *(void *)((char *)buffer + v19) = v21;
        if ((v21 & HIDWORD(v21)) != 0xFFFFFFFF && (v21 != -2 || HIDWORD(v21) != -2)) {
          *(void *)((char *)buffer + v19 + 8) = *(void *)((char *)v20 + v19 + 8);
        }
        v19 += 16;
      }
      while (v16 != v19);
    }
    else
    {
      unint64_t v18 = 0;
      long long v33 = 0;
    }
    char v46 = 0;
    uint64_t v47 = 0;
    uint64_t v45 = v14;
    __swift::__runtime::llvm::deallocate_buffer(0, 0, (std::align_val_t)8uLL);
    unsigned int v48 = v15;
    if (v15)
    {
      uint64_t v23 = (void *)(16 * v15);
      uint64_t v24 = (__swift::__runtime::llvm *)__swift::__runtime::llvm::allocate_buffer(16 * v15, (std::align_val_t)8uLL);
      unint64_t v25 = 0;
      char v46 = v24;
      uint64_t v47 = v33;
      uint64_t v26 = (void *)((char *)v18 + 8);
      uint64_t v27 = (void *)((char *)v24 + 8);
      do
      {
        uint64_t v28 = *(v26 - 1);
        *(v27 - 1) = v28;
        if ((v28 & HIDWORD(v28)) != 0xFFFFFFFF && (v28 != -2 || HIDWORD(v28) != -2)) {
          *uint64_t v27 = *v26;
        }
        ++v25;
        v26 += 2;
        v27 += 2;
      }
      while (v25 < v15);
    }
    else
    {
      uint64_t v23 = 0;
      char v46 = 0;
      uint64_t v47 = 0;
    }
    char v49 = 0;
    uint64_t v30 = swift::reflection::TypeRefVisitor<TypeRefSubstitution,swift::reflection::TypeRef const*>::visit(&v45);
    __swift::__runtime::llvm::deallocate_buffer(v46, (void *)(16 * v48), (std::align_val_t)8uLL);
    __swift::__runtime::llvm::deallocate_buffer(v18, v23, (std::align_val_t)8uLL);
    uint64_t v45 = *this;
    uint64_t v13 = swift::reflection::TypeRefVisitor<ThickenMetatype,swift::reflection::TypeRef const*>::visit((ThickenMetatype *)&v45, v30);
    if (v39)
    {
      __swift::__runtime::llvm::deallocate_buffer(v37[0], (void *)(16 * v38), (std::align_val_t)8uLL);
      if ((SHIBYTE(v43.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        return v13;
      }
      goto LABEL_56;
    }
    goto LABEL_55;
  }
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v34, v43.__r_.__value_.__l.__data_, v43.__r_.__value_.__l.__size_);
  }
  else {
    std::string v34 = v43;
  }
  char v35 = v44;
  char v36 = 1;
  if (v44)
  {
    uint64_t v13 = 0;
  }
  else
  {
    uint64_t v13 = swift::reflection::DependentMemberTypeRef::create<swift::reflection::TypeRefBuilder>((uint64_t)v14, (uint64_t)v5, (uint64_t)v6, (uint64_t)&v34);
    if (!v36) {
      goto LABEL_55;
    }
  }
  if ((SHIBYTE(v34.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_55:
    if ((SHIBYTE(v43.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return v13;
    }
    goto LABEL_56;
  }
  uint64_t v31 = (void *)v34.__r_.__value_.__r.__words[0];
LABEL_59:
  operator delete(v31);
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0) {
LABEL_56:
  }
    operator delete(v43.__r_.__value_.__l.__data_);
  return v13;
}

uint64_t TypeRefSubstitution::visitOpaqueArchetypeTypeRef(TypeRefSubstitution *this, const swift::reflection::OpaqueArchetypeTypeRef *a2)
{
  uint64_t v2 = (uint64_t *)this;
  uint64_t v3 = (void *)*((void *)a2 + 12);
  char v37 = (void *)*((void *)a2 + 13);
  if (v37 != v3)
  {
    uint64_t v4 = 0;
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    while (1)
    {
      uint64_t v8 = v3[1];
      unsigned int v38 = v3;
      if (v8) {
        break;
      }
      int v7 = v5;
LABEL_4:
      uint64_t v3 = v38 + 2;
      uint64_t v5 = v7;
      if (v38 + 2 == v37) {
        goto LABEL_38;
      }
    }
    uint64_t v9 = *v3;
    uint64_t v10 = *v3 + 8 * v8;
    while (1)
    {
      uint64_t v11 = swift::reflection::TypeRefVisitor<TypeRefSubstitution,swift::reflection::TypeRef const*>::visit(v2);
      uint64_t v12 = v11;
      if (v5 >= v6) {
        break;
      }
      *(void *)uint64_t v5 = v11;
      int v7 = v5 + 8;
LABEL_8:
      v9 += 8;
      uint64_t v5 = v7;
      if (v9 == v10) {
        goto LABEL_4;
      }
    }
    uint64_t v13 = (v5 - v4) >> 3;
    unint64_t v14 = v13 + 1;
    if ((unint64_t)(v13 + 1) >> 61) {
      abort();
    }
    if ((v6 - v4) >> 2 > v14) {
      unint64_t v14 = (v6 - v4) >> 2;
    }
    if ((unint64_t)(v6 - v4) >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v15 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v15 = v14;
    }
    if (v15)
    {
      if (v15 >> 61) {
        std::__throw_bad_array_new_length[abi:nn180100]();
      }
      size_t v16 = operator new(8 * v15);
    }
    else
    {
      size_t v16 = 0;
    }
    unint64_t v17 = &v16[8 * v13];
    *(void *)unint64_t v17 = v12;
    int v7 = v17 + 8;
    if (v5 != v4)
    {
      unint64_t v18 = v5 - v4 - 8;
      if (v18 >= 0x168)
      {
        unint64_t v21 = (v5 - 8 - v4) & 0xFFFFFFFFFFFFFFF8;
        if (&v16[v5 - v4 - 8 - v21] > &v16[v5 - v4 - 8])
        {
          uint64_t v19 = v5;
        }
        else if (&v5[-v21 - 8] > v5 - 8)
        {
          uint64_t v19 = v5;
        }
        else if ((unint64_t)(v4 - v16) >= 0x20)
        {
          uint64_t v22 = (v18 >> 3) + 1;
          uint64_t v23 = 8 * (v22 & 0x3FFFFFFFFFFFFFFCLL);
          uint64_t v19 = &v5[-v23];
          v17 -= v23;
          uint64_t v24 = &v16[8 * v13 - 16];
          unint64_t v25 = v5 - 16;
          uint64_t v26 = v22 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v27 = *(_OWORD *)v25;
            *(v24 - 1) = *((_OWORD *)v25 - 1);
            *uint64_t v24 = v27;
            v24 -= 2;
            v25 -= 32;
            v26 -= 4;
          }
          while (v26);
          if (v22 == (v22 & 0x3FFFFFFFFFFFFFFCLL)) {
            goto LABEL_24;
          }
        }
        else
        {
          uint64_t v19 = v5;
        }
      }
      else
      {
        uint64_t v19 = v5;
      }
      do
      {
        uint64_t v20 = *((void *)v19 - 1);
        v19 -= 8;
        *((void *)v17 - 1) = v20;
        v17 -= 8;
      }
      while (v19 != v4);
    }
LABEL_24:
    uint64_t v6 = &v16[8 * v15];
    if (v4) {
      operator delete(v4);
    }
    uint64_t v4 = v17;
    uint64_t v2 = (uint64_t *)this;
    goto LABEL_8;
  }
  uint64_t v4 = 0;
LABEL_38:
  int v28 = *((char *)a2 + 39);
  if (v28 >= 0) {
    uint64_t v29 = (char *)a2 + 16;
  }
  else {
    uint64_t v29 = (char *)*((void *)a2 + 2);
  }
  if (v28 >= 0) {
    size_t v30 = *((unsigned __int8 *)a2 + 39);
  }
  else {
    size_t v30 = *((void *)a2 + 3);
  }
  int v31 = *((char *)a2 + 63);
  if (v31 >= 0) {
    uint64_t v32 = (char *)a2 + 40;
  }
  else {
    uint64_t v32 = (char *)*((void *)a2 + 5);
  }
  if (v31 >= 0) {
    uint64_t v33 = *((unsigned __int8 *)a2 + 63);
  }
  else {
    uint64_t v33 = *((void *)a2 + 6);
  }
  uint64_t v34 = swift::reflection::OpaqueArchetypeTypeRef::create<swift::reflection::TypeRefBuilder>(*v2, v29, v30, (uint64_t)v32, v33, *((_DWORD *)a2 + 16), 0, 0);
  if (v4) {
    operator delete(v4);
  }
  return v34;
}

uint64_t swift::reflection::TypeRefVisitor<ThickenMetatype,swift::reflection::TypeRef const*>::visit(ThickenMetatype *a1, uint64_t a2)
{
  uint64_t v2 = a2;
  if (!a2) {
    return v2;
  }
  switch(*(_DWORD *)(a2 + 8))
  {
    case 0:
    case 1:
    case 5:
    case 8:
    case 9:
    case 0xA:
    case 0xB:
    case 0xC:
    case 0xD:
    case 0xE:
    case 0xF:
    case 0x10:
    case 0x11:
    case 0x12:
    case 0x14:
      return v2;
    case 2:
      uint64_t result = ThickenMetatype::visitBoundGenericTypeRef(a1, (const swift::reflection::BoundGenericTypeRef *)a2);
      break;
    case 3:
      uint64_t result = ThickenMetatype::visitTupleTypeRef(a1, (const swift::reflection::TupleTypeRef *)a2);
      break;
    case 4:
      uint64_t result = ThickenMetatype::visitFunctionTypeRef(a1, (const swift::reflection::FunctionTypeRef *)a2);
      break;
    case 6:
      uint64_t v4 = *(void *)a1;
      size_t v16 = 0;
      unint64_t v17 = 0;
      long long __p = 0;
      uint64_t v5 = *(void *)(a2 + 16);
      uint64_t v6 = *(unsigned char **)(a2 + 24);
      int v7 = *(unsigned char **)(a2 + 32);
      int64_t v8 = v7 - v6;
      if (v7 != v6)
      {
        if (v8 < 0) {
          abort();
        }
        uint64_t v9 = (char *)operator new(v7 - v6);
        uint64_t v10 = &v9[16 * (v8 >> 4)];
        long long __p = v9;
        unint64_t v17 = v10;
        memcpy(v9, v6, v8);
        size_t v16 = v10;
      }
      uint64_t v2 = swift::reflection::ConstrainedExistentialTypeRef::create<swift::reflection::TypeRefBuilder>(v4, v5, (uint64_t)&__p);
      if (__p)
      {
        size_t v16 = __p;
        operator delete(__p);
      }
      return v2;
    case 7:
      uint64_t v11 = *(void *)a1;
      uint64_t v12 = swift::reflection::TypeRefVisitor<ThickenMetatype,swift::reflection::TypeRef const*>::visit(a1, *(void *)(a2 + 16));
      uint64_t result = swift::reflection::MetatypeTypeRef::create<swift::reflection::TypeRefBuilder>(v11, v12, 1);
      break;
    case 0x13:
      uint64_t v13 = *(void *)a1;
      uint64_t v14 = swift::reflection::TypeRefVisitor<ThickenMetatype,swift::reflection::TypeRef const*>::visit(a1, *(void *)(a2 + 16));
      uint64_t result = swift::reflection::SILBoxTypeRef::create<swift::reflection::TypeRefBuilder>(v13, v14);
      break;
    default:
      return 0;
  }
  return result;
}

uint64_t ThickenMetatype::visitBoundGenericTypeRef(ThickenMetatype *this, const swift::reflection::BoundGenericTypeRef *a2)
{
  uint64_t v2 = this;
  uint64_t v3 = (void *)*((void *)a2 + 6);
  uint64_t v4 = (void *)*((void *)a2 + 7);
  if (v3 != v4)
  {
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    int v7 = 0;
    while (1)
    {
      uint64_t v9 = swift::reflection::TypeRefVisitor<ThickenMetatype,swift::reflection::TypeRef const*>::visit(v2, *v3);
      uint64_t v10 = v9;
      if (v6 >= v7) {
        break;
      }
      *(void *)uint64_t v6 = v9;
      int64_t v8 = v6 + 8;
LABEL_4:
      ++v3;
      uint64_t v6 = v8;
      if (v3 == v4) {
        goto LABEL_33;
      }
    }
    uint64_t v11 = (v6 - v5) >> 3;
    unint64_t v12 = v11 + 1;
    if ((unint64_t)(v11 + 1) >> 61) {
      goto LABEL_44;
    }
    if ((v7 - v5) >> 2 > v12) {
      unint64_t v12 = (v7 - v5) >> 2;
    }
    if ((unint64_t)(v7 - v5) >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v12;
    }
    if (v13)
    {
      if (v13 >> 61) {
        std::__throw_bad_array_new_length[abi:nn180100]();
      }
      uint64_t v14 = operator new(8 * v13);
    }
    else
    {
      uint64_t v14 = 0;
    }
    unint64_t v15 = (uint64_t *)&v14[8 * v11];
    uint64_t *v15 = v10;
    int64_t v8 = (char *)(v15 + 1);
    if (v6 != v5)
    {
      unint64_t v16 = v6 - v5 - 8;
      if (v16 >= 0x168)
      {
        unint64_t v18 = (v6 - 8 - v5) & 0xFFFFFFFFFFFFFFF8;
        if (&v14[v6 - v5 - 8 - v18] > &v14[v6 - v5 - 8])
        {
          unint64_t v17 = v6;
        }
        else if (&v6[-v18 - 8] > v6 - 8)
        {
          unint64_t v17 = v6;
        }
        else if ((unint64_t)(v5 - v14) >= 0x20)
        {
          uint64_t v19 = (v16 >> 3) + 1;
          uint64_t v20 = 8 * (v19 & 0x3FFFFFFFFFFFFFFCLL);
          unint64_t v17 = &v6[-v20];
          unint64_t v15 = (uint64_t *)((char *)v15 - v20);
          unint64_t v21 = &v14[8 * v11 - 16];
          uint64_t v22 = v6 - 16;
          uint64_t v23 = v19 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v24 = *(_OWORD *)v22;
            *(v21 - 1) = *((_OWORD *)v22 - 1);
            _OWORD *v21 = v24;
            v21 -= 2;
            v22 -= 32;
            v23 -= 4;
          }
          while (v23);
          if (v19 == (v19 & 0x3FFFFFFFFFFFFFFCLL)) {
            goto LABEL_29;
          }
        }
        else
        {
          unint64_t v17 = v6;
        }
      }
      else
      {
        unint64_t v17 = v6;
      }
      do
      {
        uint64_t v25 = *((void *)v17 - 1);
        v17 -= 8;
        *--unint64_t v15 = v25;
      }
      while (v17 != v5);
    }
LABEL_29:
    int v7 = &v14[8 * v13];
    if (v5) {
      operator delete(v5);
    }
    uint64_t v5 = (char *)v15;
    uint64_t v2 = this;
    goto LABEL_4;
  }
  int64_t v8 = 0;
  uint64_t v5 = 0;
LABEL_33:
  uint64_t v26 = *((void *)a2 + 5);
  if (v26)
  {
    uint64_t v37 = *(void *)v2;
    uint64_t v27 = swift::reflection::TypeRefVisitor<ThickenMetatype,swift::reflection::TypeRef const*>::visit(&v37, v26);
  }
  else
  {
    uint64_t v27 = 0;
  }
  uint64_t v28 = *(void *)v2;
  char v35 = 0;
  char v36 = 0;
  long long __p = 0;
  uint64_t v29 = v8 - v5;
  if (v8 != v5)
  {
    if (v29 < 0) {
LABEL_44:
    }
      abort();
    long long __p = operator new(v8 - v5);
    char v36 = (char *)__p + 8 * (v29 >> 3);
    memcpy(__p, v5, v8 - v5);
    char v35 = v36;
  }
  uint64_t v30 = swift::reflection::BoundGenericTypeRef::create<swift::reflection::TypeRefBuilder>(v28, (uint64_t)a2 + 16, (uint64_t **)&__p, v27);
  if (__p)
  {
    char v35 = __p;
    operator delete(__p);
  }
  if (v5) {
    operator delete(v5);
  }
  return v30;
}

uint64_t ThickenMetatype::visitTupleTypeRef(ThickenMetatype *this, const swift::reflection::TupleTypeRef *a2)
{
  uint64_t v2 = (void *)*((void *)a2 + 2);
  uint64_t v3 = (void *)*((void *)a2 + 3);
  if (v2 != v3)
  {
    uint64_t v4 = this;
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    int v7 = 0;
    while (1)
    {
      uint64_t v9 = swift::reflection::TypeRefVisitor<ThickenMetatype,swift::reflection::TypeRef const*>::visit(v4, *v2);
      uint64_t v10 = v9;
      if (v6 >= v7) {
        break;
      }
      *(void *)uint64_t v6 = v9;
      int64_t v8 = v6 + 8;
LABEL_4:
      ++v2;
      uint64_t v6 = v8;
      if (v2 == v3) {
        goto LABEL_33;
      }
    }
    uint64_t v11 = (v6 - v5) >> 3;
    unint64_t v12 = v11 + 1;
    if ((unint64_t)(v11 + 1) >> 61) {
      goto LABEL_73;
    }
    if ((v7 - v5) >> 2 > v12) {
      unint64_t v12 = (v7 - v5) >> 2;
    }
    if ((unint64_t)(v7 - v5) >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v12;
    }
    if (v13)
    {
      if (v13 >> 61) {
        std::__throw_bad_array_new_length[abi:nn180100]();
      }
      uint64_t v14 = operator new(8 * v13);
    }
    else
    {
      uint64_t v14 = 0;
    }
    unint64_t v15 = (uint64_t *)&v14[8 * v11];
    uint64_t *v15 = v10;
    int64_t v8 = (char *)(v15 + 1);
    if (v6 != v5)
    {
      unint64_t v16 = v6 - v5 - 8;
      if (v16 >= 0x168)
      {
        unint64_t v18 = (v6 - 8 - v5) & 0xFFFFFFFFFFFFFFF8;
        if (&v14[v6 - v5 - 8 - v18] > &v14[v6 - v5 - 8])
        {
          unint64_t v17 = v6;
        }
        else if (&v6[-v18 - 8] > v6 - 8)
        {
          unint64_t v17 = v6;
        }
        else if ((unint64_t)(v5 - v14) >= 0x20)
        {
          uint64_t v19 = (v16 >> 3) + 1;
          uint64_t v20 = 8 * (v19 & 0x3FFFFFFFFFFFFFFCLL);
          unint64_t v17 = &v6[-v20];
          unint64_t v15 = (uint64_t *)((char *)v15 - v20);
          unint64_t v21 = &v14[8 * v11 - 16];
          uint64_t v22 = v6 - 16;
          uint64_t v23 = v19 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v24 = *(_OWORD *)v22;
            *(v21 - 1) = *((_OWORD *)v22 - 1);
            _OWORD *v21 = v24;
            v21 -= 2;
            v22 -= 32;
            v23 -= 4;
          }
          while (v23);
          if (v19 == (v19 & 0x3FFFFFFFFFFFFFFCLL)) {
            goto LABEL_29;
          }
        }
        else
        {
          unint64_t v17 = v6;
        }
      }
      else
      {
        unint64_t v17 = v6;
      }
      do
      {
        uint64_t v25 = *((void *)v17 - 1);
        v17 -= 8;
        *--unint64_t v15 = v25;
      }
      while (v17 != v5);
    }
LABEL_29:
    int v7 = &v14[8 * v13];
    if (v5) {
      operator delete(v5);
    }
    uint64_t v5 = (char *)v15;
    uint64_t v4 = this;
    goto LABEL_4;
  }
  int64_t v8 = 0;
  uint64_t v5 = 0;
LABEL_33:
  uint64_t v26 = *((void *)a2 + 5);
  uint64_t v27 = *((void *)a2 + 6);
  int64_t v28 = v27 - v26;
  if (v27 == v26)
  {
    uint64_t v29 = 0;
    uint64_t v34 = 0;
  }
  else
  {
    if (0xAAAAAAAAAAAAAAABLL * (v28 >> 3) > 0xAAAAAAAAAAAAAAALL) {
      goto LABEL_73;
    }
    uint64_t v29 = (char *)operator new(v28);
    uint64_t v30 = 0;
    do
    {
      int v31 = (long long *)(v26 + v30);
      uint64_t v32 = (std::string *)&v29[v30];
      if (*(char *)(v26 + v30 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v32, *(const std::string::value_type **)v31, *((void *)v31 + 1));
      }
      else
      {
        long long v33 = *v31;
        v32->__r_.__value_.__r.__words[2] = *((void *)v31 + 2);
        *(_OWORD *)&v32->__r_.__value_.__l.__data_ = v33;
      }
      v30 += 24;
    }
    while (v26 + v30 != v27);
    uint64_t v34 = &v29[v30];
  }
  uint64_t v35 = *(void *)this;
  char v56 = 0;
  uint64_t v57 = 0;
  unsigned int v55 = 0;
  uint64_t v36 = v8 - v5;
  if (v8 != v5)
  {
    if (v36 < 0) {
      goto LABEL_73;
    }
    uint64_t v37 = (char *)operator new(v8 - v5);
    unsigned int v38 = &v37[8 * (v36 >> 3)];
    unsigned int v55 = v37;
    uint64_t v57 = v38;
    memcpy(v37, v5, v8 - v5);
    char v56 = v38;
  }
  long long __p = 0;
  uint64_t v53 = 0;
  char v54 = 0;
  int64_t v39 = v34 - v29;
  if (v34 == v29) {
    goto LABEL_53;
  }
  unint64_t v40 = 0xAAAAAAAAAAAAAAABLL * (v39 >> 3);
  if (v40 > 0xAAAAAAAAAAAAAAALL) {
LABEL_73:
  }
    abort();
  char v41 = (char *)operator new(v39);
  uint64_t v42 = 0;
  long long __p = v41;
  char v54 = &v41[24 * v40];
  do
  {
    std::string v43 = &v29[v42];
    char v44 = (std::string *)&v41[v42];
    if (v29[v42 + 23] < 0)
    {
      std::string::__init_copy_ctor_external(v44, *(const std::string::value_type **)v43, *((void *)v43 + 1));
    }
    else
    {
      *(_OWORD *)&v44->__r_.__value_.__l.__data_ = *(_OWORD *)v43;
      v44->__r_.__value_.__r.__words[2] = *((void *)v43 + 2);
    }
    v42 += 24;
  }
  while (&v29[v42] != v34);
  uint64_t v53 = &v41[v42];
LABEL_53:
  uint64_t v45 = swift::reflection::TupleTypeRef::create<swift::reflection::TypeRefBuilder>(v35, (uint64_t)&v55, (long long **)&__p);
  char v46 = (void **)__p;
  if (__p)
  {
    uint64_t v47 = (void **)v53;
    unsigned int v48 = __p;
    if (v53 != __p)
    {
      do
      {
        if (*((char *)v47 - 1) < 0) {
          operator delete(*(v47 - 3));
        }
        v47 -= 3;
      }
      while (v47 != v46);
      unsigned int v48 = __p;
    }
    uint64_t v53 = (char *)v46;
    operator delete(v48);
  }
  if (v55)
  {
    char v56 = v55;
    operator delete(v55);
  }
  if (v29)
  {
    while (v34 != v29)
    {
      if (*(v34 - 1) < 0) {
        operator delete(*((void **)v34 - 3));
      }
      v34 -= 24;
    }
    operator delete(v29);
    if (v5) {
      goto LABEL_65;
    }
  }
  else if (v5)
  {
LABEL_65:
    operator delete(v5);
  }
  return v45;
}

uint64_t ThickenMetatype::visitFunctionTypeRef(ThickenMetatype *this, const swift::reflection::FunctionTypeRef *a2)
{
  uint64_t v3 = (uint64_t *)*((void *)a2 + 2);
  uint64_t v4 = (uint64_t *)*((void *)a2 + 3);
  if (v3 != v4)
  {
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    int v7 = 0;
    uint64_t v35 = (uint64_t *)*((void *)a2 + 3);
    while (1)
    {
      uint64_t v8 = swift::reflection::TypeRefVisitor<ThickenMetatype,swift::reflection::TypeRef const*>::visit(this, v3[2]);
      uint64_t v9 = v8;
      uint64_t v10 = *v3;
      uint64_t v11 = v3[1];
      int v12 = *((_DWORD *)v3 + 6);
      if (v6 < v7)
      {
        *(void *)uint64_t v6 = v10;
        *((void *)v6 + 1) = v11;
        *((void *)v6 + 2) = v8;
        *((_DWORD *)v6 + 6) = v12;
        v6 += 32;
      }
      else
      {
        unint64_t v13 = this;
        uint64_t v14 = (v6 - v5) >> 5;
        unint64_t v15 = v14 + 1;
        if ((unint64_t)(v14 + 1) >> 59) {
          goto LABEL_39;
        }
        if ((v7 - v5) >> 4 > v15) {
          unint64_t v15 = (v7 - v5) >> 4;
        }
        if ((unint64_t)(v7 - v5) >= 0x7FFFFFFFFFFFFFE0) {
          unint64_t v16 = 0x7FFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v16 = v15;
        }
        if (v16)
        {
          if (v16 >> 59) {
            std::__throw_bad_array_new_length[abi:nn180100]();
          }
          unint64_t v17 = (char *)operator new(32 * v16);
        }
        else
        {
          unint64_t v17 = 0;
        }
        unint64_t v18 = &v17[32 * v14];
        *(void *)unint64_t v18 = v10;
        *((void *)v18 + 1) = v11;
        *((void *)v18 + 2) = v9;
        *((_DWORD *)v18 + 6) = v12;
        if (v6 == v5)
        {
          unint64_t v21 = &v17[32 * v14];
          this = v13;
        }
        else
        {
          uint64_t v19 = &v17[32 * v14];
          this = v13;
          do
          {
            long long v20 = *((_OWORD *)v6 - 2);
            unint64_t v21 = v19 - 32;
            *(_OWORD *)(v19 - 20) = *(_OWORD *)(v6 - 20);
            *((_OWORD *)v19 - 2) = v20;
            v6 -= 32;
            v19 -= 32;
          }
          while (v6 != v5);
        }
        int v7 = &v17[32 * v16];
        uint64_t v6 = v18 + 32;
        uint64_t v4 = v35;
        if (v5) {
          operator delete(v5);
        }
        uint64_t v5 = v21;
      }
      v3 += 4;
      if (v3 == v4) {
        goto LABEL_25;
      }
    }
  }
  uint64_t v6 = 0;
  uint64_t v5 = 0;
LABEL_25:
  uint64_t v22 = *((void *)a2 + 9);
  if (v22) {
    uint64_t v23 = swift::reflection::TypeRefVisitor<ThickenMetatype,swift::reflection::TypeRef const*>::visit(this, v22);
  }
  else {
    uint64_t v23 = 0;
  }
  unsigned int v24 = *((_DWORD *)a2 + 14);
  uint64_t v25 = *((void *)a2 + 10);
  if (v25) {
    uint64_t v26 = swift::reflection::TypeRefVisitor<ThickenMetatype,swift::reflection::TypeRef const*>::visit(this, v25);
  }
  else {
    uint64_t v26 = 0;
  }
  uint64_t v27 = swift::reflection::TypeRefVisitor<ThickenMetatype,swift::reflection::TypeRef const*>::visit(this, *((void *)a2 + 5));
  uint64_t v28 = *(void *)this;
  uint64_t v37 = 0;
  unsigned int v38 = 0;
  long long __p = 0;
  int64_t v29 = v6 - v5;
  if (v29)
  {
    if (v29 < 0) {
LABEL_39:
    }
      abort();
    uint64_t v30 = (char *)operator new(v29);
    int v31 = &v30[32 * (v29 >> 5)];
    long long __p = v30;
    unsigned int v38 = v31;
    memcpy(v30, v5, v29 - 4);
    uint64_t v37 = v31;
  }
  uint64_t v32 = swift::reflection::FunctionTypeRef::create<swift::reflection::TypeRefBuilder>(v28, (uint64_t *)&__p, v27, *((void *)a2 + 6), v24, *((void *)a2 + 8), v23, v26);
  if (__p)
  {
    uint64_t v37 = __p;
    operator delete(__p);
  }
  if (v5) {
    operator delete(v5);
  }
  return v32;
}

void _GLOBAL__sub_I_TypeRef_cpp()
{
}

uint64_t swift::reflection::TypeRefBuilder::decodeMangledType(swift::reflection::TypeRefBuilder *this, swift::Demangle::__runtime::Node *a2, uint64_t a3)
{
  uint64_t v6 = this;
  swift::Demangle::__runtime::TypeDecoder<swift::reflection::TypeRefBuilder>::decodeMangledType(v4, &v6, a2, 0, a3);
  if (v5 == 1)
  {
    ((void (*)(void, uint64_t, void))v4[1])(v4[0], 3, 0);
  }
  else if (!v5)
  {
    return v4[0];
  }
  return 0;
}

void *swift::reflection::TypeRefBuilder::ReflectionTypeDescriptorFinder::readTypeRef@<X0>(void *this@<X0>, unint64_t a2@<X1>, unint64_t *a3@<X8>)
{
  uint64_t v3 = (void *)this[1];
  uint64_t v4 = (void *)this[2];
  if (v3 == v4)
  {
LABEL_19:
    *a3 = 0;
    a3[1] = 0;
  }
  else
  {
    unint64_t v5 = a2 + 1;
    while (1)
    {
      unint64_t v6 = v3[12];
      if (v6 <= a2)
      {
        unint64_t v7 = v3[14] + v6;
        if (v5 <= v7) {
          break;
        }
      }
      unint64_t v6 = v3[15];
      if (v6 <= a2)
      {
        unint64_t v7 = v3[17] + v6;
        if (v5 <= v7)
        {
          uint64_t v8 = v3 + 16;
          if (v7 <= a2) {
            goto LABEL_19;
          }
          goto LABEL_11;
        }
      }
      v3 += 28;
      if (v3 == v4) {
        goto LABEL_19;
      }
    }
    uint64_t v8 = v3 + 13;
    if (v7 <= a2) {
      goto LABEL_19;
    }
LABEL_11:
    uint64_t v9 = (unsigned char *)(a2 - v6 + *v8);
    uint64_t v10 = (uint64_t)v9;
    unint64_t v11 = a2;
    while (1)
    {
      unsigned int v13 = *(unsigned __int8 *)v10;
      if (!*(unsigned char *)v10) {
        break;
      }
      if (v13 <= 0x17)
      {
        v11 += 5;
        uint64_t v12 = 5;
      }
      else if ((v13 & 0xF8) == 0x18)
      {
        uint64_t v12 = v10;
        uint64_t v10 = (*(_DWORD *)(this[31] + 1944) + 1);
        v11 += v10;
      }
      else
      {
        ++v11;
        uint64_t v12 = 1;
      }
      v10 += v12;
      if (v11 >= v7) {
        goto LABEL_19;
      }
    }
    if (*v9 == 36 && v9[1] == 115)
    {
      v9 += 2;
      a2 += 2;
    }
    *a3 = a2;
    a3[1] = (unint64_t)v9;
  }
  return this;
}

void swift::reflection::TypeRefBuilder::ReflectionTypeDescriptorFinder::normalizeReflectionName(uint64_t a1@<X0>, unint64_t *a2@<X1>, std::string *a3@<X8>)
{
  unint64_t v6 = *a2;
  unint64_t v7 = (void *)(a1 + 96);
  int8x8_t v8 = *(int8x8_t *)(a1 + 104);
  if (!*(void *)&v8) {
    goto LABEL_17;
  }
  uint8x8_t v9 = (uint8x8_t)vcnt_s8(v8);
  v9.i16[0] = vaddlv_u8(v9);
  if (v9.u32[0] > 1uLL)
  {
    unint64_t v10 = *a2;
    if (v6 >= *(void *)&v8) {
      unint64_t v10 = v6 % *(void *)&v8;
    }
  }
  else
  {
    unint64_t v10 = (*(void *)&v8 - 1) & v6;
  }
  unint64_t v11 = *(uint64_t ***)(*v7 + 8 * v10);
  if (!v11 || (uint64_t v12 = *v11) == 0)
  {
LABEL_17:
    uint64_t v14 = *(swift::Demangle::__runtime::NodeFactory **)(a1 + 248);
    uint64_t v42 = *(void *)(a1 + 248);
    __n128 v15 = swift::Demangle::__runtime::NodeFactory::pushCheckpoint(v14, (uint64_t)&v43);
    uint64_t v16 = *(void *)(a1 + 248);
    unint64_t v17 = a2[1];
    *(void *)long long __p = *a2;
    *(void *)&__p[8] = v17;
    LOBYTE(__dst[0]) = 0;
    uint64_t v18 = *(void *)(v16 + 1976);
    if (v18)
    {
      uint64_t v19 = (unsigned __int16 *)(*(uint64_t (**)(uint64_t, unsigned char *, void **, __n128))(*(void *)v18 + 48))(v18, __p, __dst, v15);
      if (v19)
      {
        int v21 = v19[8];
        if (v21 == 181 || v21 == 301 || v21 == 233)
        {
          *(void *)long long __p = v6;
          __p[8] = 0;
          BYTE8(v40) = 0;
          std::__hash_table<std::__hash_value_type<unsigned long long,std::optional<std::string>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::optional<std::string>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::optional<std::string>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::optional<std::string>>>>::__emplace_unique_key_args<unsigned long long,std::pair<unsigned long long,std::optional<std::string>>>((uint64_t)v7, (unint64_t *)__p, (uint64_t)__p);
          if (BYTE8(v40))
          {
            if (SBYTE7(v40) < 0) {
              operator delete(*(void **)&__p[8]);
            }
          }
          a3->__r_.__value_.__s.__data_[0] = 0;
          a3[1].__r_.__value_.__s.__data_[0] = 0;
          goto LABEL_64;
        }
        swift::Demangle::__runtime::mangleNode((swift::Demangle::__runtime *)v19, v20);
        if (*(_DWORD *)__p)
        {
          __dst[0] = (void *)v6;
          LOBYTE(__dst[1]) = 0;
          char v38 = 0;
          std::__hash_table<std::__hash_value_type<unsigned long long,std::optional<std::string>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::optional<std::string>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::optional<std::string>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::optional<std::string>>>>::__emplace_unique_key_args<unsigned long long,std::pair<unsigned long long,std::optional<std::string>>>((uint64_t)v7, (unint64_t *)__dst, (uint64_t)__dst);
          if (v38 && SHIBYTE(v37) < 0) {
            operator delete(__dst[1]);
          }
          char v29 = 0;
          a3->__r_.__value_.__s.__data_[0] = 0;
        }
        else
        {
          __dst[0] = (void *)v6;
          if (SHIBYTE(v41) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)&__dst[1], (const std::string::value_type *)v40, *((std::string::size_type *)&v40 + 1));
          }
          else
          {
            *(_OWORD *)&__dst[1] = v40;
            std::string::size_type v37 = v41;
          }
          std::__hash_table<std::__hash_value_type<unsigned long long,std::optional<std::string>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::optional<std::string>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::optional<std::string>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::optional<std::string>>>>::__emplace_unique_key_args<unsigned long long,std::pair<unsigned long long,std::string>>((uint64_t)v7, (unint64_t *)__dst, (uint64_t)__dst);
          if (SHIBYTE(v37) < 0) {
            operator delete(__dst[1]);
          }
          if (SHIBYTE(v41) < 0)
          {
            std::string::__init_copy_ctor_external(a3, (const std::string::value_type *)v40, *((std::string::size_type *)&v40 + 1));
          }
          else
          {
            *(_OWORD *)&a3->__r_.__value_.__l.__data_ = v40;
            a3->__r_.__value_.__r.__words[2] = v41;
          }
          char v29 = 1;
        }
        a3[1].__r_.__value_.__s.__data_[0] = v29;
        if ((SHIBYTE(v41) & 0x80000000) == 0) {
          goto LABEL_64;
        }
        uint64_t v34 = (void *)v40;
        goto LABEL_63;
      }
      SymbolicMangledNameStringRef = swift::Demangle::__runtime::makeSymbolicMangledNameStringRef((unsigned char *)a2[1], (const char *)v20);
      if (!SymbolicMangledNameStringRef)
      {
        memset(__dst, 0, sizeof(__dst));
        *(void *)long long __p = v6;
        goto LABEL_42;
      }
      uint64_t v26 = (void *)v25;
      if (v25 < 0x7FFFFFFFFFFFFFF8)
      {
        uint64_t v27 = SymbolicMangledNameStringRef;
        if (v25 >= 0x17)
        {
          uint64_t v30 = (v25 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v25 | 7) != 0x17) {
            uint64_t v30 = v25 | 7;
          }
          uint64_t v31 = v30 + 1;
          uint64_t v28 = operator new(v30 + 1);
          __dst[1] = v26;
          __dst[2] = (void *)(v31 | 0x8000000000000000);
          __dst[0] = v28;
        }
        else
        {
          HIBYTE(__dst[2]) = v25;
          uint64_t v28 = __dst;
          if (!v25)
          {
LABEL_41:
            *((unsigned char *)v26 + (void)v28) = 0;
            *(void *)long long __p = v6;
            if (SHIBYTE(__dst[2]) < 0)
            {
              std::string::__init_copy_ctor_external((std::string *)&__p[8], (const std::string::value_type *)__dst[0], (std::string::size_type)__dst[1]);
              char v32 = 1;
LABEL_44:
              std::__hash_table<std::__hash_value_type<unsigned long long,std::optional<std::string>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::optional<std::string>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::optional<std::string>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::optional<std::string>>>>::__emplace_unique_key_args<unsigned long long,std::pair<unsigned long long,std::string>>((uint64_t)v7, (unint64_t *)__p, (uint64_t)__p);
              if (SBYTE7(v40) < 0)
              {
                operator delete(*(void **)&__p[8]);
                if (v32) {
                  goto LABEL_46;
                }
              }
              else if (v32)
              {
LABEL_46:
                long long v33 = __dst[0];
                std::string::__init_copy_ctor_external(a3, (const std::string::value_type *)__dst[0], (std::string::size_type)__dst[1]);
                a3[1].__r_.__value_.__s.__data_[0] = 1;
                uint64_t v34 = v33;
LABEL_63:
                operator delete(v34);
                goto LABEL_64;
              }
              *(_OWORD *)&a3->__r_.__value_.__l.__data_ = *(_OWORD *)__dst;
              a3->__r_.__value_.__r.__words[2] = (std::string::size_type)__dst[2];
              a3[1].__r_.__value_.__s.__data_[0] = 1;
LABEL_64:
              *(_OWORD *)long long __p = v43;
              *(void *)&__p[16] = v44;
              swift::Demangle::__runtime::NodeFactory::popCheckpoint(v42, (uint64_t)__p, v22, v23);
              return;
            }
LABEL_42:
            char v32 = 0;
            *(_OWORD *)&__p[8] = *(_OWORD *)__dst;
            *(void **)&long long v40 = __dst[2];
            goto LABEL_44;
          }
        }
        memmove(v28, v27, (size_t)v26);
        goto LABEL_41;
      }
    }
    else
    {
      std::__throw_bad_function_call[abi:nn180100]();
    }
    abort();
  }
  while (1)
  {
    unint64_t v13 = v12[1];
    if (v13 == v6) {
      break;
    }
    if (v9.u32[0] > 1uLL)
    {
      if (v13 >= *(void *)&v8) {
        v13 %= *(void *)&v8;
      }
    }
    else
    {
      v13 &= *(void *)&v8 - 1;
    }
    if (v13 != v10) {
      goto LABEL_17;
    }
LABEL_10:
    uint64_t v12 = (uint64_t *)*v12;
    if (!v12) {
      goto LABEL_17;
    }
  }
  if (v12[2] != v6) {
    goto LABEL_10;
  }
  a3->__r_.__value_.__s.__data_[0] = 0;
  a3[1].__r_.__value_.__s.__data_[0] = 0;
  if (*((unsigned char *)v12 + 48))
  {
    if (*((char *)v12 + 47) < 0)
    {
      std::string::__init_copy_ctor_external(a3, (const std::string::value_type *)v12[3], v12[4]);
    }
    else
    {
      long long v35 = *(_OWORD *)(v12 + 3);
      a3->__r_.__value_.__r.__words[2] = v12[5];
      *(_OWORD *)&a3->__r_.__value_.__l.__data_ = v35;
    }
    a3[1].__r_.__value_.__s.__data_[0] = 1;
  }
}

BOOL swift::reflection::TypeRefBuilder::ReflectionTypeDescriptorFinder::reflectionNameMatches(uint64_t a1, unint64_t *a2, const void *a3, size_t a4)
{
  unint64_t v6 = a2[1];
  v13[0] = *a2;
  v13[1] = v6;
  swift::reflection::TypeRefBuilder::ReflectionTypeDescriptorFinder::normalizeReflectionName(a1, v13, &v14);
  if (!v15) {
    return 0;
  }
  int v7 = SHIBYTE(v14.__r_.__value_.__r.__words[2]);
  std::string::size_type size = v14.__r_.__value_.__l.__size_;
  uint8x8_t v9 = (void *)v14.__r_.__value_.__r.__words[0];
  if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    unint64_t v10 = &v14;
  }
  else {
    unint64_t v10 = (std::string *)v14.__r_.__value_.__r.__words[0];
  }
  if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v14.__r_.__value_.__r.__words[2]);
  }
  if (a4 == size)
  {
    if (!a4)
    {
      BOOL v11 = 1;
      if ((SHIBYTE(v14.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        return v11;
      }
      goto LABEL_13;
    }
    BOOL v11 = memcmp(a3, v10, a4) == 0;
    if (v7 < 0) {
LABEL_13:
    }
      operator delete(v9);
  }
  else
  {
    BOOL v11 = 0;
    if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
      goto LABEL_13;
    }
  }
  return v11;
}

uint64_t swift::reflection::TypeRefBuilder::ReflectionTypeDescriptorFinder::lookupTypeWitness(void *a1, uint64_t a2, uint64_t a3, void *a4, size_t a5)
{
  int8x8_t v8 = (const void **)a2;
  v152 = 0;
  size_t v153 = 0;
  uint64_t v154 = 0;
  unint64_t v10 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v11 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v11 = v10;
  }
  swift::reflection::TypeRefID::addString((uint64_t)&v152, a2, v11);
  int v12 = *(char *)(a3 + 23);
  uint64_t v13 = *(void *)a3;
  unint64_t v14 = *(void *)(a3 + 8);
  uint64_t v142 = (const void **)a3;
  if (v12 >= 0) {
    uint64_t v15 = a3;
  }
  else {
    uint64_t v15 = v13;
  }
  if (v12 >= 0) {
    unint64_t v16 = v12;
  }
  else {
    unint64_t v16 = v14;
  }
  swift::reflection::TypeRefID::addString((uint64_t)&v152, v15, v16);
  size_t __len = a5;
  uint64_t __src = a4;
  if (!a4)
  {
    size_t v18 = 0;
    uint64_t v19 = 0;
    unsigned int v20 = 0;
    __dst = 0;
    size_t v147 = 0;
    uint64_t v148 = 0;
    goto LABEL_21;
  }
  if (a5 > 0x7FFFFFFFFFFFFFF7) {
    goto LABEL_239;
  }
  if (a5 >= 0x17)
  {
    uint64_t v21 = (a5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a5 | 7) != 0x17) {
      uint64_t v21 = a5 | 7;
    }
    uint64_t v22 = v21 + 1;
    p_dst = (void **)operator new(v21 + 1);
    __dst = p_dst;
    size_t v147 = __len;
    uint64_t v148 = (int *)(v22 | 0x8000000000000000);
  }
  else
  {
    HIBYTE(v148) = a5;
    p_dst = (void **)&__dst;
    if (!a5) {
      goto LABEL_20;
    }
  }
  memmove(p_dst, a4, __len);
  a5 = __len;
LABEL_20:
  *((unsigned char *)p_dst + a5) = 0;
  unsigned int v20 = HIBYTE(v148);
  uint64_t v19 = __dst;
  size_t v18 = v147;
LABEL_21:
  if ((v20 & 0x80u) == 0) {
    uint64_t v23 = (void **)&__dst;
  }
  else {
    uint64_t v23 = v19;
  }
  if ((v20 & 0x80u) == 0) {
    unint64_t v24 = v20;
  }
  else {
    unint64_t v24 = v18;
  }
  swift::reflection::TypeRefID::addString((uint64_t)&v152, (uint64_t)v23, v24);
  if (SHIBYTE(v148) < 0) {
    operator delete(__dst);
  }
  unint64_t v25 = std::__hash_table<std::__hash_value_type<swift::reflection::TypeRefID,swift::reflection::ObjCClassTypeRef const*>,std::__unordered_map_hasher<swift::reflection::TypeRefID,std::__hash_value_type<swift::reflection::TypeRefID,swift::reflection::ObjCClassTypeRef const*>,swift::reflection::TypeRefID::Hash,swift::reflection::TypeRefID::Equal,true>,std::__unordered_map_equal<swift::reflection::TypeRefID,std::__hash_value_type<swift::reflection::TypeRefID,swift::reflection::ObjCClassTypeRef const*>,swift::reflection::TypeRefID::Equal,swift::reflection::TypeRefID::Hash,true>,std::allocator<std::__hash_value_type<swift::reflection::TypeRefID,swift::reflection::ObjCClassTypeRef const*>>>::find<swift::reflection::TypeRefID>(a1 + 22, &v152);
  if (v25)
  {
    uint64_t v26 = (void *)v25[5];
    uint64_t v27 = v152;
    if (v152) {
      goto LABEL_235;
    }
    return (uint64_t)v26;
  }
  uint64_t v28 = a1[1];
  uint64_t v138 = a1[2];
  if (v28 == v138) {
    goto LABEL_234;
  }
  qmemcpy(v137, "atedTypeAssociat", sizeof(v137));
  while (2)
  {
    char v29 = *(void **)(v28 + 32);
    unint64_t v30 = *(void *)(v28 + 40);
    v143[0] = *(void **)(v28 + 24);
    v143[1] = v29;
    *((unsigned char *)&v155.__r_.__value_.__s + 23) = 14;
    v155.__r_.__value_.__r.__words[0] = v137[1];
    *(std::string::size_type *)((char *)v155.__r_.__value_.__r.__words + 6) = v137[0];
    v155.__r_.__value_.__s.__data_[14] = 0;
    swift::reflection::ReflectionSectionIteratorBase<swift::reflection::AssociatedTypeIterator,swift::reflection::AssociatedTypeDescriptor>::ReflectionSectionIteratorBase((unint64_t *)&__dst, (unint64_t *)v143, v30, (long long *)&v155);
    if (SHIBYTE(v155.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v155.__r_.__value_.__l.__data_);
      if (!v149)
      {
LABEL_193:
        char v107 = 1;
        if (v151 < 0) {
          goto LABEL_188;
        }
        goto LABEL_189;
      }
    }
    else if (!v149)
    {
      goto LABEL_193;
    }
    uint64_t v139 = v28;
    while (1)
    {
      size_t v31 = v147;
      char v32 = v148;
      uint64_t v33 = *v148;
      if (v33) {
        uint64_t v34 = (char *)(v147 + v33);
      }
      else {
        uint64_t v34 = 0;
      }
      long long v35 = (void *)a1[1];
      uint64_t v36 = (void *)a1[2];
      if (v35 == v36)
      {
LABEL_61:
        std::string::size_type v41 = 0;
        uint64_t v34 = 0;
      }
      else
      {
        std::string::size_type v37 = v34 + 1;
        while (1)
        {
          unint64_t v38 = v35[12];
          if (v38 <= (unint64_t)v34)
          {
            unint64_t v39 = v35[14] + v38;
            if ((unint64_t)v37 <= v39) {
              break;
            }
          }
          unint64_t v38 = v35[15];
          if (v38 <= (unint64_t)v34)
          {
            unint64_t v39 = v35[17] + v38;
            if ((unint64_t)v37 <= v39)
            {
              long long v40 = v35 + 16;
              if (v39 <= (unint64_t)v34) {
                goto LABEL_61;
              }
              goto LABEL_53;
            }
          }
          v35 += 28;
          if (v35 == v36) {
            goto LABEL_61;
          }
        }
        long long v40 = v35 + 13;
        if (v39 <= (unint64_t)v34) {
          goto LABEL_61;
        }
LABEL_53:
        std::string::size_type v41 = &v34[*v40 - v38];
        uint64_t v42 = (uint64_t)v41;
        long long v43 = v34;
        while (1)
        {
          unsigned int v45 = *(unsigned __int8 *)v42;
          if (!*(unsigned char *)v42) {
            break;
          }
          if (v45 <= 0x17)
          {
            v43 += 5;
            uint64_t v44 = 5;
          }
          else if ((v45 & 0xF8) == 0x18)
          {
            uint64_t v44 = v42;
            uint64_t v42 = (*(_DWORD *)(a1[31] + 1944) + 1);
            v43 += v42;
          }
          else
          {
            ++v43;
            uint64_t v44 = 1;
          }
          v42 += v44;
          if ((unint64_t)v43 >= v39) {
            goto LABEL_61;
          }
        }
        if (*v41 == 36 && v41[1] == 115)
        {
          v41 += 2;
          v34 += 2;
        }
      }
      int v46 = *((char *)v8 + 23);
      if (v46 >= 0) {
        uint64_t v47 = v8;
      }
      else {
        uint64_t v47 = *v8;
      }
      if (v46 >= 0) {
        size_t v48 = *((unsigned __int8 *)v8 + 23);
      }
      else {
        size_t v48 = (size_t)v8[1];
      }
      v143[0] = v34;
      v143[1] = v41;
      swift::reflection::TypeRefBuilder::ReflectionTypeDescriptorFinder::normalizeReflectionName((uint64_t)a1, (unint64_t *)v143, &v155);
      if (!(_BYTE)v156) {
        goto LABEL_39;
      }
      int v49 = SHIBYTE(v155.__r_.__value_.__r.__words[2]);
      std::string::size_type size = v155.__r_.__value_.__l.__size_;
      unint64_t v51 = (void *)v155.__r_.__value_.__r.__words[0];
      if ((v155.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        char v52 = &v155;
      }
      else {
        char v52 = (std::string *)v155.__r_.__value_.__r.__words[0];
      }
      if ((v155.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v155.__r_.__value_.__r.__words[2]);
      }
      if (v48 == size) {
        break;
      }
      if (SHIBYTE(v155.__r_.__value_.__r.__words[2]) < 0) {
        goto LABEL_38;
      }
LABEL_39:
      swift::reflection::ReflectionSectionIteratorBase<swift::reflection::AssociatedTypeIterator,swift::reflection::AssociatedTypeDescriptor>::operator++((uint64_t)&__dst);
      if (!v149)
      {
        char v107 = 1;
        uint64_t v28 = v139;
        if (v151 < 0) {
          goto LABEL_188;
        }
        goto LABEL_189;
      }
    }
    if (v48)
    {
      int v53 = memcmp(v47, v52, v48);
      int v54 = v53;
      if (v49 < 0)
      {
        operator delete(v51);
        if (v54) {
          goto LABEL_39;
        }
      }
      else if (v53)
      {
        goto LABEL_39;
      }
    }
    else if (SHIBYTE(v155.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v155.__r_.__value_.__l.__data_);
    }
    uint64_t v55 = v32[1];
    if (v55) {
      char v56 = (char *)(v31 + v55 + 4);
    }
    else {
      char v56 = 0;
    }
    uint64_t v57 = (void *)a1[1];
    char v58 = (void *)a1[2];
    if (v57 == v58)
    {
LABEL_106:
      long long v63 = 0;
      char v56 = 0;
    }
    else
    {
      uint64_t v59 = v56 + 1;
      while (1)
      {
        unint64_t v60 = v57[12];
        if (v60 <= (unint64_t)v56)
        {
          unint64_t v61 = v57[14] + v60;
          if ((unint64_t)v59 <= v61) {
            break;
          }
        }
        unint64_t v60 = v57[15];
        if (v60 <= (unint64_t)v56)
        {
          unint64_t v61 = v57[17] + v60;
          if ((unint64_t)v59 <= v61)
          {
            char v62 = v57 + 16;
            if (v61 <= (unint64_t)v56) {
              goto LABEL_106;
            }
            goto LABEL_98;
          }
        }
        v57 += 28;
        if (v57 == v58) {
          goto LABEL_106;
        }
      }
      char v62 = v57 + 13;
      if (v61 <= (unint64_t)v56) {
        goto LABEL_106;
      }
LABEL_98:
      long long v63 = &v56[*v62 - v60];
      uint64_t v64 = (uint64_t)v63;
      int v65 = v56;
      while (1)
      {
        unsigned int v67 = *(unsigned __int8 *)v64;
        if (!*(unsigned char *)v64) {
          break;
        }
        if (v67 <= 0x17)
        {
          v65 += 5;
          uint64_t v66 = 5;
        }
        else if ((v67 & 0xF8) == 0x18)
        {
          uint64_t v66 = v64;
          uint64_t v64 = (*(_DWORD *)(a1[31] + 1944) + 1);
          v65 += v64;
        }
        else
        {
          ++v65;
          uint64_t v66 = 1;
        }
        v64 += v66;
        if ((unint64_t)v65 >= v61) {
          goto LABEL_106;
        }
      }
      if (*v63 == 36 && v63[1] == 115)
      {
        v63 += 2;
        v56 += 2;
      }
    }
    v143[0] = v56;
    v143[1] = v63;
    swift::reflection::TypeRefBuilder::ReflectionTypeDescriptorFinder::normalizeReflectionName((uint64_t)a1, (unint64_t *)v143, &v155);
    if (!(_BYTE)v156) {
      goto LABEL_39;
    }
    int v68 = SHIBYTE(v155.__r_.__value_.__r.__words[2]);
    std::string::size_type v69 = v155.__r_.__value_.__l.__size_;
    char v70 = (void *)v155.__r_.__value_.__r.__words[0];
    if ((v155.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unsigned int v71 = &v155;
    }
    else {
      unsigned int v71 = (std::string *)v155.__r_.__value_.__r.__words[0];
    }
    if ((v155.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v69 = HIBYTE(v155.__r_.__value_.__r.__words[2]);
    }
    if (__len != v69)
    {
      if ((SHIBYTE(v155.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_39;
      }
LABEL_38:
      operator delete(v155.__r_.__value_.__l.__data_);
      goto LABEL_39;
    }
    if (__len)
    {
      int v72 = memcmp(__src, v71, __len);
      int v73 = v72;
      if (v68 < 0)
      {
        operator delete(v70);
        if (!v73) {
          goto LABEL_126;
        }
      }
      else if (!v72)
      {
        goto LABEL_126;
      }
      goto LABEL_39;
    }
    if (SHIBYTE(v155.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v155.__r_.__value_.__l.__data_);
    }
LABEL_126:
    uint64_t v74 = v32[2];
    if (!v74) {
      goto LABEL_39;
    }
    int v75 = v32 + 4;
    uint64_t v141 = (uint64_t)&v32[2 * v74 + 4];
    while (1)
    {
      char v76 = (char *)((char *)v75 - (char *)v32 + v31);
      uint64_t v77 = *v75;
      char v78 = v77 ? &v76[v77] : 0;
      char v79 = (void *)a1[1];
      char v80 = (void *)a1[2];
      if (v79 == v80)
      {
LABEL_149:
        SymbolicMangledNameStringRef = swift::Demangle::__runtime::makeSymbolicMangledNameStringRef(0, (const char *)v71);
        if (!SymbolicMangledNameStringRef) {
          goto LABEL_150;
        }
      }
      else
      {
        int8x16_t v81 = v78 + 1;
        while (1)
        {
          unint64_t v82 = v79[12];
          if (v82 <= (unint64_t)v78)
          {
            unint64_t v83 = v79[14] + v82;
            if ((unint64_t)v81 <= v83)
            {
              char v84 = v79 + 13;
              if (v83 <= (unint64_t)v78) {
                goto LABEL_149;
              }
              goto LABEL_141;
            }
          }
          unint64_t v82 = v79[15];
          if (v82 <= (unint64_t)v78)
          {
            unint64_t v83 = v79[17] + v82;
            if ((unint64_t)v81 <= v83) {
              break;
            }
          }
          v79 += 28;
          if (v79 == v80) {
            goto LABEL_149;
          }
        }
        char v84 = v79 + 16;
        if (v83 <= (unint64_t)v78) {
          goto LABEL_149;
        }
LABEL_141:
        uint64_t v85 = &v78[*v84 - v82];
        uint64_t v86 = (uint64_t)v85;
        while (1)
        {
          unsigned int v88 = *(unsigned __int8 *)v86;
          if (!*(unsigned char *)v86) {
            break;
          }
          if (v88 <= 0x17)
          {
            v78 += 5;
            uint64_t v87 = 5;
          }
          else if ((v88 & 0xF8) == 0x18)
          {
            uint64_t v87 = v86;
            uint64_t v86 = (*(_DWORD *)(a1[31] + 1944) + 1);
            v78 += v86;
          }
          else
          {
            ++v78;
            uint64_t v87 = 1;
          }
          v86 += v87;
          if ((unint64_t)v78 >= v83) {
            goto LABEL_149;
          }
        }
        if (*v85 == 36 && v85[1] == 115) {
          v85 += 2;
        }
        SymbolicMangledNameStringRef = swift::Demangle::__runtime::makeSymbolicMangledNameStringRef(v85, (const char *)v71);
        if (!SymbolicMangledNameStringRef)
        {
LABEL_150:
          std::string::size_type v91 = 0;
          char v92 = 0;
          size_t v93 = 0;
          memset(&v155, 0, sizeof(v155));
          goto LABEL_164;
        }
      }
      std::string::size_type v94 = v90;
      if (v90 > 0x7FFFFFFFFFFFFFF7) {
        goto LABEL_239;
      }
      std::string v95 = SymbolicMangledNameStringRef;
      if (v90 >= 0x17)
      {
        uint64_t v97 = (v90 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v90 | 7) != 0x17) {
          uint64_t v97 = v90 | 7;
        }
        uint64_t v98 = v97 + 1;
        char v96 = (std::string *)operator new(v97 + 1);
        v155.__r_.__value_.__l.__size_ = v94;
        v155.__r_.__value_.__r.__words[2] = v98 | 0x8000000000000000;
        v155.__r_.__value_.__r.__words[0] = (std::string::size_type)v96;
      }
      else
      {
        *((unsigned char *)&v155.__r_.__value_.__s + 23) = v90;
        char v96 = &v155;
        if (!v90) {
          goto LABEL_163;
        }
      }
      memmove(v96, v95, v94);
LABEL_163:
      v96->__r_.__value_.__s.__data_[v94] = 0;
      size_t v93 = HIBYTE(v155.__r_.__value_.__r.__words[2]);
      std::string::size_type v91 = v155.__r_.__value_.__l.__size_;
      char v92 = (std::string *)v155.__r_.__value_.__r.__words[0];
LABEL_164:
      int v99 = *((char *)v142 + 23);
      if (v99 >= 0) {
        size_t v100 = *((unsigned __int8 *)v142 + 23);
      }
      else {
        size_t v100 = (size_t)v142[1];
      }
      if (v99 >= 0) {
        unint64_t v101 = v142;
      }
      else {
        unint64_t v101 = *v142;
      }
      if ((v93 & 0x80u) == 0) {
        size_t v102 = v93;
      }
      else {
        size_t v102 = v91;
      }
      if ((v93 & 0x80u) == 0) {
        size_t v103 = &v155;
      }
      else {
        size_t v103 = v92;
      }
      if (v102 >= v100) {
        size_t v104 = v100;
      }
      else {
        size_t v104 = v102;
      }
      BOOL v105 = memcmp(v101, v103, v104) == 0;
      BOOL v106 = v102 == v100 && v105;
      if ((v93 & 0x80) != 0) {
        operator delete(v92);
      }
      if (v106) {
        break;
      }
      v75 += 2;
      if (v75 == (int *)v141) {
        goto LABEL_39;
      }
    }
    v155.__r_.__value_.__r.__words[0] = a1[31];
    __n128 v108 = swift::Demangle::__runtime::NodeFactory::pushCheckpoint((swift::Demangle::__runtime::NodeFactory *)v155.__r_.__value_.__l.__data_, (uint64_t)&v155.__r_.__value_.__l.__size_);
    uint64_t v109 = v75[1];
    if (v109) {
      char v110 = &v76[v109 + 4];
    }
    else {
      char v110 = 0;
    }
    unint64_t v111 = (void *)a1[1];
    size_t v112 = (void *)a1[2];
    if (v111 == v112)
    {
      char v110 = 0;
      int v117 = 0;
      uint64_t v28 = v139;
    }
    else
    {
      size_t v113 = v110 + 1;
      uint64_t v28 = v139;
      while (1)
      {
        unint64_t v114 = v111[12];
        if (v114 <= (unint64_t)v110)
        {
          unint64_t v115 = v111[14] + v114;
          if ((unint64_t)v113 <= v115) {
            break;
          }
        }
        unint64_t v114 = v111[15];
        if (v114 <= (unint64_t)v110)
        {
          unint64_t v115 = v111[17] + v114;
          if ((unint64_t)v113 <= v115)
          {
            unint64_t v116 = v111 + 16;
            if (v115 <= (unint64_t)v110) {
              goto LABEL_217;
            }
            goto LABEL_209;
          }
        }
        v111 += 28;
        if (v111 == v112) {
          goto LABEL_217;
        }
      }
      unint64_t v116 = v111 + 13;
      if (v115 <= (unint64_t)v110)
      {
LABEL_217:
        char v110 = 0;
        int v117 = 0;
        goto LABEL_218;
      }
LABEL_209:
      int v117 = &v110[*v116 - v114];
      uint64_t v118 = (uint64_t)v117;
      uint64_t v119 = v110;
      while (1)
      {
        unsigned int v121 = *(unsigned __int8 *)v118;
        if (!*(unsigned char *)v118) {
          break;
        }
        if (v121 <= 0x17)
        {
          v119 += 5;
          uint64_t v120 = 5;
        }
        else if ((v121 & 0xF8) == 0x18)
        {
          uint64_t v120 = v118;
          uint64_t v118 = (*(_DWORD *)(a1[31] + 1944) + 1);
          v119 += v118;
        }
        else
        {
          ++v119;
          uint64_t v120 = 1;
        }
        v118 += v120;
        if ((unint64_t)v119 >= v115) {
          goto LABEL_217;
        }
      }
      if (*v117 == 36 && v117[1] == 115)
      {
        v110 += 2;
        v117 += 2;
      }
    }
LABEL_218:
    uint64_t v122 = a1[31];
    v143[0] = v110;
    v143[1] = v117;
    LOBYTE(v157[0]) = 1;
    uint64_t v123 = *(void *)(v122 + 1976);
    if (v123)
    {
      uint64_t v124 = (*(uint64_t (**)(uint64_t, void **, void *, __n128))(*(void *)v123 + 48))(v123, v143, v157, v108);
      v157[0] = a1[31];
      swift::Demangle::__runtime::TypeDecoder<swift::reflection::TypeRefBuilder>::decodeMangledType(v143, v157, v124, 0, 1);
      if ((unsigned __int16)v144 == 1)
      {
        ((void (*)(void *, uint64_t, void))v143[1])(v143[0], 3, 0);
      }
      else if (!(_WORD)v144)
      {
        unint64_t v125 = v143[0];
        goto LABEL_224;
      }
      unint64_t v125 = 0;
LABEL_224:
      uint64_t v126 = (uint64_t)(a1 + 22);
      v143[0] = 0;
      v143[1] = 0;
      unint64_t v144 = 0;
      unint64_t v127 = v152;
      int64_t v128 = v153 - v152;
      if (v153 != v152)
      {
        if ((v128 & 0x8000000000000000) == 0)
        {
          unint64_t v129 = (char *)operator new(v153 - v152);
          unint64_t v130 = &v129[4 * (v128 >> 2)];
          v143[0] = v129;
          unint64_t v144 = v130;
          memcpy(v129, v127, v128);
          v143[1] = v130;
          uint64_t v126 = (uint64_t)(a1 + 22);
          goto LABEL_227;
        }
LABEL_239:
        abort();
      }
LABEL_227:
      size_t v135 = v125;
      uint64_t v145 = v125;
      std::__hash_table<std::__hash_value_type<swift::reflection::TypeRefID,swift::reflection::TypeRef const*>,std::__unordered_map_hasher<swift::reflection::TypeRefID,std::__hash_value_type<swift::reflection::TypeRefID,swift::reflection::TypeRef const*>,swift::reflection::TypeRefID::Hash,swift::reflection::TypeRefID::Equal,true>,std::__unordered_map_equal<swift::reflection::TypeRefID,std::__hash_value_type<swift::reflection::TypeRefID,swift::reflection::TypeRef const*>,swift::reflection::TypeRefID::Equal,swift::reflection::TypeRefID::Hash,true>,std::allocator<std::__hash_value_type<swift::reflection::TypeRefID,swift::reflection::TypeRef const*>>>::__emplace_unique_key_args<swift::reflection::TypeRefID,std::pair<swift::reflection::TypeRefID,swift::reflection::TypeRef const*>>(v126, (char **)v143, (long long *)v143);
      if (v143[0])
      {
        v143[1] = v143[0];
        operator delete(v143[0]);
      }
      *(_OWORD *)std::string::size_type v143 = *(_OWORD *)&v155.__r_.__value_.__r.__words[1];
      unint64_t v144 = v156;
      swift::Demangle::__runtime::NodeFactory::popCheckpoint((uint64_t)v155.__r_.__value_.__l.__data_, (uint64_t)v143, v131, v132);
      char v107 = 0;
      if (v151 < 0) {
LABEL_188:
      }
        operator delete(__p);
LABEL_189:
      if (v107)
      {
        v28 += 224;
        if (v28 == v138)
        {
LABEL_234:
          uint64_t v26 = 0;
          uint64_t v27 = v152;
          if (v152) {
            goto LABEL_235;
          }
          return (uint64_t)v26;
        }
        continue;
      }
      uint64_t v26 = v135;
      uint64_t v27 = v152;
      if (v152)
      {
LABEL_235:
        size_t v153 = v27;
        operator delete(v27);
      }
      return (uint64_t)v26;
    }
    else
    {
      uint64_t v134 = std::__throw_bad_function_call[abi:nn180100]();
      return swift::reflection::ReflectionSectionIteratorBase<swift::reflection::AssociatedTypeIterator,swift::reflection::AssociatedTypeDescriptor>::operator++(v134);
    }
  }
}

uint64_t swift::reflection::ReflectionSectionIteratorBase<swift::reflection::AssociatedTypeIterator,swift::reflection::AssociatedTypeDescriptor>::operator++(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = (*(_DWORD *)(v2 + 12) * *(_DWORD *)(v2 + 8)) + 16;
  uint64_t v4 = v3 + v2;
  *(void *)(a1 + 8) += v3;
  *(void *)(a1 + 16) = v3 + v2;
  unint64_t v5 = *(void *)(a1 + 24) - v3;
  *(void *)(a1 + 24) = v5;
  if (v5 && (unint64_t)(*(_DWORD *)(v4 + 12) * *(_DWORD *)(v4 + 8)) + 16 > v5)
  {
    int v6 = *(_DWORD *)a1 - v5;
    int v7 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&std::cerr, (uint64_t)"!!! Reflection section too small to contain next record\n", 56);
    std::ios_base::getloc((const std::ios_base *)((char *)v7 + *(void *)(*v7 - 24)));
    int8x8_t v8 = std::locale::use_facet(&v32, &std::ctype<char>::id);
    ((void (*)(const std::locale::facet *, uint64_t))v8->__vftable[2].~facet_0)(v8, 10);
    std::locale::~locale(&v32);
    std::ostream::put();
    std::ostream::flush();
    uint8x8_t v9 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&std::cerr, (uint64_t)"Section Type: ", 14);
    int v10 = *(char *)(a1 + 55);
    if (v10 >= 0) {
      uint64_t v11 = a1 + 32;
    }
    else {
      uint64_t v11 = *(void *)(a1 + 32);
    }
    if (v10 >= 0) {
      uint64_t v12 = *(unsigned __int8 *)(a1 + 55);
    }
    else {
      uint64_t v12 = *(void *)(a1 + 40);
    }
    uint64_t v13 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v9, v11, v12);
    std::ios_base::getloc((const std::ios_base *)((char *)v13 + *(void *)(*v13 - 24)));
    unint64_t v14 = std::locale::use_facet(&v32, &std::ctype<char>::id);
    ((void (*)(const std::locale::facet *, uint64_t))v14->__vftable[2].~facet_0)(v14, 10);
    std::locale::~locale(&v32);
    std::ostream::put();
    std::ostream::flush();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&std::cerr, (uint64_t)"Remaining section size: ", 24);
    uint64_t v15 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v15, (uint64_t)", total section size: ", 22);
    unint64_t v16 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v16, (uint64_t)", offset in section: ", 21);
    unint64_t v17 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v17, (uint64_t)", size of next record: ", 23);
    size_t v18 = (void *)std::ostream::operator<<();
    std::ios_base::getloc((const std::ios_base *)((char *)v18 + *(void *)(*v18 - 24)));
    uint64_t v19 = std::locale::use_facet(&v32, &std::ctype<char>::id);
    ((void (*)(const std::locale::facet *, uint64_t))v19->__vftable[2].~facet_0)(v19, 10);
    std::locale::~locale(&v32);
    std::ostream::put();
    std::ostream::flush();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&std::cerr, (uint64_t)"Last bytes of previous record: ", 31);
    if (-v6 < -8 || v6 == 8) {
      int v20 = -8;
    }
    else {
      int v20 = -v6;
    }
    if (v20 < 0)
    {
      uint64_t v21 = v20;
      do
      {
        uint64_t v22 = &std::cerr + 1;
        uint64_t v23 = std::cerr.__vftable;
        *(_DWORD *)((char *)&v22->__vftable + (unint64_t)std::cerr.__vftable[-2].~basic_ostream_0) = *(_DWORD *)((unsigned char *)&v22->__vftable + (unint64_t)std::cerr.__vftable[-2].~basic_ostream_0) & 0xFFFFFFB5 | 8;
        *(std::ostream_vtbl **)((char *)&v22[2].__vftable + (unint64_t)v23[-2].~basic_ostream_0) = (std::ostream_vtbl *)(&dword_0 + 2);
        unint64_t v24 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v24, (uint64_t)" ", 1);
        ++v21;
      }
      while (v21);
    }
    std::ios_base::getloc((const std::ios_base *)((char *)&std::cerr
                                                + (unint64_t)std::cerr.__vftable[-2].~basic_ostream_0));
    unint64_t v25 = std::locale::use_facet(&v32, &std::ctype<char>::id);
    ((void (*)(const std::locale::facet *, uint64_t))v25->__vftable[2].~facet_0)(v25, 10);
    std::locale::~locale(&v32);
    std::ostream::put();
    std::ostream::flush();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&std::cerr, (uint64_t)"Next bytes in section: ", 23);
    if (*(void *)(a1 + 24))
    {
      unint64_t v26 = 0;
      do
      {
        uint64_t v27 = &std::cerr + 1;
        uint64_t v28 = std::cerr.__vftable;
        *(_DWORD *)((char *)&v27->__vftable + (unint64_t)std::cerr.__vftable[-2].~basic_ostream_0) = *(_DWORD *)((unsigned char *)&v27->__vftable + (unint64_t)std::cerr.__vftable[-2].~basic_ostream_0) & 0xFFFFFFB5 | 8;
        *(std::ostream_vtbl **)((char *)&v27[2].__vftable + (unint64_t)v28[-2].~basic_ostream_0) = (std::ostream_vtbl *)(&dword_0 + 2);
        char v29 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v29, (uint64_t)" ", 1);
        if (v26 > 0xE) {
          break;
        }
        ++v26;
      }
      while (*(void *)(a1 + 24) > v26);
    }
    std::ios_base::getloc((const std::ios_base *)((char *)&std::cerr
                                                + (unint64_t)std::cerr.__vftable[-2].~basic_ostream_0));
    unint64_t v30 = std::locale::use_facet(&v32, &std::ctype<char>::id);
    ((void (*)(const std::locale::facet *, uint64_t))v30->__vftable[2].~facet_0)(v30, 10);
    std::locale::~locale(&v32);
    std::ostream::put();
    std::ostream::flush();
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t swift::reflection::TypeRefBuilder::lookupSuperclass(swift::reflection::TypeRefBuilder *this, const swift::reflection::TypeRef *a2)
{
  uint64_t v4 = (char *)*((void *)this + 209);
  unint64_t v5 = (char *)this + 1680;
  int v20 = (char *)&v21 + 8;
  DWORD1(v21) = 2;
  if (v4)
  {
    uint64_t v22 = v5;
    unsigned int v6 = 2;
    unint64_t v5 = v4;
  }
  else
  {
    unsigned int v6 = 1;
  }
  *((void *)&v21 + 1) = v5;
  LODWORD(v21) = v6;
  (*(void (**)(unsigned char **__return_ptr))(*(void *)v5 + 24))(&v19);
  BOOL v7 = v19 == 0;
  if (!v19)
  {
    uint64_t v19 = 0;
    if (&v22 != (char **)((char *)&v21 + 8 * v6 + 8))
    {
      (*(void (**)(unsigned char **__return_ptr))(*(void *)v22 + 24))(&v19);
      BOOL v7 = v19 == 0;
      if (!v19) {
        uint64_t v19 = 0;
      }
    }
  }
  if (v20 != (char *)&v21 + 8) {
    free(v20);
  }
  if (v7) {
    return 0;
  }
  int8x8_t v8 = v19;
  if (!v19) {
    return 0;
  }
  if (!v19[10])
  {
    uint64_t v13 = 0;
    uint64_t v19 = 0;
LABEL_24:
    (*(void (**)(unsigned char *))(*(void *)v8 + 8))(v8);
    return v13;
  }
  int v20 = this;
  __n128 v9 = swift::Demangle::__runtime::NodeFactory::pushCheckpoint(this, (uint64_t)&v21);
  uint64_t v10 = (*(uint64_t (**)(unsigned char *, __n128))(*(void *)v19 + 16))(v19, v9);
  uint64_t v23 = this;
  swift::Demangle::__runtime::TypeDecoder<swift::reflection::TypeRefBuilder>::decodeMangledType(v16, &v23, v10, 0, 1);
  if ((_WORD)v17)
  {
    if ((unsigned __int16)v17 == 1) {
      ((void (*)(__swift::__runtime::llvm *, uint64_t, void))v16[1])(v16[0], 3, 0);
    }
    goto LABEL_22;
  }
  unint64_t v14 = v16[0];
  if (!v16[0] || (swift::reflection::TypeRef::getSubstMap(a2, (uint64_t)v16), !v18))
  {
LABEL_22:
    uint64_t v13 = 0;
    goto LABEL_23;
  }
  uint64_t v13 = swift::reflection::TypeRef::subst(v14, this, v16);
  if (v18) {
    __swift::__runtime::llvm::deallocate_buffer(v16[0], (void *)(16 * v17), (std::align_val_t)8uLL);
  }
LABEL_23:
  *(_OWORD *)unint64_t v16 = v21;
  unint64_t v17 = v22;
  swift::Demangle::__runtime::NodeFactory::popCheckpoint((uint64_t)v20, (uint64_t)v16, v11, v12);
  int8x8_t v8 = v19;
  uint64_t v19 = 0;
  if (v8) {
    goto LABEL_24;
  }
  return v13;
}

void swift::reflection::TypeRefBuilder::getFieldDescriptor(swift::reflection::TypeRefBuilder *this@<X0>, const swift::reflection::TypeRef *a2@<X1>, void *a3@<X8>)
{
  unint64_t v5 = (char *)*((void *)this + 209);
  unsigned int v6 = (char *)this + 1680;
  if (v5)
  {
    uint64_t v10 = v6;
    unsigned int v7 = 2;
    unsigned int v6 = v5;
  }
  else
  {
    unsigned int v7 = 1;
  }
  __n128 v9 = v6;
  (*(void (**)(char *, const swift::reflection::TypeRef *))(*(void *)v6 + 24))(v6, a2);
  BOOL v8 = *a3 == 0;
  if (!*a3)
  {
    *a3 = 0;
    if (&v10 != &(&v9)[v7])
    {
      (*(void (**)(char *, const swift::reflection::TypeRef *))(*(void *)v10 + 24))(v10, a2);
      BOOL v8 = *a3 == 0;
      if (!*a3) {
        *a3 = 0;
      }
    }
  }
  if (v8) {
    *a3 = 0;
  }
}

void swift::reflection::TypeRefBuilder::ReflectionTypeDescriptorFinder::populateFieldTypeInfoCacheWithReflectionAtIndex(swift::reflection::TypeRefBuilder::ReflectionTypeDescriptorFinder *this, uint64_t a2)
{
  uint64_t v65 = a2;
  unint64_t v5 = (char *)this + 32;
  uint64_t v4 = *((void *)this + 4);
  uint64_t v6 = *((unsigned int *)this + 12);
  if (v6)
  {
    LODWORD(v7) = (v6 - 1) & (37 * a2);
    BOOL v8 = (uint64_t *)(v4 + 8 * v7);
    uint64_t v9 = *v8;
    if (*v8 == a2) {
      goto LABEL_8;
    }
    int v10 = 1;
    while (v9 != -1)
    {
      int v11 = v7 + v10++;
      uint64_t v7 = v11 & (v6 - 1);
      uint64_t v9 = *(void *)(v4 + 8 * v7);
      if (v9 == a2)
      {
        BOOL v8 = (uint64_t *)(v4 + 8 * v7);
        goto LABEL_8;
      }
    }
  }
  BOOL v8 = (uint64_t *)(v4 + 8 * v6);
LABEL_8:
  if (v8 != (uint64_t *)(v4 + 8 * v6)) {
    return;
  }
  long long v63 = &v65;
  uint64_t v64 = 0;
  uint64_t v12 = *((void *)this + 1) + 224 * a2;
  uint64_t v13 = *(long long **)(v12 + 8);
  unint64_t v14 = *(void *)(v12 + 16);
  v66[0] = *(long long **)v12;
  v66[1] = v13;
  *((unsigned char *)&__p.__r_.__value_.__s + 23) = 15;
  strcpy((char *)&__p, "FieldDescriptor");
  swift::reflection::ReflectionSectionIteratorBase<swift::reflection::FieldDescriptorIterator,swift::reflection::TargetFieldDescriptor<swift::InProcess>>::ReflectionSectionIteratorBase(&v57, (unint64_t *)v66, v14, (long long *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v60)
  {
    while (1)
    {
      uint64_t v15 = v59;
      uint64_t v16 = *(int *)v59;
      if (v16 && v16 != -v59) {
        break;
      }
      if (*((void *)this + 32))
      {
        *((unsigned char *)&__p.__r_.__value_.__s + 23) = 0;
        __p.__r_.__value_.__s.__data_[0] = 0;
        Address = __swift::__runtime::llvm::SmallVectorTemplateBase<std::string,false>::reserveForParamAndGetAddress((uint64_t)&v63, (unint64_t)&__p, 1);
        int v19 = v64;
        int v20 = (char *)v63 + 24 * v64;
        long long v21 = *(_OWORD *)Address;
        *((void *)v20 + 2) = *((void *)Address + 2);
        *(_OWORD *)int v20 = v21;
        *(void *)Address = 0;
        *((void *)Address + 1) = 0;
        *((void *)Address + 2) = 0;
        LODWORD(v64) = v19 + 1;
LABEL_47:
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
LABEL_13:
      swift::reflection::ReflectionSectionIteratorBase<swift::reflection::FieldDescriptorIterator,swift::reflection::TargetFieldDescriptor<swift::InProcess>>::operator++((uint64_t)&v57);
      if (!v60) {
        goto LABEL_52;
      }
    }
    uint64_t v22 = v58;
    uint64_t v23 = (void *)*((void *)this + 1);
    unint64_t v24 = (void *)*((void *)this + 2);
    if (v23 == v24)
    {
LABEL_39:
      unint64_t v30 = 0;
      unint64_t v25 = 0;
    }
    else
    {
      unint64_t v25 = v58 + v16;
      unint64_t v26 = v25 + 1;
      while (1)
      {
        unint64_t v27 = v23[12];
        if (v27 <= v25)
        {
          unint64_t v28 = v23[14] + v27;
          if (v26 <= v28) {
            break;
          }
        }
        unint64_t v27 = v23[15];
        if (v27 <= v25)
        {
          unint64_t v28 = v23[17] + v27;
          if (v26 <= v28)
          {
            char v29 = v23 + 16;
            if (v28 <= v25) {
              goto LABEL_39;
            }
            goto LABEL_31;
          }
        }
        v23 += 28;
        if (v23 == v24) {
          goto LABEL_39;
        }
      }
      char v29 = v23 + 13;
      if (v28 <= v25) {
        goto LABEL_39;
      }
LABEL_31:
      unint64_t v30 = (unsigned char *)(v25 - v27 + *v29);
      uint64_t v31 = (uint64_t)v30;
      unint64_t v32 = v25;
      while (1)
      {
        unsigned int v34 = *(unsigned __int8 *)v31;
        if (!*(unsigned char *)v31) {
          break;
        }
        if (v34 <= 0x17)
        {
          v32 += 5;
          uint64_t v33 = 5;
        }
        else if ((v34 & 0xF8) == 0x18)
        {
          uint64_t v33 = v31;
          uint64_t v31 = (*(_DWORD *)(*((void *)this + 31) + 1944) + 1);
          v32 += v31;
        }
        else
        {
          ++v32;
          uint64_t v33 = 1;
        }
        v31 += v33;
        if (v32 >= v28) {
          goto LABEL_39;
        }
      }
      if (*v30 == 36 && v30[1] == 115)
      {
        v30 += 2;
        v25 += 2;
      }
    }
    v54[0] = v25;
    v54[1] = (unint64_t)v30;
    swift::reflection::TypeRefBuilder::ReflectionTypeDescriptorFinder::normalizeReflectionName((uint64_t)this, v54, &__p);
    if (!v56) {
      goto LABEL_13;
    }
    if (*((void *)this + 32))
    {
      long long v35 = __swift::__runtime::llvm::SmallVectorTemplateBase<std::string,false>::reserveForParamAndGetAddress((uint64_t)&v63, (unint64_t)&__p, 1);
      int v36 = v64;
      std::string::size_type v37 = (char *)v63 + 24 * v64;
      if (v35[23] < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)v63 + v64, *(const std::string::value_type **)v35, *((void *)v35 + 1));
        int v36 = v64;
      }
      else
      {
        long long v38 = *(_OWORD *)v35;
        *((void *)v37 + 2) = *((void *)v35 + 2);
        *(_OWORD *)std::string::size_type v37 = v38;
      }
      LODWORD(v64) = v36 + 1;
    }
    v66[0] = (long long *)&__p;
    unint64_t v39 = std::__hash_table<std::__hash_value_type<std::string,swift::remote::RemoteRef<swift::reflection::TargetFieldDescriptor<swift::InProcess>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,swift::remote::RemoteRef<swift::reflection::TargetFieldDescriptor<swift::InProcess>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,swift::remote::RemoteRef<swift::reflection::TargetFieldDescriptor<swift::InProcess>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,swift::remote::RemoteRef<swift::reflection::TargetFieldDescriptor<swift::InProcess>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)this + 56, (uint64_t)&__p, (uint64_t)&std::piecewise_construct, v66);
    *((void *)v39 + 5) = v22;
    *((void *)v39 + 6) = v15;
    if (!v56) {
      goto LABEL_13;
    }
    goto LABEL_47;
  }
LABEL_52:
  if (v62 < 0) {
    operator delete(v61);
  }
  uint64_t v40 = *((void *)this + 32);
  if (v40) {
    (*(void (**)(uint64_t, uint64_t, uint64_t, void *, void))(*(void *)v40 + 16))(v40, a2, v12, v63, v64);
  }
  int v41 = *((_DWORD *)this + 12);
  if (!v41)
  {
    unint64_t v51 = 0;
LABEL_68:
    __swift::__runtime::llvm::DenseMapBase<__swift::__runtime::llvm::DenseMap<unsigned long,__swift::__runtime::llvm::detail::DenseSetEmpty,__swift::__runtime::llvm::DenseMapInfo<unsigned long>,__swift::__runtime::llvm::detail::DenseSetPair<unsigned long>>,unsigned long,__swift::__runtime::llvm::detail::DenseSetEmpty,__swift::__runtime::llvm::DenseMapInfo<unsigned long>,__swift::__runtime::llvm::detail::DenseSetPair<unsigned long>>::InsertIntoBucket<unsigned long const&,__swift::__runtime::llvm::detail::DenseSetEmpty&>((uint64_t)v5, v51, &v65);
    goto LABEL_69;
  }
  uint64_t v42 = *((void *)this + 4);
  int v43 = v41 - 1;
  unsigned int v44 = (37 * a2) & v43;
  unsigned int v45 = (uint64_t *)(v42 + 8 * v44);
  uint64_t v46 = *v45;
  if (*v45 != a2)
  {
    uint64_t v47 = 0;
    int v48 = 1;
    while (v46 != -1)
    {
      if (v47) {
        BOOL v49 = 0;
      }
      else {
        BOOL v49 = v46 == -2;
      }
      if (v49) {
        uint64_t v47 = v45;
      }
      unsigned int v50 = v44 + v48++;
      unsigned int v44 = v50 & v43;
      unsigned int v45 = (uint64_t *)(v42 + 8 * v44);
      uint64_t v46 = *v45;
      if (*v45 == a2) {
        goto LABEL_69;
      }
    }
    if (v47) {
      unint64_t v51 = v47;
    }
    else {
      unint64_t v51 = v45;
    }
    goto LABEL_68;
  }
LABEL_69:
  char v52 = (uint64_t *)v63;
  if (v64)
  {
    uint64_t v53 = 3 * v64;
    do
    {
      if (SHIBYTE(v52[v53 - 1]) < 0) {
        operator delete((void *)v52[v53 - 3]);
      }
      v53 -= 3;
    }
    while (v53 * 8);
    char v52 = (uint64_t *)v63;
  }
  if (v52 != &v65) {
    free(v52);
  }
}

uint64_t swift::reflection::ReflectionSectionIteratorBase<swift::reflection::FieldDescriptorIterator,swift::reflection::TargetFieldDescriptor<swift::InProcess>>::operator++(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(_DWORD *)(v2 + 12) * *(unsigned __int16 *)(v2 + 10) + 16;
  uint64_t v4 = v3 + v2;
  *(void *)(a1 + 8) += v3;
  *(void *)(a1 + 16) = v3 + v2;
  unint64_t v5 = *(void *)(a1 + 24) - v3;
  *(void *)(a1 + 24) = v5;
  if (v5 && (unint64_t)(*(_DWORD *)(v4 + 12) * *(unsigned __int16 *)(v4 + 10)) + 16 > v5)
  {
    int v6 = *(_DWORD *)a1 - v5;
    uint64_t v7 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&std::cerr, (uint64_t)"!!! Reflection section too small to contain next record\n", 56);
    std::ios_base::getloc((const std::ios_base *)((char *)v7 + *(void *)(*v7 - 24)));
    BOOL v8 = std::locale::use_facet(&v32, &std::ctype<char>::id);
    ((void (*)(const std::locale::facet *, uint64_t))v8->__vftable[2].~facet_0)(v8, 10);
    std::locale::~locale(&v32);
    std::ostream::put();
    std::ostream::flush();
    uint64_t v9 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&std::cerr, (uint64_t)"Section Type: ", 14);
    int v10 = *(char *)(a1 + 55);
    if (v10 >= 0) {
      uint64_t v11 = a1 + 32;
    }
    else {
      uint64_t v11 = *(void *)(a1 + 32);
    }
    if (v10 >= 0) {
      uint64_t v12 = *(unsigned __int8 *)(a1 + 55);
    }
    else {
      uint64_t v12 = *(void *)(a1 + 40);
    }
    uint64_t v13 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v9, v11, v12);
    std::ios_base::getloc((const std::ios_base *)((char *)v13 + *(void *)(*v13 - 24)));
    unint64_t v14 = std::locale::use_facet(&v32, &std::ctype<char>::id);
    ((void (*)(const std::locale::facet *, uint64_t))v14->__vftable[2].~facet_0)(v14, 10);
    std::locale::~locale(&v32);
    std::ostream::put();
    std::ostream::flush();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&std::cerr, (uint64_t)"Remaining section size: ", 24);
    uint64_t v15 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v15, (uint64_t)", total section size: ", 22);
    uint64_t v16 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v16, (uint64_t)", offset in section: ", 21);
    unint64_t v17 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v17, (uint64_t)", size of next record: ", 23);
    char v18 = (void *)std::ostream::operator<<();
    std::ios_base::getloc((const std::ios_base *)((char *)v18 + *(void *)(*v18 - 24)));
    int v19 = std::locale::use_facet(&v32, &std::ctype<char>::id);
    ((void (*)(const std::locale::facet *, uint64_t))v19->__vftable[2].~facet_0)(v19, 10);
    std::locale::~locale(&v32);
    std::ostream::put();
    std::ostream::flush();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&std::cerr, (uint64_t)"Last bytes of previous record: ", 31);
    if (-v6 < -8 || v6 == 8) {
      int v20 = -8;
    }
    else {
      int v20 = -v6;
    }
    if (v20 < 0)
    {
      uint64_t v21 = v20;
      do
      {
        uint64_t v22 = &std::cerr + 1;
        uint64_t v23 = std::cerr.__vftable;
        *(_DWORD *)((char *)&v22->__vftable + (unint64_t)std::cerr.__vftable[-2].~basic_ostream_0) = *(_DWORD *)((unsigned char *)&v22->__vftable + (unint64_t)std::cerr.__vftable[-2].~basic_ostream_0) & 0xFFFFFFB5 | 8;
        *(std::ostream_vtbl **)((char *)&v22[2].__vftable + (unint64_t)v23[-2].~basic_ostream_0) = (std::ostream_vtbl *)(&dword_0 + 2);
        unint64_t v24 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v24, (uint64_t)" ", 1);
        ++v21;
      }
      while (v21);
    }
    std::ios_base::getloc((const std::ios_base *)((char *)&std::cerr
                                                + (unint64_t)std::cerr.__vftable[-2].~basic_ostream_0));
    unint64_t v25 = std::locale::use_facet(&v32, &std::ctype<char>::id);
    ((void (*)(const std::locale::facet *, uint64_t))v25->__vftable[2].~facet_0)(v25, 10);
    std::locale::~locale(&v32);
    std::ostream::put();
    std::ostream::flush();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&std::cerr, (uint64_t)"Next bytes in section: ", 23);
    if (*(void *)(a1 + 24))
    {
      unint64_t v26 = 0;
      do
      {
        unint64_t v27 = &std::cerr + 1;
        unint64_t v28 = std::cerr.__vftable;
        *(_DWORD *)((char *)&v27->__vftable + (unint64_t)std::cerr.__vftable[-2].~basic_ostream_0) = *(_DWORD *)((unsigned char *)&v27->__vftable + (unint64_t)std::cerr.__vftable[-2].~basic_ostream_0) & 0xFFFFFFB5 | 8;
        *(std::ostream_vtbl **)((char *)&v27[2].__vftable + (unint64_t)v28[-2].~basic_ostream_0) = (std::ostream_vtbl *)(&dword_0 + 2);
        char v29 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v29, (uint64_t)" ", 1);
        if (v26 > 0xE) {
          break;
        }
        ++v26;
      }
      while (*(void *)(a1 + 24) > v26);
    }
    std::ios_base::getloc((const std::ios_base *)((char *)&std::cerr
                                                + (unint64_t)std::cerr.__vftable[-2].~basic_ostream_0));
    unint64_t v30 = std::locale::use_facet(&v32, &std::ctype<char>::id);
    ((void (*)(const std::locale::facet *, uint64_t))v30->__vftable[2].~facet_0)(v30, 10);
    std::locale::~locale(&v32);
    std::ostream::put();
    std::ostream::flush();
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t *swift::reflection::TypeRefBuilder::ReflectionTypeDescriptorFinder::findFieldDescriptorAtIndex@<X0>(swift::reflection::TypeRefBuilder::ReflectionTypeDescriptorFinder *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  swift::reflection::TypeRefBuilder::ReflectionTypeDescriptorFinder::populateFieldTypeInfoCacheWithReflectionAtIndex(a1, a2);
  uint64_t result = std::__hash_table<std::__hash_value_type<std::string,swift::remote::RemoteRef<swift::reflection::TargetFieldDescriptor<swift::InProcess>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,swift::remote::RemoteRef<swift::reflection::TargetFieldDescriptor<swift::InProcess>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,swift::remote::RemoteRef<swift::reflection::TargetFieldDescriptor<swift::InProcess>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,swift::remote::RemoteRef<swift::reflection::TargetFieldDescriptor<swift::InProcess>>>>>::find<std::string>((void *)a1 + 7, a3);
  if (result)
  {
    uint64_t v8 = result[6];
    *(void *)a4 = result[5];
    *(void *)(a4 + 8) = v8;
    char v9 = 1;
  }
  else
  {
    char v9 = 0;
    *(unsigned char *)a4 = 0;
  }
  *(unsigned char *)(a4 + 16) = v9;
  return result;
}

uint64_t *swift::reflection::TypeRefBuilder::ReflectionTypeDescriptorFinder::getFieldDescriptorFromExternalCache@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result = (uint64_t *)a1[32];
  if (!result) {
    goto LABEL_44;
  }
  uint64_t result = (*(void *(**)(void *__return_ptr))(*result + 24))(v39);
  if (!v40) {
    goto LABEL_44;
  }
  uint64_t v7 = a1[1];
  if (v39[0] >= (unint64_t)(0x6DB6DB6DB6DB6DB7 * ((a1[2] - v7) >> 5))) {
    goto LABEL_44;
  }
  uint64_t v8 = (long long **)(v7 + 224 * v39[0]);
  uint64_t v9 = v39[1];
  uint64_t v11 = *v8;
  int v10 = v8[1];
  unint64_t v12 = (unint64_t)v8[2];
  v41[0] = *v8;
  v41[1] = v10;
  *((unsigned char *)&__p.__r_.__value_.__s + 23) = 15;
  strcpy((char *)&__p, "FieldDescriptor");
  swift::reflection::ReflectionSectionIteratorBase<swift::reflection::FieldDescriptorIterator,swift::reflection::TargetFieldDescriptor<swift::InProcess>>::ReflectionSectionIteratorBase(v34, (unint64_t *)v41, v12, (long long *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v36)
  {
    uint64_t v13 = (char *)v11 + v9;
    while (1)
    {
      if ((char *)v34[1] == v13)
      {
        uint64_t v16 = v35;
        uint64_t v17 = *(int *)v35;
        if (v17) {
          BOOL v18 = v17 == -v35;
        }
        else {
          BOOL v18 = 1;
        }
        if (v18) {
          goto LABEL_40;
        }
        int v19 = (void *)a1[1];
        int v20 = (void *)a1[2];
        if (v19 == v20)
        {
LABEL_8:
          unint64_t v14 = 0;
          unint64_t v15 = 0;
        }
        else
        {
          unint64_t v15 = (unint64_t)&v13[v17];
          unint64_t v21 = v15 + 1;
          while (1)
          {
            unint64_t v22 = v19[12];
            if (v22 <= v15)
            {
              unint64_t v23 = v19[14] + v22;
              if (v21 <= v23) {
                break;
              }
            }
            unint64_t v22 = v19[15];
            if (v22 <= v15)
            {
              unint64_t v23 = v19[17] + v22;
              if (v21 <= v23)
              {
                unint64_t v24 = v19 + 16;
                if (v23 <= v15) {
                  goto LABEL_8;
                }
                goto LABEL_26;
              }
            }
            v19 += 28;
            if (v19 == v20) {
              goto LABEL_8;
            }
          }
          unint64_t v24 = v19 + 13;
          if (v23 <= v15) {
            goto LABEL_8;
          }
LABEL_26:
          unint64_t v14 = (unsigned char *)(v15 - v22 + *v24);
          uint64_t v25 = (uint64_t)v14;
          unint64_t v26 = v15;
          while (1)
          {
            unsigned int v28 = *(unsigned __int8 *)v25;
            if (!*(unsigned char *)v25) {
              break;
            }
            if (v28 <= 0x17)
            {
              v26 += 5;
              uint64_t v27 = 5;
            }
            else if ((v28 & 0xF8) == 0x18)
            {
              uint64_t v27 = v25;
              uint64_t v25 = (*(_DWORD *)(a1[31] + 1944) + 1);
              v26 += v25;
            }
            else
            {
              ++v26;
              uint64_t v27 = 1;
            }
            v25 += v27;
            if (v26 >= v23) {
              goto LABEL_8;
            }
          }
          if (*v14 == 36 && v14[1] == 115)
          {
            v14 += 2;
            v15 += 2;
          }
        }
        v31[0] = v15;
        v31[1] = (unint64_t)v14;
        swift::reflection::TypeRefBuilder::ReflectionTypeDescriptorFinder::normalizeReflectionName((uint64_t)a1, v31, &__p);
        if (v33) {
          break;
        }
      }
      swift::reflection::ReflectionSectionIteratorBase<swift::reflection::FieldDescriptorIterator,swift::reflection::TargetFieldDescriptor<swift::InProcess>>::operator++((uint64_t)v34);
      if (!v36) {
        goto LABEL_40;
      }
    }
    v41[0] = (long long *)&__p;
    char v29 = std::__hash_table<std::__hash_value_type<std::string,swift::remote::RemoteRef<swift::reflection::TargetFieldDescriptor<swift::InProcess>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,swift::remote::RemoteRef<swift::reflection::TargetFieldDescriptor<swift::InProcess>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,swift::remote::RemoteRef<swift::reflection::TargetFieldDescriptor<swift::InProcess>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,swift::remote::RemoteRef<swift::reflection::TargetFieldDescriptor<swift::InProcess>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)(a1 + 7), (uint64_t)&__p, (uint64_t)&std::piecewise_construct, v41);
    *((void *)v29 + 5) = v13;
    *((void *)v29 + 6) = v16;
    if (v33 && SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
LABEL_40:
  if (v38 < 0) {
    operator delete(v37);
  }
  uint64_t result = std::__hash_table<std::__hash_value_type<std::string,swift::remote::RemoteRef<swift::reflection::TargetFieldDescriptor<swift::InProcess>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,swift::remote::RemoteRef<swift::reflection::TargetFieldDescriptor<swift::InProcess>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,swift::remote::RemoteRef<swift::reflection::TargetFieldDescriptor<swift::InProcess>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,swift::remote::RemoteRef<swift::reflection::TargetFieldDescriptor<swift::InProcess>>>>>::find<std::string>(a1 + 7, a2);
  if (result)
  {
    uint64_t v30 = result[6];
    *(void *)a3 = result[5];
    *(void *)(a3 + 8) = v30;
    *(unsigned char *)(a3 + 16) = 1;
  }
  else
  {
LABEL_44:
    *(unsigned char *)a3 = 0;
    *(unsigned char *)(a3 + 16) = 0;
  }
  return result;
}

void *swift::reflection::TypeRefBuilder::ReflectionTypeDescriptorFinder::getFieldTypeInfo@<X0>(swift::reflection::TypeRefBuilder::ReflectionTypeDescriptorFinder *this@<X0>, const swift::reflection::TypeRef *a2@<X1>, void *a3@<X8>)
{
  v44[1] = 0;
  v44[2] = 0;
  unsigned int v45 = 0;
  uint64_t v46 = 2400;
  uint64_t v47 = 0;
  char v48 = 0;
  unint64_t v83 = 0;
  v44[0] = off_C9440;
  uint64_t v49 = 0;
  uint64_t v50 = 0;
  uint64_t v51 = 0;
  char v52 = 0;
  long long v64 = 0u;
  long long v65 = 0u;
  long long v66 = 0u;
  long long v67 = 0u;
  long long v68 = 0u;
  long long v69 = 0u;
  long long v70 = 0u;
  long long v71 = 0u;
  long long v72 = 0u;
  long long v73 = 0u;
  long long v74 = 0u;
  long long v75 = 0u;
  long long v76 = 0u;
  long long v77 = 0u;
  long long v78 = 0u;
  long long v79 = 0u;
  long long v80 = 0u;
  long long v53 = 0u;
  long long v54 = 0u;
  long long v55 = 0u;
  long long v56 = 0u;
  long long v57 = 0u;
  long long v58 = 0u;
  long long v59 = 0u;
  long long v60 = 0u;
  long long v61 = 0u;
  long long v62 = 0u;
  long long v63 = 0u;
  int v81 = 0;
  int v6 = *((_DWORD *)a2 + 2);
  if (!a2 || (uint64_t v7 = a2, v6 != 1))
  {
    uint64_t v7 = v6 == 2 ? a2 : 0;
    if (!v7)
    {
      *a3 = 0;
      a3[1] = 0;
      goto LABEL_78;
    }
  }
  Demangling = swift::reflection::TypeRef::getDemangling(v7, (swift::Demangle::__runtime::Demangler *)v44);
  uint64_t v9 = (char *)a2 + 16;
  int v10 = (void *)((char *)this + 56);
  uint64_t v11 = std::__hash_table<std::__hash_value_type<std::string,swift::remote::RemoteRef<swift::reflection::TargetFieldDescriptor<swift::InProcess>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,swift::remote::RemoteRef<swift::reflection::TargetFieldDescriptor<swift::InProcess>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,swift::remote::RemoteRef<swift::reflection::TargetFieldDescriptor<swift::InProcess>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,swift::remote::RemoteRef<swift::reflection::TargetFieldDescriptor<swift::InProcess>>>>>::find<std::string>((void *)this + 7, (uint64_t)v9);
  if (v11)
  {
    unint64_t v12 = (void *)v11[5];
    uint64_t v13 = v11[6];
LABEL_11:
    *a3 = v12;
    a3[1] = v13;
    goto LABEL_78;
  }
  swift::reflection::TypeRefBuilder::ReflectionTypeDescriptorFinder::getFieldDescriptorFromExternalCache(this, (uint64_t)v9, (uint64_t)&v84);
  if (LOBYTE(v86[0]))
  {
    unint64_t v12 = v84;
    uint64_t v13 = v85;
    goto LABEL_11;
  }
  int v43 = a3;
  if (!Demangling) {
    goto LABEL_66;
  }
  size_t v14 = 0;
  char v84 = v86;
  v86[0] = Demangling;
  uint64_t v85 = 0x800000001;
  unsigned int v15 = 1;
  while (1)
  {
    uint64_t v16 = v84;
    uint64_t v17 = v84[v14];
    BOOL v18 = (uint64_t *)(v17 + 16);
    int v19 = *(unsigned __int8 *)(v17 + 18);
    if (*(_WORD *)(v17 + 16) == 153) {
      break;
    }
    int v20 = (uint64_t *)v84[v14];
    if ((v19 - 1) >= 2)
    {
      if (v19 == 5)
      {
        unint64_t v21 = *(uint64_t **)v17;
        int v20 = *(uint64_t **)v17;
        goto LABEL_25;
      }
      int v20 = 0;
    }
    if (v19 == 1)
    {
      BOOL v18 = (uint64_t *)(v17 + 8);
      if (v20 != (uint64_t *)(v17 + 8)) {
        goto LABEL_31;
      }
    }
    else
    {
      if (v19 != 2)
      {
        if (v19 == 5)
        {
          unint64_t v21 = *(uint64_t **)v17;
LABEL_25:
          BOOL v18 = &v21[*(unsigned int *)(v17 + 8)];
          if (v20 != v18) {
            goto LABEL_31;
          }
          goto LABEL_15;
        }
        BOOL v18 = 0;
      }
      for (; v20 != v18; ++v20)
      {
LABEL_31:
        uint64_t v22 = *v20;
        if (v15 >= HIDWORD(v85))
        {
          __swift::__runtime::llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v84, (uint64_t)v86, v15 + 1, 8);
          unsigned int v15 = v85;
        }
        v84[v15] = v22;
        unsigned int v15 = v85 + 1;
        LODWORD(v85) = v85 + 1;
      }
    }
LABEL_15:
    if (++v14 >= v15)
    {
      unint64_t v23 = 0;
      char v24 = 1;
      uint64_t v16 = v84;
      goto LABEL_39;
    }
  }
  if (v19 == 3)
  {
    char v24 = 0;
    unint64_t v23 = *(uint64_t **)v17;
    size_t v14 = *(void *)(v17 + 8);
  }
  else
  {
    unint64_t v23 = 0;
    char v24 = 1;
  }
LABEL_39:
  if (v16 != v86) {
    free(v16);
  }
  if ((v24 & 1) == 0)
  {
    if (v14 != 3 || (*(_WORD *)v23 == 24415 ? (BOOL v25 = *((unsigned char *)v23 + 2) == 67) : (BOOL v25 = 0), !v25))
    {
      uint64_t v26 = *((void *)this + 1);
      if (*((void *)this + 2) != v26)
      {
        for (unint64_t i = 0; i < 0x6DB6DB6DB6DB6DB7 * ((*((void *)this + 2) - v26) >> 5); ++i)
        {
          uint64_t v28 = *((void *)this + 32);
          if (v28)
          {
            char v29 = (*(uint64_t (**)(uint64_t, unint64_t))(*(void *)v28 + 32))(v28, i);
            uint64_t v26 = *((void *)this + 1);
            if (v29) {
              continue;
            }
          }
          uint64_t v30 = v26 + 224 * i;
          uint64_t v31 = *(void *)(v30 + 192);
          uint64_t v32 = *(unsigned int *)(v30 + 200);
          if (v32)
          {
            uint64_t v33 = 16 * v32;
            uint64_t v34 = *(void *)(v30 + 192);
            while (*(void *)(v34 + 8) != v14 || v14 && memcmp(*(const void **)v34, v23, v14))
            {
              v34 += 16;
              v33 -= 16;
              if (!v33)
              {
                uint64_t v34 = v31 + 16 * v32;
                break;
              }
            }
            int v10 = (void *)((char *)this + 56);
          }
          else
          {
            uint64_t v34 = *(void *)(v30 + 192);
          }
          if (v32 != (v34 - v31) >> 4)
          {
            swift::reflection::TypeRefBuilder::ReflectionTypeDescriptorFinder::populateFieldTypeInfoCacheWithReflectionAtIndex(this, i);
            uint64_t v35 = std::__hash_table<std::__hash_value_type<std::string,swift::remote::RemoteRef<swift::reflection::TargetFieldDescriptor<swift::InProcess>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,swift::remote::RemoteRef<swift::reflection::TargetFieldDescriptor<swift::InProcess>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,swift::remote::RemoteRef<swift::reflection::TargetFieldDescriptor<swift::InProcess>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,swift::remote::RemoteRef<swift::reflection::TargetFieldDescriptor<swift::InProcess>>>>>::find<std::string>(v10, (uint64_t)v9);
            if (v35) {
              goto LABEL_65;
            }
            uint64_t v26 = *((void *)this + 1);
          }
        }
      }
    }
  }
LABEL_66:
  if (*((void *)this + 2) == *((void *)this + 1))
  {
LABEL_77:
    *int v43 = 0;
    v43[1] = 0;
  }
  else
  {
    unint64_t v37 = 0;
    while (1)
    {
      uint64_t v40 = *((void *)this + 32);
      if (!v40 || ((*(uint64_t (**)(uint64_t, unint64_t))(*(void *)v40 + 32))(v40, v37) & 1) == 0)
      {
        swift::reflection::TypeRefBuilder::ReflectionTypeDescriptorFinder::populateFieldTypeInfoCacheWithReflectionAtIndex(this, v37);
        uint64_t v35 = std::__hash_table<std::__hash_value_type<std::string,swift::remote::RemoteRef<swift::reflection::TargetFieldDescriptor<swift::InProcess>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,swift::remote::RemoteRef<swift::reflection::TargetFieldDescriptor<swift::InProcess>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,swift::remote::RemoteRef<swift::reflection::TargetFieldDescriptor<swift::InProcess>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,swift::remote::RemoteRef<swift::reflection::TargetFieldDescriptor<swift::InProcess>>>>>::find<std::string>(v10, (uint64_t)v9);
        if (v35) {
          break;
        }
      }
      ++v37;
      uint64_t v39 = *((void *)this + 1);
      uint64_t v38 = *((void *)this + 2);
      if (v37 >= 0x6DB6DB6DB6DB6DB7 * ((v38 - v39) >> 5))
      {
        if (v38 == v39) {
          goto LABEL_77;
        }
        uint64_t v41 = 0;
        while (1)
        {
          swift::reflection::TypeRefBuilder::ReflectionTypeDescriptorFinder::populateFieldTypeInfoCacheWithReflectionAtIndex(this, v41);
          uint64_t v35 = std::__hash_table<std::__hash_value_type<std::string,swift::remote::RemoteRef<swift::reflection::TargetFieldDescriptor<swift::InProcess>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,swift::remote::RemoteRef<swift::reflection::TargetFieldDescriptor<swift::InProcess>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,swift::remote::RemoteRef<swift::reflection::TargetFieldDescriptor<swift::InProcess>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,swift::remote::RemoteRef<swift::reflection::TargetFieldDescriptor<swift::InProcess>>>>>::find<std::string>(v10, (uint64_t)v9);
          if (v35) {
            goto LABEL_65;
          }
          if (++v41 >= (unint64_t)(0x6DB6DB6DB6DB6DB7
                                         * ((uint64_t)(*((void *)this + 2) - *((void *)this + 1)) >> 5)))
            goto LABEL_77;
        }
      }
    }
LABEL_65:
    uint64_t v36 = v35[6];
    *int v43 = v35[5];
    v43[1] = v36;
  }
LABEL_78:
  v44[0] = off_C9440;
  if (v83 == v82)
  {
    (*(void (**)(void *))(v82[0] + 32))(v82);
  }
  else if (v83)
  {
    (*(void (**)(void))(*v83 + 40))();
  }
  v44[0] = off_C9418;
  uint64_t result = swift::Demangle::__runtime::NodeFactory::freeSlabs(v45);
  if (v47) {
    *(unsigned char *)(v47 + 48) = 0;
  }
  return result;
}

uint64_t swift::reflection::TypeRefBuilder::ReflectionTypeDescriptorFinder::getFieldDescriptor@<X0>(swift::reflection::TypeRefBuilder::ReflectionTypeDescriptorFinder *this@<X0>, const swift::reflection::TypeRef *a2@<X1>, void *a3@<X8>)
{
  swift::reflection::TypeRefBuilder::ReflectionTypeDescriptorFinder::getFieldTypeInfo(this, a2, v5);
  if (v5[1]) {
    operator new();
  }
  uint64_t result = 0;
  *a3 = 0;
  return result;
}

uint64_t swift::reflection::TypeRefBuilder::getFieldTypeRefs(swift::Demangle::__runtime::NodeFactory *a1, swift::reflection::TypeRef *this, _WORD *a3, uint64_t a4, uint64_t a5)
{
  swift::reflection::TypeRef::getSubstMap(this, (uint64_t)v66);
  if (!v68) {
    return 0;
  }
  (*(void (**)(void **__return_ptr))(*(void *)a3 + 24))(&v64);
  uint64_t v8 = v64;
  uint64_t v7 = v65;
  if (v64 == v65)
  {
LABEL_65:
    if (v8)
    {
      char v48 = v65;
      uint64_t v49 = v8;
      if (v65 != v8)
      {
        do
        {
          uint64_t v51 = *--v48;
          uint64_t v50 = v51;
          *char v48 = 0;
          if (v51) {
            (*(void (**)(uint64_t, __n128))(*(void *)v50 + 8))(v50, v6);
          }
        }
        while (v48 != v8);
        uint64_t v49 = v64;
      }
      long long v65 = v8;
      operator delete(v49);
    }
    uint64_t v41 = 1;
    if (!v68) {
      return v41;
    }
    goto LABEL_74;
  }
  unsigned __int32 v9 = 0;
  long long v53 = v65;
  while (1)
  {
    uint64_t v10 = (*(uint64_t (**)(void))(*(void *)*v8 + 16))();
    unint64_t v12 = (const void *)v10;
    std::string::size_type v13 = v11;
    if ((a3[4] & 0xFFFE) != 2 || *(unsigned char *)(*v8 + 10)) {
      break;
    }
    if (!v10)
    {
      memset(&__p, 0, sizeof(__p));
LABEL_45:
      int v35 = 0;
      std::string v61 = __p;
      goto LABEL_47;
    }
    if (v11 > 0x7FFFFFFFFFFFFFF7) {
LABEL_80:
    }
      abort();
    if (v11 >= 0x17)
    {
      uint64_t v32 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v11 | 7) != 0x17) {
        uint64_t v32 = v11 | 7;
      }
      uint64_t v33 = v32 + 1;
      p_p = (std::string *)operator new(v32 + 1);
      unint64_t v34 = v33 | 0x8000000000000000;
      uint64_t v7 = v53;
      __p.__r_.__value_.__l.__size_ = v13;
      __p.__r_.__value_.__r.__words[2] = v34;
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)p_p;
LABEL_43:
      memmove(p_p, v12, v13);
      goto LABEL_44;
    }
    *((unsigned char *)&__p.__r_.__value_.__s + 23) = v11;
    p_p = &__p;
    if (v11) {
      goto LABEL_43;
    }
LABEL_44:
    p_p->__r_.__value_.__s.__data_[v13] = 0;
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_45;
    }
    std::string::__init_copy_ctor_external(&v61, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    int v35 = 1;
LABEL_47:
    v62.n128_u32[0] = v9;
    v62.n128_u64[1] = 0;
    __int16 v63 = 0;
    unint64_t v36 = *(void *)(a5 + 8);
    if (v36 >= *(void *)(a5 + 16))
    {
      uint64_t v39 = std::vector<swift::reflection::FieldTypeInfo>::__push_back_slow_path<swift::reflection::FieldTypeInfo>((void **)a5, (uint64_t)&v61);
      int v40 = SHIBYTE(v61.__r_.__value_.__r.__words[2]);
      *(void *)(a5 + 8) = v39;
      if (v40 < 0)
      {
        operator delete(v61.__r_.__value_.__l.__data_);
        if (!v35) {
          goto LABEL_5;
        }
LABEL_52:
        operator delete(__p.__r_.__value_.__l.__data_);
        goto LABEL_5;
      }
      if (v35) {
        goto LABEL_52;
      }
    }
    else
    {
      long long v37 = *(_OWORD *)&v61.__r_.__value_.__l.__data_;
      *(void *)(v36 + 16) = *((void *)&v61.__r_.__value_.__l + 2);
      *(_OWORD *)unint64_t v36 = v37;
      memset(&v61, 0, sizeof(v61));
      __int16 v38 = v63;
      __n128 v6 = v62;
      *(__n128 *)(v36 + 24) = v62;
      *(_WORD *)(v36 + 40) = v38;
      *(void *)(a5 + 8) = v36 + 48;
      if (v35) {
        goto LABEL_52;
      }
    }
LABEL_5:
    ++v8;
    ++v9;
    if (v8 == v7)
    {
      uint64_t v8 = v64;
      goto LABEL_65;
    }
  }
  long long v58 = a1;
  __n128 v14 = swift::Demangle::__runtime::NodeFactory::pushCheckpoint(a1, (uint64_t)&v59);
  unsigned int v15 = (swift::Demangle::__runtime::Node *)(*(uint64_t (**)(__n128))(*(void *)*v8 + 24))(v14);
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)a1;
  swift::Demangle::__runtime::TypeDecoder<swift::reflection::TypeRefBuilder>::decodeMangledType((uint64_t *)&__dst, v15, 0, &v61);
  if (!LOWORD(v61.__r_.__value_.__r.__words[2]))
  {
    if (!v61.__r_.__value_.__r.__words[0]) {
      goto LABEL_58;
    }
    char v57 = 0;
    uint64_t v20 = swift::reflection::TypeRef::subst((uint64_t)v61.__r_.__value_.__l.__data_, (uint64_t)a1, (uint64_t *)v66, &v57);
    BOOL v21 = 0;
    if ((a3[4] & 0xFFFE) == 2) {
      BOOL v21 = *(unsigned char *)(*v8 + 8) != 0;
    }
    if (v12)
    {
      if (v13 > 0x7FFFFFFFFFFFFFF7) {
        goto LABEL_80;
      }
      if (v13 >= 0x17)
      {
        uint64_t v24 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v13 | 7) != 0x17) {
          uint64_t v24 = v13 | 7;
        }
        uint64_t v25 = v24 + 1;
        p_dst = (std::string *)operator new(v24 + 1);
        __dst.__r_.__value_.__l.__size_ = v13;
        __dst.__r_.__value_.__r.__words[2] = v25 | 0x8000000000000000;
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
      }
      else
      {
        *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v13;
        p_dst = &__dst;
        if (!v13)
        {
LABEL_22:
          p_dst->__r_.__value_.__s.__data_[v13] = 0;
          char v23 = v57;
          if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          {
            uint64_t v27 = (void *)__dst.__r_.__value_.__r.__words[0];
            std::string::__init_copy_ctor_external(&v61, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
            v62.n128_u32[0] = v9;
            v62.n128_u64[1] = v20;
            LOBYTE(v63) = v21;
            HIBYTE(v63) = v23;
            operator delete(v27);
            uint64_t v7 = v53;
          }
          else
          {
            uint64_t v7 = v53;
LABEL_24:
            std::string v61 = __dst;
            v62.n128_u32[0] = v9;
            v62.n128_u64[1] = v20;
            LOBYTE(v63) = v21;
            HIBYTE(v63) = v23;
          }
          unint64_t v28 = *(void *)(a5 + 8);
          if (v28 >= *(void *)(a5 + 16))
          {
            uint64_t v30 = std::vector<swift::reflection::FieldTypeInfo>::__push_back_slow_path<swift::reflection::FieldTypeInfo const&>(a5, (uint64_t)&v61);
          }
          else
          {
            if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
            {
              std::string::__init_copy_ctor_external(*(std::string **)(a5 + 8), v61.__r_.__value_.__l.__data_, v61.__r_.__value_.__l.__size_);
            }
            else
            {
              long long v29 = *(_OWORD *)&v61.__r_.__value_.__l.__data_;
              *(void *)(v28 + 16) = *((void *)&v61.__r_.__value_.__l + 2);
              *(_OWORD *)unint64_t v28 = v29;
            }
            __n128 v31 = v62;
            *(_WORD *)(v28 + 40) = v63;
            *(__n128 *)(v28 + 24) = v31;
            uint64_t v30 = (char *)(v28 + 48);
          }
          *(void *)(a5 + 8) = v30;
          if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v61.__r_.__value_.__l.__data_);
          }
          std::string v61 = v59;
          __n128 v6 = swift::Demangle::__runtime::NodeFactory::popCheckpoint((uint64_t)v58, (uint64_t)&v61, v18, v19);
          goto LABEL_5;
        }
      }
      memmove(p_dst, v12, v13);
      goto LABEL_22;
    }
    memset(&__dst, 0, sizeof(__dst));
    char v23 = v57;
    goto LABEL_24;
  }
  if (LOWORD(v61.__r_.__value_.__r.__words[2]) == 1) {
    ((void (*)(std::string::size_type, uint64_t, void))v61.__r_.__value_.__l.__size_)(v61.__r_.__value_.__r.__words[0], 3, 0);
  }
LABEL_58:
  std::string v61 = v59;
  __n128 v42 = swift::Demangle::__runtime::NodeFactory::popCheckpoint((uint64_t)v58, (uint64_t)&v61, v16, v17);
  int v43 = v64;
  if (v64)
  {
    unsigned int v44 = v65;
    unsigned int v45 = v64;
    if (v65 != v64)
    {
      do
      {
        uint64_t v47 = *--v44;
        uint64_t v46 = v47;
        void *v44 = 0;
        if (v47) {
          (*(void (**)(uint64_t, __n128))(*(void *)v46 + 8))(v46, v42);
        }
      }
      while (v44 != v43);
      unsigned int v45 = v64;
    }
    long long v65 = v43;
    operator delete(v45);
  }
  uint64_t v41 = 0;
  if (v68) {
LABEL_74:
  }
    __swift::__runtime::llvm::deallocate_buffer(v66[0], (void *)(16 * v67), (std::align_val_t)8uLL);
  return v41;
}

void swift::reflection::TypeRefBuilder::ReflectionTypeDescriptorFinder::getBuiltinTypeInfo(swift::reflection::TypeRefBuilder::ReflectionTypeDescriptorFinder *this@<X0>, const swift::reflection::TypeRef *a2@<X1>, void *a3@<X8>)
{
  memset(&v42, 0, sizeof(v42));
  int v5 = *((_DWORD *)a2 + 2);
  if (a2 && !v5 || a2 && v5 == 1 || a2 && v5 == 2)
  {
    std::string::operator=(&v42, (const std::string *)((char *)a2 + 16));
    unint64_t v6 = *((unsigned int *)this + 54);
    for (uint64_t i = *((void *)this + 1);
          0x6DB6DB6DB6DB6DB7 * ((*((void *)this + 2) - i) >> 5) > v6;
          uint64_t i = *((void *)this + 1))
    {
      uint64_t v8 = (void *)(i + 224 * v6);
      std::string::size_type v9 = v8[7];
      unint64_t v10 = v8[8];
      v34.__r_.__value_.__r.__words[0] = v8[6];
      v34.__r_.__value_.__l.__size_ = v9;
      *((unsigned char *)&__p.__r_.__value_.__s + 23) = 21;
      strcpy((char *)&__p, "BuiltinTypeDescriptor");
      swift::reflection::ReflectionSectionIteratorBase<swift::reflection::BuiltinTypeDescriptorIterator,swift::reflection::BuiltinTypeDescriptor>::ReflectionSectionIteratorBase(&v36, (unint64_t *)&v34, v10, (long long *)&__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      while (v39)
      {
        uint64_t v11 = v38;
        if (*(_DWORD *)(v38 + 12))
        {
          uint64_t v12 = *(int *)v38;
          if (v12 && v12 != -v38)
          {
            uint8x8_t v14 = (uint8x8_t)vcnt_s8((int8x8_t)*(unsigned __int16 *)(v38 + 8));
            v14.i16[0] = vaddlv_u8(v14);
            if (v14.i32[0] == 1)
            {
              uint64_t v15 = v37;
              uint64_t v16 = (void *)*((void *)this + 1);
              uint64_t v17 = (void *)*((void *)this + 2);
              if (v16 == v17)
              {
LABEL_40:
                char v23 = 0;
                unint64_t v18 = 0;
              }
              else
              {
                unint64_t v18 = v37 + v12;
                unint64_t v19 = v18 + 1;
                while (1)
                {
                  unint64_t v20 = v16[12];
                  if (v20 <= v18)
                  {
                    unint64_t v21 = v16[14] + v20;
                    if (v19 <= v21) {
                      break;
                    }
                  }
                  unint64_t v20 = v16[15];
                  if (v20 <= v18)
                  {
                    unint64_t v21 = v16[17] + v20;
                    if (v19 <= v21)
                    {
                      uint64_t v22 = v16 + 16;
                      if (v21 <= v18) {
                        goto LABEL_40;
                      }
                      goto LABEL_32;
                    }
                  }
                  v16 += 28;
                  if (v16 == v17) {
                    goto LABEL_40;
                  }
                }
                uint64_t v22 = v16 + 13;
                if (v21 <= v18) {
                  goto LABEL_40;
                }
LABEL_32:
                char v23 = (unsigned char *)(v18 - v20 + *v22);
                uint64_t v24 = (uint64_t)v23;
                unint64_t v25 = v18;
                while (1)
                {
                  unsigned int v27 = *(unsigned __int8 *)v24;
                  if (!*(unsigned char *)v24) {
                    break;
                  }
                  if (v27 <= 0x17)
                  {
                    v25 += 5;
                    uint64_t v26 = 5;
                  }
                  else if ((v27 & 0xF8) == 0x18)
                  {
                    uint64_t v26 = v24;
                    uint64_t v24 = (*(_DWORD *)(*((void *)this + 31) + 1944) + 1);
                    v25 += v24;
                  }
                  else
                  {
                    ++v25;
                    uint64_t v26 = 1;
                  }
                  v24 += v26;
                  if (v25 >= v21) {
                    goto LABEL_40;
                  }
                }
                if (*v23 == 36 && v23[1] == 115)
                {
                  v23 += 2;
                  v18 += 2;
                }
              }
              v33[0] = v18;
              v33[1] = (unint64_t)v23;
              swift::reflection::TypeRefBuilder::ReflectionTypeDescriptorFinder::normalizeReflectionName((uint64_t)this, v33, &v34);
              if (v35)
              {
                if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
                  std::string::__init_copy_ctor_external(&__p, v34.__r_.__value_.__l.__data_, v34.__r_.__value_.__l.__size_);
                }
                else {
                  std::string __p = v34;
                }
                uint64_t v31 = v15;
                uint64_t v32 = v11;
                std::__hash_table<std::__hash_value_type<std::string,swift::remote::RemoteRef<swift::reflection::BuiltinTypeDescriptor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,swift::remote::RemoteRef<swift::reflection::BuiltinTypeDescriptor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,swift::remote::RemoteRef<swift::reflection::BuiltinTypeDescriptor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,swift::remote::RemoteRef<swift::reflection::BuiltinTypeDescriptor>>>>::__emplace_unique_key_args<std::string,std::pair<std::string,swift::remote::RemoteRef<swift::reflection::BuiltinTypeDescriptor>>>((uint64_t)this + 136, (uint64_t)&__p, (uint64_t)&__p);
                if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(__p.__r_.__value_.__l.__data_);
                }
                if (v35)
                {
                  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v34.__r_.__value_.__l.__data_);
                  }
                }
              }
            }
          }
        }
        swift::reflection::ReflectionSectionIteratorBase<swift::reflection::BuiltinTypeDescriptorIterator,swift::reflection::BuiltinTypeDescriptor>::operator++((uint64_t)&v36);
      }
      if (v41 < 0) {
        operator delete(v40);
      }
      unint64_t v6 = (*((_DWORD *)this + 54) + 1);
      *((_DWORD *)this + 54) = v6;
    }
    unint64_t v28 = std::__hash_table<std::__hash_value_type<std::string,swift::remote::RemoteRef<swift::reflection::TargetFieldDescriptor<swift::InProcess>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,swift::remote::RemoteRef<swift::reflection::TargetFieldDescriptor<swift::InProcess>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,swift::remote::RemoteRef<swift::reflection::TargetFieldDescriptor<swift::InProcess>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,swift::remote::RemoteRef<swift::reflection::TargetFieldDescriptor<swift::InProcess>>>>>::find<std::string>((void *)this + 17, (uint64_t)&v42);
    if (v28)
    {
      uint64_t v29 = v28[6];
      *a3 = v28[5];
      a3[1] = v29;
      if ((SHIBYTE(v42.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        return;
      }
      goto LABEL_55;
    }
  }
  *a3 = 0;
  a3[1] = 0;
  if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0) {
LABEL_55:
  }
    operator delete(v42.__r_.__value_.__l.__data_);
}

uint64_t swift::reflection::ReflectionSectionIteratorBase<swift::reflection::BuiltinTypeDescriptorIterator,swift::reflection::BuiltinTypeDescriptor>::operator++(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16) + 20;
  *(void *)(a1 + 8) += 20;
  *(void *)(a1 + 16) = v2;
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = v3 - 20;
  if ((unint64_t)(v3 - 21) <= 0x12)
  {
    int v4 = *(_DWORD *)a1 - (v3 - 20);
    int v5 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&std::cerr, (uint64_t)"!!! Reflection section too small to contain next record\n", 56);
    std::ios_base::getloc((const std::ios_base *)((char *)v5 + *(void *)(*v5 - 24)));
    unint64_t v6 = std::locale::use_facet(&v30, &std::ctype<char>::id);
    ((void (*)(const std::locale::facet *, uint64_t))v6->__vftable[2].~facet_0)(v6, 10);
    std::locale::~locale(&v30);
    std::ostream::put();
    std::ostream::flush();
    uint64_t v7 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&std::cerr, (uint64_t)"Section Type: ", 14);
    int v8 = *(char *)(a1 + 55);
    if (v8 >= 0) {
      uint64_t v9 = a1 + 32;
    }
    else {
      uint64_t v9 = *(void *)(a1 + 32);
    }
    if (v8 >= 0) {
      uint64_t v10 = *(unsigned __int8 *)(a1 + 55);
    }
    else {
      uint64_t v10 = *(void *)(a1 + 40);
    }
    uint64_t v11 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v7, v9, v10);
    std::ios_base::getloc((const std::ios_base *)((char *)v11 + *(void *)(*v11 - 24)));
    uint64_t v12 = std::locale::use_facet(&v30, &std::ctype<char>::id);
    ((void (*)(const std::locale::facet *, uint64_t))v12->__vftable[2].~facet_0)(v12, 10);
    std::locale::~locale(&v30);
    std::ostream::put();
    std::ostream::flush();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&std::cerr, (uint64_t)"Remaining section size: ", 24);
    std::string::size_type v13 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v13, (uint64_t)", total section size: ", 22);
    uint8x8_t v14 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v14, (uint64_t)", offset in section: ", 21);
    uint64_t v15 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v15, (uint64_t)", size of next record: ", 23);
    uint64_t v16 = (void *)std::ostream::operator<<();
    std::ios_base::getloc((const std::ios_base *)((char *)v16 + *(void *)(*v16 - 24)));
    uint64_t v17 = std::locale::use_facet(&v30, &std::ctype<char>::id);
    ((void (*)(const std::locale::facet *, uint64_t))v17->__vftable[2].~facet_0)(v17, 10);
    std::locale::~locale(&v30);
    std::ostream::put();
    std::ostream::flush();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&std::cerr, (uint64_t)"Last bytes of previous record: ", 31);
    if (-v4 < -8 || v4 == 8) {
      int v18 = -8;
    }
    else {
      int v18 = -v4;
    }
    if (v18 < 0)
    {
      uint64_t v19 = v18;
      do
      {
        unint64_t v20 = &std::cerr + 1;
        unint64_t v21 = std::cerr.__vftable;
        *(_DWORD *)((char *)&v20->__vftable + (unint64_t)std::cerr.__vftable[-2].~basic_ostream_0) = *(_DWORD *)((unsigned char *)&v20->__vftable + (unint64_t)std::cerr.__vftable[-2].~basic_ostream_0) & 0xFFFFFFB5 | 8;
        *(std::ostream_vtbl **)((char *)&v20[2].__vftable + (unint64_t)v21[-2].~basic_ostream_0) = (std::ostream_vtbl *)(&dword_0 + 2);
        uint64_t v22 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v22, (uint64_t)" ", 1);
        ++v19;
      }
      while (v19);
    }
    std::ios_base::getloc((const std::ios_base *)((char *)&std::cerr
                                                + (unint64_t)std::cerr.__vftable[-2].~basic_ostream_0));
    char v23 = std::locale::use_facet(&v30, &std::ctype<char>::id);
    ((void (*)(const std::locale::facet *, uint64_t))v23->__vftable[2].~facet_0)(v23, 10);
    std::locale::~locale(&v30);
    std::ostream::put();
    std::ostream::flush();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&std::cerr, (uint64_t)"Next bytes in section: ", 23);
    if (*(void *)(a1 + 24))
    {
      unint64_t v24 = 0;
      do
      {
        unint64_t v25 = &std::cerr + 1;
        uint64_t v26 = std::cerr.__vftable;
        *(_DWORD *)((char *)&v25->__vftable + (unint64_t)std::cerr.__vftable[-2].~basic_ostream_0) = *(_DWORD *)((unsigned char *)&v25->__vftable + (unint64_t)std::cerr.__vftable[-2].~basic_ostream_0) & 0xFFFFFFB5 | 8;
        *(std::ostream_vtbl **)((char *)&v25[2].__vftable + (unint64_t)v26[-2].~basic_ostream_0) = (std::ostream_vtbl *)(&dword_0 + 2);
        unsigned int v27 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v27, (uint64_t)" ", 1);
        if (v24 > 0xE) {
          break;
        }
        ++v24;
      }
      while (*(void *)(a1 + 24) > v24);
    }
    std::ios_base::getloc((const std::ios_base *)((char *)&std::cerr
                                                + (unint64_t)std::cerr.__vftable[-2].~basic_ostream_0));
    unint64_t v28 = std::locale::use_facet(&v30, &std::ctype<char>::id);
    ((void (*)(const std::locale::facet *, uint64_t))v28->__vftable[2].~facet_0)(v28, 10);
    std::locale::~locale(&v30);
    std::ostream::put();
    std::ostream::flush();
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t swift::reflection::TypeRefBuilder::ReflectionTypeDescriptorFinder::getBuiltinTypeDescriptor@<X0>(swift::reflection::TypeRefBuilder::ReflectionTypeDescriptorFinder *this@<X0>, const swift::reflection::TypeRef *a2@<X1>, void *a3@<X8>)
{
  swift::reflection::TypeRefBuilder::ReflectionTypeDescriptorFinder::getBuiltinTypeInfo(this, a2, v5);
  if (v5[1]) {
    operator new();
  }
  uint64_t result = 0;
  *a3 = 0;
  return result;
}

void swift::reflection::TypeRefBuilder::getBuiltinTypeDescriptor(swift::reflection::TypeRefBuilder *this@<X0>, const swift::reflection::TypeRef *a2@<X1>, void *a3@<X8>)
{
  int v5 = (char *)*((void *)this + 209);
  unint64_t v6 = (char *)this + 1680;
  if (v5)
  {
    uint64_t v10 = v6;
    unsigned int v7 = 2;
    unint64_t v6 = v5;
  }
  else
  {
    unsigned int v7 = 1;
  }
  uint64_t v9 = v6;
  (*(void (**)(char *, const swift::reflection::TypeRef *))(*(void *)v6 + 16))(v6, a2);
  BOOL v8 = *a3 == 0;
  if (!*a3)
  {
    *a3 = 0;
    if (&v10 != &(&v9)[v7])
    {
      (*(void (**)(char *, const swift::reflection::TypeRef *))(*(void *)v10 + 16))(v10, a2);
      BOOL v8 = *a3 == 0;
      if (!*a3) {
        *a3 = 0;
      }
    }
  }
  if (v8) {
    *a3 = 0;
  }
}

void swift::reflection::TypeRefBuilder::ReflectionTypeDescriptorFinder::getMultiPayloadEnumInfo(swift::reflection::TypeRefBuilder::ReflectionTypeDescriptorFinder *this@<X0>, const swift::reflection::TypeRef *a2@<X1>, void *a3@<X8>)
{
  memset(&v42, 0, sizeof(v42));
  int v5 = *((_DWORD *)a2 + 2);
  if (a2 && !v5 || a2 && v5 == 1 || a2 && v5 == 2)
  {
    std::string::operator=(&v42, (const std::string *)((char *)a2 + 16));
    uint64_t v6 = *((void *)this + 1);
    for (uint64_t i = *((void *)this + 2); v6 != i; v6 += 224)
    {
      swift::reflection::ReflectionInfo::ReflectionInfo((uint64_t)v36, v6);
      unint64_t v43 = v37;
      unsigned int v44 = v38;
      *((unsigned char *)&v45.__r_.__value_.__s + 23) = 16;
      strcpy((char *)&v45, "MultiPayloadEnum");
      swift::reflection::ReflectionSectionIteratorBase<swift::reflection::MultiPayloadEnumDescriptorIterator,swift::reflection::MultiPayloadEnumDescriptor>::ReflectionSectionIteratorBase(&v30, &v43, v39, (long long *)&v45);
      if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v45.__r_.__value_.__l.__data_);
      }
      while (v33)
      {
        uint64_t v8 = v31;
        uint64_t v9 = v32;
        *a3 = v31;
        a3[1] = v9;
        uint64_t v10 = *v9;
        unint64_t v11 = v8 + v10;
        if (!v10) {
          unint64_t v11 = 0;
        }
        uint64_t v12 = (void *)*((void *)this + 1);
        std::string::size_type v13 = (void *)*((void *)this + 2);
        if (v12 == v13)
        {
LABEL_33:
          int v18 = 0;
          unint64_t v11 = 0;
        }
        else
        {
          unint64_t v14 = v11 + 1;
          while (1)
          {
            unint64_t v15 = v12[12];
            if (v15 <= v11)
            {
              unint64_t v16 = v12[14] + v15;
              if (v14 <= v16) {
                break;
              }
            }
            unint64_t v15 = v12[15];
            if (v15 <= v11)
            {
              unint64_t v16 = v12[17] + v15;
              if (v14 <= v16)
              {
                uint64_t v17 = v12 + 16;
                if (v16 <= v11) {
                  goto LABEL_33;
                }
                goto LABEL_25;
              }
            }
            v12 += 28;
            if (v12 == v13) {
              goto LABEL_33;
            }
          }
          uint64_t v17 = v12 + 13;
          if (v16 <= v11) {
            goto LABEL_33;
          }
LABEL_25:
          int v18 = (unsigned char *)(v11 - v15 + *v17);
          uint64_t v19 = (uint64_t)v18;
          unint64_t v20 = v11;
          while (1)
          {
            unsigned int v22 = *(unsigned __int8 *)v19;
            if (!*(unsigned char *)v19) {
              break;
            }
            if (v22 <= 0x17)
            {
              v20 += 5;
              uint64_t v21 = 5;
            }
            else if ((v22 & 0xF8) == 0x18)
            {
              uint64_t v21 = v19;
              uint64_t v19 = (*(_DWORD *)(*((void *)this + 31) + 1944) + 1);
              v20 += v19;
            }
            else
            {
              ++v20;
              uint64_t v21 = 1;
            }
            v19 += v21;
            if (v20 >= v16) {
              goto LABEL_33;
            }
          }
          if (*v18 == 36 && v18[1] == 115)
          {
            v18 += 2;
            v11 += 2;
          }
        }
        if ((v42.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          char v23 = &v42;
        }
        else {
          char v23 = (std::string *)v42.__r_.__value_.__r.__words[0];
        }
        if ((v42.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          size_t size = HIBYTE(v42.__r_.__value_.__r.__words[2]);
        }
        else {
          size_t size = v42.__r_.__value_.__l.__size_;
        }
        unint64_t v43 = v11;
        unsigned int v44 = v18;
        swift::reflection::TypeRefBuilder::ReflectionTypeDescriptorFinder::normalizeReflectionName((uint64_t)this, &v43, &v45);
        if (v46)
        {
          int v25 = SHIBYTE(v45.__r_.__value_.__r.__words[2]);
          std::string::size_type v26 = v45.__r_.__value_.__l.__size_;
          unsigned int v27 = (void *)v45.__r_.__value_.__r.__words[0];
          if ((v45.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            unint64_t v28 = &v45;
          }
          else {
            unint64_t v28 = (std::string *)v45.__r_.__value_.__r.__words[0];
          }
          if ((v45.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v26 = HIBYTE(v45.__r_.__value_.__r.__words[2]);
          }
          if (size == v26)
          {
            if (!size)
            {
              if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
              {
                operator delete(v45.__r_.__value_.__l.__data_);
                if (v35 < 0) {
LABEL_63:
                }
                  operator delete(__p);
              }
              else
              {
LABEL_62:
                if (v35 < 0) {
                  goto LABEL_63;
                }
              }
              if (v40 != v41) {
                free(v40);
              }
              goto LABEL_66;
            }
            int v29 = memcmp(v23, v28, size);
            if (v25 < 0) {
              operator delete(v27);
            }
            if (!v29) {
              goto LABEL_62;
            }
          }
          else if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(v45.__r_.__value_.__l.__data_);
          }
        }
        swift::reflection::ReflectionSectionIteratorBase<swift::reflection::MultiPayloadEnumDescriptorIterator,swift::reflection::MultiPayloadEnumDescriptor>::operator++((uint64_t)&v30);
      }
      if (v35 < 0) {
        operator delete(__p);
      }
      if (v40 != v41) {
        free(v40);
      }
    }
  }
  *a3 = 0;
  a3[1] = 0;
LABEL_66:
  if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v42.__r_.__value_.__l.__data_);
  }
}

uint64_t swift::reflection::ReflectionSectionIteratorBase<swift::reflection::MultiPayloadEnumDescriptorIterator,swift::reflection::MultiPayloadEnumDescriptor>::operator++(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = (((unint64_t)*(unsigned int *)(v2 + 4) >> 14) & 0x3FFFC) + 4;
  uint64_t v4 = v3 + v2;
  *(void *)(a1 + 8) += v3;
  *(void *)(a1 + 16) = v3 + v2;
  unint64_t v5 = *(void *)(a1 + 24) - v3;
  *(void *)(a1 + 24) = v5;
  if (v5 && v5 < (((unint64_t)*(unsigned int *)(v4 + 4) >> 14) & 0x3FFFC) + 4)
  {
    int v6 = *(_DWORD *)a1 - v5;
    unsigned int v7 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&std::cerr, (uint64_t)"!!! Reflection section too small to contain next record\n", 56);
    std::ios_base::getloc((const std::ios_base *)((char *)v7 + *(void *)(*v7 - 24)));
    uint64_t v8 = std::locale::use_facet(&v32, &std::ctype<char>::id);
    ((void (*)(const std::locale::facet *, uint64_t))v8->__vftable[2].~facet_0)(v8, 10);
    std::locale::~locale(&v32);
    std::ostream::put();
    std::ostream::flush();
    uint64_t v9 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&std::cerr, (uint64_t)"Section Type: ", 14);
    int v10 = *(char *)(a1 + 55);
    if (v10 >= 0) {
      uint64_t v11 = a1 + 32;
    }
    else {
      uint64_t v11 = *(void *)(a1 + 32);
    }
    if (v10 >= 0) {
      uint64_t v12 = *(unsigned __int8 *)(a1 + 55);
    }
    else {
      uint64_t v12 = *(void *)(a1 + 40);
    }
    std::string::size_type v13 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v9, v11, v12);
    std::ios_base::getloc((const std::ios_base *)((char *)v13 + *(void *)(*v13 - 24)));
    unint64_t v14 = std::locale::use_facet(&v32, &std::ctype<char>::id);
    ((void (*)(const std::locale::facet *, uint64_t))v14->__vftable[2].~facet_0)(v14, 10);
    std::locale::~locale(&v32);
    std::ostream::put();
    std::ostream::flush();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&std::cerr, (uint64_t)"Remaining section size: ", 24);
    unint64_t v15 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v15, (uint64_t)", total section size: ", 22);
    unint64_t v16 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v16, (uint64_t)", offset in section: ", 21);
    uint64_t v17 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v17, (uint64_t)", size of next record: ", 23);
    int v18 = (void *)std::ostream::operator<<();
    std::ios_base::getloc((const std::ios_base *)((char *)v18 + *(void *)(*v18 - 24)));
    uint64_t v19 = std::locale::use_facet(&v32, &std::ctype<char>::id);
    ((void (*)(const std::locale::facet *, uint64_t))v19->__vftable[2].~facet_0)(v19, 10);
    std::locale::~locale(&v32);
    std::ostream::put();
    std::ostream::flush();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&std::cerr, (uint64_t)"Last bytes of previous record: ", 31);
    if (-v6 < -8 || v6 == 8) {
      int v20 = -8;
    }
    else {
      int v20 = -v6;
    }
    if (v20 < 0)
    {
      uint64_t v21 = v20;
      do
      {
        unsigned int v22 = &std::cerr + 1;
        char v23 = std::cerr.__vftable;
        *(_DWORD *)((char *)&v22->__vftable + (unint64_t)std::cerr.__vftable[-2].~basic_ostream_0) = *(_DWORD *)((unsigned char *)&v22->__vftable + (unint64_t)std::cerr.__vftable[-2].~basic_ostream_0) & 0xFFFFFFB5 | 8;
        *(std::ostream_vtbl **)((char *)&v22[2].__vftable + (unint64_t)v23[-2].~basic_ostream_0) = (std::ostream_vtbl *)(&dword_0 + 2);
        unint64_t v24 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v24, (uint64_t)" ", 1);
        ++v21;
      }
      while (v21);
    }
    std::ios_base::getloc((const std::ios_base *)((char *)&std::cerr
                                                + (unint64_t)std::cerr.__vftable[-2].~basic_ostream_0));
    int v25 = std::locale::use_facet(&v32, &std::ctype<char>::id);
    ((void (*)(const std::locale::facet *, uint64_t))v25->__vftable[2].~facet_0)(v25, 10);
    std::locale::~locale(&v32);
    std::ostream::put();
    std::ostream::flush();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&std::cerr, (uint64_t)"Next bytes in section: ", 23);
    if (*(void *)(a1 + 24))
    {
      unint64_t v26 = 0;
      do
      {
        unsigned int v27 = &std::cerr + 1;
        unint64_t v28 = std::cerr.__vftable;
        *(_DWORD *)((char *)&v27->__vftable + (unint64_t)std::cerr.__vftable[-2].~basic_ostream_0) = *(_DWORD *)((unsigned char *)&v27->__vftable + (unint64_t)std::cerr.__vftable[-2].~basic_ostream_0) & 0xFFFFFFB5 | 8;
        *(std::ostream_vtbl **)((char *)&v27[2].__vftable + (unint64_t)v28[-2].~basic_ostream_0) = (std::ostream_vtbl *)(&dword_0 + 2);
        int v29 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v29, (uint64_t)" ", 1);
        if (v26 > 0xE) {
          break;
        }
        ++v26;
      }
      while (*(void *)(a1 + 24) > v26);
    }
    std::ios_base::getloc((const std::ios_base *)((char *)&std::cerr
                                                + (unint64_t)std::cerr.__vftable[-2].~basic_ostream_0));
    unint64_t v30 = std::locale::use_facet(&v32, &std::ctype<char>::id);
    ((void (*)(const std::locale::facet *, uint64_t))v30->__vftable[2].~facet_0)(v30, 10);
    std::locale::~locale(&v32);
    std::ostream::put();
    std::ostream::flush();
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t swift::reflection::TypeRefBuilder::ReflectionTypeDescriptorFinder::getMultiPayloadEnumDescriptor@<X0>(swift::reflection::TypeRefBuilder::ReflectionTypeDescriptorFinder *this@<X0>, const swift::reflection::TypeRef *a2@<X1>, void *a3@<X8>)
{
  swift::reflection::TypeRefBuilder::ReflectionTypeDescriptorFinder::getMultiPayloadEnumInfo(this, a2, v5);
  if (v5[1]) {
    operator new();
  }
  uint64_t result = 0;
  *a3 = 0;
  return result;
}

void swift::reflection::TypeRefBuilder::getMultiPayloadEnumDescriptor(swift::reflection::TypeRefBuilder *this@<X0>, const swift::reflection::TypeRef *a2@<X1>, void *a3@<X8>)
{
  unint64_t v5 = (char *)*((void *)this + 209);
  int v6 = (char *)this + 1680;
  if (v5)
  {
    int v10 = v6;
    unsigned int v7 = 2;
    int v6 = v5;
  }
  else
  {
    unsigned int v7 = 1;
  }
  uint64_t v9 = v6;
  (*(void (**)(char *, const swift::reflection::TypeRef *))(*(void *)v6 + 32))(v6, a2);
  BOOL v8 = *a3 == 0;
  if (!*a3)
  {
    *a3 = 0;
    if (&v10 != &(&v9)[v7])
    {
      (*(void (**)(char *, const swift::reflection::TypeRef *))(*(void *)v10 + 32))(v10, a2);
      BOOL v8 = *a3 == 0;
      if (!*a3) {
        *a3 = 0;
      }
    }
  }
  if (v8) {
    *a3 = 0;
  }
}

void swift::reflection::TypeRefBuilder::ReflectionTypeDescriptorFinder::getCaptureDescriptor(swift::reflection::TypeRefBuilder::ReflectionTypeDescriptorFinder *this@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v4 = *((void *)this + 1);
  uint64_t v5 = *((void *)this + 2);
  while (v4 != v5)
  {
    swift::reflection::ReflectionInfo::ReflectionInfo((uint64_t)v16, v4);
    v23[0] = v17;
    v23[1] = v18;
    BYTE7(v22[1]) = 17;
    strcpy((char *)v22, "CaptureDescriptor");
    swift::reflection::ReflectionSectionIteratorBase<swift::reflection::CaptureDescriptorIterator,swift::reflection::CaptureDescriptor>::ReflectionSectionIteratorBase(&v10, v23, v19, v22);
    if (SBYTE7(v22[1]) < 0)
    {
      operator delete(*(void **)&v22[0]);
      if (!v13)
      {
LABEL_13:
        BOOL v9 = 1;
        if ((v15 & 0x80000000) == 0) {
          goto LABEL_7;
        }
LABEL_14:
        operator delete(__p);
        goto LABEL_7;
      }
    }
    else if (!v13)
    {
      goto LABEL_13;
    }
    do
    {
      uint64_t v7 = v11;
      uint64_t v8 = v12;
      *a3 = v11;
      a3[1] = v8;
      BOOL v9 = v7 != a2;
      if (v7 == a2) {
        break;
      }
      swift::reflection::ReflectionSectionIteratorBase<swift::reflection::CaptureDescriptorIterator,swift::reflection::CaptureDescriptor>::operator++((uint64_t)&v10);
    }
    while (v13);
    if (v15 < 0) {
      goto LABEL_14;
    }
LABEL_7:
    if (v20 != &v21) {
      free(v20);
    }
    if (!v9) {
      return;
    }
    v4 += 224;
  }
  *a3 = 0;
  a3[1] = 0;
}

uint64_t swift::reflection::ReflectionSectionIteratorBase<swift::reflection::CaptureDescriptorIterator,swift::reflection::CaptureDescriptor>::operator++(uint64_t a1)
{
  uint64_t v2 = *(unsigned int **)(a1 + 16);
  uint64_t v3 = 4 * *v2 + 8 * v2[1] + 12;
  uint64_t v4 = (unsigned int *)((char *)v2 + v3);
  *(void *)(a1 + 8) += v3;
  *(void *)(a1 + 16) = (char *)v2 + v3;
  unint64_t v5 = *(void *)(a1 + 24) - v3;
  *(void *)(a1 + 24) = v5;
  if (v5 && 4 * *v4 + 8 * (unint64_t)v4[1] + 12 > v5)
  {
    int v6 = *(_DWORD *)a1 - v5;
    uint64_t v7 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&std::cerr, (uint64_t)"!!! Reflection section too small to contain next record\n", 56);
    std::ios_base::getloc((const std::ios_base *)((char *)v7 + *(void *)(*v7 - 24)));
    uint64_t v8 = std::locale::use_facet(&v32, &std::ctype<char>::id);
    ((void (*)(const std::locale::facet *, uint64_t))v8->__vftable[2].~facet_0)(v8, 10);
    std::locale::~locale(&v32);
    std::ostream::put();
    std::ostream::flush();
    BOOL v9 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&std::cerr, (uint64_t)"Section Type: ", 14);
    int v10 = *(char *)(a1 + 55);
    if (v10 >= 0) {
      uint64_t v11 = a1 + 32;
    }
    else {
      uint64_t v11 = *(void *)(a1 + 32);
    }
    if (v10 >= 0) {
      uint64_t v12 = *(unsigned __int8 *)(a1 + 55);
    }
    else {
      uint64_t v12 = *(void *)(a1 + 40);
    }
    uint64_t v13 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v9, v11, v12);
    std::ios_base::getloc((const std::ios_base *)((char *)v13 + *(void *)(*v13 - 24)));
    unint64_t v14 = std::locale::use_facet(&v32, &std::ctype<char>::id);
    ((void (*)(const std::locale::facet *, uint64_t))v14->__vftable[2].~facet_0)(v14, 10);
    std::locale::~locale(&v32);
    std::ostream::put();
    std::ostream::flush();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&std::cerr, (uint64_t)"Remaining section size: ", 24);
    char v15 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v15, (uint64_t)", total section size: ", 22);
    unint64_t v16 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v16, (uint64_t)", offset in section: ", 21);
    unint64_t v17 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v17, (uint64_t)", size of next record: ", 23);
    unint64_t v18 = (void *)std::ostream::operator<<();
    std::ios_base::getloc((const std::ios_base *)((char *)v18 + *(void *)(*v18 - 24)));
    unint64_t v19 = std::locale::use_facet(&v32, &std::ctype<char>::id);
    ((void (*)(const std::locale::facet *, uint64_t))v19->__vftable[2].~facet_0)(v19, 10);
    std::locale::~locale(&v32);
    std::ostream::put();
    std::ostream::flush();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&std::cerr, (uint64_t)"Last bytes of previous record: ", 31);
    if (-v6 < -8 || v6 == 8) {
      int v20 = -8;
    }
    else {
      int v20 = -v6;
    }
    if (v20 < 0)
    {
      uint64_t v21 = v20;
      do
      {
        unsigned int v22 = &std::cerr + 1;
        char v23 = std::cerr.__vftable;
        *(_DWORD *)((char *)&v22->__vftable + (unint64_t)std::cerr.__vftable[-2].~basic_ostream_0) = *(_DWORD *)((unsigned char *)&v22->__vftable + (unint64_t)std::cerr.__vftable[-2].~basic_ostream_0) & 0xFFFFFFB5 | 8;
        *(std::ostream_vtbl **)((char *)&v22[2].__vftable + (unint64_t)v23[-2].~basic_ostream_0) = (std::ostream_vtbl *)(&dword_0 + 2);
        unint64_t v24 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v24, (uint64_t)" ", 1);
        ++v21;
      }
      while (v21);
    }
    std::ios_base::getloc((const std::ios_base *)((char *)&std::cerr
                                                + (unint64_t)std::cerr.__vftable[-2].~basic_ostream_0));
    int v25 = std::locale::use_facet(&v32, &std::ctype<char>::id);
    ((void (*)(const std::locale::facet *, uint64_t))v25->__vftable[2].~facet_0)(v25, 10);
    std::locale::~locale(&v32);
    std::ostream::put();
    std::ostream::flush();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&std::cerr, (uint64_t)"Next bytes in section: ", 23);
    if (*(void *)(a1 + 24))
    {
      unint64_t v26 = 0;
      do
      {
        unsigned int v27 = &std::cerr + 1;
        unint64_t v28 = std::cerr.__vftable;
        *(_DWORD *)((char *)&v27->__vftable + (unint64_t)std::cerr.__vftable[-2].~basic_ostream_0) = *(_DWORD *)((unsigned char *)&v27->__vftable + (unint64_t)std::cerr.__vftable[-2].~basic_ostream_0) & 0xFFFFFFB5 | 8;
        *(std::ostream_vtbl **)((char *)&v27[2].__vftable + (unint64_t)v28[-2].~basic_ostream_0) = (std::ostream_vtbl *)(&dword_0 + 2);
        int v29 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v29, (uint64_t)" ", 1);
        if (v26 > 0xE) {
          break;
        }
        ++v26;
      }
      while (*(void *)(a1 + 24) > v26);
    }
    std::ios_base::getloc((const std::ios_base *)((char *)&std::cerr
                                                + (unint64_t)std::cerr.__vftable[-2].~basic_ostream_0));
    unint64_t v30 = std::locale::use_facet(&v32, &std::ctype<char>::id);
    ((void (*)(const std::locale::facet *, uint64_t))v30->__vftable[2].~facet_0)(v30, 10);
    std::locale::~locale(&v32);
    std::ostream::put();
    std::ostream::flush();
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void swift::reflection::TypeRefBuilder::ReflectionTypeDescriptorFinder::getClosureContextInfo(void *a1@<X0>, const char *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = a3;
  *(_DWORD *)(a3 + 48) = 0;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)a3 = 0u;
  unint64_t v5 = (unsigned int *)*((void *)a2 + 1);
  uint64_t v6 = (uint64_t)(v5 + 3);
  if (*v5)
  {
    uint64_t v7 = 0;
    uint64_t v8 = (int *)(v6 + 4 * *v5);
    while (1)
    {
      uint64_t v10 = 0;
      uint64_t v11 = *(int *)v6;
      if (v11 && v11 != -v6) {
        break;
      }
LABEL_38:
      unint64_t v34 = *(void *)(v4 + 16);
      if ((unint64_t)v7 >= v34)
      {
        char v35 = *(char **)v4;
        uint64_t v36 = ((char *)v7 - v35) >> 3;
        unint64_t v37 = v36 + 1;
        if ((unint64_t)(v36 + 1) >> 61) {
LABEL_176:
        }
          abort();
        uint64_t v38 = a1;
        unint64_t v39 = v8;
        uint64_t v40 = v34 - (void)v35;
        if (v40 >> 2 > v37) {
          unint64_t v37 = v40 >> 2;
        }
        if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v41 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v41 = v37;
        }
        if (v41)
        {
          if (v41 >> 61) {
            goto LABEL_178;
          }
          std::string v42 = (char *)operator new(8 * v41);
        }
        else
        {
          std::string v42 = 0;
        }
        unint64_t v43 = &v42[8 * v36];
        *(void *)unint64_t v43 = v10;
        BOOL v9 = v43 + 8;
        if (v7 == (void *)v35)
        {
          uint64_t v4 = a3;
        }
        else
        {
          unint64_t v44 = (char *)v7 - v35 - 8;
          if (v44 < 0x168)
          {
            std::string v45 = (char *)v7;
            goto LABEL_65;
          }
          unint64_t v46 = ((char *)(v7 - 1) - v35) & 0xFFFFFFFFFFFFFFF8;
          if (&v42[(char *)v7 - v35 - 8 - v46] > &v42[(char *)v7 - v35 - 8])
          {
            std::string v45 = (char *)v7;
            goto LABEL_65;
          }
          if ((void *)((char *)v7 - v46 - 8) > v7 - 1)
          {
            std::string v45 = (char *)v7;
            goto LABEL_65;
          }
          if ((unint64_t)(v35 - v42) < 0x20)
          {
            std::string v45 = (char *)v7;
            goto LABEL_65;
          }
          uint64_t v47 = (v44 >> 3) + 1;
          uint64_t v48 = 8 * (v47 & 0x3FFFFFFFFFFFFFFCLL);
          std::string v45 = (char *)&v7[v48 / 0xFFFFFFFFFFFFFFF8];
          v43 -= v48;
          uint64_t v49 = &v42[8 * v36 - 16];
          uint64_t v50 = (long long *)(v7 - 2);
          uint64_t v51 = v47 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v52 = *v50;
            *((_OWORD *)v49 - 1) = *(v50 - 1);
            *(_OWORD *)uint64_t v49 = v52;
            v49 -= 32;
            v50 -= 2;
            v51 -= 4;
          }
          while (v51);
          if (v47 != (v47 & 0x3FFFFFFFFFFFFFFCLL))
          {
            do
            {
LABEL_65:
              uint64_t v53 = *((void *)v45 - 1);
              v45 -= 8;
              *((void *)v43 - 1) = v53;
              v43 -= 8;
            }
            while (v45 != v35);
          }
          uint64_t v4 = a3;
          uint64_t v7 = *(void **)a3;
        }
        *(void *)uint64_t v4 = v43;
        *(void *)(v4 + 8) = v9;
        *(void *)(v4 + 16) = &v42[8 * v41];
        if (v7) {
          operator delete(v7);
        }
        uint64_t v8 = v39;
        a1 = v38;
        goto LABEL_4;
      }
      void *v7 = v10;
      BOOL v9 = v7 + 1;
LABEL_4:
      *(void *)(v4 + 8) = v9;
      v6 += 4;
      uint64_t v7 = v9;
      if ((int *)v6 == v8)
      {
        unint64_t v5 = (unsigned int *)*((void *)a2 + 1);
        uint64_t v54 = *v5;
        uint64_t v55 = v5[1];
        if (!v55) {
          goto LABEL_175;
        }
LABEL_73:
        uint64_t v56 = (uint64_t)&v5[v54 + 3];
        uint64_t v115 = v56 + 8 * v55;
        while (2)
        {
          uint64_t v58 = 0;
          uint64_t v59 = v56 - *((void *)a2 + 1) + *(void *)a2;
          uint64_t v60 = *(int *)v56;
          if (v60) {
            BOOL v61 = v60 == -v56;
          }
          else {
            BOOL v61 = 1;
          }
          if (!v61)
          {
            std::string __dst = (swift::Demangle::__runtime::NodeFactory *)a1[31];
            __n128 v62 = swift::Demangle::__runtime::NodeFactory::pushCheckpoint(__dst, (uint64_t)&v119);
            uint64_t v63 = *(int *)v56;
            if (v63) {
              unint64_t v64 = v59 + v63;
            }
            else {
              unint64_t v64 = 0;
            }
            long long v65 = (void *)a1[1];
            long long v66 = (void *)a1[2];
            if (v65 == v66)
            {
LABEL_101:
              long long v71 = 0;
              unint64_t v64 = 0;
            }
            else
            {
              unint64_t v67 = v64 + 1;
              while (1)
              {
                unint64_t v68 = v65[12];
                if (v68 <= v64)
                {
                  unint64_t v69 = v65[14] + v68;
                  if (v67 <= v69) {
                    break;
                  }
                }
                unint64_t v68 = v65[15];
                if (v68 <= v64)
                {
                  unint64_t v69 = v65[17] + v68;
                  if (v67 <= v69)
                  {
                    long long v70 = v65 + 16;
                    if (v69 <= v64) {
                      goto LABEL_101;
                    }
                    goto LABEL_93;
                  }
                }
                v65 += 28;
                if (v65 == v66) {
                  goto LABEL_101;
                }
              }
              long long v70 = v65 + 13;
              if (v69 <= v64) {
                goto LABEL_101;
              }
LABEL_93:
              long long v71 = (unsigned char *)(v64 - v68 + *v70);
              uint64_t v72 = (uint64_t)v71;
              unint64_t v73 = v64;
              while (1)
              {
                unsigned int v75 = *(unsigned __int8 *)v72;
                if (!*(unsigned char *)v72) {
                  break;
                }
                if (v75 <= 0x17)
                {
                  v73 += 5;
                  uint64_t v74 = 5;
                }
                else if ((v75 & 0xF8) == 0x18)
                {
                  uint64_t v74 = v72;
                  uint64_t v72 = (*(_DWORD *)(a1[31] + 1944) + 1);
                  v73 += v72;
                }
                else
                {
                  ++v73;
                  uint64_t v74 = 1;
                }
                v72 += v74;
                if (v73 >= v69) {
                  goto LABEL_101;
                }
              }
              if (*v71 == 36 && v71[1] == 115)
              {
                v64 += 2;
                v71 += 2;
              }
            }
            uint64_t v76 = a1[31];
            *(void *)&long long v121 = v64;
            *((void *)&v121 + 1) = v71;
            LOBYTE(v123) = 1;
            uint64_t v77 = *(void *)(v76 + 1976);
            if (!v77) {
              goto LABEL_177;
            }
            long long v78 = (swift::Demangle::__runtime::Node *)(*(uint64_t (**)(uint64_t, long long *, uint64_t *, __n128))(*(void *)v77 + 48))(v77, &v121, &v123, v62);
            uint64_t v123 = a1[31];
            swift::Demangle::__runtime::TypeDecoder<swift::reflection::TypeRefBuilder>::decodeMangledType(&v123, v78, 0, &v121);
            if ((unsigned __int16)v122 == 1)
            {
              (*((void (**)(void, uint64_t, void))&v121 + 1))(v121, 3, 0);
            }
            else if (!(_WORD)v122)
            {
              uint64_t v58 = v121;
              goto LABEL_108;
            }
            uint64_t v58 = 0;
LABEL_108:
            long long v121 = v119;
            uint64_t v122 = v120;
            swift::Demangle::__runtime::NodeFactory::popCheckpoint((uint64_t)__dst, (uint64_t)&v121, v79, v80);
          }
          uint64_t v81 = *(int *)(v56 + 4);
          if (v81) {
            BOOL v82 = v81 == -4 - v56;
          }
          else {
            BOOL v82 = 1;
          }
          if (v82)
          {
            uint64_t v83 = 0;
            goto LABEL_156;
          }
          char v84 = (void *)a1[1];
          uint64_t v85 = (void *)a1[2];
          if (v84 == v85) {
            goto LABEL_133;
          }
          unint64_t v86 = v59 + v81 + 4;
          unint64_t v87 = v86 + 1;
          while (1)
          {
            unint64_t v88 = v84[12];
            if (v88 <= v86)
            {
              unint64_t v89 = v84[14] + v88;
              if (v87 <= v89)
              {
                unint64_t v90 = v84 + 13;
                if (v89 <= v86) {
                  goto LABEL_133;
                }
LABEL_125:
                std::string::size_type v91 = (unsigned char *)(v86 - v88 + *v90);
                uint64_t v92 = (uint64_t)v91;
                while (1)
                {
                  unsigned int v94 = *(unsigned __int8 *)v92;
                  if (!*(unsigned char *)v92) {
                    break;
                  }
                  if (v94 <= 0x17)
                  {
                    v86 += 5;
                    uint64_t v93 = 5;
                  }
                  else if ((v94 & 0xF8) == 0x18)
                  {
                    uint64_t v93 = v92;
                    uint64_t v92 = (*(_DWORD *)(a1[31] + 1944) + 1);
                    v86 += v92;
                  }
                  else
                  {
                    ++v86;
                    uint64_t v93 = 1;
                  }
                  v92 += v93;
                  if (v86 >= v89) {
                    goto LABEL_133;
                  }
                }
                if (*v91 == 36 && v91[1] == 115) {
                  v91 += 2;
                }
                SymbolicMangledNameStringRef = swift::Demangle::__runtime::makeSymbolicMangledNameStringRef(v91, a2);
                if (SymbolicMangledNameStringRef) {
                  goto LABEL_142;
                }
LABEL_134:
                uint64_t v97 = 0;
                std::string __dst = 0;
                long long v119 = 0uLL;
LABEL_152:
                p_dst = &__dst;
                goto LABEL_154;
              }
            }
            unint64_t v88 = v84[15];
            if (v88 <= v86)
            {
              unint64_t v89 = v84[17] + v88;
              if (v87 <= v89) {
                break;
              }
            }
            v84 += 28;
            if (v84 == v85) {
              goto LABEL_133;
            }
          }
          unint64_t v90 = v84 + 16;
          if (v89 > v86) {
            goto LABEL_125;
          }
LABEL_133:
          SymbolicMangledNameStringRef = swift::Demangle::__runtime::makeSymbolicMangledNameStringRef(0, a2);
          if (!SymbolicMangledNameStringRef) {
            goto LABEL_134;
          }
LABEL_142:
          size_t v98 = v96;
          if (v96 >= 0x7FFFFFFFFFFFFFF8) {
            goto LABEL_176;
          }
          int v99 = SymbolicMangledNameStringRef;
          if (v96 >= 0x17)
          {
            uint64_t v101 = (v96 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v96 | 7) != 0x17) {
              uint64_t v101 = v96 | 7;
            }
            uint64_t v102 = v101 + 1;
            size_t v100 = (swift::Demangle::__runtime::NodeFactory **)operator new(v101 + 1);
            unint64_t v103 = v102 | 0x8000000000000000;
            uint64_t v4 = a3;
            *(void *)&long long v119 = v98;
            *((void *)&v119 + 1) = v103;
            std::string __dst = (swift::Demangle::__runtime::NodeFactory *)v100;
LABEL_149:
            memmove(v100, v99, v98);
            goto LABEL_150;
          }
          HIBYTE(v119) = v96;
          size_t v100 = &__dst;
          if (v96) {
            goto LABEL_149;
          }
LABEL_150:
          *((unsigned char *)v100 + v98) = 0;
          if ((SHIBYTE(v119) & 0x80000000) == 0)
          {
            uint64_t v97 = HIBYTE(v119);
            goto LABEL_152;
          }
          p_dst = (swift::Demangle::__runtime::NodeFactory **)__dst;
          uint64_t v97 = v119;
LABEL_154:
          *(void *)&long long v121 = p_dst;
          uint64_t v123 = (uint64_t)p_dst + v97;
          uint64_t v83 = swift::reflection::MetadataSource::decode<swift::reflection::MetadataSourceBuilder>((uint64_t)(a1 + 28), (uint64_t *)&v121, &v123);
          if (SHIBYTE(v119) < 0) {
            operator delete(__dst);
          }
LABEL_156:
          BOOL v106 = *(char **)(v4 + 32);
          unint64_t v105 = *(void *)(v4 + 40);
          if ((unint64_t)v106 < v105)
          {
            *(void *)BOOL v106 = v58;
            *((void *)v106 + 1) = v83;
            char v57 = v106 + 16;
            goto LABEL_75;
          }
          char v107 = *(char **)(v4 + 24);
          uint64_t v108 = (v106 - v107) >> 4;
          unint64_t v109 = v108 + 1;
          if ((unint64_t)(v108 + 1) >> 60) {
            goto LABEL_176;
          }
          uint64_t v110 = v105 - (void)v107;
          if (v110 >> 3 > v109) {
            unint64_t v109 = v110 >> 3;
          }
          if ((unint64_t)v110 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v111 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v111 = v109;
          }
          if (v111)
          {
            if (!(v111 >> 60))
            {
              size_t v112 = (char *)operator new(16 * v111);
              goto LABEL_167;
            }
LABEL_178:
            std::__throw_bad_array_new_length[abi:nn180100]();
          }
          size_t v112 = 0;
LABEL_167:
          size_t v113 = &v112[16 * v108];
          *(void *)size_t v113 = v58;
          *((void *)v113 + 1) = v83;
          unint64_t v114 = v113;
          if (v106 == v107)
          {
            uint64_t v4 = a3;
          }
          else
          {
            uint64_t v4 = a3;
            do
            {
              *((_OWORD *)v114 - 1) = *((_OWORD *)v106 - 1);
              v114 -= 16;
              v106 -= 16;
            }
            while (v106 != v107);
            BOOL v106 = *(char **)(a3 + 24);
          }
          char v57 = v113 + 16;
          *(void *)(v4 + 24) = v114;
          *(void *)(v4 + 40) = &v112[16 * v111];
          if (v106) {
            operator delete(v106);
          }
LABEL_75:
          *(void *)(v4 + 32) = v57;
          v56 += 8;
          if (v56 == v115)
          {
            unint64_t v5 = (unsigned int *)*((void *)a2 + 1);
            goto LABEL_175;
          }
          continue;
        }
      }
    }
    uint64_t v13 = *(void *)a2;
    unint64_t v14 = (char *)(v6 - *((void *)a2 + 1));
    std::string __dst = (swift::Demangle::__runtime::NodeFactory *)a1[31];
    __n128 v15 = swift::Demangle::__runtime::NodeFactory::pushCheckpoint(__dst, (uint64_t)&v119);
    uint64_t v16 = *(int *)v6;
    if (v16) {
      unint64_t v17 = &v14[v13 + v16];
    }
    else {
      unint64_t v17 = 0;
    }
    unint64_t v18 = (void *)a1[1];
    unint64_t v19 = (void *)a1[2];
    if (v18 == v19)
    {
LABEL_30:
      unint64_t v24 = 0;
      unint64_t v17 = 0;
    }
    else
    {
      int v20 = v17 + 1;
      while (1)
      {
        unint64_t v21 = v18[12];
        if (v21 <= (unint64_t)v17)
        {
          unint64_t v22 = v18[14] + v21;
          if ((unint64_t)v20 <= v22)
          {
            char v23 = v18 + 13;
            if (v22 <= (unint64_t)v17) {
              goto LABEL_30;
            }
            goto LABEL_22;
          }
        }
        unint64_t v21 = v18[15];
        if (v21 <= (unint64_t)v17)
        {
          unint64_t v22 = v18[17] + v21;
          if ((unint64_t)v20 <= v22) {
            break;
          }
        }
        v18 += 28;
        if (v18 == v19) {
          goto LABEL_30;
        }
      }
      char v23 = v18 + 16;
      if (v22 <= (unint64_t)v17) {
        goto LABEL_30;
      }
LABEL_22:
      unint64_t v24 = &v17[*v23 - v21];
      uint64_t v25 = (uint64_t)v24;
      unint64_t v26 = v17;
      while (1)
      {
        unsigned int v28 = *(unsigned __int8 *)v25;
        if (!*(unsigned char *)v25) {
          break;
        }
        if (v28 <= 0x17)
        {
          v26 += 5;
          uint64_t v27 = 5;
        }
        else if ((v28 & 0xF8) == 0x18)
        {
          uint64_t v27 = v25;
          uint64_t v25 = (*(_DWORD *)(a1[31] + 1944) + 1);
          v26 += v25;
        }
        else
        {
          ++v26;
          uint64_t v27 = 1;
        }
        v25 += v27;
        if ((unint64_t)v26 >= v22) {
          goto LABEL_30;
        }
      }
      if (*v24 == 36 && v24[1] == 115)
      {
        v17 += 2;
        v24 += 2;
      }
    }
    uint64_t v29 = a1[31];
    *(void *)&long long v121 = v17;
    *((void *)&v121 + 1) = v24;
    LOBYTE(v123) = 1;
    uint64_t v30 = *(void *)(v29 + 1976);
    if (!v30)
    {
LABEL_177:
      std::__throw_bad_function_call[abi:nn180100]();
      goto LABEL_178;
    }
    uint64_t v31 = (swift::Demangle::__runtime::Node *)(*(uint64_t (**)(uint64_t, long long *, uint64_t *, __n128))(*(void *)v30 + 48))(v30, &v121, &v123, v15);
    uint64_t v123 = a1[31];
    swift::Demangle::__runtime::TypeDecoder<swift::reflection::TypeRefBuilder>::decodeMangledType(&v123, v31, 0, &v121);
    if ((unsigned __int16)v122 == 1)
    {
      (*((void (**)(void, uint64_t, void))&v121 + 1))(v121, 3, 0);
    }
    else if (!(_WORD)v122)
    {
      uint64_t v10 = v121;
LABEL_37:
      long long v121 = v119;
      uint64_t v122 = v120;
      swift::Demangle::__runtime::NodeFactory::popCheckpoint((uint64_t)__dst, (uint64_t)&v121, v32, v33);
      goto LABEL_38;
    }
    uint64_t v10 = 0;
    goto LABEL_37;
  }
  uint64_t v54 = 0;
  uint64_t v55 = v5[1];
  if (v55) {
    goto LABEL_73;
  }
LABEL_175:
  *(_DWORD *)(v4 + 48) = v5[2];
}

double swift::reflection::TypeRefBuilder::ReflectionTypeDescriptorFinder::dumpTypeRef(uint64_t a1, void *a2, void *a3)
{
  uint64_t v47 = *(swift::Demangle::__runtime::NodeFactory **)(a1 + 248);
  __n128 v6 = swift::Demangle::__runtime::NodeFactory::pushCheckpoint(v47, (uint64_t)&v48);
  uint64_t v7 = *(void *)(a1 + 248);
  uint64_t v8 = a2[1];
  *(void *)uint64_t v40 = *a2;
  *(void *)&v40[8] = v8;
  LOBYTE(__p[0]) = 1;
  uint64_t v9 = *(void *)(v7 + 1976);
  if (!v9)
  {
    std::__throw_bad_function_call[abi:nn180100]();
    goto LABEL_43;
  }
  uint64_t v10 = (uint64_t *)(*(uint64_t (**)(uint64_t, unsigned char *, void **, __n128))(*(void *)v9 + 48))(v9, v40, __p, v6);
  v40[0] = 0;
  *(void *)&v40[1] = 0x101010101010101;
  v40[9] = 1;
  *(void *)&v40[10] = 0x101010100000000;
  v40[18] = 1;
  *(_WORD *)&v40[19] = 256;
  v40[21] = 1;
  uint64_t v41 = 0;
  uint64_t v42 = 0;
  v43[0] = off_C8B30;
  v43[1] = swift::Demangle::__runtime::genericParameterName;
  unint64_t v44 = v43;
  swift::Demangle::__runtime::nodeToString((uint64_t *)__p, v10, (swift::Demangle::__runtime::Node *)v40, v11);
  if (v44 == v43)
  {
    (*(void (**)(void *))(v43[0] + 32))(v43);
  }
  else if (v44)
  {
    (*(void (**)(void))(*v44 + 40))();
  }
  if ((v46 & 0x80u) == 0) {
    uint64_t v12 = __p;
  }
  else {
    uint64_t v12 = (void **)__p[0];
  }
  if ((v46 & 0x80u) == 0) {
    uint64_t v13 = v46;
  }
  else {
    uint64_t v13 = (uint64_t)__p[1];
  }
  unint64_t v14 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a3, (uint64_t)v12, v13);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v14, (uint64_t)"\n", 1);
  std::string __dst = *(void ***)(a1 + 248);
  swift::Demangle::__runtime::TypeDecoder<swift::reflection::TypeRefBuilder>::decodeMangledType((uint64_t *)&__dst, (swift::Demangle::__runtime::Node *)v10, 0, v40);
  if (!*(_WORD *)&v40[16])
  {
    uint64_t v22 = *(void *)v40;
LABEL_21:
    swift::reflection::TypeRef::dump(v22, a3, 0);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a3, (uint64_t)"\n", 1);
    goto LABEL_37;
  }
  if (*(unsigned __int16 *)&v40[16] != 1)
  {
    uint64_t v22 = 0;
    goto LABEL_21;
  }
  __n128 v15 = (const char *)(*(uint64_t (**)(void, void, void))&v40[8])(*(void *)v40, 0, 0);
  SymbolicMangledNameStringRef = swift::Demangle::__runtime::makeSymbolicMangledNameStringRef((unsigned char *)a2[1], v16);
  size_t v19 = v18;
  int v20 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a3, (uint64_t)"!!! Invalid typeref: ", 21);
  if (SymbolicMangledNameStringRef)
  {
    if (v19 < 0x7FFFFFFFFFFFFFF8)
    {
      if (v19 >= 0x17)
      {
        uint64_t v28 = (v19 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v19 | 7) != 0x17) {
          uint64_t v28 = v19 | 7;
        }
        uint64_t v29 = v28 + 1;
        p_dst = (void **)operator new(v28 + 1);
        size_t v38 = v19;
        unint64_t v39 = v29 | 0x8000000000000000;
        std::string __dst = p_dst;
      }
      else
      {
        HIBYTE(v39) = v19;
        p_dst = (void **)&__dst;
        if (!v19) {
          goto LABEL_27;
        }
      }
      memmove(p_dst, SymbolicMangledNameStringRef, v19);
LABEL_27:
      *((unsigned char *)p_dst + v19) = 0;
      unsigned int v27 = HIBYTE(v39);
      unint64_t v26 = __dst;
      uint64_t v25 = v38;
      goto LABEL_28;
    }
LABEL_43:
    abort();
  }
  uint64_t v25 = 0;
  unint64_t v26 = 0;
  unsigned int v27 = 0;
  std::string __dst = 0;
  size_t v38 = 0;
  unint64_t v39 = 0;
LABEL_28:
  if ((v27 & 0x80u) == 0) {
    uint64_t v30 = (void **)&__dst;
  }
  else {
    uint64_t v30 = v26;
  }
  if ((v27 & 0x80u) == 0) {
    uint64_t v31 = v27;
  }
  else {
    uint64_t v31 = v25;
  }
  std::locale v32 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v20, (uint64_t)v30, v31);
  uint64_t v33 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v32, (uint64_t)" - ", 3);
  size_t v34 = strlen(v15);
  char v35 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v33, (uint64_t)v15, v34);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v35, (uint64_t)"\n", 1);
  if (SHIBYTE(v39) < 0) {
    operator delete(__dst);
  }
  (*(void (**)(void, uint64_t, const char *))&v40[8])(*(void *)v40, 1, v15);
LABEL_37:
  if (*(unsigned __int16 *)&v40[16] == 1) {
    (*(void (**)(void, uint64_t, void))&v40[8])(*(void *)v40, 3, 0);
  }
  if ((char)v46 < 0) {
    operator delete(__p[0]);
  }
  *(_OWORD *)uint64_t v40 = v48;
  *(void *)&v40[16] = v49;
  *(void *)&double result = swift::Demangle::__runtime::NodeFactory::popCheckpoint((uint64_t)v47, (uint64_t)v40, v23, v24).n128_u64[0];
  return result;
}

void swift::reflection::TypeRefBuilder::ReflectionTypeDescriptorFinder::collectFieldTypes(void **a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X8>)
{
  *(_OWORD *)(a3 + 16) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  unint64_t v146 = (void **)a3;
  *(_OWORD *)a3 = 0u;
  uint64_t v4 = a1[1];
  uint64_t v141 = a1[2];
  if (v4 != v141)
  {
    unint64_t v5 = a2;
    __n128 v6 = a1;
    uint64_t v7 = (std::string *)&v190[1];
    v171 = &__p.__r_.__value_.__s.__data_[1];
    int v170 = &__p.__r_.__value_.__s.__data_[14];
    __sb = v200;
    uint64_t v8 = &v201;
    uint64_t v9 = &__str.__r_.__value_.__r.__words[2];
    unint64_t v169 = (unint64_t)&__p.__r_.__value_.__r.__words[2];
    size_t v147 = &v218.__r_.__value_.__r.__words[2];
    v180 = &v208;
    v162 = &v205;
    v172 = (std::string *)&v194;
    uint64_t v173 = (std::string *)&v192;
    v160 = &v196;
    uint64_t v149 = &v202;
    uint64_t v10 = &v203;
    qmemcpy(v140, "scriptorFieldDes", sizeof(v140));
    uint64_t v148 = &v204;
    unint64_t v168 = &v201;
    v156 = &v203;
    unint64_t v144 = &v190[1];
    uint64_t v145 = a2;
    uint64_t v181 = a1;
    std::string::size_type v143 = &__str.__r_.__value_.__s.__data_[16];
    do
    {
      uint64_t v11 = (void *)v4[1];
      uint64_t v142 = v4;
      unint64_t v12 = v4[2];
      v190[0] = *(void **)v4;
      v190[1] = v11;
      *((unsigned char *)&__p.__r_.__value_.__s + 23) = 15;
      __p.__r_.__value_.__r.__words[0] = v140[1];
      *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 7) = v140[0];
      __p.__r_.__value_.__s.__data_[15] = 0;
      swift::reflection::ReflectionSectionIteratorBase<swift::reflection::FieldDescriptorIterator,swift::reflection::TargetFieldDescriptor<swift::InProcess>>::ReflectionSectionIteratorBase(v222, (unint64_t *)v190, v12, (long long *)&__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      while (v222[3])
      {
        unint64_t v13 = v222[1];
        unint64_t v14 = (int *)v222[2];
        v190[0] = v6[31];
        __n128 v15 = swift::Demangle::__runtime::NodeFactory::pushCheckpoint((swift::Demangle::__runtime::NodeFactory *)v190[0], (uint64_t)v7);
        unint64_t v184 = v13;
        uint64_t v185 = v14;
        uint64_t v16 = *v14;
        if (v16) {
          unint64_t v17 = v13 + v16;
        }
        else {
          unint64_t v17 = 0;
        }
        size_t v18 = v6[1];
        size_t v19 = v6[2];
        if (v18 == v19)
        {
LABEL_31:
          unint64_t v24 = 0;
          unint64_t v17 = 0;
        }
        else
        {
          unint64_t v20 = v17 + 1;
          while (1)
          {
            unint64_t v21 = v18[12];
            if (v21 <= v17)
            {
              unint64_t v22 = v18[14] + v21;
              if (v20 <= v22) {
                break;
              }
            }
            unint64_t v21 = v18[15];
            if (v21 <= v17)
            {
              unint64_t v22 = v18[17] + v21;
              if (v20 <= v22)
              {
                char v23 = v18 + 16;
                if (v22 <= v17) {
                  goto LABEL_31;
                }
                goto LABEL_23;
              }
            }
            v18 += 28;
            if (v18 == v19) {
              goto LABEL_31;
            }
          }
          char v23 = v18 + 13;
          if (v22 <= v17) {
            goto LABEL_31;
          }
LABEL_23:
          unint64_t v24 = (unsigned char *)(v17 - v21 + *v23);
          uint64_t v25 = (uint64_t)v24;
          unint64_t v26 = v17;
          while (1)
          {
            unsigned int v28 = *(unsigned __int8 *)v25;
            if (!*(unsigned char *)v25) {
              break;
            }
            if (v28 <= 0x17)
            {
              v26 += 5;
              uint64_t v27 = 5;
            }
            else if ((v28 & 0xF8) == 0x18)
            {
              uint64_t v27 = v25;
              uint64_t v25 = (*((_DWORD *)v6[31] + 486) + 1);
              v26 += v25;
            }
            else
            {
              ++v26;
              uint64_t v27 = 1;
            }
            v25 += v27;
            if (v26 >= v22) {
              goto LABEL_31;
            }
          }
          if (*v24 == 36 && v24[1] == 115)
          {
            v17 += 2;
            v24 += 2;
          }
        }
        uint64_t v29 = v6[31];
        __p.__r_.__value_.__r.__words[0] = v17;
        __p.__r_.__value_.__l.__size_ = (std::string::size_type)v24;
        v218.__r_.__value_.__s.__data_[0] = 1;
        uint64_t v30 = v29[247];
        if (!v30)
        {
LABEL_262:
          std::__throw_bad_function_call[abi:nn180100]();
LABEL_263:
          std::__throw_bad_array_new_length[abi:nn180100]();
        }
        uint64_t v31 = (uint64_t *)(*(uint64_t (**)(uint64_t, std::string *, std::string *, __n128))(*(void *)v30 + 48))(v30, &__p, &v218, v15);
        __p.__r_.__value_.__s.__data_[0] = 0;
        *(void *)v171 = 0x101010101010101;
        v171[8] = 1;
        *(_DWORD *)((char *)&__p.__r_.__value_.__r.__words[1] + 2) = 0;
        *(_DWORD *)int v170 = 16843009;
        v170[4] = 1;
        *(_WORD *)((char *)&__p.__r_.__value_.__r.__words[2] + 3) = 256;
        __p.__r_.__value_.__s.__data_[21] = 1;
        *(void *)__sb = 0;
        *((void *)__sb + 1) = 0;
        unint64_t v201 = off_C8B30;
        *(void *)&long long v202 = swift::Demangle::__runtime::genericParameterName;
        unint64_t v203 = v8;
        swift::Demangle::__runtime::nodeToString((uint64_t *)&__str, v31, (swift::Demangle::__runtime::Node *)&__p, v32);
        std::string::size_type size = __str.__r_.__value_.__l.__size_;
        uint64_t v33 = (std::string::value_type *)__str.__r_.__value_.__r.__words[0];
        v220[0] = *(_DWORD *)v9;
        *(_DWORD *)((char *)v220 + 3) = *(_DWORD *)((char *)v9 + 3);
        int v186 = SHIBYTE(__str.__r_.__value_.__r.__words[2]);
        *((unsigned char *)&__str.__r_.__value_.__s + 23) = 0;
        __str.__r_.__value_.__s.__data_[0] = 0;
        if (v203 == v8)
        {
          ((void (*)(uint64_t (***)()))v201[4])(v8);
        }
        else if (v203)
        {
          (*v203)[5]();
        }
        v219[0] = v17;
        v219[1] = (unint64_t)v24;
        swift::reflection::TypeRefBuilder::ReflectionTypeDescriptorFinder::normalizeReflectionName((uint64_t)v6, v219, &__p);
        int v36 = LOBYTE(v200[0]);
        if (LOBYTE(v200[0]))
        {
          std::string::size_type __sz = __p.__r_.__value_.__l.__size_;
          __s = (std::string::value_type *)__p.__r_.__value_.__r.__words[0];
          v221[0] = *(_DWORD *)v169;
          *(_DWORD *)((char *)v221 + 3) = *(_DWORD *)(v169 + 3);
          int v3 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        }
        else
        {
          __s = (std::string::value_type *)((unint64_t)__s & 0xFFFFFFFFFFFFFF00);
        }
        std::string __p = *v7;
        swift::Demangle::__runtime::NodeFactory::popCheckpoint((uint64_t)v190[0], (uint64_t)&__p, v34, v35);
        if (!v36) {
          goto LABEL_68;
        }
        int v151 = v36;
        int v152 = v3;
        if ((v3 & 0x80) != 0)
        {
          std::string::__init_copy_ctor_external(&v218, __s, __sz);
          if (!v5[24]) {
            goto LABEL_71;
          }
        }
        else
        {
          v218.__r_.__value_.__r.__words[0] = (std::string::size_type)__s;
          v218.__r_.__value_.__l.__size_ = __sz;
          *(_DWORD *)size_t v147 = v221[0];
          *(_DWORD *)((char *)v147 + 3) = *(_DWORD *)((char *)v221 + 3);
          *((unsigned char *)&v218.__r_.__value_.__s + 23) = v3;
          if (!v5[24]) {
            goto LABEL_71;
          }
        }
        if ((v218.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v38 = HIBYTE(v218.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v38 = v218.__r_.__value_.__l.__size_;
        }
        uint64_t v39 = v5[23];
        int v40 = (char)v39;
        if ((v39 & 0x80u) != 0) {
          uint64_t v39 = *((void *)v5 + 1);
        }
        if (v38 != v39) {
          goto LABEL_60;
        }
        if (v40 >= 0) {
          unint64_t v37 = v5;
        }
        else {
          unint64_t v37 = *(unsigned __int8 **)v5;
        }
        if ((*((unsigned char *)&v218.__r_.__value_.__s + 23) & 0x80) != 0)
        {
          unint64_t v43 = (void *)v218.__r_.__value_.__r.__words[0];
          if (memcmp(v218.__r_.__value_.__l.__data_, v37, v218.__r_.__value_.__l.__size_)) {
            goto LABEL_66;
          }
        }
        else if (*((unsigned char *)&v218.__r_.__value_.__s + 23))
        {
          uint64_t v41 = &v218;
          uint64_t v42 = HIBYTE(v218.__r_.__value_.__r.__words[2]);
          while (v41->__r_.__value_.__s.__data_[0] == *v37)
          {
            uint64_t v41 = (std::string *)((char *)v41 + 1);
            ++v37;
            if (!--v42) {
              goto LABEL_71;
            }
          }
LABEL_60:
          if ((*((unsigned char *)&v218.__r_.__value_.__s + 23) & 0x80) != 0)
          {
            unint64_t v43 = (void *)v218.__r_.__value_.__r.__words[0];
LABEL_66:
            operator delete(v43);
          }
          int v36 = v151;
          int v3 = v152;
LABEL_68:
          if ((v186 & 0x80000000) == 0) {
            goto LABEL_69;
          }
          goto LABEL_257;
        }
LABEL_71:
        v150 = v33;
        unint64_t v216 = 0;
        unint64_t v217 = 0;
        unint64_t v215 = 0;
        int v44 = v185[3];
        if (v44)
        {
          std::string v45 = 0;
          unsigned __int8 v46 = 0;
          uint64_t v47 = v185 + 4;
          uint64_t v182 = (uint64_t)&v185[3 * v44 + 4];
          v183 = 0;
          int v48 = v186;
          while (1)
          {
            unint64_t v50 = (char *)v47 - (char *)v185 + v184;
            uint64_t v51 = v47[2];
            if (v51) {
              unint64_t v52 = v50 + v51 + 8;
            }
            else {
              unint64_t v52 = 0;
            }
            uint64_t v53 = v6[1];
            uint64_t v54 = v6[2];
            if (v53 == v54)
            {
LABEL_96:
              uint64_t v59 = 0;
            }
            else
            {
              unint64_t v55 = v52 + 1;
              while (1)
              {
                unint64_t v56 = v53[12];
                if (v56 <= v52)
                {
                  unint64_t v57 = v53[14] + v56;
                  if (v55 <= v57) {
                    break;
                  }
                }
                unint64_t v56 = v53[15];
                if (v56 <= v52)
                {
                  unint64_t v57 = v53[17] + v56;
                  if (v55 <= v57)
                  {
                    uint64_t v58 = v53 + 16;
                    if (v57 <= v52) {
                      goto LABEL_96;
                    }
                    goto LABEL_88;
                  }
                }
                v53 += 28;
                if (v53 == v54) {
                  goto LABEL_96;
                }
              }
              uint64_t v58 = v53 + 13;
              if (v57 <= v52) {
                goto LABEL_96;
              }
LABEL_88:
              uint64_t v59 = (unsigned char *)(v52 - v56 + *v58);
              uint64_t v60 = (uint64_t)v59;
              while (1)
              {
                unsigned int v62 = *(unsigned __int8 *)v60;
                if (!*(unsigned char *)v60) {
                  break;
                }
                if (v62 <= 0x17)
                {
                  v52 += 5;
                  uint64_t v61 = 5;
                }
                else if ((v62 & 0xF8) == 0x18)
                {
                  uint64_t v61 = v60;
                  uint64_t v60 = (*((_DWORD *)v6[31] + 486) + 1);
                  v52 += v60;
                }
                else
                {
                  ++v52;
                  uint64_t v61 = 1;
                }
                v60 += v61;
                if (v52 >= v57) {
                  goto LABEL_96;
                }
              }
              if (*v59 == 36 && v59[1] == 115) {
                v59 += 2;
              }
            }
            SymbolicMangledNameStringRef = swift::Demangle::__runtime::makeSymbolicMangledNameStringRef(v59, (const char *)v37);
            unint64_t v64 = SymbolicMangledNameStringRef;
            size_t __len = (size_t)v37;
            uint64_t v66 = (uint64_t)(v47 + 1);
            uint64_t v65 = v47[1];
            if (v65 && v65 != -v66)
            {
              uint64_t __src = SymbolicMangledNameStringRef;
              int v179 = v47;
              unint64_t v67 = (const char *)(v65 + v66);
              size_t v68 = strlen((const char *)(v65 + v66));
              if (v68 > 0x7FFFFFFFFFFFFFF7) {
                goto LABEL_261;
              }
              std::string::size_type v69 = v68;
              if (v68 >= 0x17)
              {
                uint64_t v73 = (v68 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v68 | 7) != 0x17) {
                  uint64_t v73 = v68 | 7;
                }
                uint64_t v74 = v73 + 1;
                p_dst = (std::string *)operator new(v73 + 1);
                __dst.__r_.__value_.__l.__size_ = v69;
                __dst.__r_.__value_.__r.__words[2] = v74 | 0x8000000000000000;
                __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
              }
              else
              {
                *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v68;
                p_dst = &__dst;
                if (!v68)
                {
LABEL_112:
                  p_dst->__r_.__value_.__s.__data_[v69] = 0;
                  uint64_t v75 = *(int *)v66;
                  if (v75) {
                    unint64_t v76 = v50 + v75 + 4;
                  }
                  else {
                    unint64_t v76 = 0;
                  }
                  uint64_t v77 = v181[1];
                  long long v78 = v181[2];
                  if (v77 == v78)
                  {
                    unint64_t v76 = 0;
                    uint64_t v83 = 0;
                  }
                  else
                  {
                    unint64_t v79 = v76 + 1;
                    while (1)
                    {
                      unint64_t v80 = v77[12];
                      if (v80 <= v76)
                      {
                        unint64_t v81 = v77[14] + v80;
                        if (v79 <= v81) {
                          break;
                        }
                      }
                      unint64_t v80 = v77[15];
                      if (v80 <= v76)
                      {
                        unint64_t v81 = v77[17] + v80;
                        if (v79 <= v81)
                        {
                          BOOL v82 = v77 + 16;
                          if (v81 <= v76) {
                            goto LABEL_167;
                          }
                          goto LABEL_159;
                        }
                      }
                      v77 += 28;
                      if (v77 == v78) {
                        goto LABEL_167;
                      }
                    }
                    BOOL v82 = v77 + 13;
                    if (v81 <= v76)
                    {
LABEL_167:
                      unint64_t v76 = 0;
                      uint64_t v83 = 0;
                      goto LABEL_168;
                    }
LABEL_159:
                    uint64_t v83 = (unsigned char *)(v76 - v80 + *v82);
                    uint64_t v96 = (uint64_t)v83;
                    unint64_t v97 = v76;
                    while (1)
                    {
                      unsigned int v99 = *(unsigned __int8 *)v96;
                      if (!*(unsigned char *)v96) {
                        break;
                      }
                      if (v99 <= 0x17)
                      {
                        v97 += 5;
                        uint64_t v98 = 5;
                      }
                      else if ((v99 & 0xF8) == 0x18)
                      {
                        uint64_t v98 = v96;
                        uint64_t v96 = (*((_DWORD *)v181[31] + 486) + 1);
                        v97 += v96;
                      }
                      else
                      {
                        ++v97;
                        uint64_t v98 = 1;
                      }
                      v96 += v98;
                      if (v97 >= v81) {
                        goto LABEL_167;
                      }
                    }
                    if (*v83 == 36 && v83[1] == 115)
                    {
                      v76 += 2;
                      v83 += 2;
                    }
                  }
LABEL_168:
                  v211[0] = v76;
                  v211[1] = (unint64_t)v83;
                  swift::reflection::TypeRefBuilder::ReflectionTypeDescriptorFinder::normalizeReflectionName((uint64_t)v181, v211, &__str);
                  if (v213) {
                    std::string::operator=(&__dst, &__str);
                  }
                  size_t v100 = v181[31];
                  __p.__r_.__value_.__r.__words[0] = v76;
                  __p.__r_.__value_.__l.__size_ = (std::string::size_type)v83;
                  LOBYTE(v190[0]) = 1;
                  uint64_t v101 = v100[247];
                  if (!v101) {
                    goto LABEL_262;
                  }
                  uint64_t v102 = (uint64_t *)(*(uint64_t (**)(uint64_t, std::string *, void **))(*(void *)v101 + 48))(v101, &__p, v190);
                  __p.__r_.__value_.__s.__data_[0] = 0;
                  *(void *)v171 = 0x101010101010101;
                  v171[8] = 1;
                  *(_DWORD *)((char *)&__p.__r_.__value_.__r.__words[1] + 2) = 0;
                  *(_DWORD *)int v170 = 16843009;
                  v170[4] = 1;
                  *(_WORD *)((char *)&__p.__r_.__value_.__r.__words[2] + 3) = 256;
                  __p.__r_.__value_.__s.__data_[21] = 1;
                  *(void *)__sb = 0;
                  *((void *)__sb + 1) = 0;
                  unint64_t v201 = off_C8B30;
                  *(void *)&long long v202 = swift::Demangle::__runtime::genericParameterName;
                  unint64_t v203 = v8;
                  swift::Demangle::__runtime::nodeToString((uint64_t *)&v209, v102, (swift::Demangle::__runtime::Node *)&__p, v103);
                  v174 = v45;
                  uint64_t v178 = v83;
                  if (v203 == v8)
                  {
                    ((void (*)(uint64_t (***)()))v201[4])(v8);
                  }
                  else if (v203)
                  {
                    (*v203)[5]();
                  }
                  size_t v104 = (void *)v169;
                  unint64_t v105 = v169 & 0xFFFFFFFFFFFFLL | 0xD08C000000000000;
                  __p.__r_.__value_.__r.__words[0] = v167;
                  *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + *(void *)(v167 - 24)) = v166;
                  __p.__r_.__value_.__l.__size_ = 0;
                  BOOL v106 = (std::ios_base *)((char *)&__p + *(void *)(__p.__r_.__value_.__r.__words[0] - 24));
                  std::ios_base::init(v106, __sb);
                  std::string::size_type v107 = v165;
                  v106[1].__vftable = 0;
                  v106[1].__fmtflags_ = -1;
                  unint64_t v176 = v105;
                  __p.__r_.__value_.__r.__words[2] = v107;
                  *(void *)((char *)v104 + *(void *)(v107 - 24)) = v164;
                  unint64_t v175 = (unint64_t)&__p | 0x5B37000000000000;
                  __p.__r_.__value_.__r.__words[0] = v161;
                  *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + *(void *)(v161 - 24)) = v163;
                  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v177;
                  std::streambuf::basic_streambuf();
                  *(_OWORD *)v162 = 0u;
                  *((_OWORD *)v162 + 1) = 0u;
                  int v207 = 24;
                  v198[0] = v76;
                  v198[1] = v178;
                  __n128 v6 = v181;
                  swift::reflection::TypeRefBuilder::ReflectionTypeDescriptorFinder::dumpTypeRef((uint64_t)v181, v198, v104);
                  if (__src)
                  {
                    uint64_t v47 = v179;
                    if (__len > 0x7FFFFFFFFFFFFFF7) {
                      goto LABEL_261;
                    }
                    if (__len >= 0x17)
                    {
                      size_t v109 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
                      if ((__len | 7) != 0x17) {
                        size_t v109 = __len | 7;
                      }
                      size_t v110 = v109 + 1;
                      uint64_t v108 = operator new(v109 + 1);
                      v190[1] = (void *)__len;
                      unint64_t v191 = v110 | 0x8000000000000000;
                      v190[0] = v108;
                      uint64_t v8 = v168;
                      int v48 = v186;
                      std::string v45 = v174;
                    }
                    else
                    {
                      HIBYTE(v191) = __len;
                      uint64_t v108 = v190;
                      uint64_t v8 = v168;
                      int v48 = v186;
                      std::string v45 = v174;
                      if (!__len)
                      {
LABEL_187:
                        *((unsigned char *)v108 + __len) = 0;
                        if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                        {
LABEL_188:
                          *(_OWORD *)&v173->__r_.__value_.__l.__data_ = *(_OWORD *)&__dst.__r_.__value_.__l.__data_;
                          v173->__r_.__value_.__r.__words[2] = __dst.__r_.__value_.__r.__words[2];
                          if ((SHIBYTE(v210) & 0x80000000) == 0)
                          {
LABEL_189:
                            *(_OWORD *)&v172->__r_.__value_.__l.__data_ = v209;
                            v172->__r_.__value_.__r.__words[2] = v210;
LABEL_190:
                            unint64_t v111 = v160;
                            std::stringbuf::str();
                            size_t v112 = v216;
                            if ((unint64_t)v216 >= v217)
                            {
                              unint64_t v216 = std::vector<swift::reflection::PropertyTypeInfo>::__emplace_back_slow_path<swift::reflection::PropertyTypeInfo>((void **)&v215, (uint64_t)v190);
                              if (v197 < 0)
                              {
                                operator delete(v196);
                                if ((v195 & 0x80000000) == 0) {
                                  goto LABEL_197;
                                }
                              }
                              else if ((v195 & 0x80000000) == 0)
                              {
                                goto LABEL_197;
                              }
LABEL_192:
                              operator delete(v194);
                              if (v193 < 0) {
                                goto LABEL_193;
                              }
LABEL_198:
                              if (SHIBYTE(v191) < 0) {
LABEL_194:
                              }
                                operator delete(v190[0]);
                            }
                            else
                            {
                              long long v113 = *(_OWORD *)v190;
                              *((void *)v216 + 2) = v191;
                              *(_OWORD *)size_t v112 = v113;
                              v190[1] = 0;
                              unint64_t v191 = 0;
                              v190[0] = 0;
                              std::string::size_type v114 = v173->__r_.__value_.__r.__words[2];
                              *(_OWORD *)(v112 + 24) = *(_OWORD *)&v173->__r_.__value_.__l.__data_;
                              *((void *)v112 + 5) = v114;
                              v173->__r_.__value_.__l.__size_ = 0;
                              v173->__r_.__value_.__r.__words[2] = 0;
                              v173->__r_.__value_.__r.__words[0] = 0;
                              long long v115 = *(_OWORD *)&v172->__r_.__value_.__l.__data_;
                              *((void *)v112 + 8) = *((void *)&v172->__r_.__value_.__l + 2);
                              *((_OWORD *)v112 + 3) = v115;
                              v172->__r_.__value_.__l.__size_ = 0;
                              v172->__r_.__value_.__r.__words[2] = 0;
                              v172->__r_.__value_.__r.__words[0] = 0;
                              long long v116 = *(_OWORD *)v111;
                              *((void *)v112 + 11) = v111[2];
                              *(_OWORD *)(v112 + 72) = v116;
                              void *v111 = 0;
                              v111[1] = 0;
                              v111[2] = 0;
                              unint64_t v216 = v112 + 96;
                              if (v195 < 0) {
                                goto LABEL_192;
                              }
LABEL_197:
                              if ((v193 & 0x80000000) == 0) {
                                goto LABEL_198;
                              }
LABEL_193:
                              operator delete(v192);
                              if (SHIBYTE(v191) < 0) {
                                goto LABEL_194;
                              }
                            }
                            __p.__r_.__value_.__r.__words[0] = v159;
                            std::string::size_type v117 = v157;
                            *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + *(void *)(v159 - 24)) = v158;
                            __p.__r_.__value_.__r.__words[2] = v117;
                            if (v206 < 0) {
                              operator delete(v205);
                            }
                            std::streambuf::~streambuf();
                            std::iostream::~basic_iostream();
                            std::ios::~ios();
                            LODWORD(v10) = v156;
                            if (SHIBYTE(v210) < 0) {
                              operator delete((void *)v209);
                            }
                            if (v213 && SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
                              operator delete(__str.__r_.__value_.__l.__data_);
                            }
                            if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                              goto LABEL_74;
                            }
                            uint64_t v49 = (void *)__dst.__r_.__value_.__r.__words[0];
                            goto LABEL_73;
                          }
LABEL_182:
                          std::string::__init_copy_ctor_external(v172, (const std::string::value_type *)v209, *((std::string::size_type *)&v209 + 1));
                          goto LABEL_190;
                        }
LABEL_181:
                        std::string::__init_copy_ctor_external(v173, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
                        if ((SHIBYTE(v210) & 0x80000000) == 0) {
                          goto LABEL_189;
                        }
                        goto LABEL_182;
                      }
                    }
                    memmove(v108, __src, __len);
                    goto LABEL_187;
                  }
                  v190[0] = 0;
                  v190[1] = 0;
                  unint64_t v191 = 0;
                  uint64_t v8 = v168;
                  int v48 = v186;
                  uint64_t v47 = v179;
                  std::string v45 = v174;
                  if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                    goto LABEL_188;
                  }
                  goto LABEL_181;
                }
              }
              memmove(p_dst, v67, v69);
              goto LABEL_112;
            }
            if (!SymbolicMangledNameStringRef)
            {
              memset(&__p, 0, sizeof(__p));
              goto LABEL_131;
            }
            if (__len > 0x7FFFFFFFFFFFFFF7) {
              goto LABEL_261;
            }
            long long v71 = v47;
            if (__len >= 0x17)
            {
              size_t v84 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((__len | 7) != 0x17) {
                size_t v84 = __len | 7;
              }
              size_t v85 = v84 + 1;
              p_p = (std::string *)operator new(v84 + 1);
              unint64_t v86 = v85 | 0x8000000000000000;
              int v48 = v186;
              __p.__r_.__value_.__r.__words[2] = v86;
              __p.__r_.__value_.__r.__words[0] = (std::string::size_type)p_p;
              __p.__r_.__value_.__l.__size_ = __len;
            }
            else
            {
              *((unsigned char *)&__p.__r_.__value_.__s + 23) = __len;
              p_p = &__p;
              if (!__len) {
                goto LABEL_130;
              }
            }
            memmove(p_p, v64, __len);
LABEL_130:
            p_p->__r_.__value_.__s.__data_[__len] = 0;
            uint64_t v47 = v71;
LABEL_131:
            if (v46 < v183)
            {
              long long v87 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
              v46->__r_.__value_.__r.__words[2] = __p.__r_.__value_.__r.__words[2];
              *(_OWORD *)&v46->__r_.__value_.__l.__data_ = v87;
              ++v46;
              memset(&__p, 0, sizeof(__p));
              goto LABEL_74;
            }
            unint64_t v88 = v47;
            unint64_t v89 = 0xAAAAAAAAAAAAAAABLL * (((char *)v46 - (char *)v45) >> 3) + 1;
            if (v89 > 0xAAAAAAAAAAAAAAALL) {
              goto LABEL_261;
            }
            if (0x5555555555555556 * (((char *)v183 - (char *)v45) >> 3) > v89) {
              unint64_t v89 = 0x5555555555555556 * (((char *)v183 - (char *)v45) >> 3);
            }
            if (0xAAAAAAAAAAAAAAABLL * (((char *)v183 - (char *)v45) >> 3) >= 0x555555555555555) {
              unint64_t v90 = 0xAAAAAAAAAAAAAAALL;
            }
            else {
              unint64_t v90 = v89;
            }
            if (v90)
            {
              if (v90 > 0xAAAAAAAAAAAAAAALL) {
                goto LABEL_263;
              }
              std::string::size_type v91 = (char *)operator new(24 * v90);
            }
            else
            {
              std::string::size_type v91 = 0;
            }
            uint64_t v92 = (std::string *)&v91[8 * (((char *)v46 - (char *)v45) >> 3)];
            std::string *v92 = __p;
            memset(&__p, 0, sizeof(__p));
            if (v46 == v45)
            {
              unsigned int v94 = &v91[8 * (((char *)v46 - (char *)v45) >> 3)];
            }
            else
            {
              uint64_t v93 = v46;
              unsigned int v94 = &v91[8 * (((char *)v46 - (char *)v45) >> 3)];
              do
              {
                long long v95 = *(_OWORD *)&v93[-1].__r_.__value_.__l.__data_;
                *((void *)v94 - 1) = *((void *)&v93[-1].__r_.__value_.__l + 2);
                *(_OWORD *)(v94 - 24) = v95;
                v94 -= 24;
                v93[-1].__r_.__value_.__l.__size_ = 0;
                v93[-1].__r_.__value_.__r.__words[2] = 0;
                v93[-1].__r_.__value_.__r.__words[0] = 0;
                --v93;
              }
              while (v93 != v45);
              do
              {
                if (SHIBYTE(v46[-1].__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v46[-1].__r_.__value_.__l.__data_);
                }
                --v46;
              }
              while (v46 != v45);
            }
            v183 = (std::string *)&v91[24 * v90];
            unsigned __int8 v46 = v92 + 1;
            if (v45) {
              operator delete(v45);
            }
            std::string v45 = (std::string *)v94;
            int v48 = v186;
            uint64_t v47 = v88;
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            {
              uint64_t v49 = (void *)__p.__r_.__value_.__r.__words[0];
LABEL_73:
              operator delete(v49);
            }
LABEL_74:
            v47 += 3;
            if (v47 == (int *)v182) {
              goto LABEL_214;
            }
          }
        }
        unsigned __int8 v46 = 0;
        std::string v45 = 0;
        int v48 = v186;
LABEL_214:
        if (SHIBYTE(v218.__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::__init_copy_ctor_external(&__p, v218.__r_.__value_.__l.__data_, v218.__r_.__value_.__l.__size_);
          if ((v48 & 0x80000000) == 0)
          {
LABEL_216:
            v200[0] = v150;
            v200[1] = (void *)size;
            *(_DWORD *)uint64_t v8 = v220[0];
            *(_DWORD *)((char *)v8 + 3) = *(_DWORD *)((char *)v220 + 3);
            HIBYTE(v201) = v48;
            goto LABEL_219;
          }
        }
        else
        {
          std::string __p = v218;
          if ((v48 & 0x80000000) == 0) {
            goto LABEL_216;
          }
        }
        std::string::__init_copy_ctor_external((std::string *)__sb, v150, size);
LABEL_219:
        *(void *)uint64_t v149 = 0;
        *((void *)v149 + 1) = 0;
        *((void *)v149 + 2) = 0;
        uint64_t v118 = v215;
        long long v119 = v216;
        int64_t v120 = v216 - v215;
        if (v216 != v215)
        {
          unint64_t v121 = 0xAAAAAAAAAAAAAAABLL * (v120 >> 5);
          if (v121 >= 0x2AAAAAAAAAAAAABLL) {
            goto LABEL_261;
          }
          uint64_t v122 = (char *)operator new(v120);
          uint64_t v123 = 0;
          *(void *)&long long v202 = v122;
          *((void *)&v202 + 1) = v122;
          unint64_t v203 = (uint64_t (***)())&v122[96 * v121];
          do
          {
            std::allocator<swift::reflection::PropertyTypeInfo>::construct[abi:nn180100]<swift::reflection::PropertyTypeInfo,swift::reflection::PropertyTypeInfo&>((int)v10, (std::string *)&v122[v123], (long long *)&v118[v123]);
            v123 += 96;
          }
          while (&v118[v123] != v119);
          *((void *)&v202 + 1) = &v122[v123];
          uint64_t v8 = v168;
        }
        *(void *)uint64_t v148 = 0;
        *((void *)v148 + 1) = 0;
        *((void *)v148 + 2) = 0;
        int64_t v124 = (char *)v46 - (char *)v45;
        if (v46 != v45)
        {
          unint64_t v125 = 0xAAAAAAAAAAAAAAABLL * (v124 >> 3);
          if (v125 > 0xAAAAAAAAAAAAAAALL) {
LABEL_261:
          }
            abort();
          uint64_t v126 = (char *)operator new(v124);
          uint64_t v127 = 0;
          *(void *)&long long v204 = v126;
          *((void *)&v204 + 1) = v126;
          size_t v205 = &v126[24 * v125];
          do
          {
            unint64_t v129 = (char *)&v45[v127];
            unint64_t v130 = (std::string *)&v126[v127 * 24];
            if (SHIBYTE(v45[v127].__r_.__value_.__r.__words[2]) < 0)
            {
              std::string::__init_copy_ctor_external(v130, *(const std::string::value_type **)v129, *((void *)v129 + 1));
            }
            else
            {
              long long v128 = *(_OWORD *)v129;
              v130->__r_.__value_.__r.__words[2] = *((void *)v129 + 2);
              *(_OWORD *)&v130->__r_.__value_.__l.__data_ = v128;
            }
            ++v127;
          }
          while (&v45[v127] != v46);
          *((void *)&v204 + 1) = &v126[v127 * 24];
        }
        int v131 = v146;
        unint64_t v132 = (char *)v146[1];
        if (v132 >= v146[2])
        {
          unint64_t v136 = std::vector<swift::reflection::FieldMetadata>::__emplace_back_slow_path<swift::reflection::FieldMetadata>(v146, (uint64_t)&__p);
          unint64_t v137 = (void **)v204;
          v146[1] = v136;
          if (v137)
          {
            uint64_t v138 = (void **)*((void *)&v204 + 1);
            uint64_t v139 = v137;
            if (*((void ***)&v204 + 1) != v137)
            {
              do
              {
                if (*((char *)v138 - 1) < 0) {
                  operator delete(*(v138 - 3));
                }
                v138 -= 3;
              }
              while (v138 != v137);
              uint64_t v139 = (void **)v204;
            }
            *((void *)&v204 + 1) = v137;
            operator delete(v139);
          }
        }
        else
        {
          long long v133 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
          *((void *)v132 + 2) = *((void *)&__p.__r_.__value_.__l + 2);
          *(_OWORD *)unint64_t v132 = v133;
          memset(&__p, 0, sizeof(__p));
          uint64_t v134 = *((void *)__sb + 2);
          *(_OWORD *)(v132 + 24) = *(_OWORD *)__sb;
          *((void *)v132 + 5) = v134;
          *((void *)v132 + 6) = 0;
          *((void *)__sb + 1) = 0;
          *((void *)__sb + 2) = 0;
          *(void *)__sb = 0;
          *((void *)v132 + 7) = 0;
          *((void *)v132 + 8) = 0;
          *((_OWORD *)v132 + 3) = v202;
          size_t v135 = v203;
          *(void *)uint64_t v149 = 0;
          *((void *)v149 + 1) = 0;
          *((void *)v132 + 8) = v135;
          *((void *)v132 + 9) = 0;
          *((void *)v149 + 2) = 0;
          *((void *)v132 + 10) = 0;
          *((void *)v132 + 11) = 0;
          *(_OWORD *)(v132 + 72) = v204;
          *((void *)v132 + 11) = v205;
          *(void *)uint64_t v148 = 0;
          *((void *)v148 + 1) = 0;
          *((void *)v148 + 2) = 0;
          v131[1] = v132 + 96;
        }
        v190[0] = v149;
        std::vector<swift::reflection::PropertyTypeInfo>::__destroy_vector::operator()[abi:nn180100]((void ***)v190);
        if (SHIBYTE(v201) < 0) {
          operator delete(v200[0]);
        }
        int v36 = v151;
        int v3 = v152;
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(__p.__r_.__value_.__l.__data_);
          if (!v45) {
            goto LABEL_254;
          }
        }
        else if (!v45)
        {
          goto LABEL_254;
        }
        while (v46 != v45)
        {
          if (SHIBYTE(v46[-1].__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v46[-1].__r_.__value_.__l.__data_);
          }
          --v46;
        }
        operator delete(v45);
LABEL_254:
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v215;
        std::vector<swift::reflection::PropertyTypeInfo>::__destroy_vector::operator()[abi:nn180100]((void ***)&__p);
        if (SHIBYTE(v218.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v218.__r_.__value_.__l.__data_);
        }
        uint64_t v7 = (std::string *)v144;
        unint64_t v5 = v145;
        uint64_t v9 = (std::string::size_type *)v143;
        uint64_t v33 = v150;
        if ((v186 & 0x80000000) == 0)
        {
LABEL_69:
          if (!v36) {
            goto LABEL_8;
          }
          goto LABEL_258;
        }
LABEL_257:
        operator delete(v33);
        if (!v36) {
          goto LABEL_8;
        }
LABEL_258:
        if ((v3 & 0x80) != 0) {
          operator delete(__s);
        }
LABEL_8:
        swift::reflection::ReflectionSectionIteratorBase<swift::reflection::FieldDescriptorIterator,swift::reflection::TargetFieldDescriptor<swift::InProcess>>::operator++((uint64_t)v222);
      }
      if (v223 < 0) {
        operator delete((void *)v222[4]);
      }
      uint64_t v4 = v142 + 28;
    }
    while (v142 + 28 != v141);
  }
}

void swift::reflection::TypeRefBuilder::ReflectionTypeDescriptorFinder::dumpFieldSection(void **a1, void *a2)
{
  v32[0] = 0;
  v32[24] = 0;
  swift::reflection::TypeRefBuilder::ReflectionTypeDescriptorFinder::collectFieldTypes(a1, v32, (uint64_t)&v33);
  int v3 = v33;
  uint64_t v4 = v34;
  if (v33 != v34)
  {
    do
    {
      int v5 = *((char *)v3 + 47);
      if (v5 >= 0) {
        uint64_t v6 = (uint64_t)(v3 + 3);
      }
      else {
        uint64_t v6 = v3[3];
      }
      if (v5 >= 0) {
        uint64_t v7 = *((unsigned __int8 *)v3 + 47);
      }
      else {
        uint64_t v7 = v3[4];
      }
      uint64_t v8 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a2, v6, v7);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v8, (uint64_t)"\n", 1);
      unint64_t v9 = 0;
      LODWORD(v10) = *((char *)v3 + 47);
      if ((v10 & 0x80000000) == 0)
      {
LABEL_11:
        unint64_t v10 = v10;
        goto LABEL_13;
      }
      while (1)
      {
        unint64_t v10 = v3[4];
LABEL_13:
        if (v9 >= v10) {
          break;
        }
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a2, (uint64_t)"-", 1);
        ++v9;
        LODWORD(v10) = *((char *)v3 + 47);
        if ((v10 & 0x80000000) == 0) {
          goto LABEL_11;
        }
      }
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a2, (uint64_t)"\n", 1);
      uint64_t v11 = v3[6];
      uint64_t v12 = v3[7];
      if (v11 != v12)
      {
        uint64_t v13 = v11 + 72;
        do
        {
          int v14 = *(char *)(v13 - 49);
          if (v14 >= 0) {
            uint64_t v15 = v13 - 72;
          }
          else {
            uint64_t v15 = *(void *)(v13 - 72);
          }
          if (v14 >= 0) {
            uint64_t v16 = *(unsigned __int8 *)(v13 - 49);
          }
          else {
            uint64_t v16 = *(void *)(v13 - 64);
          }
          std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a2, v15, v16);
          std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a2, (uint64_t)": ", 2);
          int v17 = *(char *)(v13 + 23);
          if (v17 >= 0) {
            uint64_t v18 = v13;
          }
          else {
            uint64_t v18 = *(void *)v13;
          }
          if (v17 >= 0) {
            uint64_t v19 = *(unsigned __int8 *)(v13 + 23);
          }
          else {
            uint64_t v19 = *(void *)(v13 + 8);
          }
          std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a2, v18, v19);
          uint64_t v20 = v13 + 24;
          v13 += 96;
        }
        while (v20 != v12);
      }
      uint64_t v21 = v3[9];
      for (uint64_t i = v3[10]; v21 != i; v21 += 24)
      {
        int v23 = *(char *)(v21 + 23);
        if (v23 >= 0) {
          uint64_t v24 = v21;
        }
        else {
          uint64_t v24 = *(void *)v21;
        }
        if (v23 >= 0) {
          uint64_t v25 = *(unsigned __int8 *)(v21 + 23);
        }
        else {
          uint64_t v25 = *(void *)(v21 + 8);
        }
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a2, v24, v25);
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a2, (uint64_t)"\n\n", 2);
      }
      v3 += 12;
    }
    while (v3 != v4);
  }
  unint64_t v26 = (void **)__p;
  if (__p)
  {
    uint64_t v27 = v37;
    unsigned int v28 = __p;
    if (v37 != __p)
    {
      do
      {
        if (*((char *)v27 - 1) < 0) {
          operator delete(*(v27 - 3));
        }
        v27 -= 3;
      }
      while (v27 != v26);
      unsigned int v28 = __p;
    }
    unint64_t v37 = v26;
    operator delete(v28);
  }
  uint64_t v29 = v33;
  if (v33)
  {
    uint64_t v30 = (uint64_t)v34;
    uint64_t v31 = v33;
    if (v34 != v33)
    {
      do
      {
        v30 -= 96;
        std::allocator<swift::reflection::FieldMetadata>::destroy[abi:nn180100]((uint64_t)&v35, v30);
      }
      while ((void *)v30 != v29);
      uint64_t v31 = v33;
    }
    size_t v34 = v29;
    operator delete(v31);
  }
}

void swift::reflection::TypeRefBuilder::ReflectionTypeDescriptorFinder::dumpBuiltinTypeSection(void *a1, void *a2)
{
  uint64_t v2 = (void *)a1[1];
  int v40 = (void *)a1[2];
  if (v2 != v40)
  {
    qmemcpy(v39, "scriptorBuiltinTypeDescr", sizeof(v39));
    do
    {
      uint64_t v5 = v2[7];
      uint64_t v41 = v2;
      unint64_t v6 = v2[8];
      uint64_t v49 = (swift::Demangle::__runtime::NodeFactory *)v2[6];
      *(void *)&long long v50 = v5;
      __p[23] = 21;
      *(_OWORD *)std::string __p = *(_OWORD *)&v39[1];
      *(void *)&__p[13] = v39[0];
      char __p[21] = 0;
      swift::reflection::ReflectionSectionIteratorBase<swift::reflection::BuiltinTypeDescriptorIterator,swift::reflection::BuiltinTypeDescriptor>::ReflectionSectionIteratorBase(v52, (unint64_t *)&v49, v6, (long long *)__p);
      if ((__p[23] & 0x80000000) != 0) {
        operator delete(*(void **)__p);
      }
      while (v52[3])
      {
        unint64_t v7 = v52[1];
        uint64_t v8 = (int *)v52[2];
        uint64_t v49 = (swift::Demangle::__runtime::NodeFactory *)a1[31];
        __n128 v9 = swift::Demangle::__runtime::NodeFactory::pushCheckpoint(v49, (uint64_t)&v50);
        uint64_t v10 = a1[31];
        uint64_t v11 = *v8;
        if (v11) {
          unint64_t v12 = v7 + v11;
        }
        else {
          unint64_t v12 = 0;
        }
        uint64_t v13 = (void *)a1[1];
        int v14 = (void *)a1[2];
        if (v13 == v14)
        {
          uint64_t v19 = 0;
          unint64_t v12 = 0;
        }
        else
        {
          unint64_t v15 = v12 + 1;
          while (1)
          {
            unint64_t v16 = v13[12];
            if (v16 <= v12)
            {
              unint64_t v17 = v13[14] + v16;
              if (v15 <= v17) {
                break;
              }
            }
            unint64_t v16 = v13[15];
            if (v16 <= v12)
            {
              unint64_t v17 = v13[17] + v16;
              if (v15 <= v17)
              {
                uint64_t v18 = v13 + 16;
                if (v17 <= v12) {
                  goto LABEL_32;
                }
                goto LABEL_24;
              }
            }
            v13 += 28;
            if (v13 == v14) {
              goto LABEL_32;
            }
          }
          uint64_t v18 = v13 + 13;
          if (v17 <= v12)
          {
LABEL_32:
            uint64_t v19 = 0;
            unint64_t v12 = 0;
            goto LABEL_33;
          }
LABEL_24:
          uint64_t v19 = (unsigned char *)(v12 - v16 + *v18);
          uint64_t v20 = (uint64_t)v19;
          unint64_t v21 = v12;
          while (1)
          {
            unsigned int v23 = *(unsigned __int8 *)v20;
            if (!*(unsigned char *)v20) {
              break;
            }
            if (v23 <= 0x17)
            {
              v21 += 5;
              uint64_t v22 = 5;
            }
            else if ((v23 & 0xF8) == 0x18)
            {
              uint64_t v22 = v20;
              uint64_t v20 = (*(_DWORD *)(v10 + 1944) + 1);
              v21 += v20;
            }
            else
            {
              ++v21;
              uint64_t v22 = 1;
            }
            v20 += v22;
            if (v21 >= v17) {
              goto LABEL_32;
            }
          }
          if (*v19 == 36 && v19[1] == 115)
          {
            v12 += 2;
            v19 += 2;
          }
        }
LABEL_33:
        *(void *)std::string __p = v12;
        *(void *)&__p[8] = v19;
        LOBYTE(v47[0]) = 1;
        uint64_t v24 = *(void *)(v10 + 1976);
        if (!v24)
        {
          std::string::size_type v38 = (swift::reflection::ClosureContextInfo *)std::__throw_bad_function_call[abi:nn180100]();
          swift::reflection::ClosureContextInfo::dump(v38);
          return;
        }
        uint64_t v25 = (uint64_t *)(*(uint64_t (**)(uint64_t, unsigned char *, void **, __n128))(*(void *)v24 + 48))(v24, __p, v47, v9);
        __p[0] = 0;
        *(void *)&__p[1] = 0x101010101010101;
        __p[9] = 1;
        *(void *)&__p[10] = 0x101010100000000;
        char __p[18] = 1;
        *(_WORD *)&char __p[19] = 256;
        char __p[21] = 1;
        uint64_t v43 = 0;
        uint64_t v44 = 0;
        v45[0] = off_C8B30;
        v45[1] = swift::Demangle::__runtime::genericParameterName;
        unsigned __int8 v46 = v45;
        swift::Demangle::__runtime::nodeToString((uint64_t *)v47, v25, (swift::Demangle::__runtime::Node *)__p, v26);
        if (v46 == v45)
        {
          (*(void (**)(void *))(v45[0] + 32))(v45);
        }
        else if (v46)
        {
          (*(void (**)(void))(*v46 + 40))();
        }
        uint64_t v27 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a2, (uint64_t)"\n- ", 3);
        if ((v48 & 0x80u) == 0) {
          unsigned int v28 = v47;
        }
        else {
          unsigned int v28 = (void **)v47[0];
        }
        if ((v48 & 0x80u) == 0) {
          uint64_t v29 = v48;
        }
        else {
          uint64_t v29 = (uint64_t)v47[1];
        }
        uint64_t v30 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v27, (uint64_t)v28, v29);
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v30, (uint64_t)":\n", 2);
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a2, (uint64_t)"Size: ", 6);
        uint64_t v31 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v31, (uint64_t)"\n", 1);
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a2, (uint64_t)"Alignment: ", 11);
        std::locale v32 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v32, (uint64_t)":\n", 2);
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a2, (uint64_t)"Stride: ", 8);
        uint64_t v33 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v33, (uint64_t)":\n", 2);
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a2, (uint64_t)"NumExtraInhabitants: ", 21);
        size_t v34 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v34, (uint64_t)":\n", 2);
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a2, (uint64_t)"BitwiseTakable: ", 16);
        uint64_t v35 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v35, (uint64_t)":\n", 2);
        if ((char)v48 < 0) {
          operator delete(v47[0]);
        }
        *(_OWORD *)std::string __p = v50;
        *(void *)&__p[16] = v51;
        swift::Demangle::__runtime::NodeFactory::popCheckpoint((uint64_t)v49, (uint64_t)__p, v36, v37);
        swift::reflection::ReflectionSectionIteratorBase<swift::reflection::BuiltinTypeDescriptorIterator,swift::reflection::BuiltinTypeDescriptor>::operator++((uint64_t)v52);
      }
      if (v53 < 0) {
        operator delete((void *)v52[4]);
      }
      uint64_t v2 = v41 + 28;
    }
    while (v41 + 28 != v40);
  }
}

void *swift::reflection::ClosureContextInfo::dump(uint64_t **this)
{
  return swift::reflection::ClosureContextInfo::dump(this, &std::cerr);
}

void *swift::reflection::ClosureContextInfo::dump(uint64_t **a1, void *a2)
{
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a2, (uint64_t)"- Capture types:\n", 17);
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  if (*a1 != v5)
  {
    do
    {
      if (*v4) {
        swift::reflection::TypeRef::dump(*v4, a2, 0);
      }
      else {
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a2, (uint64_t)"!!! Invalid typeref\n", 20);
      }
      ++v4;
    }
    while (v4 != v5);
  }
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a2, (uint64_t)"- Metadata sources:\n", 20);
  unint64_t v6 = a1[3];
  for (uint64_t i = a1[4]; v6 != i; v6 += 2)
  {
    uint64_t v8 = (const swift::reflection::ClosureBindingMetadataSource *)v6[1];
    if (*v6)
    {
      swift::reflection::TypeRef::dump(*v6, a2, 0);
      if (!v8) {
        goto LABEL_15;
      }
    }
    else
    {
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a2, (uint64_t)"!!! Invalid typeref\n", 20);
      if (!v8)
      {
LABEL_15:
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a2, (uint64_t)"!!! Invalid metadata source\n", 28);
        continue;
      }
    }
    swift::reflection::MetadataSource::dump(v8, a2, 0);
  }

  return std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a2, (uint64_t)"\n", 1);
}

void swift::reflection::TypeRefBuilder::ReflectionTypeDescriptorFinder::dumpCaptureSection(void *a1, void *a2)
{
  uint64_t v2 = (void *)a1[1];
  for (uint64_t i = (void *)a1[2]; v2 != i; v2 += 28)
  {
    unint64_t v6 = v2[10];
    unint64_t v7 = v2[11];
    v14[0] = v2[9];
    v14[1] = v6;
    char v10 = 17;
    strcpy(__p, "CaptureDescriptor");
    swift::reflection::ReflectionSectionIteratorBase<swift::reflection::CaptureDescriptorIterator,swift::reflection::CaptureDescriptor>::ReflectionSectionIteratorBase(v12, v14, v7, (long long *)__p);
    if (v10 < 0) {
      operator delete(*(void **)__p);
    }
    while (v12[3])
    {
      v8[0] = v12[1];
      v8[1] = v12[2];
      swift::reflection::TypeRefBuilder::ReflectionTypeDescriptorFinder::getClosureContextInfo(a1, (const char *)v8, (uint64_t)__p);
      swift::reflection::ClosureContextInfo::dump((uint64_t **)__p, a2);
      if (v11) {
        operator delete(v11);
      }
      if (*(void *)__p) {
        operator delete(*(void **)__p);
      }
      swift::reflection::ReflectionSectionIteratorBase<swift::reflection::CaptureDescriptorIterator,swift::reflection::CaptureDescriptor>::operator++((uint64_t)v12);
    }
    if (v13 < 0) {
      operator delete((void *)v12[4]);
    }
  }
}

void swift::reflection::TypeRefBuilder::ReflectionTypeDescriptorFinder::dumpMultiPayloadEnumSection(void *a1, void *a2)
{
  uint64_t v2 = (void *)a1[1];
  uint64_t v54 = (void *)a1[2];
  if (v2 != v54)
  {
    uint64_t v4 = &v63;
    uint64_t v5 = a2 + 3;
    unint64_t v6 = a2 + 1;
    while (1)
    {
      unint64_t v7 = v4;
      uint64_t v8 = v2[22];
      unint64_t v55 = v2;
      unint64_t v9 = v2[23];
      unsigned int v62 = (swift::Demangle::__runtime::NodeFactory *)v2[21];
      *(void *)&long long v63 = v8;
      HIBYTE(__p[2]) = 16;
      strcpy((char *)__p, "MultiPayloadEnum");
      swift::reflection::ReflectionSectionIteratorBase<swift::reflection::MultiPayloadEnumDescriptorIterator,swift::reflection::MultiPayloadEnumDescriptor>::ReflectionSectionIteratorBase(v65, (unint64_t *)&v62, v9, (long long *)__p);
      if (SHIBYTE(__p[2]) < 0) {
        operator delete(__p[0]);
      }
      char v10 = v7;
      if (v66) {
        break;
      }
LABEL_7:
      uint64_t v11 = v10;
      if (v68 < 0) {
        operator delete(v67);
      }
      uint64_t v2 = v55 + 28;
      uint64_t v4 = v11;
      if (v55 + 28 == v54) {
        return;
      }
    }
    while (1)
    {
      unint64_t v15 = v65[1];
      int v14 = (int *)v65[2];
      unsigned int v62 = (swift::Demangle::__runtime::NodeFactory *)a1[31];
      __n128 v16 = swift::Demangle::__runtime::NodeFactory::pushCheckpoint(v62, (uint64_t)v10);
      uint64_t v17 = a1[31];
      uint64_t v18 = *v14;
      uint64_t v19 = v18 ? (char *)(v15 + v18) : 0;
      uint64_t v20 = (void *)a1[1];
      unint64_t v21 = (void *)a1[2];
      if (v20 == v21)
      {
        unint64_t v26 = 0;
        uint64_t v19 = 0;
      }
      else
      {
        uint64_t v22 = v19 + 1;
        while (1)
        {
          unint64_t v23 = v20[12];
          if (v23 <= (unint64_t)v19)
          {
            unint64_t v24 = v20[14] + v23;
            if ((unint64_t)v22 <= v24) {
              break;
            }
          }
          unint64_t v23 = v20[15];
          if (v23 <= (unint64_t)v19)
          {
            unint64_t v24 = v20[17] + v23;
            if ((unint64_t)v22 <= v24)
            {
              uint64_t v25 = v20 + 16;
              if (v24 <= (unint64_t)v19) {
                goto LABEL_35;
              }
              goto LABEL_27;
            }
          }
          v20 += 28;
          if (v20 == v21) {
            goto LABEL_35;
          }
        }
        uint64_t v25 = v20 + 13;
        if (v24 <= (unint64_t)v19)
        {
LABEL_35:
          unint64_t v26 = 0;
          uint64_t v19 = 0;
          goto LABEL_36;
        }
LABEL_27:
        unint64_t v26 = &v19[*v25 - v23];
        uint64_t v27 = (uint64_t)v26;
        unsigned int v28 = v19;
        while (1)
        {
          unsigned int v30 = *(unsigned __int8 *)v27;
          if (!*(unsigned char *)v27) {
            break;
          }
          if (v30 <= 0x17)
          {
            v28 += 5;
            uint64_t v29 = 5;
          }
          else if ((v30 & 0xF8) == 0x18)
          {
            uint64_t v29 = v27;
            uint64_t v27 = (*(_DWORD *)(v17 + 1944) + 1);
            v28 += v27;
          }
          else
          {
            ++v28;
            uint64_t v29 = 1;
          }
          v27 += v29;
          if ((unint64_t)v28 >= v24) {
            goto LABEL_35;
          }
        }
        if (*v26 == 36 && v26[1] == 115)
        {
          v19 += 2;
          v26 += 2;
        }
      }
LABEL_36:
      __p[0] = v19;
      __p[1] = v26;
      LOBYTE(v60[0]) = 1;
      uint64_t v31 = *(void *)(v17 + 1976);
      if (!v31) {
        break;
      }
      std::locale v32 = (uint64_t *)(*(uint64_t (**)(uint64_t, void **, void **, __n128))(*(void *)v31 + 48))(v31, __p, v60, v16);
      LOBYTE(__p[0]) = 0;
      *(void **)((char *)__p + 1) = (void *)0x101010101010101;
      BYTE1(__p[1]) = 1;
      *(void **)((char *)&__p[1] + 2) = (void *)0x101010100000000;
      BYTE2(__p[2]) = 1;
      *(_WORD *)((char *)&__p[2] + 3) = 256;
      BYTE5(__p[2]) = 1;
      __p[3] = 0;
      __p[4] = 0;
      v58[0] = off_C8B30;
      v58[1] = swift::Demangle::__runtime::genericParameterName;
      uint64_t v59 = v58;
      swift::Demangle::__runtime::nodeToString((uint64_t *)v60, v32, (swift::Demangle::__runtime::Node *)__p, v33);
      if (v59 == v58)
      {
        (*(void (**)(void *))(v58[0] + 32))(v58);
      }
      else if (v59)
      {
        (*(void (**)(void))(*v59 + 40))();
      }
      size_t v34 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a2, (uint64_t)"\n- ", 3);
      if ((v61 & 0x80u) == 0) {
        uint64_t v35 = v60;
      }
      else {
        uint64_t v35 = (void **)v60[0];
      }
      if ((v61 & 0x80u) == 0) {
        uint64_t v36 = v61;
      }
      else {
        uint64_t v36 = (uint64_t)v60[1];
      }
      unint64_t v37 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v34, (uint64_t)v35, v36);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v37, (uint64_t)":\n", 2);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a2, (uint64_t)"  Descriptor Size: ", 19);
      std::string::size_type v38 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v38, (uint64_t)"\n", 1);
      uint64_t v39 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a2, (uint64_t)"  Flags: ", 9);
      *(_DWORD *)((char *)v39 + *(void *)(*v39 - 24) + 8) = *(_DWORD *)((unsigned char *)v39 + *(void *)(*v39 - 24) + 8) & 0xFFFFFFB5 | 8;
      int v40 = (void *)std::ostream::operator<<();
      *(_DWORD *)((char *)v40 + *(void *)(*v40 - 24) + 8) = *(_DWORD *)((unsigned char *)v40 + *(void *)(*v40 - 24) + 8) & 0xFFFFFFB5 | 2;
      if (v14[1]) {
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a2, (uint64_t)" usesPayloadSpareBits", 21);
      }
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a2, (uint64_t)"\n", 1);
      if (v14[1])
      {
        uint64_t v41 = (unsigned __int16)v14[2];
        if ((unsigned __int16)v14[2])
        {
          if (v14[2] >= 0x10000)
          {
            std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a2, (uint64_t)"  Spare bit mask: (offset ", 26);
            uint64_t v42 = (void *)std::ostream::operator<<();
            uint64_t v43 = " bytes) 0x";
            uint64_t v44 = 10;
          }
          else
          {
            uint64_t v42 = a2;
            uint64_t v43 = "  Spare bit mask: 0x";
            uint64_t v44 = 20;
          }
          std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v42, (uint64_t)v43, v44);
          int v46 = v14[1];
          std::string v45 = v14 + 1;
          uint64_t v47 = v46 & 1;
          if (v46) {
            unsigned __int8 v48 = &v45[v47 + 1];
          }
          else {
            unsigned __int8 v48 = 0;
          }
          do
          {
            uint64_t v50 = *a2;
            *(_DWORD *)((char *)v6 + *(void *)(*a2 - 24)) = *(_DWORD *)((unsigned char *)v6 + *(void *)(*a2 - 24)) & 0xFFFFFFB5 | 8;
            *(void *)((char *)v5 + *(void *)(v50 - 24)) = 2;
            uint64_t v51 = (char *)a2 + *(void *)(v50 - 24);
            if (*((_DWORD *)v51 + 36) == -1)
            {
              std::ios_base::getloc((const std::ios_base *)((char *)a2 + *(void *)(v50 - 24)));
              unint64_t v52 = std::locale::use_facet((const std::locale *)__p, &std::ctype<char>::id);
              ((void (*)(const std::locale::facet *, uint64_t))v52->__vftable[2].~facet_0)(v52, 32);
              std::locale::~locale((std::locale *)__p);
            }
            *((_DWORD *)v51 + 36) = 48;
            char v49 = *(unsigned char *)v48;
            unsigned __int8 v48 = (int *)((char *)v48 + 1);
            LOBYTE(__p[0]) = v49;
            std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a2, (uint64_t)__p, 1);
            --v41;
          }
          while (v41);
          *(_DWORD *)((char *)v6 + *(void *)(*a2 - 24)) = *(_DWORD *)((unsigned char *)v6 + *(void *)(*a2 - 24)) & 0xFFFFFFB5 | 2;
          std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a2, (uint64_t)"\n", 1);
        }
      }
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a2, (uint64_t)"\n", 1);
      if ((char)v61 < 0) {
        operator delete(v60[0]);
      }
      *(_OWORD *)std::string __p = v63;
      __p[2] = v64;
      swift::Demangle::__runtime::NodeFactory::popCheckpoint((uint64_t)v62, (uint64_t)__p, v12, v13);
      swift::reflection::ReflectionSectionIteratorBase<swift::reflection::MultiPayloadEnumDescriptorIterator,swift::reflection::MultiPayloadEnumDescriptor>::operator++((uint64_t)v65);
      char v10 = &v63;
      if (!v66) {
        goto LABEL_7;
      }
    }
    char v53 = (swift::reflection::TypeRefBuilder::ReflectionTypeDescriptorFinder *)std::__throw_bad_function_call[abi:nn180100]();
    swift::reflection::TypeRefBuilder::ReflectionTypeDescriptorFinder::~ReflectionTypeDescriptorFinder(v53);
  }
}

void std::allocator<swift::reflection::FieldMetadata>::destroy[abi:nn180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 72);
  if (v3)
  {
    uint64_t v4 = *(void *)(a2 + 80);
    uint64_t v5 = *(void **)(a2 + 72);
    if (v4 != v3)
    {
      do
      {
        if (*(char *)(v4 - 1) < 0) {
          operator delete(*(void **)(v4 - 24));
        }
        v4 -= 24;
      }
      while (v4 != v3);
      uint64_t v5 = *(void **)(a2 + 72);
    }
    *(void *)(a2 + 80) = v3;
    operator delete(v5);
  }
  unint64_t v6 = (void **)(a2 + 48);
  std::vector<swift::reflection::PropertyTypeInfo>::__destroy_vector::operator()[abi:nn180100](&v6);
  if ((*(char *)(a2 + 47) & 0x80000000) == 0)
  {
    if ((*(char *)(a2 + 23) & 0x80000000) == 0) {
      return;
    }
LABEL_13:
    operator delete(*(void **)a2);
    return;
  }
  operator delete(*(void **)(a2 + 24));
  if (*(char *)(a2 + 23) < 0) {
    goto LABEL_13;
  }
}

void *std::__hash_table<std::__hash_value_type<unsigned long long,std::optional<std::string>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::optional<std::string>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::optional<std::string>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::optional<std::string>>>>::__emplace_unique_key_args<unsigned long long,std::pair<unsigned long long,std::optional<std::string>>>(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  unint64_t v6 = *a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = *a2;
      if (v6 >= v7) {
        unint64_t v3 = v6 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
    unint64_t v9 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      for (uint64_t i = *v9; i; uint64_t i = (void *)*i)
      {
        unint64_t v11 = i[1];
        if (v11 == v6)
        {
          if (i[2] == v6) {
            return i;
          }
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3) {
            break;
          }
        }
      }
    }
  }
  unint64_t v12 = (char *)operator new(0x38uLL);
  uint64_t i = v12;
  *(void *)unint64_t v12 = 0;
  *((void *)v12 + 1) = v6;
  *((void *)v12 + 2) = *(void *)a3;
  v12[24] = 0;
  v12[48] = 0;
  if (*(unsigned char *)(a3 + 32))
  {
    *(_OWORD *)(v12 + 24) = *(_OWORD *)(a3 + 8);
    *((void *)v12 + 5) = *(void *)(a3 + 24);
    *(void *)(a3 + 16) = 0;
    *(void *)(a3 + 24) = 0;
    *(void *)(a3 + 8) = 0;
    v12[48] = 1;
  }
  float v13 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v14 = *(float *)(a1 + 32);
  if (!v7 || (float)(v14 * (float)v7) < v13)
  {
    BOOL v15 = 1;
    if (v7 >= 3) {
      BOOL v15 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v7);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      size_t prime = v17;
    }
    else {
      size_t prime = v16;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v19 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v19) {
      goto LABEL_43;
    }
    if (prime < *(void *)&v19)
    {
      unint64_t v20 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v19 < 3uLL || (uint8x8_t v21 = (uint8x8_t)vcnt_s8(v19), v21.i16[0] = vaddlv_u8(v21), v21.u32[0] > 1uLL))
      {
        unint64_t v20 = std::__next_prime(v20);
      }
      else
      {
        uint64_t v22 = 1 << -(char)__clz(v20 - 1);
        if (v20 >= 2) {
          unint64_t v20 = v22;
        }
      }
      if (prime <= v20) {
        size_t prime = v20;
      }
      if (prime < *(void *)&v19) {
LABEL_43:
      }
        std::__hash_table<std::__hash_value_type<swift::reflection::TypeRefID,swift::reflection::ObjCClassTypeRef const*>,std::__unordered_map_hasher<swift::reflection::TypeRefID,std::__hash_value_type<swift::reflection::TypeRefID,swift::reflection::ObjCClassTypeRef const*>,swift::reflection::TypeRefID::Hash,swift::reflection::TypeRefID::Equal,true>,std::__unordered_map_equal<swift::reflection::TypeRefID,std::__hash_value_type<swift::reflection::TypeRefID,swift::reflection::ObjCClassTypeRef const*>,swift::reflection::TypeRefID::Equal,swift::reflection::TypeRefID::Hash,true>,std::allocator<std::__hash_value_type<swift::reflection::TypeRefID,swift::reflection::ObjCClassTypeRef const*>>>::__do_rehash<true>(a1, prime);
    }
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
  }
  uint64_t v23 = *(void *)a1;
  unint64_t v24 = *(void **)(*(void *)a1 + 8 * v3);
  if (v24)
  {
    void *i = *v24;
LABEL_57:
    *unint64_t v24 = i;
    goto LABEL_58;
  }
  void *i = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v23 + 8 * v3) = a1 + 16;
  if (*i)
  {
    unint64_t v25 = *(void *)(*i + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v25 >= v7) {
        v25 %= v7;
      }
    }
    else
    {
      v25 &= v7 - 1;
    }
    unint64_t v24 = (void *)(*(void *)a1 + 8 * v25);
    goto LABEL_57;
  }
LABEL_58:
  ++*(void *)(a1 + 24);
  return i;
}

char *std::__hash_table<std::__hash_value_type<unsigned long long,std::optional<std::string>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::optional<std::string>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::optional<std::string>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::optional<std::string>>>>::__emplace_unique_key_args<unsigned long long,std::pair<unsigned long long,std::string>>(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  unint64_t v6 = *a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = *a2;
      if (v6 >= v7) {
        unint64_t v3 = v6 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
    unint64_t v9 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      char v10 = (char *)*v9;
      if (*v9)
      {
        do
        {
          unint64_t v11 = *((void *)v10 + 1);
          if (v11 == v6)
          {
            if (*((void *)v10 + 2) == v6) {
              return v10;
            }
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7) {
                v11 %= v7;
              }
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3) {
              break;
            }
          }
          char v10 = *(char **)v10;
        }
        while (v10);
      }
    }
  }
  char v10 = (char *)operator new(0x38uLL);
  *(void *)char v10 = 0;
  *((void *)v10 + 1) = v6;
  *((void *)v10 + 2) = *(void *)a3;
  *(_OWORD *)(v10 + 24) = *(_OWORD *)(a3 + 8);
  *((void *)v10 + 5) = *(void *)(a3 + 24);
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)(a3 + 24) = 0;
  v10[48] = 1;
  float v12 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    BOOL v14 = 1;
    if (v7 >= 3) {
      BOOL v14 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v15 = v14 | (2 * v7);
    unint64_t v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16) {
      size_t prime = v16;
    }
    else {
      size_t prime = v15;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v18 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v18) {
      goto LABEL_41;
    }
    if (prime < *(void *)&v18)
    {
      unint64_t v19 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v18 < 3uLL || (uint8x8_t v20 = (uint8x8_t)vcnt_s8(v18), v20.i16[0] = vaddlv_u8(v20), v20.u32[0] > 1uLL))
      {
        unint64_t v19 = std::__next_prime(v19);
      }
      else
      {
        uint64_t v21 = 1 << -(char)__clz(v19 - 1);
        if (v19 >= 2) {
          unint64_t v19 = v21;
        }
      }
      if (prime <= v19) {
        size_t prime = v19;
      }
      if (prime < *(void *)&v18) {
LABEL_41:
      }
        std::__hash_table<std::__hash_value_type<swift::reflection::TypeRefID,swift::reflection::ObjCClassTypeRef const*>,std::__unordered_map_hasher<swift::reflection::TypeRefID,std::__hash_value_type<swift::reflection::TypeRefID,swift::reflection::ObjCClassTypeRef const*>,swift::reflection::TypeRefID::Hash,swift::reflection::TypeRefID::Equal,true>,std::__unordered_map_equal<swift::reflection::TypeRefID,std::__hash_value_type<swift::reflection::TypeRefID,swift::reflection::ObjCClassTypeRef const*>,swift::reflection::TypeRefID::Equal,swift::reflection::TypeRefID::Hash,true>,std::allocator<std::__hash_value_type<swift::reflection::TypeRefID,swift::reflection::ObjCClassTypeRef const*>>>::__do_rehash<true>(a1, prime);
    }
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
  }
  uint64_t v22 = *(void *)a1;
  uint64_t v23 = *(void **)(*(void *)a1 + 8 * v3);
  if (v23)
  {
    *(void *)char v10 = *v23;
LABEL_55:
    void *v23 = v10;
    goto LABEL_56;
  }
  *(void *)char v10 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v10;
  *(void *)(v22 + 8 * v3) = a1 + 16;
  if (*(void *)v10)
  {
    unint64_t v24 = *(void *)(*(void *)v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v24 >= v7) {
        v24 %= v7;
      }
    }
    else
    {
      v24 &= v7 - 1;
    }
    uint64_t v23 = (void *)(*(void *)a1 + 8 * v24);
    goto LABEL_55;
  }
LABEL_56:
  ++*(void *)(a1 + 24);
  return v10;
}

unint64_t *swift::reflection::ReflectionSectionIteratorBase<swift::reflection::AssociatedTypeIterator,swift::reflection::AssociatedTypeDescriptor>::ReflectionSectionIteratorBase(unint64_t *a1, unint64_t *a2, unint64_t a3, long long *a4)
{
  *a1 = a3;
  a1[1] = *a2;
  a1[2] = a2[1];
  a1[3] = a3;
  unint64_t v7 = (std::string *)(a1 + 4);
  if (*((char *)a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)a4, *((void *)a4 + 1));
    if (!a3) {
      return a1;
    }
  }
  else
  {
    long long v8 = *a4;
    v7->__r_.__value_.__r.__words[2] = *((void *)a4 + 2);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
    if (!a3) {
      return a1;
    }
  }
  unint64_t v9 = a1[2];
  if (!v9)
  {
LABEL_14:
    a1[3] = 0;
    return a1;
  }
  if ((unint64_t)(*(_DWORD *)(v9 + 12) * *(_DWORD *)(v9 + 8)) + 16 > a3)
  {
    char v10 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&std::cerr, (uint64_t)"!!! Reflection section too small to contain first record\n", 57);
    std::ios_base::getloc((const std::ios_base *)((char *)v10 + *(void *)(*v10 - 24)));
    unint64_t v11 = std::locale::use_facet(&v22, &std::ctype<char>::id);
    ((void (*)(const std::locale::facet *, uint64_t))v11->__vftable[2].~facet_0)(v11, 10);
    std::locale::~locale(&v22);
    std::ostream::put();
    std::ostream::flush();
    float v12 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&std::cerr, (uint64_t)"Section Type: ", 14);
    int v13 = *((char *)a4 + 23);
    if (v13 >= 0) {
      BOOL v14 = (const std::string::value_type *)a4;
    }
    else {
      BOOL v14 = *(const std::string::value_type **)a4;
    }
    if (v13 >= 0) {
      uint64_t v15 = *((unsigned __int8 *)a4 + 23);
    }
    else {
      uint64_t v15 = *((void *)a4 + 1);
    }
    unint64_t v16 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v12, (uint64_t)v14, v15);
    std::ios_base::getloc((const std::ios_base *)((char *)v16 + *(void *)(*v16 - 24)));
    unint64_t v17 = std::locale::use_facet(&v22, &std::ctype<char>::id);
    ((void (*)(const std::locale::facet *, uint64_t))v17->__vftable[2].~facet_0)(v17, 10);
    std::locale::~locale(&v22);
    std::ostream::put();
    std::ostream::flush();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&std::cerr, (uint64_t)"Section size: ", 14);
    int8x8_t v18 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v18, (uint64_t)", size of first record: ", 24);
    unint64_t v19 = (void *)std::ostream::operator<<();
    std::ios_base::getloc((const std::ios_base *)((char *)v19 + *(void *)(*v19 - 24)));
    uint8x8_t v20 = std::locale::use_facet(&v22, &std::ctype<char>::id);
    ((void (*)(const std::locale::facet *, uint64_t))v20->__vftable[2].~facet_0)(v20, 10);
    std::locale::~locale(&v22);
    std::ostream::put();
    std::ostream::flush();
    goto LABEL_14;
  }
  return a1;
}

void *std::__hash_table<std::__hash_value_type<swift::reflection::TypeRefID,swift::reflection::TypeRef const*>,std::__unordered_map_hasher<swift::reflection::TypeRefID,std::__hash_value_type<swift::reflection::TypeRefID,swift::reflection::TypeRef const*>,swift::reflection::TypeRefID::Hash,swift::reflection::TypeRefID::Equal,true>,std::__unordered_map_equal<swift::reflection::TypeRefID,std::__hash_value_type<swift::reflection::TypeRefID,swift::reflection::TypeRef const*>,swift::reflection::TypeRefID::Equal,swift::reflection::TypeRefID::Hash,true>,std::allocator<std::__hash_value_type<swift::reflection::TypeRefID,swift::reflection::TypeRef const*>>>::__emplace_unique_key_args<swift::reflection::TypeRefID,std::pair<swift::reflection::TypeRefID,swift::reflection::TypeRef const*>>(uint64_t a1, char **a2, long long *a3)
{
  unint64_t v7 = *a2;
  unint64_t v6 = a2[1];
  if (*a2 == v6)
  {
    unint64_t v8 = 0;
    unint64_t v11 = *(void *)(a1 + 8);
    if (!v11) {
      goto LABEL_24;
    }
  }
  else
  {
    unint64_t v8 = 0;
    unint64_t v9 = *a2;
    do
    {
      unsigned int v10 = *(_DWORD *)v9;
      v9 += 4;
      v8 ^= (v8 << 6) + (v8 >> 2) + 2654435769u + v10;
    }
    while (v9 != v6);
    unint64_t v11 = *(void *)(a1 + 8);
    if (!v11) {
      goto LABEL_24;
    }
  }
  uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
  v12.i16[0] = vaddlv_u8(v12);
  unint64_t v13 = v12.u32[0];
  if (v12.u32[0] > 1uLL)
  {
    unint64_t v3 = v8;
    if (v8 >= v11) {
      unint64_t v3 = v8 % v11;
    }
  }
  else
  {
    unint64_t v3 = (v11 - 1) & v8;
  }
  BOOL v14 = *(void ***)(*(void *)a1 + 8 * v3);
  if (v14)
  {
    uint64_t v15 = *v14;
    if (*v14)
    {
      size_t v16 = v6 - v7;
      do
      {
        unint64_t v17 = v15[1];
        if (v17 == v8)
        {
          int8x8_t v18 = (const void *)v15[2];
          if (v15[3] - (void)v18 == v16 && !memcmp(v18, v7, v16)) {
            return v15;
          }
        }
        else
        {
          if (v13 <= 1)
          {
            v17 &= v11 - 1;
          }
          else if (v17 >= v11)
          {
            v17 %= v11;
          }
          if (v17 != v3) {
            break;
          }
        }
        uint64_t v15 = (void *)*v15;
      }
      while (v15);
    }
  }
LABEL_24:
  uint64_t v15 = operator new(0x30uLL);
  long long v19 = *a3;
  *(void *)a3 = 0;
  *((void *)a3 + 1) = 0;
  uint64_t v20 = *((void *)a3 + 2);
  uint64_t v21 = *((void *)a3 + 3);
  *((void *)a3 + 2) = 0;
  void *v15 = 0;
  v15[1] = v8;
  *((_OWORD *)v15 + 1) = v19;
  v15[4] = v20;
  v15[5] = v21;
  float v22 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v23 = *(float *)(a1 + 32);
  if (!v11 || (float)(v23 * (float)v11) < v22)
  {
    BOOL v24 = 1;
    if (v11 >= 3) {
      BOOL v24 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v25 = v24 | (2 * v11);
    unint64_t v26 = vcvtps_u32_f32(v22 / v23);
    if (v25 <= v26) {
      size_t prime = v26;
    }
    else {
      size_t prime = v25;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v28 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v28) {
      goto LABEL_46;
    }
    if (prime < *(void *)&v28)
    {
      unint64_t v29 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v28 < 3uLL || (uint8x8_t v30 = (uint8x8_t)vcnt_s8(v28), v30.i16[0] = vaddlv_u8(v30), v30.u32[0] > 1uLL))
      {
        unint64_t v29 = std::__next_prime(v29);
      }
      else
      {
        uint64_t v31 = 1 << -(char)__clz(v29 - 1);
        if (v29 >= 2) {
          unint64_t v29 = v31;
        }
      }
      if (prime <= v29) {
        size_t prime = v29;
      }
      if (prime < *(void *)&v28) {
LABEL_46:
      }
        std::__hash_table<std::__hash_value_type<swift::reflection::TypeRefID,swift::reflection::ObjCClassTypeRef const*>,std::__unordered_map_hasher<swift::reflection::TypeRefID,std::__hash_value_type<swift::reflection::TypeRefID,swift::reflection::ObjCClassTypeRef const*>,swift::reflection::TypeRefID::Hash,swift::reflection::TypeRefID::Equal,true>,std::__unordered_map_equal<swift::reflection::TypeRefID,std::__hash_value_type<swift::reflection::TypeRefID,swift::reflection::ObjCClassTypeRef const*>,swift::reflection::TypeRefID::Equal,swift::reflection::TypeRefID::Hash,true>,std::allocator<std::__hash_value_type<swift::reflection::TypeRefID,swift::reflection::ObjCClassTypeRef const*>>>::__do_rehash<true>(a1, prime);
    }
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v8 >= v11) {
        unint64_t v3 = v8 % v11;
      }
      else {
        unint64_t v3 = v8;
      }
    }
    else
    {
      unint64_t v3 = (v11 - 1) & v8;
    }
  }
  uint64_t v32 = *(void *)a1;
  uint64_t v33 = *(void **)(*(void *)a1 + 8 * v3);
  if (v33)
  {
    void *v15 = *v33;
LABEL_60:
    void *v33 = v15;
    goto LABEL_61;
  }
  void *v15 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v15;
  *(void *)(v32 + 8 * v3) = a1 + 16;
  if (*v15)
  {
    unint64_t v34 = *(void *)(*v15 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v34 >= v11) {
        v34 %= v11;
      }
    }
    else
    {
      v34 &= v11 - 1;
    }
    uint64_t v33 = (void *)(*(void *)a1 + 8 * v34);
    goto LABEL_60;
  }
LABEL_61:
  ++*(void *)(a1 + 24);
  return v15;
}

unint64_t *swift::reflection::ReflectionSectionIteratorBase<swift::reflection::FieldDescriptorIterator,swift::reflection::TargetFieldDescriptor<swift::InProcess>>::ReflectionSectionIteratorBase(unint64_t *a1, unint64_t *a2, unint64_t a3, long long *a4)
{
  *a1 = a3;
  a1[1] = *a2;
  a1[2] = a2[1];
  a1[3] = a3;
  unint64_t v7 = (std::string *)(a1 + 4);
  if (*((char *)a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)a4, *((void *)a4 + 1));
    if (!a3) {
      return a1;
    }
  }
  else
  {
    long long v8 = *a4;
    v7->__r_.__value_.__r.__words[2] = *((void *)a4 + 2);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
    if (!a3) {
      return a1;
    }
  }
  unint64_t v9 = a1[2];
  if (!v9)
  {
LABEL_14:
    a1[3] = 0;
    return a1;
  }
  if ((unint64_t)(*(_DWORD *)(v9 + 12) * *(unsigned __int16 *)(v9 + 10)) + 16 > a3)
  {
    unsigned int v10 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&std::cerr, (uint64_t)"!!! Reflection section too small to contain first record\n", 57);
    std::ios_base::getloc((const std::ios_base *)((char *)v10 + *(void *)(*v10 - 24)));
    unint64_t v11 = std::locale::use_facet(&v22, &std::ctype<char>::id);
    ((void (*)(const std::locale::facet *, uint64_t))v11->__vftable[2].~facet_0)(v11, 10);
    std::locale::~locale(&v22);
    std::ostream::put();
    std::ostream::flush();
    uint8x8_t v12 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&std::cerr, (uint64_t)"Section Type: ", 14);
    int v13 = *((char *)a4 + 23);
    if (v13 >= 0) {
      BOOL v14 = (const std::string::value_type *)a4;
    }
    else {
      BOOL v14 = *(const std::string::value_type **)a4;
    }
    if (v13 >= 0) {
      uint64_t v15 = *((unsigned __int8 *)a4 + 23);
    }
    else {
      uint64_t v15 = *((void *)a4 + 1);
    }
    size_t v16 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v12, (uint64_t)v14, v15);
    std::ios_base::getloc((const std::ios_base *)((char *)v16 + *(void *)(*v16 - 24)));
    unint64_t v17 = std::locale::use_facet(&v22, &std::ctype<char>::id);
    ((void (*)(const std::locale::facet *, uint64_t))v17->__vftable[2].~facet_0)(v17, 10);
    std::locale::~locale(&v22);
    std::ostream::put();
    std::ostream::flush();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&std::cerr, (uint64_t)"Section size: ", 14);
    int8x8_t v18 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v18, (uint64_t)", size of first record: ", 24);
    long long v19 = (void *)std::ostream::operator<<();
    std::ios_base::getloc((const std::ios_base *)((char *)v19 + *(void *)(*v19 - 24)));
    uint64_t v20 = std::locale::use_facet(&v22, &std::ctype<char>::id);
    ((void (*)(const std::locale::facet *, uint64_t))v20->__vftable[2].~facet_0)(v20, 10);
    std::locale::~locale(&v22);
    std::ostream::put();
    std::ostream::flush();
    goto LABEL_14;
  }
  return a1;
}

char *__swift::__runtime::llvm::SmallVectorTemplateBase<std::string,false>::reserveForParamAndGetAddress(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(unsigned int *)(a1 + 8);
  unint64_t v5 = v4 + a3;
  if (v4 + a3 > (unint64_t)*(unsigned int *)(a1 + 12))
  {
    unint64_t v8 = *(void *)a1 + 24 * v4;
    if (*(void *)a1 <= a2 && v8 > a2)
    {
      uint64_t v20 = (uint64_t)(a2 - *(void *)a1) >> 3;
      unint64_t v32 = 0;
      uint64_t v21 = (char *)__swift::__runtime::llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, v5, 24, &v32);
      std::locale v22 = v21;
      float v23 = *(void **)a1;
      uint64_t v24 = *(unsigned int *)(a1 + 8);
      if (v24)
      {
        uint64_t v25 = 24 * v24;
        unint64_t v26 = v21;
        do
        {
          long long v27 = *(_OWORD *)v23;
          *((void *)v26 + 2) = v23[2];
          *(_OWORD *)unint64_t v26 = v27;
          v26 += 24;
          v23[1] = 0;
          unint64_t v23[2] = 0;
          void *v23 = 0;
          v23 += 3;
          v25 -= 24;
        }
        while (v25);
        float v23 = *(void **)a1;
        uint64_t v28 = *(unsigned int *)(a1 + 8);
        if (v28)
        {
          uint64_t v29 = 3 * v28;
          do
          {
            if (SHIBYTE(v23[v29 - 1]) < 0) {
              operator delete((void *)v23[v29 - 3]);
            }
            v29 -= 3;
          }
          while (v29 * 8);
          float v23 = *(void **)a1;
        }
      }
      unint64_t v30 = 0xAAAAAAAAAAAAAAABLL * v20;
      int v31 = v32;
      if (v23 != (void *)(a1 + 16)) {
        free(v23);
      }
      *(void *)a1 = v22;
      *(_DWORD *)(a1 + 12) = v31;
      return &v22[24 * v30];
    }
    else
    {
      unint64_t v32 = 0;
      unsigned int v10 = __swift::__runtime::llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, v5, 24, &v32);
      unint64_t v11 = v10;
      uint8x8_t v12 = *(void **)a1;
      uint64_t v13 = *(unsigned int *)(a1 + 8);
      if (v13)
      {
        uint64_t v14 = 24 * v13;
        uint64_t v15 = v10;
        do
        {
          long long v16 = *(_OWORD *)v12;
          v15[2] = v12[2];
          *(_OWORD *)uint64_t v15 = v16;
          v15 += 3;
          v12[1] = 0;
          void v12[2] = 0;
          *uint8x8_t v12 = 0;
          v12 += 3;
          v14 -= 24;
        }
        while (v14);
        uint8x8_t v12 = *(void **)a1;
        uint64_t v17 = *(unsigned int *)(a1 + 8);
        if (v17)
        {
          uint64_t v18 = 3 * v17;
          do
          {
            if (SHIBYTE(v12[v18 - 1]) < 0) {
              operator delete((void *)v12[v18 - 3]);
            }
            v18 -= 3;
          }
          while (v18 * 8);
          uint8x8_t v12 = *(void **)a1;
        }
      }
      int v19 = v32;
      if (v12 != (void *)(a1 + 16)) {
        free(v12);
      }
      *(void *)a1 = v11;
      *(_DWORD *)(a1 + 12) = v19;
    }
  }
  return (char *)a2;
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,swift::remote::RemoteRef<swift::reflection::TargetFieldDescriptor<swift::InProcess>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,swift::remote::RemoteRef<swift::reflection::TargetFieldDescriptor<swift::InProcess>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,swift::remote::RemoteRef<swift::reflection::TargetFieldDescriptor<swift::InProcess>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,swift::remote::RemoteRef<swift::reflection::TargetFieldDescriptor<swift::InProcess>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t a1, uint64_t a2, uint64_t a3, long long **a4)
{
  unint64_t v6 = (unsigned char *)a2;
  unint64_t v8 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v9 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v9 = v8;
  }
  unint64_t v10 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100]((uint64_t)&v39, (uint64_t *)a2, v9);
  unint64_t v11 = v10;
  unint64_t v12 = *(void *)(a1 + 8);
  if (v12)
  {
    uint8x8_t v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    unint64_t v14 = v13.u32[0];
    if (v13.u32[0] > 1uLL)
    {
      unint64_t v4 = v10;
      if (v10 >= v12) {
        unint64_t v4 = v10 % v12;
      }
    }
    else
    {
      unint64_t v4 = (v12 - 1) & v10;
    }
    uint64_t v15 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v15)
    {
      long long v16 = (unsigned __int8 *)*v15;
      if (*v15)
      {
        char v17 = v6[23];
        if (v17 >= 0) {
          uint64_t v18 = v6[23];
        }
        else {
          uint64_t v18 = *((void *)v6 + 1);
        }
        if (v17 < 0) {
          unint64_t v6 = *(unsigned char **)v6;
        }
        do
        {
          unint64_t v19 = *((void *)v16 + 1);
          if (v19 == v11)
          {
            uint64_t v20 = v16[39];
            if ((v20 & 0x80u) == 0) {
              uint64_t v21 = v16[39];
            }
            else {
              uint64_t v21 = *((void *)v16 + 3);
            }
            if (v21 == v18)
            {
              if ((v20 & 0x80) != 0)
              {
                if (!memcmp(*((const void **)v16 + 2), v6, *((void *)v16 + 3))) {
                  return v16;
                }
              }
              else
              {
                if (!v16[39]) {
                  return v16;
                }
                uint64_t v22 = 0;
                while (v16[v22 + 16] == v6[v22])
                {
                  if (v20 == ++v22) {
                    return v16;
                  }
                }
              }
            }
          }
          else
          {
            if (v14 <= 1)
            {
              v19 &= v12 - 1;
            }
            else if (v19 >= v12)
            {
              v19 %= v12;
            }
            if (v19 != v4) {
              break;
            }
          }
          long long v16 = *(unsigned __int8 **)v16;
        }
        while (v16);
      }
    }
  }
  long long v16 = (unsigned __int8 *)operator new(0x38uLL);
  *(void *)long long v16 = 0;
  *((void *)v16 + 1) = v11;
  float v23 = *a4;
  long long v24 = **a4;
  *((void *)v16 + 4) = *((void *)*a4 + 2);
  *((_OWORD *)v16 + 1) = v24;
  *((void *)v23 + 1) = 0;
  *((void *)v23 + 2) = 0;
  *(void *)float v23 = 0;
  *((void *)v16 + 5) = 0;
  *((void *)v16 + 6) = 0;
  float v25 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v26 = *(float *)(a1 + 32);
  if (!v12 || (float)(v26 * (float)v12) < v25)
  {
    BOOL v27 = 1;
    if (v12 >= 3) {
      BOOL v27 = (v12 & (v12 - 1)) != 0;
    }
    unint64_t v28 = v27 | (2 * v12);
    unint64_t v29 = vcvtps_u32_f32(v25 / v26);
    if (v28 <= v29) {
      size_t prime = v29;
    }
    else {
      size_t prime = v28;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v31 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v31) {
      goto LABEL_59;
    }
    if (prime < *(void *)&v31)
    {
      unint64_t v32 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v31 < 3uLL || (uint8x8_t v33 = (uint8x8_t)vcnt_s8(v31), v33.i16[0] = vaddlv_u8(v33), v33.u32[0] > 1uLL))
      {
        unint64_t v32 = std::__next_prime(v32);
      }
      else
      {
        uint64_t v34 = 1 << -(char)__clz(v32 - 1);
        if (v32 >= 2) {
          unint64_t v32 = v34;
        }
      }
      if (prime <= v32) {
        size_t prime = v32;
      }
      if (prime < *(void *)&v31) {
LABEL_59:
      }
        std::__hash_table<std::__hash_value_type<swift::reflection::TypeRefID,swift::reflection::ObjCClassTypeRef const*>,std::__unordered_map_hasher<swift::reflection::TypeRefID,std::__hash_value_type<swift::reflection::TypeRefID,swift::reflection::ObjCClassTypeRef const*>,swift::reflection::TypeRefID::Hash,swift::reflection::TypeRefID::Equal,true>,std::__unordered_map_equal<swift::reflection::TypeRefID,std::__hash_value_type<swift::reflection::TypeRefID,swift::reflection::ObjCClassTypeRef const*>,swift::reflection::TypeRefID::Equal,swift::reflection::TypeRefID::Hash,true>,std::allocator<std::__hash_value_type<swift::reflection::TypeRefID,swift::reflection::ObjCClassTypeRef const*>>>::__do_rehash<true>(a1, prime);
    }
    unint64_t v12 = *(void *)(a1 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12) {
        unint64_t v4 = v11 % v12;
      }
      else {
        unint64_t v4 = v11;
      }
    }
    else
    {
      unint64_t v4 = (v12 - 1) & v11;
    }
  }
  uint64_t v35 = *(void *)a1;
  uint64_t v36 = *(void **)(*(void *)a1 + 8 * v4);
  if (v36)
  {
    *(void *)long long v16 = *v36;
LABEL_73:
    void *v36 = v16;
    goto LABEL_74;
  }
  *(void *)long long v16 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v16;
  *(void *)(v35 + 8 * v4) = a1 + 16;
  if (*(void *)v16)
  {
    unint64_t v37 = *(void *)(*(void *)v16 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v37 >= v12) {
        v37 %= v12;
      }
    }
    else
    {
      v37 &= v12 - 1;
    }
    uint64_t v36 = (void *)(*(void *)a1 + 8 * v37);
    goto LABEL_73;
  }
LABEL_74:
  ++*(void *)(a1 + 24);
  return v16;
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100](uint64_t a1, uint64_t *a2, unint64_t a3)
{
  if (a3 > 0x20)
  {
    if (a3 <= 0x40)
    {
      uint64_t v6 = *(uint64_t *)((char *)a2 + a3 - 16);
      uint64_t v7 = *a2 - 0x3C5A37A36834CED9 * (v6 + a3);
      uint64_t v9 = a2[2];
      uint64_t v8 = a2[3];
      uint64_t v10 = __ROR8__(v7 + v8, 52);
      uint64_t v11 = v7 + a2[1];
      uint64_t v12 = __ROR8__(v11, 7);
      uint64_t v13 = v11 + v9;
      uint64_t v14 = *(uint64_t *)((char *)a2 + a3 - 32) + v9;
      uint64_t v15 = *(uint64_t *)((char *)a2 + a3 - 8) + v8;
      uint64_t v16 = __ROR8__(v15 + v14, 52);
      uint64_t v17 = v12 + __ROR8__(*a2 - 0x3C5A37A36834CED9 * (v6 + a3), 37) + v10 + __ROR8__(v13, 31);
      uint64_t v18 = *(uint64_t *)((char *)a2 + a3 - 24) + v14 + v6;
      uint64_t v19 = v18 + v15;
      unint64_t v20 = 0x9AE16A3B2F90404FLL;
      unint64_t v21 = 0xC3A5C85C97CB3127 * (v19 + v17)
          - 0x651E95C4D06FBFB1
          * (v13
           + v8
           + __ROR8__(v14, 37)
           + __ROR8__(*(uint64_t *)((char *)a2 + a3 - 24) + v14, 7)
           + v16
           + __ROR8__(v18, 31));
      unint64_t v22 = v17 - 0x3C5A37A36834CED9 * (v21 ^ (v21 >> 47));
      return (v22 ^ (v22 >> 47)) * v20;
    }
    uint64_t v29 = *(uint64_t *)((char *)a2 + a3 - 48);
    uint64_t v30 = *(uint64_t *)((char *)a2 + a3 - 40);
    uint64_t v31 = *(uint64_t *)((char *)a2 + a3 - 24);
    uint64_t v33 = *(uint64_t *)((char *)a2 + a3 - 64);
    uint64_t v32 = *(uint64_t *)((char *)a2 + a3 - 56);
    uint64_t v34 = *(uint64_t *)((char *)a2 + a3 - 16);
    uint64_t v35 = *(uint64_t *)((char *)a2 + a3 - 8);
    unint64_t v36 = v32 + v34;
    unint64_t v37 = 0x9DDFEA08EB382D69
        * (v31 ^ ((0x9DDFEA08EB382D69 * (v31 ^ (v29 + a3))) >> 47) ^ (0x9DDFEA08EB382D69 * (v31 ^ (v29 + a3))));
    unint64_t v38 = 0x9DDFEA08EB382D69 * (v37 ^ (v37 >> 47));
    unint64_t v39 = v33 + a3 + v32 + v29;
    uint64_t v40 = v39 + v30;
    unint64_t v41 = __ROR8__(v39, 44) + v33 + a3 + __ROR8__(v30 + v33 + a3 - 0x622015F714C7D297 * (v37 ^ (v37 >> 47)), 21);
    uint64_t v42 = v32 + v34 + *(uint64_t *)((char *)a2 + a3 - 32) - 0x4B6D499041670D8DLL;
    uint64_t v43 = v42 + v31 + v34;
    uint64_t v44 = __ROR8__(v43, 44);
    uint64_t v45 = v43 + v35;
    uint64_t v46 = v44 + v42 + __ROR8__(v42 + v30 + v35, 21);
    uint64_t v48 = *a2;
    uint64_t v47 = a2 + 4;
    unint64_t v49 = v48 - 0x4B6D499041670D8DLL * v30;
    uint64_t v50 = -(uint64_t)((a3 - 1) & 0xFFFFFFFFFFFFFFC0);
    do
    {
      uint64_t v51 = *(v47 - 3);
      uint64_t v52 = v49 + v40 + v36 + v51;
      uint64_t v53 = v47[2];
      uint64_t v54 = v47[3];
      uint64_t v55 = v47[1];
      unint64_t v36 = v55 + v40 - 0x4B6D499041670D8DLL * __ROR8__(v36 + v41 + v53, 42);
      uint64_t v56 = v38 + v45;
      uint64_t v57 = *(v47 - 2);
      uint64_t v58 = *(v47 - 1);
      uint64_t v59 = *(v47 - 4) - 0x4B6D499041670D8DLL * v41;
      uint64_t v60 = v59 + v45 + v58;
      uint64_t v61 = v59 + v51 + v57;
      uint64_t v40 = v61 + v58;
      uint64_t v62 = __ROR8__(v61, 44) + v59;
      unint64_t v63 = (0xB492B66FBE98F273 * __ROR8__(v52, 37)) ^ v46;
      unint64_t v49 = 0xB492B66FBE98F273 * __ROR8__(v56, 33);
      unint64_t v41 = v62 + __ROR8__(v60 + v63, 21);
      unint64_t v64 = v49 + v46 + *v47;
      uint64_t v45 = v64 + v55 + v53 + v54;
      uint64_t v46 = __ROR8__(v64 + v55 + v53, 44) + v64 + __ROR8__(v36 + v57 + v64 + v54, 21);
      v47 += 8;
      unint64_t v38 = v63;
      v50 += 64;
    }
    while (v50);
    unint64_t v65 = v49
        - 0x622015F714C7D297
        * ((0x9DDFEA08EB382D69
          * (v46 ^ ((0x9DDFEA08EB382D69 * (v46 ^ v41)) >> 47) ^ (0x9DDFEA08EB382D69 * (v46 ^ v41)))) ^ ((0x9DDFEA08EB382D69 * (v46 ^ ((0x9DDFEA08EB382D69 * (v46 ^ v41)) >> 47) ^ (0x9DDFEA08EB382D69 * (v46 ^ v41)))) >> 47));
    unint64_t v66 = 0x9DDFEA08EB382D69
        * (v65 ^ (v63
                - 0x4B6D499041670D8DLL * (v36 ^ (v36 >> 47))
                - 0x622015F714C7D297
                * ((0x9DDFEA08EB382D69
                  * (v45 ^ ((0x9DDFEA08EB382D69 * (v45 ^ v40)) >> 47) ^ (0x9DDFEA08EB382D69 * (v45 ^ v40)))) ^ ((0x9DDFEA08EB382D69 * (v45 ^ ((0x9DDFEA08EB382D69 * (v45 ^ v40)) >> 47) ^ (0x9DDFEA08EB382D69 * (v45 ^ v40)))) >> 47))));
    return 0x9DDFEA08EB382D69
         * ((0x9DDFEA08EB382D69 * (v65 ^ (v66 >> 47) ^ v66)) ^ ((0x9DDFEA08EB382D69 * (v65 ^ (v66 >> 47) ^ v66)) >> 47));
  }
  else
  {
    if (a3 > 0x10)
    {
      uint64_t v23 = a2[1];
      unint64_t v24 = 0xB492B66FBE98F273 * *a2;
      uint64_t v25 = __ROR8__(0x9AE16A3B2F90404FLL * *(uint64_t *)((char *)a2 + a3 - 8), 30) + __ROR8__(v24 - v23, 43);
      unint64_t v26 = v24
          + a3
          + __ROR8__(v23 ^ 0xC949D7C7509E6557, 20)
          - 0x9AE16A3B2F90404FLL * *(uint64_t *)((char *)a2 + a3 - 8);
      unint64_t v20 = 0x9DDFEA08EB382D69;
      unint64_t v27 = 0x9DDFEA08EB382D69 * ((v25 - 0x3C5A37A36834CED9 * *(uint64_t *)((char *)a2 + a3 - 16)) ^ v26);
      unint64_t v28 = v26 ^ (v27 >> 47) ^ v27;
LABEL_8:
      unint64_t v22 = 0x9DDFEA08EB382D69 * v28;
      return (v22 ^ (v22 >> 47)) * v20;
    }
    if (a3 >= 9)
    {
      uint64_t v3 = *(uint64_t *)((char *)a2 + a3 - 8);
      uint64_t v4 = __ROR8__(v3 + a3, a3);
      return (0x9DDFEA08EB382D69
            * ((0x9DDFEA08EB382D69
              * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *a2)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *a2)))) ^ ((0x9DDFEA08EB382D69 * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *a2)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *a2)))) >> 47))) ^ v3;
    }
    if (a3 >= 4)
    {
      uint64_t v67 = *(unsigned int *)((char *)a2 + a3 - 4);
      unint64_t v20 = 0x9DDFEA08EB382D69;
      unint64_t v68 = 0x9DDFEA08EB382D69 * (((8 * *(_DWORD *)a2) + a3) ^ v67);
      unint64_t v28 = v67 ^ (v68 >> 47) ^ v68;
      goto LABEL_8;
    }
    unint64_t result = 0x9AE16A3B2F90404FLL;
    if (a3)
    {
      unint64_t v69 = (0xC949D7C7509E6557 * (a3 + 4 * *((unsigned __int8 *)a2 + a3 - 1))) ^ (0x9AE16A3B2F90404FLL
                                                                                     * (*(unsigned __int8 *)a2 | ((unint64_t)*((unsigned __int8 *)a2 + (a3 >> 1)) << 8)));
      return 0x9AE16A3B2F90404FLL * (v69 ^ (v69 >> 47));
    }
  }
  return result;
}

uint64_t *__swift::__runtime::llvm::DenseMapBase<__swift::__runtime::llvm::DenseMap<unsigned long,__swift::__runtime::llvm::detail::DenseSetEmpty,__swift::__runtime::llvm::DenseMapInfo<unsigned long>,__swift::__runtime::llvm::detail::DenseSetPair<unsigned long>>,unsigned long,__swift::__runtime::llvm::detail::DenseSetEmpty,__swift::__runtime::llvm::DenseMapInfo<unsigned long>,__swift::__runtime::llvm::detail::DenseSetPair<unsigned long>>::InsertIntoBucket<unsigned long const&,__swift::__runtime::llvm::detail::DenseSetEmpty&>(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
LABEL_3:
    uint64_t v8 = *a2;
    goto LABEL_4;
  }
  __swift::__runtime::llvm::DenseMap<unsigned long,__swift::__runtime::llvm::detail::DenseSetEmpty,__swift::__runtime::llvm::DenseMapInfo<unsigned long>,__swift::__runtime::llvm::detail::DenseSetPair<unsigned long>>::grow(a1, v7);
  uint64_t v8 = *a3;
  int v10 = *(_DWORD *)(a1 + 16) - 1;
  unsigned int v11 = (37 * *a3) & v10;
  a2 = (uint64_t *)(*(void *)a1 + 8 * v11);
  uint64_t v12 = *a2;
  if (*a3 != *a2)
  {
    uint64_t v13 = 0;
    int v14 = 1;
    while (v12 != -1)
    {
      if (v13) {
        BOOL v15 = 0;
      }
      else {
        BOOL v15 = v12 == -2;
      }
      if (v15) {
        uint64_t v13 = a2;
      }
      unsigned int v16 = v11 + v14++;
      unsigned int v11 = v16 & v10;
      a2 = (uint64_t *)(*(void *)a1 + 8 * (v16 & v10));
      uint64_t v12 = *a2;
      if (v8 == *a2) {
        goto LABEL_4;
      }
    }
    if (v13) {
      a2 = v13;
    }
    goto LABEL_3;
  }
LABEL_4:
  ++*(_DWORD *)(a1 + 8);
  if (v8 != -1) {
    --*(_DWORD *)(a1 + 12);
  }
  *a2 = *a3;
  return a2;
}

void __swift::__runtime::llvm::DenseMap<unsigned long,__swift::__runtime::llvm::detail::DenseSetEmpty,__swift::__runtime::llvm::DenseMapInfo<unsigned long>,__swift::__runtime::llvm::detail::DenseSetPair<unsigned long>>::grow(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  uint64_t v4 = *(__swift::__runtime::llvm **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  buffer = (char *)__swift::__runtime::llvm::allocate_buffer(8 * v8, (std::align_val_t)8uLL);
  int v10 = buffer;
  *(void *)a1 = buffer;
  if (v4)
  {
    *(void *)(a1 + 8) = 0;
    uint64_t v11 = *(unsigned int *)(a1 + 16);
    if (v11) {
      memset(buffer, 255, 8 * v11);
    }
    if (v3)
    {
      int v12 = 0;
      int v13 = v11 - 1;
      int v14 = v4;
      do
      {
        uint64_t v17 = *(void *)v14;
        if (*(void *)v14 <= 0xFFFFFFFFFFFFFFFDLL)
        {
          unsigned int v18 = (37 * v17) & v13;
          unsigned int v16 = &v10[8 * v18];
          uint64_t v19 = *(void *)v16;
          if (v17 != *(void *)v16)
          {
            unint64_t v20 = 0;
            int v21 = 1;
            while (v19 != -1)
            {
              if (v20) {
                BOOL v22 = 0;
              }
              else {
                BOOL v22 = v19 == -2;
              }
              if (v22) {
                unint64_t v20 = v16;
              }
              unsigned int v23 = v18 + v21++;
              unsigned int v18 = v23 & v13;
              unsigned int v16 = &v10[8 * (v23 & v13)];
              uint64_t v19 = *(void *)v16;
              if (v17 == *(void *)v16) {
                goto LABEL_16;
              }
            }
            if (v20) {
              unsigned int v16 = v20;
            }
          }
LABEL_16:
          *(void *)unsigned int v16 = v17;
          *(_DWORD *)(a1 + 8) = ++v12;
        }
        int v14 = (__swift::__runtime::llvm *)((char *)v14 + 8);
      }
      while (v14 != (__swift::__runtime::llvm *)((char *)v4 + 8 * v3));
    }
    __swift::__runtime::llvm::deallocate_buffer(v4, (void *)(8 * v3), (std::align_val_t)8uLL);
  }
  else
  {
    *(void *)(a1 + 8) = 0;
    uint64_t v15 = *(unsigned int *)(a1 + 16);
    if (v15)
    {
      memset(buffer, 255, 8 * v15);
    }
  }
}

uint64_t *std::__hash_table<std::__hash_value_type<std::string,swift::remote::RemoteRef<swift::reflection::TargetFieldDescriptor<swift::InProcess>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,swift::remote::RemoteRef<swift::reflection::TargetFieldDescriptor<swift::InProcess>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,swift::remote::RemoteRef<swift::reflection::TargetFieldDescriptor<swift::InProcess>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,swift::remote::RemoteRef<swift::reflection::TargetFieldDescriptor<swift::InProcess>>>>>::find<std::string>(void *a1, uint64_t a2)
{
  uint64_t v2 = (unsigned char *)a2;
  unint64_t v4 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v5 = v4;
  }
  unint64_t v6 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100]((uint64_t)&v21, (uint64_t *)a2, v5);
  int8x8_t v7 = (int8x8_t)a1[1];
  if (!*(void *)&v7) {
    return 0;
  }
  unint64_t v8 = v6;
  uint8x8_t v9 = (uint8x8_t)vcnt_s8(v7);
  v9.i16[0] = vaddlv_u8(v9);
  unint64_t v10 = v9.u32[0];
  if (v9.u32[0] > 1uLL)
  {
    unint64_t v11 = v6;
    if (v6 >= *(void *)&v7) {
      unint64_t v11 = v6 % *(void *)&v7;
    }
  }
  else
  {
    unint64_t v11 = (*(void *)&v7 - 1) & v6;
  }
  int v12 = *(uint64_t ***)(*a1 + 8 * v11);
  if (!v12) {
    return 0;
  }
  int v13 = *v12;
  if (*v12)
  {
    char v14 = v2[23];
    if (v14 >= 0) {
      uint64_t v15 = v2[23];
    }
    else {
      uint64_t v15 = *((void *)v2 + 1);
    }
    if (v14 < 0) {
      uint64_t v2 = *(unsigned char **)v2;
    }
    do
    {
      unint64_t v16 = v13[1];
      if (v16 == v8)
      {
        uint64_t v17 = *((unsigned __int8 *)v13 + 39);
        if ((v17 & 0x80u) == 0) {
          uint64_t v18 = *((unsigned __int8 *)v13 + 39);
        }
        else {
          uint64_t v18 = v13[3];
        }
        if (v18 == v15)
        {
          if ((v17 & 0x80) != 0)
          {
            if (!memcmp((const void *)v13[2], v2, v13[3])) {
              return v13;
            }
          }
          else
          {
            if (!*((unsigned char *)v13 + 39)) {
              return v13;
            }
            uint64_t v19 = 0;
            while (*((unsigned __int8 *)v13 + v19 + 16) == v2[v19])
            {
              if (v17 == ++v19) {
                return v13;
              }
            }
          }
        }
      }
      else
      {
        if (v10 <= 1)
        {
          v16 &= *(void *)&v7 - 1;
        }
        else if (v16 >= *(void *)&v7)
        {
          v16 %= *(void *)&v7;
        }
        if (v16 != v11) {
          return 0;
        }
      }
      int v13 = (uint64_t *)*v13;
    }
    while (v13);
  }
  return v13;
}

void anonymous namespace'::FieldDescriptorImpl::~FieldDescriptorImpl(_anonymous_namespace_::FieldDescriptorImpl *this)
{
}

uint64_t anonymous namespace'::FieldDescriptorImpl::demangleSuperclass(_anonymous_namespace_::FieldDescriptorImpl *this)
{
  int v1 = (void *)*((void *)this + 4);
  uint64_t v2 = *(int *)(*((void *)this + 3) + 4);
  unint64_t v3 = *((void *)this + 2) + 4 + v2;
  if (!v2) {
    unint64_t v3 = 0;
  }
  unint64_t v4 = (void *)v1[211];
  unint64_t v5 = (void *)v1[212];
  if (v4 == v5)
  {
LABEL_21:
    unint64_t v10 = 0;
    unint64_t v3 = 0;
  }
  else
  {
    unint64_t v6 = v3 + 1;
    while (1)
    {
      unint64_t v7 = v4[12];
      if (v7 <= v3)
      {
        unint64_t v8 = v4[14] + v7;
        if (v6 <= v8) {
          break;
        }
      }
      unint64_t v7 = v4[15];
      if (v7 <= v3)
      {
        unint64_t v8 = v4[17] + v7;
        if (v6 <= v8)
        {
          uint8x8_t v9 = v4 + 16;
          if (v8 <= v3) {
            goto LABEL_21;
          }
          goto LABEL_13;
        }
      }
      v4 += 28;
      if (v4 == v5) {
        goto LABEL_21;
      }
    }
    uint8x8_t v9 = v4 + 13;
    if (v8 <= v3) {
      goto LABEL_21;
    }
LABEL_13:
    unint64_t v10 = (unsigned char *)(v3 - v7 + *v9);
    uint64_t v11 = (uint64_t)v10;
    unint64_t v12 = v3;
    while (1)
    {
      unsigned int v14 = *(unsigned __int8 *)v11;
      if (!*(unsigned char *)v11) {
        break;
      }
      if (v14 <= 0x17)
      {
        v12 += 5;
        uint64_t v13 = 5;
      }
      else if ((v14 & 0xF8) == 0x18)
      {
        uint64_t v13 = v11;
        uint64_t v11 = (*(_DWORD *)(v1[241] + 1944) + 1);
        v12 += v11;
      }
      else
      {
        ++v12;
        uint64_t v13 = 1;
      }
      v11 += v13;
      if (v12 >= v8) {
        goto LABEL_21;
      }
    }
    if (*v10 == 36 && v10[1] == 115)
    {
      v10 += 2;
      v3 += 2;
    }
  }
  v18[0] = v3;
  v18[1] = v10;
  char v19 = 1;
  uint64_t v15 = v1[247];
  if (v15) {
    return (*(uint64_t (**)(uint64_t, void *, char *))(*(void *)v15 + 48))(v15, v18, &v19);
  }
  uint64_t v17 = (_anonymous_namespace_::FieldDescriptorImpl *)std::__throw_bad_function_call[abi:nn180100]();
}

uint64_t anonymous namespace'::FieldDescriptorImpl::getFieldRecords@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  if (*(_DWORD *)(*(void *)(this + 24) + 12)) {
    operator new();
  }
  return this;
}

void anonymous namespace'::FieldRecordImpl::~FieldRecordImpl(_anonymous_namespace_::FieldRecordImpl *this)
{
}

unsigned char *anonymous namespace'::FieldRecordImpl::getFieldName(_anonymous_namespace_::FieldRecordImpl *this, const char *a2)
{
  uint64_t v2 = (void *)*((void *)this + 4);
  uint64_t v3 = *(int *)(*((void *)this + 3) + 8);
  unint64_t v4 = *((void *)this + 2) + 8 + v3;
  if (!v3) {
    unint64_t v4 = 0;
  }
  unint64_t v5 = (void *)v2[211];
  unint64_t v6 = (void *)v2[212];
  if (v5 == v6)
  {
LABEL_21:
    uint64_t v11 = 0;
  }
  else
  {
    unint64_t v7 = v4 + 1;
    while (1)
    {
      unint64_t v8 = v5[12];
      if (v8 <= v4)
      {
        unint64_t v9 = v5[14] + v8;
        if (v7 <= v9) {
          break;
        }
      }
      unint64_t v8 = v5[15];
      if (v8 <= v4)
      {
        unint64_t v9 = v5[17] + v8;
        if (v7 <= v9)
        {
          unint64_t v10 = v5 + 16;
          if (v9 <= v4) {
            goto LABEL_21;
          }
          goto LABEL_13;
        }
      }
      v5 += 28;
      if (v5 == v6) {
        goto LABEL_21;
      }
    }
    unint64_t v10 = v5 + 13;
    if (v9 <= v4) {
      goto LABEL_21;
    }
LABEL_13:
    uint64_t v11 = (unsigned char *)(v4 - v8 + *v10);
    uint64_t v12 = (uint64_t)v11;
    while (1)
    {
      unsigned int v14 = *(unsigned __int8 *)v12;
      if (!*(unsigned char *)v12) {
        break;
      }
      if (v14 <= 0x17)
      {
        v4 += 5;
        uint64_t v13 = 5;
      }
      else if ((v14 & 0xF8) == 0x18)
      {
        uint64_t v13 = v12;
        uint64_t v12 = (*(_DWORD *)(v2[241] + 1944) + 1);
        v4 += v12;
      }
      else
      {
        ++v4;
        uint64_t v13 = 1;
      }
      v12 += v13;
      if (v4 >= v9) {
        goto LABEL_21;
      }
    }
    if (*v11 == 36 && v11[1] == 115) {
      v11 += 2;
    }
  }
  return swift::Demangle::__runtime::makeSymbolicMangledNameStringRef(v11, a2);
}

char *anonymous namespace'::FieldRecordImpl::getDemangledTypeName(_anonymous_namespace_::FieldRecordImpl *this)
{
  int v1 = (void *)*((void *)this + 4);
  uint64_t v2 = *(int *)(*((void *)this + 3) + 4);
  unint64_t v3 = *((void *)this + 2) + 4 + v2;
  if (!v2) {
    unint64_t v3 = 0;
  }
  unint64_t v4 = (void *)v1[211];
  unint64_t v5 = (void *)v1[212];
  if (v4 == v5)
  {
LABEL_21:
    unint64_t v10 = 0;
    unint64_t v3 = 0;
  }
  else
  {
    unint64_t v6 = v3 + 1;
    while (1)
    {
      unint64_t v7 = v4[12];
      if (v7 <= v3)
      {
        unint64_t v8 = v4[14] + v7;
        if (v6 <= v8) {
          break;
        }
      }
      unint64_t v7 = v4[15];
      if (v7 <= v3)
      {
        unint64_t v8 = v4[17] + v7;
        if (v6 <= v8)
        {
          unint64_t v9 = v4 + 16;
          if (v8 <= v3) {
            goto LABEL_21;
          }
          goto LABEL_13;
        }
      }
      v4 += 28;
      if (v4 == v5) {
        goto LABEL_21;
      }
    }
    unint64_t v9 = v4 + 13;
    if (v8 <= v3) {
      goto LABEL_21;
    }
LABEL_13:
    unint64_t v10 = (unsigned char *)(v3 - v7 + *v9);
    uint64_t v11 = (uint64_t)v10;
    unint64_t v12 = v3;
    while (1)
    {
      unsigned int v14 = *(unsigned __int8 *)v11;
      if (!*(unsigned char *)v11) {
        break;
      }
      if (v14 <= 0x17)
      {
        v12 += 5;
        uint64_t v13 = 5;
      }
      else if ((v14 & 0xF8) == 0x18)
      {
        uint64_t v13 = v11;
        uint64_t v11 = (*(_DWORD *)(v1[241] + 1944) + 1);
        v12 += v11;
      }
      else
      {
        ++v12;
        uint64_t v13 = 1;
      }
      v11 += v13;
      if (v12 >= v8) {
        goto LABEL_21;
      }
    }
    if (*v10 == 36 && v10[1] == 115)
    {
      v10 += 2;
      v3 += 2;
    }
  }
  v19[0] = v3;
  v19[1] = v10;
  char v20 = 1;
  uint64_t v15 = v1[247];
  if (v15) {
    return (char *)(*(uint64_t (**)(uint64_t, void *, char *))(*(void *)v15 + 48))(v15, v19, &v20);
  }
  uint64_t v17 = (void **)std::__throw_bad_function_call[abi:nn180100]();
  return std::vector<swift::reflection::FieldTypeInfo>::__push_back_slow_path<swift::reflection::FieldTypeInfo>(v17, v18);
}

char *std::vector<swift::reflection::FieldTypeInfo>::__push_back_slow_path<swift::reflection::FieldTypeInfo>(void **a1, uint64_t a2)
{
  unint64_t v2 = 0xAAAAAAAAAAAAAAABLL * (((unsigned char *)a1[1] - (unsigned char *)*a1) >> 4);
  unint64_t v3 = v2 + 1;
  if (v2 + 1 > 0x555555555555555) {
    abort();
  }
  if (0x5555555555555556 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 4) > v3) {
    unint64_t v3 = 0x5555555555555556 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v6 = 0x555555555555555;
  }
  else {
    unint64_t v6 = v3;
  }
  if (v6)
  {
    if (v6 > 0x555555555555555) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    unint64_t v7 = (char *)operator new(48 * v6);
  }
  else
  {
    unint64_t v7 = 0;
  }
  unint64_t v8 = &v7[48 * v2];
  unint64_t v9 = &v7[48 * v6];
  *(_OWORD *)unint64_t v8 = *(_OWORD *)a2;
  *((void *)v8 + 2) = *(void *)(a2 + 16);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  *(_OWORD *)(v8 + 24) = *(_OWORD *)(a2 + 24);
  *((_WORD *)v8 + 20) = *(_WORD *)(a2 + 40);
  unint64_t v10 = v8 + 48;
  uint64_t v11 = (void **)*a1;
  unint64_t v12 = (void **)a1[1];
  if (v12 == *a1)
  {
    *a1 = v8;
    a1[1] = v10;
    a1[2] = v9;
  }
  else
  {
    do
    {
      long long v13 = *((_OWORD *)v12 - 3);
      *((void *)v8 - 4) = *(v12 - 4);
      *((_OWORD *)v8 - 3) = v13;
      *(v12 - 5) = 0;
      *(v12 - 4) = 0;
      *(v12 - 6) = 0;
      long long v14 = *(_OWORD *)(v12 - 3);
      *((_WORD *)v8 - 4) = *((_WORD *)v12 - 4);
      *(_OWORD *)(v8 - 24) = v14;
      v8 -= 48;
      v12 -= 6;
    }
    while (v12 != v11);
    unint64_t v12 = (void **)*a1;
    uint64_t v15 = (void **)a1[1];
    *a1 = v8;
    a1[1] = v10;
    a1[2] = v9;
    while (v15 != v12)
    {
      if (*((char *)v15 - 25) < 0) {
        operator delete(*(v15 - 6));
      }
      v15 -= 6;
    }
  }
  if (v12) {
    operator delete(v12);
  }
  return v10;
}

char *std::vector<swift::reflection::FieldTypeInfo>::__push_back_slow_path<swift::reflection::FieldTypeInfo const&>(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(void ***)a1;
  unint64_t v3 = *(void ***)(a1 + 8);
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v3 - *(void *)a1) >> 4);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x555555555555555) {
    abort();
  }
  if (0x5555555555555556 * ((uint64_t)(*(void *)(a1 + 16) - (void)v2) >> 4) > v5) {
    unint64_t v5 = 0x5555555555555556 * ((uint64_t)(*(void *)(a1 + 16) - (void)v2) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 16) - (void)v2) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v8 = 0x555555555555555;
  }
  else {
    unint64_t v8 = v5;
  }
  if (v8)
  {
    if (v8 > 0x555555555555555) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    unint64_t v9 = (std::string *)operator new(48 * v8);
  }
  else
  {
    unint64_t v9 = 0;
  }
  unint64_t v10 = v9 + 2 * v4;
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9 + 2 * v4, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
    unint64_t v2 = *(void ***)a1;
    unint64_t v3 = *(void ***)(a1 + 8);
  }
  else
  {
    *(_OWORD *)&v10->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    v10->__r_.__value_.__r.__words[2] = *(void *)(a2 + 16);
  }
  uint64_t v11 = &v9[2 * v8];
  unint64_t v12 = v9 + 2 * v4;
  *(_OWORD *)&v12[1].__r_.__value_.__l.__data_ = *(_OWORD *)(a2 + 24);
  LOWORD(v12[1].__r_.__value_.__r.__words[2]) = *(_WORD *)(a2 + 40);
  long long v13 = (char *)&v10[2];
  if (v3 == v2)
  {
    *(void *)a1 = v10;
    *(void *)(a1 + 8) = v13;
    *(void *)(a1 + 16) = v11;
  }
  else
  {
    do
    {
      long long v14 = *((_OWORD *)v3 - 3);
      v10[-2].__r_.__value_.__r.__words[2] = (std::string::size_type)*(v3 - 4);
      *(_OWORD *)&v10[-2].__r_.__value_.__l.__data_ = v14;
      *(v3 - 5) = 0;
      *(v3 - 4) = 0;
      *(v3 - 6) = 0;
      long long v15 = *(_OWORD *)(v3 - 3);
      LOWORD(v10[-1].__r_.__value_.__r.__words[2]) = *((_WORD *)v3 - 4);
      *(_OWORD *)&v10[-1].__r_.__value_.__l.__data_ = v15;
      v10 -= 2;
      v3 -= 6;
    }
    while (v3 != v2);
    unint64_t v2 = *(void ***)a1;
    unint64_t v16 = *(void ***)(a1 + 8);
    *(void *)a1 = v10;
    *(void *)(a1 + 8) = v13;
    *(void *)(a1 + 16) = v11;
    while (v16 != v2)
    {
      if (*((char *)v16 - 25) < 0) {
        operator delete(*(v16 - 6));
      }
      v16 -= 6;
    }
  }
  if (v2) {
    operator delete(v2);
  }
  return v13;
}

unint64_t *swift::reflection::ReflectionSectionIteratorBase<swift::reflection::BuiltinTypeDescriptorIterator,swift::reflection::BuiltinTypeDescriptor>::ReflectionSectionIteratorBase(unint64_t *a1, unint64_t *a2, unint64_t a3, long long *a4)
{
  *a1 = a3;
  a1[1] = *a2;
  a1[2] = a2[1];
  a1[3] = a3;
  unint64_t v7 = (std::string *)(a1 + 4);
  if (*((char *)a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)a4, *((void *)a4 + 1));
    if (!a3) {
      return a1;
    }
  }
  else
  {
    long long v8 = *a4;
    v7->__r_.__value_.__r.__words[2] = *((void *)a4 + 2);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
    if (!a3) {
      return a1;
    }
  }
  if (!a1[2])
  {
LABEL_14:
    a1[3] = 0;
    return a1;
  }
  if (a3 <= 0x13)
  {
    unint64_t v9 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&std::cerr, (uint64_t)"!!! Reflection section too small to contain first record\n", 57);
    std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(void *)(*v9 - 24)));
    unint64_t v10 = std::locale::use_facet(&v21, &std::ctype<char>::id);
    ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
    std::locale::~locale(&v21);
    std::ostream::put();
    std::ostream::flush();
    uint64_t v11 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&std::cerr, (uint64_t)"Section Type: ", 14);
    int v12 = *((char *)a4 + 23);
    if (v12 >= 0) {
      long long v13 = (const std::string::value_type *)a4;
    }
    else {
      long long v13 = *(const std::string::value_type **)a4;
    }
    if (v12 >= 0) {
      uint64_t v14 = *((unsigned __int8 *)a4 + 23);
    }
    else {
      uint64_t v14 = *((void *)a4 + 1);
    }
    long long v15 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v11, (uint64_t)v13, v14);
    std::ios_base::getloc((const std::ios_base *)((char *)v15 + *(void *)(*v15 - 24)));
    unint64_t v16 = std::locale::use_facet(&v21, &std::ctype<char>::id);
    ((void (*)(const std::locale::facet *, uint64_t))v16->__vftable[2].~facet_0)(v16, 10);
    std::locale::~locale(&v21);
    std::ostream::put();
    std::ostream::flush();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&std::cerr, (uint64_t)"Section size: ", 14);
    uint64_t v17 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v17, (uint64_t)", size of first record: ", 24);
    uint64_t v18 = (void *)std::ostream::operator<<();
    std::ios_base::getloc((const std::ios_base *)((char *)v18 + *(void *)(*v18 - 24)));
    char v19 = std::locale::use_facet(&v21, &std::ctype<char>::id);
    ((void (*)(const std::locale::facet *, uint64_t))v19->__vftable[2].~facet_0)(v19, 10);
    std::locale::~locale(&v21);
    std::ostream::put();
    std::ostream::flush();
    goto LABEL_14;
  }
  return a1;
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,swift::remote::RemoteRef<swift::reflection::BuiltinTypeDescriptor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,swift::remote::RemoteRef<swift::reflection::BuiltinTypeDescriptor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,swift::remote::RemoteRef<swift::reflection::BuiltinTypeDescriptor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,swift::remote::RemoteRef<swift::reflection::BuiltinTypeDescriptor>>>>::__emplace_unique_key_args<std::string,std::pair<std::string,swift::remote::RemoteRef<swift::reflection::BuiltinTypeDescriptor>>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5 = (unsigned char *)a2;
  unint64_t v7 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v8 = v7;
  }
  unint64_t v9 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100]((uint64_t)&v37, (uint64_t *)a2, v8);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v3 = v9;
      if (v9 >= v11) {
        unint64_t v3 = v9 % v11;
      }
    }
    else
    {
      unint64_t v3 = (v11 - 1) & v9;
    }
    uint64_t v14 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v14)
    {
      long long v15 = (unsigned __int8 *)*v14;
      if (*v14)
      {
        char v16 = v5[23];
        if (v16 >= 0) {
          uint64_t v17 = v5[23];
        }
        else {
          uint64_t v17 = *((void *)v5 + 1);
        }
        if (v16 < 0) {
          unint64_t v5 = *(unsigned char **)v5;
        }
        do
        {
          unint64_t v18 = *((void *)v15 + 1);
          if (v18 == v10)
          {
            uint64_t v19 = v15[39];
            if ((v19 & 0x80u) == 0) {
              uint64_t v20 = v15[39];
            }
            else {
              uint64_t v20 = *((void *)v15 + 3);
            }
            if (v20 == v17)
            {
              if ((v19 & 0x80) != 0)
              {
                if (!memcmp(*((const void **)v15 + 2), v5, *((void *)v15 + 3))) {
                  return v15;
                }
              }
              else
              {
                if (!v15[39]) {
                  return v15;
                }
                uint64_t v21 = 0;
                while (v15[v21 + 16] == v5[v21])
                {
                  if (v19 == ++v21) {
                    return v15;
                  }
                }
              }
            }
          }
          else
          {
            if (v13 <= 1)
            {
              v18 &= v11 - 1;
            }
            else if (v18 >= v11)
            {
              v18 %= v11;
            }
            if (v18 != v3) {
              break;
            }
          }
          long long v15 = *(unsigned __int8 **)v15;
        }
        while (v15);
      }
    }
  }
  long long v15 = (unsigned __int8 *)operator new(0x38uLL);
  *(void *)long long v15 = 0;
  *((void *)v15 + 1) = v10;
  long long v22 = *(_OWORD *)(a3 + 16);
  *((_OWORD *)v15 + 1) = *(_OWORD *)a3;
  *((_OWORD *)v15 + 2) = v22;
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *((void *)v15 + 6) = *(void *)(a3 + 32);
  float v23 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v24 = *(float *)(a1 + 32);
  if (!v11 || (float)(v24 * (float)v11) < v23)
  {
    BOOL v25 = 1;
    if (v11 >= 3) {
      BOOL v25 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v26 = v25 | (2 * v11);
    unint64_t v27 = vcvtps_u32_f32(v23 / v24);
    if (v26 <= v27) {
      size_t prime = v27;
    }
    else {
      size_t prime = v26;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v29 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v29) {
      goto LABEL_59;
    }
    if (prime < *(void *)&v29)
    {
      unint64_t v30 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v29 < 3uLL || (uint8x8_t v31 = (uint8x8_t)vcnt_s8(v29), v31.i16[0] = vaddlv_u8(v31), v31.u32[0] > 1uLL))
      {
        unint64_t v30 = std::__next_prime(v30);
      }
      else
      {
        uint64_t v32 = 1 << -(char)__clz(v30 - 1);
        if (v30 >= 2) {
          unint64_t v30 = v32;
        }
      }
      if (prime <= v30) {
        size_t prime = v30;
      }
      if (prime < *(void *)&v29) {
LABEL_59:
      }
        std::__hash_table<std::__hash_value_type<swift::reflection::TypeRefID,swift::reflection::ObjCClassTypeRef const*>,std::__unordered_map_hasher<swift::reflection::TypeRefID,std::__hash_value_type<swift::reflection::TypeRefID,swift::reflection::ObjCClassTypeRef const*>,swift::reflection::TypeRefID::Hash,swift::reflection::TypeRefID::Equal,true>,std::__unordered_map_equal<swift::reflection::TypeRefID,std::__hash_value_type<swift::reflection::TypeRefID,swift::reflection::ObjCClassTypeRef const*>,swift::reflection::TypeRefID::Equal,swift::reflection::TypeRefID::Hash,true>,std::allocator<std::__hash_value_type<swift::reflection::TypeRefID,swift::reflection::ObjCClassTypeRef const*>>>::__do_rehash<true>(a1, prime);
    }
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v3 = v10 % v11;
      }
      else {
        unint64_t v3 = v10;
      }
    }
    else
    {
      unint64_t v3 = (v11 - 1) & v10;
    }
  }
  uint64_t v33 = *(void *)a1;
  uint64_t v34 = *(void **)(*(void *)a1 + 8 * v3);
  if (v34)
  {
    *(void *)long long v15 = *v34;
LABEL_73:
    void *v34 = v15;
    goto LABEL_74;
  }
  *(void *)long long v15 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v15;
  *(void *)(v33 + 8 * v3) = a1 + 16;
  if (*(void *)v15)
  {
    unint64_t v35 = *(void *)(*(void *)v15 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v35 >= v11) {
        v35 %= v11;
      }
    }
    else
    {
      v35 &= v11 - 1;
    }
    uint64_t v34 = (void *)(*(void *)a1 + 8 * v35);
    goto LABEL_73;
  }
LABEL_74:
  ++*(void *)(a1 + 24);
  return v15;
}

void anonymous namespace'::BuiltinTypeDescriptorImpl::~BuiltinTypeDescriptorImpl(_anonymous_namespace_::BuiltinTypeDescriptorImpl *this)
{
}

unsigned char *anonymous namespace'::BuiltinTypeDescriptorImpl::getMangledTypeName(_anonymous_namespace_::BuiltinTypeDescriptorImpl *this, const char *a2)
{
  unint64_t v2 = (void *)*((void *)this + 6);
  uint64_t v3 = **((int **)this + 5);
  unint64_t v4 = *((void *)this + 4) + v3;
  if (!v3) {
    unint64_t v4 = 0;
  }
  unint64_t v5 = (void *)v2[211];
  unint64_t v6 = (void *)v2[212];
  if (v5 == v6)
  {
LABEL_21:
    unint64_t v11 = 0;
  }
  else
  {
    unint64_t v7 = v4 + 1;
    while (1)
    {
      unint64_t v8 = v5[12];
      if (v8 <= v4)
      {
        unint64_t v9 = v5[14] + v8;
        if (v7 <= v9) {
          break;
        }
      }
      unint64_t v8 = v5[15];
      if (v8 <= v4)
      {
        unint64_t v9 = v5[17] + v8;
        if (v7 <= v9)
        {
          unint64_t v10 = v5 + 16;
          if (v9 <= v4) {
            goto LABEL_21;
          }
          goto LABEL_13;
        }
      }
      v5 += 28;
      if (v5 == v6) {
        goto LABEL_21;
      }
    }
    unint64_t v10 = v5 + 13;
    if (v9 <= v4) {
      goto LABEL_21;
    }
LABEL_13:
    unint64_t v11 = (unsigned char *)(v4 - v8 + *v10);
    uint64_t v12 = (uint64_t)v11;
    while (1)
    {
      unsigned int v14 = *(unsigned __int8 *)v12;
      if (!*(unsigned char *)v12) {
        break;
      }
      if (v14 <= 0x17)
      {
        v4 += 5;
        uint64_t v13 = 5;
      }
      else if ((v14 & 0xF8) == 0x18)
      {
        uint64_t v13 = v12;
        uint64_t v12 = (*(_DWORD *)(v2[241] + 1944) + 1);
        v4 += v12;
      }
      else
      {
        ++v4;
        uint64_t v13 = 1;
      }
      v12 += v13;
      if (v4 >= v9) {
        goto LABEL_21;
      }
    }
    if (*v11 == 36 && v11[1] == 115) {
      v11 += 2;
    }
  }
  return swift::Demangle::__runtime::makeSymbolicMangledNameStringRef(v11, a2);
}

unint64_t *swift::reflection::ReflectionSectionIteratorBase<swift::reflection::MultiPayloadEnumDescriptorIterator,swift::reflection::MultiPayloadEnumDescriptor>::ReflectionSectionIteratorBase(unint64_t *a1, unint64_t *a2, unint64_t a3, long long *a4)
{
  *a1 = a3;
  a1[1] = *a2;
  a1[2] = a2[1];
  a1[3] = a3;
  unint64_t v7 = (std::string *)(a1 + 4);
  if (*((char *)a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)a4, *((void *)a4 + 1));
    if (!a3) {
      return a1;
    }
  }
  else
  {
    long long v8 = *a4;
    v7->__r_.__value_.__r.__words[2] = *((void *)a4 + 2);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
    if (!a3) {
      return a1;
    }
  }
  unint64_t v9 = a1[2];
  if (!v9)
  {
LABEL_14:
    a1[3] = 0;
    return a1;
  }
  if ((((unint64_t)*(unsigned int *)(v9 + 4) >> 14) & 0x3FFFC) + 4 > a3)
  {
    unint64_t v10 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&std::cerr, (uint64_t)"!!! Reflection section too small to contain first record\n", 57);
    std::ios_base::getloc((const std::ios_base *)((char *)v10 + *(void *)(*v10 - 24)));
    unint64_t v11 = std::locale::use_facet(&v22, &std::ctype<char>::id);
    ((void (*)(const std::locale::facet *, uint64_t))v11->__vftable[2].~facet_0)(v11, 10);
    std::locale::~locale(&v22);
    std::ostream::put();
    std::ostream::flush();
    uint64_t v12 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&std::cerr, (uint64_t)"Section Type: ", 14);
    int v13 = *((char *)a4 + 23);
    if (v13 >= 0) {
      unsigned int v14 = (const std::string::value_type *)a4;
    }
    else {
      unsigned int v14 = *(const std::string::value_type **)a4;
    }
    if (v13 >= 0) {
      uint64_t v15 = *((unsigned __int8 *)a4 + 23);
    }
    else {
      uint64_t v15 = *((void *)a4 + 1);
    }
    char v16 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v12, (uint64_t)v14, v15);
    std::ios_base::getloc((const std::ios_base *)((char *)v16 + *(void *)(*v16 - 24)));
    uint64_t v17 = std::locale::use_facet(&v22, &std::ctype<char>::id);
    ((void (*)(const std::locale::facet *, uint64_t))v17->__vftable[2].~facet_0)(v17, 10);
    std::locale::~locale(&v22);
    std::ostream::put();
    std::ostream::flush();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&std::cerr, (uint64_t)"Section size: ", 14);
    unint64_t v18 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v18, (uint64_t)", size of first record: ", 24);
    uint64_t v19 = (void *)std::ostream::operator<<();
    std::ios_base::getloc((const std::ios_base *)((char *)v19 + *(void *)(*v19 - 24)));
    uint64_t v20 = std::locale::use_facet(&v22, &std::ctype<char>::id);
    ((void (*)(const std::locale::facet *, uint64_t))v20->__vftable[2].~facet_0)(v20, 10);
    std::locale::~locale(&v22);
    std::ostream::put();
    std::ostream::flush();
    goto LABEL_14;
  }
  return a1;
}

void anonymous namespace'::MultiPayloadEnumDescriptorImpl::~MultiPayloadEnumDescriptorImpl(_anonymous_namespace_::MultiPayloadEnumDescriptorImpl *this)
{
}

unsigned char *anonymous namespace'::MultiPayloadEnumDescriptorImpl::getMangledTypeName(_anonymous_namespace_::MultiPayloadEnumDescriptorImpl *this, const char *a2)
{
  unint64_t v2 = (void *)*((void *)this + 3);
  uint64_t v3 = **((int **)this + 2);
  unint64_t v4 = *((void *)this + 1) + v3;
  if (!v3) {
    unint64_t v4 = 0;
  }
  unint64_t v5 = (void *)v2[211];
  unint64_t v6 = (void *)v2[212];
  if (v5 == v6)
  {
LABEL_21:
    unint64_t v11 = 0;
  }
  else
  {
    unint64_t v7 = v4 + 1;
    while (1)
    {
      unint64_t v8 = v5[12];
      if (v8 <= v4)
      {
        unint64_t v9 = v5[14] + v8;
        if (v7 <= v9) {
          break;
        }
      }
      unint64_t v8 = v5[15];
      if (v8 <= v4)
      {
        unint64_t v9 = v5[17] + v8;
        if (v7 <= v9)
        {
          unint64_t v10 = v5 + 16;
          if (v9 <= v4) {
            goto LABEL_21;
          }
          goto LABEL_13;
        }
      }
      v5 += 28;
      if (v5 == v6) {
        goto LABEL_21;
      }
    }
    unint64_t v10 = v5 + 13;
    if (v9 <= v4) {
      goto LABEL_21;
    }
LABEL_13:
    unint64_t v11 = (unsigned char *)(v4 - v8 + *v10);
    uint64_t v12 = (uint64_t)v11;
    while (1)
    {
      unsigned int v14 = *(unsigned __int8 *)v12;
      if (!*(unsigned char *)v12) {
        break;
      }
      if (v14 <= 0x17)
      {
        v4 += 5;
        uint64_t v13 = 5;
      }
      else if ((v14 & 0xF8) == 0x18)
      {
        uint64_t v13 = v12;
        uint64_t v12 = (*(_DWORD *)(v2[241] + 1944) + 1);
        v4 += v12;
      }
      else
      {
        ++v4;
        uint64_t v13 = 1;
      }
      v12 += v13;
      if (v4 >= v9) {
        goto LABEL_21;
      }
    }
    if (*v11 == 36 && v11[1] == 115) {
      v11 += 2;
    }
  }
  return swift::Demangle::__runtime::makeSymbolicMangledNameStringRef(v11, a2);
}

uint64_t anonymous namespace'::MultiPayloadEnumDescriptorImpl::getContentsSizeInWords(_anonymous_namespace_::MultiPayloadEnumDescriptorImpl *this)
{
  return *(unsigned __int16 *)(*((void *)this + 2) + 6);
}

unint64_t anonymous namespace'::MultiPayloadEnumDescriptorImpl::getSizeInBytes(_anonymous_namespace_::MultiPayloadEnumDescriptorImpl *this)
{
  return (((unint64_t)*(unsigned int *)(*((void *)this + 2) + 4) >> 14) & 0x3FFFC) + 4;
}

uint64_t anonymous namespace'::MultiPayloadEnumDescriptorImpl::getFlags(_anonymous_namespace_::MultiPayloadEnumDescriptorImpl *this)
{
  return *(unsigned __int16 *)(*((void *)this + 2) + 4);
}

uint64_t anonymous namespace'::MultiPayloadEnumDescriptorImpl::usesPayloadSpareBits(_anonymous_namespace_::MultiPayloadEnumDescriptorImpl *this)
{
  return *(_DWORD *)(*((void *)this + 2) + 4) & 1;
}

uint64_t anonymous namespace'::MultiPayloadEnumDescriptorImpl::getPayloadSpareBitMaskByteOffset(_anonymous_namespace_::MultiPayloadEnumDescriptorImpl *this)
{
  uint64_t v1 = *((void *)this + 2);
  if (*(unsigned char *)(v1 + 4)) {
    return *(unsigned __int16 *)(v1 + 10);
  }
  else {
    return 0;
  }
}

uint64_t anonymous namespace'::MultiPayloadEnumDescriptorImpl::getPayloadSpareBitMaskByteCount(_anonymous_namespace_::MultiPayloadEnumDescriptorImpl *this)
{
  uint64_t v1 = *((void *)this + 2);
  if (*(unsigned char *)(v1 + 4)) {
    return *(unsigned __int16 *)(v1 + 8);
  }
  else {
    return 0;
  }
}

uint64_t anonymous namespace'::MultiPayloadEnumDescriptorImpl::getPayloadSpareBits(_anonymous_namespace_::MultiPayloadEnumDescriptorImpl *this)
{
  uint64_t v1 = *((void *)this + 2);
  int v2 = *(_DWORD *)(v1 + 4);
  uint64_t v3 = v1 + 4 + 4 * (v2 & 1) + 4;
  if (v2) {
    return v3;
  }
  else {
    return 0;
  }
}

unint64_t *swift::reflection::ReflectionSectionIteratorBase<swift::reflection::CaptureDescriptorIterator,swift::reflection::CaptureDescriptor>::ReflectionSectionIteratorBase(unint64_t *a1, unint64_t *a2, unint64_t a3, long long *a4)
{
  *a1 = a3;
  a1[1] = *a2;
  a1[2] = a2[1];
  a1[3] = a3;
  unint64_t v7 = (std::string *)(a1 + 4);
  if (*((char *)a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)a4, *((void *)a4 + 1));
    if (!a3) {
      return a1;
    }
  }
  else
  {
    long long v8 = *a4;
    v7->__r_.__value_.__r.__words[2] = *((void *)a4 + 2);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
    if (!a3) {
      return a1;
    }
  }
  unint64_t v9 = (unsigned int *)a1[2];
  if (!v9)
  {
LABEL_14:
    a1[3] = 0;
    return a1;
  }
  if (4 * *v9 + 8 * (unint64_t)v9[1] + 12 > a3)
  {
    unint64_t v10 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&std::cerr, (uint64_t)"!!! Reflection section too small to contain first record\n", 57);
    std::ios_base::getloc((const std::ios_base *)((char *)v10 + *(void *)(*v10 - 24)));
    unint64_t v11 = std::locale::use_facet(&v22, &std::ctype<char>::id);
    ((void (*)(const std::locale::facet *, uint64_t))v11->__vftable[2].~facet_0)(v11, 10);
    std::locale::~locale(&v22);
    std::ostream::put();
    std::ostream::flush();
    uint64_t v12 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&std::cerr, (uint64_t)"Section Type: ", 14);
    int v13 = *((char *)a4 + 23);
    if (v13 >= 0) {
      unsigned int v14 = (const std::string::value_type *)a4;
    }
    else {
      unsigned int v14 = *(const std::string::value_type **)a4;
    }
    if (v13 >= 0) {
      uint64_t v15 = *((unsigned __int8 *)a4 + 23);
    }
    else {
      uint64_t v15 = *((void *)a4 + 1);
    }
    char v16 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v12, (uint64_t)v14, v15);
    std::ios_base::getloc((const std::ios_base *)((char *)v16 + *(void *)(*v16 - 24)));
    uint64_t v17 = std::locale::use_facet(&v22, &std::ctype<char>::id);
    ((void (*)(const std::locale::facet *, uint64_t))v17->__vftable[2].~facet_0)(v17, 10);
    std::locale::~locale(&v22);
    std::ostream::put();
    std::ostream::flush();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&std::cerr, (uint64_t)"Section size: ", 14);
    unint64_t v18 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v18, (uint64_t)", size of first record: ", 24);
    uint64_t v19 = (void *)std::ostream::operator<<();
    std::ios_base::getloc((const std::ios_base *)((char *)v19 + *(void *)(*v19 - 24)));
    uint64_t v20 = std::locale::use_facet(&v22, &std::ctype<char>::id);
    ((void (*)(const std::locale::facet *, uint64_t))v20->__vftable[2].~facet_0)(v20, 10);
    std::locale::~locale(&v22);
    std::ostream::put();
    std::ostream::flush();
    goto LABEL_14;
  }
  return a1;
}

uint64_t swift::reflection::MetadataSource::decode<swift::reflection::MetadataSourceBuilder>(uint64_t a1, uint64_t *a2, void *a3)
{
  uint64_t v3 = (unsigned char *)*a2;
  if (*a2 != *a3)
  {
    switch(*v3)
    {
      case 'B':
        return swift::reflection::MetadataSource::decodeClosureBinding<swift::reflection::MetadataSourceBuilder>(a1, a2, a3);
      case 'G':
        return swift::reflection::MetadataSource::decodeGenericArgument<swift::reflection::MetadataSourceBuilder>(a1, a2, a3);
      case 'M':
        return swift::reflection::MetadataSource::decodeMetadataCapture<swift::reflection::MetadataSourceBuilder>(a1, a2, a3);
      case 'R':
        return swift::reflection::MetadataSource::decodeReferenceCapture<swift::reflection::MetadataSourceBuilder>(a1, a2, a3);
      case 'S':
        *a2 = (uint64_t)(v3 + 1);
        operator new();
      default:
        return 0;
    }
  }
  return 0;
}

uint64_t swift::reflection::MetadataSource::decodeClosureBinding<swift::reflection::MetadataSourceBuilder>(uint64_t a1, uint64_t *a2, void *a3)
{
  uint64_t v3 = *a2;
  if (*a2 != *a3 && *(unsigned char *)v3 == 66)
  {
    *a2 = v3 + 1;
    if (*a3 > (unint64_t)(v3 + 1))
    {
      uint64_t v4 = 0;
      while (*(unsigned __int8 *)(v3 + v4 + 1) - 48 <= 9)
      {
        *a2 = v3 + v4++ + 2;
        if ((unint64_t)(v3 + v4 + 1) >= *a3) {
          goto LABEL_9;
        }
      }
      if (!v4) {
        return 0;
      }
LABEL_9:
      if ((unint64_t)(strtol((const char *)(v3 + 1), 0, 10) - 0x7FFFFFFFFFFFFFFFLL) > 1 || *__error() != 34) {
        operator new();
      }
    }
  }
  return 0;
}

uint64_t swift::reflection::MetadataSource::decodeReferenceCapture<swift::reflection::MetadataSourceBuilder>(uint64_t a1, uint64_t *a2, void *a3)
{
  uint64_t v3 = *a2;
  if (*a2 != *a3 && *(unsigned char *)v3 == 82)
  {
    *a2 = v3 + 1;
    if (*a3 > (unint64_t)(v3 + 1))
    {
      uint64_t v4 = 0;
      while (*(unsigned __int8 *)(v3 + v4 + 1) - 48 <= 9)
      {
        *a2 = v3 + v4++ + 2;
        if ((unint64_t)(v3 + v4 + 1) >= *a3) {
          goto LABEL_9;
        }
      }
      if (!v4) {
        return 0;
      }
LABEL_9:
      if ((unint64_t)(strtol((const char *)(v3 + 1), 0, 10) - 0x7FFFFFFFFFFFFFFFLL) > 1 || *__error() != 34) {
        operator new();
      }
    }
  }
  return 0;
}

uint64_t swift::reflection::MetadataSource::decodeMetadataCapture<swift::reflection::MetadataSourceBuilder>(uint64_t a1, uint64_t *a2, void *a3)
{
  uint64_t v3 = *a2;
  if (*a2 != *a3 && *(unsigned char *)v3 == 77)
  {
    *a2 = v3 + 1;
    if (*a3 > (unint64_t)(v3 + 1))
    {
      uint64_t v4 = 0;
      while (*(unsigned __int8 *)(v3 + v4 + 1) - 48 <= 9)
      {
        *a2 = v3 + v4++ + 2;
        if ((unint64_t)(v3 + v4 + 1) >= *a3) {
          goto LABEL_9;
        }
      }
      if (!v4) {
        return 0;
      }
LABEL_9:
      if ((unint64_t)(strtol((const char *)(v3 + 1), 0, 10) - 0x7FFFFFFFFFFFFFFFLL) > 1 || *__error() != 34) {
        operator new();
      }
    }
  }
  return 0;
}

uint64_t swift::reflection::MetadataSource::decodeGenericArgument<swift::reflection::MetadataSourceBuilder>(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3 = (unsigned char *)*a2;
  if (*a2 != *a3 && *v3 == 71)
  {
    *a2 = v3 + 1;
    if (*a3 > (unint64_t)(v3 + 1))
    {
      uint64_t v7 = 0;
      while (v3[v7 + 1] - 48 <= 9)
      {
        *a2 = &v3[v7++ + 2];
        if ((unint64_t)&v3[v7 + 1] >= *a3) {
          goto LABEL_9;
        }
      }
      if (!v7) {
        return 0;
      }
LABEL_9:
      if ((unint64_t)(strtol(v3 + 1, 0, 10) - 0x7FFFFFFFFFFFFFFFLL) > 1 || *__error() != 34)
      {
        if (swift::reflection::MetadataSource::decode<swift::reflection::MetadataSourceBuilder>(a1, a2, a3))
        {
          long long v8 = (unsigned char *)*a2;
          if (*a2 != *a3 && *v8 == 95)
          {
            *a2 = v8 + 1;
            operator new();
          }
        }
      }
    }
  }
  return 0;
}

void swift::reflection::ClosureBindingMetadataSource::~ClosureBindingMetadataSource(swift::reflection::ClosureBindingMetadataSource *this)
{
}

void *std::vector<std::unique_ptr<swift::reflection::MetadataSource const>>::__push_back_slow_path<std::unique_ptr<swift::reflection::MetadataSource const>>(void *a1, uint64_t *a2)
{
  uint64_t v2 = a1[1] - *a1;
  uint64_t v3 = v2 >> 3;
  unint64_t v4 = (v2 >> 3) + 1;
  if (v4 >> 61) {
    abort();
  }
  uint64_t v7 = a1[2] - *a1;
  if (v7 >> 2 > v4) {
    unint64_t v4 = v7 >> 2;
  }
  if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v8 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v8 = v4;
  }
  if (v8)
  {
    if (v8 >> 61) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    unint64_t v9 = (char *)operator new(8 * v8);
  }
  else
  {
    unint64_t v9 = 0;
  }
  unint64_t v10 = &v9[8 * v3];
  unint64_t v11 = &v9[8 * v8];
  uint64_t v12 = *a2;
  *a2 = 0;
  *(void *)unint64_t v10 = v12;
  int v13 = v10 + 8;
  unsigned int v14 = (char *)*a1;
  uint64_t v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v10;
    a1[1] = v13;
    a1[2] = v11;
  }
  else
  {
    unint64_t v16 = (unint64_t)&v15[-*a1 - 8];
    if (v16 < 0x78 || &v15[-(v16 & 0xFFFFFFFFFFFFFFF8) - 8] < v10 && &v9[v2 - (v16 & 0xFFFFFFFFFFFFFFF8) - 8] < v15) {
      goto LABEL_31;
    }
    uint64_t v17 = (v16 >> 3) + 1;
    uint64_t v18 = 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL);
    uint64_t v19 = &v15[-v18];
    v10 -= v18;
    uint64_t v20 = &v9[8 * v3 - 16];
    uint64_t v21 = v15 - 16;
    uint64_t v22 = v17 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v24 = *((_OWORD *)v21 - 1);
      long long v23 = *(_OWORD *)v21;
      *((_OWORD *)v21 - 1) = 0uLL;
      *(_OWORD *)uint64_t v21 = 0uLL;
      *((_OWORD *)v20 - 1) = v24;
      *(_OWORD *)uint64_t v20 = v23;
      v20 -= 32;
      v21 -= 32;
      v22 -= 4;
    }
    while (v22);
    uint64_t v15 = v19;
    if (v17 != (v17 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_31:
      do
      {
        uint64_t v25 = *((void *)v15 - 1);
        v15 -= 8;
        *(void *)uint64_t v15 = 0;
        *((void *)v10 - 1) = v25;
        v10 -= 8;
      }
      while (v15 != v14);
    }
    uint64_t v15 = (char *)*a1;
    unint64_t v26 = (char *)a1[1];
    *a1 = v10;
    a1[1] = v13;
    a1[2] = v11;
    while (v26 != v15)
    {
      uint64_t v28 = *((void *)v26 - 1);
      v26 -= 8;
      uint64_t v27 = v28;
      *(void *)unint64_t v26 = 0;
      if (v28) {
        (*(void (**)(uint64_t))(*(void *)v27 + 8))(v27);
      }
    }
  }
  if (v15) {
    operator delete(v15);
  }
  return v13;
}

void swift::reflection::ReferenceCaptureMetadataSource::~ReferenceCaptureMetadataSource(swift::reflection::ReferenceCaptureMetadataSource *this)
{
}

void swift::reflection::MetadataCaptureMetadataSource::~MetadataCaptureMetadataSource(swift::reflection::MetadataCaptureMetadataSource *this)
{
}

void swift::reflection::GenericArgumentMetadataSource::~GenericArgumentMetadataSource(swift::reflection::GenericArgumentMetadataSource *this)
{
}

void swift::reflection::SelfMetadataSource::~SelfMetadataSource(swift::reflection::SelfMetadataSource *this)
{
}

void std::vector<swift::reflection::PropertyTypeInfo>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (void **)**a1;
  if (!v2) {
    return;
  }
  unint64_t v4 = (void **)v1[1];
  unint64_t v5 = **a1;
  if (v4 != v2)
  {
    while (1)
    {
      if (*((char *)v4 - 1) < 0)
      {
        operator delete(*(v4 - 3));
        if ((*((char *)v4 - 25) & 0x80000000) == 0)
        {
LABEL_7:
          if ((*((char *)v4 - 49) & 0x80000000) == 0) {
            goto LABEL_8;
          }
          goto LABEL_12;
        }
      }
      else if ((*((char *)v4 - 25) & 0x80000000) == 0)
      {
        goto LABEL_7;
      }
      operator delete(*(v4 - 6));
      if ((*((char *)v4 - 49) & 0x80000000) == 0)
      {
LABEL_8:
        if (*((char *)v4 - 73) < 0) {
          goto LABEL_13;
        }
        goto LABEL_4;
      }
LABEL_12:
      operator delete(*(v4 - 9));
      if (*((char *)v4 - 73) < 0) {
LABEL_13:
      }
        operator delete(*(v4 - 12));
LABEL_4:
      v4 -= 12;
      if (v4 == v2)
      {
        unint64_t v5 = **a1;
        break;
      }
    }
  }
  v1[1] = v2;

  operator delete(v5);
}

char *std::vector<swift::reflection::PropertyTypeInfo>::__emplace_back_slow_path<swift::reflection::PropertyTypeInfo>(void **a1, uint64_t a2)
{
  unint64_t v2 = 0xAAAAAAAAAAAAAAABLL * (((unsigned char *)a1[1] - (unsigned char *)*a1) >> 5);
  unint64_t v3 = v2 + 1;
  if (v2 + 1 > 0x2AAAAAAAAAAAAAALL) {
    abort();
  }
  if (0x5555555555555556 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 5) > v3) {
    unint64_t v3 = 0x5555555555555556 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 5);
  }
  if (0xAAAAAAAAAAAAAAABLL * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 5) >= 0x155555555555555) {
    unint64_t v6 = 0x2AAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v6 = v3;
  }
  if (v6)
  {
    if (v6 > 0x2AAAAAAAAAAAAAALL) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    uint64_t v7 = (char *)operator new(96 * v6);
  }
  else
  {
    uint64_t v7 = 0;
  }
  unint64_t v8 = &v7[96 * v2];
  *((void *)v8 + 2) = *(void *)(a2 + 16);
  *(_OWORD *)unint64_t v8 = *(_OWORD *)a2;
  unint64_t v9 = &v7[96 * v6];
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  long long v10 = *(_OWORD *)(a2 + 24);
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(_OWORD *)(v8 + 24) = v10;
  *((void *)v8 + 5) = *(void *)(a2 + 40);
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  *((void *)v8 + 8) = *(void *)(a2 + 64);
  *((_OWORD *)v8 + 3) = *(_OWORD *)(a2 + 48);
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  long long v11 = *(_OWORD *)(a2 + 72);
  *((void *)v8 + 11) = *(void *)(a2 + 88);
  *(_OWORD *)(v8 + 72) = v11;
  *(void *)(a2 + 64) = 0;
  *(void *)(a2 + 72) = 0;
  *(void *)(a2 + 80) = 0;
  *(void *)(a2 + 88) = 0;
  uint64_t v12 = v8 + 96;
  int v13 = (void **)*a1;
  unsigned int v14 = (void **)a1[1];
  if (v14 != *a1)
  {
    do
    {
      long long v15 = *((_OWORD *)v14 - 6);
      *((void *)v8 - 10) = *(v14 - 10);
      *((_OWORD *)v8 - 6) = v15;
      *(v14 - 11) = 0;
      *(v14 - 10) = 0;
      *(v14 - 12) = 0;
      long long v16 = *(_OWORD *)(v14 - 9);
      *((void *)v8 - 7) = *(v14 - 7);
      *(_OWORD *)(v8 - 72) = v16;
      *(v14 - 8) = 0;
      *(v14 - 7) = 0;
      *(v14 - 9) = 0;
      long long v17 = *((_OWORD *)v14 - 3);
      *((void *)v8 - 4) = *(v14 - 4);
      *((_OWORD *)v8 - 3) = v17;
      *(v14 - 5) = 0;
      *(v14 - 4) = 0;
      *(v14 - 6) = 0;
      long long v18 = *(_OWORD *)(v14 - 3);
      *((void *)v8 - 1) = *(v14 - 1);
      *(_OWORD *)(v8 - 24) = v18;
      v8 -= 96;
      *(v14 - 3) = 0;
      *(v14 - 2) = 0;
      *(v14 - 1) = 0;
      v14 -= 12;
    }
    while (v14 != v13);
    unsigned int v14 = (void **)*a1;
    uint64_t v19 = (void **)a1[1];
    *a1 = v8;
    a1[1] = v12;
    a1[2] = v9;
    while (1)
    {
      if (v19 == v14) {
        goto LABEL_26;
      }
      if (*((char *)v19 - 1) < 0)
      {
        operator delete(*(v19 - 3));
        if ((*((char *)v19 - 25) & 0x80000000) == 0)
        {
LABEL_18:
          if (*((char *)v19 - 49) < 0) {
            goto LABEL_23;
          }
          goto LABEL_19;
        }
      }
      else if ((*((char *)v19 - 25) & 0x80000000) == 0)
      {
        goto LABEL_18;
      }
      operator delete(*(v19 - 6));
      if (*((char *)v19 - 49) < 0)
      {
LABEL_23:
        operator delete(*(v19 - 9));
        if ((*((char *)v19 - 73) & 0x80000000) == 0) {
          goto LABEL_14;
        }
        goto LABEL_24;
      }
LABEL_19:
      if ((*((char *)v19 - 73) & 0x80000000) == 0) {
        goto LABEL_14;
      }
LABEL_24:
      operator delete(*(v19 - 12));
LABEL_14:
      v19 -= 12;
    }
  }
  *a1 = v8;
  a1[1] = v12;
  a1[2] = v9;
LABEL_26:
  if (v14) {
    operator delete(v14);
  }
  return v12;
}

void std::allocator<swift::reflection::PropertyTypeInfo>::construct[abi:nn180100]<swift::reflection::PropertyTypeInfo,swift::reflection::PropertyTypeInfo&>(int a1, std::string *this, long long *a3)
{
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v5 = *a3;
    this->__r_.__value_.__r.__words[2] = *((void *)a3 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  unint64_t v6 = this + 1;
  if (*((char *)a3 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *((const std::string::value_type **)a3 + 3), *((void *)a3 + 4));
  }
  else
  {
    long long v7 = *(long long *)((char *)a3 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((void *)a3 + 5);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  unint64_t v8 = this + 2;
  if (*((char *)a3 + 71) < 0)
  {
    std::string::__init_copy_ctor_external(v8, *((const std::string::value_type **)a3 + 6), *((void *)a3 + 7));
  }
  else
  {
    long long v9 = a3[3];
    this[2].__r_.__value_.__r.__words[2] = *((void *)a3 + 8);
    *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v9;
  }
  long long v10 = this + 3;
  if (*((char *)a3 + 95) < 0)
  {
    uint64_t v12 = (const std::string::value_type *)*((void *)a3 + 9);
    std::string::size_type v13 = *((void *)a3 + 10);
    std::string::__init_copy_ctor_external(v10, v12, v13);
  }
  else
  {
    long long v11 = *(long long *)((char *)a3 + 72);
    this[3].__r_.__value_.__r.__words[2] = *((void *)a3 + 11);
    *(_OWORD *)&v10->__r_.__value_.__l.__data_ = v11;
  }
}

char *std::vector<swift::reflection::FieldMetadata>::__emplace_back_slow_path<swift::reflection::FieldMetadata>(void **a1, uint64_t a2)
{
  unint64_t v2 = 0xAAAAAAAAAAAAAAABLL * (((unsigned char *)a1[1] - (unsigned char *)*a1) >> 5);
  unint64_t v3 = v2 + 1;
  if (v2 + 1 > 0x2AAAAAAAAAAAAAALL) {
    abort();
  }
  uint64_t v5 = (uint64_t)(a1 + 2);
  if (0x5555555555555556 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 5) > v3) {
    unint64_t v3 = 0x5555555555555556 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 5);
  }
  if (0xAAAAAAAAAAAAAAABLL * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 5) >= 0x155555555555555) {
    unint64_t v6 = 0x2AAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v6 = v3;
  }
  if (v6 > 0x2AAAAAAAAAAAAAALL) {
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  uint64_t v8 = 96 * v6;
  long long v9 = (char *)operator new(96 * v6);
  long long v10 = &v9[96 * v2];
  *(_OWORD *)long long v10 = *(_OWORD *)a2;
  long long v11 = &v9[v8];
  *((void *)v10 + 2) = *(void *)(a2 + 16);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(_OWORD *)(v10 + 24) = *(_OWORD *)(a2 + 24);
  *((void *)v10 + 5) = *(void *)(a2 + 40);
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  *((_OWORD *)v10 + 3) = *(_OWORD *)(a2 + 48);
  *((void *)v10 + 8) = *(void *)(a2 + 64);
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  *((void *)v10 + 10) = 0;
  *((void *)v10 + 11) = 0;
  *(_OWORD *)(v10 + 72) = *(_OWORD *)(a2 + 72);
  *((void *)v10 + 11) = *(void *)(a2 + 88);
  *(void *)(a2 + 64) = 0;
  *(void *)(a2 + 72) = 0;
  *(void *)(a2 + 80) = 0;
  *(void *)(a2 + 88) = 0;
  uint64_t v12 = v10 + 96;
  std::string::size_type v13 = (char *)*a1;
  unsigned int v14 = (char *)a1[1];
  if (v14 == *a1)
  {
    *a1 = v10;
    a1[1] = v12;
    a1[2] = v11;
    if (!v14) {
      return v12;
    }
    goto LABEL_13;
  }
  do
  {
    long long v15 = *((_OWORD *)v14 - 6);
    *((void *)v10 - 10) = *((void *)v14 - 10);
    *((_OWORD *)v10 - 6) = v15;
    *((void *)v14 - 11) = 0;
    *((void *)v14 - 10) = 0;
    *((void *)v14 - 12) = 0;
    long long v16 = *(_OWORD *)(v14 - 72);
    *((void *)v10 - 7) = *((void *)v14 - 7);
    *(_OWORD *)(v10 - 72) = v16;
    *((void *)v14 - 8) = 0;
    *((void *)v14 - 7) = 0;
    *((void *)v14 - 9) = 0;
    *((_OWORD *)v10 - 3) = *((_OWORD *)v14 - 3);
    *((void *)v10 - 4) = *((void *)v14 - 4);
    *((void *)v14 - 6) = 0;
    *((void *)v14 - 5) = 0;
    *((void *)v14 - 4) = 0;
    *(_OWORD *)(v10 - 24) = *(_OWORD *)(v14 - 24);
    *((void *)v10 - 1) = *((void *)v14 - 1);
    v10 -= 96;
    *((void *)v14 - 3) = 0;
    *((void *)v14 - 2) = 0;
    *((void *)v14 - 1) = 0;
    v14 -= 96;
  }
  while (v14 != v13);
  unsigned int v14 = (char *)*a1;
  uint64_t v17 = (uint64_t)a1[1];
  *a1 = v10;
  a1[1] = v12;
  a1[2] = v11;
  while ((char *)v17 != v14)
  {
    v17 -= 96;
    std::allocator<swift::reflection::FieldMetadata>::destroy[abi:nn180100](v5, v17);
  }
  if (v14) {
LABEL_13:
  }
    operator delete(v14);
  return v12;
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<void SwiftReflectionContext::withContext<void,swift_reflection_addReflectionInfo::$_0>(swift_reflection_addReflectionInfo::$_0 const&)::{lambda(void&&)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::unique_ptr<swift::reflection::ReflectionContext<std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>>>>,std::__variant_detail::__base<swift<swift::reflection<std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>,std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>><std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>> &>()
{
}

std::string::size_type std::string::find(const std::string *this, std::string::value_type __c, std::string::size_type __pos)
{
  return std::string::find(this, __c, __pos);
}

uint64_t std::stringbuf::str()
{
  return std::stringbuf::str();
}

const std::locale::facet *__cdecl std::locale::use_facet(const std::locale *this, std::locale::id *a2)
{
  return std::locale::use_facet(this, a2);
}

std::locale std::ios_base::getloc(const std::ios_base *this)
{
  return std::ios_base::getloc(this);
}

size_t std::__next_prime(size_t __n)
{
  return std::__next_prime(__n);
}

std::string *__cdecl std::string::append(std::string *this, const std::string::value_type *__s)
{
  return std::string::append(this, __s);
}

std::string *__cdecl std::string::append(std::string *this, const std::string::value_type *__s, std::string::size_type __n)
{
  return std::string::append(this, __s, __n);
}

std::string *__cdecl std::string::assign(std::string *this, const std::string::value_type *__s)
{
  return std::string::assign(this, __s);
}

std::string *__cdecl std::string::insert(std::string *this, std::string::size_type __pos, const std::string::value_type *__s)
{
  return std::string::insert(this, __pos, __s);
}

std::string *__cdecl std::string::insert(std::string *this, std::string::size_type __pos, const std::string::value_type *__s, std::string::size_type __n)
{
  return std::string::insert(this, __pos, __s, __n);
}

void std::string::reserve(std::string *this, std::string::size_type __requested_capacity)
{
}

void std::string::push_back(std::string *this, std::string::value_type __c)
{
}

std::string *__cdecl std::string::operator=(std::string *this, const std::string *__str)
{
  return std::string::operator=(this, __str);
}

uint64_t std::ostream::put()
{
  return std::ostream::put();
}

uint64_t std::ostream::flush()
{
  return std::ostream::flush();
}

uint64_t std::ostream::sentry::sentry()
{
  return std::ostream::sentry::sentry();
}

uint64_t std::ostream::sentry::~sentry()
{
  return std::ostream::sentry::~sentry();
}

uint64_t std::ostream::operator<<()
{
  return std::ostream::operator<<();
}

{
  return std::ostream::operator<<();
}

{
  return std::ostream::operator<<();
}

{
  return std::ostream::operator<<();
}

{
  return std::ostream::operator<<();
}

{
  return std::ostream::operator<<();
}

uint64_t std::iostream::~basic_iostream()
{
  return std::iostream::~basic_iostream();
}

uint64_t std::streambuf::basic_streambuf()
{
  return std::streambuf::basic_streambuf();
}

uint64_t std::streambuf::~streambuf()
{
  return std::streambuf::~streambuf();
}

void std::__shared_weak_count::__release_weak(std::__shared_weak_count *this)
{
}

void std::__shared_weak_count::~__shared_weak_count(std::__shared_weak_count *this)
{
}

void std::__libcpp_verbose_abort(const char *__format, ...)
{
}

void std::locale::~locale(std::locale *this)
{
}

void std::ios_base::init(std::ios_base *this, void *__sb)
{
}

void std::ios_base::clear(std::ios_base *this, std::ios_base::iostate __state)
{
}

uint64_t std::ios::~ios()
{
  return std::ios::~ios();
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, int __val)
{
  return std::to_string(retstr, __val);
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, unsigned int __val)
{
  return std::to_string(retstr, __val);
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, unint64_t __val)
{
  return std::to_string(retstr, __val);
}

uint64_t std::operator+<char>()
{
  return std::operator+<char>();
}

void operator delete(void *__p)
{
  while (1)
    ;
}

void operator delete(void *__p, std::align_val_t a2)
{
  while (1)
    ;
}

void operator delete()
{
  while (1)
    ;
}

void *__cdecl operator new(size_t __sz)
{
  while (1)
    ;
}

void *__cdecl operator new(size_t __sz, std::align_val_t a2)
{
  while (1)
    ;
}

void operator new()
{
  while (1)
    ;
}

int __cxa_atexit(void (*lpfunc)(void *), void *obj, void *lpdso_handle)
{
  return ___cxa_atexit(lpfunc, obj, lpdso_handle);
}

int __cxa_guard_acquire(__guard *a1)
{
  return ___cxa_guard_acquire((uint64_t *)a1);
}

void __cxa_guard_release(__guard *a1)
{
}

int *__error(void)
{
  return ___error();
}

void abort(void)
{
}

int asl_log(asl_object_t client, asl_object_t msg, int level, const char *format, ...)
{
  return _asl_log(client, msg, level, format);
}

void bzero(void *a1, size_t a2)
{
}

int fflush(FILE *a1)
{
  return _fflush(a1);
}

int fprintf(FILE *a1, const char *a2, ...)
{
  return _fprintf(a1, a2);
}

int fputc(int a1, FILE *a2)
{
  return _fputc(a1, a2);
}

int fputs(const char *a1, FILE *a2)
{
  return _fputs(a1, a2);
}

void free(void *a1)
{
}

size_t malloc_size(const void *ptr)
{
  return _malloc_size(ptr);
}

void *__cdecl malloc_type_calloc(size_t count, size_t size, malloc_type_id_t type_id)
{
  return _malloc_type_calloc(count, size, type_id);
}

void *__cdecl malloc_type_malloc(size_t size, malloc_type_id_t type_id)
{
  return _malloc_type_malloc(size, type_id);
}

void *__cdecl malloc_type_realloc(void *ptr, size_t size, malloc_type_id_t type_id)
{
  return _malloc_type_realloc(ptr, size, type_id);
}

void *__cdecl memchr(void *__s, int __c, size_t __n)
{
  return _memchr(__s, __c, __n);
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return _memcmp(__s1, __s2, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return _memcpy(__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return _memmove(__dst, __src, __len);
}

void *__cdecl memset(void *__b, int __c, size_t __len)
{
  return _memset(__b, __c, __len);
}

int snprintf(char *__str, size_t __size, const char *__format, ...)
{
  return _snprintf(__str, __size, __format);
}

char *__cdecl strdup(const char *__s1)
{
  return _strdup(__s1);
}

size_t strlen(const char *__s)
{
  return _strlen(__s);
}

int strncmp(const char *__s1, const char *__s2, size_t __n)
{
  return _strncmp(__s1, __s2, __n);
}

char *__cdecl strncpy(char *__dst, const char *__src, size_t __n)
{
  return _strncpy(__dst, __src, __n);
}

size_t strnlen(const char *__s1, size_t __n)
{
  return _strnlen(__s1, __n);
}

uint64_t strtol(const char *__str, char **__endptr, int __base)
{
  return _strtol(__str, __endptr, __base);
}

int vsnprintf(char *__str, size_t __size, const char *__format, va_list a4)
{
  return _vsnprintf(__str, __size, __format, a4);
}