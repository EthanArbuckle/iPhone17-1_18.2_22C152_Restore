uint64_t specialized Sequence<>.starts<A>(with:)(uint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6)
{
  unint64_t v11;
  void *object;
  uint64_t v13;
  Swift::String::Index v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  Swift::String_optional v18;
  char v19;

  v11 = a3 ^ a4;
  swift_bridgeObjectRetain(a2);
  if (v11 >= 0x4000)
  {
    v14._rawBits = a3;
    do
    {
      v15 = Substring.subscript.getter(v14._rawBits, a3, a4, a5, a6);
      v17 = v16;
      v14._rawBits = Substring.index(after:)(v14)._rawBits;
      v18 = String.Iterator.next()();
      if (!v18.value._object)
      {
        swift_bridgeObjectRelease(a2);
        swift_bridgeObjectRelease(v17);
        return 1;
      }
      if (v15 == v18.value._countAndFlagsBits && v18.value._object == (void *)v17)
      {
        swift_bridgeObjectRelease(v17);
        swift_bridgeObjectRelease((uint64_t)v18.value._object);
      }
      else
      {
        if ((~(v17 & (unint64_t)v18.value._object) & 0x6000000000000000) == 0)
        {
          swift_bridgeObjectRelease(v17);
          swift_bridgeObjectRelease((uint64_t)v18.value._object);
LABEL_16:
          v13 = a2;
LABEL_17:
          swift_bridgeObjectRelease(v13);
          return 0;
        }
        v19 = _stringCompareInternal(_:_:expecting:)(v15, v17, v18.value._countAndFlagsBits, (unint64_t)v18.value._object, 0);
        swift_bridgeObjectRelease(v17);
        swift_bridgeObjectRelease((uint64_t)v18.value._object);
        if ((v19 & 1) == 0) {
          goto LABEL_16;
        }
      }
    }
    while ((v14._rawBits ^ a4) >= 0x4000);
  }
  object = String.Iterator.next()().value._object;
  swift_bridgeObjectRelease(a2);
  if (object)
  {
    v13 = (uint64_t)object;
    goto LABEL_17;
  }
  return 1;
}

uint64_t specialized Sequence<>.starts<A>(with:)(uint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6)
{
  uint64_t v7 = a1;
  uint64_t v8 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0) {
    uint64_t v8 = a1;
  }
  uint64_t v9 = 7;
  if (((a2 >> 60) & ((a1 & 0x800000000000000) == 0)) != 0) {
    uint64_t v9 = 11;
  }
  Swift::UInt64 rawBits = v9 | (v8 << 16);
  unint64_t v11 = a3 >> 14;
  if (a3 >> 14 == a4 >> 14)
  {
LABEL_34:
    if (rawBits < 0x4000) {
      return 1;
    }
    v43._Swift::UInt64 rawBits = String.index(before:)((Swift::String::Index)rawBits)._rawBits;
    String.subscript.getter(v43, v7, a2);
    unint64_t v28 = v44;
    uint64_t v41 = 0;
  }
  else
  {
    unint64_t v12 = a6;
    unint64_t v13 = a5;
    unint64_t v14 = a4;
    unint64_t v15 = a3;
    uint64_t v16 = 4;
    if (((a6 >> 60) & ((a5 & 0x800000000000000) == 0)) != 0) {
      uint64_t v16 = 8;
    }
    uint64_t v48 = a3 & 2 | v16;
    uint64_t v49 = a3 >> 16;
    unint64_t v17 = a4;
    unint64_t v45 = a3 >> 14;
    while (1)
    {
      unint64_t v18 = _StringGuts.validateInclusiveCharacterIndex(_:in:)(v17, v15, v14, v13, v12);
      if (v11 >= v18 >> 14) {
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Substring index is out of bounds", 32, 2, "Swift/Substring.swift", 21, 2, 0x10BuLL, 0);
      }
      unint64_t v20 = v18;
      uint64_t v21 = _StringGuts._opaqueCharacterStride(endingAt:in:)(v18 >> 16, v49, v19, v13, v12);
      uint64_t v22 = v21 << 8;
      if (v21 > 63) {
        uint64_t v22 = 0;
      }
      unint64_t v23 = v48 | v22 | (v20 - (v21 << 16)) & 0xFFFFFFFFFFFF0000;
      unint64_t v17 = v23 | 1;
      unint64_t v24 = v15;
      unint64_t v25 = v14;
      uint64_t v26 = Substring.subscript.getter(v23 | 1, v24, v14, v13, v12);
      unint64_t v28 = v27;
      if (rawBits < 0x4000) {
        break;
      }
      uint64_t v29 = v26;
      unint64_t v30 = v12;
      v31._Swift::UInt64 rawBits = _StringGuts.validateInclusiveCharacterIndex_5_7(_:)((Swift::String::Index)rawBits)._rawBits;
      if (!(v31._rawBits >> 14) && _swift_stdlib_isExecutableLinkedOnOrAfter(0x50700u)) {
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index is out of bounds", 29, 2, "Swift/StringCharacterView.swift", 31, 2, 0x62uLL, 0);
      }
      v32._Swift::UInt64 rawBits = String._uncheckedIndex(before:)(v31)._rawBits;
      Swift::UInt64 rawBits = v32._rawBits;
      uint64_t v33 = v7;
      uint64_t v34 = String.subscript.getter(v32, v7, a2);
      BOOL v36 = v29 == v34 && v28 == v35;
      if (v36)
      {
        swift_bridgeObjectRelease_n(v28, 2);
      }
      else
      {
        uint64_t v37 = v35;
        if ((~v28 & 0x6000000000000000) == 0
          && (v35 & 0x2000000000000000) != 0
          && (v35 & 0x4000000000000000) != 0)
        {
          swift_bridgeObjectRelease(v28);
          uint64_t v41 = 0;
          unint64_t v28 = v37;
          goto LABEL_32;
        }
        char v40 = _stringCompareInternal(_:_:expecting:)(v29, v28, v34, v35, 0);
        swift_bridgeObjectRelease(v28);
        swift_bridgeObjectRelease(v37);
        if ((v40 & 1) == 0) {
          return 0;
        }
      }
      BOOL v36 = v45 == v23 >> 14;
      unint64_t v11 = v45;
      unint64_t v14 = v25;
      uint64_t v7 = v33;
      unint64_t v12 = v30;
      unint64_t v15 = a3;
      unint64_t v13 = a5;
      if (v36) {
        goto LABEL_34;
      }
    }
    uint64_t v41 = 1;
  }
LABEL_32:
  swift_bridgeObjectRelease(v28);
  return v41;
}

uint64_t Sequence<>.starts<A>(with:)(char *a1, uint64_t a2, uint64_t a3, int **a4, uint64_t a5, uint64_t a6)
{
  v84 = a1;
  uint64_t AssociatedConformanceWitness = (uint64_t)a4;
  uint64_t v81 = a6;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, a4, a2, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
  v74 = (void (**)(char *, uint64_t))*((void *)AssociatedTypeWitness - 1);
  uint64_t v11 = MEMORY[0x1F4188790](AssociatedTypeWitness);
  v73 = (char *)&v66 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11);
  v69 = (char *)&v66 - v13;
  uint64_t v86 = v14;
  unint64_t v17 = type metadata accessor for Optional(0, v14, v15, v16);
  uint64_t v67 = (uint64_t)*(v17 - 1);
  v68 = v17;
  uint64_t v18 = MEMORY[0x1F4188790](v17);
  v66 = (char *)&v66 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = MEMORY[0x1F4188790](v18);
  v75 = (char *)&v66 - v21;
  uint64_t v22 = MEMORY[0x1F4188790](v20);
  unint64_t v24 = (char *)&v66 - v23;
  v78 = (void (*)(const char *, uint64_t))a2;
  uint64_t v25 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](v22);
  v79 = (char *)&v66 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v28 = swift_getAssociatedTypeWitness(0, a4, v27, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Iterator);
  uint64_t v71 = *((void *)v28 - 1);
  uint64_t v29 = MEMORY[0x1F4188790](v28);
  Swift::String::Index v31 = (char *)&v66 - v30;
  uint64_t v32 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](v29);
  uint64_t v34 = (char *)&v66 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  v83 = swift_getAssociatedTypeWitness(0, (int **)a5, a3, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Iterator);
  uint64_t v70 = *((void *)v83 - 1);
  MEMORY[0x1F4188790](v83);
  BOOL v36 = (char *)&v66 - v35;
  (*(void (**)(char *, char *, uint64_t))(v32 + 16))(v34, v84, a3);
  uint64_t v37 = *(void (**)(uint64_t, uint64_t))(a5 + 32);
  v82 = v36;
  v38 = v69;
  uint64_t v76 = a3;
  uint64_t v77 = a5;
  v37(a3, a5);
  uint64_t v39 = (uint64_t)v78;
  (*(void (**)(char *, const char *, void (*)(const char *, uint64_t)))(v25 + 16))(v79, v85, v78);
  char v40 = *(void (**)(uint64_t))(AssociatedConformanceWitness + 32);
  v84 = v31;
  uint64_t v41 = AssociatedConformanceWitness;
  v40(v39);
  v85 = v28;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v41, v39, (uint64_t)v28, (uint64_t)&protocol requirements base descriptor for Sequence, associated conformance descriptor for Sequence.Sequence.Iterator: IteratorProtocol);
  v78 = *(void (**)(const char *, uint64_t))(AssociatedConformanceWitness + 16);
  v79 = (char *)(AssociatedConformanceWitness + 16);
  v42 = (unsigned int (**)(char *, uint64_t, uint64_t))(v74 + 6);
  Swift::String::Index v43 = (void (**)(char *, char *, uint64_t))(v74 + 4);
  uint64_t v72 = v81 + 8;
  ++v74;
  while (1)
  {
    v78(v85, AssociatedConformanceWitness);
    unint64_t v44 = *v42;
    if ((*v42)(v24, 1, v86) == 1)
    {
      (*(void (**)(char *, const char *))(v71 + 8))(v84, v85);
      v61 = v83;
      uint64_t v62 = swift_getAssociatedConformanceWitness(v77, v76, (uint64_t)v83, (uint64_t)&protocol requirements base descriptor for Sequence, associated conformance descriptor for Sequence.Sequence.Iterator: IteratorProtocol);
      v63 = v66;
      v64 = v82;
      (*(void (**)(const char *, uint64_t))(v62 + 16))(v61, v62);
      (*(void (**)(char *, const char *))(v70 + 8))(v64, v61);
      BOOL v60 = v44(v63, 1, v86) == 1;
      (*(void (**)(char *, Class *))(v67 + 8))(v63, v68);
      return v60;
    }
    unint64_t v45 = *v43;
    v46 = v24;
    uint64_t v47 = v86;
    (*v43)(v38, v24, v86);
    uint64_t v48 = v83;
    uint64_t v49 = swift_getAssociatedConformanceWitness(v77, v76, (uint64_t)v83, (uint64_t)&protocol requirements base descriptor for Sequence, associated conformance descriptor for Sequence.Sequence.Iterator: IteratorProtocol);
    v50 = v75;
    (*(void (**)(const char *, uint64_t))(v49 + 16))(v48, v49);
    uint64_t v51 = v47;
    v52 = v42;
    if (v44(v50, 1, v51) == 1) {
      break;
    }
    v53 = v50;
    v54 = v38;
    v55 = v73;
    uint64_t v56 = v86;
    v45(v73, v53, v86);
    char v57 = (*(uint64_t (**)(char *, char *, uint64_t))(v81 + 8))(v54, v55, v56);
    v58 = *v74;
    v59 = v55;
    v38 = v54;
    (*v74)(v59, v56);
    v58(v54, v56);
    unint64_t v24 = v46;
    v42 = v52;
    if ((v57 & 1) == 0)
    {
      (*(void (**)(char *, const char *))(v71 + 8))(v84, v85);
      (*(void (**)(char *, const char *))(v70 + 8))(v82, v83);
      return 0;
    }
  }
  (*v74)(v38, v86);
  (*(void (**)(char *, const char *))(v71 + 8))(v84, v85);
  (*(void (**)(char *, const char *))(v70 + 8))(v82, v83);
  (*(void (**)(char *, Class *))(v67 + 8))(v50, v68);
  return 1;
}

uint64_t Sequence.elementsEqual<A>(_:by:)(const char *a1, uint64_t (*a2)(char *, char *), uint64_t a3, uint64_t a4, uint64_t a5, int **a6, int **a7)
{
  uint64_t AssociatedConformanceWitness = a6;
  uint64_t v70 = a3;
  v69 = a2;
  v90 = a1;
  uint64_t v78 = (uint64_t)a7;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, a7, a5, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
  uint64_t v72 = (void (**)(char *, const char *))*((void *)AssociatedTypeWitness - 1);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  v68 = (char *)&v61 - v12;
  uint64_t v13 = swift_getAssociatedTypeWitness(0, a6, a4, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
  uint64_t v65 = *((void *)v13 - 1);
  MEMORY[0x1F4188790](v13);
  v64 = (char *)&v61 - v14;
  unint64_t v17 = type metadata accessor for Optional(255, (uint64_t)v13, v15, v16);
  v74 = AssociatedTypeWitness;
  uint64_t v20 = type metadata accessor for Optional(255, (uint64_t)AssociatedTypeWitness, v18, v19);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0, (uint64_t)v17, (uint64_t)v20, 0, 0);
  uint64_t v21 = MEMORY[0x1F4188790](TupleTypeMetadata2);
  v85 = (char *)&v61 - v22;
  v87 = v20;
  uint64_t v66 = (uint64_t)*(v20 - 1);
  uint64_t v23 = MEMORY[0x1F4188790](v21);
  v83 = (char *)&v61 - v24;
  uint64_t v86 = v17;
  v75 = (void (**)(char *, char *, Class *))*(v17 - 1);
  uint64_t v25 = MEMORY[0x1F4188790](v23);
  v82 = (char *)&v61 - v26;
  uint64_t v77 = a5;
  v80 = *(int ***)(a5 - 8);
  MEMORY[0x1F4188790](v25);
  unint64_t v28 = (char *)&v61 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v91 = swift_getAssociatedTypeWitness(0, a7, a5, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Iterator);
  uint64_t v63 = *((void *)v91 - 1);
  uint64_t v29 = MEMORY[0x1F4188790](v91);
  Swift::String::Index v31 = (char *)&v61 - v30;
  uint64_t v32 = a4;
  uint64_t v33 = *(void *)(a4 - 8);
  MEMORY[0x1F4188790](v29);
  uint64_t v35 = (char *)&v61 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  BOOL v36 = AssociatedConformanceWitness;
  uint64_t v37 = swift_getAssociatedTypeWitness(0, AssociatedConformanceWitness, v32, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Iterator);
  uint64_t v62 = *((void *)v37 - 1);
  MEMORY[0x1F4188790](v37);
  uint64_t v39 = (char *)&v61 - v38;
  (*(void (**)(char *, char *, uint64_t))(v33 + 16))(v35, v89, v32);
  char v40 = v36[4];
  v88 = v39;
  uint64_t v41 = (uint64_t)v36;
  ((void (*)(uint64_t, int **))v40)(v32, v36);
  uint64_t v42 = v77;
  ((void (*)(char *, const char *, uint64_t))v80[2])(v28, v90, v77);
  Swift::String::Index v43 = v64;
  unint64_t v44 = *(void (**)(uint64_t))(v78 + 32);
  v89 = v31;
  uint64_t v45 = v78;
  v44(v42);
  v90 = v37;
  uint64_t AssociatedConformanceWitness = (int **)swift_getAssociatedConformanceWitness(v41, v32, (uint64_t)v37, (uint64_t)&protocol requirements base descriptor for Sequence, associated conformance descriptor for Sequence.Sequence.Iterator: IteratorProtocol);
  v79 = AssociatedConformanceWitness[2];
  v80 = AssociatedConformanceWitness + 2;
  uint64_t v78 = swift_getAssociatedConformanceWitness(v45, v42, (uint64_t)v91, (uint64_t)&protocol requirements base descriptor for Sequence, associated conformance descriptor for Sequence.Sequence.Iterator: IteratorProtocol);
  uint64_t v76 = *(void (**)(const char *, uint64_t))(v78 + 16);
  uint64_t v77 = v78 + 16;
  v75 += 4;
  v46 = (void (**)(char *, char *, Class *))(v66 + 32);
  uint64_t v47 = (unsigned int (**)(char *, uint64_t, const char *))(v65 + 48);
  v73 = (unsigned int (**)(char *, uint64_t, const char *))(v72 + 6);
  uint64_t v67 = (void (**)(char *, char *, const char *))(v65 + 32);
  uint64_t v48 = (void (**)(char *, char *, const char *))(v72 + 4);
  uint64_t v71 = v72 + 1;
  uint64_t v72 = (void (**)(char *, const char *))(v65 + 8);
  uint64_t v49 = v82;
  while (1)
  {
    ((void (*)(const char *, int **))v79)(v90, AssociatedConformanceWitness);
    v50 = v83;
    v76(v91, v78);
    uint64_t v51 = v85;
    v52 = &v85[*((int *)TupleTypeMetadata2 + 12)];
    (*v75)(v85, v49, v86);
    (*v46)(v52, v50, v87);
    if ((*v47)(v51, 1, v13) == 1) {
      break;
    }
    v53 = v13;
    v54 = v74;
    if ((*v73)(v52, 1, v74) == 1)
    {
      (*(void (**)(char *, const char *))(v63 + 8))(v89, v91);
      (*(void (**)(char *, const char *))(v62 + 8))(v88, v90);
      (*v72)(v51, v53);
      goto LABEL_10;
    }
    (*v67)(v43, v51, v53);
    v55 = v43;
    uint64_t v56 = v68;
    (*v48)(v68, v52, v54);
    uint64_t v57 = v92;
    char v58 = v69(v55, v56);
    uint64_t v92 = v57;
    if (v57)
    {
      (*v71)(v56, v54);
      (*v72)(v55, v53);
      (*(void (**)(char *, const char *))(v63 + 8))(v89, v91);
      (*(void (**)(char *, const char *))(v62 + 8))(v88, v90);
      return v56 & 1;
    }
    char v59 = v58;
    (*v71)(v56, v54);
    (*v72)(v55, v53);
    uint64_t v13 = v53;
    Swift::String::Index v43 = v55;
    if ((v59 & 1) == 0)
    {
      (*(void (**)(char *, const char *))(v63 + 8))(v89, v91);
      (*(void (**)(char *, const char *))(v62 + 8))(v88, v90);
LABEL_10:
      LOBYTE(v56) = 0;
      return v56 & 1;
    }
  }
  (*(void (**)(char *, const char *))(v63 + 8))(v89, v91);
  (*(void (**)(char *, const char *))(v62 + 8))(v88, v90);
  LOBYTE(v56) = 1;
  if ((*v73)(v52, 1, v74) != 1)
  {
    (*(void (**)(char *, Class *))(v66 + 8))(v52, v87);
    LOBYTE(v56) = 0;
  }
  return v56 & 1;
}

uint64_t Sequence.lexicographicallyPrecedes<A>(_:by:)(unsigned int (*a1)(char *, uint64_t, const char *), uint64_t (*a2)(char *, char *), uint64_t a3, uint64_t a4, uint64_t a5, int **a6, int **a7)
{
  uint64_t v98 = a3;
  v95 = a7;
  v96 = a1;
  v87 = a6;
  uint64_t AssociatedConformanceWitness = a4;
  v97 = a2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, a6, a4, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
  uint64_t v13 = type metadata accessor for Optional(0, (uint64_t)AssociatedTypeWitness, v11, v12);
  uint64_t v79 = (uint64_t)*(v13 - 1);
  v80 = v13;
  uint64_t v14 = MEMORY[0x1F4188790](v13);
  uint64_t v78 = (char *)&v77 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = MEMORY[0x1F4188790](v14);
  v100 = (char *)&v77 - v17;
  uint64_t v18 = MEMORY[0x1F4188790](v16);
  v89 = (char *)&v77 - v19;
  uint64_t v83 = *((void *)AssociatedTypeWitness - 1);
  uint64_t v20 = MEMORY[0x1F4188790](v18);
  v84 = (char *)&v77 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = MEMORY[0x1F4188790](v20);
  v85 = (char *)&v77 - v23;
  uint64_t v94 = a5;
  uint64_t v24 = *(void *)(a5 - 8);
  MEMORY[0x1F4188790](v22);
  uint64_t v26 = (char *)&v77 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v91 = swift_getAssociatedTypeWitness(0, a7, v27, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Iterator);
  uint64_t v82 = *((void *)v91 - 1);
  uint64_t v28 = MEMORY[0x1F4188790](v91);
  uint64_t v30 = (char *)&v77 - v29;
  uint64_t v31 = *(void *)(AssociatedConformanceWitness - 8);
  MEMORY[0x1F4188790](v28);
  uint64_t v33 = (char *)&v77 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v34 = a6;
  uint64_t v36 = v35;
  uint64_t v37 = swift_getAssociatedTypeWitness(0, v34, v35, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Iterator);
  uint64_t v81 = *((void *)v37 - 1);
  MEMORY[0x1F4188790](v37);
  uint64_t v39 = (char *)&v77 - v38;
  (*(void (**)(char *, const char *, uint64_t))(v31 + 16))(v33, v93, v36);
  uint64_t v40 = (uint64_t)v87;
  uint64_t v41 = v87[4];
  uint64_t v92 = v39;
  ((void (*)(uint64_t, int **))v41)(v36, v87);
  uint64_t v42 = v94;
  (*(void (**)(char *, unsigned int (*)(char *, uint64_t, const char *), uint64_t))(v24 + 16))(v26, v96, v94);
  Swift::String::Index v43 = v95[4];
  v90 = v30;
  ((void (*)(uint64_t))v43)(v42);
  v93 = v37;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v40, v36, (uint64_t)v37, (uint64_t)&protocol requirements base descriptor for Sequence, associated conformance descriptor for Sequence.Sequence.Iterator: IteratorProtocol);
  uint64_t v86 = *(void (**)(const char *, uint64_t))(AssociatedConformanceWitness + 16);
  v87 = (int **)(AssociatedConformanceWitness + 16);
  unint64_t v44 = (unsigned int (**)(char *, uint64_t, const char *))(v83 + 48);
  uint64_t v45 = (void (**)(char *, char *, const char *))(v83 + 32);
  v46 = (void (**)(char *, const char *))(v83 + 8);
  uint64_t v47 = v85;
  while (1)
  {
    uint64_t v48 = v89;
    v86(v93, AssociatedConformanceWitness);
    uint64_t v49 = *v44;
    if ((*v44)(v48, 1, AssociatedTypeWitness) == 1)
    {
      (*(void (**)(char *, const char *))(v81 + 8))(v92, v93);
      uint64_t v63 = v80;
      v64 = *(void (**)(char *, Class *))(v79 + 8);
      v64(v48, v80);
      uint64_t v65 = v64;
      uint64_t v66 = v91;
      uint64_t v67 = swift_getAssociatedConformanceWitness((uint64_t)v95, v94, (uint64_t)v91, (uint64_t)&protocol requirements base descriptor for Sequence, associated conformance descriptor for Sequence.Sequence.Iterator: IteratorProtocol);
      v68 = v78;
      v69 = v90;
      (*(void (**)(const char *, uint64_t))(v67 + 16))(v66, v67);
      (*(void (**)(char *, const char *))(v82 + 8))(v69, v66);
      char v70 = v49(v68, 1, AssociatedTypeWitness) != 1;
      v65(v68, v63);
      return v70 & 1;
    }
    v96 = v49;
    v50 = *v45;
    (*v45)(v47, v48, AssociatedTypeWitness);
    uint64_t v51 = AssociatedTypeWitness;
    v52 = v100;
    v53 = v91;
    uint64_t v54 = swift_getAssociatedConformanceWitness((uint64_t)v95, v94, (uint64_t)v91, (uint64_t)&protocol requirements base descriptor for Sequence, associated conformance descriptor for Sequence.Sequence.Iterator: IteratorProtocol);
    v55 = v53;
    uint64_t v56 = v52;
    AssociatedTypeWitness = v51;
    (*(void (**)(const char *, uint64_t))(v54 + 16))(v55, v54);
    if (v96(v56, 1, v51) == 1)
    {
      (*v46)(v47, v51);
      (*(void (**)(char *, const char *))(v82 + 8))(v90, v91);
      (*(void (**)(char *, const char *))(v81 + 8))(v92, v93);
      (*(void (**)(char *, Class *))(v79 + 8))(v100, v80);
      goto LABEL_10;
    }
    uint64_t v57 = v84;
    v50(v84, v100, AssociatedTypeWitness);
    uint64_t v58 = v99;
    char v59 = v97(v47, v57);
    if (v58)
    {
      uint64_t v71 = *v46;
      uint64_t v73 = v81;
      uint64_t v72 = v82;
      (*v46)(v57, AssociatedTypeWitness);
      v71(v47, AssociatedTypeWitness);
      v74 = *(void (**)(char *, const char *))(v72 + 8);
      char v70 = v72 + 8;
      v74(v90, v91);
      (*(void (**)(char *, const char *))(v73 + 8))(v92, v93);
      return v70 & 1;
    }
    if (v59) {
      break;
    }
    char v60 = v97(v57, v47);
    uint64_t v61 = *v46;
    char v62 = v60;
    uint64_t v99 = 0;
    v61(v57, AssociatedTypeWitness);
    v61(v47, AssociatedTypeWitness);
    if (v62)
    {
      (*(void (**)(char *, const char *))(v82 + 8))(v90, v91);
      (*(void (**)(char *, const char *))(v81 + 8))(v92, v93);
LABEL_10:
      char v70 = 0;
      return v70 & 1;
    }
  }
  v75 = *v46;
  (*v46)(v57, AssociatedTypeWitness);
  v75(v47, AssociatedTypeWitness);
  (*(void (**)(char *, const char *))(v82 + 8))(v90, v91);
  (*(void (**)(char *, const char *))(v81 + 8))(v92, v93);
  char v70 = 1;
  return v70 & 1;
}

uint64_t Sequence<>.lexicographicallyPrecedes<A>(_:)(const char *a1, uint64_t a2, uint64_t a3, int **a4, int **a5, uint64_t a6)
{
  v84 = a1;
  uint64_t v72 = a6;
  uint64_t v86 = a5;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, a4, a2, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
  uint64_t v13 = type metadata accessor for Optional(0, (uint64_t)AssociatedTypeWitness, v11, v12);
  uint64_t v68 = (uint64_t)*(v13 - 1);
  v69 = v13;
  uint64_t v14 = MEMORY[0x1F4188790](v13);
  uint64_t v67 = (char *)&v66 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = MEMORY[0x1F4188790](v14);
  uint64_t v18 = (char *)&v66 - v17;
  uint64_t v19 = MEMORY[0x1F4188790](v16);
  v80 = (char *)&v66 - v20;
  v75 = (void (**)(char *, const char *))*((void *)AssociatedTypeWitness - 1);
  uint64_t v21 = MEMORY[0x1F4188790](v19);
  v74 = (char *)&v66 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = MEMORY[0x1F4188790](v21);
  uint64_t v76 = (char *)&v66 - v24;
  uint64_t v85 = a3;
  uint64_t v81 = *(char **)(a3 - 8);
  MEMORY[0x1F4188790](v23);
  uint64_t v26 = (char *)&v66 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v82 = swift_getAssociatedTypeWitness(0, a5, v27, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Iterator);
  uint64_t v71 = *((void *)v82 - 1);
  uint64_t v28 = MEMORY[0x1F4188790](v82);
  uint64_t v30 = (char *)&v66 - v29;
  uint64_t v31 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](v28);
  uint64_t v33 = (char *)&v66 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v34 = (uint64_t)a4;
  uint64_t v35 = a4;
  uint64_t v37 = v36;
  uint64_t v38 = swift_getAssociatedTypeWitness(0, v35, v36, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Iterator);
  uint64_t v70 = *((void *)v38 - 1);
  MEMORY[0x1F4188790](v38);
  uint64_t v40 = (char *)&v66 - v39;
  (*(void (**)(char *, char *, uint64_t))(v31 + 16))(v33, v83, v37);
  uint64_t v41 = *(void (**)(uint64_t, uint64_t))(v34 + 32);
  uint64_t v83 = v40;
  v41(v37, v34);
  uint64_t v42 = v85;
  (*((void (**)(char *, const char *, uint64_t))v81 + 2))(v26, v84, v85);
  Swift::String::Index v43 = v86[4];
  uint64_t v81 = v30;
  uint64_t v44 = v72;
  ((void (*)(uint64_t))v43)(v42);
  v84 = v38;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v34, v37, (uint64_t)v38, (uint64_t)&protocol requirements base descriptor for Sequence, associated conformance descriptor for Sequence.Sequence.Iterator: IteratorProtocol);
  uint64_t v77 = *(void (**)(const char *, uint64_t))(AssociatedConformanceWitness + 16);
  uint64_t v78 = AssociatedConformanceWitness + 16;
  uint64_t v45 = v76;
  v46 = (unsigned int (**)(char *, uint64_t, const char *))(v75 + 6);
  uint64_t v47 = (void (**)(char *, char *, const char *))(v75 + 4);
  uint64_t v73 = v44 + 16;
  ++v75;
  while (1)
  {
    uint64_t v48 = v80;
    v77(v84, AssociatedConformanceWitness);
    uint64_t v49 = *v46;
    if ((*v46)(v48, 1, AssociatedTypeWitness) == 1)
    {
      (*(void (**)(char *, const char *))(v70 + 8))(v83, v84);
      uint64_t v57 = v69;
      uint64_t v58 = *(void (**)(char *, Class *))(v68 + 8);
      v58(v48, v69);
      char v59 = v82;
      uint64_t v60 = swift_getAssociatedConformanceWitness((uint64_t)v86, v85, (uint64_t)v82, (uint64_t)&protocol requirements base descriptor for Sequence, associated conformance descriptor for Sequence.Sequence.Iterator: IteratorProtocol);
      uint64_t v61 = v67;
      char v62 = v81;
      (*(void (**)(const char *, uint64_t))(v60 + 16))(v59, v60);
      (*(void (**)(char *, const char *))(v71 + 8))(v62, v59);
      BOOL v63 = v49(v61, 1, AssociatedTypeWitness) != 1;
      v58(v61, v57);
      return v63;
    }
    v50 = *v47;
    (*v47)(v45, v48, AssociatedTypeWitness);
    uint64_t v51 = v82;
    uint64_t v52 = swift_getAssociatedConformanceWitness((uint64_t)v86, v85, (uint64_t)v82, (uint64_t)&protocol requirements base descriptor for Sequence, associated conformance descriptor for Sequence.Sequence.Iterator: IteratorProtocol);
    (*(void (**)(const char *, uint64_t))(v52 + 16))(v51, v52);
    if (v49(v18, 1, AssociatedTypeWitness) == 1)
    {
      (*v75)(v45, AssociatedTypeWitness);
      (*(void (**)(char *, const char *))(v71 + 8))(v81, v82);
      (*(void (**)(char *, const char *))(v70 + 8))(v83, v84);
      (*(void (**)(char *, Class *))(v68 + 8))(v18, v69);
      return 0;
    }
    v53 = v74;
    v50(v74, v18, AssociatedTypeWitness);
    uint64_t v54 = *(uint64_t (**)(char *, char *, const char *, uint64_t))(v44 + 16);
    if (v54(v45, v53, AssociatedTypeWitness, v44)) {
      break;
    }
    char v55 = v54(v53, v45, AssociatedTypeWitness, v44);
    uint64_t v56 = *v75;
    (*v75)(v53, AssociatedTypeWitness);
    v56(v45, AssociatedTypeWitness);
    if (v55)
    {
      (*(void (**)(char *, const char *))(v71 + 8))(v81, v82);
      (*(void (**)(char *, const char *))(v70 + 8))(v83, v84);
      return 0;
    }
  }
  v64 = *v75;
  (*v75)(v53, AssociatedTypeWitness);
  v64(v45, AssociatedTypeWitness);
  (*(void (**)(char *, const char *))(v71 + 8))(v81, v82);
  (*(void (**)(char *, const char *))(v70 + 8))(v83, v84);
  return 1;
}

uint64_t specialized Sequence.contains(where:)(unsigned int (*a1)(int *), uint64_t a2, unint64_t a3, int a4)
{
  unint64_t v5 = HIDWORD(a3);
  if (HIDWORD(a3) == a4)
  {
    LOBYTE(v6) = 0;
  }
  else
  {
    do
    {
      if (!v5) {
        _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/ValidUTF8Buffer.swift", 27, 2, 0x69uLL, 0);
      }
      int v10 = v5;
      unsigned int v6 = (v4 != 0) | a1(&v10);
      if (v6) {
        break;
      }
      LODWORD(v5) = v5 >> 8;
    }
    while (v5 != a4);
  }
  return v6 & 1;
}

uint64_t specialized Sequence.contains(where:)(uint64_t (*a1)(void *), uint64_t a2, uint64_t a3, unint64_t a4)
{
  if ((a4 & 0x2000000000000000) != 0) {
    uint64_t v5 = HIBYTE(a4) & 0xF;
  }
  else {
    uint64_t v5 = a3 & 0xFFFFFFFFFFFFLL;
  }
  if (!v5)
  {
    char v13 = 0;
    return v13 & 1;
  }
  if ((a4 & 0x1000000000000000) != 0)
  {
    swift_bridgeObjectRetain(a4);
    __int16 v10 = 0;
    uint64_t v11 = 0;
    goto LABEL_17;
  }
  if ((a4 & 0x2000000000000000) != 0)
  {
    swift_bridgeObjectRetain(a4);
    __int16 v10 = 0;
    uint64_t v11 = 0;
LABEL_18:
    v22[0] = a3;
    v22[1] = a4 & 0xFFFFFFFFFFFFFFLL;
    uint64_t v12 = v22;
  }
  else
  {
    swift_bridgeObjectRetain(a4);
    __int16 v10 = 0;
    uint64_t v11 = 0;
    if ((a3 & 0x1000000000000000) != 0) {
LABEL_16:
    }
      uint64_t v12 = (void *)((a4 & 0xFFFFFFFFFFFFFFFLL) + 32);
    else {
LABEL_8:
    }
      uint64_t v12 = _StringObject.sharedUTF8.getter(a3, a4);
  }
  for (uint64_t i = _decodeScalar(_:startingAt:)((uint64_t)v12, v9, v11); ; uint64_t i = *(void *)&v16._0._value)
  {
    unsigned int v17 = i;
    v11 += scalarLength;
    if (i < 0x10000)
    {
      LOWORD(v18) = i;
      goto LABEL_22;
    }
    __int16 v10 = Unicode.Scalar.UTF16View.subscript.getter(1, i);
    int v18 = (unsigned __int16)((v17 + 67043328) >> 10) + 55296;
    if ((v18 & 0x10000) != 0) {
      break;
    }
LABEL_22:
    LOWORD(v22[0]) = v18;
    char v19 = a1(v22);
    if (v4)
    {
      swift_bridgeObjectRelease(a4);
      return v13 & 1;
    }
    if (v19)
    {
LABEL_29:
      swift_bridgeObjectRelease(a4);
      char v13 = 1;
      return v13 & 1;
    }
    if (v17 >= 0x10000)
    {
      LOWORD(v22[0]) = v10;
      char v20 = a1(v22);
      if (v20) {
        goto LABEL_29;
      }
      __int16 v10 = 0;
    }
    if (v11 >= v5) {
      goto LABEL_33;
    }
    if ((a4 & 0x1000000000000000) == 0)
    {
      if ((a4 & 0x2000000000000000) != 0) {
        goto LABEL_18;
      }
      if ((a3 & 0x1000000000000000) == 0) {
        goto LABEL_8;
      }
      goto LABEL_16;
    }
LABEL_17:
    Swift::tuple_Unicode_Scalar_scalarLength_Int v16 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)((Swift::String::Index)(v11 << 16));
    Swift::Int scalarLength = v16.scalarLength;
  }
  __break(1u);
LABEL_33:
  swift_bridgeObjectRelease(a4);
  char v13 = 0;
  return v13 & 1;
}

BOOL Sequence.contains(where:)(uint64_t (*a1)(char *), uint64_t a2, uint64_t a3, int **a4)
{
  uint64_t v33 = a1;
  uint64_t v34 = a2;
  uint64_t AssociatedConformanceWitness = (uint64_t)a4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, a4, a3, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
  uint64_t v31 = *((void *)AssociatedTypeWitness - 1);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v9 = (char *)&v31 - v8;
  uint64_t v12 = type metadata accessor for Optional(0, (uint64_t)AssociatedTypeWitness, v10, v11);
  uint64_t v13 = MEMORY[0x1F4188790](v12 - 1);
  uint64_t v15 = (char *)&v31 - v14;
  uint64_t v16 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](v13);
  int v18 = (char *)&v31 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v19 = swift_getAssociatedTypeWitness(0, a4, a3, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Iterator);
  uint64_t v32 = *((void *)v19 - 1);
  MEMORY[0x1F4188790](v19);
  uint64_t v21 = (char *)&v31 - v20;
  (*(void (**)(char *, const char *, uint64_t))(v16 + 16))(v18, v39, a3);
  uint64_t v22 = *(void (**)(uint64_t))(AssociatedConformanceWitness + 32);
  uint64_t v38 = v21;
  uint64_t v23 = AssociatedConformanceWitness;
  v22(a3);
  uint64_t v39 = v19;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v23, a3, (uint64_t)v19, (uint64_t)&protocol requirements base descriptor for Sequence, associated conformance descriptor for Sequence.Sequence.Iterator: IteratorProtocol);
  uint64_t v35 = *(void (**)(const char *, uint64_t))(AssociatedConformanceWitness + 16);
  uint64_t v36 = AssociatedConformanceWitness + 16;
  uint64_t v24 = (uint64_t (**)(char *, uint64_t, const char *))(v31 + 48);
  uint64_t v25 = (void (**)(char *, char *, const char *))(v31 + 32);
  uint64_t v26 = (void (**)(char *, const char *))(v31 + 8);
  do
  {
    v35(v39, AssociatedConformanceWitness);
    int v27 = (*v24)(v15, 1, AssociatedTypeWitness);
    if (v27 == 1) {
      break;
    }
    (*v25)(v9, v15, AssociatedTypeWitness);
    char v28 = v33(v9);
    if (v4)
    {
      (*v26)(v9, AssociatedTypeWitness);
      break;
    }
    char v29 = v28;
    (*v26)(v9, AssociatedTypeWitness);
  }
  while ((v29 & 1) == 0);
  (*(void (**)(char *, const char *))(v32 + 8))(v38, v39);
  return v27 != 1;
}

BOOL Sequence.allSatisfy(_:)(uint64_t (*a1)(char *), uint64_t a2, uint64_t a3, int **a4)
{
  uint64_t v33 = a1;
  uint64_t v34 = a2;
  uint64_t AssociatedConformanceWitness = (uint64_t)a4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, a4, a3, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
  uint64_t v31 = *((void *)AssociatedTypeWitness - 1);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v9 = (char *)&v31 - v8;
  uint64_t v12 = type metadata accessor for Optional(0, (uint64_t)AssociatedTypeWitness, v10, v11);
  uint64_t v13 = MEMORY[0x1F4188790](v12 - 1);
  uint64_t v15 = (char *)&v31 - v14;
  uint64_t v16 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](v13);
  int v18 = (char *)&v31 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v19 = swift_getAssociatedTypeWitness(0, a4, a3, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Iterator);
  uint64_t v32 = *((void *)v19 - 1);
  MEMORY[0x1F4188790](v19);
  uint64_t v21 = (char *)&v31 - v20;
  (*(void (**)(char *, const char *, uint64_t))(v16 + 16))(v18, v39, a3);
  uint64_t v22 = *(void (**)(uint64_t))(AssociatedConformanceWitness + 32);
  uint64_t v38 = v21;
  uint64_t v23 = AssociatedConformanceWitness;
  v22(a3);
  uint64_t v39 = v19;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v23, a3, (uint64_t)v19, (uint64_t)&protocol requirements base descriptor for Sequence, associated conformance descriptor for Sequence.Sequence.Iterator: IteratorProtocol);
  uint64_t v35 = *(void (**)(const char *, uint64_t))(AssociatedConformanceWitness + 16);
  uint64_t v36 = AssociatedConformanceWitness + 16;
  uint64_t v24 = (uint64_t (**)(char *, uint64_t, const char *))(v31 + 48);
  uint64_t v25 = (void (**)(char *, char *, const char *))(v31 + 32);
  uint64_t v26 = (void (**)(char *, const char *))(v31 + 8);
  do
  {
    v35(v39, AssociatedConformanceWitness);
    int v27 = (*v24)(v15, 1, AssociatedTypeWitness);
    if (v27 == 1) {
      break;
    }
    (*v25)(v9, v15, AssociatedTypeWitness);
    char v28 = v33(v9);
    if (v4)
    {
      (*v26)(v9, AssociatedTypeWitness);
      break;
    }
    char v29 = v28;
    (*v26)(v9, AssociatedTypeWitness);
  }
  while ((v29 & 1) != 0);
  (*(void (**)(char *, const char *))(v32 + 8))(v38, v39);
  return v27 == 1;
}

void Sequence.flatMap<A>(_:)(void (*a1)(char *), uint64_t a2, uint64_t a3, uint64_t a4, int **a5, int **a6)
{
  uint64_t v48 = a4;
  uint64_t v49 = a6;
  uint64_t v44 = a1;
  uint64_t v45 = a2;
  MEMORY[0x1F4188790](a1);
  v50 = (uint64_t *)((char *)&v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v46 = associated type descriptor for Sequence.Element;
  uint64_t v42 = a5;
  uint64_t v10 = v9;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, a5, v9, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
  uint64_t v41 = *((void *)AssociatedTypeWitness - 1);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v13 = (char *)&v37 - v12;
  uint64_t v16 = type metadata accessor for Optional(0, (uint64_t)AssociatedTypeWitness, v14, v15);
  uint64_t v17 = MEMORY[0x1F4188790](v16 - 1);
  char v19 = (char *)&v37 - v18;
  uint64_t v20 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v17);
  uint64_t v22 = (char *)&v37 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = swift_getAssociatedTypeWitness(0, a5, v10, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Iterator);
  uint64_t v38 = *((void *)v23 - 1);
  MEMORY[0x1F4188790](v23);
  uint64_t v25 = (_DWORD *)((char *)&v37 - v24);
  Swift::String::Index v43 = (uint64_t *)swift_getAssociatedTypeWitness(0, v49, v48, (uint64_t)&protocol requirements base descriptor for Sequence, v46);
  _swift_isClassOrObjCExistentialType((uint64_t)v43, v43);
  uint64_t v51 = &_swiftEmptyArrayStorage;
  (*(void (**)(char *, const char *, uint64_t))(v20 + 16))(v22, v47, v10);
  uint64_t v26 = v10;
  uint64_t v27 = v10;
  uint64_t v28 = (uint64_t)v42;
  ((void (*)(uint64_t))v42[4])(v26);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v28, v27, (uint64_t)v23, (uint64_t)&protocol requirements base descriptor for Sequence, associated conformance descriptor for Sequence.Sequence.Iterator: IteratorProtocol);
  uint64_t v30 = *(int ***)(AssociatedConformanceWitness + 16);
  v46 = v25;
  uint64_t v47 = v23;
  uint64_t v42 = v30;
  ((void (*)(const char *, uint64_t))v30)(v23, AssociatedConformanceWitness);
  uint64_t v31 = v41;
  uint64_t v32 = *(unsigned int (**)(char *, uint64_t, const char *))(v41 + 48);
  if (v32(v19, 1, AssociatedTypeWitness) == 1)
  {
LABEL_5:
    (*(void (**)(_DWORD *, const char *))(v38 + 8))(v46, v47);
  }
  else
  {
    uint64_t v39 = v32;
    uint64_t v40 = AssociatedConformanceWitness;
    uint64_t v41 = *(void *)(v31 + 32);
    uint64_t v33 = (void (**)(char *, const char *))(v31 + 8);
    while (1)
    {
      ((void (*)(char *, char *, const char *))v41)(v13, v19, AssociatedTypeWitness);
      v44(v13);
      if (v6) {
        break;
      }
      (*v33)(v13, AssociatedTypeWitness);
      uint64_t v36 = type metadata accessor for Array(0, (uint64_t)v43, v34, v35);
      Array.append<A>(contentsOf:)((void (*)(void, void))v50, (uint64_t)v36, v48, (uint64_t)v49);
      ((void (*)(const char *, uint64_t))v42)(v47, v40);
      if (v39(v19, 1, AssociatedTypeWitness) == 1) {
        goto LABEL_5;
      }
    }
    (*v33)(v13, AssociatedTypeWitness);
    (*(void (**)(_DWORD *, const char *))(v38 + 8))(v46, v47);
    swift_bridgeObjectRelease((uint64_t)v51);
  }
}

void Sequence.compactMap<A>(_:)(void (*a1)(void), uint64_t a2, uint64_t a3, uint64_t *a4, int **a5)
{
}

{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const char *AssociatedTypeWitness;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  Class *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  const char *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t AssociatedConformanceWitness;
  void (*v32)(const char *, uint64_t);
  char *v33;
  uint64_t (*v34)(char *, uint64_t, const char *);
  void (*v35)(uint64_t, char *, const char *);
  uint64_t v36;
  uint64_t v37;
  void (**v38)(char *, char *, uint64_t);
  int v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  void (*v43)(char *, char *, uint64_t);
  char *v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  Class *v49;
  void v50[2];
  uint64_t v51;
  void (**v52)(char *, Class *);
  uint64_t v53;
  char *v54;
  char *v55;
  char *v56;
  Class *v57;
  unsigned int (**v58)(char *, uint64_t, uint64_t *);
  uint64_t (*v59)(char *, uint64_t, const char *);
  void (*v60)(void);
  void (*v61)(const char *, uint64_t);
  uint64_t v62;
  void (*v63)(uint64_t, char *, const char *);
  void (**v64)(uint64_t, const char *);
  uint64_t *v65;
  char *v66;
  uint64_t v67;
  char *v68;
  const char *v69;
  uint64_t v70;
  const char *v71;
  __objc2_class **v72;

  uint64_t v67 = a2;
  uint64_t v57 = type metadata accessor for Optional(0, (uint64_t)a4, a3, (uint64_t)a4);
  uint64_t v52 = (void (**)(char *, Class *))*(v57 - 1);
  uint64_t v9 = MEMORY[0x1F4188790](v57);
  uint64_t v66 = (char *)v50 - v10;
  v53 = *(a4 - 1);
  uint64_t v11 = MEMORY[0x1F4188790](v9);
  uint64_t v56 = (char *)v50 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11);
  char v55 = (char *)v50 - v13;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, a5, a3, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
  uint64_t v70 = *((void *)AssociatedTypeWitness - 1);
  uint64_t v71 = AssociatedTypeWitness;
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  v50[0] = (char *)v50 - v15;
  char v19 = type metadata accessor for Optional(0, v16, v17, v18);
  uint64_t v20 = MEMORY[0x1F4188790](v19 - 1);
  uint64_t v22 = (char *)v50 - v21;
  uint64_t v23 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](v20);
  uint64_t v25 = (char *)v50 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = (uint64_t)a5;
  uint64_t v27 = swift_getAssociatedTypeWitness(0, a5, a3, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Iterator);
  uint64_t v51 = *((void *)v27 - 1);
  MEMORY[0x1F4188790](v27);
  char v29 = (char *)v50 - v28;
  uint64_t v65 = a4;
  _swift_isClassOrObjCExistentialType((uint64_t)a4, a4);
  uint64_t v72 = &_swiftEmptyArrayStorage;
  (*(void (**)(char *, const char *, uint64_t))(v23 + 16))(v25, v69, a3);
  (*(void (**)(uint64_t, uint64_t))(v26 + 32))(a3, v26);
  uint64_t v30 = v70;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v26, a3, (uint64_t)v27, (uint64_t)&protocol requirements base descriptor for Sequence, associated conformance descriptor for Sequence.Sequence.Iterator: IteratorProtocol);
  uint64_t v32 = *(void (**)(const char *, uint64_t))(AssociatedConformanceWitness + 16);
  uint64_t v68 = v29;
  v69 = v27;
  uint64_t v33 = v22;
  v32(v27, AssociatedConformanceWitness);
  uint64_t v34 = *(uint64_t (**)(char *, uint64_t, const char *))(v30 + 48);
  if (v34(v22, 1, v71) == 1)
  {
LABEL_2:
    (*(void (**)(char *, const char *))(v51 + 8))(v68, v69);
  }
  else
  {
    uint64_t v61 = v32;
    char v62 = AssociatedConformanceWitness + 16;
    uint64_t v35 = *(void (**)(uint64_t, char *, const char *))(v30 + 32);
    uint64_t v70 = v30 + 32;
    BOOL v63 = v35;
    v64 = (void (**)(uint64_t, const char *))(v30 + 8);
    uint64_t v58 = (unsigned int (**)(char *, uint64_t, uint64_t *))(v53 + 48);
    char v59 = v34;
    ++v52;
    v53 += 32;
    uint64_t v36 = v50[1];
    uint64_t v37 = v50[0];
    uint64_t v60 = a1;
    uint64_t v54 = v22;
    uint64_t v38 = (void (**)(char *, char *, uint64_t))v53;
    while (1)
    {
      uint64_t v40 = AssociatedConformanceWitness;
      v63(v37, v33, v71);
      uint64_t v41 = v66;
      a1(v37);
      if (v36) {
        break;
      }
      (*v64)(v37, v71);
      uint64_t v42 = (uint64_t)v65;
      if ((*v58)(v41, 1, v65) == 1)
      {
        (*v52)(v41, v57);
      }
      else
      {
        Swift::String::Index v43 = *v38;
        uint64_t v44 = v55;
        (*v38)(v55, v41, v42);
        uint64_t v45 = (uint64_t)v56;
        v46 = v44;
        uint64_t v36 = 0;
        uint64_t v33 = v54;
        v43(v56, v46, v42);
        uint64_t v49 = type metadata accessor for Array(0, v42, v47, v48);
        Array.append(_:)(v45, (uint64_t)v49);
      }
      uint64_t AssociatedConformanceWitness = v40;
      v61(v69, v40);
      uint64_t v39 = v59(v33, 1, v71);
      a1 = v60;
      if (v39 == 1) {
        goto LABEL_2;
      }
    }
    (*v64)(v37, v71);
    (*(void (**)(char *, const char *))(v51 + 8))(v68, v69);
    swift_bridgeObjectRelease((uint64_t)v72);
  }
}

void Sequence._compactMap<A>(_:)(void (*a1)(void), uint64_t a2, uint64_t a3, uint64_t *a4, int **a5)
{
  uint64_t v67 = a2;
  uint64_t v57 = type metadata accessor for Optional(0, (uint64_t)a4, a3, (uint64_t)a4);
  uint64_t v52 = (void (**)(char *, Class *))*(v57 - 1);
  uint64_t v9 = MEMORY[0x1F4188790](v57);
  uint64_t v66 = (char *)v50 - v10;
  uint64_t v53 = *(a4 - 1);
  uint64_t v11 = MEMORY[0x1F4188790](v9);
  uint64_t v56 = (char *)v50 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11);
  char v55 = (char *)v50 - v13;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, a5, a3, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
  uint64_t v70 = *((void *)AssociatedTypeWitness - 1);
  uint64_t v71 = AssociatedTypeWitness;
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  v50[0] = (char *)v50 - v15;
  char v19 = type metadata accessor for Optional(0, v16, v17, v18);
  uint64_t v20 = MEMORY[0x1F4188790](v19 - 1);
  uint64_t v22 = (char *)v50 - v21;
  uint64_t v23 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](v20);
  uint64_t v25 = (char *)v50 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = (uint64_t)a5;
  uint64_t v27 = swift_getAssociatedTypeWitness(0, a5, a3, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Iterator);
  uint64_t v51 = *((void *)v27 - 1);
  MEMORY[0x1F4188790](v27);
  char v29 = (char *)v50 - v28;
  uint64_t v65 = a4;
  _swift_isClassOrObjCExistentialType((uint64_t)a4, a4);
  uint64_t v72 = &_swiftEmptyArrayStorage;
  (*(void (**)(char *, const char *, uint64_t))(v23 + 16))(v25, v69, a3);
  (*(void (**)(uint64_t, uint64_t))(v26 + 32))(a3, v26);
  uint64_t v30 = v70;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v26, a3, (uint64_t)v27, (uint64_t)&protocol requirements base descriptor for Sequence, associated conformance descriptor for Sequence.Sequence.Iterator: IteratorProtocol);
  uint64_t v32 = *(void (**)(const char *, uint64_t))(AssociatedConformanceWitness + 16);
  uint64_t v68 = v29;
  v69 = v27;
  uint64_t v33 = v22;
  v32(v27, AssociatedConformanceWitness);
  uint64_t v34 = *(uint64_t (**)(char *, uint64_t, const char *))(v30 + 48);
  if (v34(v22, 1, v71) == 1)
  {
LABEL_2:
    (*(void (**)(char *, const char *))(v51 + 8))(v68, v69);
  }
  else
  {
    uint64_t v61 = v32;
    uint64_t v62 = AssociatedConformanceWitness + 16;
    uint64_t v35 = *(void (**)(uint64_t, char *, const char *))(v30 + 32);
    uint64_t v70 = v30 + 32;
    BOOL v63 = v35;
    v64 = (void (**)(uint64_t, const char *))(v30 + 8);
    uint64_t v58 = (unsigned int (**)(char *, uint64_t, uint64_t *))(v53 + 48);
    char v59 = v34;
    ++v52;
    v53 += 32;
    uint64_t v36 = v50[1];
    uint64_t v37 = v50[0];
    uint64_t v60 = a1;
    uint64_t v54 = v22;
    uint64_t v38 = (void (**)(char *, char *, uint64_t))v53;
    while (1)
    {
      uint64_t v47 = AssociatedConformanceWitness;
      v63(v37, v33, v71);
      uint64_t v48 = v66;
      a1(v37);
      if (v36) {
        break;
      }
      (*v64)(v37, v71);
      uint64_t v49 = (uint64_t)v65;
      if ((*v58)(v48, 1, v65) == 1)
      {
        (*v52)(v48, v57);
      }
      else
      {
        uint64_t v39 = *v38;
        uint64_t v40 = v55;
        (*v38)(v55, v48, v49);
        uint64_t v41 = (uint64_t)v56;
        uint64_t v42 = v40;
        uint64_t v36 = 0;
        uint64_t v33 = v54;
        v39(v56, v42, v49);
        uint64_t v45 = type metadata accessor for Array(0, v49, v43, v44);
        Array.append(_:)(v41, (uint64_t)v45);
      }
      uint64_t AssociatedConformanceWitness = v47;
      v61(v69, v47);
      int v46 = v59(v33, 1, v71);
      a1 = v60;
      if (v46 == 1) {
        goto LABEL_2;
      }
    }
    (*v64)(v37, v71);
    (*(void (**)(char *, const char *))(v51 + 8))(v68, v69);
    swift_bridgeObjectRelease((uint64_t)v72);
  }
}

uint64_t (*Set._variant.modify())()
{
  return EnumeratedSequence._base.modify;
}

__objc2_class **Set.init(minimumCapacity:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a1) {
    return &_swiftEmptySetSingleton;
  }
  type metadata accessor for _SetStorage(0, a2, a3, a4);
  return (__objc2_class **)static _SetStorage.allocate(capacity:)(a1);
}

uint64_t Set.init(_cocoa:)(unint64_t a1)
{
  return ~(a1 >> 1) & 0x4000000000000000 | a1;
}

uint64_t Set._Variant.init(cocoa:)(unint64_t a1)
{
  return ~(a1 >> 1) & 0x4000000000000000 | a1;
}

uint64_t Set.init(_immutableCocoaSet:)(unint64_t a1)
{
  return ~(a1 >> 1) & 0x4000000000000000 | a1;
}

__objc2_class **Set.init(arrayLiteral:)(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  if (Array._getCount()()) {
    uint64_t v6 = specialized Set.init(_nonEmptyArrayLiteral:)(a1, a2, a3);
  }
  else {
    uint64_t v6 = &_swiftEmptySetSingleton;
  }
  swift_bridgeObjectRelease(a1);
  return v6;
}

void protocol witness for ExpressibleByArrayLiteral.init(arrayLiteral:) in conformance Set<A>(uint64_t a1@<X0>, uint64_t a2@<X1>, __objc2_class ***a3@<X8>)
{
  uint64_t v6 = *(uint64_t **)(a2 + 16);
  if (Array._getCount()()) {
    uint64_t v7 = specialized Set.init(_nonEmptyArrayLiteral:)(a1, v6, *(void *)(a2 + 24));
  }
  else {
    uint64_t v7 = &_swiftEmptySetSingleton;
  }
  swift_bridgeObjectRelease(a1);
  *a3 = v7;
}

int64_t Set._Variant.makeIterator()@<X0>(int64_t result@<X0>, int64_t *a2@<X8>)
{
  if ((result & 0xC000000000000001) != 0)
  {
    if (result < 0) {
      uint64_t v3 = result;
    }
    else {
      uint64_t v3 = result & 0xFFFFFFFFFFFFFF8;
    }
    uint64_t v4 = (unint64_t *)type metadata accessor for __CocoaSet.Iterator();
    unint64_t v5 = (unint64_t)swift_allocObject(v4, 0xE8uLL, 7uLL);
    int64_t v6 = 0;
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    *(void *)(v5 + 208) = v3;
    *(void *)(v5 + 216) = 0;
    *(_OWORD *)(v5 + 16) = 0u;
    *(_OWORD *)(v5 + 32) = 0u;
    *(_OWORD *)(v5 + 48) = 0u;
    *(_OWORD *)(v5 + 64) = 0u;
    *(_OWORD *)(v5 + 80) = 0u;
    *(_OWORD *)(v5 + 96) = 0u;
    *(_OWORD *)(v5 + 112) = 0u;
    *(_OWORD *)(v5 + 128) = 0u;
    *(_OWORD *)(v5 + 144) = 0u;
    *(_OWORD *)(v5 + 160) = 0u;
    *(_OWORD *)(v5 + 176) = 0u;
    *(_OWORD *)(v5 + 192) = 0u;
    *(void *)(v5 + 224) = 0;
    result = v5 | 0x8000000000000000;
  }
  else
  {
    uint64_t v9 = -1;
    uint64_t v10 = -1 << *(unsigned char *)(result + 32);
    int64_t v6 = result + 56;
    uint64_t v7 = ~v10;
    uint64_t v11 = -v10;
    if (v11 < 64) {
      uint64_t v9 = ~(-1 << v11);
    }
    uint64_t v8 = v9 & *(void *)(result + 56);
  }
  *a2 = result;
  a2[1] = v6;
  a2[2] = v7;
  a2[3] = 0;
  a2[4] = v8;
  return result;
}

uint64_t Set._Variant.contains(_:)(id *a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v8 = *(a3 - 1);
  MEMORY[0x1F4188790](a1);
  uint64_t v10 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((v11 & 0xC000000000000001) != 0)
  {
    if (a2 < 0) {
      uint64_t v12 = (void *)a2;
    }
    else {
      uint64_t v12 = (void *)(a2 & 0xFFFFFFFFFFFFFF8);
    }
    uint64_t v13 = _bridgeAnythingToObjectiveC<A>(_:)(a1, a3);
    id v14 = [v12 sel_member_:v13];
    swift_unknownObjectRelease(v13);
    if (v14)
    {
      swift_unknownObjectRelease(v14);
      char v15 = 1;
      return v15 & 1;
    }
LABEL_13:
    char v15 = 0;
    return v15 & 1;
  }
  if (!*(void *)(a2 + 16)) {
    goto LABEL_13;
  }
  uint64_t v16 = (*(uint64_t (**)(void, uint64_t *, uint64_t))(a4 + 32))(*(void *)(a2 + 40), a3, a4);
  uint64_t v17 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v18 = v16 & ~v17;
  uint64_t v30 = a2 + 56;
  if (((*(void *)(a2 + 56 + ((v18 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v18) & 1) == 0) {
    goto LABEL_13;
  }
  uint64_t v26 = ~v17;
  uint64_t v28 = *(void *)(a4 + 8);
  char v29 = a1;
  uint64_t v27 = *(uint64_t (**)(char *, id *, uint64_t *, uint64_t))(v28 + 8);
  uint64_t v21 = *(void (**)(char *, unint64_t, uint64_t *))(v8 + 16);
  uint64_t v20 = v8 + 16;
  char v19 = v21;
  uint64_t v22 = *(void *)(v20 + 56);
  uint64_t v23 = (void (**)(char *, uint64_t *))(v20 - 8);
  do
  {
    v19(v10, *(void *)(a2 + 48) + v22 * v18, a3);
    char v15 = v27(v10, v29, a3, v28);
    (*v23)(v10, a3);
    if (v15) {
      break;
    }
    unint64_t v18 = (v18 + 1) & v26;
  }
  while (((*(void *)(v30 + ((v18 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v18) & 1) != 0);
  return v15 & 1;
}

uint64_t Set._customContainsEquatableElement(_:)(id *a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  return Set.contains(_:)(a1, a2, a3, a4) & 1;
}

__n128 protocol witness for Sequence.makeIterator() in conformance Set<A>@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *v1;
  if ((v3 & 0xC000000000000001) != 0)
  {
    uint64_t v4 = (void *)specialized _ArrayBuffer._nonNative.getter(v3);
    swift_unknownObjectRetain(v4);
    swift_bridgeObjectRelease(v3);
    unint64_t v5 = (unint64_t *)type metadata accessor for __CocoaSet.Iterator();
    int64_t v6 = swift_allocObject(v5, 0xE8uLL, 7uLL);
    *((_OWORD *)v6 + 1) = 0u;
    *((_OWORD *)v6 + 2) = 0u;
    *((_OWORD *)v6 + 3) = 0u;
    *((_OWORD *)v6 + 4) = 0u;
    *((_OWORD *)v6 + 5) = 0u;
    *((_OWORD *)v6 + 6) = 0u;
    *((_OWORD *)v6 + 7) = 0u;
    *((_OWORD *)v6 + 8) = 0u;
    *((_OWORD *)v6 + 9) = 0u;
    *((_OWORD *)v6 + 10) = 0u;
    *((_OWORD *)v6 + 11) = 0u;
    *((_OWORD *)v6 + 12) = 0u;
    v6[27] = 0;
    v6[28] = 0;
    v6[26] = v4;
    uint64_t v7 = v17;
    Set.Iterator.init(_cocoa:)((uint64_t)v6, (uint64_t)v17);
  }
  else
  {
    uint64_t v8 = -1 << *(unsigned char *)(v3 + 32);
    uint64_t v9 = ~v8;
    uint64_t v10 = *(void *)(v3 + 56);
    uint64_t v11 = -v8;
    if (v11 < 64) {
      uint64_t v12 = ~(-1 << v11);
    }
    else {
      uint64_t v12 = -1;
    }
    v17[0] = v3;
    v17[1] = v3 + 56;
    v17[2] = v9;
    v17[3] = 0;
    v17[4] = v12 & v10;
    uint64_t v7 = v16;
    Set.Iterator.init(_native:)((uint64_t)v17, (uint64_t)v16);
  }
  uint64_t v13 = *((void *)v7 + 4);
  __n128 result = *(__n128 *)v7;
  long long v15 = *((_OWORD *)v7 + 1);
  *(_OWORD *)a1 = *(_OWORD *)v7;
  *(_OWORD *)(a1 + 16) = v15;
  *(void *)(a1 + 32) = v13;
  return result;
}

uint64_t protocol witness for Sequence.underestimatedCount.getter in conformance Set<A>(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable(protocol conformance descriptor for Set<A>, a1, a3);

  return Collection.underestimatedCount.getter((uint64_t)a1, WitnessTable);
}

uint64_t protocol witness for Sequence._customContainsEquatableElement(_:) in conformance Set<A>(id *a1, uint64_t a2)
{
  return Set.contains(_:)(a1, *v2, *(uint64_t **)(a2 + 16), *(void *)(a2 + 24)) & 1;
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance Set<A>(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable(protocol conformance descriptor for Set<A>, a1, a3);

  return Collection._copyToContiguousArray()((uint64_t)a1, WitnessTable);
}

void Set.filter(_:)(uint64_t a1, uint64_t a2, uint64_t a3, char *a4, uint64_t a5)
{
}

void Set._Variant.filter(_:)(uint64_t a1, uint64_t a2, uint64_t a3, char *a4, uint64_t a5)
{
  uint64_t v11 = type metadata accessor for Optional(0, (uint64_t)a4, a3, (uint64_t)a4);
  uint64_t v12 = (uint64_t)*(v11 - 1);
  uint64_t v13 = MEMORY[0x1F4188790](v11);
  uint64_t v14 = MEMORY[0x1F4188790](v13);
  uint64_t v15 = *((void *)a4 - 1);
  uint64_t v16 = MEMORY[0x1F4188790](v14);
  char v55 = (char *)&v41 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = MEMORY[0x1F4188790](v16);
  uint64_t v22 = (char *)&v41 - v21;
  if ((a3 & 0xC000000000000001) == 0)
  {
    _NativeSet.filter(_:)(a1, a2, a3, (uint64_t)a4, a5);
    return;
  }
  uint64_t v47 = v18;
  uint64_t v48 = v20;
  uint64_t v46 = v19;
  uint64_t v53 = (uint64_t (*)(char *))a1;
  uint64_t v54 = a2;
  uint64_t v57 = &_swiftEmptySetSingleton;
  uint64_t v52 = a5;
  if (a3 < 0) {
    uint64_t v23 = a3;
  }
  else {
    uint64_t v23 = a3 & 0xFFFFFFFFFFFFFF8;
  }
  uint64_t v24 = (unint64_t *)type metadata accessor for __CocoaSet.Iterator();
  uint64_t v25 = swift_allocObject(v24, 0xE8uLL, 7uLL);
  uint64_t v26 = 0;
  *((_OWORD *)v25 + 1) = 0u;
  uint64_t v51 = v25 + 2;
  *((_OWORD *)v25 + 5) = 0u;
  v50 = v25 + 10;
  v25[27] = 0;
  uint64_t v27 = v25 + 27;
  *((_OWORD *)v25 + 2) = 0u;
  *((_OWORD *)v25 + 3) = 0u;
  *((_OWORD *)v25 + 4) = 0u;
  *((_OWORD *)v25 + 6) = 0u;
  *((_OWORD *)v25 + 7) = 0u;
  *((_OWORD *)v25 + 8) = 0u;
  *((_OWORD *)v25 + 9) = 0u;
  *((_OWORD *)v25 + 10) = 0u;
  *((_OWORD *)v25 + 11) = 0u;
  uint64_t v44 = (void (**)(uint64_t, void *, uint64_t))(v12 + 16);
  uint64_t v45 = (void (**)(void *, uint64_t, uint64_t, char *))(v15 + 56);
  *((_OWORD *)v25 + 12) = 0u;
  uint64_t v42 = (void (**)(void *, uint64_t))(v12 + 8);
  uint64_t v43 = (unsigned int (**)(uint64_t, uint64_t, char *))(v15 + 48);
  uint64_t v49 = (void (**)(char *, uint64_t, char *))(v15 + 32);
  v25[26] = v23;
  uint64_t v28 = v52;
  char v29 = (void (**)(char *, char *))(v15 + 8);
  v25[28] = 0;
  while (v26 != v25[28])
  {
LABEL_10:
    uint64_t v31 = v25[3];
    if (!v31) {
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/SetBridging.swift", 23, 2, 0x254uLL, 0);
    }
    if ((unint64_t)(v26 - 0x1000000000000000) >> 61 != 7)
    {
      __break(1u);
LABEL_28:
      _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "load from misaligned raw pointer", 32, 2, "Swift/UnsafeRawPointer.swift", 28, 2, 0x4F9uLL, 0);
    }
    uint64_t v32 = (void **)(v31 + 8 * v26);
    if ((v32 & 7) != 0) {
      goto LABEL_28;
    }
    uint64_t v33 = *v32;
    *uint64_t v27 = v26 + 1;
    swift_unknownObjectRetain(v33);
    if (_swift_isClassOrObjCExistentialType((uint64_t)a4, (uint64_t *)a4))
    {
      uint64_t v56 = v33;
      swift_dynamicCast(v22, (unint64_t *)&v56, qword_1ECA06328, a4, 7uLL);
    }
    else
    {
      (*v45)(v48, 1, 1, a4);
      _bridgeNonVerbatimFromObjectiveC<A>(_:_:_:)((swift *)v33, (uint64_t)a4, v48);
      swift_unknownObjectRelease(v33);
      uint64_t v40 = v46;
      (*v44)(v46, v48, v47);
      if ((*v43)(v40, 1, a4) == 1) {
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/BridgeObjectiveC.swift", 28, 2, 0xFCuLL, 0);
      }
      (*v42)(v48, v47);
      (*v49)(v22, v40, a4);
    }
    char v34 = v53(v22);
    if (v5)
    {
      swift_release((uint64_t)v25);
      (*v29)(v22, a4);
      swift_release((uint64_t)v57);
      return;
    }
    if (v34)
    {
      (*v49)(v55, (uint64_t)v22, a4);
      uint64_t v36 = v57;
      uint64_t v37 = v57[2];
      if (v57[3] <= v37)
      {
        Swift::Int v38 = (Swift::Int)&v37->isa + 1;
        type metadata accessor for _NativeSet(0, (uint64_t)a4, v52, v35);
        Swift::Int v39 = v38;
        uint64_t v28 = v52;
        _NativeSet.resize(capacity:)(v39);
        uint64_t v36 = v57;
      }
      _NativeSet._unsafeInsertNew(_:)((uint64_t)v55, (uint64_t)v36, (uint64_t)a4, v28);
      uint64_t v26 = *v27;
      if (*v27 < 0) {
        goto LABEL_26;
      }
    }
    else
    {
      (*v29)(v22, a4);
      uint64_t v26 = *v27;
      if (*v27 < 0) {
        goto LABEL_26;
      }
    }
  }
  id v30 = [(id)v25[26] countByEnumeratingWithState:v51 objects:v50 count:16];
  v25[28] = v30;
  if (v30)
  {
    uint64_t v26 = 0;
    *uint64_t v27 = 0;
    goto LABEL_10;
  }
  *uint64_t v27 = -1;
LABEL_26:
  swift_release((uint64_t)v25);
}

unint64_t *Set.startIndex.getter(uint64_t a1)
{
  if ((a1 & 0xC000000000000001) == 0) {
    return (unint64_t *)_NativeSet.startIndex.getter(a1);
  }
  if (a1 < 0) {
    v2 = (void *)a1;
  }
  else {
    v2 = (void *)(a1 & 0xFFFFFFFFFFFFFF8);
  }
  unint64_t v3 = (unint64_t)[swift_unknownObjectRetain(v2) count];
  __n128 result = (unint64_t *)type metadata accessor for __BridgingBufferStorage(0);
  if ((v3 - 0x1000000000000000) >> 61 == 7)
  {
    if (!__OFADD__(8 * v3, 24))
    {
      uint64_t v5 = swift_bufferAllocate(result, 8 * v3 + 24, 7uLL);
      v5[2] = v3;
      [v2 sel_getObjects_:v5 + 3];
      swift_bridgeObjectRelease(a1);
      int64_t v6 = (unint64_t *)type metadata accessor for __CocoaSet.Index.Storage();
      uint64_t v7 = swift_allocObject(v6, 0x20uLL, 7uLL);
      v7[2] = v2;
      v7[3] = v5;
      swift_bridgeObjectRetain(a1);
      return v7;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

unint64_t *Set._Variant.startIndex.getter(uint64_t a1)
{
  if ((a1 & 0xC000000000000001) == 0) {
    return (unint64_t *)_NativeSet.startIndex.getter(a1);
  }
  if (a1 < 0) {
    v2 = (void *)a1;
  }
  else {
    v2 = (void *)(a1 & 0xFFFFFFFFFFFFFF8);
  }
  unint64_t v3 = (unint64_t)[swift_unknownObjectRetain(v2) count];
  __n128 result = (unint64_t *)type metadata accessor for __BridgingBufferStorage(0);
  if ((v3 - 0x1000000000000000) >> 61 == 7)
  {
    if (!__OFADD__(8 * v3, 24))
    {
      uint64_t v5 = swift_bufferAllocate(result, 8 * v3 + 24, 7uLL);
      v5[2] = v3;
      [v2 sel_getObjects_:v5 + 3];
      swift_bridgeObjectRelease(a1);
      int64_t v6 = (unint64_t *)type metadata accessor for __CocoaSet.Index.Storage();
      uint64_t v7 = swift_allocObject(v6, 0x20uLL, 7uLL);
      v7[2] = v2;
      v7[3] = v5;
      swift_bridgeObjectRetain(a1);
      return v7;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

unint64_t *Set.endIndex.getter(uint64_t a1)
{
  if ((a1 & 0xC000000000000001) == 0) {
    return (unint64_t *)(1 << *(unsigned char *)(a1 + 32));
  }
  if (a1 < 0) {
    v2 = (void *)a1;
  }
  else {
    v2 = (void *)(a1 & 0xFFFFFFFFFFFFFF8);
  }
  unint64_t v3 = (unint64_t)[swift_unknownObjectRetain(v2) count];
  __n128 result = (unint64_t *)type metadata accessor for __BridgingBufferStorage(0);
  if ((v3 - 0x1000000000000000) >> 61 == 7)
  {
    if (!__OFADD__(8 * v3, 24))
    {
      uint64_t v5 = swift_bufferAllocate(result, 8 * v3 + 24, 7uLL);
      v5[2] = v3;
      [v2 sel_getObjects_:v5 + 3];
      swift_bridgeObjectRelease(a1);
      int64_t v6 = (unint64_t *)type metadata accessor for __CocoaSet.Index.Storage();
      uint64_t v7 = swift_allocObject(v6, 0x20uLL, 7uLL);
      v7[2] = v2;
      v7[3] = v5;
      swift_bridgeObjectRetain(a1);
      return v7;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

unint64_t *Set._Variant.endIndex.getter(uint64_t a1)
{
  if ((a1 & 0xC000000000000001) == 0) {
    return (unint64_t *)(1 << *(unsigned char *)(a1 + 32));
  }
  if (a1 < 0) {
    v2 = (void *)a1;
  }
  else {
    v2 = (void *)(a1 & 0xFFFFFFFFFFFFFF8);
  }
  unint64_t v3 = (unint64_t)[swift_unknownObjectRetain(v2) count];
  __n128 result = (unint64_t *)type metadata accessor for __BridgingBufferStorage(0);
  if ((v3 - 0x1000000000000000) >> 61 == 7)
  {
    if (!__OFADD__(8 * v3, 24))
    {
      uint64_t v5 = swift_bufferAllocate(result, 8 * v3 + 24, 7uLL);
      v5[2] = v3;
      [v2 sel_getObjects_:v5 + 3];
      swift_bridgeObjectRelease(a1);
      int64_t v6 = (unint64_t *)type metadata accessor for __CocoaSet.Index.Storage();
      uint64_t v7 = swift_allocObject(v6, 0x20uLL, 7uLL);
      v7[2] = v2;
      v7[3] = v5;
      swift_bridgeObjectRetain(a1);
      return v7;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

void Set.subscript.getter(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, char *a4@<X4>, uint64_t a5@<X5>, char *a6@<X8>)
{
  uint64_t v12 = *((void *)a4 - 1);
  uint64_t v13 = MEMORY[0x1F4188790](a1);
  uint64_t v15 = (char *)v43 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v13);
  if ((v18 & 0xC000000000000001) != 0)
  {
    if ((v16 & 1) == 0) {
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Attempting to access Set elements using an invalid index", 56, 2, "Swift/Set.swift", 15, 2, 0x567uLL, 0);
    }
    if (a1 >= 0) {
      uint64_t v19 = a1 & 0xFFFFFFFFFFFFFF8;
    }
    else {
      uint64_t v19 = a1;
    }
    uint64_t v20 = type metadata accessor for __CocoaSet.Index.Storage();
    if (swift_dynamicCastClass(v19, v20))
    {
      uint64_t v21 = *(void *)(v19 + 24);
      if (*(void *)(v21 + 16) > a2)
      {
        uint64_t v22 = *(void **)(v21 + 8 * a2 + 24);
        id v23 = swift_unknownObjectRetain(v22);
        _forceBridgeFromObjectiveC<A>(_:_:)(v23, a4, v24, a6);
        swift_unknownObjectRelease(v22);
        return;
      }
LABEL_32:
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Attempting to access Set elements using an invalid index", 56, 2, "Swift/SetBridging.swift", 23, 2, 0x1E1uLL, 0);
    }
LABEL_35:
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "invalid unsafeDowncast", 22, 2, "Swift/Builtin.swift", 19, 2, 0x10DuLL, 0);
  }
  if ((v16 & 1) == 0)
  {
    if ((a1 & 0x8000000000000000) == 0
      && 1 << *(unsigned char *)(a3 + 32) > a1
      && ((*(void *)(a3 + 8 * ((unint64_t)a1 >> 6) + 56) >> a1) & 1) != 0
      && *(_DWORD *)(a3 + 36) == a2)
    {
      (*(void (**)(char *, uint64_t, char *))(v12 + 16))(a6, *(void *)(a3 + 48) + *(void *)(v12 + 72) * a1, a4);
      return;
    }
    unint64_t v42 = 266;
LABEL_34:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Attempting to access Set elements using an invalid index", 56, 2, "Swift/NativeSet.swift", 21, 2, v42, 0);
  }
  v50 = (char *)v43 - v17;
  if (a1 >= 0) {
    uint64_t v25 = a1 & 0xFFFFFFFFFFFFFF8;
  }
  else {
    uint64_t v25 = a1;
  }
  uint64_t v26 = type metadata accessor for __CocoaSet.Index.Storage();
  swift_bridgeObjectRetain(a1);
  if (!swift_dynamicCastClass(v25, v26)) {
    goto LABEL_35;
  }
  if (*(_DWORD *)(a3 + 36) != specialized static Hasher._hash(seed:_:)(0, *(void *)(v25 + 16))) {
    goto LABEL_29;
  }
  if (!swift_dynamicCastClass(v25, v26)) {
    goto LABEL_35;
  }
  uint64_t v27 = *(void *)(v25 + 24);
  if (*(void *)(v27 + 16) <= a2) {
    goto LABEL_32;
  }
  uint64_t v44 = a6;
  uint64_t v28 = *(void **)(v27 + 8 * a2 + 24);
  swift_unknownObjectRetain(v28);
  outlined consume of [A : B].Index._Variant<A, B>(a1, a2, 1);
  _forceBridgeFromObjectiveC<A>(_:_:)(v28, a4, v29, v50);
  swift_unknownObjectRelease(v28);
  uint64_t v30 = (*(uint64_t (**)(void, char *, uint64_t))(a5 + 32))(*(void *)(a3 + 40), a4, a5);
  uint64_t v31 = -1 << *(unsigned char *)(a3 + 32);
  unint64_t v32 = v30 & ~v31;
  uint64_t v49 = a3;
  uint64_t v46 = a3 + 56;
  if (((*(void *)(a3 + 56 + ((v32 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v32) & 1) == 0)
  {
    (*(void (**)(char *, char *))(v12 + 8))(v50, a4);
LABEL_29:
    unint64_t v42 = 287;
    goto LABEL_34;
  }
  uint64_t v45 = ~v31;
  uint64_t v48 = *(void *)(a5 + 8);
  uint64_t v47 = *(uint64_t (**)(char *, char *, char *, uint64_t))(v48 + 8);
  uint64_t v35 = *(void (**)(void, void, void))(v12 + 16);
  uint64_t v34 = v12 + 16;
  uint64_t v33 = v35;
  uint64_t v36 = *(void *)(v34 + 56);
  uint64_t v37 = (void (**)(char *, char *))(v34 - 8);
  v43[1] = (v34 - 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v43[2] = v34 & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  while (1)
  {
    uint64_t v38 = v36;
    Swift::Int v39 = v33;
    v33(v15, *(void *)(v49 + 48) + v36 * v32, a4);
    char v40 = v47(v15, v50, a4, v48);
    uint64_t v41 = *v37;
    (*v37)(v15, a4);
    if (v40) {
      break;
    }
    unint64_t v32 = (v32 + 1) & v45;
    uint64_t v33 = v39;
    uint64_t v36 = v38;
    if (((*(void *)(v46 + ((v32 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v32) & 1) == 0)
    {
      v41(v50, a4);
      goto LABEL_29;
    }
  }
  v41(v50, a4);
  v39(v44, *(void *)(v49 + 48) + v38 * v32, a4);
}

void Set._Variant.element(at:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, char *a4@<X4>, uint64_t a5@<X5>, char *a6@<X8>)
{
  uint64_t v12 = *((void *)a4 - 1);
  uint64_t v13 = MEMORY[0x1F4188790](a1);
  uint64_t v15 = (char *)v43 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v13);
  if ((v18 & 0xC000000000000001) != 0)
  {
    if ((v16 & 1) == 0) {
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Attempting to access Set elements using an invalid index", 56, 2, "Swift/Set.swift", 15, 2, 0x567uLL, 0);
    }
    if (a1 >= 0) {
      uint64_t v19 = a1 & 0xFFFFFFFFFFFFFF8;
    }
    else {
      uint64_t v19 = a1;
    }
    uint64_t v20 = type metadata accessor for __CocoaSet.Index.Storage();
    if (swift_dynamicCastClass(v19, v20))
    {
      uint64_t v21 = *(void *)(v19 + 24);
      if (*(void *)(v21 + 16) > a2)
      {
        uint64_t v22 = *(void **)(v21 + 8 * a2 + 24);
        id v23 = swift_unknownObjectRetain(v22);
        _forceBridgeFromObjectiveC<A>(_:_:)(v23, a4, v24, a6);
        swift_unknownObjectRelease(v22);
        return;
      }
LABEL_32:
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Attempting to access Set elements using an invalid index", 56, 2, "Swift/SetBridging.swift", 23, 2, 0x1E1uLL, 0);
    }
LABEL_35:
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "invalid unsafeDowncast", 22, 2, "Swift/Builtin.swift", 19, 2, 0x10DuLL, 0);
  }
  if ((v16 & 1) == 0)
  {
    if ((a1 & 0x8000000000000000) == 0
      && 1 << *(unsigned char *)(a3 + 32) > a1
      && ((*(void *)(a3 + 8 * ((unint64_t)a1 >> 6) + 56) >> a1) & 1) != 0
      && *(_DWORD *)(a3 + 36) == a2)
    {
      (*(void (**)(char *, uint64_t, char *))(v12 + 16))(a6, *(void *)(a3 + 48) + *(void *)(v12 + 72) * a1, a4);
      return;
    }
    unint64_t v42 = 266;
LABEL_34:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Attempting to access Set elements using an invalid index", 56, 2, "Swift/NativeSet.swift", 21, 2, v42, 0);
  }
  v50 = (char *)v43 - v17;
  if (a1 >= 0) {
    uint64_t v25 = a1 & 0xFFFFFFFFFFFFFF8;
  }
  else {
    uint64_t v25 = a1;
  }
  uint64_t v26 = type metadata accessor for __CocoaSet.Index.Storage();
  swift_bridgeObjectRetain(a1);
  if (!swift_dynamicCastClass(v25, v26)) {
    goto LABEL_35;
  }
  if (*(_DWORD *)(a3 + 36) != specialized static Hasher._hash(seed:_:)(0, *(void *)(v25 + 16))) {
    goto LABEL_29;
  }
  if (!swift_dynamicCastClass(v25, v26)) {
    goto LABEL_35;
  }
  uint64_t v27 = *(void *)(v25 + 24);
  if (*(void *)(v27 + 16) <= a2) {
    goto LABEL_32;
  }
  uint64_t v44 = a6;
  uint64_t v28 = *(void **)(v27 + 8 * a2 + 24);
  swift_unknownObjectRetain(v28);
  outlined consume of [A : B].Index._Variant<A, B>(a1, a2, 1);
  _forceBridgeFromObjectiveC<A>(_:_:)(v28, a4, v29, v50);
  swift_unknownObjectRelease(v28);
  uint64_t v30 = (*(uint64_t (**)(void, char *, uint64_t))(a5 + 32))(*(void *)(a3 + 40), a4, a5);
  uint64_t v31 = -1 << *(unsigned char *)(a3 + 32);
  unint64_t v32 = v30 & ~v31;
  uint64_t v49 = a3;
  uint64_t v46 = a3 + 56;
  if (((*(void *)(a3 + 56 + ((v32 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v32) & 1) == 0)
  {
    (*(void (**)(char *, char *))(v12 + 8))(v50, a4);
LABEL_29:
    unint64_t v42 = 287;
    goto LABEL_34;
  }
  uint64_t v45 = ~v31;
  uint64_t v48 = *(void *)(a5 + 8);
  uint64_t v47 = *(uint64_t (**)(char *, char *, char *, uint64_t))(v48 + 8);
  uint64_t v35 = *(void (**)(void, void, void))(v12 + 16);
  uint64_t v34 = v12 + 16;
  uint64_t v33 = v35;
  uint64_t v36 = *(void *)(v34 + 56);
  uint64_t v37 = (void (**)(char *, char *))(v34 - 8);
  v43[1] = (v34 - 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v43[2] = v34 & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  while (1)
  {
    uint64_t v38 = v36;
    Swift::Int v39 = v33;
    v33(v15, *(void *)(v49 + 48) + v36 * v32, a4);
    char v40 = v47(v15, v50, a4, v48);
    uint64_t v41 = *v37;
    (*v37)(v15, a4);
    if (v40) {
      break;
    }
    unint64_t v32 = (v32 + 1) & v45;
    uint64_t v33 = v39;
    uint64_t v36 = v38;
    if (((*(void *)(v46 + ((v32 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v32) & 1) == 0)
    {
      v41(v50, a4);
      goto LABEL_29;
    }
  }
  v41(v50, a4);
  v39(v44, *(void *)(v49 + 48) + v38 * v32, a4);
}

int64_t Set.index(after:)(int64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  int64_t v5 = a1;
  int v6 = a3 & 1;
  if ((a4 & 0xC000000000000001) == 0) {
    return _NativeSet.index(after:)(a1, a2, v6, a4);
  }
  if (a4 < 0) {
    uint64_t v7 = a4;
  }
  else {
    uint64_t v7 = a4 & 0xFFFFFFFFFFFFFF8;
  }
  if (!v6) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Attempting to access Set elements using an invalid index", 56, 2, "Swift/Set.swift", 15, 2, 0x567uLL, 0);
  }
  if (a1 >= 0) {
    uint64_t v8 = a1 & 0xFFFFFFFFFFFFFF8;
  }
  else {
    uint64_t v8 = a1;
  }
  outlined copy of [A : B].Index._Variant<A, B>(a1, a2, 1);
  uint64_t v9 = type metadata accessor for __CocoaSet.Index.Storage();
  if (!swift_dynamicCastClass(v8, v9)) {
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "invalid unsafeDowncast", 22, 2, "Swift/Builtin.swift", 19, 2, 0x10DuLL, 0);
  }
  if (*(void *)(v8 + 16) != v7) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Invalid index", 13, 2, "Swift/SetBridging.swift", 23, 2, 0x169uLL, 0);
  }
  if (*(void *)(*(void *)(v8 + 24) + 16) <= a2) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Attempt to access endIndex", 26, 2, "Swift/SetBridging.swift", 23, 2, 0x16BuLL, 0);
  }
  return v5;
}

int64_t Set._Variant.index(after:)(int64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  int64_t v5 = a1;
  int v6 = a3 & 1;
  if ((a4 & 0xC000000000000001) == 0) {
    return _NativeSet.index(after:)(a1, a2, v6, a4);
  }
  if (a4 < 0) {
    uint64_t v7 = a4;
  }
  else {
    uint64_t v7 = a4 & 0xFFFFFFFFFFFFFF8;
  }
  if (!v6) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Attempting to access Set elements using an invalid index", 56, 2, "Swift/Set.swift", 15, 2, 0x567uLL, 0);
  }
  if (a1 >= 0) {
    uint64_t v8 = a1 & 0xFFFFFFFFFFFFFF8;
  }
  else {
    uint64_t v8 = a1;
  }
  outlined copy of [A : B].Index._Variant<A, B>(a1, a2, 1);
  uint64_t v9 = type metadata accessor for __CocoaSet.Index.Storage();
  if (!swift_dynamicCastClass(v8, v9)) {
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "invalid unsafeDowncast", 22, 2, "Swift/Builtin.swift", 19, 2, 0x10DuLL, 0);
  }
  if (*(void *)(v8 + 16) != v7) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Invalid index", 13, 2, "Swift/SetBridging.swift", 23, 2, 0x169uLL, 0);
  }
  if (*(void *)(*(void *)(v8 + 24) + 16) <= a2) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Attempt to access endIndex", 26, 2, "Swift/SetBridging.swift", 23, 2, 0x16BuLL, 0);
  }
  return v5;
}

void Set._Variant.formIndex(after:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  char v6 = *(unsigned char *)(a1 + 16);
  unint64_t v7 = a2 & 0xC000000000000001;
  if ((a2 & 0xC000000000000001) == 0)
  {
    int64_t v14 = _NativeSet.index(after:)(*(void *)a1, v5, v6, a2);
    uint64_t v13 = v15;
    outlined consume of [A : B].Index._Variant<A, B>(v4, v5, v6);
    *(void *)a1 = v14;
    goto LABEL_20;
  }
  if ((*(unsigned char *)(a1 + 16) & 1) == 0)
  {
    unint64_t v16 = 1383;
    goto LABEL_26;
  }
  if (v4 >= 0) {
    unint64_t v8 = v4 & 0xFFFFFFFFFFFFFF8;
  }
  else {
    unint64_t v8 = *(void *)a1;
  }
  uint64_t v9 = type metadata accessor for __CocoaSet.Index.Storage();
  swift_bridgeObjectRetain(v4);
  if (!swift_dynamicCastClass(v8, v9)) {
LABEL_23:
  }
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "invalid unsafeDowncast", 22, 2, "Swift/Builtin.swift", 19, 2, 0x10DuLL, 0);
  outlined consume of [A : B].Index._Variant<A, B>(v4, v5, 1);
  if (v8) {
    swift_isUniquelyReferenced_nonNull_native(v8);
  }
  if (*(unsigned char *)(a1 + 16) != 1)
  {
    unint64_t v16 = 1391;
LABEL_26:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Attempting to access Set elements using an invalid index", 56, 2, "Swift/Set.swift", 15, 2, v16, 0);
  }
  uint64_t v10 = *(void *)(a1 + 8);
  if (*(uint64_t *)a1 >= 0) {
    unint64_t v11 = *(void *)a1 & 0xFFFFFFFFFFFFFF8;
  }
  else {
    unint64_t v11 = *(void *)a1;
  }
  if (!swift_dynamicCastClass(v11, v9)) {
    goto LABEL_23;
  }
  uint64_t v12 = a2 & 0xFFFFFFFFFFFFFF8;
  if (a2 < 0) {
    uint64_t v12 = a2;
  }
  if (*(void *)(v11 + 16) != v12) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Invalid index", 13, 2, "Swift/SetBridging.swift", 23, 2, 0x169uLL, 0);
  }
  if (v10 >= *(void *)(*(void *)(v11 + 24) + 16)) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Attempt to access endIndex", 26, 2, "Swift/SetBridging.swift", 23, 2, 0x16BuLL, 0);
  }
  uint64_t v13 = v10 + 1;
LABEL_20:
  *(void *)(a1 + 8) = v13;
  *(unsigned char *)(a1 + 16) = v7 != 0;
}

unint64_t Set.firstIndex(of:)(id *a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v8 = *(a3 - 1);
  MEMORY[0x1F4188790](a1);
  uint64_t v10 = (char *)&v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((v11 & 0xC000000000000001) != 0)
  {
    uint64_t v12 = _bridgeAnythingToObjectiveC<A>(_:)(a1, a3);
    if (a2 < 0) {
      uint64_t v13 = (void *)a2;
    }
    else {
      uint64_t v13 = (void *)(a2 & 0xFFFFFFFFFFFFFF8);
    }
    id v14 = [v13 sel_member_:v12];
    if (v14)
    {
      swift_unknownObjectRelease(v14);
      unint64_t v15 = (unint64_t)[swift_unknownObjectRetain(v13) count];
      unint64_t v16 = (unint64_t *)type metadata accessor for __BridgingBufferStorage(0);
      if ((v15 - 0x1000000000000000) >> 61 == 7)
      {
        if (!__OFADD__(8 * v15, 24))
        {
          uint64_t v17 = swift_bufferAllocate(v16, 8 * v15 + 24, 7uLL);
          v17[2] = v15;
          [v13 sel_getObjects:v17 + 3];
          swift_bridgeObjectRelease(a2);
          if ((v17[2] & 0x8000000000000000) == 0)
          {
            swift_unknownObjectRetain(v17);
            uint64_t v18 = 0;
            do
            {
              uint64_t v19 = v18 + 1;
              uint64_t v20 = (void *)v17[v18 + 3];
              swift_unknownObjectRetain(v20);
              char isEqual = swift_stdlib_NSObject_isEqual(v12, v20);
              swift_unknownObjectRelease(v20);
              uint64_t v18 = v19;
            }
            while ((isEqual & 1) == 0);
            swift_unknownObjectRelease(v17);
            uint64_t v22 = (unint64_t *)type metadata accessor for __CocoaSet.Index.Storage();
            unint64_t v23 = (unint64_t)swift_allocObject(v22, 0x20uLL, 7uLL);
            *(void *)(v23 + 16) = v13;
            *(void *)(v23 + 24) = v17;
            swift_unknownObjectRetain(v13);
            swift_unknownObjectRelease(v12);
            return v23;
          }
LABEL_24:
          _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
        }
      }
      else
      {
        __break(1u);
      }
      __break(1u);
      goto LABEL_24;
    }
    swift_unknownObjectRelease(v12);
    return 0;
  }
  if (!*(void *)(a2 + 16)) {
    return 0;
  }
  uint64_t v24 = (*(uint64_t (**)(void, uint64_t *, uint64_t))(a4 + 32))(*(void *)(a2 + 40), a3, a4);
  uint64_t v25 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v23 = v24 & ~v25;
  uint64_t v38 = a2 + 56;
  if (((*(void *)(a2 + 56 + ((v23 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v23) & 1) == 0) {
    return 0;
  }
  uint64_t v34 = ~v25;
  uint64_t v36 = *(void *)(a4 + 8);
  uint64_t v37 = a1;
  uint64_t v35 = *(uint64_t (**)(char *, id *, uint64_t *, uint64_t))(v36 + 8);
  uint64_t v28 = *(void (**)(char *, unint64_t, uint64_t *))(v8 + 16);
  uint64_t v27 = v8 + 16;
  uint64_t v26 = v28;
  uint64_t v29 = *(void *)(v27 + 56);
  uint64_t v30 = (void (**)(char *, uint64_t *))(v27 - 8);
  while (1)
  {
    v26(v10, *(void *)(a2 + 48) + v29 * v23, a3);
    char v31 = v35(v10, v37, a3, v36);
    (*v30)(v10, a3);
    if (v31) {
      break;
    }
    unint64_t v23 = (v23 + 1) & v34;
    if (((*(void *)(v38 + ((v23 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v23) & 1) == 0) {
      return 0;
    }
  }
  return v23;
}

unint64_t Set._Variant.index(for:)(id *a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v8 = *(a3 - 1);
  MEMORY[0x1F4188790](a1);
  uint64_t v10 = (char *)&v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((v11 & 0xC000000000000001) != 0)
  {
    uint64_t v12 = _bridgeAnythingToObjectiveC<A>(_:)(a1, a3);
    if (a2 < 0) {
      uint64_t v13 = (void *)a2;
    }
    else {
      uint64_t v13 = (void *)(a2 & 0xFFFFFFFFFFFFFF8);
    }
    id v14 = [v13 sel_member_:v12];
    if (v14)
    {
      swift_unknownObjectRelease(v14);
      unint64_t v15 = (unint64_t)[swift_unknownObjectRetain(v13) count];
      unint64_t v16 = (unint64_t *)type metadata accessor for __BridgingBufferStorage(0);
      if ((v15 - 0x1000000000000000) >> 61 == 7)
      {
        if (!__OFADD__(8 * v15, 24))
        {
          uint64_t v17 = swift_bufferAllocate(v16, 8 * v15 + 24, 7uLL);
          v17[2] = v15;
          [v13 sel_getObjects_:v17 + 3];
          swift_bridgeObjectRelease(a2);
          if ((v17[2] & 0x8000000000000000) == 0)
          {
            swift_unknownObjectRetain(v17);
            uint64_t v18 = 0;
            do
            {
              uint64_t v19 = v18 + 1;
              uint64_t v20 = (void *)v17[v18 + 3];
              swift_unknownObjectRetain(v20);
              char isEqual = swift_stdlib_NSObject_isEqual(v12, v20);
              swift_unknownObjectRelease(v20);
              uint64_t v18 = v19;
            }
            while ((isEqual & 1) == 0);
            swift_unknownObjectRelease(v17);
            uint64_t v22 = (unint64_t *)type metadata accessor for __CocoaSet.Index.Storage();
            unint64_t v23 = (unint64_t)swift_allocObject(v22, 0x20uLL, 7uLL);
            *(void *)(v23 + 16) = v13;
            *(void *)(v23 + 24) = v17;
            swift_unknownObjectRetain(v13);
            swift_unknownObjectRelease(v12);
            return v23;
          }
LABEL_24:
          _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
        }
      }
      else
      {
        __break(1u);
      }
      __break(1u);
      goto LABEL_24;
    }
    swift_unknownObjectRelease(v12);
    return 0;
  }
  if (!*(void *)(a2 + 16)) {
    return 0;
  }
  uint64_t v24 = (*(uint64_t (**)(void, uint64_t *, uint64_t))(a4 + 32))(*(void *)(a2 + 40), a3, a4);
  uint64_t v25 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v23 = v24 & ~v25;
  uint64_t v38 = a2 + 56;
  if (((*(void *)(a2 + 56 + ((v23 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v23) & 1) == 0) {
    return 0;
  }
  uint64_t v34 = ~v25;
  uint64_t v36 = *(void *)(a4 + 8);
  uint64_t v37 = a1;
  uint64_t v35 = *(uint64_t (**)(char *, id *, uint64_t *, uint64_t))(v36 + 8);
  uint64_t v28 = *(void (**)(char *, unint64_t, uint64_t *))(v8 + 16);
  uint64_t v27 = v8 + 16;
  uint64_t v26 = v28;
  uint64_t v29 = *(void *)(v27 + 56);
  uint64_t v30 = (void (**)(char *, uint64_t *))(v27 - 8);
  while (1)
  {
    v26(v10, *(void *)(a2 + 48) + v29 * v23, a3);
    char v31 = v35(v10, v37, a3, v36);
    (*v30)(v10, a3);
    if (v31) {
      break;
    }
    unint64_t v23 = (v23 + 1) & v34;
    if (((*(void *)(v38 + ((v23 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v23) & 1) == 0) {
      return 0;
    }
  }
  return v23;
}

id Set.count.getter(uint64_t a1)
{
  if ((a1 & 0xC000000000000001) == 0) {
    return *(id *)(a1 + 16);
  }
  if (a1 >= 0) {
    a1 &= 0xFFFFFFFFFFFFFF8uLL;
  }
  return [a1 count];
}

id Set._Variant.count.getter(uint64_t a1)
{
  if ((a1 & 0xC000000000000001) == 0) {
    return *(id *)(a1 + 16);
  }
  if (a1 >= 0) {
    a1 &= 0xFFFFFFFFFFFFFF8uLL;
  }
  return [a1 count];
}

BOOL Set.isEmpty.getter(uint64_t a1)
{
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (a1 >= 0) {
      a1 &= 0xFFFFFFFFFFFFFF8uLL;
    }
    id v1 = [a1 count];
  }
  else
  {
    id v1 = *(id *)(a1 + 16);
  }
  return v1 == 0;
}

uint64_t protocol witness for Collection.startIndex.getter in conformance Set<A>@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for Collection.startIndex.getter in conformance Set<A>((uint64_t (*)(void))Set.startIndex.getter, a1);
}

uint64_t protocol witness for Collection.endIndex.getter in conformance Set<A>@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for Collection.startIndex.getter in conformance Set<A>((uint64_t (*)(void))Set.endIndex.getter, a1);
}

uint64_t protocol witness for Collection.startIndex.getter in conformance Set<A>@<X0>(uint64_t (*a1)(void)@<X2>, uint64_t a2@<X8>)
{
  uint64_t result = a1(*v2);
  *(void *)a2 = result;
  *(void *)(a2 + 8) = v5;
  *(unsigned char *)(a2 + 16) = v6 & 1;
  return result;
}

uint64_t (*protocol witness for Collection.subscript.read in conformance Set<A>(char ***a1, uint64_t a2, uint64_t a3))()
{
  unint64_t v7 = (char **)malloc(0x28uLL);
  *a1 = v7;
  v7[4] = (char *)Set.subscript.read(v7, *(void *)a2, *(void *)(a2 + 8), *(unsigned __int8 *)(a2 + 16), *v3, *(char **)(a3 + 16), *(void *)(a3 + 24));
  return protocol witness for Collection.subscript.read in conformance _ArrayBuffer<A>;
}

uint64_t (*Set.subscript.read(char **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char *a6, uint64_t a7))()
{
  uint64_t v13 = *((void *)a6 - 1);
  *a1 = a6;
  a1[1] = (char *)v13;
  id v14 = (char *)malloc(*(void *)(v13 + 64));
  a1[2] = v14;
  Set.subscript.getter(a2, a3, a5, a6, a7, v14);
  return _ArrayBuffer.subscript.read;
}

BOOL protocol witness for Collection.isEmpty.getter in conformance Set<A>()
{
  return Set.isEmpty.getter(*v0);
}

id protocol witness for Collection.count.getter in conformance Set<A>()
{
  return Set.count.getter(*v0);
}

unint64_t protocol witness for Collection._customIndexOfEquatableElement(_:) in conformance Set<A>@<X0>(id *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t result = Set.firstIndex(of:)(a1, *v3, *(uint64_t **)(a2 + 16), *(void *)(a2 + 24));
  *(void *)a3 = result;
  *(void *)(a3 + 8) = v6;
  *(unsigned char *)(a3 + 16) = v7;
  return result;
}

int64_t protocol witness for Collection.index(after:) in conformance Set<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int64_t result = Set.index(after:)(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16), *v2);
  *(void *)a2 = result;
  *(void *)(a2 + 8) = v5;
  *(unsigned char *)(a2 + 16) = v6 & 1;
  return result;
}

uint64_t protocol witness for Collection.formIndex(after:) in conformance Set<A>(uint64_t a1, uint64_t a2)
{
  return Set.formIndex(after:)(a1, *v2, *(void *)(a2 + 16), *(void *)(a2 + 24));
}

uint64_t specialized static Set.== infix(_:_:)(uint64_t result, uint64_t a2)
{
  if (result == a2) {
    return 1;
  }
  if (*(void *)(result + 16) != *(void *)(a2 + 16)) {
    return 0;
  }
  int64_t v3 = 0;
  uint64_t v4 = result + 56;
  uint64_t v5 = 1 << *(unsigned char *)(result + 32);
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  else {
    uint64_t v6 = -1;
  }
  unint64_t v7 = v6 & *(void *)(result + 56);
  int64_t v8 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v9 = a2 + 56;
  uint64_t v32 = result + 56;
  uint64_t v33 = result;
  int64_t v31 = v8;
  if (v7) {
    goto LABEL_7;
  }
LABEL_8:
  int64_t v11 = v3 + 1;
  if (__OFADD__(v3, 1))
  {
    __break(1u);
    goto LABEL_32;
  }
  if (v11 >= v8) {
    return 1;
  }
  unint64_t v12 = *(void *)(v4 + 8 * v11);
  int64_t v13 = v3 + 1;
  if (!v12)
  {
    int64_t v13 = v11 + 1;
    if (v11 + 1 >= v8) {
      return 1;
    }
    unint64_t v12 = *(void *)(v4 + 8 * v13);
    if (!v12)
    {
      int64_t v14 = v11 + 2;
      if (v14 < v8)
      {
        unint64_t v12 = *(void *)(v4 + 8 * v14);
        if (v12)
        {
          int64_t v13 = v14;
          goto LABEL_19;
        }
        while (1)
        {
          int64_t v13 = v14 + 1;
          if (__OFADD__(v14, 1)) {
            break;
          }
          if (v13 >= v8) {
            return 1;
          }
          unint64_t v12 = *(void *)(v4 + 8 * v13);
          ++v14;
          if (v12) {
            goto LABEL_19;
          }
        }
LABEL_32:
        __break(1u);
        return result;
      }
      return 1;
    }
  }
LABEL_19:
  uint64_t v34 = (v12 - 1) & v12;
  int64_t v35 = v13;
  for (unint64_t i = __clz(__rbit64(v12)) + (v13 << 6); ; unint64_t i = __clz(__rbit64(v7)) | (v3 << 6))
  {
    outlined init with copy of AnyHashable(*(void *)(result + 48) + 40 * i, (uint64_t)&v46);
    long long v43 = v46;
    long long v44 = v47;
    uint64_t v15 = v48;
    uint64_t v45 = v48;
    uint64_t v16 = *(void *)(a2 + 40);
    uint64_t v17 = *((void *)&v47 + 1);
    __swift_project_boxed_opaque_existential_0Tm(&v43, *((uint64_t *)&v47 + 1));
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v15 + 8))(v40, v17, v15);
    uint64_t v18 = v41;
    uint64_t v19 = v42;
    __swift_project_boxed_opaque_existential_0Tm(v40, v41);
    uint64_t v20 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v19 + 40))(v16, v18, v19);
    __swift_destroy_boxed_opaque_existential_1Tm(v40);
    uint64_t v21 = -1 << *(unsigned char *)(a2 + 32);
    unint64_t v22 = v20 & ~v21;
    if (((*(void *)(v9 + ((v22 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v22) & 1) == 0) {
      break;
    }
    uint64_t v23 = ~v21;
    while (1)
    {
      outlined init with copy of AnyHashable(*(void *)(a2 + 48) + 40 * v22, (uint64_t)v40);
      uint64_t v24 = v41;
      uint64_t v25 = v42;
      __swift_project_boxed_opaque_existential_0Tm(v40, v41);
      (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v25 + 8))(v37, v24, v25);
      uint64_t v26 = v38;
      uint64_t v27 = v39;
      __swift_project_boxed_opaque_existential_0Tm(v37, v38);
      uint64_t v28 = *((void *)&v44 + 1);
      uint64_t v29 = v45;
      __swift_project_boxed_opaque_existential_0Tm(&v43, *((uint64_t *)&v44 + 1));
      (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v29 + 8))(v36, v28, v29);
      char v30 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v27 + 16))(v36, v26, v27);
      __swift_destroy_boxed_opaque_existential_1Tm(v36);
      if (v30 != 2) {
        break;
      }
      __swift_destroy_boxed_opaque_existential_1Tm(v37);
      outlined destroy of AnyHashable(v40);
LABEL_23:
      unint64_t v22 = (v22 + 1) & v23;
      if (((*(void *)(v9 + ((v22 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v22) & 1) == 0) {
        goto LABEL_29;
      }
    }
    __swift_destroy_boxed_opaque_existential_1Tm(v37);
    outlined destroy of AnyHashable(v40);
    if ((v30 & 1) == 0) {
      goto LABEL_23;
    }
    outlined destroy of AnyHashable((uint64_t *)&v43);
    uint64_t v4 = v32;
    int64_t result = v33;
    int64_t v8 = v31;
    unint64_t v7 = v34;
    int64_t v3 = v35;
    if (!v34) {
      goto LABEL_8;
    }
LABEL_7:
    uint64_t v34 = (v7 - 1) & v7;
    int64_t v35 = v3;
  }
LABEL_29:
  outlined destroy of AnyHashable((uint64_t *)&v43);
  return 0;
}

void static Set.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v7 = a1;
  uint64_t v8 = *(a3 - 1);
  uint64_t v9 = MEMORY[0x1F4188790](a1);
  int64_t v11 = (char *)&v43 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = MEMORY[0x1F4188790](v9);
  int64_t v14 = (char *)&v43 - v13;
  uint64_t v15 = MEMORY[0x1F4188790](v12);
  uint64_t v17 = (char *)&v43 - v16;
  unint64_t v19 = v18 & 0xC000000000000001;
  if ((v15 & 0xC000000000000001) != 0)
  {
    if (v7 < 0) {
      uint64_t v20 = (void *)v7;
    }
    else {
      uint64_t v20 = (void *)(v7 & 0xFFFFFFFFFFFFFF8);
    }
    if (v19)
    {
      if (a2 < 0) {
        uint64_t v21 = (void *)a2;
      }
      else {
        uint64_t v21 = (void *)(a2 & 0xFFFFFFFFFFFFFF8);
      }
      swift_stdlib_NSObject_isEqual(v20, v21);
      return;
    }
    uint64_t v22 = a2;
    goto LABEL_18;
  }
  if (v19)
  {
    if (a2 < 0) {
      uint64_t v20 = (void *)a2;
    }
    else {
      uint64_t v20 = (void *)(a2 & 0xFFFFFFFFFFFFFF8);
    }
    uint64_t v22 = v7;
LABEL_18:
    _NativeSet.isEqual(to:)(v20, v22, a3);
    return;
  }
  if (v7 == a2 || *(void *)(v7 + 16) != *(void *)(a2 + 16)) {
    return;
  }
  int64_t v23 = 0;
  uint64_t v24 = *(void *)(v7 + 56);
  uint64_t v44 = v7 + 56;
  uint64_t v25 = 1 << *(unsigned char *)(v7 + 32);
  if (v25 < 64) {
    uint64_t v26 = ~(-1 << v25);
  }
  else {
    uint64_t v26 = -1;
  }
  unint64_t v27 = v26 & v24;
  uint64_t v49 = v7;
  int64_t v50 = (unint64_t)(v25 + 63) >> 6;
  uint64_t v54 = a4 + 32;
  uint64_t v58 = a2 + 56;
  uint64_t v59 = v8 + 16;
  uint64_t v60 = (void (**)(char *, uint64_t *))(v8 + 8);
  uint64_t v47 = v8;
  uint64_t v48 = a4;
  uint64_t v45 = v8 + 32;
  long long v46 = (char *)&v43 - v16;
  if (!v27) {
    goto LABEL_29;
  }
LABEL_27:
  uint64_t v52 = (v27 - 1) & v27;
  int64_t v53 = v23;
  for (unint64_t i = __clz(__rbit64(v27)) | (v23 << 6); ; unint64_t i = __clz(__rbit64(v30)) + (v31 << 6))
  {
    uint64_t v33 = *(void *)(v8 + 72);
    unint64_t v34 = *(void *)(v7 + 48) + v33 * i;
    uint64_t v56 = *(void (**)(char *, unint64_t, uint64_t *))(v8 + 16);
    uint64_t v57 = v33;
    v56(v17, v34, a3);
    (*(void (**)(char *, char *, uint64_t *))(v8 + 32))(v14, v17, a3);
    uint64_t v35 = (*(uint64_t (**)(void, uint64_t *, uint64_t))(a4 + 32))(*(void *)(a2 + 40), a3, a4);
    uint64_t v36 = -1 << *(unsigned char *)(a2 + 32);
    unint64_t v37 = v35 & ~v36;
    if (((*(void *)(v58 + ((v37 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v37) & 1) == 0)
    {
      (*v60)(v14, a3);
      return;
    }
    uint64_t v51 = (unint64_t)v60 & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    uint64_t v38 = v14;
    uint64_t v55 = ~v36;
    uint64_t v39 = *(void *)(a4 + 8);
    char v40 = *(uint64_t (**)(char *, char *, uint64_t *, uint64_t))(v39 + 8);
    while (1)
    {
      v56(v11, *(void *)(a2 + 48) + v37 * v57, a3);
      char v41 = v40(v11, v38, a3, v39);
      uint64_t v42 = *v60;
      (*v60)(v11, a3);
      if (v41) {
        break;
      }
      unint64_t v37 = (v37 + 1) & v55;
      if (((*(void *)(v58 + ((v37 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v37) & 1) == 0)
      {
        v42(v38, a3);
        return;
      }
    }
    int64_t v14 = v38;
    v42(v38, a3);
    a4 = v48;
    uint64_t v7 = v49;
    uint64_t v17 = v46;
    uint64_t v8 = v47;
    unint64_t v27 = v52;
    int64_t v23 = v53;
    if (v52) {
      goto LABEL_27;
    }
LABEL_29:
    int64_t v29 = v23 + 1;
    if (__OFADD__(v23, 1))
    {
      __break(1u);
      goto LABEL_50;
    }
    if (v29 >= v50) {
      return;
    }
    unint64_t v30 = *(void *)(v44 + 8 * v29);
    int64_t v31 = v23 + 1;
    if (!v30)
    {
      int64_t v31 = v29 + 1;
      if (v29 + 1 >= v50) {
        return;
      }
      unint64_t v30 = *(void *)(v44 + 8 * v31);
      if (!v30) {
        break;
      }
    }
LABEL_40:
    uint64_t v52 = (v30 - 1) & v30;
    int64_t v53 = v31;
  }
  int64_t v32 = v29 + 2;
  if (v32 >= v50) {
    return;
  }
  unint64_t v30 = *(void *)(v44 + 8 * v32);
  if (v30)
  {
    int64_t v31 = v32;
    goto LABEL_40;
  }
  while (1)
  {
    int64_t v31 = v32 + 1;
    if (__OFADD__(v32, 1)) {
      break;
    }
    if (v31 >= v50) {
      return;
    }
    unint64_t v30 = *(void *)(v44 + 8 * v31);
    ++v32;
    if (v30) {
      goto LABEL_40;
    }
  }
LABEL_50:
  __break(1u);
}

BOOL Set._Variant.isNative.getter(uint64_t a1)
{
  return (a1 & 0xC000000000000001) == 0;
}

id Set._Variant.asCocoa.getter(uint64_t a1)
{
  id v1 = (void *)specialized _ArrayBuffer._nonNative.getter(a1);

  return swift_unknownObjectRetain(v1);
}

uint64_t __CocoaSet.isEqual(to:)(void *a1, void *a2)
{
  return swift_stdlib_NSObject_isEqual(a2, a1);
}

void protocol witness for static Equatable.== infix(_:_:) in conformance Set<A>(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  static Set.== infix(_:_:)(*a1, *a2, *(uint64_t **)(a3 + 16), *(void *)(a3 + 24));
}

void specialized Set.hash(into:)(long long *a1, unint64_t a2)
{
  uint64_t v3 = *((void *)a1 + 8);
  long long v4 = a1[1];
  long long v34 = *a1;
  long long v35 = v4;
  long long v5 = a1[3];
  long long v36 = a1[2];
  long long v37 = v5;
  uint64_t v38 = v3;
  Swift::Int v6 = Hasher._finalize()();
  unint64_t v7 = a2 + 56;
  uint64_t v8 = -1;
  uint64_t v9 = -1 << *(unsigned char *)(a2 + 32);
  if (-v9 < 64) {
    uint64_t v8 = ~(-1 << -(char)v9);
  }
  unint64_t v10 = v8 & *(void *)(a2 + 56);
  int64_t v25 = (unint64_t)(63 - v9) >> 6;
  swift_bridgeObjectRetain(a2);
  int64_t v11 = 0;
  Swift::UInt v12 = 0;
  if (!v10) {
    goto LABEL_6;
  }
LABEL_4:
  uint64_t v13 = (v10 - 1) & v10;
  unint64_t v14 = __clz(__rbit64(v10)) | (v11 << 6);
  int64_t v15 = v11;
LABEL_5:
  outlined init with copy of AnyHashable(*(void *)(a2 + 48) + 40 * v14, (uint64_t)&v31);
  int64_t v16 = v15;
  while (1)
  {
    unint64_t v19 = swift_retain((atomic_ullong *)a2);
    outlined consume of [A : B].Iterator._Variant<A, B>((uint64_t)v19);
    if (!*((void *)&v32 + 1))
    {
      swift_release(a2);
      Hasher._combine(_:)(v12);
      return;
    }
    v29[0] = v31;
    v29[1] = v32;
    uint64_t v20 = v33;
    uint64_t v30 = v33;
    uint64_t v21 = *((void *)&v32 + 1);
    __swift_project_boxed_opaque_existential_0Tm(v29, *((uint64_t *)&v32 + 1));
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v20 + 8))(v26, v21, v20);
    uint64_t v22 = v27;
    uint64_t v23 = v28;
    __swift_project_boxed_opaque_existential_0Tm(v26, v27);
    uint64_t v24 = (*(uint64_t (**)(Swift::Int, uint64_t, uint64_t))(v23 + 40))(v6, v22, v23);
    __swift_destroy_boxed_opaque_existential_1Tm(v26);
    outlined destroy of AnyHashable((uint64_t *)v29);
    v12 ^= v24;
    int64_t v11 = v16;
    unint64_t v10 = v13;
    if (v13) {
      goto LABEL_4;
    }
LABEL_6:
    int64_t v15 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    int64_t v16 = v11;
    if (v15 < v25)
    {
      unint64_t v17 = *(void *)(v7 + 8 * v15);
      if (v17) {
        goto LABEL_9;
      }
      int64_t v16 = v11 + 1;
      if (v11 + 2 < v25)
      {
        unint64_t v17 = *(void *)(v7 + 8 * (v11 + 2));
        if (v17)
        {
          int64_t v15 = v11 + 2;
LABEL_9:
          uint64_t v13 = (v17 - 1) & v17;
          unint64_t v14 = __clz(__rbit64(v17)) + (v15 << 6);
          goto LABEL_5;
        }
        int64_t v18 = v11 + 3;
        int64_t v16 = v11 + 2;
        if (v11 + 3 < v25) {
          break;
        }
      }
    }
LABEL_21:
    uint64_t v13 = 0;
    uint64_t v33 = 0;
    long long v31 = 0u;
    long long v32 = 0u;
  }
  unint64_t v17 = *(void *)(v7 + 8 * v18);
  if (v17)
  {
    int64_t v15 = v11 + 3;
    goto LABEL_9;
  }
  while (1)
  {
    int64_t v15 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v15 >= v25)
    {
      int64_t v16 = v25 - 1;
      goto LABEL_21;
    }
    unint64_t v17 = *(void *)(v7 + 8 * v15);
    ++v18;
    if (v17) {
      goto LABEL_9;
    }
  }
LABEL_27:
  __break(1u);
}

void Set.hash(into:)(long long *a1, int64_t a2, char *a3, uint64_t a4)
{
  uint64_t v70 = *((void *)a3 - 1);
  MEMORY[0x1F4188790](a1);
  uint64_t v9 = (char *)&v53 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v58 = type metadata accessor for Optional(0, v10, v10, v11);
  uint64_t v12 = (uint64_t)*(v58 - 1);
  uint64_t v13 = MEMORY[0x1F4188790](v58);
  uint64_t v57 = (char *)&v53 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = MEMORY[0x1F4188790](v13);
  uint64_t v59 = (char *)&v53 - v16;
  MEMORY[0x1F4188790](v15);
  int64_t v18 = (char *)&v53 - v17;
  uint64_t v19 = *((void *)a1 + 8);
  long long v20 = a1[1];
  long long v77 = *a1;
  long long v78 = v20;
  long long v21 = a1[2];
  long long v22 = a1[3];
  uint64_t v61 = a1;
  long long v79 = v21;
  long long v80 = v22;
  uint64_t v81 = v19;
  Swift::Int v68 = Hasher._finalize()();
  if ((a2 & 0xC000000000000001) != 0)
  {
    if (a2 < 0) {
      uint64_t v23 = a2;
    }
    else {
      uint64_t v23 = a2 & 0xFFFFFFFFFFFFFF8;
    }
    uint64_t v24 = (unint64_t *)type metadata accessor for __CocoaSet.Iterator();
    unint64_t v25 = (unint64_t)swift_allocObject(v24, 0xE8uLL, 7uLL);
    int64_t v65 = 0;
    uint64_t v26 = 0;
    unint64_t v27 = 0;
    *(void *)(v25 + 208) = v23;
    *(void *)(v25 + 216) = 0;
    *(_OWORD *)(v25 + 16) = 0u;
    *(_OWORD *)(v25 + 32) = 0u;
    *(_OWORD *)(v25 + 48) = 0u;
    *(_OWORD *)(v25 + 64) = 0u;
    *(_OWORD *)(v25 + 80) = 0u;
    *(_OWORD *)(v25 + 96) = 0u;
    *(_OWORD *)(v25 + 112) = 0u;
    *(_OWORD *)(v25 + 128) = 0u;
    *(_OWORD *)(v25 + 144) = 0u;
    *(_OWORD *)(v25 + 160) = 0u;
    *(_OWORD *)(v25 + 176) = 0u;
    *(_OWORD *)(v25 + 192) = 0u;
    *(void *)(v25 + 224) = 0;
    unint64_t v28 = v25 | 0x8000000000000000;
  }
  else
  {
    uint64_t v29 = -1 << *(unsigned char *)(a2 + 32);
    uint64_t v26 = ~v29;
    uint64_t v30 = *(void *)(a2 + 56);
    int64_t v65 = a2 + 56;
    uint64_t v31 = -v29;
    if (v31 < 64) {
      uint64_t v32 = ~(-1 << v31);
    }
    else {
      uint64_t v32 = -1;
    }
    unint64_t v27 = v32 & v30;
    unint64_t v28 = a2;
  }
  uint64_t v33 = v28 & 0x7FFFFFFFFFFFFFFFLL;
  uint64_t v63 = (v28 & 0x7FFFFFFFFFFFFFFFLL) + 16;
  uint64_t v62 = (v28 & 0x7FFFFFFFFFFFFFFFLL) + 80;
  v74 = (void (**)(char *, uint64_t, uint64_t, char *))(v70 + 56);
  uint64_t v56 = (void (**)(char *, char *, Class *))(v12 + 16);
  uint64_t v55 = (unsigned int (**)(char *, uint64_t, char *))(v70 + 48);
  uint64_t v54 = (void (**)(char *, Class *))(v12 + 8);
  long long v34 = (void (**)(char *, char *, char *))(v70 + 32);
  uint64_t v60 = v26;
  int64_t v64 = (unint64_t)(v26 + 64) >> 6;
  uint64_t v69 = v70 + 16;
  uint64_t v72 = a4 + 32;
  long long v35 = (void (**)(char *, char *))(v70 + 8);
  swift_bridgeObjectRetain(a2);
  Swift::UInt v75 = 0;
  int64_t v71 = 0;
  uint64_t v66 = qword_1ECA06328;
  uint64_t v67 = a4;
  Swift::Int v36 = v68;
  unint64_t v73 = v28;
  while ((v28 & 0x8000000000000000) == 0)
  {
    if (v27)
    {
      unint64_t v37 = __clz(__rbit64(v27));
      v27 &= v27 - 1;
      unint64_t v38 = v37 | (v71 << 6);
    }
    else
    {
      int64_t v42 = v71 + 1;
      if (__OFADD__(v71, 1))
      {
        __break(1u);
LABEL_42:
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/SetBridging.swift", 23, 2, 0x254uLL, 0);
      }
      if (v42 >= v64) {
        goto LABEL_35;
      }
      unint64_t v43 = *(void *)(v65 + 8 * v42);
      int64_t v44 = v71 + 1;
      if (!v43)
      {
        while (1)
        {
          int64_t v44 = v42 + 1;
          if (__OFADD__(v42, 1)) {
            break;
          }
          if (v44 >= v64) {
            goto LABEL_35;
          }
          unint64_t v43 = *(void *)(v65 + 8 * v44);
          ++v42;
          if (v43) {
            goto LABEL_22;
          }
        }
        __break(1u);
LABEL_39:
        __break(1u);
LABEL_40:
        _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "load from misaligned raw pointer", 32, 2, "Swift/UnsafeRawPointer.swift", 28, 2, 0x4F9uLL, 0);
      }
LABEL_22:
      unint64_t v27 = (v43 - 1) & v43;
      unint64_t v38 = __clz(__rbit64(v43)) + (v44 << 6);
      int64_t v71 = v44;
    }
    uint64_t v39 = *(void *)(v28 + 48);
    uint64_t v40 = v70;
    (*(void (**)(char *, unint64_t, char *))(v70 + 16))(v18, v39 + *(void *)(v70 + 72) * v38, a3);
    (*(void (**)(char *, void, uint64_t, char *))(v40 + 56))(v18, 0, 1, a3);
LABEL_13:
    (*v34)(v9, v18, a3);
    uint64_t v41 = (*(uint64_t (**)(Swift::Int, char *, uint64_t))(a4 + 32))(v36, a3, a4);
    (*v35)(v9, a3);
    v75 ^= v41;
    unint64_t v28 = v73;
  }
  uint64_t v45 = *(void *)(v33 + 216);
  if (v45 < 0)
  {
LABEL_35:
    long long v46 = v74;
    goto LABEL_36;
  }
  long long v46 = v74;
  if (v45 != *(void *)(v33 + 224))
  {
LABEL_27:
    uint64_t v48 = *(void *)(v33 + 24);
    if (!v48) {
      goto LABEL_42;
    }
    if ((unint64_t)(v45 - 0x1000000000000000) >> 61 != 7) {
      goto LABEL_39;
    }
    uint64_t v49 = (void **)(v48 + 8 * v45);
    if ((v49 & 7) != 0) {
      goto LABEL_40;
    }
    int64_t v50 = *v49;
    *(void *)(v33 + 216) = v45 + 1;
    swift_unknownObjectRetain(v50);
    if (_swift_isClassOrObjCExistentialType((uint64_t)a3, (uint64_t *)a3))
    {
      uint64_t v76 = v50;
      swift_dynamicCast(v18, (unint64_t *)&v76, v66, a3, 7uLL);
      uint64_t v51 = *v46;
    }
    else
    {
      uint64_t v51 = *v46;
      v51(v59, 1, 1, a3);
      _bridgeNonVerbatimFromObjectiveC<A>(_:_:_:)((swift *)v50, (uint64_t)a3, v59);
      swift_unknownObjectRelease(v50);
      uint64_t v52 = v57;
      (*v56)(v57, v59, v58);
      if ((*v55)(v52, 1, a3) == 1) {
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/BridgeObjectiveC.swift", 28, 2, 0xFCuLL, 0);
      }
      (*v54)(v59, v58);
      (*v34)(v18, v52, a3);
    }
    v51(v18, 0, 1, a3);
    a4 = v67;
    Swift::Int v36 = v68;
    goto LABEL_13;
  }
  id v47 = [*(id *)(v33 + 208) countByEnumeratingWithState:v63 objects:v62 count:16];
  *(void *)(v33 + 224) = v47;
  if (v47)
  {
    uint64_t v45 = 0;
    *(void *)(v33 + 216) = 0;
    goto LABEL_27;
  }
  *(void *)(v33 + 216) = -1;
LABEL_36:
  (*v46)(v18, 1, 1, a3);
  outlined consume of [A : B].Iterator._Variant<A, B>(v28);
  Hasher._combine(_:)(v75);
}

Swift::Int Set.hashValue.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Array<A>.hashValue.getter(a1, a2, a3, (void (*)(void *, uint64_t, uint64_t, uint64_t))Set.hash(into:));
}

Swift::Int Array<A>.hashValue.getter(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void *, uint64_t, uint64_t, uint64_t))
{
  v5[0] = 0;
  v5[1] = _swift_stdlib_Hashing_parameters ^ 0x736F6D6570736575;
  v5[2] = unk_1EB208F00 ^ 0x646F72616E646F6DLL;
  v5[3] = _swift_stdlib_Hashing_parameters ^ 0x6C7967656E657261;
  v5[4] = unk_1EB208F00 ^ 0x7465646279746573;
  long long v6 = 0u;
  long long v7 = 0u;
  a4(v5, a1, a2, a3);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Set<A>(uint64_t a1)
{
  return Set.hashValue.getter(*v1, *(void *)(a1 + 16), *(void *)(a1 + 24));
}

void protocol witness for Hashable.hash(into:) in conformance Set<A>(long long *a1, uint64_t a2)
{
  Set.hash(into:)(a1, *v2, *(char **)(a2 + 16), *(void *)(a2 + 24));
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Set<A>(uint64_t a1, uint64_t a2)
{
  *(void *)&long long v4 = 0;
  *((void *)&v4 + 1) = _swift_stdlib_Hashing_parameters ^ a1 ^ 0x736F6D6570736575;
  uint64_t v5 = unk_1EB208F00 ^ 0x646F72616E646F6DLL;
  uint64_t v6 = _swift_stdlib_Hashing_parameters ^ a1 ^ 0x6C7967656E657261;
  uint64_t v7 = unk_1EB208F00 ^ 0x7465646279746573;
  long long v8 = 0u;
  long long v9 = 0u;
  Set.hash(into:)(&v4, *v2, *(char **)(a2 + 16), *(void *)(a2 + 24));
  return Hasher._finalize()();
}

Class *Set._toCustomAnyHashable()@<X0>(int64_t a1@<X0>, Class *a2@<X1>, uint64_t a3@<X2>, int64_t *a4@<X8>)
{
  long long v8 = specialized _setUpCast<A, B>(_:)(a1, a2);
  int64_t result = type metadata accessor for _SetAnyHashableBox(0, (uint64_t)a2, a3, v9);
  a4[3] = (int64_t)result;
  a4[4] = (int64_t)&protocol witness table for _SetAnyHashableBox<A>;
  *a4 = a1;
  a4[1] = (int64_t)v8;
  return result;
}

Class *protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance Set<A>@<X0>(uint64_t a1@<X0>, int64_t *a2@<X8>)
{
  return Set._toCustomAnyHashable()(*v2, *(Class **)(a1 + 16), *(void *)(a1 + 24), a2);
}

void specialized _setUpCast<A, B>(_:)(unint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    uint64_t v3 = (atomic_ullong *)specialized static _SetStorage.allocate(capacity:)(v2);
  }
  else {
    uint64_t v3 = (atomic_ullong *)&_swiftEmptySetSingleton;
  }
  unint64_t v4 = a1 + 56;
  uint64_t v5 = -1;
  uint64_t v6 = -1 << *(unsigned char *)(a1 + 32);
  if (-v6 < 64) {
    uint64_t v5 = ~(-1 << -(char)v6);
  }
  unint64_t v7 = v5 & *(void *)(a1 + 56);
  int64_t v8 = (unint64_t)(63 - v6) >> 6;
  swift_retain(v3);
  swift_bridgeObjectRetain(a1);
  int64_t v9 = 0;
  if (!v7) {
    goto LABEL_9;
  }
LABEL_7:
  uint64_t v10 = (v7 - 1) & v7;
  unint64_t v11 = __clz(__rbit64(v7)) | (v9 << 6);
  int64_t v12 = v9;
LABEL_8:
  outlined init with copy of AnyHashable(*(void *)(a1 + 48) + 40 * v11, (uint64_t)&v19);
  int64_t v13 = v12;
  while (1)
  {
    uint64_t v16 = swift_retain((atomic_ullong *)a1);
    outlined consume of [A : B].Iterator._Variant<A, B>((uint64_t)v16);
    if (!*((void *)&v20 + 1))
    {
      swift_release(a1);
      swift_release((uint64_t)v3);
      return;
    }
    v17[0] = v19;
    v17[1] = v20;
    uint64_t v18 = v21;
    specialized _NativeSet._unsafeInsertNew(_:)((uint64_t)v17, (uint64_t)v3);
    int64_t v9 = v13;
    unint64_t v7 = v10;
    if (v10) {
      goto LABEL_7;
    }
LABEL_9:
    int64_t v12 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    int64_t v13 = v9;
    if (v12 < v8)
    {
      unint64_t v14 = *(void *)(v4 + 8 * v12);
      if (v14) {
        goto LABEL_12;
      }
      int64_t v13 = v9 + 1;
      if (v9 + 2 < v8)
      {
        unint64_t v14 = *(void *)(v4 + 8 * (v9 + 2));
        if (v14)
        {
          int64_t v12 = v9 + 2;
LABEL_12:
          uint64_t v10 = (v14 - 1) & v14;
          unint64_t v11 = __clz(__rbit64(v14)) + (v12 << 6);
          goto LABEL_8;
        }
        int64_t v15 = v9 + 3;
        int64_t v13 = v9 + 2;
        if (v9 + 3 < v8) {
          break;
        }
      }
    }
LABEL_24:
    uint64_t v10 = 0;
    uint64_t v21 = 0;
    long long v19 = 0u;
    long long v20 = 0u;
  }
  unint64_t v14 = *(void *)(v4 + 8 * v15);
  if (v14)
  {
    int64_t v12 = v9 + 3;
    goto LABEL_12;
  }
  while (1)
  {
    int64_t v12 = v15 + 1;
    if (__OFADD__(v15, 1)) {
      break;
    }
    if (v12 >= v8)
    {
      int64_t v13 = v8 - 1;
      goto LABEL_24;
    }
    unint64_t v14 = *(void *)(v4 + 8 * v12);
    ++v15;
    if (v14) {
      goto LABEL_12;
    }
  }
LABEL_30:
  __break(1u);
}

atomic_ullong *specialized _setUpCast<A, B>(_:)(int64_t a1, Class *a2)
{
  uint64_t v67 = (uint64_t)*(a2 - 1);
  MEMORY[0x1F4188790](a1);
  uint64_t v5 = (unint64_t *)((char *)&v53 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  int64_t v9 = type metadata accessor for Optional(0, v6, v7, v8);
  uint64_t v10 = (uint64_t)*(v9 - 1);
  uint64_t v11 = MEMORY[0x1F4188790](v9);
  int64_t v13 = (char *)&v53 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = MEMORY[0x1F4188790](v11);
  uint64_t v16 = (void (***)(void *, Class *))((char *)&v53 - v15);
  MEMORY[0x1F4188790](v14);
  uint64_t v18 = (char *)&v53 - v17;
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (a1 < 0) {
      long long v19 = (void *)a1;
    }
    else {
      long long v19 = (void *)(a1 & 0xFFFFFFFFFFFFFF8);
    }
    id v20 = [v19 count];
  }
  else
  {
    id v20 = *(id *)(a1 + 16);
  }
  uint64_t v58 = v16;
  if (v20) {
    uint64_t v21 = (atomic_ullong *)specialized static _SetStorage.allocate(capacity:)((uint64_t)v20);
  }
  else {
    uint64_t v21 = (atomic_ullong *)&_swiftEmptySetSingleton;
  }
  uint64_t v57 = v9;
  uint64_t v56 = v13;
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (a1 < 0) {
      uint64_t v22 = a1;
    }
    else {
      uint64_t v22 = a1 & 0xFFFFFFFFFFFFFF8;
    }
    uint64_t v23 = (unint64_t *)type metadata accessor for __CocoaSet.Iterator();
    unint64_t v24 = (unint64_t)swift_allocObject(v23, 0xE8uLL, 7uLL);
    int64_t v63 = 0;
    uint64_t v25 = 0;
    unint64_t v26 = 0;
    *(void *)(v24 + 208) = v22;
    *(void *)(v24 + 216) = 0;
    *(_OWORD *)(v24 + 16) = 0u;
    *(_OWORD *)(v24 + 32) = 0u;
    *(_OWORD *)(v24 + 48) = 0u;
    *(_OWORD *)(v24 + 64) = 0u;
    *(_OWORD *)(v24 + 80) = 0u;
    *(_OWORD *)(v24 + 96) = 0u;
    *(_OWORD *)(v24 + 112) = 0u;
    *(_OWORD *)(v24 + 128) = 0u;
    *(_OWORD *)(v24 + 144) = 0u;
    *(_OWORD *)(v24 + 160) = 0u;
    *(_OWORD *)(v24 + 176) = 0u;
    *(_OWORD *)(v24 + 192) = 0u;
    *(void *)(v24 + 224) = 0;
    unint64_t v27 = v24 | 0x8000000000000000;
  }
  else
  {
    uint64_t v28 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v25 = ~v28;
    uint64_t v29 = *(void *)(a1 + 56);
    int64_t v63 = a1 + 56;
    uint64_t v30 = -v28;
    if (v30 < 64) {
      uint64_t v31 = ~(-1 << v30);
    }
    else {
      uint64_t v31 = -1;
    }
    unint64_t v26 = v31 & v29;
    unint64_t v27 = a1;
  }
  uint64_t v32 = v27 & 0x7FFFFFFFFFFFFFFFLL;
  uint64_t v60 = (v27 & 0x7FFFFFFFFFFFFFFFLL) + 80;
  uint64_t v61 = (v27 & 0x7FFFFFFFFFFFFFFFLL) + 16;
  Swift::Int v68 = (void (**)(char *, uint64_t, uint64_t, Class *, __n128))(v67 + 56);
  uint64_t v55 = (void (**)(char *, void *, Class *))(v10 + 16);
  uint64_t v54 = (unsigned int (**)(char *, uint64_t, Class *))(v67 + 48);
  uint64_t v53 = (void (**)(void *, Class *))(v10 + 8);
  uint64_t v33 = (void (**)(unint64_t *, char *, Class *))(v67 + 32);
  uint64_t v59 = v25;
  int64_t v62 = (unint64_t)(v25 + 64) >> 6;
  uint64_t v66 = v67 + 16;
  swift_retain(v21);
  swift_bridgeObjectRetain(a1);
  int64_t v35 = 0;
  int64_t v64 = qword_1ECA06328;
  unint64_t v65 = v27;
  while ((v27 & 0x8000000000000000) == 0)
  {
    if (v26)
    {
      unint64_t v36 = __clz(__rbit64(v26));
      v26 &= v26 - 1;
      unint64_t v37 = v36 | (v35 << 6);
    }
    else
    {
      int64_t v39 = v35 + 1;
      if (__OFADD__(v35, 1))
      {
        __break(1u);
LABEL_53:
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/SetBridging.swift", 23, 2, 0x254uLL, 0);
      }
      if (v39 >= v62) {
        goto LABEL_47;
      }
      unint64_t v40 = *(void *)(v63 + 8 * v39);
      if (!v40)
      {
        int64_t v41 = v35 + 2;
        if (v35 + 2 >= v62) {
          goto LABEL_47;
        }
        unint64_t v40 = *(void *)(v63 + 8 * v41);
        if (!v40)
        {
          while (1)
          {
            int64_t v39 = v41 + 1;
            if (__OFADD__(v41, 1)) {
              break;
            }
            if (v39 >= v62) {
              goto LABEL_47;
            }
            unint64_t v40 = *(void *)(v63 + 8 * v39);
            ++v41;
            if (v40) {
              goto LABEL_34;
            }
          }
          __break(1u);
LABEL_50:
          __break(1u);
LABEL_51:
          _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "load from misaligned raw pointer", 32, 2, "Swift/UnsafeRawPointer.swift", 28, 2, 0x4F9uLL, 0);
        }
        int64_t v39 = v35 + 2;
      }
LABEL_34:
      unint64_t v26 = (v40 - 1) & v40;
      unint64_t v37 = __clz(__rbit64(v40)) + (v39 << 6);
      int64_t v35 = v39;
    }
    uint64_t v38 = v67;
    (*(void (**)(char *, unint64_t, Class *))(v67 + 16))(v18, *(void *)(v27 + 48) + *(void *)(v67 + 72) * v37, a2);
    (*(void (**)(char *, void, uint64_t, Class *))(v38 + 56))(v18, 0, 1, a2);
LABEL_22:
    (*v33)(v5, v18, a2);
    swift_dynamicCast((char *)v71, v5, a2, (const char *)&type metadata for AnyHashable, 7uLL);
    v69[0] = v71[0];
    v69[1] = v71[1];
    uint64_t v70 = v72;
    __n128 v34 = specialized _NativeSet._unsafeInsertNew(_:)((uint64_t)v69, (uint64_t)v21);
  }
  uint64_t v42 = *(void *)(v32 + 216);
  if (v42 < 0) {
    goto LABEL_47;
  }
  if (v42 != *(void *)(v32 + 224))
  {
LABEL_39:
    uint64_t v44 = *(void *)(v32 + 24);
    if (!v44) {
      goto LABEL_53;
    }
    if ((unint64_t)(v42 - 0x1000000000000000) >> 61 != 7) {
      goto LABEL_50;
    }
    uint64_t v45 = (void **)(v44 + 8 * v42);
    if ((v45 & 7) != 0) {
      goto LABEL_51;
    }
    long long v46 = v5;
    int64_t v47 = v35;
    uint64_t v48 = v21;
    uint64_t v49 = *v45;
    *(void *)(v32 + 216) = v42 + 1;
    swift_unknownObjectRetain(v49);
    if (_swift_isClassOrObjCExistentialType((uint64_t)a2, (uint64_t *)a2))
    {
      *(void *)&v71[0] = v49;
      swift_dynamicCast(v18, (unint64_t *)v71, v64, (const char *)a2, 7uLL);
      int64_t v50 = *v68;
    }
    else
    {
      int64_t v50 = *v68;
      ((void (*)(void *, uint64_t, uint64_t, Class *))*v68)(v58, 1, 1, a2);
      _bridgeNonVerbatimFromObjectiveC<A>(_:_:_:)((swift *)v49, (uint64_t)a2, v58);
      swift_unknownObjectRelease(v49);
      uint64_t v51 = v56;
      (*v55)(v56, v58, v57);
      if ((*v54)(v51, 1, a2) == 1) {
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/BridgeObjectiveC.swift", 28, 2, 0xFCuLL, 0);
      }
      (*v53)(v58, v57);
      (*v33)((unint64_t *)v18, v56, a2);
    }
    ((void (*)(char *, void, uint64_t, Class *))v50)(v18, 0, 1, a2);
    uint64_t v21 = v48;
    int64_t v35 = v47;
    uint64_t v5 = v46;
    unint64_t v27 = v65;
    goto LABEL_22;
  }
  id v43 = [*(id *)(v32 + 208) countByEnumeratingWithState:v61 objects:v60 count:16];
  *(void *)(v32 + 224) = v43;
  if (v43)
  {
    uint64_t v42 = 0;
    *(void *)(v32 + 216) = 0;
    goto LABEL_39;
  }
  *(void *)(v32 + 216) = -1;
LABEL_47:
  (*v68)(v18, 1, 1, a2, v34);
  swift_release((uint64_t)v21);
  outlined consume of [A : B].Iterator._Variant<A, B>(v27);
  return v21;
}

atomic_ullong *_setUpCast<A, B>(_:)(uint64_t a1, char *a2, ValueMetadata *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v125 = *((void *)a2 - 1);
  uint64_t v9 = MEMORY[0x1F4188790](a1);
  v127 = (unint64_t *)((char *)&v105 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  unint64_t v121 = *(void *)(v11 - 8);
  uint64_t v12 = MEMORY[0x1F4188790](v9);
  uint64_t v14 = (char *)&v105 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  v126 = (char *)&v105 - v15;
  v110 = type metadata accessor for Optional(0, v16, v17, v18);
  v122 = (void (**)(void, void, void))*(v110 - 1);
  uint64_t v19 = MEMORY[0x1F4188790](v110);
  uint64_t v21 = (char *)&v105 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = MEMORY[0x1F4188790](v19);
  v111 = (char *)&v105 - v23;
  uint64_t v24 = MEMORY[0x1F4188790](v22);
  v112 = (char *)&v105 - v25;
  uint64_t v26 = MEMORY[0x1F4188790](v24);
  v113 = (char *)&v105 - v27;
  uint64_t v28 = MEMORY[0x1F4188790](v26);
  uint64_t v30 = (char *)&v105 - v29;
  MEMORY[0x1F4188790](v28);
  uint64_t v33 = (char *)&v105 - v32;
  unint64_t v34 = a1 & 0xC000000000000001;
  if ((a1 & 0xC000000000000001) != 0)
  {
    int64_t v35 = a1;
    if (a1 < 0) {
      unint64_t v36 = (void *)a1;
    }
    else {
      unint64_t v36 = (void *)(a1 & 0xFFFFFFFFFFFFFF8);
    }
    id v37 = [v36 count];
    if (v37) {
      goto LABEL_6;
    }
LABEL_8:
    uint64_t v38 = (atomic_ullong *)&_swiftEmptySetSingleton;
    goto LABEL_9;
  }
  int64_t v35 = a1;
  id v37 = *(id *)(a1 + 16);
  if (!v37) {
    goto LABEL_8;
  }
LABEL_6:
  type metadata accessor for _SetStorage(0, (uint64_t)a3, a5, v31);
  uint64_t v38 = (atomic_ullong *)static _SetStorage.allocate(capacity:)((uint64_t)v37);
LABEL_9:
  v129 = v38;
  uint64_t v118 = a5;
  if (a3 == &type metadata for String)
  {
    if (v34)
    {
      if (v35 < 0) {
        uint64_t v46 = v35;
      }
      else {
        uint64_t v46 = v35 & 0xFFFFFFFFFFFFFF8;
      }
      int64_t v47 = (unint64_t *)type metadata accessor for __CocoaSet.Iterator();
      unint64_t v48 = (unint64_t)swift_allocObject(v47, 0xE8uLL, 7uLL);
      v117 = 0;
      uint64_t v49 = 0;
      unint64_t v50 = 0;
      *(void *)(v48 + 208) = v46;
      *(void *)(v48 + 216) = 0;
      *(_OWORD *)(v48 + 16) = 0u;
      *(_OWORD *)(v48 + 32) = 0u;
      *(_OWORD *)(v48 + 48) = 0u;
      *(_OWORD *)(v48 + 64) = 0u;
      *(_OWORD *)(v48 + 80) = 0u;
      *(_OWORD *)(v48 + 96) = 0u;
      *(_OWORD *)(v48 + 112) = 0u;
      *(_OWORD *)(v48 + 128) = 0u;
      *(_OWORD *)(v48 + 144) = 0u;
      *(_OWORD *)(v48 + 160) = 0u;
      *(_OWORD *)(v48 + 176) = 0u;
      *(_OWORD *)(v48 + 192) = 0u;
      *(void *)(v48 + 224) = 0;
      unint64_t v51 = v48 | 0x8000000000000000;
    }
    else
    {
      uint64_t v77 = -1 << *(unsigned char *)(v35 + 32);
      uint64_t v49 = ~v77;
      uint64_t v78 = *(void *)(v35 + 56);
      v117 = (Class *)(v35 + 56);
      uint64_t v79 = -v77;
      if (v79 < 64) {
        uint64_t v80 = ~(-1 << v79);
      }
      else {
        uint64_t v80 = -1;
      }
      unint64_t v50 = v80 & v78;
      unint64_t v51 = v35;
    }
    unint64_t v124 = v51;
    uint64_t v81 = v51 & 0x7FFFFFFFFFFFFFFFLL;
    uint64_t v114 = (v51 & 0x7FFFFFFFFFFFFFFFLL) + 80;
    int64_t v115 = (v51 & 0x7FFFFFFFFFFFFFFFLL) + 16;
    v123 = (atomic_ullong *)(v125 + 56);
    v109 = (void (**)(char *, void *, Class *))(v122 + 2);
    v108 = (unsigned int (**)(char *, uint64_t, char *))(v125 + 48);
    v107 = (void (**)(void *, Class *))(v122 + 1);
    v122 = (void (**)(void, void, void))(v125 + 32);
    v111 = (char *)v49;
    int64_t v116 = (unint64_t)(v49 + 64) >> 6;
    int64_t v120 = v125 + 16;
    uint64_t v82 = (void (**)(char *, char *, ValueMetadata *))(v121 + 32);
    swift_bridgeObjectRetain(v35);
    unint64_t v121 = 0;
    v119 = qword_1ECA06328;
    while (1)
    {
      uint64_t v91 = v124;
      if ((v124 & 0x8000000000000000) != 0)
      {
        uint64_t v96 = *(void *)(v81 + 216);
        if (v96 < 0) {
          goto LABEL_93;
        }
        if (v96 == *(void *)(v81 + 224))
        {
          id v97 = [*(id *)(v81 + 208) countByEnumeratingWithState:v115 objects:v114 count:16];
          *(void *)(v81 + 224) = v97;
          if (!v97)
          {
            *(void *)(v81 + 216) = -1;
            goto LABEL_93;
          }
          uint64_t v96 = 0;
          *(void *)(v81 + 216) = 0;
        }
        uint64_t v98 = *(void *)(v81 + 24);
        if (!v98) {
          goto LABEL_102;
        }
        uint64_t v99 = v123;
        if ((unint64_t)(v96 - 0x1000000000000000) >> 61 != 7) {
          goto LABEL_98;
        }
        v100 = (void **)(v98 + 8 * v96);
        if ((v100 & 7) != 0) {
LABEL_95:
        }
          _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "load from misaligned raw pointer", 32, 2, "Swift/UnsafeRawPointer.swift", 28, 2, 0x4F9uLL, 0);
        v101 = *v100;
        *(void *)(v81 + 216) = v96 + 1;
        swift_unknownObjectRetain(v101);
        if (_swift_isClassOrObjCExistentialType((uint64_t)a2, (uint64_t *)a2))
        {
          v128 = v101;
          swift_dynamicCast(v33, (unint64_t *)&v128, v119, a2, 7uLL);
          v102 = (void (*)(char *, uint64_t, uint64_t, char *))*v99;
        }
        else
        {
          v102 = (void (*)(char *, uint64_t, uint64_t, char *))*v99;
          v102(v113, 1, 1, a2);
          _bridgeNonVerbatimFromObjectiveC<A>(_:_:_:)((swift *)v101, (uint64_t)a2, v113);
          swift_unknownObjectRelease(v101);
          v103 = v112;
          (*v109)(v112, v113, v110);
          if ((*v108)(v103, 1, a2) == 1) {
LABEL_103:
          }
            _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/BridgeObjectiveC.swift", 28, 2, 0xFCuLL, 0);
          (*v107)(v113, v110);
          (*v122)(v33, v103, a2);
        }
        v102(v33, 0, 1, a2);
        a5 = v118;
      }
      else
      {
        if (v50)
        {
          unint64_t v83 = __clz(__rbit64(v50));
          v50 &= v50 - 1;
          unint64_t v84 = v83 | (v121 << 6);
        }
        else
        {
          int64_t v92 = v121 + 1;
          if (__OFADD__(v121, 1)) {
            goto LABEL_100;
          }
          if (v92 >= v116) {
            goto LABEL_93;
          }
          Class v93 = v117[v92];
          int64_t v94 = v121 + 1;
          if (!v93)
          {
            int64_t v94 = v121 + 2;
            if ((uint64_t)(v121 + 2) >= v116) {
              goto LABEL_93;
            }
            Class v93 = v117[v94];
            if (!v93)
            {
              unint64_t v95 = v121 + 3;
              if ((uint64_t)(v121 + 3) >= v116) {
                goto LABEL_93;
              }
              Class v93 = v117[v95];
              if (!v93)
              {
                while (1)
                {
                  int64_t v94 = v95 + 1;
                  if (__OFADD__(v95, 1)) {
                    goto LABEL_101;
                  }
                  if (v94 >= v116) {
                    break;
                  }
                  Class v93 = v117[v94];
                  ++v95;
                  if (v93) {
                    goto LABEL_87;
                  }
                }
LABEL_93:
                ((void (*)(char *, uint64_t, uint64_t, char *))*v123)(v33, 1, 1, a2);
                uint64_t v76 = v91;
                goto LABEL_94;
              }
              int64_t v94 = v121 + 3;
            }
          }
LABEL_87:
          unint64_t v50 = ((unint64_t)v93 - 1) & (unint64_t)v93;
          unint64_t v84 = __clz(__rbit64((unint64_t)v93)) + (v94 << 6);
          unint64_t v121 = v94;
        }
        uint64_t v85 = v125;
        (*(void (**)(char *, unint64_t, char *))(v125 + 16))(v33, *(void *)(v124 + 48) + *(void *)(v125 + 72) * v84, a2);
        (*(void (**)(char *, void, uint64_t, char *))(v85 + 56))(v33, 0, 1, a2);
      }
      uint64_t v86 = v127;
      (*v122)(v127, v33, a2);
      swift_dynamicCast(v14, v86, (Class *)a2, (const char *)&type metadata for String, 7uLL);
      v87 = *v82;
      v88 = v126;
      (*v82)(v126, v14, &type metadata for String);
      v87(v14, v88, &type metadata for String);
      v90 = type metadata accessor for _NativeSet(0, (uint64_t)&type metadata for String, a5, v89);
      _NativeSet._unsafeUpdate(with:)((uint64_t)v14, (uint64_t)v90);
    }
  }
  v109 = (void (**)(char *, void *, Class *))v21;
  v123 = v38;
  if (v34)
  {
    if (v35 < 0) {
      uint64_t v39 = v35;
    }
    else {
      uint64_t v39 = v35 & 0xFFFFFFFFFFFFFF8;
    }
    unint64_t v40 = (unint64_t *)type metadata accessor for __CocoaSet.Iterator();
    unint64_t v41 = (unint64_t)swift_allocObject(v40, 0xE8uLL, 7uLL);
    int64_t v116 = 0;
    uint64_t v42 = 0;
    unint64_t v43 = 0;
    *(void *)(v41 + 208) = v39;
    *(void *)(v41 + 216) = 0;
    uint64_t v38 = v123;
    *(_OWORD *)(v41 + 16) = 0u;
    *(_OWORD *)(v41 + 32) = 0u;
    *(_OWORD *)(v41 + 48) = 0u;
    *(_OWORD *)(v41 + 64) = 0u;
    *(_OWORD *)(v41 + 80) = 0u;
    *(_OWORD *)(v41 + 96) = 0u;
    *(_OWORD *)(v41 + 112) = 0u;
    *(_OWORD *)(v41 + 128) = 0u;
    *(_OWORD *)(v41 + 144) = 0u;
    *(_OWORD *)(v41 + 160) = 0u;
    *(_OWORD *)(v41 + 176) = 0u;
    *(_OWORD *)(v41 + 192) = 0u;
    *(void *)(v41 + 224) = 0;
    unint64_t v44 = v41 | 0x8000000000000000;
    unint64_t v45 = v35;
  }
  else
  {
    unint64_t v45 = v35;
    uint64_t v52 = -1 << *(unsigned char *)(v35 + 32);
    uint64_t v42 = ~v52;
    uint64_t v53 = *(void *)(v35 + 56);
    int64_t v116 = v35 + 56;
    uint64_t v54 = -v52;
    if (v54 < 64) {
      uint64_t v55 = ~(-1 << v54);
    }
    else {
      uint64_t v55 = -1;
    }
    unint64_t v43 = v55 & v53;
    unint64_t v44 = v35;
  }
  uint64_t v56 = v44 & 0x7FFFFFFFFFFFFFFFLL;
  v113 = (char *)((v44 & 0x7FFFFFFFFFFFFFFFLL) + 80);
  uint64_t v114 = (v44 & 0x7FFFFFFFFFFFFFFFLL) + 16;
  unint64_t v124 = v125 + 56;
  v108 = (unsigned int (**)(char *, uint64_t, char *))(v122 + 2);
  v107 = (void (**)(void *, Class *))(v125 + 48);
  v106 = (void (**)(char *, Class *))(v122 + 1);
  v122 = (void (**)(void, void, void))(v125 + 32);
  v112 = (char *)v42;
  int64_t v115 = (unint64_t)(v42 + 64) >> 6;
  v119 = (Class *)(v125 + 16);
  uint64_t v57 = (void (**)(char *, char *, ValueMetadata *))(v121 + 32);
  swift_bridgeObjectRetain(v45);
  swift_retain(v38);
  int64_t v120 = 0;
  v117 = qword_1ECA06328;
  unint64_t v121 = v44;
  while ((v44 & 0x8000000000000000) == 0)
  {
    if (v43)
    {
      unint64_t v58 = __clz(__rbit64(v43));
      v43 &= v43 - 1;
      unint64_t v59 = v58 | (v120 << 6);
    }
    else
    {
      int64_t v64 = v120 + 1;
      if (__OFADD__(v120, 1)) {
        goto LABEL_97;
      }
      if (v64 >= v115)
      {
LABEL_54:
        uint64_t v69 = (void (**)(char *, uint64_t, uint64_t, char *))v124;
        goto LABEL_55;
      }
      unint64_t v65 = *(void *)(v116 + 8 * v64);
      int64_t v66 = v120 + 1;
      if (!v65)
      {
        int64_t v66 = v120 + 2;
        if (v120 + 2 >= v115) {
          goto LABEL_54;
        }
        unint64_t v65 = *(void *)(v116 + 8 * v66);
        if (!v65)
        {
          int64_t v67 = v120 + 3;
          if (v120 + 3 >= v115) {
            goto LABEL_54;
          }
          unint64_t v65 = *(void *)(v116 + 8 * v67);
          if (!v65)
          {
            while (1)
            {
              int64_t v66 = v67 + 1;
              if (__OFADD__(v67, 1)) {
                goto LABEL_99;
              }
              if (v66 >= v115) {
                goto LABEL_54;
              }
              unint64_t v65 = *(void *)(v116 + 8 * v66);
              ++v67;
              if (v65) {
                goto LABEL_51;
              }
            }
          }
          int64_t v66 = v120 + 3;
        }
      }
LABEL_51:
      unint64_t v43 = (v65 - 1) & v65;
      unint64_t v59 = __clz(__rbit64(v65)) + (v66 << 6);
      int64_t v120 = v66;
    }
    uint64_t v60 = v125;
    (*(void (**)(char *, unint64_t, char *))(v125 + 16))(v30, *(void *)(v44 + 48) + *(void *)(v125 + 72) * v59, a2);
    (*(void (**)(char *, void, uint64_t, char *))(v60 + 56))(v30, 0, 1, a2);
LABEL_27:
    uint64_t v61 = v127;
    (*v122)(v127, v30, a2);
    swift_dynamicCast(v14, v61, (Class *)a2, (const char *)a3, 7uLL);
    int64_t v62 = *v57;
    int64_t v63 = v126;
    (*v57)(v126, v14, a3);
    v62(v14, v63, a3);
    uint64_t v38 = v123;
    _NativeSet._unsafeInsertNew(_:)((uint64_t)v14, (uint64_t)v123, (uint64_t)a3, a5);
    unint64_t v44 = v121;
  }
  uint64_t v68 = *(void *)(v56 + 216);
  if (v68 < 0) {
    goto LABEL_54;
  }
  uint64_t v69 = (void (**)(char *, uint64_t, uint64_t, char *))v124;
  if (v68 != *(void *)(v56 + 224))
  {
LABEL_42:
    uint64_t v71 = *(void *)(v56 + 24);
    if (!v71) {
      goto LABEL_102;
    }
    if ((unint64_t)(v68 - 0x1000000000000000) >> 61 != 7)
    {
      __break(1u);
LABEL_97:
      __break(1u);
LABEL_98:
      __break(1u);
LABEL_99:
      __break(1u);
LABEL_100:
      __break(1u);
LABEL_101:
      __break(1u);
LABEL_102:
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/SetBridging.swift", 23, 2, 0x254uLL, 0);
    }
    uint64_t v72 = (void **)(v71 + 8 * v68);
    if ((v72 & 7) != 0) {
      goto LABEL_95;
    }
    unint64_t v73 = *v72;
    *(void *)(v56 + 216) = v68 + 1;
    swift_unknownObjectRetain(v73);
    if (_swift_isClassOrObjCExistentialType((uint64_t)a2, (uint64_t *)a2))
    {
      v128 = v73;
      swift_dynamicCast(v30, (unint64_t *)&v128, v117, a2, 7uLL);
      v74 = *v69;
    }
    else
    {
      v74 = *v69;
      v74(v111, 1, 1, a2);
      _bridgeNonVerbatimFromObjectiveC<A>(_:_:_:)((swift *)v73, (uint64_t)a2, v111);
      swift_unknownObjectRelease(v73);
      Swift::UInt v75 = v109;
      (*v108)((char *)v109, (uint64_t)v111, (char *)v110);
      if (((unsigned int (*)(void, uint64_t, char *))*v107)(v75, 1, a2) == 1) {
        goto LABEL_103;
      }
      (*v106)(v111, v110);
      (*v122)(v30, v75, a2);
    }
    v74(v30, 0, 1, a2);
    a5 = v118;
    goto LABEL_27;
  }
  id v70 = [*(id *)(v56 + 208) countByEnumeratingWithState:v114 objects:v113 count:16];
  *(void *)(v56 + 224) = v70;
  if (v70)
  {
    uint64_t v68 = 0;
    *(void *)(v56 + 216) = 0;
    goto LABEL_42;
  }
  *(void *)(v56 + 216) = -1;
LABEL_55:
  (*v69)(v30, 1, 1, a2);
  swift_release((uint64_t)v38);
  uint64_t v76 = v44;
LABEL_94:
  outlined consume of [A : B].Iterator._Variant<A, B>(v76);
  return v129;
}

unint64_t _SetAnyHashableBox._base.getter@<X0>(unint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, unint64_t *a4@<X8>)
{
  a4[3] = (unint64_t)type metadata accessor for Set(0, a2, a3, a3);
  *a4 = a1;

  return swift_bridgeObjectRetain(a1);
}

void _SetAnyHashableBox._canonicalBox.getter(unint64_t a1@<X1>, unint64_t *a2@<X8>)
{
  swift_bridgeObjectRetain(a1);
  specialized _setUpCast<A, B>(_:)(a1);
  a2[3] = (unint64_t)&unk_1ECA031B8;
  a2[4] = (unint64_t)&protocol witness table for _SetAnyHashableBox<A>;
  *a2 = a1;
  a2[1] = v4;
}

uint64_t _SetAnyHashableBox._isEqual(to:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  outlined init with copy of MirrorPath(a1, (uint64_t)v10);
  unint64_t v4 = (Class *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _AnyHashableBox);
  if (!swift_dynamicCast((char *)v9, v10, v4, byte_1ECA031B8, 6uLL)) {
    return 2;
  }
  uint64_t v5 = v9[0];
  uint64_t v6 = v9[1];
  char v7 = specialized static Set.== infix(_:_:)(a3, v9[0]);
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v5);
  return v7 & 1;
}

Swift::Int _SetAnyHashableBox._hashValue.getter(uint64_t a1, unint64_t a2)
{
  *(void *)&long long v3 = 0;
  *((void *)&v3 + 1) = _swift_stdlib_Hashing_parameters ^ 0x736F6D6570736575;
  uint64_t v4 = unk_1EB208F00 ^ 0x646F72616E646F6DLL;
  uint64_t v5 = _swift_stdlib_Hashing_parameters ^ 0x6C7967656E657261;
  uint64_t v6 = unk_1EB208F00 ^ 0x7465646279746573;
  long long v7 = 0u;
  long long v8 = 0u;
  specialized Set.hash(into:)(&v3, a2);
  return Hasher._finalize()();
}

void _SetAnyHashableBox._hash(into:)(long long *a1, uint64_t a2, unint64_t a3)
{
}

Swift::Int __swiftcall _SetAnyHashableBox._rawHashValue(_seed:)(Swift::Int _seed)
{
  *(void *)&long long v3 = 0;
  *((void *)&v3 + 1) = _swift_stdlib_Hashing_parameters ^ _seed ^ 0x736F6D6570736575;
  uint64_t v4 = unk_1EB208F00 ^ 0x646F72616E646F6DLL;
  uint64_t v5 = _swift_stdlib_Hashing_parameters ^ _seed ^ 0x6C7967656E657261;
  uint64_t v6 = unk_1EB208F00 ^ 0x7465646279746573;
  long long v7 = 0u;
  long long v8 = 0u;
  specialized Set.hash(into:)(&v3, v1);
  return Hasher._finalize()();
}

uint64_t _SetAnyHashableBox._unbox<A>()@<X0>(unint64_t a1@<X0>, uint64_t a2@<X2>, const char *a3@<X3>, uint64_t a4@<X4>, char *a5@<X8>)
{
  unint64_t v11 = a1;
  long long v8 = type metadata accessor for Set(0, a2, a4, (uint64_t)a3);
  swift_bridgeObjectRetain(a1);
  int v9 = swift_dynamicCast(a5, &v11, v8, a3, 6uLL);
  return (*(uint64_t (**)(char *, void, uint64_t, const char *))(*((void *)a3 - 1) + 56))(a5, v9 ^ 1u, 1, a3);
}

uint64_t _SetAnyHashableBox._downCastConditional<A>(into:)(char *a1, unint64_t a2, uint64_t a3, uint64_t a4, const char *a5, uint64_t a6)
{
  unint64_t v11 = type metadata accessor for Optional(0, (uint64_t)a5, a3, a4);
  uint64_t v12 = (uint64_t)*(v11 - 1);
  uint64_t v13 = MEMORY[0x1F4188790](v11);
  uint64_t v15 = (char *)&v25 - v14;
  uint64_t v16 = *((void *)a5 - 1);
  MEMORY[0x1F4188790](v13);
  uint64_t v18 = (char *)&v25 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v26 = a2;
  uint64_t v20 = type metadata accessor for Set(0, a4, a6, v19);
  swift_bridgeObjectRetain(a2);
  uint64_t v21 = swift_dynamicCast(v15, &v26, v20, a5, 6uLL);
  uint64_t v22 = *(void (**)(char *, uint64_t, uint64_t, const char *))(v16 + 56);
  if (v21)
  {
    v22(v15, 0, 1, a5);
    uint64_t v23 = *(void (**)(char *, char *, const char *))(v16 + 32);
    v23(v18, v15, a5);
    v23(a1, v18, a5);
  }
  else
  {
    v22(v15, 1, 1, a5);
    (*(void (**)(char *, Class *))(v12 + 8))(v15, v11);
  }
  return v21;
}

void protocol witness for _AnyHashableBox._canonicalBox.getter in conformance _SetAnyHashableBox<A>(unint64_t *a1@<X8>)
{
  _SetAnyHashableBox._canonicalBox.getter(*(void *)(v1 + 8), a1);
}

uint64_t protocol witness for _AnyHashableBox._isEqual(to:) in conformance _SetAnyHashableBox<A>(uint64_t a1, uint64_t a2)
{
  return _SetAnyHashableBox._isEqual(to:)(a1, a2, *(void *)(v2 + 8));
}

Swift::Int protocol witness for _AnyHashableBox._hashValue.getter in conformance _SetAnyHashableBox<A>(uint64_t a1)
{
  return _SetAnyHashableBox._hashValue.getter(a1, *(void *)(v1 + 8));
}

void protocol witness for _AnyHashableBox._hash(into:) in conformance _SetAnyHashableBox<A>(long long *a1, uint64_t a2)
{
  _SetAnyHashableBox._hash(into:)(a1, a2, *(void *)(v2 + 8));
}

Swift::Int protocol witness for _AnyHashableBox._rawHashValue(_seed:) in conformance _SetAnyHashableBox<A>(Swift::Int _seed)
{
  return _SetAnyHashableBox._rawHashValue(_seed:)(_seed);
}

unint64_t protocol witness for _AnyHashableBox._base.getter in conformance _SetAnyHashableBox<A>@<X0>(uint64_t a1@<X0>, unint64_t *a2@<X8>)
{
  return _SetAnyHashableBox._base.getter(*v2, *(void *)(a1 + 16), *(void *)(a1 + 24), a2);
}

uint64_t protocol witness for _AnyHashableBox._unbox<A>() in conformance _SetAnyHashableBox<A>@<X0>(const char *a1@<X0>, uint64_t a2@<X2>, char *a3@<X8>)
{
  return _SetAnyHashableBox._unbox<A>()(*v3, *(void *)(a2 + 16), a1, *(void *)(a2 + 24), a3);
}

uint64_t protocol witness for _AnyHashableBox._downCastConditional<A>(into:) in conformance _SetAnyHashableBox<A>(char *a1, const char *a2, uint64_t a3)
{
  return _SetAnyHashableBox._downCastConditional<A>(into:)(a1, *v3, a3, *(void *)(a3 + 16), a2, *(void *)(a3 + 24));
}

uint64_t Set.update(with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return Set.update(with:)(a1, a2, (uint64_t (*)(uint64_t, Class *))Set._Variant.update(with:), a4);
}

void Set._Variant.update(with:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = v3;
  uint64_t v8 = *v3;
  int v9 = *(char **)(a2 + 16);
  if ((v8 & 0xC000000000000001) != 0)
  {
    if (v8 < 0) {
      uint64_t v10 = (void *)v8;
    }
    else {
      uint64_t v10 = (void *)(v8 & 0xFFFFFFFFFFFFFF8);
    }
    id v11 = [v10 count];
    if (__OFADD__(v11, 1))
    {
      __break(1u);
    }
    else
    {
      uint64_t v12 = *(void *)(a2 + 24);
      uint64_t v19 = _NativeSet.init(_:capacity:)(v10, (uint64_t)v11 + 1, v9, v12);
      uint64_t v14 = type metadata accessor for _NativeSet(0, (uint64_t)v9, v12, v13);
      _NativeSet.update(with:isUnique:)(a1, 1, (uint64_t)v14, a3);
      *uint64_t v4 = (uint64_t)v19;
    }
  }
  else
  {
    BOOL isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v8);
    uint64_t v20 = *v4;
    *uint64_t v4 = 0x8000000000000000;
    uint64_t v17 = type metadata accessor for _NativeSet(0, (uint64_t)v9, *(void *)(a2 + 24), v16);
    _NativeSet.update(with:isUnique:)(a1, isUniquelyReferenced_nonNull_native, (uint64_t)v17, a3);
    uint64_t v18 = *v4;
    *uint64_t v4 = v20;
    swift_bridgeObjectRelease(v18);
  }
}

uint64_t Set.remove(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return Set.update(with:)(a1, a2, (uint64_t (*)(uint64_t, Class *))Set._Variant.remove(_:), a4);
}

uint64_t Set.update(with:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, Class *), uint64_t a4)
{
  uint64_t v5 = type metadata accessor for Set._Variant(0, *(void *)(a2 + 16), *(void *)(a2 + 24), a4);

  return a3(a1, v5);
}

void Set.remove(at:)(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  char v8 = a3 & 1;
  int v9 = type metadata accessor for Set._Variant(0, *(void *)(a4 + 16), *(void *)(a4 + 24), a4);

  Set._Variant.remove(at:)(a1, a2, v8, (uint64_t)v9, a5);
}

void Set._Variant.remove(at:)(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v6 = v5;
  uint64_t v7 = a4;
  uint64_t v10 = a1;
  int64_t v64 = *(char **)(a4 + 16);
  uint64_t v12 = *((void *)v64 - 1);
  uint64_t v13 = MEMORY[0x1F4188790](a1);
  int64_t v63 = (char *)v51 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v13);
  uint64_t v16 = (char *)v51 - v15;
  uint64_t v17 = *v6;
  if ((*v6 & 0xC000000000000001) != 0)
  {
    if (v17 < 0) {
      uint64_t v18 = (void *)*v6;
    }
    else {
      uint64_t v18 = (void *)(v17 & 0xFFFFFFFFFFFFFF8);
    }
    if ((a3 & 1) == 0) {
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Attempting to access Set elements using an invalid index", 56, 2, "Swift/Set.swift", 15, 2, 0x567uLL, 0);
    }
    if (v10 >= 0) {
      uint64_t v19 = v10 & 0xFFFFFFFFFFFFFF8;
    }
    else {
      uint64_t v19 = v10;
    }
    uint64_t v20 = type metadata accessor for __CocoaSet.Index.Storage();
    if (swift_dynamicCastClass(v19, v20))
    {
      uint64_t v21 = *(void *)(v19 + 24);
      if (*(void *)(v21 + 16) > a2)
      {
        uint64_t v22 = *(void **)(v21 + 8 * a2 + 24);
        swift_unknownObjectRetain(v22);
        swift_bridgeObjectRetain(v17);
        uint64_t v24 = v63;
        uint64_t v23 = v64;
        _forceBridgeFromObjectiveC<A>(_:_:)(v22, v64, v25, v63);
        swift_unknownObjectRelease(v22);
        Set._Variant._migrateToNative(_:removing:)(v18, v24, v7, a5);
        swift_bridgeObjectRelease(v17);
        (*(void (**)(char *, char *))(v12 + 8))(v24, v23);
        return;
      }
LABEL_36:
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Attempting to access Set elements using an invalid index", 56, 2, "Swift/SetBridging.swift", 23, 2, 0x1E1uLL, 0);
    }
LABEL_37:
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "invalid unsafeDowncast", 22, 2, "Swift/Builtin.swift", 19, 2, 0x10DuLL, 0);
  }
  BOOL isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v6);
  unint64_t v28 = *v6;
  if (a3)
  {
    int64_t v62 = v16;
    if (v10 >= 0) {
      uint64_t v30 = v10 & 0xFFFFFFFFFFFFFF8;
    }
    else {
      uint64_t v30 = v10;
    }
    swift_bridgeObjectRetain(v28);
    outlined copy of [A : B].Index._Variant<A, B>(v10, a2, 1);
    uint64_t v31 = type metadata accessor for __CocoaSet.Index.Storage();
    if (!swift_dynamicCastClass(v30, v31)) {
      goto LABEL_37;
    }
    if (*(_DWORD *)(v28 + 36) != specialized static Hasher._hash(seed:_:)(0, *(void *)(v30 + 16))) {
      goto LABEL_31;
    }
    if (!swift_dynamicCastClass(v30, v31)) {
      goto LABEL_37;
    }
    BOOL v56 = isUniquelyReferenced_nonNull_native;
    uint64_t v32 = *(void *)(v30 + 24);
    if (*(void *)(v32 + 16) <= a2) {
      goto LABEL_36;
    }
    uint64_t v53 = a5;
    uint64_t v55 = (unint64_t *)v6;
    uint64_t v33 = *(void **)(v32 + 8 * a2 + 24);
    swift_unknownObjectRetain(v33);
    outlined consume of [A : B].Index._Variant<A, B>(v10, a2, 1);
    unint64_t v34 = v64;
    _forceBridgeFromObjectiveC<A>(_:_:)(v33, v64, v35, v62);
    swift_unknownObjectRelease(v33);
    uint64_t v36 = *(void *)(v28 + 40);
    uint64_t v54 = v7;
    uint64_t v37 = *(void *)(v7 + 24);
    uint64_t v38 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v37 + 32))(v36, v34, v37);
    uint64_t v39 = -1 << *(unsigned char *)(v28 + 32);
    uint64_t v10 = v38 & ~v39;
    unint64_t v61 = v28;
    unint64_t v58 = v28 + 56;
    if (((*(void *)(v28 + 56 + (((unint64_t)v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) == 0)
    {
      (*(void (**)(char *, char *))(v12 + 8))(v62, v64);
LABEL_31:
      unint64_t v29 = 287;
LABEL_18:
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Attempting to access Set elements using an invalid index", 56, 2, "Swift/NativeSet.swift", 21, 2, v29, 0);
    }
    uint64_t v57 = ~v39;
    uint64_t v60 = *(void *)(v37 + 8);
    unint64_t v59 = *(uint64_t (**)(char *, char *, char *, uint64_t))(v60 + 8);
    uint64_t v52 = v12;
    uint64_t v41 = v12 + 16;
    unint64_t v40 = *(void (**)(char *, uint64_t, char *))(v12 + 16);
    uint64_t v42 = *(void *)(v12 + 72);
    unint64_t v43 = (void (**)(char *, char *))(v41 - 8);
    v51[1] = (v41 - 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    unint64_t v45 = v63;
    unint64_t v44 = v64;
    while (1)
    {
      v40(v45, *(void *)(v61 + 48) + v42 * v10, v44);
      char v46 = v59(v45, v62, v44, v60);
      int64_t v47 = *v43;
      (*v43)(v45, v44);
      if (v46) {
        break;
      }
      uint64_t v10 = (v10 + 1) & v57;
      if (((*(void *)(v58 + (((unint64_t)v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) == 0)
      {
        v47(v62, v64);
        goto LABEL_31;
      }
    }
    swift_bridgeObjectRelease(v61);
    v47(v62, v64);
    uint64_t v7 = v54;
    uint64_t v6 = (uint64_t *)v55;
    unint64_t v28 = *v55;
    uint64_t v12 = v52;
    a5 = v53;
    LOBYTE(isUniquelyReferenced_nonNull_native) = v56;
  }
  else if (v10 < 0 {
         || 1 << *(unsigned char *)(v28 + 32) <= v10
  }
         || ((*(void *)(v28 + 8 * ((unint64_t)v10 >> 6) + 56) >> v10) & 1) == 0
         || *(_DWORD *)(v28 + 36) != a2)
  {
    unint64_t v29 = 266;
    goto LABEL_18;
  }
  unint64_t v65 = v28;
  *uint64_t v6 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    type metadata accessor for _NativeSet(0, (uint64_t)v64, *(void *)(v7 + 24), v26);
    _NativeSet.copy()();
    unint64_t v28 = v65;
  }
  unint64_t v48 = v64;
  (*(void (**)(uint64_t, uint64_t, char *))(v12 + 32))(a5, *(void *)(v28 + 48) + *(void *)(v12 + 72) * v10, v64);
  type metadata accessor for _NativeSet(0, (uint64_t)v48, *(void *)(v7 + 24), v49);
  _NativeSet._delete(at:)((Swift::_HashTable::Bucket)v10);
  uint64_t v50 = *v6;
  *uint64_t v6 = v28;
  swift_bridgeObjectRelease(v50);
}

Swift::Void __swiftcall Set.removeAll(keepingCapacity:)(Swift::Bool keepingCapacity)
{
  type metadata accessor for Set._Variant(0, *(void *)(v1 + 16), *(void *)(v1 + 24), v2);

  Set._Variant.removeAll(keepingCapacity:)(keepingCapacity);
}

Swift::Void __swiftcall Set._Variant.removeAll(keepingCapacity:)(Swift::Bool keepingCapacity)
{
  long long v3 = v2;
  uint64_t v5 = *v2;
  if (!keepingCapacity)
  {
    swift_bridgeObjectRelease(v5);
    uint64_t *v2 = (uint64_t)&_swiftEmptySetSingleton;
    return;
  }
  uint64_t v6 = v1;
  uint64_t v7 = *(void *)(v1 + 16);
  if ((v5 & 0xC000000000000001) == 0)
  {
    if (*(uint64_t *)(v5 + 16) <= 0) {
      return;
    }
    goto LABEL_9;
  }
  if (v5 >= 0) {
    v5 &= 0xFFFFFFFFFFFFFF8uLL;
  }
  if ((uint64_t)objc_msgSend((id)v5, sel_count) > 0)
  {
LABEL_9:
    uint64_t v8 = *v3;
    if ((*v3 & 0xC000000000000001) != 0)
    {
      if (v8 < 0) {
        int v9 = (void *)*v3;
      }
      else {
        int v9 = (void *)(v8 & 0xFFFFFFFFFFFFFF8);
      }
      id v10 = [v9 count];
      swift_bridgeObjectRelease(v8);
      if (v10)
      {
        type metadata accessor for _SetStorage(0, v7, *(void *)(v6 + 24), v11);
        uint64_t v12 = (__objc2_class **)static _SetStorage.allocate(capacity:)((uint64_t)v10);
      }
      else
      {
        uint64_t v12 = &_swiftEmptySetSingleton;
      }
      *long long v3 = (uint64_t)v12;
    }
    else
    {
      Swift::Bool isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
      uint64_t v16 = *v3;
      *long long v3 = 0x8000000000000000;
      type metadata accessor for _NativeSet(0, v7, *(void *)(v6 + 24), v14);
      _NativeSet.removeAll(isUnique:)(isUniquelyReferenced_nonNull_native);
      uint64_t v15 = *v3;
      *long long v3 = v16;
      swift_bridgeObjectRelease(v15);
    }
  }
}

void Set.removeFirst()(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *v2;
  if ((*v2 & 0xC000000000000001) == 0)
  {
    if (*(void *)(v5 + 16)) {
      goto LABEL_6;
    }
LABEL_14:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't removeFirst from an empty Set", 35, 2, "Swift/Set.swift", 15, 2, 0x275uLL, 0);
  }
  if (v5 < 0) {
    uint64_t v6 = (void *)*v2;
  }
  else {
    uint64_t v6 = (void *)(v5 & 0xFFFFFFFFFFFFFF8);
  }
  if (!objc_msgSend(v6, sel_count)) {
    goto LABEL_14;
  }
LABEL_6:
  uint64_t v7 = *v2;
  uint64_t v8 = *(void *)(a1 + 16);
  unint64_t v9 = *v2 & 0xC000000000000001;
  if (!v9)
  {
    uint64_t v16 = *(void *)(a1 + 24);
    uint64_t v15 = _NativeSet.startIndex.getter(v7);
    uint64_t v18 = v19;
    goto LABEL_16;
  }
  if (v7 < 0) {
    id v10 = (void *)*v2;
  }
  else {
    id v10 = (void *)(v7 & 0xFFFFFFFFFFFFFF8);
  }
  unint64_t v11 = (unint64_t)[swift_unknownObjectRetain(v10) count];
  uint64_t v12 = (unint64_t *)type metadata accessor for __BridgingBufferStorage(0);
  if ((v11 - 0x1000000000000000) >> 61 != 7)
  {
    __break(1u);
    goto LABEL_20;
  }
  if (__OFADD__(8 * v11, 24))
  {
LABEL_20:
    __break(1u);
    return;
  }
  uint64_t v13 = swift_bufferAllocate(v12, 8 * v11 + 24, 7uLL);
  v13[2] = v11;
  [v10 sel_getObjects_:v13 + 3];
  swift_bridgeObjectRelease(v7);
  uint64_t v14 = (unint64_t *)type metadata accessor for __CocoaSet.Index.Storage();
  uint64_t v15 = (uint64_t)swift_allocObject(v14, 0x20uLL, 7uLL);
  *(void *)(v15 + 16) = v10;
  *(void *)(v15 + 24) = v13;
  uint64_t v16 = *(void *)(a1 + 24);
  swift_bridgeObjectRetain(v7);
  uint64_t v18 = 0;
LABEL_16:
  uint64_t v20 = type metadata accessor for Set._Variant(0, v8, v16, v17);
  Set._Variant.remove(at:)(v15, v18, v9 != 0, (uint64_t)v20, a2);

  outlined consume of [A : B].Index._Variant<A, B>(v15, v18, v9 != 0);
}

__objc2_class **Set.init<A>(_:)(uint64_t a1, uint64_t a2, Class *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v48 = *(void *)(a2 - 8);
  uint64_t v10 = MEMORY[0x1F4188790](a1);
  char v46 = (id *)((char *)&v45 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1F4188790](v10);
  int64_t v47 = (char *)&v45 - v12;
  uint64_t v16 = type metadata accessor for Optional(0, v13, v14, v15);
  MEMORY[0x1F4188790](v16 - 1);
  uint64_t v18 = (char *)&v45 - v17;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (int **)a5, (uint64_t)a3, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Iterator);
  uint64_t v49 = *((void *)AssociatedTypeWitness - 1);
  uint64_t v20 = MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v55 = (char *)&v45 - v21;
  uint64_t v22 = (uint64_t)*(a3 - 1);
  MEMORY[0x1F4188790](v20);
  uint64_t v24 = (unint64_t *)((char *)&v45 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(unint64_t *, uint64_t, Class *))(v22 + 16))(v24, a1, a3);
  uint64_t v26 = type metadata accessor for Set(0, a2, a4, v25);
  if (swift_dynamicCast((char *)&v56, v24, a3, (const char *)v26, 6uLL))
  {
    (*(void (**)(uint64_t, Class *))(v22 + 8))(a1, a3);
  }
  else
  {
    uint64_t v27 = (uint64_t)AssociatedTypeWitness;
    uint64_t v28 = a5;
    uint64_t v29 = (*(uint64_t (**)(Class *, uint64_t))(a5 + 40))(a3, a5);
    if (v29)
    {
      uint64_t v31 = v29;
      uint64_t v32 = a4;
      type metadata accessor for _SetStorage(0, a2, a4, v30);
      uint64_t v33 = (__objc2_class **)static _SetStorage.allocate(capacity:)(v31);
    }
    else
    {
      uint64_t v32 = a4;
      uint64_t v33 = &_swiftEmptySetSingleton;
    }
    uint64_t v50 = v32;
    BOOL v56 = v33;
    (*(void (**)(Class *, uint64_t))(v28 + 32))(a3, v28);
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v28, (uint64_t)a3, v27, (uint64_t)&protocol requirements base descriptor for Sequence, associated conformance descriptor for Sequence.Sequence.Iterator: IteratorProtocol);
    uint64_t v35 = *(void (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 16);
    uint64_t v53 = AssociatedConformanceWitness;
    uint64_t v54 = v27;
    uint64_t v52 = v35;
    ((void (*)(uint64_t))v35)(v27);
    uint64_t v36 = v48;
    uint64_t v37 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v48 + 48);
    uint64_t v51 = v48 + 48;
    int v38 = v37(v18, 1, a2);
    uint64_t v39 = v46;
    unint64_t v40 = v47;
    if (v38 != 1)
    {
      uint64_t v41 = *(void (**)(id *, char *, uint64_t))(v36 + 32);
      do
      {
        v41(v39, v18, a2);
        unint64_t v43 = type metadata accessor for Set._Variant(0, a2, v50, v42);
        Set._Variant.insert(_:)(v40, v39, (uint64_t)v43);
        (*(void (**)(char *, uint64_t))(v36 + 8))(v40, a2);
        v52(v54, v53);
      }
      while (v37(v18, 1, a2) != 1);
    }
    (*(void (**)(char *, uint64_t))(v49 + 8))(v55, v54);
  }
  return v56;
}

uint64_t Set.isSubset<A>(of:)(uint64_t a1, uint64_t a2, char *a3, Class *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8 = a4;
  uint64_t v11 = a1;
  uint64_t v12 = (uint64_t)*(a4 - 1);
  MEMORY[0x1F4188790](a1);
  uint64_t v14 = (unint64_t *)((char *)&v42 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v17 = type metadata accessor for Optional(0, v15, v15, v16);
  MEMORY[0x1F4188790](v17 - 1);
  uint64_t v20 = (char *)&v42 - v19;
  unint64_t v21 = a2 & 0xC000000000000001;
  if ((a2 & 0xC000000000000001) != 0)
  {
    unint64_t v42 = a2 & 0xC000000000000001;
    unint64_t v43 = (char *)&v42 - v19;
    uint64_t v22 = a3;
    uint64_t v23 = v8;
    uint64_t v24 = v11;
    if (a2 < 0) {
      uint64_t v25 = (void *)a2;
    }
    else {
      uint64_t v25 = (void *)(a2 & 0xFFFFFFFFFFFFFF8);
    }
    if (objc_msgSend(v25, sel_count, v42, v43))
    {
      id v26 = [v25 count];
      uint64_t v11 = v24;
      uint64_t v8 = v23;
      a3 = v22;
      unint64_t v21 = v42;
      uint64_t v20 = v43;
      goto LABEL_8;
    }
LABEL_12:
    char v32 = 1;
    return v32 & 1;
  }
  id v26 = *(id *)(a2 + 16);
  if (!v26) {
    goto LABEL_12;
  }
LABEL_8:
  if (v26 == (id)1)
  {
    uint64_t v44 = a2;
    uint64_t v27 = (unint64_t *)type metadata accessor for Set(0, (uint64_t)a3, a5, v18);
    uint64_t WitnessTable = swift_getWitnessTable(protocol conformance descriptor for Set<A>, v27, v28);
    Collection.first.getter((uint64_t)v27, WitnessTable, (uint64_t)v20);
    uint64_t v30 = *((void *)a3 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, char *))(v30 + 48))(v20, 1, a3) == 1) {
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/Set.swift", 15, 2, 0x2CAuLL, 0);
    }
    uint64_t v31 = (*(uint64_t (**)(char *, Class *, uint64_t))(a6 + 48))(v20, v8, a6);
    if (v31 == 2)
    {
      MEMORY[0x1F4188790](v31);
      int v38 = v8;
      uint64_t v39 = a6;
      uint64_t v40 = *(void *)(a5 + 8);
      uint64_t v41 = v20;
      char v32 = Sequence.contains(where:)((uint64_t (*)(char *))partial apply for closure #1 in Sequence<>.contains(_:), (uint64_t)(&v42 - 6), (uint64_t)v8, (int **)a6);
    }
    else
    {
      char v32 = v31 & 1;
    }
    (*(void (**)(char *, char *))(v30 + 8))(v20, a3);
  }
  else
  {
    (*(void (**)(unint64_t *, uint64_t, Class *))(v12 + 16))(v14, v11, v8);
    unint64_t v34 = type metadata accessor for Set(0, (uint64_t)a3, a5, v33);
    if (swift_dynamicCast((char *)&v44, v14, v8, (const char *)v34, 6uLL))
    {
      uint64_t v35 = v44;
      char v32 = Set.isSubset(of:)(v44, a2, a3, a5);
      swift_bridgeObjectRelease(v35);
    }
    else
    {
      if (v21)
      {
        if (a2 < 0) {
          uint64_t v36 = (void *)a2;
        }
        else {
          uint64_t v36 = (void *)(a2 & 0xFFFFFFFFFFFFFF8);
        }
        swift_bridgeObjectRetain(a2);
        a2 = (uint64_t)[_NativeSet init:v36 capacity:(uint64_t)objc_msgSend(v36, sel_count) a3, a5];
      }
      else
      {
        swift_bridgeObjectRetain(a2);
      }
      char v32 = _NativeSet.isSubset<A>(of:)(v11, a2, (uint64_t)a3, (uint64_t)v8, a5, a6, (void (*)(unsigned __int8 *__return_ptr, int64x2_t *, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in _NativeSet.isSubset<A>(of:));
      swift_release(a2);
    }
  }
  return v32 & 1;
}

uint64_t Set.isSubset(of:)(uint64_t a1, int64_t a2, char *a3, uint64_t a4)
{
  uint64_t v5 = a3;
  uint64_t v7 = a1;
  uint64_t v8 = *((void *)a3 - 1);
  uint64_t v9 = MEMORY[0x1F4188790](a1);
  v106 = (id *)((char *)&v75 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v94 = v10;
  MEMORY[0x1F4188790](v9);
  v110 = (id *)((char *)&v75 - v11);
  uint64_t v85 = type metadata accessor for Optional(0, v12, v12, v13);
  uint64_t v109 = (uint64_t)*(v85 - 1);
  uint64_t v14 = MEMORY[0x1F4188790](v85);
  unint64_t v84 = (char *)&v75 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = MEMORY[0x1F4188790](v14);
  uint64_t v18 = (char *)&v75 - v17;
  MEMORY[0x1F4188790](v16);
  uint64_t v98 = (char *)&v75 - v19;
  if ((a2 & 0xC000000000000001) == 0)
  {
    id v21 = *(id *)(a2 + 16);
    unint64_t v22 = v7 & 0xC000000000000001;
    if ((v7 & 0xC000000000000001) != 0) {
      goto LABEL_6;
    }
LABEL_12:
    if (*(void *)(v7 + 16) < (uint64_t)v21) {
      return 0;
    }
    goto LABEL_13;
  }
  if (a2 < 0) {
    uint64_t v20 = (void *)a2;
  }
  else {
    uint64_t v20 = (void *)(a2 & 0xFFFFFFFFFFFFFF8);
  }
  id v21 = [v20 count];
  unint64_t v22 = v7 & 0xC000000000000001;
  if ((v7 & 0xC000000000000001) == 0) {
    goto LABEL_12;
  }
LABEL_6:
  if (v7 < 0) {
    uint64_t v23 = (void *)v7;
  }
  else {
    uint64_t v23 = (void *)(v7 & 0xFFFFFFFFFFFFFF8);
  }
  if ((uint64_t)objc_msgSend(v23, sel_count) < (uint64_t)v21) {
    return 0;
  }
LABEL_13:
  if ((a2 & 0xC000000000000001) != 0)
  {
    if (a2 < 0) {
      uint64_t v25 = a2;
    }
    else {
      uint64_t v25 = a2 & 0xFFFFFFFFFFFFFF8;
    }
    id v26 = (unint64_t *)type metadata accessor for __CocoaSet.Iterator();
    unint64_t v27 = (unint64_t)swift_allocObject(v26, 0xE8uLL, 7uLL);
    int64_t v28 = 0;
    uint64_t v29 = 0;
    *(void *)(v27 + 208) = v25;
    *(void *)(v27 + 216) = 0;
    unint64_t v30 = 0;
    *(_OWORD *)(v27 + 16) = 0u;
    *(_OWORD *)(v27 + 32) = 0u;
    *(_OWORD *)(v27 + 48) = 0u;
    *(_OWORD *)(v27 + 64) = 0u;
    *(_OWORD *)(v27 + 80) = 0u;
    *(_OWORD *)(v27 + 96) = 0u;
    *(_OWORD *)(v27 + 112) = 0u;
    *(_OWORD *)(v27 + 128) = 0u;
    *(_OWORD *)(v27 + 144) = 0u;
    *(_OWORD *)(v27 + 160) = 0u;
    *(_OWORD *)(v27 + 176) = 0u;
    *(_OWORD *)(v27 + 192) = 0u;
    *(void *)(v27 + 224) = 0;
    unint64_t v31 = v27 | 0x8000000000000000;
  }
  else
  {
    uint64_t v32 = -1 << *(unsigned char *)(a2 + 32);
    uint64_t v29 = ~v32;
    int64_t v28 = a2 + 56;
    uint64_t v33 = -v32;
    if (v33 < 64) {
      uint64_t v34 = ~(-1 << v33);
    }
    else {
      uint64_t v34 = -1;
    }
    unint64_t v30 = v34 & *(void *)(a2 + 56);
    unint64_t v31 = a2;
  }
  unint64_t v97 = v31;
  uint64_t v35 = v31 & 0x7FFFFFFFFFFFFFFFLL;
  uint64_t v81 = v35 + 16;
  uint64_t v90 = v35;
  uint64_t v80 = v35 + 80;
  uint64_t v96 = (void (**)(char *, uint64_t, uint64_t, char *))(v8 + 56);
  uint64_t v77 = (void (**)(char *, void *, Class *))(v109 + 16);
  uint64_t v76 = (unsigned int (**)(char *, uint64_t, char *))(v8 + 48);
  Swift::UInt v75 = (void (**)(void *, Class *))(v109 + 8);
  unint64_t v95 = (void (**)(char *, char *, char *))(v8 + 32);
  uint64_t v83 = v29;
  int64_t v82 = (unint64_t)(v29 + 64) >> 6;
  uint64_t v36 = (void *)(v7 & 0xFFFFFFFFFFFFFF8);
  if (v7 < 0) {
    uint64_t v36 = (void *)v7;
  }
  id v93 = v36;
  uint64_t v108 = v8 + 16;
  uint64_t v109 = v8 + 8;
  uint64_t v88 = a4 + 32;
  uint64_t v105 = v7 + 56;
  swift_bridgeObjectRetain(a2);
  int64_t v37 = 0;
  uint64_t v89 = qword_1ECA06328;
  int v38 = v98;
  uint64_t v78 = v18;
  unint64_t v92 = v22;
  uint64_t v79 = a4;
  uint64_t v104 = v7;
  uint64_t v91 = v8;
  v107 = v5;
  int64_t v87 = v28;
  while (1)
  {
    unint64_t v99 = v30;
    int64_t v100 = v37;
    uint64_t v39 = v96;
    if ((v97 & 0x8000000000000000) == 0)
    {
      if (v30)
      {
        uint64_t v101 = (v30 - 1) & v30;
        int64_t v102 = v37;
        unint64_t v40 = __clz(__rbit64(v30)) | (v37 << 6);
      }
      else
      {
        int64_t v48 = v37 + 1;
        if (__OFADD__(v37, 1))
        {
          __break(1u);
LABEL_79:
          _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/SetBridging.swift", 23, 2, 0x254uLL, 0);
        }
        if (v48 >= v82)
        {
LABEL_68:
          uint64_t v24 = 1;
          (*v96)(v38, 1, 1, v5);
          goto LABEL_66;
        }
        unint64_t v49 = *(void *)(v28 + 8 * v48);
        if (!v49)
        {
          uint64_t v50 = v37 + 2;
          if (v37 + 2 >= v82) {
            goto LABEL_68;
          }
          unint64_t v49 = *(void *)(v28 + 8 * v50);
          if (!v49)
          {
            while (1)
            {
              int64_t v48 = v50 + 1;
              if (__OFADD__(v50, 1)) {
                break;
              }
              if (v48 >= v82) {
                goto LABEL_68;
              }
              unint64_t v49 = *(void *)(v28 + 8 * v48);
              ++v50;
              if (v49) {
                goto LABEL_47;
              }
            }
            __break(1u);
LABEL_76:
            __break(1u);
LABEL_77:
            _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "load from misaligned raw pointer", 32, 2, "Swift/UnsafeRawPointer.swift", 28, 2, 0x4F9uLL, 0);
          }
          int64_t v48 = v37 + 2;
        }
LABEL_47:
        uint64_t v101 = (v49 - 1) & v49;
        int64_t v102 = v48;
        unint64_t v40 = __clz(__rbit64(v49)) + (v48 << 6);
      }
      (*(void (**)(char *, unint64_t, char *))(v8 + 16))(v38, *(void *)(v97 + 48) + *(void *)(v8 + 72) * v40, v5);
      (*(void (**)(char *, void, uint64_t, char *))(v8 + 56))(v38, 0, 1, v5);
      goto LABEL_49;
    }
    uint64_t v41 = (void *)v90;
    uint64_t v42 = *(void *)(v90 + 216);
    if (v42 < 0) {
      goto LABEL_73;
    }
    if (v42 == *(void *)(v90 + 224)) {
      break;
    }
LABEL_32:
    uint64_t v44 = v41[3];
    if (!v44) {
      goto LABEL_79;
    }
    if ((unint64_t)(v42 - 0x1000000000000000) >> 61 != 7) {
      goto LABEL_76;
    }
    uint64_t v45 = (void **)(v44 + 8 * v42);
    if ((v45 & 7) != 0) {
      goto LABEL_77;
    }
    char v46 = *v45;
    v41[27] = v42 + 1;
    swift_unknownObjectRetain(v46);
    if (_swift_isClassOrObjCExistentialType((uint64_t)v5, (uint64_t *)v5))
    {
      v111 = v46;
      swift_dynamicCast(v38, (unint64_t *)&v111, v89, v5, 7uLL);
      int64_t v47 = *v39;
    }
    else
    {
      int64_t v47 = *v39;
      uint64_t v71 = v78;
      (*v39)((char *)v78, 1, 1, v5);
      _bridgeNonVerbatimFromObjectiveC<A>(_:_:_:)((swift *)v46, (uint64_t)v5, v71);
      swift_unknownObjectRelease(v46);
      uint64_t v72 = v84;
      unint64_t v73 = v85;
      (*v77)(v84, v71, v85);
      if ((*v76)(v72, 1, v5) == 1) {
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/BridgeObjectiveC.swift", 28, 2, 0xFCuLL, 0);
      }
      (*v75)(v71, v73);
      (*v95)(v38, v72, v5);
      int64_t v28 = v87;
    }
    v47(v38, 0, 1, v5);
    uint64_t v101 = v99;
    int64_t v102 = v100;
    unint64_t v22 = v92;
LABEL_49:
    uint64_t v51 = *v95;
    (*v95)((char *)v110, v38, v5);
    if (v22)
    {
      if (_swift_isClassOrObjCExistentialType((uint64_t)v5, (uint64_t *)v5))
      {
        if (v94 != 8) {
          _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't unsafeBitCast between types of different sizes", 52, 2, "Swift/Builtin.swift", 19, 2, 0x5FuLL, 0);
        }
        uint64_t v52 = v110;
        uint64_t v53 = *v110;
        uint64_t v54 = *(void (**)(id *, char *))v109;
        swift_unknownObjectRetain(*v110);
        uint64_t v55 = v52;
        BOOL v56 = v5;
        v54(v55, v5);
        int v38 = v98;
      }
      else
      {
        uint64_t v69 = v106;
        v51((char *)v106, (char *)v110, v5);
        id v70 = v69;
        BOOL v56 = v5;
        uint64_t v53 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(v70, (uint64_t *)v5);
      }
      id v57 = [v93 sel_member_:v53 v75];
      swift_unknownObjectRelease(v53);
      if (!v57)
      {
        uint64_t v24 = 0;
        goto LABEL_66;
      }
      swift_unknownObjectRelease(v57);
      unint64_t v30 = v101;
      int64_t v37 = v102;
      uint64_t v5 = v56;
    }
    else
    {
      if (!*(void *)(v7 + 16)
        || (uint64_t v58 = (*(uint64_t (**)(void, char *, uint64_t))(a4 + 32))(*(void *)(v7 + 40), v5, a4),
            uint64_t v59 = -1 << *(unsigned char *)(v7 + 32),
            unint64_t v60 = v58 & ~v59,
            ((*(void *)(v105 + ((v60 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v60) & 1) == 0))
      {
        (*(void (**)(id *, char *))v109)(v110, v5);
LABEL_65:
        uint64_t v24 = 0;
        goto LABEL_66;
      }
      uint64_t v86 = v109 & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
      uint64_t v103 = ~v59;
      uint64_t v61 = *(void *)(a4 + 8);
      int64_t v62 = *(uint64_t (**)(char *, id *, char *, uint64_t))(v61 + 8);
      uint64_t v63 = *(void *)(v91 + 72);
      int64_t v64 = *(void (**)(id *, unint64_t, char *))(v91 + 16);
      while (1)
      {
        int64_t v66 = (char *)v106;
        unint64_t v65 = v107;
        v64(v106, *(void *)(v104 + 48) + v63 * v60, v107);
        char v67 = v62(v66, v110, v65, v61);
        uint64_t v68 = *(void (**)(id *, char *))v109;
        (*(void (**)(char *, char *))v109)(v66, v65);
        if (v67) {
          break;
        }
        unint64_t v60 = (v60 + 1) & v103;
        if (((*(void *)(v105 + ((v60 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v60) & 1) == 0)
        {
          v68(v110, v107);
          goto LABEL_65;
        }
      }
      uint64_t v5 = v107;
      v68(v110, v107);
      unint64_t v30 = v101;
      int64_t v37 = v102;
      a4 = v79;
      uint64_t v7 = v104;
      uint64_t v8 = v91;
      unint64_t v22 = v92;
      int v38 = v98;
      int64_t v28 = v87;
    }
  }
  id v43 = [*(id *)(v90 + 208) countByEnumeratingWithState:v81 objects:v80 count:16];
  v41[28] = v43;
  if (v43)
  {
    uint64_t v42 = 0;
    v41[27] = 0;
    goto LABEL_32;
  }
  v41[27] = -1;
LABEL_73:
  uint64_t v24 = 1;
  (*v39)(v38, 1, 1, v5);
LABEL_66:
  outlined consume of [A : B].Iterator._Variant<A, B>(v97);
  return v24;
}

uint64_t Set.isStrictSubset<A>(of:)(uint64_t a1, uint64_t a2, char *a3, Class *a4, uint64_t a5, uint64_t a6)
{
  MEMORY[0x1F4188790](a1);
  uint64_t v13 = (unint64_t *)((char *)&v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(unint64_t *, uint64_t, uint64_t))(v14 + 16))(v13, a1, v15);
  uint64_t v17 = type metadata accessor for Set(0, (uint64_t)a3, a5, v16);
  if (swift_dynamicCast((char *)&v23, v13, a4, (const char *)v17, 6uLL))
  {
    uint64_t v18 = v23;
    char v19 = Set.isStrictSubset(of:)(v23, a2, a3, a5);
    swift_bridgeObjectRelease(v18);
  }
  else
  {
    if ((a2 & 0xC000000000000001) != 0)
    {
      if (a2 < 0) {
        uint64_t v20 = (void *)a2;
      }
      else {
        uint64_t v20 = (void *)(a2 & 0xFFFFFFFFFFFFFF8);
      }
      swift_bridgeObjectRetain(a2);
      a2 = (uint64_t)[_NativeSet init:v20 capacity:(uint64_t)objc_msgSend(v20, sel_count) a3, a5];
    }
    else
    {
      swift_bridgeObjectRetain(a2);
    }
    char v19 = _NativeSet.isSubset<A>(of:)(a1, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, (void (*)(unsigned __int8 *__return_ptr, int64x2_t *, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in _NativeSet.isStrictSubset<A>(of:));
    swift_release(a2);
  }
  return v19 & 1;
}

uint64_t Set.isStrictSubset(of:)(uint64_t a1, int64_t a2, char *a3, uint64_t a4)
{
  if ((a2 & 0xC000000000000001) != 0)
  {
    if (a2 < 0) {
      uint64_t v8 = (void *)a2;
    }
    else {
      uint64_t v8 = (void *)(a2 & 0xFFFFFFFFFFFFFF8);
    }
    id v9 = [v8 count];
    if ((a1 & 0xC000000000000001) != 0)
    {
LABEL_6:
      if (a1 < 0) {
        uint64_t v10 = (void *)a1;
      }
      else {
        uint64_t v10 = (void *)(a1 & 0xFFFFFFFFFFFFFF8);
      }
      if ((uint64_t)v9 < (uint64_t)objc_msgSend(v10, sel_count)) {
        goto LABEL_10;
      }
      return 0;
    }
  }
  else
  {
    id v9 = *(id *)(a2 + 16);
    if ((a1 & 0xC000000000000001) != 0) {
      goto LABEL_6;
    }
  }
  if ((uint64_t)v9 >= *(void *)(a1 + 16)) {
    return 0;
  }
LABEL_10:

  return Set.isSubset(of:)(a1, a2, a3, a4);
}

uint64_t Set.isSuperset<A>(of:)(uint64_t a1, uint64_t a2, char *a3, Class *a4, uint64_t a5, uint64_t a6)
{
  id v9 = a3;
  uint64_t v82 = a2;
  v74 = (void *)*((void *)a3 - 1);
  uint64_t v11 = MEMORY[0x1F4188790](a1);
  uint64_t v80 = (id *)((char *)&v58 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v73 = v12;
  MEMORY[0x1F4188790](v11);
  uint64_t v83 = (id *)((char *)&v58 - v13);
  uint64_t v16 = type metadata accessor for Optional(0, v14, v14, v15);
  MEMORY[0x1F4188790](v16 - 1);
  uint64_t v18 = (char *)&v58 - v17;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (int **)a6, (uint64_t)a4, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Iterator);
  uint64_t v72 = *((void *)AssociatedTypeWitness - 1);
  uint64_t v20 = MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v22 = (char *)&v58 - v21;
  uint64_t v23 = (uint64_t)*(a4 - 1);
  MEMORY[0x1F4188790](v20);
  uint64_t v25 = (unint64_t *)((char *)&v58 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(unint64_t *, uint64_t, Class *))(v23 + 16))(v25, a1, a4);
  uint64_t v75 = a5;
  unint64_t v27 = type metadata accessor for Set(0, (uint64_t)v9, a5, v26);
  if (swift_dynamicCast((char *)&v84, v25, a4, (const char *)v27, 6uLL))
  {
    (*(void (**)(uint64_t, Class *))(v23 + 8))(a1, a4);
    uint64_t v28 = v84;
    char v29 = Set.isSubset(of:)(v82, v84, v9, v75);
    swift_bridgeObjectRelease(v28);
    return v29 & 1;
  }
  (*(void (**)(Class *, uint64_t))(a6 + 32))(a4, a6);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(a6, (uint64_t)a4, (uint64_t)AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Sequence, associated conformance descriptor for Sequence.Sequence.Iterator: IteratorProtocol);
  unint64_t v31 = *(void (**)(const char *, uint64_t))(AssociatedConformanceWitness + 16);
  uint64_t v70 = AssociatedConformanceWitness + 16;
  uint64_t v71 = AssociatedConformanceWitness;
  uint64_t v69 = v31;
  ((void (*)(const char *))v31)(AssociatedTypeWitness);
  uint64_t v32 = v74;
  char v67 = (uint64_t (*)(char *, uint64_t, char *))v74[6];
  uint64_t v68 = v74 + 6;
  int v33 = v67(v18, 1, v9);
  uint64_t v34 = AssociatedTypeWitness;
  uint64_t v35 = v75;
  uint64_t v36 = v18;
  uint64_t v37 = v82;
  if (v33 == 1)
  {
LABEL_4:
    (*(void (**)(char *, const char *))(v72 + 8))(v22, v34);
    char v29 = 1;
    return v29 & 1;
  }
  int v38 = (void (*)(id *, char *, char *))v32[4];
  unint64_t v64 = v82 & 0xC000000000000001;
  unint64_t v65 = v38;
  uint64_t v39 = (void *)(v82 & 0xFFFFFFFFFFFFFF8);
  if (v82 < 0) {
    uint64_t v39 = (void *)v82;
  }
  id v63 = v39;
  uint64_t v81 = (void (**)(id *, char *))(v32 + 1);
  uint64_t v62 = v75 + 32;
  int64_t v66 = v32 + 4;
  uint64_t v77 = v32 + 2;
  uint64_t v78 = v82 + 56;
  uint64_t v79 = v9;
  uint64_t v61 = v34;
  unint64_t v60 = v22;
  uint64_t v58 = v36;
  while (1)
  {
    v65(v83, v36, v9);
    if (!v64) {
      break;
    }
    if (_swift_isClassOrObjCExistentialType((uint64_t)v9, (uint64_t *)v9))
    {
      if (v73 != 8) {
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't unsafeBitCast between types of different sizes", 52, 2, "Swift/Builtin.swift", 19, 2, 0x5FuLL, 0);
      }
      unint64_t v40 = v32;
      uint64_t v41 = v83;
      uint64_t v42 = *v83;
      id v43 = *v81;
      swift_unknownObjectRetain(*v83);
      v43(v41, v9);
    }
    else
    {
      unint64_t v40 = v32;
      BOOL v56 = v80;
      v65(v80, (char *)v83, v9);
      uint64_t v42 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(v56, (uint64_t *)v9);
    }
    id v44 = [v63 sel_member_:v42 v58 v59];
    swift_unknownObjectRelease(v42);
    if (!v44) {
      goto LABEL_24;
    }
    swift_unknownObjectRelease(v44);
    uint64_t v32 = v40;
    uint64_t v35 = v75;
LABEL_21:
    v69(v34, v71);
    if (v67(v36, 1, v9) == 1) {
      goto LABEL_4;
    }
  }
  if (*(void *)(v37 + 16))
  {
    uint64_t v45 = (*(uint64_t (**)(void, char *, uint64_t))(v35 + 32))(*(void *)(v37 + 40), v9, v35);
    uint64_t v46 = -1 << *(unsigned char *)(v37 + 32);
    unint64_t v47 = v45 & ~v46;
    if ((*(void *)(v78 + ((v47 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v47))
    {
      uint64_t v59 = (unint64_t)v81 & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
      uint64_t v76 = ~v46;
      uint64_t v48 = *(void *)(v35 + 8);
      unint64_t v49 = *(uint64_t (**)(id *, id *, char *, uint64_t))(v48 + 8);
      uint64_t v50 = v32[9];
      uint64_t v51 = (void (*)(id *, unint64_t, char *))v32[2];
      while (1)
      {
        uint64_t v52 = v79;
        uint64_t v53 = v80;
        v51(v80, *(void *)(v82 + 48) + v50 * v47, v79);
        char v54 = v49(v53, v83, v52, v48);
        uint64_t v55 = *v81;
        (*v81)(v53, v52);
        if (v54) {
          break;
        }
        unint64_t v47 = (v47 + 1) & v76;
        if (((*(void *)(v78 + ((v47 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v47) & 1) == 0)
        {
          uint64_t v34 = v61;
          uint64_t v22 = v60;
          v55(v83, v79);
          goto LABEL_24;
        }
      }
      id v9 = v79;
      v55(v83, v79);
      uint64_t v32 = v74;
      uint64_t v35 = v75;
      uint64_t v37 = v82;
      uint64_t v34 = v61;
      uint64_t v22 = v60;
      uint64_t v36 = v58;
      goto LABEL_21;
    }
  }
  (*v81)(v83, v9);
LABEL_24:
  (*(void (**)(char *, const char *))(v72 + 8))(v22, v34);
  char v29 = 0;
  return v29 & 1;
}

uint64_t Set.isSuperset(of:)(int64_t a1, uint64_t a2, char *a3, uint64_t a4)
{
  return Set.isSubset(of:)(a2, a1, a3, a4);
}

uint64_t Set.isStrictSuperset<A>(of:)(uint64_t a1, uint64_t a2, char *a3, Class *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = (uint64_t)*(a4 - 1);
  MEMORY[0x1F4188790](a1);
  uint64_t v14 = (unint64_t *)((char *)&v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  unint64_t v16 = v15 & 0xC000000000000001;
  if ((v15 & 0xC000000000000001) == 0)
  {
    if (*(void *)(a2 + 16)) {
      goto LABEL_6;
    }
LABEL_9:
    char v21 = 0;
    return v21 & 1;
  }
  if (a2 < 0) {
    uint64_t v17 = (void *)a2;
  }
  else {
    uint64_t v17 = (void *)(a2 & 0xFFFFFFFFFFFFFF8);
  }
  if (!objc_msgSend(v17, sel_count)) {
    goto LABEL_9;
  }
LABEL_6:
  (*(void (**)(unint64_t *, uint64_t, Class *))(v12 + 16))(v14, a1, a4);
  char v19 = type metadata accessor for Set(0, (uint64_t)a3, a5, v18);
  if (swift_dynamicCast((char *)&v25, v14, a4, (const char *)v19, 6uLL))
  {
    uint64_t v20 = v25;
    char v21 = Set.isStrictSuperset(of:)(v25, a2, a3, a5);
    swift_bridgeObjectRelease(v20);
  }
  else
  {
    if (v16)
    {
      if (a2 < 0) {
        uint64_t v22 = (void *)a2;
      }
      else {
        uint64_t v22 = (void *)(a2 & 0xFFFFFFFFFFFFFF8);
      }
      swift_bridgeObjectRetain(a2);
      a2 = (uint64_t)[_NativeSet init:v22 capacity:(uint64_t)objc_msgSend(v22, sel_count)];
    }
    else
    {
      swift_bridgeObjectRetain(a2);
    }
    char v21 = _NativeSet.isSubset<A>(of:)(a1, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, (void (*)(unsigned __int8 *__return_ptr, int64x2_t *, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in _NativeSet.isStrictSuperset<A>(of:));
    swift_release(a2);
  }
  return v21 & 1;
}

uint64_t Set.isStrictSuperset(of:)(int64_t a1, uint64_t a2, char *a3, uint64_t a4)
{
  if ((a2 & 0xC000000000000001) != 0)
  {
    if (a2 < 0) {
      uint64_t v8 = (void *)a2;
    }
    else {
      uint64_t v8 = (void *)(a2 & 0xFFFFFFFFFFFFFF8);
    }
    id v9 = [v8 count];
    if ((a1 & 0xC000000000000001) != 0)
    {
LABEL_6:
      if (a1 < 0) {
        uint64_t v10 = (void *)a1;
      }
      else {
        uint64_t v10 = (void *)(a1 & 0xFFFFFFFFFFFFFF8);
      }
      if ((uint64_t)objc_msgSend(v10, sel_count) < (uint64_t)v9) {
        goto LABEL_10;
      }
      return 0;
    }
  }
  else
  {
    id v9 = *(id *)(a2 + 16);
    if ((a1 & 0xC000000000000001) != 0) {
      goto LABEL_6;
    }
  }
  if (*(void *)(a1 + 16) >= (uint64_t)v9) {
    return 0;
  }
LABEL_10:

  return Set.isSubset(of:)(a2, a1, a3, a4);
}

uint64_t Set.isDisjoint<A>(with:)(void (**a1)(id *, uint64_t *), uint64_t a2, uint64_t *a3, Class *a4, uint64_t a5, uint64_t a6)
{
  MEMORY[0x1F4188790](a1);
  uint64_t v13 = (unint64_t *)((char *)&v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(unint64_t *, void (**)(id *, uint64_t *), uint64_t))(v14 + 16))(v13, a1, v15);
  uint64_t v17 = type metadata accessor for Set(0, (uint64_t)a3, a5, v16);
  if (swift_dynamicCast((char *)&v22, v13, a4, (const char *)v17, 6uLL))
  {
    uint64_t v18 = v22;
    char v19 = Set.isDisjoint(with:)(v22, a2, a3, a5);
    swift_bridgeObjectRelease(v18);
  }
  else
  {
    char v19 = Set._isDisjoint<A>(with:)(a1, a2, a3, (uint64_t)a4, a5, a6);
  }
  return v19 & 1;
}

uint64_t Set.isDisjoint(with:)(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v5 = a3;
  uint64_t v8 = *(a3 - 1);
  uint64_t v9 = *(void *)(v8 + 64);
  uint64_t v10 = MEMORY[0x1F4188790](a1);
  v117 = (id *)((char *)&v86 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1F4188790](v10);
  uint64_t v12 = (id *)((char *)&v86 - v11);
  uint64_t v15 = type metadata accessor for Optional(0, v13, v13, v14);
  unint64_t v121 = (void (**)(id *, uint64_t *))*(v15 - 1);
  uint64_t v16 = MEMORY[0x1F4188790](v15);
  uint64_t v109 = (char *)&v86 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = MEMORY[0x1F4188790](v16);
  uint64_t v96 = (char *)&v86 - v19;
  MEMORY[0x1F4188790](v18);
  uint64_t v101 = (char *)&v86 - v20;
  if ((a2 & 0xC000000000000001) != 0)
  {
    if (a2 < 0) {
      uint64_t v21 = (void *)a2;
    }
    else {
      uint64_t v21 = (void *)(a2 & 0xFFFFFFFFFFFFFF8);
    }
    if (!objc_msgSend(v21, sel_count)) {
      return 1;
    }
  }
  else if (!*(void *)(a2 + 16))
  {
    return 1;
  }
  uint64_t v118 = v12;
  uint64_t v104 = v9;
  unint64_t v22 = a1 & 0xC000000000000001;
  if ((a1 & 0xC000000000000001) == 0)
  {
    if (*(void *)(a1 + 16)) {
      goto LABEL_13;
    }
    return 1;
  }
  if (a1 < 0) {
    uint64_t v23 = (void *)a1;
  }
  else {
    uint64_t v23 = (void *)(a1 & 0xFFFFFFFFFFFFFF8);
  }
  if (!objc_msgSend(v23, sel_count)) {
    return 1;
  }
LABEL_13:
  if ((a2 & 0xC000000000000001) != 0)
  {
    if (a2 < 0) {
      uint64_t v24 = (void *)a2;
    }
    else {
      uint64_t v24 = (void *)(a2 & 0xFFFFFFFFFFFFFF8);
    }
    id v25 = [v24 count];
    if (v22) {
      goto LABEL_18;
    }
  }
  else
  {
    id v25 = *(id *)(a2 + 16);
    if (v22)
    {
LABEL_18:
      if (a1 < 0) {
        uint64_t v26 = (void *)a1;
      }
      else {
        uint64_t v26 = (void *)(a1 & 0xFFFFFFFFFFFFFF8);
      }
      id v27 = [v26 count];
      goto LABEL_26;
    }
  }
  id v27 = *(id *)(a1 + 16);
LABEL_26:
  BOOL v29 = (uint64_t)v25 < (uint64_t)v27;
  if ((uint64_t)v25 >= (uint64_t)v27) {
    int64_t v30 = a1;
  }
  else {
    int64_t v30 = a2;
  }
  if (v29) {
    uint64_t v31 = a1;
  }
  else {
    uint64_t v31 = a2;
  }
  uint64_t v119 = v31;
  uint64_t v32 = v118;
  if ((v30 & 0xC000000000000001) != 0)
  {
    if (v30 < 0) {
      uint64_t v33 = v30;
    }
    else {
      uint64_t v33 = v30 & 0xFFFFFFFFFFFFFF8;
    }
    uint64_t v34 = (unint64_t *)type metadata accessor for __CocoaSet.Iterator();
    unint64_t v35 = (unint64_t)swift_allocObject(v34, 0xE8uLL, 7uLL);
    int64_t v100 = 0;
    uint64_t v36 = 0;
    unint64_t v37 = 0;
    *(void *)(v35 + 208) = v33;
    *(void *)(v35 + 216) = 0;
    *(_OWORD *)(v35 + 16) = 0u;
    *(_OWORD *)(v35 + 32) = 0u;
    *(_OWORD *)(v35 + 48) = 0u;
    *(_OWORD *)(v35 + 64) = 0u;
    *(_OWORD *)(v35 + 80) = 0u;
    *(_OWORD *)(v35 + 96) = 0u;
    *(_OWORD *)(v35 + 112) = 0u;
    *(_OWORD *)(v35 + 128) = 0u;
    *(_OWORD *)(v35 + 144) = 0u;
    *(_OWORD *)(v35 + 160) = 0u;
    *(_OWORD *)(v35 + 176) = 0u;
    *(_OWORD *)(v35 + 192) = 0u;
    *(void *)(v35 + 224) = 0;
    unint64_t v38 = v35 | 0x8000000000000000;
  }
  else
  {
    uint64_t v39 = -1 << *(unsigned char *)(v30 + 32);
    uint64_t v36 = ~v39;
    uint64_t v40 = *(void *)(v30 + 56);
    int64_t v100 = v30 + 56;
    uint64_t v41 = -v39;
    if (v41 < 64) {
      uint64_t v42 = ~(-1 << v41);
    }
    else {
      uint64_t v42 = -1;
    }
    unint64_t v37 = v42 & v40;
    unint64_t v38 = v30;
  }
  id v43 = v101;
  id v44 = v109;
  unint64_t v110 = v38;
  uint64_t v45 = v38 & 0x7FFFFFFFFFFFFFFFLL;
  uint64_t v95 = v45 + 16;
  uint64_t v102 = v45;
  uint64_t v94 = v45 + 80;
  uint64_t v108 = (void (**)(char *, uint64_t, uint64_t, uint64_t *))(v8 + 56);
  uint64_t v89 = (void (**)(char *, void *, Class *))(v121 + 2);
  uint64_t v88 = (unsigned int (**)(char *, uint64_t, uint64_t *))(v8 + 48);
  int64_t v87 = (void (**)(void *, Class *))(v121 + 1);
  v107 = (void (**)(id *, char *, uint64_t *))(v8 + 32);
  uint64_t v93 = v36;
  unint64_t v46 = v119;
  int64_t v105 = (unint64_t)(v36 + 64) >> 6;
  unint64_t v106 = v119 & 0xC000000000000001;
  unint64_t v47 = (void *)(v119 & 0xFFFFFFFFFFFFFF8);
  if (v119 < 0) {
    unint64_t v47 = (void *)v119;
  }
  id v103 = v47;
  uint64_t v120 = v8 + 16;
  unint64_t v121 = (void (**)(id *, uint64_t *))(v8 + 8);
  uint64_t v97 = a4 + 32;
  uint64_t v116 = v119 + 56;
  swift_bridgeObjectRetain(v30);
  swift_bridgeObjectRetain(v46);
  int64_t v48 = 0;
  unint64_t v99 = qword_1ECA06328;
  uint64_t v90 = v15;
  uint64_t v49 = v46;
  uint64_t v50 = v110;
  int64_t v115 = v5;
  uint64_t v92 = a4;
  uint64_t v91 = v8;
LABEL_45:
  while (1)
  {
    int64_t v111 = v48;
    unint64_t v112 = v37;
    if (v50 < 0) {
      break;
    }
    if (v37)
    {
      uint64_t v113 = (v37 - 1) & v37;
      unint64_t v51 = __clz(__rbit64(v37)) | (v48 << 6);
      int64_t v52 = v48;
    }
    else
    {
      int64_t v52 = v48 + 1;
      if (__OFADD__(v48, 1))
      {
        __break(1u);
LABEL_100:
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/SetBridging.swift", 23, 2, 0x254uLL, 0);
      }
      if (v52 >= v105)
      {
        unint64_t v112 = 0;
        uint64_t v55 = v108;
        goto LABEL_92;
      }
      unint64_t v61 = *(void *)(v100 + 8 * v52);
      uint64_t v55 = v108;
      if (!v61)
      {
        int64_t v62 = v48 + 2;
        if (v48 + 2 >= v105)
        {
LABEL_88:
          unint64_t v112 = 0;
          goto LABEL_92;
        }
        unint64_t v61 = *(void *)(v100 + 8 * v62);
        if (!v61)
        {
          while (1)
          {
            int64_t v52 = v62 + 1;
            if (__OFADD__(v62, 1)) {
              break;
            }
            if (v52 >= v105) {
              goto LABEL_88;
            }
            unint64_t v61 = *(void *)(v100 + 8 * v52);
            ++v62;
            if (v61) {
              goto LABEL_67;
            }
          }
          __break(1u);
LABEL_97:
          __break(1u);
LABEL_98:
          _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "load from misaligned raw pointer", 32, 2, "Swift/UnsafeRawPointer.swift", 28, 2, 0x4F9uLL, 0);
        }
        int64_t v52 = v48 + 2;
      }
LABEL_67:
      uint64_t v113 = (v61 - 1) & v61;
      unint64_t v51 = __clz(__rbit64(v61)) + (v52 << 6);
    }
    (*(void (**)(char *, unint64_t, uint64_t *))(v8 + 16))(v43, *(void *)(v50 + 48) + *(void *)(v8 + 72) * v51, v5);
    (*(void (**)(char *, void, uint64_t, uint64_t *))(v8 + 56))(v43, 0, 1, v5);
LABEL_69:
    id v63 = *v107;
    (*v107)(v32, v43, v5);
    if (v106)
    {
      if (_swift_isClassOrObjCExistentialType((uint64_t)v5, v5))
      {
        if (v104 != 8) {
          _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't unsafeBitCast between types of different sizes", 52, 2, "Swift/Builtin.swift", 19, 2, 0x5FuLL, 0);
        }
        int64_t v64 = v52;
        unint64_t v65 = *v32;
        int64_t v66 = *v121;
        swift_unknownObjectRetain(*v32);
        v66(v32, v5);
      }
      else
      {
        int64_t v64 = v52;
        uint64_t v79 = v117;
        v63(v117, (char *)v32, v5);
        unint64_t v65 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(v79, v5);
      }
      id v67 = [v103 sel_member_:v65];
      id v44 = v109;
      if (!v67)
      {
        swift_unknownObjectRelease(v65);
        int64_t v48 = v64;
        unint64_t v37 = v113;
        uint64_t v50 = v110;
        continue;
      }
      int64_t v84 = v67;
      swift_bridgeObjectRelease(v49);
      swift_unknownObjectRelease(v65);
      swift_unknownObjectRelease(v84);
LABEL_87:
      uint64_t v28 = 0;
      uint64_t v50 = v110;
      goto LABEL_93;
    }
    if (!*(void *)(v49 + 16))
    {
      (*v121)(v32, v5);
      int64_t v48 = v52;
      unint64_t v37 = v113;
      id v44 = v109;
      continue;
    }
    int64_t v98 = v52;
    uint64_t v68 = (*(uint64_t (**)(void, uint64_t *, uint64_t))(a4 + 32))(*(void *)(v49 + 40), v5, a4);
    uint64_t v69 = -1 << *(unsigned char *)(v49 + 32);
    unint64_t v70 = v68 & ~v69;
    if ((*(void *)(v116 + ((v70 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v70))
    {
      uint64_t v114 = ~v69;
      uint64_t v71 = *(void *)(a4 + 8);
      uint64_t v72 = *(uint64_t (**)(id *, id *, uint64_t *, uint64_t))(v71 + 8);
      uint64_t v73 = *(void *)(v8 + 72);
      v74 = *(void (**)(id *, unint64_t, uint64_t *))(v8 + 16);
      while (1)
      {
        uint64_t v75 = v117;
        uint64_t v76 = v115;
        v74(v117, *(void *)(v49 + 48) + v73 * v70, v115);
        char v77 = v72(v75, v118, v76, v71);
        uint64_t v78 = *v121;
        (*v121)(v75, v76);
        if (v77) {
          break;
        }
        unint64_t v70 = (v70 + 1) & v114;
        uint64_t v49 = v119;
        if (((*(void *)(v116 + ((v70 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v70) & 1) == 0)
        {
          uint64_t v32 = v118;
          uint64_t v5 = v115;
          v78(v118, v115);
          int64_t v48 = v98;
          unint64_t v37 = v113;
          a4 = v92;
          uint64_t v8 = v91;
          id v43 = v101;
          id v44 = v109;
          uint64_t v50 = v110;
          goto LABEL_45;
        }
      }
      swift_bridgeObjectRelease(v119);
      v78(v118, v115);
      goto LABEL_87;
    }
    (*v121)(v32, v5);
    int64_t v48 = v98;
    unint64_t v37 = v113;
    id v43 = v101;
    id v44 = v109;
  }
  uint64_t v53 = v102;
  uint64_t v54 = *(void *)(v102 + 216);
  if ((v54 & 0x8000000000000000) == 0)
  {
    uint64_t v55 = v108;
    if (v54 == *(void *)(v102 + 224))
    {
      id v56 = [*(id *)(v102 + 208) countByEnumeratingWithState:v95 objects:v94 count:16];
      uint64_t v53 = v102;
      *(void *)(v102 + 224) = v56;
      if (!v56)
      {
        *(void *)(v53 + 216) = -1;
        goto LABEL_92;
      }
      uint64_t v54 = 0;
      *(void *)(v53 + 216) = 0;
    }
    uint64_t v57 = *(void *)(v53 + 24);
    if (!v57) {
      goto LABEL_100;
    }
    if ((unint64_t)(v54 - 0x1000000000000000) >> 61 != 7) {
      goto LABEL_97;
    }
    uint64_t v58 = (void **)(v57 + 8 * v54);
    if ((v58 & 7) != 0) {
      goto LABEL_98;
    }
    uint64_t v59 = *v58;
    *(void *)(v53 + 216) = v54 + 1;
    swift_unknownObjectRetain(v59);
    if (_swift_isClassOrObjCExistentialType((uint64_t)v5, v5))
    {
      v122 = v59;
      swift_dynamicCast(v43, (unint64_t *)&v122, v99, (const char *)v5, 7uLL);
      unint64_t v60 = *v55;
    }
    else
    {
      unint64_t v60 = *v55;
      (*v55)(v96, 1, 1, v5);
      uint64_t v80 = v96;
      _bridgeNonVerbatimFromObjectiveC<A>(_:_:_:)((swift *)v59, (uint64_t)v5, v96);
      swift_unknownObjectRelease(v59);
      uint64_t v81 = v44;
      uint64_t v82 = v44;
      uint64_t v83 = v90;
      (*v89)(v81, v80, v90);
      if ((*v88)(v82, 1, v5) == 1) {
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/BridgeObjectiveC.swift", 28, 2, 0xFCuLL, 0);
      }
      (*v87)(v80, v83);
      (*v107)((id *)v43, v82, v5);
    }
    v60(v43, 0, 1, v5);
    int64_t v52 = v111;
    uint64_t v113 = v112;
    uint64_t v49 = v119;
    uint64_t v50 = v110;
    goto LABEL_69;
  }
  uint64_t v55 = v108;
LABEL_92:
  uint64_t v28 = 1;
  (*v55)(v43, 1, 1, v5);
  swift_bridgeObjectRelease(v49);
LABEL_93:
  outlined consume of [A : B].Iterator._Variant<A, B>(v50);
  return v28;
}

uint64_t Set._isDisjoint<A>(with:)(void (**a1)(id *, uint64_t *), uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v75 = a1;
  uint64_t v11 = (void *)*(a3 - 1);
  uint64_t v12 = v11[8];
  uint64_t v13 = MEMORY[0x1F4188790](a1);
  v74 = (id *)((char *)&v52 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1F4188790](v13);
  uint64_t v76 = (id *)((char *)&v52 - v14);
  uint64_t v17 = type metadata accessor for Optional(0, v15, v15, v16);
  uint64_t v18 = MEMORY[0x1F4188790](v17 - 1);
  id v67 = (char *)&v52 - v19;
  uint64_t v20 = *(void *)(a4 - 8);
  MEMORY[0x1F4188790](v18);
  unint64_t v22 = (char *)&v52 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (int **)a6, a4, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Iterator);
  uint64_t v57 = *((void *)AssociatedTypeWitness - 1);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v69 = (char *)&v52 - v23;
  unint64_t v68 = a2 & 0xC000000000000001;
  if ((a2 & 0xC000000000000001) != 0)
  {
    if (a2 < 0) {
      uint64_t v24 = (void *)a2;
    }
    else {
      uint64_t v24 = (void *)(a2 & 0xFFFFFFFFFFFFFF8);
    }
    if (objc_msgSend(v24, sel_count)) {
      goto LABEL_6;
    }
    return 1;
  }
  if (!*(void *)(a2 + 16)) {
    return 1;
  }
LABEL_6:
  (*(void (**)(char *, void (**)(id *, uint64_t *), uint64_t))(v20 + 16))(v22, v75, a4);
  id v25 = v69;
  (*(void (**)(uint64_t, uint64_t))(a6 + 32))(a4, a6);
  uint64_t v26 = AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(a6, a4, (uint64_t)AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Sequence, associated conformance descriptor for Sequence.Sequence.Iterator: IteratorProtocol);
  uint64_t v28 = *(void (**)(const char *, uint64_t))(AssociatedConformanceWitness + 16);
  BOOL v29 = v67;
  uint64_t v65 = AssociatedConformanceWitness + 16;
  uint64_t v66 = AssociatedConformanceWitness;
  int64_t v64 = v28;
  ((void (*)(const char *))v28)(v26);
  uint64_t v30 = 1;
  int64_t v62 = (unsigned int (*)(char *, uint64_t, uint64_t *))v11[6];
  id v63 = v11 + 6;
  if (v62(v29, 1, a3) == 1) {
    goto LABEL_30;
  }
  unint64_t v60 = (void (*)(id *, char *, uint64_t *))v11[4];
  unint64_t v61 = v11 + 4;
  uint64_t v31 = (void *)(a2 & 0xFFFFFFFFFFFFFF8);
  if (a2 < 0) {
    uint64_t v31 = (void *)a2;
  }
  id v58 = v31;
  uint64_t v32 = (void (**)(id *, uint64_t *))(v11 + 1);
  uint64_t v56 = a5 + 32;
  uint64_t v73 = a2 + 56;
  uint64_t v71 = v11 + 2;
  uint64_t v75 = (void (**)(id *, uint64_t *))(v11 + 1);
  uint64_t v53 = a5;
  int64_t v52 = v11;
  uint64_t v55 = v12;
  uint64_t v72 = a2;
  while (1)
  {
    v60(v76, v29, a3);
    if (!v68) {
      break;
    }
    if (_swift_isClassOrObjCExistentialType((uint64_t)a3, a3))
    {
      if (v12 != 8) {
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't unsafeBitCast between types of different sizes", 52, 2, "Swift/Builtin.swift", 19, 2, 0x5FuLL, 0);
      }
      uint64_t v34 = v76;
      unint64_t v35 = *v76;
      uint64_t v36 = *v32;
      swift_unknownObjectRetain(*v76);
      unint64_t v37 = v34;
      id v25 = v69;
      v36(v37, a3);
      BOOL v29 = v67;
    }
    else
    {
      uint64_t v50 = v74;
      v60(v74, (char *)v76, a3);
      unint64_t v35 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(v50, a3);
    }
    id v38 = [v58 sel_member_:v35, v52, v53, v54];
    swift_unknownObjectRelease(v35);
    if (v38)
    {
      swift_unknownObjectRelease(v38);
      uint64_t v30 = 0;
      goto LABEL_30;
    }
LABEL_13:
    v64(v26, v66);
    uint64_t v30 = 1;
    unsigned int v33 = v62(v29, 1, a3);
    uint64_t v32 = v75;
    if (v33 == 1) {
      goto LABEL_30;
    }
  }
  if (!*(void *)(a2 + 16))
  {
    (*v32)(v76, a3);
    goto LABEL_13;
  }
  uint64_t v39 = (*(uint64_t (**)(void, uint64_t *, uint64_t))(a5 + 32))(*(void *)(a2 + 40), a3, a5);
  uint64_t v40 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v41 = v39 & ~v40;
  if (((*(void *)(v73 + ((v41 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v41) & 1) == 0)
  {
    uint64_t v49 = *v32;
LABEL_27:
    v49(v76, a3);
    uint64_t v12 = v55;
    id v25 = v69;
    goto LABEL_13;
  }
  uint64_t v54 = (unint64_t)v32 & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  uint64_t v70 = ~v40;
  uint64_t v42 = *(void *)(a5 + 8);
  id v43 = *(uint64_t (**)(id *, id *, uint64_t *, uint64_t))(v42 + 8);
  id v44 = v11;
  uint64_t v45 = v11[9];
  unint64_t v46 = (void (*)(id *, unint64_t, uint64_t *))v44[2];
  while (1)
  {
    unint64_t v47 = v74;
    v46(v74, *(void *)(v72 + 48) + v45 * v41, a3);
    char v48 = v43(v47, v76, a3, v42);
    uint64_t v49 = *v75;
    (*v75)(v47, a3);
    if (v48) {
      break;
    }
    unint64_t v41 = (v41 + 1) & v70;
    if (((*(void *)(v73 + ((v41 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v41) & 1) == 0)
    {
      a5 = v53;
      a2 = v72;
      uint64_t v11 = v52;
      uint64_t v26 = AssociatedTypeWitness;
      BOOL v29 = v67;
      goto LABEL_27;
    }
  }
  v49(v76, a3);
  uint64_t v30 = 0;
  uint64_t v26 = AssociatedTypeWitness;
  id v25 = v69;
LABEL_30:
  (*(void (**)(char *, const char *))(v57 + 8))(v25, v26);
  return v30;
}

uint64_t Set.union<A>(_:)(const char *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v41 = a5;
  id v43 = a1;
  uint64_t v10 = *(void *)(a3 - 8);
  uint64_t v11 = MEMORY[0x1F4188790](a1);
  uint64_t v39 = (id *)((char *)&v35 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1F4188790](v11);
  uint64_t v14 = (char *)&v35 - v13;
  uint64_t v17 = type metadata accessor for Optional(0, v15, v15, v16);
  MEMORY[0x1F4188790](v17 - 1);
  uint64_t v19 = (char *)&v35 - v18;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (int **)a6, a4, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Iterator);
  uint64_t v36 = *((void *)AssociatedTypeWitness - 1);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  unint64_t v22 = (char *)&v35 - v21;
  uint64_t v44 = a2;
  (*(void (**)(uint64_t, uint64_t))(a6 + 32))(a4, a6);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(a6, a4, (uint64_t)AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Sequence, associated conformance descriptor for Sequence.Sequence.Iterator: IteratorProtocol);
  uint64_t v25 = AssociatedConformanceWitness + 16;
  uint64_t v24 = *(void (**)(const char *))(AssociatedConformanceWitness + 16);
  uint64_t v42 = v22;
  id v43 = AssociatedTypeWitness;
  uint64_t v40 = AssociatedConformanceWitness;
  v24(AssociatedTypeWitness);
  uint64_t v26 = v10;
  id v27 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48);
  if (v27(v19, 1, a3) != 1)
  {
    unint64_t v37 = *(void (**)(id *, char *, uint64_t))(v26 + 32);
    uint64_t v38 = v26 + 32;
    uint64_t v28 = (void (**)(char *, uint64_t))(v26 + 8);
    do
    {
      uint64_t v29 = v25;
      uint64_t v30 = v39;
      v37(v39, v19, a3);
      uint64_t v32 = type metadata accessor for Set._Variant(0, a3, v41, v31);
      unsigned int v33 = v30;
      uint64_t v25 = v29;
      Set._Variant.insert(_:)(v14, v33, (uint64_t)v32);
      (*v28)(v14, a3);
      ((void (*)(const char *, uint64_t))v24)(v43, v40);
    }
    while (v27(v19, 1, a3) != 1);
  }
  (*(void (**)(char *, const char *))(v36 + 8))(v42, v43);
  return v44;
}

uint64_t Set.formUnion<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v32 = a2;
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = MEMORY[0x1F4188790](a1);
  uint64_t v30 = (id *)((char *)v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)v29 - v10;
  uint64_t v14 = type metadata accessor for Optional(0, v6, v12, v13);
  MEMORY[0x1F4188790](v14 - 1);
  uint64_t v16 = (char *)v29 - v15;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (int **)a4, a3, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Iterator);
  v29[0] = *((void *)AssociatedTypeWitness - 1);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v19 = (char *)v29 - v18;
  (*(void (**)(uint64_t, uint64_t))(a4 + 32))(a3, a4);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(a4, a3, (uint64_t)AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Sequence, associated conformance descriptor for Sequence.Sequence.Iterator: IteratorProtocol);
  uint64_t v21 = *(void (**)(const char *))(AssociatedConformanceWitness + 16);
  unsigned int v33 = v19;
  uint64_t v34 = AssociatedTypeWitness;
  uint64_t v31 = AssociatedConformanceWitness;
  v29[1] = AssociatedConformanceWitness + 16;
  v21(AssociatedTypeWitness);
  unint64_t v22 = (void (*)(const char *, uint64_t))v21;
  uint64_t v23 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48);
  if (v23(v16, 1, v6) != 1)
  {
    uint64_t v24 = *(void (**)(id *, char *, uint64_t))(v7 + 32);
    do
    {
      uint64_t v25 = v30;
      v24(v30, v16, v6);
      id v27 = type metadata accessor for Set._Variant(0, v6, *(void *)(v32 + 24), v26);
      Set._Variant.insert(_:)(v11, v25, (uint64_t)v27);
      (*(void (**)(char *, uint64_t))(v7 + 8))(v11, v6);
      v22(v34, v31);
    }
    while (v23(v16, 1, v6) != 1);
  }
  return (*(uint64_t (**)(char *, const char *))(v29[0] + 8))(v33, v34);
}

__objc2_class **Set.subtracting<A>(_:)(uint64_t a1, int64_t a2, char *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10 = (__objc2_class **)a2;
  if ((a2 & 0xC000000000000001) != 0)
  {
    if (a2 < 0) {
      uint64_t v12 = (void *)a2;
    }
    else {
      uint64_t v12 = (void *)(a2 & 0xFFFFFFFFFFFFFF8);
    }
    swift_bridgeObjectRetain(a2);
    uint64_t v13 = _NativeSet.init(_:capacity:)(v12, (uint64_t)objc_msgSend(v12, sel_count), a3, a5);
    swift_bridgeObjectRelease((uint64_t)v10);
    uint64_t v10 = v13;
  }

  return _NativeSet.subtracting<A>(_:)(a1, v10, (uint64_t)a3, a4, a5, a6);
}

__objc2_class **Set._subtracting<A>(_:)(uint64_t a1, int64_t a2, char *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10 = (__objc2_class **)a2;
  if ((a2 & 0xC000000000000001) != 0)
  {
    if (a2 < 0) {
      uint64_t v12 = (void *)a2;
    }
    else {
      uint64_t v12 = (void *)(a2 & 0xFFFFFFFFFFFFFF8);
    }
    swift_bridgeObjectRetain(a2);
    uint64_t v13 = _NativeSet.init(_:capacity:)(v12, (uint64_t)objc_msgSend(v12, sel_count), a3, a5);
    swift_bridgeObjectRelease((uint64_t)v10);
    uint64_t v10 = v13;
  }

  return _NativeSet.subtracting<A>(_:)(a1, v10, (uint64_t)a3, a4, a5, a6);
}

id Set._subtract<A>(_:)(const char *a1, uint64_t a2, uint64_t a3, int **a4)
{
  uint64_t v5 = v4;
  uint64_t v49 = a1;
  uint64_t v41 = a2;
  uint64_t v8 = *(void *)(a2 + 16);
  uint64_t v51 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v10 = (id *)((char *)&v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  unint64_t v47 = type metadata accessor for Optional(0, v8, v11, v12);
  id v43 = (void (**)(uint64_t, Class *))*(v47 - 1);
  uint64_t v13 = MEMORY[0x1F4188790](v47);
  uint64_t v42 = (char *)&v40 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = MEMORY[0x1F4188790](v13);
  uint64_t v17 = (char *)&v40 - v16;
  uint64_t v18 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](v15);
  uint64_t v20 = (char *)&v40 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v50 = a4;
  uint64_t v21 = a3;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, a4, a3, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Iterator);
  uint64_t v40 = *((void *)AssociatedTypeWitness - 1);
  id result = (id)MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v25 = (int **)((char *)&v40 - v24);
  char v48 = v5;
  uint64_t v26 = *v5;
  if ((*v5 & 0xC000000000000001) != 0)
  {
    if (v26 < 0) {
      id v27 = (void *)*v5;
    }
    else {
      id v27 = (void *)(v26 & 0xFFFFFFFFFFFFFF8);
    }
    id result = [v27 count];
    if (!result) {
      return result;
    }
  }
  else if (!*(void *)(v26 + 16))
  {
    return result;
  }
  (*(void (**)(char *, const char *, uint64_t))(v18 + 16))(v20, v49, v21);
  uint64_t v28 = (uint64_t)v50;
  ((void (*)(uint64_t, int **))v50[4])(v21, v50);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v28, v21, (uint64_t)AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Sequence, associated conformance descriptor for Sequence.Sequence.Iterator: IteratorProtocol);
  uint64_t v30 = *(void (**)(const char *, uint64_t))(AssociatedConformanceWitness + 16);
  uint64_t v49 = AssociatedTypeWitness;
  uint64_t v50 = v25;
  uint64_t v45 = v30;
  uint64_t v46 = AssociatedConformanceWitness;
  ((void (*)(const char *))v30)(AssociatedTypeWitness);
  uint64_t v31 = v51;
  uint64_t v32 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v51 + 48);
  int v33 = v32(v17, 1, v8);
  uint64_t v35 = v41;
  uint64_t v34 = (uint64_t)v42;
  if (v33 != 1)
  {
    uint64_t v36 = *(void (**)(id *, char *, uint64_t))(v31 + 32);
    ++v43;
    uint64_t v44 = v36;
    uint64_t v51 = v31 + 32;
    unint64_t v37 = (void (**)(id *, uint64_t))(v31 + 8);
    do
    {
      v44(v10, v17, v8);
      uint64_t v39 = type metadata accessor for Set._Variant(0, v8, *(void *)(v35 + 24), v38);
      Set._Variant.remove(_:)(v10, (uint64_t)v39, v34);
      (*v43)(v34, v47);
      (*v37)(v10, v8);
      v45(v49, v46);
    }
    while (v32(v17, 1, v8) != 1);
  }
  return (id)(*(uint64_t (**)(int **, const char *))(v40 + 8))(v50, v49);
}

__objc2_class **Set.intersection<A>(_:)(uint64_t a1, uint64_t a2, char *a3, Class *a4, uint64_t a5, uint64_t a6)
{
  MEMORY[0x1F4188790](a1);
  uint64_t v13 = (unint64_t *)((char *)&v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(unint64_t *, uint64_t, uint64_t))(v14 + 16))(v13, a1, v15);
  uint64_t v17 = type metadata accessor for Set(0, (uint64_t)a3, a5, v16);
  if (swift_dynamicCast((char *)&v24, v13, a4, (const char *)v17, 6uLL))
  {
    uint64_t v18 = v24;
    uint64_t v19 = Set._Variant.intersection(_:)(v24, a2, a3, a5);
    swift_bridgeObjectRelease((uint64_t)v18);
  }
  else
  {
    if ((a2 & 0xC000000000000001) != 0)
    {
      if (a2 < 0) {
        uint64_t v20 = (void *)a2;
      }
      else {
        uint64_t v20 = (void *)(a2 & 0xFFFFFFFFFFFFFF8);
      }
      swift_bridgeObjectRetain(a2);
      uint64_t v21 = _NativeSet.init(_:capacity:)(v20, (uint64_t)objc_msgSend(v20, sel_count), a3, a5);
      swift_bridgeObjectRelease(a2);
      a2 = (uint64_t)v21;
    }
    return _NativeSet.genericIntersection<A>(_:)(a1, a2, (uint64_t)a3, (uint64_t)a4, a5, a6);
  }
  return v19;
}

__objc2_class **Set.formIntersection<A>(_:)(uint64_t a1, uint64_t a2, Class *a3, uint64_t a4)
{
  id result = Set.intersection<A>(_:)(a1, *v4, *(char **)(a2 + 16), a3, *(void *)(a2 + 24), a4);
  *uint64_t v4 = (uint64_t)result;
  return result;
}

uint64_t Set.symmetricDifference<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, Class *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8 = Set.init<A>(_:)(a1, a3, a4, a5, a6);
  uint64_t v10 = type metadata accessor for Set(0, a3, a5, v9);
  Set.formSymmetricDifference(_:)((int64_t)v8, (uint64_t)v10);
  return a2;
}

uint64_t Set.formSymmetricDifference<A>(_:)(uint64_t a1, uint64_t a2, Class *a3, uint64_t a4)
{
  uint64_t v5 = Set.init<A>(_:)(a1, *(void *)(a2 + 16), a3, *(void *)(a2 + 24), a4);

  return Set.formSymmetricDifference(_:)((int64_t)v5, a2);
}

uint64_t Set.formSymmetricDifference(_:)(int64_t a1, uint64_t a2)
{
  int64_t v3 = a1;
  uint64_t v74 = a2;
  uint64_t v4 = *(uint64_t **)(a2 + 16);
  uint64_t v71 = *(v4 - 1);
  uint64_t v5 = MEMORY[0x1F4188790](a1);
  id v67 = (char *)&v56 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (id *)((char *)&v56 - v7);
  uint64_t v11 = type metadata accessor for Optional(0, (uint64_t)v4, v9, v10);
  uint64_t v12 = (uint64_t)*(v11 - 1);
  uint64_t v13 = MEMORY[0x1F4188790](v11);
  uint64_t v66 = (uint64_t)&v56 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = MEMORY[0x1F4188790](v13);
  uint64_t v16 = MEMORY[0x1F4188790](v15);
  uint64_t v17 = MEMORY[0x1F4188790](v16);
  uint64_t v19 = (char *)&v56 - v18;
  uint64_t v69 = v17;
  id v58 = v20;
  uint64_t v59 = (char *)v21;
  if ((v3 & 0xC000000000000001) != 0)
  {
    if (v3 < 0) {
      uint64_t v22 = v3;
    }
    else {
      uint64_t v22 = v3 & 0xFFFFFFFFFFFFFF8;
    }
    uint64_t v23 = (unint64_t *)type metadata accessor for __CocoaSet.Iterator();
    unint64_t v24 = (unint64_t)swift_allocObject(v23, 0xE8uLL, 7uLL);
    int64_t v64 = 0;
    uint64_t v25 = 0;
    unint64_t v26 = 0;
    *(void *)(v24 + 208) = v22;
    *(void *)(v24 + 216) = 0;
    *(_OWORD *)(v24 + 16) = 0u;
    *(_OWORD *)(v24 + 32) = 0u;
    *(_OWORD *)(v24 + 48) = 0u;
    *(_OWORD *)(v24 + 64) = 0u;
    *(_OWORD *)(v24 + 80) = 0u;
    *(_OWORD *)(v24 + 96) = 0u;
    *(_OWORD *)(v24 + 112) = 0u;
    *(_OWORD *)(v24 + 128) = 0u;
    *(_OWORD *)(v24 + 144) = 0u;
    *(_OWORD *)(v24 + 160) = 0u;
    *(_OWORD *)(v24 + 176) = 0u;
    *(_OWORD *)(v24 + 192) = 0u;
    *(void *)(v24 + 224) = 0;
    int64_t v3 = v24 | 0x8000000000000000;
  }
  else
  {
    uint64_t v27 = -1 << *(unsigned char *)(v3 + 32);
    uint64_t v28 = *(void *)(v3 + 56);
    int64_t v64 = v3 + 56;
    uint64_t v25 = ~v27;
    uint64_t v29 = -v27;
    if (v29 < 64) {
      uint64_t v30 = ~(-1 << v29);
    }
    else {
      uint64_t v30 = -1;
    }
    unint64_t v26 = v30 & v28;
  }
  int64_t v72 = 0;
  uint64_t v31 = v3 & 0x7FFFFFFFFFFFFFFFLL;
  uint64_t v61 = (v3 & 0x7FFFFFFFFFFFFFFFLL) + 80;
  uint64_t v62 = (v3 & 0x7FFFFFFFFFFFFFFFLL) + 16;
  uint64_t v75 = (void (**)(char *, uint64_t, uint64_t, uint64_t *))(v71 + 56);
  uint64_t v56 = (unsigned int (**)(uint64_t, uint64_t, uint64_t *))(v71 + 48);
  uint64_t v57 = (void (**)(uint64_t, void *, uint64_t))(v12 + 16);
  unint64_t v68 = (void (**)(uint64_t, uint64_t))(v12 + 8);
  uint64_t v32 = (void (**)(id *, char *, uint64_t *))(v71 + 32);
  uint64_t v60 = v25;
  int64_t v63 = (unint64_t)(v25 + 64) >> 6;
  uint64_t v70 = v71 + 16;
  int v33 = (void (**)(void *, uint64_t *))(v71 + 8);
  uint64_t v65 = qword_1ECA06328;
  int64_t v73 = v3;
  while ((v3 & 0x8000000000000000) == 0)
  {
    if (v26)
    {
      unint64_t v36 = __clz(__rbit64(v26));
      v26 &= v26 - 1;
      unint64_t v37 = v36 | (v72 << 6);
    }
    else
    {
      int64_t v44 = v72 + 1;
      if (__OFADD__(v72, 1))
      {
        __break(1u);
LABEL_47:
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/SetBridging.swift", 23, 2, 0x254uLL, 0);
      }
      if (v44 >= v63) {
        goto LABEL_41;
      }
      unint64_t v45 = *(void *)(v64 + 8 * v44);
      if (!v45)
      {
        int64_t v46 = v72 + 2;
        if (v72 + 2 >= v63) {
          goto LABEL_41;
        }
        unint64_t v45 = *(void *)(v64 + 8 * v46);
        if (!v45)
        {
          while (1)
          {
            int64_t v44 = v46 + 1;
            if (__OFADD__(v46, 1)) {
              break;
            }
            if (v44 >= v63) {
              goto LABEL_41;
            }
            unint64_t v45 = *(void *)(v64 + 8 * v44);
            ++v46;
            if (v45) {
              goto LABEL_35;
            }
          }
          __break(1u);
LABEL_44:
          __break(1u);
LABEL_45:
          _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "load from misaligned raw pointer", 32, 2, "Swift/UnsafeRawPointer.swift", 28, 2, 0x4F9uLL, 0);
        }
        int64_t v44 = v72 + 2;
      }
LABEL_35:
      unint64_t v26 = (v45 - 1) & v45;
      unint64_t v37 = __clz(__rbit64(v45)) + (v44 << 6);
      int64_t v72 = v44;
    }
    uint64_t v47 = *(void *)(v3 + 48);
    uint64_t v48 = v71;
    (*(void (**)(char *, unint64_t, uint64_t *))(v71 + 16))(v19, v47 + *(void *)(v71 + 72) * v37, v4);
    (*(void (**)(char *, void, uint64_t, uint64_t *))(v48 + 56))(v19, 0, 1, v4);
LABEL_37:
    (*v32)(v8, v19, v4);
    uint64_t v49 = *(void *)(v74 + 24);
    char v50 = Set.contains(_:)(v8, *v2, v4, v49);
    int64_t v52 = type metadata accessor for Set._Variant(0, (uint64_t)v4, v49, v51);
    if (v50)
    {
      uint64_t v53 = v66;
      Set._Variant.remove(_:)(v8, (uint64_t)v52, v66);
      (*v68)(v53, v69);
      uint64_t v35 = v8;
    }
    else
    {
      uint64_t v34 = v67;
      Set._Variant.insert(_:)(v67, v8, (uint64_t)v52);
      uint64_t v35 = v34;
    }
    (*v33)(v35, v4);
    int64_t v3 = v73;
  }
  uint64_t v38 = *(void *)(v31 + 216);
  if (v38 < 0) {
    goto LABEL_41;
  }
  if (v38 != *(void *)(v31 + 224))
  {
LABEL_20:
    uint64_t v40 = *(void *)(v31 + 24);
    if (!v40) {
      goto LABEL_47;
    }
    if ((unint64_t)(v38 - 0x1000000000000000) >> 61 != 7) {
      goto LABEL_44;
    }
    uint64_t v41 = (void **)(v40 + 8 * v38);
    if ((v41 & 7) != 0) {
      goto LABEL_45;
    }
    uint64_t v42 = *v41;
    *(void *)(v31 + 216) = v38 + 1;
    swift_unknownObjectRetain(v42);
    if (_swift_isClassOrObjCExistentialType((uint64_t)v4, v4))
    {
      uint64_t v76 = v42;
      swift_dynamicCast(v19, (unint64_t *)&v76, v65, (const char *)v4, 7uLL);
      id v43 = *v75;
    }
    else
    {
      id v43 = *v75;
      (*v75)(v59, 1, 1, v4);
      _bridgeNonVerbatimFromObjectiveC<A>(_:_:_:)((swift *)v42, (uint64_t)v4, v59);
      swift_unknownObjectRelease(v42);
      uint64_t v54 = v58;
      (*v57)((uint64_t)v58, v59, v69);
      if ((*v56)((uint64_t)v54, 1, v4) == 1) {
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/BridgeObjectiveC.swift", 28, 2, 0xFCuLL, 0);
      }
      (*v68)((uint64_t)v59, v69);
      (*v32)((id *)v19, v58, v4);
    }
    v43(v19, 0, 1, v4);
    goto LABEL_37;
  }
  id v39 = [*(id *)(v31 + 208) countByEnumeratingWithState:v62 objects:v61 count:16];
  *(void *)(v31 + 224) = v39;
  if (v39)
  {
    uint64_t v38 = 0;
    *(void *)(v31 + 216) = 0;
    goto LABEL_20;
  }
  *(void *)(v31 + 216) = -1;
LABEL_41:
  (*v75)(v19, 1, 1, v4);
  return outlined consume of [A : B].Iterator._Variant<A, B>(v3);
}

void protocol witness for SetAlgebra.init() in conformance Set<A>(void *a1@<X8>)
{
  *a1 = &_swiftEmptySetSingleton;
}

uint64_t protocol witness for SetAlgebra.contains(_:) in conformance Set<A>(id *a1, uint64_t a2)
{
  return Set.contains(_:)(a1, *v2, *(uint64_t **)(a2 + 16), *(void *)(a2 + 24));
}

uint64_t protocol witness for SetAlgebra.union(_:) in conformance Set<A>@<X0>(uint64_t a1@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  return protocol witness for SetAlgebra.union(_:) in conformance Set<A>(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, unint64_t, unint64_t *, unint64_t, uint64_t))Set.union<A>(_:), a4);
}

uint64_t protocol witness for SetAlgebra.intersection(_:) in conformance Set<A>@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result = Set.intersection(_:)(*a1, *v3, *(void *)(a2 + 16), *(void *)(a2 + 24));
  *a3 = result;
  return result;
}

uint64_t protocol witness for SetAlgebra.symmetricDifference(_:) in conformance Set<A>@<X0>(uint64_t a1@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  return protocol witness for SetAlgebra.union(_:) in conformance Set<A>(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, unint64_t, unint64_t *, unint64_t, uint64_t))Set.symmetricDifference<A>(_:), a4);
}

uint64_t protocol witness for SetAlgebra.union(_:) in conformance Set<A>@<X0>(uint64_t a1@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t (*a4)(uint64_t, uint64_t, unint64_t, unint64_t *, unint64_t, uint64_t)@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v10 = *v5;
  unint64_t v11 = a2[2];
  unint64_t v12 = a2[3];
  uint64_t WitnessTable = swift_getWitnessTable(protocol conformance descriptor for Set<A>, a2, a3);
  uint64_t result = a4(a1, v10, v11, a2, v12, WitnessTable);
  *a5 = result;
  return result;
}

uint64_t protocol witness for SetAlgebra.formUnion(_:) in conformance Set<A>(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable(protocol conformance descriptor for Set<A>, a2, a3);

  return Set.formUnion<A>(_:)(a1, (uint64_t)a2, (uint64_t)a2, WitnessTable);
}

__objc2_class **protocol witness for SetAlgebra.formIntersection(_:) in conformance Set<A>(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable(protocol conformance descriptor for Set<A>, a2, a3);

  return Set.formIntersection<A>(_:)(a1, (uint64_t)a2, (Class *)a2, WitnessTable);
}

uint64_t protocol witness for SetAlgebra.formSymmetricDifference(_:) in conformance Set<A>(int64_t *a1, uint64_t a2)
{
  return Set.formSymmetricDifference(_:)(*a1, a2);
}

__objc2_class **protocol witness for SetAlgebra.subtracting(_:) in conformance Set<A>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, __objc2_class ***a3@<X8>)
{
  uint64_t result = Set.subtracting(_:)(*a1, *v3, *(char **)(a2 + 16), *(void *)(a2 + 24));
  *a3 = result;
  return result;
}

__objc2_class **Set.subtracting(_:)(uint64_t a1, uint64_t a2, char *a3, uint64_t a4)
{
  uint64_t v6 = a2;
  uint64_t v7 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (a1 >= 0) {
      a1 &= 0xFFFFFFFFFFFFFF8uLL;
    }
    uint64_t v8 = (uint64_t)[a1 sel_count];
    if ((v6 & 0xC000000000000001) != 0)
    {
LABEL_5:
      if (v6 < 0) {
        uint64_t v9 = (void *)v6;
      }
      else {
        uint64_t v9 = (void *)(v6 & 0xFFFFFFFFFFFFFF8);
      }
      if (v8 > (uint64_t)objc_msgSend(v9, sel_count) / 8)
      {
        uint64_t v19 = v7;
        swift_bridgeObjectRetain(v6);
        uint64_t v10 = [_NativeSet.init(_:capacity:)(v9, (uint64_t)objc_msgSend(v9, sel_count), a3, a4)];
        swift_bridgeObjectRelease(v6);
        uint64_t v6 = (uint64_t)v10;
LABEL_13:
        unint64_t v11 = (unint64_t *)type metadata accessor for Set(0, (uint64_t)a3, a4, a4);
        uint64_t WitnessTable = swift_getWitnessTable(protocol conformance descriptor for Set<A>, v11, v12);
        return _NativeSet.subtracting<A>(_:)((uint64_t)&v19, (__objc2_class **)v6, (uint64_t)a3, (uint64_t)v11, a4, WitnessTable);
      }
      goto LABEL_14;
    }
  }
  else
  {
    uint64_t v8 = *(void *)(a1 + 16);
    if ((a2 & 0xC000000000000001) != 0) {
      goto LABEL_5;
    }
  }
  if (v8 > *(void *)(v6 + 16) >> 3)
  {
    uint64_t v19 = v7;
    goto LABEL_13;
  }
LABEL_14:
  uint64_t v18 = v7;
  uint64_t v19 = v6;
  uint64_t v15 = (unint64_t *)type metadata accessor for Set(0, (uint64_t)a3, a4, a4);
  uint64_t v17 = (int **)swift_getWitnessTable(protocol conformance descriptor for Set<A>, v15, v16);
  Set._subtract<A>(_:)((const char *)&v18, (uint64_t)v15, (uint64_t)v15, v17);
  return (__objc2_class **)v19;
}

uint64_t protocol witness for SetAlgebra.isSubset(of:) in conformance Set<A>(uint64_t *a1, uint64_t a2)
{
  return Set.isSubset(of:)(*a1, *v2, *(char **)(a2 + 16), *(void *)(a2 + 24));
}

uint64_t protocol witness for SetAlgebra.isDisjoint(with:) in conformance Set<A>(uint64_t *a1, uint64_t a2)
{
  return Set.isDisjoint(with:)(*a1, *v2, *(uint64_t **)(a2 + 16), *(void *)(a2 + 24));
}

uint64_t protocol witness for SetAlgebra.isSuperset(of:) in conformance Set<A>(int64_t *a1, uint64_t a2)
{
  return Set.isSuperset(of:)(*a1, *v2, *(char **)(a2 + 16), *(void *)(a2 + 24));
}

__objc2_class **protocol witness for SetAlgebra.init<A>(_:) in conformance Set<A>@<X0>(uint64_t a1@<X0>, Class *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, __objc2_class ***a5@<X8>)
{
  uint64_t result = Set.init<A>(_:)(a1, *(void *)(a4 + 16), a2, *(void *)(a4 + 24), a3);
  *a5 = result;
  return result;
}

id protocol witness for SetAlgebra.subtract(_:) in conformance Set<A>(uint64_t *a1, unint64_t *a2, uint64_t a3)
{
  return Set.subtract(_:)(*a1, a2, a3);
}

id Set.subtract(_:)(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  uint64_t v6 = a1;
  uint64_t WitnessTable = (int **)swift_getWitnessTable(protocol conformance descriptor for Set<A>, a2, a3);
  return Set._subtract<A>(_:)((const char *)&v6, (uint64_t)a2, (uint64_t)a2, WitnessTable);
}

uint64_t Set.description.getter(int64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  uint64_t v4 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v6 = (char *)v101 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for Optional(0, v7, v8, v9);
  MEMORY[0x1F4188790](v10 - 1);
  uint64_t v113 = (char *)v101 - v11;
  swift_bridgeObjectRelease(0xE000000000000000);
  uint64_t v116 = 91;
  unint64_t v117 = 0xE100000000000000;
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (a1 < 0) {
      uint64_t v12 = a1;
    }
    else {
      uint64_t v12 = a1 & 0xFFFFFFFFFFFFFF8;
    }
    uint64_t v13 = (unint64_t *)type metadata accessor for __CocoaSet.Iterator();
    unint64_t v14 = (unint64_t)swift_allocObject(v13, 0xE8uLL, 7uLL);
    uint64_t v106 = 0;
    uint64_t v15 = 0;
    unint64_t v16 = 0;
    *(void *)(v14 + 208) = v12;
    *(void *)(v14 + 216) = 0;
    *(_OWORD *)(v14 + 16) = 0u;
    *(_OWORD *)(v14 + 32) = 0u;
    *(_OWORD *)(v14 + 48) = 0u;
    *(_OWORD *)(v14 + 64) = 0u;
    *(_OWORD *)(v14 + 80) = 0u;
    *(_OWORD *)(v14 + 96) = 0u;
    *(_OWORD *)(v14 + 112) = 0u;
    *(_OWORD *)(v14 + 128) = 0u;
    *(_OWORD *)(v14 + 144) = 0u;
    *(_OWORD *)(v14 + 160) = 0u;
    *(_OWORD *)(v14 + 176) = 0u;
    *(_OWORD *)(v14 + 192) = 0u;
    *(void *)(v14 + 224) = 0;
    uint64_t v17 = v14 | 0x8000000000000000;
  }
  else
  {
    uint64_t v18 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v15 = ~v18;
    uint64_t v19 = *(void *)(a1 + 56);
    uint64_t v106 = a1 + 56;
    uint64_t v20 = -v18;
    if (v20 < 64) {
      uint64_t v21 = ~(-1 << v20);
    }
    else {
      uint64_t v21 = -1;
    }
    unint64_t v16 = v21 & v19;
    uint64_t v17 = a1;
  }
  uint64_t v107 = v17 & 0x7FFFFFFFFFFFFFFFLL;
  int64_t v22 = v4 + 56;
  v101[1] = v15;
  int64_t v105 = (unint64_t)(v15 + 64) >> 6;
  uint64_t v110 = v4 + 16;
  unint64_t v23 = v4 + 32;
  swift_bridgeObjectRetain(a1);
  int64_t v111 = 0;
  uint64_t v24 = 1;
  long long v112 = xmmword_18162AC80;
  long long v104 = xmmword_18162AC90;
  uint64_t v103 = v4;
  uint64_t v102 = v6;
  int64_t v108 = v4 + 56;
  uint64_t v109 = v17;
  while (v17 < 0)
  {
    id v32 = __CocoaSet.Iterator.next()();
    if (!v32) {
      goto LABEL_71;
    }
    uint64_t v34 = v32;
    uint64_t v35 = v113;
    _forceBridgeFromObjectiveC<A>(_:_:)(v32, (char *)v2, v33, v113);
    swift_unknownObjectRelease(v34);
LABEL_30:
    (*(void (**)(char *, void, uint64_t, uint64_t))v22)(v35, 0, 1, v2);
    uint64_t v40 = v35;
    uint64_t v41 = *(void (**)(void *, char *, uint64_t))v23;
    (*(void (**)(char *, char *, uint64_t))v23)(v6, v40, v2);
    if ((v24 & 1) == 0)
    {
      uint64_t v17 = v116;
      uint64_t v42 = v117;
      unint64_t v43 = HIBYTE(v117) & 0xF;
      if ((v117 & 0x2000000000000000) != 0) {
        unint64_t v44 = HIBYTE(v117) & 0xF;
      }
      else {
        unint64_t v44 = v116 & 0xFFFFFFFFFFFFLL;
      }
      if (!v44 && (v116 & ~v117 & 0x2000000000000000) == 0)
      {
        swift_bridgeObjectRelease(v117);
        uint64_t v116 = 8236;
        unint64_t v74 = 0xE200000000000000;
LABEL_67:
        unint64_t v117 = v74;
        goto LABEL_12;
      }
      if ((v117 & 0x2000000000000000) != 0 && v43 <= 0xD)
      {
        unint64_t v45 = 8 * (HIBYTE(v117) & 7);
        uint64_t v46 = (-255 << v45) - 1;
        uint64_t v47 = 44 << v45;
        char v48 = v43 + 1;
        if (v43 >= 8)
        {
          uint64_t v49 = v47 | v46 & v117;
        }
        else
        {
          uint64_t v17 = v47 | v46 & v116;
          if (v43 != 7)
          {
            uint64_t v17 = (32 << (8 * (v48 & 7u))) | ((-255 << (8 * (v48 & 7u))) - 1) & v17;
            uint64_t v73 = v117;
            goto LABEL_64;
          }
          char v48 = 8;
          uint64_t v49 = v117;
        }
        uint64_t v73 = (32 << (8 * (v48 & 7u))) | ((-255 << (8 * (v48 & 7u))) - 1) & v49;
LABEL_64:
        swift_bridgeObjectRelease(v117);
        swift_bridgeObjectRelease(0xE200000000000000);
        unint64_t v75 = 0xE000000000000000;
        if (v17 & 0x8080808080808080 | v73 & 0x80808080808080) {
          unint64_t v75 = 0xA000000000000000;
        }
        unint64_t v74 = (v75 & 0xFF00000000000000 | (v43 << 56) | v73 & 0xFFFFFFFFFFFFFFLL) + 0x200000000000000;
        uint64_t v116 = v17;
        goto LABEL_67;
      }
      swift_bridgeObjectRetain_n(0xE200000000000000, 6);
      if ((v42 & 0x1000000000000000) == 0)
      {
        BOOL v50 = __OFADD__(v44, 2);
        int64_t v22 = v44 + 2;
        if (v50) {
          goto LABEL_70;
        }
LABEL_43:
        if ((v17 & ~v42 & 0x2000000000000000) != 0
          && swift_isUniquelyReferenced_nonNull_native(v42 & 0xFFFFFFFFFFFFFFFLL))
        {
          int64_t v51 = _StringGuts.nativeUnusedCapacity.getter(v17, v42);
          if (v52) {
            goto LABEL_116;
          }
          BOOL v54 = (v42 & 0x2000000000000000) == 0 && v51 > 1;
          if (v22 > 15 || v54) {
            goto LABEL_11;
          }
        }
        else if (v22 > 15)
        {
LABEL_11:
          _StringGuts.prepareForAppendInPlace(totalCount:otherUTF8Count:)(v22, 2);
          swift_bridgeObjectRelease_n(0xE200000000000000, 6);
          long long v115 = v104;
          uint64_t v25 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, 2, (uint64_t)&v115, 2);
          _StringGuts.appendInPlace(_:isASCII:)(v25, v26, 1);
          swift_bridgeObjectRelease(0xE200000000000000);
LABEL_12:
          int64_t v22 = v108;
          uint64_t v17 = v109;
          goto LABEL_13;
        }
        swift_bridgeObjectRelease_n(0xE200000000000000, 5);
        swift_bridgeObjectRetain(v42);
        unint64_t v55 = _StringGuts._convertedToSmall()(v17, v42);
        unint64_t v57 = v56;
        swift_bridgeObjectRelease(v42);
        v58._Swift::UInt64 rawBits = 131073;
        v59._Swift::UInt64 rawBits = 1;
        v60._Swift::UInt64 rawBits = _StringGuts.validateScalarRange(_:)(v59, v58, 0x202CuLL, 0xE200000000000000);
        if (v60._rawBits < 0x10000) {
          v60._rawBits |= 3;
        }
        unint64_t v62 = specialized String.init(_:)(v60, v61, 0x202CuLL, 0xE200000000000000);
        unint64_t v64 = v63;
        swift_bridgeObjectRelease(0xE200000000000000);
        unint64_t v65 = _StringGuts._convertedToSmall()(v62, v64);
        unint64_t v67 = v66;
        swift_bridgeObjectRelease(v64);
        unint64_t v68 = specialized _SmallString.init(_:appending:)(v55, v57, v65, v67);
        if (v70) {
          goto LABEL_115;
        }
        uint64_t v71 = v68;
        unint64_t v72 = v69;
        swift_bridgeObjectRelease(v42);
        swift_bridgeObjectRelease(0xE200000000000000);
        uint64_t v116 = v71;
        unint64_t v117 = v72;
        uint64_t v4 = v103;
        uint64_t v6 = v102;
        goto LABEL_12;
      }
      Swift::Int v76 = String.UTF8View._foreignCount()();
      int64_t v22 = v76 + 2;
      if (!__OFADD__(v76, 2)) {
        goto LABEL_43;
      }
LABEL_70:
      __break(1u);
LABEL_71:
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))v22)(v113, 1, 1, v2);
      outlined consume of [A : B].Iterator._Variant<A, B>(v17);
      uint64_t v37 = v116;
      uint64_t v2 = v117;
      unint64_t v23 = HIBYTE(v117) & 0xF;
      uint64_t v24 = v116 & 0xFFFFFFFFFFFFLL;
      if ((v117 & 0x2000000000000000) != 0) {
        unint64_t v77 = HIBYTE(v117) & 0xF;
      }
      else {
        unint64_t v77 = v116 & 0xFFFFFFFFFFFFLL;
      }
      if (!v77 && (v116 & ~v117 & 0x2000000000000000) == 0)
      {
        swift_bridgeObjectRelease(v117);
        return 93;
      }
      if ((v117 & 0x2000000000000000) != 0 && v23 != 15)
      {
        if (v23 < 8) {
          uint64_t v37 = (93 << (8 * (HIBYTE(v117) & 7u))) | ((-255 << (8 * (HIBYTE(v117) & 7u))) - 1) & v116;
        }
        swift_bridgeObjectRelease(v117);
        swift_bridgeObjectRelease(0xE100000000000000);
        return v37;
      }
      swift_bridgeObjectRetain_n(0xE100000000000000, 6);
      if ((v2 & 0x1000000000000000) != 0) {
        goto LABEL_104;
      }
      BOOL v50 = __OFADD__(v77, 1);
      uint64_t v78 = v77 + 1;
      if (!v50) {
        goto LABEL_83;
      }
LABEL_106:
      __break(1u);
      goto LABEL_107;
    }
LABEL_13:
    uint64_t v27 = canonical specialized generic type metadata accessor for _ContiguousArrayStorage<Any>();
    inited = swift_initStackObject(v27, v114);
    *((_OWORD *)inited + 1) = v112;
    inited[7] = v2;
    boxed_opaque_existential_0Tm = __swift_allocate_boxed_opaque_existential_0Tm(inited + 4);
    v41(boxed_opaque_existential_0Tm, v6, v2);
    specialized _debugPrint<A>(_:separator:terminator:to:)((uint64_t)inited, 0x20uLL, 0xE100000000000000, 0, 0xE000000000000000, &v116);
    swift_bridgeObjectRelease((uint64_t)inited);
    swift_bridgeObjectRelease(0xE000000000000000);
    swift_bridgeObjectRelease(0xE100000000000000);
    uint64_t v24 = 0;
  }
  if (v16)
  {
    unint64_t v30 = __clz(__rbit64(v16));
    v16 &= v16 - 1;
    unint64_t v31 = v30 | (v111 << 6);
LABEL_29:
    uint64_t v35 = v113;
    (*(void (**)(char *, unint64_t, uint64_t))(v4 + 16))(v113, *(void *)(v17 + 48) + *(void *)(v4 + 72) * v31, v2);
    goto LABEL_30;
  }
  int64_t v36 = v111 + 1;
  uint64_t v37 = v106;
  if (__OFADD__(v111, 1)) {
    goto LABEL_103;
  }
  if (v36 >= v105) {
    goto LABEL_71;
  }
  unint64_t v38 = *(void *)(v106 + 8 * v36);
  if (v38)
  {
LABEL_28:
    unint64_t v16 = (v38 - 1) & v38;
    unint64_t v31 = __clz(__rbit64(v38)) + (v36 << 6);
    int64_t v111 = v36;
    goto LABEL_29;
  }
  int64_t v39 = v111 + 2;
  if (v111 + 2 >= v105) {
    goto LABEL_71;
  }
  unint64_t v38 = *(void *)(v106 + 8 * v39);
  if (v38)
  {
    int64_t v36 = v111 + 2;
    goto LABEL_28;
  }
  while (1)
  {
    int64_t v36 = v39 + 1;
    if (__OFADD__(v39, 1)) {
      break;
    }
    if (v36 >= v105) {
      goto LABEL_71;
    }
    unint64_t v38 = *(void *)(v106 + 8 * v36);
    ++v39;
    if (v38) {
      goto LABEL_28;
    }
  }
  __break(1u);
LABEL_103:
  __break(1u);
LABEL_104:
  Swift::Int v91 = String.UTF8View._foreignCount()();
  uint64_t v78 = v91 + 1;
  if (__OFADD__(v91, 1)) {
    goto LABEL_106;
  }
LABEL_83:
  if ((v37 & ~v2 & 0x2000000000000000) != 0 && swift_isUniquelyReferenced_nonNull_native(v2 & 0xFFFFFFFFFFFFFFFLL))
  {
    int64_t v79 = _StringGuts.nativeUnusedCapacity.getter(v37, v2);
    if (v80)
    {
LABEL_116:
      unint64_t v96 = 258;
    }
    else
    {
      if (v78 > 15) {
        goto LABEL_89;
      }
      if ((v2 & 0x2000000000000000) != 0)
      {
        swift_bridgeObjectRelease_n(0xE100000000000000, 5);
        goto LABEL_92;
      }
      if (v79 > 0) {
        goto LABEL_89;
      }
LABEL_91:
      swift_bridgeObjectRelease_n(0xE100000000000000, 5);
      if ((v2 & 0x2000000000000000) != 0)
      {
LABEL_92:
        uint64_t v24 = v2;
      }
      else if ((v2 & 0x1000000000000000) != 0)
      {
        uint64_t v37 = _StringGuts._foreignConvertedToSmall()(v37, v2);
        uint64_t v24 = v99;
      }
      else
      {
        if ((v37 & 0x1000000000000000) != 0)
        {
          uint64_t v95 = (unsigned __int8 *)((v2 & 0xFFFFFFFFFFFFFFFLL) + 32);
        }
        else
        {
          uint64_t v95 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v37, v2);
          uint64_t v24 = v100;
        }
        swift_bridgeObjectRetain(v2);
        closure #1 in _StringGuts._convertedToSmall()(v95, v24, &v115);
        swift_bridgeObjectRelease(v2);
        uint64_t v24 = *((void *)&v115 + 1);
        uint64_t v37 = v115;
      }
      v83._Swift::UInt64 rawBits = 1;
      v84._Swift::UInt64 rawBits = 65537;
      v85._Swift::UInt64 rawBits = _StringGuts.validateScalarRange(_:)(v83, v84, 0x5DuLL, 0xE100000000000000);
      if (v85._rawBits < 0x10000) {
        v85._rawBits |= 3;
      }
      unint64_t v23 = specialized String.init(_:)(v85, v86, 0x5DuLL, 0xE100000000000000);
      uint64_t v78 = v87;
      swift_bridgeObjectRelease(0xE100000000000000);
      if ((v78 & 0x2000000000000000) != 0)
      {
        swift_bridgeObjectRelease(v78);
        goto LABEL_97;
      }
LABEL_107:
      uint64_t v92 = v37;
      if ((v78 & 0x1000000000000000) != 0)
      {
        unint64_t v23 = _StringGuts._foreignConvertedToSmall()(v23, v78);
        uint64_t v98 = v97;
        swift_bridgeObjectRelease(v78);
        uint64_t v78 = v98;
        uint64_t v37 = v92;
      }
      else
      {
        if ((v23 & 0x1000000000000000) != 0)
        {
          uint64_t v93 = (unsigned __int8 *)((v78 & 0xFFFFFFFFFFFFFFFLL) + 32);
          uint64_t v94 = v23 & 0xFFFFFFFFFFFFLL;
        }
        else
        {
          uint64_t v93 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v23, v78);
        }
        closure #1 in _StringGuts._convertedToSmall()(v93, v94, &v115);
        swift_bridgeObjectRelease(v78);
        uint64_t v78 = *((void *)&v115 + 1);
        unint64_t v23 = v115;
      }
LABEL_97:
      unint64_t v88 = specialized _SmallString.init(_:appending:)(v37, v24, v23, v78);
      if ((v89 & 1) == 0)
      {
        uint64_t v37 = v88;
        swift_bridgeObjectRelease(v2);
        swift_bridgeObjectRelease(0xE100000000000000);
        return v37;
      }
LABEL_115:
      unint64_t v96 = 266;
    }
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/StringGutsRangeReplaceable.swift", 38, 2, v96, 0);
  }
  if (v78 <= 15) {
    goto LABEL_91;
  }
LABEL_89:
  _StringGuts.prepareForAppendInPlace(totalCount:otherUTF8Count:)(v78, 1);
  swift_bridgeObjectRelease_n(0xE100000000000000, 6);
  long long v115 = xmmword_18162ACA0;
  uint64_t v81 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, 1, (uint64_t)&v115, 1);
  _StringGuts.appendInPlace(_:isASCII:)(v81, v82, 1);
  swift_bridgeObjectRelease(0xE100000000000000);
  return v116;
}

uint64_t Set.debugDescription.getter(int64_t a1, uint64_t a2)
{
  int64_t v2 = a1;
  uint64_t v180 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](a1);
  v185 = (char *)v178 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v181 = v4;
  uint64_t v7 = type metadata accessor for Optional(0, v4, v5, v6);
  MEMORY[0x1F4188790](v7 - 1);
  v186 = (char *)v178 - v8;
  unint64_t v194 = 0;
  unint64_t v195 = 0xE000000000000000;
  uint64_t v9 = specialized static String._createEmpty(withInitialCapacity:)(4);
  unint64_t v11 = v9;
  unint64_t v12 = v10;
  *(void *)&long long v193 = v9;
  *((void *)&v193 + 1) = v10;
  uint64_t v13 = HIBYTE(v10) & 0xF;
  int64_t v14 = v9 & 0xFFFFFFFFFFFFLL;
  if ((v10 & 0x2000000000000000) != 0) {
    uint64_t v15 = HIBYTE(v10) & 0xF;
  }
  else {
    uint64_t v15 = v9 & 0xFFFFFFFFFFFFLL;
  }
  if (!v15 && (v9 & ~v10 & 0x2000000000000000) == 0)
  {
    swift_bridgeObjectRelease(v10);
    unint64_t v11 = 0;
    unint64_t v34 = 0xE000000000000000;
    *(void *)&long long v193 = 0;
LABEL_21:
    *((void *)&v193 + 1) = v34;
    goto LABEL_25;
  }
  if ((v10 & 0x2000000000000000) != 0)
  {
    swift_bridgeObjectRelease(v10);
    swift_bridgeObjectRelease(0xE000000000000000);
    unint64_t v35 = 0xA000000000000000;
    if (!(v12 & 0x80808080808080 | v11 & 0x8080808080808080)) {
      unint64_t v35 = 0xE000000000000000;
    }
    unint64_t v34 = v35 & 0xFF00000000000000 | (v13 << 56) | v12 & 0xFFFFFFFFFFFFFFLL;
    *(void *)&long long v193 = v11;
    goto LABEL_21;
  }
  swift_bridgeObjectRetain_n(0xE000000000000000, 6);
  if ((v12 & 0x1000000000000000) != 0)
  {
    int64_t v14 = String.UTF8View._foreignCount()();
    if ((v11 & ~v12 & 0x2000000000000000) == 0) {
      goto LABEL_23;
    }
  }
  else if ((v11 & ~v12 & 0x2000000000000000) == 0)
  {
    goto LABEL_23;
  }
  if (swift_isUniquelyReferenced_nonNull_native(v12 & 0xFFFFFFFFFFFFFFFLL))
  {
    unint64_t v16 = _StringGuts.nativeUnusedCapacity.getter(v11, v12);
    if (v17) {
      goto LABEL_204;
    }
    if (v14 <= 15 && (v16 & 0x8000000000000000) != 0) {
      goto LABEL_13;
    }
    goto LABEL_24;
  }
LABEL_23:
  if (v14 <= 15)
  {
LABEL_13:
    swift_bridgeObjectRelease_n(0xE000000000000000, 5);
    swift_bridgeObjectRetain(v12);
    unint64_t v18 = _StringGuts._convertedToSmall()(v11, v12);
    unint64_t v20 = v19;
    swift_bridgeObjectRelease(v12);
    v21._Swift::UInt64 rawBits = 1;
    v22._Swift::UInt64 rawBits = 1;
    v23._Swift::UInt64 rawBits = _StringGuts.validateScalarRange(_:)(v21, v22, 0, 0xE000000000000000);
    if (v23._rawBits < 0x10000) {
      v23._rawBits |= 3;
    }
    unint64_t v25 = specialized String.init(_:)(v23, v24, 0, 0xE000000000000000);
    unint64_t v27 = v26;
    swift_bridgeObjectRelease(0xE000000000000000);
    unint64_t v28 = _StringGuts._convertedToSmall()(v25, v27);
    unint64_t v30 = v29;
    swift_bridgeObjectRelease(v27);
    unint64_t v31 = specialized _SmallString.init(_:appending:)(v18, v20, v28, v30);
    if (v33) {
      goto LABEL_203;
    }
    unint64_t v11 = v31;
    unint64_t v34 = v32;
    swift_bridgeObjectRelease(v12);
    swift_bridgeObjectRelease(0xE000000000000000);
    *(void *)&long long v193 = v11;
    goto LABEL_21;
  }
LABEL_24:
  _StringGuts.prepareForAppendInPlace(totalCount:otherUTF8Count:)(v14, 0);
  swift_bridgeObjectRelease_n(0xE000000000000000, 6);
  long long v191 = 0uLL;
  int64_t v36 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, 0, (uint64_t)&v191, 0);
  _StringGuts.appendInPlace(_:isASCII:)(v36, v37, 1);
  swift_bridgeObjectRelease(0xE000000000000000);
  unint64_t v34 = *((void *)&v193 + 1);
  unint64_t v11 = v193;
LABEL_25:
  uint64_t v38 = 131073;
  unint64_t v39 = HIBYTE(v34) & 0xF;
  if ((v34 & 0x2000000000000000) != 0) {
    uint64_t v40 = HIBYTE(v34) & 0xF;
  }
  else {
    uint64_t v40 = v11 & 0xFFFFFFFFFFFFLL;
  }
  if (v40 || (v11 & ~v34 & 0x2000000000000000) != 0)
  {
    if ((v34 & 0x2000000000000000) != 0 && v39 <= 0xC)
    {
      uint64_t v41 = 8 * HIBYTE(v34);
      uint64_t v42 = (-255 << (v41 & 0x38)) - 1;
      uint64_t v43 = 83 << (v41 & 0x38);
      char v44 = v39 + 1;
      if (v39 >= 8)
      {
        unint64_t v45 = v43 | v42 & v34;
      }
      else
      {
        unint64_t v11 = v43 | v42 & v11;
        if (v39 != 7)
        {
          unint64_t v11 = (101 << (8 * (v44 & 7u))) | ((-255 << (8 * (v44 & 7u))) - 1) & v11;
          if (v39 < 6)
          {
            unint64_t v11 = (116 << ((v41 + 16) & 0x38)) | ((-255 << ((v41 + 16) & 0x38)) - 1) & v11;
            uint64_t v72 = v34;
            goto LABEL_57;
          }
          char v71 = 8;
          uint64_t v70 = v34;
LABEL_56:
          uint64_t v72 = (116 << (8 * (v71 & 7u))) | ((-255 << (8 * (v71 & 7u))) - 1) & v70;
LABEL_57:
          swift_bridgeObjectRelease(v34);
          unint64_t v73 = 0xA000000000000000;
          if (!(v11 & 0x8080808080808080 | v72 & 0x80808080808080)) {
            unint64_t v73 = 0xE000000000000000;
          }
          unint64_t v67 = (v73 & 0xFF00000000000000 | (v39 << 56) | v72 & 0xFFFFFFFFFFFFFFLL) + 0x300000000000000;
          goto LABEL_62;
        }
        char v44 = 8;
        unint64_t v45 = v34;
      }
      uint64_t v70 = (101 << (8 * (v44 & 7u))) | ((-255 << (8 * (v44 & 7u))) - 1) & v45;
      char v71 = v39 + 2;
      goto LABEL_56;
    }
    swift_bridgeObjectRetain_n(0xE300000000000000, 6);
    if ((v34 & 0x1000000000000000) != 0) {
      goto LABEL_197;
    }
    int64_t v46 = v40 + 3;
    if (__OFADD__(v40, 3)) {
      goto LABEL_199;
    }
LABEL_37:
    if ((v11 & ~v34 & 0x2000000000000000) != 0
      && swift_isUniquelyReferenced_nonNull_native(v34 & 0xFFFFFFFFFFFFFFFLL))
    {
      int64_t v47 = _StringGuts.nativeUnusedCapacity.getter(v11, v34);
      if (v48) {
        goto LABEL_204;
      }
      BOOL v50 = (v34 & 0x2000000000000000) == 0 && v47 > 2;
      if (v46 <= 15 && !v50) {
        goto LABEL_48;
      }
    }
    else if (v46 <= 15)
    {
LABEL_48:
      swift_bridgeObjectRelease_n(0xE300000000000000, 5);
      swift_bridgeObjectRetain(v34);
      unint64_t v51 = _StringGuts._convertedToSmall()(v11, v34);
      unint64_t v53 = v52;
      swift_bridgeObjectRelease(v34);
      v54._Swift::UInt64 rawBits = v38 + 0x10000;
      v55._Swift::UInt64 rawBits = 1;
      v56._Swift::UInt64 rawBits = _StringGuts.validateScalarRange(_:)(v55, v54, 0x746553uLL, 0xE300000000000000);
      if (v56._rawBits < 0x10000) {
        v56._rawBits |= 3;
      }
      unint64_t v58 = specialized String.init(_:)(v56, v57, 0x746553uLL, 0xE300000000000000);
      unint64_t v60 = v59;
      swift_bridgeObjectRelease(0xE300000000000000);
      unint64_t v61 = _StringGuts._convertedToSmall()(v58, v60);
      unint64_t v63 = v62;
      swift_bridgeObjectRelease(v60);
      unint64_t v64 = specialized _SmallString.init(_:appending:)(v51, v53, v61, v63);
      if (v66) {
        goto LABEL_203;
      }
      unint64_t v11 = v64;
      unint64_t v67 = v65;
      goto LABEL_61;
    }
    _StringGuts.prepareForAppendInPlace(totalCount:otherUTF8Count:)(v46, 3);
    swift_bridgeObjectRelease_n(0xE300000000000000, 6);
    long long v191 = xmmword_18162ADF0;
    unint64_t v68 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, 3, (uint64_t)&v191, 3);
    _StringGuts.appendInPlace(_:isASCII:)(v68, v69, 1);
    unint64_t v67 = *((void *)&v193 + 1);
    unint64_t v11 = v193;
    goto LABEL_63;
  }
  unint64_t v11 = 7628115;
  unint64_t v67 = 0xE300000000000000;
  swift_bridgeObjectRetain(0xE300000000000000);
LABEL_61:
  swift_bridgeObjectRelease(v34);
LABEL_62:
  *(void *)&long long v193 = v11;
  *((void *)&v193 + 1) = v67;
LABEL_63:
  uint64_t v74 = HIBYTE(v67) & 0xF;
  if ((v67 & 0x2000000000000000) == 0) {
    uint64_t v74 = v11 & 0xFFFFFFFFFFFFLL;
  }
  if (v74 || (v11 & ~v67 & 0x2000000000000000) != 0)
  {
    if ((v67 & 0x2000000000000000) == 0
      || (unint64_t v75 = specialized _SmallString.init(_:appending:)(v11, v67, 0x5B28uLL, 0xE200000000000000), (v77 & 1) != 0))
    {
      swift_bridgeObjectRetain(0xE200000000000000);
      _StringGuts.append(_:)(23336, 0xE200000000000000, 0, 2);
      swift_bridgeObjectRelease_n(0xE200000000000000, 2);
      unint64_t v79 = *((void *)&v193 + 1);
      unint64_t v78 = v193;
    }
    else
    {
      unint64_t v78 = v75;
      unint64_t v79 = v76;
      swift_bridgeObjectRelease(v67);
      swift_bridgeObjectRelease(0xE200000000000000);
    }
  }
  else
  {
    swift_bridgeObjectRelease(v67);
    unint64_t v79 = 0xE200000000000000;
    unint64_t v78 = 23336;
  }
  uint64_t v80 = v195;
  unint64_t v81 = HIBYTE(v195) & 0xF;
  if ((v195 & 0x2000000000000000) == 0) {
    unint64_t v81 = v194 & 0xFFFFFFFFFFFFLL;
  }
  if (!v81 && (v194 & ~v195 & 0x2000000000000000) == 0)
  {
    swift_bridgeObjectRelease(v195);
    unint64_t v194 = v78;
    unint64_t v195 = v79;
    goto LABEL_84;
  }
  if ((v195 & 0x2000000000000000) == 0)
  {
    if ((v79 & 0x2000000000000000) != 0) {
      goto LABEL_82;
    }
LABEL_79:
    uint64_t v82 = v78 & 0xFFFFFFFFFFFFLL;
LABEL_83:
    swift_bridgeObjectRetain(v79);
    _StringGuts.append(_:)(v78, v79, 0, v82);
    swift_bridgeObjectRelease_n(v79, 2);
    goto LABEL_84;
  }
  if ((v79 & 0x2000000000000000) == 0) {
    goto LABEL_79;
  }
  unint64_t v83 = specialized _SmallString.init(_:appending:)(v194, v195, v78, v79);
  if (v85)
  {
LABEL_82:
    uint64_t v82 = HIBYTE(v79) & 0xF;
    goto LABEL_83;
  }
  unint64_t v86 = v83;
  unint64_t v87 = v84;
  swift_bridgeObjectRelease(v80);
  swift_bridgeObjectRelease(v79);
  unint64_t v194 = v86;
  unint64_t v195 = v87;
LABEL_84:
  uint64_t v88 = v180;
  unint64_t v89 = (unint64_t)v186;
  unint64_t v34 = (unint64_t)v185;
  if ((v2 & 0xC000000000000001) != 0)
  {
    if (v2 < 0) {
      uint64_t v90 = v2;
    }
    else {
      uint64_t v90 = v2 & 0xFFFFFFFFFFFFFF8;
    }
    Swift::Int v91 = (unint64_t *)type metadata accessor for __CocoaSet.Iterator();
    unint64_t v92 = (unint64_t)swift_allocObject(v91, 0xE8uLL, 7uLL);
    unint64_t v183 = 0;
    uint64_t v93 = 0;
    unint64_t v94 = 0;
    *(void *)(v92 + 208) = v90;
    *(void *)(v92 + 216) = 0;
    *(_OWORD *)(v92 + 16) = 0u;
    *(_OWORD *)(v92 + 32) = 0u;
    *(_OWORD *)(v92 + 48) = 0u;
    *(_OWORD *)(v92 + 64) = 0u;
    *(_OWORD *)(v92 + 80) = 0u;
    *(_OWORD *)(v92 + 96) = 0u;
    *(_OWORD *)(v92 + 112) = 0u;
    *(_OWORD *)(v92 + 128) = 0u;
    *(_OWORD *)(v92 + 144) = 0u;
    *(_OWORD *)(v92 + 160) = 0u;
    *(_OWORD *)(v92 + 176) = 0u;
    *(_OWORD *)(v92 + 192) = 0u;
    *(void *)(v92 + 224) = 0;
    unint64_t v11 = v92 | 0x8000000000000000;
  }
  else
  {
    uint64_t v95 = -1 << *(unsigned char *)(v2 + 32);
    uint64_t v93 = ~v95;
    uint64_t v96 = *(void *)(v2 + 56);
    unint64_t v183 = v2 + 56;
    uint64_t v97 = -v95;
    if (v97 < 64) {
      uint64_t v98 = ~(-1 << v97);
    }
    else {
      uint64_t v98 = -1;
    }
    unint64_t v94 = v98 & v96;
    unint64_t v11 = v2;
  }
  uint64_t v184 = v11 & 0x7FFFFFFFFFFFFFFFLL;
  uint64_t v38 = v88 + 56;
  v178[1] = v93;
  int64_t v182 = (unint64_t)(v93 + 64) >> 6;
  uint64_t v187 = v88 + 16;
  uint64_t v99 = (void (**)(unint64_t, unint64_t, int64_t))(v88 + 32);
  swift_bridgeObjectRetain(v2);
  int64_t v188 = 0;
  char v100 = 1;
  long long v189 = xmmword_18162AC80;
  long long v179 = xmmword_18162AC90;
  int64_t v2 = v181;
  unint64_t v190 = v11;
  while ((v11 & 0x8000000000000000) == 0)
  {
    if (v94)
    {
      unint64_t v106 = __clz(__rbit64(v94));
      v94 &= v94 - 1;
      unint64_t v107 = v106 | (v188 << 6);
    }
    else
    {
      int64_t v111 = v188 + 1;
      unint64_t v39 = v183;
      if (__OFADD__(v188, 1)) {
        goto LABEL_196;
      }
      if (v111 >= v182) {
        goto LABEL_156;
      }
      unint64_t v112 = *(void *)(v183 + 8 * v111);
      if (!v112)
      {
        int64_t v113 = v188 + 2;
        if (v188 + 2 >= v182) {
          goto LABEL_156;
        }
        unint64_t v112 = *(void *)(v183 + 8 * v113);
        if (!v112)
        {
          while (1)
          {
            int64_t v111 = v113 + 1;
            if (__OFADD__(v113, 1)) {
              break;
            }
            if (v111 >= v182) {
              goto LABEL_156;
            }
            unint64_t v112 = *(void *)(v183 + 8 * v111);
            ++v113;
            if (v112) {
              goto LABEL_111;
            }
          }
          __break(1u);
LABEL_196:
          __break(1u);
LABEL_197:
          Swift::Int v175 = String.UTF8View._foreignCount()();
          int64_t v46 = v175 + 3;
          if (!__OFADD__(v175, 3)) {
            goto LABEL_37;
          }
LABEL_199:
          __break(1u);
LABEL_200:
          Swift::Int v176 = String.UTF8View._foreignCount()();
          int64_t v152 = v176 + 2;
          if (!__OFADD__(v176, 2))
          {
LABEL_168:
            if ((v11 & ~v39 & 0x2000000000000000) == 0
              || !swift_isUniquelyReferenced_nonNull_native(v39 & 0xFFFFFFFFFFFFFFFLL))
            {
              if (v152 <= 15) {
                goto LABEL_179;
              }
              goto LABEL_184;
            }
            int64_t v153 = _StringGuts.nativeUnusedCapacity.getter(v11, v39);
            if ((v154 & 1) == 0)
            {
              BOOL v156 = (v39 & 0x2000000000000000) == 0 && v153 > 1;
              if (v152 <= 15 && !v156)
              {
LABEL_179:
                swift_bridgeObjectRelease_n(0xE200000000000000, 5);
                swift_bridgeObjectRetain(v39);
                unint64_t v157 = _StringGuts._convertedToSmall()(v11, v39);
                unint64_t v159 = v158;
                swift_bridgeObjectRelease(v39);
                v160._Swift::UInt64 rawBits = 1;
                v161._Swift::UInt64 rawBits = 131073;
                v162._Swift::UInt64 rawBits = _StringGuts.validateScalarRange(_:)(v160, v161, 0x295DuLL, 0xE200000000000000);
                if (v162._rawBits < 0x10000) {
                  v162._rawBits |= 3;
                }
                unint64_t v164 = specialized String.init(_:)(v162, v163, 0x295DuLL, 0xE200000000000000);
                unint64_t v166 = v165;
                swift_bridgeObjectRelease(0xE200000000000000);
                unint64_t v167 = _StringGuts._convertedToSmall()(v164, v166);
                unint64_t v169 = v168;
                swift_bridgeObjectRelease(v166);
                unint64_t v170 = specialized _SmallString.init(_:appending:)(v157, v159, v167, v169);
                if ((v171 & 1) == 0)
                {
                  unint64_t v11 = v170;
                  swift_bridgeObjectRelease(v39);
                  swift_bridgeObjectRelease(0xE300000000000000);
                  swift_bridgeObjectRelease(0xE200000000000000);
                  return v11;
                }
LABEL_203:
                unint64_t v177 = 266;
LABEL_205:
                _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/StringGutsRangeReplaceable.swift", 38, 2, v177, 0);
              }
LABEL_184:
              _StringGuts.prepareForAppendInPlace(totalCount:otherUTF8Count:)(v152, 2);
              swift_bridgeObjectRelease_n(0xE200000000000000, 6);
              long long v193 = xmmword_18162AD20;
              v172 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, 2, (uint64_t)&v193, 2);
              _StringGuts.appendInPlace(_:isASCII:)(v172, v173, 1);
              swift_bridgeObjectRelease(0xE300000000000000);
              swift_bridgeObjectRelease(0xE200000000000000);
              return v194;
            }
LABEL_204:
            unint64_t v177 = 258;
            goto LABEL_205;
          }
LABEL_202:
          __break(1u);
          goto LABEL_203;
        }
        int64_t v111 = v188 + 2;
      }
LABEL_111:
      unint64_t v94 = (v112 - 1) & v112;
      unint64_t v107 = __clz(__rbit64(v112)) + (v111 << 6);
      int64_t v188 = v111;
    }
    (*(void (**)(unint64_t, unint64_t, int64_t))(v88 + 16))(v89, *(void *)(v11 + 48) + *(void *)(v88 + 72) * v107, v2);
LABEL_113:
    (*(void (**)(unint64_t, void, uint64_t, int64_t))v38)(v89, 0, 1, v2);
    uint64_t v114 = *v99;
    (*v99)(v34, v89, v2);
    if ((v100 & 1) == 0)
    {
      uint64_t v115 = v194;
      unint64_t v11 = v195;
      unint64_t v89 = HIBYTE(v195) & 0xF;
      if ((v195 & 0x2000000000000000) != 0) {
        unint64_t v116 = HIBYTE(v195) & 0xF;
      }
      else {
        unint64_t v116 = v194 & 0xFFFFFFFFFFFFLL;
      }
      if (!v116 && (v194 & ~v195 & 0x2000000000000000) == 0)
      {
        swift_bridgeObjectRelease(v195);
        unint64_t v194 = 8236;
        unint64_t v147 = 0xE200000000000000;
        goto LABEL_150;
      }
      if ((v195 & 0x2000000000000000) != 0 && v89 <= 0xD)
      {
        unint64_t v117 = 8 * (HIBYTE(v195) & 7);
        uint64_t v118 = (-255 << v117) - 1;
        uint64_t v119 = 44 << v117;
        char v120 = v89 + 1;
        if (v89 >= 8)
        {
          uint64_t v121 = v119 | v118 & v195;
LABEL_144:
          uint64_t v146 = (32 << (8 * (v120 & 7u))) | ((-255 << (8 * (v120 & 7u))) - 1) & v121;
        }
        else
        {
          uint64_t v115 = v119 | v118 & v194;
          if (v89 == 7)
          {
            char v120 = 8;
            uint64_t v121 = v195;
            goto LABEL_144;
          }
          uint64_t v115 = (32 << (8 * (v120 & 7u))) | ((-255 << (8 * (v120 & 7u))) - 1) & v115;
          uint64_t v146 = v195;
        }
        swift_bridgeObjectRelease(v195);
        swift_bridgeObjectRelease(0xE200000000000000);
        unint64_t v148 = 0xE000000000000000;
        if (v115 & 0x8080808080808080 | v146 & 0x80808080808080) {
          unint64_t v148 = 0xA000000000000000;
        }
        unint64_t v147 = (v148 & 0xFF00000000000000 | (v89 << 56) | v146 & 0xFFFFFFFFFFFFFFLL) + 0x200000000000000;
        unint64_t v194 = v115;
LABEL_150:
        unint64_t v195 = v147;
LABEL_95:
        unint64_t v89 = (unint64_t)v186;
        unint64_t v34 = (unint64_t)v185;
        goto LABEL_96;
      }
      swift_bridgeObjectRetain_n(0xE200000000000000, 6);
      if ((v11 & 0x1000000000000000) != 0)
      {
        Swift::Int v149 = String.UTF8View._foreignCount()();
        int64_t v123 = v149 + 2;
        if (__OFADD__(v149, 2))
        {
LABEL_153:
          __break(1u);
          goto LABEL_156;
        }
      }
      else
      {
        BOOL v122 = __OFADD__(v116, 2);
        int64_t v123 = v116 + 2;
        if (v122) {
          goto LABEL_153;
        }
      }
      if ((v115 & ~v11 & 0x2000000000000000) != 0
        && swift_isUniquelyReferenced_nonNull_native(v11 & 0xFFFFFFFFFFFFFFFLL))
      {
        int64_t v124 = _StringGuts.nativeUnusedCapacity.getter(v115, v11);
        if (v125) {
          goto LABEL_204;
        }
        BOOL v127 = (v11 & 0x2000000000000000) == 0 && v124 > 1;
        if (v123 > 15 || v127) {
          goto LABEL_94;
        }
      }
      else if (v123 > 15)
      {
LABEL_94:
        _StringGuts.prepareForAppendInPlace(totalCount:otherUTF8Count:)(v123, 2);
        swift_bridgeObjectRelease_n(0xE200000000000000, 6);
        long long v193 = v179;
        uint64_t v101 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, 2, (uint64_t)&v193, 2);
        _StringGuts.appendInPlace(_:isASCII:)(v101, v102, 1);
        swift_bridgeObjectRelease(0xE200000000000000);
        goto LABEL_95;
      }
      swift_bridgeObjectRelease_n(0xE200000000000000, 5);
      swift_bridgeObjectRetain(v11);
      unint64_t v128 = _StringGuts._convertedToSmall()(v115, v11);
      unint64_t v130 = v129;
      swift_bridgeObjectRelease(v11);
      v131._Swift::UInt64 rawBits = 1;
      v132._Swift::UInt64 rawBits = 131073;
      v133._Swift::UInt64 rawBits = _StringGuts.validateScalarRange(_:)(v131, v132, 0x202CuLL, 0xE200000000000000);
      if (v133._rawBits < 0x10000) {
        v133._rawBits |= 3;
      }
      unint64_t v135 = specialized String.init(_:)(v133, v134, 0x202CuLL, 0xE200000000000000);
      unint64_t v137 = v136;
      swift_bridgeObjectRelease(0xE200000000000000);
      unint64_t v138 = _StringGuts._convertedToSmall()(v135, v137);
      unint64_t v140 = v139;
      swift_bridgeObjectRelease(v137);
      unint64_t v141 = specialized _SmallString.init(_:appending:)(v128, v130, v138, v140);
      if (v143) {
        goto LABEL_203;
      }
      unint64_t v144 = v141;
      unint64_t v145 = v142;
      swift_bridgeObjectRelease(v11);
      swift_bridgeObjectRelease(0xE200000000000000);
      unint64_t v194 = v144;
      unint64_t v195 = v145;
      int64_t v2 = v181;
      uint64_t v88 = v180;
      goto LABEL_95;
    }
LABEL_96:
    uint64_t v103 = canonical specialized generic type metadata accessor for _ContiguousArrayStorage<Any>();
    inited = swift_initStackObject(v103, v192);
    *((_OWORD *)inited + 1) = v189;
    inited[7] = v2;
    boxed_opaque_existential_0Tm = __swift_allocate_boxed_opaque_existential_0Tm(inited + 4);
    v114((unint64_t)boxed_opaque_existential_0Tm, v34, v2);
    specialized _debugPrint<A>(_:separator:terminator:to:)((uint64_t)inited, 0x20uLL, 0xE100000000000000, 0, 0xE000000000000000, (uint64_t *)&v194);
    swift_bridgeObjectRelease((uint64_t)inited);
    swift_bridgeObjectRelease(0xE000000000000000);
    swift_bridgeObjectRelease(0xE100000000000000);
    char v100 = 0;
    unint64_t v11 = v190;
  }
  id v108 = __CocoaSet.Iterator.next()();
  if (v108)
  {
    uint64_t v110 = v108;
    _forceBridgeFromObjectiveC<A>(_:_:)(v108, (char *)v2, v109, (char *)v89);
    swift_unknownObjectRelease(v110);
    goto LABEL_113;
  }
  unint64_t v11 = v190;
LABEL_156:
  (*(void (**)(unint64_t, uint64_t, uint64_t, int64_t))v38)(v89, 1, 1, v2);
  outlined consume of [A : B].Iterator._Variant<A, B>(v11);
  unint64_t v11 = v194;
  unint64_t v39 = v195;
  unint64_t v150 = HIBYTE(v195) & 0xF;
  if ((v195 & 0x2000000000000000) != 0) {
    unint64_t v151 = HIBYTE(v195) & 0xF;
  }
  else {
    unint64_t v151 = v194 & 0xFFFFFFFFFFFFLL;
  }
  if (!v151 && (v194 & ~v195 & 0x2000000000000000) == 0)
  {
    swift_bridgeObjectRelease(v195);
    swift_bridgeObjectRelease(0xE300000000000000);
    return 10589;
  }
  if ((v195 & 0x2000000000000000) == 0 || v150 > 0xD)
  {
    swift_bridgeObjectRetain_n(0xE200000000000000, 6);
    if ((v39 & 0x1000000000000000) != 0) {
      goto LABEL_200;
    }
    BOOL v122 = __OFADD__(v151, 2);
    int64_t v152 = v151 + 2;
    if (!v122) {
      goto LABEL_168;
    }
    goto LABEL_202;
  }
  if (v150 < 8)
  {
    unint64_t v11 = (93 << (8 * (HIBYTE(v195) & 7u))) | ((-255 << (8 * (HIBYTE(v195) & 7u))) - 1) & v194;
    if (v150 != 7) {
      unint64_t v11 = (41 << (8 * ((v150 + 1) & 7))) | ((-255 << (8 * ((v150 + 1) & 7))) - 1) & v11;
    }
  }
  swift_bridgeObjectRelease(v195);
  swift_bridgeObjectRelease(0xE300000000000000);
  swift_bridgeObjectRelease(0xE200000000000000);
  return v11;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Set<A>(uint64_t a1)
{
  return Set.description.getter(*v1, *(void *)(a1 + 16));
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Set<A>(uint64_t a1)
{
  return Set.debugDescription.getter(*v1, *(void *)(a1 + 16));
}

__objc2_class **Set._Variant.intersection(_:)(__objc2_class **a1, uint64_t a2, char *a3, uint64_t a4)
{
  uint64_t v79 = a4;
  uint64_t v7 = type metadata accessor for Optional(0, (uint64_t)a3, (uint64_t)a3, a4);
  uint64_t v8 = (uint64_t)*(v7 - 1);
  uint64_t v9 = MEMORY[0x1F4188790](v7);
  uint64_t v10 = MEMORY[0x1F4188790](v9);
  uint64_t v74 = *((void *)a3 - 1);
  uint64_t v11 = MEMORY[0x1F4188790](v10);
  uint64_t v13 = (char *)&v64 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = MEMORY[0x1F4188790](v11);
  unint64_t v83 = a1;
  unint64_t v84 = (char *)&v64 - v18;
  unint64_t v19 = (unint64_t)a1 & 0xC000000000000001;
  if ((a2 & 0xC000000000000001) == 0)
  {
    if (!v19)
    {
      uint64_t v62 = (uint64_t)v83;
      uint64_t v63 = v79;
      return _NativeSet.intersection(_:)(v62, a2, (uint64_t)a3, v63);
    }
    unint64_t v86 = v83;
    uint64_t v22 = v79;
    unint64_t v31 = (unint64_t *)type metadata accessor for Set(0, (uint64_t)a3, v79, v15);
    uint64_t WitnessTable = swift_getWitnessTable(protocol conformance descriptor for Set<A>, v31, v32);
    uint64_t v28 = a2;
    uint64_t v29 = (uint64_t)a3;
    uint64_t v30 = (uint64_t)v31;
    return _NativeSet.genericIntersection<A>(_:)((uint64_t)&v86, v28, v29, v30, v22, WitnessTable);
  }
  if (v19)
  {
    if (a2 < 0) {
      unint64_t v20 = (void *)a2;
    }
    else {
      unint64_t v20 = (void *)(a2 & 0xFFFFFFFFFFFFFF8);
    }
    id v21 = [v20 count];
    uint64_t v22 = v79;
    Swift::String::Index v23 = _NativeSet.init(_:capacity:)(v20, (uint64_t)v21, a3, v79);
    unint64_t v86 = v83;
    unint64_t v25 = (unint64_t *)type metadata accessor for Set(0, (uint64_t)a3, v22, v24);
    uint64_t WitnessTable = swift_getWitnessTable(protocol conformance descriptor for Set<A>, v25, v26);
    uint64_t v28 = (uint64_t)v23;
    uint64_t v29 = (uint64_t)a3;
    uint64_t v30 = (uint64_t)v25;
    return _NativeSet.genericIntersection<A>(_:)((uint64_t)&v86, v28, v29, v30, v22, WitnessTable);
  }
  size_t v69 = v17;
  uint64_t v70 = v16;
  uint64_t v71 = v14;
  unint64_t v86 = &_swiftEmptySetSingleton;
  if (a2 < 0) {
    uint64_t v34 = a2;
  }
  else {
    uint64_t v34 = a2 & 0xFFFFFFFFFFFFFF8;
  }
  unint64_t v35 = (unint64_t *)type metadata accessor for __CocoaSet.Iterator();
  int64_t v36 = swift_allocObject(v35, 0xE8uLL, 7uLL);
  uint64_t v37 = 0;
  *((_OWORD *)v36 + 1) = 0u;
  unint64_t v73 = v36 + 2;
  *((_OWORD *)v36 + 5) = 0u;
  uint64_t v72 = v36 + 10;
  v36[27] = 0;
  uint64_t v38 = v36 + 27;
  *((_OWORD *)v36 + 2) = 0u;
  *((_OWORD *)v36 + 3) = 0u;
  *((_OWORD *)v36 + 4) = 0u;
  *((_OWORD *)v36 + 6) = 0u;
  *((_OWORD *)v36 + 7) = 0u;
  uint64_t v39 = v74;
  *((_OWORD *)v36 + 8) = 0u;
  *((_OWORD *)v36 + 9) = 0u;
  unint64_t v67 = (void (**)(uint64_t, void *, uint64_t))(v8 + 16);
  unint64_t v68 = (void (**)(void *, uint64_t, uint64_t, char *))(v39 + 56);
  char v66 = (unsigned int (**)(uint64_t, uint64_t, char *))(v39 + 48);
  unint64_t v65 = (void (**)(void *, uint64_t))(v8 + 8);
  unint64_t v64 = (void (**)(char *, uint64_t, char *))(v39 + 32);
  *((_OWORD *)v36 + 10) = 0u;
  *((_OWORD *)v36 + 11) = 0u;
  uint64_t v75 = v79 + 32;
  uint64_t v40 = v83 + 7;
  *((_OWORD *)v36 + 12) = 0u;
  uint64_t v80 = v39 + 16;
  unint64_t v81 = v40;
  uint64_t v82 = (void (**)(char *, char *))(v39 + 8);
  v36[26] = v34;
  unint64_t v76 = qword_1ECA06328;
  char v77 = v36 + 27;
  v36[28] = 0;
  unint64_t v78 = v36;
  while (v37 != v36[28])
  {
LABEL_18:
    uint64_t v42 = v36[3];
    if (!v42) {
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/SetBridging.swift", 23, 2, 0x254uLL, 0);
    }
    if ((unint64_t)(v37 - 0x1000000000000000) >> 61 != 7)
    {
      __break(1u);
LABEL_42:
      _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "load from misaligned raw pointer", 32, 2, "Swift/UnsafeRawPointer.swift", 28, 2, 0x4F9uLL, 0);
    }
    uint64_t v43 = (void **)(v42 + 8 * v37);
    if ((v43 & 7) != 0) {
      goto LABEL_42;
    }
    char v44 = *v43;
    uint64_t *v38 = v37 + 1;
    swift_unknownObjectRetain(v44);
    if (_swift_isClassOrObjCExistentialType((uint64_t)a3, (uint64_t *)a3))
    {
      char v85 = v44;
      swift_dynamicCast(v84, (unint64_t *)&v85, v76, a3, 7uLL);
    }
    else
    {
      unint64_t v59 = v69;
      (*v68)(v69, 1, 1, a3);
      _bridgeNonVerbatimFromObjectiveC<A>(_:_:_:)((swift *)v44, (uint64_t)a3, v59);
      swift_unknownObjectRelease(v44);
      uint64_t v61 = v70;
      uint64_t v60 = v71;
      (*v67)(v70, v59, v71);
      if ((*v66)(v61, 1, a3) == 1) {
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/BridgeObjectiveC.swift", 28, 2, 0xFCuLL, 0);
      }
      (*v65)(v59, v60);
      (*v64)(v84, v61, a3);
    }
    if (v83[2]
      && (unint64_t v45 = v83,
          uint64_t v46 = (*(uint64_t (**)(__objc2_class *, char *))(v79 + 32))(v83[5], a3),
          uint64_t v47 = -1 << *((unsigned char *)v45 + 32),
          unint64_t v48 = v46 & ~v47,
          ((*(void *)((char *)v81 + ((v48 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v48) & 1) != 0))
    {
      uint64_t v49 = ~v47;
      uint64_t v50 = *(void *)(v79 + 8);
      unint64_t v51 = *(uint64_t (**)(char *, char *, char *, uint64_t))(v50 + 8);
      uint64_t v52 = *(void *)(v74 + 72);
      unint64_t v53 = *(void (**)(char *, char *, char *))(v74 + 16);
      while (1)
      {
        v53(v13, (char *)v83[6] + v52 * v48, a3);
        char v54 = v51(v13, v84, a3, v50);
        (*v82)(v13, a3);
        if (v54) {
          break;
        }
        unint64_t v48 = (v48 + 1) & v49;
        if (((*(void *)((char *)v81 + ((v48 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v48) & 1) == 0) {
          goto LABEL_14;
        }
      }
      uint64_t v56 = (uint64_t)v86;
      Swift::String::Index v57 = v86[2];
      uint64_t v38 = v77;
      int64_t v36 = v78;
      if (v86[3] <= v57)
      {
        Swift::Int v58 = (Swift::Int)&v57->isa + 1;
        type metadata accessor for _NativeSet(0, (uint64_t)a3, v79, v55);
        _NativeSet.resize(capacity:)(v58);
        uint64_t v56 = (uint64_t)v86;
      }
      _NativeSet._unsafeInsertNew(_:)((uint64_t)v84, v56, (uint64_t)a3, v79);
      uint64_t v37 = *v38;
      if (*v38 < 0) {
        goto LABEL_39;
      }
    }
    else
    {
LABEL_14:
      (*v82)(v84, a3);
      uint64_t v38 = v77;
      int64_t v36 = v78;
      uint64_t v37 = *v77;
      if (*v77 < 0) {
        goto LABEL_39;
      }
    }
  }
  id v41 = [v36[26] countByEnumeratingWithState:v73 objects:v72 count:16];
  v36[28] = v41;
  if (v41)
  {
    uint64_t v37 = 0;
    uint64_t *v38 = 0;
    goto LABEL_18;
  }
  uint64_t *v38 = -1;
LABEL_39:
  swift_release((uint64_t)v36);
  return v86;
}

unint64_t Set.Index._variant.getter(unint64_t a1, uint64_t a2, char a3)
{
  return a1;
}

uint64_t Set.Index._variant.setter(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  return Dictionary.Index._variant.setter(a1, a2, a3, a4, (uint64_t (*)(void, void, void))outlined consume of Set<A>.Index._Variant<A>);
}

uint64_t Dictionary.Index._variant.setter(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t (*a5)(void, void, void))
{
  uint64_t result = a5(*(void *)v5, *(void *)(v5 + 8), *(unsigned __int8 *)(v5 + 16));
  *(void *)uint64_t v5 = a1;
  *(void *)(v5 + 8) = a2;
  *(unsigned char *)(v5 + 16) = a3 & 1;
  return result;
}

uint64_t (*Set.Index._variant.modify())()
{
  return EnumeratedSequence._base.modify;
}

uint64_t Set.Index._guaranteedNative.getter()
{
  return 0;
}

Swift::Bool __swiftcall Set.Index._isUniquelyReferenced()()
{
  if ((*(unsigned char *)(v0 + 16) & 1) == 0) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Attempting to access Set elements using an invalid index", 56, 2, "Swift/Set.swift", 15, 2, 0x567uLL, 0);
  }
  uint64_t v2 = *(void *)v0;
  uint64_t v1 = *(void *)(v0 + 8);
  if (*(uint64_t *)v0 >= 0) {
    uint64_t v3 = *(void *)v0 & 0xFFFFFFFFFFFFFF8;
  }
  else {
    uint64_t v3 = *(void *)v0;
  }
  uint64_t v4 = type metadata accessor for __CocoaSet.Index.Storage();
  swift_bridgeObjectRetain(v2);
  if (!swift_dynamicCastClass(v3, v4)) {
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "invalid unsafeDowncast", 22, 2, "Swift/Builtin.swift", 19, 2, 0x10DuLL, 0);
  }
  Swift::Bool v5 = 1;
  outlined consume of [A : B].Index._Variant<A, B>(v2, v1, 1);
  if (v3) {
    return swift_isUniquelyReferenced_nonNull_native(v3);
  }
  return v5;
}

uint64_t __CocoaSet.Index.handleBitPattern.getter(uint64_t a1, uint64_t a2)
{
  return __CocoaDictionary.Index.handleBitPattern.getter(a1, a2, type metadata accessor for __CocoaSet.Index.Storage);
}

uint64_t __CocoaDictionary.Index.handleBitPattern.getter(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  if (a1 < 0) {
    uint64_t v3 = a1;
  }
  else {
    uint64_t v3 = a1 & 0xFFFFFFFFFFFFFF8;
  }
  uint64_t v4 = a3();
  if (!swift_dynamicCastClass(v3, v4)) {
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "invalid unsafeDowncast", 22, 2, "Swift/Builtin.swift", 19, 2, 0x10DuLL, 0);
  }
  return v3;
}

unint64_t key path getter for Set.Index._asCocoa : <A>Set<A>.Index@<X0>(uint64_t a1@<X0>, unint64_t *a2@<X8>)
{
  if ((*(unsigned char *)(a1 + 16) & 1) == 0) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Attempting to access Set elements using an invalid index", 56, 2, "Swift/Set.swift", 15, 2, 0x567uLL, 0);
  }
  unint64_t v2 = *(void *)a1;
  unint64_t v3 = *(void *)(a1 + 8);
  *a2 = v2;
  a2[1] = v3;

  return swift_bridgeObjectRetain(v2);
}

uint64_t key path setter for Set.Index._asCocoa : <A>Set<A>.Index(unint64_t *a1)
{
  unint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  swift_bridgeObjectRetain(*a1);
  unint64_t v3 = Set.Index._asCocoa.modify(v7);
  uint64_t v5 = *v4;
  *uint64_t v4 = v1;
  v4[1] = v2;
  swift_bridgeObjectRelease(v5);
  return ((uint64_t (*)(void *, void))v3)(v7, 0);
}

uint64_t (*Set.Index._asCocoa.modify(void *a1))(void)
{
  a1[2] = v1;
  if (*(unsigned char *)(v1 + 16) != 1) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Attempting to access Set elements using an invalid index", 56, 2, "Swift/Set.swift", 15, 2, 0x56FuLL, 0);
  }
  uint64_t v2 = *(void *)(v1 + 8);
  *a1 = *(void *)v1;
  a1[1] = v2;
  *(unsigned char *)(v1 + 16) = 0;
  *(void *)uint64_t v1 = 0;
  *(void *)(v1 + 8) = 0;
  return Set.Index._asCocoa.modify;
}

void *Dictionary.Index._asCocoa.modify(void *result)
{
  uint64_t v2 = result[1];
  uint64_t v1 = result[2];
  *(void *)uint64_t v1 = *result;
  *(void *)(v1 + 8) = v2;
  *(unsigned char *)(v1 + 16) = 1;
  return result;
}

void Set.Index._asCocoa.setter(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(v2 + 16) != 1) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Attempting to access Set elements using an invalid index", 56, 2, "Swift/Set.swift", 15, 2, 0x56FuLL, 0);
  }
  outlined consume of [A : B].Index._Variant<A, B>(*(void *)v2, *(void *)(v2 + 8), 1);
  *(void *)uint64_t v2 = a1;
  *(void *)(v2 + 8) = a2;
  *(unsigned char *)(v2 + 16) = 1;
}

BOOL static Set.Index.== infix(_:_:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, char a6)
{
  uint64_t v7 = a4;
  if ((a3 & 1) == 0)
  {
    if ((a6 & 1) == 0)
    {
      if (a2 != a5) {
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't compare indices belonging to different collections", 56, 2, "Swift/HashTable.swift", 21, 2, 0xD5uLL, 0);
      }
      return a1 == a4;
    }
LABEL_20:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Comparing indexes from different sets", 37, 2, "Swift/Set.swift", 15, 2, 0x589uLL, 0);
  }
  if ((a6 & 1) == 0) {
    goto LABEL_20;
  }
  if (a1 >= 0) {
    uint64_t v10 = a1 & 0xFFFFFFFFFFFFFF8;
  }
  else {
    uint64_t v10 = a1;
  }
  uint64_t v11 = type metadata accessor for __CocoaSet.Index.Storage();
  if (!swift_dynamicCastClass(v10, v11)) {
    goto LABEL_21;
  }
  if (v7 >= 0) {
    v7 &= 0xFFFFFFFFFFFFFF8uLL;
  }
  if (!swift_dynamicCastClass(v7, v11)) {
LABEL_21:
  }
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "invalid unsafeDowncast", 22, 2, "Swift/Builtin.swift", 19, 2, 0x10DuLL, 0);
  if (*(void *)(v10 + 16) != *(void *)(v7 + 16)) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Comparing indexes from different sets", 37, 2, "Swift/SetBridging.swift", 23, 2, 0x1F5uLL, 0);
  }
  return a2 == a5;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Set<A>.Index(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static Equatable.== infix(_:_:) in conformance Set<A>.Index(a1, a2, a3, a4, (uint64_t (*)(void, void, void, void, void, void))static Set.Index.== infix(_:_:));
}

BOOL static Set.Index.< infix(_:_:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, char a6)
{
  uint64_t v7 = a4;
  if ((a3 & 1) == 0)
  {
    if ((a6 & 1) == 0)
    {
      if (a2 != a5) {
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't compare indices belonging to different collections", 56, 2, "Swift/HashTable.swift", 21, 2, 0xE2uLL, 0);
      }
      return a1 < a4;
    }
LABEL_20:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Comparing indexes from different sets", 37, 2, "Swift/Set.swift", 15, 2, 0x59DuLL, 0);
  }
  if ((a6 & 1) == 0) {
    goto LABEL_20;
  }
  if (a1 >= 0) {
    uint64_t v10 = a1 & 0xFFFFFFFFFFFFFF8;
  }
  else {
    uint64_t v10 = a1;
  }
  uint64_t v11 = type metadata accessor for __CocoaSet.Index.Storage();
  if (!swift_dynamicCastClass(v10, v11)) {
    goto LABEL_21;
  }
  if (v7 >= 0) {
    v7 &= 0xFFFFFFFFFFFFFF8uLL;
  }
  if (!swift_dynamicCastClass(v7, v11)) {
LABEL_21:
  }
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "invalid unsafeDowncast", 22, 2, "Swift/Builtin.swift", 19, 2, 0x10DuLL, 0);
  if (*(void *)(v10 + 16) != *(void *)(v7 + 16)) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Comparing indexes from different sets", 37, 2, "Swift/SetBridging.swift", 23, 2, 0x1FFuLL, 0);
  }
  return a2 < a5;
}

uint64_t protocol witness for static Comparable.< infix(_:_:) in conformance Set<A>.Index(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static Equatable.== infix(_:_:) in conformance Set<A>.Index(a1, a2, a3, a4, (uint64_t (*)(void, void, void, void, void, void))static Set.Index.< infix(_:_:));
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Set<A>.Index(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, void, void, void, void, void))
{
  return a5(*(void *)a1, *(void *)(a1 + 8), *(unsigned __int8 *)(a1 + 16), *(void *)a2, *(void *)(a2 + 8), *(unsigned __int8 *)(a2 + 16));
}

void Set.Index.hash(into:)(uint64_t a1, Swift::UInt a2, Swift::UInt a3, char a4)
{
  if (a4) {
    a2 = a3;
  }
  Hasher._combine(_:)(a4 & 1);
  Hasher._combine(_:)(a2);
}

Swift::Int Set.Index.hashValue.getter(Swift::UInt a1, Swift::UInt a2, char a3)
{
  if (a3) {
    a1 = a2;
  }
  Hasher._combine(_:)(a3 & 1);
  Hasher._combine(_:)(a1);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Set<A>.Index()
{
  return Set.Index.hashValue.getter(*(void *)v0, *(void *)(v0 + 8), *(unsigned char *)(v0 + 16));
}

void protocol witness for Hashable.hash(into:) in conformance Set<A>.Index(uint64_t a1)
{
  Set.Index.hash(into:)(a1, *(void *)v1, *(void *)(v1 + 8), *(unsigned char *)(v1 + 16));
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Set<A>.Index(uint64_t a1)
{
  v3[0] = 0;
  v3[1] = _swift_stdlib_Hashing_parameters ^ a1 ^ 0x736F6D6570736575;
  v3[2] = unk_1EB208F00 ^ 0x646F72616E646F6DLL;
  v3[3] = _swift_stdlib_Hashing_parameters ^ a1 ^ 0x6C7967656E657261;
  v3[4] = unk_1EB208F00 ^ 0x7465646279746573;
  long long v4 = 0u;
  long long v5 = 0u;
  Set.Index.hash(into:)((uint64_t)v3, *(void *)v1, *(void *)(v1 + 8), *(unsigned char *)(v1 + 16));
  return Hasher._finalize()();
}

uint64_t Set.Iterator._variant.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  long long v5 = type metadata accessor for Set.Iterator._Variant(0, *(void *)(a1 + 16), *(void *)(a1 + 24), a2);
  uint64_t v6 = (uint64_t (*)(uint64_t, uint64_t, Class *))*((void *)*(v5 - 1) + 2);

  return v6(a3, v3, v5);
}

__n128 Set.Iterator._variant.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = type metadata accessor for Set.Iterator._Variant(0, *(void *)(a2 + 16), *(void *)(a2 + 24), a4);
  (*((void (**)(_OWORD *, uint64_t, Class *))*(v6 - 1) + 4))(v11, a1, v6);
  __n128 v9 = (__n128)v11[1];
  __n128 v10 = (__n128)v11[0];
  unint64_t v7 = v12;
  outlined consume of [A : B].Iterator._Variant<A, B>(v4->n128_u64[0]);
  __n128 result = v9;
  *long long v4 = v10;
  v4[1] = v9;
  v4[2].n128_u64[0] = v7;
  return result;
}

uint64_t (*Set.Iterator._variant.modify())()
{
  return EnumeratedSequence._base.modify;
}

double Set.Iterator.init(_variant:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  unint64_t v7 = type metadata accessor for Set.Iterator._Variant(0, a2, a3, a4);
  (*((void (**)(_OWORD *, uint64_t, Class *))*(v7 - 1) + 4))(v11, a1, v7);
  uint64_t v8 = v12;
  double result = *(double *)v11;
  long long v10 = v11[1];
  *(_OWORD *)a5 = v11[0];
  *(_OWORD *)(a5 + 16) = v10;
  *(void *)(a5 + 32) = v8;
  return result;
}

__n128 Set.Iterator.init(_native:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *(void *)(a1 + 32);
  __n128 result = *(__n128 *)a1;
  long long v4 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_OWORD *)(a2 + 16) = v4;
  *(void *)(a2 + 32) = v2;
  return result;
}

double Set.Iterator.init(_cocoa:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = a1 | 0x8000000000000000;
  double result = 0.0;
  *(_OWORD *)(a2 + 8) = 0u;
  *(_OWORD *)(a2 + 24) = 0u;
  return result;
}

uint64_t Set.Iterator._guaranteedNative.getter()
{
  return 0;
}

BOOL Set.Iterator._isNative.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  long long v5 = type metadata accessor for Set.Iterator._Variant(0, *(void *)(a1 + 16), *(void *)(a1 + 24), a4);
  uint64_t v6 = (void (*)(unsigned char *, uint64_t, Class *))*((void *)*(v5 - 1) + 4);
  v6(v8, v4, v5);
  v6(v9, (uint64_t)v8, v5);
  return v9[0] >= 0;
}

atomic_ullong *Dictionary.Iterator._asNative.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *((void *)v1 + 4);
  long long v3 = *v1;
  long long v4 = v1[1];
  *(_OWORD *)a1 = *v1;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = v2;
  return swift_retain((atomic_ullong *)v3);
}

double Set.Iterator._asNative.setter(__n128 *a1, uint64_t a2)
{
  *(void *)&double result = Dictionary.Iterator._asNative.setter(a1, a2, (void (*)(unint64_t, unint64_t, unint64_t, unint64_t, unint64_t))outlined consume of Set<String>.Iterator._Variant).n128_u64[0];
  return result;
}

__n128 Dictionary.Iterator._asNative.setter(__n128 *a1, uint64_t a2, void (*a3)(unint64_t, unint64_t, unint64_t, unint64_t, unint64_t))
{
  __n128 v6 = a1[1];
  __n128 v7 = *a1;
  unint64_t v4 = a1[2].n128_u64[0];
  a3(v3->n128_u64[0], v3->n128_u64[1], v3[1].n128_u64[0], v3[1].n128_u64[1], v3[2].n128_u64[0]);
  __n128 result = v6;
  *long long v3 = v7;
  v3[1] = v6;
  v3[2].n128_u64[0] = v4;
  return result;
}

void (*Set.Iterator._asNative.modify(void *a1))(atomic_ullong ***a1, char a2)
{
  long long v3 = malloc(0x30uLL);
  *a1 = v3;
  uint64_t v4 = *((void *)v1 + 4);
  long long v5 = *v1;
  long long v6 = v1[1];
  *long long v3 = *v1;
  v3[1] = v6;
  *((void *)v3 + 4) = v4;
  *((void *)v3 + 5) = v1;
  swift_retain((atomic_ullong *)v5);
  return Set.Iterator._asNative.modify;
}

void Set.Iterator._asNative.modify(atomic_ullong ***a1, char a2)
{
}

void Dictionary.Iterator._asNative.modify(atomic_ullong ***a1, char a2, void (*a3)(atomic_ullong *, atomic_ullong *, atomic_ullong *, atomic_ullong *, atomic_ullong *))
{
  long long v3 = (uint64_t *)*a1;
  long long v5 = **a1;
  uint64_t v4 = (*a1)[1];
  long long v6 = (*a1)[2];
  __n128 v7 = (atomic_ullong **)(*a1)[5];
  uint64_t v14 = (*a1)[3];
  uint64_t v15 = (*a1)[4];
  uint64_t v8 = *v7;
  __n128 v9 = v7[1];
  long long v10 = v7[2];
  uint64_t v11 = v7[3];
  uint64_t v12 = v7[4];
  if (a2)
  {
    swift_retain(v5);
    a3(v8, v9, v10, v11, v12);
    *__n128 v7 = v5;
    v7[1] = v4;
    v7[2] = v6;
    v7[3] = v14;
    void v7[4] = v15;
    swift_release(*v3);
  }
  else
  {
    a3(*v7, v7[1], v7[2], v7[3], v7[4]);
    *__n128 v7 = v5;
    v7[1] = v4;
    v7[2] = v6;
    v7[3] = v14;
    void v7[4] = v15;
  }

  free(v3);
}

uint64_t protocol witness for IteratorProtocol.next() in conformance Set<A>.Iterator@<X0>(uint64_t result@<X0>, char *a2@<X8>)
{
  uint64_t v4 = *v2;
  if (*v2 < 0)
  {
    uint64_t v14 = *(char **)(result + 16);
    id v15 = __CocoaSet.Iterator.next()();
    if (v15)
    {
      char v17 = v15;
      _forceBridgeFromObjectiveC<A>(_:_:)(v15, v14, v16, a2);
      swift_unknownObjectRelease(v17);
      uint64_t v18 = *(uint64_t (**)(char *, uint64_t, uint64_t, char *))(*((void *)v14 - 1) + 56);
      unint64_t v19 = a2;
      uint64_t v20 = 0;
    }
    else
    {
      uint64_t v18 = *(uint64_t (**)(char *, uint64_t, uint64_t, char *))(*((void *)v14 - 1) + 56);
      unint64_t v19 = a2;
      uint64_t v20 = 1;
    }
    return v18(v19, v20, 1, v14);
  }
  else
  {
    uint64_t v5 = v2[1];
    uint64_t v6 = v2[2];
    int64_t v8 = v2[3];
    unint64_t v7 = v2[4];
    if (v7)
    {
      uint64_t v9 = (v7 - 1) & v7;
      unint64_t v10 = __clz(__rbit64(v7)) | (v8 << 6);
LABEL_4:
      uint64_t v11 = *(void *)(result + 16);
      uint64_t v12 = *(void *)(v11 - 8);
      (*(void (**)(char *, unint64_t, uint64_t))(v12 + 16))(a2, *(void *)(v4 + 48) + *(void *)(v12 + 72) * v10, v11);
      __n128 result = (*(uint64_t (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(a2, 0, 1, v11);
      int64_t v13 = v8;
LABEL_22:
      uint64_t *v2 = v4;
      v2[1] = v5;
      v2[2] = v6;
      v2[3] = v13;
      v2[4] = v9;
      return result;
    }
    int64_t v21 = v8 + 1;
    if (!__OFADD__(v8, 1))
    {
      int64_t v22 = (unint64_t)(v6 + 64) >> 6;
      int64_t v13 = v2[3];
      if (v21 < v22)
      {
        unint64_t v23 = *(void *)(v5 + 8 * v21);
        if (v23)
        {
LABEL_10:
          uint64_t v9 = (v23 - 1) & v23;
          unint64_t v10 = __clz(__rbit64(v23)) + (v21 << 6);
          int64_t v8 = v21;
          goto LABEL_4;
        }
        int64_t v13 = v8 + 1;
        if (v8 + 2 < v22)
        {
          unint64_t v23 = *(void *)(v5 + 8 * (v8 + 2));
          int64_t v21 = v8 + 2;
          if (v23) {
            goto LABEL_10;
          }
          int64_t v13 = v22 - 1;
          int64_t v24 = v8 + 3;
          while (v22 != v24)
          {
            unint64_t v23 = *(void *)(v5 + 8 * v24++);
            if (v23)
            {
              int64_t v21 = v24 - 1;
              goto LABEL_10;
            }
          }
        }
      }
      __n128 result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(*(void *)(result + 16) - 8) + 56))(a2, 1, 1);
      uint64_t v9 = 0;
      goto LABEL_22;
    }
    __break(1u);
  }
  return result;
}

uint64_t Set.Iterator.customMirror.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  long long v6 = *(_OWORD *)(v3 + 16);
  v9[0] = *(_OWORD *)v3;
  v9[1] = v6;
  uint64_t v10 = *(void *)(v3 + 32);
  unint64_t v7 = type metadata accessor for Set.Iterator._Variant(0, *(void *)(a1 + 16), *(void *)(a1 + 24), a2);
  (*((void (**)(void *, uint64_t, Class *))*(v7 - 1) + 4))(v11, v3, v7);
  outlined retain of [A : B].Iterator._Variant(v11, (void (*)(void, void, void, void, void))outlined copy of Set<A>.Iterator._Variant<A>);
  return specialized Mirror.init<A, B>(_:children:displayStyle:ancestorRepresentation:)((uint64_t)v9, 8, 0, 0, (Class *)a1, a3);
}

uint64_t protocol witness for CustomReflectable.customMirror.getter in conformance Set<A>.Iterator@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  return Set.Iterator.customMirror.getter(a1, a2, a3);
}

unint64_t *Set.customMirror.getter@<X0>(int64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  unint64_t v56 = a1;
  uint64_t v9 = type metadata accessor for Set(0, a2, a3, a4);
  v53[0] = 0;
  v53[1] = 0;
  swift_bridgeObjectRetain(a1);
  uint64_t v10 = static Mirror._superclassIterator<A>(_:_:)((uint64_t)&v56, (uint64_t)v53, (swift *)v9);
  uint64_t v12 = v11;
  int64_t v13 = swift_allocObject(qword_1EC9F2AF0, 0x28uLL, 7uLL);
  v13[2] = v9;
  v13[3] = v9;
  uint64_t WitnessTable = swift_getWitnessTable(protocol conformance descriptor for Set<A>, (unint64_t *)v9, v14);
  v13[4] = WitnessTable;
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for (label: String?, value: Any));
  uint64_t v18 = swift_getWitnessTable(protocol conformance descriptor for Set<A>, (unint64_t *)v9, v17);
  unint64_t v19 = (unint64_t *)type metadata accessor for LazyMapSequence(255, (uint64_t)v9, v16, v18);
  uint64_t v55 = WitnessTable;
  uint64_t v20 = swift_getWitnessTable(protocol conformance descriptor for <> LazyMapSequence<A, B>, v19, (uint64_t)&v55);
  int64_t v22 = (unint64_t *)type metadata accessor for _CollectionBox(0, (uint64_t)v19, v20, v21);
  int64_t v24 = swift_allocObject(v22, 0x48uLL, 7uLL);
  v24[6] = a1;
  v24[7] = closure #1 in Mirror.init<A, B>(_:unlabeledChildren:displayStyle:ancestorRepresentation:)partial apply;
  v24[8] = v13;
  unint64_t v51 = v10;
  unint64_t v52 = a1 & 0xC000000000000001;
  uint64_t v50 = v12;
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (a1 < 0) {
      unint64_t v25 = (void *)a1;
    }
    else {
      unint64_t v25 = (void *)(a1 & 0xFFFFFFFFFFFFFF8);
    }
    swift_bridgeObjectRetain(a1);
    unint64_t v26 = (unint64_t)[v25 count];
    __n128 result = (unint64_t *)type metadata accessor for __BridgingBufferStorage(0);
    if ((v26 - 0x1000000000000000) >> 61 == 7)
    {
      if (!__OFADD__(8 * v26, 24))
      {
        uint64_t v28 = swift_bufferAllocate(result, 8 * v26 + 24, 7uLL);
        v28[2] = v26;
        [v25 sel_getObjects_:v28 + 3];
        uint64_t v29 = (unint64_t *)type metadata accessor for __CocoaSet.Index.Storage();
        uint64_t v30 = swift_allocObject(v29, 0x20uLL, 7uLL);
        uint64_t v31 = 0;
        v30[2] = v25;
        v30[3] = v28;
        goto LABEL_15;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  unint64_t v32 = *(void *)(a1 + 56);
  if (v32)
  {
    uint64_t v33 = 0;
LABEL_13:
    uint64_t v30 = (void *)(__clz(__rbit64(v32)) + v33);
  }
  else
  {
    uint64_t v33 = 0;
    uint64_t v30 = (void *)(1 << *(unsigned char *)(a1 + 32));
    unint64_t v34 = (((unint64_t)v30 + 63) >> 6) - 1;
    unint64_t v35 = (unint64_t *)(a1 + 64);
    while (v34)
    {
      unint64_t v36 = *v35++;
      unint64_t v32 = v36;
      --v34;
      v33 += 64;
      if (v36) {
        goto LABEL_13;
      }
    }
  }
  uint64_t v31 = *(unsigned int *)(a1 + 36);
LABEL_15:
  uint64_t v37 = type metadata accessor for Set.Index(255, a2, a3, v23);
  uint64_t v39 = (unint64_t *)type metadata accessor for _IndexBox(0, (uint64_t)v37, (uint64_t)&protocol witness table for Set<A>.Index, v38);
  uint64_t v40 = swift_allocObject(v39, 0x21uLL, 7uLL);
  v40[2] = v30;
  uint64_t v40[3] = v31;
  *((unsigned char *)v40 + 32) = v52 != 0;
  if (!v52)
  {
    unint64_t v45 = (void *)(1 << *(unsigned char *)(a1 + 32));
    uint64_t v46 = *(unsigned int *)(a1 + 36);
    goto LABEL_23;
  }
  if (a1 < 0) {
    id v41 = (void *)a1;
  }
  else {
    id v41 = (void *)(a1 & 0xFFFFFFFFFFFFFF8);
  }
  swift_bridgeObjectRetain(a1);
  unint64_t v42 = (unint64_t)[v41 count];
  __n128 result = (unint64_t *)type metadata accessor for __BridgingBufferStorage(0);
  if ((v42 - 0x1000000000000000) >> 61 != 7) {
    goto LABEL_28;
  }
  if (__OFADD__(8 * v42, 24))
  {
LABEL_29:
    __break(1u);
    return result;
  }
  uint64_t v43 = swift_bufferAllocate(result, 8 * v42 + 24, 7uLL);
  v43[2] = v42;
  [v41 sel_getObjects_:v43 + 3];
  char v44 = (unint64_t *)type metadata accessor for __CocoaSet.Index.Storage();
  unint64_t v45 = swift_allocObject(v44, 0x20uLL, 7uLL);
  v45[2] = v41;
  v45[3] = v43;
  uint64_t v46 = v43[2];
LABEL_23:
  uint64_t v47 = swift_allocObject(v39, 0x21uLL, 7uLL);
  v47[2] = v45;
  v47[3] = v46;
  *((unsigned char *)v47 + 32) = v52 != 0;
  v24[2] = v40;
  v24[3] = &protocol witness table for _IndexBox<A>;
  v24[4] = v47;
  v24[5] = &protocol witness table for _IndexBox<A>;
  unint64_t v54 = v56;
  swift_bridgeObjectRetain(a1);
  unint64_t v48 = (const char *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CustomLeafReflectable);
  __n128 result = (unint64_t *)swift_dynamicCast((char *)v53, &v54, v9, v48, 6uLL);
  char v49 = (char)result;
  if (result) {
    __n128 result = (unint64_t *)__swift_destroy_boxed_opaque_existential_1Tm(v53);
  }
  *(void *)a5 = v9;
  *(void *)(a5 + 8) = v24;
  *(unsigned char *)(a5 + 16) = 7;
  *(void *)(a5 + 24) = v51;
  *(void *)(a5 + 32) = v50;
  *(unsigned char *)(a5 + 40) = v49;
  return result;
}

unint64_t *protocol witness for CustomReflectable.customMirror.getter in conformance Set<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  return Set.customMirror.getter(*v3, *(void *)(a1 + 16), *(void *)(a1 + 24), a2, a3);
}

unint64_t *Set.popFirst()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *v2;
  uint64_t v6 = *(void *)(a1 + 16);
  unint64_t v7 = *v2 & 0xC000000000000001;
  if (!v7)
  {
    if (*(void *)(v5 + 16))
    {
      uint64_t v14 = *(void *)(a1 + 24);
      uint64_t v13 = _NativeSet.startIndex.getter(*v2);
      uint64_t v16 = v17;
      goto LABEL_11;
    }
LABEL_12:
    uint64_t v19 = 1;
    goto LABEL_13;
  }
  if (v5 < 0) {
    int64_t v8 = (void *)*v2;
  }
  else {
    int64_t v8 = (void *)(v5 & 0xFFFFFFFFFFFFFF8);
  }
  if (!objc_msgSend(v8, sel_count)) {
    goto LABEL_12;
  }
  unint64_t v9 = (unint64_t)[swift_unknownObjectRetain(v8) count];
  __n128 result = (unint64_t *)type metadata accessor for __BridgingBufferStorage(0);
  if ((v9 - 0x1000000000000000) >> 61 != 7)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (__OFADD__(8 * v9, 24))
  {
LABEL_17:
    __break(1u);
    return result;
  }
  uint64_t v11 = swift_bufferAllocate(result, 8 * v9 + 24, 7uLL);
  _OWORD v11[2] = v9;
  [v8 sel_getObjects:v11 + 3];
  swift_bridgeObjectRelease(v5);
  uint64_t v12 = (unint64_t *)type metadata accessor for __CocoaSet.Index.Storage();
  uint64_t v13 = (uint64_t)swift_allocObject(v12, 0x20uLL, 7uLL);
  *(void *)(v13 + 16) = v8;
  *(void *)(v13 + 24) = v11;
  uint64_t v14 = *(void *)(a1 + 24);
  swift_bridgeObjectRetain(v5);
  uint64_t v16 = 0;
LABEL_11:
  uint64_t v18 = type metadata accessor for Set._Variant(0, v6, v14, v15);
  Set._Variant.remove(at:)(v13, v16, v7 != 0, (uint64_t)v18, a2);
  outlined consume of [A : B].Index._Variant<A, B>(v13, v16, v7 != 0);
  uint64_t v19 = 0;
LABEL_13:
  uint64_t v20 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56);

  return (unint64_t *)v20(a2, v19, 1, v6);
}

id Set.capacity.getter(uint64_t a1)
{
  if ((a1 & 0xC000000000000001) == 0) {
    return *(id *)(a1 + 24);
  }
  if (a1 >= 0) {
    a1 &= 0xFFFFFFFFFFFFFF8uLL;
  }
  return [a1 count];
}

id Set._Variant.capacity.getter(uint64_t a1)
{
  if ((a1 & 0xC000000000000001) == 0) {
    return *(id *)(a1 + 24);
  }
  if (a1 >= 0) {
    a1 &= 0xFFFFFFFFFFFFFF8uLL;
  }
  return [a1 count];
}

Swift::Void __swiftcall Set.reserveCapacity(_:)(Swift::Int a1)
{
  type metadata accessor for Set._Variant(0, *(void *)(v1 + 16), *(void *)(v1 + 24), v2);

  Set._Variant.reserveCapacity(_:)(a1);
}

Swift::Void __swiftcall Set._Variant.reserveCapacity(_:)(Swift::Int a1)
{
  uint64_t v3 = v2;
  uint64_t v4 = v1;
  uint64_t v6 = *v2;
  unint64_t v7 = *(char **)(v1 + 16);
  if ((v6 & 0xC000000000000001) != 0)
  {
    if (v6 < 0) {
      int64_t v8 = (void *)v6;
    }
    else {
      int64_t v8 = (void *)(v6 & 0xFFFFFFFFFFFFFF8);
    }
    id v9 = [v8 count];
    if ((uint64_t)v9 <= a1) {
      Swift::Int v10 = a1;
    }
    else {
      Swift::Int v10 = (Swift::Int)v9;
    }
    *uint64_t v3 = (uint64_t)_NativeSet.init(_:capacity:)(v8, v10, v7, *(void *)(v4 + 24));
  }
  else
  {
    BOOL isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v6);
    BOOL v13 = isUniquelyReferenced_nonNull_native;
    uint64_t v16 = *v3;
    uint64_t v14 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    if (*(void *)(v14 + 24) >= a1)
    {
      if (!isUniquelyReferenced_nonNull_native)
      {
        type metadata accessor for _NativeSet(0, (uint64_t)v7, *(void *)(v4 + 24), v12);
        _NativeSet.copy()();
      }
    }
    else
    {
      type metadata accessor for _NativeSet(0, (uint64_t)v7, *(void *)(v4 + 24), v12);
      if (v13) {
        _NativeSet.resize(capacity:)(a1);
      }
      else {
        _NativeSet.copyAndResize(capacity:)(a1);
      }
    }
    uint64_t v15 = *v3;
    *uint64_t v3 = v16;
    swift_bridgeObjectRelease(v15);
  }
}

uint64_t SetAlgebra.isStrictSuperset(of:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *(void *)(a2 - 8);
  uint64_t v8 = MEMORY[0x1F4188790](a1);
  Swift::Int v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = MEMORY[0x1F4188790](v8);
  BOOL v13 = (char *)&v20 - v12;
  char v15 = (*(uint64_t (**)(uint64_t))(v14 + 144))(v11);
  uint64_t v16 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
  v16(v13, v3, a2);
  v16(v10, a1, a2);
  if (v15) {
    char v17 = (*(uint64_t (**)(char *, char *, uint64_t))(*(void *)(a3 + 8) + 8))(v13, v10, a2) ^ 1;
  }
  else {
    char v17 = 0;
  }
  uint64_t v18 = *(void (**)(char *, uint64_t))(v7 + 8);
  v18(v10, a2);
  v18(v13, a2);
  return v17 & 1;
}

uint64_t SetAlgebra.isStrictSubset(of:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = *(void *)(a2 - 8);
  uint64_t v9 = MEMORY[0x1F4188790](a1);
  uint64_t v11 = (char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  BOOL v13 = (char *)&v20 - v12;
  char v15 = (*(uint64_t (**)(uint64_t))(v14 + 144))(v4);
  uint64_t v16 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
  v16(v13, a1, a2);
  v16(v11, v4, a2);
  if (v15) {
    char v17 = (*(uint64_t (**)(char *, char *, uint64_t))(*(void *)(a3 + 8) + 8))(v13, v11, a2) ^ 1;
  }
  else {
    char v17 = 0;
  }
  uint64_t v18 = *(void (**)(char *, uint64_t))(v8 + 8);
  v18(v11, a2);
  v18(v13, a2);
  return v17 & 1;
}

uint64_t Set<>.insert<A>(_:)(char *a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  AnyHashable.init<A>(_:)(a2, a3, a4, (uint64_t)v10);
  char v6 = specialized Set._Variant.insert(_:)((uint64_t)v11, (uint64_t)v10);
  uint64_t v7 = v12;
  uint64_t v8 = v13;
  __swift_project_boxed_opaque_existential_0Tm(v11, v12);
  (*(void (**)(unint64_t *__return_ptr, uint64_t, uint64_t))(v8 + 48))(v10, v7, v8);
  outlined destroy of AnyHashable(v11);
  swift_dynamicCast(a1, v10, qword_1ECA06310, (const char *)a3, 7uLL);
  return v6 & 1;
}

uint64_t Set<>.update<A>(with:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, char *a4@<X8>)
{
  AnyHashable.init<A>(_:)(a1, a2, a3, (uint64_t)&v15);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v4);
  *(void *)&v13[0] = *v4;
  *uint64_t v4 = 0x8000000000000000;
  specialized _NativeSet.update(with:isUnique:)(&v15, isUniquelyReferenced_nonNull_native, (uint64_t)v18);
  uint64_t v8 = *v4;
  *uint64_t v4 = *(void *)&v13[0];
  swift_bridgeObjectRelease(v8);
  outlined init with take of AnyHashable?((uint64_t)v18, (uint64_t)&v15);
  if (!*((void *)&v16 + 1)) {
    return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t *))(*(a2 - 1) + 56))(a4, 1, 1, a2);
  }
  v13[0] = v15;
  v13[1] = v16;
  uint64_t v9 = v17;
  uint64_t v14 = v17;
  uint64_t v10 = *((void *)&v16 + 1);
  __swift_project_boxed_opaque_existential_0Tm(v13, *((uint64_t *)&v16 + 1));
  (*(void (**)(unint64_t *__return_ptr, uint64_t, uint64_t))(v9 + 48))(v12, v10, v9);
  outlined destroy of AnyHashable((uint64_t *)v13);
  swift_dynamicCast(a4, v12, qword_1ECA06310, (const char *)a2, 7uLL);
  return (*(uint64_t (**)(char *, void, uint64_t, uint64_t *))(*(a2 - 1) + 56))(a4, 0, 1, a2);
}

uint64_t Set<>.remove<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, char *a4@<X8>)
{
  uint64_t v7 = *(a2 - 1);
  MEMORY[0x1F4188790](a1);
  uint64_t v9 = (char *)v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v7 + 16))(v9);
  AnyHashable.init<A>(_:)((uint64_t)v9, a2, a3, (uint64_t)&v16);
  specialized Set._Variant.remove(_:)(&v16, (uint64_t)v19);
  outlined destroy of AnyHashable((uint64_t *)&v16);
  outlined init with take of AnyHashable?((uint64_t)v19, (uint64_t)&v16);
  if (!*((void *)&v17 + 1)) {
    return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t *))(v7 + 56))(a4, 1, 1, a2);
  }
  v14[0] = v16;
  v14[1] = v17;
  uint64_t v10 = v18;
  uint64_t v15 = v18;
  uint64_t v11 = *((void *)&v17 + 1);
  __swift_project_boxed_opaque_existential_0Tm(v14, *((uint64_t *)&v17 + 1));
  (*(void (**)(unint64_t *__return_ptr, uint64_t, uint64_t))(v10 + 48))(v13, v11, v10);
  outlined destroy of AnyHashable((uint64_t *)v14);
  swift_dynamicCast(a4, v13, qword_1ECA06310, (const char *)a2, 7uLL);
  return (*(uint64_t (**)(char *, void, uint64_t, uint64_t *))(v7 + 56))(a4, 0, 1, a2);
}

__objc2_class **_NativeSet.bridged()(__objc2_class **a1, uint64_t *a2, void *a3)
{
  if (one-time initialization token for _bridgeInitializedSuccessfully != -1) {
    swift_once(&one-time initialization token for _bridgeInitializedSuccessfully, (dispatch_function_t)one-time initialization function for _bridgeInitializedSuccessfully, a3);
  }
  if (!_bridgeInitializedSuccessfully) {
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/BridgeObjectiveC.swift", 28, 2, 0x82uLL, 0);
  }
  _orphanedFoundationSubclassesReparented = 1;
  if (a1 == &_swiftEmptySetSingleton)
  {
    a1 = &_swiftEmptySetSingleton;
    swift_release((uint64_t)&_swiftEmptySetSingleton);
  }
  else if (a1[2])
  {
    if (_swift_isClassOrObjCExistentialType((uint64_t)a2, a2))
    {
      uint64_t v7 = type metadata accessor for _SetStorage(0, (uint64_t)a2, (uint64_t)a3, v6);
      if (!swift_dynamicCastClass((uint64_t)a1, (uint64_t)v7)) {
        _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "invalid unsafeDowncast", 22, 2, "Swift/Builtin.swift", 19, 2, 0x10DuLL, 0);
      }
    }
    else
    {
      uint64_t v8 = (unint64_t *)type metadata accessor for _SwiftDeferredNSSet(0, (uint64_t)a2, (uint64_t)a3, v6);
      uint64_t v9 = swift_allocObject(v8, 0x20uLL, 7uLL);
      _OWORD v9[2] = 0;
      v9[3] = a1;
      return (__objc2_class **)v9;
    }
  }
  else
  {
    swift_release((uint64_t)a1);
    return &_swiftEmptySetSingleton;
  }
  return a1;
}

void _SwiftSetNSEnumerator.init()()
{
  *(void *)(v0 + 24) = 0;
  swift_release(v0);
  __break(1u);
}

void @objc _SwiftSetNSEnumerator.init()()
{
}

void *_SwiftSetNSEnumerator.init(_:)(uint64_t a1)
{
  uint64_t v2 = v1;
  v2[3] = 0;
  uint64_t v4 = *(atomic_ullong **)(a1 + 24);
  v2[2] = v4;
  uint64_t v5 = swift_retain(v4);
  uint64_t v6 = _SwiftDeferredNSSet.bridgeElements()((uint64_t)v5);
  swift_release(a1);
  uint64_t v7 = v2[3];
  v2[3] = v6;
  swift_release(v7);
  uint64_t v8 = v2[2];
  uint64_t v9 = -1 << *(unsigned char *)(v8 + 32);
  v2[4] = _HashTable.startBucket.getter((unint64_t *)(v8 + 56), ~v9);
  v2[5] = -v9;
  return v2;
}

void *_SwiftDeferredNSSet.bridgeElements()(uint64_t a1)
{
  uint64_t v2 = *(uint64_t **)(*v1 + 96);
  uint64_t v3 = *(v2 - 1);
  uint64_t v4 = MEMORY[0x1F4188790](a1);
  MEMORY[0x1F4188790](v4);
  uint64_t v8 = (id *)((char *)&v33 - v7);
  uint64_t v10 = (void *)atomic_load(v9);
  if (v10)
  {
    uint64_t v11 = type metadata accessor for __BridgingHashBuffer(0);
    id v12 = swift_unknownObjectRetain(v10);
    if (!swift_dynamicCastClass((uint64_t)v12, v11)) {
      goto LABEL_33;
    }
    return v10;
  }
  unint64_t v34 = v6;
  uint64_t v40 = v5;
  uint64_t v13 = v1[3];
  uint64_t v14 = -1 << *(unsigned char *)(v13 + 32);
  uint64_t v15 = (unint64_t *)type metadata accessor for __BridgingHashBuffer(0);
  long long v16 = swift_allocObject(v15, 40 - 8 * v14, 7uLL);
  v16[2] = v13;
  v16[3] = v13 + 56;
  uint64_t v39 = v13 + 56;
  v16[4] = ~v14;
  swift_retain((atomic_ullong *)v13);
  unint64_t v35 = v15;
  if (!swift_dynamicCastClass((uint64_t)v16, (uint64_t)v15)) {
    goto LABEL_33;
  }
  if (-v14 < 64) {
    uint64_t v17 = ~(-1 << -(char)v14);
  }
  else {
    uint64_t v17 = -1;
  }
  unint64_t v18 = *(void *)(v13 + 56) & v17;
  uint64_t v33 = (void (**)(id *, id *, uint64_t *))(v3 + 32);
  unint64_t v36 = v16;
  id v41 = v16 + 5;
  uint64_t v42 = v3 + 16;
  uint64_t v37 = v13;
  int64_t v38 = (unint64_t)(63 - v14) >> 6;
  swift_retain_n(v13, 2);
  int64_t v19 = 0;
  while (1)
  {
    if (v18)
    {
      unint64_t v20 = __clz(__rbit64(v18));
      v18 &= v18 - 1;
      unint64_t v21 = v20 | (v19 << 6);
      goto LABEL_21;
    }
    if (__OFADD__(v19++, 1)) {
      goto LABEL_32;
    }
    if (v19 >= v38) {
      break;
    }
    unint64_t v23 = *(void *)(v39 + 8 * v19);
    if (!v23)
    {
      int64_t v24 = v19 + 1;
      if (v19 + 1 >= v38) {
        break;
      }
      unint64_t v23 = *(void *)(v39 + 8 * v24);
      if (!v23)
      {
        while (1)
        {
          int64_t v19 = v24 + 1;
          if (__OFADD__(v24, 1)) {
            break;
          }
          if (v19 >= v38) {
            goto LABEL_25;
          }
          unint64_t v23 = *(void *)(v39 + 8 * v19);
          ++v24;
          if (v23) {
            goto LABEL_20;
          }
        }
        __break(1u);
LABEL_32:
        __break(1u);
LABEL_33:
        _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "invalid unsafeDowncast", 22, 2, "Swift/Builtin.swift", 19, 2, 0x10DuLL, 0);
      }
      ++v19;
    }
LABEL_20:
    unint64_t v18 = (v23 - 1) & v23;
    unint64_t v21 = __clz(__rbit64(v23)) + (v19 << 6);
LABEL_21:
    (*(void (**)(id *, unint64_t, uint64_t *))(v3 + 16))(v8, *(void *)(v1[3] + 48) + *(void *)(v3 + 72) * v21, v2);
    if (_swift_isClassOrObjCExistentialType((uint64_t)v2, v2))
    {
      if (v40 != 8) {
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't unsafeBitCast between types of different sizes", 52, 2, "Swift/Builtin.swift", 19, 2, 0x5FuLL, 0);
      }
      id v25 = *v8;
      unint64_t v26 = *(void (**)(id *, uint64_t *))(v3 + 8);
      swift_unknownObjectRetain(*v8);
      v26(v8, v2);
      v41[v21] = (atomic_ullong)v25;
    }
    else
    {
      unint64_t v27 = v34;
      (*v33)(v34, v8, v2);
      uint64_t v28 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(v27, v2);
      v41[v21] = (atomic_ullong)v28;
    }
  }
LABEL_25:
  swift_release_n(v37, 2);
  uint64_t v29 = v36;
  swift_retain(v36);
  uint64_t v30 = 0;
  atomic_compare_exchange_strong(v1 + 2, (unint64_t *)&v30, (unint64_t)v29);
  if (v30) {
    swift_release((uint64_t)v29);
  }
  swift_release((uint64_t)v29);
  uint64_t v10 = (void *)atomic_load((unint64_t *)v1 + 2);
  if (!v10) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/SetBridging.swift", 23, 2, 0xCFuLL, 0);
  }
  id v31 = swift_unknownObjectRetain(v10);
  if (!swift_dynamicCastClass((uint64_t)v31, (uint64_t)v35)) {
    goto LABEL_33;
  }
  return v10;
}

atomic_ullong *_SwiftDictionaryNSEnumerator.bridgedKey(at:)(uint64_t a1)
{
  uint64_t v2 = *(uint64_t **)(*v1 + 96);
  uint64_t v3 = *(v2 - 1);
  uint64_t v4 = MEMORY[0x1F4188790](a1);
  uint64_t v6 = (id *)((char *)&v10 - v5);
  uint64_t v7 = v1[3];
  if (v7)
  {
    uint64_t v8 = *(atomic_ullong **)(v7 + 8 * v4 + 40);
    swift_unknownObjectRetain(v8);
  }
  else
  {
    (*(void (**)(id *, uint64_t, uint64_t *))(v3 + 16))(v6, *(void *)(v1[2] + 48) + *(void *)(v3 + 72) * v4, v2);
    uint64_t v8 = _bridgeAnythingToObjectiveC<A>(_:)(v6, v2);
    (*(void (**)(id *, uint64_t *))(v3 + 8))(v6, v2);
  }
  return v8;
}

atomic_ullong *_SwiftSetNSEnumerator.nextObject()()
{
  uint64_t offset = v0[4].offset;
  if (offset == v0[5].offset) {
    return 0;
  }
  v0[4].uint64_t offset = _HashTable.occupiedBucket(after:)(v0[4]).offset;
  return _SwiftDictionaryNSEnumerator.bridgedKey(at:)(offset);
}

id @objc _SwiftSetNSEnumerator.nextObject()(atomic_ullong *a1, uint64_t a2)
{
  return @objc _SwiftDictionaryNSEnumerator.nextObject()(a1, a2, (uint64_t (*)(atomic_ullong *))_SwiftSetNSEnumerator.nextObject());
}

id @objc _SwiftDictionaryNSEnumerator.nextObject()(atomic_ullong *a1, uint64_t a2, uint64_t (*a3)(atomic_ullong *))
{
  uint64_t v5 = swift_retain(a1);
  uint64_t v6 = (void *)a3(v5);
  swift_release((uint64_t)a1);

  return v6;
}

uint64_t @objc _SwiftSetNSEnumerator.countByEnumerating(with:objects:count:)(atomic_ullong *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return @objc _SwiftDictionaryNSEnumerator.countByEnumerating(with:objects:count:)(a1, a2, a3, a4, a5, (uint64_t (*)(uint64_t, uint64_t))specialized _SwiftSetNSEnumerator.countByEnumerating(with:objects:count:));
}

uint64_t @objc _SwiftDictionaryNSEnumerator.countByEnumerating(with:objects:count:)(atomic_ullong *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(uint64_t, uint64_t))
{
  swift_retain(a1);
  uint64_t v10 = a6(a3, a4);
  swift_release((uint64_t)a1);
  return v10;
}

uint64_t @objc _SwiftSetNSEnumerator.init(coder:)(uint64_t a1, uint64_t a2, void *a3)
{
  return @objc _SwiftSetNSEnumerator.init(coder:)(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t))specialized _SwiftSetNSEnumerator.init(coder:));
}

uint64_t _SwiftDictionaryNSEnumerator.__ivar_destroyer()
{
  swift_release(*(void *)(v0 + 16));
  uint64_t v1 = *(void *)(v0 + 24);

  return swift_release(v1);
}

void _SwiftDictionaryNSEnumerator.__deallocating_deinit()
{
  uint64_t v1 = v0[2];
  swift_retain(v0);
  swift_release(v1);
  uint64_t v2 = v0[3];
  swift_release((uint64_t)v0);
  swift_release(v2);

  swift_deallocClassInstance((uint64_t)v0);
}

void @objc _SwiftDeferredNSSet.init(objects:count:)()
{
}

void *_SwiftDeferredNSSet.member(_:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v7 = *v4;
  uint64_t v8 = *(char **)(v7 + 96);
  uint64_t v9 = type metadata accessor for Optional(0, (uint64_t)v8, a3, a4);
  uint64_t v10 = (uint64_t)*(v9 - 1);
  uint64_t v11 = MEMORY[0x1F4188790](v9);
  uint64_t v13 = (char *)v39 - v12;
  uint64_t v14 = *((void *)v8 - 1);
  uint64_t v15 = MEMORY[0x1F4188790](v11);
  uint64_t v17 = (char *)v39 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v15);
  int64_t v19 = (char *)v39 - v18;
  _conditionallyBridgeFromObjectiveC<A>(_:_:)(a1, v8, v20, v13);
  if ((*(unsigned int (**)(char *, uint64_t, char *))(v14 + 48))(v13, 1, v8) == 1)
  {
    (*(void (**)(char *, Class *))(v10 + 8))(v13, v9);
    return 0;
  }
  (*(void (**)(char *, char *, char *))(v14 + 32))(v19, v13, v8);
  uint64_t v21 = v5[3];
  uint64_t v22 = *(void *)(v21 + 40);
  uint64_t v23 = *(void *)(v7 + 104);
  int64_t v24 = *(uint64_t (**)(uint64_t, char *, uint64_t))(v23 + 32);
  swift_retain((atomic_ullong *)v21);
  unint64_t v45 = v19;
  uint64_t v25 = v24(v22, v8, v23);
  uint64_t v26 = -1 << *(unsigned char *)(v21 + 32);
  unint64_t v27 = v25 & ~v26;
  uint64_t v28 = v21;
  uint64_t v44 = v21 + 56;
  if (((*(void *)(v21 + 56 + ((v27 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v27) & 1) == 0)
  {
    swift_release(v21);
    unint64_t v34 = *(void (**)(char *, char *))(v14 + 8);
LABEL_9:
    v34(v45, v8);
    return 0;
  }
  uint64_t v43 = *(void *)(v23 + 8);
  uint64_t v29 = *(uint64_t (**)(char *, char *, char *, uint64_t))(v43 + 8);
  id v41 = *(void (**)(char *, unint64_t, char *))(v14 + 16);
  uint64_t v42 = v29;
  v39[1] = v5;
  uint64_t v40 = ~v26;
  uint64_t v30 = *(void *)(v14 + 72);
  id v31 = (void (**)(char *, char *))(v14 + 8);
  v39[0] = (v14 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  while (1)
  {
    uint64_t v32 = v28;
    v41(v17, *(void *)(v28 + 48) + v30 * v27, v8);
    char v33 = v42(v17, v45, v8, v43);
    unint64_t v34 = *v31;
    (*v31)(v17, v8);
    if (v33) {
      break;
    }
    unint64_t v27 = (v27 + 1) & v40;
    uint64_t v28 = v32;
    if (((*(void *)(v44 + ((v27 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v27) & 1) == 0)
    {
      swift_release(v32);
      goto LABEL_9;
    }
  }
  swift_release(v32);
  uint64_t v37 = ((uint64_t (*)(char *, char *))v34)(v45, v8);
  int64_t v38 = _SwiftDeferredNSSet.bridgeElements()(v37);
  unint64_t v35 = (void *)v38[v27 + 5];
  swift_unknownObjectRetain(v35);
  swift_release((uint64_t)v38);
  return v35;
}

id @objc _SwiftDeferredNSSet.member(_:)(atomic_ullong *a1, uint64_t a2, void *a3)
{
  return @objc _SwiftDeferredNSDictionary.object(forKey:)(a1, a2, a3, (uint64_t (*)(void *))_SwiftDeferredNSSet.member(_:));
}

void *_SwiftDeferredNSSet.objectEnumerator()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = (unint64_t *)type metadata accessor for _SwiftSetNSEnumerator(0, *(void *)(*v4 + 96), *(void *)(*v4 + 104), a4);
  uint64_t v6 = swift_allocObject(v5, 0x30uLL, 7uLL);
  uint64_t v7 = swift_retain(v4);
  _SwiftSetNSEnumerator.init(_:)((uint64_t)v7);
  return v6;
}

id @objc _SwiftDeferredNSSet.objectEnumerator()(atomic_ullong *a1, uint64_t a2)
{
  return @objc _SwiftDeferredNSDictionary.keyEnumerator()(a1, a2, (uint64_t (*)(atomic_ullong *))_SwiftDeferredNSSet.objectEnumerator());
}

id @objc _SwiftDeferredNSDictionary.keyEnumerator()(atomic_ullong *a1, uint64_t a2, uint64_t (*a3)(atomic_ullong *))
{
  uint64_t v5 = swift_retain(a1);
  uint64_t v6 = (void *)a3(v5);
  swift_release((uint64_t)a1);

  return v6;
}

uint64_t @objc _SwiftDeferredNSSet.count.getter()
{
  return _SwiftDeferredNSSet.count.getter();
}

uint64_t _SwiftDeferredNSSet.count.getter()
{
  return *(void *)(*(void *)(v0 + 24) + 16);
}

uint64_t _SwiftDeferredNSSet.countByEnumerating(with:objects:count:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *(void *)(v3 + 24);
  uint64_t v8 = v7 + 56;
  uint64_t v9 = -1 << *(unsigned char *)(v7 + 32);
  uint64_t v10 = *(void *)a1;
  long long v26 = *(_OWORD *)(a1 + 48);
  long long v27 = *(_OWORD *)(a1 + 32);
  if (*(void *)a1)
  {
    uint64_t v12 = *(void *)(a1 + 8);
    uint64_t v11 = *(Swift::UInt **)(a1 + 16);
    unint64_t v13 = *(void *)(a1 + 24);
    if (a2) {
      goto LABEL_3;
    }
    return 0;
  }
  unint64_t v22 = _HashTable.startBucket.getter((unint64_t *)(v7 + 56), ~v9);
  if ((v22 & 0x8000000000000000) != 0) {
    goto LABEL_32;
  }
  unint64_t v13 = v22;
  uint64_t v11 = &_fastEnumerationStorageMutationsTarget;
  uint64_t v10 = 1;
  uint64_t v12 = a2;
  if (!a2) {
    return 0;
  }
LABEL_3:
  if ((v13 & 0x8000000000000000) != 0) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Not enough bits to represent the passed value", 45, 2, "Swift/Integers.swift", 20, 2, 0xE67uLL, 0);
  }
  uint64_t v14 = -v9;
  if (!(v13 + v9)) {
    goto LABEL_7;
  }
  if ((uint64_t)v13 >= v14)
  {
    swift_retain((atomic_ullong *)v7);
LABEL_36:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Invalid fast enumeration state", 30, 2, "Swift/SetBridging.swift", 23, 2, 0x10EuLL, 0);
  }
  if (((*(void *)(v8 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v13) & 1) == 0) {
    goto LABEL_36;
  }
LABEL_7:
  uint64_t v24 = v12;
  uint64_t v25 = v11;
  uint64_t v15 = swift_retain((atomic_ullong *)v7);
  uint64_t v16 = _SwiftDeferredNSSet.bridgeElements()((uint64_t)v15);
  if (a3 < 0) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
  }
  if (a3)
  {
    uint64_t v17 = 0;
    unint64_t v18 = (unint64_t)(63 - v9) >> 6;
    do
    {
      if (v13 == v14)
      {
        unint64_t v13 = -v9;
        a3 = v17;
        break;
      }
      if (v17 == 0x1000000000000000)
      {
        __break(1u);
LABEL_32:
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, 2, 0xD7BuLL, 0);
      }
      *(void *)(a2 + 8 * v17) = v16[v13 + 5];
      unint64_t v19 = v13 >> 6;
      if ((*(void *)(v8 + 8 * (v13 >> 6)) & (-2 << v13)) != 0)
      {
        unint64_t v13 = __clz(__rbit64(*(void *)(v8 + 8 * (v13 >> 6)) & (-2 << v13))) | v13 & 0xFFFFFFFFFFFFFFC0;
      }
      else
      {
        unint64_t v20 = v19 + 1;
        unint64_t v13 = -v9;
        if (v19 + 1 < v18)
        {
          unint64_t v21 = *(void *)(v8 + 8 * v20);
          if (!v21)
          {
            unint64_t v20 = v19 + 2;
            unint64_t v13 = -v9;
            if (v19 + 2 >= v18) {
              goto LABEL_11;
            }
            unint64_t v21 = *(void *)(v8 + 8 * v20);
            if (!v21)
            {
              while (v18 - 3 != v19)
              {
                unint64_t v21 = *(void *)(v7 + 80 + 8 * v19++);
                if (v21)
                {
                  unint64_t v20 = v19 + 2;
                  goto LABEL_17;
                }
              }
              unint64_t v13 = -v9;
              goto LABEL_11;
            }
          }
LABEL_17:
          unint64_t v13 = __clz(__rbit64(v21)) + (v20 << 6);
        }
      }
LABEL_11:
      ++v17;
    }
    while (v17 != a3);
  }
  swift_release((uint64_t)v16);
  swift_release(v7);
  if ((v13 & 0x8000000000000000) != 0) {
    goto LABEL_32;
  }
  *(void *)a1 = v10;
  *(void *)(a1 + 8) = v24;
  *(void *)(a1 + 16) = v25;
  *(void *)(a1 + 24) = v13;
  *(_OWORD *)(a1 + 32) = v27;
  *(_OWORD *)(a1 + 48) = v26;
  return a3;
}

uint64_t @objc _SwiftDeferredNSSet.countByEnumerating(with:objects:count:)(atomic_ullong *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return @objc _SwiftDeferredNSDictionary.countByEnumerating(with:objects:count:)(a1, a2, a3, a4, a5, _SwiftDeferredNSSet.countByEnumerating(with:objects:count:));
}

void _SwiftDeferredNSSet.__allocating_init(coder:)()
{
}

uint64_t @objc _SwiftDeferredNSSet.init(coder:)(uint64_t a1, uint64_t a2, void *a3)
{
  return @objc _SwiftSetNSEnumerator.init(coder:)(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t))_SwiftDeferredNSSet.__allocating_init(coder:));
}

uint64_t @objc _SwiftSetNSEnumerator.init(coder:)(uint64_t a1, uint64_t a2, void *a3, uint64_t (*a4)(uint64_t, uint64_t))
{
  uint64_t v4 = *(void *)(*(void *)a1 + 96);
  uint64_t v5 = *(void *)(*(void *)a1 + 104);
  swift_unknownObjectRetain(a3);

  return a4(v4, v5);
}

void _SwiftDeferredNSSet.__deallocating_deinit()
{
  uint64_t v1 = (void *)v0[2];
  swift_retain(v0);
  swift_unknownObjectRelease(v1);
  uint64_t v2 = v0[3];
  swift_release((uint64_t)v0);
  swift_release(v2);

  swift_deallocClassInstance((uint64_t)v0);
}

id __CocoaSet.member(for:)(uint64_t a1, id a2)
{
  id v2 = [a2 sel_member_:a1];

  return v2;
}

unint64_t *__CocoaSet.startIndex.getter(void *a1)
{
  unint64_t v2 = (unint64_t)[swift_unknownObjectRetain(a1) count];
  __n128 result = (unint64_t *)type metadata accessor for __BridgingBufferStorage(0);
  if ((v2 - 0x1000000000000000) >> 61 == 7)
  {
    if (!__OFADD__(8 * v2, 24))
    {
      uint64_t v4 = swift_bufferAllocate(result, 8 * v2 + 24, 7uLL);
      v4[2] = v2;
      [a1 sel_getObjects_:v4 + 3];
      swift_unknownObjectRelease(a1);
      uint64_t v5 = (unint64_t *)type metadata accessor for __CocoaSet.Index.Storage();
      uint64_t v6 = swift_allocObject(v5, 0x20uLL, 7uLL);
      v6[2] = a1;
      v6[3] = v4;
      swift_unknownObjectRetain(a1);
      return v6;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

unint64_t *__CocoaSet.endIndex.getter(void *a1)
{
  unint64_t v2 = (unint64_t)[swift_unknownObjectRetain(a1) count];
  __n128 result = (unint64_t *)type metadata accessor for __BridgingBufferStorage(0);
  if ((v2 - 0x1000000000000000) >> 61 == 7)
  {
    if (!__OFADD__(8 * v2, 24))
    {
      uint64_t v4 = swift_bufferAllocate(result, 8 * v2 + 24, 7uLL);
      v4[2] = v2;
      [a1 sel_getObjects:v4 + 3];
      swift_unknownObjectRelease(a1);
      uint64_t v5 = (unint64_t *)type metadata accessor for __CocoaSet.Index.Storage();
      uint64_t v6 = swift_allocObject(v5, 0x20uLL, 7uLL);
      v6[2] = a1;
      v6[3] = v4;
      swift_unknownObjectRetain(a1);
      return v6;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

unint64_t __CocoaSet.index(after:)(int64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 < 0) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = a1 & 0xFFFFFFFFFFFFFF8;
  }
  uint64_t v7 = type metadata accessor for __CocoaSet.Index.Storage();
  if (!swift_dynamicCastClass(v6, v7)) {
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "invalid unsafeDowncast", 22, 2, "Swift/Builtin.swift", 19, 2, 0x10DuLL, 0);
  }
  if (*(void *)(v6 + 16) != a3) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Invalid index", 13, 2, "Swift/SetBridging.swift", 23, 2, 0x169uLL, 0);
  }
  if (*(void *)(*(void *)(v6 + 24) + 16) <= a2) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Attempt to access endIndex", 26, 2, "Swift/SetBridging.swift", 23, 2, 0x16BuLL, 0);
  }
  return swift_bridgeObjectRetain(a1);
}

uint64_t __CocoaSet.formIndex(after:isUnique:)(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a1[1];
  if (*a1 < 0) {
    uint64_t v6 = *a1;
  }
  else {
    uint64_t v6 = *a1 & 0xFFFFFFFFFFFFFF8;
  }
  uint64_t v7 = type metadata accessor for __CocoaSet.Index.Storage();
  uint64_t result = swift_dynamicCastClass(v6, v7);
  if (!result) {
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "invalid unsafeDowncast", 22, 2, "Swift/Builtin.swift", 19, 2, 0x10DuLL, 0);
  }
  if (*(void *)(v6 + 16) != a3) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Invalid index", 13, 2, "Swift/SetBridging.swift", 23, 2, 0x169uLL, 0);
  }
  if (v5 >= *(void *)(*(void *)(v6 + 24) + 16)) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Attempt to access endIndex", 26, 2, "Swift/SetBridging.swift", 23, 2, 0x16BuLL, 0);
  }
  a1[1] = v5 + 1;
  return result;
}

void *__CocoaSet.index(for:)(void *a1, id a2)
{
  id v4 = [a2 sel_member_:a1];
  if (!v4) {
    return 0;
  }
  swift_unknownObjectRelease(v4);
  unint64_t v5 = (unint64_t)[swift_unknownObjectRetain(a2) count];
  uint64_t v6 = (unint64_t *)type metadata accessor for __BridgingBufferStorage(0);
  if ((v5 - 0x1000000000000000) >> 61 != 7)
  {
    __break(1u);
    goto LABEL_11;
  }
  if (__OFADD__(8 * v5, 24))
  {
LABEL_11:
    __break(1u);
LABEL_12:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
  }
  uint64_t v7 = swift_bufferAllocate(v6, 8 * v5 + 24, 7uLL);
  v7[2] = v5;
  [a2 sel_getObjects_:v7 + 3];
  swift_unknownObjectRelease(a2);
  if ((v7[2] & 0x8000000000000000) != 0) {
    goto LABEL_12;
  }
  swift_unknownObjectRetain(v7);
  uint64_t v8 = 0;
  do
  {
    uint64_t v9 = v8 + 1;
    uint64_t v10 = (void *)v7[v8 + 3];
    swift_unknownObjectRetain(v10);
    char isEqual = swift_stdlib_NSObject_isEqual(a1, v10);
    swift_unknownObjectRelease(v10);
    uint64_t v8 = v9;
  }
  while ((isEqual & 1) == 0);
  swift_unknownObjectRelease(v7);
  uint64_t v12 = (unint64_t *)type metadata accessor for __CocoaSet.Index.Storage();
  unint64_t v13 = swift_allocObject(v12, 0x20uLL, 7uLL);
  _OWORD v13[2] = a2;
  v13[3] = v7;
  swift_unknownObjectRetain(a2);
  return v13;
}

id __CocoaSet.member(for:)(uint64_t a1, uint64_t a2)
{
  if (a1 < 0) {
    uint64_t v3 = a1;
  }
  else {
    uint64_t v3 = a1 & 0xFFFFFFFFFFFFFF8;
  }
  uint64_t v4 = type metadata accessor for __CocoaSet.Index.Storage();
  if (!swift_dynamicCastClass(v3, v4)) {
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "invalid unsafeDowncast", 22, 2, "Swift/Builtin.swift", 19, 2, 0x10DuLL, 0);
  }
  uint64_t v5 = *(void *)(v3 + 24);
  if (*(void *)(v5 + 16) <= a2) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Attempting to access Set elements using an invalid index", 56, 2, "Swift/SetBridging.swift", 23, 2, 0x1E1uLL, 0);
  }
  uint64_t v6 = *(void **)(v5 + 8 * a2 + 24);

  return swift_unknownObjectRetain(v6);
}

void __CocoaDictionary.Index.Storage.__deallocating_deinit()
{
  swift_unknownObjectRelease(*(id *)(v0 + 16));
  swift_release(*(void *)(v0 + 24));

  swift_deallocClassInstance(v0);
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance __CocoaSet.Index(uint64_t *a1, uint64_t *a2)
{
  return specialized static __CocoaSet.Index.== infix(_:_:)(*a1, a1[1], *a2, a2[1]);
}

BOOL protocol witness for static Comparable.< infix(_:_:) in conformance __CocoaSet.Index(uint64_t *a1, uint64_t *a2)
{
  return specialized static __CocoaSet.Index.< infix(_:_:)(*a1, a1[1], *a2, a2[1]);
}

BOOL protocol witness for static Comparable.<= infix(_:_:) in conformance __CocoaSet.Index(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static Comparable.<= infix(_:_:) in conformance __CocoaDictionary.Index(a1, a2, a3, a4, (uint64_t (*)(void, void, void, void))specialized static __CocoaSet.Index.< infix(_:_:));
}

BOOL protocol witness for static Comparable.>= infix(_:_:) in conformance __CocoaSet.Index(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static Comparable.>= infix(_:_:) in conformance __CocoaDictionary.Index(a1, a2, a3, a4, (uint64_t (*)(void, void, void, void))specialized static __CocoaSet.Index.< infix(_:_:));
}

uint64_t protocol witness for static Comparable.> infix(_:_:) in conformance __CocoaSet.Index(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static Comparable.> infix(_:_:) in conformance __CocoaDictionary.Index(a1, a2, a3, a4, (uint64_t (*)(void, void, void, void))specialized static __CocoaSet.Index.< infix(_:_:));
}

uint64_t protocol witness for static Comparable.> infix(_:_:) in conformance __CocoaDictionary.Index(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, void, void, void))
{
  return a5(*a2, a2[1], *a1, a1[1]);
}

uint64_t __CocoaSet.Iterator.deinit()
{
  swift_unknownObjectRelease(*(id *)(v0 + 208));
  return v0;
}

void __CocoaDictionary.Iterator.__deallocating_deinit()
{
  swift_unknownObjectRelease(*(id *)(v0 + 208));

  swift_deallocClassInstance(v0);
}

double protocol witness for Sequence.makeIterator() in conformance __CocoaSet@<D0>(void *a1@<X8>)
{
  return protocol witness for Sequence.makeIterator() in conformance __CocoaDictionary(type metadata accessor for __CocoaSet.Iterator, a1);
}

double protocol witness for Sequence.makeIterator() in conformance __CocoaDictionary@<D0>(uint64_t (*a1)(void)@<X2>, void *a2@<X8>)
{
  uint64_t v4 = *v2;
  uint64_t v5 = (unint64_t *)a1();
  uint64_t v6 = swift_allocObject(v5, 0xE8uLL, 7uLL);
  double result = 0.0;
  *((_OWORD *)v6 + 1) = 0u;
  *((_OWORD *)v6 + 2) = 0u;
  *((_OWORD *)v6 + 3) = 0u;
  *((_OWORD *)v6 + 4) = 0u;
  *((_OWORD *)v6 + 5) = 0u;
  *((_OWORD *)v6 + 6) = 0u;
  *((_OWORD *)v6 + 7) = 0u;
  *((_OWORD *)v6 + 8) = 0u;
  *((_OWORD *)v6 + 9) = 0u;
  *((_OWORD *)v6 + 10) = 0u;
  *((_OWORD *)v6 + 11) = 0u;
  *((_OWORD *)v6 + 12) = 0u;
  v6[27] = 0;
  v6[28] = 0;
  v6[26] = v4;
  *a2 = v6;
  return result;
}

__objc2_class **protocol witness for Sequence._copyToContiguousArray() in conformance __CocoaSet()
{
  uint64_t v1 = *v0;
  unint64_t v2 = specialized _copySequenceToContiguousArray<A>(_:)(*v0);
  swift_unknownObjectRelease(v1);
  return v2;
}

uint64_t protocol witness for Sequence._copyContents(initializing:) in conformance __CocoaSet(void *a1, uint64_t a2, uint64_t a3)
{
  return specialized Sequence._copySequenceContents(initializing:)(a1, a2, a3, *v3);
}

id protocol witness for IteratorProtocol.next() in conformance __CocoaSet.Iterator@<X0>(void *a1@<X8>)
{
  id result = __CocoaSet.Iterator.next()();
  *a1 = result;
  return result;
}

int64_t Set._bridgeToObjectiveCImpl()(int64_t result, uint64_t *a2, void *a3)
{
  if ((result & 0xC000000000000001) == 0) {
    return (int64_t)_NativeSet.bridged()((__objc2_class **)result, a2, a3);
  }
  if (result >= 0) {
    return result & 0xFFFFFFFFFFFFFF8;
  }
  return result;
}

__objc2_class **static Set._bridgeFromObjectiveCAdoptingNativeStorageOf(_:)(__objc2_class **a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = type metadata accessor for _SwiftDeferredNSSet(0, a2, a3, a4);
  id v8 = swift_unknownObjectRetain(a1);
  uint64_t v9 = swift_dynamicCastClass((uint64_t)v8, (uint64_t)v7);
  if (v9)
  {
    uint64_t v11 = v9;
    swift_unknownObjectRelease(a1);
    uint64_t v12 = *(atomic_ullong **)(v11 + 24);
    swift_retain(v12);
    swift_unknownObjectRelease(a1);
  }
  else
  {
    unint64_t v13 = type metadata accessor for _SetStorage(0, a2, a3, v10);
    uint64_t v12 = (atomic_ullong *)swift_dynamicCastClass((uint64_t)a1, (uint64_t)v13);
    swift_unknownObjectRelease(a1);
    if (!v12)
    {
      swift_unknownObjectRelease(a1);
      if (a1 == &_swiftEmptySetSingleton) {
        return &_swiftEmptySetSingleton;
      }
      else {
        return 0;
      }
    }
  }
  return (__objc2_class **)v12;
}

uint64_t _SetBuilder._target.setter(uint64_t a1)
{
  uint64_t result = swift_release(*v1);
  uint64_t *v1 = a1;
  return result;
}

uint64_t (*_SetBuilder._target.modify())()
{
  return EnumeratedSequence._base.modify;
}

uint64_t _SetBuilder._requestedCount.getter(uint64_t a1, uint64_t a2)
{
  return a2;
}

__objc2_class **_SetBuilder.init(count:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a1) {
    return &_swiftEmptySetSingleton;
  }
  type metadata accessor for _SetStorage(0, a2, a3, a4);
  return (__objc2_class **)static _SetStorage.allocate(capacity:)(a1);
}

uint64_t _SetBuilder.add(member:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 16);
  MEMORY[0x1F4188790](a1);
  uint64_t v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *v2;
  if (*(void *)(*v2 + 16) >= v2[1]) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't add more members than promised", 36, 2, "Swift/SetBuilder.swift", 22, 2, 0x22uLL, 0);
  }
  (*(void (**)(char *))(v5 + 16))(v7);
  return _NativeSet._unsafeInsertNew(_:)((uint64_t)v7, v8, v4, *(void *)(a2 + 24));
}

uint64_t _SetBuilder.take()(uint64_t result, uint64_t a2)
{
  if (*(void *)(result + 16) != a2) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "The number of members added does not match the promised count", 61, 2, "Swift/SetBuilder.swift", 22, 2, 0x29uLL, 0);
  }
  return result;
}

void _swift_setDownCastIndirect(unint64_t *a1, uint64_t *a2, uint64_t *a3, ValueMetadata *a4, void *a5, uint64_t a6)
{
  uint64_t v11 = *a1;
  unint64_t v12 = swift_bridgeObjectRetain(*a1);
  uint64_t v13 = _setDownCast<A, B>(_:)(v12, a3, a4, a5, a6);
  swift_bridgeObjectRelease(v11);
  *a2 = v13;
}

uint64_t _setDownCast<A, B>(_:)(int64_t a1, uint64_t *a2, ValueMetadata *a3, void *a4, uint64_t a5)
{
  uint64_t v9 = *(a2 - 1);
  int64_t v129 = a1;
  uint64_t v130 = v9;
  uint64_t v10 = MEMORY[0x1F4188790](a1);
  Swift::String::Index v132 = (char *)&v110 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v126 = *(void *)(v12 - 8);
  uint64_t v13 = MEMORY[0x1F4188790](v10);
  uint64_t v15 = (char *)&v110 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v13);
  Swift::String::Index v131 = (char *)&v110 - v16;
  unint64_t v20 = type metadata accessor for Optional(0, v17, v18, v19);
  unint64_t i = (void (**)(void, void, void))*(v20 - 1);
  uint64_t v21 = MEMORY[0x1F4188790](v20);
  uint64_t v23 = (char *)&v110 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = MEMORY[0x1F4188790](v21);
  unint64_t v117 = (char *)&v110 - v25;
  uint64_t v26 = MEMORY[0x1F4188790](v24);
  uint64_t v28 = (char *)&v110 - v27;
  uint64_t v29 = MEMORY[0x1F4188790](v26);
  uint64_t v118 = (char *)&v110 - v30;
  uint64_t v31 = MEMORY[0x1F4188790](v29);
  char v33 = (char *)&v110 - v32;
  MEMORY[0x1F4188790](v31);
  unint64_t v35 = (char *)&v110 - v34;
  if (_swift_isClassOrObjCExistentialType((uint64_t)a2, a2)
    && _swift_isClassOrObjCExistentialType((uint64_t)a3, &a3->Kind))
  {
    if ((v129 & 0xC000000000000001) != 0)
    {
      unint64_t v37 = v129 & 0xFFFFFFFFFFFFFF8;
      if (v129 < 0) {
        unint64_t v37 = v129;
      }
      uint64_t v38 = ~(v37 >> 1) & 0x4000000000000000 | v37;
      swift_bridgeObjectRetain(v129);
    }
    else
    {
      unint64_t v107 = (__objc2_class **)swift_bridgeObjectRetain(v129);
      id v108 = _NativeSet.bridged()(v107, a2, a4);
      return ~((unint64_t)v108 >> 1) & 0x4000000000000000 | (unint64_t)v108;
    }
    return v38;
  }
  unint64_t v116 = v28;
  unint64_t v39 = v129 & 0xC000000000000001;
  if ((v129 & 0xC000000000000001) != 0)
  {
    if (v129 < 0) {
      uint64_t v40 = (void *)v129;
    }
    else {
      uint64_t v40 = (void *)(v129 & 0xFFFFFFFFFFFFFF8);
    }
    id v41 = [v40 count];
    if (v41) {
      goto LABEL_12;
    }
LABEL_14:
    uint64_t v42 = (atomic_ullong *)&_swiftEmptySetSingleton;
    goto LABEL_15;
  }
  id v41 = *(id *)(v129 + 16);
  if (!v41) {
    goto LABEL_14;
  }
LABEL_12:
  type metadata accessor for _SetStorage(0, (uint64_t)a3, a5, v36);
  uint64_t v42 = (atomic_ullong *)static _SetStorage.allocate(capacity:)((uint64_t)v41);
LABEL_15:
  unint64_t v43 = v129;
  Swift::String::Index v134 = v42;
  uint64_t v123 = a5;
  uint64_t v115 = v20;
  if (a3 == &type metadata for String)
  {
    if (v39)
    {
      if (v129 < 0) {
        unint64_t v50 = v129;
      }
      else {
        unint64_t v50 = v129 & 0xFFFFFFFFFFFFFF8;
      }
      unint64_t v51 = (unint64_t *)type metadata accessor for __CocoaSet.Iterator();
      unint64_t v52 = (unint64_t)swift_allocObject(v51, 0xE8uLL, 7uLL);
      BOOL v122 = 0;
      uint64_t v53 = 0;
      unint64_t v54 = 0;
      *(void *)(v52 + 208) = v50;
      *(void *)(v52 + 216) = 0;
      *(_OWORD *)(v52 + 16) = 0u;
      *(_OWORD *)(v52 + 32) = 0u;
      *(_OWORD *)(v52 + 48) = 0u;
      *(_OWORD *)(v52 + 64) = 0u;
      *(_OWORD *)(v52 + 80) = 0u;
      *(_OWORD *)(v52 + 96) = 0u;
      *(_OWORD *)(v52 + 112) = 0u;
      *(_OWORD *)(v52 + 128) = 0u;
      *(_OWORD *)(v52 + 144) = 0u;
      *(_OWORD *)(v52 + 160) = 0u;
      *(_OWORD *)(v52 + 176) = 0u;
      *(_OWORD *)(v52 + 192) = 0u;
      *(void *)(v52 + 224) = 0;
      unint64_t v55 = v52 | 0x8000000000000000;
      unint64_t v43 = v129;
    }
    else
    {
      uint64_t v81 = -1 << *(unsigned char *)(v129 + 32);
      uint64_t v53 = ~v81;
      uint64_t v82 = *(void *)(v129 + 56);
      BOOL v122 = (void *)(v129 + 56);
      uint64_t v83 = -v81;
      if (v83 < 64) {
        uint64_t v84 = ~(-1 << v83);
      }
      else {
        uint64_t v84 = -1;
      }
      unint64_t v54 = v84 & v82;
      unint64_t v55 = v129;
    }
    uint64_t v85 = v55 & 0x7FFFFFFFFFFFFFFFLL;
    uint64_t v119 = (v55 & 0x7FFFFFFFFFFFFFFFLL) + 80;
    int64_t v120 = (v55 & 0x7FFFFFFFFFFFFFFFLL) + 16;
    int64_t v129 = v130 + 56;
    uint64_t v114 = (void (**)(char *, void *, Class *))(i + 2);
    int64_t v113 = (unsigned int (**)(char *, uint64_t, uint64_t *))(v130 + 48);
    unint64_t v112 = (unsigned int (**)(void, uint64_t, uint64_t *))(i + 1);
    unint64_t v128 = (atomic_ullong *)(v130 + 32);
    unint64_t v117 = (char *)v53;
    int64_t v121 = (unint64_t)(v53 + 64) >> 6;
    int64_t v125 = v130 + 16;
    unint64_t v86 = (void (**)(char *, char *, ValueMetadata *))(v126 + 32);
    swift_bridgeObjectRetain(v43);
    unint64_t v126 = 0;
    int64_t v124 = &unk_1ECA06328;
    for (i = (void (**)(void, void, void))v55; ; unint64_t v55 = (unint64_t)i)
    {
      if ((v55 & 0x8000000000000000) != 0)
      {
        uint64_t v99 = *(void *)(v85 + 216);
        if (v99 < 0) {
          goto LABEL_100;
        }
        if (v99 == *(void *)(v85 + 224))
        {
          id v100 = [*(id *)(v85 + 208) countByEnumeratingWithState:v120 objects:v119 count:16];
          *(void *)(v85 + 224) = v100;
          if (!v100)
          {
            *(void *)(v85 + 216) = -1;
            goto LABEL_100;
          }
          uint64_t v99 = 0;
          *(void *)(v85 + 216) = 0;
        }
        uint64_t v101 = *(void *)(v85 + 24);
        if (!v101) {
          goto LABEL_110;
        }
        size_t v102 = (void (**)(char *, uint64_t, uint64_t, uint64_t *))v129;
        if ((unint64_t)(v99 - 0x1000000000000000) >> 61 != 7) {
          goto LABEL_106;
        }
        uint64_t v103 = (void **)(v101 + 8 * v99);
        if ((v103 & 7) != 0) {
LABEL_103:
        }
          _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "load from misaligned raw pointer", 32, 2, "Swift/UnsafeRawPointer.swift", 28, 2, 0x4F9uLL, 0);
        long long v104 = *v103;
        *(void *)(v85 + 216) = v99 + 1;
        swift_unknownObjectRetain(v104);
        if (_swift_isClassOrObjCExistentialType((uint64_t)a2, a2))
        {
          Swift::String::Index v133 = v104;
          swift_dynamicCast(v35, &v133, v124, a2, 7);
          int64_t v105 = *v102;
        }
        else
        {
          int64_t v105 = *v102;
          v105(v118, 1, 1, a2);
          _bridgeNonVerbatimFromObjectiveC<A>(_:_:_:)((swift *)v104, (uint64_t)a2, v118);
          swift_unknownObjectRelease(v104);
          unint64_t v106 = v116;
          (*v114)(v116, v118, v115);
          if ((*v113)(v106, 1, a2) == 1) {
LABEL_111:
          }
            _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/BridgeObjectiveC.swift", 28, 2, 0xFCuLL, 0);
          ((void (*)(char *, Class *))*v112)(v118, v115);
          ((void (*)(char *, char *, uint64_t *))*v128)(v35, v106, a2);
        }
        v105(v35, 0, 1, a2);
        a5 = v123;
      }
      else
      {
        if (v54)
        {
          unint64_t v87 = __clz(__rbit64(v54));
          v54 &= v54 - 1;
          unint64_t v88 = v87 | (v126 << 6);
        }
        else
        {
          int64_t v95 = v126 + 1;
          if (__OFADD__(v126, 1)) {
            goto LABEL_108;
          }
          if (v95 >= v121) {
            goto LABEL_100;
          }
          unint64_t v96 = v122[v95];
          int64_t v97 = v126 + 1;
          if (!v96)
          {
            int64_t v97 = v126 + 2;
            if ((uint64_t)(v126 + 2) >= v121) {
              goto LABEL_100;
            }
            unint64_t v96 = v122[v97];
            if (!v96)
            {
              unint64_t v98 = v126 + 3;
              if ((uint64_t)(v126 + 3) >= v121) {
                goto LABEL_100;
              }
              unint64_t v96 = v122[v98];
              if (!v96)
              {
                while (1)
                {
                  int64_t v97 = v98 + 1;
                  if (__OFADD__(v98, 1)) {
                    goto LABEL_109;
                  }
                  if (v97 >= v121) {
                    break;
                  }
                  unint64_t v96 = v122[v97];
                  ++v98;
                  if (v96) {
                    goto LABEL_93;
                  }
                }
LABEL_100:
                (*(void (**)(char *, uint64_t, uint64_t, uint64_t *))v129)(v35, 1, 1, a2);
                uint64_t v80 = v55;
                goto LABEL_101;
              }
              int64_t v97 = v126 + 3;
            }
          }
LABEL_93:
          unint64_t v54 = (v96 - 1) & v96;
          unint64_t v88 = __clz(__rbit64(v96)) + (v97 << 6);
          unint64_t v126 = v97;
        }
        uint64_t v89 = v130;
        (*(void (**)(char *, unint64_t, uint64_t *))(v130 + 16))(v35, *(void *)(v55 + 48) + *(void *)(v130 + 72) * v88, a2);
        (*(void (**)(char *, void, uint64_t, uint64_t *))(v89 + 56))(v35, 0, 1, a2);
      }
      uint64_t v90 = v132;
      ((void (*)(char *, char *, uint64_t *))*v128)(v132, v35, a2);
      swift_dynamicCast(v15, v90, a2, &type metadata for String, 7);
      Swift::Int v91 = *v86;
      unint64_t v92 = v131;
      (*v86)(v131, v15, &type metadata for String);
      v91(v15, v92, &type metadata for String);
      unint64_t v94 = type metadata accessor for _NativeSet(0, (uint64_t)&type metadata for String, a5, v93);
      _NativeSet._unsafeUpdate(with:)((uint64_t)v15, (uint64_t)v94);
    }
  }
  uint64_t v114 = (void (**)(char *, void *, Class *))v23;
  unint64_t v128 = v42;
  if (v39)
  {
    if (v129 < 0) {
      unint64_t v44 = v129;
    }
    else {
      unint64_t v44 = v129 & 0xFFFFFFFFFFFFFF8;
    }
    unint64_t v45 = (unint64_t *)type metadata accessor for __CocoaSet.Iterator();
    unint64_t v46 = (unint64_t)swift_allocObject(v45, 0xE8uLL, 7uLL);
    int64_t v121 = 0;
    uint64_t v47 = 0;
    unint64_t v48 = 0;
    *(void *)(v46 + 208) = v44;
    *(void *)(v46 + 216) = 0;
    *(_OWORD *)(v46 + 16) = 0u;
    *(_OWORD *)(v46 + 32) = 0u;
    *(_OWORD *)(v46 + 48) = 0u;
    *(_OWORD *)(v46 + 64) = 0u;
    *(_OWORD *)(v46 + 80) = 0u;
    *(_OWORD *)(v46 + 96) = 0u;
    *(_OWORD *)(v46 + 112) = 0u;
    *(_OWORD *)(v46 + 128) = 0u;
    *(_OWORD *)(v46 + 144) = 0u;
    *(_OWORD *)(v46 + 160) = 0u;
    *(_OWORD *)(v46 + 176) = 0u;
    *(_OWORD *)(v46 + 192) = 0u;
    *(void *)(v46 + 224) = 0;
    unint64_t v49 = v46 | 0x8000000000000000;
    uint64_t v42 = v128;
    unint64_t v43 = v129;
  }
  else
  {
    uint64_t v56 = -1 << *(unsigned char *)(v129 + 32);
    uint64_t v47 = ~v56;
    uint64_t v57 = *(void *)(v129 + 56);
    int64_t v121 = v129 + 56;
    uint64_t v58 = -v56;
    if (v58 < 64) {
      uint64_t v59 = ~(-1 << v58);
    }
    else {
      uint64_t v59 = -1;
    }
    unint64_t v48 = v59 & v57;
    unint64_t v49 = v129;
  }
  uint64_t v60 = v49 & 0x7FFFFFFFFFFFFFFFLL;
  uint64_t v118 = (char *)((v49 & 0x7FFFFFFFFFFFFFFFLL) + 80);
  uint64_t v119 = (v49 & 0x7FFFFFFFFFFFFFFFLL) + 16;
  int64_t v129 = v130 + 56;
  int64_t v113 = (unsigned int (**)(char *, uint64_t, uint64_t *))(i + 2);
  unint64_t v112 = (unsigned int (**)(void, uint64_t, uint64_t *))(v130 + 48);
  int64_t v111 = (void (**)(char *, Class *))(i + 1);
  unint64_t i = (void (**)(void, void, void))(v130 + 32);
  unint64_t v116 = (char *)v47;
  int64_t v120 = (unint64_t)(v47 + 64) >> 6;
  int64_t v124 = (void *)(v130 + 16);
  uint64_t v61 = (void (**)(char *, char *, ValueMetadata *))(v126 + 32);
  swift_bridgeObjectRetain(v43);
  swift_retain(v42);
  int64_t v125 = 0;
  BOOL v122 = &unk_1ECA06328;
  unint64_t v126 = v49;
  while ((v49 & 0x8000000000000000) == 0)
  {
    if (v48)
    {
      unint64_t v62 = __clz(__rbit64(v48));
      v48 &= v48 - 1;
      unint64_t v63 = v62 | (v125 << 6);
    }
    else
    {
      int64_t v68 = v125 + 1;
      if (__OFADD__(v125, 1)) {
        goto LABEL_105;
      }
      if (v68 >= v120)
      {
LABEL_60:
        unint64_t v73 = (void (**)(char *, uint64_t, uint64_t, uint64_t *))v129;
        goto LABEL_61;
      }
      unint64_t v69 = *(void *)(v121 + 8 * v68);
      int64_t v70 = v125 + 1;
      if (!v69)
      {
        int64_t v70 = v125 + 2;
        if (v125 + 2 >= v120) {
          goto LABEL_60;
        }
        unint64_t v69 = *(void *)(v121 + 8 * v70);
        if (!v69)
        {
          int64_t v71 = v125 + 3;
          if (v125 + 3 >= v120) {
            goto LABEL_60;
          }
          unint64_t v69 = *(void *)(v121 + 8 * v71);
          if (!v69)
          {
            while (1)
            {
              int64_t v70 = v71 + 1;
              if (__OFADD__(v71, 1)) {
                goto LABEL_107;
              }
              if (v70 >= v120) {
                goto LABEL_60;
              }
              unint64_t v69 = *(void *)(v121 + 8 * v70);
              ++v71;
              if (v69) {
                goto LABEL_57;
              }
            }
          }
          int64_t v70 = v125 + 3;
        }
      }
LABEL_57:
      unint64_t v48 = (v69 - 1) & v69;
      unint64_t v63 = __clz(__rbit64(v69)) + (v70 << 6);
      int64_t v125 = v70;
    }
    uint64_t v64 = v130;
    (*(void (**)(char *, unint64_t, uint64_t *))(v130 + 16))(v33, *(void *)(v49 + 48) + *(void *)(v130 + 72) * v63, a2);
    (*(void (**)(char *, void, uint64_t, uint64_t *))(v64 + 56))(v33, 0, 1, a2);
LABEL_33:
    unint64_t v65 = v132;
    (*i)(v132, v33, a2);
    swift_dynamicCast(v15, v65, a2, a3, 7);
    char v66 = *v61;
    unint64_t v67 = v131;
    (*v61)(v131, v15, a3);
    v66(v15, v67, a3);
    uint64_t v42 = v128;
    _NativeSet._unsafeInsertNew(_:)((uint64_t)v15, (uint64_t)v128, (uint64_t)a3, a5);
    unint64_t v49 = v126;
  }
  uint64_t v72 = *(void *)(v60 + 216);
  if (v72 < 0) {
    goto LABEL_60;
  }
  unint64_t v73 = (void (**)(char *, uint64_t, uint64_t, uint64_t *))v129;
  if (v72 != *(void *)(v60 + 224))
  {
LABEL_48:
    uint64_t v75 = *(void *)(v60 + 24);
    if (!v75) {
      goto LABEL_110;
    }
    if ((unint64_t)(v72 - 0x1000000000000000) >> 61 != 7)
    {
      __break(1u);
LABEL_105:
      __break(1u);
LABEL_106:
      __break(1u);
LABEL_107:
      __break(1u);
LABEL_108:
      __break(1u);
LABEL_109:
      __break(1u);
LABEL_110:
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/SetBridging.swift", 23, 2, 0x254uLL, 0);
    }
    unint64_t v76 = (void **)(v75 + 8 * v72);
    if ((v76 & 7) != 0) {
      goto LABEL_103;
    }
    char v77 = *v76;
    *(void *)(v60 + 216) = v72 + 1;
    swift_unknownObjectRetain(v77);
    if (_swift_isClassOrObjCExistentialType((uint64_t)a2, a2))
    {
      Swift::String::Index v133 = v77;
      swift_dynamicCast(v33, &v133, v122, a2, 7);
      unint64_t v78 = *v73;
    }
    else
    {
      unint64_t v78 = *v73;
      v78(v117, 1, 1, a2);
      _bridgeNonVerbatimFromObjectiveC<A>(_:_:_:)((swift *)v77, (uint64_t)a2, v117);
      swift_unknownObjectRelease(v77);
      uint64_t v79 = (void (**)(void, void *, void))v114;
      (*v113)((char *)v114, (uint64_t)v117, (uint64_t *)v115);
      if ((*v112)(v79, 1, a2) == 1) {
        goto LABEL_111;
      }
      (*v111)(v117, v115);
      (*i)(v33, v79, a2);
    }
    v78(v33, 0, 1, a2);
    a5 = v123;
    goto LABEL_33;
  }
  id v74 = [*(id *)(v60 + 208) countByEnumeratingWithState:v119 objects:v118 count:16];
  *(void *)(v60 + 224) = v74;
  if (v74)
  {
    uint64_t v72 = 0;
    *(void *)(v60 + 216) = 0;
    goto LABEL_48;
  }
  *(void *)(v60 + 216) = -1;
LABEL_61:
  (*v73)(v33, 1, 1, a2);
  swift_release((uint64_t)v42);
  uint64_t v80 = v49;
LABEL_101:
  outlined consume of [A : B].Iterator._Variant<A, B>(v80);
  return (uint64_t)v134;
}

BOOL _swift_setDownCastConditionalIndirect(unint64_t *a1, uint64_t *a2, uint64_t *a3, ValueMetadata *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10 = *a1;
  unint64_t v11 = swift_bridgeObjectRetain(*a1);
  uint64_t v13 = _setDownCastConditional<A, B>(_:)(v11, a3, a4, v12, a6);
  swift_bridgeObjectRelease(v10);
  if (v13) {
    *a2 = v13;
  }
  return v13 != 0;
}

uint64_t _setDownCastConditional<A, B>(_:)(uint64_t a1, uint64_t *a2, ValueMetadata *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v152 = a5;
  uint64_t v149 = *(a2 - 1);
  uint64_t v8 = MEMORY[0x1F4188790](a1);
  uint64_t v146 = (void (**)(char *, char *, uint64_t *))((char *)&v124 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1F4188790](v8);
  unint64_t v150 = (char *)&v124 - v10;
  Swift::String::Index v131 = type metadata accessor for Optional(0, v11, v11, v12);
  uint64_t v130 = (uint64_t)*(v131 - 1);
  uint64_t v13 = MEMORY[0x1F4188790](v131);
  uint64_t v15 = (char *)&v124 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = MEMORY[0x1F4188790](v13);
  uint64_t v18 = (char *)&v124 - v17;
  Description = (char *)a3[-1].Description;
  uint64_t v19 = MEMORY[0x1F4188790](v16);
  char v143 = (unsigned int (**)(char *, uint64_t, ValueMetadata *))((char *)&v124
                                                                        - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v21 = MEMORY[0x1F4188790](v19);
  unint64_t v151 = (char *)&v124 - v22;
  MEMORY[0x1F4188790](v21);
  unint64_t v148 = (unint64_t)&v124 - v23;
  unint64_t v128 = type metadata accessor for Optional(0, (uint64_t)a2, v24, v25);
  unint64_t v144 = (atomic_ullong *)*(v128 - 1);
  uint64_t v26 = MEMORY[0x1F4188790](v128);
  uint64_t v28 = (char *)&v124 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = MEMORY[0x1F4188790](v26);
  unint64_t v147 = (char *)&v124 - v30;
  uint64_t v31 = MEMORY[0x1F4188790](v29);
  Swift::String::Index v133 = (char *)&v124 - v32;
  uint64_t v33 = MEMORY[0x1F4188790](v31);
  Swift::String::Index v134 = (char *)&v124 - v34;
  uint64_t v35 = MEMORY[0x1F4188790](v33);
  unint64_t v37 = (char *)&v124 - v36;
  MEMORY[0x1F4188790](v35);
  uint64_t v40 = (char *)&v124 - v39;
  unint64_t v41 = a1 & 0xC000000000000001;
  if ((a1 & 0xC000000000000001) != 0)
  {
    int64_t v42 = a1;
    if (a1 < 0) {
      unint64_t v43 = (void *)a1;
    }
    else {
      unint64_t v43 = (void *)(a1 & 0xFFFFFFFFFFFFFF8);
    }
    id v44 = [v43 count];
    if (v44) {
      goto LABEL_6;
    }
  }
  else
  {
    int64_t v42 = a1;
    id v44 = *(id *)(a1 + 16);
    if (v44)
    {
LABEL_6:
      type metadata accessor for _SetStorage(0, (uint64_t)a3, v152, v38);
      unint64_t v45 = (atomic_ullong *)static _SetStorage.allocate(capacity:)((uint64_t)v44);
      goto LABEL_9;
    }
  }
  unint64_t v45 = (atomic_ullong *)&_swiftEmptySetSingleton;
LABEL_9:
  char v154 = v45;
  if (a3 != &type metadata for String)
  {
    uint64_t v145 = (uint64_t)v37;
    if (v41)
    {
      unint64_t v46 = v45;
      if (v42 < 0) {
        uint64_t v47 = v42;
      }
      else {
        uint64_t v47 = v42 & 0xFFFFFFFFFFFFFF8;
      }
      unint64_t v48 = (unint64_t *)type metadata accessor for __CocoaSet.Iterator();
      unint64_t v49 = (unint64_t)swift_allocObject(v48, 0xE8uLL, 7uLL);
      uint64_t v135 = 0;
      uint64_t v50 = 0;
      unint64_t v51 = 0;
      *(void *)(v49 + 208) = v47;
      *(void *)(v49 + 216) = 0;
      unint64_t v45 = v46;
      *(_OWORD *)(v49 + 16) = 0u;
      *(_OWORD *)(v49 + 32) = 0u;
      *(_OWORD *)(v49 + 48) = 0u;
      *(_OWORD *)(v49 + 64) = 0u;
      *(_OWORD *)(v49 + 80) = 0u;
      *(_OWORD *)(v49 + 96) = 0u;
      *(_OWORD *)(v49 + 112) = 0u;
      *(_OWORD *)(v49 + 128) = 0u;
      *(_OWORD *)(v49 + 144) = 0u;
      *(_OWORD *)(v49 + 160) = 0u;
      *(_OWORD *)(v49 + 176) = 0u;
      *(_OWORD *)(v49 + 192) = 0u;
      *(void *)(v49 + 224) = 0;
      unint64_t v52 = v49 | 0x8000000000000000;
    }
    else
    {
      uint64_t v59 = -1 << *(unsigned char *)(v42 + 32);
      uint64_t v50 = ~v59;
      uint64_t v60 = *(void *)(v42 + 56);
      uint64_t v135 = v42 + 56;
      uint64_t v61 = -v59;
      if (v61 < 64) {
        uint64_t v62 = ~(-1 << v61);
      }
      else {
        uint64_t v62 = -1;
      }
      unint64_t v51 = v62 & v60;
      unint64_t v52 = v42;
    }
    unint64_t v63 = v147;
    unint64_t v148 = v52;
    uint64_t v64 = v52 & 0x7FFFFFFFFFFFFFFFLL;
    Swift::String::Index v133 = (char *)(v64 + 16);
    uint64_t v137 = v64;
    uint64_t v132 = v64 + 80;
    unint64_t v150 = (char *)(v149 + 56);
    BOOL v127 = (unsigned int (**)(char *, uint64_t, uint64_t *))(v144 + 2);
    unint64_t v126 = (unsigned int (**)(char *, uint64_t, uint64_t *))(v149 + 48);
    int64_t v125 = (void (**)(char *, Class *))(v144 + 1);
    unint64_t v142 = (void (**)(uint64_t, uint64_t, uint64_t *))(v149 + 32);
    int64_t v129 = (void (**)(char *, char *, Class *))v50;
    Swift::String::Index v134 = (char *)((unint64_t)(v50 + 64) >> 6);
    int64_t v138 = v149 + 16;
    uint64_t v140 = (uint64_t)(Description + 48);
    unint64_t v141 = (void (**)(char *, void, uint64_t, ValueMetadata *))(Description + 56);
    unint64_t v65 = (void (**)(char *, char *, ValueMetadata *))(Description + 32);
    swift_bridgeObjectRetain(v42);
    unint64_t v144 = v45;
    swift_retain(v45);
    uint64_t v66 = 0;
    Description = (char *)&unk_1ECA06328;
    unint64_t v139 = v28;
    uint64_t v67 = v148;
    if ((v148 & 0x8000000000000000) != 0) {
      goto LABEL_27;
    }
LABEL_25:
    if (v51)
    {
      uint64_t v68 = (v51 - 1) & v51;
      unint64_t v69 = __clz(__rbit64(v51)) | (v66 << 6);
      uint64_t v70 = v66;
LABEL_49:
      uint64_t v83 = v149;
      uint64_t v77 = v145;
      (*(void (**)(uint64_t, unint64_t, uint64_t *))(v149 + 16))(v145, *(void *)(v67 + 48) + *(void *)(v149 + 72) * v69, a2);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t *))(v83 + 56))(v77, 0, 1, a2);
      while (1)
      {
        uint64_t v84 = v146;
        (*v142)((uint64_t)v146, v77, a2);
        int v85 = swift_dynamicCast(v15, v84, a2, a3, 6);
        (*v141)(v15, v85 ^ 1u, 1, a3);
        if ((*(unsigned int (**)(char *, uint64_t, ValueMetadata *))v140)(v15, 1, a3) == 1)
        {
          uint64_t v91 = (uint64_t)v154;
          swift_release((uint64_t)v144);
          swift_release(v91);
          outlined consume of [A : B].Iterator._Variant<A, B>(v148);
          (*(void (**)(char *, Class *))(v130 + 8))(v15, v131);
          return 0;
        }
        unint64_t v86 = *v65;
        unint64_t v87 = v143;
        (*v65)((char *)v143, v15, a3);
        uint64_t v88 = (uint64_t)v151;
        v86(v151, (char *)v87, a3);
        _NativeSet._unsafeInsertNew(_:)(v88, (uint64_t)v144, (uint64_t)a3, v152);
        uint64_t v66 = v70;
        unint64_t v51 = v68;
        uint64_t v28 = v139;
        unint64_t v63 = v147;
        uint64_t v67 = v148;
        if ((v148 & 0x8000000000000000) == 0) {
          goto LABEL_25;
        }
LABEL_27:
        uint64_t v71 = v137;
        uint64_t v72 = *(void *)(v137 + 216);
        if (v72 < 0) {
          goto LABEL_97;
        }
        if (v72 == *(void *)(v137 + 224))
        {
          id v73 = [*(id *)(v137 + 208) countByEnumeratingWithState:v133 objects:v132 count:16];
          uint64_t v71 = v137;
          *(void *)(v137 + 224) = v73;
          if (!v73)
          {
            *(void *)(v71 + 216) = -1;
            goto LABEL_97;
          }
          uint64_t v72 = 0;
          *(void *)(v71 + 216) = 0;
        }
        uint64_t v74 = *(void *)(v71 + 24);
        if (!v74) {
          goto LABEL_109;
        }
        if ((unint64_t)(v72 - 0x1000000000000000) >> 61 != 7)
        {
          __break(1u);
LABEL_104:
          __break(1u);
LABEL_105:
          __break(1u);
LABEL_106:
          __break(1u);
LABEL_107:
          __break(1u);
LABEL_108:
          __break(1u);
LABEL_109:
          _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/SetBridging.swift", 23, 2, 0x254uLL, 0);
        }
        uint64_t v75 = (void **)(v74 + 8 * v72);
        if ((v75 & 7) != 0) {
          goto LABEL_102;
        }
        unint64_t v76 = *v75;
        *(void *)(v71 + 216) = v72 + 1;
        swift_unknownObjectRetain(v76);
        if (_swift_isClassOrObjCExistentialType((uint64_t)a2, a2))
        {
          int64_t v153 = v76;
          uint64_t v77 = v145;
          swift_dynamicCast(v145, &v153, Description, a2, 7);
          unint64_t v78 = *(void (**)(uint64_t, void, uint64_t, uint64_t *))v150;
        }
        else
        {
          unint64_t v78 = *(void (**)(uint64_t, void, uint64_t, uint64_t *))v150;
          (*(void (**)(void *, uint64_t, uint64_t, uint64_t *))v150)(v63, 1, 1, a2);
          _bridgeNonVerbatimFromObjectiveC<A>(_:_:_:)((swift *)v76, (uint64_t)a2, v63);
          swift_unknownObjectRelease(v76);
          uint64_t v89 = v63;
          uint64_t v90 = v128;
          (*v127)(v28, (uint64_t)v89, (uint64_t *)v128);
          if ((*v126)(v28, 1, a2) == 1) {
            goto LABEL_110;
          }
          (*v125)(v147, v90);
          uint64_t v77 = v145;
          (*v142)(v145, (uint64_t)v139, a2);
        }
        v78(v77, 0, 1, a2);
        uint64_t v70 = v66;
        uint64_t v68 = v51;
      }
    }
    uint64_t v79 = v66 + 1;
    if (__OFADD__(v66, 1)) {
      goto LABEL_104;
    }
    if (v79 >= (uint64_t)v134)
    {
LABEL_97:
      uint64_t v81 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t *))v150;
    }
    else
    {
      unint64_t v80 = *(void *)(v135 + 8 * v79);
      uint64_t v70 = v66 + 1;
      uint64_t v81 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t *))v150;
      if (v80) {
        goto LABEL_48;
      }
      uint64_t v70 = v66 + 2;
      if (v66 + 2 < (uint64_t)v134)
      {
        unint64_t v80 = *(void *)(v135 + 8 * v70);
        if (!v80)
        {
          uint64_t v82 = v66 + 3;
          if (v66 + 3 < (uint64_t)v134)
          {
            unint64_t v80 = *(void *)(v135 + 8 * v82);
            if (v80)
            {
              uint64_t v70 = v66 + 3;
              goto LABEL_48;
            }
            while (1)
            {
              uint64_t v70 = v82 + 1;
              if (__OFADD__(v82, 1)) {
                goto LABEL_106;
              }
              if (v70 >= (uint64_t)v134) {
                break;
              }
              unint64_t v80 = *(void *)(v135 + 8 * v70);
              ++v82;
              if (v80) {
                goto LABEL_48;
              }
            }
          }
          goto LABEL_98;
        }
LABEL_48:
        uint64_t v68 = (v80 - 1) & v80;
        unint64_t v69 = __clz(__rbit64(v80)) + (v70 << 6);
        goto LABEL_49;
      }
    }
LABEL_98:
    (*v81)(v145, 1, 1, a2);
    swift_release((uint64_t)v144);
    uint64_t v123 = v148;
LABEL_101:
    outlined consume of [A : B].Iterator._Variant<A, B>(v123);
    return (uint64_t)v154;
  }
  if (v41)
  {
    if (v42 < 0) {
      uint64_t v53 = v42;
    }
    else {
      uint64_t v53 = v42 & 0xFFFFFFFFFFFFFF8;
    }
    unint64_t v54 = (unint64_t *)type metadata accessor for __CocoaSet.Iterator();
    unint64_t v55 = (unint64_t)swift_allocObject(v54, 0xE8uLL, 7uLL);
    int64_t v138 = 0;
    uint64_t v56 = 0;
    unint64_t v57 = 0;
    *(void *)(v55 + 208) = v53;
    *(void *)(v55 + 216) = 0;
    *(_OWORD *)(v55 + 16) = 0u;
    *(_OWORD *)(v55 + 32) = 0u;
    *(_OWORD *)(v55 + 48) = 0u;
    *(_OWORD *)(v55 + 64) = 0u;
    *(_OWORD *)(v55 + 80) = 0u;
    *(_OWORD *)(v55 + 96) = 0u;
    *(_OWORD *)(v55 + 112) = 0u;
    *(_OWORD *)(v55 + 128) = 0u;
    *(_OWORD *)(v55 + 144) = 0u;
    *(_OWORD *)(v55 + 160) = 0u;
    *(_OWORD *)(v55 + 176) = 0u;
    *(_OWORD *)(v55 + 192) = 0u;
    *(void *)(v55 + 224) = 0;
    unint64_t v58 = v55 | 0x8000000000000000;
  }
  else
  {
    uint64_t v92 = -1 << *(unsigned char *)(v42 + 32);
    uint64_t v56 = ~v92;
    uint64_t v93 = *(void *)(v42 + 56);
    int64_t v138 = v42 + 56;
    uint64_t v94 = -v92;
    if (v94 < 64) {
      uint64_t v95 = ~(-1 << v94);
    }
    else {
      uint64_t v95 = -1;
    }
    unint64_t v57 = v95 & v93;
    unint64_t v58 = v42;
  }
  uint64_t v137 = (v58 & 0x7FFFFFFFFFFFFFFFLL) + 16;
  uint64_t v140 = v58 & 0x7FFFFFFFFFFFFFFFLL;
  uint64_t v135 = (v58 & 0x7FFFFFFFFFFFFFFFLL) + 80;
  unint64_t v147 = (char *)(v149 + 56);
  int64_t v129 = (void (**)(char *, char *, Class *))(v144 + 2);
  BOOL v127 = (unsigned int (**)(char *, uint64_t, uint64_t *))(v149 + 48);
  unint64_t v126 = (unsigned int (**)(char *, uint64_t, uint64_t *))(v144 + 1);
  uint64_t v146 = (void (**)(char *, char *, uint64_t *))(v149 + 32);
  uint64_t v132 = v56;
  unint64_t v141 = (void (**)(char *, void, uint64_t, ValueMetadata *))((unint64_t)(v56 + 64) >> 6);
  unint64_t v142 = (void (**)(uint64_t, uint64_t, uint64_t *))(v149 + 16);
  char v143 = (unsigned int (**)(char *, uint64_t, ValueMetadata *))(Description + 48);
  unint64_t v144 = (atomic_ullong *)(Description + 56);
  unint64_t v96 = (void (**)(uint64_t, char *, ValueMetadata *))(Description + 32);
  swift_bridgeObjectRetain(v42);
  uint64_t v97 = 0;
  unint64_t v139 = (char *)&unk_1ECA06328;
  uint64_t v145 = v58;
  if ((v58 & 0x8000000000000000) != 0) {
    goto LABEL_63;
  }
LABEL_61:
  if (v57)
  {
    uint64_t v98 = (v57 - 1) & v57;
    unint64_t v99 = __clz(__rbit64(v57)) | (v97 << 6);
    uint64_t v100 = v97;
    goto LABEL_85;
  }
  uint64_t v109 = v97 + 1;
  if (__OFADD__(v97, 1)) {
    goto LABEL_107;
  }
  if (v109 >= (uint64_t)v141) {
    goto LABEL_100;
  }
  unint64_t v110 = *(void *)(v138 + 8 * v109);
  uint64_t v100 = v97 + 1;
  if (!v110)
  {
    uint64_t v100 = v97 + 2;
    if (v97 + 2 >= (uint64_t)v141) {
      goto LABEL_100;
    }
    unint64_t v110 = *(void *)(v138 + 8 * v100);
    if (!v110)
    {
      uint64_t v111 = v97 + 3;
      if (v97 + 3 < (uint64_t)v141)
      {
        unint64_t v110 = *(void *)(v138 + 8 * v111);
        if (v110)
        {
          uint64_t v100 = v97 + 3;
          goto LABEL_84;
        }
        while (1)
        {
          uint64_t v100 = v111 + 1;
          if (__OFADD__(v111, 1)) {
            goto LABEL_108;
          }
          if (v100 >= (uint64_t)v141) {
            break;
          }
          unint64_t v110 = *(void *)(v138 + 8 * v100);
          ++v111;
          if (v110) {
            goto LABEL_84;
          }
        }
      }
LABEL_100:
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t *))v147)(v40, 1, 1, a2);
      uint64_t v123 = v58;
      goto LABEL_101;
    }
  }
LABEL_84:
  uint64_t v98 = (v110 - 1) & v110;
  unint64_t v99 = __clz(__rbit64(v110)) + (v100 << 6);
LABEL_85:
  uint64_t v112 = *(void *)(v58 + 48);
  uint64_t v113 = v149;
  (*(void (**)(char *, unint64_t, uint64_t *))(v149 + 16))(v40, v112 + *(void *)(v149 + 72) * v99, a2);
  (*(void (**)(char *, void, uint64_t, uint64_t *))(v113 + 56))(v40, 0, 1, a2);
  while (1)
  {
    uint64_t v114 = v150;
    (*v146)(v150, v40, a2);
    int v115 = swift_dynamicCast(v18, v114, a2, &type metadata for String, 6);
    ((void (*)(char *, void, uint64_t, ValueMetadata *))*v144)(v18, v115 ^ 1u, 1, &type metadata for String);
    if ((*v143)(v18, 1, &type metadata for String) == 1) {
      break;
    }
    unint64_t v116 = *v96;
    uint64_t v117 = v148;
    (*v96)(v148, v18, &type metadata for String);
    uint64_t v118 = (uint64_t)v151;
    v116((uint64_t)v151, (char *)v117, &type metadata for String);
    int64_t v120 = type metadata accessor for _NativeSet(0, (uint64_t)&type metadata for String, v152, v119);
    _NativeSet._unsafeUpdate(with:)(v118, (uint64_t)v120);
    uint64_t v97 = v100;
    unint64_t v57 = v98;
    unint64_t v58 = v145;
    if ((v145 & 0x8000000000000000) == 0) {
      goto LABEL_61;
    }
LABEL_63:
    uint64_t v101 = (void *)v140;
    uint64_t v102 = *(void *)(v140 + 216);
    if (v102 < 0) {
      goto LABEL_100;
    }
    if (v102 == *(void *)(v140 + 224))
    {
      id v103 = [*(id *)(v140 + 208) countByEnumeratingWithState:v137 objects:v135 count:16];
      v101[28] = v103;
      if (!v103)
      {
        v101[27] = -1;
        goto LABEL_100;
      }
      uint64_t v102 = 0;
      v101[27] = 0;
    }
    uint64_t v104 = v101[3];
    if (!v104) {
      goto LABEL_109;
    }
    int64_t v105 = (void (**)(char *, uint64_t, uint64_t, uint64_t *))v147;
    if ((unint64_t)(v102 - 0x1000000000000000) >> 61 != 7) {
      goto LABEL_105;
    }
    unint64_t v106 = (void **)(v104 + 8 * v102);
    if ((v106 & 7) != 0) {
LABEL_102:
    }
      _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "load from misaligned raw pointer", 32, 2, "Swift/UnsafeRawPointer.swift", 28, 2, 0x4F9uLL, 0);
    unint64_t v107 = *v106;
    v101[27] = v102 + 1;
    swift_unknownObjectRetain(v107);
    if (_swift_isClassOrObjCExistentialType((uint64_t)a2, a2))
    {
      int64_t v153 = v107;
      swift_dynamicCast(v40, &v153, v139, a2, 7);
      id v108 = *v105;
    }
    else
    {
      id v108 = *v105;
      v108(v134, 1, 1, a2);
      _bridgeNonVerbatimFromObjectiveC<A>(_:_:_:)((swift *)v107, (uint64_t)a2, v134);
      swift_unknownObjectRelease(v107);
      int64_t v121 = v133;
      (*v129)(v133, v134, v128);
      if ((*v127)(v121, 1, a2) == 1) {
LABEL_110:
      }
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/BridgeObjectiveC.swift", 28, 2, 0xFCuLL, 0);
      ((void (*)(char *, Class *))*v126)(v134, v128);
      (*v146)(v40, v121, a2);
    }
    v108(v40, 0, 1, a2);
    uint64_t v100 = v97;
    uint64_t v98 = v57;
  }
  swift_release((uint64_t)v154);
  outlined consume of [A : B].Iterator._Variant<A, B>(v145);
  (*(void (**)(char *, Class *))(v130 + 8))(v18, v131);
  return 0;
}

uint64_t __RawSetStorage._count.setter(uint64_t result)
{
  *(void *)(v1 + 16) = result;
  return result;
}

uint64_t (*__RawSetStorage._count.modify())()
{
  return EnumeratedSequence._base.modify;
}

uint64_t __RawSetStorage._capacity.getter()
{
  return *(void *)(v0 + 24);
}

uint64_t __RawSetStorage._capacity.setter(uint64_t result)
{
  *(void *)(v1 + 24) = result;
  return result;
}

uint64_t (*__RawSetStorage._capacity.modify())()
{
  return EnumeratedSequence._base.modify;
}

uint64_t __RawSetStorage._scale.getter()
{
  return *(unsigned __int8 *)(v0 + 32);
}

uint64_t __RawSetStorage._scale.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 32) = result;
  return result;
}

uint64_t (*__RawSetStorage._scale.modify())()
{
  return EnumeratedSequence._base.modify;
}

uint64_t __RawSetStorage._reservedScale.getter()
{
  return *(unsigned __int8 *)(v0 + 33);
}

uint64_t __RawSetStorage._reservedScale.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 33) = result;
  return result;
}

uint64_t (*__RawSetStorage._reservedScale.modify())()
{
  return EnumeratedSequence._base.modify;
}

uint64_t __RawSetStorage._age.getter()
{
  return *(unsigned int *)(v0 + 36);
}

uint64_t __RawSetStorage._age.setter(uint64_t result)
{
  *(_DWORD *)(v1 + 36) = result;
  return result;
}

uint64_t (*__RawSetStorage._age.modify())()
{
  return EnumeratedSequence._base.modify;
}

uint64_t __RawSetStorage._seed.getter()
{
  return *(void *)(v0 + 40);
}

uint64_t __RawSetStorage._seed.setter(uint64_t result)
{
  *(void *)(v1 + 40) = result;
  return result;
}

uint64_t (*__RawSetStorage._seed.modify())()
{
  return EnumeratedSequence._base.modify;
}

uint64_t __RawSetStorage._rawElements.setter(uint64_t result)
{
  *(void *)(v1 + 48) = result;
  return result;
}

uint64_t (*__RawSetStorage._rawElements.modify())()
{
  return EnumeratedSequence._base.modify;
}

uint64_t __RawSetStorage._metadata.getter()
{
  return v0 + 56;
}

void __RawSetStorage.__allocating_init(coder:)()
{
}

void __RawSetStorage.init(coder:)()
{
}

uint64_t __RawSetStorage.deinit()
{
  return v0;
}

void __RawSetStorage.__deallocating_deinit()
{
  swift_deallocClassInstance(v0);
}

uint64_t __EmptySetSingleton.deinit()
{
  return v0;
}

uint64_t @objc __EmptyDictionarySingleton.countByEnumerating(with:objects:count:)(uint64_t a1, uint64_t a2, unint64_t *a3, unint64_t a4)
{
  unint64_t v4 = *a3;
  unint64_t v5 = a3[1];
  uint64_t v6 = (Swift::UInt *)a3[2];
  if (!*a3)
  {
    uint64_t v6 = &_fastEnumerationStorageMutationsTarget;
    unint64_t v5 = a4;
  }
  if (v4 <= 1) {
    unint64_t v4 = 1;
  }
  *a3 = v4;
  a3[1] = v5;
  a3[2] = (unint64_t)v6;
  return 0;
}

void _SetStorage.deinit()
{
  if (*(uint64_t *)(v0 + 16) < 1) {
    return;
  }
  uint64_t v1 = *(unint64_t **)(*(void *)v0 + 168);
  if ((*(unsigned char *)(*(v1 - 1) + 82) & 1) == 0) {
    return;
  }
  uint64_t v2 = *(v1 - 1);
  int64_t v3 = 0;
  uint64_t v4 = v0 + 56;
  uint64_t v5 = *(void *)(v0 + 48);
  uint64_t v6 = 1 << *(unsigned char *)(v0 + 32);
  uint64_t v7 = -1;
  if (v6 < 64) {
    uint64_t v7 = ~(-1 << v6);
  }
  unint64_t v8 = v7 & *(void *)(v0 + 56);
  int64_t v9 = (unint64_t)(v6 + 63) >> 6;
  while (1)
  {
    if (v8)
    {
      unint64_t v10 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v11 = v10 | (v3 << 6);
      goto LABEL_8;
    }
    if (__OFADD__(v3++, 1)) {
      goto LABEL_21;
    }
    if (v3 >= v9) {
      return;
    }
    unint64_t v13 = *(void *)(v4 + 8 * v3);
    if (!v13) {
      break;
    }
LABEL_19:
    unint64_t v8 = (v13 - 1) & v13;
    unint64_t v11 = __clz(__rbit64(v13)) + (v3 << 6);
LABEL_8:
    swift_arrayDestroy(v5 + *(void *)(v2 + 72) * v11, 1, v1);
  }
  int64_t v14 = v3 + 1;
  if (v3 + 1 >= v9) {
    return;
  }
  unint64_t v13 = *(void *)(v4 + 8 * v14);
  if (v13)
  {
    ++v3;
    goto LABEL_19;
  }
  while (1)
  {
    int64_t v3 = v14 + 1;
    if (__OFADD__(v14, 1)) {
      break;
    }
    if (v3 >= v9) {
      return;
    }
    unint64_t v13 = *(void *)(v4 + 8 * v3);
    ++v14;
    if (v13) {
      goto LABEL_19;
    }
  }
  __break(1u);
LABEL_21:
  __break(1u);
}

uint64_t _SetStorage._elements.getter()
{
  return *(void *)(v0 + 48);
}

void _SetStorage.__deallocating_deinit()
{
  _SetStorage.deinit();

  swift_deallocClassInstance(v0);
}

void @objc _SetStorage.init(objects:count:)()
{
}

id @objc _SetStorage.copy(with:)()
{
  uint64_t v0 = (void *)specialized _SetStorage.copy(with:)();

  return swift_unknownObjectRetain(v0);
}

uint64_t @objc _SetStorage.count.getter()
{
  return _ContiguousArrayStorage.count.getter();
}

void *_SetStorage.objectEnumerator()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = (unint64_t *)type metadata accessor for _SwiftSetNSEnumerator(0, *(void *)(*v4 + 168), *(void *)(*v4 + 176), a4);
  uint64_t v6 = swift_allocObject(v5, 0x30uLL, 7uLL);
  v6[2] = v4;
  v6[3] = 0;
  uint64_t v7 = -1 << *((unsigned char *)v4 + 32);
  v6[4] = _HashTable.startBucket.getter((unint64_t *)v4 + 7, ~v7);
  v6[5] = -v7;
  swift_retain(v4);
  return v6;
}

void *@objc _SetStorage.objectEnumerator()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = _SetStorage.objectEnumerator()(a1, a2, a3, a4);

  return v4;
}

uint64_t _SetStorage.countByEnumerating(with:objects:count:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = a1;
  uint64_t v7 = *(uint64_t **)(*(void *)v3 + 168);
  uint64_t v8 = *(v7 - 1);
  uint64_t v9 = MEMORY[0x1F4188790](a1);
  unint64_t v11 = (id *)((char *)&v32 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v46 = v10;
  MEMORY[0x1F4188790](v9);
  unint64_t v13 = (id *)((char *)&v32 - v12);
  int64_t v14 = (unint64_t *)(v3 + 56);
  uint64_t v15 = -1 << *(unsigned char *)(v3 + 32);
  uint64_t v16 = *(void *)v6;
  long long v17 = *(_OWORD *)(v6 + 32);
  long long v40 = *(_OWORD *)(v6 + 48);
  long long v41 = v17;
  uint64_t v47 = (unint64_t *)(v3 + 56);
  if (!v16)
  {
    unint64_t v27 = _HashTable.startBucket.getter(v14, ~v15);
    if ((v27 & 0x8000000000000000) != 0) {
      goto LABEL_39;
    }
    unint64_t v19 = v27;
    uint64_t v38 = a2;
    uint64_t v39 = &_fastEnumerationStorageMutationsTarget;
    uint64_t v16 = 1;
    int64_t v14 = v47;
    if (a2) {
      goto LABEL_3;
    }
    return 0;
  }
  uint64_t v18 = *(Swift::UInt **)(v6 + 16);
  unint64_t v19 = *(void *)(v6 + 24);
  uint64_t v38 = *(void *)(v6 + 8);
  uint64_t v39 = v18;
  if (!a2) {
    return 0;
  }
LABEL_3:
  if ((v19 & 0x8000000000000000) != 0) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Not enough bits to represent the passed value", 45, 2, "Swift/Integers.swift", 20, 2, 0xE67uLL, 0);
  }
  uint64_t v37 = v16;
  uint64_t v35 = v11;
  uint64_t v20 = -v15;
  if (v19 + v15
    && ((uint64_t)v19 >= v20
     || ((*(unint64_t *)((char *)v14 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v19) & 1) == 0))
  {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Invalid fast enumeration state", 30, 2, "Swift/SetStorage.swift", 22, 2, 0x124uLL, 0);
  }
  if (a3 < 0) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
  }
  if (!a3)
  {
    uint64_t v28 = v37;
    goto LABEL_35;
  }
  uint64_t v45 = a3;
  uint64_t v36 = v6;
  a3 = 0;
  uint64_t v43 = a2;
  uint64_t v44 = v8 + 16;
  unint64_t v42 = (unint64_t)(63 - v15) >> 6;
  unint64_t v34 = v42 - 3;
  uint64_t v32 = (void (**)(id *, id *, uint64_t *))(v8 + 32);
  uint64_t v33 = v3 + 80;
  do
  {
    if (v19 == v20)
    {
      unint64_t v19 = v20;
      goto LABEL_34;
    }
    (*(void (**)(id *, unint64_t, uint64_t *))(v8 + 16))(v13, *(void *)(v3 + 48) + *(void *)(v8 + 72) * v19, v7);
    if (_swift_isClassOrObjCExistentialType((uint64_t)v7, v7))
    {
      if (v46 != 8) {
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't unsafeBitCast between types of different sizes", 52, 2, "Swift/Builtin.swift", 19, 2, 0x5FuLL, 0);
      }
      uint64_t v21 = *v13;
      uint64_t v22 = *(void (**)(id *, uint64_t *))(v8 + 8);
      swift_unknownObjectRetain(*v13);
      v22(v13, v7);
    }
    else
    {
      uint64_t v26 = v35;
      (*v32)(v35, v13, v7);
      uint64_t v21 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(v26, v7);
    }
    if (a3 == 0x1000000000000000)
    {
      __break(1u);
LABEL_39:
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, 2, 0xD7BuLL, 0);
    }
    *(void *)(v43 + 8 * a3) = v21;
    swift_unknownObjectRelease(v21);
    unint64_t v23 = v19 >> 6;
    if ((v47[v19 >> 6] & (-2 << v19)) != 0)
    {
      unint64_t v19 = __clz(__rbit64(v47[v19 >> 6] & (-2 << v19))) | v19 & 0xFFFFFFFFFFFFFFC0;
      goto LABEL_11;
    }
    unint64_t v24 = v23 + 1;
    unint64_t v19 = v20;
    if (v23 + 1 < v42)
    {
      unint64_t v25 = v47[v24];
      if (v25) {
        goto LABEL_20;
      }
      unint64_t v24 = v23 + 2;
      unint64_t v19 = v20;
      if (v23 + 2 < v42)
      {
        unint64_t v25 = v47[v24];
        if (v25)
        {
LABEL_20:
          unint64_t v19 = __clz(__rbit64(v25)) + (v24 << 6);
          goto LABEL_11;
        }
        while (v34 != v23)
        {
          unint64_t v25 = *(void *)(v33 + 8 * v23++);
          if (v25)
          {
            unint64_t v24 = v23 + 2;
            goto LABEL_20;
          }
        }
        unint64_t v19 = v20;
      }
    }
LABEL_11:
    ++a3;
  }
  while (a3 != v45);
  uint64_t v20 = v19;
  a3 = v45;
LABEL_34:
  uint64_t v6 = v36;
  uint64_t v28 = v37;
  if (v20 < 0) {
    goto LABEL_39;
  }
LABEL_35:
  *(void *)uint64_t v6 = v28;
  uint64_t v29 = v39;
  *(void *)(v6 + 8) = v38;
  *(void *)(v6 + 16) = v29;
  *(void *)(v6 + 24) = v19;
  long long v30 = v40;
  *(_OWORD *)(v6 + 32) = v41;
  *(_OWORD *)(v6 + 48) = v30;
  return a3;
}

uint64_t @objc _SetStorage.countByEnumerating(with:objects:count:)(atomic_ullong *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return @objc _SwiftDeferredNSDictionary.countByEnumerating(with:objects:count:)(a1, a2, a3, a4, a5, _SetStorage.countByEnumerating(with:objects:count:));
}

uint64_t @objc _SwiftDeferredNSDictionary.countByEnumerating(with:objects:count:)(atomic_ullong *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(uint64_t, uint64_t, uint64_t))
{
  swift_retain(a1);
  uint64_t v11 = a6(a3, a4, a5);
  swift_release((uint64_t)a1);
  return v11;
}

atomic_ullong *_SetStorage.member(_:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v7 = *v4;
  uint64_t v8 = *(char **)(v7 + 168);
  uint64_t v9 = type metadata accessor for Optional(0, (uint64_t)v8, a3, a4);
  uint64_t v10 = (uint64_t)*(v9 - 1);
  uint64_t v11 = MEMORY[0x1F4188790](v9);
  unint64_t v13 = (char *)&v35 - v12;
  uint64_t v14 = *((void *)v8 - 1);
  uint64_t v15 = MEMORY[0x1F4188790](v11);
  long long v17 = (id *)((char *)&v35 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1F4188790](v15);
  unint64_t v19 = (char *)&v35 - v18;
  _conditionallyBridgeFromObjectiveC<A>(_:_:)(a1, v8, v20, v13);
  if ((*(unsigned int (**)(char *, uint64_t, char *))(v14 + 48))(v13, 1, v8) == 1)
  {
    (*(void (**)(char *, Class *))(v10 + 8))(v13, v9);
    return 0;
  }
  (*(void (**)(char *, char *, char *))(v14 + 32))(v19, v13, v8);
  uint64_t v21 = *(void *)(v7 + 176);
  uint64_t v22 = (*(uint64_t (**)(void, char *, uint64_t))(v21 + 32))(v5[5], v8, v21);
  uint64_t v23 = -1 << *((unsigned char *)v5 + 32);
  unint64_t v24 = v22 & ~v23;
  uint64_t v38 = v5 + 7;
  uint64_t v25 = *(void *)((char *)v5 + ((v24 >> 3) & 0xFFFFFFFFFFFFFF8) + 56) >> v24;
  unint64_t v42 = v19;
  if ((v25 & 1) == 0)
  {
    uint64_t v32 = *(void (**)(id *, char *))(v14 + 8);
LABEL_9:
    v32((id *)v42, v8);
    return 0;
  }
  long long v41 = v5;
  uint64_t v36 = ~v23;
  uint64_t v26 = *(void *)(v21 + 8);
  uint64_t v37 = *(uint64_t (**)(id *, char *, char *, uint64_t))(v26 + 8);
  unint64_t v27 = *(void (**)(id *, unint64_t, char *))(v14 + 16);
  uint64_t v28 = v14 + 16;
  uint64_t v29 = *(void *)(v14 + 72);
  uint64_t v39 = v27;
  uint64_t v40 = v28;
  long long v30 = (void (**)(id *, char *))(v28 - 8);
  uint64_t v35 = (v28 - 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  while (1)
  {
    v39(v17, v41[6] + v29 * v24, v8);
    char v31 = v37(v17, v42, v8, v26);
    uint64_t v32 = *v30;
    (*v30)(v17, v8);
    if (v31) {
      break;
    }
    unint64_t v24 = (v24 + 1) & v36;
    if (((*(void *)((char *)v38 + ((v24 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v24) & 1) == 0) {
      goto LABEL_9;
    }
  }
  v32((id *)v42, v8);
  v39(v17, v41[6] + v29 * v24, v8);
  uint64_t v33 = _bridgeAnythingToObjectiveC<A>(_:)(v17, (uint64_t *)v8);
  v32(v17, v8);
  return v33;
}

id @objc _SetStorage.member(_:)(atomic_ullong *a1, uint64_t a2, void *a3)
{
  return @objc _SwiftDeferredNSDictionary.object(forKey:)(a1, a2, a3, (uint64_t (*)(void *))_SetStorage.member(_:));
}

id @objc _SwiftDeferredNSDictionary.object(forKey:)(atomic_ullong *a1, uint64_t a2, void *a3, uint64_t (*a4)(void *))
{
  swift_unknownObjectRetain(a3);
  swift_retain(a1);
  uint64_t v7 = (void *)a4(a3);
  swift_unknownObjectRelease(a3);
  swift_release((uint64_t)a1);

  return v7;
}

uint64_t (*Set._Variant.object.modify())()
{
  return EnumeratedSequence._base.modify;
}

unint64_t Set._Variant.init(dummy:)()
{
  return 0x8000000000000000;
}

uint64_t Set._Variant.guaranteedNative.getter()
{
  return 0;
}

uint64_t (*Set._Variant.asNative.modify(void *a1))()
{
  *a1 = *v1;
  a1[1] = v1;
  void *v1 = 0x8000000000000000;
  return _SmallString.leadingRawBits.modify;
}

uint64_t Set._Variant._migrateToNative(_:removing:)@<X0>(void *a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v42 = a4;
  uint64_t v8 = *(char **)(a3 + 16);
  uint64_t v44 = *((void *)v8 - 1);
  uint64_t v9 = MEMORY[0x1F4188790](a1);
  uint64_t v43 = (char *)&v39 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = MEMORY[0x1F4188790](v9);
  unint64_t v13 = (char *)&v39 - v12;
  MEMORY[0x1F4188790](v11);
  uint64_t v15 = (char *)&v39 - v14;
  long long v41 = v4;
  swift_bridgeObjectRelease(*v4);
  id v16 = [a1 count];
  uint64_t v17 = *(void *)(a3 + 24);
  id v18 = swift_unknownObjectRetain(a1);
  unint64_t v19 = _NativeSet.init(_:capacity:)(v18, (uint64_t)v16, v8, v17);
  unint64_t v52 = v19;
  uint64_t v20 = v19[5];
  uint64_t v21 = *(uint64_t (**)(__objc2_class *, char *, uint64_t))(v17 + 32);
  swift_retain((atomic_ullong *)v19);
  uint64_t v50 = a2;
  uint64_t v22 = v21(v20, v8, v17);
  uint64_t v23 = -1 << *((unsigned char *)v19 + 32);
  unint64_t v24 = v22 & ~v23;
  unint64_t v51 = v19;
  uint64_t v45 = v19 + 7;
  if (((*(unint64_t *)((char *)v19 + ((v24 >> 3) & 0xFFFFFFFFFFFFFF8) + 56) >> v24) & 1) == 0)
  {
LABEL_5:
    swift_release((uint64_t)v51);
    unint64_t v31 = 338;
    goto LABEL_6;
  }
  uint64_t v39 = v17;
  uint64_t v40 = v13;
  uint64_t v49 = *(void *)(v17 + 8);
  uint64_t v47 = *(uint64_t (**)(char *, uint64_t, char *, uint64_t))(v49 + 8);
  uint64_t v48 = v49 + 8;
  uint64_t v25 = ~v23;
  uint64_t v46 = *(void (**)(char *, char *, char *))(v44 + 16);
  uint64_t v26 = *(void *)(v44 + 72);
  unint64_t v27 = (void (**)(char *, char *))(v44 + 8);
  while (1)
  {
    unint64_t v28 = v26 * v24;
    v46(v15, (char *)v51[6] + v26 * v24, v8);
    char v29 = v47(v15, (uint64_t)v50, v8, v49);
    long long v30 = *v27;
    (*v27)(v15, v8);
    if (v29) {
      break;
    }
    unint64_t v24 = (v24 + 1) & v25;
    if (((*(unint64_t *)((char *)v45 + ((v24 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v24) & 1) == 0) {
      goto LABEL_5;
    }
  }
  uint64_t v32 = (uint64_t)v51;
  swift_release((uint64_t)v51);
  uint64_t v33 = v42;
  (*(void (**)(uint64_t, unint64_t, char *))(v44 + 32))(v42, *(void *)(v32 + 48) + v28, v8);
  type metadata accessor for _NativeSet(0, (uint64_t)v8, v39, v34);
  _NativeSet._delete(at:)((Swift::_HashTable::Bucket)v24);
  uint64_t v35 = v40;
  uint64_t v36 = (void (*)(char *, uint64_t, char *))v46;
  v46(v40, v50, v8);
  uint64_t v37 = v43;
  v36(v43, v33, v8);
  if ((v47(v35, (uint64_t)v37, v8, v49) & 1) == 0)
  {
    unint64_t v31 = 340;
LABEL_6:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Bridging did not preserve equality", 34, 2, "Swift/SetVariant.swift", 22, 2, v31, 0);
  }
  v30(v37, v8);
  uint64_t result = ((uint64_t (*)(char *, char *))v30)(v35, v8);
  *long long v41 = v32;
  return result;
}

Swift::UInt _fastEnumerationStorageMutationsTarget.getter()
{
  return _fastEnumerationStorageMutationsTarget;
}

Swift::UInt _fastEnumerationStorageMutationsTarget.setter(Swift::UInt result)
{
  _fastEnumerationStorageMutationsTarget = result;
  return result;
}

uint64_t (*_fastEnumerationStorageMutationsTarget.modify())()
{
  return EnumeratedSequence._base.modify;
}

Swift::UInt *_fastEnumerationStorageMutationsPtr.getter()
{
  return &_fastEnumerationStorageMutationsTarget;
}

uint64_t Slice._startIndex.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return LazyFilterSequence.Iterator.base.getter(a1, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index, a2);
}

uint64_t Slice._startIndex.setter(uint64_t a1, uint64_t a2)
{
  return EnumeratedSequence.Iterator._base.setter(a1, a2, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
}

uint64_t (*Slice._startIndex.modify())()
{
  return EnumeratedSequence._base.modify;
}

uint64_t Slice._endIndex.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return IndexingIterator._position.getter(a1, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index, a2);
}

uint64_t IndexingIterator._position.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _DWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6 = v4 + *(int *)(a1 + 36);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, *(int ***)(a1 + 24), *(void *)(a1 + 16), a2, a3);
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, const char *))(*((void *)AssociatedTypeWitness - 1) + 16);

  return v8(a4, v6, AssociatedTypeWitness);
}

uint64_t Slice._endIndex.setter(uint64_t a1, uint64_t a2)
{
  return IndexingIterator._position.setter(a1, a2, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
}

uint64_t IndexingIterator._position.setter(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  uint64_t v6 = v4 + *(int *)(a2 + 36);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, *(int ***)(a2 + 24), *(void *)(a2 + 16), a3, a4);
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, const char *))(*((void *)AssociatedTypeWitness - 1) + 40);

  return v8(v6, a1, AssociatedTypeWitness);
}

uint64_t (*Slice._endIndex.modify())()
{
  return EnumeratedSequence._base.modify;
}

uint64_t Slice._base.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8) + 16))(a2, v2 + *(int *)(a1 + 40));
}

uint64_t Slice._base.setter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a2 + 16) - 8) + 40))(v2 + *(int *)(a2 + 40), a1);
}

uint64_t (*Slice._base.modify())()
{
  return EnumeratedSequence._base.modify;
}

uint64_t Slice.base.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8) + 16))(a2, v2 + *(int *)(a1 + 40));
}

uint64_t Slice.startIndex.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return LazyFilterSequence.Iterator.base.getter(a1, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index, a2);
}

uint64_t LazyFilterSequence.Iterator.base.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _DWORD *a3@<X2>, uint64_t a4@<X8>)
{
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, *(int ***)(a1 + 24), *(void *)(a1 + 16), a2, a3);
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, const char *))(*((void *)AssociatedTypeWitness - 1) + 16);

  return v7(a4, v4, AssociatedTypeWitness);
}

uint64_t Slice._failEarlyRangeCheck(_:bounds:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)(a3 + 24) + 160))(a1, a2, *(void *)(a3 + 16));
}

{
  return (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)(a3 + 24) + 176))(a1, a2, *(void *)(a3 + 16));
}

uint64_t Slice.indices.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v56 = a2;
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v5 = *(void *)(a1 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, (int **)v5, v6, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  uint64_t v8 = swift_getTupleTypeMetadata2(0, (uint64_t)AssociatedTypeWitness, (uint64_t)AssociatedTypeWitness, "lower upper ", 0)- 1;
  uint64_t v9 = MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)&v45 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  unint64_t v13 = (char *)&v45 - v12;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v5, v6, (uint64_t)AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Collection, associated conformance descriptor for Collection.Collection.Index: Comparable);
  id v16 = type metadata accessor for Range(0, (uint64_t)AssociatedTypeWitness, AssociatedConformanceWitness, v15);
  uint64_t v17 = (uint64_t)*(v16 - 1);
  uint64_t v53 = v16;
  uint64_t v54 = v17;
  uint64_t v18 = MEMORY[0x1F4188790](v16);
  uint64_t v47 = (char *)&v45 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v18);
  unint64_t v52 = (char *)&v45 - v20;
  uint64_t v49 = v6;
  unint64_t v51 = swift_getAssociatedTypeWitness(0, (int **)v5, v6, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Indices);
  uint64_t v55 = *((void *)v51 - 1);
  MEMORY[0x1F4188790](v51);
  uint64_t v50 = (char *)&v45 - v21;
  uint64_t v48 = v5;
  (*(void (**)(uint64_t, uint64_t))(v5 + 96))(v6, v5);
  uint64_t v22 = v2 + *(int *)(a1 + 36);
  uint64_t v23 = v8;
  uint64_t v46 = v8;
  uint64_t v24 = *((int *)v8 + 14);
  uint64_t v25 = v13;
  uint64_t v26 = &v13[v24];
  unint64_t v27 = (void *)*((void *)AssociatedTypeWitness - 1);
  unint64_t v28 = (void (*)(char *, uint64_t, const char *))v27[2];
  v28(v25, v3, AssociatedTypeWitness);
  v28(v26, v22, AssociatedTypeWitness);
  uint64_t v29 = *((int *)v23 + 14);
  long long v30 = v11;
  unint64_t v31 = &v11[v29];
  v28(v11, (uint64_t)v25, AssociatedTypeWitness);
  v28(v31, (uint64_t)v26, AssociatedTypeWitness);
  uint64_t v32 = (void (*)(char *, char *, const char *))v27[4];
  uint64_t v33 = v47;
  v32(v47, v30, AssociatedTypeWitness);
  uint64_t v34 = (void (*)(char *, const char *))v27[1];
  v34(v31, AssociatedTypeWitness);
  uint64_t v35 = v30;
  uint64_t v36 = &v30[*((int *)v46 + 14)];
  v32(v35, v25, AssociatedTypeWitness);
  v32(v36, v26, AssociatedTypeWitness);
  uint64_t v37 = v53;
  v32(&v33[*((int *)v53 + 9)], v36, AssociatedTypeWitness);
  v34(v35, AssociatedTypeWitness);
  uint64_t v38 = v54;
  uint64_t v39 = v52;
  uint64_t v40 = v37;
  (*(void (**)(char *, char *, Class *))(v54 + 32))(v52, v33, v37);
  long long v41 = v51;
  uint64_t v42 = swift_getAssociatedConformanceWitness(v48, v49, (uint64_t)v51, (uint64_t)&protocol requirements base descriptor for Collection, associated conformance descriptor for Collection.Collection.Indices: Collection);
  uint64_t v43 = v50;
  (*(void (**)(char *, const char *, uint64_t))(v42 + 88))(v39, v41, v42);
  (*(void (**)(char *, Class *))(v38 + 8))(v39, v40);
  return (*(uint64_t (**)(char *, const char *))(v55 + 8))(v43, v41);
}

uint64_t Slice.index(after:)(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)(a2 + 24) + 184))(a1, *(void *)(a2 + 16));
}

uint64_t Slice.formIndex(after:)(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)(a2 + 24) + 192))(a1, *(void *)(a2 + 16));
}

uint64_t Slice.index(_:offsetBy:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)(a3 + 24) + 136))(a1, a2, *(void *)(a3 + 16));
}

uint64_t Slice.index(_:offsetBy:limitedBy:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)(a4 + 24) + 144))(a1, a2, a3, *(void *)(a4 + 16));
}

uint64_t Slice.distance(from:to:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)(a3 + 24) + 152))(a1, a2, *(void *)(a3 + 16));
}

uint64_t _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lys5UInt8Vqd__Isgyrzo_ABySS8UTF8ViewVGADsAI_pAMRszr__lIetMggrzo_Tpq5@<X0>(uint64_t (*a1)(uint64_t)@<X0>, Swift::UInt64 a2@<X2>, Swift::UInt64 a3@<X3>, uint64_t a4@<X4>, unint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X8>)
{
  if ((a5 & 0x1000000000000000) != 0) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a6 - 8) + 56))(a7, 1, 1, a6);
  }
  if ((a5 & 0x2000000000000000) != 0)
  {
    uint64_t v16 = HIBYTE(a5) & 0xF;
    v20[0] = a4;
    v20[1] = a5 & 0xFFFFFFFFFFFFFFLL;
    uint64_t v15 = v20;
  }
  else if ((a4 & 0x1000000000000000) != 0)
  {
    uint64_t v15 = (void *)((a5 & 0xFFFFFFFFFFFFFFFLL) + 32);
    uint64_t v16 = a4 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    uint64_t v15 = _StringObject.sharedUTF8.getter(a4, a5);
  }
  v17._Swift::UInt64 rawBits = a2;
  v18._Swift::UInt64 rawBits = a3;
  uint64_t result = _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFqd__AGKXEfU_SRys5UInt8VGABySS8UTF8ViewVGSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lyAIqd__Isgyrzo_qd__sAO_pALRszr__lIetyggrzo_Tpq5((uint64_t)v15, v16, v17, v18, a4, a5, a1);
  if (!v7) {
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(a6 - 8) + 56))(a7, 0, 1, a6);
  }
  return result;
}

uint64_t Slice.withContiguousStorageIfAvailable<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = *(void *)(a3 + 16);
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v12 = &v15[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v10 + 16))(v12, v4 + *(int *)(v13 + 40), v9);
  uint64_t v16 = v9;
  uint64_t v17 = a4;
  uint64_t v18 = *(void *)(a3 + 24);
  uint64_t v19 = v4;
  uint64_t v20 = a1;
  uint64_t v21 = a2;
  (*(void (**)(uint64_t (*)@<X0>(uint64_t@<X0>, uint64_t@<X1>, uint64_t@<X8>), unsigned char *, uint64_t, uint64_t))(*(void *)(v18 + 8) + 72))(partial apply for closure #1 in Slice.withContiguousStorageIfAvailable<A>(_:), v15, a4, v9);
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v10 + 8))(v12, v9);
}

uint64_t _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFqd__AGKXEfU_SRys5UInt8VGABySS8UTF8ViewVGSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lyAIqd__Isgyrzo_qd__sAO_pALRszr__lIetyggrzo_Tpq5(uint64_t a1, uint64_t a2, Swift::String::Index from, Swift::String::Index to, uint64_t a5, unint64_t a6, uint64_t (*a7)(uint64_t))
{
  Swift::UInt64 rawBits = from._rawBits;
  char v13 = (a6 & 0x1000000000000000) == 0 || (a5 & 0x800000000000000) != 0;
  uint64_t v14 = 4 << v13;
  uint64_t v15 = from._rawBits & 0xC;
  Swift::UInt64 v16 = from._rawBits;
  if (v15 == 4 << v13)
  {
    Swift::UInt64 v16 = _StringGuts._slowEnsureMatchingEncoding(_:)(from)._rawBits;
    if ((a6 & 0x1000000000000000) == 0)
    {
LABEL_6:
      uint64_t v17 = v16 >> 16;
      if (v15 != v14) {
        goto LABEL_7;
      }
      goto LABEL_19;
    }
  }
  else if ((a6 & 0x1000000000000000) == 0)
  {
    goto LABEL_6;
  }
  unint64_t v22 = a5 & 0xFFFFFFFFFFFFLL;
  if ((a6 & 0x2000000000000000) != 0) {
    unint64_t v22 = HIBYTE(a6) & 0xF;
  }
  if (v22 < v16 >> 16) {
    goto LABEL_28;
  }
  uint64_t v17 = String.UTF8View._foreignDistance(from:to:)((Swift::String::Index)15, (Swift::String::Index)v16);
  if (v15 != v14) {
    goto LABEL_7;
  }
LABEL_19:
  Swift::UInt64 rawBits = _StringGuts._slowEnsureMatchingEncoding(_:)((Swift::String::Index)rawBits)._rawBits;
LABEL_7:
  if ((to._rawBits & 0xC) == v14)
  {
    to._Swift::UInt64 rawBits = _StringGuts._slowEnsureMatchingEncoding(_:)(to)._rawBits;
    if ((a6 & 0x1000000000000000) == 0)
    {
LABEL_9:
      Swift::UInt64 v18 = (to._rawBits >> 16) - (rawBits >> 16);
      uint64_t v19 = v17 + v18;
      if (!__OFADD__(v17, v18)) {
        goto LABEL_10;
      }
      goto LABEL_27;
    }
  }
  else if ((a6 & 0x1000000000000000) == 0)
  {
    goto LABEL_9;
  }
  unint64_t v23 = HIBYTE(a6) & 0xF;
  if ((a6 & 0x2000000000000000) == 0) {
    unint64_t v23 = a5 & 0xFFFFFFFFFFFFLL;
  }
  if (v23 < rawBits >> 16 || v23 < to._rawBits >> 16) {
LABEL_28:
  }
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index is out of bounds", 29, 2, "Swift/StringUTF8View.swift", 26, 2, 0xCFuLL, 0);
  Swift::Int v24 = String.UTF8View._foreignDistance(from:to:)((Swift::String::Index)rawBits, to);
  uint64_t v19 = v17 + v24;
  if (__OFADD__(v17, v24))
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
LABEL_10:
  if (v19 < v17) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
  }
  if (v17 < 0) {
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x744uLL, 0);
  }
  if (v19 > a2) {
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x745uLL, 0);
  }
  uint64_t v20 = specialized UnsafeBufferPointer.init(rebasing:)(v17, v19, a1, a2);
  return a7(v20);
}

uint64_t closure #1 in Slice.withContiguousStorageIfAvailable<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X2>, uint64_t (*a4)(uint64_t)@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X7>, uint64_t a8@<X8>)
{
  unint64_t v28 = a4;
  uint64_t v26 = a8;
  uint64_t v27 = a5;
  uint64_t v29 = a2;
  long long v30 = a3;
  uint64_t v25 = a1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (int **)a7, a6, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  uint64_t v11 = *((void *)AssociatedTypeWitness - 1);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  char v13 = (char *)&v24 - v12;
  uint64_t v15 = type metadata accessor for Slice(0, a6, a7, v14);
  (*(void (**)(uint64_t, uint64_t))(a7 + 64))(a6, a7);
  Swift::UInt64 v16 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(a7 + 152);
  uint64_t v17 = v16(v13, (uint64_t)a3, a6, a7);
  (*(void (**)(char *, const char *))(v11 + 8))(v13, AssociatedTypeWitness);
  uint64_t v18 = v16(v30, (uint64_t)&v30[*((int *)v15 + 9)], a6, a7);
  uint64_t v19 = v17 + v18;
  if (__OFADD__(v17, v18))
  {
    __break(1u);
LABEL_7:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
  }
  if (v19 < v17) {
    goto LABEL_7;
  }
  if (v17 < 0) {
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x744uLL, 0);
  }
  uint64_t v20 = v29;
  if (v19 > v29) {
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x745uLL, 0);
  }
  uint64_t v21 = swift_getAssociatedTypeWitness(0, *(int ***)(a7 + 8), a6, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
  uint64_t v22 = UnsafeBufferPointer.init(rebasing:)(v17, v19, v25, v20, (uint64_t)v21);
  return v28(v22);
}

uint64_t UnsafeBufferPointer.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return UnsafeBufferPointer.subscript.getter(a1, a2, a3, a4, a5, 0x744uLL, 0x745uLL);
}

uint64_t (*protocol witness for Collection.subscript.read in conformance Slice<A>(const char ***a1, uint64_t a2, uint64_t a3))()
{
  uint64_t v6 = (const char **)malloc(0x28uLL);
  *a1 = v6;
  v6[4] = (const char *)Slice.subscript.read(v6, a2, a3);
  return protocol witness for Collection.subscript.read in conformance _ArrayBuffer<A>;
}

uint64_t (*Slice.subscript.read(const char **a1, uint64_t a2, uint64_t a3))()
{
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, *(int ***)(*(void *)(a3 + 24) + 8), *(void *)(a3 + 16), (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
  *a1 = AssociatedTypeWitness;
  uint64_t v7 = *((void *)AssociatedTypeWitness - 1);
  a1[1] = (const char *)v7;
  uint64_t v8 = (const char *)malloc(*(void *)(v7 + 64));
  a1[2] = v8;
  Slice.subscript.getter(a2, a3, (uint64_t)v8);
  return _ArrayBuffer.subscript.read;
}

uint64_t protocol witness for Collection._customIndexOfEquatableElement(_:) in conformance DefaultIndices<A>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, *(int ***)(a1 + 24), *(void *)(a1 + 16), (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  uint64_t v6 = type metadata accessor for Optional(0, (uint64_t)AssociatedTypeWitness, v4, v5);
  uint64_t v7 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, Class *))*((void *)*(v6 - 1) + 7);

  return v7(a2, 1, 1, v6);
}

uint64_t protocol witness for Sequence.makeIterator() in conformance Slice<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Sequence.makeIterator() in conformance DefaultIndices<A>(a1, (void (*)(uint64_t))Slice.startIndex.getter, protocol conformance descriptor for Slice<A>, a2);
}

uint64_t protocol witness for Sequence.makeIterator() in conformance DefaultIndices<A>@<X0>(uint64_t a1@<X0>, void (*a2)(uint64_t)@<X2>, int *a3@<X3>, uint64_t a4@<X8>)
{
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, *(int ***)(a1 + 24), *(void *)(a1 + 16), (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  uint64_t v10 = *((void *)AssociatedTypeWitness - 1);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v12 = (char *)&v19 - v11;
  uint64_t v13 = *(void *)(a1 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 16))(a4, v4, a1);
  a2(a1);
  (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v4, a1);
  uint64_t WitnessTable = swift_getWitnessTable(a3, (unint64_t *)a1, v14);
  uint64_t v17 = type metadata accessor for IndexingIterator(0, a1, WitnessTable, v16);
  return (*(uint64_t (**)(uint64_t, char *, const char *))(v10 + 32))(a4 + *((int *)v17 + 9), v12, AssociatedTypeWitness);
}

uint64_t protocol witness for Sequence.underestimatedCount.getter in conformance Slice<A>(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable(protocol conformance descriptor for Slice<A>, a1, a3);

  return Collection.underestimatedCount.getter((uint64_t)a1, WitnessTable);
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance Slice<A>(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable(protocol conformance descriptor for Slice<A>, a1, a3);

  return Collection._copyToContiguousArray()((uint64_t)a1, WitnessTable);
}

char *Slice._copyContents(initializing:)(char *a1, char *a2, char *a3, uint64_t a4)
{
  uint64_t v102 = a1;
  uint64_t v7 = *(void *)(a4 + 16);
  uint64_t v8 = *(void *)(a4 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, (int **)v8, v7, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0, (uint64_t)AssociatedTypeWitness, (uint64_t)AssociatedTypeWitness, "lower upper ", 0);
  uint64_t v10 = MEMORY[0x1F4188790](TupleTypeMetadata2);
  unint64_t v128 = (char *)&v100 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10);
  BOOL v127 = (char *)&v100 - v12;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v8, v7, (uint64_t)AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Collection, associated conformance descriptor for Collection.Collection.Index: Comparable);
  unint64_t v126 = type metadata accessor for Range(0, (uint64_t)AssociatedTypeWitness, AssociatedConformanceWitness, v13);
  uint64_t v109 = (void (**)(char *, Class *))*(v126 - 1);
  uint64_t v14 = MEMORY[0x1F4188790](v126);
  int64_t v125 = (char *)&v100 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v124 = (char *)&v100 - v16;
  uint64_t v17 = *(void *)(v8 + 8);
  uint64_t v18 = swift_getAssociatedTypeWitness(0, (int **)v17, v7, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
  uint64_t v131 = *((void *)v18 - 1);
  uint64_t v19 = MEMORY[0x1F4188790](v18);
  BOOL v122 = (char *)&v100 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = MEMORY[0x1F4188790](v19);
  int64_t v121 = (char *)&v100 - v22;
  uint64_t v136 = *(void *)(a4 - 8);
  MEMORY[0x1F4188790](v21);
  uint64_t v132 = (char *)&v100 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t WitnessTable = swift_getWitnessTable(protocol conformance descriptor for Slice<A>, (unint64_t *)a4, v24);
  Swift::String::Index v134 = type metadata accessor for IndexingIterator(0, a4, WitnessTable, v26);
  uint64_t v103 = (uint64_t)*(v134 - 1);
  uint64_t v27 = MEMORY[0x1F4188790](v134);
  unint64_t v139 = (char *)&v100 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = MEMORY[0x1F4188790](v27);
  unint64_t v142 = (char *)&v100 - v30;
  char v143 = AssociatedTypeWitness;
  uint64_t v31 = *((void *)AssociatedTypeWitness - 1);
  uint64_t v32 = MEMORY[0x1F4188790](v29);
  int64_t v138 = (char *)&v100 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v34 = MEMORY[0x1F4188790](v32);
  uint64_t v135 = (char *)&v100 - v35;
  uint64_t v36 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v34);
  uint64_t v38 = (char *)&v100 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v152 = v7;
  uint64_t v153 = v8;
  unint64_t v141 = a2;
  char v154 = a2;
  v155 = a3;
  uint64_t v39 = a4;
  uint64_t v40 = *(int *)(a4 + 40);
  long long v41 = v140;
  uint64_t v42 = *(void (**)(char *))(v36 + 16);
  uint64_t v137 = &v140[v40];
  v42(v38);
  uint64_t v145 = v7;
  uint64_t v123 = v18;
  uint64_t v43 = (uint64_t)v18;
  uint64_t v44 = v41;
  uint64_t v47 = type metadata accessor for UnsafeBufferPointer.Iterator(255, v43, v45, v46);
  uint64_t v146 = swift_getTupleTypeMetadata2(0, (uint64_t)v47, (uint64_t)&type metadata for Int, 0, 0);
  uint64_t v147 = v8;
  uint64_t v133 = v8;
  unint64_t v148 = v41;
  uint64_t v149 = partial apply for closure #1 in Slice._copyContents(initializing:);
  unint64_t v150 = &v151;
  (*(void (**)(void *__return_ptr, uint64_t (*)@<X0>(uint64_t@<X0>, uint64_t@<X1>, uint64_t@<X8>), char *, uint64_t *, uint64_t, uint64_t))(v17 + 72))(v156, partial apply for closure #1 in Slice.withContiguousStorageIfAvailable<A>(_:), v144, v146, v7, v17);
  (*(void (**)(char *, uint64_t))(v36 + 8))(v38, v7);
  if (v157)
  {
    uint64_t v48 = v136;
    uint64_t v49 = v132;
    (*(void (**)(char *, char *, uint64_t))(v136 + 32))(v132, v41, v39);
    uint64_t v50 = *(void (**)(char *, char *, uint64_t))(v48 + 16);
    unint64_t v51 = v139;
    uint64_t v118 = v48 + 16;
    uint64_t v117 = v50;
    v50(v139, v49, v39);
    unint64_t v52 = *(void (**)(char *))(v31 + 16);
    uint64_t v53 = v135;
    uint64_t v54 = v143;
    uint64_t v119 = v31 + 16;
    int64_t v120 = v52;
    ((void (*)(char *, char *, const char *))v52)(v135, v49, v143);
    uint64_t v55 = *(void (**)(char *, uint64_t))(v48 + 8);
    uint64_t v136 = v48 + 8;
    unint64_t v116 = v55;
    v55(v49, v39);
    uint64_t v56 = v134;
    unint64_t v57 = &v51[*((int *)v134 + 9)];
    unint64_t v58 = *(void (**)(char *, char *, const char *))(v31 + 32);
    uint64_t v115 = v31 + 32;
    uint64_t v114 = v58;
    v58(v57, v53, v54);
    uint64_t v59 = v103 + 32;
    uint64_t v60 = *(void (**)(char *, char *, Class *))(v103 + 32);
    uint64_t v61 = v142;
    uint64_t v62 = v56;
    v60(v142, v51, v56);
    if (v141)
    {
      if (((unint64_t)a3 & 0x8000000000000000) != 0) {
        _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0xB2uLL, 0);
      }
      uint64_t v101 = (void (*)(uint64_t, char *, Class *))v60;
      uint64_t v103 = v59;
      uint64_t v113 = v7;
      unint64_t v63 = v120;
      if (a3)
      {
        uint64_t v64 = 0;
        uint64_t v140 = (char *)(v31 + 8);
        uint64_t v111 = (void (**)(char *, char *, Class *))(v109 + 4);
        uint64_t v110 = v133 + 160;
        ++v109;
        uint64_t v108 = v133 + 80;
        uint64_t v107 = v131 + 16;
        uint64_t v106 = v133 + 192;
        uint64_t v105 = v131 + 32;
        uint64_t v112 = a3;
        uint64_t v104 = v39;
        while (1)
        {
          unint64_t v65 = v135;
          unint64_t v139 = &v61[*((int *)v62 + 9)];
          uint64_t v66 = v143;
          v63(v135);
          uint64_t v67 = &v61[*(int *)(v39 + 36)];
          uint64_t v68 = v63;
          char v69 = (*(uint64_t (**)(char *, char *, const char *))(*(void *)(AssociatedConformanceWitness + 8)
                                                                        + 8))(v65, v67, v66);
          uint64_t v70 = *(void (**)(char *, const char *))v140;
          (*(void (**)(char *, const char *))v140)(v65, v66);
          if (v69) {
            break;
          }
          int64_t v138 = v64 + 1;
          uint64_t v71 = TupleTypeMetadata2;
          uint64_t v72 = v127;
          id v73 = &v127[*((int *)TupleTypeMetadata2 + 12)];
          uint64_t v74 = (void (*)(char *, char *, const char *))v68;
          ((void (*)(char *, char *, const char *))v68)(v127, v61, v66);
          uint64_t v137 = v73;
          ((void (*)(char *, char *, const char *))v68)(v73, v67, v66);
          uint64_t v75 = v128;
          unint64_t v76 = &v128[*((int *)v71 + 12)];
          v74(v128, v72, v143);
          v74(v76, v73, v143);
          uint64_t v77 = v125;
          unint64_t v78 = v114;
          v114(v125, v75, v143);
          v70(v76, v143);
          uint64_t v79 = &v75[*((int *)v71 + 12)];
          v78(v75, v72, v143);
          v78(v79, v137, v143);
          unint64_t v80 = v126;
          v78(&v77[*((int *)v126 + 9)], v79, v143);
          v70(v75, v143);
          uint64_t v81 = v124;
          (*v111)(v124, v77, v80);
          uint64_t v39 = v104;
          uint64_t v82 = v133;
          uint64_t v83 = v139;
          uint64_t v84 = v113;
          (*(void (**)(char *, char *, uint64_t, uint64_t))(v133 + 160))(v139, v81, v113, v133);
          (*v109)(v81, v80);
          int v85 = (void (*)(void *, void))(*(uint64_t (**)(void *, char *, uint64_t, uint64_t))(v82 + 80))(v156, v83, v84, v82);
          uint64_t v86 = v131;
          unint64_t v87 = v122;
          uint64_t v88 = v123;
          (*(void (**)(char *))(v131 + 16))(v122);
          v85(v156, 0);
          uint64_t v89 = v132;
          v117(v132, v142, v39);
          uint64_t v62 = v134;
          (*(void (**)(char *, uint64_t, uint64_t))(v82 + 192))(v83, v84, v82);
          v116(v89, v39);
          uint64_t v90 = *(void (**)(char *, char *, const char *))(v86 + 32);
          uint64_t v91 = v121;
          v90(v121, v87, v88);
          uint64_t v92 = v141;
          uint64_t v93 = v91;
          uint64_t v64 = v138;
          v90(v141, v93, v88);
          uint64_t v94 = *(void *)(v86 + 72);
          uint64_t v61 = v142;
          unint64_t v141 = &v92[v94];
          a3 = v112;
          unint64_t v63 = v120;
          if (v112 == v64) {
            goto LABEL_8;
          }
        }
        v101((uint64_t)v102, v61, v62);
        return v64;
      }
      else
      {
LABEL_8:
        v101((uint64_t)v102, v61, v62);
      }
    }
    else
    {
      v60(v102, v61, v56);
      return 0;
    }
  }
  else
  {
    a3 = (char *)v156[2];
    uint64_t v95 = v138;
    unint64_t v96 = v143;
    (*(void (**)(char *, char *, const char *))(v31 + 16))(v138, v44, v143);
    uint64_t v97 = v135;
    (*(void (**)(char *, char *, uint64_t))(v133 + 136))(v95, a3, v7);
    (*(void (**)(char *, const char *))(v31 + 8))(v95, v96);
    uint64_t v98 = v102;
    (*(void (**)(char *, char *, uint64_t))(v136 + 32))(v102, v44, v39);
    (*(void (**)(char *, char *, const char *))(v31 + 32))(&v98[*((int *)v134 + 9)], v97, v96);
  }
  return a3;
}

uint64_t protocol witness for Sequence.withContiguousStorageIfAvailable<A>(_:) in conformance Slice<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return Slice.withContiguousStorageIfAvailable<A>(_:)(a1, a2, a4, a3);
}

char *closure #1 in Slice._copyContents(initializing:)@<X0>(char *result@<X0>, uint64_t a2@<X1>, char *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, char **a7@<X8>)
{
  uint64_t v8 = result;
  if (a2 && a4)
  {
    if (a2 >= a4) {
      uint64_t v11 = a4;
    }
    else {
      uint64_t v11 = a2;
    }
    AssociatedTypeWitness = (unint64_t *)swift_getAssociatedTypeWitness(0, *(int ***)(a6 + 8), a5, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
    uint64_t result = UnsafeMutablePointer.initialize(from:count:)(v8, v11, a3, AssociatedTypeWitness);
    uint64_t v13 = *(void *)(*(AssociatedTypeWitness - 1) + 72);
    uint64_t v14 = &v8[v13 * a2];
    v8 += v13 * v11;
  }
  else if (result)
  {
    uint64_t v15 = swift_getAssociatedTypeWitness(0, *(int ***)(a6 + 8), a5, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
    uint64_t v11 = 0;
    uint64_t v16 = *((void *)v15 - 1);
    uint64_t result = (char *)(v15 - 8);
    uint64_t v14 = &v8[*(void *)(v16 + 72) * a2];
  }
  else
  {
    uint64_t v14 = 0;
    uint64_t v11 = 0;
  }
  *a7 = v8;
  a7[1] = v14;
  a7[2] = (char *)v11;
  return result;
}

char *UnsafeBufferPointer._copyContents(initializing:)(char *__dst, uint64_t a2, char *__src, uint64_t a4, unint64_t *a5)
{
  uint64_t v6 = __src;
  if (a4 && a2)
  {
    if (a4 >= a2) {
      uint64_t v7 = a2;
    }
    else {
      uint64_t v7 = a4;
    }
    UnsafeMutablePointer.initialize(from:count:)(__src, v7, __dst, a5);
    v6 += *(void *)(*(a5 - 1) + 72) * v7;
  }
  return v6;
}

uint64_t Slice<>.index(before:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, void))(a3 + 32))(a1, *(void *)(a2 + 16));
}

uint64_t Slice<>.formIndex(before:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, void))(a3 + 40))(a1, *(void *)(a2 + 16));
}

uint64_t protocol witness for BidirectionalCollection.index(before:) in conformance <> Slice<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Slice<>.index(before:)(a1, a2, *(void *)(a3 - 8));
}

uint64_t protocol witness for BidirectionalCollection.formIndex(before:) in conformance <> Slice<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Slice<>.formIndex(before:)(a1, a2, *(void *)(a3 - 8));
}

uint64_t Slice<>.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v56 = a1;
  uint64_t v57 = a4;
  uint64_t v5 = *(int ***)(a3 + 8);
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v51 = a2;
  uint64_t v54 = v5;
  uint64_t v55 = v6;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v5, v6, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0, (uint64_t)AssociatedTypeWitness, (uint64_t)AssociatedTypeWitness, "lower upper ", 0);
  uint64_t v10 = TupleTypeMetadata2 - 1;
  uint64_t v11 = MEMORY[0x1F4188790](TupleTypeMetadata2);
  uint64_t v13 = (char *)&v48 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11);
  uint64_t v15 = (char *)&v48 - v14;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness((uint64_t)v5, v6, (uint64_t)AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Collection, associated conformance descriptor for Collection.Collection.Index: Comparable);
  uint64_t v18 = type metadata accessor for Range(0, (uint64_t)AssociatedTypeWitness, AssociatedConformanceWitness, v17);
  uint64_t v19 = (uint64_t)*(v18 - 1);
  unint64_t v52 = v18;
  uint64_t v53 = v19;
  uint64_t v20 = MEMORY[0x1F4188790](v18);
  uint64_t v22 = (char *)&v48 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  uint64_t v49 = v4;
  uint64_t v50 = (char *)&v48 - v23;
  uint64_t v24 = v4;
  uint64_t v25 = v4 + *(int *)(a2 + 36);
  uint64_t v26 = &v15[*((int *)v10 + 14)];
  uint64_t v27 = (void *)*((void *)AssociatedTypeWitness - 1);
  uint64_t v28 = (void (*)(char *, uint64_t, const char *))v27[2];
  v28(v15, v24, AssociatedTypeWitness);
  uint64_t v48 = v26;
  v28(v26, v25, AssociatedTypeWitness);
  uint64_t v29 = &v13[*((int *)v10 + 14)];
  v28(v13, (uint64_t)v15, AssociatedTypeWitness);
  v28(v29, (uint64_t)v26, AssociatedTypeWitness);
  uint64_t v30 = (void (*)(char *, char *, const char *))v27[4];
  v30(v22, v13, AssociatedTypeWitness);
  uint64_t v31 = (void (*)(char *, const char *))v27[1];
  v31(v29, AssociatedTypeWitness);
  uint64_t v32 = &v13[*((int *)v10 + 14)];
  v30(v13, v15, AssociatedTypeWitness);
  v30(v32, v48, AssociatedTypeWitness);
  uint64_t v33 = v52;
  uint64_t v34 = v22;
  v30(&v22[*((int *)v52 + 9)], v32, AssociatedTypeWitness);
  v31(v13, AssociatedTypeWitness);
  uint64_t v35 = v53;
  uint64_t v36 = v50;
  uint64_t v37 = v33;
  (*(void (**)(char *, char *, Class *))(v53 + 32))(v50, v34, v33);
  uint64_t v39 = v54;
  uint64_t v38 = v55;
  uint64_t v40 = v56;
  ((void (*)(uint64_t, char *, uint64_t, int **))v54[20])(v56, v36, v55, v54);
  (*(void (**)(char *, Class *))(v35 + 8))(v36, v37);
  uint64_t v41 = v40;
  uint64_t v42 = v38;
  uint64_t v43 = (uint64_t (*)(unsigned char *, void))((uint64_t (*)(unsigned char *, uint64_t, uint64_t, int **))v39[10])(v58, v41, v38, v39);
  uint64_t v45 = v44;
  uint64_t v46 = swift_getAssociatedTypeWitness(0, (int **)v39[1], v42, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
  (*(void (**)(uint64_t, uint64_t, const char *))(*((void *)v46 - 1) + 16))(v57, v45, v46);
  return v43(v58, 0);
}

uint64_t key path getter for Slice<>.subscript(_:) : <A>Slice<A>A(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return key path getter for DiscontiguousSlice<>.subscript(_:) : <A>DiscontiguousSlice<A>A(a1, a2, a3, (uint64_t (*)(void, void, void))type metadata accessor for Slice, (uint64_t (*)(uint64_t, uint64_t, uint64_t))Slice<>.subscript.getter);
}

{
  return key path getter for DiscontiguousSlice<>.subscript(_:) : <A>DiscontiguousSlice<A>A(a1, a2, a3, (uint64_t (*)(void, void, void))type metadata accessor for Slice, (uint64_t (*)(uint64_t, uint64_t, uint64_t))Slice<>.subscript.getter);
}

uint64_t key path setter for Slice<>.subscript(_:) : <A>Slice<A>A(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(a4 + a3 - 16);
  uint64_t v6 = *(void *)(a4 + a3 - 8);
  uint64_t v8 = *(void *)(v6 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, *(int ***)(v8 + 8), v7, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
  uint64_t v10 = *((void *)AssociatedTypeWitness - 1);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v12 = (char *)&v20 - v11;
  uint64_t v13 = swift_getAssociatedTypeWitness(0, (int **)v8, v7, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  MEMORY[0x1F4188790](v13);
  uint64_t v15 = (char *)&v20 - v14;
  (*(void (**)(char *, uint64_t))(v16 + 16))((char *)&v20 - v14, a3);
  (*(void (**)(char *, uint64_t, const char *))(v10 + 16))(v12, a1, AssociatedTypeWitness);
  uint64_t v18 = type metadata accessor for Slice(0, v7, v8, v17);
  return Slice<>.subscript.setter((uint64_t)v12, (uint64_t)v15, (uint64_t)v18, v6);
}

uint64_t Slice<>.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v49 = a2;
  uint64_t v50 = a4;
  uint64_t v51 = a1;
  uint64_t v5 = *(int ***)(a4 + 8);
  uint64_t v6 = *(void *)(a3 + 16);
  uint64_t v44 = a3;
  uint64_t v47 = v5;
  uint64_t v48 = v6;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v5, v6, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0, (uint64_t)AssociatedTypeWitness, (uint64_t)AssociatedTypeWitness, "lower upper ", 0);
  uint64_t v10 = TupleTypeMetadata2 - 1;
  uint64_t v11 = MEMORY[0x1F4188790](TupleTypeMetadata2);
  uint64_t v13 = (char *)&v40 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11);
  uint64_t v15 = (char *)&v40 - v14;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness((uint64_t)v5, v6, (uint64_t)AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Collection, associated conformance descriptor for Collection.Collection.Index: Comparable);
  uint64_t v18 = type metadata accessor for Range(0, (uint64_t)AssociatedTypeWitness, AssociatedConformanceWitness, v17);
  uint64_t v19 = (uint64_t)*(v18 - 1);
  uint64_t v45 = v18;
  uint64_t v46 = v19;
  uint64_t v20 = MEMORY[0x1F4188790](v18);
  uint64_t v22 = (char *)&v40 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  uint64_t v42 = v4;
  uint64_t v43 = (char *)&v40 - v23;
  uint64_t v24 = v4;
  uint64_t v25 = v4 + *(int *)(a3 + 36);
  uint64_t v26 = &v15[*((int *)v10 + 14)];
  uint64_t v27 = (void *)*((void *)AssociatedTypeWitness - 1);
  uint64_t v28 = (void (*)(char *, uint64_t, const char *))v27[2];
  v28(v15, v24, AssociatedTypeWitness);
  uint64_t v41 = v26;
  v28(v26, v25, AssociatedTypeWitness);
  uint64_t v29 = &v13[*((int *)v10 + 14)];
  v28(v13, (uint64_t)v15, AssociatedTypeWitness);
  v28(v29, (uint64_t)v26, AssociatedTypeWitness);
  uint64_t v30 = (void (*)(char *, char *, const char *))v27[4];
  v30(v22, v13, AssociatedTypeWitness);
  uint64_t v31 = (void (*)(char *, const char *))v27[1];
  v31(v29, AssociatedTypeWitness);
  uint64_t v32 = &v13[*((int *)v10 + 14)];
  v30(v13, v15, AssociatedTypeWitness);
  v30(v32, v41, AssociatedTypeWitness);
  uint64_t v33 = v45;
  v30(&v22[*((int *)v45 + 9)], v32, AssociatedTypeWitness);
  v31(v13, AssociatedTypeWitness);
  uint64_t v34 = v46;
  uint64_t v35 = v43;
  uint64_t v36 = v33;
  (*(void (**)(char *, char *, Class *))(v46 + 32))(v43, v22, v33);
  uint64_t v37 = v48;
  uint64_t v38 = v49;
  ((void (*)(uint64_t, char *, uint64_t))v47[20])(v49, v35, v48);
  (*(void (**)(char *, Class *))(v34 + 8))(v35, v36);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v50 + 24))(v51, v38, v37);
}

void (*Slice<>.subscript.modify(void *a1, uint64_t a2, uint64_t a3, uint64_t a4))(uint64_t **a1, char a2)
{
  uint64_t v9 = malloc(0x58uLL);
  *a1 = v9;
  v9[1] = a4;
  _OWORD v9[2] = v4;
  *uint64_t v9 = a3;
  uint64_t v10 = *(void *)(a4 + 8);
  uint64_t v11 = *(void *)(a3 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, *(int ***)(v10 + 8), v11, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
  v9[3] = AssociatedTypeWitness;
  uint64_t v13 = *((void *)AssociatedTypeWitness - 1);
  v9[4] = v13;
  size_t v14 = *(void *)(v13 + 64);
  void v9[5] = malloc(v14);
  uint64_t v15 = malloc(v14);
  v9[6] = v15;
  uint64_t v16 = swift_getAssociatedTypeWitness(0, (int **)v10, v11, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  v9[7] = v16;
  uint64_t v17 = *((void *)v16 - 1);
  uint64_t v18 = v17;
  v9[8] = v17;
  size_t v19 = *(void *)(v17 + 64);
  v9[9] = malloc(v19);
  v9[10] = malloc(v19);
  (*(void (**)(void))(v18 + 16))();
  Slice<>.subscript.getter(a2, a3, a4, (uint64_t)v15);
  return Slice<>.subscript.modify;
}

void Slice<>.subscript.modify(uint64_t **a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (void *)(*a1)[9];
  uint64_t v4 = (void *)(*a1)[10];
  if (a2)
  {
    uint64_t v5 = v2[8];
    uint64_t v7 = (void *)v2[5];
    uint64_t v6 = (void *)v2[6];
    uint64_t v8 = v2[3];
    uint64_t v9 = v2[4];
    uint64_t v10 = v2[1];
    uint64_t v12 = v2[7];
    uint64_t v11 = *v2;
    (*(void (**)(void *, void *, uint64_t))(v9 + 16))(v7, v6, v8);
    (*(void (**)(void *, void *, uint64_t))(v5 + 32))(v3, v4, v12);
    Slice<>.subscript.setter((uint64_t)v7, (uint64_t)v3, v11, v10);
    (*(void (**)(void *, uint64_t))(v9 + 8))(v6, v8);
  }
  else
  {
    uint64_t v7 = (void *)v2[5];
    uint64_t v6 = (void *)v2[6];
    Slice<>.subscript.setter((uint64_t)v6, (uint64_t)v4, *v2, v2[1]);
  }
  free(v4);
  free(v3);
  free(v6);
  free(v7);

  free(v2);
}

uint64_t Slice<>.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char *a4@<X8>)
{
  uint64_t v51 = a2;
  uint64_t v47 = a1;
  uint64_t v48 = a4;
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v45 = *(int ***)(a3 + 8);
  uint64_t v4 = v45;
  uint64_t v46 = v5;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v45, v5, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0, (uint64_t)AssociatedTypeWitness, (uint64_t)AssociatedTypeWitness, "lower upper ", 0);
  uint64_t v9 = TupleTypeMetadata2 - 1;
  uint64_t v10 = MEMORY[0x1F4188790](TupleTypeMetadata2);
  uint64_t v12 = (char *)&v42 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10);
  size_t v14 = (char *)&v42 - v13;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness((uint64_t)v4, v5, (uint64_t)AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Collection, associated conformance descriptor for Collection.Collection.Index: Comparable);
  uint64_t v17 = type metadata accessor for Range(0, (uint64_t)AssociatedTypeWitness, AssociatedConformanceWitness, v16);
  uint64_t v18 = (uint64_t)*(v17 - 1);
  uint64_t v43 = v17;
  uint64_t v44 = v18;
  uint64_t v19 = MEMORY[0x1F4188790](v17);
  uint64_t v49 = (char *)&v42 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v19);
  uint64_t v22 = (char *)&v42 - v21;
  uint64_t v23 = v50 + *(int *)(a2 + 36);
  uint64_t v24 = &v14[*((int *)v9 + 14)];
  uint64_t v25 = (void *)*((void *)AssociatedTypeWitness - 1);
  uint64_t v26 = (void (*)(char *))v25[2];
  v26(v14);
  uint64_t v42 = v24;
  ((void (*)(char *, uint64_t, const char *))v26)(v24, v23, AssociatedTypeWitness);
  uint64_t v27 = &v12[*((int *)v9 + 14)];
  ((void (*)(char *, char *, const char *))v26)(v12, v14, AssociatedTypeWitness);
  ((void (*)(char *, char *, const char *))v26)(v27, v24, AssociatedTypeWitness);
  uint64_t v28 = (void (*)(char *, char *, const char *))v25[4];
  v28(v49, v12, AssociatedTypeWitness);
  uint64_t v29 = (void (*)(char *, const char *))v25[1];
  v29(v27, AssociatedTypeWitness);
  uint64_t v30 = &v12[*((int *)v9 + 14)];
  v28(v12, v14, AssociatedTypeWitness);
  v28(v30, v42, AssociatedTypeWitness);
  uint64_t v31 = v43;
  uint64_t v32 = v49;
  v28(&v49[*((int *)v43 + 9)], v30, AssociatedTypeWitness);
  v29(v12, AssociatedTypeWitness);
  uint64_t v33 = v44;
  uint64_t v34 = v31;
  (*(void (**)(char *, char *, Class *))(v44 + 32))(v22, v32, v31);
  uint64_t v35 = v51;
  uint64_t v36 = v50 + *(int *)(v51 + 40);
  uint64_t v37 = v46;
  uint64_t v38 = v47;
  ((void (*)(uint64_t, char *, uint64_t))v45[22])(v47, v22, v46);
  (*(void (**)(char *, Class *))(v33 + 8))(v22, v34);
  uint64_t v39 = *(int *)(v35 + 40);
  uint64_t v40 = v48;
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v37 - 8) + 16))(&v48[v39], v36, v37);
  (*(void (**)(char *, uint64_t, Class *))(v33 + 16))(v22, v38, v34);
  v28(v40, v22, AssociatedTypeWitness);
  return ((uint64_t (*)(char *, char *, const char *))v28)(&v40[*(int *)(v51 + 36)], &v22[*((int *)v34 + 9)], AssociatedTypeWitness);
}

uint64_t key path getter for DiscontiguousSlice<>.subscript(_:) : <A>DiscontiguousSlice<A>A(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void, void, void), uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v7 = *(void *)(a3 + a2 - 8);
  uint64_t v8 = a4(0, *(void *)(a3 + a2 - 16), *(void *)(v7 + 8));
  return a5(a2, v8, v7);
}

uint64_t key path setter for Slice<>.subscript(_:) : <A>Slice<A>A(uint64_t a1, uint64_t a2, char *a3, uint64_t a4)
{
  uint64_t v6 = *(void *)&a3[a4 - 8];
  uint64_t v7 = (unint64_t *)type metadata accessor for Slice(0, *(void *)&a3[a4 - 16], *(void *)(v6 + 8), a4);
  return specialized Slice<>.subscript.setter(a1, a3, v7, v6);
}

uint64_t Slice<>.subscript.setter(uint64_t a1, char *a2, unint64_t *a3, uint64_t a4)
{
  specialized Slice<>.subscript.setter(a1, a2, a3, a4);
  uint64_t v8 = *(int ***)(a4 + 8);
  uint64_t v9 = a3[2];
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v8, v9, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness((uint64_t)v8, v9, (uint64_t)AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Collection, associated conformance descriptor for Collection.Collection.Index: Comparable);
  uint64_t v13 = type metadata accessor for Range(0, (uint64_t)AssociatedTypeWitness, AssociatedConformanceWitness, v12);
  (*((void (**)(char *, Class *))*(v13 - 1) + 1))(a2, v13);
  size_t v14 = *(uint64_t (**)(uint64_t, unint64_t *))(*(a3 - 1) + 8);

  return v14(a1, a3);
}

void (*Slice<>.subscript.modify(void *a1, uint64_t a2, uint64_t a3, uint64_t a4))(void **a1, char a2)
{
  uint64_t v9 = malloc(0x60uLL);
  *a1 = v9;
  v9[3] = a4;
  v9[4] = v4;
  _OWORD v9[2] = a3;
  uint64_t v10 = *(void *)(a3 - 8);
  void v9[5] = v10;
  size_t v11 = *(void *)(v10 + 64);
  v9[6] = malloc(v11);
  uint64_t v12 = (char *)malloc(v11);
  v9[7] = v12;
  uint64_t v13 = *(int ***)(a4 + 8);
  uint64_t v14 = *(void *)(a3 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v13, v14, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness((uint64_t)v13, v14, (uint64_t)AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Collection, associated conformance descriptor for Collection.Collection.Index: Comparable);
  uint64_t v18 = type metadata accessor for Range(0, (uint64_t)AssociatedTypeWitness, AssociatedConformanceWitness, v17);
  v9[8] = v18;
  uint64_t v19 = (uint64_t)*(v18 - 1);
  uint64_t v20 = v19;
  v9[9] = v19;
  size_t v21 = *(void *)(v19 + 64);
  v9[10] = malloc(v21);
  v9[11] = malloc(v21);
  (*(void (**)(void))(v20 + 16))();
  Slice<>.subscript.getter(a2, a3, a4, v12);
  return Slice<>.subscript.modify;
}

void Slice<>.subscript.modify(void **a1, char a2)
{
  uint64_t v2 = *a1;
  if (a2)
  {
    uint64_t v4 = (char *)v2[10];
    uint64_t v3 = (char *)v2[11];
    uint64_t v5 = v2[8];
    uint64_t v6 = v2[9];
    uint64_t v8 = (void *)v2[6];
    uint64_t v7 = (void *)v2[7];
    uint64_t v9 = v2[5];
    uint64_t v23 = v2[4];
    uint64_t v10 = (unint64_t *)v2[2];
    uint64_t v11 = v2[3];
    (*(void (**)(void *, void *, unint64_t *))(v9 + 16))(v8, v7, v10);
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v4, v3, v5);
    void *v2 = v11;
    uint64_t WitnessTable = swift_getWitnessTable(protocol conformance descriptor for <> Slice<A>, v10, (uint64_t)v2);
    uint64_t v14 = swift_getWitnessTable(protocol conformance descriptor for Slice<A>, v10, v13);
    _writeBackMutableSlice<A, B>(_:bounds:slice:)(v23, v4, (uint64_t)v8, (uint64_t)v10, (uint64_t)v10, WitnessTable, v14);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v4, v5);
    uint64_t v15 = *(void (**)(void *, unint64_t *))(v9 + 8);
    v15(v8, v10);
    v15(v7, v10);
  }
  else
  {
    v2[1] = v2[3];
    uint64_t v4 = (char *)v2[10];
    uint64_t v3 = (char *)v2[11];
    uint64_t v16 = v2[9];
    uint64_t v24 = v2[8];
    uint64_t v8 = (void *)v2[6];
    uint64_t v7 = (void *)v2[7];
    uint64_t v18 = v2[4];
    uint64_t v17 = v2[5];
    uint64_t v19 = (unint64_t *)v2[2];
    uint64_t v20 = swift_getWitnessTable(protocol conformance descriptor for <> Slice<A>, v19, (uint64_t)(v2 + 1));
    uint64_t v22 = swift_getWitnessTable(protocol conformance descriptor for Slice<A>, v19, v21);
    _writeBackMutableSlice<A, B>(_:bounds:slice:)(v18, v3, (uint64_t)v7, (uint64_t)v19, (uint64_t)v19, v20, v22);
    (*(void (**)(char *, uint64_t))(v16 + 8))(v3, v24);
    (*(void (**)(void *, unint64_t *))(v17 + 8))(v7, v19);
  }
  free(v3);
  free(v4);
  free(v7);
  free(v8);

  free(v2);
}

uint64_t Slice<>.withContiguousMutableStorageIfAvailable<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  void (*v28)(uint64_t *__return_ptr, uint64_t (*)(), char *, void *, uint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33[16];
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  uint64_t v30 = a1;
  uint64_t v31 = a2;
  uint64_t v32 = a6;
  uint64_t v11 = *(void *)(a5 + 8);
  uint64_t v12 = *(void *)(a3 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (int **)v11, v12, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  uint64_t v26 = *((void *)AssociatedTypeWitness - 1);
  uint64_t v27 = AssociatedTypeWitness;
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v15 = (char *)&v23 - v14;
  uint64_t v34 = v12;
  uint64_t v35 = a4;
  uint64_t v36 = a5;
  uint64_t v29 = a3;
  uint64_t v28 = *(void (**)(uint64_t *__return_ptr, uint64_t (*)(), char *, void *, uint64_t, uint64_t))(a5 + 80);
  v28(&v37, EnumeratedSequence._base.modify, v33, &unk_1ECA06270, v12, a5);
  if (v37 == 1) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a4 - 8) + 56))(v32, 1, 1, a4);
  }
  (*(void (**)(uint64_t, uint64_t))(v11 + 64))(v12, v11);
  uint64_t v24 = a4;
  uint64_t v25 = v7;
  uint64_t v17 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 152);
  uint64_t v23 = v17(v15, (uint64_t)v6, v12, v11);
  (*(void (**)(char *, const char *))(v26 + 8))(v15, v27);
  uint64_t v18 = v17(v6, (uint64_t)&v6[*(int *)(v29 + 36)], v12, v11);
  uint64_t v19 = MEMORY[0x1F4188790](v18);
  uint64_t v21 = v23;
  uint64_t v20 = v24;
  *(&v23 - 8) = v12;
  *(&v23 - 7) = v20;
  *(&v23 - 6) = a5;
  *(&v23 - 5) = v21;
  uint64_t v22 = v30;
  *(&v23 - 4) = v19;
  *(&v23 - 3) = v22;
  *(&v23 - 2) = v31;
  return ((uint64_t (*)(void))v28)(partial apply for closure #2 in Slice<>.withContiguousMutableStorageIfAvailable<A>(_:));
}

void *closure #2 in Slice<>.withContiguousMutableStorageIfAvailable<A>(_:)(uint64_t *a1, uint64_t a2, uint64_t a3, void (*a4)(void *), uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = a2 + a3;
  if (__OFADD__(a2, a3))
  {
    __break(1u);
LABEL_7:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
  }
  if (v8 < a2) {
    goto LABEL_7;
  }
  if (a2 < 0) {
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x265uLL, 0);
  }
  if (a1[1] < v8) {
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x266uLL, 0);
  }
  v18[3] = a7;
  uint64_t v11 = *a1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, *(int ***)(*(void *)(a8 + 8) + 8), a6, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
  uint64_t v14 = UnsafeMutableBufferPointer.init(rebasing:)(a2, v8, v11, v13, (uint64_t)AssociatedTypeWitness);
  uint64_t v16 = v15;
  v18[0] = v14;
  v18[1] = v15;
  a4(v18);
  return $defer #1 <A><A1>() in closure #2 in Slice<>.withContiguousMutableStorageIfAvailable<A>(_:)(v18, v14, v16);
}

uint64_t UnsafeMutableBufferPointer.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return UnsafeBufferPointer.subscript.getter(a1, a2, a3, a4, a5, 0x265uLL, 0x266uLL);
}

uint64_t UnsafeBufferPointer.subscript.getter(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, unint64_t a7)
{
  if (result < 0) {
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, a6, 0);
  }
  if (a4 < a2) {
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, a7, 0);
  }
  return result;
}

uint64_t UnsafeMutableBufferPointer.init(rebasing:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a3)
  {
    uint64_t result = a3 + *(void *)(*(void *)(a5 - 8) + 72) * a1;
    uint64_t v8 = a2 - a1;
    BOOL v7 = v8 == 0;
    if (v8 >= 0) {
      goto LABEL_3;
    }
LABEL_7:
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeMutableBufferPointer with negative count", 46, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x47uLL, 0);
  }
  uint64_t result = 0;
  uint64_t v9 = a2 - a1;
  BOOL v7 = v9 == 0;
  if (v9 < 0) {
    goto LABEL_7;
  }
LABEL_3:
  if (!v7 && !result) {
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeMutableBufferPointer has a nil start and nonzero count", 60, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x49uLL, 0);
  }
  return result;
}

void *$defer #1 <A><A1>() in closure #2 in Slice<>.withContiguousMutableStorageIfAvailable<A>(_:)(void *result, uint64_t a2, uint64_t a3)
{
  if (*result)
  {
    if (!a2 || *result != a2) {
LABEL_7:
    }
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Slice.withContiguousMutableStorageIfAvailable: replacing the buffer is not allowed", 82, 2, "Swift/Slice.swift", 17, 2, 0x13AuLL, 0);
  }
  else if (a2)
  {
    goto LABEL_7;
  }
  if (result[1] != a3) {
    goto LABEL_7;
  }
  return result;
}

uint64_t protocol witness for MutableCollection.subscript.setter in conformance <> Slice<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return Slice<>.subscript.setter(a1, a2, a3, *(void *)(a4 - 8));
}

void (*protocol witness for MutableCollection.subscript.modify in conformance <> Slice<A>(void *a1, uint64_t a2, uint64_t a3, uint64_t a4))(uint64_t **a1, char a2)
{
  uint64_t v9 = malloc(0x58uLL);
  *a1 = v9;
  *uint64_t v9 = v4;
  v9[1] = a3;
  uint64_t v10 = *(void *)(a4 - 8);
  _OWORD v9[2] = v10;
  uint64_t v11 = *(void *)(v10 + 8);
  uint64_t v12 = *(void *)(a3 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, *(int ***)(v11 + 8), v12, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
  v9[3] = AssociatedTypeWitness;
  uint64_t v14 = *((void *)AssociatedTypeWitness - 1);
  v9[4] = v14;
  size_t v15 = *(void *)(v14 + 64);
  void v9[5] = malloc(v15);
  uint64_t v16 = malloc(v15);
  v9[6] = v16;
  uint64_t v17 = swift_getAssociatedTypeWitness(0, (int **)v11, v12, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  v9[7] = v17;
  uint64_t v18 = *((void *)v17 - 1);
  uint64_t v19 = v18;
  v9[8] = v18;
  size_t v20 = *(void *)(v18 + 64);
  v9[9] = malloc(v20);
  v9[10] = malloc(v20);
  (*(void (**)(void))(v19 + 16))();
  Slice<>.subscript.getter(a2, a3, v10, (uint64_t)v16);
  return protocol witness for MutableCollection.subscript.modify in conformance <> Slice<A>;
}

void protocol witness for MutableCollection.subscript.modify in conformance <> Slice<A>(uint64_t **a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (void *)(*a1)[9];
  uint64_t v4 = (void *)(*a1)[10];
  if (a2)
  {
    uint64_t v5 = v2[8];
    BOOL v7 = (void *)v2[5];
    uint64_t v6 = (void *)v2[6];
    uint64_t v8 = v2[3];
    uint64_t v9 = v2[4];
    uint64_t v10 = v2[1];
    uint64_t v11 = v2[2];
    uint64_t v12 = v2[7];
    (*(void (**)(void *, void *, uint64_t))(v9 + 16))(v7, v6, v8);
    (*(void (**)(void *, void *, uint64_t))(v5 + 32))(v3, v4, v12);
    Slice<>.subscript.setter((uint64_t)v7, (uint64_t)v3, v10, v11);
    (*(void (**)(void *, uint64_t))(v9 + 8))(v6, v8);
  }
  else
  {
    BOOL v7 = (void *)v2[5];
    uint64_t v6 = (void *)v2[6];
    Slice<>.subscript.setter((uint64_t)v6, (uint64_t)v4, v2[1], v2[2]);
  }
  free(v4);
  free(v3);
  free(v6);
  free(v7);

  free(v2);
}

uint64_t protocol witness for MutableCollection.subscript.setter in conformance <> Slice<A>(uint64_t a1, char *a2, unint64_t *a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(a4 - 8);
  specialized Slice<>.subscript.setter(a1, a2, a3, v7);
  uint64_t v8 = *(int ***)(v7 + 8);
  uint64_t v9 = a3[2];
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v8, v9, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness((uint64_t)v8, v9, (uint64_t)AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Collection, associated conformance descriptor for Collection.Collection.Index: Comparable);
  uint64_t v13 = type metadata accessor for Range(0, (uint64_t)AssociatedTypeWitness, AssociatedConformanceWitness, v12);
  (*((void (**)(char *, Class *))*(v13 - 1) + 1))(a2, v13);
  uint64_t v14 = *(uint64_t (**)(uint64_t, unint64_t *))(*(a3 - 1) + 8);

  return v14(a1, a3);
}

void (*protocol witness for MutableCollection.subscript.modify in conformance <> Slice<A>(void *a1, uint64_t a2, uint64_t a3, uint64_t a4))(uint64_t **a1, char a2, uint64_t a3)
{
  uint64_t v9 = malloc(0x50uLL);
  *a1 = v9;
  v9[1] = a3;
  _OWORD v9[2] = a4;
  *uint64_t v9 = v4;
  uint64_t v10 = *(void *)(a4 - 8);
  uint64_t v11 = *(void *)(a3 - 8);
  v9[3] = v11;
  size_t v12 = *(void *)(v11 + 64);
  v9[4] = malloc(v12);
  uint64_t v13 = (char *)malloc(v12);
  void v9[5] = v13;
  uint64_t v14 = *(int ***)(v10 + 8);
  uint64_t v15 = *(void *)(a3 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v14, v15, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness((uint64_t)v14, v15, (uint64_t)AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Collection, associated conformance descriptor for Collection.Collection.Index: Comparable);
  uint64_t v19 = type metadata accessor for Range(0, (uint64_t)AssociatedTypeWitness, AssociatedConformanceWitness, v18);
  v9[6] = v19;
  uint64_t v20 = (uint64_t)*(v19 - 1);
  uint64_t v21 = v20;
  v9[7] = v20;
  size_t v22 = *(void *)(v20 + 64);
  v9[8] = malloc(v22);
  v9[9] = malloc(v22);
  (*(void (**)(void))(v21 + 16))();
  Slice<>.subscript.getter(a2, a3, v10, v13);
  return protocol witness for MutableCollection.subscript.modify in conformance <> Slice<A>;
}

void protocol witness for MutableCollection.subscript.modify in conformance <> Slice<A>(uint64_t **a1, char a2, uint64_t a3)
{
  uint64_t v3 = (unint64_t **)*a1;
  uint64_t v4 = (char *)(*a1)[8];
  uint64_t v5 = (char *)(*a1)[9];
  uint64_t v6 = (*a1)[6];
  uint64_t v7 = (*a1)[7];
  uint64_t v9 = (void *)(*a1)[4];
  uint64_t v8 = (void *)(*a1)[5];
  uint64_t v10 = (*a1)[3];
  uint64_t v17 = (*a1)[2];
  uint64_t v12 = **a1;
  uint64_t v11 = (unint64_t *)(*a1)[1];
  if (a2)
  {
    (*(void (**)(void *, void *, unint64_t *))(v10 + 16))(v9, v8, v3[1]);
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v4, v5, v6);
    uint64_t WitnessTable = swift_getWitnessTable(protocol conformance descriptor for Slice<A>, v11, v13);
    _writeBackMutableSlice<A, B>(_:bounds:slice:)(v12, v4, (uint64_t)v9, (uint64_t)v11, (uint64_t)v11, v17, WitnessTable);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v4, v6);
    uint64_t v15 = *(void (**)(void *, unint64_t *))(v10 + 8);
    v15(v9, v11);
    v15(v8, v11);
  }
  else
  {
    uint64_t v16 = swift_getWitnessTable(protocol conformance descriptor for Slice<A>, v3[1], a3);
    _writeBackMutableSlice<A, B>(_:bounds:slice:)(v12, v5, (uint64_t)v8, (uint64_t)v11, (uint64_t)v11, v17, v16);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v5, v6);
    (*(void (**)(void *, unint64_t *))(v10 + 8))(v8, v11);
  }
  free(v5);
  free(v4);
  free(v8);
  free(v9);

  free(v3);
}

uint64_t protocol witness for MutableCollection.withContiguousMutableStorageIfAvailable<A>(_:) in conformance <> Slice<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  return Slice<>.withContiguousMutableStorageIfAvailable<A>(_:)(a1, a2, a4, a3, *(void *)(a5 - 8), a6);
}

uint64_t Slice<>.init()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void (**)(uint64_t, uint64_t))(a2 + 24);
  uint64_t v7 = *(void *)(a2 + 8);
  type metadata accessor for Slice(0, a1, v7, a4);
  v6(a1, a2);
  (*(void (**)(uint64_t, uint64_t))(v7 + 64))(a1, v7);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 72))(a1, v7);
}

uint64_t Slice<>.init(repeating:count:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a4 + 48);
  uint64_t v9 = *(void *)(a4 + 8);
  type metadata accessor for Slice(0, a3, v9, a4);
  v8(a1, a2, a3, a4);
  (*(void (**)(uint64_t, uint64_t))(v9 + 64))(a3, v9);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 72))(a3, v9);
}

uint64_t Slice<>.init<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a4 + 56);
  uint64_t v10 = *(void *)(a4 + 8);
  type metadata accessor for Slice(0, a2, v10, a4);
  v9(a1, a3, a5, a2, a4);
  (*(void (**)(uint64_t, uint64_t))(v10 + 64))(a2, v10);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v10 + 72))(a2, v10);
}

uint64_t Slice<>.replaceSubrange<A>(_:with:)(char *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v48 = a4;
  uint64_t v49 = a6;
  uint64_t v47 = a2;
  unint64_t v52 = a1;
  uint64_t v44 = *(void *)(a4 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v43 = (char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v45 = v8;
  uint64_t v9 = *(void *)(v8 + 8);
  uint64_t v11 = *((void *)v10 + 2);
  uint64_t v51 = v10;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (int **)v9, v11, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  uint64_t v13 = *((void *)AssociatedTypeWitness - 1);
  uint64_t v14 = MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v42 = (char *)&v37 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v17 = (char *)&v37 - v16;
  uint64_t v40 = *(void (**)(uint64_t, uint64_t))(v9 + 64);
  uint64_t v41 = v9 + 64;
  v40(v11, v9);
  uint64_t v18 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 152);
  uint64_t v37 = v18(v17, (uint64_t)v6, v11, v9);
  uint64_t v46 = v13;
  uint64_t v38 = *(void (**)(char *, const char *))(v13 + 8);
  uint64_t v39 = v13 + 8;
  v38(v17, AssociatedTypeWitness);
  uint64_t v19 = v52;
  uint64_t v50 = v18(v6, (uint64_t)v52, v11, v9);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v9, v11, (uint64_t)AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Collection, associated conformance descriptor for Collection.Collection.Index: Comparable);
  size_t v22 = &v19[*((int *)type metadata accessor for Range(0, (uint64_t)AssociatedTypeWitness, AssociatedConformanceWitness, v21)+ 9)];
  uint64_t v23 = *((int *)v51 + 9);
  uint64_t v51 = v6;
  uint64_t v24 = &v6[v23];
  uint64_t result = v18(v22, (uint64_t)&v6[v23], v11, v9);
  uint64_t v26 = v50 + result;
  if (__OFADD__(v50, result))
  {
    __break(1u);
  }
  else
  {
    uint64_t v28 = v48;
    uint64_t v27 = v49;
    uint64_t v29 = v47;
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v49 + 112))(v48, v49);
    uint64_t v30 = v26 + result;
    if (!__OFADD__(v26, result))
    {
      uint64_t v31 = v43;
      uint64_t v32 = *(void (**)(char *, uint64_t, uint64_t))(v44 + 16);
      uint64_t v50 = v30;
      v32(v43, v29, v28);
      (*(void (**)(char *, char *, uint64_t, uint64_t, uint64_t))(v45 + 32))(v52, v31, v28, v27, v11);
      uint64_t v33 = v42;
      v40(v11, v9);
      uint64_t v34 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 136);
      v34(v33, v37, v11, v9);
      v38(v33, AssociatedTypeWitness);
      unint64_t v52 = v24;
      uint64_t v35 = *(void (**)(uint64_t, char *, const char *))(v46 + 40);
      uint64_t v36 = v51;
      v35((uint64_t)v51, v17, AssociatedTypeWitness);
      v34(v36, v50, v11, v9);
      return ((uint64_t (*)(char *, char *, const char *))v35)(v52, v17, AssociatedTypeWitness);
    }
  }
  __break(1u);
  return result;
}

uint64_t Slice<>.insert(_:at:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v37 = a1;
  uint64_t v38 = a2;
  uint64_t v40 = a4;
  uint64_t v5 = *(void *)(a4 + 8);
  uint64_t v6 = *(int ***)(v5 + 8);
  uint64_t v7 = *(void *)(a3 + 16);
  uint64_t v44 = a3;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v6, v7, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
  uint64_t v35 = *((void *)AssociatedTypeWitness - 1);
  uint64_t v36 = AssociatedTypeWitness;
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v34 = (char *)&v29 - v9;
  uint64_t v42 = v7;
  uint64_t v10 = swift_getAssociatedTypeWitness(0, (int **)v5, v7, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  uint64_t v11 = *((void *)v10 - 1);
  uint64_t v12 = MEMORY[0x1F4188790](v10);
  uint64_t v41 = (char *)&v29 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  uint64_t v15 = (char *)&v29 - v14;
  uint64_t v31 = *(void (**)(uint64_t, uint64_t))(v5 + 64);
  uint64_t v32 = v5 + 64;
  v31(v7, v5);
  uint64_t v43 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 152);
  uint64_t v29 = v43(v15, v4, v7, v5);
  uint64_t v16 = *(void (**)(char *, const char *))(v11 + 8);
  v16(v15, v10);
  uint64_t v39 = v11;
  uint64_t v17 = *(void (**)(char *, uint64_t, const char *))(v11 + 16);
  v17(v15, v4, v10);
  uint64_t v18 = *(int *)(v44 + 36);
  uint64_t v44 = v4;
  uint64_t v19 = v41;
  uint64_t v33 = v4 + v18;
  ((void (*)(char *))v17)(v41);
  uint64_t v20 = v42;
  uint64_t v21 = ((uint64_t (*)(char *, char *))v43)(v15, v19);
  v16(v19, v10);
  uint64_t v30 = v10;
  uint64_t v43 = (uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))v16;
  uint64_t result = ((uint64_t (*)(char *, const char *))v16)(v15, v10);
  uint64_t v23 = v21 + 1;
  if (__OFADD__(v21, 1))
  {
    __break(1u);
  }
  else
  {
    uint64_t v24 = v34;
    uint64_t v25 = *(void (**)(char *, uint64_t, const char *))(v35 + 16);
    uint64_t v35 = v23;
    v25(v34, v37, v36);
    (*(void (**)(char *, uint64_t, uint64_t))(v40 + 80))(v24, v38, v20);
    v31(v20, v5);
    uint64_t v40 = *(void *)(v5 + 136);
    ((void (*)(char *, uint64_t, uint64_t, uint64_t))v40)(v19, v29, v20, v5);
    uint64_t v26 = v30;
    ((void (*)(char *, const char *))v43)(v19, v30);
    uint64_t v27 = *(void (**)(uint64_t, char *, const char *))(v39 + 40);
    uint64_t v28 = v44;
    v27(v44, v15, v26);
    ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v40)(v28, v35, v20, v5);
    return ((uint64_t (*)(uint64_t, char *, const char *))v27)(v33, v15, v26);
  }
  return result;
}

uint64_t Slice<>.insert<A>(contentsOf:at:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7 = v6;
  uint64_t v54 = a4;
  uint64_t v55 = a6;
  uint64_t v56 = a1;
  uint64_t v48 = *(void *)(a4 - 8);
  uint64_t v49 = a2;
  MEMORY[0x1F4188790](a1);
  uint64_t v46 = (char *)&v41 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v50 = v9;
  uint64_t v10 = *(void *)(v9 + 8);
  uint64_t v12 = *(void *)(v11 + 16);
  uint64_t v13 = v11;
  uint64_t v52 = v11;
  uint64_t v57 = v12;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (int **)v10, v12, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  uint64_t v58 = *((void *)AssociatedTypeWitness - 1);
  uint64_t v15 = MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v53 = (char *)&v41 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v15);
  uint64_t v18 = (char *)&v41 - v17;
  uint64_t v19 = v6 + *(int *)(v13 + 40);
  uint64_t v43 = *(void (**)(uint64_t, uint64_t))(v10 + 64);
  uint64_t v44 = v10 + 64;
  v43(v12, v10);
  uint64_t v51 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 152);
  uint64_t v42 = v51(v18, v6, v12, v10);
  uint64_t v20 = v58;
  uint64_t v21 = *(void (**)(char *, const char *))(v58 + 8);
  v21(v18, AssociatedTypeWitness);
  size_t v22 = *(void (**)(char *, uint64_t, const char *))(v20 + 16);
  v22(v18, v7, AssociatedTypeWitness);
  uint64_t v23 = *(int *)(v52 + 36);
  uint64_t v52 = v7;
  uint64_t v24 = v7 + v23;
  uint64_t v25 = v53;
  uint64_t v45 = v24;
  ((void (*)(char *))v22)(v53);
  uint64_t v26 = v10;
  uint64_t v47 = v19;
  uint64_t v27 = v25;
  uint64_t v28 = v54;
  uint64_t v29 = v51(v18, (uint64_t)v25, v57, v26);
  uint64_t v30 = v55;
  uint64_t v31 = v29;
  v21(v27, AssociatedTypeWitness);
  uint64_t v51 = (uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))v21;
  v21(v18, AssociatedTypeWitness);
  uint64_t v32 = v56;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v30 + 112))(v28, v30);
  if (__OFADD__(v31, result))
  {
    __break(1u);
  }
  else
  {
    uint64_t v34 = *(void (**)(char *, uint64_t, uint64_t))(v48 + 16);
    uint64_t v35 = v46;
    uint64_t v48 = v31 + result;
    v34(v46, v32, v28);
    uint64_t v36 = v28;
    uint64_t v37 = v57;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t, uint64_t))(v50 + 88))(v35, v49, v36, v30, v57);
    v43(v37, v26);
    uint64_t v38 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v26 + 136);
    v38(v27, v42, v37, v26);
    ((void (*)(char *, const char *))v51)(v27, AssociatedTypeWitness);
    uint64_t v39 = *(void (**)(uint64_t, char *, const char *))(v58 + 40);
    uint64_t v40 = (char *)v52;
    v39(v52, v18, AssociatedTypeWitness);
    v38(v40, v48, v37, v26);
    return ((uint64_t (*)(uint64_t, char *, const char *))v39)(v45, v18, AssociatedTypeWitness);
  }
  return result;
}

uint64_t Slice<>.remove(at:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v37 = a4;
  uint64_t v38 = a1;
  uint64_t v39 = a3;
  uint64_t v5 = *(void *)(a3 + 8);
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v44 = a2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (int **)v5, v6, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  uint64_t v8 = *((void *)AssociatedTypeWitness - 1);
  uint64_t v9 = MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v41 = (char *)v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  uint64_t v12 = (char *)v30 - v11;
  uint64_t v13 = *(void (**)(uint64_t, uint64_t))(v5 + 64);
  uint64_t v42 = v6;
  uint64_t v34 = v13;
  uint64_t v35 = v5 + 64;
  v13(v6, v5);
  uint64_t v43 = *(const char **)(v5 + 152);
  uint64_t v32 = ((uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))v43)(v12, v4, v6, v5);
  uint64_t v14 = v8 + 8;
  uint64_t v15 = *(void (**)(char *, const char *))(v8 + 8);
  v15(v12, AssociatedTypeWitness);
  uint64_t v40 = v8;
  uint64_t v16 = *(void (**)(char *, uint64_t, const char *))(v8 + 16);
  v16(v12, v4, AssociatedTypeWitness);
  uint64_t v17 = *(int *)(v44 + 36);
  uint64_t v44 = v4;
  uint64_t v18 = v41;
  uint64_t v36 = v4 + v17;
  ((void (*)(char *))v16)(v41);
  uint64_t v19 = v42;
  uint64_t v31 = v5;
  uint64_t v20 = ((uint64_t (*)(char *, char *))v43)(v12, v18);
  v15(v18, AssociatedTypeWitness);
  uint64_t v43 = AssociatedTypeWitness;
  uint64_t v33 = v15;
  v30[1] = v14;
  uint64_t result = ((uint64_t (*)(char *, const char *))v15)(v12, AssociatedTypeWitness);
  if (__OFSUB__(v20, 1))
  {
    __break(1u);
  }
  else
  {
    uint64_t v22 = v38;
    uint64_t v23 = *(void (**)(uint64_t, uint64_t))(v39 + 96);
    uint64_t v24 = v19;
    uint64_t v38 = v20 - 1;
    v23(v22, v19);
    uint64_t v25 = v31;
    v34(v19, v31);
    uint64_t v26 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v25 + 136);
    v26(v18, v32, v24, v25);
    uint64_t v27 = v43;
    v33(v18, v43);
    uint64_t v28 = *(void (**)(uint64_t, char *, const char *))(v40 + 40);
    uint64_t v29 = (char *)v44;
    v28(v44, v12, v27);
    v26(v29, v38, v24, v25);
    return ((uint64_t (*)(uint64_t, char *, const char *))v28)(v36, v12, v27);
  }
  return result;
}

uint64_t Slice<>.removeSubrange(_:)(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v38 = a1;
  uint64_t v32 = a3;
  uint64_t v4 = *(void *)(a3 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v35 = v5;
  uint64_t v36 = a2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (int **)v4, v5, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  uint64_t v7 = *((void *)AssociatedTypeWitness - 1);
  uint64_t v8 = MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v37 = (char *)v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)v27 - v10;
  uint64_t v29 = *(void (**)(uint64_t, uint64_t))(v4 + 64);
  uint64_t v30 = v4 + 64;
  v29(v5, v4);
  uint64_t v39 = *(uint64_t (**)(char *, char *, uint64_t, uint64_t))(v4 + 152);
  uint64_t v12 = v39(v11, v3, v5, v4);
  uint64_t v13 = *(void (**)(char *, const char *))(v7 + 8);
  v27[0] = v12;
  v27[1] = v7 + 8;
  v13(v11, AssociatedTypeWitness);
  uint64_t v33 = v7;
  uint64_t v14 = *(void (**)(char *, char *, const char *))(v7 + 16);
  v14(v11, v3, AssociatedTypeWitness);
  uint64_t v15 = *(int *)(v36 + 36);
  uint64_t v34 = v3;
  uint64_t v16 = v37;
  uint64_t v31 = &v3[v15];
  ((void (*)(char *))v14)(v37);
  uint64_t v17 = v38;
  uint64_t v18 = v35;
  uint64_t v36 = v39(v11, v16, v35, v4);
  v13(v16, AssociatedTypeWitness);
  uint64_t v28 = v13;
  v13(v11, AssociatedTypeWitness);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v4, v18, (uint64_t)AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Collection, associated conformance descriptor for Collection.Collection.Index: Comparable);
  uint64_t v21 = type metadata accessor for Range(0, (uint64_t)AssociatedTypeWitness, AssociatedConformanceWitness, v20);
  uint64_t result = v39(v17, &v17[*((int *)v21 + 9)], v18, v4);
  if (__OFSUB__(v36, result))
  {
    __break(1u);
  }
  else
  {
    uint64_t v23 = *(void (**)(char *, uint64_t))(v32 + 104);
    uint64_t v39 = (uint64_t (*)(char *, char *, uint64_t, uint64_t))(v36 - result);
    v23(v17, v18);
    v29(v18, v4);
    uint64_t v24 = *(void (**)(char *, uint64_t (*)(char *, void, uint64_t, uint64_t), uint64_t, uint64_t))(v4 + 136);
    v24(v16, (uint64_t (*)(char *, void, uint64_t, uint64_t))v27[0], v18, v4);
    v28(v16, AssociatedTypeWitness);
    uint64_t v25 = v34;
    uint64_t v26 = *(void (**)(char *, char *, const char *))(v33 + 40);
    v26(v34, v11, AssociatedTypeWitness);
    v24(v25, (uint64_t (*)(char *, void, uint64_t, uint64_t))v39, v18, v4);
    return ((uint64_t (*)(char *, char *, const char *))v26)(v31, v11, AssociatedTypeWitness);
  }
  return result;
}

uint64_t protocol witness for RangeReplaceableCollection.init() in conformance <> Slice<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return Slice<>.init()(*(void *)(a1 + 16), *(void *)(a2 - 8), a3, a4);
}

uint64_t protocol witness for RangeReplaceableCollection.replaceSubrange<A>(_:with:) in conformance <> Slice<A>(char *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  Slice<>.replaceSubrange<A>(_:with:)(a1, a2, a5, a3, *(void *)(a6 - 8), a4);
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 8);

  return v8(a2, a3);
}

uint64_t protocol witness for RangeReplaceableCollection.init(repeating:count:) in conformance <> Slice<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return Slice<>.init(repeating:count:)(a1, a2, *(void *)(a3 + 16), *(void *)(a4 - 8));
}

uint64_t protocol witness for RangeReplaceableCollection.init<A>(_:) in conformance <> Slice<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return Slice<>.init<A>(_:)(a1, *(void *)(a4 + 16), a2, *(void *)(a5 - 8), a3);
}

uint64_t protocol witness for RangeReplaceableCollection.insert(_:at:) in conformance <> Slice<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a4 - 8);
  Slice<>.insert(_:at:)(a1, a2, a3, v6);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, *(int ***)(*(void *)(v6 + 8) + 8), *(void *)(a3 + 16), (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
  uint64_t v8 = *(uint64_t (**)(uint64_t, const char *))(*((void *)AssociatedTypeWitness - 1) + 8);

  return v8(a1, AssociatedTypeWitness);
}

uint64_t protocol witness for RangeReplaceableCollection.insert<A>(contentsOf:at:) in conformance <> Slice<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  Slice<>.insert<A>(contentsOf:at:)(a1, a2, a5, a3, *(void *)(a6 - 8), a4);
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 8);

  return v8(a1, a3);
}

uint64_t protocol witness for RangeReplaceableCollection.remove(at:) in conformance <> Slice<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return Slice<>.remove(at:)(a1, a2, *(void *)(a3 - 8), a4);
}

uint64_t protocol witness for RangeReplaceableCollection.removeSubrange(_:) in conformance <> Slice<A>(char *a1, uint64_t a2, uint64_t a3)
{
  return Slice<>.removeSubrange(_:)(a1, a2, *(void *)(a3 - 8));
}

uint64_t Slice<>.replaceSubrange<A>(_:with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v75 = a7;
  uint64_t v76 = a4;
  uint64_t v72 = a6;
  uint64_t v79 = a2;
  uint64_t v80 = a1;
  uint64_t v69 = *(void *)(a4 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v70 = (char *)&v64 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v81 = v10;
  uint64_t v11 = *(void *)(v10 + 8);
  uint64_t v13 = *(void *)(v12 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (int **)v11, v13, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  uint64_t v15 = *((void *)AssociatedTypeWitness - 1);
  uint64_t v16 = MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v67 = (char *)&v64 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v16);
  uint64_t v19 = (char *)&v64 - v18;
  uint64_t v78 = a3;
  uint64_t v20 = *(int *)(a3 + 40);
  uint64_t v82 = v7;
  uint64_t v21 = v7 + v20;
  uint64_t v64 = *(void (**)(uint64_t, uint64_t))(v11 + 64);
  uint64_t v65 = v11 + 64;
  v64(v13, v11);
  uint64_t v68 = v11;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v11, v13, (uint64_t)AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Collection, associated conformance descriptor for Collection.Collection.Index: Comparable);
  uint64_t v22 = *(void *)(AssociatedConformanceWitness + 8);
  uint64_t v23 = *(uint64_t (**)(void))(v22 + 8);
  uint64_t v24 = v80;
  char v25 = v23();
  id v73 = v19;
  uint64_t v74 = v15;
  uint64_t v66 = *(void (**)(char *, const char *))(v15 + 8);
  v66(v19, AssociatedTypeWitness);
  uint64_t v71 = AssociatedTypeWitness;
  if (v25)
  {
    uint64_t v26 = v81;
    uint64_t v27 = v82;
    uint64_t v28 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v81 + 64);
    uint64_t v29 = v28(v82, v24, v13, v81);
    uint64_t v31 = v24
        + *((int *)type metadata accessor for Range(0, (uint64_t)AssociatedTypeWitness, AssociatedConformanceWitness, v30)+ 9);
    uint64_t v32 = v27 + *(int *)(v78 + 36);
    uint64_t v78 = v21;
    uint64_t v33 = v13;
    uint64_t result = v28(v31, v32, v13, v26);
    uint64_t v35 = v29 + result;
    if (__OFADD__(v29, result))
    {
      __break(1u);
    }
    else
    {
      uint64_t v36 = v75;
      uint64_t v37 = v76;
      uint64_t v38 = v79;
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v75 + 112))(v76, v75);
      uint64_t v39 = v35 + result;
      if (!__OFADD__(v35, result))
      {
        uint64_t v40 = v70;
        (*(void (**)(char *, uint64_t, uint64_t))(v69 + 16))(v70, v38, v37);
        uint64_t v41 = v37;
        uint64_t v42 = v33;
        (*(void (**)(uint64_t, char *, uint64_t, uint64_t, uint64_t))(v72 + 32))(v24, v40, v41, v36, v33);
        uint64_t v43 = v73;
        v64(v33, v68);
        uint64_t v44 = *(void (**)(uint64_t, char *, const char *))(v74 + 40);
        uint64_t v45 = v82;
        uint64_t v46 = v71;
        v44(v82, v43, v71);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v81 + 48))(v45, v39, v42);
        return ((uint64_t (*)(uint64_t, char *, const char *))v44)(v32, v43, v46);
      }
    }
    __break(1u);
    goto LABEL_13;
  }
  LODWORD(v65) = ((uint64_t (*)(uint64_t, uint64_t, const char *, uint64_t))v23)(v24, v82, AssociatedTypeWitness, v22);
  uint64_t v47 = v81;
  uint64_t v48 = v67;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v81 + 32))(v24, v13, v81);
  uint64_t v50 = v24
      + *((int *)type metadata accessor for Range(0, (uint64_t)AssociatedTypeWitness, AssociatedConformanceWitness, v49)
        + 9);
  uint64_t v51 = v82;
  uint64_t v52 = *(uint64_t (**)(uint64_t))(v47 + 64);
  uint64_t v78 = v82 + *(int *)(v78 + 36);
  uint64_t v53 = v52(v50);
  uint64_t v54 = v75;
  uint64_t v55 = v76;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v75 + 112))(v76, v75);
  uint64_t v56 = v53 + result;
  if (__OFADD__(v53, result))
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  BOOL v57 = __OFADD__(v56, 1);
  uint64_t v58 = v56 + 1;
  if (v57)
  {
LABEL_14:
    __break(1u);
    return result;
  }
  uint64_t AssociatedConformanceWitness = v58;
  uint64_t v59 = v70;
  (*(void (**)(char *, uint64_t, uint64_t))(v69 + 16))(v70, v79, v55);
  uint64_t v60 = v48;
  (*(void (**)(uint64_t, char *, uint64_t, uint64_t, uint64_t))(v72 + 32))(v80, v59, v55, v54, v13);
  uint64_t v62 = v73;
  uint64_t v61 = v74;
  unint64_t v63 = v71;
  if (v65)
  {
    (*(void (**)(char *, uint64_t))(v68 + 184))(v60, v13);
    (*(void (**)(uint64_t, char *, const char *))(v61 + 40))(v51, v62, v63);
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v47 + 48))(v60, AssociatedConformanceWitness, v13, v47);
  v66(v60, v63);
  return (*(uint64_t (**)(uint64_t, char *, const char *))(v61 + 40))(v78, v62, v63);
}

uint64_t Slice<>.insert(_:at:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v56 = a1;
  uint64_t v57 = a5;
  uint64_t v58 = a4;
  uint64_t v8 = *(void *)(a4 + 8);
  uint64_t v9 = *(void *)(a3 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, *(int ***)(v8 + 8), v9, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
  uint64_t v54 = *((void *)AssociatedTypeWitness - 1);
  uint64_t v55 = AssociatedTypeWitness;
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v53 = (char *)&v48 - v11;
  uint64_t v12 = swift_getAssociatedTypeWitness(0, (int **)v8, v9, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  uint64_t v13 = (char *)*((void *)v12 - 1);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v51 = (char *)&v48 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = MEMORY[0x1F4188790](v14);
  uint64_t v52 = (char *)&v48 - v17;
  MEMORY[0x1F4188790](v16);
  uint64_t v19 = (char *)&v48 - v18;
  uint64_t v59 = a3;
  uint64_t v20 = *(int *)(a3 + 40);
  uint64_t v61 = v5;
  uint64_t v21 = *(void (**)(uint64_t, uint64_t))(v8 + 64);
  uint64_t v62 = &v5[v20];
  uint64_t v49 = v21;
  uint64_t v50 = (void (*)(char *, const char *))(v8 + 64);
  v21(v9, v8);
  uint64_t v63 = v9;
  uint64_t v22 = *(void *)(swift_getAssociatedConformanceWitness(v8, v9, (uint64_t)v12, (uint64_t)&protocol requirements base descriptor for Collection, associated conformance descriptor for Collection.Collection.Index: Comparable)+ 8);
  uint64_t v23 = *(uint64_t (**)(uint64_t, char *, const char *, uint64_t))(v22 + 8);
  uint64_t v60 = a2;
  char v24 = v23(a2, v19, v12, v22);
  char v25 = (void (*)(char *, const char *))*((void *)v13 + 1);
  v25(v19, v12);
  if (v24)
  {
    uint64_t v26 = v13;
    uint64_t v27 = (void (*)(char *, uint64_t, const char *))*((void *)v13 + 2);
    uint64_t v28 = v61;
    v27(v19, (uint64_t)v61, v12);
    uint64_t v29 = &v28[*(int *)(v59 + 36)];
    uint64_t v30 = v52;
    v27(v52, (uint64_t)v29, v12);
    uint64_t v31 = (*(uint64_t (**)(char *, char *, uint64_t, uint64_t))(v8 + 152))(v19, v30, v63, v8);
    v25(v30, v12);
    uint64_t result = ((uint64_t (*)(char *, const char *))v25)(v19, v12);
    BOOL v33 = __OFADD__(v31, 1);
    uint64_t v34 = v31 + 1;
    if (!v33)
    {
      uint64_t v35 = v53;
      (*(void (**)(char *, uint64_t, const char *))(v54 + 16))(v53, v56, v55);
      uint64_t v36 = v29;
      uint64_t v37 = v63;
      (*(void (**)(char *, uint64_t, uint64_t))(v57 + 80))(v35, v60, v63);
      v49(v37, v8);
      uint64_t v38 = (void (*)(uint64_t, char *, const char *))*((void *)v26 + 5);
      uint64_t v39 = v61;
      v38((uint64_t)v61, v19, v12);
      (*(void (**)(char *, uint64_t, uint64_t))(v58 + 48))(v39, v34, v37);
      return ((uint64_t (*)(char *, char *, const char *))v38)(v36, v19, v12);
    }
    __break(1u);
    goto LABEL_10;
  }
  uint64_t v50 = v25;
  uint64_t v48 = v8;
  uint64_t v52 = v13;
  uint64_t v41 = v60;
  uint64_t v40 = v61;
  LODWORD(v49) = v23(v60, v61, v12, v22);
  uint64_t v42 = v58;
  uint64_t v43 = v51;
  uint64_t v44 = v63;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v58 + 32))(v41, v63, v58);
  uint64_t v45 = &v40[*(int *)(v59 + 36)];
  uint64_t result = (*(uint64_t (**)(uint64_t, char *, uint64_t, uint64_t))(v42 + 64))(v41, v45, v44, v42);
  uint64_t v46 = result + 2;
  if (__OFADD__(result, 2))
  {
LABEL_10:
    __break(1u);
    return result;
  }
  uint64_t v47 = v53;
  (*(void (**)(char *, uint64_t, const char *))(v54 + 16))(v53, v56, v55);
  (*(void (**)(char *, uint64_t, uint64_t))(v57 + 80))(v47, v60, v63);
  if (v49)
  {
    (*(void (**)(char *, uint64_t))(v48 + 184))(v43, v63);
    (*((void (**)(char *, char *, const char *))v52 + 5))(v40, v19, v12);
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v42 + 48))(v43, v46, v63, v42);
  v50(v43, v12);
  return (*((uint64_t (**)(char *, char *, const char *))v52 + 5))(v45, v19, v12);
}

uint64_t Slice<>.insert<A>(contentsOf:at:)(uint64_t a1, uint64_t a2, char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v72 = a7;
  uint64_t v65 = a6;
  uint64_t v74 = a1;
  uint64_t v69 = a4;
  uint64_t v63 = *(void *)(a4 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v62 = (char *)&v59 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v67 = v11;
  uint64_t v12 = *(void *)(v11 + 8);
  uint64_t v14 = *(void *)(v13 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (int **)v12, v14, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  uint64_t v73 = *((void *)AssociatedTypeWitness - 1);
  uint64_t v16 = MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v66 = (char *)&v59 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = MEMORY[0x1F4188790](v16);
  uint64_t v61 = (char *)&v59 - v19;
  MEMORY[0x1F4188790](v18);
  uint64_t v21 = (char *)&v59 - v20;
  uint64_t v68 = a3;
  uint64_t v22 = *((int *)a3 + 10);
  uint64_t v71 = v7;
  uint64_t v23 = *(char **)(v12 + 64);
  uint64_t v76 = &v7[v22];
  uint64_t v59 = v23;
  uint64_t v60 = v12 + 64;
  ((void (*)(uint64_t, uint64_t))v23)(v14, v12);
  uint64_t v70 = v12;
  uint64_t v75 = v14;
  uint64_t v24 = *(void *)(swift_getAssociatedConformanceWitness(v12, v14, (uint64_t)AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Collection, associated conformance descriptor for Collection.Collection.Index: Comparable)+ 8);
  char v25 = *(uint64_t (**)(uint64_t, char *, const char *, uint64_t))(v24 + 8);
  uint64_t v26 = a2;
  char v27 = v25(a2, v21, AssociatedTypeWitness, v24);
  uint64_t v28 = v73;
  uint64_t v30 = v73 + 8;
  uint64_t v29 = *(void (**)(char *, const char *))(v73 + 8);
  v29(v21, AssociatedTypeWitness);
  uint64_t v64 = v26;
  if (v27)
  {
    uint64_t v31 = *(void (**)(char *, uint64_t, const char *))(v28 + 16);
    uint64_t v32 = v71;
    v31(v21, (uint64_t)v71, AssociatedTypeWitness);
    BOOL v33 = v61;
    uint64_t v68 = &v32[*((int *)v68 + 9)];
    ((void (*)(char *))v31)(v61);
    uint64_t v34 = (*(uint64_t (**)(char *, char *, uint64_t))(v70 + 152))(v21, v33, v75);
    v29(v33, AssociatedTypeWitness);
    v29(v21, AssociatedTypeWitness);
    uint64_t v35 = v72;
    uint64_t v36 = v69;
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v72 + 112))(v69, v72);
    uint64_t v38 = v34 + result;
    if (!__OFADD__(v34, result))
    {
      uint64_t v39 = v62;
      (*(void (**)(char *, uint64_t, uint64_t))(v63 + 16))(v62, v74, v36);
      uint64_t v40 = v39;
      uint64_t v41 = v75;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t, uint64_t))(v65 + 88))(v40, v64, v36, v35, v75);
      ((void (*)(uint64_t, uint64_t))v59)(v41, v70);
      uint64_t v42 = *(void (**)(uint64_t, char *, const char *))(v28 + 40);
      v42((uint64_t)v32, v21, AssociatedTypeWitness);
      (*(void (**)(char *, uint64_t, uint64_t))(v67 + 48))(v32, v38, v41);
      return ((uint64_t (*)(char *, char *, const char *))v42)(v68, v21, AssociatedTypeWitness);
    }
    __break(1u);
    goto LABEL_11;
  }
  uint64_t v59 = v21;
  uint64_t v60 = v30;
  uint64_t v61 = (char *)v29;
  uint64_t v43 = v71;
  char v44 = v25(v26, v71, AssociatedTypeWitness, v24);
  uint64_t v45 = v67;
  uint64_t v46 = v75;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v67 + 32))(v26, v75, v67);
  uint64_t v47 = &v43[*((int *)v68 + 9)];
  uint64_t v48 = (*(uint64_t (**)(uint64_t, char *, uint64_t, uint64_t))(v45 + 64))(v26, v47, v46, v45);
  uint64_t v49 = v74;
  uint64_t v50 = v69;
  uint64_t result = (*(uint64_t (**)(void))(v72 + 112))();
  uint64_t v51 = v48 + result;
  if (__OFADD__(v48, result))
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  uint64_t v68 = v47;
  uint64_t v52 = v51 + 1;
  if (__OFADD__(v51, 1))
  {
LABEL_12:
    __break(1u);
    return result;
  }
  uint64_t v53 = v45;
  uint64_t v54 = v62;
  (*(void (**)(char *, uint64_t, uint64_t))(v63 + 16))(v62, v49, v50);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t, uint64_t))(v65 + 88))(v54, v64, v50, v72, v46);
  uint64_t v55 = v73;
  uint64_t v56 = v66;
  char v57 = v44;
  uint64_t v58 = v59;
  if (v57)
  {
    (*(void (**)(char *, uint64_t))(v70 + 184))(v66, v46);
    (*(void (**)(char *, char *, const char *))(v55 + 40))(v71, v58, AssociatedTypeWitness);
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v53 + 48))(v56, v52, v46, v53);
  ((void (*)(char *, const char *))v61)(v56, AssociatedTypeWitness);
  return (*(uint64_t (**)(char *, char *, const char *))(v55 + 40))(v68, v58, AssociatedTypeWitness);
}

uint64_t Slice<>.remove(at:)@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v59 = a4;
  uint64_t v56 = a3;
  uint64_t v57 = a5;
  uint64_t v8 = *(void *)(a3 + 8);
  uint64_t v9 = *(void *)(a2 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, *(int ***)(v8 + 8), v9, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
  uint64_t v54 = *((void *)AssociatedTypeWitness - 1);
  uint64_t v55 = AssociatedTypeWitness;
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v53 = (char *)&v49 - v11;
  uint64_t v12 = swift_getAssociatedTypeWitness(0, (int **)v8, v9, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  uint64_t v13 = *((void *)v12 - 1);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v60 = (char *)&v49 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = MEMORY[0x1F4188790](v14);
  uint64_t v52 = (char *)&v49 - v17;
  MEMORY[0x1F4188790](v16);
  uint64_t v19 = (char *)&v49 - v18;
  uint64_t v58 = a2;
  uint64_t v20 = *(int *)(a2 + 40);
  uint64_t v62 = v5;
  uint64_t v21 = *(void (**)(uint64_t, uint64_t))(v8 + 64);
  uint64_t v63 = &v5[v20];
  uint64_t v50 = v21;
  uint64_t v51 = v8 + 64;
  v21(v9, v8);
  uint64_t v64 = v9;
  uint64_t v22 = *(void *)(swift_getAssociatedConformanceWitness(v8, v9, (uint64_t)v12, (uint64_t)&protocol requirements base descriptor for Collection, associated conformance descriptor for Collection.Collection.Index: Comparable)+ 8);
  uint64_t v23 = *(uint64_t (**)(char *, char *, const char *, uint64_t))(v22 + 8);
  uint64_t v24 = a1;
  char v25 = v23(a1, v19, v12, v22);
  uint64_t v61 = v13;
  uint64_t v26 = *(void (**)(char *, const char *))(v13 + 8);
  v26(v19, v12);
  if (v25)
  {
    uint64_t v60 = v24;
    uint64_t v27 = v59;
    uint64_t v28 = v62;
    uint64_t v29 = *(void (**)(char *, uint64_t, const char *))(v61 + 16);
    v29(v19, (uint64_t)v62, v12);
    uint64_t v30 = &v28[*(int *)(v58 + 36)];
    uint64_t v31 = v52;
    v29(v52, (uint64_t)v30, v12);
    uint64_t v32 = (*(uint64_t (**)(char *, char *, uint64_t, uint64_t))(v8 + 152))(v19, v31, v64, v8);
    v26(v31, v12);
    uint64_t result = ((uint64_t (*)(char *, const char *))v26)(v19, v12);
    BOOL v34 = __OFSUB__(v32, 1);
    uint64_t v35 = v32 - 1;
    if (v34)
    {
      __break(1u);
    }
    else
    {
      uint64_t v36 = v64;
      (*(void (**)(char *, uint64_t, uint64_t))(v27 + 96))(v60, v64, v27);
      v50(v36, v8);
      uint64_t v37 = v62;
      uint64_t v38 = v30;
      uint64_t v39 = *(void (**)(uint64_t, char *, const char *))(v61 + 40);
      v39((uint64_t)v62, v19, v12);
      (*(void (**)(char *, uint64_t, uint64_t))(v56 + 48))(v37, v35, v36);
      return ((uint64_t (*)(char *, char *, const char *))v39)(v38, v19, v12);
    }
  }
  else
  {
    uint64_t v51 = v8;
    uint64_t v52 = (char *)v26;
    uint64_t v40 = v62;
    char v41 = v23(v24, v62, v12, v22);
    uint64_t v42 = v56;
    uint64_t v43 = v64;
    (*(void (**)(char *, uint64_t, uint64_t))(v56 + 32))(v24, v64, v56);
    char v44 = &v40[*(int *)(v58 + 36)];
    uint64_t v58 = (*(uint64_t (**)(char *, char *, uint64_t, uint64_t))(v42 + 64))(v24, v44, v43, v42);
    uint64_t v45 = v53;
    (*(void (**)(char *, uint64_t))(v59 + 96))(v24, v43);
    uint64_t v46 = v42;
    uint64_t v47 = v61;
    if (v41)
    {
      (*(void (**)(char *, uint64_t))(v51 + 184))(v60, v64);
      (*(void (**)(char *, char *, const char *))(v47 + 40))(v62, v19, v12);
    }
    uint64_t v48 = v60;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v46 + 48))(v60, v58, v64, v46);
    ((void (*)(char *, const char *))v52)(v48, v12);
    (*(void (**)(char *, char *, const char *))(v47 + 40))(v44, v19, v12);
    return (*(uint64_t (**)(uint64_t, char *, const char *))(v54 + 32))(v57, v45, v55);
  }
  return result;
}

uint64_t Slice<>.removeSubrange(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v55 = a4;
  uint64_t v61 = a3;
  uint64_t v7 = *(void *)(a3 + 8);
  uint64_t v8 = *(void *)(a2 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (int **)v7, v8, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  uint64_t v10 = *((void *)AssociatedTypeWitness - 1);
  uint64_t v11 = MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v56 = (char *)&v50 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = MEMORY[0x1F4188790](v11);
  uint64_t v54 = (char *)&v50 - v14;
  MEMORY[0x1F4188790](v13);
  uint64_t v16 = (char *)&v50 - v15;
  uint64_t v58 = (char *)a2;
  uint64_t v17 = *(int *)(a2 + 40);
  uint64_t v63 = v4;
  uint64_t v18 = *(void (**)(uint64_t, uint64_t))(v7 + 64);
  uint64_t v62 = &v4[v17];
  uint64_t v52 = v18;
  uint64_t v53 = (void (*)(char *, const char *))(v7 + 64);
  v18(v8, v7);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v7, v8, (uint64_t)AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Collection, associated conformance descriptor for Collection.Collection.Index: Comparable);
  uint64_t v19 = *(void *)(AssociatedConformanceWitness + 8);
  uint64_t v20 = *(uint64_t (**)(uint64_t, char *, const char *, uint64_t))(v19 + 8);
  uint64_t v60 = a1;
  char v21 = v20(a1, v16, AssociatedTypeWitness, v19);
  uint64_t v59 = v10;
  uint64_t v24 = *(void (**)(char *, const char *))(v10 + 8);
  uint64_t v22 = (char *)(v10 + 8);
  uint64_t v23 = v24;
  v24(v16, AssociatedTypeWitness);
  if (v21)
  {
    char v25 = *(void (**)(char *, uint64_t, const char *))(v59 + 16);
    uint64_t v26 = v63;
    v25(v16, (uint64_t)v63, AssociatedTypeWitness);
    uint64_t v27 = &v26[*((int *)v58 + 9)];
    uint64_t v28 = v54;
    v25(v54, (uint64_t)v27, AssociatedTypeWitness);
    uint64_t v29 = (*(uint64_t (**)(char *, char *, uint64_t, uint64_t))(v7 + 152))(v16, v28, v8, v7);
    v23(v28, AssociatedTypeWitness);
    v23(v16, AssociatedTypeWitness);
    uint64_t v31 = type metadata accessor for Range(0, (uint64_t)AssociatedTypeWitness, AssociatedConformanceWitness, v30);
    uint64_t v33 = v60;
    uint64_t v32 = v61;
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v61 + 64))(v60, v60 + *((int *)v31 + 9), v8, v61);
    BOOL v35 = __OFSUB__(v29, result);
    uint64_t v36 = v29 - result;
    if (!v35)
    {
      (*(void (**)(uint64_t, uint64_t))(v55 + 104))(v33, v8);
      v52(v8, v7);
      uint64_t v37 = *(void (**)(uint64_t, char *, const char *))(v59 + 40);
      uint64_t v38 = v63;
      v37((uint64_t)v63, v16, AssociatedTypeWitness);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v32 + 48))(v38, v36, v8, v32);
      return ((uint64_t (*)(char *, char *, const char *))v37)(v27, v16, AssociatedTypeWitness);
    }
    __break(1u);
    goto LABEL_11;
  }
  uint64_t v53 = v23;
  uint64_t v54 = v22;
  uint64_t v51 = v7;
  uint64_t v39 = v60;
  uint64_t v40 = v63;
  LODWORD(v52) = v20(v60, v63, AssociatedTypeWitness, v19);
  uint64_t v41 = v61;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v61 + 32))(v39, v8, v61);
  uint64_t v42 = *(uint64_t (**)(uint64_t))(v41 + 64);
  uint64_t v58 = &v40[*((int *)v58 + 9)];
  uint64_t v43 = v42(v39);
  uint64_t v45 = type metadata accessor for Range(0, (uint64_t)AssociatedTypeWitness, AssociatedConformanceWitness, v44);
  uint64_t result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v42)(v39, v39 + *((int *)v45 + 9), v8, v41);
  uint64_t v46 = v43 - result;
  if (__OFSUB__(v43, result))
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  uint64_t v47 = v46 + 1;
  if (__OFADD__(v46, 1))
  {
LABEL_12:
    __break(1u);
    return result;
  }
  (*(void (**)(uint64_t, uint64_t))(v55 + 104))(v60, v8);
  uint64_t v48 = v59;
  uint64_t v49 = v56;
  if (v52)
  {
    (*(void (**)(char *, uint64_t))(v51 + 184))(v56, v8);
    (*(void (**)(char *, char *, const char *))(v48 + 40))(v63, v16, AssociatedTypeWitness);
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v61 + 48))(v49, v47, v8);
  v53(v49, AssociatedTypeWitness);
  return (*(uint64_t (**)(char *, char *, const char *))(v48 + 40))(v58, v16, AssociatedTypeWitness);
}

uint64_t (*_SmallString._storage.modify())()
{
  return EnumeratedSequence._base.modify;
}

uint64_t (*_SmallString.leadingRawBits.modify(void *a1))()
{
  *a1 = *v1;
  a1[1] = v1;
  return _SmallString.leadingRawBits.modify;
}

uint64_t (*_SmallString.trailingRawBits.modify(void *a1))()
{
  *a1 = *(void *)(v1 + 8);
  a1[1] = v1;
  return _SmallString.trailingRawBits.modify;
}

uint64_t _SmallString.init(_:)(uint64_t a1, uint64_t a2)
{
  return a1;
}

uint64_t _StringObject.isSmall.getter(uint64_t a1, unint64_t a2)
{
  return (a2 >> 61) & 1;
}

uint64_t _SmallString.init()()
{
  return 0;
}

uint64_t _StringObject.init(empty:)()
{
  return 0;
}

uint64_t static _SmallString.capacity.getter()
{
  return 15;
}

uint64_t _SmallString.capacity.getter()
{
  return 15;
}

uint64_t _SmallString.count.getter(uint64_t a1, unint64_t a2)
{
  return HIBYTE(a2) & 0xF;
}

uint64_t static _StringObject.getSmallCount(fromRaw:)(unint64_t a1)
{
  return HIBYTE(a1) & 0xF;
}

uint64_t _SmallString.unusedCapacity.getter(uint64_t a1, unint64_t a2)
{
  return ~HIBYTE(a2) & 0xF;
}

uint64_t _SmallString.isASCII.getter(uint64_t a1, unint64_t a2)
{
  return (a2 >> 62) & 1;
}

uint64_t static _StringObject.getSmallIsASCII(fromRaw:)(unint64_t a1)
{
  return (a1 >> 62) & 1;
}

uint64_t _SmallString.endIndex.getter(uint64_t a1, unint64_t a2)
{
  return HIBYTE(a2) & 0xF;
}

unint64_t _SmallString.subscript.getter(uint64_t a1, unint64_t a2, unint64_t a3)
{
  if (a1 >= 8) {
    a2 = a3;
  }
  return a2 >> (8 * (a1 & 7u));
}

uint64_t key path getter for _SmallString.subscript(_:) : _SmallString@<X0>(uint64_t result@<X0>, void *a2@<X1>, unsigned char *a3@<X8>)
{
  *a3 = *(void *)(result + 8 * (*a2 > 7)) >> (8 * (*a2 & 7u));
  return result;
}

unsigned __int8 *key path setter for _SmallString.subscript(_:) : _SmallString(unsigned __int8 *result, uint64_t a2, void *a3)
{
  *(void *)(a2 + 8 * (*a3 > 7)) = *(void *)(a2 + 8 * (*a3 > 7)) & ((-255 << (8
                                                                                         * (*a3 & 7u)))
                                                                             - 1) | ((unint64_t)*result << (8 * (*a3 & 7u)));
  return result;
}

uint64_t _SmallString.subscript.setter(uint64_t result, uint64_t a2)
{
  *(void *)(v2 + 8 * (a2 > 7)) = *(void *)(v2 + 8 * (a2 > 7)) & ((-255 << (8 * (a2 & 7u))) - 1) | ((unint64_t)result << (8 * (a2 & 7u)));
  return result;
}

Swift::UInt8 __swiftcall UInt64._uncheckedGetByte(at:)(Swift::Int at)
{
  return v1 >> (8 * (at & 7u));
}

Swift::Void __swiftcall UInt64._uncheckedSetByte(at:to:)(Swift::Int at, Swift::UInt8 to)
{
  unint64_t *v2 = *v2 & ((-255 << (8 * (at & 7u))) - 1) | ((unint64_t)to << (8
                                                                                           * (at & 7u)));
}

uint64_t (*_SmallString.subscript.modify(uint64_t *a1, uint64_t a2))(uint64_t result)
{
  uint64_t v4 = a1 + 2;
  *a1 = a2;
  a1[1] = (uint64_t)v2;
  if (a2 > 7)
  {
    ++v2;
    uint64_t v5 = _SmallString.subscript.modify;
  }
  else
  {
    uint64_t v5 = _SmallString.subscript.modify;
  }
  uint64_t result = v5;
  *uint64_t v4 = *v2 >> (8 * (a2 & 7u));
  return result;
}

uint64_t _SmallString.subscript.modify(uint64_t result)
{
  **(void **)(result + 8) = ((-255 << (8 * (*(_DWORD *)result & 7u))) - 1) & **(void **)(result + 8) | ((unint64_t)*(unsigned __int8 *)(result + 16) << (8 * (*(_DWORD *)result & 7u)));
  return result;
}

{
  *(void *)(*(void *)(result + 8) + 8) = ((-255 << (8 * (*(_DWORD *)result & 7u))) - 1) & *(void *)(*(void *)(result + 8) + 8) | ((unint64_t)*(unsigned __int8 *)(result + 16) << (8 * (*(_DWORD *)result & 7u)));
  return result;
}

uint64_t _SmallString.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  v41[0] = a3;
  v41[1] = a4 & 0xFFFFFFFFFFFFFFLL;
  if (a1 < 0)
  {
    unint64_t v40 = 1860;
    goto LABEL_26;
  }
  if ((uint64_t)(HIBYTE(a4) & 0xF) < a2)
  {
    unint64_t v40 = 1861;
LABEL_26:
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, v40, 0);
  }
  uint64_t v4 = a2 - a1;
  if (a2 - a1 < 0) {
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeBufferPointer with negative count", 39, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x53FuLL, 0);
  }
  if (a2 == a1) {
    return 0;
  }
  uint64_t v6 = v4 - 8;
  if (v4 >= 8) {
    unint64_t v7 = 8;
  }
  else {
    unint64_t v7 = a2 - a1;
  }
  if (!v7)
  {
    int8x8_t v5 = 0;
    goto LABEL_18;
  }
  if (v7 < 8)
  {
    unint64_t v8 = 0;
    int8x8_t v5 = 0;
    uint64_t v9 = 0;
LABEL_16:
    uint64_t v31 = (unsigned __int8 *)v41 + v8 + a1;
    unint64_t v32 = v7 - v8;
    do
    {
      unsigned int v33 = *v31++;
      *(void *)&v5 |= (unint64_t)v33 << (v9 & 0x38);
      v9 += 8;
      --v32;
    }
    while (v32);
    goto LABEL_18;
  }
  unint64_t v8 = v7 & 8;
  int64x2_t v10 = (int64x2_t)xmmword_18162ACE0;
  int64x2_t v11 = (int64x2_t)xmmword_18162AD00;
  int64x2_t v12 = (int64x2_t)xmmword_18162ACD0;
  uint64_t v9 = 8 * v8;
  int8x16_t v13 = 0uLL;
  int8x16_t v14 = (int8x16_t)vdupq_n_s64(0x38uLL);
  int64x2_t v15 = vdupq_n_s64(0x40uLL);
  int64x2_t v16 = (int64x2_t)xmmword_18162ACF0;
  unint64_t v17 = v8;
  uint64_t v18 = (uint8x8_t *)((char *)v41 + a1);
  int8x16_t v19 = 0uLL;
  int8x16_t v20 = 0uLL;
  int8x16_t v21 = 0uLL;
  do
  {
    uint8x8_t v22 = *v18++;
    uint16x8_t v23 = vmovl_u8(v22);
    uint32x4_t v24 = vmovl_high_u16(v23);
    v25.i64[0] = v24.u32[2];
    v25.i64[1] = v24.u32[3];
    uint64x2_t v26 = v25;
    v25.i64[0] = v24.u32[0];
    v25.i64[1] = v24.u32[1];
    uint64x2_t v27 = v25;
    uint32x4_t v28 = vmovl_u16(*(uint16x4_t *)v23.i8);
    v25.i64[0] = v28.u32[2];
    v25.i64[1] = v28.u32[3];
    uint64x2_t v29 = v25;
    v25.i64[0] = v28.u32[0];
    v25.i64[1] = v28.u32[1];
    int8x16_t v21 = vorrq_s8((int8x16_t)vshlq_u64(v26, (uint64x2_t)vandq_s8((int8x16_t)v10, v14)), v21);
    int8x16_t v20 = vorrq_s8((int8x16_t)vshlq_u64(v27, (uint64x2_t)vandq_s8((int8x16_t)v11, v14)), v20);
    int8x16_t v19 = vorrq_s8((int8x16_t)vshlq_u64(v29, (uint64x2_t)vandq_s8((int8x16_t)v12, v14)), v19);
    int8x16_t v13 = vorrq_s8((int8x16_t)vshlq_u64(v25, (uint64x2_t)vandq_s8((int8x16_t)v16, v14)), v13);
    int64x2_t v11 = vaddq_s64(v11, v15);
    int64x2_t v12 = vaddq_s64(v12, v15);
    int64x2_t v16 = vaddq_s64(v16, v15);
    int64x2_t v10 = vaddq_s64(v10, v15);
    v17 -= 8;
  }
  while (v17);
  int8x16_t v30 = vorrq_s8(vorrq_s8(v13, v20), vorrq_s8(v19, v21));
  int8x8_t v5 = vorr_s8(*(int8x8_t *)v30.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v30, v30, 8uLL));
  if (v7 != v8) {
    goto LABEL_16;
  }
LABEL_18:
  if ((unint64_t)v4 >= 9)
  {
    uint64_t v34 = 0;
    uint64_t v35 = 0;
    uint64_t v36 = (unsigned __int8 *)&v41[1] + a1;
    unint64_t v37 = v6 & ~(v6 >> 63);
    do
    {
      if (v37 <= a2 - a1 - 9) {
        _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Index out of range", 18, 2, "Swift/Range.swift", 17, 2, 0x131uLL, 0);
      }
      unsigned int v38 = *v36++;
      v34 |= (unint64_t)v38 << (v35 & 0x38);
      v35 += 8;
      --v6;
    }
    while (v6);
  }
  return (uint64_t)v5;
}

unsigned __int8 *key path getter for _SmallString.subscript(_:) : _SmallString@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, int8x8_t *a3@<X8>)
{
  uint64_t v5 = *a1;
  unint64_t v4 = a1[1];
  uint64_t v6 = *a2;
  uint64_t v7 = a2[1];
  v80[0] = v5;
  v80[1] = v4 & 0xFFFFFFFFFFFFFFLL;
  if (v6 < 0) {
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x744uLL, 0);
  }
  uint64_t v8 = HIBYTE(v4) & 0xF;
  if (v8 < v7) {
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x745uLL, 0);
  }
  uint64_t result = (unsigned __int8 *)specialized UnsafeBufferPointer.init(rebasing:)(v6, v7, (uint64_t)v80, v8);
  if (!v10)
  {
    int8x8_t v12 = 0;
    unint64_t v13 = 0xE000000000000000;
    goto LABEL_34;
  }
  if (v10 <= 8)
  {
    unint64_t v11 = v10;
    if (v10 < 0) {
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
    }
  }
  else
  {
    unint64_t v11 = 8;
  }
  if (v11 >= 8)
  {
    if (v11 >= 0x10)
    {
      unint64_t v14 = v11 & 0xFFFFFFFFFFFFFFF0;
      int64x2_t v39 = (int64x2_t)xmmword_18162AD80;
      int64x2_t v40 = (int64x2_t)xmmword_18162AD90;
      int64x2_t v41 = (int64x2_t)xmmword_18162ADA0;
      int64x2_t v42 = (int64x2_t)xmmword_18162ADB0;
      unint64_t v15 = 8 * (v11 & 0xFFFFFFFFFFFFFFF0);
      int8x16_t v43 = 0uLL;
      int8x16_t v44 = (int8x16_t)vdupq_n_s64(0x38uLL);
      int64x2_t v45 = vdupq_n_s64(0x80uLL);
      unint64_t v46 = v11 & 0xFFFFFFFFFFFFFFF0;
      uint64_t v47 = (uint8x16_t *)result;
      int64x2_t v48 = (int64x2_t)xmmword_18162ACE0;
      int8x16_t v49 = 0uLL;
      int8x16_t v50 = 0uLL;
      int64x2_t v51 = (int64x2_t)xmmword_18162AD00;
      int8x16_t v52 = 0uLL;
      int8x16_t v53 = 0uLL;
      int64x2_t v54 = (int64x2_t)xmmword_18162ACD0;
      int8x16_t v55 = 0uLL;
      int8x16_t v56 = 0uLL;
      int64x2_t v57 = (int64x2_t)xmmword_18162ACF0;
      int8x16_t v58 = 0uLL;
      do
      {
        uint8x16_t v59 = *v47++;
        uint16x8_t v60 = vmovl_u8(*(uint8x8_t *)v59.i8);
        uint32x4_t v61 = vmovl_high_u16(v60);
        v62.i64[0] = v61.u32[2];
        v62.i64[1] = v61.u32[3];
        uint64x2_t v63 = v62;
        uint16x8_t v64 = vmovl_high_u8(v59);
        uint32x4_t v65 = vmovl_u16(*(uint16x4_t *)v64.i8);
        v62.i64[0] = v65.u32[2];
        v62.i64[1] = v65.u32[3];
        uint64x2_t v66 = v62;
        v62.i64[0] = v65.u32[0];
        v62.i64[1] = v65.u32[1];
        uint64x2_t v67 = v62;
        v62.i64[0] = v61.u32[0];
        v62.i64[1] = v61.u32[1];
        uint64x2_t v68 = v62;
        uint32x4_t v69 = vmovl_u16(*(uint16x4_t *)v60.i8);
        v62.i64[0] = v69.u32[2];
        v62.i64[1] = v69.u32[3];
        uint64x2_t v70 = v62;
        uint32x4_t v71 = vmovl_high_u16(v64);
        v62.i64[0] = v71.u32[0];
        v62.i64[1] = v71.u32[1];
        uint64x2_t v72 = v62;
        v62.i64[0] = v69.u32[0];
        v62.i64[1] = v69.u32[1];
        uint64x2_t v73 = v62;
        v62.i64[0] = v71.u32[2];
        v62.i64[1] = v71.u32[3];
        int8x16_t v52 = vorrq_s8((int8x16_t)vshlq_u64(v63, (uint64x2_t)vandq_s8((int8x16_t)v48, v44)), v52);
        int8x16_t v55 = vorrq_s8((int8x16_t)vshlq_u64(v66, (uint64x2_t)vandq_s8((int8x16_t)v41, v44)), v55);
        int8x16_t v53 = vorrq_s8((int8x16_t)vshlq_u64(v67, (uint64x2_t)vandq_s8((int8x16_t)v42, v44)), v53);
        int8x16_t v50 = vorrq_s8((int8x16_t)vshlq_u64(v68, (uint64x2_t)vandq_s8((int8x16_t)v51, v44)), v50);
        int8x16_t v49 = vorrq_s8((int8x16_t)vshlq_u64(v70, (uint64x2_t)vandq_s8((int8x16_t)v54, v44)), v49);
        int8x16_t v56 = vorrq_s8((int8x16_t)vshlq_u64(v72, (uint64x2_t)vandq_s8((int8x16_t)v40, v44)), v56);
        int8x16_t v43 = vorrq_s8((int8x16_t)vshlq_u64(v73, (uint64x2_t)vandq_s8((int8x16_t)v57, v44)), v43);
        int8x16_t v58 = vorrq_s8((int8x16_t)vshlq_u64(v62, (uint64x2_t)vandq_s8((int8x16_t)v39, v44)), v58);
        int64x2_t v51 = vaddq_s64(v51, v45);
        int64x2_t v54 = vaddq_s64(v54, v45);
        int64x2_t v57 = vaddq_s64(v57, v45);
        int64x2_t v48 = vaddq_s64(v48, v45);
        int64x2_t v42 = vaddq_s64(v42, v45);
        int64x2_t v41 = vaddq_s64(v41, v45);
        int64x2_t v40 = vaddq_s64(v40, v45);
        int64x2_t v39 = vaddq_s64(v39, v45);
        v46 -= 16;
      }
      while (v46);
      int8x16_t v74 = vorrq_s8(vorrq_s8(vorrq_s8(v43, v53), vorrq_s8(v50, v56)), vorrq_s8(vorrq_s8(v49, v55), vorrq_s8(v52, v58)));
      int8x8_t v12 = vorr_s8(*(int8x8_t *)v74.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v74, v74, 8uLL));
      if (v11 == v14) {
        goto LABEL_22;
      }
      if ((v11 & 8) == 0) {
        goto LABEL_20;
      }
    }
    else
    {
      int8x8_t v12 = 0;
      unint64_t v15 = 0;
      unint64_t v14 = 0;
    }
    unint64_t v16 = v14;
    int64x2_t v17 = vdupq_n_s64(v15);
    unint64_t v14 = v11 & 0xFFFFFFFFFFFFFFF8;
    unint64_t v15 = 8 * (v11 & 0xFFFFFFFFFFFFFFF8);
    int8x16_t v18 = 0uLL;
    int8x16_t v19 = (int8x16_t)(unint64_t)v12;
    int64x2_t v20 = vaddq_s64(v17, (int64x2_t)xmmword_18162ACE0);
    int64x2_t v21 = vaddq_s64(v17, (int64x2_t)xmmword_18162AD00);
    int64x2_t v22 = vaddq_s64(v17, (int64x2_t)xmmword_18162ACD0);
    int64x2_t v23 = vaddq_s64(v17, (int64x2_t)xmmword_18162ACF0);
    uint32x4_t v24 = (uint8x8_t *)&result[v16];
    int8x16_t v25 = (int8x16_t)vdupq_n_s64(0x38uLL);
    unint64_t v26 = v16 - (v11 & 0xFFFFFFFFFFFFFFF8);
    int64x2_t v27 = vdupq_n_s64(0x40uLL);
    int8x16_t v28 = 0uLL;
    int8x16_t v29 = 0uLL;
    do
    {
      uint8x8_t v30 = *v24++;
      uint16x8_t v31 = vmovl_u8(v30);
      uint32x4_t v32 = vmovl_high_u16(v31);
      v33.i64[0] = v32.u32[2];
      v33.i64[1] = v32.u32[3];
      uint64x2_t v34 = v33;
      v33.i64[0] = v32.u32[0];
      v33.i64[1] = v32.u32[1];
      uint64x2_t v35 = v33;
      uint32x4_t v36 = vmovl_u16(*(uint16x4_t *)v31.i8);
      v33.i64[0] = v36.u32[2];
      v33.i64[1] = v36.u32[3];
      uint64x2_t v37 = v33;
      v33.i64[0] = v36.u32[0];
      v33.i64[1] = v36.u32[1];
      int8x16_t v29 = vorrq_s8((int8x16_t)vshlq_u64(v34, (uint64x2_t)vandq_s8((int8x16_t)v20, v25)), v29);
      int8x16_t v28 = vorrq_s8((int8x16_t)vshlq_u64(v35, (uint64x2_t)vandq_s8((int8x16_t)v21, v25)), v28);
      int8x16_t v18 = vorrq_s8((int8x16_t)vshlq_u64(v37, (uint64x2_t)vandq_s8((int8x16_t)v22, v25)), v18);
      int8x16_t v19 = vorrq_s8((int8x16_t)vshlq_u64(v33, (uint64x2_t)vandq_s8((int8x16_t)v23, v25)), v19);
      int64x2_t v21 = vaddq_s64(v21, v27);
      int64x2_t v22 = vaddq_s64(v22, v27);
      int64x2_t v23 = vaddq_s64(v23, v27);
      int64x2_t v20 = vaddq_s64(v20, v27);
      v26 += 8;
    }
    while (v26);
    int8x16_t v38 = vorrq_s8(vorrq_s8(v19, v28), vorrq_s8(v18, v29));
    int8x8_t v12 = vorr_s8(*(int8x8_t *)v38.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v38, v38, 8uLL));
    if (v11 == v14) {
      goto LABEL_22;
    }
    goto LABEL_20;
  }
  unint64_t v14 = 0;
  int8x8_t v12 = 0;
  unint64_t v15 = 0;
LABEL_20:
  unint64_t v75 = v11 - v14;
  uint64_t v76 = &result[v14];
  do
  {
    unsigned int v77 = *v76++;
    *(void *)&v12 |= (unint64_t)v77 << (v15 & 0x38);
    v15 += 8;
    --v75;
  }
  while (v75);
LABEL_22:
  if (v10 <= 8)
  {
    uint64_t v78 = 0;
  }
  else
  {
    uint64_t v78 = result[8];
    if (v10 != 9)
    {
      v78 |= (unint64_t)result[9] << 8;
      if (v10 != 10)
      {
        v78 |= (unint64_t)result[10] << 16;
        if (v10 != 11)
        {
          v78 |= (unint64_t)result[11] << 24;
          if (v10 != 12)
          {
            v78 |= (unint64_t)result[12] << 32;
            if (v10 != 13)
            {
              v78 |= (unint64_t)result[13] << 40;
              if (v10 != 14) {
                v78 |= (unint64_t)result[14] << 48;
              }
            }
          }
        }
      }
    }
  }
  unint64_t v79 = 0xA000000000000000;
  if (((v78 | *(void *)&v12) & 0x8080808080808080) == 0) {
    unint64_t v79 = 0xE000000000000000;
  }
  unint64_t v13 = v79 | (v10 << 56) | v78;
LABEL_34:
  *a3 = v12;
  a3[1] = (int8x8_t)v13;
  return result;
}

void key path setter for _SmallString.subscript(_:) : _SmallString()
{
}

uint64_t _SmallString.init(_:)(uint8x16_t *a1, uint64_t a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 > 15) {
    return 0;
  }
  if (a2 >= 8) {
    unint64_t v3 = 8;
  }
  else {
    unint64_t v3 = a2;
  }
  if ((v3 & 0x8000000000000000) != 0) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
  }
  if (v3 < 8)
  {
    unint64_t v4 = 0;
    int8x8_t v2 = 0;
    unint64_t v5 = 0;
    goto LABEL_19;
  }
  if (v3 >= 0x10)
  {
    unint64_t v4 = v3 & 0xFFFFFFFFFFFFFFF0;
    uint16x8_t v29 = vmovl_high_u8(*a1);
    int8x16_t v30 = (int8x16_t)vmovl_u16(*(uint16x4_t *)v29.i8);
    uint16x8_t v31 = vmovl_u8(*(uint8x8_t *)a1->i8);
    int8x16_t v32 = (int8x16_t)vmovl_u16(*(uint16x4_t *)v31.i8);
    int8x16_t v33 = (int8x16_t)vmovl_high_u16(v29);
    int8x8_t v34 = (int8x8_t)vextq_s8(v33, v33, 8uLL).u64[0];
    int8x16_t v35 = (int8x16_t)vmovl_high_u16(v31);
    int8x8_t v36 = (int8x8_t)vextq_s8(v35, v35, 8uLL).u64[0];
    *(int8x8_t *)v35.i8 = vorr_s8(*(int8x8_t *)v35.i8, *(int8x8_t *)v33.i8);
    v37.i64[0] = v35.u32[0];
    v37.i64[1] = v35.u32[1];
    int8x16_t v38 = (int8x16_t)vshlq_u64(v37, (uint64x2_t)xmmword_18162AD00);
    *(int8x8_t *)v33.i8 = vorr_s8(*(int8x8_t *)v32.i8, *(int8x8_t *)v30.i8);
    v37.i64[0] = v33.u32[0];
    v37.i64[1] = v33.u32[1];
    int8x16_t v39 = vorrq_s8((int8x16_t)vshlq_u64(v37, (uint64x2_t)xmmword_18162ACF0), v38);
    *(int8x8_t *)v33.i8 = vorr_s8(v36, v34);
    v37.i64[0] = v33.u32[0];
    v37.i64[1] = v33.u32[1];
    int8x16_t v40 = (int8x16_t)vshlq_u64(v37, (uint64x2_t)xmmword_18162ACE0);
    *(int8x8_t *)v30.i8 = vorr_s8((int8x8_t)*(_OWORD *)&vextq_s8(v32, v32, 8uLL), (int8x8_t)*(_OWORD *)&vextq_s8(v30, v30, 8uLL));
    v37.i64[0] = v30.u32[0];
    v37.i64[1] = v30.u32[1];
    int8x16_t v41 = vorrq_s8(v39, vorrq_s8((int8x16_t)vshlq_u64(v37, (uint64x2_t)xmmword_18162ACD0), v40));
    int8x8_t v2 = vorr_s8(*(int8x8_t *)v41.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v41, v41, 8uLL));
    if (v3 == (v3 & 0xFFFFFFFFFFFFFFF0)) {
      goto LABEL_21;
    }
    unint64_t v5 = 8 * v4;
    if ((v3 & 8) == 0) {
      goto LABEL_19;
    }
  }
  else
  {
    int8x8_t v2 = 0;
    unint64_t v5 = 0;
    unint64_t v4 = 0;
  }
  unint64_t v6 = v4;
  int64x2_t v7 = vdupq_n_s64(v5);
  unint64_t v4 = v3 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v5 = 8 * (v3 & 0xFFFFFFFFFFFFFFF8);
  int8x16_t v8 = 0uLL;
  int8x16_t v9 = (int8x16_t)(unint64_t)v2;
  int64x2_t v10 = vaddq_s64(v7, (int64x2_t)xmmword_18162ACE0);
  int64x2_t v11 = vaddq_s64(v7, (int64x2_t)xmmword_18162AD00);
  int64x2_t v12 = vaddq_s64(v7, (int64x2_t)xmmword_18162ACD0);
  int64x2_t v13 = vaddq_s64(v7, (int64x2_t)xmmword_18162ACF0);
  unint64_t v14 = (uint8x8_t *)&a1->i8[v6];
  int8x16_t v15 = (int8x16_t)vdupq_n_s64(0x38uLL);
  unint64_t v16 = v6 - (v3 & 0xFFFFFFFFFFFFFFF8);
  int64x2_t v17 = vdupq_n_s64(0x40uLL);
  int8x16_t v18 = 0uLL;
  int8x16_t v19 = 0uLL;
  do
  {
    uint8x8_t v20 = *v14++;
    uint16x8_t v21 = vmovl_u8(v20);
    uint32x4_t v22 = vmovl_high_u16(v21);
    v23.i64[0] = v22.u32[2];
    v23.i64[1] = v22.u32[3];
    uint64x2_t v24 = v23;
    v23.i64[0] = v22.u32[0];
    v23.i64[1] = v22.u32[1];
    uint64x2_t v25 = v23;
    uint32x4_t v26 = vmovl_u16(*(uint16x4_t *)v21.i8);
    v23.i64[0] = v26.u32[2];
    v23.i64[1] = v26.u32[3];
    uint64x2_t v27 = v23;
    v23.i64[0] = v26.u32[0];
    v23.i64[1] = v26.u32[1];
    int8x16_t v19 = vorrq_s8((int8x16_t)vshlq_u64(v24, (uint64x2_t)vandq_s8((int8x16_t)v10, v15)), v19);
    int8x16_t v18 = vorrq_s8((int8x16_t)vshlq_u64(v25, (uint64x2_t)vandq_s8((int8x16_t)v11, v15)), v18);
    int8x16_t v8 = vorrq_s8((int8x16_t)vshlq_u64(v27, (uint64x2_t)vandq_s8((int8x16_t)v12, v15)), v8);
    int8x16_t v9 = vorrq_s8((int8x16_t)vshlq_u64(v23, (uint64x2_t)vandq_s8((int8x16_t)v13, v15)), v9);
    int64x2_t v11 = vaddq_s64(v11, v17);
    int64x2_t v12 = vaddq_s64(v12, v17);
    int64x2_t v13 = vaddq_s64(v13, v17);
    int64x2_t v10 = vaddq_s64(v10, v17);
    v16 += 8;
  }
  while (v16);
  int8x16_t v28 = vorrq_s8(vorrq_s8(v9, v18), vorrq_s8(v8, v19));
  int8x8_t v2 = vorr_s8(*(int8x8_t *)v28.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v28, v28, 8uLL));
  if (v3 != v4)
  {
LABEL_19:
    unint64_t v42 = v3 - v4;
    int8x16_t v43 = &a1->u8[v4];
    do
    {
      unsigned int v44 = *v43++;
      *(void *)&v2 |= (unint64_t)v44 << (v5 & 0x38);
      v5 += 8;
      --v42;
    }
    while (v42);
  }
LABEL_21:
  uint64_t v45 = 0;
  uint64_t v46 = a2 - 8;
  if (a2 > 8)
  {
    uint64_t v47 = 0;
    int64x2_t v48 = &a1->u8[8];
    do
    {
      unsigned int v49 = *v48++;
      v45 |= (unint64_t)v49 << v47;
      v47 += 8;
      --v46;
    }
    while (v46);
  }
  return (uint64_t)v2;
}

uint64_t _SmallString.withUTF8<A>(_:)(uint64_t (*a1)(void *, uint64_t), uint64_t a2, uint64_t a3, unint64_t a4)
{
  v5[0] = a3;
  v5[1] = a4 & 0xFFFFFFFFFFFFFFLL;
  return a1(v5, HIBYTE(a4) & 0xF);
}

unsigned __int8 *protocol witness for MutableCollection.subscript.setter in conformance _SmallString(unsigned __int8 *result, void *a2)
{
  *(void *)(v2 + 8 * (*a2 > 7)) = *(void *)(v2 + 8 * (*a2 > 7)) & ((-255 << (8
                                                                                         * (*a2 & 7u)))
                                                                             - 1) | ((unint64_t)*result << (8 * (*a2 & 7u)));
  return result;
}

uint64_t (*protocol witness for MutableCollection.subscript.modify in conformance _SmallString(void *a1, uint64_t *a2))(uint64_t result)
{
  uint64_t v3 = *a2;
  unint64_t v4 = a1 + 2;
  *a1 = v2;
  a1[1] = v3;
  if (v3 > 7)
  {
    ++v2;
    unint64_t v5 = protocol witness for MutableCollection.subscript.modify in conformance _SmallString;
  }
  else
  {
    unint64_t v5 = protocol witness for MutableCollection.subscript.modify in conformance _SmallString;
  }
  uint64_t result = v5;
  *unint64_t v4 = *v2 >> (8 * (v3 & 7u));
  return result;
}

uint64_t protocol witness for MutableCollection.subscript.modify in conformance _SmallString(uint64_t result)
{
  char v1 = 8 * (*(_DWORD *)(result + 8) & 7);
  **(void **)uint64_t result = ((-255 << v1) - 1) & **(void **)result | ((unint64_t)*(unsigned __int8 *)(result + 16) << v1);
  return result;
}

{
  char v1;

  char v1 = 8 * (*(_DWORD *)(result + 8) & 7);
  *(void *)(*(void *)result + 8) = ((-255 << v1) - 1) & *(void *)(*(void *)result + 8) | ((unint64_t)*(unsigned __int8 *)(result + 16) << v1);
  return result;
}

void protocol witness for MutableCollection.subscript.modify in conformance _SmallString()
{
}

unint64_t protocol witness for MutableCollection.partition(by:) in conformance _SmallString@<X0>(uint64_t (*a1)(char *)@<X0>, unint64_t *a2@<X8>)
{
  unint64_t result = specialized MutableCollection<>._partitionImpl(by:)(a1);
  if (!v2) {
    *a2 = result;
  }
  return result;
}

uint64_t protocol witness for MutableCollection.swapAt(_:_:) in conformance _SmallString(uint64_t *a1, uint64_t *a2)
{
  return specialized MutableCollection.swapAt(_:_:)(*a1, *a2);
}

uint64_t protocol witness for MutableCollection._withUnsafeMutableBufferPointerIfSupported<A>(_:) in conformance _SmallString@<X0>(uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  return _sSMsE42_withUnsafeMutableBufferPointerIfSupportedyqd__Sgqd__Sry7ElementQzGzKXEKlFSryxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lys5UInt8Vqd__Isglrzo_s12_SmallStringVABsAG_pAKRszr__lIetMglrzo_Tpq5Tm(a1, a2);
}

unint64_t protocol witness for BidirectionalCollection.index(before:) in conformance _SmallString@<X0>(uint64_t *a1@<X0>, unint64_t *a2@<X8>)
{
  unint64_t result = specialized RandomAccessCollection<>.index(before:)(*a1, *(void *)v2, *(void *)(v2 + 8));
  *a2 = result;
  return result;
}

unint64_t *protocol witness for BidirectionalCollection.formIndex(before:) in conformance _SmallString(unint64_t *result)
{
  unint64_t v2 = *result - 1;
  if (__OFSUB__(*result, 1))
  {
    __break(1u);
  }
  else
  {
    if (v2 >= (*(unsigned char *)(v1 + 15) & 0xFu)) {
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Index out of bounds", 19, 2, "Swift/Collection.swift", 22, 2, 0x2CAuLL, 0);
    }
    *unint64_t result = v2;
  }
  return result;
}

unint64_t protocol witness for BidirectionalCollection.index(_:offsetBy:) in conformance _SmallString@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X8>)
{
  unint64_t result = specialized RandomAccessCollection<>.index(_:offsetBy:)(*a1, a2, *(void *)v3, *(void *)(v3 + 8));
  *a3 = result;
  return result;
}

unint64_t protocol witness for RandomAccessCollection.index(_:offsetBy:limitedBy:) in conformance _SmallString@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = *a1;
  uint64_t v8 = *v4;
  unint64_t v9 = v4[1];
  int64_t v10 = specialized RandomAccessCollection<>.distance(from:to:)(*a1, *a3, *v4, v9);
  if (a2 < 1)
  {
    if (v10 <= 0 && v10 > a2) {
      goto LABEL_4;
    }
LABEL_10:
    unint64_t result = specialized RandomAccessCollection<>.index(_:offsetBy:)(v7, a2, v8, v9);
    char v12 = 0;
    goto LABEL_11;
  }
  if (v10 < 0 || v10 >= (unint64_t)a2) {
    goto LABEL_10;
  }
LABEL_4:
  unint64_t result = 0;
  char v12 = 1;
LABEL_11:
  *(void *)a4 = result;
  *(unsigned char *)(a4 + 8) = v12;
  return result;
}

unint64_t protocol witness for BidirectionalCollection.distance(from:to:) in conformance _SmallString(unint64_t *a1, unint64_t *a2)
{
  return specialized RandomAccessCollection<>.distance(from:to:)(*a1, *a2, *(void *)v2, *(void *)(v2 + 8));
}

void protocol witness for Collection.endIndex.getter in conformance _SmallString(void *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 15) & 0xF;
}

uint64_t (*protocol witness for Collection.subscript.read in conformance _SmallString(unsigned char *a1, void *a2))()
{
  *a1 = *(void *)(v2 + 8 * (*a2 > 7)) >> (8 * (*a2 & 7u));
  return EnumeratedSequence._base.modify;
}

unsigned __int8 *protocol witness for Collection.subscript.getter in conformance _SmallString@<X0>(uint64_t *a1@<X0>, int8x8_t *a2@<X8>)
{
  uint64_t v5 = *a1;
  uint64_t v6 = a1[1];
  unint64_t v7 = v2[1];
  v80[0] = *v2;
  v80[1] = v7 & 0xFFFFFFFFFFFFFFLL;
  if (v5 < 0) {
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x744uLL, 0);
  }
  uint64_t v8 = HIBYTE(v7) & 0xF;
  if (v8 < v6) {
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x745uLL, 0);
  }
  unint64_t result = (unsigned __int8 *)specialized UnsafeBufferPointer.init(rebasing:)(v5, v6, (uint64_t)v80, v8);
  if (!v10)
  {
    int8x8_t v12 = 0;
    unint64_t v13 = 0xE000000000000000;
    goto LABEL_34;
  }
  if (v10 <= 8)
  {
    unint64_t v11 = v10;
    if (v10 < 0) {
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
    }
  }
  else
  {
    unint64_t v11 = 8;
  }
  if (v11 >= 8)
  {
    if (v11 >= 0x10)
    {
      unint64_t v14 = v11 & 0xFFFFFFFFFFFFFFF0;
      int64x2_t v39 = (int64x2_t)xmmword_18162AD80;
      int64x2_t v40 = (int64x2_t)xmmword_18162AD90;
      int64x2_t v41 = (int64x2_t)xmmword_18162ADA0;
      int64x2_t v42 = (int64x2_t)xmmword_18162ADB0;
      unint64_t v15 = 8 * (v11 & 0xFFFFFFFFFFFFFFF0);
      int8x16_t v43 = 0uLL;
      int8x16_t v44 = (int8x16_t)vdupq_n_s64(0x38uLL);
      int64x2_t v45 = vdupq_n_s64(0x80uLL);
      unint64_t v46 = v11 & 0xFFFFFFFFFFFFFFF0;
      uint64_t v47 = (uint8x16_t *)result;
      int64x2_t v48 = (int64x2_t)xmmword_18162ACE0;
      int8x16_t v49 = 0uLL;
      int8x16_t v50 = 0uLL;
      int64x2_t v51 = (int64x2_t)xmmword_18162AD00;
      int8x16_t v52 = 0uLL;
      int8x16_t v53 = 0uLL;
      int64x2_t v54 = (int64x2_t)xmmword_18162ACD0;
      int8x16_t v55 = 0uLL;
      int8x16_t v56 = 0uLL;
      int64x2_t v57 = (int64x2_t)xmmword_18162ACF0;
      int8x16_t v58 = 0uLL;
      do
      {
        uint8x16_t v59 = *v47++;
        uint16x8_t v60 = vmovl_u8(*(uint8x8_t *)v59.i8);
        uint32x4_t v61 = vmovl_high_u16(v60);
        v62.i64[0] = v61.u32[2];
        v62.i64[1] = v61.u32[3];
        uint64x2_t v63 = v62;
        uint16x8_t v64 = vmovl_high_u8(v59);
        uint32x4_t v65 = vmovl_u16(*(uint16x4_t *)v64.i8);
        v62.i64[0] = v65.u32[2];
        v62.i64[1] = v65.u32[3];
        uint64x2_t v66 = v62;
        v62.i64[0] = v65.u32[0];
        v62.i64[1] = v65.u32[1];
        uint64x2_t v67 = v62;
        v62.i64[0] = v61.u32[0];
        v62.i64[1] = v61.u32[1];
        uint64x2_t v68 = v62;
        uint32x4_t v69 = vmovl_u16(*(uint16x4_t *)v60.i8);
        v62.i64[0] = v69.u32[2];
        v62.i64[1] = v69.u32[3];
        uint64x2_t v70 = v62;
        uint32x4_t v71 = vmovl_high_u16(v64);
        v62.i64[0] = v71.u32[0];
        v62.i64[1] = v71.u32[1];
        uint64x2_t v72 = v62;
        v62.i64[0] = v69.u32[0];
        v62.i64[1] = v69.u32[1];
        uint64x2_t v73 = v62;
        v62.i64[0] = v71.u32[2];
        v62.i64[1] = v71.u32[3];
        int8x16_t v52 = vorrq_s8((int8x16_t)vshlq_u64(v63, (uint64x2_t)vandq_s8((int8x16_t)v48, v44)), v52);
        int8x16_t v55 = vorrq_s8((int8x16_t)vshlq_u64(v66, (uint64x2_t)vandq_s8((int8x16_t)v41, v44)), v55);
        int8x16_t v53 = vorrq_s8((int8x16_t)vshlq_u64(v67, (uint64x2_t)vandq_s8((int8x16_t)v42, v44)), v53);
        int8x16_t v50 = vorrq_s8((int8x16_t)vshlq_u64(v68, (uint64x2_t)vandq_s8((int8x16_t)v51, v44)), v50);
        int8x16_t v49 = vorrq_s8((int8x16_t)vshlq_u64(v70, (uint64x2_t)vandq_s8((int8x16_t)v54, v44)), v49);
        int8x16_t v56 = vorrq_s8((int8x16_t)vshlq_u64(v72, (uint64x2_t)vandq_s8((int8x16_t)v40, v44)), v56);
        int8x16_t v43 = vorrq_s8((int8x16_t)vshlq_u64(v73, (uint64x2_t)vandq_s8((int8x16_t)v57, v44)), v43);
        int8x16_t v58 = vorrq_s8((int8x16_t)vshlq_u64(v62, (uint64x2_t)vandq_s8((int8x16_t)v39, v44)), v58);
        int64x2_t v51 = vaddq_s64(v51, v45);
        int64x2_t v54 = vaddq_s64(v54, v45);
        int64x2_t v57 = vaddq_s64(v57, v45);
        int64x2_t v48 = vaddq_s64(v48, v45);
        int64x2_t v42 = vaddq_s64(v42, v45);
        int64x2_t v41 = vaddq_s64(v41, v45);
        int64x2_t v40 = vaddq_s64(v40, v45);
        int64x2_t v39 = vaddq_s64(v39, v45);
        v46 -= 16;
      }
      while (v46);
      int8x16_t v74 = vorrq_s8(vorrq_s8(vorrq_s8(v43, v53), vorrq_s8(v50, v56)), vorrq_s8(vorrq_s8(v49, v55), vorrq_s8(v52, v58)));
      int8x8_t v12 = vorr_s8(*(int8x8_t *)v74.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v74, v74, 8uLL));
      if (v11 == v14) {
        goto LABEL_22;
      }
      if ((v11 & 8) == 0) {
        goto LABEL_20;
      }
    }
    else
    {
      int8x8_t v12 = 0;
      unint64_t v15 = 0;
      unint64_t v14 = 0;
    }
    unint64_t v16 = v14;
    int64x2_t v17 = vdupq_n_s64(v15);
    unint64_t v14 = v11 & 0xFFFFFFFFFFFFFFF8;
    unint64_t v15 = 8 * (v11 & 0xFFFFFFFFFFFFFFF8);
    int8x16_t v18 = 0uLL;
    int8x16_t v19 = (int8x16_t)(unint64_t)v12;
    int64x2_t v20 = vaddq_s64(v17, (int64x2_t)xmmword_18162ACE0);
    int64x2_t v21 = vaddq_s64(v17, (int64x2_t)xmmword_18162AD00);
    int64x2_t v22 = vaddq_s64(v17, (int64x2_t)xmmword_18162ACD0);
    int64x2_t v23 = vaddq_s64(v17, (int64x2_t)xmmword_18162ACF0);
    uint64x2_t v24 = (uint8x8_t *)&result[v16];
    int8x16_t v25 = (int8x16_t)vdupq_n_s64(0x38uLL);
    unint64_t v26 = v16 - (v11 & 0xFFFFFFFFFFFFFFF8);
    int64x2_t v27 = vdupq_n_s64(0x40uLL);
    int8x16_t v28 = 0uLL;
    int8x16_t v29 = 0uLL;
    do
    {
      uint8x8_t v30 = *v24++;
      uint16x8_t v31 = vmovl_u8(v30);
      uint32x4_t v32 = vmovl_high_u16(v31);
      v33.i64[0] = v32.u32[2];
      v33.i64[1] = v32.u32[3];
      uint64x2_t v34 = v33;
      v33.i64[0] = v32.u32[0];
      v33.i64[1] = v32.u32[1];
      uint64x2_t v35 = v33;
      uint32x4_t v36 = vmovl_u16(*(uint16x4_t *)v31.i8);
      v33.i64[0] = v36.u32[2];
      v33.i64[1] = v36.u32[3];
      uint64x2_t v37 = v33;
      v33.i64[0] = v36.u32[0];
      v33.i64[1] = v36.u32[1];
      int8x16_t v29 = vorrq_s8((int8x16_t)vshlq_u64(v34, (uint64x2_t)vandq_s8((int8x16_t)v20, v25)), v29);
      int8x16_t v28 = vorrq_s8((int8x16_t)vshlq_u64(v35, (uint64x2_t)vandq_s8((int8x16_t)v21, v25)), v28);
      int8x16_t v18 = vorrq_s8((int8x16_t)vshlq_u64(v37, (uint64x2_t)vandq_s8((int8x16_t)v22, v25)), v18);
      int8x16_t v19 = vorrq_s8((int8x16_t)vshlq_u64(v33, (uint64x2_t)vandq_s8((int8x16_t)v23, v25)), v19);
      int64x2_t v21 = vaddq_s64(v21, v27);
      int64x2_t v22 = vaddq_s64(v22, v27);
      int64x2_t v23 = vaddq_s64(v23, v27);
      int64x2_t v20 = vaddq_s64(v20, v27);
      v26 += 8;
    }
    while (v26);
    int8x16_t v38 = vorrq_s8(vorrq_s8(v19, v28), vorrq_s8(v18, v29));
    int8x8_t v12 = vorr_s8(*(int8x8_t *)v38.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v38, v38, 8uLL));
    if (v11 == v14) {
      goto LABEL_22;
    }
    goto LABEL_20;
  }
  unint64_t v14 = 0;
  int8x8_t v12 = 0;
  unint64_t v15 = 0;
LABEL_20:
  unint64_t v75 = v11 - v14;
  uint64_t v76 = &result[v14];
  do
  {
    unsigned int v77 = *v76++;
    *(void *)&v12 |= (unint64_t)v77 << (v15 & 0x38);
    v15 += 8;
    --v75;
  }
  while (v75);
LABEL_22:
  if (v10 <= 8)
  {
    uint64_t v78 = 0;
  }
  else
  {
    uint64_t v78 = result[8];
    if (v10 != 9)
    {
      v78 |= (unint64_t)result[9] << 8;
      if (v10 != 10)
      {
        v78 |= (unint64_t)result[10] << 16;
        if (v10 != 11)
        {
          v78 |= (unint64_t)result[11] << 24;
          if (v10 != 12)
          {
            v78 |= (unint64_t)result[12] << 32;
            if (v10 != 13)
            {
              v78 |= (unint64_t)result[13] << 40;
              if (v10 != 14) {
                v78 |= (unint64_t)result[14] << 48;
              }
            }
          }
        }
      }
    }
  }
  unint64_t v79 = 0xA000000000000000;
  if (((v78 | *(void *)&v12) & 0x8080808080808080) == 0) {
    unint64_t v79 = 0xE000000000000000;
  }
  unint64_t v13 = v79 | (v10 << 56) | v78;
LABEL_34:
  *a2 = v12;
  a2[1] = (int8x8_t)v13;
  return result;
}

void protocol witness for Collection.indices.getter in conformance _SmallString(void *a1@<X8>)
{
  uint64_t v2 = *(unsigned char *)(v1 + 15) & 0xF;
  *a1 = 0;
  a1[1] = v2;
}

BOOL protocol witness for Collection.isEmpty.getter in conformance _SmallString()
{
  return (*(unsigned char *)(v0 + 15) & 0xF) == 0;
}

unint64_t protocol witness for Collection.index(after:) in conformance _SmallString@<X0>(unint64_t *a1@<X0>, unint64_t *a2@<X8>)
{
  unint64_t result = specialized RandomAccessCollection<>.index(after:)(*a1, *(void *)v2, *(void *)(v2 + 8));
  *a2 = result;
  return result;
}

void *protocol witness for Collection.formIndex(after:) in conformance _SmallString(void *result)
{
  if (*result >= (unint64_t)(*(unsigned char *)(v1 + 15) & 0xF)) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Index out of bounds", 19, 2, "Swift/Collection.swift", 22, 2, 0x2CAuLL, 0);
  }
  ++*result;
  return result;
}

__n128 protocol witness for Sequence.makeIterator() in conformance _SmallString@<Q0>(__n128 *a1@<X8>)
{
  __n128 result = *v1;
  *a1 = *v1;
  a1[1].n128_u64[0] = 0;
  return result;
}

uint64_t protocol witness for Sequence.underestimatedCount.getter in conformance _SmallString()
{
  return *(unsigned char *)(v0 + 15) & 0xF;
}

__objc2_class **protocol witness for Sequence._copyToContiguousArray() in conformance _SmallString()
{
  return specialized _copyCollectionToContiguousArray<A>(_:)(*v0, v0[1]);
}

uint64_t protocol witness for Sequence._copyContents(initializing:) in conformance _SmallString(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  return specialized Sequence._copySequenceContents(initializing:)(a1, a2, a3, *v3, v3[1]);
}

unint64_t static _StringObject.Nibbles.small(withCount:isASCII:)(uint64_t a1, char a2)
{
  unint64_t v2 = 0xA000000000000000;
  if (a2) {
    unint64_t v2 = 0xE000000000000000;
  }
  return v2 | (a1 << 56);
}

uint64_t _bytesToUInt64(_:_:)(uint8x16_t *a1, unint64_t a2)
{
  if ((a2 & 0x8000000000000000) != 0) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
  }
  if (!a2) {
    return 0;
  }
  if (a2 < 8)
  {
    unint64_t v2 = 0;
    int8x8_t v3 = 0;
    unint64_t v4 = 0;
    goto LABEL_16;
  }
  if (a2 >= 0x10)
  {
    unint64_t v2 = a2 & 0xFFFFFFFFFFFFFFF0;
    int64x2_t v28 = (int64x2_t)xmmword_18162AD80;
    int64x2_t v29 = (int64x2_t)xmmword_18162AD90;
    int64x2_t v30 = (int64x2_t)xmmword_18162ADA0;
    int64x2_t v31 = (int64x2_t)xmmword_18162ADB0;
    unint64_t v4 = 8 * (a2 & 0xFFFFFFFFFFFFFFF0);
    int8x16_t v32 = 0uLL;
    int8x16_t v33 = (int8x16_t)vdupq_n_s64(0x38uLL);
    int64x2_t v34 = vdupq_n_s64(0x80uLL);
    unint64_t v35 = a2 & 0xFFFFFFFFFFFFFFF0;
    uint32x4_t v36 = a1;
    int64x2_t v37 = (int64x2_t)xmmword_18162ACE0;
    int8x16_t v38 = 0uLL;
    int8x16_t v39 = 0uLL;
    int64x2_t v40 = (int64x2_t)xmmword_18162AD00;
    int8x16_t v41 = 0uLL;
    int8x16_t v42 = 0uLL;
    int64x2_t v43 = (int64x2_t)xmmword_18162ACD0;
    int8x16_t v44 = 0uLL;
    int8x16_t v45 = 0uLL;
    int64x2_t v46 = (int64x2_t)xmmword_18162ACF0;
    int8x16_t v47 = 0uLL;
    do
    {
      uint8x16_t v48 = *v36++;
      uint16x8_t v49 = vmovl_u8(*(uint8x8_t *)v48.i8);
      uint32x4_t v50 = vmovl_high_u16(v49);
      v51.i64[0] = v50.u32[2];
      v51.i64[1] = v50.u32[3];
      uint64x2_t v52 = v51;
      uint16x8_t v53 = vmovl_high_u8(v48);
      uint32x4_t v54 = vmovl_u16(*(uint16x4_t *)v53.i8);
      v51.i64[0] = v54.u32[2];
      v51.i64[1] = v54.u32[3];
      uint64x2_t v55 = v51;
      v51.i64[0] = v54.u32[0];
      v51.i64[1] = v54.u32[1];
      uint64x2_t v56 = v51;
      v51.i64[0] = v50.u32[0];
      v51.i64[1] = v50.u32[1];
      uint64x2_t v57 = v51;
      uint32x4_t v58 = vmovl_u16(*(uint16x4_t *)v49.i8);
      v51.i64[0] = v58.u32[2];
      v51.i64[1] = v58.u32[3];
      uint64x2_t v59 = v51;
      uint32x4_t v60 = vmovl_high_u16(v53);
      v51.i64[0] = v60.u32[0];
      v51.i64[1] = v60.u32[1];
      uint64x2_t v61 = v51;
      v51.i64[0] = v58.u32[0];
      v51.i64[1] = v58.u32[1];
      uint64x2_t v62 = v51;
      v51.i64[0] = v60.u32[2];
      v51.i64[1] = v60.u32[3];
      int8x16_t v41 = vorrq_s8((int8x16_t)vshlq_u64(v52, (uint64x2_t)vandq_s8((int8x16_t)v37, v33)), v41);
      int8x16_t v44 = vorrq_s8((int8x16_t)vshlq_u64(v55, (uint64x2_t)vandq_s8((int8x16_t)v30, v33)), v44);
      int8x16_t v42 = vorrq_s8((int8x16_t)vshlq_u64(v56, (uint64x2_t)vandq_s8((int8x16_t)v31, v33)), v42);
      int8x16_t v39 = vorrq_s8((int8x16_t)vshlq_u64(v57, (uint64x2_t)vandq_s8((int8x16_t)v40, v33)), v39);
      int8x16_t v38 = vorrq_s8((int8x16_t)vshlq_u64(v59, (uint64x2_t)vandq_s8((int8x16_t)v43, v33)), v38);
      int8x16_t v45 = vorrq_s8((int8x16_t)vshlq_u64(v61, (uint64x2_t)vandq_s8((int8x16_t)v29, v33)), v45);
      int8x16_t v32 = vorrq_s8((int8x16_t)vshlq_u64(v62, (uint64x2_t)vandq_s8((int8x16_t)v46, v33)), v32);
      int8x16_t v47 = vorrq_s8((int8x16_t)vshlq_u64(v51, (uint64x2_t)vandq_s8((int8x16_t)v28, v33)), v47);
      int64x2_t v40 = vaddq_s64(v40, v34);
      int64x2_t v43 = vaddq_s64(v43, v34);
      int64x2_t v46 = vaddq_s64(v46, v34);
      int64x2_t v37 = vaddq_s64(v37, v34);
      int64x2_t v31 = vaddq_s64(v31, v34);
      int64x2_t v30 = vaddq_s64(v30, v34);
      int64x2_t v29 = vaddq_s64(v29, v34);
      int64x2_t v28 = vaddq_s64(v28, v34);
      v35 -= 16;
    }
    while (v35);
    int8x16_t v63 = vorrq_s8(vorrq_s8(vorrq_s8(v32, v42), vorrq_s8(v39, v45)), vorrq_s8(vorrq_s8(v38, v44), vorrq_s8(v41, v47)));
    int8x8_t v3 = vorr_s8(*(int8x8_t *)v63.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v63, v63, 8uLL));
    if (v2 == a2) {
      return (uint64_t)v3;
    }
    if ((a2 & 8) == 0)
    {
LABEL_16:
      uint16x8_t v64 = &a1->u8[v2];
      unint64_t v65 = a2 - v2;
      do
      {
        unsigned int v66 = *v64++;
        *(void *)&v3 |= (unint64_t)v66 << (v4 & 0x38);
        v4 += 8;
        --v65;
      }
      while (v65);
      return (uint64_t)v3;
    }
  }
  else
  {
    int8x8_t v3 = 0;
    unint64_t v4 = 0;
    unint64_t v2 = 0;
  }
  unint64_t v5 = v2;
  int64x2_t v6 = vdupq_n_s64(v4);
  unint64_t v2 = a2 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v4 = 8 * (a2 & 0xFFFFFFFFFFFFFFF8);
  int8x16_t v7 = 0uLL;
  int8x16_t v8 = (int8x16_t)(unint64_t)v3;
  int64x2_t v9 = vaddq_s64(v6, (int64x2_t)xmmword_18162ACE0);
  int64x2_t v10 = vaddq_s64(v6, (int64x2_t)xmmword_18162AD00);
  int64x2_t v11 = vaddq_s64(v6, (int64x2_t)xmmword_18162ACD0);
  int64x2_t v12 = vaddq_s64(v6, (int64x2_t)xmmword_18162ACF0);
  unint64_t v13 = (uint8x8_t *)&a1->i8[v5];
  int8x16_t v14 = (int8x16_t)vdupq_n_s64(0x38uLL);
  unint64_t v15 = v5 - (a2 & 0xFFFFFFFFFFFFFFF8);
  int64x2_t v16 = vdupq_n_s64(0x40uLL);
  int8x16_t v17 = 0uLL;
  int8x16_t v18 = 0uLL;
  do
  {
    uint8x8_t v19 = *v13++;
    uint16x8_t v20 = vmovl_u8(v19);
    uint32x4_t v21 = vmovl_high_u16(v20);
    v22.i64[0] = v21.u32[2];
    v22.i64[1] = v21.u32[3];
    uint64x2_t v23 = v22;
    v22.i64[0] = v21.u32[0];
    v22.i64[1] = v21.u32[1];
    uint64x2_t v24 = v22;
    uint32x4_t v25 = vmovl_u16(*(uint16x4_t *)v20.i8);
    v22.i64[0] = v25.u32[2];
    v22.i64[1] = v25.u32[3];
    uint64x2_t v26 = v22;
    v22.i64[0] = v25.u32[0];
    v22.i64[1] = v25.u32[1];
    int8x16_t v18 = vorrq_s8((int8x16_t)vshlq_u64(v23, (uint64x2_t)vandq_s8((int8x16_t)v9, v14)), v18);
    int8x16_t v17 = vorrq_s8((int8x16_t)vshlq_u64(v24, (uint64x2_t)vandq_s8((int8x16_t)v10, v14)), v17);
    int8x16_t v7 = vorrq_s8((int8x16_t)vshlq_u64(v26, (uint64x2_t)vandq_s8((int8x16_t)v11, v14)), v7);
    int8x16_t v8 = vorrq_s8((int8x16_t)vshlq_u64(v22, (uint64x2_t)vandq_s8((int8x16_t)v12, v14)), v8);
    int64x2_t v10 = vaddq_s64(v10, v16);
    int64x2_t v11 = vaddq_s64(v11, v16);
    int64x2_t v12 = vaddq_s64(v12, v16);
    int64x2_t v9 = vaddq_s64(v9, v16);
    v15 += 8;
  }
  while (v15);
  int8x16_t v27 = vorrq_s8(vorrq_s8(v8, v17), vorrq_s8(v7, v18));
  int8x8_t v3 = vorr_s8(*(int8x8_t *)v27.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v27, v27, 8uLL));
  if (v2 != a2) {
    goto LABEL_16;
  }
  return (uint64_t)v3;
}

void *_sSw17withMemoryRebound2to_q0_xm_q0_SryxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lFACq0_q_Ri_zRi0_zRi__Ri0__Ri_0_Ri0_0_r1_lys5UInt8VsAD_pq0_Isgyrzr_Swq0_sAD_pAFRszsAD_pRs_Ri_0_r1_lIetMgyrzo_Tpq5SiSg_Tgq5055_sSw39withContiguousMutableStorageIfAvailableyxSgxSrys5F25VGzKXEKlFAbEKXEfU_Si_TGq5SryAFGxsAD_pRi_zRi0_zlySiIsglrzo_Tf1cn_n(uint64_t a1, uint64_t a2, void *(*a3)(uint64_t *__return_ptr, uint64_t *))
{
  if (!a1) {
    return specialized closure #1 in UnsafeMutableRawBufferPointer.withContiguousMutableStorageIfAvailable<A>(_:)(0, 0, a3);
  }
  uint64_t v3 = a2 - a1;
  if (v3 < 0) {
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeMutableBufferPointer with negative count", 46, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x47uLL, 0);
  }
  return specialized closure #1 in UnsafeMutableRawBufferPointer.withContiguousMutableStorageIfAvailable<A>(_:)(a1, v3, a3);
}

unint64_t _SmallString.init(_:appending:)(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  return specialized _SmallString.init(_:appending:)(a1, a2, a3, a4);
}

unint64_t _SmallString.init(taggedCocoa:)(void *a1)
{
  return specialized _SmallString.init(taggedCocoa:)(a1, 4);
}

uint64_t Sequence<>.sorted()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *(void *)(a1 - 8);
  MEMORY[0x1F4188790](a1);
  int64x2_t v9 = &v20[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v10, a1, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
  uint64_t v21 = a1;
  uint64_t v22 = a2;
  uint64_t v23 = a3;
  uint64x2_t v24 = AssociatedTypeWitness;
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v7 + 16))(v9, v3, a1);
  uint64_t v25 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 56))(a1, a2);
  int8x16_t v14 = (unint64_t *)type metadata accessor for ContiguousArray(0, (uint64_t)AssociatedTypeWitness, v12, v13);
  uint64_t WitnessTable = swift_getWitnessTable(protocol conformance descriptor for ContiguousArray<A>, v14, v15);
  uint64_t v18 = swift_getWitnessTable(protocol conformance descriptor for ContiguousArray<A>, v14, v17);
  MutableCollection<>.sort(by:)((uint64_t)partial apply for implicit closure #1 in Sequence<>.sorted(), (uint64_t)v20, (uint64_t)v14, WitnessTable, v18);
  return v25;
}

uint64_t Sequence.sorted(by:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  MEMORY[0x1F4188790](a1);
  (*(void (**)(char *, uint64_t))(v11 + 16))((char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
  uint64_t v23 = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 56))(a3, a4);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, (int **)a4, a3, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
  uint64_t v15 = (unint64_t *)type metadata accessor for ContiguousArray(0, (uint64_t)AssociatedTypeWitness, v13, v14);
  uint64_t WitnessTable = swift_getWitnessTable(protocol conformance descriptor for ContiguousArray<A>, v15, v16);
  uint64_t v19 = swift_getWitnessTable(protocol conformance descriptor for ContiguousArray<A>, v15, v18);
  MutableCollection<>.sort(by:)(a1, a2, (uint64_t)v15, WitnessTable, v19);
  uint64_t v20 = v23;
  if (v5) {
    swift_release(v23);
  }
  return v20;
}

void *MutableCollection<>.sort()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, *(int ***)(*(void *)(a2 + 8) + 8), a1, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
  v10[2] = a1;
  v10[3] = a2;
  v10[4] = a3;
  unint64_t v10[5] = a4;
  v10[6] = AssociatedTypeWitness;
  return MutableCollection<>.sort(by:)((uint64_t)partial apply for implicit closure #1 in MutableCollection<>.sort(), (uint64_t)v10, a1, a2, a3);
}

void closure #1 in MutableCollection<>.sort(by:)(uint64_t a1, uint64_t (*a2)(char *, char *), uint64_t a3, uint64_t a4, uint64_t a5)
{
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, *(int ***)(*(void *)(a5 + 8) + 8), a4, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
  uint64_t v10 = (unint64_t *)type metadata accessor for UnsafeMutableBufferPointer(0, (uint64_t)AssociatedTypeWitness, v8, v9);
  UnsafeMutableBufferPointer._stableSortImpl(by:)(a2, a3, v10);
}

void UnsafeMutableBufferPointer._stableSortImpl(by:)(uint64_t (*a1)(char *, char *), uint64_t a2, unint64_t *a3)
{
  uint64_t v5 = a3;
  uint64_t v7 = a1;
  uint64_t v8 = *(void *)(a3[2] - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v12 = (char *)&v100 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v13 = v3[1];
  if (v13 >= 64)
  {
    char v14 = 58 - __clz(v13);
    uint64_t v15 = -1 << v14;
    unint64_t v16 = (unint64_t)v13 >> v14;
    if ((v13 & ~v15) != 0) {
      ++v16;
    }
    if (v16 >= v13)
    {
      uint64_t v123 = 0;
      unint64_t v124 = v13;
LABEL_88:
      uint64_t v118 = 1;
      uint64_t WitnessTable = swift_getWitnessTable(protocol conformance descriptor for UnsafeMutableBufferPointer<A>, v5, v9);
      uint64_t v91 = swift_getWitnessTable(protocol conformance descriptor for UnsafeMutableBufferPointer<A>, v5, v90);
      MutableCollection<>._insertionSort(within:sortedEnd:by:)((uint64_t)&v123, (void (*)(char *))&v118, v7, a2, (uint64_t)v5, WitnessTable, v91);
      return;
    }
    int64_t v107 = v16;
    uint64_t v110 = v12;
    uint64_t v115 = (unint64_t *)v10;
    unint64_t v116 = v3;
    uint64_t v125 = static Array._allocateUninitialized(_:)((unint64_t)v13 >> 1, v10);
    uint64_t v121 = 0;
    BOOL v122 = v18;
    uint64_t v123 = v18;
    unint64_t v124 = (unint64_t)v13 >> 1;
    unint64_t v105 = (unint64_t)v13 >> 1;
    uint64_t v19 = 0;
    uint64_t v111 = v8;
    uint64_t v108 = v18;
    uint64_t v109 = v8 + 32;
    uint64_t v20 = &_swiftEmptyArrayStorage;
    uint64_t v112 = v7;
    uint64_t v113 = a2;
    do
    {
      uint64_t v21 = v19;
      uint64_t v22 = *v116;
      uint64_t v118 = *v116;
      int64_t v119 = v13;
      uint64_t v117 = v21;
      swift_getWitnessTable(protocol conformance descriptor for UnsafeMutableBufferPointer<A>, v5, v17);
      char v23 = _findNextRun<A>(in:from:by:)((uint64_t)&v120, (uint64_t)&v118, (uint64_t)&v117, (uint64_t (*)(void (**)(uint64_t, char *, const char *), char *))v7, a2, (uint64_t)v5);
      if (v4) {
        goto LABEL_104;
      }
      uint64_t v114 = v20;
      int64_t v25 = v120;
      if (v23)
      {
        if (v120 < v21) {
          goto LABEL_106;
        }
        if (v21 < v120)
        {
          int64_t v26 = v120;
          int64_t v27 = v21;
          do
          {
            int64_t v28 = v26 - 1;
            if (v27 != v26 - 1)
            {
              if (v26 > v13 || v27 >= v13) {
                _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x17BuLL, 0);
              }
              if (!v22) {
                _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x17CuLL, 0);
              }
              uint64_t v29 = *(void *)(v111 + 72);
              int64_t v104 = v29 * v27;
              uint64_t v101 = (char *)(v22 + v29 * v27);
              int64_t v102 = v29 * v28;
              uint64_t v103 = (char *)(v22 + v29 * v28);
              uint64_t v106 = *(unint64_t **)(v111 + 32);
              ((void (*)(char *))v106)(v110);
              int64x2_t v30 = &v103[v29];
              int64x2_t v31 = v103;
              if (v104 < v102 || v101 >= v30)
              {
                swift_arrayInitWithTakeFrontToBack(v101, v103, 1, v115);
              }
              else if (v104 != v102)
              {
                swift_arrayInitWithTakeBackToFront(v101, v103, 1, (uint64_t)v115);
              }
              ((void (*)(char *, char *, unint64_t *))v106)(v31, v110, v115);
            }
            ++v27;
            int64_t v26 = v28;
          }
          while (v27 < v28);
        }
      }
      if (v25 >= v13) {
        goto LABEL_36;
      }
      if (__OFSUB__(v25, v21))
      {
        __break(1u);
LABEL_121:
        __break(1u);
LABEL_122:
        __break(1u);
LABEL_123:
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/Sort.swift", 16, 2, 0x21BuLL, 0);
      }
      if (v25 - v21 >= v107)
      {
LABEL_36:
        uint64_t v19 = v25;
      }
      else
      {
        if (__OFADD__(v21, v107)) {
          goto LABEL_122;
        }
        if (v21 + v107 >= v13) {
          uint64_t v19 = v13;
        }
        else {
          uint64_t v19 = v21 + v107;
        }
        if (v19 < v21) {
          goto LABEL_106;
        }
        uint64_t v118 = v21;
        int64_t v119 = v19;
        int64_t v120 = v25;
        uint64_t v33 = swift_getWitnessTable(protocol conformance descriptor for UnsafeMutableBufferPointer<A>, v5, v24);
        uint64_t v35 = swift_getWitnessTable(protocol conformance descriptor for UnsafeMutableBufferPointer<A>, v5, v34);
        MutableCollection<>._insertionSort(within:sortedEnd:by:)((uint64_t)&v118, (void (*)(char *))&v120, v112, v113, (uint64_t)v5, v33, v35);
      }
      uint32x4_t v36 = v114;
      if (v19 < v21) {
        goto LABEL_106;
      }
      if (!swift_isUniquelyReferenced_nonNull_native((uint64_t)v114)) {
        uint32x4_t v36 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, (int64_t)&v36[2]->isa + 1, 1, (uint64_t)v36);
      }
      unint64_t v38 = (unint64_t)v36[2];
      unint64_t v37 = (unint64_t)v36[3];
      unint64_t v39 = v38 + 1;
      if (v38 >= v37 >> 1) {
        uint32x4_t v36 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((__objc2_class **)(v37 > 1), v38 + 1, 1, (uint64_t)v36);
      }
      v36[2] = (__objc2_class *)v39;
      int64x2_t v40 = v36 + 4;
      int8x16_t v41 = &v36[2 * v38 + 4];
      *int8x16_t v41 = (__objc2_class *)v21;
      v41[1] = (__objc2_class *)v19;
      if (v38)
      {
        while (1)
        {
          unint64_t v42 = v39 - 1;
          if (v39 >= 4)
          {
            int8x16_t v47 = &v40[2 * v39];
            uint64_t v48 = (uint64_t)*(v47 - 8);
            uint64_t v49 = (uint64_t)*(v47 - 7);
            BOOL v53 = __OFSUB__(v49, v48);
            uint64_t v50 = v49 - v48;
            if (v53)
            {
              __break(1u);
LABEL_108:
              __break(1u);
LABEL_109:
              __break(1u);
LABEL_110:
              __break(1u);
LABEL_111:
              __break(1u);
LABEL_112:
              __break(1u);
LABEL_113:
              __break(1u);
LABEL_114:
              __break(1u);
LABEL_115:
              __break(1u);
LABEL_116:
              __break(1u);
LABEL_117:
              unint64_t v99 = 688;
LABEL_103:
              _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Index out of range", 18, 2, "Swift/ContiguousArrayBuffer.swift", 33, 2, v99, 0);
            }
            uint64_t v52 = (uint64_t)*(v47 - 6);
            uint64_t v51 = (uint64_t)*(v47 - 5);
            BOOL v53 = __OFSUB__(v51, v52);
            int64_t v45 = v51 - v52;
            char v46 = v53;
            if (v53) {
              goto LABEL_108;
            }
            unint64_t v54 = v39 - 2;
            uint64x2_t v55 = &v40[2 * v39 - 4];
            uint64x2_t v57 = *v55;
            uint64x2_t v56 = v55[1];
            BOOL v53 = __OFSUB__(v56, v57);
            uint64_t v58 = (char *)v56 - (char *)v57;
            if (v53) {
              goto LABEL_109;
            }
            BOOL v53 = __OFADD__(v45, v58);
            uint64_t v59 = v45 + v58;
            if (v53) {
              goto LABEL_111;
            }
            if (v59 >= v50)
            {
              unsigned int v77 = &v40[2 * v42];
              unint64_t v79 = *v77;
              uint64_t v78 = v77[1];
              BOOL v53 = __OFSUB__(v78, v79);
              int64_t v80 = (char *)v78 - (char *)v79;
              if (v53) {
                goto LABEL_121;
              }
              BOOL v70 = v45 < v80;
              goto LABEL_74;
            }
          }
          else
          {
            if (v39 != 3)
            {
              uint32x4_t v71 = v36[4];
              uint64x2_t v72 = v36[5];
              BOOL v53 = __OFSUB__(v72, v71);
              int64_t v64 = (char *)v72 - (char *)v71;
              char v65 = v53;
              goto LABEL_68;
            }
            int8x16_t v44 = v36[4];
            int64x2_t v43 = v36[5];
            BOOL v53 = __OFSUB__(v43, v44);
            int64_t v45 = (char *)v43 - (char *)v44;
            char v46 = v53;
          }
          if (v46) {
            goto LABEL_110;
          }
          unint64_t v54 = v39 - 2;
          uint32x4_t v60 = &v40[2 * v39 - 4];
          uint64x2_t v62 = *v60;
          uint64x2_t v61 = v60[1];
          BOOL v63 = __OFSUB__(v61, v62);
          int64_t v64 = (char *)v61 - (char *)v62;
          char v65 = v63;
          if (v63) {
            goto LABEL_112;
          }
          unsigned int v66 = &v40[2 * v42];
          uint64x2_t v68 = *v66;
          uint64x2_t v67 = v66[1];
          BOOL v53 = __OFSUB__(v67, v68);
          int64_t v69 = (char *)v67 - (char *)v68;
          if (v53) {
            goto LABEL_114;
          }
          if (__OFADD__(v64, v69)) {
            goto LABEL_116;
          }
          if (v64 + v69 >= v45)
          {
            BOOL v70 = v45 < v69;
LABEL_74:
            if (v70) {
              unint64_t v42 = v54;
            }
            goto LABEL_76;
          }
LABEL_68:
          if (v65) {
            goto LABEL_113;
          }
          uint64x2_t v73 = &v40[2 * v42];
          unint64_t v75 = *v73;
          int8x16_t v74 = v73[1];
          BOOL v53 = __OFSUB__(v74, v75);
          int64_t v76 = (char *)v74 - (char *)v75;
          if (v53) {
            goto LABEL_115;
          }
          if (v76 < v64) {
            goto LABEL_85;
          }
LABEL_76:
          unint64_t v81 = v42 - 1;
          if (v42 - 1 >= v39) {
            goto LABEL_102;
          }
          uint64_t v106 = v5;
          uint64_t v114 = (__objc2_class **)v19;
          if (!*v116) {
            goto LABEL_123;
          }
          uint64_t v82 = &v40[2 * v81];
          uint64_t v83 = v40;
          uint64_t v84 = (__objc2_class *)*v82;
          int v85 = v83;
          uint64_t v86 = &v83[2 * v42];
          unint64_t v87 = (__objc2_class *)v86[1];
          _merge<A>(low:mid:high:buffer:by:)((char *)(*v116 + *(void *)(v111 + 72) * *v82), (char *)(*v116 + *(void *)(v111 + 72) * *v86), *v116 + *(void *)(v111 + 72) * (void)v87, v108, (uint64_t (*)(void, void))v112, v113, v115);
          if ((uint64_t)v87 < (uint64_t)v84) {
            goto LABEL_106;
          }
          if (v42 > (unint64_t)v36[2]) {
            goto LABEL_117;
          }
          void *v82 = v84;
          v85[2 * v81 + 1] = v87;
          unint64_t v88 = (unint64_t)v36[2];
          if (v42 >= v88) {
LABEL_118:
          }
            _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Index out of range", 18, 2, "Swift/Array.swift", 17, 2, 0x53BuLL, 0);
          unint64_t v39 = v88 - 1;
          uint64_t v19 = (uint64_t)v114;
          if ((uint64_t)(v88 - 1 - v42) < 0) {
LABEL_119:
          }
            _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 0x416uLL, 0);
          int64x2_t v40 = v85;
          memmove(v86, v86 + 2, 16 * (v88 - 1 - v42));
          v36[2] = (__objc2_class *)v39;
          uint64_t v5 = v106;
          if (v88 <= 2) {
            goto LABEL_85;
          }
        }
      }
      unint64_t v39 = 1;
LABEL_85:
      uint64_t v20 = v36;
      int64_t v13 = v116[1];
      uint64_t v7 = v112;
      a2 = v113;
    }
    while (v19 < v13);
    if (v39 >= 2)
    {
      uint64_t v92 = *v116;
      while (1)
      {
        unint64_t v93 = v39 - 1;
        if (v39 <= 1) {
          break;
        }
        if (!v92) {
          goto LABEL_123;
        }
        unint64_t v94 = v39 - 2;
        uint64_t v95 = v20[2 * v39];
        unint64_t v96 = v20[2 * v93 + 5];
        _merge<A>(low:mid:high:buffer:by:)((char *)(v92 + *(void *)(v111 + 72) * (void)v95), (char *)(v92 + *(void *)(v111 + 72) * (void)v20[2 * v93 + 4]), v92 + *(void *)(v111 + 72) * (void)v96, v108, (uint64_t (*)(void, void))v112, v113, v115);
        if ((uint64_t)v96 < (uint64_t)v95) {
          goto LABEL_106;
        }
        if (!swift_isUniquelyReferenced_nonNull_native((uint64_t)v20)) {
          uint64_t v20 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v20);
        }
        if (v94 >= (unint64_t)v20[2]) {
          goto LABEL_117;
        }
        uint64_t v97 = &v20[2 * v94 + 4];
        *uint64_t v97 = v95;
        v97[1] = v96;
        unint64_t v98 = (unint64_t)v20[2];
        if (v39 > v98) {
          goto LABEL_118;
        }
        if ((uint64_t)(v98 - v39) < 0) {
          goto LABEL_119;
        }
        memmove(&v20[2 * v93 + 4], &v20[2 * v39 + 4], 16 * (v98 - v39));
        void v20[2] = (__objc2_class *)(v98 - 1);
        unint64_t v39 = v98 - 1;
        if (v98 <= 2) {
          goto LABEL_104;
        }
      }
LABEL_102:
      unint64_t v99 = 675;
      goto LABEL_103;
    }
LABEL_104:
    swift_bridgeObjectRelease((uint64_t)v20);
    $defer #1 <A>() in Array.init(_unsafeUninitializedCapacity:initializingWith:)(&v121, v105, &v123, &v122, &v125, (uint64_t *)v115);
    swift_bridgeObjectRelease(v125);
    return;
  }
  if (v13 < 0) {
LABEL_106:
  }
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
  uint64_t v123 = 0;
  unint64_t v124 = v13;
  if (v13) {
    goto LABEL_88;
  }
}

uint64_t zip<A, B>(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 16))(a7, a1);
  v15[0] = a3;
  v15[1] = a4;
  v15[2] = a5;
  v15[3] = a6;
  int64_t v13 = type metadata accessor for Zip2Sequence(0, (uint64_t)v15);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a4 - 8) + 16))(a7 + *((int *)v13 + 13), a2, a4);
}

uint64_t Zip2Sequence.makeIterator()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *(void *)(a1 + 24);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = MEMORY[0x1F4188790](a1);
  uint64_t v9 = (char *)v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *(void *)(v7 + 16);
  MEMORY[0x1F4188790](v7);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 32))((char *)v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), v2, v10);
  uint64_t v13 = *(void *)(a1 + 32);
  (*(void (**)(uint64_t, uint64_t))(v13 + 32))(v10, v13);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 32))(v9, v2 + *(int *)(a1 + 52), v5);
  uint64_t v14 = *(void *)(a1 + 40);
  uint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t))(v14 + 32);
  v18[0] = v10;
  v18[1] = v5;
  v18[2] = v13;
  v18[3] = v14;
  unint64_t v16 = type metadata accessor for Zip2Sequence.Iterator(0, (uint64_t)v18);
  uint64_t result = v15(v5, v14);
  *(unsigned char *)(a2 + *((int *)v16 + 14)) = 0;
  return result;
}

uint64_t Zip2Sequence.Iterator.next()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *(int ***)(a1 + 40);
  uint64_t v59 = *(void *)(a1 + 24);
  uint32x4_t v60 = v5;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v5, v59, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
  uint64_t v9 = type metadata accessor for Optional(0, (uint64_t)AssociatedTypeWitness, v7, v8);
  uint64_t v57 = (uint64_t)*(v9 - 1);
  uint64_t v58 = v9;
  uint64_t v10 = MEMORY[0x1F4188790](v9);
  uint64x2_t v61 = (char *)&v48 - v11;
  uint64_t v62 = *((void *)AssociatedTypeWitness - 1);
  MEMORY[0x1F4188790](v10);
  uint64x2_t v56 = (char *)&v48 - v12;
  uint64_t v13 = *(int ***)(a1 + 32);
  uint64_t v14 = *(void *)(a1 + 16);
  uint64_t v15 = swift_getAssociatedTypeWitness(255, v13, v14, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
  uint64_t v18 = type metadata accessor for Optional(0, (uint64_t)v15, v16, v17);
  uint64_t v19 = MEMORY[0x1F4188790](v18);
  uint64_t v21 = (char *)&v48 - v20;
  uint64_t v63 = *((void *)v15 - 1);
  MEMORY[0x1F4188790](v19);
  uint64_t v24 = *(int *)(a1 + 56);
  if (*(unsigned char *)(v2 + v24) != 1)
  {
    uint64_t v51 = v23;
    uint64_t v52 = (char *)&v48 - v22;
    uint64_t v53 = v24;
    unint64_t v54 = AssociatedTypeWitness;
    uint64_t v55 = a2;
    uint64_t v50 = associated type descriptor for Sequence.Iterator;
    int64_t v28 = swift_getAssociatedTypeWitness(255, v13, v14, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Iterator);
    uint64_t v49 = associated conformance descriptor for Sequence.Sequence.Iterator: IteratorProtocol;
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness((uint64_t)v13, v14, (uint64_t)v28, (uint64_t)&protocol requirements base descriptor for Sequence, associated conformance descriptor for Sequence.Sequence.Iterator: IteratorProtocol);
    int64x2_t v30 = *(void (**)(uint64_t *, uint64_t))(AssociatedConformanceWitness + 16);
    int64x2_t v31 = swift_checkMetadataState(0, (uint64_t)v28);
    v30(v31, AssociatedConformanceWitness);
    if ((*(unsigned int (**)(char *, uint64_t, const char *))(v63 + 48))(v21, 1, v15) == 1)
    {
      (*(void (**)(char *, Class *))(v51 + 8))(v21, v18);
      uint64_t v32 = (uint64_t)v54;
    }
    else
    {
      uint64_t v33 = v52;
      uint64_t v51 = *(void *)(v63 + 32);
      ((void (*)(char *, char *, const char *))v51)(v52, v21, v15);
      uint64_t v35 = v59;
      uint64_t v34 = v60;
      uint32x4_t v36 = swift_getAssociatedTypeWitness(255, v60, v59, (uint64_t)&protocol requirements base descriptor for Sequence, v50);
      uint64_t v37 = swift_getAssociatedConformanceWitness((uint64_t)v34, v35, (uint64_t)v36, (uint64_t)&protocol requirements base descriptor for Sequence, v49);
      unint64_t v38 = *(void (**)(uint64_t *, uint64_t))(v37 + 16);
      unint64_t v39 = swift_checkMetadataState(0, (uint64_t)v36);
      int64x2_t v40 = v61;
      v38(v39, v37);
      uint64_t v41 = v62;
      uint64_t v32 = (uint64_t)v54;
      if ((*(unsigned int (**)(char *, uint64_t, const char *))(v62 + 48))(v40, 1, v54) != 1)
      {
        int64x2_t v43 = *(void (**)(char *, char *, uint64_t))(v41 + 32);
        int8x16_t v44 = v56;
        v43(v56, v40, v32);
        TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0, (uint64_t)v15, v32, 0, 0);
        uint64_t v46 = v55;
        int8x16_t v47 = (char *)(v55 + *((int *)TupleTypeMetadata2 + 12));
        ((void (*)(uint64_t, char *, const char *))v51)(v55, v33, v15);
        v43(v47, v44, v32);
        return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t *))(*(TupleTypeMetadata2 - 1) + 56))(v46, 0, 1, TupleTypeMetadata2);
      }
      (*(void (**)(char *, const char *))(v63 + 8))(v33, v15);
      (*(void (**)(char *, Class *))(v57 + 8))(v40, v58);
    }
    *(unsigned char *)(v2 + v53) = 1;
    unint64_t v42 = swift_getTupleTypeMetadata2(0, (uint64_t)v15, v32, 0, 0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(*(v42 - 1) + 56))(v55, 1, 1, v42);
  }
  int64_t v25 = swift_getTupleTypeMetadata2(0, (uint64_t)v15, (uint64_t)AssociatedTypeWitness, 0, 0);
  int64_t v26 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(*(v25 - 1) + 56);

  return v26(a2, 1, 1, v25);
}

uint64_t MutableCollection<>._insertionSort(within:sortedEnd:by:)(uint64_t a1, void (*a2)(char *), uint64_t (*a3)(char *, char *), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v76 = a7;
  uint64_t v7 = a5;
  uint64_t v83 = a3;
  uint64_t v84 = a4;
  unint64_t v93 = a2;
  uint64_t v89 = a6;
  uint64_t v9 = *(void *)(a6 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, *(int ***)(v9 + 8), a5, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
  uint64_t v91 = (char *)*((void *)AssociatedTypeWitness - 1);
  uint64_t v10 = MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v82 = (char *)&v60 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = MEMORY[0x1F4188790](v10);
  unint64_t v81 = (char *)&v60 - v13;
  uint64_t v14 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v12);
  uint64_t v90 = (char *)&v60 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = swift_getAssociatedTypeWitness(0, (int **)v9, v7, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  uint64_t v17 = *((void *)v16 - 1);
  uint64_t v18 = MEMORY[0x1F4188790](v16);
  unsigned int v66 = (char *)&v60 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = MEMORY[0x1F4188790](v18);
  uint64_t v22 = (char *)&v60 - v21;
  uint64_t v23 = MEMORY[0x1F4188790](v20);
  uint64_t v92 = (char *)&v60 - v24;
  MEMORY[0x1F4188790](v23);
  int64_t v26 = (char *)&v60 - v25;
  unint64_t v87 = *(void (**)(char *, void (*)(void), const char *))(v17 + 16);
  uint64_t v88 = v17 + 16;
  v87((char *)&v60 - v25, (void (*)(void))v93, v16);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v9, v7, (uint64_t)v16, (uint64_t)&protocol requirements base descriptor for Collection, associated conformance descriptor for Collection.Collection.Index: Comparable);
  uint64_t v29 = *((int *)type metadata accessor for Range(0, (uint64_t)v16, AssociatedConformanceWitness, v28) + 9);
  uint64_t v67 = a1;
  uint64_t v30 = *(void *)(AssociatedConformanceWitness + 8);
  int64x2_t v31 = *(uint64_t (**)(char *, uint64_t, const char *, uint64_t))(v30 + 8);
  uint64_t v62 = a1 + v29;
  uint64_t v80 = v30;
  uint64_t v79 = v30 + 8;
  uint64_t v78 = v31;
  if (((uint64_t (*)(char *))v31)(v26))
  {
    uint64_t v32 = *(void (**)(char *, const char *))(v17 + 8);
  }
  else
  {
    uint64x2_t v73 = *(void (**)(char *, uint64_t, uint64_t))(v89 + 32);
    uint64_t v74 = v89 + 32;
    uint64_t v85 = v9;
    BOOL v70 = *(uint64_t (**)(char *, char *, uint64_t, uint64_t))(v9 + 80);
    uint64_t v34 = v14;
    uint64_t v35 = (char **)(v14 + 16);
    uint64_t v86 = (void (**)(char *, uint64_t))(v34 + 8);
    int64_t v69 = (void (**)(char *))(v91 + 16);
    uint64x2_t v72 = (void (**)(char *, const char *))(v91 + 8);
    int64_t v64 = (void (**)(char *, char *, const char *))(v17 + 32);
    uint64_t v63 = v76 + 64;
    uint64_t v71 = v9 + 80;
    uint64_t v60 = v9 + 192;
    uint64x2_t v61 = v26;
    uint64x2_t v68 = (void (**)(char *, const char *))(v17 + 8);
    unint64_t v75 = v16;
    unint64_t v94 = v22;
    char v65 = v35;
    while (2)
    {
      uint32x4_t v36 = v92;
      v87(v92, (void (*)(void))v26, v16);
      uint64_t v91 = *v35;
      while (1)
      {
        uint64_t v37 = v90;
        ((void (*)(char *, uint64_t, uint64_t))v91)(v90, v95, v7);
        v73(v36, v7, v89);
        unsigned int v77 = *v86;
        v77(v37, v7);
        uint64_t v38 = v85;
        unint64_t v39 = v70;
        int64x2_t v40 = (void (*)(char *, void))v70(v97, v36, v7, v85);
        unint64_t v93 = *v69;
        uint64_t v41 = v81;
        v93(v81);
        v40(v97, 0);
        uint64_t v42 = v7;
        int64x2_t v43 = (void (*)(char *, void))v39(v97, v94, v7, v38);
        int8x16_t v44 = v82;
        v93(v82);
        v43(v97, 0);
        uint64_t v45 = v98;
        char v46 = v83(v41, v44);
        uint64_t v98 = v45;
        if (v45)
        {
          uint64x2_t v56 = *v72;
          uint64_t v57 = AssociatedTypeWitness;
          (*v72)(v44, AssociatedTypeWitness);
          v56(v41, v57);
          uint64_t v58 = *v68;
          uint64_t v59 = v75;
          (*v68)(v94, v75);
          v58(v92, v59);
          return ((uint64_t (*)(char *, const char *))v58)(v61, v59);
        }
        char v47 = v46;
        uint64_t v48 = *v72;
        uint64_t v49 = AssociatedTypeWitness;
        (*v72)(v44, AssociatedTypeWitness);
        v48(v41, v49);
        uint64_t v16 = v75;
        if ((v47 & 1) == 0) {
          break;
        }
        uint64_t v50 = *v64;
        uint64_t v51 = v66;
        uint32x4_t v36 = v92;
        (*v64)(v66, v92, v75);
        uint64_t v52 = v94;
        (*(void (**)(char *, char *, uint64_t))(v76 + 64))(v51, v94, v42);
        uint64_t v32 = *v68;
        (*v68)(v51, v16);
        v50(v36, v52, v16);
        uint64_t v7 = v42;
        v87(v51, (void (*)(void))v36, v16);
        char v53 = v78(v51, v67, v16, v80);
        v32(v51, v16);
        uint64_t v35 = v65;
        if (v53)
        {
          v32(v36, v16);
          uint64_t v54 = v85;
          int64_t v26 = v61;
          goto LABEL_11;
        }
      }
      uint64_t v32 = *v68;
      (*v68)(v94, v75);
      v32(v92, v16);
      uint64_t v54 = v85;
      uint64_t v7 = v42;
      int64_t v26 = v61;
      uint64_t v35 = v65;
LABEL_11:
      uint64_t v55 = v90;
      ((void (*)(char *, uint64_t, uint64_t))v91)(v90, v95, v7);
      (*(void (**)(char *, uint64_t, uint64_t))(v54 + 192))(v26, v7, v54);
      v77(v55, v7);
      if ((v78(v26, v62, v16, v80) & 1) == 0) {
        continue;
      }
      break;
    }
  }
  return ((uint64_t (*)(char *, const char *))v32)(v26, v16);
}

uint64_t MutableCollection<>._insertionSort(within:by:)(uint64_t a1, uint64_t (*a2)(char *, char *), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v20 = a3;
  uint64_t v21 = a6;
  uint64_t v19 = a2;
  uint64_t v9 = *(void *)(a5 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (int **)v9, a4, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  uint64_t v11 = *((void *)AssociatedTypeWitness - 1);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v13 = (void (*)(char *))((char *)&v18 - v12);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v9, a4, (uint64_t)AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Collection, associated conformance descriptor for Collection.Collection.Index: Comparable);
  uint64_t v16 = type metadata accessor for Range(0, (uint64_t)AssociatedTypeWitness, AssociatedConformanceWitness, v15);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, const char *))(*(void *)(AssociatedConformanceWitness + 8)
                                                                     + 8))(a1, a1 + *((int *)v16 + 9), AssociatedTypeWitness);
  if ((result & 1) == 0)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 184))(a1, a4, v9);
    MutableCollection<>._insertionSort(within:sortedEnd:by:)(a1, v13, v19, v20, a4, a5, v21);
    return (*(uint64_t (**)(void (*)(char *), const char *))(v11 + 8))(v13, AssociatedTypeWitness);
  }
  return result;
}

uint64_t MutableCollection<>._reverse(within:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v30 = a3;
  uint64_t v31 = a4;
  uint64_t v6 = *(int ***)(a3 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v6, a2, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  uint64_t v8 = *((void *)AssociatedTypeWitness - 1);
  uint64_t v9 = MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  uint64_t v13 = (char *)&v22 - v12;
  uint64_t v23 = v8;
  uint64_t v14 = *(void (**)(char *, uint64_t, const char *))(v8 + 16);
  v14((char *)&v22 - v12, a1, AssociatedTypeWitness);
  uint64_t v29 = v6;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness((uint64_t)v6, a2, (uint64_t)AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Collection, associated conformance descriptor for Collection.Collection.Index: Comparable);
  uint64_t v17 = type metadata accessor for Range(0, (uint64_t)AssociatedTypeWitness, AssociatedConformanceWitness, v16);
  v14(v11, a1 + *((int *)v17 + 9), AssociatedTypeWitness);
  uint64_t v18 = *(uint64_t (**)(char *, char *, const char *, uint64_t))(AssociatedConformanceWitness + 16);
  uint64_t v28 = AssociatedConformanceWitness;
  if (v18(v13, v11, AssociatedTypeWitness, AssociatedConformanceWitness))
  {
    int64_t v26 = *(void (**)(char *, uint64_t, uint64_t))(v30 + 40);
    uint64_t v27 = v30 + 40;
    uint64_t v24 = *(void (**)(char *, char *, uint64_t, uint64_t))(v31 + 64);
    uint64_t v25 = v31 + 64;
    uint64_t v19 = v29[24];
    do
    {
      v26(v11, a2, v30);
      v24(v13, v11, a2, v31);
      ((void (*)(char *, uint64_t, int **))v19)(v13, a2, v29);
    }
    while ((v18(v13, v11, AssociatedTypeWitness, v28) & 1) != 0);
  }
  uint64_t v20 = *(void (**)(char *, const char *))(v23 + 8);
  v20(v11, AssociatedTypeWitness);
  return ((uint64_t (*)(char *, const char *))v20)(v13, AssociatedTypeWitness);
}

uint64_t _merge<A>(low:mid:high:buffer:by:)(char *a1, char *a2, uint64_t a3, char *a4, uint64_t (*a5)(void, void), uint64_t a6, unint64_t *a7)
{
  unint64_t v8 = v7;
  uint64_t v9 = a7;
  uint64_t v79 = a6;
  uint64_t v80 = a5;
  uint64_t v13 = *(a7 - 1);
  uint64_t v14 = MEMORY[0x1F4188790](a1);
  uint64_t v15 = MEMORY[0x1F4188790](v14);
  uint64_t v17 = (char *)&v68 - v16;
  MEMORY[0x1F4188790](v15);
  uint64_t v19 = MEMORY[0x1F4188790]((char *)&v68 - v18);
  uint64_t v76 = (char *)&v68 - v22;
  uint64_t v77 = *(void *)(v23 + 72);
  if (!v77) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Division by zero", 16, 2, "Swift/IntegerTypes.swift", 24, 2, 0x3829uLL, 0);
  }
  int64_t v24 = a2 - a1;
  if (a2 - a1 == 0x8000000000000000 && v77 == -1 || (int64_t v25 = v20 - a2, v20 - a2 == 0x8000000000000000) && v77 == -1) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Division results in an overflow", 31, 2, "Swift/IntegerTypes.swift", 24, 2, 0x3830uLL, 0);
  }
  uint64x2_t v73 = (char *)v19;
  unint64_t v81 = v20;
  uint64_t v26 = v77;
  uint64_t v27 = v24 / v77;
  uint64_t v84 = a1;
  uint64_t v83 = a4;
  uint64_t v28 = v25 / v77;
  if (v24 / v26 >= v25 / v26)
  {
    uint64x2_t v73 = v17;
    uint64_t v74 = v21;
    UnsafeMutablePointer.moveInitialize(from:count:)(a2, v25 / v77, a4, v9);
    int64x2_t v43 = &a4[v28 * v26];
    unint64_t v82 = (unint64_t)v43;
    uint64_t v84 = a2;
    if (v28 * v26 >= 1 && a1 < a2)
    {
      uint64_t v45 = -v26;
      char v46 = *(void (**)(void, char *, unint64_t *))(v13 + 16);
      uint64_t v78 = v13 + 16;
      uint64_t v71 = (void (**)(char *, unint64_t *))(v13 + 8);
      uint64x2_t v72 = v46;
      int64_t v69 = a4;
      BOOL v70 = a1;
      char v47 = v73;
      while (1)
      {
        uint64_t v48 = a2;
        uint64_t v49 = v45;
        uint64_t v50 = v72;
        v72(v47, &v43[v45], v9);
        uint64_t v77 = (uint64_t)v48;
        uint64_t v51 = &v48[v45];
        uint64_t v52 = v74;
        v50(v74, &v48[v45], v9);
        char v53 = v80(v47, v52);
        if (v8) {
          break;
        }
        char v54 = v53;
        unint64_t v55 = (unint64_t)v81;
        unint64_t v75 = 0;
        uint64_t v76 = &v81[v49];
        uint64x2_t v56 = *v71;
        (*v71)(v52, v9);
        uint64_t v57 = v9;
        v56(v47, v9);
        if (v54)
        {
          BOOL v29 = v55 >= v77;
          unint64_t v58 = v55;
          uint64_t v59 = v76;
          if (v29 && (unint64_t)v76 < v77)
          {
            BOOL v60 = v58 == v77;
            unint64_t v8 = v75;
            uint64_t v9 = v57;
            uint64_t v45 = v49;
            if (!v60) {
              swift_arrayInitWithTakeBackToFront(v76, v51, 1, (uint64_t)v57);
            }
          }
          else
          {
            uint64_t v9 = v57;
            swift_arrayInitWithTakeFrontToBack(v76, v51, 1, v57);
            unint64_t v8 = v75;
            uint64_t v45 = v49;
          }
          v84 += v45;
        }
        else
        {
          unint64_t v61 = v82;
          uint64_t v62 = (char *)(v82 + v49);
          v82 += v49;
          BOOL v63 = v55 < v61 || (unint64_t)v76 >= v61;
          unint64_t v64 = v55;
          uint64_t v45 = v49;
          uint64_t v59 = v76;
          if (v63)
          {
            uint64_t v9 = v57;
            swift_arrayInitWithTakeFrontToBack(v76, v62, 1, v57);
            uint64_t v51 = (char *)v77;
            unint64_t v8 = v75;
          }
          else
          {
            unint64_t v8 = v75;
            uint64_t v51 = (char *)v77;
            if (v64 == v61)
            {
              uint64_t v9 = v57;
            }
            else
            {
              uint64_t v9 = v57;
              swift_arrayInitWithTakeBackToFront(v76, v62, 1, (uint64_t)v57);
            }
          }
        }
        int64x2_t v43 = (char *)v82;
        if (v82 > (unint64_t)v69)
        {
          a2 = v51;
          unint64_t v81 = v59;
          if (v51 > v70) {
            continue;
          }
        }
        goto LABEL_64;
      }
      unsigned int v66 = *v71;
      (*v71)(v52, v9);
      v66(v47, v9);
    }
  }
  else
  {
    UnsafeMutablePointer.moveInitialize(from:count:)(a1, v24 / v77, a4, v9);
    unint64_t v75 = (unint64_t)&a4[v27 * v26];
    unint64_t v82 = v75;
    BOOL v29 = v27 * v26 < 1 || a2 >= v81;
    if (!v29)
    {
      uint64_t v74 = *(char **)(v13 + 16);
      uint64_t v78 = v13 + 16;
      uint64_t v30 = (void (**)(char *, unint64_t *))(v13 + 8);
      uint64_t v31 = v73;
      while (1)
      {
        uint64_t v32 = v76;
        uint64_t v33 = (void (*)(char *, char *, unint64_t *))v74;
        ((void (*)(char *, char *, unint64_t *))v74)(v76, a2, v9);
        v33(v31, a4, v9);
        char v34 = v80(v32, v31);
        if (v8) {
          break;
        }
        char v35 = v34;
        uint32x4_t v36 = *v30;
        (*v30)(v31, v9);
        v36(v32, v9);
        uint64_t v37 = v84;
        if (v35)
        {
          uint64_t v38 = v77;
          unint64_t v39 = (unint64_t)&a2[v77];
          if (v84 < a2 || (unint64_t)v84 >= v39)
          {
            swift_arrayInitWithTakeFrontToBack(v84, a2, 1, v9);
          }
          else if (v84 == a2)
          {
            uint64_t v37 = a2;
          }
          else
          {
            swift_arrayInitWithTakeBackToFront(v84, a2, 1, (uint64_t)v9);
          }
        }
        else
        {
          uint64_t v38 = v77;
          uint64_t v41 = &v83[v77];
          if (v84 < v83 || v84 >= v41)
          {
            swift_arrayInitWithTakeFrontToBack(v84, v83, 1, v9);
          }
          else if (v84 != v83)
          {
            swift_arrayInitWithTakeBackToFront(v84, v83, 1, (uint64_t)v9);
          }
          uint64_t v83 = v41;
          unint64_t v39 = (unint64_t)a2;
        }
        uint64_t v84 = &v37[v38];
        a4 = v83;
        if ((unint64_t)v83 < v75)
        {
          a2 = (char *)v39;
          BOOL v29 = v39 >= (unint64_t)v81;
          unint64_t v8 = 0;
          if (!v29) {
            continue;
          }
        }
        goto LABEL_64;
      }
      char v65 = *v30;
      (*v30)(v31, v9);
      v65(v32, v9);
    }
  }
LABEL_64:
  $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)(&v84, &v83, &v82, v9);
  return 1;
}

char *$defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)(char **a1, char **a2, void *a3, unint64_t *a4)
{
  uint64_t v5 = *a1;
  uint64_t v6 = *a2;
  uint64_t v7 = *(void *)(*(a4 - 1) + 72);
  if (!v7) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Division by zero", 16, 2, "Swift/IntegerTypes.swift", 24, 2, 0x3829uLL, 0);
  }
  uint64_t v8 = *a3 - (void)v6;
  if (v7 == -1 && v8 == 0x8000000000000000) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Division results in an overflow", 31, 2, "Swift/IntegerTypes.swift", 24, 2, 0x3830uLL, 0);
  }

  return UnsafeMutablePointer.moveInitialize(from:count:)(v6, v8 / v7, v5, a4);
}

Swift::Int __swiftcall _minimumMergeRunLength(_:)(Swift::Int result)
{
  if (result >= 64)
  {
    char v1 = 58 - __clz(result);
    uint64_t v2 = -1 << v1;
    unint64_t v3 = (unint64_t)result >> v1;
    BOOL v4 = (result & ~v2) != 0;
    uint64_t result = v3 + v4;
    if (__OFADD__(v3, v4)) {
      __break(1u);
    }
  }
  return result;
}

unint64_t Int.leadingZeroBitCount.getter(unint64_t a1)
{
  return __clz(a1);
}

uint64_t _findNextRun<A>(in:from:by:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void (**)(uint64_t, char *, const char *), char *), uint64_t a5, uint64_t a6)
{
  uint64_t v110 = a4;
  uint64_t v111 = a5;
  uint64_t v114 = a2;
  uint64_t v84 = a1;
  uint64_t v91 = *(void (***)(char *, uint64_t))(a6 - 8);
  MEMORY[0x1F4188790](a1);
  unint64_t v116 = (char *)&v83 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *(void *)(*(void *)(v9 + 8) + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, *(int ***)(v10 + 8), v11, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
  uint64_t v12 = *((void *)AssociatedTypeWitness - 1);
  uint64_t v13 = MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v100 = (char *)&v83 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = MEMORY[0x1F4188790](v13);
  uint64_t v121 = (void (**)(uint64_t, char *, const char *))((char *)&v83 - v16);
  uint64_t v17 = MEMORY[0x1F4188790](v15);
  unint64_t v93 = (char *)&v83 - v18;
  MEMORY[0x1F4188790](v17);
  unint64_t v94 = (void (**)(uint64_t, char *, const char *))((char *)&v83 - v19);
  uint64_t v20 = swift_getAssociatedTypeWitness(0, (int **)v10, a6, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  uint64_t v21 = *((void *)v20 - 1);
  uint64_t v22 = MEMORY[0x1F4188790](v20);
  unint64_t v99 = (char *)&v83 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = MEMORY[0x1F4188790](v22);
  uint64_t v98 = (char *)&v83 - v25;
  uint64_t v26 = MEMORY[0x1F4188790](v24);
  uint64_t v108 = (char *)&v83 - v27;
  uint64_t v28 = MEMORY[0x1F4188790](v26);
  uint64_t v30 = (char *)&v83 - v29;
  uint64_t v31 = MEMORY[0x1F4188790](v28);
  uint64_t v33 = (char *)&v83 - v32;
  MEMORY[0x1F4188790](v31);
  uint64_t v35 = v21 + 16;
  char v34 = *(void (**)(void))(v21 + 16);
  uint64_t v117 = (char *)&v83 - v36;
  uint64_t v106 = v34;
  v34();
  uint64_t v37 = a3;
  uint64_t v38 = (char *)v21;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 184))(v37, a6, v10);
  unint64_t v39 = *(void (**)(uint64_t, uint64_t))(v10 + 72);
  uint64_t v105 = v10 + 72;
  int64_t v104 = v39;
  v39(a6, v10);
  uint64_t v118 = v10;
  uint64_t v123 = a6;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v10, a6, (uint64_t)v20, (uint64_t)&protocol requirements base descriptor for Collection, associated conformance descriptor for Collection.Collection.Index: Comparable);
  uint64_t v41 = *(uint64_t (**)(char *, char *, const char *, uint64_t))(AssociatedConformanceWitness + 16);
  uint64_t v103 = AssociatedConformanceWitness;
  uint64_t v102 = AssociatedConformanceWitness + 16;
  uint64_t v101 = v41;
  LOBYTE(v21) = ((uint64_t (*)(char *, char *, const char *))v41)(v33, v30, v20);
  uint64_t v42 = (void (*)(char *, const char *))*((void *)v38 + 1);
  int64_t v107 = v30;
  v42(v30, v20);
  if (v21)
  {
    uint64_t v85 = (void (*)(uint64_t, char *, const char *))v38;
    uint64_t v43 = v118 + 80;
    uint64_t v97 = *(uint64_t (**)(char *, char *, uint64_t))(v118 + 80);
    uint64_t v115 = v33;
    uint64_t v109 = v42;
    uint64_t v44 = v123;
    uint64_t v45 = (void (*)(char *, void))v97(v122, v33, v123);
    unint64_t v96 = *(void (**)(void (**)(uint64_t, char *, const char *)))(v12 + 16);
    v96(v94);
    v45(v122, 0);
    char v46 = v117;
    uint64_t v95 = v43;
    char v47 = (void (*)(char *, void))((uint64_t (*)(char *, char *, uint64_t, uint64_t))v97)(v122, v117, v44, v118);
    uint64_t v48 = v93;
    v96((void (**)(uint64_t, char *, const char *))v93);
    v47(v122, 0);
    v109(v46, v20);
    uint64_t v49 = v119;
    int v50 = v110(v94, v48);
    if (v49)
    {
      uint64_t v51 = *(void (**)(char *, const char *))(v12 + 8);
      uint64_t v52 = AssociatedTypeWitness;
      v51(v93, AssociatedTypeWitness);
      v51((char *)v94, v52);
      v109(v115, v20);
    }
    else
    {
      uint64_t v112 = v12 + 16;
      int v89 = v50;
      uint64_t v119 = 0;
      unint64_t v55 = *(void (**)(char *, const char *))(v12 + 8);
      uint64x2_t v56 = AssociatedTypeWitness;
      v55(v93, AssociatedTypeWitness);
      unint64_t v87 = v55;
      v55((char *)v94, v56);
      uint64_t v92 = *(void (**)(char *, uint64_t, uint64_t))(v118 + 192);
      unint64_t v93 = (char *)(v118 + 192);
      uint64_t v90 = (void (**)(char *, uint64_t, uint64_t))(v91 + 2);
      unint64_t v94 = (void (**)(uint64_t, char *, const char *))((char *)v85 + 32);
      ++v91;
      uint64_t v57 = v115;
      uint64_t v88 = v12 + 8;
      uint64_t v86 = v35;
      uint64_t v113 = v38 + 8;
      while (1)
      {
        unint64_t v58 = v106;
        ((void (*)(char *, char *, const char *))v106)(v117, v57, v20);
        uint64_t v59 = v114;
        uint64_t v60 = v123;
        uint64_t v61 = v118;
        v92(v57, v123, v118);
        uint64_t v62 = v107;
        ((void (*)(char *, char *, const char *))v58)(v107, v57, v20);
        BOOL v63 = v108;
        v104(v60, v61);
        char v64 = v101(v62, v63, v20, v103);
        char v65 = v63;
        unsigned int v66 = v109;
        v109(v65, v20);
        v66(v62, v20);
        (*v90)(v116, v59, v60);
        if ((v64 & 1) == 0)
        {
          (*v91)(v116, v123);
          v66(v117, v20);
          (*v94)(v84, v115, v20);
          goto LABEL_12;
        }
        uint64_t v67 = v98;
        ((void (*)(char *, char *, const char *))v58)(v98, v115, v20);
        uint64_t v68 = v116;
        uint64_t v69 = v118;
        BOOL v70 = (uint64_t (*)(char *, char *, uint64_t, uint64_t))v97;
        uint64_t v71 = (void (*)(char *, void))((uint64_t (*)(char *, char *, uint64_t, uint64_t))v97)(v122, v67, v123, v118);
        uint64x2_t v72 = (void (*)(char *))v96;
        v96(v121);
        v71(v122, 0);
        v66(v67, v20);
        uint64x2_t v73 = v99;
        uint64_t v85 = *v94;
        v85((uint64_t)v99, v117, v20);
        uint64_t v74 = v70(v122, v73, v123, v69);
        unint64_t v75 = AssociatedTypeWitness;
        uint64_t v76 = (void (*)(char *, void))v74;
        uint64_t v77 = v100;
        v72(v100);
        v76(v122, 0);
        v66(v73, v20);
        (*v91)(v68, v123);
        uint64_t v78 = v119;
        int v79 = v110(v121, v77);
        uint64_t v119 = v78;
        if (v78) {
          break;
        }
        int v80 = v79;
        unint64_t v81 = v87;
        v87(v77, v75);
        v81((char *)v121, v75);
        uint64_t v57 = v115;
        if ((v89 ^ v80))
        {
          v85(v84, v115, v20);
LABEL_12:
          char v53 = v89;
          return v53 & 1;
        }
      }
      unint64_t v82 = v87;
      v87(v77, v75);
      v82((char *)v121, v75);
      v109(v115, v20);
    }
  }
  else
  {
    v42(v117, v20);
    (*((void (**)(uint64_t, char *, const char *))v38 + 4))(v84, v33, v20);
    char v53 = 0;
  }
  return v53 & 1;
}

uint64_t UnsafeMutableBufferPointer._mergeRuns(_:at:buffer:by:)(uint64_t *a1, unint64_t a2, char *a3, uint64_t (*a4)(void, void), uint64_t a5, uint64_t a6)
{
  unint64_t v8 = a2 - 1;
  if (__OFSUB__(a2, 1))
  {
    __break(1u);
    goto LABEL_10;
  }
  uint64_t v25 = v7;
  uint64_t v13 = *a1;
  specialized Array._checkSubscript(_:wasNativeTypeChecked:)(a2 - 1, 1, *a1);
  uint64_t v14 = v13 + 32;
  uint64_t v15 = *(void *)(v13 + 32 + 16 * v8);
  specialized Array._checkSubscript(_:wasNativeTypeChecked:)(a2, 1, v13);
  uint64_t v16 = *v6;
  if (!*v6) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/Sort.swift", 16, 2, 0x21BuLL, 0);
  }
  uint64_t v17 = *(void *)(v14 + 16 * a2 + 8);
  uint64_t v18 = *(void *)(*(void *)(*(void *)(a6 + 16) - 8) + 72);
  _merge<A>(low:mid:high:buffer:by:)((char *)(v16 + v18 * v15), (char *)(v16 + v18 * *(void *)(v14 + 16 * a2)), v16 + v18 * v17, a3, a4, a5, *(unint64_t **)(a6 + 16));
  if (!v25)
  {
    if (v17 >= v15)
    {
      BOOL isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v13);
      *a1 = v13;
      if (!isUniquelyReferenced_nonNull_native)
      {
        uint64_t v13 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v13);
        *a1 = v13;
      }
      specialized Array._checkSubscript_mutating(_:)(v8, v13);
      unint64_t v20 = v13 + 16 * v8;
      *(void *)(v20 + 32) = v15;
      *(void *)(v20 + 4_assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0, 0xE000000000000000, "Swift/SmallString.swift", 23, 2, 0xD7uLL, 0) = v17;
      *a1 = v13;
      Array.remove(at:)(a2, (uint64_t)&unk_1EC9FFDC0, (uint64_t)v24);
      return 1;
    }
LABEL_10:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
  }
  return 1;
}

Swift::Int UnsafeMutableBufferPointer._mergeTopRuns(_:buffer:by:)(uint64_t *a1, char *a2, uint64_t (*a3)(void, void), uint64_t a4, uint64_t a5)
{
  uint64_t v6 = *a1;
  if (*(void *)(*a1 + 16) < 2uLL) {
    return 1;
  }
  while (1)
  {
    Swift::Int result = Array._getCount()();
    unint64_t v13 = result - 1;
    if (__OFSUB__(result, 1)) {
      break;
    }
    unint64_t v14 = result - 4;
    if ((uint64_t)v13 < 3)
    {
      if (result == 3)
      {
        unint64_t v15 = 0;
        unint64_t v16 = *(void *)(v6 + 16);
LABEL_14:
        if (v15 >= v16) {
          goto LABEL_40;
        }
        uint64_t v32 = v6 + 32;
        uint64_t v33 = (uint64_t *)(v6 + 32 + 16 * v15);
        uint64_t v35 = *v33;
        uint64_t v34 = v33[1];
        BOOL v25 = __OFSUB__(v34, v35);
        uint64_t v36 = v34 - v35;
        if (v25) {
          goto LABEL_46;
        }
        if (result - 2 >= v16) {
          goto LABEL_40;
        }
        uint64_t v37 = (uint64_t *)(v32 + 16 * (result - 2));
        uint64_t v39 = *v37;
        uint64_t v38 = v37[1];
        BOOL v25 = __OFSUB__(v38, v39);
        uint64_t v40 = v38 - v39;
        if (v25) {
          goto LABEL_47;
        }
        if (v13 >= v16) {
          goto LABEL_40;
        }
        uint64_t v41 = (uint64_t *)(v32 + 16 * v13);
        uint64_t v43 = *v41;
        uint64_t v42 = v41[1];
        BOOL v25 = __OFSUB__(v42, v43);
        uint64_t v44 = v42 - v43;
        if (v25) {
          goto LABEL_48;
        }
        if (__OFADD__(v40, v44)) {
          goto LABEL_51;
        }
        if (v40 + v44 >= v36)
        {
          if (v36 < v44) {
            unint64_t v13 = result - 2;
          }
          goto LABEL_37;
        }
      }
      unint64_t v45 = result - 2;
      if (__OFSUB__(v13, 1)) {
        goto LABEL_49;
      }
      if ((v45 & 0x8000000000000000) != 0) {
        goto LABEL_40;
      }
      unint64_t v46 = *(void *)(v6 + 16);
      if (v45 >= v46) {
        goto LABEL_40;
      }
      char v47 = (uint64_t *)(v6 + 32 + 16 * v45);
      uint64_t v49 = *v47;
      uint64_t v48 = v47[1];
      BOOL v25 = __OFSUB__(v48, v49);
      uint64_t v50 = v48 - v49;
      if (v25) {
        goto LABEL_50;
      }
      if (v13 >= v46) {
LABEL_40:
      }
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Index out of range", 18, 2, "Swift/ContiguousArrayBuffer.swift", 33, 2, 0x2A3uLL, 0);
      uint64_t v51 = (uint64_t *)(v6 + 32 + 16 * v13);
      uint64_t v53 = *v51;
      uint64_t v52 = v51[1];
      BOOL v25 = __OFSUB__(v52, v53);
      uint64_t v54 = v52 - v53;
      if (v25) {
        goto LABEL_52;
      }
      if (v54 < v50) {
        return 1;
      }
      goto LABEL_37;
    }
    unint64_t v16 = *(void *)(v6 + 16);
    if (v14 >= v16) {
      goto LABEL_40;
    }
    uint64_t v17 = v6 + 32;
    uint64_t v18 = (uint64_t *)(v6 + 32 + 16 * v14);
    uint64_t v20 = *v18;
    uint64_t v19 = v18[1];
    uint64_t v21 = v19 - v20;
    if (__OFSUB__(v19, v20)) {
      goto LABEL_42;
    }
    unint64_t v15 = result - 3;
    if (result - 3 >= v16) {
      goto LABEL_40;
    }
    uint64_t v22 = (uint64_t *)(v17 + 16 * v15);
    uint64_t v24 = *v22;
    uint64_t v23 = v22[1];
    BOOL v25 = __OFSUB__(v23, v24);
    uint64_t v26 = v23 - v24;
    if (v25) {
      goto LABEL_43;
    }
    if (result - 2 >= v16) {
      goto LABEL_40;
    }
    uint64_t v27 = (uint64_t *)(v17 + 16 * (result - 2));
    uint64_t v29 = *v27;
    uint64_t v28 = v27[1];
    BOOL v25 = __OFSUB__(v28, v29);
    uint64_t v30 = v28 - v29;
    if (v25) {
      goto LABEL_44;
    }
    BOOL v25 = __OFADD__(v26, v30);
    uint64_t v31 = v26 + v30;
    if (v25) {
      goto LABEL_45;
    }
    if (v31 < v21) {
      goto LABEL_14;
    }
    if (v13 >= v16) {
      goto LABEL_40;
    }
    unint64_t v55 = (uint64_t *)(v17 + 16 * v13);
    uint64_t v57 = *v55;
    uint64_t v56 = v55[1];
    BOOL v25 = __OFSUB__(v56, v57);
    uint64_t v58 = v56 - v57;
    if (v25) {
      goto LABEL_53;
    }
    if (v26 < v58) {
      unint64_t v13 = result - 2;
    }
LABEL_37:
    UnsafeMutableBufferPointer._mergeRuns(_:at:buffer:by:)(a1, v13, a2, a3, a4, a5);
    if (!v5)
    {
      uint64_t v6 = *a1;
      if (Array._getCount()() > 1) {
        continue;
      }
    }
    return 1;
  }
  __break(1u);
LABEL_42:
  __break(1u);
LABEL_43:
  __break(1u);
LABEL_44:
  __break(1u);
LABEL_45:
  __break(1u);
LABEL_46:
  __break(1u);
LABEL_47:
  __break(1u);
LABEL_48:
  __break(1u);
LABEL_49:
  __break(1u);
LABEL_50:
  __break(1u);
LABEL_51:
  __break(1u);
LABEL_52:
  __break(1u);
LABEL_53:
  __break(1u);
  return result;
}

Swift::Int UnsafeMutableBufferPointer._finalizeRuns(_:buffer:by:)(uint64_t *a1, char *a2, uint64_t (*a3)(void, void), uint64_t a4, uint64_t a5)
{
  if (*(void *)(*a1 + 16) < 2uLL) {
    return 1;
  }
  while (1)
  {
    Swift::Int result = Array._getCount()();
    if (__OFSUB__(result, 1)) {
      break;
    }
    UnsafeMutableBufferPointer._mergeRuns(_:at:buffer:by:)(a1, result - 1, a2, a3, a4, a5);
    if (v5 || Array._getCount()() <= 1) {
      return 1;
    }
  }
  __break(1u);
  return result;
}

uint64_t StaticString._startPtrOrData.setter(uint64_t result)
{
  void *v1 = result;
  return result;
}

uint64_t (*StaticString._startPtrOrData.modify())()
{
  return EnumeratedSequence._base.modify;
}

uint64_t StaticString._utf8CodeUnitCount.getter(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t StaticString._utf8CodeUnitCount.setter(uint64_t result)
{
  *(void *)(v1 + 8) = result;
  return result;
}

uint64_t (*StaticString._utf8CodeUnitCount.modify())()
{
  return EnumeratedSequence._base.modify;
}

uint64_t StaticString._flags.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a3;
}

uint64_t StaticString._flags.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 16) = result;
  return result;
}

uint64_t (*StaticString._flags.modify())()
{
  return EnumeratedSequence._base.modify;
}

uint64_t StaticString.init(unicodeScalar:)(uint64_t result)
{
  return result;
}

BOOL StaticString.hasPointerRepresentation.getter(uint64_t a1, uint64_t a2, char a3)
{
  return (a3 & 1) == 0;
}

unint64_t StaticString.unicodeScalar.getter(unint64_t result, uint64_t a2, char a3)
{
  if ((a3 & 1) == 0) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "StaticString should have Unicode scalar representation", 54, 2, "Swift/StaticString.swift", 24, 2, 0x91uLL, 0);
  }
  if (HIDWORD(result)) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Not enough bits to represent the passed value", 45, 2, "Swift/Integers.swift", 20, 2, 0xD7FuLL, 0);
  }
  if (WORD1(result) > 0x10u || (result & 0xFFFFF800) == 0xD800) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/StaticString.swift", 24, 2, 0x94uLL, 0);
  }
  return result;
}

uint64_t StaticString.utf8CodeUnitCount.getter(uint64_t a1, uint64_t a2, char a3)
{
  if (a3) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "StaticString should have pointer representation", 47, 2, "Swift/StaticString.swift", 24, 2, 0x9DuLL, 0);
  }
  return a2;
}

uint64_t static UInt8.& infix(_:_:)(unsigned int a1, int a2)
{
  return a2 & a1;
}

uint64_t StaticString.isASCII.getter(uint64_t a1, uint64_t a2, unsigned int a3)
{
  return (a3 >> 1) & 1;
}

uint64_t protocol witness for _ExpressibleByBuiltinUnicodeScalarLiteral.init(_builtinUnicodeScalarLiteral:) in conformance StaticString@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  if (result > 0x7F) {
    char v2 = 1;
  }
  else {
    char v2 = 3;
  }
  *(void *)a2 = result;
  *(void *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 16) = v2;
  return result;
}

uint64_t protocol witness for _ExpressibleByBuiltinStringLiteral.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:) in conformance StaticString@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  if (a3) {
    char v4 = 2;
  }
  else {
    char v4 = 0;
  }
  *(void *)a4 = result;
  *(void *)(a4 + 8) = a2;
  *(unsigned char *)(a4 + 16) = v4;
  return result;
}

__n128 protocol witness for ExpressibleByStringLiteral.init(stringLiteral:) in conformance StaticString@<Q0>(__n128 *a1@<X0>, __n128 *a2@<X8>)
{
  unsigned __int8 v2 = a1[1].n128_u8[0];
  __n128 result = *a1;
  *a2 = *a1;
  a2[1].n128_u8[0] = v2;
  return result;
}

uint64_t StaticString.description.getter(uint8x16_t *a1, uint64_t a2, char a3)
{
  if (a3)
  {
    if ((unint64_t)a1 >> 32) {
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Not enough bits to represent the passed value", 45, 2, "Swift/Integers.swift", 20, 2, 0xD7FuLL, 0);
    }
    if (WORD1(a1) <= 0x10u && (a1 & 0xFFFFF800) != 0xD800) {
      return specialized Unicode.Scalar.withUTF8CodeUnits<A>(_:)(a1);
    }
    unint64_t v4 = 148;
LABEL_15:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/StaticString.swift", 24, 2, v4, 0);
  }
  if (!a1)
  {
    unint64_t v4 = 136;
    goto LABEL_15;
  }
  if (a2 < 0) {
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeBufferPointer with negative count", 39, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x53FuLL, 0);
  }

  return specialized static String._uncheckedFromUTF8(_:)(a1, a2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance StaticString()
{
  return StaticString.description.getter(*(uint8x16_t **)v0, *(void *)(v0 + 8), *(unsigned char *)(v0 + 16));
}

void protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance StaticString()
{
}

uint64_t StaticString.customMirror.getter@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  if (a3)
  {
    if (HIDWORD(a1)) {
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Not enough bits to represent the passed value", 45, 2, "Swift/Integers.swift", 20, 2, 0xD7FuLL, 0);
    }
    if (WORD1(a1) <= 0x10u && (a1 & 0xFFFFF800) != 0xD800)
    {
      uint64_t v11 = specialized Unicode.Scalar.withUTF8CodeUnits<A>(_:)(a1);
      int64_t v13 = v12;
      goto LABEL_34;
    }
    unint64_t v90 = 148;
LABEL_64:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/StaticString.swift", 24, 2, v90, 0);
  }
  if (!a1)
  {
    unint64_t v90 = 136;
    goto LABEL_64;
  }
  if (a2 < 0) {
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeBufferPointer with negative count", 39, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x53FuLL, 0);
  }
  if (!a2)
  {
    uint64_t v11 = 0;
    int64_t v13 = 0xE000000000000000;
    goto LABEL_34;
  }
  if ((a2 & 0xFFFFFFFFFFFFFFF0) != 0)
  {
    unint64_t v7 = a2;
    if (((*(void *)(a1 + 8) | *(void *)a1) & 0x8080808080808080) != 0)
    {
LABEL_31:
      uint64_t v14 = v7 | 0x3000000000000000;
      int64_t v13 = _allocateStringStorage(codeUnitCapacity:)(a2);
      *(void *)(v13 + 16) = v15;
      *(void *)(v13 + 24) = v14;
      if (v15 < 0)
      {
        *(void *)__StringStorage._breadcrumbsAddress.getter() = 0;
        uint64_t v14 = *(void *)(v13 + 24);
      }
      *(unsigned char *)(v13 + 32 + (v14 & 0xFFFFFFFFFFFFLL)) = 0;
      specialized UnsafeMutablePointer.initialize(from:count:)((char *)a1, a2, (char *)(v13 + 32));
      uint64_t v11 = *(void *)(v13 + 24);
      goto LABEL_34;
    }
    unint64_t v8 = (unsigned __int8 *)(a1 + 16);
    while ((unint64_t)v8 < a1 + (a2 & 0xFFFFFFFFFFFFFFF0))
    {
      uint64_t v9 = *(void *)v8;
      uint64_t v10 = *((void *)v8 + 1);
      v8 += 16;
      if (((v10 | v9) & 0x8080808080808080) != 0) {
        goto LABEL_30;
      }
    }
  }
  else
  {
    unint64_t v8 = (unsigned __int8 *)a1;
  }
  if ((unint64_t)v8 < a1 + (a2 & 0xFFFFFFFFFFFFFFF8))
  {
    if ((*(void *)v8 & 0x8080808080808080) != 0) {
      goto LABEL_30;
    }
    v8 += 8;
  }
  if ((unint64_t)v8 < a1 + (a2 & 0xFFFFFFFFFFFFFFFCLL))
  {
    if ((*(_DWORD *)v8 & 0x80808080) != 0) {
      goto LABEL_30;
    }
    v8 += 4;
  }
  if ((unint64_t)v8 < a1 + (a2 & 0xFFFFFFFFFFFFFFFELL))
  {
    if ((*(_WORD *)v8 & 0x8080) != 0) {
      goto LABEL_30;
    }
    v8 += 2;
  }
  if ((unint64_t)v8 < a1 + a2 && (char)*v8 < 0)
  {
LABEL_30:
    unint64_t v7 = a2;
    if (a2 > 15) {
      goto LABEL_31;
    }
    goto LABEL_35;
  }
  if (a2 >= 16)
  {
    unint64_t v7 = a2 | 0xC000000000000000;
    goto LABEL_31;
  }
LABEL_35:
  uint64_t v11 = 0;
  uint64_t v17 = 0;
  unint64_t v18 = a2 - 8;
  uint64_t v19 = 8;
  if (a2 < 8) {
    uint64_t v19 = a2;
  }
  unint64_t v20 = v19 & ~(v19 >> 63);
  unint64_t v21 = v19 - 1;
  uint64_t v22 = (unsigned __int8 *)a1;
  do
  {
    if (v20 <= v21) {
      _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Index out of range", 18, 2, "Swift/Range.swift", 17, 2, 0x131uLL, 0);
    }
    unsigned int v23 = *v22++;
    v11 |= (unint64_t)v23 << (v17 & 0x38);
    v17 += 8;
    --v19;
  }
  while (v19);
  if (a2 >= 9)
  {
    if (v18 < 8)
    {
      unint64_t v24 = 0;
      int8x8_t v25 = 0;
      unint64_t v26 = 0;
LABEL_55:
      uint64_t v86 = a2 - v24 - 8;
      unint64_t v87 = (unsigned __int8 *)(v24 + a1 + 8);
      do
      {
        unsigned int v88 = *v87++;
        *(void *)&v25 |= (unint64_t)v88 << (v26 & 0x38);
        v26 += 8;
        --v86;
      }
      while (v86);
      goto LABEL_57;
    }
    if (v18 >= 0x10)
    {
      uint64_t v50 = (uint8x16_t *)(a1 + 8);
      unint64_t v24 = v18 & 0xFFFFFFFFFFFFFFF0;
      int64x2_t v51 = (int64x2_t)xmmword_18162AD80;
      int64x2_t v52 = (int64x2_t)xmmword_18162AD90;
      int64x2_t v53 = (int64x2_t)xmmword_18162ADA0;
      int64x2_t v54 = (int64x2_t)xmmword_18162ADB0;
      unint64_t v26 = 8 * (v18 & 0xFFFFFFFFFFFFFFF0);
      int8x16_t v55 = 0uLL;
      int8x16_t v56 = (int8x16_t)vdupq_n_s64(0x38uLL);
      int64x2_t v57 = vdupq_n_s64(0x80uLL);
      unint64_t v58 = v18 & 0xFFFFFFFFFFFFFFF0;
      int64x2_t v59 = (int64x2_t)xmmword_18162ACE0;
      int8x16_t v60 = 0uLL;
      int8x16_t v61 = 0uLL;
      int64x2_t v62 = (int64x2_t)xmmword_18162AD00;
      int8x16_t v63 = 0uLL;
      int8x16_t v64 = 0uLL;
      int64x2_t v65 = (int64x2_t)xmmword_18162ACD0;
      int8x16_t v66 = 0uLL;
      int8x16_t v67 = 0uLL;
      int64x2_t v68 = (int64x2_t)xmmword_18162ACF0;
      int8x16_t v69 = 0uLL;
      do
      {
        uint8x16_t v70 = *v50++;
        uint16x8_t v71 = vmovl_u8(*(uint8x8_t *)v70.i8);
        uint32x4_t v72 = vmovl_high_u16(v71);
        v73.i64[0] = v72.u32[2];
        v73.i64[1] = v72.u32[3];
        uint64x2_t v74 = v73;
        uint16x8_t v75 = vmovl_high_u8(v70);
        uint32x4_t v76 = vmovl_u16(*(uint16x4_t *)v75.i8);
        v73.i64[0] = v76.u32[2];
        v73.i64[1] = v76.u32[3];
        uint64x2_t v77 = v73;
        v73.i64[0] = v76.u32[0];
        v73.i64[1] = v76.u32[1];
        uint64x2_t v78 = v73;
        v73.i64[0] = v72.u32[0];
        v73.i64[1] = v72.u32[1];
        uint64x2_t v79 = v73;
        uint32x4_t v80 = vmovl_u16(*(uint16x4_t *)v71.i8);
        v73.i64[0] = v80.u32[2];
        v73.i64[1] = v80.u32[3];
        uint64x2_t v81 = v73;
        uint32x4_t v82 = vmovl_high_u16(v75);
        v73.i64[0] = v82.u32[0];
        v73.i64[1] = v82.u32[1];
        uint64x2_t v83 = v73;
        v73.i64[0] = v80.u32[0];
        v73.i64[1] = v80.u32[1];
        uint64x2_t v84 = v73;
        v73.i64[0] = v82.u32[2];
        v73.i64[1] = v82.u32[3];
        int8x16_t v63 = vorrq_s8((int8x16_t)vshlq_u64(v74, (uint64x2_t)vandq_s8((int8x16_t)v59, v56)), v63);
        int8x16_t v66 = vorrq_s8((int8x16_t)vshlq_u64(v77, (uint64x2_t)vandq_s8((int8x16_t)v53, v56)), v66);
        int8x16_t v64 = vorrq_s8((int8x16_t)vshlq_u64(v78, (uint64x2_t)vandq_s8((int8x16_t)v54, v56)), v64);
        int8x16_t v61 = vorrq_s8((int8x16_t)vshlq_u64(v79, (uint64x2_t)vandq_s8((int8x16_t)v62, v56)), v61);
        int8x16_t v60 = vorrq_s8((int8x16_t)vshlq_u64(v81, (uint64x2_t)vandq_s8((int8x16_t)v65, v56)), v60);
        int8x16_t v67 = vorrq_s8((int8x16_t)vshlq_u64(v83, (uint64x2_t)vandq_s8((int8x16_t)v52, v56)), v67);
        int8x16_t v55 = vorrq_s8((int8x16_t)vshlq_u64(v84, (uint64x2_t)vandq_s8((int8x16_t)v68, v56)), v55);
        int8x16_t v69 = vorrq_s8((int8x16_t)vshlq_u64(v73, (uint64x2_t)vandq_s8((int8x16_t)v51, v56)), v69);
        int64x2_t v62 = vaddq_s64(v62, v57);
        int64x2_t v65 = vaddq_s64(v65, v57);
        int64x2_t v68 = vaddq_s64(v68, v57);
        int64x2_t v59 = vaddq_s64(v59, v57);
        int64x2_t v54 = vaddq_s64(v54, v57);
        int64x2_t v53 = vaddq_s64(v53, v57);
        int64x2_t v52 = vaddq_s64(v52, v57);
        int64x2_t v51 = vaddq_s64(v51, v57);
        v58 -= 16;
      }
      while (v58);
      int8x16_t v85 = vorrq_s8(vorrq_s8(vorrq_s8(v55, v64), vorrq_s8(v61, v67)), vorrq_s8(vorrq_s8(v60, v66), vorrq_s8(v63, v69)));
      int8x8_t v25 = vorr_s8(*(int8x8_t *)v85.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v85, v85, 8uLL));
      if (v18 == v24) {
        goto LABEL_57;
      }
      if ((v18 & 8) == 0) {
        goto LABEL_55;
      }
    }
    else
    {
      int8x8_t v25 = 0;
      unint64_t v26 = 0;
      unint64_t v24 = 0;
    }
    unint64_t v27 = v24;
    unint64_t v24 = v18 & 0xFFFFFFFFFFFFFFF8;
    int64x2_t v28 = vdupq_n_s64(v26);
    unint64_t v26 = 8 * (v18 & 0xFFFFFFFFFFFFFFF8);
    int8x16_t v29 = 0uLL;
    int8x16_t v30 = (int8x16_t)(unint64_t)v25;
    int64x2_t v31 = vaddq_s64(v28, (int64x2_t)xmmword_18162ACE0);
    int64x2_t v32 = vaddq_s64(v28, (int64x2_t)xmmword_18162AD00);
    int64x2_t v33 = vaddq_s64(v28, (int64x2_t)xmmword_18162ACD0);
    int64x2_t v34 = vaddq_s64(v28, (int64x2_t)xmmword_18162ACF0);
    uint64_t v35 = (uint8x8_t *)(v27 + a1 + 8);
    int8x16_t v36 = (int8x16_t)vdupq_n_s64(0x38uLL);
    unint64_t v37 = v27 - (v18 & 0xFFFFFFFFFFFFFFF8);
    int64x2_t v38 = vdupq_n_s64(0x40uLL);
    int8x16_t v39 = 0uLL;
    int8x16_t v40 = 0uLL;
    do
    {
      uint8x8_t v41 = *v35++;
      uint16x8_t v42 = vmovl_u8(v41);
      uint32x4_t v43 = vmovl_high_u16(v42);
      v44.i64[0] = v43.u32[2];
      v44.i64[1] = v43.u32[3];
      uint64x2_t v45 = v44;
      v44.i64[0] = v43.u32[0];
      v44.i64[1] = v43.u32[1];
      uint64x2_t v46 = v44;
      uint32x4_t v47 = vmovl_u16(*(uint16x4_t *)v42.i8);
      v44.i64[0] = v47.u32[2];
      v44.i64[1] = v47.u32[3];
      uint64x2_t v48 = v44;
      v44.i64[0] = v47.u32[0];
      v44.i64[1] = v47.u32[1];
      int8x16_t v40 = vorrq_s8((int8x16_t)vshlq_u64(v45, (uint64x2_t)vandq_s8((int8x16_t)v31, v36)), v40);
      int8x16_t v39 = vorrq_s8((int8x16_t)vshlq_u64(v46, (uint64x2_t)vandq_s8((int8x16_t)v32, v36)), v39);
      int8x16_t v29 = vorrq_s8((int8x16_t)vshlq_u64(v48, (uint64x2_t)vandq_s8((int8x16_t)v33, v36)), v29);
      int8x16_t v30 = vorrq_s8((int8x16_t)vshlq_u64(v44, (uint64x2_t)vandq_s8((int8x16_t)v34, v36)), v30);
      int64x2_t v32 = vaddq_s64(v32, v38);
      int64x2_t v33 = vaddq_s64(v33, v38);
      int64x2_t v34 = vaddq_s64(v34, v38);
      int64x2_t v31 = vaddq_s64(v31, v38);
      v37 += 8;
    }
    while (v37);
    int8x16_t v49 = vorrq_s8(vorrq_s8(v30, v39), vorrq_s8(v29, v40));
    int8x8_t v25 = vorr_s8(*(int8x8_t *)v49.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v49, v49, 8uLL));
    if (v18 == v24) {
      goto LABEL_57;
    }
    goto LABEL_55;
  }
  int8x8_t v25 = 0;
LABEL_57:
  unint64_t v89 = 0xA000000000000000;
  if (((*(void *)&v25 | v11) & 0x8080808080808080) == 0) {
    unint64_t v89 = 0xE000000000000000;
  }
  int64_t v13 = v89 | (a2 << 56) | *(void *)&v25;
LABEL_34:
  v91[3] = (uint64_t)&type metadata for String;
  v91[0] = v11;
  v91[1] = v13;
  return Mirror.init(reflecting:)(v91, a4);
}

uint64_t protocol witness for CustomReflectable.customMirror.getter in conformance StaticString@<X0>(uint64_t a1@<X8>)
{
  return StaticString.customMirror.getter(*(void *)v1, *(void *)(v1 + 8), *(unsigned char *)(v1 + 16), a1);
}

uint64_t static Strideable.< infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a3;
  uint64_t v23 = a2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, (int **)a4, a3, (uint64_t)&protocol requirements base descriptor for Strideable, associated type descriptor for Strideable.Stride);
  uint64_t v7 = *(void *)(*(void *)(swift_getAssociatedConformanceWitness(a4, v5, (uint64_t)AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Strideable, associated conformance descriptor for Strideable.Strideable.Stride: SignedNumeric)+ 8)+ 16);
  unint64_t v8 = swift_getAssociatedTypeWitness(0, (int **)v7, (uint64_t)AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, associated type descriptor for ExpressibleByIntegerLiteral.IntegerLiteralType);
  MEMORY[0x1F4188790](v8);
  uint64_t v10 = (char *)&v22 - v9;
  uint64_t v11 = swift_checkMetadataState(0, (uint64_t)AssociatedTypeWitness);
  uint64_t v12 = *(v11 - 1);
  uint64_t v13 = MEMORY[0x1F4188790](v11);
  uint64_t v15 = (char *)&v22 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v13);
  uint64_t v17 = (char *)&v22 - v16;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(a4 + 40))(v23, v5, a4);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v7, (uint64_t)v11, (uint64_t)v8, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
  (*(void (**)(uint64_t *, uint64_t, const char *, uint64_t))(AssociatedConformanceWitness + 8))(&qword_18162B0B8, 256, v8, AssociatedConformanceWitness);
  (*(void (**)(char *, uint64_t *, uint64_t))(v7 + 24))(v10, v11, v7);
  uint64_t v19 = swift_getAssociatedConformanceWitness(a4, v5, (uint64_t)v11, (uint64_t)&protocol requirements base descriptor for Strideable, associated conformance descriptor for Strideable.Strideable.Stride: Comparable);
  LOBYTE(v5) = (*(uint64_t (**)(char *, char *, uint64_t *, uint64_t))(v19 + 40))(v17, v15, v11, v19);
  unint64_t v20 = *(void (**)(char *, uint64_t *))(v12 + 8);
  v20(v15, v11);
  v20(v17, v11);
  return v5 & 1;
}

uint64_t static Strideable.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a3;
  uint64_t v23 = a2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, (int **)a4, a3, (uint64_t)&protocol requirements base descriptor for Strideable, associated type descriptor for Strideable.Stride);
  uint64_t v7 = *(void *)(*(void *)(swift_getAssociatedConformanceWitness(a4, v5, (uint64_t)AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Strideable, associated conformance descriptor for Strideable.Strideable.Stride: SignedNumeric)+ 8)+ 16);
  unint64_t v8 = swift_getAssociatedTypeWitness(0, (int **)v7, (uint64_t)AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, associated type descriptor for ExpressibleByIntegerLiteral.IntegerLiteralType);
  MEMORY[0x1F4188790](v8);
  uint64_t v10 = (char *)&v22 - v9;
  uint64_t v11 = swift_checkMetadataState(0, (uint64_t)AssociatedTypeWitness);
  uint64_t v12 = *(v11 - 1);
  uint64_t v13 = MEMORY[0x1F4188790](v11);
  uint64_t v15 = (char *)&v22 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v13);
  uint64_t v17 = (char *)&v22 - v16;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(a4 + 40))(v23, v5, a4);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v7, (uint64_t)v11, (uint64_t)v8, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
  (*(void (**)(uint64_t *, uint64_t, const char *, uint64_t))(AssociatedConformanceWitness + 8))(&qword_18162B0B8, 256, v8, AssociatedConformanceWitness);
  (*(void (**)(char *, uint64_t *, uint64_t))(v7 + 24))(v10, v11, v7);
  uint64_t v19 = swift_getAssociatedConformanceWitness(a4, v5, (uint64_t)v11, (uint64_t)&protocol requirements base descriptor for Strideable, associated conformance descriptor for Strideable.Strideable.Stride: Comparable);
  LOBYTE(v5) = (*(uint64_t (**)(char *, char *, uint64_t *))(*(void *)(v19 + 8) + 8))(v17, v15, v11);
  unint64_t v20 = *(void (**)(char *, uint64_t *))(v12 + 8);
  v20(v15, v11);
  v20(v17, v11);
  return v5 & 1;
}

unint64_t specialized static Strideable<>._step(after:from:by:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = a4 + a8;
  BOOL v9 = __CFADD__(a4, a8);
  uint64_t v10 = a5 + (a8 >> 63);
  if (__OFADD__(a5, a8 >> 63)) {
    goto LABEL_6;
  }
  if (v10 != 0x7FFFFFFFFFFFFFFFLL)
  {
    unint64_t v12 = 0;
    uint64_t v11 = v10 + v9;
    goto LABEL_11;
  }
  if (v9)
  {
LABEL_6:
    uint64_t v11 = (a8 >> 63) ^ 0x7FFFFFFFFFFFFFFFLL;
    uint64_t v8 = ~(a8 >> 63);
    unint64_t v12 = 0x8000000000000000;
  }
  else
  {
    unint64_t v12 = 0;
    uint64_t v11 = 0x7FFFFFFFFFFFFFFFLL;
  }
LABEL_11:
  *a1 = v8;
  a1[1] = v11;
  return v12;
}

unint64_t specialized static Strideable<>._step(after:from:by:)(uint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8 = 0x8000000000000000;
  if (__OFADD__(__CFADD__(a4, a8), a5) | __OFADD__(a8 >> 63, __CFADD__(a4, a8) + a5))
  {
    uint64_t v9 = ~(a8 >> 63);
  }
  else
  {
    unint64_t v8 = 0;
    uint64_t v9 = a4 + a8;
  }
  if (__OFADD__(__CFADD__(a4, a8), a5) | __OFADD__(a8 >> 63, __CFADD__(a4, a8) + a5)) {
    uint64_t v10 = (a8 >> 63) ^ 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    uint64_t v10 = (__PAIR128__(a5, a4) + a8) >> 64;
  }
  *a1 = v9;
  a1[1] = v10;
  return v8;
}

{
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;

  if (a8 < 0)
  {
    uint64_t v11 = -a8;
    if (__OFSUB__(0, a8))
    {
      __break(1u);
    }
    else if ((v11 & 0x8000000000000000) == 0)
    {
      uint64_t v9 = (__PAIR128__(a5, a4) - (unint64_t)v11) >> 64;
      unint64_t v8 = a4 + a8;
      uint64_t v10 = __PAIR128__(a5, a4) < (unint64_t)v11;
      goto LABEL_8;
    }
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000052, 0x80000001816E2990, "Swift/UInt128.swift", 19, 2, 0x96uLL, 0);
  }
  unint64_t v8 = a4 + a8;
  uint64_t v9 = __CFADD__(a4, a8) + a5;
  uint64_t v10 = __CFADD__(__CFADD__(a4, a8), a5);
LABEL_8:
  unint64_t v12 = 0x8000000000000000;
  if (!v10) {
    unint64_t v12 = 0;
  }
  uint64_t v13 = a8 >> 63;
  if (v10)
  {
    unint64_t v8 = ~v13;
    uint64_t v9 = ~v13;
  }
  *a1 = v8;
  a1[1] = v9;
  return v12;
}

_DWORD *specialized static Strideable<>._step(after:from:by:)(_DWORD *result, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6)
{
  if (a4 >= 0 != a6 < 0)
  {
    if (a6 > (uint64_t)0xFFFFFFFF7FFFFFFFLL)
    {
      if (a6 < 0x80000000)
      {
        LODWORD(v6) = a4 + a6;
        BOOL v7 = __OFADD__(a4, a6);
        BOOL v8 = !v7;
        if (v7) {
          unint64_t v9 = 0x8000000000000000;
        }
        else {
          unint64_t v9 = 0;
        }
        if (!v8) {
          LODWORD(v6) = (a6 >> 63) ^ 0x7FFFFFFF;
        }
        goto LABEL_17;
      }
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  uint64_t v6 = a6 + a4;
  if (!__OFADD__(a6, a4))
  {
    if (v6 > (uint64_t)0xFFFFFFFF7FFFFFFFLL)
    {
      if (v6 < 0x80000000)
      {
        unint64_t v9 = 0;
LABEL_17:
        *__n128 result = v6;
        return (_DWORD *)v9;
      }
LABEL_19:
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Not enough bits to represent the passed value", 45, 2, "Swift/Integers.swift", 20, 2, 0xE67uLL, 0);
    }
LABEL_18:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Not enough bits to represent a signed value", 43, 2, "Swift/Integers.swift", 20, 2, 0xE61uLL, 0);
  }
  __break(1u);
  return result;
}

_WORD *specialized static Strideable<>._step(after:from:by:)(_WORD *result, uint64_t a2, uint64_t a3, __int16 a4, uint64_t a5, uint64_t a6)
{
  if (a4 >= 0 != a6 < 0)
  {
    if (a6 > -32769)
    {
      if (a6 < 0x8000)
      {
        LODWORD(v6) = a4 + (__int16)a6;
        unint64_t v7 = 0x8000000000000000;
        if (v6 == (__int16)(a4 + a6)) {
          unint64_t v7 = 0;
        }
        else {
          LOWORD(v6) = (a6 >> 63) ^ 0x7FFF;
        }
        goto LABEL_11;
      }
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  uint64_t v6 = a6 + a4;
  if (!__OFADD__(a6, a4))
  {
    if (v6 > -32769)
    {
      if (v6 < 0x8000)
      {
        unint64_t v7 = 0;
LABEL_11:
        *__n128 result = v6;
        return (_WORD *)v7;
      }
LABEL_13:
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Not enough bits to represent the passed value", 45, 2, "Swift/Integers.swift", 20, 2, 0xE67uLL, 0);
    }
LABEL_12:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Not enough bits to represent a signed value", 43, 2, "Swift/Integers.swift", 20, 2, 0xE61uLL, 0);
  }
  __break(1u);
  return result;
}

unsigned char *specialized static Strideable<>._step(after:from:by:)(unsigned char *result, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6)
{
  if (a4 >= 0 != a6 < 0)
  {
    if (a6 > -129)
    {
      if (a6 < 128)
      {
        LODWORD(v6) = a4 + (char)a6;
        unint64_t v7 = 0x8000000000000000;
        if (v6 == (char)(a4 + a6)) {
          unint64_t v7 = 0;
        }
        else {
          LOBYTE(v6) = (a6 >> 63) ^ 0x7F;
        }
        goto LABEL_11;
      }
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  uint64_t v6 = a6 + a4;
  if (!__OFADD__(a6, a4))
  {
    if (v6 > -129)
    {
      if (v6 < 128)
      {
        unint64_t v7 = 0;
LABEL_11:
        *__n128 result = v6;
        return (unsigned char *)v7;
      }
LABEL_13:
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Not enough bits to represent the passed value", 45, 2, "Swift/Integers.swift", 20, 2, 0xE67uLL, 0);
    }
LABEL_12:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Not enough bits to represent a signed value", 43, 2, "Swift/Integers.swift", 20, 2, 0xE61uLL, 0);
  }
  __break(1u);
  return result;
}

unint64_t specialized static Strideable<>._step(after:from:by:)(uint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if ((a8 & 0x8000000000000000) == 0)
  {
    BOOL v8 = a5 == -1;
    uint64_t v9 = a4 + a8;
    uint64_t v10 = __CFADD__(a4, a8);
    if (!__CFADD__(a4, a8)) {
      BOOL v8 = 0;
    }
    goto LABEL_12;
  }
  unint64_t v11 = -a8;
  if (__OFSUB__(0, a8))
  {
    __break(1u);
LABEL_19:
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000028, 0x80000001816DFAC0, "Swift/LegacyInt128.swift", 24, 2, 0x85uLL, 0);
  }
  if ((v11 & 0x8000000000000000) != 0) {
    goto LABEL_19;
  }
  BOOL v8 = a5 == 0;
  BOOL v12 = a4 >= v11;
  uint64_t v9 = a4 + a8;
  uint64_t v10 = (uint64_t)((unint64_t)(a4 < v11) << 63) >> 63;
  if (v12) {
    BOOL v8 = 0;
  }
LABEL_12:
  uint64_t v13 = v10 + a5;
  unint64_t v14 = 0x8000000000000000;
  if (v8) {
    uint64_t v13 = ~a8 >> 63;
  }
  else {
    unint64_t v14 = 0;
  }
  if (v8) {
    uint64_t v9 = ~a8 >> 63;
  }
  *a1 = v9;
  a1[1] = v13;
  return v14;
}

unint64_t specialized static Strideable<>._step(after:from:by:)(unsigned int *a1, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5, uint64_t a6)
{
  if ((a6 & 0x8000000000000000) == 0)
  {
    if (!HIDWORD(a6))
    {
      unsigned int v6 = a4 + a6;
      BOOL v7 = __CFADD__(a4, a6);
      goto LABEL_10;
    }
LABEL_14:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Not enough bits to represent the passed value", 45, 2, "Swift/Integers.swift", 20, 2, 0xD7FuLL, 0);
  }
  unint64_t v8 = -a6;
  if (__OFSUB__(0, a6))
  {
    __break(1u);
LABEL_16:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, 2, 0xD7BuLL, 0);
  }
  if ((v8 & 0x8000000000000000) != 0) {
    goto LABEL_16;
  }
  if (HIDWORD(v8)) {
    goto LABEL_14;
  }
  unsigned int v6 = a4 + a6;
  BOOL v7 = a4 < v8;
LABEL_10:
  unint64_t v9 = 0x8000000000000000;
  if (v7) {
    unsigned int v6 = ~(a6 >> 63);
  }
  else {
    unint64_t v9 = 0;
  }
  *a1 = v6;
  return v9;
}

unint64_t specialized static Strideable<>._step(after:from:by:)(_WORD *a1, uint64_t a2, uint64_t a3, unsigned __int16 a4, uint64_t a5, uint64_t a6)
{
  if ((a6 & 0x8000000000000000) == 0)
  {
    if ((unint64_t)a6 < 0x10000)
    {
      unsigned int v6 = a4 + (unsigned __int16)a6;
      unsigned int v7 = HIWORD(v6);
      goto LABEL_8;
    }
LABEL_12:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Not enough bits to represent the passed value", 45, 2, "Swift/Integers.swift", 20, 2, 0xD7FuLL, 0);
  }
  unint64_t v8 = -a6;
  if (__OFSUB__(0, a6))
  {
    __break(1u);
LABEL_14:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, 2, 0xD7BuLL, 0);
  }
  if ((v8 & 0x8000000000000000) != 0) {
    goto LABEL_14;
  }
  if (v8 >= 0x10000) {
    goto LABEL_12;
  }
  unsigned int v6 = a4 - (unsigned __int16)v8;
  LOBYTE(v7) = (v6 & 0xFFFF0000) != 0;
LABEL_8:
  unint64_t v9 = 0x8000000000000000;
  if (v7) {
    LOWORD(v6) = ~(unsigned __int16)(a6 >> 63);
  }
  else {
    unint64_t v9 = 0;
  }
  *a1 = v6;
  return v9;
}

unint64_t specialized static Strideable<>._step(after:from:by:)(unsigned char *a1, uint64_t a2, uint64_t a3, unsigned __int8 a4, uint64_t a5, uint64_t a6)
{
  if ((a6 & 0x8000000000000000) == 0)
  {
    if ((unint64_t)a6 < 0x100)
    {
      unsigned int v6 = a4 + a6;
      unsigned int v7 = v6 >> 8;
      goto LABEL_8;
    }
LABEL_12:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Not enough bits to represent the passed value", 45, 2, "Swift/Integers.swift", 20, 2, 0xD7FuLL, 0);
  }
  unint64_t v8 = -a6;
  if (__OFSUB__(0, a6))
  {
    __break(1u);
LABEL_14:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, 2, 0xD7BuLL, 0);
  }
  if ((v8 & 0x8000000000000000) != 0) {
    goto LABEL_14;
  }
  if (v8 >= 0x100) {
    goto LABEL_12;
  }
  unsigned int v6 = a4 - v8;
  LOBYTE(v7) = (v6 & 0xFFFFFF00) != 0;
LABEL_8:
  unint64_t v9 = 0x8000000000000000;
  if (v7) {
    LOBYTE(v6) = ~(a6 >> 63);
  }
  else {
    unint64_t v9 = 0;
  }
  *a1 = v6;
  return v9;
}

unint64_t specialized static Strideable<>._step(after:from:by:)(uint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  if ((a6 & 0x8000000000000000) == 0)
  {
    uint64_t v6 = a4 + a6;
    BOOL v7 = __CFADD__(a4, a6);
    goto LABEL_8;
  }
  unint64_t v8 = -a6;
  if (__OFSUB__(0, a6))
  {
    __break(1u);
LABEL_13:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, 2, 0xD7BuLL, 0);
  }
  if ((v8 & 0x8000000000000000) != 0) {
    goto LABEL_13;
  }
  uint64_t v6 = a4 + a6;
  BOOL v7 = a4 < v8;
LABEL_8:
  unint64_t v9 = 0x8000000000000000;
  if (v7) {
    uint64_t v6 = ~a6 >> 63;
  }
  else {
    unint64_t v9 = 0;
  }
  *a1 = v6;
  return v9;
}

uint64_t static Strideable<>._step(after:from:by:)(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int **a8, uint64_t a9)
{
  uint64_t v41 = a5;
  uint64_t v42 = a6;
  uint32x4_t v47 = a8;
  uint64_t v48 = a4;
  int v46 = a3;
  uint64_t v43 = a1;
  char v11 = a3 & 1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, a8, a7, (uint64_t)&protocol requirements base descriptor for Strideable, associated type descriptor for Strideable.Stride);
  uint64_t v39 = *((void *)AssociatedTypeWitness - 1);
  int8x16_t v40 = AssociatedTypeWitness;
  uint64_t v13 = MEMORY[0x1F4188790](AssociatedTypeWitness);
  unint64_t v37 = (char *)&v37 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v13);
  int64x2_t v38 = (char *)&v37 - v15;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0, (uint64_t)&unk_1ECA01F50, a7, "index value ", 0);
  uint64_t v44 = *(TupleTypeMetadata2 - 1);
  uint64_t v17 = MEMORY[0x1F4188790](TupleTypeMetadata2);
  uint64_t v19 = (char *)&v37 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = MEMORY[0x1F4188790](v17);
  uint64_t v22 = (char *)&v37 - v21;
  uint64_t v23 = (char *)&v37 + *(int *)(v20 + 48) - v21;
  *(void *)uint64_t v22 = a2;
  v22[8] = v11;
  uint64_t v24 = *(void *)(a7 - 8);
  int8x8_t v25 = *(void (**)(char *, uint64_t, uint64_t))(v24 + 16);
  v25(v23, v48, a7);
  uint64x2_t v45 = TupleTypeMetadata2;
  unint64_t v26 = &v19[*((int *)TupleTypeMetadata2 + 12)];
  uint64_t v27 = a2;
  uint64_t v28 = a7;
  uint64_t v48 = v27;
  *(void *)uint64_t v19 = v27;
  v19[8] = v11;
  v25(v26, (uint64_t)v23, a7);
  if (v46)
  {
    (*(void (**)(char *, uint64_t))(v24 + 8))(v26, a7);
    ((void (*)(uint64_t, uint64_t))v47[6])(v42, a7);
    (*(void (**)(char *, uint64_t *))(v44 + 8))(v22, v45);
    return v48;
  }
  uint64_t v30 = (uint64_t)v47;
  (*(void (**)(char *, uint64_t *))(v44 + 8))(v22, v45);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v24 + 8))(v26, a7);
  uint64_t v29 = v48 + 1;
  if (!__OFADD__(v48, 1))
  {
    int64x2_t v32 = v37;
    uint64_t v33 = (uint64_t)v40;
    (*(void (**)(uint64_t, const char *))(a9 + 64))(v29, v40);
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v30, v28, v33, (uint64_t)&protocol requirements base descriptor for Strideable, associated conformance descriptor for Strideable.Strideable.Stride: SignedNumeric);
    uint64_t v35 = v38;
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(AssociatedConformanceWitness + 8) + 64))(v32, v42, v33);
    int8x16_t v36 = *(void (**)(char *, uint64_t))(v39 + 8);
    v36(v32, v33);
    (*(void (**)(char *, uint64_t, uint64_t))(v30 + 48))(v35, v28, v30);
    v36(v35, v33);
    return v29;
  }
  __break(1u);
  return result;
}

uint64_t static Strideable<>._step(after:from:by:)(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v37 = a8;
  uint64_t v38 = a6;
  uint64_t v33 = a5;
  int v34 = a3;
  uint64_t v36 = a1;
  uint64_t v11 = *(void *)(a7 - 8);
  char v12 = a3 & 1;
  MEMORY[0x1F4188790](a1);
  int64x2_t v32 = (char *)&v31 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0, (uint64_t)&unk_1ECA01F50, v14, "index value ", 0);
  uint64_t v35 = *(TupleTypeMetadata2 - 1);
  uint64_t v16 = MEMORY[0x1F4188790](TupleTypeMetadata2);
  uint64_t v18 = (char *)&v31 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = MEMORY[0x1F4188790](v16);
  uint64_t v21 = (char *)&v31 - v20;
  uint64_t v22 = (char *)&v31 + *(int *)(v19 + 48) - v20;
  *(void *)uint64_t v21 = a2;
  v21[8] = v12;
  uint64_t v40 = v11;
  uint64_t v23 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 16);
  v23(v22, a4, a7);
  uint64_t v24 = &v18[*((int *)TupleTypeMetadata2 + 12)];
  uint64_t v39 = a2;
  *(void *)uint64_t v18 = a2;
  v18[8] = v12;
  v23(v24, (uint64_t)v22, a7);
  if (v34)
  {
    (*(void (**)(char *, uint64_t))(v40 + 8))(v24, a7);
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v37 + 24) + 48))(v38, a7);
    (*(void (**)(char *, uint64_t *))(v35 + 8))(v21, TupleTypeMetadata2);
    return v39;
  }
  uint64_t v26 = v37;
  uint64_t v27 = v38;
  (*(void (**)(char *, uint64_t *))(v35 + 8))(v21, TupleTypeMetadata2);
  uint64_t v28 = *(uint64_t (**)(char *, uint64_t))(v40 + 8);
  uint64_t result = v28(v24, a7);
  uint64_t v25 = v39 + 1;
  if (!__OFADD__(v39, 1))
  {
    uint64_t v30 = v32;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v26 + 64))(v25, a7, v26);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v26 + 256))(v30, v27, a7, v26);
    v28(v30, a7);
    return v25;
  }
  __break(1u);
  return result;
}

uint64_t StrideToIterator._stride.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return DefaultIndices._endIndex.getter(a1, (uint64_t)&protocol requirements base descriptor for Strideable, associated type descriptor for Strideable.Stride, a2);
}

uint64_t (*StrideToIterator._current.modify())()
{
  return EnumeratedSequence._base.modify;
}

uint64_t StrideToIterator.init(_start:end:stride:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int **a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v20 = *(void *)(a4 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v20 + 16))(a6, a1, a4);
  uint64_t v13 = (int *)type metadata accessor for StrideToIterator(0, a4, (uint64_t)a5, v12);
  uint64_t v19 = *(void (**)(uint64_t, uint64_t, uint64_t))(v20 + 32);
  v19(a6 + v13[9], a2, a4);
  uint64_t v14 = a6 + v13[10];
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, a5, a4, (uint64_t)&protocol requirements base descriptor for Strideable, associated type descriptor for Strideable.Stride);
  (*(void (**)(uint64_t, uint64_t, const char *))(*((void *)AssociatedTypeWitness - 1) + 32))(v14, a3, AssociatedTypeWitness);
  uint64_t v16 = a6 + v13[11];
  *(void *)uint64_t v16 = 0;
  *(unsigned char *)(v16 + 8) = 0;
  uint64_t v17 = v16 + *((int *)swift_getTupleTypeMetadata2(0, (uint64_t)&unk_1ECA01F50, a4, "index value ", 0) + 12);

  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v19)(v17, a1, a4);
}

uint64_t StrideTo._stride.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return DefaultIndices._endIndex.getter(a1, (uint64_t)&protocol requirements base descriptor for Strideable, associated type descriptor for Strideable.Stride, a2);
}

uint64_t StrideTo.init(_start:end:stride:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int **a5@<X4>, uint64_t a6@<X8>)
{
  return StrideTo.init(_start:end:stride:)(a1, a2, a3, a4, a5, 0x15CuLL, (uint64_t (*)(void, uint64_t, int **))type metadata accessor for StrideTo, a6);
}

uint64_t StrideTo.underestimatedCount.getter(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0, (uint64_t)&unk_1ECA01F50, v2, "index value ", 0);
  MEMORY[0x1F4188790](TupleTypeMetadata2);
  uint16x8_t v75 = (uint64_t *)((char *)&v64 - v4);
  uint64_t v5 = *(int ***)(a1 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v5, v2, (uint64_t)&protocol requirements base descriptor for Strideable, associated type descriptor for Strideable.Stride);
  uint64_t v97 = (char *)*((void *)AssociatedTypeWitness - 1);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  unint64_t v94 = (char *)&v64 - v7;
  uint64_t v8 = (uint64_t)v5;
  unint64_t v99 = v5;
  unint64_t v96 = *(int ***)(*(void *)(swift_getAssociatedConformanceWitness((uint64_t)v5, v2, (uint64_t)AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Strideable, associated conformance descriptor for Strideable.Strideable.Stride: SignedNumeric)+ 8)+ 16);
  uint64_t v95 = swift_getAssociatedTypeWitness(0, v96, (uint64_t)AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, associated type descriptor for ExpressibleByIntegerLiteral.IntegerLiteralType);
  uint64_t v9 = MEMORY[0x1F4188790](v95);
  unint64_t v93 = (char *)&v64 - v10;
  uint64_t v100 = *(void *)(v2 - 8);
  uint64_t v11 = MEMORY[0x1F4188790](v9);
  uint64x2_t v74 = (char *)&v64 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11);
  uint64_t v14 = (char *)&v64 - v13;
  uint64_t v92 = type metadata accessor for Optional(0, v2, v15, v16);
  uint64x2_t v79 = (void (**)(char *, Class *))*(v92 - 1);
  uint64_t v17 = MEMORY[0x1F4188790](v92);
  uint64_t v19 = (char *)&v64 - v18;
  uint64_t v90 = a1;
  uint64_t v20 = *(void *)(a1 - 8);
  MEMORY[0x1F4188790](v17);
  uint64_t v22 = (char *)&v64 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = (int *)type metadata accessor for StrideToIterator(0, v2, v8, v23);
  uint64_t v65 = *((void *)v24 - 1);
  MEMORY[0x1F4188790](v24);
  uint64_t v26 = (char *)&v64 - v25;
  (*(void (**)(char *, char *, uint64_t))(v20 + 16))(v22, v98, a1);
  uint64_t v27 = v14;
  uint64x2_t v78 = &v26[v24[11]];
  uint32x4_t v76 = TupleTypeMetadata2;
  uint64_t v98 = &v78[*((int *)TupleTypeMetadata2 + 12)];
  uint64_t v29 = v100 + 32;
  uint64_t v28 = *(void (**)(void))(v100 + 32);
  v28();
  uint64_t v91 = &v26[v24[9]];
  uint64_t v72 = v29;
  uint16x8_t v71 = v28;
  v28();
  int8x16_t v66 = v24;
  uint64_t v30 = &v26[v24[10]];
  int64x2_t v32 = v97 + 32;
  uint64_t v31 = (void (*)(void))*((void *)v97 + 4);
  uint64_t v97 = v30;
  v31();
  uint64_t v33 = v32;
  uint64_t v35 = v100 + 16;
  int v34 = *(void (**)(char *, char *, uint64_t))(v100 + 16);
  uint64x2_t v77 = v26;
  v34(v26, v98, v2);
  uint64_t v36 = v78;
  *(void *)uint64x2_t v78 = 0;
  v36[8] = 0;
  uint64_t v37 = v34;
  uint64_t v38 = v96;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness((uint64_t)v96, (uint64_t)AssociatedTypeWitness, (uint64_t)v95, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
  unint64_t v89 = *(void (**)(uint64_t *, uint64_t))(AssociatedConformanceWitness + 8);
  uint64_t v90 = AssociatedConformanceWitness + 8;
  unint64_t v87 = v38[3];
  unsigned int v88 = v38 + 3;
  uint64_t v40 = (uint64_t)v99;
  uint64_t v41 = 0;
  uint64_t v86 = swift_getAssociatedConformanceWitness((uint64_t)v99, v2, (uint64_t)AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Strideable, associated conformance descriptor for Strideable.Strideable.Stride: Comparable);
  uint64x2_t v84 = *(uint64_t (**)(char *, char *, const char *, uint64_t))(v86 + 40);
  uint64_t v85 = v86 + 40;
  uint64x2_t v83 = (void (**)(char *, const char *))(v33 - 24);
  uint64_t v68 = v40 + 56;
  uint32x4_t v82 = (void (**)(char *, uint64_t))(v35 - 8);
  int8x16_t v67 = (void (**)(char *, char *, uint64_t))(v35 + 24);
  uint64_t v100 = v35;
  uint32x4_t v80 = (uint64_t (**)(char *, uint64_t, uint64_t))(v35 + 32);
  uint64x2_t v81 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v35 + 40);
  ++v79;
  uint64x2_t v73 = AssociatedTypeWitness;
  uint8x16_t v70 = v19;
  uint64_t v69 = AssociatedConformanceWitness;
  do
  {
    v37(v27, v98, v2);
    uint64_t v42 = v93;
    v89(&qword_18162B0B8, 256);
    uint64_t v43 = v94;
    ((void (*)(char *, const char *, int **))v87)(v42, AssociatedTypeWitness, v96);
    char v44 = v84(v97, v43, AssociatedTypeWitness, v86);
    (*v83)(v43, AssociatedTypeWitness);
    uint64x2_t v45 = v99[1];
    if (v44)
    {
      if (((*((uint64_t (**)(char *, char *, uint64_t))v45 + 4))(v27, v91, v2) & 1) == 0) {
        goto LABEL_4;
      }
    }
    else if (((*((uint64_t (**)(char *, char *, uint64_t))v45 + 3))(v27, v91, v2) & 1) == 0)
    {
LABEL_4:
      int v46 = v75;
      uint32x4_t v47 = (char *)v75 + *((int *)v76 + 12);
      uint64_t v48 = v78;
      uint64_t v49 = *(void *)v78;
      uint64_t v50 = v78[8];
      void *v75 = *(void *)v78;
      *((unsigned char *)v46 + 8) = v50;
      int64x2_t v51 = v98;
      v37(v47, v98, v2);
      int64x2_t v52 = v37;
      int64x2_t v53 = v27;
      int64x2_t v54 = v74;
      uint64_t v55 = ((uint64_t (*)(char *, uint64_t, uint64_t, char *, char *, char *, uint64_t))v99[7])(v74, v49, v50, v47, v77, v97, v2);
      LOBYTE(v5_assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0, 0xE000000000000000, "Swift/SmallString.swift", 23, 2, 0xD7uLL, 0) = v56;
      (*v82)(v47, v2);
      *(void *)uint64_t v48 = v55;
      v48[8] = v50 & 1;
      int64x2_t v57 = v51;
      unint64_t v58 = v70;
      AssociatedTypeWitness = v73;
      int64x2_t v59 = v54;
      uint64_t v27 = v53;
      uint64_t v37 = v52;
      (*v67)(v57, v59, v2);
      uint64_t v19 = v58;
      ((void (*)(char *, char *, uint64_t))v71)(v58, v27, v2);
      uint64_t v60 = 0;
      goto LABEL_7;
    }
    (*v82)(v27, v2);
    uint64_t v60 = 1;
LABEL_7:
    (*v81)(v19, v60, 1, v2);
    int v61 = (*v80)(v19, 1, v2);
    (*v79)(v19, v92);
    if (v61 == 1) {
      goto LABEL_11;
    }
  }
  while (!__OFADD__(v41++, 1));
  __break(1u);
LABEL_11:
  (*(void (**)(char *, int *))(v65 + 8))(v77, v66);
  return v41;
}

uint64_t StrideTo._customContainsEquatableElement(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 16);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v47 = a1;
  uint64_t v48 = v3;
  uint64_t v4 = MEMORY[0x1F4188790](a1);
  int v46 = (char *)&v42 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = MEMORY[0x1F4188790](v4);
  uint64x2_t v45 = (char *)&v42 - v7;
  uint64_t v9 = v8 - 8;
  uint64_t v49 = *(void *)(v8 - 8);
  uint64_t v50 = v8;
  uint64_t v10 = MEMORY[0x1F4188790](v6);
  char v44 = (char *)&v42 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10);
  uint64_t v43 = (char *)&v42 - v12;
  uint64_t v13 = *(void *)(v9 + 32);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (int **)v13, v2, (uint64_t)&protocol requirements base descriptor for Strideable, associated type descriptor for Strideable.Stride);
  uint64_t v15 = *((void *)AssociatedTypeWitness - 1);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v17 = (char *)&v42 - v16;
  uint64_t v18 = *(void *)(*(void *)(swift_getAssociatedConformanceWitness(v13, v2, (uint64_t)AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Strideable, associated conformance descriptor for Strideable.Strideable.Stride: SignedNumeric)+ 8)+ 16);
  uint64_t v19 = swift_getAssociatedTypeWitness(0, (int **)v18, (uint64_t)AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, associated type descriptor for ExpressibleByIntegerLiteral.IntegerLiteralType);
  MEMORY[0x1F4188790](v19);
  uint64_t v21 = (char *)&v42 - v20;
  uint64_t v22 = v51 + *(int *)(v9 + 48);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v18, (uint64_t)AssociatedTypeWitness, (uint64_t)v19, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
  (*(void (**)(uint64_t *, uint64_t, const char *, uint64_t))(AssociatedConformanceWitness + 8))(&qword_18162B0B8, 256, v19, AssociatedConformanceWitness);
  (*(void (**)(char *, const char *, uint64_t))(v18 + 24))(v21, AssociatedTypeWitness, v18);
  uint64_t v24 = swift_getAssociatedConformanceWitness(v13, v2, (uint64_t)AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Strideable, associated conformance descriptor for Strideable.Strideable.Stride: Comparable);
  LOBYTE(v22) = (*(uint64_t (**)(uint64_t, char *, const char *, uint64_t))(v24 + 16))(v22, v17, AssociatedTypeWitness, v24);
  (*(void (**)(char *, const char *))(v15 + 8))(v17, AssociatedTypeWitness);
  if (v22)
  {
    uint64_t v25 = v50;
    uint64_t v26 = v51;
    uint64_t v27 = *(void *)(v13 + 8);
    uint64_t v28 = v47;
    char v29 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v27 + 24))(v47, v51 + *(int *)(v50 + 36), v2, v27);
    uint64_t v30 = v49;
    uint64_t v31 = v43;
    (*(void (**)(char *, uint64_t, uint64_t))(v49 + 16))(v43, v26, v25);
    uint64_t v32 = v48;
    uint64_t v33 = v45;
    (*(void (**)(char *, uint64_t, uint64_t))(v48 + 16))(v45, v28, v2);
    if ((v29 & 1) == 0)
    {
      char v34 = (*(uint64_t (**)(char *, char *, uint64_t, uint64_t))(v27 + 16))(v31, v33, v2, v27);
      goto LABEL_7;
    }
LABEL_5:
    (*(void (**)(char *, uint64_t))(v32 + 8))(v33, v2);
    (*(void (**)(char *, uint64_t))(v30 + 8))(v31, v25);
    return 0;
  }
  uint64_t v35 = *(void *)(v13 + 8);
  uint64_t v36 = v47;
  uint64_t v37 = v51;
  char v38 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v35 + 16))(v47, v51, v2, v35);
  uint64_t v30 = v49;
  uint64_t v31 = v44;
  uint64_t v39 = v37;
  uint64_t v25 = v50;
  (*(void (**)(char *, uint64_t, uint64_t))(v49 + 16))(v44, v39, v50);
  uint64_t v32 = v48;
  uint64_t v33 = v46;
  (*(void (**)(char *, uint64_t, uint64_t))(v48 + 16))(v46, v36, v2);
  if (v38) {
    goto LABEL_5;
  }
  char v34 = (*(uint64_t (**)(char *, char *, uint64_t, uint64_t))(v35 + 24))(&v31[*(int *)(v25 + 36)], v33, v2, v35);
LABEL_7:
  char v41 = v34;
  (*(void (**)(char *, uint64_t))(v32 + 8))(v33, v2);
  (*(void (**)(char *, uint64_t))(v30 + 8))(v31, v25);
  if (v41) {
    return 0;
  }
  else {
    return 2;
  }
}

uint64_t StrideTo.customMirror.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return StrideTo.customMirror.getter(a1, 28532, 0xE200000000000000, a2);
}

uint64_t StrideThroughIterator._stride.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return DefaultIndices._endIndex.getter(a1, (uint64_t)&protocol requirements base descriptor for Strideable, associated type descriptor for Strideable.Stride, a2);
}

uint64_t StrideToIterator._current.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(a2 + 16);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0, (uint64_t)&unk_1ECA01F50, v5, "index value ", 0);
  uint64_t v7 = MEMORY[0x1F4188790](TupleTypeMetadata2 - 1);
  uint64_t v9 = (char *)(v2 + *(int *)(a2 + 44));
  uint64_t v10 = *(int *)(v7 + 56);
  uint64_t v11 = (char *)&v15 + v10 - v8;
  uint64_t v12 = *(void *)v9;
  uint64_t v13 = *(void *)(v5 - 8);
  (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v11, &v9[v10], v5);
  (*(void (**)(uint64_t, char *, uint64_t))(v13 + 32))(a1, v11, v5);
  return v12;
}

uint64_t StrideToIterator._current.setter(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  v21[0] = a4;
  uint64_t v7 = *(void *)(a4 + 16);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0, (uint64_t)&unk_1ECA01F50, v7, "index value ", 0);
  uint64_t v9 = TupleTypeMetadata2 - 1;
  uint64_t v10 = MEMORY[0x1F4188790](TupleTypeMetadata2);
  uint64_t v12 = (char *)v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10);
  uint64_t v14 = (char *)v21 - v13;
  uint64_t v15 = (char *)v21 + *((int *)v9 + 14) - v13;
  *(void *)uint64_t v14 = a1;
  a2 &= 1u;
  v14[8] = a2;
  uint64_t v16 = *(void *)(v7 - 8);
  uint64_t v17 = *(void (**)(char *, uint64_t, uint64_t))(v16 + 32);
  v17(v15, a3, v7);
  uint64_t v18 = &v12[*((int *)v9 + 14)];
  *(void *)uint64_t v12 = a1;
  v12[8] = a2;
  v17(v18, (uint64_t)v15, v7);
  uint64_t v19 = v21[1] + *(int *)(v21[0] + 44);
  *(void *)uint64_t v19 = a1;
  *(unsigned char *)(v19 + 8) = a2;
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v16 + 40))(v19 + *((int *)v9 + 14), v18, v7);
}

uint64_t (*StrideThroughIterator._current.modify())()
{
  return EnumeratedSequence._base.modify;
}

uint64_t StrideThroughIterator._didReturnEnd.getter(uint64_t a1)
{
  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 48));
}

uint64_t StrideThroughIterator._didReturnEnd.setter(uint64_t result, uint64_t a2)
{
  *(unsigned char *)(v2 + *(int *)(a2 + 48)) = result;
  return result;
}

uint64_t (*StrideThroughIterator._didReturnEnd.modify())()
{
  return EnumeratedSequence._base.modify;
}

uint64_t StrideThroughIterator.init(_start:end:stride:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int **a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v12 = (int *)type metadata accessor for StrideThroughIterator(0, a4, (uint64_t)a5, a4);
  *(unsigned char *)(a6 + v12[12]) = 0;
  uint64_t v19 = *(void *)(a4 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v19 + 16))(a6, a1, a4);
  uint64_t v18 = *(void (**)(uint64_t, uint64_t, uint64_t))(v19 + 32);
  v18(a6 + v12[9], a2, a4);
  uint64_t v13 = a6 + v12[10];
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, a5, a4, (uint64_t)&protocol requirements base descriptor for Strideable, associated type descriptor for Strideable.Stride);
  (*(void (**)(uint64_t, uint64_t, const char *))(*((void *)AssociatedTypeWitness - 1) + 32))(v13, a3, AssociatedTypeWitness);
  uint64_t v15 = a6 + v12[11];
  *(void *)uint64_t v15 = 0;
  *(unsigned char *)(v15 + 8) = 0;
  uint64_t v16 = v15 + *((int *)swift_getTupleTypeMetadata2(0, (uint64_t)&unk_1ECA01F50, a4, "index value ", 0) + 12);

  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v18)(v16, a1, a4);
}

uint64_t StrideThroughIterator.next()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v60 = a2;
  uint64_t v4 = *(void *)(a1 + 16);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0, (uint64_t)&unk_1ECA01F50, v4, "index value ", 0);
  MEMORY[0x1F4188790](TupleTypeMetadata2);
  char v56 = (void *)((char *)v52 - v7);
  int64x2_t v62 = *(int ***)(a1 + 24);
  uint64_t v8 = v62;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v62, v4, (uint64_t)&protocol requirements base descriptor for Strideable, associated type descriptor for Strideable.Stride);
  uint64_t v64 = *((void *)AssociatedTypeWitness - 1);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  int8x16_t v63 = (char *)v52 - v10;
  uint64_t v11 = *(void *)(*(void *)(swift_getAssociatedConformanceWitness((uint64_t)v8, v4, (uint64_t)AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Strideable, associated conformance descriptor for Strideable.Strideable.Stride: SignedNumeric)+ 8)+ 16);
  uint64_t v12 = (uint64_t)swift_getAssociatedTypeWitness(0, (int **)v11, (uint64_t)AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, associated type descriptor for ExpressibleByIntegerLiteral.IntegerLiteralType);
  uint64_t v13 = MEMORY[0x1F4188790](v12);
  uint64_t v15 = (char *)v52 - v14;
  uint64_t v16 = *(void *)(v4 - 8);
  uint64_t v17 = MEMORY[0x1F4188790](v13);
  uint64_t v55 = (char *)v52 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v17);
  uint64_t v20 = (char *)v52 - v19;
  uint64_t v61 = a1;
  uint64_t v21 = (uint64_t *)(v3 + *(int *)(a1 + 44));
  int64x2_t v57 = TupleTypeMetadata2;
  unint64_t v58 = v21;
  uint64_t v22 = (uint64_t)v21 + *((int *)TupleTypeMetadata2 + 12);
  uint64_t v59 = v16;
  uint64_t v23 = *(void (**)(char *))(v16 + 16);
  uint64_t v54 = v22;
  v52[0] = v23;
  v52[1] = v16 + 16;
  v23((char *)v52 - v19);
  uint64_t v24 = v3 + *(int *)(a1 + 40);
  uint64_t v25 = v3;
  uint64_t v26 = v62;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v11, (uint64_t)AssociatedTypeWitness, v12, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
  (*(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(AssociatedConformanceWitness + 8))(&qword_18162B0B8, 256, v12, AssociatedConformanceWitness);
  uint64_t v28 = v63;
  char v29 = v15;
  uint64_t v30 = v61;
  (*(void (**)(char *, const char *, uint64_t))(v11 + 24))(v29, AssociatedTypeWitness, v11);
  uint64_t v31 = swift_getAssociatedConformanceWitness((uint64_t)v26, v4, (uint64_t)AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Strideable, associated conformance descriptor for Strideable.Strideable.Stride: Comparable);
  uint64_t v32 = *(uint64_t (**)(uint64_t, char *, const char *, uint64_t))(v31 + 40);
  uint64_t v53 = v24;
  LOBYTE(v12) = v32(v24, v28, AssociatedTypeWitness, v31);
  (*(void (**)(char *, const char *))(v64 + 8))(v28, AssociatedTypeWitness);
  uint64_t v33 = v25;
  uint64_t v34 = v25 + *(int *)(v30 + 36);
  uint64_t v35 = v26[1];
  if (v12)
  {
    if (((*((uint64_t (**)(char *, uint64_t, uint64_t, int *))v35 + 4))(v20, v34, v4, v26[1]) & 1) == 0)
    {
LABEL_3:
      uint64_t v36 = v56;
      uint64_t v37 = (char *)v56 + *((int *)v57 + 12);
      char v38 = v58;
      uint64_t v39 = *v58;
      uint64_t v40 = *((unsigned __int8 *)v58 + 8);
      *char v56 = *v58;
      *((unsigned char *)v36 + 8) = v40;
      uint64_t v41 = v54;
      ((void (*)(char *, uint64_t, uint64_t))v52[0])(v37, v54, v4);
      uint64_t v42 = v26;
      uint64_t v43 = v26[7];
      char v44 = v55;
      uint64_t v45 = ((uint64_t (*)(char *, uint64_t, uint64_t, char *, uint64_t, uint64_t, uint64_t, int **))v43)(v55, v39, v40, v37, v33, v53, v4, v42);
      LOBYTE(v4_assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0, 0xE000000000000000, "Swift/SmallString.swift", 23, 2, 0xD7uLL, 0) = v46;
      uint64_t v47 = v59;
      (*(void (**)(char *, uint64_t))(v59 + 8))(v37, v4);
      uint64_t *v38 = v45;
      *((unsigned char *)v38 + 8) = v40 & 1;
      (*(void (**)(uint64_t, char *, uint64_t))(v47 + 40))(v41, v44, v4);
      goto LABEL_4;
    }
  }
  else if (((*((uint64_t (**)(char *, uint64_t, uint64_t, int *))v35 + 3))(v20, v34, v4, v26[1]) & 1) == 0)
  {
    goto LABEL_3;
  }
  if ((*(uint64_t (**)(char *, uint64_t, uint64_t))(*((void *)v35 + 1) + 8))(v20, v25 + *(int *)(v30 + 36), v4) & 1) == 0|| (uint64_t v50 = *(int *)(v30 + 48), (*(unsigned char *)(v25 + v50))|| (v58[1] & 1) == 0 && *v58 == 0x8000000000000000)
  {
    uint64_t v47 = v59;
    (*(void (**)(char *, uint64_t))(v59 + 8))(v20, v4);
    uint64_t v49 = 1;
    uint64_t v48 = v60;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v47 + 56))(v48, v49, 1, v4);
  }
  *(unsigned char *)(v25 + v5_assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0, 0xE000000000000000, "Swift/SmallString.swift", 23, 2, 0xD7uLL, 0) = 1;
  uint64_t v47 = v59;
LABEL_4:
  uint64_t v48 = v60;
  (*(void (**)(uint64_t, char *, uint64_t))(v47 + 32))(v60, v20, v4);
  uint64_t v49 = 0;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v47 + 56))(v48, v49, 1, v4);
}

uint64_t ClosedRange.upperBound.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8) + 16))(a2, v2 + *(int *)(a1 + 36));
}

uint64_t StrideThrough._stride.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return DefaultIndices._endIndex.getter(a1, (uint64_t)&protocol requirements base descriptor for Strideable, associated type descriptor for Strideable.Stride, a2);
}

uint64_t DefaultIndices._endIndex.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _DWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6 = v4 + *(int *)(a1 + 40);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, *(int ***)(a1 + 24), *(void *)(a1 + 16), a2, a3);
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, const char *))(*((void *)AssociatedTypeWitness - 1) + 16);

  return v8(a4, v6, AssociatedTypeWitness);
}

uint64_t StrideThrough.init(_start:end:stride:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int **a5@<X4>, uint64_t a6@<X8>)
{
  return StrideTo.init(_start:end:stride:)(a1, a2, a3, a4, a5, 0x237uLL, (uint64_t (*)(void, uint64_t, int **))type metadata accessor for StrideThrough, a6);
}

uint64_t StrideTo.init(_start:end:stride:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int **a5@<X4>, unint64_t a6@<X5>, uint64_t (*a7)(void, uint64_t, int **)@<X6>, uint64_t a8@<X8>)
{
  uint64_t v31 = a7;
  uint64_t v32 = a2;
  unint64_t v29 = a6;
  uint64_t v30 = a1;
  uint64_t v33 = a8;
  uint64_t v34 = a3;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, a5, a4, (uint64_t)&protocol requirements base descriptor for Strideable, associated type descriptor for Strideable.Stride);
  uint64_t v11 = *(void *)(*(void *)(swift_getAssociatedConformanceWitness((uint64_t)a5, a4, (uint64_t)AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Strideable, associated conformance descriptor for Strideable.Strideable.Stride: SignedNumeric)+ 8)+ 16);
  uint64_t v12 = swift_getAssociatedTypeWitness(0, (int **)v11, (uint64_t)AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, associated type descriptor for ExpressibleByIntegerLiteral.IntegerLiteralType);
  MEMORY[0x1F4188790](v12);
  uint64_t v14 = (char *)&v29 - v13;
  uint64_t v15 = swift_checkMetadataState(0, (uint64_t)AssociatedTypeWitness);
  uint64_t v16 = *(v15 - 1);
  uint64_t v17 = MEMORY[0x1F4188790](v15);
  uint64_t v19 = (char *)&v29 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v17);
  uint64_t v21 = (char *)&v29 - v20;
  (*(void (**)(char *, uint64_t, uint64_t *))(v16 + 16))((char *)&v29 - v20, v34, v15);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v11, (uint64_t)v15, (uint64_t)v12, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
  (*(void (**)(void *, uint64_t, const char *, uint64_t))(AssociatedConformanceWitness + 8))(&unk_18162B0B8, 256, v12, AssociatedConformanceWitness);
  (*(void (**)(char *, uint64_t *, uint64_t))(v11 + 24))(v14, v15, v11);
  uint64_t v23 = swift_getAssociatedConformanceWitness((uint64_t)a5, a4, (uint64_t)v15, (uint64_t)&protocol requirements base descriptor for Strideable, associated conformance descriptor for Strideable.Strideable.Stride: Comparable);
  LOBYTE(v14) = (*(uint64_t (**)(char *, char *, uint64_t *))(*(void *)(v23 + 8) + 8))(v21, v19, v15);
  uint64_t v24 = *(void (**)(char *, uint64_t *))(v16 + 8);
  v24(v19, v15);
  if (v14) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Stride size must not be zero", 28, 2, "Swift/Stride.swift", 18, 2, v29, 0);
  }
  v24(v21, v15);
  uint64_t v25 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a4 - 8) + 32);
  uint64_t v26 = v33;
  v25(v33, v30, a4);
  uint64_t v27 = v31(0, a4, a5);
  v25(v26 + *(int *)(v27 + 36), v32, a4);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *))(v16 + 32))(v26 + *(int *)(v27 + 40), v34, v15);
}

uint64_t StrideThrough.makeIterator()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v4 = v3;
  uint64_t v7 = *(void *)(a1 + 16);
  uint64_t v8 = *(int ***)(a1 + 24);
  uint64_t v9 = (int *)type metadata accessor for StrideThroughIterator(0, v7, (uint64_t)v8, a2);
  uint64_t v10 = a3 + v9[11];
  uint64_t v17 = v10 + *((int *)swift_getTupleTypeMetadata2(0, (uint64_t)&unk_1ECA01F50, v7, "index value ", 0) + 12);
  uint64_t v11 = *(void *)(v7 - 8);
  uint64_t v12 = *(void (**)(void))(v11 + 32);
  v12();
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(a3 + v9[9], v4 + *(int *)(a1 + 36), v7);
  uint64_t v13 = v4 + *(int *)(a1 + 40);
  uint64_t v14 = a3 + v9[10];
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v8, v7, (uint64_t)&protocol requirements base descriptor for Strideable, associated type descriptor for Strideable.Stride);
  (*(void (**)(uint64_t, uint64_t, const char *))(*((void *)AssociatedTypeWitness - 1) + 32))(v14, v13, AssociatedTypeWitness);
  *(unsigned char *)(a3 + v9[12]) = 0;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 16))(a3, v17, v7);
  *(void *)uint64_t v10 = 0;
  *(unsigned char *)(v10 + 8) = 0;
  return result;
}

uint64_t StrideThrough.underestimatedCount.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v7 = *(void *)(a1 + 16);
  uint64_t v8 = type metadata accessor for Optional(0, v7, a3, a4);
  uint64_t v35 = (uint64_t)*(v8 - 1);
  uint64_t v9 = MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)&v30 - v10;
  uint64_t v12 = *(void *)(a1 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v14 = (char *)&v30 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v34 = *(int ***)(a1 + 24);
  uint64_t v16 = (int *)type metadata accessor for StrideThroughIterator(0, v7, (uint64_t)v34, v15);
  uint64_t v31 = *((void *)v16 - 1);
  MEMORY[0x1F4188790](v16);
  uint64_t v18 = (char *)&v30 - v17;
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, v5, a1);
  uint64_t v33 = &v18[v16[11]];
  uint64_t v19 = v33;
  uint64_t v32 = &v19[*((int *)swift_getTupleTypeMetadata2(0, (uint64_t)&unk_1ECA01F50, v7, "index value ", 0) + 12)];
  uint64_t v20 = *(void *)(v7 - 8);
  uint64_t v21 = *(void (**)(void))(v20 + 32);
  v21();
  ((void (*)(char *, char *, uint64_t))v21)(&v18[v16[9]], &v14[*(int *)(a1 + 36)], v7);
  uint64_t v22 = &v14[*(int *)(a1 + 40)];
  uint64_t v23 = &v18[v16[10]];
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v34, v7, (uint64_t)&protocol requirements base descriptor for Strideable, associated type descriptor for Strideable.Stride);
  (*(void (**)(char *, char *, const char *))(*((void *)AssociatedTypeWitness - 1) + 32))(v23, v22, AssociatedTypeWitness);
  v18[v16[12]] = 0;
  (*(void (**)(char *, char *, uint64_t))(v20 + 16))(v18, v32, v7);
  uint64_t v25 = 0;
  uint64_t v26 = v33;
  *(void *)uint64_t v33 = 0;
  v26[8] = 0;
  uint64_t v27 = (void (**)(char *, Class *))(v35 + 8);
  while (1)
  {
    StrideThroughIterator.next()((uint64_t)v16, (uint64_t)v11);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v11, 1, v7) == 1) {
      break;
    }
    (*v27)(v11, v8);
    if (__OFADD__(v25++, 1))
    {
      __break(1u);
      break;
    }
  }
  (*(void (**)(char *, int *))(v31 + 8))(v18, v16);
  (*v27)(v11, v8);
  return v25;
}

uint64_t StrideThrough._customContainsEquatableElement(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 16);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v48 = a1;
  uint64_t v49 = v3;
  uint64_t v4 = MEMORY[0x1F4188790](a1);
  uint64_t v45 = (char *)&v43 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = MEMORY[0x1F4188790](v4);
  char v44 = (char *)&v43 - v7;
  uint64_t v9 = v8 - 8;
  uint64_t v50 = *(void *)(v8 - 8);
  uint64_t v51 = v8;
  uint64_t v10 = MEMORY[0x1F4188790](v6);
  uint64_t v47 = (char *)&v43 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10);
  char v46 = (char *)&v43 - v12;
  uint64_t v13 = *(void *)(v9 + 32);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (int **)v13, v2, (uint64_t)&protocol requirements base descriptor for Strideable, associated type descriptor for Strideable.Stride);
  uint64_t v15 = *((void *)AssociatedTypeWitness - 1);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v17 = (char *)&v43 - v16;
  uint64_t v18 = *(void *)(*(void *)(swift_getAssociatedConformanceWitness(v13, v2, (uint64_t)AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Strideable, associated conformance descriptor for Strideable.Strideable.Stride: SignedNumeric)+ 8)+ 16);
  uint64_t v19 = swift_getAssociatedTypeWitness(0, (int **)v18, (uint64_t)AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, associated type descriptor for ExpressibleByIntegerLiteral.IntegerLiteralType);
  MEMORY[0x1F4188790](v19);
  uint64_t v21 = (char *)&v43 - v20;
  uint64_t v22 = v52 + *(int *)(v9 + 48);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v18, (uint64_t)AssociatedTypeWitness, (uint64_t)v19, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
  (*(void (**)(uint64_t *, uint64_t, const char *, uint64_t))(AssociatedConformanceWitness + 8))(&qword_18162B0B8, 256, v19, AssociatedConformanceWitness);
  (*(void (**)(char *, const char *, uint64_t))(v18 + 24))(v21, AssociatedTypeWitness, v18);
  uint64_t v24 = swift_getAssociatedConformanceWitness(v13, v2, (uint64_t)AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Strideable, associated conformance descriptor for Strideable.Strideable.Stride: Comparable);
  LOBYTE(v22) = (*(uint64_t (**)(uint64_t, char *, const char *, uint64_t))(v24 + 16))(v22, v17, AssociatedTypeWitness, v24);
  (*(void (**)(char *, const char *))(v15 + 8))(v17, AssociatedTypeWitness);
  if (v22)
  {
    uint64_t v25 = v51;
    uint64_t v26 = v52;
    uint64_t v27 = *(void *)(v13 + 8);
    uint64_t v28 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v27 + 16);
    uint64_t v29 = v48;
    char v30 = v28(v48, v52 + *(int *)(v51 + 36), v2, v27);
    uint64_t v31 = v50;
    (*(void (**)(char *, uint64_t, uint64_t))(v50 + 16))(v46, v26, v25);
    uint64_t v32 = v49;
    uint64_t v33 = v44;
    (*(void (**)(char *, uint64_t, uint64_t))(v49 + 16))(v44, v29, v2);
    if (v30)
    {
      (*(void (**)(char *, uint64_t))(v32 + 8))(v33, v2);
      (*(void (**)(char *, uint64_t))(v31 + 8))(v46, v25);
      return 0;
    }
    uint64_t v39 = v46;
    uint64_t v40 = v46;
  }
  else
  {
    uint64_t v27 = *(void *)(v13 + 8);
    uint64_t v28 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v27 + 16);
    uint64_t v34 = v48;
    uint64_t v35 = v52;
    char v36 = v28(v48, v52, v2, v27);
    uint64_t v31 = v50;
    uint64_t v37 = v35;
    uint64_t v25 = v51;
    (*(void (**)(char *, uint64_t, uint64_t))(v50 + 16))(v47, v37, v51);
    uint64_t v32 = v49;
    uint64_t v33 = v45;
    (*(void (**)(char *, uint64_t, uint64_t))(v49 + 16))(v45, v34, v2);
    if (v36)
    {
      (*(void (**)(char *, uint64_t))(v32 + 8))(v33, v2);
      (*(void (**)(char *, uint64_t))(v31 + 8))(v47, v25);
      return 0;
    }
    uint64_t v39 = v47;
    uint64_t v40 = &v47[*(int *)(v25 + 36)];
  }
  uint64_t v41 = v33;
  char v42 = v28((uint64_t)v40, (uint64_t)v33, v2, v27);
  (*(void (**)(char *, uint64_t))(v32 + 8))(v41, v2);
  (*(void (**)(char *, uint64_t))(v31 + 8))(v39, v25);
  if (v42) {
    return 0;
  }
  else {
    return 2;
  }
}

uint64_t StrideThrough.customMirror.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return StrideTo.customMirror.getter(a1, 0x6867756F726874, 0xE700000000000000, a2);
}

uint64_t StrideTo.customMirror.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v39 = a3;
  uint64_t v6 = v4;
  uint64_t v9 = *(void *)(a1 - 8);
  uint64_t v10 = MEMORY[0x1F4188790](a1);
  uint64_t v40 = (unint64_t *)((char *)&v38 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1F4188790](v10);
  uint64_t v13 = (char *)&v38 - v12;
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))((char *)&v38 - v12, v6, a1);
  uint64_t v14 = (unint64_t *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  uint64_t v15 = swift_allocObject(v14, 0xB0uLL, 7uLL);
  *((_OWORD *)v15 + 1) = xmmword_18162AE00;
  void v15[4] = 1836020326;
  v15[5] = 0xE400000000000000;
  uint64_t v16 = *(void *)(a1 + 16);
  v15[9] = v16;
  boxed_opaque_existential_0Tm = __swift_allocate_boxed_opaque_existential_0Tm(v15 + 6);
  uint64_t v18 = *(void (**)(void *, uint64_t, uint64_t))(*(void *)(v16 - 8) + 16);
  v18(boxed_opaque_existential_0Tm, v6, v16);
  uint64_t v19 = v39;
  v15[10] = a2;
  v15[11] = v19;
  uint64_t v20 = v6 + *(int *)(a1 + 36);
  v15[15] = v16;
  uint64_t v21 = __swift_allocate_boxed_opaque_existential_0Tm(v15 + 12);
  v18(v21, v20, v16);
  unsigned char v15[16] = 31074;
  v15[17] = 0xE200000000000000;
  uint64_t v22 = v6 + *(int *)(a1 + 40);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, *(int ***)(a1 + 24), v16, (uint64_t)&protocol requirements base descriptor for Strideable, associated type descriptor for Strideable.Stride);
  v15[21] = AssociatedTypeWitness;
  uint64_t v24 = __swift_allocate_boxed_opaque_existential_0Tm(v15 + 18);
  (*(void (**)(void *, uint64_t, const char *))(*((void *)AssociatedTypeWitness - 1) + 16))(v24, v22, AssociatedTypeWitness);
  v41[0] = 0;
  v41[1] = 0;
  uint64_t v25 = static Mirror._superclassIterator<A>(_:_:)((uint64_t)v13, (uint64_t)v41, (swift *)a1);
  uint64_t v27 = v26;
  uint64_t v28 = (unint64_t *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _RandomAccessCollectionBox<LazyMapSequence<KeyValuePairs<String, Any>, (label: String?, value: Any)>>);
  uint64_t v29 = swift_allocObject(v28, 0x48uLL, 7uLL);
  v29[6] = v15;
  v29[7] = closure #1 in Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:);
  v29[8] = 0;
  char v30 = (unint64_t *)canonical specialized generic type metadata accessor for _IndexBox<Int>();
  uint64_t v31 = swift_allocObject(v30, 0x18uLL, 7uLL);
  v31[2] = 0;
  uint64_t v32 = v15[2];
  uint64_t v33 = swift_allocObject(v30, 0x18uLL, 7uLL);
  v33[2] = v32;
  void v29[2] = v31;
  v29[3] = &protocol witness table for _IndexBox<A>;
  v29[4] = v33;
  v29[5] = &protocol witness table for _IndexBox<A>;
  uint64_t v34 = v40;
  (*(void (**)(unint64_t *, char *, uint64_t))(v9 + 32))(v40, v13, a1);
  uint64_t v35 = (const char *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CustomLeafReflectable);
  uint64_t result = swift_dynamicCast((char *)v41, v34, (Class *)a1, v35, 6uLL);
  char v37 = result;
  if (result) {
    uint64_t result = __swift_destroy_boxed_opaque_existential_1Tm(v41);
  }
  *(void *)a4 = a1;
  *(void *)(a4 + 8) = v29;
  *(unsigned char *)(a4 + 16) = 8;
  *(void *)(a4 + 24) = v25;
  *(void *)(a4 + 32) = v27;
  *(unsigned char *)(a4 + 4_assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0, 0xE000000000000000, "Swift/SmallString.swift", 23, 2, 0xD7uLL, 0) = v37;
  return result;
}

uint64_t stride<A>(from:through:by:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int **a5@<X4>, uint64_t a6@<X8>)
{
  return stride<A>(from:to:by:)(a1, a2, a3, a4, a5, (uint64_t (*)(char *, char *, char *, uint64_t, int **))StrideThrough.init(_start:end:stride:), a6);
}

uint64_t stride<A>(from:to:by:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int **a5@<X4>, uint64_t (*a6)(char *, char *, char *, uint64_t, int **)@<X5>, uint64_t a7@<X8>)
{
  uint64_t v25 = a7;
  uint64_t v26 = a6;
  uint64_t v23 = a2;
  uint64_t v24 = a3;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, a5, a4, (uint64_t)&protocol requirements base descriptor for Strideable, associated type descriptor for Strideable.Stride);
  uint64_t v11 = *((void *)AssociatedTypeWitness - 1);
  uint64_t v12 = MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v14 = (char *)&v23 - v13;
  uint64_t v15 = *(void *)(a4 - 8);
  uint64_t v16 = MEMORY[0x1F4188790](v12);
  uint64_t v18 = (char *)&v23 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v16);
  uint64_t v20 = (char *)&v23 - v19;
  uint64_t v21 = *(void (**)(char *, uint64_t, uint64_t))(v15 + 16);
  v21((char *)&v23 - v19, a1, a4);
  v21(v18, v23, a4);
  (*(void (**)(char *, uint64_t, const char *))(v11 + 16))(v14, v24, AssociatedTypeWitness);
  return v26(v20, v18, v14, a4, a5);
}

uint64_t _StringGuts.withFastUTF8<A>(_:)(uint64_t (*a1)(void *, uint64_t), uint64_t a2, uint64_t a3, unint64_t a4)
{
  if ((a4 & 0x2000000000000000) != 0)
  {
    uint64_t v6 = HIBYTE(a4) & 0xF;
    v8[0] = a3;
    v8[1] = a4 & 0xFFFFFFFFFFFFFFLL;
    uint64_t v5 = v8;
  }
  else if ((a3 & 0x1000000000000000) != 0)
  {
    uint64_t v5 = (void *)((a4 & 0xFFFFFFFFFFFFFFFLL) + 32);
    uint64_t v6 = a3 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    uint64_t v5 = _StringObject.sharedUTF8.getter(a3, a4);
  }
  return a1(v5, v6);
}

void _StringGutsSlice._normalizedHash(into:)(unint64_t *a1, unint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  if ((a3 & 0x2000000000000000) != 0) {
    unint64_t v5 = a3;
  }
  else {
    unint64_t v5 = a2;
  }
  if ((a3 & 0x1000000000000000) == 0 && (v5 & 0x4000000000000000) != 0)
  {
    if ((a3 & 0x2000000000000000) != 0)
    {
      v17[0] = a2;
      v17[1] = a3 & 0xFFFFFFFFFFFFFFLL;
      if ((a4 & 0x8000000000000000) == 0)
      {
        if ((uint64_t)(HIBYTE(a3) & 0xF) >= a5)
        {
          if (a5 - a4 < 0) {
            _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeBufferPointer with negative count", 39, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x53FuLL, 0);
          }
          uint64_t v10 = (char *)v17 + a4;
          uint64_t v11 = (char *)v17 + a5;
          goto LABEL_16;
        }
        goto LABEL_18;
      }
    }
    else if ((a2 & 0x1000000000000000) != 0)
    {
      uint64_t v6 = (a3 & 0xFFFFFFFFFFFFFFFLL) + 32;
      uint64_t v7 = a2 & 0xFFFFFFFFFFFFLL;
      if ((a4 & 0x8000000000000000) == 0) {
        goto LABEL_9;
      }
    }
    else
    {
      uint64_t v15 = a5;
      uint64_t v16 = a4;
      id v13 = _StringObject.sharedUTF8.getter(a2, a3);
      a5 = v15;
      a4 = v16;
      uint64_t v6 = (uint64_t)v13;
      uint64_t v7 = v14;
      if ((v16 & 0x8000000000000000) == 0)
      {
LABEL_9:
        if (v7 >= a5)
        {
          uint64_t v8 = specialized UnsafeBufferPointer.init(rebasing:)(a4, a5, v6, v7);
          uint64_t v10 = (char *)specialized UnsafeRawBufferPointer.init<A>(_:)(v8, v9);
LABEL_16:
          Hasher.combine(bytes:)(*(Swift::UnsafeRawBufferPointer *)&v10);
          goto LABEL_17;
        }
LABEL_18:
        unint64_t v12 = 1861;
        goto LABEL_21;
      }
    }
    unint64_t v12 = 1860;
LABEL_21:
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, v12, 0);
  }
  specialized _StringGutsSlice._withNFCCodeUnits(_:)(a2, a3, a4, a5, a1);
LABEL_17:
  Hasher._combine(_:)(0xFFu);
}

void StringProtocol.hash(into:)(unint64_t *a1, Class *a2, uint64_t a3)
{
  uint64_t v7 = (uint64_t)*(a2 - 1);
  uint64_t v8 = MEMORY[0x1F4188790](a1);
  uint64_t v10 = (Swift::UInt64 *)((char *)&v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v11 = MEMORY[0x1F4188790](v8);
  id v13 = (Swift::UInt64 *)((char *)&v31 - v12);
  MEMORY[0x1F4188790](v11);
  uint64_t v15 = (Swift::UInt64 *)((char *)&v31 - v14);
  if (v16 == &type metadata for String)
  {
    unint64_t v24 = *v3;
    unint64_t v25 = v3[1];
    if ((v25 & 0x2000000000000000) != 0) {
      uint64_t v26 = HIBYTE(v25) & 0xF;
    }
    else {
      uint64_t v26 = *v3 & 0xFFFFFFFFFFFFLL;
    }
    uint64_t v27 = a1;
    uint64_t v28 = 0;
  }
  else
  {
    if (a2 != (Class *)&type metadata for Substring)
    {
      uint64_t v17 = *(void (**)(char *, unint64_t *, Class *))(v7 + 16);
      v17((char *)&v31 - v14, v3, a2);
      if (swift_dynamicCast((char *)&v31, v15, a2, (const char *)&type metadata for String, 6uLL))
      {
        uint64_t v18 = 0;
        Swift::UInt64 v19 = v31;
        unint64_t v20 = v32;
        uint64_t v21 = HIBYTE(v32) & 0xF;
        uint64_t v22 = v31 & 0xFFFFFFFFFFFFLL;
        BOOL v23 = (v32 & 0x2000000000000000) == 0;
      }
      else
      {
        v17((char *)v13, v3, a2);
        if (swift_dynamicCast((char *)&v31, v13, a2, (const char *)&type metadata for Substring, 6uLL))
        {
          Swift::UInt64 v19 = v33;
          unint64_t v20 = v34;
          uint64_t v18 = v31 >> 16;
          uint64_t v29 = v32 >> 16;
LABEL_19:
          _StringGutsSlice._normalizedHash(into:)(a1, v19, v20, v18, v29);
          swift_bridgeObjectRelease(v20);
          return;
        }
        v17((char *)v10, v3, a2);
        Swift::UInt64 v19 = String.init<A>(_:)(v10, a2, *(void *)(a3 + 40));
        unint64_t v20 = v30;
        uint64_t v18 = 0;
        uint64_t v21 = HIBYTE(v30) & 0xF;
        uint64_t v22 = v19 & 0xFFFFFFFFFFFFLL;
        BOOL v23 = (v30 & 0x2000000000000000) == 0;
      }
      if (v23) {
        uint64_t v29 = v22;
      }
      else {
        uint64_t v29 = v21;
      }
      goto LABEL_19;
    }
    unint64_t v24 = v3[2];
    unint64_t v25 = v3[3];
    uint64_t v28 = *v3 >> 16;
    uint64_t v26 = v3[1] >> 16;
    uint64_t v27 = a1;
  }

  _StringGutsSlice._normalizedHash(into:)(v27, v24, v25, v28, v26);
}

unsigned __int8 *specialized _StringGutsSlice.withFastUTF8<A>(_:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, unint64_t *a5)
{
  if ((a2 & 0x2000000000000000) == 0)
  {
    if ((a1 & 0x1000000000000000) != 0)
    {
      id v8 = (id)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
      uint64_t v9 = a1 & 0xFFFFFFFFFFFFLL;
      if ((a3 & 0x8000000000000000) == 0) {
        goto LABEL_4;
      }
    }
    else
    {
      id v8 = _StringObject.sharedUTF8.getter(a1, a2);
      uint64_t v9 = v14;
      if ((a3 & 0x8000000000000000) == 0)
      {
LABEL_4:
        if (v9 >= a4)
        {
          uint64_t v10 = (unsigned __int8 *)specialized UnsafeBufferPointer.init(rebasing:)(a3, a4, (uint64_t)v8, v9);
          return specialized closure #1 in _StringGutsSlice._withNFCCodeUnits(_:)(v10, v11, a5);
        }
        goto LABEL_11;
      }
    }
LABEL_13:
    unint64_t v13 = 1860;
LABEL_14:
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, v13, 0);
  }
  v15[0] = a1;
  v15[1] = a2 & 0xFFFFFFFFFFFFFFLL;
  if (a3 < 0) {
    goto LABEL_13;
  }
  if ((uint64_t)(HIBYTE(a2) & 0xF) < a4)
  {
LABEL_11:
    unint64_t v13 = 1861;
    goto LABEL_14;
  }
  uint64_t v11 = a4 - a3;
  if (a4 - a3 < 0) {
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeBufferPointer with negative count", 39, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x53FuLL, 0);
  }
  uint64_t v10 = (unsigned __int8 *)v15 + a3;
  return specialized closure #1 in _StringGutsSlice._withNFCCodeUnits(_:)(v10, v11, a5);
}

__objc2_class **specialized _StringGutsSlice.withFastUTF8<A>(_:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  if ((a2 & 0x2000000000000000) == 0)
  {
    if ((a1 & 0x1000000000000000) != 0)
    {
      id v8 = (id)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
      uint64_t v9 = a1 & 0xFFFFFFFFFFFFLL;
      if ((a3 & 0x8000000000000000) == 0) {
        goto LABEL_4;
      }
    }
    else
    {
      id v8 = _StringObject.sharedUTF8.getter(a1, a2);
      uint64_t v9 = v14;
      if ((a3 & 0x8000000000000000) == 0)
      {
LABEL_4:
        if (v9 >= a4)
        {
          uint64_t v10 = (__objc2_class **)specialized UnsafeBufferPointer.init(rebasing:)(a3, a4, (uint64_t)v8, v9);
          return specialized closure #1 in _StringGutsSlice._withNFCCodeUnits(_:)(v10, v11, a5);
        }
        goto LABEL_11;
      }
    }
LABEL_13:
    unint64_t v13 = 1860;
LABEL_14:
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, v13, 0);
  }
  v15[0] = a1;
  v15[1] = a2 & 0xFFFFFFFFFFFFFFLL;
  if (a3 < 0) {
    goto LABEL_13;
  }
  if ((uint64_t)(HIBYTE(a2) & 0xF) < a4)
  {
LABEL_11:
    unint64_t v13 = 1861;
    goto LABEL_14;
  }
  uint64_t v11 = a4 - a3;
  if (a4 - a3 < 0) {
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeBufferPointer with negative count", 39, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x53FuLL, 0);
  }
  uint64_t v10 = (__objc2_class **)((char *)v15 + a3);
  return specialized closure #1 in _StringGutsSlice._withNFCCodeUnits(_:)(v10, v11, a5);
}

uint64_t specialized _StringGutsSlice.withFastUTF8<A>(_:)(uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t v8 = a3;
  if ((a2 & 0x2000000000000000) == 0)
  {
    if ((result & 0x1000000000000000) != 0)
    {
      id v9 = (id)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
      uint64_t v10 = result & 0xFFFFFFFFFFFFLL;
      if ((v8 & 0x8000000000000000) == 0) {
        goto LABEL_4;
      }
    }
    else
    {
      id v9 = _StringObject.sharedUTF8.getter(result, a2);
      uint64_t v10 = v15;
      if ((v8 & 0x8000000000000000) == 0)
      {
LABEL_4:
        if (v10 >= a4)
        {
          uint64_t result = specialized UnsafeBufferPointer.init(rebasing:)(v8, a4, (uint64_t)v9, v10);
          if (result)
          {
            uint64_t v12 = v11;
            if (v11)
            {
              unint64_t v13 = (unsigned __int8 *)result;
              do
              {
                uint64_t result = a5(*v13);
                if (v5) {
                  break;
                }
                ++v13;
                --v12;
              }
              while (v12);
            }
          }
          return result;
        }
        goto LABEL_18;
      }
    }
LABEL_20:
    unint64_t v14 = 1860;
LABEL_21:
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, v14, 0);
  }
  v16[0] = result;
  v16[1] = a2 & 0xFFFFFFFFFFFFFFLL;
  if (a3 < 0) {
    goto LABEL_20;
  }
  if ((uint64_t)(HIBYTE(a2) & 0xF) < a4)
  {
LABEL_18:
    unint64_t v14 = 1861;
    goto LABEL_21;
  }
  if (a4 - a3 < 0) {
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeBufferPointer with negative count", 39, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x53FuLL, 0);
  }
  if (a4 != a3)
  {
    do
    {
      uint64_t result = a5(*((unsigned __int8 *)v16 + v8));
      if (v5) {
        break;
      }
      ++v8;
    }
    while (a4 != v8);
  }
  return result;
}

void specialized _StringGutsSlice._withNFCCodeUnits(_:)(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, unint64_t *a5)
{
  v11._unint64_t rawBits = (a3 << 16) | 1;
  v12._unint64_t rawBits = (a4 << 16) | 1;
  Swift::UInt64 v13 = _StringGuts.validateScalarRange(_:)(v11, v12, a1, a2);
  unint64_t v15 = v14;
  if (v13 >= 0x10000) {
    unint64_t v16 = v13;
  }
  else {
    unint64_t v16 = v13 | 3;
  }
  if ((a2 & 0x2000000000000000) != 0) {
    unint64_t v17 = a2;
  }
  else {
    unint64_t v17 = a1;
  }
  if ((v17 & 0x4000000000000000) != 0)
  {
    if ((v16 ^ v14) >= 0x4000)
    {
      uint64_t v18 = (a1 >> 59) & 1;
      if ((a2 & 0x1000000000000000) == 0) {
        LOBYTE(v18) = 1;
      }
      uint64_t v19 = 4 << v18;
      uint64_t v20 = HIBYTE(a2) & 0xF;
      if ((a2 & 0x2000000000000000) == 0) {
        uint64_t v20 = a1 & 0xFFFFFFFFFFFFLL;
      }
      unint64_t v33 = v20;
      unint64_t rawBits = v16;
      do
      {
        Swift::UInt8 v22 = Substring.UTF8View.subscript.getter(rawBits, v16, v15, a1, a2);
        if ((rawBits & 0xC) == v19)
        {
          unint64_t rawBits = _StringGuts._slowEnsureMatchingEncoding(_:)((Swift::String::Index)rawBits)._rawBits;
          if ((a2 & 0x1000000000000000) == 0)
          {
LABEL_16:
            unint64_t rawBits = (rawBits & 0xFFFFFFFFFFFF0000) + 65540;
            goto LABEL_17;
          }
        }
        else if ((a2 & 0x1000000000000000) == 0)
        {
          goto LABEL_16;
        }
        if (v33 <= rawBits >> 16) {
          goto LABEL_43;
        }
        unint64_t rawBits = String.UTF8View._foreignIndex(after:)((Swift::String::Index)rawBits)._rawBits;
LABEL_17:
        Hasher._combine(_:)(v22);
      }
      while ((rawBits ^ v15) >= 0x4000);
    }
  }
  else
  {
    Swift::Bool v36 = 1;
    Swift::UInt8 v35 = 0;
    if ((a2 & 0x1000000000000000) != 0)
    {
      unint64_t v23 = v14 >> 14;
      swift_bridgeObjectRetain(a2);
      v24._unint64_t rawBits = v16;
      while (v23 != v24._rawBits >> 14)
      {
        v25._unint64_t rawBits = v24._rawBits;
        v26._unint64_t rawBits = _StringGuts.validateScalarIndex(_:in:)(v25, v16, v15, a1, a2)._rawBits;
        Swift::UInt32 value = _StringGuts.foreignErrorCorrectedScalar(startingAt:)((Swift::String::Index)(v26._rawBits & 0xFFFFFFFFFFFF0000))._0._value;
        v28._unint64_t rawBits = _StringGuts.validateScalarIndex(_:)(v24)._rawBits;
        v24._unint64_t rawBits = String.UnicodeScalarView._foreignIndex(after:)(v28)._rawBits;
        if (!specialized _StringGutsSlice._isScalarNFCQC(_:_:)(value, &v35))
        {
          swift_bridgeObjectRelease(a2);
          goto LABEL_30;
        }
      }
      swift_bridgeObjectRelease(a2);
      uint64_t v30 = HIBYTE(a2) & 0xF;
      if ((a2 & 0x2000000000000000) == 0) {
        uint64_t v30 = a1 & 0xFFFFFFFFFFFFLL;
      }
      Swift::UInt64 v34 = v30;
      v31._unint64_t rawBits = v16;
      do
      {
        if (v23 == v31._rawBits >> 14) {
          break;
        }
        Swift::UInt8 v32 = Substring.UTF8View.subscript.getter(v31._rawBits, v16, v15, a1, a2);
        if ((v31._rawBits & 0xC) == 4 << ((a1 & 0x800000000000000) != 0)) {
          v31._unint64_t rawBits = _StringGuts._slowEnsureMatchingEncoding(_:)(v31)._rawBits;
        }
        if (v34 <= v31._rawBits >> 16) {
LABEL_43:
        }
          _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index is out of bounds", 29, 2, "Swift/StringUTF8View.swift", 26, 2, 0x90uLL, 0);
        v31._unint64_t rawBits = String.UTF8View._foreignIndex(after:)(v31)._rawBits;
        Hasher._combine(_:)(v32);
      }
      while (!v5);
    }
    else
    {
      _StringGutsSlice._fastNFCCheck(_:_:)(&v36, &v35);
      if (v36)
      {
        specialized _StringGutsSlice.withFastUTF8<A>(_:)(a1, a2, a3, a4, a5);
      }
      else
      {
LABEL_30:
        swift_bridgeObjectRetain(a2);
        do
        {
          unint64_t v29 = specialized Unicode._InternalNFC.Iterator.next()();
          if ((v29 & 0x100000000) != 0) {
            break;
          }
          specialized Unicode.Scalar.withUTF8CodeUnits<A>(_:)(v29, a5);
        }
        while (!v5);
        swift_bridgeObjectRelease((uint64_t)&_swiftEmptyArrayStorage);
        swift_bridgeObjectRelease((uint64_t)&_swiftEmptyArrayStorage);
        swift_bridgeObjectRelease(a2);
      }
    }
  }
}

void specialized _StringGutsSlice._withNFCCodeUnits(_:)(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  v11._unint64_t rawBits = (a3 << 16) | 1;
  v12._unint64_t rawBits = (a4 << 16) | 1;
  Swift::UInt64 v13 = _StringGuts.validateScalarRange(_:)(v11, v12, a1, a2);
  unint64_t v15 = v14;
  if (v13 >= 0x10000) {
    unint64_t v16 = v13;
  }
  else {
    unint64_t v16 = v13 | 3;
  }
  unint64_t v45 = a1;
  uint64_t v46 = a2;
  if ((a2 & 0x2000000000000000) != 0) {
    unint64_t v17 = a2;
  }
  else {
    unint64_t v17 = a1;
  }
  if ((v17 & 0x4000000000000000) != 0)
  {
    if ((v16 ^ v15) >= 0x4000)
    {
      uint64_t v18 = a2;
      uint64_t v19 = (a1 >> 59) & 1;
      if ((a2 & 0x1000000000000000) == 0) {
        LOBYTE(v19) = 1;
      }
      uint64_t v20 = 4 << v19;
      uint64_t v21 = HIBYTE(a2) & 0xF;
      if ((a2 & 0x2000000000000000) == 0) {
        uint64_t v21 = a1 & 0xFFFFFFFFFFFFLL;
      }
      unint64_t v44 = v21;
      unint64_t rawBits = v16;
      do
      {
        unint64_t v23 = v16;
        unint64_t v24 = v15;
        char v25 = Substring.UTF8View.subscript.getter(rawBits, v16, v15, a1, v18);
        if ((rawBits & 0xC) == v20)
        {
          unint64_t rawBits = _StringGuts._slowEnsureMatchingEncoding(_:)((Swift::String::Index)rawBits)._rawBits;
          if ((v18 & 0x1000000000000000) != 0)
          {
LABEL_24:
            if (v44 <= rawBits >> 16) {
              goto LABEL_49;
            }
            unint64_t rawBits = String.UTF8View._foreignIndex(after:)((Swift::String::Index)rawBits)._rawBits;
            goto LABEL_17;
          }
        }
        else if ((v18 & 0x1000000000000000) != 0)
        {
          goto LABEL_24;
        }
        unint64_t rawBits = (rawBits & 0xFFFFFFFFFFFF0000) + 65540;
LABEL_17:
        uint64_t v26 = *a5;
        BOOL isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*a5);
        *a5 = v26;
        if (!isUniquelyReferenced_nonNull_native)
        {
          uint64_t v26 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v26 + 16) + 1, 1, v26);
          *a5 = v26;
        }
        unint64_t v29 = *(void *)(v26 + 16);
        unint64_t v28 = *(void *)(v26 + 24);
        if (v29 >= v28 >> 1)
        {
          uint64_t v30 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((__objc2_class **)(v28 > 1), v29 + 1, 1, v26);
          unint64_t v15 = v24;
          unint64_t v16 = v23;
          uint64_t v26 = (uint64_t)v30;
        }
        else
        {
          unint64_t v16 = v23;
          unint64_t v15 = v24;
        }
        *(void *)(v26 + 16) = v29 + 1;
        *(unsigned char *)(v26 + v29 + 32) = v25;
        *a5 = v26;
        a1 = v45;
        uint64_t v18 = v46;
      }
      while ((rawBits ^ v15) >= 0x4000);
    }
  }
  else
  {
    unint64_t v31 = v15;
    unint64_t v32 = v16;
    Swift::Bool v48 = 1;
    Swift::UInt8 v47 = 0;
    unint64_t v33 = a2;
    if ((a2 & 0x1000000000000000) != 0)
    {
      unint64_t v34 = v15 >> 14;
      swift_bridgeObjectRetain(a2);
      v35._unint64_t rawBits = v32;
      while (v34 != v35._rawBits >> 14)
      {
        v36._unint64_t rawBits = v35._rawBits;
        v37._unint64_t rawBits = _StringGuts.validateScalarIndex(_:in:)(v36, v32, v31, v45, a2)._rawBits;
        Swift::UInt32 value = _StringGuts.foreignErrorCorrectedScalar(startingAt:)((Swift::String::Index)(v37._rawBits & 0xFFFFFFFFFFFF0000))._0._value;
        v39._unint64_t rawBits = _StringGuts.validateScalarIndex(_:)(v35)._rawBits;
        v35._unint64_t rawBits = String.UnicodeScalarView._foreignIndex(after:)(v39)._rawBits;
        if (!specialized _StringGutsSlice._isScalarNFCQC(_:_:)(value, &v47))
        {
          unint64_t v33 = a2;
          swift_bridgeObjectRelease(a2);
          goto LABEL_35;
        }
      }
      swift_bridgeObjectRelease(a2);
      if ((a2 & 0x2000000000000000) != 0) {
        unint64_t v41 = HIBYTE(a2) & 0xF;
      }
      else {
        unint64_t v41 = v45 & 0xFFFFFFFFFFFFLL;
      }
      v42._unint64_t rawBits = v32;
      do
      {
        if (v34 == v42._rawBits >> 14) {
          break;
        }
        char v43 = Substring.UTF8View.subscript.getter(v42._rawBits, v32, v31, v45, v46);
        if ((v42._rawBits & 0xC) == 4 << ((v45 & 0x800000000000000) != 0))
        {
          v42._unint64_t rawBits = _StringGuts._slowEnsureMatchingEncoding(_:)(v42)._rawBits;
          if (v41 <= v42._rawBits >> 16) {
LABEL_49:
          }
            _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index is out of bounds", 29, 2, "Swift/StringUTF8View.swift", 26, 2, 0x90uLL, 0);
        }
        else if (v41 <= v42._rawBits >> 16)
        {
          goto LABEL_49;
        }
        v42._unint64_t rawBits = String.UTF8View._foreignIndex(after:)(v42)._rawBits;
        closure #1 in String._nfcCodeUnits.getter(v43, a5);
      }
      while (!v5);
    }
    else
    {
      _StringGutsSlice._fastNFCCheck(_:_:)(&v48, &v47);
      if (v48)
      {
        specialized _StringGutsSlice.withFastUTF8<A>(_:)(a1, a2, a3, a4, a5);
      }
      else
      {
LABEL_35:
        swift_bridgeObjectRetain(v33);
        do
        {
          unint64_t v40 = specialized Unicode._InternalNFC.Iterator.next()();
          if ((v40 & 0x100000000) != 0) {
            break;
          }
          specialized Unicode.Scalar.withUTF8CodeUnits<A>(_:)(v40, a5);
        }
        while (!v5);
        swift_bridgeObjectRelease(v33);
        swift_bridgeObjectRelease((uint64_t)&_swiftEmptyArrayStorage);
        swift_bridgeObjectRelease((uint64_t)&_swiftEmptyArrayStorage);
      }
    }
  }
}

void _StringGutsSlice._withNFCCodeUnits(_:)(void (*a1)(uint64_t), uint64_t a2, unint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  v11._unint64_t rawBits = (a5 << 16) | 1;
  v12._unint64_t rawBits = (a6 << 16) | 1;
  Swift::UInt64 v13 = _StringGuts.validateScalarRange(_:)(v11, v12, a3, a4);
  unint64_t v15 = v14;
  if (v13 >= 0x10000) {
    unint64_t v16 = v13;
  }
  else {
    unint64_t v16 = v13 | 3;
  }
  if ((a4 & 0x2000000000000000) != 0) {
    unint64_t v17 = a4;
  }
  else {
    unint64_t v17 = a3;
  }
  if ((v17 & 0x4000000000000000) != 0)
  {
    uint64_t v18 = (a3 >> 59) & 1;
    if ((a4 & 0x1000000000000000) == 0) {
      LOBYTE(v18) = 1;
    }
    uint64_t v19 = 4 << v18;
    uint64_t v20 = HIBYTE(a4) & 0xF;
    if ((a4 & 0x2000000000000000) == 0) {
      uint64_t v20 = a3 & 0xFFFFFFFFFFFFLL;
    }
    unint64_t v32 = v20;
    unint64_t rawBits = v16;
    while (1)
    {
      if ((rawBits ^ v15) < 0x4000) {
        return;
      }
      uint64_t v22 = Substring.UTF8View.subscript.getter(rawBits, v16, v15, a3, a4);
      if ((rawBits & 0xC) == v19)
      {
        unint64_t rawBits = _StringGuts._slowEnsureMatchingEncoding(_:)((Swift::String::Index)rawBits)._rawBits;
        if ((a4 & 0x1000000000000000) == 0)
        {
LABEL_16:
          unint64_t rawBits = (rawBits & 0xFFFFFFFFFFFF0000) + 65540;
          goto LABEL_17;
        }
      }
      else if ((a4 & 0x1000000000000000) == 0)
      {
        goto LABEL_16;
      }
      if (v32 <= rawBits >> 16) {
        goto LABEL_44;
      }
      unint64_t rawBits = String.UTF8View._foreignIndex(after:)((Swift::String::Index)rawBits)._rawBits;
LABEL_17:
      a1(v22);
      if (v6) {
        return;
      }
    }
  }
  Swift::Bool v36 = 1;
  Swift::UInt8 v35 = 0;
  if ((a4 & 0x1000000000000000) != 0)
  {
    unint64_t v33 = v14 >> 14;
    swift_bridgeObjectRetain(a4);
    v23._unint64_t rawBits = v16;
    while (v33 != v23._rawBits >> 14)
    {
      v24._unint64_t rawBits = v23._rawBits;
      v25._unint64_t rawBits = _StringGuts.validateScalarIndex(_:in:)(v24, v16, v15, a3, a4)._rawBits;
      Swift::UInt32 value = _StringGuts.foreignErrorCorrectedScalar(startingAt:)((Swift::String::Index)(v25._rawBits & 0xFFFFFFFFFFFF0000))._0._value;
      v27._unint64_t rawBits = _StringGuts.validateScalarIndex(_:)(v23)._rawBits;
      v23._unint64_t rawBits = String.UnicodeScalarView._foreignIndex(after:)(v27)._rawBits;
      if (!specialized _StringGutsSlice._isScalarNFCQC(_:_:)(value, &v35))
      {
        swift_bridgeObjectRelease(a4);
        goto LABEL_29;
      }
    }
    swift_bridgeObjectRelease(a4);
    if ((a4 & 0x2000000000000000) != 0) {
      unint64_t v29 = HIBYTE(a4) & 0xF;
    }
    else {
      unint64_t v29 = a3 & 0xFFFFFFFFFFFFLL;
    }
    v30._unint64_t rawBits = v16;
    do
    {
      if (v33 == v30._rawBits >> 14) {
        break;
      }
      uint64_t v31 = Substring.UTF8View.subscript.getter(v30._rawBits, v16, v15, a3, a4);
      if ((v30._rawBits & 0xC) == 4 << ((a3 & 0x800000000000000) != 0))
      {
        v30._unint64_t rawBits = _StringGuts._slowEnsureMatchingEncoding(_:)(v30)._rawBits;
        if (v29 <= v30._rawBits >> 16) {
LABEL_44:
        }
          _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index is out of bounds", 29, 2, "Swift/StringUTF8View.swift", 26, 2, 0x90uLL, 0);
      }
      else if (v29 <= v30._rawBits >> 16)
      {
        goto LABEL_44;
      }
      v30._unint64_t rawBits = String.UTF8View._foreignIndex(after:)(v30)._rawBits;
      a1(v31);
    }
    while (!v6);
  }
  else
  {
    _StringGutsSlice._fastNFCCheck(_:_:)(&v36, &v35);
    if (v36)
    {
      specialized _StringGutsSlice.withFastUTF8<A>(_:)(a3, a4, a5, a6, (uint64_t (*)(void))a1);
    }
    else
    {
LABEL_29:
      swift_bridgeObjectRetain(a4);
      do
      {
        unint64_t v28 = specialized Unicode._InternalNFC.Iterator.next()();
        if ((v28 & 0x100000000) != 0) {
          break;
        }
        specialized Unicode.Scalar.withUTF8CodeUnits<A>(_:)(v28, (uint64_t (*)(void))a1);
      }
      while (!v6);
      swift_bridgeObjectRelease(a4);
      swift_bridgeObjectRelease((uint64_t)&_swiftEmptyArrayStorage);
      swift_bridgeObjectRelease((uint64_t)&_swiftEmptyArrayStorage);
    }
  }
}

void unimplemented_utf8_32bit(_:file:line:)(uint64_t a1, uint64_t a2, const char *a3, uint64_t a4, char a5, unint64_t a6)
{
}

uint64_t (*String._guts.modify())()
{
  return EnumeratedSequence._base.modify;
}

uint64_t _StringGuts.init(_initialCapacity:)(Swift::Int a1)
{
  if (a1 < 16) {
    return 0;
  }
  _StringGuts.grow(_:)(a1);
  return 0;
}

uint64_t _StringGuts.init()()
{
  return 0;
}

BOOL specialized == infix<A, B>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v25 = a3;
  uint64_t v26 = a4;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0, a5, (uint64_t)&type metadata for Int, 0, 0);
  uint64_t v11 = *(TupleTypeMetadata2 - 1);
  uint64_t v12 = MEMORY[0x1F4188790](TupleTypeMetadata2);
  unint64_t v14 = (char *)&v25 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  unint64_t v16 = (char *)&v25 - v15;
  unint64_t v17 = *(void (**)(char *, uint64_t, uint64_t))(*(void *)(a5 - 8) + 16);
  uint64_t v18 = a1;
  uint64_t v19 = a2;
  v17((char *)&v25 - v15, v18, a5);
  *(void *)&v16[*((int *)TupleTypeMetadata2 + 12)] = a2;
  v17(v14, v25, a5);
  uint64_t v20 = *((int *)TupleTypeMetadata2 + 12);
  *(void *)&v14[v20] = v26;
  char v21 = (*(uint64_t (**)(char *, char *, uint64_t, uint64_t))(a6 + 8))(v16, v14, a5, a6);
  uint64_t v22 = *(void (**)(char *, uint64_t *))(v11 + 8);
  if (v21)
  {
    v22(v16, TupleTypeMetadata2);
    uint64_t v23 = *(void *)&v14[v20];
    v22(v14, TupleTypeMetadata2);
    return v23 == v19;
  }
  else
  {
    v22(v14, TupleTypeMetadata2);
    v22(v16, TupleTypeMetadata2);
    return 0;
  }
}

uint64_t == infix<A, B>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v25 = a8;
  uint64_t v26 = a2;
  uint64_t v28 = a4;
  uint64_t v29 = a7;
  uint64_t v27 = a3;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0, a5, a6, 0, 0);
  uint64_t v12 = *(TupleTypeMetadata2 - 1);
  uint64_t v13 = MEMORY[0x1F4188790](TupleTypeMetadata2);
  uint64_t v15 = (char *)&v24 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v13);
  unint64_t v17 = (char *)&v24 - v16;
  uint64_t v18 = *(void (**)(char *, uint64_t, uint64_t))(*(void *)(a5 - 8) + 16);
  v18((char *)&v24 - v16, a1, a5);
  uint64_t v19 = *(void (**)(void))(*(void *)(a6 - 8) + 16);
  Swift::String::Index v24 = &v17[*((int *)TupleTypeMetadata2 + 12)];
  v19();
  v18(v15, v27, a5);
  uint64_t v20 = &v15[*((int *)TupleTypeMetadata2 + 12)];
  ((void (*)(char *, uint64_t, uint64_t))v19)(v20, v28, a6);
  if ((*(uint64_t (**)(char *, char *, uint64_t))(v29 + 8))(v17, v15, a5)) {
    char v21 = (*(uint64_t (**)(char *, char *, uint64_t))(v25 + 8))(v24, v20, a6);
  }
  else {
    char v21 = 0;
  }
  uint64_t v22 = *(void (**)(char *, uint64_t *))(v12 + 8);
  v22(v15, TupleTypeMetadata2);
  v22(v17, TupleTypeMetadata2);
  return v21 & 1;
}

void *static String._fromNonContiguousUnsafeBitcastUTF8Repairing<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x1F4188790](a1);
  (*(void (**)(unsigned char *))(v6 + 16))(&v30[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)]);
  uint64_t v7 = *(void *)(a3 + 8);
  uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 56))(a2, v7);
  uint64_t v31 = a2;
  uint64_t v32 = a3;
  AssociatedTypeWitness = (uint64_t *)swift_getAssociatedTypeWitness(0, (int **)v7, a2, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
  if (_swift_isClassOrObjCExistentialType((uint64_t)AssociatedTypeWitness, AssociatedTypeWitness)
    && (v8 < 0 || (v8 & 0x4000000000000000) != 0))
  {
    uint64_t v33 = v8;
    uint64_t v25 = (unint64_t *)type metadata accessor for _ArrayBuffer(0, (uint64_t)AssociatedTypeWitness, v10, v11);
    swift_retain((atomic_ullong *)v8);
    uint64_t WitnessTable = swift_getWitnessTable(protocol conformance descriptor for _ArrayBuffer<A>, v25, v26);
    uint64_t v28 = (*(uint64_t (**)(unint64_t *, uint64_t))(WitnessTable + 56))(v25, WitnessTable);
    uint64_t v22 = _ss15ContiguousArrayV23withUnsafeBufferPointeryqd__qd__SRyxGKXEKlFADq_s5Error_pRi_zRi0_zRi__Ri0__r0_lyxSS6result_Sb11repairsMadetIsgyrzo_AByxGSSAF_SbAGtsAE_pSSAF_SbAGtRsd__r__lIetMggozo_Tpq5((void *(*)(uint64_t *__return_ptr, unint64_t, void))partial apply for closure #1 in static String._fromNonContiguousUnsafeBitcastUTF8Repairing<A>(_:), (uint64_t)v30, v28, (uint64_t)AssociatedTypeWitness);
    swift_release(v8);
    uint64_t v23 = v28;
    goto LABEL_14;
  }
  _swift_isClassOrObjCExistentialType((uint64_t)AssociatedTypeWitness, AssociatedTypeWitness);
  uint64_t v12 = *(AssociatedTypeWitness - 1);
  uint64_t v13 = *(unsigned __int8 *)(v12 + 80);
  if (_swift_isClassOrObjCExistentialType((uint64_t)AssociatedTypeWitness, AssociatedTypeWitness)
    && (v8 < 0 || (v8 & 0x4000000000000000) != 0))
  {
    if (v8 < 0) {
      uint64_t v29 = (void *)v8;
    }
    else {
      uint64_t v29 = (void *)(v8 & 0xFFFFFFFFFFFFFF8);
    }
    uint64_t v14 = (uint64_t)[v29 count];
    if (v14 < 0) {
      _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeBufferPointer with negative count", 39, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x53FuLL, 0);
    }
  }
  else
  {
    _swift_isClassOrObjCExistentialType((uint64_t)AssociatedTypeWitness, AssociatedTypeWitness);
    uint64_t v14 = *(void *)(v8 + 16);
  }
  uint64_t v15 = *(void *)(v12 + 72);
  uint64_t v16 = v14 * v15;
  if ((unsigned __int128)(v14 * (__int128)v15) >> 64 != (v14 * v15) >> 63)
  {
    __break(1u);
LABEL_16:
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeRawBufferPointer with negative count", 42, 2, "Swift/UnsafeRawBufferPointer.swift", 34, 2, 0x485uLL, 0);
  }
  if (v16 < 0) {
    goto LABEL_16;
  }
  unint64_t v17 = (uint8x16_t *)(v8 + ((v13 + 32) & ~v13));
  int64_t v18 = validateUTF8(_:)(v17->i64, v16);
  if (v20) {
    uint64_t v21 = repairUTF8(_:firstKnownBrokenRange:)(v17->i8, v16, v18, v19);
  }
  else {
    uint64_t v21 = specialized static String._uncheckedFromUTF8(_:isASCII:)(v17, v16, v18 & 1);
  }
  uint64_t v22 = (void *)v21;
  uint64_t v23 = v8;
LABEL_14:
  swift_release(v23);
  return v22;
}

uint64_t closure #1 in static String._fromNonContiguousUnsafeBitcastUTF8Repairing<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, *(int ***)(a4 + 8), a3, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
  id v9 = (uint64_t *)UnsafeRawBufferPointer.init<A>(_:)(a1, a2, AssociatedTypeWitness);
  uint64_t v11 = (uint8x16_t *)v9;
  if (v9)
  {
    uint64_t v12 = v10 - (void)v9;
    if (v10 - (uint64_t)v9 < 0) {
      _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeBufferPointer with negative count", 39, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x53FuLL, 0);
    }
  }
  else
  {
    uint64_t v12 = 0;
  }
  int64_t v13 = validateUTF8(_:)(v9, v12);
  char v16 = v15 & 1;
  if (v15) {
    uint64_t result = repairUTF8(_:firstKnownBrokenRange:)(v11->i8, v12, v13, v14);
  }
  else {
    uint64_t result = specialized static String._uncheckedFromUTF8(_:isASCII:)(v11, v12, v13 & 1);
  }
  *(void *)a5 = result;
  *(void *)(a5 + 8) = v18;
  *(unsigned char *)(a5 + 16) = v16;
  return result;
}

uint64_t UnsafeRawBufferPointer.bindMemory<A>(to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return UnsafeRawBufferPointer.bindMemory<A>(to:)(a1, a2, a3, a4, "UnsafeBufferPointer with negative count", 39, 0x53FuLL);
}

uint64_t String.init<A, B>(decoding:as:)(uint64_t a1, uint64_t a2, Class *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8 = (uint64_t)*(a3 - 1);
  uint64_t v9 = MEMORY[0x1F4188790](a1);
  int64_t v14 = (unint64_t *)((char *)v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (v10 != &type metadata for Unicode.UTF8)
  {
    unint64_t v21 = static String._fromCodeUnits<A, B>(_:encoding:repair:)(a1, (uint64_t)v10, 1, a3, v11, a5, v12);
    if (!v23) {
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/String.swift", 18, 2, 0x1C9uLL, 0);
    }
    goto LABEL_10;
  }
  MEMORY[0x1F4188790](v9);
  (*(void (**)(uint64_t *__return_ptr, uint64_t (*)@<X0>(uint64_t@<X0>, uint64_t@<X1>, uint64_t *@<X8>)))(*(void *)(a5 + 8) + 72))(v26, partial apply for closure #1 in String.init<A, B>(decoding:as:));
  if (v26[1])
  {
    uint64_t v15 = v26[0];
LABEL_11:
    (*(void (**)(uint64_t, Class *))(v8 + 8))(a1, a3);
    return v15;
  }
  (*(void (**)(unint64_t *, uint64_t, Class *))(v8 + 16))(v14, a1, a3);
  char v16 = (const char *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _HasContiguousBytes);
  if ((swift_dynamicCast((char *)v24, v14, a3, v16, 6uLL) & 1) == 0)
  {
    uint64_t v25 = 0;
    memset(v24, 0, sizeof(v24));
    outlined destroy of _HasContiguousBytes?((uint64_t)v24, &demangling cache variable for type metadata for _HasContiguousBytes?);
LABEL_9:
    unint64_t v21 = (unint64_t)static String._fromNonContiguousUnsafeBitcastUTF8Repairing<A>(_:)(a1, (uint64_t)a3, a5);
LABEL_10:
    uint64_t v15 = v21;
    goto LABEL_11;
  }
  outlined init with take of MirrorPath(v24, (uint64_t)v26);
  uint64_t v17 = v27;
  uint64_t v18 = v28;
  __swift_project_boxed_opaque_existential_0Tm(v26, v27);
  if (((*(uint64_t (**)(uint64_t, uint64_t))(v18 + 16))(v17, v18) & 1) == 0)
  {
    __swift_destroy_boxed_opaque_existential_1Tm(v26);
    goto LABEL_9;
  }
  uint64_t v19 = v27;
  uint64_t v20 = v28;
  __swift_project_boxed_opaque_existential_0Tm(v26, v27);
  (*(void (**)(long long *__return_ptr, uint64_t (*)@<X0>(uint8x16_t *@<X0>, uint64_t@<X1>, uint64_t *@<X8>), void, ValueMetadata *, uint64_t, uint64_t))(v20 + 8))(v24, closure #2 in String.init<A, B>(decoding:as:), 0, &type metadata for String, v19, v20);
  (*(void (**)(uint64_t, Class *))(v8 + 8))(a1, a3);
  uint64_t v15 = *(void *)&v24[0];
  __swift_destroy_boxed_opaque_existential_1Tm(v26);
  return v15;
}

uint64_t closure #1 in String.init<A, B>(decoding:as:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, uint64_t *a5@<X8>)
{
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, *(int ***)(a4 + 8), a3, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
  uint64_t v9 = (uint64_t *)UnsafeRawBufferPointer.init<A>(_:)(a1, a2, AssociatedTypeWitness);
  uint64_t v11 = (uint8x16_t *)v9;
  if (v9) {
    uint64_t v12 = v10 - (void)v9;
  }
  else {
    uint64_t v12 = 0;
  }
  int64_t v13 = validateUTF8(_:)(v9, v12);
  if (v15) {
    uint64_t result = repairUTF8(_:firstKnownBrokenRange:)(v11->i8, v12, v13, v14);
  }
  else {
    uint64_t result = specialized static String._uncheckedFromUTF8(_:isASCII:)(v11, v12, v13 & 1);
  }
  *a5 = result;
  a5[1] = v17;
  return result;
}

uint64_t closure #2 in String.init<A, B>(decoding:as:)@<X0>(uint8x16_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  if (a1) {
    uint64_t v5 = a2 - (void)a1;
  }
  else {
    uint64_t v5 = 0;
  }
  int64_t v6 = validateUTF8(_:)(a1->i64, v5);
  if (v8) {
    uint64_t result = repairUTF8(_:firstKnownBrokenRange:)(a1->i8, v5, v6, v7);
  }
  else {
    uint64_t result = specialized static String._uncheckedFromUTF8(_:isASCII:)(a1, v5, v6 & 1);
  }
  *a3 = result;
  a3[1] = v10;
  return result;
}

uint64_t String.init<A, B>(validating:as:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int **a5, uint64_t a6)
{
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, a5, a3, (uint64_t)&protocol requirements base descriptor for _UnicodeEncoding, associated type descriptor for _UnicodeEncoding.EncodedScalar);
  unsigned int v88 = (void (**)(unsigned int *, ValueMetadata *))*((void *)AssociatedTypeWitness - 1);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v95 = (unsigned int *)((char *)v75 - v12);
  uint64_t v97 = type metadata accessor for Unicode.ParseResult(0, (uint64_t)AssociatedTypeWitness, v13, v14);
  MEMORY[0x1F4188790](v97);
  unint64_t v96 = (unsigned __int8 *)v75 - v15;
  char v16 = swift_getAssociatedTypeWitness(0, a5, a3, (uint64_t)&protocol requirements base descriptor for _UnicodeEncoding, associated type descriptor for _UnicodeEncoding.ForwardParser);
  uint64_t v81 = *((void *)v16 - 1);
  uint64_t v17 = MEMORY[0x1F4188790](v16);
  uint64x2_t v84 = (char *)v75 - v18;
  uint64_t v19 = *(void *)(a4 - 8);
  MEMORY[0x1F4188790](v17);
  unint64_t v21 = (char *)v75 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64x2_t v83 = swift_getAssociatedTypeWitness(0, (int **)a6, a4, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Iterator);
  uint64_t v86 = *((void *)v83 - 1);
  uint64_t v22 = MEMORY[0x1F4188790](v83);
  uint32x4_t v82 = (char *)v75 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v22);
  uint64_t v25 = (char *)v75 - v24;
  unint64_t v87 = (ValueMetadata *)a3;
  uint64_t v99 = a3;
  uint64_t v100 = a4;
  uint64_t v85 = a5;
  uint64_t v101 = a5;
  uint64_t v102 = a6;
  uint64_t v26 = a1;
  (*(void (**)(uint64_t *__return_ptr, unint64_t (*)@<X0>(uint8x16_t *@<X0>, uint64_t@<X1>, unint64_t *@<X8>), char *, void *, uint64_t, uint64_t))(a6 + 72))(&v103, partial apply for closure #1 in String.init<A, B>(validating:as:), v98, &unk_1ECA01C60, a4, a6);
  uint64_t v27 = v104;
  if (v104 == 1)
  {
    uint32x4_t v80 = (ValueMetadata *)AssociatedTypeWitness;
    uint64_t v28 = (*(uint64_t (**)(uint64_t, uint64_t))(a6 + 40))(a4, a6);
    uint64_t v29 = (uint8x16_t *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v28 & ~(v28 >> 63), 0, (uint64_t)&_swiftEmptyArrayStorage);
    uint64_t v78 = v19;
    Swift::String::Index v30 = *(void (**)(char *, uint64_t, uint64_t))(v19 + 16);
    uint64_t v79 = v26;
    v30(v21, v26, a4);
    (*(void (**)(uint64_t, uint64_t))(a6 + 32))(a4, a6);
    uint64_t v31 = *(void (**)(char *, char *, const char *))(v86 + 16);
    uint64_t v32 = v82;
    uint32x4_t v76 = v25;
    uint64_t v33 = v25;
    uint64_t v34 = (uint64_t)v83;
    v31(v82, v33, v83);
    uint64_t v35 = (uint64_t)v85;
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness((uint64_t)v85, (uint64_t)v87, (uint64_t)v16, (uint64_t)&protocol requirements base descriptor for _UnicodeEncoding, associated conformance descriptor for _UnicodeEncoding._UnicodeEncoding.ForwardParser: _UnicodeParser);
    Swift::String::Index v37 = *(void (**)(const char *, uint64_t))(AssociatedConformanceWitness + 24);
    uint64_t v38 = v84;
    unint64_t v94 = v16;
    v37(v16, AssociatedConformanceWitness);
    uint64_t v93 = AssociatedConformanceWitness;
    uint64_t v91 = *(void (**)(void))(AssociatedConformanceWitness + 32);
    uint64_t v92 = AssociatedConformanceWitness + 32;
    uint64_t v77 = a4;
    uint64_t v39 = swift_getAssociatedConformanceWitness(a6, a4, v34, (uint64_t)&protocol requirements base descriptor for Sequence, associated conformance descriptor for Sequence.Sequence.Iterator: IteratorProtocol);
    unint64_t v89 = (void (**)(char *, unsigned __int8 *, ValueMetadata *))(v88 + 4);
    uint64_t v90 = v39;
    ++v88;
    v75[1] = v35 + 88;
    char v40 = 1;
    unint64_t v41 = v38;
    uint64_t v42 = v34;
    char v43 = v32;
    unint64_t v44 = v96;
LABEL_3:
    unint64_t v45 = v87;
    uint64_t v46 = v80;
    while (1)
    {
      Swift::UInt8 v47 = v43;
      uint64_t v48 = v42;
      uint64_t v49 = v41;
      uint64_t v50 = v94;
      v91();
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v44, (uint64_t)v97);
      if (EnumCaseMultiPayload) {
        break;
      }
      uint64_t v52 = v95;
      (*v89)((char *)v95, v44, v46);
      if (v45 == &type metadata for Unicode.UTF16)
      {
        if (v46 != (ValueMetadata *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _UIntBuffer<UInt16>)) {
          goto LABEL_38;
        }
        unsigned int v53 = *v52;
        unsigned int v54 = (unsigned __int16)*v52;
        if (v54 > 0x7F)
        {
          int v57 = (*v52 & 0x3F) << 8;
          if (v54 < 0x800)
          {
            unsigned int v58 = v54 >> 6;
            (*v88)(v52, v46);
            int v59 = v57 | v58;
            goto LABEL_16;
          }
          if ((*v52 & 0xF800) == 0xD800)
          {
LABEL_25:
            unsigned int v65 = ((uint64_t (*)(unsigned int *))v85[11])(v52);
            (*v88)(v52, v46);
            if (v65 >= 0x80)
            {
              int v66 = (v65 & 0x3F) << 8;
              if (v65 >= 0x800)
              {
                int v67 = (v66 | (v65 >> 6) & 0x3F) << 8;
                int v68 = (((v67 | (v65 >> 12) & 0x3F) << 8) | (v65 >> 18)) - 2122219023;
                int v69 = (v67 | (v65 >> 12)) + 8487393;
                if (HIWORD(v65)) {
                  unsigned int v55 = v68;
                }
                else {
                  unsigned int v55 = v69;
                }
              }
              else
              {
                int v59 = v66 | (v65 >> 6);
LABEL_16:
                unsigned int v55 = v59 + 33217;
              }
            }
            else
            {
              unsigned int v55 = v65 + 1;
            }
          }
          else
          {
            int v64 = (v57 | (v54 >> 6) & 0x3F) << 8;
            (*v88)(v52, v46);
            unsigned int v55 = (v64 & 0xFFFFFFF0 | ((unsigned __int16)v53 >> 12)) + 8487393;
          }
          unint64_t v41 = v49;
          uint64_t v42 = v48;
          char v43 = v47;
LABEL_18:
          unint64_t v60 = v29[1].u64[0];
          do
          {
            unint64_t v61 = v29[1].u64[1];
            if (v60 >= v61 >> 1)
            {
              int8x16_t v63 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((__objc2_class **)(v61 > 1), v60 + 1, 1, (uint64_t)v29);
              uint64_t v42 = v48;
              unint64_t v41 = v49;
              uint64_t v29 = (uint8x16_t *)v63;
              char v43 = v47;
            }
            v29[1].i64[0] = v60 + 1;
            v29[2].i8[v60] = v55 - 1;
            v40 &= v40 ^ 1 | ((char)(v55 - 1) >= 0);
            ++v60;
            BOOL v62 = v55 >= 0x100;
            v55 >>= 8;
          }
          while (v62);
          goto LABEL_3;
        }
        (*v88)(v52, v46);
        unsigned int v55 = (v53 + 1);
      }
      else
      {
        if (v45 != &type metadata for Unicode.UTF8) {
          goto LABEL_25;
        }
        if (v46 != &type metadata for _ValidUTF8Buffer) {
LABEL_38:
        }
          _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "_identityCast to wrong type", 27, 2, "Swift/Builtin.swift", 19, 2, 0x6CuLL, 0);
        char v56 = v52;
        unsigned int v55 = *v52;
        ((void (*)(unsigned int *))*v88)(v56);
        unint64_t v45 = v87;
      }
      unint64_t v41 = v49;
      uint64_t v42 = v48;
      char v43 = v47;
      if (v55) {
        goto LABEL_18;
      }
    }
    if (EnumCaseMultiPayload == 1)
    {
      (*(void (**)(uint64_t, uint64_t))(v78 + 8))(v79, v77);
      (*(void (**)(char *, const char *))(v81 + 8))(v41, v50);
      uint16x8_t v71 = *(void (**)(char *, uint64_t))(v86 + 8);
      v71(v47, v48);
      v71(v76, v48);
      swift_bridgeObjectRelease((uint64_t)v29);
      return 0;
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t))(v78 + 8))(v79, v77);
      (*(void (**)(char *, const char *))(v81 + 8))(v41, v50);
      uint64_t v72 = *(void (**)(char *, uint64_t))(v86 + 8);
      v72(v47, v48);
      v72(v76, v48);
      uint64_t v73 = v29[1].i64[0];
      swift_bridgeObjectRetain((unint64_t)v29);
      uint64_t v70 = specialized static String._uncheckedFromUTF8(_:isASCII:)(v29 + 2, v73, v40 & 1);
      swift_bridgeObjectRelease_n((uint64_t)v29, 2);
    }
  }
  else
  {
    uint64_t v70 = v103;
    (*(void (**)(uint64_t, uint64_t))(v19 + 8))(a1, a4);
    if (!v27) {
      return 0;
    }
  }
  return v70;
}

{
  Class *v11;
  uint64_t v12;
  char *v13;
  Class *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(char *, uint64_t, uint64_t);
  char *v24;
  uint64_t v25;
  uint64_t WitnessTable;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  int **v33;
  unsigned char v34[16];
  uint64_t v35;
  uint64_t v36;
  int **v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  uint64_t v11 = type metadata accessor for LazySequence(0, a4, a6, a4);
  MEMORY[0x1F4188790](v11 - 1);
  uint64_t v13 = (char *)&v32 - v12;
  uint64_t v14 = type metadata accessor for LazyMapSequence(0, a4, (uint64_t)&type metadata for UInt8, a6);
  uint64_t v15 = (uint64_t)*(v14 - 1);
  char v16 = MEMORY[0x1F4188790](v14);
  uint64_t v18 = (char *)&v32 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v16);
  uint64_t v20 = (char *)&v32 - v19;
  uint64_t v35 = a3;
  Swift::Bool v36 = a4;
  uint64_t v33 = a5;
  Swift::String::Index v37 = a5;
  uint64_t v38 = a6;
  (*(void (**)(uint64_t *__return_ptr, unint64_t (*)@<X0>(uint8x16_t *@<X0>, uint64_t@<X1>, unint64_t *@<X8>), unsigned char *, void *, uint64_t, uint64_t))(a6 + 72))(&v39, partial apply for closure #1 in String.init<A, B>(validating:as:), v34, &unk_1ECA01C60, a4, a6);
  unint64_t v21 = v40;
  uint64_t v22 = *(void *)(a4 - 8);
  if (v40 != 1)
  {
    Swift::String::Index v30 = v39;
    (*(void (**)(uint64_t, uint64_t))(v22 + 8))(a1, a4);
    if (v21) {
      return v30;
    }
    return 0;
  }
  uint64_t v23 = *(void (**)(char *, uint64_t, uint64_t))(v22 + 32);
  v23(v13, a1, a4);
  v23(v20, (uint64_t)v13, a4);
  uint64_t v24 = &v20[*((int *)v14 + 11)];
  *(void *)uint64_t v24 = protocol witness for ExpressibleByBooleanLiteral.init(BOOLeanLiteral:) in conformance Bool;
  *((void *)v24 + 1) = 0;
  (*(void (**)(char *, char *, Class *))(v15 + 32))(v18, v20, v14);
  uint64_t WitnessTable = swift_getWitnessTable(protocol conformance descriptor for LazyMapSequence<A, B>, (unint64_t *)v14, v25);
  uint64_t v28 = String.init<A, B>(validating:as:)((uint64_t)v18, v27, a3, (uint64_t)v14, v33, WitnessTable);
  if (!v29) {
    return 0;
  }
  return v28;
}

unint64_t static String._validate<A>(_:as:)(uint8x16_t *a1, uint64_t a2, ValueMetadata *a3, uint64_t a4, uint64_t a5)
{
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (int **)a5, a4, (uint64_t)&protocol requirements base descriptor for _UnicodeEncoding, associated type descriptor for _UnicodeEncoding.EncodedScalar);
  uint64_t v11 = *((void *)AssociatedTypeWitness - 1);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v81 = (char *)&v70 - v13;
  uint64_t v82 = v12;
  uint64x2_t v83 = type metadata accessor for Unicode.ParseResult(0, v12, v14, v15);
  MEMORY[0x1F4188790](v83);
  uint64_t v17 = (unsigned __int8 *)&v70 - v16;
  uint64x2_t v84 = swift_getAssociatedTypeWitness(0, (int **)a5, a4, (uint64_t)&protocol requirements base descriptor for _UnicodeEncoding, associated type descriptor for _UnicodeEncoding.ForwardParser);
  uint64_t v74 = *((void *)v84 - 1);
  MEMORY[0x1F4188790](v84);
  uint64_t v85 = (char *)&v70 - v18;
  unint64_t v21 = (ValueMetadata *)swift_getAssociatedTypeWitness(0, (int **)a5, a4, (uint64_t)&protocol requirements base descriptor for _UnicodeEncoding, associated type descriptor for _UnicodeEncoding.CodeUnit);
  if (v21 != &type metadata for UInt8) {
    goto LABEL_2;
  }
  if (type metadata accessor for UnsafeBufferPointer(0, (uint64_t)&type metadata for UInt8, v19, v20) != (Class *)&unk_1ECA01D20) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "_identityCast to wrong type", 27, 2, "Swift/Builtin.swift", 19, 2, 0x6CuLL, 0);
  }
  if (a3 == &type metadata for Unicode.UTF8)
  {
    char v57 = validateUTF8(_:)(a1->i64, a2);
    if ((v58 & 1) == 0) {
      return specialized static String._uncheckedFromUTF8(_:isASCII:)(a1, a2, v57 & 1);
    }
    return 0;
  }
  if (a3 == &type metadata for Unicode.ASCII)
  {
    if (_allASCII(_:)(a1->i64, a2)) {
      return specialized static String._uncheckedFromASCII(_:)(a1, a2);
    }
    return 0;
  }
LABEL_2:
  uint64_t v78 = v17;
  unint64_t v22 = 3 * a2;
  if ((unsigned __int128)(a2 * (__int128)3) >> 64 != (3 * a2) >> 63)
  {
    __break(1u);
LABEL_63:
    __break(1u);
LABEL_64:
    unint64_t v68 = 613;
LABEL_67:
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, v68, 0);
  }
  uint32x4_t v80 = (char *)swift_slowAlloc(3 * a2, 0xFFFFFFFFFFFFFFFFLL);
  if ((v22 & 0x8000000000000000) != 0) {
LABEL_60:
  }
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeMutableBufferPointer with negative count", 46, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x47uLL, 0);
  uint64_t v23 = v84;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(a5, a4, (uint64_t)v84, (uint64_t)&protocol requirements base descriptor for _UnicodeEncoding, associated conformance descriptor for _UnicodeEncoding._UnicodeEncoding.ForwardParser: _UnicodeParser);
  (*(void (**)(const char *, uint64_t))(AssociatedConformanceWitness + 24))(v23, AssociatedConformanceWitness);
  if (a1) {
    uint64_t v27 = &a1->i8[*((void *)v21[-1].Description + 9) * a2];
  }
  else {
    uint64_t v27 = 0;
  }
  v86[0] = a1;
  v86[1] = v27;
  uint64_t v30 = AssociatedConformanceWitness + 32;
  uint64_t v29 = *(void (**)(void *, unint64_t *, uint64_t, const char *, uint64_t))(AssociatedConformanceWitness
                                                                                            + 32);
  uint64_t v32 = (unint64_t *)type metadata accessor for UnsafeBufferPointer.Iterator(0, (uint64_t)v21, v25, v26);
  int64_t v33 = 0;
  uint64_t v76 = a5 + 88;
  uint64_t v77 = (void (**)(char *, unsigned __int8 *, uint64_t))(v11 + 32);
  uint16x8_t v75 = (void (**)(char *, uint64_t))(v11 + 8);
  int v79 = 1;
  uint64_t v73 = AssociatedConformanceWitness;
  while (1)
  {
    uint64_t WitnessTable = swift_getWitnessTable(protocol conformance descriptor for UnsafeBufferPointer<A>.Iterator, v32, v31);
    uint64_t v35 = v78;
    v29(v86, v32, WitnessTable, v84, AssociatedConformanceWitness);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v35, (uint64_t)v83);
    if (EnumCaseMultiPayload) {
      break;
    }
    uint64_t v70 = v32;
    uint64_t v71 = v30;
    uint64_t v72 = v29;
    Swift::String::Index v37 = v81;
    uint64_t v38 = v35;
    uint64_t v39 = v82;
    (*v77)(v81, v38, v82);
    unsigned int v40 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(a5 + 88))(v37, a4, a5);
    (*v75)(v37, v39);
    if (v40 >= 0x80)
    {
      int v53 = (v40 & 0x3F) << 8;
      if (v40 >= 0x800)
      {
        int v54 = (v53 | (v40 >> 6) & 0x3F) << 8;
        int v55 = (((v54 | (v40 >> 12) & 0x3F) << 8) | (v40 >> 18)) - 2122219023;
        int v56 = (v54 | (v40 >> 12)) + 8487393;
        if (HIWORD(v40)) {
          unsigned int v41 = v55;
        }
        else {
          unsigned int v41 = v56;
        }
      }
      else
      {
        unsigned int v41 = (v53 | (v40 >> 6)) + 33217;
      }
    }
    else
    {
      unsigned int v41 = v40 + 1;
    }
    uint64_t v42 = 4 - (__clz(v41) >> 3);
    BOOL v43 = __OFADD__(v33, v42);
    int64_t v44 = v33 + v42;
    if (v43) {
      goto LABEL_63;
    }
    if ((uint64_t)v22 >= v44)
    {
      int64_t v45 = v22;
      Swift::UInt8 v47 = v80;
    }
    else
    {
      int64_t v45 = v22 + (v22 >> 1);
      if (__OFADD__(v22, v22 >> 1))
      {
        __break(1u);
LABEL_66:
        unint64_t v68 = 614;
        goto LABEL_67;
      }
      uint64_t v46 = (char *)swift_slowAlloc(v22 + (v22 >> 1), 0xFFFFFFFFFFFFFFFFLL);
      if (v45 < 0) {
        goto LABEL_60;
      }
      if (v33 < 0) {
LABEL_61:
      }
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
      if ((uint64_t)v22 < v33) {
        goto LABEL_66;
      }
      Swift::UInt8 v47 = v46;
      uint64_t v48 = v80;
      if (v33)
      {
        if (v45 < (unint64_t)v33)
        {
          unint64_t v69 = 986;
          goto LABEL_70;
        }
        if (v46 != v80 || v46 >= &v80[v33]) {
          memmove(v46, v80, v33);
        }
      }
      swift_slowDealloc(v48);
    }
    int v49 = v79 & (v41 < 0x100);
    if (v45 < v33) {
      goto LABEL_61;
    }
    if (v33 < 0) {
      goto LABEL_64;
    }
    int64_t v50 = v45 - v33;
    if (v45 - v33 < 0) {
      goto LABEL_60;
    }
    if (!v50) {
      goto LABEL_71;
    }
    for (int64_t i = 0; i != v50; ++i)
    {
      if (v50 == i) {
        _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Index out of range", 18, 2, "Swift/Range.swift", 17, 2, 0x131uLL, 0);
      }
      unsigned int v52 = v41;
      if (!v41)
      {
        int64_t v50 = i;
        goto LABEL_40;
      }
      v47[v33 + i] = v41 - 1;
      v41 >>= 8;
    }
    if (v52 > 0xFF)
    {
LABEL_71:
      unint64_t v69 = 827;
LABEL_70:
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "buffer cannot contain every element from source.", 48, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, v69, 0);
    }
LABEL_40:
    int v79 = v49;
    uint32x4_t v80 = v47;
    unint64_t v22 = v45;
    BOOL v43 = __OFADD__(v33, v50);
    v33 += v50;
    uint64_t v30 = v71;
    uint64_t v29 = v72;
    uint64_t AssociatedConformanceWitness = v73;
    uint64_t v32 = v70;
    if (v43)
    {
      __break(1u);
      goto LABEL_71;
    }
  }
  if (EnumCaseMultiPayload == 1)
  {
    (*(void (**)(char *, const char *))(v74 + 8))(v85, v84);
    unint64_t v60 = v80;
    uint64_t v61 = specialized Collection.prefix(upTo:)(v33, (uint64_t)v80, v22);
    specialized Slice.deinitialize<A>()(v61, v62, v63);
    swift_slowDealloc(v60);
    return 0;
  }
  (*(void (**)(char *, const char *))(v74 + 8))(v85, v84);
  if (v79) {
    unint64_t v59 = v33 | 0xC000000000000000;
  }
  else {
    unint64_t v59 = v33;
  }
  unsigned int v65 = (unint64_t *)type metadata accessor for __SharedStringStorage();
  int v66 = swift_allocObject(v65, 0x31uLL, 7uLL);
  int v67 = v80;
  v66[2] = 0;
  v66[3] = v67;
  *((unsigned char *)v66 + 48) = 0;
  v66[4] = v59;
  v66[5] = 0;
  return v59;
}

uint64_t specialized transcode<A, B, C>(_:from:to:stoppingOnError:into:)(uint64_t isUniquelyReferenced_nonNull_native, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  char v37 = a3;
  char v38 = 0;
  int64_t v6 = (unsigned __int16 *)isUniquelyReferenced_nonNull_native;
  unsigned int v7 = 0;
  unsigned __int8 v8 = 0;
  unsigned int v40 = 0;
  unsigned __int8 v41 = 0;
  while (1)
  {
    if (!v8)
    {
      if (!v6 || v6 == (unsigned __int16 *)a2) {
        return v38 & 1;
      }
      unsigned int v9 = *v6;
      uint64_t v10 = v6 + 1;
      if ((v9 & 0xF800) == 0xD800)
      {
        unsigned int v7 = v7 & 0xFFFF0000 | v9;
        unsigned __int8 v8 = 16;
        ++v6;
        if (v10 == (unsigned __int16 *)a2) {
          goto LABEL_13;
        }
        goto LABEL_9;
      }
      char v15 = 1;
      ++v6;
      unsigned int v7 = v9;
LABEL_22:
      if ((unsigned __int16)v7 < 0x80u)
      {
        unsigned int v16 = (v7 + 1);
        if ((_BYTE)v7 == 0xFF) {
          goto LABEL_3;
        }
        goto LABEL_24;
      }
      int v21 = (v7 & 0x3F) << 8;
      if ((unsigned __int16)v7 < 0x800u)
      {
        int v22 = v21 | ((unsigned __int16)v7 >> 6);
LABEL_37:
        unsigned int v16 = v22 + 33217;
        goto LABEL_24;
      }
      if ((v7 & 0xF800) != 0xD800)
      {
        int v33 = ((v21 | ((unsigned __int16)v7 >> 6) & 0x3F) << 8) | ((unsigned __int16)v7 >> 12);
LABEL_54:
        unsigned int v16 = v33 + 8487393;
        goto LABEL_24;
      }
      if (v15)
      {
        if ((unsigned __int16)v7 >= 0x80u)
        {
          int v35 = (v7 & 0x3F) << 8;
          if ((unsigned __int16)v7 < 0x800u)
          {
            int v22 = v35 | ((unsigned __int16)v7 >> 6);
            goto LABEL_37;
          }
          int v33 = ((unsigned __int16)v7 >> 12) | ((v35 | ((unsigned __int16)v7 >> 6) & 0x3F) << 8);
          goto LABEL_54;
        }
        unsigned int v16 = (unsigned __int16)v7 + 1;
      }
      else
      {
        unsigned int v34 = ((v7 & 0x3FF) << 10) | HIWORD(v7) & 0x3FF;
        unsigned int v16 = (((v34 + 0x10000) >> 4) & 0x3F00 | ((v34 + 0x10000) >> 18) | (((v34 >> 6) & 0x3F | (((v34 + 0x10000) & 0x3F) << 8)) << 16))
            - 2122219023;
      }
LABEL_24:
      uint64_t v17 = *a4;
      do
      {
        BOOL isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v17);
        *a4 = v17;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          BOOL isUniquelyReferenced_nonNull_native = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v17 + 16) + 1, 1, v17);
          uint64_t v17 = isUniquelyReferenced_nonNull_native;
          *a4 = isUniquelyReferenced_nonNull_native;
        }
        unint64_t v19 = *(void *)(v17 + 16);
        unint64_t v18 = *(void *)(v17 + 24);
        if (v19 >= v18 >> 1)
        {
          BOOL isUniquelyReferenced_nonNull_native = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((__objc2_class **)(v18 > 1), v19 + 1, 1, v17);
          uint64_t v17 = isUniquelyReferenced_nonNull_native;
        }
        *(void *)(v17 + 16) = v19 + 1;
        *(unsigned char *)(v17 + v19 + 32) = v16 - 1;
        *a4 = v17;
        BOOL v20 = v16 >= 0x100;
        v16 >>= 8;
      }
      while (v20);
      goto LABEL_3;
    }
    if ((v7 & 0xF800) != 0xD800)
    {
      lazy protocol witness table accessor for type Unicode.UTF16.ForwardParser and conformance Unicode.UTF16.ForwardParser(isUniquelyReferenced_nonNull_native, a2, a3);
      uint64_t v23 = protocol witness for _UTFParser._buffer.modify in conformance Unicode.UTF8.ReverseParser();
      specialized RangeReplaceableCollection.remove(at:)(0);
      BOOL isUniquelyReferenced_nonNull_native = ((uint64_t (*)(unsigned char *, void))v23)(v39, 0);
      unsigned int v7 = (unsigned __int16)v7;
      char v15 = 1;
      goto LABEL_22;
    }
    if (!v6) {
      goto LABEL_13;
    }
    uint64_t v10 = v6;
    if (v6 == (unsigned __int16 *)a2) {
      goto LABEL_13;
    }
LABEL_9:
    unsigned int v11 = v8;
    if (v8 > 0x1Fu) {
      _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UIntBuffer.swift", 22, 2, 0xBEuLL, 0);
    }
    int64_t v6 = v10 + 1;
    unsigned int v7 = (*v10 << v8) | ((-65535 << v8) - 1) & v7;
    v8 += 16;
    if (v11 <= 0xF && v6 != (unsigned __int16 *)a2)
    {
      int64_t v6 = v10 + 2;
      unsigned int v7 = (v10[1] << v8) | ((0x10000 << v11) - 1) & v7;
      unsigned __int8 v8 = v11 + 32;
    }
LABEL_13:
    unsigned int v12 = v7 & 0xFC00FC00;
    if ((v7 & 0xFC00FC00) == 0xDC00D800) {
      char v13 = 32;
    }
    else {
      char v13 = 16;
    }
    unsigned __int8 v41 = v8 - v13;
    if (v12 == -603924480) {
      char v14 = 32;
    }
    else {
      char v14 = 16;
    }
    unsigned int v40 = (unint64_t)v7 >> v14;
    if (v12 == -603924480)
    {
      char v15 = 0;
      goto LABEL_22;
    }
    if (v37) {
      break;
    }
    uint64_t v24 = (__objc2_class **)*a4;
    BOOL v25 = swift_isUniquelyReferenced_nonNull_native(*a4);
    *a4 = (uint64_t)v24;
    if (!v25)
    {
      uint64_t v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, (int64_t)&v24[2]->isa + 1, 1, (uint64_t)v24);
      *a4 = (uint64_t)v24;
    }
    uint64_t v27 = v24[2];
    unint64_t v26 = (unint64_t)v24[3];
    if ((unint64_t)v27 >= v26 >> 1) {
      uint64_t v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((__objc2_class **)(v26 > 1), (int64_t)&v27->isa + 1, 1, (uint64_t)v24);
    }
    long long v24[2] = (__objc2_class *)((char *)&v27->isa + 1);
    *((unsigned char *)&v27->info + (void)v24) = -17;
    *a4 = (uint64_t)v24;
    BOOL v28 = swift_isUniquelyReferenced_nonNull_native((uint64_t)v24);
    *a4 = (uint64_t)v24;
    if (!v28)
    {
      uint64_t v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, (int64_t)&v24[2]->isa + 1, 1, (uint64_t)v24);
      *a4 = (uint64_t)v24;
    }
    uint64_t v30 = v24[2];
    unint64_t v29 = (unint64_t)v24[3];
    if ((unint64_t)v30 >= v29 >> 1) {
      uint64_t v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((__objc2_class **)(v29 > 1), (int64_t)&v30->isa + 1, 1, (uint64_t)v24);
    }
    long long v24[2] = (__objc2_class *)((char *)&v30->isa + 1);
    *((unsigned char *)&v30->info + (void)v24) = -65;
    *a4 = (uint64_t)v24;
    BOOL isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native((uint64_t)v24);
    *a4 = (uint64_t)v24;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      BOOL isUniquelyReferenced_nonNull_native = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, (int64_t)&v24[2]->isa + 1, 1, (uint64_t)v24);
      uint64_t v24 = (__objc2_class **)isUniquelyReferenced_nonNull_native;
      *a4 = isUniquelyReferenced_nonNull_native;
    }
    uint64_t v32 = v24[2];
    unint64_t v31 = (unint64_t)v24[3];
    if ((unint64_t)v32 >= v31 >> 1)
    {
      BOOL isUniquelyReferenced_nonNull_native = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((__objc2_class **)(v31 > 1), (int64_t)&v32->isa + 1, 1, (uint64_t)v24);
      uint64_t v24 = (__objc2_class **)isUniquelyReferenced_nonNull_native;
    }
    long long v24[2] = (__objc2_class *)((char *)&v32->isa + 1);
    *((unsigned char *)&v32->info + (void)v24) = -67;
    *a4 = (uint64_t)v24;
    char v38 = 1;
LABEL_3:
    unsigned __int8 v8 = v41;
    unsigned int v7 = v40;
  }
  char v38 = 1;
  return v38 & 1;
}

uint64_t transcode<A, B, C>(_:from:to:stoppingOnError:into:)(uint64_t a1, uint64_t a2, uint64_t a3, int a4, void (*a5)(char *), uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int **a11, int **a12)
{
  uint16x8_t v75 = a5;
  uint64_t v76 = a6;
  int v57 = a4;
  uint64_t v72 = a2;
  uint64_t v85 = a1;
  int v54 = a12;
  uint64_t v81 = a10;
  uint64_t v87 = a9;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, a12, a9, (uint64_t)&protocol requirements base descriptor for _UnicodeEncoding, associated type descriptor for _UnicodeEncoding.EncodedScalar);
  uint64_t v74 = (void (**)(char *, const char *))*((void *)AssociatedTypeWitness - 1);
  uint64_t v15 = MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v61 = (char *)&v54 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v15);
  uint64_t v63 = (char *)&v54 - v17;
  int v67 = type metadata accessor for Optional(0, (uint64_t)AssociatedTypeWitness, v18, v19);
  unsigned int v65 = (void (**)(char *, Class *))*(v67 - 1);
  uint64_t v20 = MEMORY[0x1F4188790](v67);
  uint64_t v70 = (char *)&v54 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  uint64_t v23 = (char *)&v54 - v22;
  uint64_t v24 = swift_getAssociatedTypeWitness(0, a11, a8, (uint64_t)&protocol requirements base descriptor for _UnicodeEncoding, associated type descriptor for _UnicodeEncoding.EncodedScalar);
  int v66 = (void (**)(char *, uint64_t))*((void *)v24 - 1);
  MEMORY[0x1F4188790](v24);
  unint64_t v26 = (char *)&v54 - v25;
  uint64_t v86 = v27;
  uint32x4_t v80 = type metadata accessor for Unicode.ParseResult(0, v27, v28, v29);
  MEMORY[0x1F4188790](v80);
  unint64_t v31 = (unsigned __int8 *)&v54 - v30;
  uint64_t v32 = swift_getAssociatedTypeWitness(0, a11, a8, (uint64_t)&protocol requirements base descriptor for _UnicodeEncoding, associated type descriptor for _UnicodeEncoding.ForwardParser);
  uint64_t v56 = *((void *)v32 - 1);
  uint64_t v33 = MEMORY[0x1F4188790](v32);
  int v35 = (char *)&v54 - v34;
  MEMORY[0x1F4188790](v33);
  uint64_t v55 = v37;
  char v38 = *(void (**)(void))(v37 + 16);
  uint64_t v82 = (char *)&v54 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v85 = a7;
  v38();
  uint64_t v73 = a8;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness((uint64_t)a11, a8, (uint64_t)v32, (uint64_t)&protocol requirements base descriptor for _UnicodeEncoding, associated conformance descriptor for _UnicodeEncoding._UnicodeEncoding.ForwardParser: _UnicodeParser);
  unsigned int v40 = *(void (**)(const char *, uint64_t))(AssociatedConformanceWitness + 24);
  uint64x2_t v83 = v35;
  uint64x2_t v84 = v32;
  v40(v32, AssociatedConformanceWitness);
  int v59 = 0;
  uint64_t v79 = AssociatedConformanceWitness;
  uint64_t v77 = *(void (**)(char *, uint64_t, uint64_t, const char *, uint64_t))(AssociatedConformanceWitness + 32);
  uint64_t v78 = AssociatedConformanceWitness + 32;
  unint64_t v69 = (void (**)(char *, unsigned __int8 *, uint64_t))(v66 + 4);
  unint64_t v68 = v54 + 13;
  unsigned __int8 v41 = (uint64_t (**)(char *, uint64_t, const char *))(v74 + 6);
  int v64 = (void (**)(char *, char *, Class *))(v65 + 2);
  uint64_t v62 = (void (**)(char *, char *, const char *))(v74 + 4);
  ++v74;
  ++v66;
  ++v65;
  uint64_t v42 = (uint64_t)v54;
  unint64_t v60 = v54 + 10;
  uint64_t v71 = a11;
  v77(v82, v85, v81, v84, v79);
  while (1)
  {
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v31, (uint64_t)v80);
    if (EnumCaseMultiPayload) {
      break;
    }
    (*v69)(v26, v31, v86);
    (*(void (**)(char *, uint64_t, uint64_t, int **))(v42 + 104))(v26, v72, v73, v71);
    Swift::UInt8 v47 = *v41;
    unsigned int v48 = (*v41)(v23, 1, AssociatedTypeWitness);
    int v49 = v70;
    if (v48 == 1)
    {
      (*v66)(v26, v86);
      (*v65)(v23, v67);
LABEL_3:
      BOOL v43 = v61;
      uint64_t v44 = v87;
      (*(void (**)(uint64_t, uint64_t))(v42 + 80))(v87, v42);
      uint64_t v45 = swift_getAssociatedConformanceWitness(v42, v44, (uint64_t)AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for _UnicodeEncoding, associated conformance descriptor for _UnicodeEncoding._UnicodeEncoding.EncodedScalar: BidirectionalCollection);
      Sequence.forEach(_:)(v75, v76, (uint64_t)AssociatedTypeWitness, *(int ***)(*(void *)(v45 + 8) + 8));
      (*v74)(v43, AssociatedTypeWitness);
      goto LABEL_4;
    }
    int64_t v50 = v67;
    (*v64)(v70, v23, v67);
    if (v47(v49, 1, AssociatedTypeWitness) == 1)
    {
      (*v66)(v26, v86);
      char v58 = *v65;
      v58(v23, v50);
      v58(v49, v50);
      goto LABEL_3;
    }
    uint64_t v51 = v63;
    (*v62)(v63, v49, AssociatedTypeWitness);
    uint64_t v52 = swift_getAssociatedConformanceWitness(v42, v87, (uint64_t)AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for _UnicodeEncoding, associated conformance descriptor for _UnicodeEncoding._UnicodeEncoding.EncodedScalar: BidirectionalCollection);
    Sequence.forEach(_:)(v75, v76, (uint64_t)AssociatedTypeWitness, *(int ***)(*(void *)(v52 + 8) + 8));
    (*v74)(v51, AssociatedTypeWitness);
    (*v66)(v26, v86);
    (*v65)(v23, v50);
LABEL_4:
    v77(v82, v85, v81, v84, v79);
  }
  if (EnumCaseMultiPayload == 1)
  {
    int v59 = 1;
    if ((v57 & 1) == 0) {
      goto LABEL_3;
    }
  }
  (*(void (**)(char *, const char *))(v56 + 8))(v83, v84);
  (*(void (**)(char *, uint64_t))(v55 + 8))(v82, v85);
  return v59 & 1;
}

unint64_t closure #1 in String.init<A, B>(validating:as:)@<X0>(uint8x16_t *a1@<X0>, uint64_t a2@<X1>, ValueMetadata *a3@<X2>, uint64_t a4@<X4>, unint64_t *a5@<X8>)
{
  if (a1)
  {
    if (a2 < 0) {
      _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeBufferPointer with negative count", 39, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x53FuLL, 0);
    }
  }
  else
  {
    a2 = 0;
  }
  unint64_t result = static String._validate<A>(_:as:)(a1, a2, a3, (uint64_t)a3, a4);
  *a5 = result;
  a5[1] = v7;
  return result;
}

int64_t String.init(unsafeUninitializedCapacity:initializingUTF8With:)(int64_t a1, uint64_t (*a2)(int64_t, int64_t))
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  if (a1 > 15) {
    return specialized static String._fromLargeUTF8Repairing(uninitializedCapacity:initializingWith:)(a1, a2);
  }
  uint8x16_t v14 = (uint8x16_t)xmmword_18162AE10;
  if (a1 < 0) {
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeMutableBufferPointer with negative count", 46, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x47uLL, 0);
  }
  int64_t result = a2((int64_t)&v14, a1);
  if (!v2)
  {
    int64_t v4 = result;
    if (result <= 0)
    {
      if (result) {
        _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/SmallString.swift", 23, 2, 0x109uLL, 0);
      }
      return 0;
    }
    else
    {
      char v5 = 8;
      if (result <= 8) {
        char v6 = 8;
      }
      else {
        char v6 = result;
      }
      char v7 = 56 * v6;
      if (result < 8) {
        char v5 = result;
      }
      unint64_t v8 = 0xFFFFFFFFFFFFFFFFLL >> (v7 & 0x38);
      if ((unint64_t)result <= 8) {
        unint64_t v8 = 0;
      }
      int64_t result = v14.i64[0] & (0xFFFFFFFFFFFFFFFFLL >> ((56 * v5) & 0x38));
      uint64_t v9 = v14.i64[1] & v8;
      BOOL v10 = ((v14.i64[1] & v8 | result) & 0x8080808080808080) == 0;
      unint64_t v11 = 0xA000000000000000;
      if (v10) {
        unint64_t v11 = 0xE000000000000000;
      }
      unint64_t v12 = v11 | (v4 << 56);
      if (((v12 | v9) & 0x4000000000000000) == 0)
      {
        v14.i64[0] = result;
        v14.i64[1] = v9 & 0xFFFFFFFFFFFFFFLL;
        closure #2 in String.init(_uninitializedCapacity:initializingUTF8With:)(&v14, ((v12 | v9) >> 56) & 0xF, &v13);
        return v13;
      }
    }
  }
  return result;
}

uint64_t closure #2 in String.init(_uninitializedCapacity:initializingUTF8With:)@<X0>(uint8x16_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6 = validateUTF8(_:)(a1->i64, a2);
  if (v8) {
    uint64_t result = repairUTF8(_:firstKnownBrokenRange:)(a1, a2, v6, v7);
  }
  else {
    uint64_t result = specialized static String._uncheckedFromUTF8(_:isASCII:)(a1, a2, v6 & 1);
  }
  *a3 = result;
  a3[1] = v10;
  return result;
}

void String._slowWithCString<A, B>(encodedAs:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
}

void closure #1 in String._slowWithCString<A, B>(encodedAs:_:)(unsigned __int8 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, void (*a5)(unint64_t)@<X4>, uint64_t a6@<X5>, uint64_t (**a7)(char *, const char *)@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10)
{
  unint64_t v96 = a7;
  uint64_t v83 = a6;
  uint64x2_t v84 = a5;
  uint64_t v95 = a2;
  uint64_t v82 = a9;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (int **)a10, a8, (uint64_t)&protocol requirements base descriptor for _UnicodeEncoding, associated type descriptor for _UnicodeEncoding.CodeUnit);
  uint64_t v77 = *((void *)AssociatedTypeWitness - 1);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint32x4_t v80 = (char *)&v75 - v15;
  uint64_t v16 = swift_getAssociatedTypeWitness(0, (int **)a10, a8, (uint64_t)&protocol requirements base descriptor for _UnicodeEncoding, associated type descriptor for _UnicodeEncoding.EncodedScalar);
  uint64_t v93 = (void (**)(char *, Class *))*((void *)v16 - 1);
  uint64_t v17 = MEMORY[0x1F4188790](v16);
  uint64_t v92 = (char *)&v75 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v17);
  uint64_t v87 = (char *)&v75 - v19;
  uint64_t v97 = type metadata accessor for Optional(0, (uint64_t)v16, v20, v21);
  uint64_t v91 = (uint64_t)*(v97 - 1);
  uint64_t v22 = MEMORY[0x1F4188790](v97);
  uint64_t v90 = (char *)&v75 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v22);
  uint64_t v27 = (char *)&v75 - v26;
  int64_t v107 = &_swiftEmptyArrayStorage;
  unint64_t v28 = HIBYTE(a4) & 0xC;
  if ((a4 & 0x2000000000000000) == 0) {
    unint64_t v28 = a3 & 0xFFFFFFFFFFFCLL;
  }
  Swift::Int v29 = (v28 >> 2) + 1;
  uint64_t v81 = (uint64_t *)AssociatedTypeWitness;
  uint64_t v79 = type metadata accessor for Array(0, (uint64_t)AssociatedTypeWitness, v24, v25);
  Array._reserveCapacityImpl(minimumCapacity:growForAppend:)(v29, 0);
  uint64_t v78 = &v75;
  unsigned int v33 = 0;
  unsigned __int8 v34 = 0;
  if (a1) {
    int v35 = (char *)&a1[v95];
  }
  else {
    int v35 = 0;
  }
  uint64_t v100 = v96;
  uint64_t v101 = a8;
  unint64_t v94 = (unsigned int (**)(char *, uint64_t, const char *))(v93 + 6);
  uint64_t v95 = a10 + 104;
  uint64_t v102 = a10;
  uint64_t v103 = &v107;
  unint64_t v89 = (void (**)(char *, char *, Class *))(v91 + 16);
  uint64_t v86 = (void (**)(char *, char *, const char *))(v93 + 4);
  unsigned int v105 = 0;
  unint64_t v96 = (uint64_t (**)(char *, const char *))(v93 + 1);
  uint64_t v93 = (void (**)(char *, Class *))(v91 + 8);
  unsigned __int8 v106 = 0;
  uint64_t v91 = a10 + 80;
  unsigned int v88 = v35;
  uint64_t v85 = v16;
  while (1)
  {
    uint64_t v39 = v97;
    if (!v34) {
      break;
    }
    if ((v33 & 0x80) == 0)
    {
      lazy protocol witness table accessor for type Unicode.UTF8.ForwardParser and conformance Unicode.UTF8.ForwardParser(v30, v31, v32);
      uint64_t v76 = protocol witness for _UTFParser._buffer.modify in conformance Unicode.UTF8.ReverseParser();
      specialized RangeReplaceableCollection.remove(at:)(0);
      uint64_t v30 = ((uint64_t (*)(void *, void))v76)(v104, 0);
      int v43 = (v33 + 1);
      goto LABEL_39;
    }
    if (a1)
    {
      unsigned __int8 v41 = a1;
      if (a1 != (unsigned __int8 *)v35)
      {
LABEL_16:
        if (v34 >= 0x20u) {
          _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UIntBuffer.swift", 22, 2, 0xBEuLL, 0);
        }
        a1 = v41 + 1;
        unsigned int v33 = (*v41 << v34) | ((-255 << v34) - 1) & v33;
        unsigned __int8 v44 = v34 + 8;
        if (v34 <= 0x17u && a1 != (unsigned __int8 *)v35)
        {
          a1 = v41 + 2;
          unsigned int v33 = (v41[1] << v44) | ((-65280 << v34) - 1) & v33;
          unsigned __int8 v44 = v34 + 16;
          if (v34 <= 0xFu && a1 != (unsigned __int8 *)v35)
          {
            a1 = v41 + 3;
            unsigned int v33 = (v41[2] << v44) | ((-16711680 << v34) - 1) & v33;
            unsigned __int8 v44 = v34 + 24;
            if (v34 <= 7u && a1 != (unsigned __int8 *)v35)
            {
              a1 = v41 + 4;
              unsigned int v33 = (v41[3] << v44) | ((0x1000000 << v34) - 1) & v33;
              unsigned __int8 v44 = v34 + 32;
            }
          }
        }
        unsigned __int8 v34 = v44;
      }
    }
LABEL_25:
    if ((v33 & 0xC0E0) == 0x80C0)
    {
      if ((v33 & 0x1E) == 0) {
        goto LABEL_36;
      }
      unsigned int v45 = 16;
      char v46 = 1;
    }
    else if ((v33 & 0xC0C0F0) == 0x8080E0)
    {
      if ((v33 & 0x200F) == 0 || (v33 & 0x200F) == 0x200D) {
        goto LABEL_36;
      }
      unsigned int v45 = 24;
      char v46 = 1;
    }
    else
    {
      if ((v33 & 0xC0C0C0F8) != 0x808080F0 || (v33 & 0x3007) == 0 || __rev16(v33 & 0x3007) > 0x400)
      {
LABEL_36:
        uint64_t v30 = Unicode.UTF8.ForwardParser._invalidLength()();
        char v46 = 0;
        unsigned int v45 = 8 * v30;
        goto LABEL_37;
      }
      unsigned int v45 = 32;
      char v46 = 1;
    }
LABEL_37:
    unsigned int v105 = (unint64_t)v33 >> (v45 & 0x38);
    unsigned __int8 v106 = v34 - v45;
    if ((v46 & 1) == 0) {
      goto LABEL_41;
    }
    int v43 = ((1 << ((v45 >> 1) & 0x1C) << ((v45 >> 1) & 0x1C)) - 1) & (v33 + 16843009);
LABEL_39:
    LODWORD(v104[0]) = v43;
    Swift::UInt8 v47 = *(void (**)(void *, ValueMetadata *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(a10 + 104);
    unint64_t v48 = lazy protocol witness table accessor for type Unicode.UTF8 and conformance Unicode.UTF8(v30, v31, v32);
    v47(v104, &type metadata for Unicode.UTF8, &type metadata for Unicode.UTF8, v48, a8, a10);
    int v49 = *v94;
    if ((*v94)(v27, 1, v16) == 1)
    {
      (*v93)(v27, v39);
LABEL_41:
      uint64_t v50 = v98;
LABEL_8:
      uint64_t v37 = v92;
      (*(void (**)(uint64_t, uint64_t))(a10 + 80))(a8, a10);
      uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(a10, a8, (uint64_t)v16, (uint64_t)&protocol requirements base descriptor for _UnicodeEncoding, associated conformance descriptor for _UnicodeEncoding._UnicodeEncoding.EncodedScalar: BidirectionalCollection);
      Sequence.forEach(_:)((void (*)(char *))partial apply for closure #1 in closure #1 in String._slowWithCString<A, B>(encodedAs:_:), (uint64_t)v99, (uint64_t)v16, *(int ***)(*(void *)(AssociatedConformanceWitness + 8) + 8));
      uint64_t v98 = v50;
      uint64_t v30 = (*v96)(v37, v16);
      goto LABEL_9;
    }
    uint64_t v51 = v90;
    (*v89)(v90, v27, v39);
    unsigned int v52 = v49(v51, 1, v16);
    uint64_t v50 = v98;
    if (v52 == 1)
    {
      uint64_t v36 = *v93;
      (*v93)(v27, v39);
      v36(v51, v39);
      uint64_t v16 = v85;
      int v35 = v88;
      goto LABEL_8;
    }
    int v53 = v87;
    (*v86)(v87, v51, v16);
    uint64_t v54 = swift_getAssociatedConformanceWitness(a10, a8, (uint64_t)v16, (uint64_t)&protocol requirements base descriptor for _UnicodeEncoding, associated conformance descriptor for _UnicodeEncoding._UnicodeEncoding.EncodedScalar: BidirectionalCollection);
    Sequence.forEach(_:)((void (*)(char *))partial apply for closure #1 in closure #1 in String._slowWithCString<A, B>(encodedAs:_:), (uint64_t)v99, (uint64_t)v16, *(int ***)(*(void *)(v54 + 8) + 8));
    uint64_t v98 = v50;
    (*v96)(v53, v16);
    uint64_t v30 = ((uint64_t (*)(char *, Class *))*v93)(v27, v39);
    int v35 = v88;
LABEL_9:
    unsigned __int8 v34 = v106;
    unsigned int v33 = v105;
  }
  if (a1 && a1 != (unsigned __int8 *)v35)
  {
    int v40 = (char)*a1++;
    unsigned __int8 v41 = a1;
    int v42 = v40;
    if ((v40 & 0x80000000) == 0)
    {
      int v43 = v42 + 1;
      goto LABEL_39;
    }
    unsigned int v33 = v33 & 0xFFFFFF00 | v42;
    unsigned __int8 v34 = 8;
    if (a1 != (unsigned __int8 *)v35) {
      goto LABEL_16;
    }
    goto LABEL_25;
  }
  v104[0] = 0;
  uint64_t v55 = v81;
  uint64_t v56 = swift_getAssociatedConformanceWitness(a10, a8, (uint64_t)v81, (uint64_t)&protocol requirements base descriptor for _UnicodeEncoding, associated conformance descriptor for _UnicodeEncoding._UnicodeEncoding.CodeUnit: FixedWidthInteger);
  uint64_t v57 = *(void *)(v56 + 8);
  char v58 = *(void (**)(void *, ValueMetadata *, unint64_t, uint64_t *, uint64_t))(v57 + 88);
  unint64_t v61 = lazy protocol witness table accessor for type Int and conformance Int(v56, v59, v60);
  uint64_t v62 = (uint64_t)v80;
  v58(v104, &type metadata for Int, v61, v55, v57);
  Array.append(_:)(v62, (uint64_t)v79);
  uint64_t v63 = (uint64_t)v107;
  swift_bridgeObjectRetain_n((uint64_t)v107, 2);
  if (_swift_isClassOrObjCExistentialType((uint64_t)v55, v55) && (v63 < 0 || (v63 & 0x4000000000000000) != 0))
  {
    Swift::Int v68 = Array._getCount()();
    uint64_t v65 = v77;
    if (!v68)
    {
      swift_bridgeObjectRelease(v63);
      unint64_t v66 = 0;
      goto LABEL_55;
    }
    v104[0] = v63;
    uint64_t v72 = (unint64_t *)type metadata accessor for _ArrayBuffer(0, (uint64_t)v55, v69, v70);
    uint64_t WitnessTable = swift_getWitnessTable(protocol conformance descriptor for _ArrayBuffer<A>, v72, v73);
    int v67 = (void *)(*(uint64_t (**)(unint64_t *, uint64_t))(WitnessTable + 56))(v72, WitnessTable);
    swift_bridgeObjectRelease(v63);
    unint64_t v66 = (unint64_t)v67
        + ((*(unsigned __int8 *)(v65 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v65 + 80));
  }
  else
  {
    swift_bridgeObjectRelease(v63);
    BOOL isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType((uint64_t)v55, v55);
    uint64_t v65 = v77;
    if (isClassOrObjCExistentialType) {
      unint64_t v66 = (v63 & 0xFFFFFFFFFFFFFF8)
    }
          + ((*(unsigned __int8 *)(v77 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v77 + 80));
    else {
      unint64_t v66 = v63 + ((*(unsigned __int8 *)(v77 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v77 + 80));
    }
LABEL_55:
    if (_swift_isClassOrObjCExistentialType((uint64_t)v55, v55) && (v63 < 0 || (v63 & 0x4000000000000000) != 0))
    {
      if (v63 < 0) {
        int v67 = (void *)v63;
      }
      else {
        int v67 = (void *)(v63 & 0xFFFFFFFFFFFFFF8);
      }
      swift_unknownObjectRetain(v67);
      if (!v66) {
        goto LABEL_70;
      }
LABEL_62:
      swift_bridgeObjectRelease(v63);
    }
    else
    {
      if (_swift_isClassOrObjCExistentialType((uint64_t)v55, v55)) {
        int v67 = (void *)(v63 & 0xFFFFFFFFFFFFFF8);
      }
      else {
        int v67 = (void *)v63;
      }
      swift_bridgeObjectRetain(v63);
      if (v66) {
        goto LABEL_62;
      }
LABEL_70:
      int v71 = ~*(_DWORD *)(v65 + 80);
      swift_bridgeObjectRelease(v63);
      unint64_t v66 = *(void *)&v71 | 0xFFFFFFFFFFFFFF00;
    }
  }
  v84(v66);
  swift_bridgeObjectRelease(v63);
  swift_unknownObjectRelease(v67);
}

uint64_t _StringGuts.count.getter(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x2000000000000000) != 0) {
    return HIBYTE(a2) & 0xF;
  }
  else {
    return a1 & 0xFFFFFFFFFFFFLL;
  }
}

uint64_t closure #1 in closure #1 in String._slowWithCString<A, B>(encodedAs:_:)(uint64_t a1, uint64_t a2, uint64_t a3, int **a4)
{
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, a4, a3, (uint64_t)&protocol requirements base descriptor for _UnicodeEncoding, associated type descriptor for _UnicodeEncoding.CodeUnit);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v7 = (char *)&v13 - v6;
  (*(void (**)(char *, uint64_t, const char *))(v8 + 16))((char *)&v13 - v6, a1, AssociatedTypeWitness);
  unint64_t v11 = type metadata accessor for Array(0, (uint64_t)AssociatedTypeWitness, v9, v10);
  return Array.append(_:)((uint64_t)v7, (uint64_t)v11);
}

Swift::Bool __swiftcall _GraphemeBreakingState.shouldBreak(between:and:)(Swift::Unicode::Scalar between, Swift::Unicode::Scalar and)
{
  if (between._value == 13 && and._value == 10)
  {
    char v5 = 0;
    return v5 & 1;
  }
  if (hasBreakWhenPaired #1 (_:) in _hasGraphemeBreakBetween(_:_:)(between._value)
    && hasBreakWhenPaired #1 (_:) in _hasGraphemeBreakBetween(_:_:)(and._value))
  {
LABEL_45:
    char v5 = 1;
    return v5 & 1;
  }
  char v6 = Unicode._GraphemeBreakProperty.init(from:)(between._value);
  char v5 = v6;
  if (v6 != 1)
  {
    unsigned __int8 v7 = v6;
    char v8 = Unicode._GraphemeBreakProperty.init(from:)(and._value);
    char v9 = v8;
    switch(v8)
    {
      case 0:
        if (v7 == 7) {
          goto LABEL_28;
        }
        if (v7) {
          goto LABEL_40;
        }
        goto LABEL_44;
      case 1:
        goto LABEL_44;
      case 2:
      case 12:
        if (v7 == 3 || v7 == 2 && v2[1])
        {
          if (v2[2])
          {
            if (v8 != 2)
            {
              HIDWORD(v13) = and._value - 2381;
              LODWORD(v13) = and._value - 2381;
              unsigned int v12 = v13 >> 7;
              if (v12 >= 9)
              {
                char v14 = 1;
                char v10 = 1;
                goto LABEL_62;
              }
              char v10 = 1;
              char v14 = 1;
              if (((0x15Bu >> v12) & 1) == 0) {
                goto LABEL_62;
              }
              goto LABEL_61;
            }
            char v10 = 1;
            goto LABEL_50;
          }
          char v10 = 1;
        }
        else
        {
          if (v2[2])
          {
            if (v8 != 2)
            {
              HIDWORD(v17) = and._value - 2381;
              LODWORD(v17) = and._value - 2381;
              unsigned int v16 = v17 >> 7;
              if (v16 >= 9)
              {
                char v10 = 0;
                char v14 = 1;
                goto LABEL_62;
              }
              char v10 = 0;
              if (((0x15Bu >> v16) & 1) == 0)
              {
                char v14 = 1;
                goto LABEL_62;
              }
              goto LABEL_61;
            }
            char v10 = 0;
            goto LABEL_50;
          }
          char v10 = 0;
        }
        if (!_swift_stdlib_isLinkingConsonant(between._value))
        {
          char v14 = 0;
          goto LABEL_62;
        }
        if (v9 != 2)
        {
LABEL_59:
          HIDWORD(v19) = and._value - 2381;
          LODWORD(v19) = and._value - 2381;
          unsigned int v18 = v19 >> 7;
          char v14 = 1;
          if (v18 > 8 || ((1 << v18) & 0x15B) == 0)
          {
LABEL_62:
            char v5 = 0;
            v2[1] = v10;
            v2[2] = v14;
            return v5 & 1;
          }
LABEL_61:
          char v14 = 1;
          unsigned char *v2 = 1;
          goto LABEL_62;
        }
LABEL_50:
        if (and._value < 0x300 || !(_swift_stdlib_getNormData(and._value) >> 3))
        {
          char v5 = 0;
          v2[1] = v10;
          v2[2] = 0;
          return v5 & 1;
        }
        goto LABEL_59;
      case 4:
      case 5:
        int v11 = v7;
        if (v7 == 4) {
          goto LABEL_28;
        }
        goto LABEL_21;
      case 6:
        if (v7 != 7 && v7 != 4) {
          goto LABEL_40;
        }
        goto LABEL_28;
      case 9:
        goto LABEL_28;
      case 10:
        switch(v7)
        {
          case 5u:
          case 6u:
          case 7u:
          case 0xAu:
          case 0xBu:
            goto LABEL_28;
          default:
            goto LABEL_40;
        }
      case 11:
        switch(v7)
        {
          case 4u:
          case 5u:
          case 7u:
          case 0xBu:
            goto LABEL_28;
          default:
            goto LABEL_40;
        }
      default:
        int v11 = v7;
        if (v7 == 12)
        {
          if (v8 == 3)
          {
            char v5 = v2[1] ^ 1;
            *(_WORD *)(v2 + 1) = 0;
            return v5 & 1;
          }
        }
        else if (v7 == 8)
        {
          if (v8 == 8)
          {
            char v5 = v2[3];
            v2[3] = v5 ^ 1;
            *(_WORD *)(v2 + 1) = 0;
            return v5 & 1;
          }
        }
        else
        {
LABEL_21:
          if (v11 == 7)
          {
LABEL_28:
            char v5 = 0;
            *(_WORD *)(v2 + 1) = 0;
            return v5 & 1;
          }
        }
LABEL_40:
        if (v2[2] == 1 && *v2 == 1 && _swift_stdlib_isLinkingConsonant(and._value))
        {
          char v5 = 0;
          *(_WORD *)uint64_t v2 = 0;
          v2[2] = 0;
          return v5 & 1;
        }
LABEL_44:
        *(_WORD *)(v2 + 1) = 0;
        goto LABEL_45;
    }
  }
  return v5 & 1;
}

Swift::Unicode::Scalar_optional __swiftcall String.UnicodeScalarView.Iterator.next()()
{
  uint64_t v1 = v0[2];
  uint64_t v2 = v0[3];
  if (v1 >= v2)
  {
    uint64_t v8 = 0;
  }
  else
  {
    uint64_t v3 = *v0;
    uint64_t v4 = v0[1];
    if ((v4 & 0x1000000000000000) != 0)
    {
      Swift::tuple_Unicode_Scalar_scalarLength_Int v10 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)((Swift::String::Index)(v1 << 16));
      Swift::Int scalarLength = v10.scalarLength;
      unsigned int value = v10._0._value;
    }
    else
    {
      if ((v4 & 0x2000000000000000) != 0)
      {
        v11[0] = *v0;
        v11[1] = v4 & 0xFFFFFFFFFFFFFFLL;
        char v5 = v11;
      }
      else if ((v3 & 0x1000000000000000) != 0)
      {
        char v5 = (void *)((v4 & 0xFFFFFFFFFFFFFFFLL) + 32);
      }
      else
      {
        char v5 = _StringObject.sharedUTF8.getter(*v0, v0[1]);
      }
      unsigned int value = _decodeScalar(_:startingAt:)((uint64_t)v5, v3, v1);
    }
    v0[2] += scalarLength;
    uint64_t v8 = value;
  }
  LOBYTE(v11[0]) = v1 >= v2;
  return (Swift::Unicode::Scalar_optional)(v8 | ((unint64_t)(v1 >= v2) << 32));
}

void (*String.unicodeScalars.modify(void *a1))(uint64_t *a1)
{
  uint64_t v2 = v1[1];
  *a1 = *v1;
  a1[1] = v2;
  a1[2] = v1;
  void *v1 = 0;
  v1[1] = 0xE000000000000000;
  return String.unicodeScalars.modify;
}

void String.unicodeScalars.modify(uint64_t *a1)
{
  unint64_t v1 = a1[1];
  uint64_t v2 = (void *)a1[2];
  uint64_t v3 = *a1;
  uint64_t v4 = v2[1];
  swift_bridgeObjectRetain(v1);
  swift_bridgeObjectRelease(v4);
  void *v2 = v3;
  v2[1] = v1;

  swift_bridgeObjectRelease(v1);
}

Swift::Void __swiftcall String.UnicodeScalarView.append(_:)(Swift::Unicode::Scalar a1)
{
  unint64_t v1 = specialized Unicode.Scalar.withUTF8CodeUnits<A>(_:)(a1._value);
  uint64_t v3 = v2;
  _StringGuts.append(_:)(v1, v2);

  swift_bridgeObjectRelease(v3);
}

Swift::String::Index __swiftcall String.index(before:)(Swift::String::Index before)
{
  v1._unint64_t rawBits = _StringGuts.validateInclusiveCharacterIndex_5_7(_:)(before)._rawBits;
  if (!(v1._rawBits >> 14) && _swift_stdlib_isExecutableLinkedOnOrAfter(0x50700u)) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index is out of bounds", 29, 2, "Swift/StringCharacterView.swift", 31, 2, 0x62uLL, 0);
  }

  return String._uncheckedIndex(before:)(v1);
}

Swift::String::Index __swiftcall String.UnicodeScalarView.index(before:)(Swift::String::Index before)
{
  uint64_t v3 = v2;
  uint64_t v4 = v1;
  v5._Swift::UInt64 rawBits = _StringGuts.validateInclusiveScalarIndex(_:)(before)._rawBits;
  if (!(v5._rawBits >> 14)) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index is out of bounds", 29, 2, "Swift/StringUnicodeScalarView.swift", 35, 2, 0x84uLL, 0);
  }
  Swift::UInt64 rawBits = v5._rawBits;
  if ((v3 & 0x1000000000000000) != 0)
  {
    return String.UnicodeScalarView._foreignIndex(before:)(v5);
  }
  else
  {
    if ((v3 & 0x2000000000000000) != 0)
    {
      v16[0] = v4;
      v16[1] = v3 & 0xFFFFFFFFFFFFFFLL;
      int v11 = (char *)v16 + (v5._rawBits >> 16);
      if ((*(v11 - 1) & 0xC0) == 0x80)
      {
        uint64_t v12 = 0;
        unint64_t v13 = v11 - 2;
        do
          int v14 = v13[v12--] & 0xC0;
        while (v14 == 128);
        uint64_t v10 = 1 - v12;
      }
      else
      {
        uint64_t v10 = 1;
      }
    }
    else
    {
      if ((v4 & 0x1000000000000000) != 0) {
        unsigned __int8 v7 = (char *)((v3 & 0xFFFFFFFFFFFFFFFLL) + 32);
      }
      else {
        unsigned __int8 v7 = (char *)_StringObject.sharedUTF8.getter(v4, v3);
      }
      uint64_t v8 = 0;
      do
        int v9 = v7[(rawBits >> 16) - 1 + v8--] & 0xC0;
      while (v9 == 128);
      uint64_t v10 = -v8;
    }
    return (Swift::String::Index)((rawBits - (v10 << 16)) & 0xFFFFFFFFFFFF0000 | 5);
  }
}

void specialized String.UnicodeScalarView.append<A>(contentsOf:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, char *))_sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSs17UnicodeScalarViewV_s6UInt32Vs5NeverOTg506_sSS17def38V6append10contentsOfyx_tSTRzs0A0O0B0V7b7RtzlFs6G8VAHXEfU_Tf1cn_n)(a1, a2, a3, a4, v13);
  unint64_t v6 = specialized static String._fromCodeUnits<A, B>(_:encoding:repair:)(v5, 1);
  unint64_t v8 = v7;
  swift_bridgeObjectRelease(v5);
  if (!v8) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/String.swift", 18, 2, 0x1C9uLL, 0);
  }
  unint64_t v9 = v4[1];
  unint64_t v10 = specialized static String.+ infix(_:_:)(*v4, v9, v6, v8);
  unint64_t v12 = v11;
  swift_bridgeObjectRelease(v9);
  swift_bridgeObjectRelease(v8);
  *uint64_t v4 = v10;
  v4[1] = v12;
}

void String.UnicodeScalarView.append<A>(contentsOf:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v5 = _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFxq0_q_Ri_zRi0_zRi__Ri0__Ri_0_Ri0_0_r1_lyADs5NeverOs6UInt32VIsgnrzr_xSayAIGAGSTRzAIRsd__AGRsd_0_r_0_lIetMgnozo_Tp5((void (*)(uint64_t *__return_ptr, char *))protocol witness for ExpressibleByUnicodeScalarLiteral.init(unicodeScalarLiteral:) in conformance Unicode.Scalar, 0, a2, a3);
  unint64_t v6 = specialized static String._fromCodeUnits<A, B>(_:encoding:repair:)(v5, 1);
  unint64_t v8 = v7;
  swift_bridgeObjectRelease((uint64_t)v5);
  if (!v8) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/String.swift", 18, 2, 0x1C9uLL, 0);
  }
  unint64_t v9 = v4[1];
  unint64_t v10 = specialized static String.+ infix(_:_:)(*v4, v9, v6, v8);
  unint64_t v12 = v11;
  swift_bridgeObjectRelease(v9);
  swift_bridgeObjectRelease(v8);
  *uint64_t v4 = v10;
  v4[1] = v12;
}

unint64_t specialized Sequence<>.joined(separator:)(uint64_t a1, unint64_t a2, void *a3)
{
  uint64_t v3 = a2;
  unint64_t v242 = HIBYTE(a2) & 0xF;
  uint64_t v245 = a1 & 0xFFFFFFFFFFFFLL;
  uint64_t v246 = a1;
  if ((a2 & 0x2000000000000000) != 0) {
    uint64_t v4 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v4 = a1 & 0xFFFFFFFFFFFFLL;
  }
  uint64_t v5 = a3[2] + a3[2] * v4;
  unint64_t v6 = 0xE000000000000000;
  unint64_t v253 = 0;
  unint64_t v254 = 0xE000000000000000;
  if (v5 < 16)
  {
    uint64_t v9 = 0;
  }
  else
  {
    uint64_t v7 = _StringGuts.uniqueNativeCapacity.getter();
    if ((v8 & 1) != 0 || v7 < v5)
    {
      uint64_t v11 = 2 * _StringGuts.uniqueNativeCapacity.getter();
      if (v11 <= v5) {
        uint64_t v11 = v5;
      }
      if (v10) {
        int64_t v12 = v5;
      }
      else {
        int64_t v12 = v11;
      }
      uint64_t v251 = 0;
      uint64_t v252 = 0;
      unint64_t v6 = specialized static __StringStorage.create(initializingFrom:codeUnitCapacity:isASCII:)((char *)&v251, 0, v12, 1);
      uint64_t v9 = *(void *)(v6 + 24);
      swift_bridgeObjectRelease(0xE000000000000000);
      unint64_t v253 = v9;
      unint64_t v254 = v6;
    }
    else
    {
      uint64_t v9 = 0;
      unint64_t v6 = 0xE000000000000000;
    }
  }
  unint64_t v13 = a3[2];
  unint64_t v249 = v13;
  uint64_t v14 = v246;
  if (v4)
  {
    if (!v13) {
      return v253;
    }
    specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, 1, (uint64_t)a3);
    uint64_t v15 = a3[4];
    uint64_t v243 = v3;
    v244 = a3 + 4;
    unint64_t v16 = a3[5];
    uint64_t v17 = HIBYTE(v6) & 0xF;
    uint64_t v18 = v9 & 0xFFFFFFFFFFFFLL;
    if ((v6 & 0x2000000000000000) != 0) {
      uint64_t v19 = HIBYTE(v6) & 0xF;
    }
    else {
      uint64_t v19 = v9 & 0xFFFFFFFFFFFFLL;
    }
    if (!v19 && (v9 & ~v6 & 0x2000000000000000) == 0)
    {
      swift_bridgeObjectRetain(a3[5]);
      swift_bridgeObjectRelease(v6);
      unint64_t v253 = v15;
      unint64_t v254 = v16;
      unint64_t v21 = v249;
      if (v249 != 1) {
        goto LABEL_167;
      }
      return v253;
    }
    uint64_t v14 = v16 & 0x2000000000000000;
    uint64_t v3 = HIBYTE(v16) & 0xF;
    if ((v6 & 0x2000000000000000) == 0 || !v14)
    {
LABEL_26:
      uint64_t v241 = v15 & 0xFFFFFFFFFFFFLL;
      if (v14) {
        unint64_t v21 = HIBYTE(v16) & 0xF;
      }
      else {
        unint64_t v21 = v15 & 0xFFFFFFFFFFFFLL;
      }
      swift_bridgeObjectRetain_n(v16, 3);
      if ((v16 & 0x1000000000000000) != 0) {
        goto LABEL_290;
      }
      swift_bridgeObjectRetain_n(v16, 4);
      Swift::Int v22 = v21;
      if ((v6 & 0x1000000000000000) != 0) {
        goto LABEL_293;
      }
      goto LABEL_31;
    }
    uint64_t v20 = v17 + v3;
    if ((unint64_t)(v17 + v3) > 0xF)
    {
      uint64_t v14 = 1;
      goto LABEL_26;
    }
    if (v3)
    {
      uint64_t v109 = 0;
      unint64_t v110 = 0;
      uint64_t v111 = 8 * v3;
      unint64_t v112 = v6;
      unint64_t v21 = v249;
      uint64_t v3 = v243;
      do
      {
        unint64_t v113 = v17 + v110;
        BOOL v64 = v110++ >= 8;
        if (v64) {
          unint64_t v114 = a3[5];
        }
        else {
          unint64_t v114 = a3[4];
        }
        char v115 = (8 * v17 + v109) & 0x38;
        uint64_t v116 = (-255 << v115) - 1;
        unint64_t v117 = (unint64_t)(v114 >> (v109 & 0x38)) << v115;
        unint64_t v118 = v117 | v116 & v112;
        unint64_t v119 = v117 | v116 & v9;
        if (v113 < 8) {
          uint64_t v9 = v119;
        }
        else {
          unint64_t v112 = v118;
        }
        v109 += 8;
      }
      while (v111 != v109);
    }
    else
    {
      unint64_t v112 = v6;
      unint64_t v21 = v249;
      uint64_t v3 = v243;
    }
    swift_bridgeObjectRelease(v6);
    unint64_t v125 = 0xA000000000000000;
    if (!(v9 & 0x8080808080808080 | v112 & 0x80808080808080)) {
      unint64_t v125 = 0xE000000000000000;
    }
    unint64_t v253 = v9;
    unint64_t v254 = v125 & 0xFF00000000000000 | (v20 << 56) | v112 & 0xFFFFFFFFFFFFFFLL;
LABEL_165:
    uint64_t v14 = v246;
    if (v21 != 1) {
      goto LABEL_167;
    }
    return v253;
  }
  if (!v13) {
    return v253;
  }
  uint64_t v14 = 0;
  while (1)
  {
    specialized Array._checkSubscript(_:wasNativeTypeChecked:)(v14, 1, (uint64_t)a3);
    uint64_t v31 = &a3[2 * v14 + 4];
    uint64_t v19 = *v31;
    unint64_t v21 = v31[1];
    unint64_t v16 = v253;
    unint64_t v6 = v254;
    unint64_t v32 = HIBYTE(v254) & 0xF;
    if ((v254 & 0x2000000000000000) != 0) {
      unint64_t v33 = HIBYTE(v254) & 0xF;
    }
    else {
      unint64_t v33 = v253 & 0xFFFFFFFFFFFFLL;
    }
    if (!v33 && (v253 & ~v254 & 0x2000000000000000) == 0)
    {
      swift_bridgeObjectRetain(v21);
      swift_bridgeObjectRelease(v6);
      unint64_t v253 = v19;
      unint64_t v254 = v21;
      goto LABEL_52;
    }
    uint64_t v15 = v21 & 0x2000000000000000;
    uint64_t v9 = HIBYTE(v21) & 0xF;
    if ((v254 & 0x2000000000000000) != 0 && v15)
    {
      unint64_t v34 = v32 + v9;
      if (v32 + v9 <= 0xF)
      {
        if (v9)
        {
          uint64_t v59 = 0;
          unint64_t v60 = 0;
          uint64_t v61 = 8 * v9;
          unint64_t v62 = v254;
          do
          {
            unint64_t v63 = v32 + v60;
            BOOL v64 = v60++ >= 8;
            if (v64) {
              unint64_t v65 = v21;
            }
            else {
              unint64_t v65 = v19;
            }
            char v66 = (8 * v32 + v59) & 0x38;
            uint64_t v67 = (-255 << v66) - 1;
            unint64_t v68 = (unint64_t)(v65 >> (v59 & 0x38)) << v66;
            unint64_t v69 = v68 | v67 & v62;
            unint64_t v70 = v68 | v67 & v16;
            if (v63 < 8) {
              unint64_t v16 = v70;
            }
            else {
              unint64_t v62 = v69;
            }
            v59 += 8;
          }
          while (v61 != v59);
        }
        else
        {
          unint64_t v62 = v254;
        }
        swift_bridgeObjectRelease(v254);
        unint64_t v76 = 0xA000000000000000;
        if (!(v16 & 0x8080808080808080 | v62 & 0x80808080808080)) {
          unint64_t v76 = 0xE000000000000000;
        }
        unint64_t v253 = v16;
        unint64_t v254 = v76 & 0xFF00000000000000 | (v34 << 56) | v62 & 0xFFFFFFFFFFFFFFLL;
        goto LABEL_52;
      }
      uint64_t v15 = 1;
    }
    uint64_t v246 = v19 & 0xFFFFFFFFFFFFLL;
    uint64_t v18 = v15 ? HIBYTE(v21) & 0xF : v19 & 0xFFFFFFFFFFFFLL;
    swift_bridgeObjectRetain_n(v21, 3);
    if ((v21 & 0x1000000000000000) != 0) {
      break;
    }
    swift_bridgeObjectRetain_n(v21, 4);
    Swift::Int v35 = v18;
    if ((v6 & 0x1000000000000000) != 0) {
      goto LABEL_104;
    }
LABEL_67:
    BOOL v23 = __OFADD__(v33, v35);
    uint64_t v3 = v33 + v35;
    if (v23) {
      goto LABEL_287;
    }
LABEL_68:
    if ((v16 & ~v6 & 0x2000000000000000) != 0 && swift_isUniquelyReferenced_nonNull_native(v6 & 0xFFFFFFFFFFFFFFFLL))
    {
      int64_t v36 = _StringGuts.nativeUnusedCapacity.getter(v16, v6);
      if (v37) {
        goto LABEL_309;
      }
      uint64_t v38 = (v6 >> 61) & 1;
      if (v36 < v35) {
        LOBYTE(v38) = 1;
      }
      if (v3 <= 15 && (v38 & 1) != 0)
      {
LABEL_75:
        swift_bridgeObjectRelease_n(v21, 5);
        swift_bridgeObjectRetain(v6);
        unint64_t v39 = _StringGuts._convertedToSmall()(v16, v6);
        unint64_t v41 = v40;
        swift_bridgeObjectRelease(v6);
        v42._Swift::UInt64 rawBits = (v18 << 16) | 1;
        v43._Swift::UInt64 rawBits = 1;
        v44._Swift::UInt64 rawBits = _StringGuts.validateScalarRange(_:)(v43, v42, v19, v21);
        if (v44._rawBits < 0x10000) {
          v44._rawBits |= 3;
        }
        unint64_t v46 = specialized String.init(_:)(v44, v45, v19, v21);
        unint64_t v48 = v47;
        swift_bridgeObjectRelease(v21);
        unint64_t v49 = _StringGuts._convertedToSmall()(v46, v48);
        unint64_t v51 = v50;
        swift_bridgeObjectRelease(v48);
        unint64_t v52 = specialized _SmallString.init(_:appending:)(v39, v41, v49, v51);
        if (v54) {
          goto LABEL_308;
        }
        unint64_t v55 = v52;
        unint64_t v56 = v53;
        swift_bridgeObjectRelease(v6);
        swift_bridgeObjectRelease(v21);
        unint64_t v253 = v55;
        unint64_t v254 = v56;
        goto LABEL_51;
      }
    }
    else if (v3 <= 15)
    {
      goto LABEL_75;
    }
    _StringGuts.prepareForAppendInPlace(totalCount:otherUTF8Count:)(v3, v35);
    swift_bridgeObjectRelease_n(v21, 4);
    if ((v21 & 0x1000000000000000) != 0)
    {
      swift_bridgeObjectRelease(v21);
      _StringGuts._foreignAppendInPlace(_:)(v19, v21, 0, v18);
      swift_bridgeObjectRelease_n(v21, 2);
LABEL_51:
      unint64_t v13 = v249;
      goto LABEL_52;
    }
    if (v15)
    {
      swift_bridgeObjectRelease_n(v21, 2);
      uint64_t v251 = v19;
      uint64_t v252 = v21 & 0xFFFFFFFFFFFFFFLL;
      uint64_t v57 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, HIBYTE(v21) & 0xF, (uint64_t)&v251, HIBYTE(v21) & 0xF);
      _StringGuts.appendInPlace(_:isASCII:)(v57, v58, (v21 & 0x4000000000000000) != 0);
      swift_bridgeObjectRelease(v21);
      goto LABEL_51;
    }
    if ((v19 & 0x1000000000000000) != 0)
    {
      swift_bridgeObjectRelease(v21);
      id v71 = (id)((v21 & 0xFFFFFFFFFFFFFFFLL) + 32);
      uint64_t v72 = v19 & 0xFFFFFFFFFFFFLL;
      uint64_t v73 = v19 & 0xFFFFFFFFFFFFLL;
    }
    else
    {
      id v71 = _StringObject.sharedUTF8.getter(v19, v21);
      uint64_t v73 = v82;
      swift_bridgeObjectRelease(v21);
      uint64_t v72 = v19 & 0xFFFFFFFFFFFFLL;
      if (v73 < v246) {
        goto LABEL_285;
      }
    }
    unint64_t v13 = v249;
    uint64_t v74 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, v72, (uint64_t)v71, v73);
    _StringGuts.appendInPlace(_:isASCII:)(v74, v75, v19 < 0);
    swift_bridgeObjectRelease_n(v21, 2);
LABEL_52:
    if (++v14 == v13) {
      return v253;
    }
  }
  swift_bridgeObjectRetain_n(v21, 5);
  v77._Swift::UInt64 rawBits = 1;
  v78._Swift::UInt64 rawBits = (v18 << 16) | 1;
  v79._Swift::UInt64 rawBits = _StringGuts.validateScalarRange(_:)(v77, v78, v19, v21);
  if (v79._rawBits < 0x10000) {
    v79._rawBits |= 3;
  }
  Swift::Int v35 = specialized Collection.count.getter(v79, v80, v19, v21);
  swift_bridgeObjectRelease(v21);
  if ((v6 & 0x1000000000000000) == 0) {
    goto LABEL_67;
  }
LABEL_104:
  Swift::Int v81 = String.UTF8View._foreignCount()();
  uint64_t v3 = v81 + v35;
  if (!__OFADD__(v81, v35)) {
    goto LABEL_68;
  }
LABEL_287:
  while (2)
  {
    __break(1u);
LABEL_288:
    __break(1u);
LABEL_289:
    __break(1u);
LABEL_290:
    swift_bridgeObjectRetain_n(v16, 5);
    v225._Swift::UInt64 rawBits = 1;
    v226._Swift::UInt64 rawBits = (v21 << 16) | 1;
    v227._Swift::UInt64 rawBits = _StringGuts.validateScalarRange(_:)(v225, v226, v15, v16);
    if (v227._rawBits < 0x10000) {
      v227._rawBits |= 3;
    }
    Swift::Int v22 = specialized Collection.count.getter(v227, v228, v15, v16);
    swift_bridgeObjectRelease(v16);
    if ((v6 & 0x1000000000000000) != 0)
    {
LABEL_293:
      Swift::Int v229 = String.UTF8View._foreignCount()();
      uint64_t v19 = v229 + v22;
      if (!__OFADD__(v229, v22)) {
        goto LABEL_32;
      }
LABEL_295:
      __break(1u);
LABEL_296:
      if ((v19 & 0x1000000000000000) != 0)
      {
        uint64_t v15 = _StringGuts._foreignConvertedToSmall()(v15, v19);
        uint64_t v236 = v235;
        swift_bridgeObjectRelease(v19);
        uint64_t v19 = v236;
      }
      else
      {
        if ((v15 & 0x1000000000000000) != 0)
        {
          v230 = (unsigned __int8 *)((v19 & 0xFFFFFFFFFFFFFFFLL) + 32);
          uint64_t v231 = v15 & 0xFFFFFFFFFFFFLL;
        }
        else
        {
          v230 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v15, v19);
        }
        closure #1 in _StringGuts._convertedToSmall()(v230, v231, &v251);
        swift_bridgeObjectRelease(v19);
        uint64_t v15 = v251;
        uint64_t v19 = v252;
      }
      unint64_t v21 = v249;
      uint64_t v14 = v246;
LABEL_116:
      uint64_t v89 = HIBYTE(v3) & 0xF;
      uint64_t v90 = HIBYTE(v19) & 0xF;
      uint64_t v91 = v90 + v89;
      if ((unint64_t)(v90 + v89) <= 0xF)
      {
        if (v90)
        {
          uint64_t v92 = 0;
          unint64_t v93 = 0;
          uint64_t v94 = 8 * v90;
          do
          {
            unint64_t v95 = v89 + v93;
            BOOL v64 = v93++ >= 8;
            if (v64) {
              unint64_t v96 = v19;
            }
            else {
              unint64_t v96 = v15;
            }
            char v97 = (8 * v89 + v92) & 0x38;
            uint64_t v98 = (-255 << v97) - 1;
            unint64_t v99 = (unint64_t)(v96 >> (v92 & 0x38)) << v97;
            unint64_t v100 = v99 | v98 & v3;
            unint64_t v101 = v99 | v98 & v9;
            if (v95 < 8) {
              uint64_t v9 = v101;
            }
            else {
              uint64_t v3 = v100;
            }
            v92 += 8;
          }
          while (v94 != v92);
        }
        swift_bridgeObjectRelease(v6);
        swift_bridgeObjectRelease(v16);
        unint64_t v102 = 0xA000000000000000;
        if (!(v9 & 0x8080808080808080 | v3 & 0x80808080808080)) {
          unint64_t v102 = 0xE000000000000000;
        }
        unint64_t v253 = v9;
        unint64_t v254 = v102 & 0xFF00000000000000 | (v91 << 56) | v3 & 0xFFFFFFFFFFFFFFLL;
        uint64_t v3 = v243;
        if (v21 == 1) {
          return v253;
        }
LABEL_167:
        uint64_t v239 = (v3 & 0xFFFFFFFFFFFFFFFLL) + 32;
        uint64_t v240 = v3 & 0xFFFFFFFFFFFFFFLL;
        uint64_t v241 = 8 * v242;
        unint64_t v127 = 1;
LABEL_170:
        specialized Array._checkSubscript(_:wasNativeTypeChecked:)(v127, 1, (uint64_t)a3);
        if (__OFADD__(v127, 1))
        {
          __break(1u);
          continue;
        }
        unint64_t v248 = v127 + 1;
        unint64_t v128 = &v244[2 * v127];
        uint64_t v9 = *v128;
        unint64_t v16 = v128[1];
        uint64_t v15 = v253;
        unint64_t v6 = v254;
        unint64_t v129 = HIBYTE(v254) & 0xF;
        if ((v254 & 0x2000000000000000) != 0) {
          unint64_t v130 = HIBYTE(v254) & 0xF;
        }
        else {
          unint64_t v130 = v253 & 0xFFFFFFFFFFFFLL;
        }
        if (!v130 && (v253 & ~v254 & 0x2000000000000000) == 0)
        {
          swift_bridgeObjectRetain(v16);
          swift_bridgeObjectRetain(v3);
          swift_bridgeObjectRelease(v6);
          unint64_t v253 = v14;
          unint64_t v254 = v3;
          goto LABEL_220;
        }
        if ((v254 & 0x2000000000000000) == 0)
        {
          uint64_t v18 = v245;
          if ((v3 & 0x2000000000000000) != 0) {
            uint64_t v18 = v242;
          }
LABEL_181:
          if ((v3 & 0x1000000000000000) != 0)
          {
            swift_bridgeObjectRetain(v16);
            v213._Swift::UInt64 rawBits = 1;
            v214._Swift::UInt64 rawBits = (v18 << 16) | 1;
            v215._Swift::UInt64 rawBits = _StringGuts.validateScalarRange(_:)(v213, v214, v14, v3);
            if (v215._rawBits < 0x10000) {
              v215._rawBits |= 3;
            }
            unint64_t v21 = specialized Collection.count.getter(v215, v216, v14, v3);
            if ((v6 & 0x1000000000000000) == 0) {
              goto LABEL_183;
            }
          }
          else
          {
            swift_bridgeObjectRetain(v16);
            unint64_t v21 = v18;
            if ((v6 & 0x1000000000000000) == 0)
            {
LABEL_183:
              BOOL v23 = __OFADD__(v130, v21);
              int64_t v132 = v130 + v21;
              if (v23) {
                goto LABEL_288;
              }
              goto LABEL_184;
            }
          }
          Swift::Int v217 = String.UTF8View._foreignCount()();
          int64_t v132 = v217 + v21;
          if (__OFADD__(v217, v21)) {
            goto LABEL_288;
          }
LABEL_184:
          if ((v15 & ~v6 & 0x2000000000000000) != 0
            && swift_isUniquelyReferenced_nonNull_native(v6 & 0xFFFFFFFFFFFFFFFLL))
          {
            int64_t v133 = _StringGuts.nativeUnusedCapacity.getter(v15, v6);
            if (v134) {
              goto LABEL_309;
            }
            uint64_t v135 = (v6 >> 61) & 1;
            if (v133 < (uint64_t)v21) {
              LOBYTE(v135) = 1;
            }
            if (v132 <= 15 && (v135 & 1) != 0)
            {
LABEL_191:
              swift_bridgeObjectRetain(v6);
              unint64_t v136 = _StringGuts._convertedToSmall()(v15, v6);
              unint64_t v138 = v137;
              swift_bridgeObjectRelease(v6);
              v139._Swift::UInt64 rawBits = (v18 << 16) | 1;
              v140._Swift::UInt64 rawBits = 1;
              Swift::UInt64 v141 = _StringGuts.validateScalarRange(_:)(v140, v139, v14, v3);
              Swift::UInt64 v143 = v142;
              if (v141 >= 0x10000) {
                Swift::UInt64 v144 = v141;
              }
              else {
                Swift::UInt64 v144 = v141 | 3;
              }
              swift_bridgeObjectRetain(v3);
              v145._Swift::UInt64 rawBits = v144;
              v146._Swift::UInt64 rawBits = v143;
              unint64_t v147 = specialized String.init(_:)(v145, v146, v14, v3);
              unint64_t v149 = v148;
              swift_bridgeObjectRelease(v3);
              unint64_t v150 = _StringGuts._convertedToSmall()(v147, v149);
              uint64_t v18 = v151;
              swift_bridgeObjectRelease(v149);
              unint64_t v152 = specialized _SmallString.init(_:appending:)(v136, v138, v150, v18);
              if (v154) {
                goto LABEL_308;
              }
              unint64_t v155 = v152;
              unint64_t v21 = v153;
              swift_bridgeObjectRelease(v6);
              unint64_t v253 = v155;
              unint64_t v254 = v21;
              goto LABEL_220;
            }
          }
          else if (v132 <= 15)
          {
            goto LABEL_191;
          }
          _StringGuts.prepareForAppendInPlace(totalCount:otherUTF8Count:)(v132, v21);
          if ((v3 & 0x1000000000000000) != 0)
          {
            _StringGuts._foreignAppendInPlace(_:)(v14, v3, 0, v18);
          }
          else if ((v3 & 0x2000000000000000) != 0)
          {
            uint64_t v251 = v14;
            uint64_t v252 = v240;
            if (v242 < v18) {
              goto LABEL_285;
            }
            unint64_t v170 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, v18, (uint64_t)&v251, v242);
            _StringGuts.appendInPlace(_:isASCII:)(v170, v171, (v3 & 0x4000000000000000) != 0);
          }
          else
          {
            uint64_t v156 = v239;
            uint64_t v157 = v245;
            if ((v14 & 0x1000000000000000) != 0)
            {
              if (v245 < v18) {
                goto LABEL_285;
              }
            }
            else
            {
              uint64_t v156 = (uint64_t)_StringObject.sharedUTF8.getter(v14, v3);
              uint64_t v157 = v223;
              if (v223 < v18) {
                goto LABEL_285;
              }
            }
            unint64_t v158 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, v18, v156, v157);
            _StringGuts.appendInPlace(_:isASCII:)(v158, v159, v14 < 0);
          }
          goto LABEL_220;
        }
        uint64_t v18 = v245;
        if ((v3 & 0x2000000000000000) == 0) {
          goto LABEL_181;
        }
        uint64_t v18 = v242;
        unint64_t v131 = v129 + v242;
        if (v129 + v242 > 0xF) {
          goto LABEL_181;
        }
        if (v242)
        {
          uint64_t v160 = 0;
          unint64_t v161 = 0;
          unint64_t v162 = v254;
          do
          {
            unint64_t v163 = v129 + v161;
            BOOL v64 = v161++ >= 8;
            if (v64) {
              unint64_t v164 = v3;
            }
            else {
              unint64_t v164 = v14;
            }
            char v165 = (8 * v129 + v160) & 0x38;
            uint64_t v166 = (-255 << v165) - 1;
            unint64_t v167 = (unint64_t)(v164 >> (v160 & 0x38)) << v165;
            unint64_t v168 = v167 | v166 & v162;
            unint64_t v169 = v167 | v166 & v15;
            if (v163 < 8) {
              uint64_t v15 = v169;
            }
            else {
              unint64_t v162 = v168;
            }
            v160 += 8;
          }
          while (v241 != v160);
        }
        else
        {
          unint64_t v162 = v254;
        }
        unint64_t v172 = 0xA000000000000000;
        if (!(v15 & 0x8080808080808080 | v162 & 0x80808080808080)) {
          unint64_t v172 = 0xE000000000000000;
        }
        unint64_t v173 = v172 | (v131 << 56);
        swift_bridgeObjectRetain(v16);
        swift_bridgeObjectRelease(v6);
        unint64_t v253 = v15;
        unint64_t v254 = v173 & 0xFF00000000000000 | v162 & 0xFFFFFFFFFFFFFFLL;
        uint64_t v14 = v246;
LABEL_220:
        uint64_t v15 = v253;
        unint64_t v6 = v254;
        unint64_t v174 = HIBYTE(v254) & 0xF;
        if ((v254 & 0x2000000000000000) != 0) {
          unint64_t v175 = HIBYTE(v254) & 0xF;
        }
        else {
          unint64_t v175 = v253 & 0xFFFFFFFFFFFFLL;
        }
        if (!v175 && (v253 & ~v254 & 0x2000000000000000) == 0)
        {
          swift_bridgeObjectRelease(v254);
          unint64_t v253 = v9;
          unint64_t v254 = v16;
          uint64_t v19 = v249;
          goto LABEL_169;
        }
        uint64_t v14 = v16 & 0x2000000000000000;
        uint64_t v18 = HIBYTE(v16) & 0xF;
        if ((v254 & 0x2000000000000000) == 0 || !v14) {
          goto LABEL_229;
        }
        unint64_t v176 = v174 + v18;
        if (v174 + v18 <= 0xF)
        {
          if (v18)
          {
            uint64_t v198 = 0;
            unint64_t v199 = 0;
            unint64_t v200 = v254;
            uint64_t v19 = v249;
            do
            {
              unint64_t v201 = v174 + v199;
              BOOL v64 = v199++ >= 8;
              if (v64) {
                unint64_t v202 = v16;
              }
              else {
                unint64_t v202 = v9;
              }
              char v203 = (8 * v174 + v198) & 0x38;
              uint64_t v204 = (-255 << v203) - 1;
              unint64_t v205 = (unint64_t)(v202 >> (v198 & 0x38)) << v203;
              unint64_t v206 = v205 | v204 & v200;
              unint64_t v207 = v205 | v204 & v15;
              if (v201 < 8) {
                uint64_t v15 = v207;
              }
              else {
                unint64_t v200 = v206;
              }
              v198 += 8;
            }
            while (8 * v18 != v198);
          }
          else
          {
            unint64_t v200 = v254;
            uint64_t v19 = v249;
          }
          swift_bridgeObjectRelease(v254);
          swift_bridgeObjectRelease(v16);
          unint64_t v212 = 0xA000000000000000;
          if (!(v15 & 0x8080808080808080 | v200 & 0x80808080808080)) {
            unint64_t v212 = 0xE000000000000000;
          }
          unint64_t v253 = v15;
          unint64_t v254 = v212 & 0xFF00000000000000 | (v176 << 56) | v200 & 0xFFFFFFFFFFFFFFLL;
        }
        else
        {
          uint64_t v14 = 1;
LABEL_229:
          uint64_t v3 = v9 & 0xFFFFFFFFFFFFLL;
          if (v14) {
            unint64_t v21 = HIBYTE(v16) & 0xF;
          }
          else {
            unint64_t v21 = v9 & 0xFFFFFFFFFFFFLL;
          }
          swift_bridgeObjectRetain_n(v16, 2);
          if ((v16 & 0x1000000000000000) != 0)
          {
            swift_bridgeObjectRetain_n(v16, 5);
            v218._Swift::UInt64 rawBits = 1;
            v219._Swift::UInt64 rawBits = (v21 << 16) | 1;
            v220._Swift::UInt64 rawBits = _StringGuts.validateScalarRange(_:)(v218, v219, v9, v16);
            if (v220._rawBits < 0x10000) {
              v220._rawBits |= 3;
            }
            uint64_t v19 = specialized Collection.count.getter(v220, v221, v9, v16);
            swift_bridgeObjectRelease(v16);
            if ((v6 & 0x1000000000000000) == 0) {
              goto LABEL_234;
            }
          }
          else
          {
            swift_bridgeObjectRetain_n(v16, 4);
            uint64_t v19 = v21;
            if ((v6 & 0x1000000000000000) == 0)
            {
LABEL_234:
              BOOL v23 = __OFADD__(v175, v19);
              int64_t v177 = v175 + v19;
              if (v23) {
                goto LABEL_289;
              }
              goto LABEL_235;
            }
          }
          Swift::Int v222 = String.UTF8View._foreignCount()();
          int64_t v177 = v222 + v19;
          if (__OFADD__(v222, v19)) {
            goto LABEL_289;
          }
LABEL_235:
          if ((v15 & ~v6 & 0x2000000000000000) != 0
            && swift_isUniquelyReferenced_nonNull_native(v6 & 0xFFFFFFFFFFFFFFFLL))
          {
            int64_t v178 = _StringGuts.nativeUnusedCapacity.getter(v15, v6);
            if (v179) {
              goto LABEL_309;
            }
            uint64_t v180 = (v6 >> 61) & 1;
            if (v178 < v19) {
              LOBYTE(v18_assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0, 0xE000000000000000, "Swift/SmallString.swift", 23, 2, 0xD7uLL, 0) = 1;
            }
            if (v177 <= 15 && (v180 & 1) != 0)
            {
LABEL_242:
              swift_bridgeObjectRelease_n(v16, 5);
              swift_bridgeObjectRetain(v6);
              unint64_t v181 = _StringGuts._convertedToSmall()(v15, v6);
              unint64_t v183 = v182;
              swift_bridgeObjectRelease(v6);
              v184._Swift::UInt64 rawBits = (v21 << 16) | 1;
              v185._Swift::UInt64 rawBits = 1;
              v186._Swift::UInt64 rawBits = _StringGuts.validateScalarRange(_:)(v185, v184, v9, v16);
              if (v186._rawBits < 0x10000) {
                v186._rawBits |= 3;
              }
              unint64_t v188 = specialized String.init(_:)(v186, v187, v9, v16);
              uint64_t v9 = v189;
              swift_bridgeObjectRelease(v16);
              unint64_t v190 = _StringGuts._convertedToSmall()(v188, v9);
              uint64_t v15 = v191;
              swift_bridgeObjectRelease(v9);
              unint64_t v192 = specialized _SmallString.init(_:appending:)(v181, v183, v190, v15);
              uint64_t v19 = v249;
              uint64_t v3 = v243;
              uint64_t v14 = v246;
              if (v194) {
                goto LABEL_308;
              }
              unint64_t v195 = v192;
              unint64_t v21 = v193;
              swift_bridgeObjectRelease(v6);
              swift_bridgeObjectRelease(v16);
              unint64_t v253 = v195;
              unint64_t v254 = v21;
              goto LABEL_169;
            }
          }
          else if (v177 <= 15)
          {
            goto LABEL_242;
          }
          unint64_t v6 = (unint64_t)&v253;
          _StringGuts.prepareForAppendInPlace(totalCount:otherUTF8Count:)(v177, v19);
          swift_bridgeObjectRelease_n(v16, 4);
          if ((v16 & 0x1000000000000000) == 0)
          {
            if (v14)
            {
              swift_bridgeObjectRelease_n(v16, 2);
              uint64_t v251 = v9;
              uint64_t v252 = v16 & 0xFFFFFFFFFFFFFFLL;
              v196 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, HIBYTE(v16) & 0xF, (uint64_t)&v251, HIBYTE(v16) & 0xF);
              _StringGuts.appendInPlace(_:isASCII:)(v196, v197, (v16 & 0x4000000000000000) != 0);
              swift_bridgeObjectRelease(v16);
              goto LABEL_251;
            }
            if ((v9 & 0x1000000000000000) != 0)
            {
              swift_bridgeObjectRelease(v16);
              id v208 = (id)((v16 & 0xFFFFFFFFFFFFFFFLL) + 32);
              uint64_t v209 = v9 & 0xFFFFFFFFFFFFLL;
            }
            else
            {
              id v208 = _StringObject.sharedUTF8.getter(v9, v16);
              uint64_t v209 = v224;
              swift_bridgeObjectRelease(v16);
              if (v209 < v3) {
                goto LABEL_285;
              }
            }
            uint64_t v19 = v249;
            uint64_t v14 = v246;
            v210 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, v9 & 0xFFFFFFFFFFFFLL, (uint64_t)v208, v209);
            unint64_t v6 = (unint64_t)&v253;
            _StringGuts.appendInPlace(_:isASCII:)(v210, v211, v9 < 0);
            swift_bridgeObjectRelease_n(v16, 2);
            uint64_t v3 = v243;
LABEL_169:
            unint64_t v127 = v248;
            if (v248 == v19) {
              return v253;
            }
            goto LABEL_170;
          }
          swift_bridgeObjectRelease(v16);
          _StringGuts._foreignAppendInPlace(_:)(v9, v16, 0, v21);
          swift_bridgeObjectRelease_n(v16, 2);
LABEL_251:
          uint64_t v19 = v249;
          uint64_t v3 = v243;
        }
        uint64_t v14 = v246;
        goto LABEL_169;
      }
LABEL_308:
      unint64_t v234 = 266;
LABEL_310:
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/StringGutsRangeReplaceable.swift", 38, 2, v234, 0);
    }
    break;
  }
LABEL_31:
  BOOL v23 = __OFADD__(v19, v22);
  v19 += v22;
  if (v23) {
    goto LABEL_295;
  }
LABEL_32:
  uint64_t v247 = v21;
  unint64_t v24 = v9 & ~v6;
  if ((v24 & 0x2000000000000000) != 0 && swift_isUniquelyReferenced_nonNull_native(v6 & 0xFFFFFFFFFFFFFFFLL))
  {
    int64_t v25 = _StringGuts.nativeUnusedCapacity.getter(v9, v6);
    if (v26)
    {
LABEL_309:
      unint64_t v234 = 258;
      goto LABEL_310;
    }
    if (v19 < 16)
    {
      if ((v6 & 0x2000000000000000) != 0)
      {
        swift_bridgeObjectRelease_n(v16, 5);
        uint64_t v3 = v6;
      }
      else
      {
        if (v25 >= v22) {
          goto LABEL_38;
        }
LABEL_110:
        swift_bridgeObjectRelease_n(v16, 5);
        uint64_t v14 = v246;
        uint64_t v83 = v247;
        if ((v6 & 0x2000000000000000) != 0)
        {
          uint64_t v3 = v6;
LABEL_112:
          v84._Swift::UInt64 rawBits = (v83 << 16) | 1;
          v85._Swift::UInt64 rawBits = 1;
          v86._Swift::UInt64 rawBits = _StringGuts.validateScalarRange(_:)(v85, v84, v15, v16);
          if (v86._rawBits < 0x10000) {
            v86._rawBits |= 3;
          }
          uint64_t v15 = specialized String.init(_:)(v86, v87, v15, v16);
          uint64_t v19 = v88;
          swift_bridgeObjectRelease(v16);
          unint64_t v21 = v249;
          if ((v19 & 0x2000000000000000) == 0) {
            goto LABEL_296;
          }
          swift_bridgeObjectRelease(v19);
          goto LABEL_116;
        }
        if ((v6 & 0x1000000000000000) != 0)
        {
          uint64_t v9 = _StringGuts._foreignConvertedToSmall()(v9, v6);
          uint64_t v3 = v237;
        }
        else
        {
          if ((v9 & 0x1000000000000000) != 0)
          {
            v232 = (unsigned __int8 *)((v6 & 0xFFFFFFFFFFFFFFFLL) + 32);
          }
          else
          {
            v232 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v9, v6);
            uint64_t v18 = v238;
          }
          swift_bridgeObjectRetain(v6);
          closure #1 in _StringGuts._convertedToSmall()(v232, v18, &v251);
          swift_bridgeObjectRelease(v6);
          uint64_t v9 = v251;
          uint64_t v3 = v252;
        }
      }
      uint64_t v14 = v246;
      uint64_t v83 = v247;
      goto LABEL_112;
    }
  }
  else if (v19 <= 15)
  {
    goto LABEL_110;
  }
LABEL_38:
  int64_t v27 = _StringGuts.nativeUnusedCapacity.getter(v9, v6);
  BOOL v30 = (v28 & 1) == 0 && v27 >= v22;
  if ((v24 & 0x2000000000000000) == 0 || !swift_isUniquelyReferenced_nonNull_native(v6 & 0xFFFFFFFFFFFFFFFLL))
  {
    unint64_t v21 = v249;
    if (v30) {
      goto LABEL_137;
    }
    goto LABEL_131;
  }
  unint64_t v21 = v249;
  if (!v30)
  {
LABEL_131:
    uint64_t v103 = _StringGuts.nativeCapacity.getter(v9, v6);
    if (v104) {
      uint64_t v105 = 0;
    }
    else {
      uint64_t v105 = v103;
    }
    if (v105 + 0x4000000000000000 < 0)
    {
      __break(1u);
      goto LABEL_306;
    }
    uint64_t v106 = 2 * v105;
    if (v106 > v19) {
      uint64_t v19 = v106;
    }
LABEL_137:
    _StringGuts.grow(_:)(v19);
  }
  swift_bridgeObjectRelease_n(v16, 4);
  if ((v16 & 0x1000000000000000) != 0)
  {
    swift_bridgeObjectRelease(v16);
    unint64_t v6 = (unint64_t)&v253;
    _StringGuts._foreignAppendInPlace(_:)(v15, v16, 0, v247);
    swift_bridgeObjectRelease_n(v16, 2);
LABEL_142:
    uint64_t v3 = v243;
    goto LABEL_165;
  }
  if (v14)
  {
    swift_bridgeObjectRelease_n(v16, 2);
    uint64_t v251 = v15;
    uint64_t v252 = v16 & 0xFFFFFFFFFFFFFFLL;
    int64_t v107 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, v3, (uint64_t)&v251, v3);
    unint64_t v6 = (unint64_t)&v253;
    _StringGuts.appendInPlace(_:isASCII:)(v107, v108, (v16 & 0x4000000000000000) != 0);
    swift_bridgeObjectRelease(v16);
    goto LABEL_142;
  }
  if ((v15 & 0x1000000000000000) == 0)
  {
LABEL_306:
    id v120 = _StringObject.sharedUTF8.getter(v15, v16);
    uint64_t v122 = v233;
    swift_bridgeObjectRelease(v16);
    if (v122 < v241) {
LABEL_285:
    }
      _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x745uLL, 0);
    unint64_t v21 = v249;
    uint64_t v3 = v243;
    uint64_t v14 = v246;
    uint64_t v121 = v241;
    goto LABEL_157;
  }
  swift_bridgeObjectRelease(v16);
  id v120 = (id)((v16 & 0xFFFFFFFFFFFFFFFLL) + 32);
  uint64_t v121 = v241;
  uint64_t v122 = v241;
  uint64_t v3 = v243;
  uint64_t v14 = v246;
LABEL_157:
  uint64_t v123 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, v121, (uint64_t)v120, v122);
  unint64_t v6 = (unint64_t)&v253;
  _StringGuts.appendInPlace(_:isASCII:)(v123, v124, v15 < 0);
  swift_bridgeObjectRelease_n(v16, 2);
  if (v21 != 1) {
    goto LABEL_167;
  }
  return v253;
}

uint64_t specialized Sequence<>.joined(separator:)(uint64_t a1, unint64_t a2, void *a3)
{
  uint64_t v270 = a2;
  unint64_t v266 = HIBYTE(a2) & 0xF;
  uint64_t v268 = a1 & 0xFFFFFFFFFFFFLL;
  if ((a2 & 0x2000000000000000) != 0) {
    uint64_t v5 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v5 = a1 & 0xFFFFFFFFFFFFLL;
  }
  uint64_t v6 = a3[2] + a3[2] * v5;
  unint64_t v7 = 0xE000000000000000;
  unint64_t v277 = 0;
  unint64_t v278 = 0xE000000000000000;
  if (v6 < 16)
  {
    uint64_t v10 = 0;
  }
  else
  {
    uint64_t v8 = _StringGuts.uniqueNativeCapacity.getter();
    if ((v9 & 1) != 0 || v8 < v6)
    {
      uint64_t v12 = 2 * _StringGuts.uniqueNativeCapacity.getter();
      if (v12 <= v6) {
        uint64_t v12 = v6;
      }
      if (v11) {
        int64_t v13 = v6;
      }
      else {
        int64_t v13 = v12;
      }
      uint64_t v275 = 0;
      uint64_t v276 = 0;
      unint64_t v7 = specialized static __StringStorage.create(initializingFrom:codeUnitCapacity:isASCII:)((char *)&v275, 0, v13, 1);
      uint64_t v10 = *(void *)(v7 + 24);
      swift_bridgeObjectRelease(0xE000000000000000);
      unint64_t v277 = v10;
      unint64_t v278 = v7;
    }
    else
    {
      uint64_t v10 = 0;
      unint64_t v7 = 0xE000000000000000;
    }
  }
  unint64_t v14 = a3[2];
  unint64_t v274 = v14;
  if (v5)
  {
    if (!v14) {
      return v277;
    }
    specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, 1, (uint64_t)a3);
    uint64_t v15 = a3[4];
    v267 = a3 + 4;
    unint64_t v16 = a3[5];
    if (&full type metadata for Substring == &full type metadata for String)
    {
      swift_bridgeObjectRetain(a3[5]);
    }
    else
    {
      unint64_t v3 = a3[6];
      unint64_t v84 = a3[7];
      swift_bridgeObjectRetain(v84);
      v85._Swift::UInt64 rawBits = v15;
      v86._Swift::UInt64 rawBits = v16;
      uint64_t v15 = specialized String.init<A>(_:)(v85, v86, v3, v84);
      unint64_t v16 = v87;
    }
    uint64_t v88 = HIBYTE(v7) & 0xF;
    if ((v7 & 0x2000000000000000) != 0) {
      uint64_t v22 = HIBYTE(v7) & 0xF;
    }
    else {
      uint64_t v22 = v10 & 0xFFFFFFFFFFFFLL;
    }
    if (v22 || (v10 & ~v7 & 0x2000000000000000) != 0)
    {
      uint64_t v17 = v16 & 0x2000000000000000;
      uint64_t v4 = HIBYTE(v16) & 0xF;
      if ((v7 & 0x2000000000000000) != 0 && v17)
      {
        uint64_t v89 = v88 + v4;
        if ((unint64_t)(v88 + v4) <= 0xF)
        {
          if (v4)
          {
            uint64_t v104 = 0;
            unint64_t v105 = 0;
            unint64_t v106 = v7;
            do
            {
              unint64_t v107 = v88 + v105;
              BOOL v65 = v105++ >= 8;
              if (v65) {
                unint64_t v108 = v16;
              }
              else {
                unint64_t v108 = v15;
              }
              char v109 = (8 * v88 + v104) & 0x38;
              uint64_t v110 = (-255 << v109) - 1;
              unint64_t v111 = (unint64_t)(v108 >> (v104 & 0x38)) << v109;
              unint64_t v112 = v111 | v110 & v106;
              unint64_t v113 = v111 | v110 & v10;
              if (v107 < 8) {
                uint64_t v10 = v113;
              }
              else {
                unint64_t v106 = v112;
              }
              v104 += 8;
            }
            while (8 * v4 != v104);
          }
          else
          {
            unint64_t v106 = v7;
          }
          swift_bridgeObjectRelease(v7);
          swift_bridgeObjectRelease(v16);
          unint64_t v138 = 0xA000000000000000;
          if (!(v10 & 0x8080808080808080 | v106 & 0x80808080808080)) {
            unint64_t v138 = 0xE000000000000000;
          }
          unint64_t v277 = v10;
          unint64_t v278 = v138 & 0xFF00000000000000 | (v89 << 56) | v106 & 0xFFFFFFFFFFFFFFLL;
          goto LABEL_182;
        }
        uint64_t v17 = 1;
      }
      uint64_t v34 = v15 & 0xFFFFFFFFFFFFLL;
      if (v17) {
        unint64_t v3 = HIBYTE(v16) & 0xF;
      }
      else {
        unint64_t v3 = v15 & 0xFFFFFFFFFFFFLL;
      }
      swift_bridgeObjectRetain_n(v16, 2);
      if ((v16 & 0x1000000000000000) != 0) {
        goto LABEL_316;
      }
      swift_bridgeObjectRetain_n(v16, 4);
      uint64_t v90 = v3;
      if ((v7 & 0x1000000000000000) != 0) {
        goto LABEL_319;
      }
      goto LABEL_107;
    }
    swift_bridgeObjectRelease(v7);
    unint64_t v277 = v15;
    unint64_t v278 = v16;
LABEL_182:
    uint64_t v17 = v270;
    if (v14 != 1) {
      goto LABEL_184;
    }
    return v277;
  }
  if (!v14) {
    return v277;
  }
  uint64_t v17 = 0;
  uint64_t v18 = (uint64_t)a3;
  while (1)
  {
    specialized Array._checkSubscript(_:wasNativeTypeChecked:)(v17, 1, v18);
    uint64_t v20 = &a3[4 * v17 + 4];
    uint64_t v22 = *v20;
    Swift::UInt64 v21 = v20[1];
    if (&full type metadata for Substring == &full type metadata for String)
    {
      swift_bridgeObjectRetain(v20[1]);
      unint64_t v3 = v21;
    }
    else
    {
      unint64_t v23 = v20[2];
      unint64_t v3 = v20[3];
      if ((v3 & 0x2000000000000000) != 0) {
        uint64_t v24 = HIBYTE(v3) & 0xF;
      }
      else {
        uint64_t v24 = v23 & 0xFFFFFFFFFFFFLL;
      }
      swift_bridgeObjectRetain(v3);
      if ((unint64_t)v22 >> 16) {
        BOOL v25 = 0;
      }
      else {
        BOOL v25 = v21 >> 16 == v24;
      }
      if (v25)
      {
        uint64_t v22 = v23;
      }
      else
      {
        v26._Swift::UInt64 rawBits = v22;
        v27._Swift::UInt64 rawBits = v21;
        uint64_t v22 = specialized static String._copying(_:)(v26, v27, v23, v3);
        unint64_t v29 = v28;
        swift_bridgeObjectRelease(v3);
        unint64_t v3 = v29;
      }
    }
    unint64_t v7 = v277;
    unint64_t v16 = v278;
    unint64_t v30 = HIBYTE(v278) & 0xF;
    if ((v278 & 0x2000000000000000) != 0) {
      unint64_t v31 = HIBYTE(v278) & 0xF;
    }
    else {
      unint64_t v31 = v277 & 0xFFFFFFFFFFFFLL;
    }
    if (!v31 && (v277 & ~v278 & 0x2000000000000000) == 0)
    {
      swift_bridgeObjectRelease(v278);
      unint64_t v277 = v22;
      unint64_t v278 = v3;
      unint64_t v19 = v274;
      goto LABEL_23;
    }
    uint64_t v32 = v3 & 0x2000000000000000;
    uint64_t v15 = HIBYTE(v3) & 0xF;
    if ((v278 & 0x2000000000000000) != 0 && v32)
    {
      unint64_t v33 = v30 + v15;
      if (v30 + v15 <= 0xF)
      {
        if (v15)
        {
          uint64_t v60 = 0;
          unint64_t v61 = 0;
          uint64_t v62 = 8 * v15;
          unint64_t v63 = v278;
          unint64_t v19 = v274;
          do
          {
            unint64_t v64 = v30 + v61;
            BOOL v65 = v61++ >= 8;
            if (v65) {
              unint64_t v66 = v3;
            }
            else {
              unint64_t v66 = v22;
            }
            char v67 = (8 * v30 + v60) & 0x38;
            uint64_t v68 = (-255 << v67) - 1;
            unint64_t v69 = (unint64_t)(v66 >> (v60 & 0x38)) << v67;
            unint64_t v70 = v69 | v68 & v63;
            unint64_t v71 = v69 | v68 & v7;
            if (v64 < 8) {
              unint64_t v7 = v71;
            }
            else {
              unint64_t v63 = v70;
            }
            v60 += 8;
          }
          while (v62 != v60);
        }
        else
        {
          unint64_t v63 = v278;
          unint64_t v19 = v274;
        }
        swift_bridgeObjectRelease(v278);
        swift_bridgeObjectRelease(v3);
        unint64_t v77 = 0xA000000000000000;
        if (!(v7 & 0x8080808080808080 | v63 & 0x80808080808080)) {
          unint64_t v77 = 0xE000000000000000;
        }
        unint64_t v277 = v7;
        unint64_t v278 = v77 & 0xFF00000000000000 | (v33 << 56) | v63 & 0xFFFFFFFFFFFFFFLL;
        goto LABEL_23;
      }
      uint64_t v32 = 1;
    }
    uint64_t v270 = v22 & 0xFFFFFFFFFFFFLL;
    uint64_t v10 = v32 ? HIBYTE(v3) & 0xF : v22 & 0xFFFFFFFFFFFFLL;
    swift_bridgeObjectRetain_n(v3, 2);
    if ((v3 & 0x1000000000000000) != 0) {
      break;
    }
    swift_bridgeObjectRetain_n(v3, 4);
    uint64_t v34 = v10;
    if ((v16 & 0x1000000000000000) != 0) {
      goto LABEL_87;
    }
LABEL_49:
    BOOL v35 = __OFADD__(v31, v34);
    uint64_t v4 = v31 + v34;
    if (v35) {
      goto LABEL_313;
    }
LABEL_50:
    if ((v7 & ~v16 & 0x2000000000000000) != 0 && swift_isUniquelyReferenced_nonNull_native(v16 & 0xFFFFFFFFFFFFFFFLL))
    {
      uint64_t v36 = v278;
      int64_t v37 = _StringGuts.nativeUnusedCapacity.getter(v277, v278);
      if (v38) {
        goto LABEL_336;
      }
      if (v4 < 16 && ((v36 & 0x2000000000000000) != 0 || v37 < v34)) {
        goto LABEL_62;
      }
    }
    else if (v4 <= 15)
    {
      uint64_t v36 = v278;
LABEL_62:
      swift_bridgeObjectRelease_n(v3, 5);
      unint64_t v41 = v277;
      swift_bridgeObjectRetain(v36);
      unint64_t v42 = _StringGuts._convertedToSmall()(v41, v36);
      unint64_t v44 = v43;
      swift_bridgeObjectRelease(v36);
      v45._Swift::UInt64 rawBits = (v10 << 16) | 1;
      v46._Swift::UInt64 rawBits = 1;
      v47._Swift::UInt64 rawBits = _StringGuts.validateScalarRange(_:)(v46, v45, v22, v3);
      if (v47._rawBits < 0x10000) {
        v47._rawBits |= 3;
      }
      unint64_t v49 = specialized String.init(_:)(v47, v48, v22, v3);
      unint64_t v51 = v50;
      swift_bridgeObjectRelease(v3);
      unint64_t v52 = _StringGuts._convertedToSmall()(v49, v51);
      unint64_t v54 = v53;
      swift_bridgeObjectRelease(v51);
      unint64_t v55 = specialized _SmallString.init(_:appending:)(v42, v44, v52, v54);
      if (v57) {
        goto LABEL_335;
      }
      uint64_t v58 = v55;
      unint64_t v59 = v56;
      swift_bridgeObjectRelease(v36);
      swift_bridgeObjectRelease(v3);
      unint64_t v277 = v58;
      unint64_t v278 = v59;
LABEL_22:
      uint64_t v18 = (uint64_t)a3;
      unint64_t v19 = v274;
      goto LABEL_23;
    }
    _StringGuts.prepareForAppendInPlace(totalCount:otherUTF8Count:)(v4, v34);
    swift_bridgeObjectRelease_n(v3, 4);
    if ((v3 & 0x1000000000000000) != 0)
    {
      swift_bridgeObjectRelease(v3);
      _StringGuts._foreignAppendInPlace(_:)(v22, v3, 0, v10);
      swift_bridgeObjectRelease_n(v3, 2);
      goto LABEL_22;
    }
    if (v32)
    {
      swift_bridgeObjectRelease_n(v3, 2);
      uint64_t v275 = v22;
      uint64_t v276 = v3 & 0xFFFFFFFFFFFFFFLL;
      unint64_t v39 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, HIBYTE(v3) & 0xF, (uint64_t)&v275, HIBYTE(v3) & 0xF);
      _StringGuts.appendInPlace(_:isASCII:)(v39, v40, (v3 & 0x4000000000000000) != 0);
      swift_bridgeObjectRelease(v3);
      goto LABEL_22;
    }
    if ((v22 & 0x1000000000000000) != 0)
    {
      swift_bridgeObjectRelease(v3);
      id v72 = (id)((v3 & 0xFFFFFFFFFFFFFFFLL) + 32);
      uint64_t v73 = v22 & 0xFFFFFFFFFFFFLL;
      uint64_t v74 = v22 & 0xFFFFFFFFFFFFLL;
    }
    else
    {
      id v72 = _StringObject.sharedUTF8.getter(v22, v3);
      uint64_t v74 = v83;
      swift_bridgeObjectRelease(v3);
      uint64_t v73 = v22 & 0xFFFFFFFFFFFFLL;
      if (v74 < v270) {
        goto LABEL_311;
      }
    }
    uint64_t v18 = (uint64_t)a3;
    size_t v75 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, v73, (uint64_t)v72, v74);
    _StringGuts.appendInPlace(_:isASCII:)(v75, v76, v22 < 0);
    swift_bridgeObjectRelease_n(v3, 2);
    unint64_t v19 = v274;
LABEL_23:
    if (++v17 == v19) {
      return v277;
    }
  }
  swift_bridgeObjectRetain_n(v3, 5);
  v78._Swift::UInt64 rawBits = 1;
  v79._Swift::UInt64 rawBits = (v10 << 16) | 1;
  v80._Swift::UInt64 rawBits = _StringGuts.validateScalarRange(_:)(v78, v79, v22, v3);
  if (v80._rawBits < 0x10000) {
    v80._rawBits |= 3;
  }
  uint64_t v34 = specialized Collection.count.getter(v80, v81, v22, v3);
  swift_bridgeObjectRelease(v3);
  if ((v16 & 0x1000000000000000) == 0) {
    goto LABEL_49;
  }
LABEL_87:
  Swift::Int v82 = String.UTF8View._foreignCount()();
  uint64_t v4 = v82 + v34;
  if (!__OFADD__(v82, v34)) {
    goto LABEL_50;
  }
LABEL_313:
  while (2)
  {
    __break(1u);
LABEL_314:
    __break(1u);
LABEL_315:
    __break(1u);
LABEL_316:
    swift_bridgeObjectRetain_n(v16, 5);
    v248._Swift::UInt64 rawBits = 1;
    v249._Swift::UInt64 rawBits = (v3 << 16) | 1;
    v250._Swift::UInt64 rawBits = _StringGuts.validateScalarRange(_:)(v248, v249, v15, v16);
    if (v250._rawBits < 0x10000) {
      v250._rawBits |= 3;
    }
    uint64_t v90 = specialized Collection.count.getter(v250, v251, v15, v16);
    swift_bridgeObjectRelease(v16);
    if ((v7 & 0x1000000000000000) != 0)
    {
LABEL_319:
      Swift::Int v252 = String.UTF8View._foreignCount()();
      uint64_t v22 = v252 + v90;
      if (!__OFADD__(v252, v90)) {
        goto LABEL_108;
      }
LABEL_321:
      __break(1u);
LABEL_322:
      unint64_t v253 = v3;
      if ((v10 & 0x1000000000000000) != 0)
      {
        uint64_t v90 = _StringGuts._foreignConvertedToSmall()(v90, v7);
        uint64_t v10 = v260;
      }
      else
      {
        if ((v90 & 0x1000000000000000) != 0)
        {
          unint64_t v254 = (unsigned __int8 *)((v10 & 0xFFFFFFFFFFFFFFFLL) + 32);
          uint64_t v255 = v90 & 0xFFFFFFFFFFFFLL;
        }
        else
        {
          unint64_t v254 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v90, v7);
          uint64_t v255 = v263;
        }
        swift_bridgeObjectRetain(v7);
        closure #1 in _StringGuts._convertedToSmall()(v254, v255, &v275);
        swift_bridgeObjectRelease(v7);
        uint64_t v90 = v275;
        uint64_t v10 = v276;
      }
      uint64_t v17 = v270;
      unint64_t v3 = v253;
LABEL_160:
      v119._Swift::UInt64 rawBits = (v3 << 16) | 1;
      v120._Swift::UInt64 rawBits = 1;
      v121._Swift::UInt64 rawBits = _StringGuts.validateScalarRange(_:)(v120, v119, v15, v16);
      if (v121._rawBits < 0x10000) {
        v121._rawBits |= 3;
      }
      uint64_t v15 = specialized String.init(_:)(v121, v122, v15, v16);
      uint64_t v22 = v123;
      swift_bridgeObjectRelease(v16);
      if ((v22 & 0x2000000000000000) != 0)
      {
        swift_bridgeObjectRelease(v22);
      }
      else
      {
        if ((v22 & 0x1000000000000000) != 0)
        {
          uint64_t v15 = _StringGuts._foreignConvertedToSmall()(v15, v22);
          uint64_t v262 = v261;
          swift_bridgeObjectRelease(v22);
          uint64_t v22 = v262;
        }
        else
        {
          if ((v15 & 0x1000000000000000) != 0)
          {
            v256 = (unsigned __int8 *)((v22 & 0xFFFFFFFFFFFFFFFLL) + 32);
            uint64_t v257 = v15 & 0xFFFFFFFFFFFFLL;
          }
          else
          {
            v256 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v15, v22);
          }
          closure #1 in _StringGuts._convertedToSmall()(v256, v257, &v275);
          swift_bridgeObjectRelease(v22);
          uint64_t v15 = v275;
          uint64_t v22 = v276;
        }
        uint64_t v17 = v270;
      }
      uint64_t v124 = HIBYTE(v10) & 0xF;
      uint64_t v125 = HIBYTE(v22) & 0xF;
      uint64_t v126 = v125 + v124;
      if ((unint64_t)(v125 + v124) <= 0xF)
      {
        if (v125)
        {
          uint64_t v127 = 0;
          unint64_t v128 = 0;
          uint64_t v129 = 8 * v125;
          do
          {
            unint64_t v130 = v124 + v128;
            BOOL v65 = v128++ >= 8;
            if (v65) {
              unint64_t v131 = v22;
            }
            else {
              unint64_t v131 = v15;
            }
            char v132 = (8 * v124 + v127) & 0x38;
            uint64_t v133 = (-255 << v132) - 1;
            unint64_t v134 = (unint64_t)(v131 >> (v127 & 0x38)) << v132;
            unint64_t v135 = v134 | v133 & v10;
            unint64_t v136 = v134 | v133 & v90;
            if (v130 < 8) {
              uint64_t v90 = v136;
            }
            else {
              uint64_t v10 = v135;
            }
            v127 += 8;
          }
          while (v129 != v127);
        }
        swift_bridgeObjectRelease(v7);
        swift_bridgeObjectRelease(v16);
        unint64_t v137 = 0xA000000000000000;
        if (!(v90 & 0x8080808080808080 | v10 & 0x80808080808080)) {
          unint64_t v137 = 0xE000000000000000;
        }
        unint64_t v277 = v90;
        unint64_t v278 = v137 & 0xFF00000000000000 | (v126 << 56) | v10 & 0xFFFFFFFFFFFFFFLL;
        if (v274 == 1) {
          return v277;
        }
LABEL_184:
        uint64_t v264 = (v17 & 0xFFFFFFFFFFFFFFFLL) + 32;
        uint64_t v265 = v17 & 0xFFFFFFFFFFFFFFLL;
        uint64_t v34 = 1;
LABEL_188:
        specialized Array._checkSubscript(_:wasNativeTypeChecked:)(v34, 1, (uint64_t)a3);
        if (__OFADD__(v34, 1))
        {
          __break(1u);
          continue;
        }
        uint64_t v272 = v34 + 1;
        Swift::UInt64 v141 = &v267[4 * v34];
        uint64_t v15 = *v141;
        unint64_t v142 = v141[1];
        uint64_t v10 = v141[2];
        unint64_t v16 = v141[3];
        uint64_t v4 = v277;
        unint64_t v7 = v278;
        unint64_t v143 = HIBYTE(v278) & 0xF;
        if ((v278 & 0x2000000000000000) != 0) {
          unint64_t v144 = HIBYTE(v278) & 0xF;
        }
        else {
          unint64_t v144 = v277 & 0xFFFFFFFFFFFFLL;
        }
        if (!v144 && (v277 & ~v278 & 0x2000000000000000) == 0)
        {
          swift_bridgeObjectRetain(v16);
          swift_bridgeObjectRetain(v17);
          swift_bridgeObjectRelease(v7);
          unint64_t v277 = a1;
          unint64_t v278 = v17;
          goto LABEL_238;
        }
        if ((v278 & 0x2000000000000000) == 0)
        {
          uint64_t v22 = v268;
          if ((v17 & 0x2000000000000000) != 0) {
            uint64_t v22 = v266;
          }
LABEL_199:
          if ((v17 & 0x1000000000000000) != 0)
          {
            swift_bridgeObjectRetain(v16);
            v236._Swift::UInt64 rawBits = 1;
            v237._Swift::UInt64 rawBits = (v22 << 16) | 1;
            v238._Swift::UInt64 rawBits = _StringGuts.validateScalarRange(_:)(v236, v237, a1, v17);
            if (v238._rawBits < 0x10000) {
              v238._rawBits |= 3;
            }
            unint64_t v3 = specialized Collection.count.getter(v238, v239, a1, v17);
            if ((v7 & 0x1000000000000000) == 0) {
              goto LABEL_201;
            }
          }
          else
          {
            swift_bridgeObjectRetain(v16);
            unint64_t v3 = v22;
            if ((v7 & 0x1000000000000000) == 0)
            {
LABEL_201:
              BOOL v35 = __OFADD__(v144, v3);
              uint64_t v34 = v144 + v3;
              if (v35) {
                goto LABEL_314;
              }
              goto LABEL_202;
            }
          }
          Swift::Int v240 = String.UTF8View._foreignCount()();
          uint64_t v34 = v240 + v3;
          if (__OFADD__(v240, v3)) {
            goto LABEL_314;
          }
LABEL_202:
          if ((v4 & ~v7 & 0x2000000000000000) != 0
            && swift_isUniquelyReferenced_nonNull_native(v7 & 0xFFFFFFFFFFFFFFFLL))
          {
            int64_t v146 = _StringGuts.nativeUnusedCapacity.getter(v4, v7);
            if (v147) {
              goto LABEL_336;
            }
            uint64_t v148 = (v7 >> 61) & 1;
            if (v146 < (uint64_t)v3) {
              LOBYTE(v148) = 1;
            }
            if (v34 <= 15 && (v148 & 1) != 0)
            {
LABEL_209:
              swift_bridgeObjectRetain(v7);
              unint64_t v149 = _StringGuts._convertedToSmall()(v4, v7);
              unint64_t v151 = v150;
              swift_bridgeObjectRelease(v7);
              v152._Swift::UInt64 rawBits = (v22 << 16) | 1;
              v153._Swift::UInt64 rawBits = 1;
              Swift::UInt64 v154 = _StringGuts.validateScalarRange(_:)(v153, v152, a1, v17);
              Swift::UInt64 v156 = v155;
              if (v154 >= 0x10000) {
                Swift::UInt64 v157 = v154;
              }
              else {
                Swift::UInt64 v157 = v154 | 3;
              }
              swift_bridgeObjectRetain(v17);
              v158._Swift::UInt64 rawBits = v157;
              v159._Swift::UInt64 rawBits = v156;
              unint64_t v160 = specialized String.init(_:)(v158, v159, a1, v17);
              uint64_t v4 = v161;
              swift_bridgeObjectRelease(v17);
              unint64_t v162 = _StringGuts._convertedToSmall()(v160, v4);
              unint64_t v164 = v163;
              swift_bridgeObjectRelease(v4);
              unint64_t v165 = specialized _SmallString.init(_:appending:)(v149, v151, v162, v164);
              if (v167) {
                goto LABEL_335;
              }
              uint64_t v168 = v165;
              unint64_t v169 = v166;
              swift_bridgeObjectRelease(v7);
              unint64_t v277 = v168;
              unint64_t v278 = v169;
              uint64_t v17 = v270;
              goto LABEL_238;
            }
          }
          else if (v34 <= 15)
          {
            goto LABEL_209;
          }
          _StringGuts.prepareForAppendInPlace(totalCount:otherUTF8Count:)(v34, v3);
          if ((v17 & 0x1000000000000000) != 0)
          {
            _StringGuts._foreignAppendInPlace(_:)(a1, v17, 0, v22);
          }
          else
          {
            uint64_t v170 = a1;
            if ((v17 & 0x2000000000000000) != 0)
            {
              uint64_t v275 = a1;
              uint64_t v276 = v265;
              if (v266 < v22) {
                goto LABEL_311;
              }
              Swift::String::Index v186 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, v22, (uint64_t)&v275, v266);
              _StringGuts.appendInPlace(_:isASCII:)(v186, v187, (v17 & 0x4000000000000000) != 0);
            }
            else
            {
              uint64_t v171 = v264;
              uint64_t v172 = v268;
              if ((a1 & 0x1000000000000000) != 0)
              {
                if (v268 < v22) {
                  goto LABEL_311;
                }
              }
              else
              {
                uint64_t v171 = (uint64_t)_StringObject.sharedUTF8.getter(a1, v17);
                uint64_t v172 = v246;
                uint64_t v170 = a1;
                if (v246 < v22) {
                  goto LABEL_311;
                }
              }
              uint64_t v173 = v170;
              unint64_t v174 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, v22, v171, v172);
              _StringGuts.appendInPlace(_:isASCII:)(v174, v175, v173 < 0);
            }
          }
          goto LABEL_238;
        }
        uint64_t v22 = v268;
        if ((v17 & 0x2000000000000000) == 0) {
          goto LABEL_199;
        }
        uint64_t v22 = v266;
        unint64_t v145 = v143 + v266;
        if (v143 + v266 > 0xF) {
          goto LABEL_199;
        }
        if (v266)
        {
          uint64_t v176 = 0;
          unint64_t v177 = 0;
          unint64_t v178 = v278;
          do
          {
            unint64_t v179 = v143 + v177;
            BOOL v65 = v177++ >= 8;
            if (v65) {
              unint64_t v180 = v17;
            }
            else {
              unint64_t v180 = a1;
            }
            char v181 = (8 * v143 + v176) & 0x38;
            uint64_t v182 = (-255 << v181) - 1;
            unint64_t v183 = (unint64_t)(v180 >> (v176 & 0x38)) << v181;
            unint64_t v184 = v183 | v182 & v178;
            unint64_t v185 = v183 | v182 & v4;
            if (v179 < 8) {
              uint64_t v4 = v185;
            }
            else {
              unint64_t v178 = v184;
            }
            v176 += 8;
          }
          while (8 * v266 != v176);
        }
        else
        {
          unint64_t v178 = v278;
        }
        unint64_t v188 = 0xA000000000000000;
        if (!(v4 & 0x8080808080808080 | v178 & 0x80808080808080)) {
          unint64_t v188 = 0xE000000000000000;
        }
        unint64_t v189 = v188 | (v145 << 56);
        swift_bridgeObjectRetain(v16);
        swift_bridgeObjectRelease(v7);
        unint64_t v277 = v4;
        unint64_t v278 = v189 & 0xFF00000000000000 | v178 & 0xFFFFFFFFFFFFFFLL;
        uint64_t v17 = v270;
LABEL_238:
        if (&full type metadata for Substring == &full type metadata for String)
        {
          swift_bridgeObjectRetain(v142);
          swift_bridgeObjectRelease(v16);
          unint64_t v16 = v142;
        }
        else
        {
          uint64_t v190 = HIBYTE(v16) & 0xF;
          if ((v16 & 0x2000000000000000) == 0) {
            uint64_t v190 = v10 & 0xFFFFFFFFFFFFLL;
          }
          if ((unint64_t)v15 >> 16 || v142 >> 16 != v190)
          {
            v191._Swift::UInt64 rawBits = v15;
            v192._Swift::UInt64 rawBits = v142;
            uint64_t v15 = specialized static String._copying(_:)(v191, v192, v10, v16);
            unint64_t v194 = v193;
            swift_bridgeObjectRelease(v16);
            unint64_t v16 = v194;
          }
          else
          {
            uint64_t v15 = v10;
          }
        }
        unint64_t v7 = v277;
        uint64_t v22 = v278;
        unint64_t v195 = HIBYTE(v278) & 0xF;
        if ((v278 & 0x2000000000000000) != 0) {
          unint64_t v196 = HIBYTE(v278) & 0xF;
        }
        else {
          unint64_t v196 = v277 & 0xFFFFFFFFFFFFLL;
        }
        if (!v196 && (v277 & ~v278 & 0x2000000000000000) == 0)
        {
          swift_bridgeObjectRelease(v278);
          unint64_t v277 = v15;
          unint64_t v278 = v16;
          goto LABEL_186;
        }
        uint64_t v17 = v16 & 0x2000000000000000;
        uint64_t v197 = HIBYTE(v16) & 0xF;
        if ((v278 & 0x2000000000000000) == 0 || !v17) {
          goto LABEL_255;
        }
        unint64_t v198 = v195 + v197;
        if (v195 + v197 <= 0xF)
        {
          if (v197)
          {
            uint64_t v220 = 0;
            unint64_t v221 = 0;
            uint64_t v222 = 8 * v197;
            unint64_t v223 = v278;
            unint64_t v3 = v274;
            uint64_t v140 = v272;
            do
            {
              unint64_t v224 = v195 + v221;
              BOOL v65 = v221++ >= 8;
              if (v65) {
                unint64_t v225 = v16;
              }
              else {
                unint64_t v225 = v15;
              }
              char v226 = (8 * v195 + v220) & 0x38;
              uint64_t v227 = (-255 << v226) - 1;
              unint64_t v228 = (unint64_t)(v225 >> (v220 & 0x38)) << v226;
              unint64_t v229 = v228 | v227 & v223;
              unint64_t v230 = v228 | v227 & v7;
              if (v224 < 8) {
                unint64_t v7 = v230;
              }
              else {
                unint64_t v223 = v229;
              }
              v220 += 8;
            }
            while (v222 != v220);
          }
          else
          {
            unint64_t v223 = v278;
            unint64_t v3 = v274;
            uint64_t v140 = v272;
          }
          swift_bridgeObjectRelease(v278);
          swift_bridgeObjectRelease(v16);
          unint64_t v235 = 0xA000000000000000;
          if (!(v7 & 0x8080808080808080 | v223 & 0x80808080808080)) {
            unint64_t v235 = 0xE000000000000000;
          }
          unint64_t v277 = v7;
          unint64_t v278 = v235 & 0xFF00000000000000 | (v198 << 56) | v223 & 0xFFFFFFFFFFFFFFLL;
          uint64_t v17 = v270;
          goto LABEL_187;
        }
        uint64_t v17 = 1;
LABEL_255:
        uint64_t v10 = v15 & 0xFFFFFFFFFFFFLL;
        if (v17) {
          unint64_t v3 = HIBYTE(v16) & 0xF;
        }
        else {
          unint64_t v3 = v15 & 0xFFFFFFFFFFFFLL;
        }
        swift_bridgeObjectRetain_n(v16, 2);
        if ((v16 & 0x1000000000000000) != 0)
        {
          swift_bridgeObjectRetain_n(v16, 5);
          v241._Swift::UInt64 rawBits = 1;
          v242._Swift::UInt64 rawBits = (v3 << 16) | 1;
          v243._Swift::UInt64 rawBits = _StringGuts.validateScalarRange(_:)(v241, v242, v15, v16);
          if (v243._rawBits < 0x10000) {
            v243._rawBits |= 3;
          }
          uint64_t v4 = specialized Collection.count.getter(v243, v244, v15, v16);
          swift_bridgeObjectRelease(v16);
          if ((v22 & 0x1000000000000000) == 0) {
            goto LABEL_260;
          }
        }
        else
        {
          swift_bridgeObjectRetain_n(v16, 4);
          uint64_t v4 = v3;
          if ((v22 & 0x1000000000000000) == 0)
          {
LABEL_260:
            BOOL v35 = __OFADD__(v196, v4);
            uint64_t v34 = v196 + v4;
            if (v35) {
              goto LABEL_315;
            }
            goto LABEL_261;
          }
        }
        Swift::Int v245 = String.UTF8View._foreignCount()();
        uint64_t v34 = v245 + v4;
        if (__OFADD__(v245, v4)) {
          goto LABEL_315;
        }
LABEL_261:
        if ((v7 & ~v22 & 0x2000000000000000) != 0
          && swift_isUniquelyReferenced_nonNull_native(v22 & 0xFFFFFFFFFFFFFFFLL))
        {
          unint64_t v7 = v278;
          int64_t v199 = _StringGuts.nativeUnusedCapacity.getter(v277, v278);
          if (v200) {
            goto LABEL_336;
          }
          if (v34 < 16 && ((v7 & 0x2000000000000000) != 0 || v199 < v4))
          {
LABEL_273:
            swift_bridgeObjectRelease_n(v16, 5);
            unint64_t v203 = v277;
            swift_bridgeObjectRetain(v7);
            unint64_t v204 = _StringGuts._convertedToSmall()(v203, v7);
            uint64_t v22 = v205;
            swift_bridgeObjectRelease(v7);
            v206._Swift::UInt64 rawBits = (v3 << 16) | 1;
            v207._Swift::UInt64 rawBits = 1;
            v208._Swift::UInt64 rawBits = _StringGuts.validateScalarRange(_:)(v207, v206, v15, v16);
            if (v208._rawBits < 0x10000) {
              v208._rawBits |= 3;
            }
            unint64_t v210 = specialized String.init(_:)(v208, v209, v15, v16);
            uint64_t v15 = v211;
            swift_bridgeObjectRelease(v16);
            unint64_t v212 = _StringGuts._convertedToSmall()(v210, v15);
            unint64_t v214 = v213;
            swift_bridgeObjectRelease(v15);
            unint64_t v215 = specialized _SmallString.init(_:appending:)(v204, v22, v212, v214);
            uint64_t v17 = v270;
            if (v217) {
              goto LABEL_335;
            }
            uint64_t v218 = v215;
            unint64_t v219 = v216;
            swift_bridgeObjectRelease(v7);
            swift_bridgeObjectRelease(v16);
            unint64_t v277 = v218;
            unint64_t v278 = v219;
LABEL_186:
            unint64_t v3 = v274;
            uint64_t v140 = v272;
            goto LABEL_187;
          }
        }
        else if (v34 <= 15)
        {
          unint64_t v7 = v278;
          goto LABEL_273;
        }
        unint64_t v7 = (unint64_t)&v277;
        _StringGuts.prepareForAppendInPlace(totalCount:otherUTF8Count:)(v34, v4);
        swift_bridgeObjectRelease_n(v16, 4);
        if ((v16 & 0x1000000000000000) != 0)
        {
          swift_bridgeObjectRelease(v16);
          _StringGuts._foreignAppendInPlace(_:)(v15, v16, 0, v3);
          swift_bridgeObjectRelease_n(v16, 2);
        }
        else
        {
          if (!v17)
          {
            if ((v15 & 0x1000000000000000) != 0)
            {
              swift_bridgeObjectRelease(v16);
              id v231 = (id)((v16 & 0xFFFFFFFFFFFFFFFLL) + 32);
              uint64_t v232 = v15 & 0xFFFFFFFFFFFFLL;
            }
            else
            {
              id v231 = _StringObject.sharedUTF8.getter(v15, v16);
              uint64_t v232 = v247;
              swift_bridgeObjectRelease(v16);
              if (v232 < v10) {
                goto LABEL_311;
              }
            }
            unint64_t v3 = v274;
            uint64_t v17 = v270;
            uint64_t v140 = v272;
            uint64_t v233 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, v15 & 0xFFFFFFFFFFFFLL, (uint64_t)v231, v232);
            unint64_t v7 = (unint64_t)&v277;
            _StringGuts.appendInPlace(_:isASCII:)(v233, v234, v15 < 0);
            swift_bridgeObjectRelease_n(v16, 2);
            goto LABEL_187;
          }
          swift_bridgeObjectRelease_n(v16, 2);
          uint64_t v275 = v15;
          uint64_t v276 = v16 & 0xFFFFFFFFFFFFFFLL;
          unint64_t v201 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, HIBYTE(v16) & 0xF, (uint64_t)&v275, HIBYTE(v16) & 0xF);
          _StringGuts.appendInPlace(_:isASCII:)(v201, v202, (v16 & 0x4000000000000000) != 0);
          swift_bridgeObjectRelease(v16);
        }
        unint64_t v3 = v274;
        uint64_t v17 = v270;
        uint64_t v140 = v272;
LABEL_187:
        uint64_t v34 = v140;
        if (v140 == v3) {
          return v277;
        }
        goto LABEL_188;
      }
LABEL_335:
      unint64_t v259 = 266;
LABEL_337:
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/StringGutsRangeReplaceable.swift", 38, 2, v259, 0);
    }
    break;
  }
LABEL_107:
  BOOL v35 = __OFADD__(v22, v90);
  v22 += v90;
  if (v35) {
    goto LABEL_321;
  }
LABEL_108:
  if ((v10 & ~v7 & 0x2000000000000000) == 0 || !swift_isUniquelyReferenced_nonNull_native(v7 & 0xFFFFFFFFFFFFFFFLL))
  {
    if (v22 >= 16)
    {
      uint64_t v271 = v34;
      uint64_t v91 = v277;
      unint64_t v7 = v278;
      goto LABEL_117;
    }
    uint64_t v10 = v278;
    if ((v278 & 0x2000000000000000) == 0)
    {
      unint64_t v7 = v278;
LABEL_140:
      int v103 = 1;
      goto LABEL_159;
    }
    int v103 = 0;
    unint64_t v7 = v278;
    goto LABEL_159;
  }
  uint64_t v271 = v34;
  uint64_t v91 = v277;
  unint64_t v7 = v278;
  int64_t v92 = _StringGuts.nativeUnusedCapacity.getter(v277, v278);
  if (v93)
  {
LABEL_336:
    unint64_t v259 = 258;
    goto LABEL_337;
  }
  if (v22 < 16)
  {
    if ((v7 & 0x2000000000000000) == 0)
    {
      uint64_t v10 = v7;
      if (v92 < v90) {
        goto LABEL_140;
      }
      goto LABEL_117;
    }
    int v103 = 0;
    uint64_t v10 = v7;
LABEL_159:
    swift_bridgeObjectRelease_n(v16, 5);
    uint64_t v90 = v277;
    uint64_t v17 = v270;
    if (v103) {
      goto LABEL_322;
    }
    goto LABEL_160;
  }
LABEL_117:
  uint64_t v10 = v3;
  int64_t v94 = _StringGuts.nativeUnusedCapacity.getter(v91, v7);
  unint64_t v3 = (v95 & 1) == 0 && v94 >= v90;
  if ((v91 & ~v7 & 0x2000000000000000) == 0 || !swift_isUniquelyReferenced_nonNull_native(v7 & 0xFFFFFFFFFFFFFFFLL))
  {
    unint64_t v14 = v274;
    if (v3) {
      goto LABEL_134;
    }
    goto LABEL_128;
  }
  unint64_t v14 = v274;
  if (!v3)
  {
LABEL_128:
    uint64_t v97 = _StringGuts.nativeCapacity.getter(v91, v7);
    if (v98) {
      uint64_t v99 = 0;
    }
    else {
      uint64_t v99 = v97;
    }
    if (v99 + 0x4000000000000000 < 0)
    {
      __break(1u);
LABEL_333:
      id v114 = _StringObject.sharedUTF8.getter(v15, v16);
      uint64_t v116 = v258;
      swift_bridgeObjectRelease(v16);
      if (v116 < v271) {
LABEL_311:
      }
        _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x745uLL, 0);
      unint64_t v14 = v274;
      uint64_t v17 = v270;
      uint64_t v115 = v271;
      goto LABEL_156;
    }
    uint64_t v100 = 2 * v99;
    if (v100 > v22) {
      uint64_t v22 = v100;
    }
LABEL_134:
    _StringGuts.grow(_:)(v22);
  }
  swift_bridgeObjectRelease_n(v16, 4);
  if ((v16 & 0x1000000000000000) != 0)
  {
    swift_bridgeObjectRelease(v16);
    unint64_t v7 = (unint64_t)&v277;
    _StringGuts._foreignAppendInPlace(_:)(v15, v16, 0, v10);
    swift_bridgeObjectRelease_n(v16, 2);
    goto LABEL_182;
  }
  if (v17)
  {
    swift_bridgeObjectRelease_n(v16, 2);
    uint64_t v275 = v15;
    uint64_t v276 = v16 & 0xFFFFFFFFFFFFFFLL;
    unint64_t v101 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, v4, (uint64_t)&v275, v4);
    unint64_t v7 = (unint64_t)&v277;
    _StringGuts.appendInPlace(_:isASCII:)(v101, v102, (v16 & 0x4000000000000000) != 0);
    swift_bridgeObjectRelease(v16);
    goto LABEL_182;
  }
  if ((v15 & 0x1000000000000000) == 0) {
    goto LABEL_333;
  }
  swift_bridgeObjectRelease(v16);
  id v114 = (id)((v16 & 0xFFFFFFFFFFFFFFFLL) + 32);
  uint64_t v17 = v270;
  uint64_t v115 = v271;
  uint64_t v116 = v271;
LABEL_156:
  unint64_t v117 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, v115, (uint64_t)v114, v116);
  unint64_t v7 = (unint64_t)&v277;
  _StringGuts.appendInPlace(_:isASCII:)(v117, v118, v15 < 0);
  swift_bridgeObjectRelease_n(v16, 2);
  if (v14 != 1) {
    goto LABEL_184;
  }
  return v277;
}

unint64_t Sequence<>.joined(separator:)(uint64_t a1, unint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = v5;
  uint64_t v349 = a5;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (int **)a4, (uint64_t)a3, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
  uint64_t v364 = *((void *)AssociatedTypeWitness - 1);
  uint64_t v12 = MEMORY[0x1F4188790](AssociatedTypeWitness);
  v350 = (Swift::UInt64 *)((char *)&v339 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  v347 = (unint64_t *)((char *)&v339 - v15);
  uint64_t v16 = MEMORY[0x1F4188790](v14);
  uint64_t v18 = (char *)&v339 - v17;
  uint64_t v19 = MEMORY[0x1F4188790](v16);
  v362 = (char *)&v339 - v20;
  uint64_t v21 = MEMORY[0x1F4188790](v19);
  v353 = (unint64_t *)((char *)&v339 - v22);
  uint64_t v23 = MEMORY[0x1F4188790](v21);
  v357 = (char *)&v339 - v24;
  uint64_t v25 = MEMORY[0x1F4188790](v23);
  v361 = (Swift::UInt64 *)((char *)&v339 - v26);
  MEMORY[0x1F4188790](v25);
  v351 = (uint64_t *)((char *)&v339 - v27);
  v366 = (Class *)v28;
  v346 = type metadata accessor for Optional(0, v28, v29, v30);
  uint64_t v345 = (uint64_t)*(v346 - 1);
  uint64_t v31 = MEMORY[0x1F4188790](v346);
  v358 = (char *)&v339 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v33 = MEMORY[0x1F4188790](v31);
  BOOL v35 = (char *)&v339 - v34;
  uint64_t v36 = MEMORY[0x1F4188790](v33);
  v360 = (char *)&v339 - v37;
  uint64_t v38 = *(a3 - 1);
  MEMORY[0x1F4188790](v36);
  size_t v40 = (char *)&v339 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  v367 = swift_getAssociatedTypeWitness(0, (int **)a4, (uint64_t)a3, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Iterator);
  uint64_t v41 = MEMORY[0x1F4188790](v367);
  MEMORY[0x1F4188790](v41);
  v363 = (char *)&v339 - v44;
  if (a3 == (void *)&unk_1EC9FFD88) {
    return specialized Sequence<>.joined(separator:)(a1, a2, *v6);
  }
  uint64_t v359 = a1;
  if (a3 == (void *)&unk_1ECA00FC0) {
    return specialized Sequence<>.joined(separator:)(v359, a2, *v6);
  }
  v356 = v43;
  v344 = v18;
  uint64_t v342 = v42;
  unint64_t v354 = a2;
  unint64_t v348 = HIBYTE(a2) & 0xF;
  v355 = (void (*)(Swift::UInt64 *, char *, Class *))(v359 & 0xFFFFFFFFFFFFLL);
  if ((a2 & 0x2000000000000000) != 0) {
    uint64_t v45 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v45 = v359 & 0xFFFFFFFFFFFFLL;
  }
  uint64_t v46 = (*(uint64_t (**)(void *, uint64_t))(a4 + 40))(a3, a4);
  uint64_t v47 = v46 + v46 * v45;
  unint64_t v370 = 0;
  unint64_t v371 = 0xE000000000000000;
  if (v47 >= 16)
  {
    uint64_t v48 = _StringGuts.uniqueNativeCapacity.getter();
    if ((v49 & 1) != 0 || v48 < v47)
    {
      uint64_t v51 = 2 * _StringGuts.uniqueNativeCapacity.getter();
      if (v51 <= v47) {
        uint64_t v51 = v47;
      }
      if (v50) {
        int64_t v52 = v47;
      }
      else {
        int64_t v52 = v51;
      }
      uint64_t v368 = 0;
      uint64_t v369 = 0;
      int64_t v53 = specialized static __StringStorage.create(initializingFrom:codeUnitCapacity:isASCII:)((char *)&v368, 0, v52, 1);
      uint64_t v54 = *(void *)(v53 + 24);
      swift_bridgeObjectRelease(0xE000000000000000);
      unint64_t v370 = v54;
      unint64_t v371 = v53;
    }
  }
  (*(void (**)(char *, void **, void *))(v38 + 16))(v40, v6, a3);
  unint64_t v55 = *(void (**)(void *, uint64_t))(a4 + 32);
  uint64_t v56 = v364;
  char v57 = (char **)(v364 + 48);
  uint64_t v365 = v364 + 48;
  if (!v45)
  {
    v55(a3, a4);
    unint64_t v64 = v367;
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(a4, (uint64_t)a3, (uint64_t)v367, (uint64_t)&protocol requirements base descriptor for Sequence, associated conformance descriptor for Sequence.Sequence.Iterator: IteratorProtocol);
    unint64_t v66 = *(char **)(AssociatedConformanceWitness + 16);
    char v67 = v360;
    v362 = (char *)AssociatedConformanceWitness;
    v358 = v66;
    uint64_t v359 = AssociatedConformanceWitness + 16;
    ((void (*)(const char *))v66)(v64);
    uint64_t v68 = v366;
    v356 = *v57;
    int v69 = ((uint64_t (*)(char *, uint64_t, Class *))v356)(v67, 1, v366);
    unint64_t v70 = v357;
    unint64_t v71 = v361;
    if (v69 == 1)
    {
LABEL_21:
      (*(void (**)(char *, const char *))(v342 + 8))(v363, v64);
      return v370;
    }
    Swift::String::Index v79 = *(void (**)(Swift::UInt64 *, char *, Class *))(v56 + 32);
    uint64_t v78 = v56 + 32;
    v352 = (void (**)(char *, Swift::UInt64 *, Class *))(v78 - 16);
    unint64_t v354 = v78 - 24;
    v355 = v79;
    uint64_t v364 = v78;
    v79(v361, v67, v68);
    while (1)
    {
      if (v68 == (Class *)&type metadata for String)
      {
        uint64_t v84 = *v71;
        uint64_t v74 = v71[1];
      }
      else
      {
        if (v68 != (Class *)&type metadata for Substring)
        {
          Swift::String::Index v81 = *v352;
          (*v352)(v70, v71, v68);
          Swift::Int v82 = v353;
          v81((char *)v353, (Swift::UInt64 *)v70, v68);
          if (swift_dynamicCast((char *)&v368, v82, v68, (const char *)&type metadata for String, 6uLL))
          {
            uint64_t v83 = (void (**)(Swift::UInt64 *, Class *))v354;
            (*(void (**)(char *, Class *))v354)(v70, v68);
            uint64_t v84 = v368;
            uint64_t v74 = v369;
          }
          else
          {
            uint64_t v84 = (*(uint64_t (**)(Class *))(*(void *)(*(void *)(v349 + 40) + 8) + 8))(v68);
            uint64_t v74 = v88;
            uint64_t v83 = (void (**)(Swift::UInt64 *, Class *))v354;
            (*(void (**)(char *, Class *))v354)(v70, v68);
          }
          goto LABEL_42;
        }
        v85._Swift::UInt64 rawBits = *v71;
        v86._Swift::UInt64 rawBits = v71[1];
        uint64_t v84 = v71[2];
        uint64_t v74 = v71[3];
        uint64_t v87 = HIBYTE(v74) & 0xF;
        if ((v74 & 0x2000000000000000) == 0) {
          uint64_t v87 = v84 & 0xFFFFFFFFFFFFLL;
        }
        if (v85._rawBits >> 16 || v86._rawBits >> 16 != v87)
        {
          uint64_t v84 = specialized static String._copying(_:)(v85, v86, v71[2], v71[3]);
          uint64_t v74 = v123;
          goto LABEL_40;
        }
      }
      swift_bridgeObjectRetain(v74);
LABEL_40:
      uint64_t v83 = (void (**)(Swift::UInt64 *, Class *))v354;
LABEL_42:
      (*v83)(v71, v68);
      unint64_t v89 = v370;
      uint64_t v90 = v371;
      unint64_t v91 = HIBYTE(v371) & 0xF;
      if ((v371 & 0x2000000000000000) != 0) {
        unint64_t v92 = HIBYTE(v371) & 0xF;
      }
      else {
        unint64_t v92 = v370 & 0xFFFFFFFFFFFFLL;
      }
      if (!v92 && (v370 & ~v371 & 0x2000000000000000) == 0)
      {
        swift_bridgeObjectRelease(v371);
        unint64_t v370 = v84;
        unint64_t v371 = v74;
        goto LABEL_27;
      }
      uint64_t v93 = v74 & 0x2000000000000000;
      uint64_t v59 = HIBYTE(v74) & 0xF;
      if ((v371 & 0x2000000000000000) != 0 && v93)
      {
        unint64_t v94 = v91 + v59;
        if (v91 + v59 <= 0xF)
        {
          if (v59)
          {
            uint64_t v124 = 0;
            unint64_t v125 = 0;
            uint64_t v126 = 8 * v59;
            unint64_t v127 = v371;
            unint64_t v64 = v367;
            do
            {
              unint64_t v128 = v91 + v125;
              BOOL v129 = v125++ >= 8;
              if (v129) {
                unint64_t v130 = v74;
              }
              else {
                unint64_t v130 = v84;
              }
              char v131 = (8 * v91 + v124) & 0x38;
              uint64_t v132 = (-255 << v131) - 1;
              unint64_t v133 = (unint64_t)(v130 >> (v124 & 0x38)) << v131;
              unint64_t v134 = v133 | v132 & v127;
              unint64_t v135 = v133 | v132 & v89;
              if (v128 < 8) {
                unint64_t v89 = v135;
              }
              else {
                unint64_t v127 = v134;
              }
              v124 += 8;
            }
            while (v126 != v124);
          }
          else
          {
            unint64_t v127 = v371;
            unint64_t v64 = v367;
          }
          swift_bridgeObjectRelease(v371);
          swift_bridgeObjectRelease(v74);
          unint64_t v140 = 0xA000000000000000;
          if (!(v89 & 0x8080808080808080 | v127 & 0x80808080808080)) {
            unint64_t v140 = 0xE000000000000000;
          }
          unint64_t v370 = v89;
          unint64_t v371 = v140 & 0xFF00000000000000 | (v94 << 56) | v127 & 0xFFFFFFFFFFFFFFLL;
          goto LABEL_27;
        }
        uint64_t v93 = 1;
      }
      uint64_t v62 = v84 & 0xFFFFFFFFFFFFLL;
      if (v93) {
        uint64_t v95 = HIBYTE(v74) & 0xF;
      }
      else {
        uint64_t v95 = v84 & 0xFFFFFFFFFFFFLL;
      }
      swift_bridgeObjectRetain_n(v74, 2);
      if ((v74 & 0x1000000000000000) != 0)
      {
        swift_bridgeObjectRetain_n(v74, 5);
        v141._Swift::UInt64 rawBits = 1;
        v142._Swift::UInt64 rawBits = (v95 << 16) | 1;
        v143._Swift::UInt64 rawBits = _StringGuts.validateScalarRange(_:)(v141, v142, v84, v74);
        if (v143._rawBits < 0x10000) {
          v143._rawBits |= 3;
        }
        Swift::Int v96 = specialized Collection.count.getter(v143, v144, v84, v74);
        swift_bridgeObjectRelease(v74);
        if ((v90 & 0x1000000000000000) == 0)
        {
LABEL_56:
          BOOL v97 = __OFADD__(v92, v96);
          uint64_t v98 = v92 + v96;
          if (v97) {
            goto LABEL_327;
          }
          goto LABEL_57;
        }
      }
      else
      {
        swift_bridgeObjectRetain_n(v74, 4);
        Swift::Int v96 = v95;
        if ((v90 & 0x1000000000000000) == 0) {
          goto LABEL_56;
        }
      }
      Swift::Int v145 = String.UTF8View._foreignCount()();
      uint64_t v98 = v145 + v96;
      if (__OFADD__(v145, v96))
      {
LABEL_327:
        __break(1u);
LABEL_328:
        __break(1u);
LABEL_329:
        __break(1u);
LABEL_330:
        swift_bridgeObjectRetain_n(v89, 5);
        v324._Swift::UInt64 rawBits = 1;
        v325._Swift::UInt64 rawBits = (v59 << 16) | 1;
        v326._Swift::UInt64 rawBits = _StringGuts.validateScalarRange(_:)(v324, v325, v98, v89);
        if (v326._rawBits < 0x10000) {
          v326._rawBits |= 3;
        }
        uint64_t v59 = specialized Collection.count.getter(v326, v327, v98, v89);
        swift_bridgeObjectRelease(v89);
        if ((v96 & 0x1000000000000000) != 0)
        {
LABEL_333:
          uint64_t v84 = String.UTF8View._foreignCount()();
          Swift::Int v157 = v84 + v59;
          if (!__OFADD__(v84, v59)) {
            goto LABEL_118;
          }
LABEL_335:
          __break(1u);
LABEL_336:
          if ((v84 & 0x1000000000000000) != 0)
          {
            uint64_t v62 = _StringGuts._foreignConvertedToSmall()(v62, v90);
            uint64_t v84 = v335;
          }
          else
          {
            if ((v62 & 0x1000000000000000) != 0)
            {
              v328 = (unsigned __int8 *)((v84 & 0xFFFFFFFFFFFFFFFLL) + 32);
              uint64_t v329 = v62 & 0xFFFFFFFFFFFFLL;
            }
            else
            {
              v328 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v62, v90);
              uint64_t v329 = v338;
            }
            swift_bridgeObjectRetain(v90);
            closure #1 in _StringGuts._convertedToSmall()(v328, v329, &v368);
            swift_bridgeObjectRelease(v90);
            uint64_t v62 = v368;
            uint64_t v84 = v369;
          }
          uint64_t v59 = (uint64_t)v367;
          uint64_t v74 = v359;
LABEL_170:
          v188._Swift::UInt64 rawBits = (v343 << 16) | 1;
          v189._Swift::UInt64 rawBits = 1;
          v190._Swift::UInt64 rawBits = _StringGuts.validateScalarRange(_:)(v189, v188, v98, v89);
          if (v190._rawBits < 0x10000) {
            v190._rawBits |= 3;
          }
          unint64_t v192 = specialized String.init(_:)(v190, v191, v98, v89);
          unint64_t v194 = v193;
          swift_bridgeObjectRelease(v89);
          if ((v194 & 0x2000000000000000) != 0)
          {
            swift_bridgeObjectRelease(v194);
          }
          else
          {
            uint64_t v330 = v90;
            if ((v194 & 0x1000000000000000) != 0)
            {
              unint64_t v192 = _StringGuts._foreignConvertedToSmall()(v192, v194);
              unint64_t v337 = v336;
              swift_bridgeObjectRelease(v194);
              unint64_t v194 = v337;
            }
            else
            {
              if ((v192 & 0x1000000000000000) != 0)
              {
                v331 = (unsigned __int8 *)((v194 & 0xFFFFFFFFFFFFFFFLL) + 32);
                uint64_t v332 = v192 & 0xFFFFFFFFFFFFLL;
              }
              else
              {
                v331 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v192, v194);
              }
              closure #1 in _StringGuts._convertedToSmall()(v331, v332, &v368);
              swift_bridgeObjectRelease(v194);
              unint64_t v192 = v368;
              unint64_t v194 = v369;
            }
            uint64_t v90 = v330;
            uint64_t v59 = (uint64_t)v367;
            uint64_t v74 = v359;
          }
          uint64_t v195 = HIBYTE(v84) & 0xF;
          uint64_t v196 = HIBYTE(v194) & 0xF;
          uint64_t v197 = v196 + v195;
          if ((unint64_t)(v196 + v195) <= 0xF)
          {
            if (v196)
            {
              uint64_t v198 = 0;
              unint64_t v199 = 0;
              uint64_t v200 = 8 * v196;
              do
              {
                unint64_t v201 = v195 + v199;
                BOOL v129 = v199++ >= 8;
                if (v129) {
                  unint64_t v202 = v194;
                }
                else {
                  unint64_t v202 = v192;
                }
                char v203 = (8 * v195 + v198) & 0x38;
                uint64_t v204 = (-255 << v203) - 1;
                unint64_t v205 = (unint64_t)(v202 >> (v198 & 0x38)) << v203;
                unint64_t v206 = v205 | v204 & v84;
                unint64_t v207 = v205 | v204 & v62;
                if (v201 < 8) {
                  uint64_t v62 = v207;
                }
                else {
                  uint64_t v84 = v206;
                }
                v198 += 8;
              }
              while (v200 != v198);
            }
            swift_bridgeObjectRelease(v90);
            swift_bridgeObjectRelease(v89);
            unint64_t v208 = 0xA000000000000000;
            if (!(v62 & 0x8080808080808080 | v84 & 0x80808080808080)) {
              unint64_t v208 = 0xE000000000000000;
            }
            unint64_t v370 = v62;
            unint64_t v371 = v208 & 0xFF00000000000000 | (v197 << 56) | v84 & 0xFFFFFFFFFFFFFFLL;
            uint64_t v62 = (uint64_t)v366;
            goto LABEL_191;
          }
LABEL_349:
          unint64_t v334 = 266;
LABEL_351:
          _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/StringGutsRangeReplaceable.swift", 38, 2, v334, 0);
        }
LABEL_117:
        Swift::Int v157 = v84 + v59;
        if (__OFADD__(v84, v59)) {
          goto LABEL_335;
        }
LABEL_118:
        if ((v90 & ~v96 & 0x2000000000000000) != 0
          && swift_isUniquelyReferenced_nonNull_native(v96 & 0xFFFFFFFFFFFFFFFLL))
        {
          uint64_t v341 = v95;
          uint64_t v158 = v370;
          uint64_t v90 = v371;
          int64_t v159 = _StringGuts.nativeUnusedCapacity.getter(v370, v371);
          if (v160)
          {
LABEL_350:
            unint64_t v334 = 258;
            goto LABEL_351;
          }
          if (v157 >= 16) {
            goto LABEL_127;
          }
          if ((v90 & 0x2000000000000000) == 0)
          {
            uint64_t v84 = v90;
            if (v159 < v59)
            {
LABEL_150:
              int v171 = 1;
              goto LABEL_169;
            }
LABEL_127:
            int64_t v161 = _StringGuts.nativeUnusedCapacity.getter(v158, v90);
            BOOL v164 = (v162 & 1) == 0 && v161 >= v59;
            if ((v158 & ~v90 & 0x2000000000000000) != 0
              && swift_isUniquelyReferenced_nonNull_native(v90 & 0xFFFFFFFFFFFFFFFLL))
            {
              uint64_t v59 = (uint64_t)v367;
              uint64_t v84 = (uint64_t)v362;
              if (v164)
              {
LABEL_145:
                swift_bridgeObjectRelease_n(v89, 4);
                if ((v89 & 0x1000000000000000) != 0)
                {
                  swift_bridgeObjectRelease(v89);
                  _StringGuts._foreignAppendInPlace(_:)(v98, v89, 0, v343);
                  swift_bridgeObjectRelease_n(v89, 2);
                  uint64_t v62 = (uint64_t)v366;
LABEL_152:
                  uint64_t v74 = v359;
                }
                else
                {
                  if (v74)
                  {
                    swift_bridgeObjectRelease_n(v89, 2);
                    uint64_t v368 = v98;
                    uint64_t v369 = v89 & 0xFFFFFFFFFFFFFFLL;
                    unint64_t v169 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, v62, (uint64_t)&v368, v62);
                    _StringGuts.appendInPlace(_:isASCII:)(v169, v170, (v89 & 0x4000000000000000) != 0);
                    swift_bridgeObjectRelease(v89);
                    uint64_t v62 = (uint64_t)v366;
                    goto LABEL_152;
                  }
                  if ((v98 & 0x1000000000000000) != 0)
                  {
                    swift_bridgeObjectRelease(v89);
                    id v183 = (id)((v89 & 0xFFFFFFFFFFFFFFFLL) + 32);
                    uint64_t v184 = v341;
                    uint64_t v185 = v341;
                    uint64_t v62 = (uint64_t)v366;
                    uint64_t v74 = v359;
                    goto LABEL_167;
                  }
LABEL_347:
                  id v183 = _StringObject.sharedUTF8.getter(v98, v89);
                  uint64_t v185 = v333;
                  swift_bridgeObjectRelease(v89);
                  if (v185 < v341) {
LABEL_326:
                  }
                    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x745uLL, 0);
                  uint64_t v62 = (uint64_t)v366;
                  uint64_t v59 = (uint64_t)v367;
                  uint64_t v74 = v359;
                  uint64_t v84 = (uint64_t)v362;
                  uint64_t v184 = v341;
LABEL_167:
                  Swift::String::Index v186 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, v184, (uint64_t)v183, v185);
                  _StringGuts.appendInPlace(_:isASCII:)(v186, v187, v98 < 0);
                  swift_bridgeObjectRelease_n(v89, 2);
                }
LABEL_192:
                uint64_t v72 = v364;
                goto LABEL_193;
              }
LABEL_138:
              uint64_t v165 = _StringGuts.nativeCapacity.getter(v158, v90);
              if (v166) {
                uint64_t v167 = 0;
              }
              else {
                uint64_t v167 = v165;
              }
              if (v167 + 0x4000000000000000 < 0)
              {
                __break(1u);
                goto LABEL_347;
              }
              uint64_t v168 = 2 * v167;
              if (v168 > v157) {
                Swift::Int v157 = v168;
              }
            }
            else
            {
              uint64_t v59 = (uint64_t)v367;
              uint64_t v84 = (uint64_t)v362;
              if (!v164) {
                goto LABEL_138;
              }
            }
            _StringGuts.grow(_:)(v157);
            goto LABEL_145;
          }
          int v171 = 0;
          uint64_t v84 = v90;
        }
        else
        {
          if (v157 >= 16)
          {
            uint64_t v341 = v95;
            uint64_t v158 = v370;
            uint64_t v90 = v371;
            goto LABEL_127;
          }
          uint64_t v84 = v371;
          if ((v371 & 0x2000000000000000) == 0)
          {
            uint64_t v90 = v371;
            goto LABEL_150;
          }
          int v171 = 0;
          uint64_t v90 = v371;
        }
LABEL_169:
        uint64_t v59 = (uint64_t)v367;
        swift_bridgeObjectRelease_n(v89, 5);
        uint64_t v62 = v370;
        uint64_t v74 = v359;
        if (v171) {
          goto LABEL_336;
        }
        goto LABEL_170;
      }
LABEL_57:
      if ((v89 & ~v90 & 0x2000000000000000) != 0
        && swift_isUniquelyReferenced_nonNull_native(v90 & 0xFFFFFFFFFFFFFFFLL))
      {
        uint64_t v99 = v371;
        int64_t v100 = _StringGuts.nativeUnusedCapacity.getter(v370, v371);
        if (v101) {
          goto LABEL_350;
        }
        if (v98 < 16 && ((v99 & 0x2000000000000000) != 0 || v100 < v96)) {
          goto LABEL_69;
        }
      }
      else if (v98 <= 15)
      {
        uint64_t v99 = v371;
LABEL_69:
        swift_bridgeObjectRelease_n(v74, 5);
        unint64_t v104 = v370;
        swift_bridgeObjectRetain(v99);
        unint64_t v105 = _StringGuts._convertedToSmall()(v104, v99);
        unint64_t v107 = v106;
        swift_bridgeObjectRelease(v99);
        v108._Swift::UInt64 rawBits = (v95 << 16) | 1;
        v109._Swift::UInt64 rawBits = 1;
        v110._Swift::UInt64 rawBits = _StringGuts.validateScalarRange(_:)(v109, v108, v84, v74);
        if (v110._rawBits < 0x10000) {
          v110._rawBits |= 3;
        }
        unint64_t v112 = specialized String.init(_:)(v110, v111, v84, v74);
        unint64_t v114 = v113;
        swift_bridgeObjectRelease(v74);
        unint64_t v115 = _StringGuts._convertedToSmall()(v112, v114);
        unint64_t v117 = v116;
        swift_bridgeObjectRelease(v114);
        unint64_t v118 = specialized _SmallString.init(_:appending:)(v105, v107, v115, v117);
        uint64_t v68 = v366;
        unint64_t v64 = v367;
        unint64_t v70 = v357;
        if (v120) {
          goto LABEL_349;
        }
        uint64_t v121 = v118;
        unint64_t v122 = v119;
        swift_bridgeObjectRelease(v99);
        swift_bridgeObjectRelease(v74);
        unint64_t v370 = v121;
        unint64_t v371 = v122;
LABEL_27:
        unint64_t v71 = v361;
        goto LABEL_28;
      }
      _StringGuts.prepareForAppendInPlace(totalCount:otherUTF8Count:)(v98, v96);
      swift_bridgeObjectRelease_n(v74, 4);
      if ((v74 & 0x1000000000000000) != 0)
      {
        swift_bridgeObjectRelease(v74);
        _StringGuts._foreignAppendInPlace(_:)(v84, v74, 0, v95);
        swift_bridgeObjectRelease_n(v74, 2);
        uint64_t v68 = v366;
        unint64_t v64 = v367;
        unint64_t v70 = v357;
        goto LABEL_27;
      }
      unint64_t v71 = v361;
      if (v93)
      {
        swift_bridgeObjectRelease_n(v74, 2);
        uint64_t v368 = v84;
        uint64_t v369 = v74 & 0xFFFFFFFFFFFFFFLL;
        size_t v102 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, HIBYTE(v74) & 0xF, (uint64_t)&v368, HIBYTE(v74) & 0xF);
        _StringGuts.appendInPlace(_:isASCII:)(v102, v103, (v74 & 0x4000000000000000) != 0);
        swift_bridgeObjectRelease(v74);
        uint64_t v68 = v366;
        unint64_t v64 = v367;
        unint64_t v70 = v357;
      }
      else
      {
        if ((v84 & 0x1000000000000000) != 0)
        {
          swift_bridgeObjectRelease(v74);
          id v136 = (id)((v74 & 0xFFFFFFFFFFFFFFFLL) + 32);
          uint64_t v137 = v84 & 0xFFFFFFFFFFFFLL;
          unint64_t v64 = v367;
        }
        else
        {
          id v136 = _StringObject.sharedUTF8.getter(v84, v74);
          uint64_t v137 = v146;
          swift_bridgeObjectRelease(v74);
          if (v137 < v62) {
            goto LABEL_326;
          }
          unint64_t v64 = v367;
          unint64_t v71 = v361;
        }
        unint64_t v138 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, v84 & 0xFFFFFFFFFFFFLL, (uint64_t)v136, v137);
        _StringGuts.appendInPlace(_:isASCII:)(v138, v139, v84 < 0);
        swift_bridgeObjectRelease_n(v74, 2);
        uint64_t v68 = v366;
        unint64_t v70 = v357;
      }
LABEL_28:
      Swift::String::Index v80 = v360;
      ((void (*)(const char *, char *))v358)(v64, v362);
      if (((unsigned int (*)(char *, uint64_t, Class *))v356)(v80, 1, v68) == 1) {
        goto LABEL_21;
      }
      v355(v71, v80, v68);
    }
  }
  uint64_t v58 = v356;
  v55(a3, a4);
  uint64_t v59 = (uint64_t)v367;
  uint64_t v60 = swift_getAssociatedConformanceWitness(a4, (uint64_t)a3, (uint64_t)v367, (uint64_t)&protocol requirements base descriptor for Sequence, associated conformance descriptor for Sequence.Sequence.Iterator: IteratorProtocol);
  unint64_t v61 = *(char **)(v60 + 16);
  v363 = (char *)v60;
  v360 = v61;
  v361 = (Swift::UInt64 *)(v60 + 16);
  ((void (*)(uint64_t))v61)(v59);
  uint64_t v62 = (uint64_t)v366;
  v357 = *v57;
  if (((unsigned int (*)(char *, uint64_t, Class *))v357)(v35, 1, v366) != 1)
  {
    uint64_t v72 = v364;
    uint64_t v73 = v351;
    v352 = *(void (***)(char *, Swift::UInt64 *, Class *))(v364 + 32);
    v353 = (unint64_t *)(v364 + 32);
    ((void (*)(uint64_t *, char *, uint64_t))v352)(v351, v35, v62);
    if ((ValueMetadata *)v62 == &type metadata for String)
    {
      uint64_t v98 = *v73;
      unint64_t v89 = v73[1];
      swift_bridgeObjectRetain(v89);
      uint64_t v74 = v359;
    }
    else
    {
      uint64_t v74 = v359;
      if ((ValueMetadata *)v62 == &type metadata for Substring)
      {
        Swift::UInt64 v147 = *v73;
        Swift::UInt64 v148 = v73[1];
        unint64_t v149 = v73[2];
        unint64_t v150 = v73[3];
        swift_bridgeObjectRetain(v150);
        v151._Swift::UInt64 rawBits = v147;
        v152._Swift::UInt64 rawBits = v148;
        unint64_t v153 = v149;
        uint64_t v72 = v364;
        Swift::UInt64 v76 = specialized String.init<A>(_:)(v151, v152, v153, v150);
      }
      else
      {
        size_t v75 = v350;
        (*(void (**)(Swift::UInt64 *, uint64_t *, uint64_t))(v72 + 16))(v350, v73, v62);
        Swift::UInt64 v76 = String.init<A>(_:)(v75, (Class *)v62, *(void *)(v349 + 40));
      }
      uint64_t v98 = v76;
      unint64_t v89 = v77;
    }
    Swift::UInt64 v154 = *(Swift::UInt64 **)(v72 + 8);
    v351 = (uint64_t *)(v72 + 8);
    v350 = v154;
    ((void (*)(uint64_t *, uint64_t))v154)(v73, v62);
    uint64_t v90 = v370;
    Swift::Int v96 = v371;
    unint64_t v155 = HIBYTE(v371) & 0xF;
    if ((v371 & 0x2000000000000000) != 0) {
      uint64_t v84 = HIBYTE(v371) & 0xF;
    }
    else {
      uint64_t v84 = v370 & 0xFFFFFFFFFFFFLL;
    }
    if (v84 || (v370 & ~v371 & 0x2000000000000000) != 0)
    {
      uint64_t v74 = v89 & 0x2000000000000000;
      uint64_t v62 = HIBYTE(v89) & 0xF;
      if ((v371 & 0x2000000000000000) != 0 && v74)
      {
        unint64_t v156 = v155 + v62;
        if (v155 + v62 <= 0xF)
        {
          if (v62)
          {
            uint64_t v172 = 0;
            unint64_t v173 = 0;
            uint64_t v174 = 8 * v62;
            unint64_t v175 = v371;
            uint64_t v62 = (uint64_t)v366;
            uint64_t v74 = v359;
            do
            {
              unint64_t v176 = v155 + v173;
              BOOL v129 = v173++ >= 8;
              if (v129) {
                unint64_t v177 = v89;
              }
              else {
                unint64_t v177 = v98;
              }
              char v178 = (8 * v155 + v172) & 0x38;
              uint64_t v179 = (-255 << v178) - 1;
              unint64_t v180 = (unint64_t)(v177 >> (v172 & 0x38)) << v178;
              unint64_t v181 = v180 | v179 & v175;
              unint64_t v182 = v180 | v179 & v90;
              if (v176 < 8) {
                uint64_t v90 = v182;
              }
              else {
                unint64_t v175 = v181;
              }
              v172 += 8;
            }
            while (v174 != v172);
          }
          else
          {
            unint64_t v175 = v371;
            uint64_t v62 = (uint64_t)v366;
            uint64_t v74 = v359;
          }
          swift_bridgeObjectRelease(v371);
          swift_bridgeObjectRelease(v89);
          unint64_t v209 = 0xA000000000000000;
          if (!(v90 & 0x8080808080808080 | v175 & 0x80808080808080)) {
            unint64_t v209 = 0xE000000000000000;
          }
          unint64_t v370 = v90;
          unint64_t v371 = v209 & 0xFF00000000000000 | (v156 << 56) | v175 & 0xFFFFFFFFFFFFFFLL;
LABEL_191:
          uint64_t v84 = (uint64_t)v362;
          goto LABEL_192;
        }
        uint64_t v74 = 1;
      }
      uint64_t v95 = v98 & 0xFFFFFFFFFFFFLL;
      if (v74) {
        uint64_t v59 = HIBYTE(v89) & 0xF;
      }
      else {
        uint64_t v59 = v98 & 0xFFFFFFFFFFFFLL;
      }
      swift_bridgeObjectRetain_n(v89, 2);
      uint64_t v343 = v59;
      if ((v89 & 0x1000000000000000) != 0) {
        goto LABEL_330;
      }
      swift_bridgeObjectRetain_n(v89, 4);
      if ((v96 & 0x1000000000000000) != 0) {
        goto LABEL_333;
      }
      goto LABEL_117;
    }
    swift_bridgeObjectRelease(v371);
    unint64_t v370 = v98;
    unint64_t v371 = v89;
    uint64_t v84 = (uint64_t)v362;
LABEL_193:
    unint64_t v210 = v358;
    ((void (*)(uint64_t, char *))v360)(v59, v363);
    int v211 = ((uint64_t (*)(char *, uint64_t, uint64_t))v357)(v210, 1, v62);
    uint64_t v212 = v354;
    if (v211 == 1)
    {
LABEL_194:
      (*(void (**)(char *, uint64_t))(v342 + 8))(v356, v59);
      (*(void (**)(char *, Class *))(v345 + 8))(v210, v346);
      return v370;
    }
    uint64_t v341 = v354 & 0xFFFFFFFFFFFFFFLL;
    uint64_t v340 = (v354 & 0xFFFFFFFFFFFFFFFLL) + 32;
    uint64_t v343 = v72 + 16;
    uint64_t v364 = 8 * v348;
    while (1)
    {
      ((void (*)(uint64_t, char *, uint64_t))v352)(v84, v210, v62);
      uint64_t v90 = v370;
      unint64_t v89 = v371;
      unint64_t v214 = HIBYTE(v371) & 0xF;
      if ((v371 & 0x2000000000000000) != 0) {
        unint64_t v215 = HIBYTE(v371) & 0xF;
      }
      else {
        unint64_t v215 = v370 & 0xFFFFFFFFFFFFLL;
      }
      if (!v215 && (v370 & ~v371 & 0x2000000000000000) == 0)
      {
        swift_bridgeObjectRetain(v212);
        swift_bridgeObjectRelease(v89);
        unint64_t v370 = v74;
        unint64_t v371 = v212;
        goto LABEL_249;
      }
      if ((v371 & 0x2000000000000000) != 0) {
        break;
      }
      uint64_t v98 = (uint64_t)v355;
      if ((v212 & 0x2000000000000000) != 0) {
        goto LABEL_209;
      }
LABEL_210:
      uint64_t v95 = v98;
      if ((v212 & 0x1000000000000000) != 0)
      {
        v312._Swift::UInt64 rawBits = (v98 << 16) | 1;
        v313._Swift::UInt64 rawBits = 1;
        v314._Swift::UInt64 rawBits = _StringGuts.validateScalarRange(_:)(v313, v312, v74, v212);
        if (v314._rawBits < 0x10000) {
          v314._rawBits |= 3;
        }
        uint64_t v95 = specialized Collection.count.getter(v314, v315, v74, v212);
        if ((v89 & 0x1000000000000000) == 0)
        {
LABEL_212:
          BOOL v97 = __OFADD__(v215, v95);
          Swift::Int v96 = v215 + v95;
          if (v97) {
            goto LABEL_328;
          }
          goto LABEL_213;
        }
      }
      else if ((v371 & 0x1000000000000000) == 0)
      {
        goto LABEL_212;
      }
      Swift::Int v316 = String.UTF8View._foreignCount()();
      Swift::Int v96 = v316 + v95;
      if (__OFADD__(v316, v95)) {
        goto LABEL_328;
      }
LABEL_213:
      if ((v90 & ~v89 & 0x2000000000000000) != 0
        && swift_isUniquelyReferenced_nonNull_native(v89 & 0xFFFFFFFFFFFFFFFLL))
      {
        int64_t v217 = _StringGuts.nativeUnusedCapacity.getter(v90, v89);
        if (v218) {
          goto LABEL_350;
        }
        uint64_t v219 = (v89 >> 61) & 1;
        if (v217 < v95) {
          LOBYTE(v219) = 1;
        }
        if (v96 > 15 || (v219 & 1) == 0)
        {
LABEL_226:
          _StringGuts.prepareForAppendInPlace(totalCount:otherUTF8Count:)(v96, v95);
          if ((v212 & 0x1000000000000000) != 0)
          {
            _StringGuts._foreignAppendInPlace(_:)(v74, v212, 0, v98);
          }
          else if ((v212 & 0x2000000000000000) != 0)
          {
            uint64_t v368 = v74;
            uint64_t v369 = v341;
            if (v348 < v98) {
              goto LABEL_326;
            }
            v256 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, v98, (uint64_t)&v368, v348);
            _StringGuts.appendInPlace(_:isASCII:)(v256, v257, (v212 & 0x4000000000000000) != 0);
          }
          else
          {
            uint64_t v242 = v340;
            uint64_t v243 = (uint64_t)v355;
            if ((v74 & 0x1000000000000000) != 0)
            {
              if ((uint64_t)v355 < v98) {
                goto LABEL_326;
              }
            }
            else
            {
              uint64_t v242 = (uint64_t)_StringObject.sharedUTF8.getter(v74, v212);
              uint64_t v243 = v322;
              if (v322 < v98) {
                goto LABEL_326;
              }
            }
            Swift::String::Index v244 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, v98, v242, v243);
            _StringGuts.appendInPlace(_:isASCII:)(v244, v245, v74 < 0);
          }
          goto LABEL_249;
        }
      }
      else if (v96 > 15)
      {
        goto LABEL_226;
      }
      swift_bridgeObjectRetain(v89);
      unint64_t v220 = _StringGuts._convertedToSmall()(v90, v89);
      unint64_t v222 = v221;
      swift_bridgeObjectRelease(v89);
      v223._Swift::UInt64 rawBits = (v98 << 16) | 1;
      v224._Swift::UInt64 rawBits = 1;
      Swift::UInt64 v225 = _StringGuts.validateScalarRange(_:)(v224, v223, v74, v212);
      Swift::UInt64 v227 = v226;
      if (v225 >= 0x10000) {
        Swift::UInt64 v228 = v225;
      }
      else {
        Swift::UInt64 v228 = v225 | 3;
      }
      swift_bridgeObjectRetain(v212);
      v229._Swift::UInt64 rawBits = v228;
      v230._Swift::UInt64 rawBits = v227;
      unint64_t v231 = specialized String.init(_:)(v229, v230, v74, v212);
      unint64_t v233 = v232;
      swift_bridgeObjectRelease(v212);
      unint64_t v234 = _StringGuts._convertedToSmall()(v231, v233);
      unint64_t v236 = v235;
      swift_bridgeObjectRelease(v233);
      unint64_t v237 = specialized _SmallString.init(_:appending:)(v220, v222, v234, v236);
      if (v239) {
        goto LABEL_349;
      }
      uint64_t v240 = v237;
      unint64_t v241 = v238;
      swift_bridgeObjectRelease(v89);
      unint64_t v370 = v240;
      unint64_t v371 = v241;
      uint64_t v84 = (uint64_t)v362;
LABEL_249:
      unint64_t v259 = v350;
      if ((ValueMetadata *)v62 == &type metadata for String)
      {
        uint64_t v98 = *(void *)v84;
        unint64_t v89 = *(void *)(v84 + 8);
LABEL_258:
        swift_bridgeObjectRetain(v89);
        goto LABEL_261;
      }
      if ((ValueMetadata *)v62 != &type metadata for Substring)
      {
        uint64_t v260 = *(void (**)(char *, uint64_t, uint64_t))v343;
        uint64_t v261 = v344;
        (*(void (**)(char *, uint64_t, uint64_t))v343)(v344, v84, v62);
        uint64_t v262 = v347;
        v260((char *)v347, (uint64_t)v261, v62);
        if (swift_dynamicCast((char *)&v368, v262, (Class *)v62, (const char *)&type metadata for String, 6uLL))
        {
          ((void (*)(char *, uint64_t))v259)(v261, v62);
          uint64_t v98 = v368;
          unint64_t v89 = v369;
        }
        else
        {
          uint64_t v98 = (*(uint64_t (**)(uint64_t))(*(void *)(*(void *)(v349 + 40) + 8) + 8))(v62);
          unint64_t v89 = v266;
          ((void (*)(char *, uint64_t))v259)(v261, v62);
        }
        goto LABEL_261;
      }
      v263._Swift::UInt64 rawBits = *(void *)v84;
      v264._Swift::UInt64 rawBits = *(void *)(v84 + 8);
      uint64_t v98 = *(void *)(v84 + 16);
      unint64_t v89 = *(void *)(v84 + 24);
      uint64_t v265 = HIBYTE(v89) & 0xF;
      if ((v89 & 0x2000000000000000) == 0) {
        uint64_t v265 = v98 & 0xFFFFFFFFFFFFLL;
      }
      if (!(v263._rawBits >> 16) && v264._rawBits >> 16 == v265) {
        goto LABEL_258;
      }
      uint64_t v98 = specialized static String._copying(_:)(v263, v264, *(void *)(v84 + 16), *(void *)(v84 + 24));
      unint64_t v89 = v267;
LABEL_261:
      ((void (*)(uint64_t, uint64_t))v259)(v84, v62);
      uint64_t v90 = v370;
      Swift::Int v96 = v371;
      unint64_t v268 = HIBYTE(v371) & 0xF;
      if ((v371 & 0x2000000000000000) != 0) {
        unint64_t v269 = HIBYTE(v371) & 0xF;
      }
      else {
        unint64_t v269 = v370 & 0xFFFFFFFFFFFFLL;
      }
      if (!v269 && (v370 & ~v371 & 0x2000000000000000) == 0)
      {
        swift_bridgeObjectRelease(v371);
        unint64_t v370 = v98;
        unint64_t v371 = v89;
        goto LABEL_198;
      }
      uint64_t v270 = v89 & 0x2000000000000000;
      uint64_t v84 = HIBYTE(v89) & 0xF;
      if ((v371 & 0x2000000000000000) != 0 && v270)
      {
        unint64_t v271 = v268 + v84;
        if (v268 + v84 <= 0xF)
        {
          if (v84)
          {
            uint64_t v296 = 0;
            unint64_t v297 = 0;
            uint64_t v298 = 8 * v84;
            unint64_t v299 = v371;
            uint64_t v212 = v354;
            do
            {
              unint64_t v300 = v268 + v297;
              BOOL v129 = v297++ >= 8;
              if (v129) {
                unint64_t v301 = v89;
              }
              else {
                unint64_t v301 = v98;
              }
              char v302 = (8 * v268 + v296) & 0x38;
              uint64_t v303 = (-255 << v302) - 1;
              unint64_t v304 = (unint64_t)(v301 >> (v296 & 0x38)) << v302;
              unint64_t v305 = v304 | v303 & v299;
              unint64_t v306 = v304 | v303 & v90;
              if (v300 < 8) {
                uint64_t v90 = v306;
              }
              else {
                unint64_t v299 = v305;
              }
              v296 += 8;
            }
            while (v298 != v296);
          }
          else
          {
            unint64_t v299 = v371;
            uint64_t v212 = v354;
          }
          swift_bridgeObjectRelease(v371);
          swift_bridgeObjectRelease(v89);
          unint64_t v311 = 0xA000000000000000;
          if (!(v90 & 0x8080808080808080 | v299 & 0x80808080808080)) {
            unint64_t v311 = 0xE000000000000000;
          }
          unint64_t v370 = v90;
          unint64_t v371 = v311 & 0xFF00000000000000 | (v271 << 56) | v299 & 0xFFFFFFFFFFFFFFLL;
          uint64_t v84 = (uint64_t)v362;
          goto LABEL_198;
        }
        uint64_t v270 = 1;
      }
      uint64_t v59 = v98 & 0xFFFFFFFFFFFFLL;
      if (v270) {
        uint64_t v62 = HIBYTE(v89) & 0xF;
      }
      else {
        uint64_t v62 = v98 & 0xFFFFFFFFFFFFLL;
      }
      swift_bridgeObjectRetain_n(v89, 2);
      if ((v89 & 0x1000000000000000) != 0)
      {
        swift_bridgeObjectRetain_n(v89, 5);
        v317._Swift::UInt64 rawBits = 1;
        v318._Swift::UInt64 rawBits = (v62 << 16) | 1;
        v319._Swift::UInt64 rawBits = _StringGuts.validateScalarRange(_:)(v317, v318, v98, v89);
        if (v319._rawBits < 0x10000) {
          v319._rawBits |= 3;
        }
        uint64_t v95 = specialized Collection.count.getter(v319, v320, v98, v89);
        swift_bridgeObjectRelease(v89);
        if ((v96 & 0x1000000000000000) == 0)
        {
LABEL_275:
          BOOL v97 = __OFADD__(v269, v95);
          uint64_t v74 = v269 + v95;
          if (v97) {
            goto LABEL_329;
          }
          goto LABEL_276;
        }
      }
      else
      {
        swift_bridgeObjectRetain_n(v89, 4);
        uint64_t v95 = v62;
        if ((v96 & 0x1000000000000000) == 0) {
          goto LABEL_275;
        }
      }
      Swift::Int v321 = String.UTF8View._foreignCount()();
      uint64_t v74 = v321 + v95;
      if (__OFADD__(v321, v95)) {
        goto LABEL_329;
      }
LABEL_276:
      if ((v90 & ~v96 & 0x2000000000000000) != 0
        && swift_isUniquelyReferenced_nonNull_native(v96 & 0xFFFFFFFFFFFFFFFLL))
      {
        uint64_t v272 = v371;
        int64_t v273 = _StringGuts.nativeUnusedCapacity.getter(v370, v371);
        if (v274) {
          goto LABEL_350;
        }
        if (v74 < 16 && ((v272 & 0x2000000000000000) != 0 || v273 < v95)) {
          goto LABEL_288;
        }
      }
      else if (v74 <= 15)
      {
        uint64_t v272 = v371;
LABEL_288:
        swift_bridgeObjectRelease_n(v89, 5);
        unint64_t v277 = v370;
        swift_bridgeObjectRetain(v272);
        unint64_t v278 = _StringGuts._convertedToSmall()(v277, v272);
        unint64_t v280 = v279;
        swift_bridgeObjectRelease(v272);
        v281._Swift::UInt64 rawBits = (v62 << 16) | 1;
        v282._Swift::UInt64 rawBits = 1;
        v283._Swift::UInt64 rawBits = _StringGuts.validateScalarRange(_:)(v282, v281, v98, v89);
        if (v283._rawBits < 0x10000) {
          v283._rawBits |= 3;
        }
        unint64_t v285 = specialized String.init(_:)(v283, v284, v98, v89);
        unint64_t v287 = v286;
        swift_bridgeObjectRelease(v89);
        unint64_t v288 = _StringGuts._convertedToSmall()(v285, v287);
        unint64_t v290 = v289;
        swift_bridgeObjectRelease(v287);
        unint64_t v291 = specialized _SmallString.init(_:appending:)(v278, v280, v288, v290);
        uint64_t v212 = v354;
        if (v293) {
          goto LABEL_349;
        }
        uint64_t v294 = v291;
        unint64_t v295 = v292;
        swift_bridgeObjectRelease(v272);
        swift_bridgeObjectRelease(v89);
        unint64_t v370 = v294;
        unint64_t v371 = v295;
        uint64_t v62 = (uint64_t)v366;
        uint64_t v59 = (uint64_t)v367;
        uint64_t v84 = (uint64_t)v362;
        goto LABEL_198;
      }
      _StringGuts.prepareForAppendInPlace(totalCount:otherUTF8Count:)(v74, v95);
      swift_bridgeObjectRelease_n(v89, 4);
      if ((v89 & 0x1000000000000000) != 0)
      {
        swift_bridgeObjectRelease(v89);
        _StringGuts._foreignAppendInPlace(_:)(v98, v89, 0, v62);
        swift_bridgeObjectRelease_n(v89, 2);
        goto LABEL_293;
      }
      if (v270)
      {
        swift_bridgeObjectRelease_n(v89, 2);
        uint64_t v368 = v98;
        uint64_t v369 = v89 & 0xFFFFFFFFFFFFFFLL;
        uint64_t v275 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, HIBYTE(v89) & 0xF, (uint64_t)&v368, HIBYTE(v89) & 0xF);
        _StringGuts.appendInPlace(_:isASCII:)(v275, v276, (v89 & 0x4000000000000000) != 0);
        swift_bridgeObjectRelease(v89);
LABEL_293:
        uint64_t v62 = (uint64_t)v366;
        uint64_t v59 = (uint64_t)v367;
        uint64_t v212 = v354;
        uint64_t v84 = (uint64_t)v362;
        goto LABEL_198;
      }
      if ((v98 & 0x1000000000000000) != 0)
      {
        swift_bridgeObjectRelease(v89);
        id v307 = (id)((v89 & 0xFFFFFFFFFFFFFFFLL) + 32);
        uint64_t v308 = v98 & 0xFFFFFFFFFFFFLL;
      }
      else
      {
        id v307 = _StringObject.sharedUTF8.getter(v98, v89);
        uint64_t v308 = v323;
        swift_bridgeObjectRelease(v89);
        if (v308 < v59) {
          goto LABEL_326;
        }
      }
      uint64_t v62 = (uint64_t)v366;
      uint64_t v212 = v354;
      uint64_t v84 = (uint64_t)v362;
      v309 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, v98 & 0xFFFFFFFFFFFFLL, (uint64_t)v307, v308);
      _StringGuts.appendInPlace(_:isASCII:)(v309, v310, v98 < 0);
      swift_bridgeObjectRelease_n(v89, 2);
      uint64_t v59 = (uint64_t)v367;
LABEL_198:
      unint64_t v210 = v358;
      ((void (*)(uint64_t, char *))v360)(v59, v363);
      int v213 = ((uint64_t (*)(char *, uint64_t, uint64_t))v357)(v210, 1, v62);
      uint64_t v74 = v359;
      if (v213 == 1) {
        goto LABEL_194;
      }
    }
    uint64_t v98 = (uint64_t)v355;
    if ((v212 & 0x2000000000000000) == 0) {
      goto LABEL_210;
    }
    unint64_t v216 = v214 + v348;
    if (v214 + v348 <= 0xF)
    {
      if (v348)
      {
        uint64_t v246 = 0;
        unint64_t v247 = 0;
        unint64_t v248 = v371;
        do
        {
          unint64_t v249 = v214 + v247;
          BOOL v129 = v247++ >= 8;
          if (v129) {
            unint64_t v250 = v212;
          }
          else {
            unint64_t v250 = v74;
          }
          char v251 = (8 * v214 + v246) & 0x38;
          uint64_t v252 = (-255 << v251) - 1;
          unint64_t v253 = (unint64_t)(v250 >> (v246 & 0x38)) << v251;
          unint64_t v254 = v253 | v252 & v248;
          unint64_t v255 = v253 | v252 & v90;
          if (v249 < 8) {
            uint64_t v90 = v255;
          }
          else {
            unint64_t v248 = v254;
          }
          v246 += 8;
        }
        while (v364 != v246);
      }
      else
      {
        unint64_t v248 = v371;
      }
      swift_bridgeObjectRelease(v371);
      unint64_t v258 = 0xA000000000000000;
      if (!(v90 & 0x8080808080808080 | v248 & 0x80808080808080)) {
        unint64_t v258 = 0xE000000000000000;
      }
      unint64_t v370 = v90;
      unint64_t v371 = v258 & 0xFF00000000000000 | (v216 << 56) | v248 & 0xFFFFFFFFFFFFFFLL;
      goto LABEL_249;
    }
LABEL_209:
    uint64_t v98 = v348;
    goto LABEL_210;
  }
  (*(void (**)(char *, uint64_t))(v342 + 8))(v58, v59);
  (*(void (**)(char *, Class *))(v345 + 8))(v35, v346);
  return v370;
}

uint64_t StringProtocol._ephemeralString.getter(Class *a1, uint64_t a2)
{
  uint64_t v5 = (uint64_t)*(a1 - 1);
  uint64_t v6 = MEMORY[0x1F4188790](a1);
  uint64_t v8 = (unint64_t *)((char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  char v9 = (ValueMetadata *)MEMORY[0x1F4188790](v6);
  char v11 = (char *)&v21 - v10;
  if (v9 == &type metadata for String)
  {
    uint64_t v13 = *v2;
    swift_bridgeObjectRetain(v2[1]);
  }
  else if (a1 == (Class *)&type metadata for Substring)
  {
    Swift::UInt64 v14 = *v2;
    Swift::UInt64 v15 = v2[1];
    unint64_t v17 = v2[2];
    unint64_t v16 = v2[3];
    swift_bridgeObjectRetain(v16);
    v18._Swift::UInt64 rawBits = v14;
    v19._Swift::UInt64 rawBits = v15;
    return specialized String.init<A>(_:)(v18, v19, v17, v16);
  }
  else
  {
    uint64_t v12 = *(void (**)(char *, uint64_t *, Class *))(v5 + 16);
    v12((char *)&v21 - v10, v2, a1);
    v12((char *)v8, (uint64_t *)v11, a1);
    if (swift_dynamicCast((char *)&v21, v8, a1, (const char *)&type metadata for String, 6uLL))
    {
      (*(void (**)(char *, Class *))(v5 + 8))(v11, a1);
      return v21;
    }
    else
    {
      uint64_t v13 = (*(uint64_t (**)(Class *))(*(void *)(*(void *)(a2 + 40) + 8) + 8))(a1);
      (*(void (**)(char *, Class *))(v5 + 8))(v11, a1);
    }
  }
  return v13;
}

unint64_t specialized BidirectionalCollection<>.joined(separator:)(uint64_t a1, unint64_t a2, void *a3)
{
  uint64_t v3 = a2;
  unint64_t v245 = HIBYTE(a2) & 0xF;
  uint64_t v248 = a1 & 0xFFFFFFFFFFFFLL;
  uint64_t v249 = a1;
  if ((a2 & 0x2000000000000000) != 0) {
    uint64_t v4 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v4 = a1 & 0xFFFFFFFFFFFFLL;
  }
  uint64_t v5 = a3[2] + a3[2] * v4;
  unint64_t v6 = 0xE000000000000000;
  unint64_t v256 = 0;
  unint64_t v257 = 0xE000000000000000;
  if (v5 < 16)
  {
    uint64_t v9 = 0;
  }
  else
  {
    uint64_t v7 = _StringGuts.uniqueNativeCapacity.getter();
    if ((v8 & 1) != 0 || v7 < v5)
    {
      uint64_t v11 = 2 * _StringGuts.uniqueNativeCapacity.getter();
      if (v11 <= v5) {
        uint64_t v11 = v5;
      }
      if (v10) {
        int64_t v12 = v5;
      }
      else {
        int64_t v12 = v11;
      }
      uint64_t v254 = 0;
      uint64_t v255 = 0;
      unint64_t v6 = specialized static __StringStorage.create(initializingFrom:codeUnitCapacity:isASCII:)((char *)&v254, 0, v12, 1);
      uint64_t v9 = *(void *)(v6 + 24);
      swift_bridgeObjectRelease(0xE000000000000000);
      unint64_t v256 = v9;
      unint64_t v257 = v6;
    }
    else
    {
      uint64_t v9 = 0;
      unint64_t v6 = 0xE000000000000000;
    }
  }
  unint64_t v13 = a3[2];
  unint64_t v252 = v13;
  uint64_t v14 = v249;
  if (v4)
  {
    if (!v13) {
      return v256;
    }
    specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, 1, (uint64_t)a3);
    uint64_t v15 = a3[4];
    uint64_t v246 = v3;
    unint64_t v247 = a3 + 4;
    unint64_t v16 = a3[5];
    uint64_t v17 = HIBYTE(v6) & 0xF;
    uint64_t v18 = v9 & 0xFFFFFFFFFFFFLL;
    if ((v6 & 0x2000000000000000) != 0) {
      uint64_t v19 = HIBYTE(v6) & 0xF;
    }
    else {
      uint64_t v19 = v9 & 0xFFFFFFFFFFFFLL;
    }
    if (!v19 && (v9 & ~v6 & 0x2000000000000000) == 0)
    {
      swift_bridgeObjectRetain(a3[5]);
      swift_bridgeObjectRelease(v6);
      unint64_t v256 = v15;
      unint64_t v257 = v16;
      unint64_t v21 = v252;
      if (v252 != 1) {
        goto LABEL_167;
      }
      return v256;
    }
    uint64_t v14 = v16 & 0x2000000000000000;
    uint64_t v3 = HIBYTE(v16) & 0xF;
    if ((v6 & 0x2000000000000000) == 0 || !v14)
    {
LABEL_26:
      uint64_t v244 = v15 & 0xFFFFFFFFFFFFLL;
      if (v14) {
        unint64_t v21 = HIBYTE(v16) & 0xF;
      }
      else {
        unint64_t v21 = v15 & 0xFFFFFFFFFFFFLL;
      }
      swift_bridgeObjectRetain_n(v16, 3);
      if ((v16 & 0x1000000000000000) != 0) {
        goto LABEL_291;
      }
      swift_bridgeObjectRetain_n(v16, 4);
      Swift::Int v22 = v21;
      if ((v6 & 0x1000000000000000) != 0) {
        goto LABEL_294;
      }
      goto LABEL_31;
    }
    uint64_t v20 = v17 + v3;
    if ((unint64_t)(v17 + v3) > 0xF)
    {
      uint64_t v14 = 1;
      goto LABEL_26;
    }
    if (v3)
    {
      uint64_t v109 = 0;
      unint64_t v110 = 0;
      uint64_t v111 = 8 * v3;
      unint64_t v112 = v6;
      unint64_t v21 = v252;
      uint64_t v3 = v246;
      do
      {
        unint64_t v113 = v17 + v110;
        BOOL v64 = v110++ >= 8;
        if (v64) {
          unint64_t v114 = a3[5];
        }
        else {
          unint64_t v114 = a3[4];
        }
        char v115 = (8 * v17 + v109) & 0x38;
        uint64_t v116 = (-255 << v115) - 1;
        unint64_t v117 = (unint64_t)(v114 >> (v109 & 0x38)) << v115;
        unint64_t v118 = v117 | v116 & v112;
        unint64_t v119 = v117 | v116 & v9;
        if (v113 < 8) {
          uint64_t v9 = v119;
        }
        else {
          unint64_t v112 = v118;
        }
        v109 += 8;
      }
      while (v111 != v109);
    }
    else
    {
      unint64_t v112 = v6;
      unint64_t v21 = v252;
      uint64_t v3 = v246;
    }
    swift_bridgeObjectRelease(v6);
    unint64_t v125 = 0xA000000000000000;
    if (!(v9 & 0x8080808080808080 | v112 & 0x80808080808080)) {
      unint64_t v125 = 0xE000000000000000;
    }
    unint64_t v256 = v9;
    unint64_t v257 = v125 & 0xFF00000000000000 | (v20 << 56) | v112 & 0xFFFFFFFFFFFFFFLL;
LABEL_165:
    uint64_t v14 = v249;
    if (v21 != 1) {
      goto LABEL_167;
    }
    return v256;
  }
  if (!v13) {
    return v256;
  }
  uint64_t v14 = 0;
  while (1)
  {
    specialized Array._checkSubscript(_:wasNativeTypeChecked:)(v14, 1, (uint64_t)a3);
    uint64_t v31 = &a3[2 * v14 + 4];
    uint64_t v19 = *v31;
    unint64_t v21 = v31[1];
    unint64_t v16 = v256;
    unint64_t v6 = v257;
    unint64_t v32 = HIBYTE(v257) & 0xF;
    if ((v257 & 0x2000000000000000) != 0) {
      unint64_t v33 = HIBYTE(v257) & 0xF;
    }
    else {
      unint64_t v33 = v256 & 0xFFFFFFFFFFFFLL;
    }
    if (!v33 && (v256 & ~v257 & 0x2000000000000000) == 0)
    {
      swift_bridgeObjectRetain(v21);
      swift_bridgeObjectRelease(v6);
      unint64_t v256 = v19;
      unint64_t v257 = v21;
      goto LABEL_52;
    }
    uint64_t v15 = v21 & 0x2000000000000000;
    uint64_t v9 = HIBYTE(v21) & 0xF;
    if ((v257 & 0x2000000000000000) != 0 && v15)
    {
      unint64_t v34 = v32 + v9;
      if (v32 + v9 <= 0xF)
      {
        if (v9)
        {
          uint64_t v59 = 0;
          unint64_t v60 = 0;
          uint64_t v61 = 8 * v9;
          unint64_t v62 = v257;
          do
          {
            unint64_t v63 = v32 + v60;
            BOOL v64 = v60++ >= 8;
            if (v64) {
              unint64_t v65 = v21;
            }
            else {
              unint64_t v65 = v19;
            }
            char v66 = (8 * v32 + v59) & 0x38;
            uint64_t v67 = (-255 << v66) - 1;
            unint64_t v68 = (unint64_t)(v65 >> (v59 & 0x38)) << v66;
            unint64_t v69 = v68 | v67 & v62;
            unint64_t v70 = v68 | v67 & v16;
            if (v63 < 8) {
              unint64_t v16 = v70;
            }
            else {
              unint64_t v62 = v69;
            }
            v59 += 8;
          }
          while (v61 != v59);
        }
        else
        {
          unint64_t v62 = v257;
        }
        swift_bridgeObjectRelease(v257);
        unint64_t v76 = 0xA000000000000000;
        if (!(v16 & 0x8080808080808080 | v62 & 0x80808080808080)) {
          unint64_t v76 = 0xE000000000000000;
        }
        unint64_t v256 = v16;
        unint64_t v257 = v76 & 0xFF00000000000000 | (v34 << 56) | v62 & 0xFFFFFFFFFFFFFFLL;
        goto LABEL_52;
      }
      uint64_t v15 = 1;
    }
    uint64_t v249 = v19 & 0xFFFFFFFFFFFFLL;
    uint64_t v18 = v15 ? HIBYTE(v21) & 0xF : v19 & 0xFFFFFFFFFFFFLL;
    swift_bridgeObjectRetain_n(v21, 3);
    if ((v21 & 0x1000000000000000) != 0) {
      break;
    }
    swift_bridgeObjectRetain_n(v21, 4);
    Swift::Int v35 = v18;
    if ((v6 & 0x1000000000000000) != 0) {
      goto LABEL_104;
    }
LABEL_67:
    BOOL v23 = __OFADD__(v33, v35);
    uint64_t v3 = v33 + v35;
    if (v23) {
      goto LABEL_288;
    }
LABEL_68:
    if ((v16 & ~v6 & 0x2000000000000000) != 0 && swift_isUniquelyReferenced_nonNull_native(v6 & 0xFFFFFFFFFFFFFFFLL))
    {
      int64_t v36 = _StringGuts.nativeUnusedCapacity.getter(v16, v6);
      if (v37) {
        goto LABEL_310;
      }
      uint64_t v38 = (v6 >> 61) & 1;
      if (v36 < v35) {
        LOBYTE(v38) = 1;
      }
      if (v3 <= 15 && (v38 & 1) != 0)
      {
LABEL_75:
        swift_bridgeObjectRelease_n(v21, 5);
        swift_bridgeObjectRetain(v6);
        unint64_t v39 = _StringGuts._convertedToSmall()(v16, v6);
        unint64_t v41 = v40;
        swift_bridgeObjectRelease(v6);
        v42._Swift::UInt64 rawBits = (v18 << 16) | 1;
        v43._Swift::UInt64 rawBits = 1;
        v44._Swift::UInt64 rawBits = _StringGuts.validateScalarRange(_:)(v43, v42, v19, v21);
        if (v44._rawBits < 0x10000) {
          v44._rawBits |= 3;
        }
        unint64_t v46 = specialized String.init(_:)(v44, v45, v19, v21);
        unint64_t v48 = v47;
        swift_bridgeObjectRelease(v21);
        unint64_t v49 = _StringGuts._convertedToSmall()(v46, v48);
        unint64_t v51 = v50;
        swift_bridgeObjectRelease(v48);
        unint64_t v52 = specialized _SmallString.init(_:appending:)(v39, v41, v49, v51);
        if (v54) {
          goto LABEL_309;
        }
        unint64_t v55 = v52;
        unint64_t v56 = v53;
        swift_bridgeObjectRelease(v6);
        swift_bridgeObjectRelease(v21);
        unint64_t v256 = v55;
        unint64_t v257 = v56;
        goto LABEL_51;
      }
    }
    else if (v3 <= 15)
    {
      goto LABEL_75;
    }
    _StringGuts.prepareForAppendInPlace(totalCount:otherUTF8Count:)(v3, v35);
    swift_bridgeObjectRelease_n(v21, 4);
    if ((v21 & 0x1000000000000000) != 0)
    {
      swift_bridgeObjectRelease(v21);
      _StringGuts._foreignAppendInPlace(_:)(v19, v21, 0, v18);
      swift_bridgeObjectRelease_n(v21, 2);
LABEL_51:
      unint64_t v13 = v252;
      goto LABEL_52;
    }
    if (v15)
    {
      swift_bridgeObjectRelease_n(v21, 2);
      uint64_t v254 = v19;
      uint64_t v255 = v21 & 0xFFFFFFFFFFFFFFLL;
      char v57 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, HIBYTE(v21) & 0xF, (uint64_t)&v254, HIBYTE(v21) & 0xF);
      _StringGuts.appendInPlace(_:isASCII:)(v57, v58, (v21 & 0x4000000000000000) != 0);
      swift_bridgeObjectRelease(v21);
      goto LABEL_51;
    }
    if ((v19 & 0x1000000000000000) != 0)
    {
      swift_bridgeObjectRelease(v21);
      id v71 = (id)((v21 & 0xFFFFFFFFFFFFFFFLL) + 32);
      uint64_t v72 = v19 & 0xFFFFFFFFFFFFLL;
      uint64_t v73 = v19 & 0xFFFFFFFFFFFFLL;
    }
    else
    {
      id v71 = _StringObject.sharedUTF8.getter(v19, v21);
      uint64_t v73 = v82;
      swift_bridgeObjectRelease(v21);
      uint64_t v72 = v19 & 0xFFFFFFFFFFFFLL;
      if (v73 < v249) {
        goto LABEL_286;
      }
    }
    unint64_t v13 = v252;
    uint64_t v74 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, v72, (uint64_t)v71, v73);
    _StringGuts.appendInPlace(_:isASCII:)(v74, v75, v19 < 0);
    swift_bridgeObjectRelease_n(v21, 2);
LABEL_52:
    if (++v14 == v13) {
      return v256;
    }
  }
  swift_bridgeObjectRetain_n(v21, 5);
  v77._Swift::UInt64 rawBits = 1;
  v78._Swift::UInt64 rawBits = (v18 << 16) | 1;
  v79._Swift::UInt64 rawBits = _StringGuts.validateScalarRange(_:)(v77, v78, v19, v21);
  if (v79._rawBits < 0x10000) {
    v79._rawBits |= 3;
  }
  Swift::Int v35 = specialized Collection.count.getter(v79, v80, v19, v21);
  swift_bridgeObjectRelease(v21);
  if ((v6 & 0x1000000000000000) == 0) {
    goto LABEL_67;
  }
LABEL_104:
  Swift::Int v81 = String.UTF8View._foreignCount()();
  uint64_t v3 = v81 + v35;
  if (!__OFADD__(v81, v35)) {
    goto LABEL_68;
  }
LABEL_288:
  while (2)
  {
    __break(1u);
LABEL_289:
    __break(1u);
LABEL_290:
    __break(1u);
LABEL_291:
    swift_bridgeObjectRetain_n(v16, 5);
    v228._Swift::UInt64 rawBits = 1;
    v229._Swift::UInt64 rawBits = (v21 << 16) | 1;
    v230._Swift::UInt64 rawBits = _StringGuts.validateScalarRange(_:)(v228, v229, v15, v16);
    if (v230._rawBits < 0x10000) {
      v230._rawBits |= 3;
    }
    Swift::Int v22 = specialized Collection.count.getter(v230, v231, v15, v16);
    swift_bridgeObjectRelease(v16);
    if ((v6 & 0x1000000000000000) != 0)
    {
LABEL_294:
      Swift::Int v232 = String.UTF8View._foreignCount()();
      uint64_t v19 = v232 + v22;
      if (!__OFADD__(v232, v22)) {
        goto LABEL_32;
      }
LABEL_296:
      __break(1u);
LABEL_297:
      if ((v19 & 0x1000000000000000) != 0)
      {
        uint64_t v15 = _StringGuts._foreignConvertedToSmall()(v15, v19);
        uint64_t v239 = v238;
        swift_bridgeObjectRelease(v19);
        uint64_t v19 = v239;
      }
      else
      {
        if ((v15 & 0x1000000000000000) != 0)
        {
          unint64_t v233 = (unsigned __int8 *)((v19 & 0xFFFFFFFFFFFFFFFLL) + 32);
          uint64_t v234 = v15 & 0xFFFFFFFFFFFFLL;
        }
        else
        {
          unint64_t v233 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v15, v19);
        }
        closure #1 in _StringGuts._convertedToSmall()(v233, v234, &v254);
        swift_bridgeObjectRelease(v19);
        uint64_t v15 = v254;
        uint64_t v19 = v255;
      }
      unint64_t v21 = v252;
      uint64_t v14 = v249;
LABEL_116:
      uint64_t v89 = HIBYTE(v3) & 0xF;
      uint64_t v90 = HIBYTE(v19) & 0xF;
      uint64_t v91 = v90 + v89;
      if ((unint64_t)(v90 + v89) <= 0xF)
      {
        if (v90)
        {
          uint64_t v92 = 0;
          unint64_t v93 = 0;
          uint64_t v94 = 8 * v90;
          do
          {
            unint64_t v95 = v89 + v93;
            BOOL v64 = v93++ >= 8;
            if (v64) {
              unint64_t v96 = v19;
            }
            else {
              unint64_t v96 = v15;
            }
            char v97 = (8 * v89 + v92) & 0x38;
            uint64_t v98 = (-255 << v97) - 1;
            unint64_t v99 = (unint64_t)(v96 >> (v92 & 0x38)) << v97;
            unint64_t v100 = v99 | v98 & v3;
            unint64_t v101 = v99 | v98 & v9;
            if (v95 < 8) {
              uint64_t v9 = v101;
            }
            else {
              uint64_t v3 = v100;
            }
            v92 += 8;
          }
          while (v94 != v92);
        }
        swift_bridgeObjectRelease(v6);
        swift_bridgeObjectRelease(v16);
        unint64_t v102 = 0xA000000000000000;
        if (!(v9 & 0x8080808080808080 | v3 & 0x80808080808080)) {
          unint64_t v102 = 0xE000000000000000;
        }
        unint64_t v256 = v9;
        unint64_t v257 = v102 & 0xFF00000000000000 | (v91 << 56) | v3 & 0xFFFFFFFFFFFFFFLL;
        uint64_t v3 = v246;
        if (v21 == 1) {
          return v256;
        }
LABEL_167:
        uint64_t v242 = (v3 & 0xFFFFFFFFFFFFFFFLL) + 32;
        uint64_t v243 = v3 & 0xFFFFFFFFFFFFFFLL;
        uint64_t v244 = 8 * v245;
        unint64_t v127 = 1;
LABEL_170:
        specialized Array._checkSubscript(_:wasNativeTypeChecked:)(v127, 1, (uint64_t)a3);
        if (__OFADD__(v127, 1))
        {
          __break(1u);
          continue;
        }
        unint64_t v251 = v127 + 1;
        unint64_t v128 = &v247[2 * v127];
        uint64_t v9 = *v128;
        unint64_t v16 = v128[1];
        uint64_t v15 = v256;
        unint64_t v6 = v257;
        unint64_t v129 = HIBYTE(v257) & 0xF;
        if ((v257 & 0x2000000000000000) != 0) {
          unint64_t v130 = HIBYTE(v257) & 0xF;
        }
        else {
          unint64_t v130 = v256 & 0xFFFFFFFFFFFFLL;
        }
        if (!v130 && (v256 & ~v257 & 0x2000000000000000) == 0)
        {
          swift_bridgeObjectRetain(v16);
          swift_bridgeObjectRetain(v3);
          swift_bridgeObjectRelease(v6);
          unint64_t v256 = v14;
          unint64_t v257 = v3;
          goto LABEL_220;
        }
        if ((v257 & 0x2000000000000000) == 0)
        {
          uint64_t v18 = v248;
          if ((v3 & 0x2000000000000000) != 0) {
            uint64_t v18 = v245;
          }
LABEL_181:
          if ((v3 & 0x1000000000000000) != 0)
          {
            swift_bridgeObjectRetain(v16);
            v213._Swift::UInt64 rawBits = 1;
            v214._Swift::UInt64 rawBits = (v18 << 16) | 1;
            Swift::UInt64 v215 = _StringGuts.validateScalarRange(_:)(v213, v214, v14, v3);
            Swift::UInt64 v217 = v216;
            if (v215 >= 0x10000) {
              uint64_t v19 = v215;
            }
            else {
              uint64_t v19 = v215 | 3;
            }
            swift_bridgeObjectRetain(v3);
            v218._Swift::UInt64 rawBits = v19;
            v219._Swift::UInt64 rawBits = v217;
            unint64_t v21 = specialized Collection.count.getter(v218, v219, v14, v3);
            swift_bridgeObjectRelease(v3);
            if ((v6 & 0x1000000000000000) == 0) {
              goto LABEL_183;
            }
          }
          else
          {
            swift_bridgeObjectRetain(v16);
            unint64_t v21 = v18;
            if ((v6 & 0x1000000000000000) == 0)
            {
LABEL_183:
              BOOL v23 = __OFADD__(v130, v21);
              int64_t v132 = v130 + v21;
              if (v23) {
                goto LABEL_289;
              }
              goto LABEL_184;
            }
          }
          Swift::Int v220 = String.UTF8View._foreignCount()();
          int64_t v132 = v220 + v21;
          if (__OFADD__(v220, v21)) {
            goto LABEL_289;
          }
LABEL_184:
          if ((v15 & ~v6 & 0x2000000000000000) != 0
            && swift_isUniquelyReferenced_nonNull_native(v6 & 0xFFFFFFFFFFFFFFFLL))
          {
            int64_t v133 = _StringGuts.nativeUnusedCapacity.getter(v15, v6);
            if (v134) {
              goto LABEL_310;
            }
            uint64_t v135 = (v6 >> 61) & 1;
            if (v133 < (uint64_t)v21) {
              LOBYTE(v135) = 1;
            }
            if (v132 <= 15 && (v135 & 1) != 0)
            {
LABEL_191:
              swift_bridgeObjectRetain(v6);
              unint64_t v136 = _StringGuts._convertedToSmall()(v15, v6);
              unint64_t v138 = v137;
              swift_bridgeObjectRelease(v6);
              v139._Swift::UInt64 rawBits = (v18 << 16) | 1;
              v140._Swift::UInt64 rawBits = 1;
              Swift::UInt64 v141 = _StringGuts.validateScalarRange(_:)(v140, v139, v14, v3);
              Swift::UInt64 v143 = v142;
              if (v141 >= 0x10000) {
                Swift::UInt64 v144 = v141;
              }
              else {
                Swift::UInt64 v144 = v141 | 3;
              }
              swift_bridgeObjectRetain(v3);
              v145._Swift::UInt64 rawBits = v144;
              v146._Swift::UInt64 rawBits = v143;
              unint64_t v147 = specialized String.init(_:)(v145, v146, v14, v3);
              unint64_t v149 = v148;
              swift_bridgeObjectRelease(v3);
              unint64_t v150 = _StringGuts._convertedToSmall()(v147, v149);
              uint64_t v18 = v151;
              swift_bridgeObjectRelease(v149);
              unint64_t v152 = specialized _SmallString.init(_:appending:)(v136, v138, v150, v18);
              if (v154) {
                goto LABEL_309;
              }
              unint64_t v155 = v152;
              unint64_t v21 = v153;
              swift_bridgeObjectRelease(v6);
              unint64_t v256 = v155;
              unint64_t v257 = v21;
              goto LABEL_220;
            }
          }
          else if (v132 <= 15)
          {
            goto LABEL_191;
          }
          _StringGuts.prepareForAppendInPlace(totalCount:otherUTF8Count:)(v132, v21);
          if ((v3 & 0x1000000000000000) != 0)
          {
            _StringGuts._foreignAppendInPlace(_:)(v14, v3, 0, v18);
          }
          else if ((v3 & 0x2000000000000000) != 0)
          {
            uint64_t v254 = v14;
            uint64_t v255 = v243;
            if (v245 < v18) {
              goto LABEL_286;
            }
            size_t v170 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, v18, (uint64_t)&v254, v245);
            _StringGuts.appendInPlace(_:isASCII:)(v170, v171, (v3 & 0x4000000000000000) != 0);
          }
          else
          {
            uint64_t v156 = v242;
            uint64_t v157 = v248;
            if ((v14 & 0x1000000000000000) != 0)
            {
              if (v248 < v18) {
                goto LABEL_286;
              }
            }
            else
            {
              uint64_t v156 = (uint64_t)_StringObject.sharedUTF8.getter(v14, v3);
              uint64_t v157 = v226;
              if (v226 < v18) {
                goto LABEL_286;
              }
            }
            uint64_t v158 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, v18, v156, v157);
            _StringGuts.appendInPlace(_:isASCII:)(v158, v159, v14 < 0);
          }
          goto LABEL_220;
        }
        uint64_t v18 = v248;
        if ((v3 & 0x2000000000000000) == 0) {
          goto LABEL_181;
        }
        uint64_t v18 = v245;
        unint64_t v131 = v129 + v245;
        if (v129 + v245 > 0xF) {
          goto LABEL_181;
        }
        if (v245)
        {
          uint64_t v160 = 0;
          unint64_t v161 = 0;
          unint64_t v162 = v257;
          do
          {
            unint64_t v163 = v129 + v161;
            BOOL v64 = v161++ >= 8;
            if (v64) {
              unint64_t v164 = v3;
            }
            else {
              unint64_t v164 = v14;
            }
            char v165 = (8 * v129 + v160) & 0x38;
            uint64_t v166 = (-255 << v165) - 1;
            unint64_t v167 = (unint64_t)(v164 >> (v160 & 0x38)) << v165;
            unint64_t v168 = v167 | v166 & v162;
            unint64_t v169 = v167 | v166 & v15;
            if (v163 < 8) {
              uint64_t v15 = v169;
            }
            else {
              unint64_t v162 = v168;
            }
            v160 += 8;
          }
          while (v244 != v160);
        }
        else
        {
          unint64_t v162 = v257;
        }
        unint64_t v172 = 0xA000000000000000;
        if (!(v15 & 0x8080808080808080 | v162 & 0x80808080808080)) {
          unint64_t v172 = 0xE000000000000000;
        }
        unint64_t v173 = v172 | (v131 << 56);
        swift_bridgeObjectRetain(v16);
        swift_bridgeObjectRelease(v6);
        unint64_t v256 = v15;
        unint64_t v257 = v173 & 0xFF00000000000000 | v162 & 0xFFFFFFFFFFFFFFLL;
        uint64_t v14 = v249;
LABEL_220:
        uint64_t v15 = v256;
        unint64_t v6 = v257;
        unint64_t v174 = HIBYTE(v257) & 0xF;
        if ((v257 & 0x2000000000000000) != 0) {
          unint64_t v175 = HIBYTE(v257) & 0xF;
        }
        else {
          unint64_t v175 = v256 & 0xFFFFFFFFFFFFLL;
        }
        if (!v175 && (v256 & ~v257 & 0x2000000000000000) == 0)
        {
          swift_bridgeObjectRelease(v257);
          unint64_t v256 = v9;
          unint64_t v257 = v16;
          uint64_t v19 = v252;
          goto LABEL_169;
        }
        uint64_t v14 = v16 & 0x2000000000000000;
        uint64_t v18 = HIBYTE(v16) & 0xF;
        if ((v257 & 0x2000000000000000) == 0 || !v14) {
          goto LABEL_229;
        }
        unint64_t v176 = v174 + v18;
        if (v174 + v18 <= 0xF)
        {
          if (v18)
          {
            uint64_t v198 = 0;
            unint64_t v199 = 0;
            unint64_t v200 = v257;
            uint64_t v19 = v252;
            do
            {
              unint64_t v201 = v174 + v199;
              BOOL v64 = v199++ >= 8;
              if (v64) {
                unint64_t v202 = v16;
              }
              else {
                unint64_t v202 = v9;
              }
              char v203 = (8 * v174 + v198) & 0x38;
              uint64_t v204 = (-255 << v203) - 1;
              unint64_t v205 = (unint64_t)(v202 >> (v198 & 0x38)) << v203;
              unint64_t v206 = v205 | v204 & v200;
              unint64_t v207 = v205 | v204 & v15;
              if (v201 < 8) {
                uint64_t v15 = v207;
              }
              else {
                unint64_t v200 = v206;
              }
              v198 += 8;
            }
            while (8 * v18 != v198);
          }
          else
          {
            unint64_t v200 = v257;
            uint64_t v19 = v252;
          }
          swift_bridgeObjectRelease(v257);
          swift_bridgeObjectRelease(v16);
          unint64_t v212 = 0xA000000000000000;
          if (!(v15 & 0x8080808080808080 | v200 & 0x80808080808080)) {
            unint64_t v212 = 0xE000000000000000;
          }
          unint64_t v256 = v15;
          unint64_t v257 = v212 & 0xFF00000000000000 | (v176 << 56) | v200 & 0xFFFFFFFFFFFFFFLL;
        }
        else
        {
          uint64_t v14 = 1;
LABEL_229:
          uint64_t v3 = v9 & 0xFFFFFFFFFFFFLL;
          if (v14) {
            unint64_t v21 = HIBYTE(v16) & 0xF;
          }
          else {
            unint64_t v21 = v9 & 0xFFFFFFFFFFFFLL;
          }
          swift_bridgeObjectRetain_n(v16, 2);
          if ((v16 & 0x1000000000000000) != 0)
          {
            swift_bridgeObjectRetain_n(v16, 5);
            v221._Swift::UInt64 rawBits = 1;
            v222._Swift::UInt64 rawBits = (v21 << 16) | 1;
            v223._Swift::UInt64 rawBits = _StringGuts.validateScalarRange(_:)(v221, v222, v9, v16);
            if (v223._rawBits < 0x10000) {
              v223._rawBits |= 3;
            }
            uint64_t v19 = specialized Collection.count.getter(v223, v224, v9, v16);
            swift_bridgeObjectRelease(v16);
            if ((v6 & 0x1000000000000000) == 0) {
              goto LABEL_234;
            }
          }
          else
          {
            swift_bridgeObjectRetain_n(v16, 4);
            uint64_t v19 = v21;
            if ((v6 & 0x1000000000000000) == 0)
            {
LABEL_234:
              BOOL v23 = __OFADD__(v175, v19);
              int64_t v177 = v175 + v19;
              if (v23) {
                goto LABEL_290;
              }
              goto LABEL_235;
            }
          }
          Swift::Int v225 = String.UTF8View._foreignCount()();
          int64_t v177 = v225 + v19;
          if (__OFADD__(v225, v19)) {
            goto LABEL_290;
          }
LABEL_235:
          if ((v15 & ~v6 & 0x2000000000000000) != 0
            && swift_isUniquelyReferenced_nonNull_native(v6 & 0xFFFFFFFFFFFFFFFLL))
          {
            int64_t v178 = _StringGuts.nativeUnusedCapacity.getter(v15, v6);
            if (v179) {
              goto LABEL_310;
            }
            uint64_t v180 = (v6 >> 61) & 1;
            if (v178 < v19) {
              LOBYTE(v18_assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0, 0xE000000000000000, "Swift/SmallString.swift", 23, 2, 0xD7uLL, 0) = 1;
            }
            if (v177 <= 15 && (v180 & 1) != 0)
            {
LABEL_242:
              swift_bridgeObjectRelease_n(v16, 5);
              swift_bridgeObjectRetain(v6);
              unint64_t v181 = _StringGuts._convertedToSmall()(v15, v6);
              unint64_t v183 = v182;
              swift_bridgeObjectRelease(v6);
              v184._Swift::UInt64 rawBits = (v21 << 16) | 1;
              v185._Swift::UInt64 rawBits = 1;
              v186._Swift::UInt64 rawBits = _StringGuts.validateScalarRange(_:)(v185, v184, v9, v16);
              if (v186._rawBits < 0x10000) {
                v186._rawBits |= 3;
              }
              unint64_t v188 = specialized String.init(_:)(v186, v187, v9, v16);
              uint64_t v9 = v189;
              swift_bridgeObjectRelease(v16);
              unint64_t v190 = _StringGuts._convertedToSmall()(v188, v9);
              uint64_t v15 = v191;
              swift_bridgeObjectRelease(v9);
              unint64_t v192 = specialized _SmallString.init(_:appending:)(v181, v183, v190, v15);
              uint64_t v19 = v252;
              uint64_t v3 = v246;
              uint64_t v14 = v249;
              if (v194) {
                goto LABEL_309;
              }
              unint64_t v195 = v192;
              unint64_t v21 = v193;
              swift_bridgeObjectRelease(v6);
              swift_bridgeObjectRelease(v16);
              unint64_t v256 = v195;
              unint64_t v257 = v21;
              goto LABEL_169;
            }
          }
          else if (v177 <= 15)
          {
            goto LABEL_242;
          }
          unint64_t v6 = (unint64_t)&v256;
          _StringGuts.prepareForAppendInPlace(totalCount:otherUTF8Count:)(v177, v19);
          swift_bridgeObjectRelease_n(v16, 4);
          if ((v16 & 0x1000000000000000) == 0)
          {
            if (v14)
            {
              swift_bridgeObjectRelease_n(v16, 2);
              uint64_t v254 = v9;
              uint64_t v255 = v16 & 0xFFFFFFFFFFFFFFLL;
              uint64_t v196 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, HIBYTE(v16) & 0xF, (uint64_t)&v254, HIBYTE(v16) & 0xF);
              _StringGuts.appendInPlace(_:isASCII:)(v196, v197, (v16 & 0x4000000000000000) != 0);
              swift_bridgeObjectRelease(v16);
              goto LABEL_251;
            }
            if ((v9 & 0x1000000000000000) != 0)
            {
              swift_bridgeObjectRelease(v16);
              id v208 = (id)((v16 & 0xFFFFFFFFFFFFFFFLL) + 32);
              uint64_t v209 = v9 & 0xFFFFFFFFFFFFLL;
            }
            else
            {
              id v208 = _StringObject.sharedUTF8.getter(v9, v16);
              uint64_t v209 = v227;
              swift_bridgeObjectRelease(v16);
              if (v209 < v3) {
                goto LABEL_286;
              }
            }
            uint64_t v19 = v252;
            uint64_t v14 = v249;
            unint64_t v210 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, v9 & 0xFFFFFFFFFFFFLL, (uint64_t)v208, v209);
            unint64_t v6 = (unint64_t)&v256;
            _StringGuts.appendInPlace(_:isASCII:)(v210, v211, v9 < 0);
            swift_bridgeObjectRelease_n(v16, 2);
            uint64_t v3 = v246;
LABEL_169:
            unint64_t v127 = v251;
            if (v251 == v19) {
              return v256;
            }
            goto LABEL_170;
          }
          swift_bridgeObjectRelease(v16);
          _StringGuts._foreignAppendInPlace(_:)(v9, v16, 0, v21);
          swift_bridgeObjectRelease_n(v16, 2);
LABEL_251:
          uint64_t v19 = v252;
          uint64_t v3 = v246;
        }
        uint64_t v14 = v249;
        goto LABEL_169;
      }
LABEL_309:
      unint64_t v237 = 266;
LABEL_311:
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/StringGutsRangeReplaceable.swift", 38, 2, v237, 0);
    }
    break;
  }
LABEL_31:
  BOOL v23 = __OFADD__(v19, v22);
  v19 += v22;
  if (v23) {
    goto LABEL_296;
  }
LABEL_32:
  uint64_t v250 = v21;
  unint64_t v24 = v9 & ~v6;
  if ((v24 & 0x2000000000000000) != 0 && swift_isUniquelyReferenced_nonNull_native(v6 & 0xFFFFFFFFFFFFFFFLL))
  {
    int64_t v25 = _StringGuts.nativeUnusedCapacity.getter(v9, v6);
    if (v26)
    {
LABEL_310:
      unint64_t v237 = 258;
      goto LABEL_311;
    }
    if (v19 < 16)
    {
      if ((v6 & 0x2000000000000000) != 0)
      {
        swift_bridgeObjectRelease_n(v16, 5);
        uint64_t v3 = v6;
      }
      else
      {
        if (v25 >= v22) {
          goto LABEL_38;
        }
LABEL_110:
        swift_bridgeObjectRelease_n(v16, 5);
        uint64_t v14 = v249;
        uint64_t v83 = v250;
        if ((v6 & 0x2000000000000000) != 0)
        {
          uint64_t v3 = v6;
LABEL_112:
          v84._Swift::UInt64 rawBits = (v83 << 16) | 1;
          v85._Swift::UInt64 rawBits = 1;
          v86._Swift::UInt64 rawBits = _StringGuts.validateScalarRange(_:)(v85, v84, v15, v16);
          if (v86._rawBits < 0x10000) {
            v86._rawBits |= 3;
          }
          uint64_t v15 = specialized String.init(_:)(v86, v87, v15, v16);
          uint64_t v19 = v88;
          swift_bridgeObjectRelease(v16);
          unint64_t v21 = v252;
          if ((v19 & 0x2000000000000000) == 0) {
            goto LABEL_297;
          }
          swift_bridgeObjectRelease(v19);
          goto LABEL_116;
        }
        if ((v6 & 0x1000000000000000) != 0)
        {
          uint64_t v9 = _StringGuts._foreignConvertedToSmall()(v9, v6);
          uint64_t v3 = v240;
        }
        else
        {
          if ((v9 & 0x1000000000000000) != 0)
          {
            unint64_t v235 = (unsigned __int8 *)((v6 & 0xFFFFFFFFFFFFFFFLL) + 32);
          }
          else
          {
            unint64_t v235 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v9, v6);
            uint64_t v18 = v241;
          }
          swift_bridgeObjectRetain(v6);
          closure #1 in _StringGuts._convertedToSmall()(v235, v18, &v254);
          swift_bridgeObjectRelease(v6);
          uint64_t v9 = v254;
          uint64_t v3 = v255;
        }
      }
      uint64_t v14 = v249;
      uint64_t v83 = v250;
      goto LABEL_112;
    }
  }
  else if (v19 <= 15)
  {
    goto LABEL_110;
  }
LABEL_38:
  int64_t v27 = _StringGuts.nativeUnusedCapacity.getter(v9, v6);
  BOOL v30 = (v28 & 1) == 0 && v27 >= v22;
  if ((v24 & 0x2000000000000000) == 0 || !swift_isUniquelyReferenced_nonNull_native(v6 & 0xFFFFFFFFFFFFFFFLL))
  {
    unint64_t v21 = v252;
    if (v30) {
      goto LABEL_137;
    }
    goto LABEL_131;
  }
  unint64_t v21 = v252;
  if (!v30)
  {
LABEL_131:
    uint64_t v103 = _StringGuts.nativeCapacity.getter(v9, v6);
    if (v104) {
      uint64_t v105 = 0;
    }
    else {
      uint64_t v105 = v103;
    }
    if (v105 + 0x4000000000000000 < 0)
    {
      __break(1u);
      goto LABEL_307;
    }
    uint64_t v106 = 2 * v105;
    if (v106 > v19) {
      uint64_t v19 = v106;
    }
LABEL_137:
    _StringGuts.grow(_:)(v19);
  }
  swift_bridgeObjectRelease_n(v16, 4);
  if ((v16 & 0x1000000000000000) != 0)
  {
    swift_bridgeObjectRelease(v16);
    unint64_t v6 = (unint64_t)&v256;
    _StringGuts._foreignAppendInPlace(_:)(v15, v16, 0, v250);
    swift_bridgeObjectRelease_n(v16, 2);
LABEL_142:
    uint64_t v3 = v246;
    goto LABEL_165;
  }
  if (v14)
  {
    swift_bridgeObjectRelease_n(v16, 2);
    uint64_t v254 = v15;
    uint64_t v255 = v16 & 0xFFFFFFFFFFFFFFLL;
    unint64_t v107 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, v3, (uint64_t)&v254, v3);
    unint64_t v6 = (unint64_t)&v256;
    _StringGuts.appendInPlace(_:isASCII:)(v107, v108, (v16 & 0x4000000000000000) != 0);
    swift_bridgeObjectRelease(v16);
    goto LABEL_142;
  }
  if ((v15 & 0x1000000000000000) == 0)
  {
LABEL_307:
    id v120 = _StringObject.sharedUTF8.getter(v15, v16);
    uint64_t v122 = v236;
    swift_bridgeObjectRelease(v16);
    if (v122 < v244) {
LABEL_286:
    }
      _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x745uLL, 0);
    unint64_t v21 = v252;
    uint64_t v3 = v246;
    uint64_t v14 = v249;
    uint64_t v121 = v244;
    goto LABEL_157;
  }
  swift_bridgeObjectRelease(v16);
  id v120 = (id)((v16 & 0xFFFFFFFFFFFFFFFLL) + 32);
  uint64_t v121 = v244;
  uint64_t v122 = v244;
  uint64_t v3 = v246;
  uint64_t v14 = v249;
LABEL_157:
  uint64_t v123 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, v121, (uint64_t)v120, v122);
  unint64_t v6 = (unint64_t)&v256;
  _StringGuts.appendInPlace(_:isASCII:)(v123, v124, v15 < 0);
  swift_bridgeObjectRelease_n(v16, 2);
  if (v21 != 1) {
    goto LABEL_167;
  }
  return v256;
}

unint64_t BidirectionalCollection<>.joined(separator:)(uint64_t a1, unint64_t a2, void *a3)
{
  void (*v32)(uint64_t *__return_ptr, uint64_t, void);
  unint64_t v33;
  Swift::Int v34;
  uint64_t v35;
  int64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  BOOL v45;
  uint64_t v46;
  int64_t v47;
  int64_t v48;
  char v49;
  const char *v51;
  uint64_t v52;
  void (*v53)(uint64_t *__return_ptr, const char *, uint64_t);
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  int64_t v59;
  char v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  Swift::String::Index v65;
  Swift::String::Index v66;
  Swift::String::Index v67;
  Swift::String::Index v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  char v77;
  unint64_t v78;
  unint64_t v79;
  id v80;
  uint64_t v81;
  char *v82;
  size_t v83;
  uint64_t v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t v87;
  BOOL v88;
  unint64_t v89;
  char v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  char *v96;
  size_t v97;
  Swift::String::Index v98;
  Swift::String::Index v99;
  Swift::String::Index v100;
  Swift::String::Index v101;
  Swift::Int v102;
  uint64_t v103;
  int64_t v104;
  char v105;
  BOOL v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  unint64_t v111;
  unint64_t v112;
  unint64_t v113;
  char v114;
  uint64_t v115;
  unint64_t v116;
  unint64_t v117;
  unint64_t v118;
  uint64_t v119;
  char v120;
  uint64_t v121;
  uint64_t v122;
  id v123;
  uint64_t v124;
  uint64_t v125;
  char *v126;
  size_t v127;
  unsigned __int8 *v128;
  Swift::String::Index v129;
  Swift::String::Index v130;
  Swift::String::Index v131;
  Swift::String::Index v132;
  uint64_t v133;
  char *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  unint64_t v139;
  uint64_t v140;
  unint64_t v141;
  unint64_t v142;
  char v143;
  uint64_t v144;
  unint64_t v145;
  unint64_t v146;
  unint64_t v147;
  unint64_t v148;
  unint64_t v149;
  char *v150;
  size_t v151;
  uint64_t v152;
  unint64_t v153;
  unint64_t v154;
  unint64_t v155;
  unint64_t v156;
  int64_t v157;
  char v158;
  uint64_t v159;
  unint64_t v160;
  unint64_t v161;
  unint64_t v162;
  unint64_t v163;
  Swift::String::Index v164;
  Swift::String::Index v165;
  Swift::UInt64 v166;
  Swift::UInt64 v167;
  Swift::UInt64 v168;
  Swift::UInt64 v169;
  Swift::String::Index v170;
  Swift::String::Index v171;
  unint64_t v172;
  unint64_t v173;
  unint64_t v174;
  unint64_t v175;
  unint64_t v176;
  unint64_t v177;
  unint64_t v178;
  unint64_t v179;
  char v180;
  unint64_t v181;
  unint64_t v182;
  uint64_t v183;
  uint64_t v184;
  char *v185;
  size_t v186;
  uint64_t v187;
  unint64_t v188;
  unint64_t v189;
  unint64_t v190;
  unint64_t v191;
  char v192;
  uint64_t v193;
  unint64_t v194;
  unint64_t v195;
  unint64_t v196;
  char *v197;
  size_t v198;
  unint64_t v199;
  unint64_t v200;
  unint64_t v201;
  unint64_t v202;
  uint64_t v203;
  int64_t v204;
  char v205;
  uint64_t v206;
  unint64_t v207;
  unint64_t v208;
  unint64_t v209;
  Swift::String::Index v210;
  Swift::String::Index v211;
  Swift::String::Index v212;
  Swift::String::Index v213;
  unint64_t v214;
  unint64_t v215;
  unint64_t v216;
  unint64_t v217;
  unint64_t v218;
  unint64_t v219;
  unint64_t v220;
  unint64_t v221;
  char v222;
  unint64_t v223;
  unint64_t v224;
  id v225;
  uint64_t v226;
  char *v227;
  size_t v228;
  uint64_t v229;
  unint64_t v230;
  uint64_t v231;
  unint64_t v232;
  unint64_t v233;
  char v234;
  uint64_t v235;
  unint64_t v236;
  unint64_t v237;
  unint64_t v238;
  char *v239;
  size_t v240;
  Swift::String::Index v241;
  Swift::String::Index v242;
  Swift::UInt64 v243;
  Swift::UInt64 v244;
  Swift::UInt64 v245;
  Swift::UInt64 v246;
  Swift::String::Index v247;
  Swift::String::Index v248;
  Swift::Int v249;
  Swift::String::Index v250;
  Swift::String::Index v251;
  Swift::String::Index v252;
  Swift::String::Index v253;
  Swift::Int v254;
  int64_t v255;
  uint64_t v256;
  Swift::String::Index v257;
  Swift::String::Index v258;
  Swift::String::Index v259;
  Swift::String::Index v260;
  Swift::Int v261;
  uint64_t v262;
  unsigned __int8 *v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  unint64_t v268;
  uint64_t v269;
  uint64_t v270;
  unint64_t v271;
  uint64_t v272;
  uint64_t v273;
  unint64_t v274;
  unint64_t v275;
  uint64_t v276;
  void (*v277)(uint64_t *__return_ptr, uint64_t, void);
  uint64_t v278;
  void (*v279)(uint64_t *__return_ptr, const char *, uint64_t);
  char *v280;
  char *v281;
  uint64_t v282;
  const char *AssociatedTypeWitness;
  void v284[2];
  uint64_t v285;
  unint64_t v286;
  Swift::Int v287;
  unint64_t v288;

  uint64_t v4 = v3;
  uint64_t v8 = *(a3 - 1);
  MEMORY[0x1F4188790](a1);
  char v10 = (char *)&v271 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = *(void *)(*(void *)(v11 + 8) + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (int **)v12, v13, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Iterator);
  uint64_t v14 = MEMORY[0x1F4188790](AssociatedTypeWitness);
  Swift::String::Index v281 = (char *)&v271 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  unint64_t v280 = (char *)&v271 - v17;
  if (a3 == (void *)&unk_1ECA00FC0) {
    return specialized BidirectionalCollection<>.joined(separator:)(a1, a2, *v3);
  }
  Swift::String::Index v282 = a1;
  int64_t v273 = v16;
  char v274 = HIBYTE(a2) & 0xF;
  size_t v276 = a1 & 0xFFFFFFFFFFFFLL;
  if ((a2 & 0x2000000000000000) != 0) {
    uint64_t v18 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v18 = a1 & 0xFFFFFFFFFFFFLL;
  }
  uint64_t v19 = (*(uint64_t (**)(void *, uint64_t))(v12 + 40))(a3, v12);
  uint64_t v20 = v19 + v19 * v18;
  unint64_t v287 = 0;
  unint64_t v288 = 0xE000000000000000;
  if (v20 >= 16)
  {
    uint64_t v21 = _StringGuts.uniqueNativeCapacity.getter();
    if ((v22 & 1) != 0 || v21 < v20)
    {
      uint64_t v24 = 2 * _StringGuts.uniqueNativeCapacity.getter();
      if (v24 <= v20) {
        uint64_t v24 = v20;
      }
      if (v23) {
        int64_t v25 = v20;
      }
      else {
        int64_t v25 = v24;
      }
      unint64_t v285 = 0;
      unint64_t v286 = 0;
      int64_t v26 = specialized static __StringStorage.create(initializingFrom:codeUnitCapacity:isASCII:)((char *)&v285, 0, v25, 1);
      Swift::Int v27 = *(void *)(v26 + 24);
      swift_bridgeObjectRelease(0xE000000000000000);
      unint64_t v287 = v27;
      unint64_t v288 = v26;
    }
  }
  (*(void (**)(char *, void **, void *))(v8 + 16))(v10, v4, a3);
  char v28 = *(void (**)(void *, uint64_t))(v12 + 32);
  if (v18)
  {
    uint64_t v29 = v281;
    v28(a3, v12);
    BOOL v30 = AssociatedTypeWitness;
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v12, (uint64_t)a3, (uint64_t)AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Sequence, associated conformance descriptor for Sequence.Sequence.Iterator: IteratorProtocol);
    unint64_t v32 = *(void (**)(uint64_t *__return_ptr, uint64_t, void))(AssociatedConformanceWitness + 16);
    unint64_t v278 = AssociatedConformanceWitness + 16;
    unint64_t v279 = (void (*)(uint64_t *__return_ptr, const char *, uint64_t))AssociatedConformanceWitness;
    unint64_t v277 = v32;
    ((void (*)(uint64_t *__return_ptr, const char *))v32)(&v285, v30);
    unint64_t v33 = v286;
    if (!v286)
    {
      (*(void (**)(char *, const char *))(v273 + 8))(v29, v30);
LABEL_290:
      swift_bridgeObjectRelease(v286);
      return v287;
    }
    unint64_t v34 = v285;
    int64_t v36 = v287;
    Swift::Int v35 = v288;
    char v37 = HIBYTE(v288) & 0xF;
    uint64_t v38 = v287 & 0xFFFFFFFFFFFFLL;
    if ((v288 & 0x2000000000000000) != 0) {
      unint64_t v39 = HIBYTE(v288) & 0xF;
    }
    else {
      unint64_t v39 = v287 & 0xFFFFFFFFFFFFLL;
    }
    unint64_t v280 = (char *)a2;
    if (!v39 && (v287 & ~v288 & 0x2000000000000000) == 0)
    {
      swift_bridgeObjectRelease(v288);
      unint64_t v287 = v34;
      unint64_t v288 = v33;
      Swift::String::Index v42 = v282;
      unint64_t v40 = (uint64_t)AssociatedTypeWitness;
LABEL_167:
      char v134 = v281;
LABEL_168:
      v277(&v285, v40, v279);
      unint64_t v33 = v286;
      if (v286)
      {
        unint64_t v271 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
        uint64_t v272 = a2 & 0xFFFFFFFFFFFFFFLL;
        unint64_t v152 = 8 * v274;
        uint64_t v275 = 8 * v274;
        while (1)
        {
          unint64_t v34 = v285;
          uint64_t v38 = v287;
          Swift::String::Index v44 = v288;
          unint64_t v155 = HIBYTE(v288) & 0xF;
          if ((v288 & 0x2000000000000000) != 0) {
            uint64_t v156 = HIBYTE(v288) & 0xF;
          }
          else {
            uint64_t v156 = v287 & 0xFFFFFFFFFFFFLL;
          }
          if (!v156 && (v287 & ~v288 & 0x2000000000000000) == 0)
          {
            swift_bridgeObjectRetain(a2);
            swift_bridgeObjectRelease(v44);
            unint64_t v287 = v42;
            unint64_t v288 = a2;
            goto LABEL_227;
          }
          if ((v288 & 0x2000000000000000) != 0) {
            break;
          }
          int64_t v36 = v276;
          if ((a2 & 0x2000000000000000) != 0) {
            goto LABEL_187;
          }
LABEL_188:
          unint64_t v39 = v36;
          if ((a2 & 0x1000000000000000) != 0)
          {
            v241._Swift::UInt64 rawBits = (v36 << 16) | 1;
            v242._Swift::UInt64 rawBits = 1;
            uint64_t v243 = _StringGuts.validateScalarRange(_:)(v242, v241, v42, a2);
            unint64_t v245 = v244;
            if (v243 >= 0x10000) {
              uint64_t v246 = v243;
            }
            else {
              uint64_t v246 = v243 | 3;
            }
            swift_bridgeObjectRetain(a2);
            v247._Swift::UInt64 rawBits = v246;
            v248._Swift::UInt64 rawBits = v245;
            Swift::String::Index v42 = v282;
            unint64_t v39 = specialized Collection.count.getter(v247, v248, v282, a2);
            swift_bridgeObjectRelease(a2);
            if ((v44 & 0x1000000000000000) == 0)
            {
LABEL_190:
              Swift::String::Index v45 = __OFADD__(v156, v39);
              Swift::Int v35 = v156 + v39;
              if (v45) {
                goto LABEL_292;
              }
              goto LABEL_191;
            }
          }
          else if ((v288 & 0x1000000000000000) == 0)
          {
            goto LABEL_190;
          }
          uint64_t v249 = String.UTF8View._foreignCount()();
          Swift::Int v35 = v249 + v39;
          if (__OFADD__(v249, v39))
          {
LABEL_292:
            __break(1u);
LABEL_293:
            __break(1u);
LABEL_294:
            __break(1u);
LABEL_295:
            swift_bridgeObjectRetain_n(v33, 5);
            v257._Swift::UInt64 rawBits = 1;
            v258._Swift::UInt64 rawBits = (v44 << 16) | 1;
            v259._Swift::UInt64 rawBits = _StringGuts.validateScalarRange(_:)(v257, v258, v34, v33);
            if (v259._rawBits < 0x10000) {
              v259._rawBits |= 3;
            }
            Swift::String::Index v44 = specialized Collection.count.getter(v259, v260, v34, v33);
            swift_bridgeObjectRelease(v33);
            if ((v35 & 0x1000000000000000) != 0) {
              goto LABEL_298;
            }
LABEL_28:
            Swift::String::Index v45 = __OFADD__(v39, v44);
            unint64_t v46 = v39 + v44;
            if (!v45) {
              goto LABEL_29;
            }
LABEL_300:
            __break(1u);
LABEL_301:
            uint64_t v262 = v35;
            if ((v46 & 0x1000000000000000) != 0)
            {
              a2 = _StringGuts._foreignConvertedToSmall()(a2, v46);
              uint64_t v270 = v269;
              swift_bridgeObjectRelease(v46);
              unint64_t v46 = v270;
            }
            else
            {
              if ((a2 & 0x1000000000000000) != 0)
              {
                Swift::String::Index v263 = (unsigned __int8 *)((v46 & 0xFFFFFFFFFFFFFFFLL) + 32);
                Swift::String::Index v264 = a2 & 0xFFFFFFFFFFFFLL;
              }
              else
              {
                Swift::String::Index v263 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(a2, v46);
              }
              closure #1 in _StringGuts._convertedToSmall()(v263, v264, &v285);
              swift_bridgeObjectRelease(v46);
              a2 = v285;
              unint64_t v46 = v286;
            }
            Swift::Int v35 = v262;
            Swift::String::Index v42 = v282;
            unint64_t v40 = (uint64_t)AssociatedTypeWitness;
            goto LABEL_147;
          }
LABEL_191:
          if ((v38 & ~v44 & 0x2000000000000000) != 0
            && swift_isUniquelyReferenced_nonNull_native(v44 & 0xFFFFFFFFFFFFFFFLL))
          {
            uint64_t v157 = _StringGuts.nativeUnusedCapacity.getter(v38, v44);
            if (v158) {
              goto LABEL_312;
            }
            size_t v159 = (v44 >> 61) & 1;
            if (v157 < v39) {
              LOBYTE(v159) = 1;
            }
            if (v35 > 15 || (v159 & 1) == 0)
            {
LABEL_204:
              _StringGuts.prepareForAppendInPlace(totalCount:otherUTF8Count:)(v35, v39);
              if ((a2 & 0x1000000000000000) != 0)
              {
                _StringGuts._foreignAppendInPlace(_:)(v42, a2, 0, v36);
              }
              else if ((a2 & 0x2000000000000000) != 0)
              {
                unint64_t v285 = v42;
                unint64_t v286 = v272;
                if (v274 < v36) {
                  goto LABEL_288;
                }
                size_t v197 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, v36, (uint64_t)&v285, v274);
                _StringGuts.appendInPlace(_:isASCII:)(v197, v198, (a2 & 0x4000000000000000) != 0);
              }
              else
              {
                unint64_t v183 = v271;
                Swift::String::Index v184 = v276;
                if ((v42 & 0x1000000000000000) != 0)
                {
                  if (v276 < v36) {
                    goto LABEL_288;
                  }
                }
                else
                {
                  unint64_t v183 = (uint64_t)_StringObject.sharedUTF8.getter(v42, a2);
                  Swift::String::Index v184 = v255;
                  if (v255 < v36) {
                    goto LABEL_288;
                  }
                }
                Swift::String::Index v185 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, v36, v183, v184);
                _StringGuts.appendInPlace(_:isASCII:)(v185, v186, v42 < 0);
              }
              goto LABEL_227;
            }
          }
          else if (v35 > 15)
          {
            goto LABEL_204;
          }
          swift_bridgeObjectRetain(v44);
          uint64_t v160 = _StringGuts._convertedToSmall()(v38, v44);
          unint64_t v161 = v42;
          unint64_t v163 = v162;
          swift_bridgeObjectRelease(v44);
          v164._Swift::UInt64 rawBits = (v36 << 16) | 1;
          v165._Swift::UInt64 rawBits = 1;
          uint64_t v166 = _StringGuts.validateScalarRange(_:)(v165, v164, v161, a2);
          unint64_t v168 = v167;
          if (v166 >= 0x10000) {
            unint64_t v169 = v166;
          }
          else {
            unint64_t v169 = v166 | 3;
          }
          swift_bridgeObjectRetain(a2);
          v170._Swift::UInt64 rawBits = v169;
          v171._Swift::UInt64 rawBits = v168;
          unint64_t v172 = specialized String.init(_:)(v170, v171, v161, a2);
          unint64_t v174 = v173;
          swift_bridgeObjectRelease(a2);
          unint64_t v175 = _StringGuts._convertedToSmall()(v172, v174);
          int64_t v177 = v176;
          swift_bridgeObjectRelease(v174);
          int64_t v178 = specialized _SmallString.init(_:appending:)(v160, v163, v175, v177);
          if (v180) {
            goto LABEL_311;
          }
          unint64_t v181 = v178;
          unint64_t v182 = v179;
          swift_bridgeObjectRelease(v44);
          unint64_t v287 = v181;
          unint64_t v288 = v182;
          a2 = (unint64_t)v280;
          Swift::String::Index v42 = v282;
LABEL_227:
          int64_t v36 = v287;
          Swift::String::Index v44 = v288;
          unint64_t v200 = HIBYTE(v288) & 0xF;
          if ((v288 & 0x2000000000000000) != 0) {
            unint64_t v201 = HIBYTE(v288) & 0xF;
          }
          else {
            unint64_t v201 = v287 & 0xFFFFFFFFFFFFLL;
          }
          if (!v201 && (v287 & ~v288 & 0x2000000000000000) == 0)
          {
            swift_bridgeObjectRelease(v288);
            unint64_t v287 = v34;
            unint64_t v288 = v33;
LABEL_270:
            unint64_t v40 = (uint64_t)AssociatedTypeWitness;
            goto LABEL_175;
          }
          unint64_t v40 = v33 & 0x2000000000000000;
          a2 = HIBYTE(v33) & 0xF;
          if ((v33 & 0x2000000000000000 & v288) != 0)
          {
            unint64_t v202 = v200 + a2;
            if (v200 + a2 <= 0xF)
            {
              if (a2)
              {
                Swift::String::Index v229 = 0;
                Swift::String::Index v230 = 0;
                Swift::String::Index v231 = 8 * a2;
                unint64_t v153 = v288;
                a2 = (unint64_t)v280;
                do
                {
                  Swift::Int v232 = v200 + v230;
                  uint64_t v88 = v230++ >= 8;
                  if (v88) {
                    unint64_t v233 = v33;
                  }
                  else {
                    unint64_t v233 = v34;
                  }
                  uint64_t v234 = (8 * v200 + v229) & 0x38;
                  unint64_t v235 = (-255 << v234) - 1;
                  uint64_t v236 = (unint64_t)(v233 >> (v229 & 0x38)) << v234;
                  unint64_t v237 = v236 | v235 & v153;
                  uint64_t v238 = v236 | v235 & v36;
                  if (v232 < 8) {
                    int64_t v36 = v238;
                  }
                  else {
                    unint64_t v153 = v237;
                  }
                  v229 += 8;
                }
                while (v231 != v229);
              }
              else
              {
                unint64_t v153 = v288;
                a2 = (unint64_t)v280;
              }
              swift_bridgeObjectRelease(v288);
              swift_bridgeObjectRelease(v33);
              char v154 = 0xA000000000000000;
              if (!(v36 & 0x8080808080808080 | v153 & 0x80808080808080)) {
                char v154 = 0xE000000000000000;
              }
              unint64_t v287 = v36;
              unint64_t v288 = v154 & 0xFF00000000000000 | (v202 << 56) | v153 & 0xFFFFFFFFFFFFFFLL;
              unint64_t v40 = (uint64_t)AssociatedTypeWitness;
              goto LABEL_174;
            }
          }
          uint64_t v38 = v34 & 0xFFFFFFFFFFFFLL;
          if (v40) {
            char v203 = HIBYTE(v33) & 0xF;
          }
          else {
            char v203 = v34 & 0xFFFFFFFFFFFFLL;
          }
          swift_bridgeObjectRetain_n(v33, 2);
          if ((v33 & 0x1000000000000000) != 0)
          {
            swift_bridgeObjectRetain_n(v33, 5);
            v250._Swift::UInt64 rawBits = 1;
            v251._Swift::UInt64 rawBits = (v203 << 16) | 1;
            v252._Swift::UInt64 rawBits = _StringGuts.validateScalarRange(_:)(v250, v251, v34, v33);
            if (v252._rawBits < 0x10000) {
              v252._rawBits |= 3;
            }
            unint64_t v39 = specialized Collection.count.getter(v252, v253, v34, v33);
            swift_bridgeObjectRelease(v33);
            if ((v44 & 0x1000000000000000) != 0)
            {
LABEL_282:
              uint64_t v254 = String.UTF8View._foreignCount()();
              Swift::Int v35 = v254 + v39;
              if (__OFADD__(v254, v39)) {
                goto LABEL_293;
              }
              goto LABEL_240;
            }
          }
          else
          {
            swift_bridgeObjectRetain_n(v33, 4);
            unint64_t v39 = v203;
            if ((v44 & 0x1000000000000000) != 0) {
              goto LABEL_282;
            }
          }
          Swift::String::Index v45 = __OFADD__(v201, v39);
          Swift::Int v35 = v201 + v39;
          if (v45) {
            goto LABEL_293;
          }
LABEL_240:
          if ((v36 & ~v44 & 0x2000000000000000) != 0
            && swift_isUniquelyReferenced_nonNull_native(v44 & 0xFFFFFFFFFFFFFFFLL))
          {
            uint64_t v204 = _StringGuts.nativeUnusedCapacity.getter(v36, v44);
            if (v205) {
              goto LABEL_312;
            }
            unint64_t v206 = (v44 >> 61) & 1;
            if (v204 < v39) {
              LOBYTE(v206) = 1;
            }
            if (v35 <= 15 && (v206 & 1) != 0)
            {
LABEL_247:
              swift_bridgeObjectRelease_n(v33, 5);
              swift_bridgeObjectRetain(v44);
              unint64_t v207 = _StringGuts._convertedToSmall()(v36, v44);
              uint64_t v209 = v208;
              swift_bridgeObjectRelease(v44);
              v210._Swift::UInt64 rawBits = (v203 << 16) | 1;
              v211._Swift::UInt64 rawBits = 1;
              v212._Swift::UInt64 rawBits = _StringGuts.validateScalarRange(_:)(v211, v210, v34, v33);
              if (v212._rawBits < 0x10000) {
                v212._rawBits |= 3;
              }
              Swift::String::Index v214 = specialized String.init(_:)(v212, v213, v34, v33);
              Swift::UInt64 v216 = v215;
              swift_bridgeObjectRelease(v33);
              Swift::UInt64 v217 = _StringGuts._convertedToSmall()(v214, v216);
              Swift::String::Index v219 = v218;
              swift_bridgeObjectRelease(v216);
              Swift::Int v220 = specialized _SmallString.init(_:appending:)(v207, v209, v217, v219);
              if (v222) {
                goto LABEL_311;
              }
              Swift::String::Index v223 = v220;
              Swift::String::Index v224 = v221;
              swift_bridgeObjectRelease(v44);
              swift_bridgeObjectRelease(v33);
              unint64_t v287 = v223;
              unint64_t v288 = v224;
              goto LABEL_268;
            }
          }
          else if (v35 <= 15)
          {
            goto LABEL_247;
          }
          _StringGuts.prepareForAppendInPlace(totalCount:otherUTF8Count:)(v35, v39);
          swift_bridgeObjectRelease_n(v33, 4);
          if ((v33 & 0x1000000000000000) != 0)
          {
            swift_bridgeObjectRelease(v33);
            _StringGuts._foreignAppendInPlace(_:)(v34, v33, 0, v203);
            swift_bridgeObjectRelease_n(v33, 2);
LABEL_268:
            Swift::String::Index v42 = v282;
            unint64_t v40 = (uint64_t)AssociatedTypeWitness;
            a2 = (unint64_t)v280;
            char v134 = v281;
            goto LABEL_176;
          }
          if (!v40)
          {
            if ((v34 & 0x1000000000000000) != 0)
            {
              swift_bridgeObjectRelease(v33);
              Swift::Int v225 = (id)((v33 & 0xFFFFFFFFFFFFFFFLL) + 32);
              uint64_t v226 = v34 & 0xFFFFFFFFFFFFLL;
            }
            else
            {
              Swift::Int v225 = _StringObject.sharedUTF8.getter(v34, v33);
              uint64_t v226 = v256;
              swift_bridgeObjectRelease(v33);
              if (v226 < v38) {
                goto LABEL_288;
              }
            }
            a2 = (unint64_t)v280;
            Swift::String::Index v42 = v282;
            uint64_t v227 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, v34 & 0xFFFFFFFFFFFFLL, (uint64_t)v225, v226);
            _StringGuts.appendInPlace(_:isASCII:)(v227, v228, v34 < 0);
            swift_bridgeObjectRelease_n(v33, 2);
            goto LABEL_270;
          }
          swift_bridgeObjectRelease_n(v33, 2);
          unint64_t v285 = v34;
          unint64_t v286 = v33 & 0xFFFFFFFFFFFFFFLL;
          uint64_t v239 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, HIBYTE(v33) & 0xF, (uint64_t)&v285, HIBYTE(v33) & 0xF);
          _StringGuts.appendInPlace(_:isASCII:)(v239, v240, (v33 & 0x4000000000000000) != 0);
          swift_bridgeObjectRelease(v33);
          unint64_t v40 = (uint64_t)AssociatedTypeWitness;
          a2 = (unint64_t)v280;
LABEL_174:
          Swift::String::Index v42 = v282;
LABEL_175:
          char v134 = v281;
LABEL_176:
          v277(&v285, v40, v279);
          unint64_t v33 = v286;
          unint64_t v152 = v275;
          if (!v286) {
            goto LABEL_289;
          }
        }
        int64_t v36 = v276;
        if ((a2 & 0x2000000000000000) == 0) {
          goto LABEL_188;
        }
        unint64_t v40 = v155 + v274;
        if (v155 + v274 <= 0xF)
        {
          if (v274)
          {
            Swift::String::Index v187 = 0;
            unint64_t v188 = 0;
            uint64_t v189 = v288;
            do
            {
              unint64_t v190 = v155 + v188;
              uint64_t v88 = v188++ >= 8;
              if (v88) {
                uint64_t v191 = a2;
              }
              else {
                uint64_t v191 = v42;
              }
              unint64_t v192 = (8 * v155 + v187) & 0x38;
              unint64_t v193 = (-255 << v192) - 1;
              char v194 = (unint64_t)(v191 >> (v187 & 0x38)) << v192;
              unint64_t v195 = v194 | v193 & v189;
              uint64_t v196 = v194 | v193 & v38;
              if (v190 < 8) {
                uint64_t v38 = v196;
              }
              else {
                uint64_t v189 = v195;
              }
              v187 += 8;
            }
            while (v152 != v187);
          }
          else
          {
            uint64_t v189 = v288;
          }
          swift_bridgeObjectRelease(v288);
          unint64_t v199 = 0xA000000000000000;
          if (!(v38 & 0x8080808080808080 | v189 & 0x80808080808080)) {
            unint64_t v199 = 0xE000000000000000;
          }
          unint64_t v287 = v38;
          unint64_t v288 = v199 & 0xFF00000000000000 | (v40 << 56) | v189 & 0xFFFFFFFFFFFFFFLL;
          goto LABEL_227;
        }
LABEL_187:
        int64_t v36 = v274;
        goto LABEL_188;
      }
LABEL_289:
      (*(void (**)(char *, uint64_t))(v273 + 8))(v134, v40);
      goto LABEL_290;
    }
    unint64_t v40 = v286 & 0x2000000000000000;
    unint64_t v41 = HIBYTE(v286) & 0xF;
    Swift::String::Index v42 = v282;
    if ((v286 & 0x2000000000000000 & v288) != 0)
    {
      Swift::String::Index v43 = v37 + v41;
      if (v37 + v41 <= 0xF)
      {
        if (v41)
        {
          size_t v108 = 0;
          uint64_t v109 = 0;
          unint64_t v110 = 8 * v41;
          uint64_t v111 = v288;
          do
          {
            unint64_t v112 = v37 + v109;
            uint64_t v88 = v109++ >= 8;
            if (v88) {
              unint64_t v113 = v286;
            }
            else {
              unint64_t v113 = v285;
            }
            unint64_t v114 = (8 * v37 + v108) & 0x38;
            char v115 = (-255 << v114) - 1;
            uint64_t v116 = (unint64_t)(v113 >> (v108 & 0x38)) << v114;
            unint64_t v117 = v116 | v115 & v111;
            unint64_t v118 = v116 | v115 & v36;
            if (v112 < 8) {
              int64_t v36 = v118;
            }
            else {
              uint64_t v111 = v117;
            }
            v108 += 8;
          }
          while (v110 != v108);
        }
        else
        {
          uint64_t v111 = v288;
        }
        swift_bridgeObjectRelease(v288);
        swift_bridgeObjectRelease(v33);
        unint64_t v149 = 0xA000000000000000;
        if (!(v36 & 0x8080808080808080 | v111 & 0x80808080808080)) {
          unint64_t v149 = 0xE000000000000000;
        }
        unint64_t v287 = v36;
        unint64_t v288 = v149 & 0xFF00000000000000 | (v43 << 56) | v111 & 0xFFFFFFFFFFFFFFLL;
        goto LABEL_166;
      }
    }
    unint64_t v271 = HIBYTE(v286) & 0xF;
    uint64_t v272 = v285 & 0xFFFFFFFFFFFFLL;
    if (v40) {
      Swift::String::Index v44 = HIBYTE(v286) & 0xF;
    }
    else {
      Swift::String::Index v44 = v285 & 0xFFFFFFFFFFFFLL;
    }
    swift_bridgeObjectRetain_n(v286, 2);
    uint64_t v275 = v44;
    if ((v33 & 0x1000000000000000) != 0) {
      goto LABEL_295;
    }
    swift_bridgeObjectRetain_n(v33, 4);
    if ((v35 & 0x1000000000000000) == 0) {
      goto LABEL_28;
    }
LABEL_298:
    uint64_t v261 = String.UTF8View._foreignCount()();
    unint64_t v46 = v261 + v44;
    if (__OFADD__(v261, v44)) {
      goto LABEL_300;
    }
LABEL_29:
    unint64_t v47 = v36 & ~v35;
    if ((v47 & 0x2000000000000000) != 0 && swift_isUniquelyReferenced_nonNull_native(v35 & 0xFFFFFFFFFFFFFFFLL))
    {
      unint64_t v48 = _StringGuts.nativeUnusedCapacity.getter(v36, v35);
      if (v49)
      {
LABEL_312:
        unint64_t v268 = 258;
        goto LABEL_313;
      }
      if (v46 >= 16) {
        goto LABEL_101;
      }
      if ((v35 & 0x2000000000000000) == 0)
      {
        if (v48 < (uint64_t)v44)
        {
LABEL_135:
          swift_bridgeObjectRelease_n(v33, 5);
          if ((v35 & 0x1000000000000000) == 0)
          {
            Swift::String::Index v42 = v282;
            if ((v36 & 0x1000000000000000) != 0)
            {
              unint64_t v128 = (unsigned __int8 *)((v35 & 0xFFFFFFFFFFFFFFFLL) + 32);
            }
            else
            {
              unint64_t v128 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v36, v35);
              uint64_t v38 = v266;
            }
            swift_bridgeObjectRetain(v35);
            closure #1 in _StringGuts._convertedToSmall()(v128, v38, &v285);
            swift_bridgeObjectRelease(v35);
            int64_t v36 = v285;
            uint64_t v38 = v286;
LABEL_143:
            v129._Swift::UInt64 rawBits = (v275 << 16) | 1;
            v130._Swift::UInt64 rawBits = 1;
            v131._Swift::UInt64 rawBits = _StringGuts.validateScalarRange(_:)(v130, v129, v34, v33);
            if (v131._rawBits < 0x10000) {
              v131._rawBits |= 3;
            }
            a2 = specialized String.init(_:)(v131, v132, v34, v33);
            unint64_t v46 = v133;
            swift_bridgeObjectRelease(v33);
            if ((v46 & 0x2000000000000000) == 0) {
              goto LABEL_301;
            }
            swift_bridgeObjectRelease(v46);
            unint64_t v40 = (uint64_t)AssociatedTypeWitness;
LABEL_147:
            char v134 = v281;
            uint64_t v135 = HIBYTE(v38) & 0xF;
            unint64_t v136 = HIBYTE(v46) & 0xF;
            unint64_t v137 = v136 + v135;
            if ((unint64_t)(v136 + v135) <= 0xF)
            {
              if (v136)
              {
                unint64_t v138 = 0;
                Swift::String::Index v139 = 0;
                Swift::String::Index v140 = 8 * v136;
                do
                {
                  Swift::UInt64 v141 = v135 + v139;
                  uint64_t v88 = v139++ >= 8;
                  if (v88) {
                    Swift::UInt64 v142 = v46;
                  }
                  else {
                    Swift::UInt64 v142 = a2;
                  }
                  Swift::UInt64 v143 = (8 * v135 + v138) & 0x38;
                  Swift::UInt64 v144 = (-255 << v143) - 1;
                  Swift::String::Index v145 = (unint64_t)(v142 >> (v138 & 0x38)) << v143;
                  Swift::String::Index v146 = v145 | v144 & v38;
                  unint64_t v147 = v145 | v144 & v36;
                  if (v141 < 8) {
                    int64_t v36 = v147;
                  }
                  else {
                    uint64_t v38 = v146;
                  }
                  v138 += 8;
                }
                while (v140 != v138);
              }
              swift_bridgeObjectRelease(v35);
              swift_bridgeObjectRelease(v33);
              unint64_t v148 = 0xA000000000000000;
              if (!(v36 & 0x8080808080808080 | v38 & 0x80808080808080)) {
                unint64_t v148 = 0xE000000000000000;
              }
              unint64_t v287 = v36;
              unint64_t v288 = v148 & 0xFF00000000000000 | (v137 << 56) | v38 & 0xFFFFFFFFFFFFFFLL;
              a2 = (unint64_t)v280;
              goto LABEL_168;
            }
LABEL_311:
            unint64_t v268 = 266;
LABEL_313:
            _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/StringGutsRangeReplaceable.swift", 38, 2, v268, 0);
          }
          goto LABEL_307;
        }
LABEL_101:
        char v104 = _StringGuts.nativeUnusedCapacity.getter(v36, v35);
        unint64_t v107 = (v105 & 1) == 0 && v104 >= (uint64_t)v44;
        if ((v47 & 0x2000000000000000) != 0 && swift_isUniquelyReferenced_nonNull_native(v35 & 0xFFFFFFFFFFFFFFFLL))
        {
          Swift::String::Index v42 = v282;
          if (v107)
          {
LABEL_129:
            swift_bridgeObjectRelease_n(v33, 4);
            if ((v33 & 0x1000000000000000) != 0)
            {
              swift_bridgeObjectRelease(v33);
              _StringGuts._foreignAppendInPlace(_:)(v34, v33, 0, v275);
            }
            else
            {
              if (v40)
              {
                swift_bridgeObjectRelease_n(v33, 2);
                unint64_t v285 = v34;
                unint64_t v286 = v33 & 0xFFFFFFFFFFFFFFLL;
                unint64_t v150 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, v271, (uint64_t)&v285, v271);
                _StringGuts.appendInPlace(_:isASCII:)(v150, v151, (v33 & 0x4000000000000000) != 0);
                swift_bridgeObjectRelease(v33);
                goto LABEL_166;
              }
              if ((v34 & 0x1000000000000000) != 0)
              {
                swift_bridgeObjectRelease(v33);
                uint64_t v123 = (id)((v33 & 0xFFFFFFFFFFFFFFFLL) + 32);
                size_t v124 = v272;
                unint64_t v125 = v272;
              }
              else
              {
                uint64_t v123 = _StringObject.sharedUTF8.getter(v34, v33);
                unint64_t v125 = v267;
                swift_bridgeObjectRelease(v33);
                if (v125 < v272) {
LABEL_288:
                }
                  _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x745uLL, 0);
                a2 = (unint64_t)v280;
                Swift::String::Index v42 = v282;
                size_t v124 = v272;
              }
              uint64_t v126 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, v124, (uint64_t)v123, v125);
              _StringGuts.appendInPlace(_:isASCII:)(v126, v127, v34 < 0);
            }
            swift_bridgeObjectRelease_n(v33, 2);
LABEL_166:
            unint64_t v40 = (uint64_t)AssociatedTypeWitness;
            goto LABEL_167;
          }
        }
        else
        {
          Swift::String::Index v42 = v282;
          if (v107)
          {
LABEL_128:
            _StringGuts.grow(_:)(v46);
            goto LABEL_129;
          }
        }
        unint64_t v119 = _StringGuts.nativeCapacity.getter(v36, v35);
        if (v120) {
          uint64_t v121 = 0;
        }
        else {
          uint64_t v121 = v119;
        }
        if (v121 + 0x4000000000000000 < 0)
        {
          __break(1u);
LABEL_307:
          int64_t v36 = _StringGuts._foreignConvertedToSmall()(v36, v35);
          uint64_t v38 = v265;
          goto LABEL_142;
        }
        uint64_t v122 = 2 * v121;
        if (v122 > v46) {
          unint64_t v46 = v122;
        }
        goto LABEL_128;
      }
    }
    else
    {
      if (v46 > 15) {
        goto LABEL_101;
      }
      if ((v35 & 0x2000000000000000) == 0) {
        goto LABEL_135;
      }
    }
    swift_bridgeObjectRelease_n(v33, 5);
    uint64_t v38 = v35;
LABEL_142:
    Swift::String::Index v42 = v282;
    goto LABEL_143;
  }
  v28(a3, v12);
  unint64_t v51 = AssociatedTypeWitness;
  unint64_t v52 = swift_getAssociatedConformanceWitness(v12, (uint64_t)a3, (uint64_t)AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Sequence, associated conformance descriptor for Sequence.Sequence.Iterator: IteratorProtocol);
  unint64_t v53 = *(void (**)(uint64_t *__return_ptr, const char *, uint64_t))(v52 + 16);
  Swift::String::Index v281 = (char *)(v52 + 16);
  Swift::String::Index v282 = v52;
  unint64_t v279 = v53;
  ((void (*)(uint64_t *__return_ptr, const char *))v53)(&v285, v51);
  char v54 = v286;
  while (v286)
  {
    unint64_t v39 = v285;
    uint64_t v38 = v287;
    Swift::String::Index v44 = v288;
    unint64_t v55 = HIBYTE(v288) & 0xF;
    if ((v288 & 0x2000000000000000) != 0) {
      unint64_t v56 = HIBYTE(v288) & 0xF;
    }
    else {
      unint64_t v56 = v287 & 0xFFFFFFFFFFFFLL;
    }
    if (!v56 && (v287 & ~v288 & 0x2000000000000000) == 0)
    {
      swift_bridgeObjectRelease(v288);
      unint64_t v287 = v39;
      unint64_t v288 = v54;
      goto LABEL_40;
    }
    a2 = v54 & 0x2000000000000000;
    int64_t v36 = HIBYTE(v54) & 0xF;
    char v57 = v55 + v36;
    if ((v54 & 0x2000000000000000 & v288) != 0 && v57 <= 0xF)
    {
      if (v36)
      {
        Swift::String::Index v84 = 0;
        Swift::String::Index v85 = 0;
        Swift::String::Index v86 = v288;
        do
        {
          Swift::String::Index v87 = v55 + v85;
          uint64_t v88 = v85++ >= 8;
          if (v88) {
            uint64_t v89 = v54;
          }
          else {
            uint64_t v89 = v285;
          }
          uint64_t v90 = (8 * v55 + v84) & 0x38;
          uint64_t v91 = (-255 << v90) - 1;
          uint64_t v92 = (unint64_t)(v89 >> (v84 & 0x38)) << v90;
          unint64_t v93 = v92 | v91 & v86;
          uint64_t v94 = v92 | v91 & v38;
          if (v87 < 8) {
            uint64_t v38 = v94;
          }
          else {
            Swift::String::Index v86 = v93;
          }
          v84 += 8;
        }
        while (8 * v36 != v84);
      }
      else
      {
        Swift::String::Index v86 = v288;
      }
      swift_bridgeObjectRelease(v288);
      swift_bridgeObjectRelease(v54);
      unint64_t v95 = 0xA000000000000000;
      if (!(v38 & 0x8080808080808080 | v86 & 0x80808080808080)) {
        unint64_t v95 = 0xE000000000000000;
      }
      unint64_t v287 = v38;
      unint64_t v288 = v95 & 0xFF00000000000000 | (v57 << 56) | v86 & 0xFFFFFFFFFFFFFFLL;
      goto LABEL_40;
    }
    unint64_t v33 = v285 & 0xFFFFFFFFFFFFLL;
    if (a2) {
      unint64_t v40 = HIBYTE(v54) & 0xF;
    }
    else {
      unint64_t v40 = v285 & 0xFFFFFFFFFFFFLL;
    }
    swift_bridgeObjectRetain_n(v54, 2);
    if ((v54 & 0x1000000000000000) != 0)
    {
      swift_bridgeObjectRetain_n(v54, 5);
      v98._Swift::UInt64 rawBits = 1;
      v99._Swift::UInt64 rawBits = (v40 << 16) | 1;
      v100._Swift::UInt64 rawBits = _StringGuts.validateScalarRange(_:)(v98, v99, v39, v54);
      if (v100._rawBits < 0x10000) {
        v100._rawBits |= 3;
      }
      unint64_t v34 = specialized Collection.count.getter(v100, v101, v39, v54);
      swift_bridgeObjectRelease(v54);
      if ((v44 & 0x1000000000000000) == 0)
      {
LABEL_56:
        Swift::String::Index v45 = __OFADD__(v56, v34);
        Swift::Int v35 = v56 + v34;
        if (v45) {
          goto LABEL_294;
        }
        goto LABEL_57;
      }
    }
    else
    {
      swift_bridgeObjectRetain_n(v54, 4);
      unint64_t v34 = v40;
      if ((v44 & 0x1000000000000000) == 0) {
        goto LABEL_56;
      }
    }
    unint64_t v102 = String.UTF8View._foreignCount()();
    Swift::Int v35 = v102 + v34;
    if (__OFADD__(v102, v34)) {
      goto LABEL_294;
    }
LABEL_57:
    if ((v38 & ~v44 & 0x2000000000000000) != 0
      && swift_isUniquelyReferenced_nonNull_native(v44 & 0xFFFFFFFFFFFFFFFLL))
    {
      uint64_t v59 = _StringGuts.nativeUnusedCapacity.getter(v38, v44);
      if (v60) {
        goto LABEL_312;
      }
      uint64_t v61 = (v44 >> 61) & 1;
      if (v59 < v34) {
        LOBYTE(v61) = 1;
      }
      if (v35 > 15 || (v61 & 1) == 0)
      {
LABEL_69:
        _StringGuts.prepareForAppendInPlace(totalCount:otherUTF8Count:)(v35, v34);
        swift_bridgeObjectRelease_n(v54, 4);
        if ((v54 & 0x1000000000000000) != 0)
        {
          swift_bridgeObjectRelease(v54);
          _StringGuts._foreignAppendInPlace(_:)(v39, v54, 0, v40);
          swift_bridgeObjectRelease_n(v54, 2);
          unint64_t v51 = AssociatedTypeWitness;
        }
        else
        {
          unint64_t v51 = AssociatedTypeWitness;
          if (a2)
          {
            swift_bridgeObjectRelease_n(v54, 2);
            v284[0] = v39;
            v284[1] = v54 & 0xFFFFFFFFFFFFFFLL;
            unint64_t v96 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, HIBYTE(v54) & 0xF, (uint64_t)v284, HIBYTE(v54) & 0xF);
            _StringGuts.appendInPlace(_:isASCII:)(v96, v97, (v54 & 0x4000000000000000) != 0);
            swift_bridgeObjectRelease(v54);
          }
          else
          {
            if ((v39 & 0x1000000000000000) != 0)
            {
              swift_bridgeObjectRelease(v54);
              Swift::String::Index v80 = (id)((v54 & 0xFFFFFFFFFFFFFFFLL) + 32);
              Swift::Int v81 = v39 & 0xFFFFFFFFFFFFLL;
            }
            else
            {
              Swift::String::Index v80 = _StringObject.sharedUTF8.getter(v39, v54);
              Swift::Int v81 = v103;
              swift_bridgeObjectRelease(v54);
              if (v81 < (uint64_t)v33) {
                goto LABEL_288;
              }
            }
            uint64_t v82 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, v39 & 0xFFFFFFFFFFFFLL, (uint64_t)v80, v81);
            _StringGuts.appendInPlace(_:isASCII:)(v82, v83, v39 < 0);
            swift_bridgeObjectRelease_n(v54, 2);
          }
        }
        goto LABEL_40;
      }
    }
    else if (v35 > 15)
    {
      goto LABEL_69;
    }
    swift_bridgeObjectRelease_n(v54, 5);
    swift_bridgeObjectRetain(v44);
    unint64_t v62 = _StringGuts._convertedToSmall()(v38, v44);
    BOOL v64 = v63;
    swift_bridgeObjectRelease(v44);
    v65._Swift::UInt64 rawBits = (v40 << 16) | 1;
    v66._Swift::UInt64 rawBits = 1;
    v67._Swift::UInt64 rawBits = _StringGuts.validateScalarRange(_:)(v66, v65, v39, v54);
    if (v67._rawBits < 0x10000) {
      v67._rawBits |= 3;
    }
    unint64_t v69 = specialized String.init(_:)(v67, v68, v39, v54);
    id v71 = v70;
    swift_bridgeObjectRelease(v54);
    uint64_t v72 = _StringGuts._convertedToSmall()(v69, v71);
    uint64_t v74 = v73;
    swift_bridgeObjectRelease(v71);
    size_t v75 = specialized _SmallString.init(_:appending:)(v62, v64, v72, v74);
    unint64_t v51 = AssociatedTypeWitness;
    if (v77) {
      goto LABEL_311;
    }
    Swift::String::Index v78 = v75;
    Swift::String::Index v79 = v76;
    swift_bridgeObjectRelease(v44);
    swift_bridgeObjectRelease(v54);
    unint64_t v287 = v78;
    unint64_t v288 = v79;
LABEL_40:
    v279(&v285, v51, v282);
    char v54 = v286;
  }
  (*(void (**)(char *, const char *))(v273 + 8))(v280, v51);
  return v287;
}

uint64_t static UInt8.&>> infix(_:_:)(unsigned __int8 a1, char a2)
{
  return a1 >> (a2 & 7);
}

Swift::String __swiftcall String.lowercased()()
{
  unint64_t v2 = v1;
  uint64_t v3 = v0;
  uint64_t v80 = *MEMORY[0x1E4F143B8];
  if ((v1 & 0x1000000000000000) != 0)
  {
    *(void *)&long long v79 = 0;
    *((void *)&v79 + 1) = 0xE000000000000000;
    Swift::Int v49 = String.UTF8View._foreignCount()();
    BOOL v50 = (v2 & 0x2000000000000000) == 0;
    goto LABEL_52;
  }
  uint64_t v4 = (v1 >> 62) & 1;
  if ((v1 & 0x2000000000000000) == 0) {
    LODWORD(v4) = v0 < 0;
  }
  if (v4 != 1)
  {
    *(void *)&long long v79 = 0;
    *((void *)&v79 + 1) = 0xE000000000000000;
    BOOL v50 = (v1 & 0x2000000000000000) == 0;
    if ((v1 & 0x2000000000000000) != 0) {
      Swift::Int v49 = HIBYTE(v1) & 0xF;
    }
    else {
      Swift::Int v49 = v0 & 0xFFFFFFFFFFFFLL;
    }
LABEL_52:
    String.reserveCapacity(_:)(v49);
    if (v50) {
      uint64_t v52 = v3 & 0xFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v52 = HIBYTE(v2) & 0xF;
    }
    if (!v52)
    {
LABEL_89:
      unint64_t v19 = *((void *)&v79 + 1);
      uint64_t v15 = v79;
      goto LABEL_46;
    }
    uint64_t v53 = 0;
    uint64_t v76 = v52;
    while (1)
    {
      if ((v2 & 0x1000000000000000) != 0)
      {
        Swift::tuple_Unicode_Scalar_scalarLength_Int v58 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)((Swift::String::Index)(v53 << 16));
        Swift::Int scalarLength = v58.scalarLength;
        unsigned int value = v58._0._value;
      }
      else
      {
        if (v50)
        {
          unint64_t v55 = (uint8x16_t *)((v2 & 0xFFFFFFFFFFFFFFFLL) + 32);
          if ((v3 & 0x1000000000000000) == 0) {
            unint64_t v55 = (uint8x16_t *)_StringObject.sharedUTF8.getter(v3, v2);
          }
        }
        else
        {
          v78.i64[0] = v3;
          v78.i64[1] = v2 & 0xFFFFFFFFFFFFFFLL;
          unint64_t v55 = &v78;
        }
        unsigned int value = _decodeScalar(_:startingAt:)((uint64_t)v55, v51, v53);
      }
      unsigned int v59 = value;
      Swift::Int v60 = scalarLength;
      v78.i64[0] = 0;
      Specialint Mapping = (uint8x16_t *)_swift_stdlib_getSpecialMapping(value, 1, &v78);
      if (SpecialMapping && v78.i64[0])
      {
        if (v78.i64[0] < 0) {
          _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeBufferPointer with negative count", 39, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x53FuLL, 0);
        }
        unint64_t v62 = specialized static String._uncheckedFromUTF8(_:isASCII:)(SpecialMapping, v78.i64[0], 0);
      }
      else
      {
        int Mapping = _swift_stdlib_getMapping(v59, 1);
        if (Mapping)
        {
          int64_t v65 = Mapping + (unint64_t)v59;
          if (v65 < 0) {
            _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, 2, 0xD7BuLL, 0);
          }
          if (HIDWORD(v65)) {
            _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Not enough bits to represent the passed value", 45, 2, "Swift/Integers.swift", 20, 2, 0xD7FuLL, 0);
          }
        }
        else
        {
          LODWORD(v65) = v59;
        }
        unint64_t v62 = specialized Unicode.Scalar.withUTF8CodeUnits<A>(_:)(v65);
      }
      uint64_t v66 = v62;
      unint64_t v67 = v63;
      uint8x16_t v68 = (uint8x16_t)v79;
      unint64_t v69 = HIBYTE(*((void *)&v79 + 1)) & 0xFLL;
      if ((*((void *)&v79 + 1) & 0x2000000000000000) == 0) {
        unint64_t v69 = v79 & 0xFFFFFFFFFFFFLL;
      }
      if (!v69 && ((unint64_t)v79 & ~*((void *)&v79 + 1) & 0x2000000000000000) == 0)
      {
        swift_bridgeObjectRelease(*((uint64_t *)&v79 + 1));
        *(void *)&long long v79 = v66;
        *((void *)&v79 + 1) = v67;
        goto LABEL_59;
      }
      if ((*((void *)&v79 + 1) & 0x2000000000000000) == 0) {
        break;
      }
      if ((v63 & 0x2000000000000000) == 0) {
        goto LABEL_57;
      }
      specialized _SmallString.init(_:appending:)(v79, *((unint64_t *)&v79 + 1), v62, v63);
      if ((v71 & 1) == 0)
      {
        uint64_t v72 = v70;
        swift_bridgeObjectRelease(v68.i64[1]);
        swift_bridgeObjectRelease(v67);
        *(void *)&long long v79 = v68.i64[0];
        *((void *)&v79 + 1) = v72;
        uint64_t v52 = v76;
        goto LABEL_59;
      }
      uint64_t v54 = HIBYTE(v67) & 0xF;
      uint64_t v52 = v76;
LABEL_58:
      _StringGuts.append(_:)(v66, v67, 0, v54);
      swift_bridgeObjectRelease(v67);
LABEL_59:
      v53 += v60;
      if (v53 >= v52) {
        goto LABEL_89;
      }
    }
    if ((v63 & 0x2000000000000000) != 0)
    {
      uint64_t v54 = HIBYTE(v63) & 0xF;
      goto LABEL_58;
    }
LABEL_57:
    uint64_t v54 = v62 & 0xFFFFFFFFFFFFLL;
    goto LABEL_58;
  }
  if ((v1 & 0x2000000000000000) == 0)
  {
    if ((v0 & 0x1000000000000000) != 0)
    {
      uint64_t v5 = (int8x16_t *)((v1 & 0xFFFFFFFFFFFFFFFLL) + 32);
      uint64_t v6 = v0 & 0xFFFFFFFFFFFFLL;
      if ((v0 & 0xFFFFFFFFFFFFuLL) <= 0xF)
      {
LABEL_8:
        long long v79 = xmmword_18162AE10;
        if (v6)
        {
          unint64_t v7 = v6 & ~(v6 >> 63);
          unint64_t v8 = v6 - 1;
          if (v7 < v6 - 1) {
            unint64_t v8 = v6 & ~(v6 >> 63);
          }
          if (v8 > 0xF)
          {
            unint64_t v20 = v8 + 1;
            uint64_t v21 = v20 & 0xF;
            if ((v20 & 0xF) == 0) {
              uint64_t v21 = 16;
            }
            unint64_t v9 = v20 - v21;
            char v22 = (int8x16_t *)&v79;
            v23.i64[0] = -1;
            v23.i64[1] = -1;
            v24.i64[0] = 0x3F3F3F3F3F3F3F3FLL;
            v24.i64[1] = 0x3F3F3F3F3F3F3F3FLL;
            uint64x2_t v25 = (uint64x2_t)vdupq_n_s64(0x3FFE000000000uLL);
            v26.i64[0] = 0x2020202020202020;
            v26.i64[1] = 0x2020202020202020;
            unint64_t v27 = v9;
            char v28 = v5;
            do
            {
              int8x16_t v29 = *v28++;
              uint8x16_t v30 = (uint8x16_t)vandq_s8((int8x16_t)vshrq_n_u8((uint8x16_t)vaddq_s8(v29, v23), 1uLL), v24);
              uint16x8_t v31 = vmovl_u8(*(uint8x8_t *)v30.i8);
              uint32x4_t v32 = vmovl_u16(*(uint16x4_t *)v31.i8);
              v33.i64[0] = v32.u32[0];
              v33.i64[1] = v32.u32[1];
              int64x2_t v34 = v33;
              uint32x4_t v35 = vmovl_high_u16(v31);
              uint16x8_t v36 = vmovl_high_u8(v30);
              v33.i64[0] = v35.u32[0];
              v33.i64[1] = v35.u32[1];
              int64x2_t v37 = v33;
              uint32x4_t v38 = vmovl_u16(*(uint16x4_t *)v36.i8);
              v33.i64[0] = v38.u32[0];
              v33.i64[1] = v38.u32[1];
              int64x2_t v39 = v33;
              int8x16_t v40 = (int8x16_t)vmovl_high_u16(v36);
              v33.i64[0] = v40.u32[0];
              v33.i64[1] = v40.u32[1];
              v81.val[3] = (int8x16_t)vshlq_u64(v25, vsubw_high_u32((uint64x2_t)0, (uint32x4_t)v40));
              v81.val[1] = (int8x16_t)vshlq_u64(v25, vsubw_high_u32((uint64x2_t)0, v38));
              v81.val[2] = (int8x16_t)vshlq_u64(v25, (uint64x2_t)vnegq_s64(v33));
              v81.val[0] = (int8x16_t)vshlq_u64(v25, (uint64x2_t)vnegq_s64(v39));
              v82.val[3] = (int8x16_t)vshlq_u64(v25, vsubw_high_u32((uint64x2_t)0, v35));
              v82.val[1] = (int8x16_t)vshlq_u64(v25, vsubw_high_u32((uint64x2_t)0, v32));
              v82.val[2] = (int8x16_t)vshlq_u64(v25, (uint64x2_t)vnegq_s64(v37));
              v82.val[0] = (int8x16_t)vshlq_u64(v25, (uint64x2_t)vnegq_s64(v34));
              v40.i64[0] = vqtbl4q_s8(v82, (int8x16_t)xmmword_18162AE20).u64[0];
              v40.i64[1] = vqtbl4q_s8(v81, (int8x16_t)xmmword_18162AE20).u64[0];
              *v22++ = vaddq_s8(vandq_s8(v40, v26), v29);
              v27 -= 16;
            }
            while (v27);
          }
          else
          {
            unint64_t v9 = 0;
          }
          do
          {
            if (v7 == v9) {
              _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Index out of range", 18, 2, "Swift/Range.swift", 17, 2, 0x131uLL, 0);
            }
            *((unsigned char *)&v79 + v9) = ((0x3FFE000000000uLL >> ((v5->u8[v9] - 1) >> 1)) & 0x20) + v5->i8[v9];
            ++v9;
          }
          while (v6 != v9);
          if (v6 > 0)
          {
            char v41 = 8;
            if (v6 <= 8) {
              char v42 = 8;
            }
            else {
              char v42 = v6;
            }
            char v43 = 56 * v42;
            if (v6 < 8) {
              char v41 = v6;
            }
            unint64_t v44 = 0xFFFFFFFFFFFFFFFFLL >> (v43 & 0x38);
            if ((unint64_t)v6 <= 8) {
              unint64_t v44 = 0;
            }
            uint64_t v15 = v79 & (0xFFFFFFFFFFFFFFFFLL >> ((56 * v41) & 0x38));
            uint64_t v45 = *((void *)&v79 + 1) & v44;
            BOOL v17 = ((*((void *)&v79 + 1) & v44 | v15) & 0x8080808080808080) == 0;
            unint64_t v46 = 0xA000000000000000;
            if (v17) {
              unint64_t v46 = 0xE000000000000000;
            }
            unint64_t v19 = v46 | (v6 << 56) | v45;
            if ((v19 & 0x4000000000000000) == 0)
            {
              *(void *)&long long v79 = v15;
              *((void *)&v79 + 1) = v45 & 0xFFFFFFFFFFFFFFLL;
              closure #2 in String.init(_uninitializedCapacity:initializingUTF8With:)((uint8x16_t *)&v79, HIBYTE(v19) & 0xF, v78.i64);
              unint64_t v19 = v78.u64[1];
              uint64_t v15 = v78.i64[0];
            }
            goto LABEL_46;
          }
        }
LABEL_45:
        uint64_t v15 = 0;
        unint64_t v19 = 0xE000000000000000;
        goto LABEL_46;
      }
    }
    else
    {
      uint64_t v5 = (int8x16_t *)_StringObject.sharedUTF8.getter(v0, v1);
      uint64_t v6 = v73;
      if (v73 <= 15) {
        goto LABEL_8;
      }
    }
    swift_bridgeObjectRetain(v2);
    uint64_t v15 = specialized static String._fromLargeUTF8Repairing(uninitializedCapacity:initializingWith:)(v6, (uint64_t)v5, v6, v3, v2, (uint64_t (*)(void))specialized static __StringStorage.create(uninitializedCodeUnitCapacity:initializingUncheckedUTF8With:));
    unint64_t v19 = v74;
    swift_bridgeObjectRelease(v2);
    goto LABEL_46;
  }
  unint64_t v10 = HIBYTE(v1) & 0xF;
  *(void *)&long long v79 = v0;
  *((void *)&v79 + 1) = v1 & 0xFFFFFFFFFFFFFFLL;
  uint8x16_t v78 = (uint8x16_t)xmmword_18162AE10;
  if (!v10) {
    goto LABEL_45;
  }
  for (uint64_t i = 0; i != v10; ++i)
    v78.i8[i] = ((0x3FFE000000000uLL >> ((*((unsigned __int8 *)&v79 + i) - 1) >> 1)) & 0x20)
              + *((unsigned char *)&v79 + i);
  if (v10 <= 8) {
    LOBYTE(v12) = 8;
  }
  else {
    uint64_t v12 = HIBYTE(v1) & 0xF;
  }
  unint64_t v13 = 0xFFFFFFFFFFFFFFFFLL >> ((56 * v12) & 0x38);
  if (v10 <= 8) {
    unint64_t v13 = 0;
  }
  char v14 = 8 - v10;
  if (v10 > 8) {
    char v14 = 0;
  }
  uint64_t v15 = v78.i64[0] & (0xFFFFFFFFFFFFFFFFLL >> (8 * (v14 & 7u)));
  uint64_t v16 = v78.i64[1] & v13;
  BOOL v17 = ((v78.i64[1] & v13 | v15) & 0x8080808080808080) == 0;
  unint64_t v18 = 0xA000000000000000;
  if (v17) {
    unint64_t v18 = 0xE000000000000000;
  }
  unint64_t v19 = v18 | (v10 << 56) | v16;
  if ((v19 & 0x4000000000000000) == 0)
  {
    v78.i64[0] = v15;
    v78.i64[1] = v16 & 0xFFFFFFFFFFFFFFLL;
    closure #2 in String.init(_uninitializedCapacity:initializingUTF8With:)(&v78, HIBYTE(v19) & 0xF, v77);
    uint64_t v15 = v77[0];
    unint64_t v19 = v77[1];
  }
LABEL_46:
  uint64_t v47 = v15;
  unint64_t v48 = (void *)v19;
  result._object = v48;
  result._countAndFlagsBits = v47;
  return result;
}

uint64_t _StringGuts.isFastASCII.getter(unint64_t a1, unint64_t a2)
{
  uint64_t v2 = (a2 >> 62) & 1;
  if ((a2 & 0x2000000000000000) == 0) {
    LODWORD(v2) = a1 >> 63;
  }
  if ((a2 & 0x1000000000000000) != 0) {
    return 0;
  }
  else {
    return v2;
  }
}

uint64_t (*UnsafeMutableBufferPointer.subscript.modify(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4))()
{
  if (a2 < 0) {
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x20DuLL, 0);
  }
  if (a4 <= a2) {
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x20EuLL, 0);
  }
  return EnumeratedSequence._base.modify;
}

Swift::Int String.UTF8View.count.getter(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x1000000000000000) != 0) {
    return String.UTF8View._foreignCount()();
  }
  if ((a2 & 0x2000000000000000) != 0) {
    return HIBYTE(a2) & 0xF;
  }
  return a1 & 0xFFFFFFFFFFFFLL;
}

uint64_t Unicode.Scalar.properties.getter@<X0>(uint64_t result@<X0>, _DWORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t Unicode.Scalar.Properties.lowercaseMapping.getter()
{
  return Unicode.Scalar.Properties._getMapping(_:)(1u);
}

Swift::String __swiftcall String.uppercased()()
{
  unint64_t v2 = v1;
  uint64_t v3 = v0;
  uint64_t v80 = *MEMORY[0x1E4F143B8];
  if ((v1 & 0x1000000000000000) != 0)
  {
    *(void *)&long long v79 = 0;
    *((void *)&v79 + 1) = 0xE000000000000000;
    Swift::Int v49 = String.UTF8View._foreignCount()();
    BOOL v50 = (v2 & 0x2000000000000000) == 0;
    goto LABEL_52;
  }
  uint64_t v4 = (v1 >> 62) & 1;
  if ((v1 & 0x2000000000000000) == 0) {
    LODWORD(v4) = v0 < 0;
  }
  if (v4 != 1)
  {
    *(void *)&long long v79 = 0;
    *((void *)&v79 + 1) = 0xE000000000000000;
    BOOL v50 = (v1 & 0x2000000000000000) == 0;
    if ((v1 & 0x2000000000000000) != 0) {
      Swift::Int v49 = HIBYTE(v1) & 0xF;
    }
    else {
      Swift::Int v49 = v0 & 0xFFFFFFFFFFFFLL;
    }
LABEL_52:
    String.reserveCapacity(_:)(v49);
    if (v50) {
      uint64_t v52 = v3 & 0xFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v52 = HIBYTE(v2) & 0xF;
    }
    if (!v52)
    {
LABEL_89:
      unint64_t v19 = *((void *)&v79 + 1);
      uint64_t v15 = v79;
      goto LABEL_46;
    }
    uint64_t v53 = 0;
    uint64_t v76 = v52;
    while (1)
    {
      if ((v2 & 0x1000000000000000) != 0)
      {
        Swift::tuple_Unicode_Scalar_scalarLength_Int v58 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)((Swift::String::Index)(v53 << 16));
        Swift::Int scalarLength = v58.scalarLength;
        unsigned int value = v58._0._value;
      }
      else
      {
        if (v50)
        {
          unint64_t v55 = (uint8x16_t *)((v2 & 0xFFFFFFFFFFFFFFFLL) + 32);
          if ((v3 & 0x1000000000000000) == 0) {
            unint64_t v55 = (uint8x16_t *)_StringObject.sharedUTF8.getter(v3, v2);
          }
        }
        else
        {
          v78.i64[0] = v3;
          v78.i64[1] = v2 & 0xFFFFFFFFFFFFFFLL;
          unint64_t v55 = &v78;
        }
        unsigned int value = _decodeScalar(_:startingAt:)((uint64_t)v55, v51, v53);
      }
      unsigned int v59 = value;
      Swift::Int v60 = scalarLength;
      v78.i64[0] = 0;
      Specialint Mapping = (uint8x16_t *)_swift_stdlib_getSpecialMapping(value, 0, &v78);
      if (SpecialMapping && v78.i64[0])
      {
        if (v78.i64[0] < 0) {
          _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeBufferPointer with negative count", 39, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x53FuLL, 0);
        }
        unint64_t v62 = specialized static String._uncheckedFromUTF8(_:isASCII:)(SpecialMapping, v78.i64[0], 0);
      }
      else
      {
        int Mapping = _swift_stdlib_getMapping(v59, 0);
        if (Mapping)
        {
          int64_t v65 = Mapping + (unint64_t)v59;
          if (v65 < 0) {
            _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, 2, 0xD7BuLL, 0);
          }
          if (HIDWORD(v65)) {
            _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Not enough bits to represent the passed value", 45, 2, "Swift/Integers.swift", 20, 2, 0xD7FuLL, 0);
          }
        }
        else
        {
          LODWORD(v65) = v59;
        }
        unint64_t v62 = specialized Unicode.Scalar.withUTF8CodeUnits<A>(_:)(v65);
      }
      uint64_t v66 = v62;
      unint64_t v67 = v63;
      uint8x16_t v68 = (uint8x16_t)v79;
      unint64_t v69 = HIBYTE(*((void *)&v79 + 1)) & 0xFLL;
      if ((*((void *)&v79 + 1) & 0x2000000000000000) == 0) {
        unint64_t v69 = v79 & 0xFFFFFFFFFFFFLL;
      }
      if (!v69 && ((unint64_t)v79 & ~*((void *)&v79 + 1) & 0x2000000000000000) == 0)
      {
        swift_bridgeObjectRelease(*((uint64_t *)&v79 + 1));
        *(void *)&long long v79 = v66;
        *((void *)&v79 + 1) = v67;
        goto LABEL_59;
      }
      if ((*((void *)&v79 + 1) & 0x2000000000000000) == 0) {
        break;
      }
      if ((v63 & 0x2000000000000000) == 0) {
        goto LABEL_57;
      }
      specialized _SmallString.init(_:appending:)(v79, *((unint64_t *)&v79 + 1), v62, v63);
      if ((v71 & 1) == 0)
      {
        uint64_t v72 = v70;
        swift_bridgeObjectRelease(v68.i64[1]);
        swift_bridgeObjectRelease(v67);
        *(void *)&long long v79 = v68.i64[0];
        *((void *)&v79 + 1) = v72;
        uint64_t v52 = v76;
        goto LABEL_59;
      }
      uint64_t v54 = HIBYTE(v67) & 0xF;
      uint64_t v52 = v76;
LABEL_58:
      _StringGuts.append(_:)(v66, v67, 0, v54);
      swift_bridgeObjectRelease(v67);
LABEL_59:
      v53 += v60;
      if (v53 >= v52) {
        goto LABEL_89;
      }
    }
    if ((v63 & 0x2000000000000000) != 0)
    {
      uint64_t v54 = HIBYTE(v63) & 0xF;
      goto LABEL_58;
    }
LABEL_57:
    uint64_t v54 = v62 & 0xFFFFFFFFFFFFLL;
    goto LABEL_58;
  }
  if ((v1 & 0x2000000000000000) == 0)
  {
    if ((v0 & 0x1000000000000000) != 0)
    {
      uint64_t v5 = (int8x16_t *)((v1 & 0xFFFFFFFFFFFFFFFLL) + 32);
      uint64_t v6 = v0 & 0xFFFFFFFFFFFFLL;
      if ((v0 & 0xFFFFFFFFFFFFuLL) <= 0xF)
      {
LABEL_8:
        long long v79 = xmmword_18162AE10;
        if (v6)
        {
          unint64_t v7 = v6 & ~(v6 >> 63);
          unint64_t v8 = v6 - 1;
          if (v7 < v6 - 1) {
            unint64_t v8 = v6 & ~(v6 >> 63);
          }
          if (v8 > 0xF)
          {
            unint64_t v20 = v8 + 1;
            uint64_t v21 = v20 & 0xF;
            if ((v20 & 0xF) == 0) {
              uint64_t v21 = 16;
            }
            unint64_t v9 = v20 - v21;
            char v22 = (int8x16_t *)&v79;
            v23.i64[0] = -1;
            v23.i64[1] = -1;
            v24.i64[0] = 0x3F3F3F3F3F3F3F3FLL;
            v24.i64[1] = 0x3F3F3F3F3F3F3F3FLL;
            uint64x2_t v25 = (uint64x2_t)vdupq_n_s64(0x1FFF000000000000uLL);
            v26.i64[0] = 0x2020202020202020;
            v26.i64[1] = 0x2020202020202020;
            unint64_t v27 = v9;
            char v28 = v5;
            do
            {
              int8x16_t v29 = *v28++;
              uint8x16_t v30 = (uint8x16_t)vandq_s8((int8x16_t)vshrq_n_u8((uint8x16_t)vaddq_s8(v29, v23), 1uLL), v24);
              uint16x8_t v31 = vmovl_u8(*(uint8x8_t *)v30.i8);
              uint32x4_t v32 = vmovl_u16(*(uint16x4_t *)v31.i8);
              v33.i64[0] = v32.u32[0];
              v33.i64[1] = v32.u32[1];
              int64x2_t v34 = v33;
              uint32x4_t v35 = vmovl_high_u16(v31);
              uint16x8_t v36 = vmovl_high_u8(v30);
              v33.i64[0] = v35.u32[0];
              v33.i64[1] = v35.u32[1];
              int64x2_t v37 = v33;
              uint32x4_t v38 = vmovl_u16(*(uint16x4_t *)v36.i8);
              v33.i64[0] = v38.u32[0];
              v33.i64[1] = v38.u32[1];
              int64x2_t v39 = v33;
              int8x16_t v40 = (int8x16_t)vmovl_high_u16(v36);
              v33.i64[0] = v40.u32[0];
              v33.i64[1] = v40.u32[1];
              v81.val[3] = (int8x16_t)vshlq_u64(v25, vsubw_high_u32((uint64x2_t)0, (uint32x4_t)v40));
              v81.val[1] = (int8x16_t)vshlq_u64(v25, vsubw_high_u32((uint64x2_t)0, v38));
              v81.val[2] = (int8x16_t)vshlq_u64(v25, (uint64x2_t)vnegq_s64(v33));
              v81.val[0] = (int8x16_t)vshlq_u64(v25, (uint64x2_t)vnegq_s64(v39));
              v82.val[3] = (int8x16_t)vshlq_u64(v25, vsubw_high_u32((uint64x2_t)0, v35));
              v82.val[1] = (int8x16_t)vshlq_u64(v25, vsubw_high_u32((uint64x2_t)0, v32));
              v82.val[2] = (int8x16_t)vshlq_u64(v25, (uint64x2_t)vnegq_s64(v37));
              v82.val[0] = (int8x16_t)vshlq_u64(v25, (uint64x2_t)vnegq_s64(v34));
              v40.i64[0] = vqtbl4q_s8(v82, (int8x16_t)xmmword_18162AE20).u64[0];
              v40.i64[1] = vqtbl4q_s8(v81, (int8x16_t)xmmword_18162AE20).u64[0];
              *v22++ = vsubq_s8(v29, vandq_s8(vshlq_n_s8(v40, 5uLL), v26));
              v27 -= 16;
            }
            while (v27);
          }
          else
          {
            unint64_t v9 = 0;
          }
          do
          {
            if (v7 == v9) {
              _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Index out of range", 18, 2, "Swift/Range.swift", 17, 2, 0x131uLL, 0);
            }
            *((unsigned char *)&v79 + v9) = v5->i8[v9]
                                  - 32 * ((0x1FFF000000000000uLL >> ((v5->u8[v9] - 1) >> 1)) & 1);
            ++v9;
          }
          while (v6 != v9);
          if (v6 > 0)
          {
            char v41 = 8;
            if (v6 <= 8) {
              char v42 = 8;
            }
            else {
              char v42 = v6;
            }
            char v43 = 56 * v42;
            if (v6 < 8) {
              char v41 = v6;
            }
            unint64_t v44 = 0xFFFFFFFFFFFFFFFFLL >> (v43 & 0x38);
            if ((unint64_t)v6 <= 8) {
              unint64_t v44 = 0;
            }
            uint64_t v15 = v79 & (0xFFFFFFFFFFFFFFFFLL >> ((56 * v41) & 0x38));
            uint64_t v45 = *((void *)&v79 + 1) & v44;
            BOOL v17 = ((*((void *)&v79 + 1) & v44 | v15) & 0x8080808080808080) == 0;
            unint64_t v46 = 0xA000000000000000;
            if (v17) {
              unint64_t v46 = 0xE000000000000000;
            }
            unint64_t v19 = v46 | (v6 << 56) | v45;
            if ((v19 & 0x4000000000000000) == 0)
            {
              *(void *)&long long v79 = v15;
              *((void *)&v79 + 1) = v45 & 0xFFFFFFFFFFFFFFLL;
              closure #2 in String.init(_uninitializedCapacity:initializingUTF8With:)((uint8x16_t *)&v79, HIBYTE(v19) & 0xF, v78.i64);
              unint64_t v19 = v78.u64[1];
              uint64_t v15 = v78.i64[0];
            }
            goto LABEL_46;
          }
        }
LABEL_45:
        uint64_t v15 = 0;
        unint64_t v19 = 0xE000000000000000;
        goto LABEL_46;
      }
    }
    else
    {
      uint64_t v5 = (int8x16_t *)_StringObject.sharedUTF8.getter(v0, v1);
      uint64_t v6 = v73;
      if (v73 <= 15) {
        goto LABEL_8;
      }
    }
    swift_bridgeObjectRetain(v2);
    uint64_t v15 = specialized static String._fromLargeUTF8Repairing(uninitializedCapacity:initializingWith:)(v6, (uint64_t)v5, v6, v3, v2, (uint64_t (*)(void))specialized static __StringStorage.create(uninitializedCodeUnitCapacity:initializingUncheckedUTF8With:));
    unint64_t v19 = v74;
    swift_bridgeObjectRelease(v2);
    goto LABEL_46;
  }
  unint64_t v10 = HIBYTE(v1) & 0xF;
  *(void *)&long long v79 = v0;
  *((void *)&v79 + 1) = v1 & 0xFFFFFFFFFFFFFFLL;
  uint8x16_t v78 = (uint8x16_t)xmmword_18162AE10;
  if (!v10) {
    goto LABEL_45;
  }
  for (uint64_t i = 0; i != v10; ++i)
    v78.i8[i] = *((unsigned char *)&v79 + i)
              - 32 * ((0x1FFF000000000000uLL >> ((*((unsigned __int8 *)&v79 + i) - 1) >> 1)) & 1);
  if (v10 <= 8) {
    LOBYTE(v12) = 8;
  }
  else {
    uint64_t v12 = HIBYTE(v1) & 0xF;
  }
  unint64_t v13 = 0xFFFFFFFFFFFFFFFFLL >> ((56 * v12) & 0x38);
  if (v10 <= 8) {
    unint64_t v13 = 0;
  }
  char v14 = 8 - v10;
  if (v10 > 8) {
    char v14 = 0;
  }
  uint64_t v15 = v78.i64[0] & (0xFFFFFFFFFFFFFFFFLL >> (8 * (v14 & 7u)));
  uint64_t v16 = v78.i64[1] & v13;
  BOOL v17 = ((v78.i64[1] & v13 | v15) & 0x8080808080808080) == 0;
  unint64_t v18 = 0xA000000000000000;
  if (v17) {
    unint64_t v18 = 0xE000000000000000;
  }
  unint64_t v19 = v18 | (v10 << 56) | v16;
  if ((v19 & 0x4000000000000000) == 0)
  {
    v78.i64[0] = v15;
    v78.i64[1] = v16 & 0xFFFFFFFFFFFFFFLL;
    closure #2 in String.init(_uninitializedCapacity:initializingUTF8With:)(&v78, HIBYTE(v19) & 0xF, v77);
    uint64_t v15 = v77[0];
    unint64_t v19 = v77[1];
  }
LABEL_46:
  uint64_t v47 = v15;
  unint64_t v48 = (void *)v19;
  result._object = v48;
  result._countAndFlagsBits = v47;
  return result;
}

uint64_t Unicode.Scalar.Properties.uppercaseMapping.getter()
{
  return Unicode.Scalar.Properties._getMapping(_:)(0);
}

uint64_t String.init<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)(a3 + 8) + 8))(a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a2 - 8) + 8))(a1, a2);
  return v5;
}

__objc2_class **String._nfcCodeUnits.getter(unint64_t a1, unint64_t a2)
{
  uint64_t v4 = &_swiftEmptyArrayStorage;
  if ((a2 & 0x2000000000000000) != 0) {
    uint64_t v2 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  specialized _StringGutsSlice._withNFCCodeUnits(_:)(a1, a2, 0, v2, (uint64_t *)&v4);
  return v4;
}

__objc2_class **closure #1 in String._nfcCodeUnits.getter(char a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  Swift::String result = (__objc2_class **)swift_isUniquelyReferenced_nonNull_native(*a2);
  *a2 = v4;
  if ((result & 1) == 0)
  {
    Swift::String result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v4 + 16) + 1, 1, v4);
    uint64_t v4 = (uint64_t)result;
    *a2 = (uint64_t)result;
  }
  unint64_t v7 = *(void *)(v4 + 16);
  unint64_t v6 = *(void *)(v4 + 24);
  if (v7 >= v6 >> 1)
  {
    Swift::String result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((__objc2_class **)(v6 > 1), v7 + 1, 1, v4);
    uint64_t v4 = (uint64_t)result;
  }
  *(void *)(v4 + 16) = v7 + 1;
  *(unsigned char *)(v4 + v7 + 32) = a1;
  *a2 = v4;
  return result;
}

void String._withNFCCodeUnits(_:)(void (*a1)(uint64_t), uint64_t a2, unint64_t a3, unint64_t a4)
{
  if ((a4 & 0x2000000000000000) != 0) {
    uint64_t v4 = HIBYTE(a4) & 0xF;
  }
  else {
    uint64_t v4 = a3 & 0xFFFFFFFFFFFFLL;
  }
  _StringGutsSlice._withNFCCodeUnits(_:)(a1, a2, a3, a4, 0, v4);
}

BOOL static UInt8.> infix(_:_:)(unsigned __int8 a1, unsigned __int8 a2)
{
  return a2 < a1;
}

uint64_t String.subscript.getter(Swift::String::Index a1, Swift::String::Index a2, unint64_t a3, unint64_t a4)
{
  Swift::UInt64 v5 = _StringGuts.validateScalarRange(_:)(a1, a2, a3, a4);
  if (v5 >= 0x10000) {
    uint64_t v6 = v5;
  }
  else {
    uint64_t v6 = v5 | 3;
  }
  swift_bridgeObjectRetain(a4);
  return v6;
}

Swift::Void __swiftcall _StringGutsSlice._fastNFCCheck(_:_:)(Swift::Bool *a1, Swift::UInt8 *a2)
{
  uint64_t v6 = v5;
  uint64_t v7 = v4;
  uint64_t v8 = v2;
  if ((v3 & 0x2000000000000000) == 0)
  {
    if ((v2 & 0x1000000000000000) != 0)
    {
      id v11 = (id)((v3 & 0xFFFFFFFFFFFFFFFLL) + 32);
      uint64_t v12 = v8 & 0xFFFFFFFFFFFFLL;
      if ((v4 & 0x8000000000000000) == 0) {
        goto LABEL_4;
      }
    }
    else
    {
      id v11 = _StringObject.sharedUTF8.getter(v2, v3);
      uint64_t v12 = v46;
      if ((v7 & 0x8000000000000000) == 0)
      {
LABEL_4:
        if (v12 >= v6)
        {
          uint64_t v13 = specialized UnsafeBufferPointer.init(rebasing:)(v7, v6, (uint64_t)v11, v12);
          if (v14 < 1) {
            return;
          }
          uint64_t v15 = v13;
          uint64_t v16 = v14;
          uint64_t v17 = 0;
          while ((v17 & 0x8000000000000000) == 0)
          {
            unsigned int v20 = *(unsigned __int8 *)(v15 + v17);
            if (v20 < 0xCC)
            {
              Swift::UInt8 v18 = 0;
              if (v20 < 0xC0) {
                uint64_t v19 = 1;
              }
              else {
                uint64_t v19 = 2;
              }
            }
            else
            {
              unsigned int v21 = __clz(v20 ^ 0xFF) - 24;
              uint64_t v19 = v21;
              if (v21 == 2)
              {
                int8x16_t v24 = (unsigned char *)(v17 + v15 + 1);
                int v25 = (v20 & 0x1F) << 6;
              }
              else
              {
                uint64_t v22 = v17 + v15;
                char v23 = *(unsigned char *)(v17 + v15 + 1);
                if (v19 == 3)
                {
                  int8x16_t v24 = (unsigned char *)(v22 + 2);
                  int v25 = ((v20 & 0xF) << 12) | ((v23 & 0x3F) << 6);
                }
                else
                {
                  char v26 = *(unsigned char *)(v22 + 2);
                  int8x16_t v24 = (unsigned char *)(v22 + 3);
                  int v25 = ((v20 & 0xF) << 18) | ((v23 & 0x3F) << 12) | ((v26 & 0x3F) << 6);
                }
              }
              unsigned int v27 = v25 | *v24 & 0x3F;
              if (v27 >= 0x300) {
                unsigned int NormData = _swift_stdlib_getNormData(v27);
              }
              else {
                unsigned int NormData = 0;
              }
              BOOL v29 = *a2 <= (NormData >> 3);
              Swift::UInt8 v18 = NormData >> 3;
              if (!v18) {
                BOOL v29 = 1;
              }
              if ((NormData & 6) != 0 || !v29) {
                goto LABEL_50;
              }
            }
            *a2 = v18;
            v17 += v19;
            if (v17 >= v16) {
              return;
            }
          }
LABEL_52:
          unint64_t v45 = 1781;
LABEL_53:
          _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, v45, 0);
        }
LABEL_54:
        unint64_t v45 = 1861;
        goto LABEL_53;
      }
    }
LABEL_56:
    unint64_t v45 = 1860;
    goto LABEL_53;
  }
  v47[0] = v2;
  v47[1] = v3 & 0xFFFFFFFFFFFFFFLL;
  if (v4 < 0) {
    goto LABEL_56;
  }
  if ((uint64_t)(HIBYTE(v3) & 0xF) < v5) {
    goto LABEL_54;
  }
  uint64_t v30 = v5 - v4;
  if (v5 - v4 < 0) {
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeBufferPointer with negative count", 39, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x53FuLL, 0);
  }
  if (v30)
  {
    uint64_t v31 = 0;
    uint32x4_t v32 = (char *)v47 + v4;
    do
    {
      if (v31 < 0) {
        goto LABEL_52;
      }
      unsigned int v35 = v32[v31];
      if (v35 < 0xCC)
      {
        Swift::UInt8 v33 = 0;
        if (v35 < 0xC0) {
          uint64_t v34 = 1;
        }
        else {
          uint64_t v34 = 2;
        }
      }
      else
      {
        unsigned int v36 = __clz(v35 ^ 0xFF) - 24;
        uint64_t v34 = v36;
        if (v36 == 2)
        {
          int64x2_t v39 = &v32[v31 + 1];
          int v40 = (v35 & 0x1F) << 6;
        }
        else
        {
          int64x2_t v37 = &v32[v31];
          char v38 = v32[v31 + 1];
          if (v34 == 3)
          {
            int64x2_t v39 = v37 + 2;
            int v40 = ((v35 & 0xF) << 12) | ((v38 & 0x3F) << 6);
          }
          else
          {
            char v41 = v37[2];
            int64x2_t v39 = v37 + 3;
            int v40 = ((v35 & 0xF) << 18) | ((v38 & 0x3F) << 12) | ((v41 & 0x3F) << 6);
          }
        }
        unsigned int v42 = v40 | *v39 & 0x3F;
        if (v42 >= 0x300) {
          unsigned int v43 = _swift_stdlib_getNormData(v42);
        }
        else {
          unsigned int v43 = 0;
        }
        BOOL v44 = *a2 <= (v43 >> 3);
        Swift::UInt8 v33 = v43 >> 3;
        if (!v33) {
          BOOL v44 = 1;
        }
        if ((v43 & 6) != 0 || !v44)
        {
LABEL_50:
          *a1 = 0;
          return;
        }
      }
      *a2 = v33;
      v31 += v34;
    }
    while (v31 < v30);
  }
}

unsigned __int8 *specialized closure #1 in _StringGutsSlice._withNFCCodeUnits(_:)(unsigned __int8 *result, uint64_t a2, unint64_t *a3)
{
  if (result && a2)
  {
    unint64_t v3 = *a3;
    do
    {
      unsigned int v15 = *result++;
      uint64_t v14 = v15;
      uint64_t v16 = HIBYTE(v3) & 7;
      char v17 = 8 * v16;
      if (v16 == 7)
      {
        unint64_t v4 = v3 & 0xFF00000000000000;
        uint64_t v5 = (v14 << v17) | v3 & 0xFFFFFFFFFFFFFFLL;
        uint64_t v6 = a3[4] ^ v5;
        unint64_t v7 = a3[2];
        unint64_t v8 = v7 + a3[1];
        uint64_t v9 = v8 ^ __ROR8__(v7, 51);
        uint64_t v10 = a3[3] + v6;
        uint64_t v11 = v10 ^ __ROR8__(v6, 48);
        uint64_t v12 = v11 + __ROR8__(v8, 32);
        uint64_t v13 = v10 + v9;
        a3[3] = __ROR8__(v13, 32);
        a3[4] = v12 ^ __ROR8__(v11, 43);
        a3[1] = v12 ^ v5;
        a3[2] = v13 ^ __ROR8__(v9, 47);
      }
      else
      {
        unint64_t v4 = (v14 << v17) | v3;
      }
      unint64_t v3 = v4 + 0x100000000000000;
      *a3 = v4 + 0x100000000000000;
      --a2;
    }
    while (a2);
  }
  return result;
}

__objc2_class **specialized closure #1 in _StringGutsSlice._withNFCCodeUnits(_:)(__objc2_class **result, uint64_t a2, uint64_t *a3)
{
  if (result)
  {
    uint64_t v3 = a2;
    if (a2)
    {
      uint64_t v5 = (char *)result;
      uint64_t v6 = *a3;
      do
      {
        char v7 = *v5;
        Swift::String result = (__objc2_class **)swift_isUniquelyReferenced_nonNull_native(v6);
        *a3 = v6;
        if ((result & 1) == 0)
        {
          Swift::String result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v6 + 16) + 1, 1, v6);
          uint64_t v6 = (uint64_t)result;
          *a3 = (uint64_t)result;
        }
        unint64_t v9 = *(void *)(v6 + 16);
        unint64_t v8 = *(void *)(v6 + 24);
        if (v9 >= v8 >> 1)
        {
          Swift::String result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((__objc2_class **)(v8 > 1), v9 + 1, 1, v6);
          uint64_t v6 = (uint64_t)result;
        }
        ++v5;
        *(void *)(v6 + 16) = v9 + 1;
        *(unsigned char *)(v6 + v9 + 32) = v7;
        *a3 = v6;
        --v3;
      }
      while (v3);
    }
  }
  return result;
}

uint64_t _StringBreadcrumbs.init(_:)(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = a1;
  *(void *)(v2 + 24) = &_swiftEmptyArrayStorage;
  if ((a2 & 0x2000000000000000) != 0) {
    unint64_t v5 = HIBYTE(a2) & 0xF;
  }
  else {
    unint64_t v5 = a1 & 0xFFFFFFFFFFFFLL;
  }
  swift_bridgeObjectRetain_n(a2, 8);
  if (!v5)
  {
    swift_bridgeObjectRelease_n(a2, 9);
    uint64_t v10 = 0;
    goto LABEL_49;
  }
  *(void *)(v2 + 24) = &_swiftEmptyArrayStorage;
  swift_bridgeObjectRetain_n(a2, 4);
  *(void *)(v2 + 24) = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, (v5 * (unsigned __int128)0x155555555555556uLL) >> 64, 0, (uint64_t)&_swiftEmptyArrayStorage);
  uint64_t v6 = ((unint64_t)v4 >> 59) & 1;
  if ((a2 & 0x1000000000000000) == 0) {
    LODWORD(v6) = 1;
  }
  uint64_t v7 = 4 * v5;
  int v27 = v6;
  uint64_t v8 = 4 << v6;
  if ((a2 & 0x2000000000000000) != 0) {
    BOOL v9 = (a2 & 0x4000000000000000) != 0;
  }
  else {
    BOOL v9 = v4 < 0;
  }
  swift_bridgeObjectRetain(a2);
  uint64_t v10 = 0;
  Swift::UInt64 rawBits = 15;
  uint64_t v28 = v4;
  unint64_t v29 = v5;
  do
  {
    if ((v10 & 0x3F) == 0)
    {
      uint64_t v12 = *(__objc2_class ***)(v2 + 24);
      BOOL isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native((uint64_t)v12);
      *(void *)(v2 + 24) = v12;
      if (!isUniquelyReferenced_nonNull_native)
      {
        uint64_t v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, (int64_t)&v12[2]->isa + 1, 1, (uint64_t)v12);
        *(void *)(v2 + 24) = v12;
      }
      unint64_t v15 = (unint64_t)v12[2];
      unint64_t v14 = (unint64_t)v12[3];
      if (v15 >= v14 >> 1) {
        uint64_t v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((__objc2_class **)(v14 > 1), v15 + 1, 1, (uint64_t)v12);
      }
      v12[2] = (__objc2_class *)(v15 + 1);
      v12[v15 + 4] = (__objc2_class *)rawBits;
      *(void *)(v2 + 24) = v12;
      uint64_t v4 = v28;
      unint64_t v5 = v29;
    }
    if ((rawBits & 0xC) == v8) {
      Swift::UInt64 rawBits = _StringGuts._slowEnsureMatchingEncoding(_:)((Swift::String::Index)rawBits)._rawBits;
    }
    Swift::UInt64 v16 = rawBits >> 16;
    if (rawBits >> 16 >= v5) {
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index is out of bounds", 29, 2, "Swift/StringUTF16View.swift", 27, 2, 0x93uLL, 0);
    }
    if ((a2 & 0x1000000000000000) != 0)
    {
      Swift::UInt64 rawBits = specialized String.UTF16View._foreignIndex(after:)(rawBits);
      goto LABEL_12;
    }
    if (v9)
    {
      Swift::UInt64 rawBits = (rawBits & 0xFFFFFFFFFFFF0000) + 65549;
      goto LABEL_12;
    }
    if ((rawBits & 0xC001) != 0)
    {
      if ((a2 & 0x2000000000000000) != 0) {
        goto LABEL_36;
      }
    }
    else
    {
      v20._Swift::UInt64 rawBits = _StringGuts.scalarAlignSlow(_:)((Swift::String::Index)rawBits)._rawBits;
      Swift::UInt64 rawBits = v20._rawBits & 0xFFFFFFFFFFFFFFF2 | 1;
      Swift::UInt64 v16 = v20._rawBits >> 16;
      if ((a2 & 0x2000000000000000) != 0)
      {
LABEL_36:
        v30[0] = v4;
        v30[1] = a2 & 0xFFFFFFFFFFFFFFLL;
        int v18 = *((unsigned __int8 *)v30 + v16);
        if ((v18 & 0x80) != 0) {
          goto LABEL_29;
        }
        goto LABEL_37;
      }
    }
    char v17 = (unsigned __int8 *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
    if ((v4 & 0x1000000000000000) == 0) {
      char v17 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v4, a2);
    }
    int v18 = v17[v16];
    if ((v18 & 0x80) != 0)
    {
LABEL_29:
      LODWORD(v19) = __clz(v18 ^ 0xFF) - 24;
      if (v19 == 4)
      {
        if ((rawBits & 0xC000) == 0)
        {
          Swift::UInt64 rawBits = rawBits & 0xFFFFFFFFFFFF0000 | 0x4004;
          goto LABEL_12;
        }
        uint64_t v19 = 4;
      }
      else
      {
        uint64_t v19 = v19;
      }
      goto LABEL_38;
    }
LABEL_37:
    uint64_t v19 = 1;
LABEL_38:
    Swift::UInt64 rawBits = (rawBits + (v19 << 16)) & 0xFFFFFFFFFFFF0000 | 5;
LABEL_12:
    ++v10;
  }
  while (v7 != rawBits >> 14);
  swift_bridgeObjectRelease_n(a2, 14);
  if (v27) {
    uint64_t v21 = 7;
  }
  else {
    uint64_t v21 = 11;
  }
  if ((v10 & 0x3F) == 0)
  {
    uint64_t v22 = *(__objc2_class ***)(v2 + 24);
    BOOL v23 = swift_isUniquelyReferenced_nonNull_native((uint64_t)v22);
    *(void *)(v2 + 24) = v22;
    if (!v23)
    {
      uint64_t v22 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, (int64_t)&v22[2]->isa + 1, 1, (uint64_t)v22);
      *(void *)(v2 + 24) = v22;
    }
    unint64_t v25 = (unint64_t)v22[2];
    unint64_t v24 = (unint64_t)v22[3];
    if (v25 >= v24 >> 1) {
      uint64_t v22 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((__objc2_class **)(v24 > 1), v25 + 1, 1, (uint64_t)v22);
    }
    void v22[2] = (__objc2_class *)(v25 + 1);
    v22[v25 + 4] = (__objc2_class *)(v21 | (v5 << 16));
    *(void *)(v2 + 24) = v22;
  }
LABEL_49:
  *(void *)(v2 + 16) = v10;
  return v2;
}

Swift::String::Index __swiftcall String.UTF16View.index(after:)(Swift::String::Index after)
{
  unint64_t v3 = v2;
  uint64_t v4 = v1;
  uint64_t v5 = (v1 >> 59) & 1;
  if ((v2 & 0x1000000000000000) == 0) {
    LOBYTE(v5) = 1;
  }
  if ((after._rawBits & 0xC) == 4 << v5) {
    after._Swift::UInt64 rawBits = _StringGuts._slowEnsureMatchingEncoding(_:)(after)._rawBits;
  }
  Swift::UInt64 v6 = after._rawBits >> 16;
  unint64_t v7 = HIBYTE(v3) & 0xF;
  if ((v3 & 0x2000000000000000) == 0) {
    unint64_t v7 = v4 & 0xFFFFFFFFFFFFLL;
  }
  if (v6 >= v7) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index is out of bounds", 29, 2, "Swift/StringUTF16View.swift", 27, 2, 0x93uLL, 0);
  }
  if ((v3 & 0x1000000000000000) == 0)
  {
    uint64_t v8 = (v3 >> 62) & 1;
    if ((v3 & 0x2000000000000000) == 0) {
      LODWORD(v8) = v4 < 0;
    }
    if (v8 == 1) {
      return (Swift::String::Index)((after._rawBits & 0xFFFFFFFFFFFF0000) + 65549);
    }
    if ((after._rawBits & 0xC001) != 0)
    {
      if ((v3 & 0x2000000000000000) == 0) {
        goto LABEL_15;
      }
    }
    else
    {
      Swift::UInt64 rawBits = _StringGuts.scalarAlignSlow(_:)(after)._rawBits;
      after._Swift::UInt64 rawBits = rawBits & 0xFFFFFFFFFFFFFFF2 | 1;
      Swift::UInt64 v6 = rawBits >> 16;
      if ((v3 & 0x2000000000000000) == 0)
      {
LABEL_15:
        if ((v4 & 0x1000000000000000) != 0)
        {
          LODWORD(v1_assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0, 0xE000000000000000, "Swift/SmallString.swift", 23, 2, 0xD7uLL, 0) = *(unsigned __int8 *)((v3 & 0xFFFFFFFFFFFFFFFLL) + 32 + v6);
          if ((v10 & 0x80) != 0)
          {
LABEL_26:
            LODWORD(v1_assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0, 0xE000000000000000, "Swift/SmallString.swift", 23, 2, 0xD7uLL, 0) = __clz(v10 ^ 0xFF) - 24;
            if (v10 == 4)
            {
              if ((after._rawBits & 0xC000) == 0)
              {
                unsigned __int16 v14 = 16388;
                return (Swift::String::Index)(after._rawBits & 0xFFFFFFFFFFFF0000 | v14);
              }
              uint64_t v10 = 4;
            }
            else
            {
              uint64_t v10 = v10;
            }
LABEL_30:
            after._rawBits += v10 << 16;
            unsigned __int16 v14 = 5;
            return (Swift::String::Index)(after._rawBits & 0xFFFFFFFFFFFF0000 | v14);
          }
        }
        else
        {
          Swift::UInt64 v15 = after._rawBits;
          uint64_t v12 = v3;
          Swift::UInt64 v13 = v6;
          uint64_t v10 = (uint64_t)_StringObject.sharedUTF8.getter(v4, v12);
          after._Swift::UInt64 rawBits = v15;
          LODWORD(v1_assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0, 0xE000000000000000, "Swift/SmallString.swift", 23, 2, 0xD7uLL, 0) = *(unsigned __int8 *)(v10 + v13);
          if ((v10 & 0x80) != 0) {
            goto LABEL_26;
          }
        }
LABEL_24:
        uint64_t v10 = 1;
        goto LABEL_30;
      }
    }
    v16[0] = v4;
    v16[1] = v3 & 0xFFFFFFFFFFFFFFLL;
    LODWORD(v1_assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0, 0xE000000000000000, "Swift/SmallString.swift", 23, 2, 0xD7uLL, 0) = *((unsigned __int8 *)v16 + v6);
    if ((v10 & 0x80) != 0) {
      goto LABEL_26;
    }
    goto LABEL_24;
  }

  return (Swift::String::Index)specialized String.UTF16View._foreignIndex(after:)(after._rawBits);
}

void _StringBreadcrumbs.__deallocating_deinit()
{
  swift_bridgeObjectRelease(*(void *)(v0 + 24));

  swift_deallocClassInstance(v0);
}

Swift::tuple_lowerBound_String_Index_offset_Int __swiftcall _StringBreadcrumbs.getBreadcrumb(forIndex:)(Swift::String::Index forIndex)
{
  Swift::UInt64 v2 = forIndex._rawBits / 0xC00000;
  uint64_t v3 = *(void *)(v1 + 24);
  Swift::UInt64 v4 = *(void *)(v3 + 16);
  if (v4 >= (forIndex._rawBits >> 22) + 1) {
    Swift::UInt64 v5 = (forIndex._rawBits >> 22) + 1;
  }
  else {
    Swift::UInt64 v5 = *(void *)(v3 + 16);
  }
  Swift::UInt64 v6 = v5 - v2;
  if ((uint64_t)(v5 - v2) < 2)
  {
LABEL_12:
    specialized Array._checkSubscript(_:wasNativeTypeChecked:)(v2, 1, v3);
    forIndex._Swift::UInt64 rawBits = *(void *)(v3 + 8 * v2 + 32);
    Swift::Int v9 = v2 << 6;
  }
  else
  {
    while (1)
    {
      BOOL v7 = __OFADD__(v2, v6 >> 1);
      int64_t v8 = v2 + (v6 >> 1);
      if (v7) {
        break;
      }
      if (v8 < 0 || v8 >= (uint64_t)v4) {
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Index out of range", 18, 2, "Swift/ContiguousArrayBuffer.swift", 33, 2, 0x2A3uLL, 0);
      }
      if (forIndex._rawBits >> 14 < *(void *)(v3 + 32 + 8 * v8) >> 14) {
        Swift::UInt64 v5 = v8;
      }
      else {
        Swift::UInt64 v2 = v8;
      }
      Swift::UInt64 v6 = v5 - v2;
      if ((uint64_t)(v5 - v2) <= 1) {
        goto LABEL_12;
      }
    }
    __break(1u);
  }
  result.uint64_t offset = v9;
  result.lowerBound = forIndex;
  return result;
}

id _stdlib_binary_CFStringCreateCopy(_:)(void *a1)
{
  return [a1 copyWithZone:0];
}

uint64_t _stdlib_binary_CFStringGetLength(_:)(unint64_t a1)
{
  if ((a1 & 0x8000000000000000) == 0 || (a1 & 0xFF80000000000007) != 0xC000000000000007) {
    goto LABEL_8;
  }
  if ((a1 & 0x7FFFFFFFFFFFF8) == 0) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/StringBridge.swift", 24, 2, 0x224uLL, 0);
  }
  if (_swift_stdlib_dyld_is_objc_constant_string() == 1)
  {
    if ((*(unsigned char *)((a1 & 0x7FFFFFFFFFFFF8) + 8) & 4) != 0) {
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/StringBridge.swift", 24, 2, 0x22FuLL, 0);
    }
    uint64_t result = *(void *)((a1 & 0x7FFFFFFFFFFFF8) + 0x18);
    if (result < 0) {
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Not enough bits to represent the passed value", 45, 2, "Swift/Integers.swift", 20, 2, 0xE67uLL, 0);
    }
  }
  else
  {
LABEL_8:
    return (uint64_t)[a1 sel_length];
  }
  return result;
}

uint64_t _isNSString(_:)(uint64_t a1)
{
  if ((a1 & 0x8000000000000000) == 0 || (a1 & 0xFF80000000000007) != 0xC000000000000007) {
    return _swift_stdlib_isNSString();
  }
  if ((a1 & 0x7FFFFFFFFFFFF8) == 0) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/StringBridge.swift", 24, 2, 0x224uLL, 0);
  }
  if (_swift_stdlib_dyld_is_objc_constant_string() != 1) {
    return _swift_stdlib_isNSString();
  }
  if ((*(unsigned char *)((a1 & 0x7FFFFFFFFFFFF8) + 8) & 4) != 0) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/StringBridge.swift", 24, 2, 0x22FuLL, 0);
  }
  if ((*(void *)((a1 & 0x7FFFFFFFFFFFF8) + 0x18) & 0x8000000000000000) != 0) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Not enough bits to represent the passed value", 45, 2, "Swift/Integers.swift", 20, 2, 0xE67uLL, 0);
  }
  return 1;
}

id _stdlib_binary_CFStringGetCharactersPtr(_:)(void *a1)
{
  return [a1 fastCharacterContents];
}

uint64_t _NSStringCopyBytes(_:encoding:into:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  uint64_t v6 = 0;
  if ([a1 sel_getBytes_maxLength_usedLength_encoding_options_range_remainingRange_:a3, a4 - a3, &v6, a2, 0, 0, objc_msgSend(a1, sel_length), &v7])BOOL v4 = v8 == 0; {
  else
  }
    BOOL v4 = 0;
  if (v4) {
    return v6;
  }
  else {
    return 0;
  }
}

uint64_t specialized _withCocoaASCIIPointer<A>(_:requireStableAddress:work:)(unint64_t a1, void (*a2)(uint64_t *__return_ptr, void *))
{
  if ((a1 & 0x8000000000000000) != 0)
  {
    if ((a1 & 0xFF80000000000007) == 0xC000000000000007)
    {
      if ((a1 & 0x7FFFFFFFFFFFF8) == 0) {
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/StringBridge.swift", 24, 2, 0x224uLL, 0);
      }
      if (_swift_stdlib_dyld_is_objc_constant_string() == 1)
      {
        if ((*(unsigned char *)((a1 & 0x7FFFFFFFFFFFF8) + 8) & 4) != 0) {
          _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/StringBridge.swift", 24, 2, 0x22FuLL, 0);
        }
        if ((*(void *)((a1 & 0x7FFFFFFFFFFFF8) + 0x18) & 0x8000000000000000) != 0) {
          _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Not enough bits to represent the passed value", 45, 2, "Swift/Integers.swift", 20, 2, 0xE67uLL, 0);
        }
        BOOL v4 = *(void **)((a1 & 0x7FFFFFFFFFFFF8) + 0x10);
        goto LABEL_15;
      }
    }
    unint64_t v5 = specialized _SmallString.init(taggedCocoa:)((void *)a1, 1);
    if ((v7 & 1) == 0)
    {
      if ((v6 & 0x2000000000000000) != 0)
      {
        v10[0] = v5;
        v10[1] = v6 & 0xFFFFFFFFFFFFFFLL;
        swift_unknownObjectRetain((id)a1);
        BOOL v4 = v10;
      }
      else
      {
        if ((v5 & 0x1000000000000000) != 0) {
          uint64_t v8 = (void *)((v6 & 0xFFFFFFFFFFFFFFFLL) + 32);
        }
        else {
          uint64_t v8 = _StringObject.sharedUTF8.getter(v5, v6);
        }
        swift_unknownObjectRetain((id)a1);
        BOOL v4 = v8;
      }
      goto LABEL_15;
    }
    swift_unknownObjectRetain((id)a1);
  }
  BOOL v4 = [a1 _fastCStringContents:1];
  if (!v4)
  {
    LOBYTE(v11) = 2;
    return v11;
  }
LABEL_15:
  a2(&v11, v4);
  return v11;
}

unint64_t _bridgeCocoaString(_:)(unint64_t a1)
{
  unint64_t v1 = a1;
  if ((a1 & 0x8000000000000000) != 0)
  {
    if ((a1 & 0xFF80000000000007) != 0xC000000000000007) {
      goto LABEL_18;
    }
    if ((a1 & 0x7FFFFFFFFFFFF8) == 0)
    {
      unint64_t v15 = 548;
      goto LABEL_31;
    }
    if (_swift_stdlib_dyld_is_objc_constant_string() == 1)
    {
      if ((*(unsigned char *)((v1 & 0x7FFFFFFFFFFFF8) + 8) & 4) != 0) {
        goto LABEL_26;
      }
      if ((*(void *)((v1 & 0x7FFFFFFFFFFFF8) + 0x18) & 0x8000000000000000) != 0) {
        goto LABEL_27;
      }
      if (_swift_stdlib_dyld_is_objc_constant_string() == 1)
      {
        if ((*(unsigned char *)((v1 & 0x7FFFFFFFFFFFF8) + 8) & 4) == 0)
        {
          uint64_t v9 = *(void *)((v1 & 0x7FFFFFFFFFFFF8) + 0x18);
          if ((v9 & 0x8000000000000000) == 0)
          {
            unint64_t v8 = v9 | 0xC000000000000000;
            unint64_t v1 = v1 & 0x7FFFFFFFFFFFF8 | 0x5000000000000000;
LABEL_22:
            swift_bridgeObjectRetain(v1);
            return v8;
          }
LABEL_27:
          _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Not enough bits to represent the passed value", 45, 2, "Swift/Integers.swift", 20, 2, 0xE67uLL, 0);
        }
LABEL_26:
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/StringBridge.swift", 24, 2, 0x22FuLL, 0);
      }
      unint64_t v15 = 588;
    }
    else
    {
LABEL_18:
      unint64_t v10 = specialized _SmallString.init(taggedCocoa:)((void *)v1, 4);
      if ((v11 & 1) == 0)
      {
        unint64_t v8 = v10;
        swift_unknownObjectRetain((id)v1);
        return v8;
      }
      unint64_t v15 = 585;
    }
LABEL_31:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/StringBridge.swift", 24, 2, v15, 0);
  }
  uint64_t v2 = _swift_classOfObjCHeapObject((void *)a1);
  if (type metadata accessor for __StringStorage() == v2)
  {
    unint64_t v8 = *(void *)(v1 + 24);
    goto LABEL_22;
  }
  if (type metadata accessor for __SharedStringStorage() == v2)
  {
    unint64_t v8 = *(void *)(v1 + 32);
    goto LABEL_22;
  }
  unint64_t v3 = (unint64_t)[v1 copyWithZone:0];
  unint64_t v4 = v3;
  if ((v3 & 0x8000000000000000) != 0)
  {
    unint64_t v13 = specialized _SmallString.init(taggedCocoa:)((void *)v3, 4);
    if (v14) {
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "unsafelyUnwrapped of nil optional", 33, 2, "Swift/Optional.swift", 20, 2, 0x163uLL, 0);
    }
    return v13;
  }
  else
  {
    id v5 = [[(id)v3 fastCStringContents:1];
    uint64_t v6 = _stdlib_binary_CFStringGetLength(_:)(v4);
    uint64_t v7 = 0x4000000000000000;
    if (v5)
    {
      unint64_t v8 = v6 | 0xC000000000000000;
    }
    else
    {
      uint64_t v7 = 0x5000000000000000;
      unint64_t v8 = v6;
    }
    swift_bridgeObjectRetain(v7 | v4);
    swift_unknownObjectRelease((id)v4);
  }
  return v8;
}

unint64_t String.init(_cocoaString:)(void *a1)
{
  unint64_t v2 = _bridgeCocoaString(_:)((unint64_t)a1);
  swift_unknownObjectRelease(a1);
  return v2;
}

Swift::Void __swiftcall _StringGuts.grow(_:)(Swift::Int a1)
{
  unint64_t v2 = v1;
  uint64_t v4 = _StringGuts.uniqueNativeCapacity.getter();
  if (v5)
  {
    unint64_t v7 = v1[1];
    if ((v7 & 0x1000000000000000) != 0)
    {
      Swift::Int v6 = String.UTF8View._foreignCount()();
    }
    else if ((v7 & 0x2000000000000000) != 0)
    {
      Swift::Int v6 = HIBYTE(v7) & 0xF;
    }
    else
    {
      Swift::Int v6 = *v1 & 0xFFFFFFFFFFFFLL;
    }
  }
  else
  {
    Swift::Int v6 = 2 * v4;
  }
  if (v6 <= a1) {
    Swift::Int v8 = a1;
  }
  else {
    Swift::Int v8 = v6;
  }
  unint64_t v9 = v2[1];
  if ((v9 & 0x1000000000000000) != 0)
  {
    _StringGuts._foreignGrow(_:)(v8);
  }
  else
  {
    uint64_t v10 = *v2;
    if ((v9 & 0x2000000000000000) != 0)
    {
      size_t v14 = HIBYTE(v9) & 0xF;
      v19[0] = *v2;
      v19[1] = v9 & 0xFFFFFFFFFFFFFFLL;
      unint64_t v15 = v14 | 0xC000000000000000;
      if ((v9 & 0x4000000000000000) == 0) {
        unint64_t v15 = HIBYTE(v9) & 0xF;
      }
      uint64_t v16 = v15 | 0x3000000000000000;
      int64_t v13 = _allocateStringStorage(codeUnitCapacity:)(v8);
      *(void *)(v13 + 16) = v17;
      *(void *)(v13 + 24) = v16;
      if (v17 < 0)
      {
        *(void *)__StringStorage._breadcrumbsAddress.getter() = 0;
        uint64_t v16 = *(void *)(v13 + 24);
      }
      *(unsigned char *)(v13 + 32 + (v16 & 0xFFFFFFFFFFFFLL)) = 0;
      specialized UnsafeMutablePointer.initialize(from:count:)((char *)v19, v14, (char *)(v13 + 32));
    }
    else
    {
      if ((v10 & 0x1000000000000000) != 0)
      {
        char v11 = (char *)((v9 & 0xFFFFFFFFFFFFFFFLL) + 32);
        size_t v12 = v10 & 0xFFFFFFFFFFFFLL;
      }
      else
      {
        char v11 = (char *)_StringObject.sharedUTF8.getter(*v2, v9);
      }
      int64_t v13 = specialized static __StringStorage.create(initializingFrom:codeUnitCapacity:isASCII:)(v11, v12, v8, v10 < 0);
    }
    uint64_t v18 = *(void *)(v13 + 24);
    swift_bridgeObjectRelease(v2[1]);
    uint64_t *v2 = v18;
    v2[1] = v13;
  }
}

unint64_t _StringObject.isImmortal.getter(uint64_t a1, unint64_t a2)
{
  return a2 >> 63;
}

id _StringObject.fastUTF8.getter(uint64_t a1, uint64_t a2)
{
  if ((a1 & 0x1000000000000000) != 0) {
    return (id)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
  }
  else {
    return _StringObject.sharedUTF8.getter(a1, a2);
  }
}

unint64_t _StringObject.CountAndFlags.isASCII.getter(unint64_t a1)
{
  return a1 >> 63;
}

BOOL _StringObject.hasObjCBridgeableObject.getter(uint64_t a1, uint64_t a2)
{
  return a2 >= 0;
}

unint64_t _SwiftCreateBridgedString_DoNotCall(bytes:length:encoding:)(uint8x16_t *a1, uint64_t a2, int a3)
{
  if (a2 < 0) {
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeBufferPointer with negative count", 39, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x53FuLL, 0);
  }
  if (a3 == 1536)
  {
    uint64_t v8 = specialized static String._fromCodeUnits<A, B>(_:encoding:repair:)(a1, a2, 1);
    if (!v9) {
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/String.swift", 18, 2, 0x1C9uLL, 0);
    }
  }
  else
  {
    if (a3 != 134217984) {
      _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD00000000000001CLL, 0x80000001816DF280, "Swift/StringBridge.swift", 24, 2, 0x2DCuLL, 0);
    }
    int64_t v5 = validateUTF8(_:)(a1->i64, a2);
    if (v7) {
      uint64_t v8 = repairUTF8(_:firstKnownBrokenRange:)(a1->i8, a2, v5, v6);
    }
    else {
      uint64_t v8 = specialized static String._uncheckedFromUTF8(_:isASCII:)(a1, a2, v5 & 1);
    }
  }
  uint64_t v11 = v9;
  unint64_t v12 = String._bridgeToObjectiveCImpl()(v8, v9, v10);
  swift_bridgeObjectRelease(v11);
  return v12;
}

uint64_t __SwiftNativeNSString.deinit()
{
  return v0;
}

unint64_t swift_stdlib_getDescription(uint64_t a1, Class *a2)
{
  uint64_t v3 = (uint64_t)*(a2 - 1);
  MEMORY[0x1F4188790](a1);
  int64_t v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v3 + 16))(v5);
  uint64_t v10 = 0;
  unint64_t v11 = 0xE000000000000000;
  _debugPrint_unlocked<A, B>(_:_:)((uint64_t)v5, (uint64_t)&v10, a2, (uint64_t)&type metadata for String, (uint64_t)&protocol witness table for String);
  (*(void (**)(char *, Class *))(v3 + 8))(v5, a2);
  uint64_t v6 = v11;
  unint64_t v8 = String._bridgeToObjectiveCImpl()(v10, v11, v7);
  swift_bridgeObjectRelease(v6);
  return v8;
}

unint64_t swift_stdlib_NSStringFromUTF8(uint8x16_t *a1, uint64_t a2)
{
  if (a2 < 0) {
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeBufferPointer with negative count", 39, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x53FuLL, 0);
  }
  int64_t v4 = validateUTF8(_:)(a1->i64, a2);
  if (v6) {
    uint64_t v7 = repairUTF8(_:firstKnownBrokenRange:)(a1->i8, a2, v4, v5);
  }
  else {
    uint64_t v7 = specialized static String._uncheckedFromUTF8(_:isASCII:)(a1, a2, v4 & 1);
  }
  uint64_t v10 = v8;
  unint64_t v11 = String._bridgeToObjectiveCImpl()(v7, v8, v9);
  swift_bridgeObjectRelease(v10);
  return v11;
}

Swift::Int __swiftcall StringProtocol._toUTF16Offset(_:)(Swift::String::Index a1)
{
  uint64_t v4 = (uint64_t)v2;
  int64_t v5 = (ValueMetadata *)v1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v2, v1, (uint64_t)&protocol requirements base descriptor for StringProtocol, associated type descriptor for StringProtocol.UTF16View);
  uint64_t v8 = *((void *)AssociatedTypeWitness - 1);
  uint64_t v9 = MEMORY[0x1F4188790](AssociatedTypeWitness);
  unint64_t v11 = (char *)&rawBits - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  int64_t v13 = (char *)&rawBits - v12;
  if (v5 == &type metadata for String)
  {
    v19._Swift::UInt64 rawBits = 15;
  }
  else
  {
    if (v5 != &type metadata for Substring)
    {
      Swift::UInt64 rawBits = a1._rawBits;
      size_t v14 = *(void (**)(ValueMetadata *, uint64_t))(v4 + 128);
      v14(v5, v4);
      v14(v5, v4);
      uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v4, (uint64_t)v5, (uint64_t)AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for StringProtocol, associated conformance descriptor for StringProtocol.StringProtocol.UTF16View: BidirectionalCollection);
      (*(void (**)(uint64_t *__return_ptr, const char *))(*(void *)(AssociatedConformanceWitness + 8) + 64))(&v23, AssociatedTypeWitness);
      uint64_t v16 = *(void (**)(char *, const char *))(v8 + 8);
      v16(v11, AssociatedTypeWitness);
      Swift::UInt64 v21 = rawBits;
      uint64_t v22 = v23;
      Swift::Int v17 = (*(uint64_t (**)(uint64_t *, Swift::UInt64 *, const char *, uint64_t))(AssociatedConformanceWitness
                                                                                         + 64))(&v22, &v21, AssociatedTypeWitness, AssociatedConformanceWitness);
      v16(v13, AssociatedTypeWitness);
      return v17;
    }
    v19._Swift::UInt64 rawBits = *v3;
  }

  return String.UTF16View.distance(from:to:)(v19, a1);
}

Swift::String::Index __swiftcall StringProtocol._toUTF16Index(_:)(Swift::Int a1)
{
  uint64_t v4 = (uint64_t)v2;
  int64_t v5 = (ValueMetadata *)v1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v2, v1, (uint64_t)&protocol requirements base descriptor for StringProtocol, associated type descriptor for StringProtocol.UTF16View);
  uint64_t v8 = *((void *)AssociatedTypeWitness - 1);
  uint64_t v9 = MEMORY[0x1F4188790](AssociatedTypeWitness);
  unint64_t v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  int64_t v13 = (char *)&v19 - v12;
  if (v5 == &type metadata for String)
  {
    v18._Swift::UInt64 rawBits = 15;
  }
  else
  {
    if (v5 != &type metadata for Substring)
    {
      Swift::Int v19 = a1;
      size_t v14 = *(void (**)(ValueMetadata *, uint64_t))(v4 + 128);
      v14(v5, v4);
      v14(v5, v4);
      uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v4, (uint64_t)v5, (uint64_t)AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for StringProtocol, associated conformance descriptor for StringProtocol.StringProtocol.UTF16View: BidirectionalCollection);
      (*(void (**)(uint64_t *__return_ptr, const char *))(*(void *)(AssociatedConformanceWitness + 8) + 64))(&v21, AssociatedTypeWitness);
      uint64_t v16 = *(void (**)(char *, const char *))(v8 + 8);
      v16(v11, AssociatedTypeWitness);
      uint64_t v20 = v21;
      (*(void (**)(Swift::String::Index *__return_ptr, uint64_t *, Swift::Int, const char *, uint64_t))(AssociatedConformanceWitness + 48))(&v22, &v20, v19, AssociatedTypeWitness, AssociatedConformanceWitness);
      v16(v13, AssociatedTypeWitness);
      return v22;
    }
    v18._Swift::UInt64 rawBits = *v3;
  }

  return String.UTF16View.index(_:offsetBy:)(v18, a1);
}

Swift::Int StringProtocol._toUTF16Offsets(_:)(Swift::String::Index a1, Swift::UInt64 a2, ValueMetadata *a3)
{
  if (a3 == &type metadata for String)
  {
    uint64_t v8 = *v3;
    unint64_t v7 = v3[1];
    swift_bridgeObjectRetain(v7);
    v9._Swift::UInt64 rawBits = a1._rawBits;
    v10._Swift::UInt64 rawBits = a2;
    v11._Swift::UInt64 rawBits = 15;
    uint64_t v12 = v8;
LABEL_7:
    Swift::Int v6 = String.UTF16View._offsetRange(for:from:)(v9, v10, v11, v12, v7);
    swift_bridgeObjectRelease(v7);
    return v6;
  }
  if (a3 == &type metadata for Substring)
  {
    Swift::UInt64 v13 = *v3;
    uint64_t v14 = v3[2];
    unint64_t v7 = v3[3];
    swift_bridgeObjectRetain(v7);
    v9._Swift::UInt64 rawBits = a1._rawBits;
    v10._Swift::UInt64 rawBits = a2;
    v11._Swift::UInt64 rawBits = v13;
    uint64_t v12 = v14;
    goto LABEL_7;
  }
  Swift::Int v6 = StringProtocol._toUTF16Offset(_:)(a1);
  if (StringProtocol._toUTF16Offset(_:)((Swift::String::Index)a2) < v6) {
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0xB2uLL, 0);
  }
  return v6;
}

Swift::UInt64 String.UTF16View._offsetRange(for:from:)(Swift::String::Index a1, Swift::String::Index a2, Swift::String::Index from, uint64_t a4, unint64_t a5)
{
  Swift::UInt64 rawBits = a1._rawBits;
  uint64_t v10 = ((unint64_t)a4 >> 59) & 1;
  if ((a5 & 0x1000000000000000) == 0) {
    LOBYTE(v1_assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0, 0xE000000000000000, "Swift/SmallString.swift", 23, 2, 0xD7uLL, 0) = 1;
  }
  uint64_t v11 = 4 << v10;
  if ((a1._rawBits & 0xC) == 4 << v10) {
    Swift::UInt64 rawBits = _StringGuts._slowEnsureMatchingEncoding(_:)(a1)._rawBits;
  }
  if ((a2._rawBits & 0xC) == v11) {
    a2._Swift::UInt64 rawBits = _StringGuts._slowEnsureMatchingEncoding(_:)(a2)._rawBits;
  }
  Swift::UInt64 v12 = rawBits >> 16;
  if ((a5 & 0x2000000000000000) != 0) {
    Swift::UInt64 v13 = HIBYTE(a5) & 0xF;
  }
  else {
    Swift::UInt64 v13 = a4 & 0xFFFFFFFFFFFFLL;
  }
  if (v13 < v12 && _swift_stdlib_isExecutableLinkedOnOrAfter(0x50700u))
  {
    unint64_t v22 = 368;
    goto LABEL_39;
  }
  Swift::UInt64 v14 = a2._rawBits >> 16;
  if (v13 < a2._rawBits >> 16 && _swift_stdlib_isExecutableLinkedOnOrAfter(0x50700u))
  {
    unint64_t v22 = 372;
LABEL_39:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index is out of bounds", 29, 2, "Swift/StringUTF16View.swift", 27, 2, v22, 0);
  }
  if ((a5 & 0x1000000000000000) != 0)
  {
    from._Swift::UInt64 rawBits = specialized String.UTF16View._foreignDistance(from:to:)(from._rawBits, rawBits);
    unint64_t v23 = specialized String.UTF16View._foreignDistance(from:to:)(rawBits, a2._rawBits);
    uint64_t v19 = from._rawBits + v23;
    if (__OFADD__(from._rawBits, v23))
    {
      __break(1u);
      goto LABEL_43;
    }
LABEL_33:
    if (v19 >= (uint64_t)from._rawBits) {
      return from._rawBits;
    }
LABEL_43:
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0xB2uLL, 0);
  }
  uint64_t v15 = v14 - v12;
  uint64_t v16 = (a5 >> 62) & 1;
  if ((a5 & 0x2000000000000000) == 0) {
    LODWORD(v16) = a4 < 0;
  }
  if (v16 != 1)
  {
    if (v15 < 0) {
      uint64_t v15 = v12 - v14;
    }
    if ((unint64_t)v15 > 0x20)
    {
      Swift::UInt64 v14 = String.UTF16View._nativeGetOffset(for:)(from);
      if ((uint64_t)(v12 - (from._rawBits >> 16)) <= 32) {
        goto LABEL_31;
      }
      Swift::Int v17 = String.UTF16View._nativeGetOffset(for:)((Swift::String::Index)rawBits);
      from._Swift::UInt64 rawBits = v17 - v14;
      if (!__OFSUB__(v17, v14))
      {
        while (1)
        {
          Swift::Int v20 = String.UTF16View._nativeGetOffset(for:)(a2);
          uint64_t v19 = v20 - v14;
          if (!__OFSUB__(v20, v14)) {
            break;
          }
          __break(1u);
LABEL_45:
          Swift::UInt64 rawBits = rawBits & 0xC | _StringGuts.scalarAlignSlow(_:)((Swift::String::Index)rawBits)._rawBits & 0xFFFFFFFFFFFFFFF3 | 1;
LABEL_26:
          if ((a2._rawBits & 0xC001) == 0) {
            a2._Swift::UInt64 rawBits = a2._rawBits & 0xC | _StringGuts.scalarAlignSlow(_:)(a2)._rawBits & 0xFFFFFFFFFFFFFFF3 | 1;
          }
          from._Swift::UInt64 rawBits = String.UTF16View.distance(from:to:)(from, (Swift::String::Index)rawBits);
          Swift::Int v18 = String.UTF16View._utf16Distance(from:to:)((Swift::String::Index)rawBits, a2);
          uint64_t v19 = from._rawBits + v18;
          if (!__OFADD__(from._rawBits, v18)) {
            break;
          }
          __break(1u);
LABEL_31:
          from._Swift::UInt64 rawBits = String.UTF16View._utf16Distance(from:to:)(from, (Swift::String::Index)rawBits);
        }
        goto LABEL_33;
      }
      __break(1u);
    }
    if ((rawBits & 0xC001) != 0) {
      goto LABEL_26;
    }
    goto LABEL_45;
  }
  if (v15 < 0) {
    goto LABEL_43;
  }
  return v12 - (from._rawBits >> 16);
}

Swift::UInt64 StringProtocol._toUTF16Indices(_:)(Swift::Int a1, Swift::Int a2, ValueMetadata *a3)
{
  if (a3 == &type metadata for String)
  {
    uint64_t v8 = *v3;
    unint64_t v7 = v3[1];
    swift_bridgeObjectRetain(v7);
    Swift::Int v9 = a1;
    uint64_t v10 = a2;
    v11._Swift::UInt64 rawBits = 15;
    uint64_t v12 = v8;
LABEL_7:
    v6._Swift::UInt64 rawBits = String.UTF16View._indexRange(for:from:)(v9, v10, v11, v12, v7);
    swift_bridgeObjectRelease(v7);
    return v6._rawBits;
  }
  if (a3 == &type metadata for Substring)
  {
    Swift::UInt64 v13 = *v3;
    uint64_t v14 = v3[2];
    unint64_t v7 = v3[3];
    swift_bridgeObjectRetain(v7);
    Swift::Int v9 = a1;
    uint64_t v10 = a2;
    v11._Swift::UInt64 rawBits = v13;
    uint64_t v12 = v14;
    goto LABEL_7;
  }
  v6._Swift::UInt64 rawBits = StringProtocol._toUTF16Index(_:)(a1)._rawBits;
  if (StringProtocol._toUTF16Index(_:)(a2)._rawBits >> 14 < v6._rawBits >> 14) {
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0xB2uLL, 0);
  }
  return v6._rawBits;
}

Swift::Int String.UTF16View._indexRange(for:from:)(Swift::Int offsetBy, uint64_t a2, Swift::String::Index a3, uint64_t a4, unint64_t a5)
{
  uint64_t v9 = offsetBy;
  if ((a5 & 0x1000000000000000) == 0)
  {
    uint64_t v10 = (a5 >> 62) & 1;
    if ((a5 & 0x2000000000000000) == 0) {
      LODWORD(v1_assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0, 0xE000000000000000, "Swift/SmallString.swift", 23, 2, 0xD7uLL, 0) = a4 < 0;
    }
    if (v10 == 1)
    {
      offsetBy = String.UTF16View.index(_:offsetBy:)(a3, offsetBy)._rawBits;
      if (!__OFSUB__(a2, v9))
      {
        Swift::UInt64 rawBits = offsetBy;
        v12._Swift::UInt64 rawBits = String.UTF16View.index(_:offsetBy:)((Swift::String::Index)offsetBy, a2 - v9)._rawBits;
        goto LABEL_18;
      }
      __break(1u);
      goto LABEL_24;
    }
    if (__OFSUB__(a2, offsetBy))
    {
LABEL_24:
      __break(1u);
LABEL_25:
      __break(1u);
      goto LABEL_26;
    }
    if (a2 - offsetBy <= 31)
    {
      v13._Swift::UInt64 rawBits = String.UTF16View.index(_:offsetBy:)(a3, offsetBy)._rawBits;
      Swift::UInt64 rawBits = v13._rawBits;
      if (specialized BidirectionalCollection._index(_:offsetBy:)(v13, a2 - v9, a4, a5) >> 14 >= v13._rawBits >> 14) {
        return rawBits;
      }
      goto LABEL_22;
    }
    offsetBy = String.UTF16View._nativeGetOffset(for:)(a3);
    if (__OFSUB__(v9, offsetBy)) {
      goto LABEL_25;
    }
    Swift::Int v14 = offsetBy;
    if (v9 - offsetBy <= 32)
    {
      v16._Swift::UInt64 rawBits = a3._rawBits;
      v15._Swift::UInt64 rawBits = specialized BidirectionalCollection._index(_:offsetBy:)(v16, v9, a4, a5);
    }
    else
    {
      offsetBy += v9;
      if (__OFADD__(v14, v9))
      {
LABEL_27:
        __break(1u);
        goto LABEL_28;
      }
      v15._Swift::UInt64 rawBits = String.UTF16View._nativeGetIndex(for:)(offsetBy)._rawBits;
    }
    Swift::UInt64 rawBits = v15._rawBits;
    offsetBy = v14 + a2;
    if (__OFADD__(v14, a2))
    {
LABEL_26:
      __break(1u);
      goto LABEL_27;
    }
    v12._Swift::UInt64 rawBits = String.UTF16View._nativeGetIndex(for:)(offsetBy)._rawBits;
LABEL_18:
    if (v12._rawBits >> 14 >= rawBits >> 14) {
      return rawBits;
    }
LABEL_22:
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0xB2uLL, 0);
  }
  offsetBy = String.UTF16View.index(_:offsetBy:)(a3, offsetBy)._rawBits;
  if (!__OFSUB__(a2, v9))
  {
    Swift::UInt64 rawBits = offsetBy;
    v12._Swift::UInt64 rawBits = String.UTF16View._foreignIndex(_:offsetBy:)((Swift::String::Index)offsetBy, a2 - v9)._rawBits;
    goto LABEL_18;
  }
LABEL_28:
  __break(1u);
  return offsetBy;
}

unint64_t String._copyUTF16CodeUnits(into:range:)(unint64_t a1, uint64_t a2, Swift::Int a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  swift_bridgeObjectRetain(a6);
  v12._Swift::UInt64 rawBits = 15;
  Swift::Int v13 = String.UTF16View._indexRange(for:from:)(a3, a4, v12, a5, a6);
  unint64_t v15 = v14;
  swift_bridgeObjectRelease(a6);

  return String.UTF16View._nativeCopy(into:alignedRange:)(a1, a2, v13, v15, a5, a6);
}

unint64_t String.UTF16View._nativeCopy(into:alignedRange:)(unint64_t result, uint64_t a2, unint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  if ((a4 ^ a3) < 0x4000) {
    return result;
  }
  uint64_t v8 = a2;
  uint64_t v9 = (uint16x8_t *)result;
  if ((a6 & 0x2000000000000000) == 0)
  {
    if ((a5 & 0x1000000000000000) != 0)
    {
      uint64_t v10 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    }
    else
    {
      unint64_t v60 = a4;
      uint64_t result = (unint64_t)_StringObject.sharedUTF8.getter(a5, a6);
      a4 = v60;
      uint64_t v10 = result;
    }
    uint64_t v11 = a3 >> 16;
    uint64_t v12 = a4 >> 16;
    if ((a5 & 0x8000000000000000) == 0)
    {
      if ((a3 & 0xC000) != 0)
      {
        unint64_t v61 = a4;
        uint64_t v62 = _decodeScalar(_:startingAt:)(v10, a2, a3 >> 16);
        uint64_t v64 = v63;
        uint64_t result = Unicode.Scalar.UTF16View.subscript.getter(1, v62);
        if (v8 <= 0) {
          goto LABEL_111;
        }
        v9->i16[0] = result;
        v11 += v64;
        if (v11 >= v12)
        {
          if ((v61 & 0xC000) == 0x4000)
          {
            uint64_t v13 = 1;
LABEL_66:
            uint64_t result = _decodeScalar(_:startingAt:)(v10, a2, v11);
            if (result < 0x10000
              || (uint64_t result = (unsigned __int16)((result + 67043328) >> 10) + 55296,
                  (result & 0x10000) == 0))
            {
              if (v13 < v8)
              {
                v9->i16[v13] = result;
                return result;
              }
LABEL_111:
              _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x20EuLL, 0);
            }
            __break(1u);
LABEL_113:
            __break(1u);
            JUMPOUT(0x18139FF54);
          }
        }
        else
        {
          uint64_t v13 = 1;
          a4 = v61;
          do
          {
LABEL_9:
            a2 = *(unsigned __int8 *)(v10 + v11);
            if (*(char *)(v10 + v11) < 0)
            {
              switch(__clz(a2 ^ 0xFF))
              {
                case 0x1Au:
                  a2 = *(unsigned char *)(v11 + v10 + 1) & 0x3F | ((a2 & 0x1F) << 6);
                  uint64_t v14 = 2;
                  break;
                case 0x1Bu:
                  a2 = ((a2 & 0xF) << 12) | ((*(unsigned char *)(v11 + v10 + 1) & 0x3F) << 6) | *(unsigned char *)(v11 + v10 + 2) & 0x3F;
                  uint64_t v14 = 3;
                  break;
                case 0x1Cu:
                  a2 = ((a2 & 0xF) << 18) | ((*(unsigned char *)(v11 + v10 + 1) & 0x3F) << 12) | ((*(unsigned char *)(v11 + v10 + 2) & 0x3F) << 6) | *(unsigned char *)(v11 + v10 + 3) & 0x3F;
                  uint64_t v14 = 4;
                  break;
                default:
                  goto LABEL_10;
              }
            }
            else
            {
LABEL_10:
              uint64_t v14 = 1;
            }
            if (v13 >= v8) {
              goto LABEL_111;
            }
            if (WORD1(a2)) {
              __int16 v15 = ((a2 + 67043328) >> 10) - 10240;
            }
            else {
              __int16 v15 = a2;
            }
            v9->i16[v13] = v15;
            uint64_t v16 = v13 + 1;
            if (a2 >= 0x10000)
            {
              unint64_t v69 = a4;
              uint64_t result = Unicode.Scalar.UTF16View.subscript.getter(1, a2);
              if (v16 >= v8) {
                goto LABEL_111;
              }
              v9->i16[v16] = result;
              v13 += 2;
              a4 = v69;
            }
            else
            {
              ++v13;
            }
            v11 += v14;
          }
          while (v11 < v12);
          if ((a4 & 0xC000) == 0x4000) {
            goto LABEL_66;
          }
        }
      }
      else
      {
        if (v12 > (unint64_t)v11)
        {
          uint64_t v13 = 0;
          goto LABEL_9;
        }
        if ((a4 & 0xC000) == 0x4000)
        {
          uint64_t v13 = 0;
          goto LABEL_66;
        }
      }
      return result;
    }
    unint64_t v31 = v12 - v11;
    if (v12 <= (unint64_t)v11) {
      return result;
    }
    if (v31 < 8 || v10 + v12 > (unint64_t)v9 && v10 + v11 < (unint64_t)v9 + 2 * v31)
    {
      unint64_t v32 = 0;
      unint64_t v33 = a3 >> 16;
      goto LABEL_59;
    }
    if (v31 >= 0x20)
    {
      unint64_t v32 = v31 & 0xFFFFFFFFFFFFFFE0;
      Swift::Int v49 = v9 + 2;
      BOOL v50 = (uint8x8_t *)(v11 + v10 + 16);
      unint64_t v51 = v31 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        uint8x16_t v52 = *(uint8x16_t *)v50[-2].i8;
        uint16x8_t v53 = vmovl_u8(*v50);
        uint16x8_t v54 = vmovl_high_u8(*(uint8x16_t *)v50->i8);
        v49[-2] = vmovl_u8(*(uint8x8_t *)v52.i8);
        v49[-1] = vmovl_high_u8(v52);
        *Swift::Int v49 = v53;
        v49[1] = v54;
        v49 += 4;
        v50 += 4;
        v51 -= 32;
      }
      while (v51);
      if (v31 == v32) {
        return result;
      }
      if ((v31 & 0x18) == 0)
      {
        unint64_t v33 = v11 + v32;
        goto LABEL_59;
      }
    }
    else
    {
      unint64_t v32 = 0;
    }
    unint64_t v55 = v32;
    unint64_t v32 = v31 & 0xFFFFFFFFFFFFFFF8;
    unint64_t v33 = v11 + (v31 & 0xFFFFFFFFFFFFFFF8);
    unint64_t v56 = (uint16x8_t *)((char *)v9 + 2 * v55);
    unint64_t v57 = v55 - (v31 & 0xFFFFFFFFFFFFFFF8);
    Swift::tuple_Unicode_Scalar_scalarLength_Int v58 = (uint8x8_t *)(v10 + v55 + v11);
    do
    {
      uint8x8_t v59 = *v58++;
      *v56++ = vmovl_u8(v59);
      v57 += 8;
    }
    while (v57);
    if (v31 == v32) {
      return result;
    }
LABEL_59:
    uint64_t v34 = (unsigned __int8 *)(v10 + v33);
    unint64_t v35 = v32 + v11 - v12;
    unsigned int v36 = &v9->i16[v32];
    do
    {
      __int16 v37 = *v34++;
      *v36++ = v37;
      BOOL v30 = __CFADD__(v35++, 1);
    }
    while (!v30);
    return result;
  }
  v71[0] = a5;
  v71[1] = a6 & 0xFFFFFFFFFFFFFFLL;
  uint64_t v17 = a3 >> 16;
  uint64_t v18 = a4 >> 16;
  if ((a6 & 0x4000000000000000) != 0)
  {
    unint64_t v23 = v18 - v17;
    if (v18 <= (unint64_t)v17) {
      return result;
    }
    if (v23 < 8 || (unint64_t)v71 + v18 > result && (unint64_t)v71 + v17 < result + 2 * v23)
    {
      unint64_t v24 = 0;
      unint64_t v25 = a3 >> 16;
      goto LABEL_50;
    }
    if (v23 >= 0x20)
    {
      unint64_t v24 = v23 & 0xFFFFFFFFFFFFFFE0;
      char v38 = (uint16x8_t *)(result + 32);
      int64x2_t v39 = (uint8x8_t *)((char *)&v71[2] + v17);
      unint64_t v40 = v23 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        uint8x16_t v41 = *(uint8x16_t *)v39[-2].i8;
        uint16x8_t v42 = vmovl_u8(*v39);
        uint16x8_t v43 = vmovl_high_u8(*(uint8x16_t *)v39->i8);
        v38[-2] = vmovl_u8(*(uint8x8_t *)v41.i8);
        v38[-1] = vmovl_high_u8(v41);
        uint16x8_t *v38 = v42;
        v38[1] = v43;
        v38 += 4;
        v39 += 4;
        v40 -= 32;
      }
      while (v40);
      if (v23 == v24) {
        return result;
      }
      if ((v23 & 0x18) == 0)
      {
        unint64_t v25 = v17 + v24;
        goto LABEL_50;
      }
    }
    else
    {
      unint64_t v24 = 0;
    }
    unint64_t v44 = v24;
    unint64_t v24 = v23 & 0xFFFFFFFFFFFFFFF8;
    unint64_t v25 = v17 + (v23 & 0xFFFFFFFFFFFFFFF8);
    unint64_t v45 = (uint16x8_t *)(result + 2 * v44);
    unint64_t v46 = v44 - (v23 & 0xFFFFFFFFFFFFFFF8);
    uint64_t v47 = (uint8x8_t *)((char *)v71 + v44 + v17);
    do
    {
      uint8x8_t v48 = *v47++;
      *v45++ = vmovl_u8(v48);
      v46 += 8;
    }
    while (v46);
    if (v23 == v24) {
      return result;
    }
LABEL_50:
    char v26 = (unsigned __int8 *)v71 + v25;
    unint64_t v27 = v24 + v17 - v18;
    uint64_t v28 = (_WORD *)(result + 2 * v24);
    do
    {
      __int16 v29 = *v26++;
      *v28++ = v29;
      BOOL v30 = __CFADD__(v27++, 1);
    }
    while (!v30);
    return result;
  }
  if ((a3 & 0xC000) != 0)
  {
    unint64_t v65 = a4;
    uint64_t v66 = _decodeScalar(_:startingAt:)((uint64_t)v71, a2, a3 >> 16);
    uint64_t v68 = v67;
    uint64_t result = Unicode.Scalar.UTF16View.subscript.getter(1, v66);
    if (v8 <= 0) {
      goto LABEL_111;
    }
    v9->i16[0] = result;
    v17 += v68;
    if (v17 >= v18)
    {
      if ((v65 & 0xC000) != 0x4000) {
        return result;
      }
      uint64_t v19 = 1;
    }
    else
    {
      uint64_t v19 = 1;
      a4 = v65;
      do
      {
LABEL_29:
        a2 = *((unsigned __int8 *)v71 + v17);
        if (*((char *)v71 + v17) < 0)
        {
          switch(__clz(a2 ^ 0xFF))
          {
            case 0x1Au:
              a2 = *((unsigned char *)v71 + v17 + 1) & 0x3F | ((a2 & 0x1F) << 6);
              uint64_t v20 = 2;
              break;
            case 0x1Bu:
              a2 = ((a2 & 0xF) << 12) | ((*((unsigned char *)v71 + v17 + 1) & 0x3F) << 6) | *((unsigned char *)v71 + v17 + 2) & 0x3F;
              uint64_t v20 = 3;
              break;
            case 0x1Cu:
              a2 = ((a2 & 0xF) << 18) | ((*((unsigned char *)v71 + v17 + 1) & 0x3F) << 12) | ((*((unsigned char *)v71 + v17 + 2) & 0x3F) << 6) | *((unsigned char *)v71 + v17 + 3) & 0x3F;
              uint64_t v20 = 4;
              break;
            default:
              goto LABEL_30;
          }
        }
        else
        {
LABEL_30:
          uint64_t v20 = 1;
        }
        if (v19 >= v8) {
          goto LABEL_111;
        }
        if (WORD1(a2)) {
          __int16 v21 = ((a2 + 67043328) >> 10) - 10240;
        }
        else {
          __int16 v21 = a2;
        }
        v9->i16[v19] = v21;
        uint64_t v22 = v19 + 1;
        if (a2 >= 0x10000)
        {
          unint64_t v70 = a4;
          uint64_t result = Unicode.Scalar.UTF16View.subscript.getter(1, a2);
          if (v22 >= v8) {
            goto LABEL_111;
          }
          v9->i16[v22] = result;
          v19 += 2;
          a4 = v70;
        }
        else
        {
          ++v19;
        }
        v17 += v20;
      }
      while (v17 < v18);
      if ((a4 & 0xC000) != 0x4000) {
        return result;
      }
    }
  }
  else
  {
    if (v18 > (unint64_t)v17)
    {
      uint64_t v19 = 0;
      goto LABEL_29;
    }
    if ((a4 & 0xC000) != 0x4000) {
      return result;
    }
    uint64_t v19 = 0;
  }
  uint64_t result = _decodeScalar(_:startingAt:)((uint64_t)v71, a2, v17);
  if (result >= 0x10000)
  {
    uint64_t result = (unsigned __int16)((result + 67043328) >> 10) + 55296;
    if ((result & 0x10000) != 0) {
      goto LABEL_113;
    }
  }
  if (v19 >= v8) {
    goto LABEL_111;
  }
  v9->i16[v19] = result;
  return result;
}

uint64_t _StringGuts.endIndex.getter(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0) {
    uint64_t v2 = a1;
  }
  uint64_t v3 = 7;
  if (((a2 >> 60) & ((a1 & 0x800000000000000) == 0)) != 0) {
    uint64_t v3 = 11;
  }
  return v3 | (v2 << 16);
}

Swift::Int String.count.getter(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0) {
    uint64_t v2 = a1;
  }
  uint64_t v3 = 7;
  if (((a2 >> 60) & ((a1 & 0x800000000000000) == 0)) != 0) {
    uint64_t v3 = 11;
  }
  return String.distance(from:to:)((Swift::String::Index)15, (Swift::String::Index)(v3 | (v2 << 16)));
}

Swift::Int __swiftcall String.distance(from:to:)(Swift::String::Index from, Swift::String::Index to)
{
  unint64_t v4 = v3;
  uint64_t v5 = v2;
  v7._Swift::UInt64 rawBits = _StringGuts.validateInclusiveCharacterIndex_5_7(_:)(from)._rawBits;
  v8._Swift::UInt64 rawBits = _StringGuts.validateInclusiveCharacterIndex_5_7(_:)(to)._rawBits;
  uint64_t v9 = v7._rawBits >> 16;
  if (v7._rawBits >> 14 < v8._rawBits >> 14)
  {
    int64_t v10 = v8._rawBits >> 16;
    if (v9 < v8._rawBits >> 16)
    {
      Swift::Int v11 = 1;
      if ((v4 & 0x1000000000000000) == 0) {
        goto LABEL_6;
      }
LABEL_19:
      int64_t v14 = _StringGuts._opaqueComplexCharacterStride(startingAt:)(v9) + v9;
      while (v14 < v10)
      {
        ++v11;
        uint64_t v9 = v14;
        if ((v4 & 0x1000000000000000) != 0) {
          goto LABEL_19;
        }
LABEL_6:
        if ((v4 & 0x2000000000000000) != 0)
        {
          uint64_t v25 = v5;
          uint64_t v26 = v4 & 0xFFFFFFFFFFFFFFLL;
          int64_t v14 = v9 + 1;
          if (v9 + 1 != (HIBYTE(v4) & 0xF))
          {
            int v16 = *(unsigned __int16 *)((char *)&v25 + v9);
            if (v16 == 2573 || (v16 & 0x80808080) != 0) {
              goto LABEL_19;
            }
          }
        }
        else
        {
          uint64_t v12 = (char *)((v4 & 0xFFFFFFFFFFFFFFFLL) + 32);
          uint64_t v13 = v5 & 0xFFFFFFFFFFFFLL;
          if ((v5 & 0x1000000000000000) == 0) {
            uint64_t v12 = (char *)_StringObject.sharedUTF8.getter(v5, v4);
          }
          int64_t v14 = v9 + 1;
          if (v9 + 1 != v13)
          {
            if (!v12) {
              goto LABEL_43;
            }
            int v15 = *(unsigned __int16 *)&v12[v9];
            if (v15 == 2573 || (v15 & 0x80808080) != 0) {
              goto LABEL_19;
            }
          }
        }
      }
      return v11;
    }
    return 0;
  }
  if (v8._rawBits >> 14 >= v7._rawBits >> 14) {
    return 0;
  }
  int64_t v18 = v8._rawBits >> 16;
  if (v8._rawBits >> 16 >= v9) {
    return 0;
  }
  Swift::Int v11 = -1;
  if (v9 >= 2) {
    goto LABEL_28;
  }
  while (1)
  {
    Swift::Int v19 = 1;
LABEL_26:
    v9 -= v19;
    if (v18 >= v9) {
      return v11;
    }
    while (1)
    {
      --v11;
      if (v9 < 2) {
        break;
      }
LABEL_28:
      if ((v4 & 0x1000000000000000) != 0) {
        goto LABEL_41;
      }
      if ((v4 & 0x2000000000000000) != 0)
      {
        uint64_t v25 = v5;
        uint64_t v26 = v4 & 0xFFFFFFFFFFFFFFLL;
        __int16 v21 = (char *)&v25 + v9;
      }
      else
      {
        uint64_t v20 = (char *)((v4 & 0xFFFFFFFFFFFFFFFLL) + 32);
        if ((v5 & 0x1000000000000000) == 0)
        {
          uint64_t v20 = (char *)_StringObject.sharedUTF8.getter(v5, v4);
          if (!v20) {
LABEL_43:
          }
            _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "unsafelyUnwrapped of nil optional", 33, 2, "Swift/Optional.swift", 20, 2, 0x163uLL, 0);
        }
        __int16 v21 = &v20[v9];
      }
      int v22 = *((unsigned __int16 *)v21 - 1);
      if (v22 == 2573 || (v22 & 0x80808080) != 0)
      {
LABEL_41:
        Swift::Int v19 = _StringGuts._opaqueComplexCharacterStride(endingAt:)(v9);
        goto LABEL_26;
      }
      if (v18 >= --v9) {
        return v11;
      }
    }
  }
}

Swift::Bool __swiftcall String._isValidIndex(_:)(Swift::String::Index a1)
{
  uint64_t v3 = (v1 >> 59) & 1;
  if ((v2 & 0x1000000000000000) == 0) {
    LOBYTE(v3) = 1;
  }
  if ((a1._rawBits & 0xC) == 4 << v3) {
    return 0;
  }
  Swift::UInt64 v4 = HIBYTE(v2) & 0xF;
  if ((v2 & 0x2000000000000000) == 0) {
    Swift::UInt64 v4 = v1 & 0xFFFFFFFFFFFFLL;
  }
  return v4 >= a1._rawBits >> 16 && _StringGuts.isOnGraphemeClusterBoundary(_:)(a1);
}

Swift::Bool __swiftcall _StringGuts.isOnGraphemeClusterBoundary(_:)(Swift::String::Index a1)
{
  if ((a1._rawBits & 2) != 0) {
    return 1;
  }
  if ((a1._rawBits & 0xC000) != 0) {
    return 0;
  }
  if (a1._rawBits < 0x10000) {
    return 1;
  }
  uint64_t v5 = HIBYTE(v2) & 0xF;
  if ((v2 & 0x2000000000000000) == 0) {
    uint64_t v5 = v1 & 0xFFFFFFFFFFFFLL;
  }
  if (v5 == a1._rawBits >> 16) {
    return 1;
  }
  if (!_StringGuts.isOnUnicodeScalarBoundary(_:)(a1)) {
    return 0;
  }
  return (_StringGuts._slowRoundDownToNearestCharacter(_:)((Swift::String::Index)(a1._rawBits | 1))._rawBits ^ a1._rawBits) < 0x4000;
}

Swift::String::Index __swiftcall _StringGuts.validateCharacterIndex(_:)(Swift::String::Index result)
{
  unint64_t v3 = v2;
  unint64_t v4 = v1;
  uint64_t v5 = (v1 >> 59) & 1;
  if ((v2 & 0x1000000000000000) == 0) {
    LOBYTE(v5) = 1;
  }
  if ((result._rawBits & 2) == 0 || (result._rawBits & 0xC) == 4 << v5)
  {
    result._Swift::UInt64 rawBits = _StringGuts.validateSubscalarIndex(_:)(result)._rawBits;
    if (result._rawBits)
    {
      if ((result._rawBits & 2) != 0) {
        return result;
      }
    }
    else
    {
      Swift::UInt64 v7 = result._rawBits & 0xC | _StringGuts.scalarAlignSlow(_:)(result)._rawBits & 0xFFFFFFFFFFFFFFF3;
      result._Swift::UInt64 rawBits = v7 | 1;
      if ((v7 & 2) != 0) {
        return result;
      }
    }
    if (result._rawBits < 0x10000) {
      return (Swift::String::Index)(result._rawBits | 3);
    }
    uint64_t v8 = HIBYTE(v3) & 0xF;
    if ((v3 & 0x2000000000000000) == 0) {
      uint64_t v8 = v4 & 0xFFFFFFFFFFFFLL;
    }
    if (result._rawBits >> 16 == v8)
    {
      return (Swift::String::Index)(result._rawBits | 3);
    }
    else
    {
      return _StringGuts._slowRoundDownToNearestCharacter(_:)(result);
    }
  }
  else
  {
    Swift::UInt64 v6 = HIBYTE(v2) & 0xF;
    if ((v2 & 0x2000000000000000) == 0) {
      Swift::UInt64 v6 = v1 & 0xFFFFFFFFFFFFLL;
    }
    if (v6 <= result._rawBits >> 16) {
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index is out of bounds", 29, 2, "Swift/StringIndexValidation.swift", 33, 2, 0xFEuLL, 0);
    }
  }
  return result;
}

Swift::String::Index __swiftcall String._uncheckedIndex(after:)(Swift::String::Index after)
{
  uint64_t v3 = v2;
  uint64_t v4 = v1;
  Swift::UInt64 v6 = (after._rawBits >> 8) & 0x3F;
  uint64_t v7 = v2 & 0x2000000000000000;
  uint64_t v8 = HIBYTE(v2) & 0xF;
  uint64_t v9 = v1 & 0xFFFFFFFFFFFFLL;
  if (v6) {
    goto LABEL_21;
  }
  if (v7) {
    uint64_t v10 = HIBYTE(v2) & 0xF;
  }
  else {
    uint64_t v10 = v1 & 0xFFFFFFFFFFFFLL;
  }
  if (after._rawBits >> 14 == 4 * v10)
  {
    Swift::UInt64 v6 = 0;
    goto LABEL_21;
  }
  Swift::UInt64 v11 = after._rawBits >> 16;
  if ((v2 & 0x1000000000000000) == 0)
  {
    if (v7)
    {
      uint64_t v30 = v1;
      uint64_t v31 = v2 & 0xFFFFFFFFFFFFFFLL;
      if (v11 + 1 == v8 || (int v15 = *(unsigned __int16 *)((char *)&v30 + v11), v15 != 2573) && (v15 & 0x80808080) == 0)
      {
        uint64_t v7 = 1;
        goto LABEL_20;
      }
    }
    else
    {
      if ((v1 & 0x1000000000000000) != 0)
      {
        uint64_t v12 = (char *)((v2 & 0xFFFFFFFFFFFFFFFLL) + 32);
        uint64_t v13 = v1 & 0xFFFFFFFFFFFFLL;
      }
      else
      {
        uint64_t v12 = (char *)_StringObject.sharedUTF8.getter(v1, v2);
        Swift::UInt64 v11 = after._rawBits >> 16;
      }
      if (v11 + 1 == v13) {
        goto LABEL_15;
      }
      if (!v12) {
        goto LABEL_52;
      }
      int v14 = *(unsigned __int16 *)&v12[v11];
      if (v14 != 2573 && (v14 & 0x80808080) == 0)
      {
LABEL_15:
        uint64_t v7 = 0;
LABEL_20:
        Swift::UInt64 v6 = 1;
        goto LABEL_21;
      }
    }
  }
  Swift::UInt64 v6 = _StringGuts._opaqueComplexCharacterStride(startingAt:)(v11);
LABEL_21:
  Swift::UInt64 v16 = after._rawBits + (v6 << 16);
  unint64_t v17 = v16 & 0xFFFFFFFFFFFF0000;
  if (v7) {
    uint64_t v18 = v8;
  }
  else {
    uint64_t v18 = v9;
  }
  uint64_t v19 = v3 & 0x1000000000000000;
  if (v17 >> 14 == 4 * v18)
  {
    Swift::Int v20 = 0;
LABEL_42:
    v17 |= v20 << 8;
    goto LABEL_43;
  }
  Swift::Int v21 = v16 >> 16;
  if (!v19)
  {
    if (v7)
    {
      uint64_t v30 = v4;
      uint64_t v31 = v3 & 0xFFFFFFFFFFFFFFLL;
      if (v21 + 1 != v8)
      {
        int v22 = *(unsigned __int16 *)((char *)&v30 + v21);
        if (v22 == 2573 || (v22 & 0x80808080) != 0) {
          goto LABEL_33;
        }
      }
LABEL_41:
      uint64_t v19 = 0;
      Swift::Int v20 = 1;
      goto LABEL_42;
    }
    if ((v4 & 0x1000000000000000) != 0)
    {
      unint64_t v24 = (char *)((v3 & 0xFFFFFFFFFFFFFFFLL) + 32);
    }
    else
    {
      unint64_t v24 = (char *)_StringObject.sharedUTF8.getter(v4, v3);
      uint64_t v9 = v29;
    }
    if (v21 + 1 == v9) {
      goto LABEL_41;
    }
    if (v24)
    {
      int v25 = *(unsigned __int16 *)&v24[v21];
      if (v25 == 2573 || (v25 & 0x80808080) != 0) {
        goto LABEL_33;
      }
      goto LABEL_41;
    }
LABEL_52:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "unsafelyUnwrapped of nil optional", 33, 2, "Swift/Optional.swift", 20, 2, 0x163uLL, 0);
  }
LABEL_33:
  Swift::Int v20 = _StringGuts._opaqueComplexCharacterStride(startingAt:)(v21);
  if (v20 <= 63) {
    goto LABEL_42;
  }
LABEL_43:
  BOOL v26 = (v4 & 0x800000000000000) != 0 || v19 == 0;
  uint64_t v27 = 7;
  if (!v26) {
    uint64_t v27 = 11;
  }
  return (Swift::String::Index)(v27 | v17);
}

Swift::Int __swiftcall String._characterStride(startingAt:)(Swift::String::Index startingAt)
{
  Swift::Int result = (startingAt._rawBits >> 8) & 0x3F;
  if (!result)
  {
    uint64_t v5 = v1 & 0xFFFFFFFFFFFFLL;
    if ((v2 & 0x2000000000000000) != 0) {
      uint64_t v6 = HIBYTE(v2) & 0xF;
    }
    else {
      uint64_t v6 = v1 & 0xFFFFFFFFFFFFLL;
    }
    if (startingAt._rawBits >> 14 == 4 * v6) {
      return 0;
    }
    Swift::UInt64 v7 = startingAt._rawBits >> 16;
    if ((v2 & 0x1000000000000000) == 0)
    {
      if ((v2 & 0x2000000000000000) != 0)
      {
        v12[0] = v1;
        v12[1] = v2 & 0xFFFFFFFFFFFFFFLL;
        if (v7 + 1 == (HIBYTE(v2) & 0xF)) {
          return 1;
        }
        int v9 = *(unsigned __int16 *)((char *)v12 + v7);
      }
      else
      {
        if ((v1 & 0x1000000000000000) != 0)
        {
          uint64_t v8 = (char *)((v2 & 0xFFFFFFFFFFFFFFFLL) + 32);
        }
        else
        {
          Swift::UInt64 v11 = startingAt._rawBits >> 16;
          uint64_t v8 = (char *)_StringObject.sharedUTF8.getter(v1, v2);
          Swift::UInt64 v7 = v11;
          uint64_t v5 = v10;
        }
        if (v7 + 1 == v5) {
          return 1;
        }
        if (!v8) {
          _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "unsafelyUnwrapped of nil optional", 33, 2, "Swift/Optional.swift", 20, 2, 0x163uLL, 0);
        }
        int v9 = *(unsigned __int16 *)&v8[v7];
      }
      if (v9 != 2573 && (v9 & 0x80808080) == 0) {
        return 1;
      }
    }
    JUMPOUT(0x1813F136CLL);
  }
  return result;
}

Swift::String::Index __swiftcall String.Index.init(_encodedOffset:)(Swift::Int _encodedOffset)
{
  return (Swift::String::Index)(_encodedOffset << 16);
}

Swift::String::Index __swiftcall String.Index.init(encodedOffset:characterStride:)(Swift::Int encodedOffset, Swift::Int characterStride)
{
  Swift::Int v2 = characterStride << 8;
  if (characterStride > 63) {
    Swift::Int v2 = 0;
  }
  return (Swift::String::Index)(v2 | (encodedOffset << 16));
}

Swift::String::Index __swiftcall _StringGuts.validateInclusiveCharacterIndex_5_7(_:)(Swift::String::Index a1)
{
  unint64_t v3 = v2;
  unint64_t v4 = v1;
  v5._Swift::UInt64 rawBits = a1._rawBits;
  uint64_t v6 = (v1 >> 59) & 1;
  if ((v2 & 0x1000000000000000) == 0) {
    LOBYTE(v6) = 1;
  }
  if ((a1._rawBits & 2) != 0 && (a1._rawBits & 0xC) != 4 << v6)
  {
    Swift::UInt64 v7 = HIBYTE(v2) & 0xF;
    if ((v2 & 0x2000000000000000) == 0) {
      Swift::UInt64 v7 = v1 & 0xFFFFFFFFFFFFLL;
    }
    if (v7 < a1._rawBits >> 16)
    {
      if (_swift_stdlib_isExecutableLinkedOnOrAfter(0x50700u)) {
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index is out of bounds", 29, 2, "Swift/StringIndexValidation.swift", 33, 2, 0x188uLL, 0);
      }
    }
    return v5;
  }
  v8._Swift::UInt64 rawBits = _StringGuts.validateInclusiveSubscalarIndex_5_7(_:)(a1)._rawBits;
  v5._Swift::UInt64 rawBits = v8._rawBits;
  if (v8._rawBits)
  {
    if ((v8._rawBits & 2) != 0) {
      return v5;
    }
  }
  else
  {
    Swift::UInt64 v10 = v8._rawBits & 0xC | _StringGuts.scalarAlignSlow(_:)(v8)._rawBits & 0xFFFFFFFFFFFFFFF3;
    v5._Swift::UInt64 rawBits = v10 | 1;
    if ((v10 & 2) != 0) {
      return v5;
    }
  }
  if (v5._rawBits < 0x10000) {
    return (Swift::String::Index)(v5._rawBits | 3);
  }
  uint64_t v11 = HIBYTE(v3) & 0xF;
  if ((v3 & 0x2000000000000000) == 0) {
    uint64_t v11 = v4 & 0xFFFFFFFFFFFFLL;
  }
  if (v5._rawBits >> 16 == v11) {
    return (Swift::String::Index)(v5._rawBits | 3);
  }

  return _StringGuts._slowRoundDownToNearestCharacter(_:)(v5);
}

Swift::String::Index __swiftcall String._uncheckedIndex(before:)(Swift::String::Index before)
{
  unint64_t v3 = v2;
  uint64_t v4 = v1;
  if (before._rawBits < 0x4000)
  {
    Swift::Int v6 = 0;
LABEL_15:
    Swift::Int v10 = v6 << 8;
    goto LABEL_19;
  }
  Swift::Int v6 = before._rawBits >> 16;
  if (before._rawBits >= 0x20000)
  {
    if ((v2 & 0x1000000000000000) == 0)
    {
      if ((v2 & 0x2000000000000000) != 0)
      {
        v14[0] = v1;
        v14[1] = v2 & 0xFFFFFFFFFFFFFFLL;
        Swift::UInt64 v7 = v14;
      }
      else if ((v1 & 0x1000000000000000) != 0)
      {
        Swift::UInt64 v7 = (void *)((v2 & 0xFFFFFFFFFFFFFFFLL) + 32);
      }
      else
      {
        Swift::UInt64 v13 = before._rawBits >> 16;
        Swift::UInt64 v7 = _StringObject.sharedUTF8.getter(v1, v2);
        Swift::Int v6 = before._rawBits >> 16;
        if (!v7) {
          _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "unsafelyUnwrapped of nil optional", 33, 2, "Swift/Optional.swift", 20, 2, 0x163uLL, 0);
        }
      }
      int v8 = *(unsigned __int16 *)((char *)v7 + v6 - 2);
      if (v8 != 2573 && (v8 & 0x80808080) == 0)
      {
        Swift::Int v6 = 1;
        goto LABEL_15;
      }
    }
    Swift::Int v6 = _StringGuts._opaqueComplexCharacterStride(endingAt:)(v6);
  }
  Swift::Int v10 = v6 << 8;
  if (v6 > 63) {
    Swift::Int v10 = 0;
  }
LABEL_19:
  uint64_t v11 = 7;
  if (((v3 >> 60) & ((v4 & 0x800000000000000) == 0)) != 0) {
    uint64_t v11 = 11;
  }
  return (Swift::String::Index)(v10 | (before._rawBits - (v6 << 16)) & 0xFFFFFFFFFFFF0000 | v11);
}

Swift::Int __swiftcall String._characterStride(endingAt:)(Swift::String::Index endingAt)
{
  if (endingAt._rawBits < 0x4000) {
    return 0;
  }
  Swift::Int result = endingAt._rawBits >> 16;
  if (endingAt._rawBits >= 0x20000)
  {
    if ((v2 & 0x1000000000000000) != 0) {
      goto LABEL_16;
    }
    if ((v2 & 0x2000000000000000) != 0)
    {
      v9[0] = v1;
      v9[1] = v2 & 0xFFFFFFFFFFFFFFLL;
      Swift::String::Index v5 = v9;
    }
    else if ((v1 & 0x1000000000000000) != 0)
    {
      Swift::String::Index v5 = (void *)((v2 & 0xFFFFFFFFFFFFFFFLL) + 32);
    }
    else
    {
      Swift::Int v8 = result;
      Swift::String::Index v5 = _StringObject.sharedUTF8.getter(v1, v2);
      Swift::Int result = v8;
      if (!v5) {
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "unsafelyUnwrapped of nil optional", 33, 2, "Swift/Optional.swift", 20, 2, 0x163uLL, 0);
      }
    }
    int v6 = *(unsigned __int16 *)((char *)v5 + result - 2);
    if (v6 == 2573 || (v6 & 0x80808080) != 0)
    {
LABEL_16:
      JUMPOUT(0x1813F197CLL);
    }
    return 1;
  }
  return result;
}

Swift::String::Index __swiftcall String.index(_:offsetBy:)(Swift::String::Index _, Swift::Int offsetBy)
{
  unint64_t v4 = v3;
  uint64_t v5 = v2;
  v7._Swift::UInt64 rawBits = _StringGuts.validateInclusiveCharacterIndex_5_7(_:)(_)._rawBits;
  if (offsetBy < 0)
  {
    Swift::Int v31 = 0;
    if (((v4 >> 60) & ((v5 & 0x800000000000000) == 0)) != 0) {
      uint64_t v32 = 11;
    }
    else {
      uint64_t v32 = 7;
    }
    while (1)
    {
      if (!(v7._rawBits >> 14))
      {
        unint64_t v33 = 163;
LABEL_75:
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index is out of bounds", 29, 2, "Swift/StringCharacterView.swift", 31, 2, v33, 0);
      }
      uint64_t v34 = v7._rawBits >> 16;
      if (v7._rawBits < 0x20000) {
        goto LABEL_55;
      }
      if ((v4 & 0x1000000000000000) != 0) {
        break;
      }
      if ((v4 & 0x2000000000000000) != 0)
      {
        uint64_t v43 = v5;
        uint64_t v44 = v4 & 0xFFFFFFFFFFFFFFLL;
        char v38 = (char *)&v43 + v34;
      }
      else
      {
        __int16 v37 = (char *)((v4 & 0xFFFFFFFFFFFFFFFLL) + 32);
        if ((v5 & 0x1000000000000000) == 0)
        {
          __int16 v37 = (char *)_StringObject.sharedUTF8.getter(v5, v4);
          if (!v37) {
LABEL_72:
          }
            _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "unsafelyUnwrapped of nil optional", 33, 2, "Swift/Optional.swift", 20, 2, 0x163uLL, 0);
        }
        char v38 = &v37[v34];
      }
      int v39 = *((unsigned __int16 *)v38 - 1);
      if (v39 == 2573 || (v39 & 0x80808080) != 0) {
        break;
      }
      Swift::UInt64 v35 = v7._rawBits - 0x10000;
      uint64_t v36 = 256;
LABEL_57:
      --v31;
      v7._Swift::UInt64 rawBits = v36 | v32 | v35 & 0xFFFFFFFFFFFF0000;
      if (v31 <= offsetBy) {
        return v7;
      }
    }
    uint64_t v34 = _StringGuts._opaqueComplexCharacterStride(endingAt:)(v7._rawBits >> 16);
LABEL_55:
    Swift::UInt64 v35 = v7._rawBits - (v34 << 16);
    uint64_t v36 = v34 << 8;
    if (v34 > 63) {
      uint64_t v36 = 0;
    }
    goto LABEL_57;
  }
  if (offsetBy)
  {
    uint64_t v8 = HIBYTE(v4) & 0xF;
    if ((v4 & 0x2000000000000000) != 0) {
      uint64_t v9 = HIBYTE(v4) & 0xF;
    }
    else {
      uint64_t v9 = v5 & 0xFFFFFFFFFFFFLL;
    }
    Swift::UInt64 v10 = 4 * v9;
    uint64_t v11 = v4 & 0xFFFFFFFFFFFFFFLL;
    if (((v4 >> 60) & ((v5 & 0x800000000000000) == 0)) != 0) {
      uint64_t v12 = 11;
    }
    else {
      uint64_t v12 = 7;
    }
    do
    {
      if (v10 <= v7._rawBits >> 14)
      {
        unint64_t v33 = 158;
        goto LABEL_75;
      }
      Swift::UInt64 v13 = (v7._rawBits >> 8) & 0x3F;
      if (!v13)
      {
        Swift::UInt64 v14 = v7._rawBits >> 16;
        if ((v4 & 0x1000000000000000) == 0)
        {
          if ((v4 & 0x2000000000000000) != 0)
          {
            uint64_t v43 = v5;
            uint64_t v44 = v11;
            if (v14 + 1 == v8) {
              goto LABEL_26;
            }
            int v18 = *(unsigned __int16 *)((char *)&v43 + v14);
            if (v18 != 2573 && (v18 & 0x80808080) == 0) {
              goto LABEL_26;
            }
          }
          else
          {
            int v15 = (char *)((v4 & 0xFFFFFFFFFFFFFFFLL) + 32);
            uint64_t v16 = v5 & 0xFFFFFFFFFFFFLL;
            if ((v5 & 0x1000000000000000) == 0)
            {
              uint64_t v42 = v11;
              int v15 = (char *)_StringObject.sharedUTF8.getter(v5, v4);
              uint64_t v11 = v42;
            }
            if (v14 + 1 == v16) {
              goto LABEL_26;
            }
            if (!v15) {
              goto LABEL_72;
            }
            int v17 = *(unsigned __int16 *)&v15[v14];
            if (v17 != 2573 && (v17 & 0x80808080) == 0)
            {
LABEL_26:
              Swift::UInt64 v13 = 1;
              goto LABEL_27;
            }
          }
        }
        uint64_t v30 = v11;
        Swift::UInt64 v13 = _StringGuts._opaqueComplexCharacterStride(startingAt:)(v7._rawBits >> 16);
        uint64_t v11 = v30;
      }
LABEL_27:
      Swift::UInt64 v20 = v7._rawBits + (v13 << 16);
      unint64_t v21 = v20 & 0xFFFFFFFFFFFF0000;
      if (v10 != (v20 & 0xFFFFFFFFFFFF0000) >> 14)
      {
        Swift::UInt64 v23 = v20 >> 16;
        if ((v4 & 0x1000000000000000) != 0) {
          goto LABEL_47;
        }
        if ((v4 & 0x2000000000000000) != 0)
        {
          uint64_t v43 = v5;
          uint64_t v44 = v11;
          if (v23 + 1 != v8)
          {
            int v26 = *(unsigned __int16 *)((char *)&v43 + v23);
LABEL_38:
            if (v26 == 2573 || (v26 & 0x8080) != 0)
            {
LABEL_47:
              Swift::Int v28 = v23;
              uint64_t v29 = v11;
              Swift::Int v22 = _StringGuts._opaqueComplexCharacterStride(startingAt:)(v28);
              uint64_t v11 = v29;
              if (v22 > 63) {
                goto LABEL_45;
              }
              goto LABEL_44;
            }
          }
        }
        else
        {
          unint64_t v24 = (char *)((v4 & 0xFFFFFFFFFFFFFFFLL) + 32);
          uint64_t v25 = v5 & 0xFFFFFFFFFFFFLL;
          if ((v5 & 0x1000000000000000) == 0)
          {
            uint64_t v42 = v11;
            unint64_t v24 = (char *)_StringObject.sharedUTF8.getter(v5, v4);
            uint64_t v11 = v42;
          }
          if (v23 + 1 != v25)
          {
            if (!v24) {
              goto LABEL_72;
            }
            int v26 = *(unsigned __int16 *)&v24[v23];
            goto LABEL_38;
          }
        }
        Swift::Int v22 = 1;
        goto LABEL_44;
      }
      Swift::Int v22 = 0;
LABEL_44:
      v21 |= v22 << 8;
LABEL_45:
      v7._Swift::UInt64 rawBits = v21 | v12;
      --offsetBy;
    }
    while (offsetBy);
  }
  return v7;
}

Swift::String::Index_optional __swiftcall String.index(_:offsetBy:limitedBy:)(Swift::String::Index _, Swift::Int offsetBy, Swift::String::Index limitedBy)
{
  unint64_t v5 = v4;
  uint64_t v6 = v3;
  Swift::UInt64 rawBits = limitedBy._rawBits;
  uint64_t v10 = (v3 >> 59) & 1;
  if ((v4 & 0x1000000000000000) == 0) {
    LOBYTE(v1_assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0, 0xE000000000000000, "Swift/SmallString.swift", 23, 2, 0xD7uLL, 0) = 1;
  }
  uint64_t v11 = 4 << v10;
  if ((limitedBy._rawBits & 0xC) == 4 << v10) {
    Swift::UInt64 rawBits = _StringGuts._slowEnsureMatchingEncoding(_:)(limitedBy)._rawBits;
  }
  Swift::UInt64 v12 = _._rawBits;
  if ((_._rawBits & 0xC) == v11) {
    Swift::UInt64 v12 = _StringGuts._slowEnsureMatchingEncoding(_:)(_)._rawBits;
  }
  v13._Swift::UInt64 rawBits = _StringGuts.validateInclusiveCharacterIndex_5_7(_:)(_)._rawBits;
  Swift::UInt64 v14 = rawBits >> 14;
  Swift::UInt64 v15 = v12 >> 14;
  if (offsetBy < 0)
  {
    Swift::Int v40 = 0;
    uint64_t v41 = v5 & 0xFFFFFFFFFFFFFFLL;
    if (((v5 >> 60) & ((v6 & 0x800000000000000) == 0)) != 0) {
      uint64_t v42 = 11;
    }
    else {
      uint64_t v42 = 7;
    }
    while (1)
    {
      Swift::UInt64 v49 = v13._rawBits >> 14;
      if (v15 >= v14 && v14 >= v49) {
        goto LABEL_86;
      }
      if (!v49)
      {
        unint64_t v43 = 245;
LABEL_90:
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index is out of bounds", 29, 2, "Swift/StringCharacterView.swift", 31, 2, v43, 0);
      }
      int64_t v46 = v13._rawBits >> 16;
      if (v13._rawBits < 0x20000) {
        goto LABEL_63;
      }
      if ((v5 & 0x1000000000000000) != 0) {
        goto LABEL_62;
      }
      if ((v5 & 0x2000000000000000) != 0)
      {
        uint64_t v63 = v6;
        uint64_t v64 = v41;
        int v52 = *(unsigned __int16 *)((char *)&v63 + v46 - 2);
        if (v52 == 2573 || (v52 & 0x80808080) != 0) {
          goto LABEL_62;
        }
      }
      else
      {
        BOOL v50 = (char *)((v5 & 0xFFFFFFFFFFFFFFFLL) + 32);
        if ((v6 & 0x1000000000000000) == 0)
        {
          uint64_t v62 = v41;
          BOOL v50 = (char *)_StringObject.sharedUTF8.getter(v6, v5);
          uint64_t v41 = v62;
          if (!v50) {
LABEL_83:
          }
            _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "unsafelyUnwrapped of nil optional", 33, 2, "Swift/Optional.swift", 20, 2, 0x163uLL, 0);
        }
        int v51 = *(unsigned __int16 *)&v50[v46 - 2];
        if (v51 == 2573 || (v51 & 0x80808080) != 0)
        {
LABEL_62:
          uint64_t v44 = v41;
          Swift::Int v45 = _StringGuts._opaqueComplexCharacterStride(endingAt:)(v13._rawBits >> 16);
          uint64_t v41 = v44;
          int64_t v46 = v45;
LABEL_63:
          Swift::UInt64 v47 = v13._rawBits - (v46 << 16);
          uint64_t v48 = v46 << 8;
          if (v46 > 63) {
            uint64_t v48 = 0;
          }
          goto LABEL_65;
        }
      }
      Swift::UInt64 v47 = v13._rawBits - 0x10000;
      uint64_t v48 = 256;
LABEL_65:
      --v40;
      v13._Swift::UInt64 rawBits = v48 | v42 | v47 & 0xFFFFFFFFFFFF0000;
      if (v40 <= offsetBy)
      {
        if (v15 < v14 || v13._rawBits >> 14 >= v14) {
          goto LABEL_87;
        }
        goto LABEL_86;
      }
    }
  }
  if (offsetBy)
  {
    uint64_t v16 = HIBYTE(v5) & 0xF;
    if ((v5 & 0x2000000000000000) != 0) {
      uint64_t v17 = HIBYTE(v5) & 0xF;
    }
    else {
      uint64_t v17 = v6 & 0xFFFFFFFFFFFFLL;
    }
    unint64_t v18 = 4 * v17;
    uint64_t v19 = v5 & 0xFFFFFFFFFFFFFFLL;
    uint64_t v20 = (v5 & 0xFFFFFFFFFFFFFFFLL) + 32;
    if (((v5 >> 60) & ((v6 & 0x800000000000000) == 0)) != 0) {
      uint64_t v21 = 11;
    }
    else {
      uint64_t v21 = 7;
    }
    while (1)
    {
      Swift::UInt64 v22 = v13._rawBits >> 14;
      if (v14 >= v15 && v22 >= v14) {
        goto LABEL_86;
      }
      if (v22 >= v18)
      {
        unint64_t v43 = 238;
        goto LABEL_90;
      }
      Swift::UInt64 v23 = (v13._rawBits >> 8) & 0x3F;
      if (!v23) {
        break;
      }
LABEL_31:
      Swift::UInt64 v28 = v13._rawBits + (v23 << 16);
      unint64_t v29 = v28 & 0xFFFFFFFFFFFF0000;
      if (v18 == (v28 & 0xFFFFFFFFFFFF0000) >> 14)
      {
        Swift::Int v30 = 0;
      }
      else
      {
        Swift::UInt64 v31 = v28 >> 16;
        if ((v5 & 0x1000000000000000) != 0) {
          goto LABEL_52;
        }
        if ((v5 & 0x2000000000000000) != 0)
        {
          uint64_t v63 = v6;
          uint64_t v64 = v19;
          if (v31 + 1 != v16)
          {
            int v35 = *(unsigned __int16 *)((char *)&v63 + v31);
            if (v35 == 2573 || (v35 & 0x80808080) != 0) {
              goto LABEL_52;
            }
          }
        }
        else
        {
          uint64_t v32 = (char *)v20;
          uint64_t v33 = v6 & 0xFFFFFFFFFFFFLL;
          if ((v6 & 0x1000000000000000) == 0)
          {
            uint64_t v60 = v20;
            uint64_t v62 = v16;
            uint64_t v56 = v19;
            uint64_t v32 = (char *)_StringObject.sharedUTF8.getter(v6, v5);
            uint64_t v19 = v56;
            uint64_t v20 = v60;
            uint64_t v16 = v62;
          }
          if (v31 + 1 != v33)
          {
            if (!v32) {
              goto LABEL_83;
            }
            int v34 = *(unsigned __int16 *)&v32[v31];
            if (v34 == 2573 || (v34 & 0x80808080) != 0)
            {
LABEL_52:
              uint64_t v58 = v20;
              uint64_t v62 = v16;
              Swift::Int v37 = v31;
              uint64_t v38 = v19;
              Swift::Int v30 = _StringGuts._opaqueComplexCharacterStride(startingAt:)(v37);
              uint64_t v20 = v58;
              uint64_t v16 = v62;
              uint64_t v19 = v38;
              if (v30 > 63) {
                goto LABEL_50;
              }
              goto LABEL_49;
            }
          }
        }
        Swift::Int v30 = 1;
      }
LABEL_49:
      v29 |= v30 << 8;
LABEL_50:
      v13._Swift::UInt64 rawBits = v29 | v21;
      if (!--offsetBy) {
        goto LABEL_55;
      }
    }
    Swift::UInt64 v24 = v13._rawBits >> 16;
    if ((v5 & 0x1000000000000000) == 0)
    {
      if ((v5 & 0x2000000000000000) == 0)
      {
        uint64_t v25 = (char *)v20;
        uint64_t v26 = v6 & 0xFFFFFFFFFFFFLL;
        if ((v6 & 0x1000000000000000) == 0)
        {
          uint64_t v61 = v20;
          uint64_t v62 = v16;
          uint64_t v57 = v19;
          uint64_t v25 = (char *)_StringObject.sharedUTF8.getter(v6, v5);
          uint64_t v19 = v57;
          uint64_t v20 = v61;
          uint64_t v16 = v62;
        }
        if (v24 + 1 == v26)
        {
LABEL_30:
          Swift::UInt64 v23 = 1;
          goto LABEL_31;
        }
        if (!v25) {
          goto LABEL_83;
        }
        int v27 = *(unsigned __int16 *)&v25[v24];
        if (v27 == 2573) {
          goto LABEL_54;
        }
        goto LABEL_29;
      }
      uint64_t v63 = v6;
      uint64_t v64 = v19;
      if (v24 + 1 == v16) {
        goto LABEL_30;
      }
      int v27 = *(unsigned __int16 *)((char *)&v63 + v24);
      if (v27 != 2573)
      {
LABEL_29:
        if ((v27 & 0x80808080) == 0) {
          goto LABEL_30;
        }
      }
    }
LABEL_54:
    uint64_t v59 = v20;
    uint64_t v62 = v16;
    uint64_t v39 = v19;
    Swift::UInt64 v23 = _StringGuts._opaqueComplexCharacterStride(startingAt:)(v13._rawBits >> 16);
    uint64_t v20 = v59;
    uint64_t v16 = v62;
    uint64_t v19 = v39;
    goto LABEL_31;
  }
LABEL_55:
  if (v14 >= v15 && v14 < v13._rawBits >> 14)
  {
LABEL_86:
    v13._Swift::UInt64 rawBits = 0;
    Swift::Bool v54 = 1;
  }
  else
  {
LABEL_87:
    Swift::Bool v54 = 0;
  }
  Swift::UInt64 v55 = v13._rawBits;
  result.value._Swift::UInt64 rawBits = v55;
  result.is_nil = v54;
  return result;
}

Swift::Int __swiftcall _StringGuts._opaqueCharacterStride(startingAt:)(Swift::Int startingAt)
{
  if ((v2 & 0x1000000000000000) != 0) {
    goto LABEL_16;
  }
  if ((v2 & 0x2000000000000000) != 0)
  {
    v9[0] = v1;
    v9[1] = v2 & 0xFFFFFFFFFFFFFFLL;
    if (startingAt + 1 == (HIBYTE(v2) & 0xF)) {
      return 1;
    }
    int v6 = *(unsigned __int16 *)((char *)v9 + startingAt);
  }
  else
  {
    if ((v1 & 0x1000000000000000) != 0)
    {
      unint64_t v4 = (char *)((v2 & 0xFFFFFFFFFFFFFFFLL) + 32);
      uint64_t v5 = v1 & 0xFFFFFFFFFFFFLL;
    }
    else
    {
      unint64_t v4 = (char *)_StringObject.sharedUTF8.getter(v1, v2);
    }
    if (startingAt + 1 == v5) {
      return 1;
    }
    if (!v4) {
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "unsafelyUnwrapped of nil optional", 33, 2, "Swift/Optional.swift", 20, 2, 0x163uLL, 0);
    }
    int v6 = *(unsigned __int16 *)&v4[startingAt];
  }
  if (v6 == 2573 || (v6 & 0x8080) != 0)
  {
LABEL_16:
    JUMPOUT(0x1813F136CLL);
  }
  return 1;
}

Swift::Int __swiftcall _StringGuts._opaqueCharacterStride(endingAt:)(Swift::Int endingAt)
{
  if (endingAt >= 2)
  {
    if ((v2 & 0x1000000000000000) != 0) {
      goto LABEL_14;
    }
    if ((v2 & 0x2000000000000000) != 0)
    {
      v7[0] = v1;
      v7[1] = v2 & 0xFFFFFFFFFFFFFFLL;
      unint64_t v3 = v7;
    }
    else if ((v1 & 0x1000000000000000) != 0)
    {
      unint64_t v3 = (void *)((v2 & 0xFFFFFFFFFFFFFFFLL) + 32);
    }
    else
    {
      Swift::Int v6 = endingAt;
      unint64_t v3 = _StringObject.sharedUTF8.getter(v1, v2);
      endingAt = v6;
      if (!v3) {
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "unsafelyUnwrapped of nil optional", 33, 2, "Swift/Optional.swift", 20, 2, 0x163uLL, 0);
      }
    }
    int v4 = *(unsigned __int16 *)((char *)v3 + endingAt - 2);
    if (v4 == 2573 || (v4 & 0x80808080) != 0)
    {
LABEL_14:
      JUMPOUT(0x1813F197CLL);
    }
    return 1;
  }
  return endingAt;
}

Swift::String::Index __swiftcall _StringGuts.validateScalarIndex(_:)(Swift::String::Index result)
{
  uint64_t v3 = (v1 >> 59) & 1;
  if ((v2 & 0x1000000000000000) == 0) {
    LOBYTE(v3) = 1;
  }
  if ((result._rawBits & 1) == 0 || (result._rawBits & 0xC) == 4 << v3)
  {
    result._Swift::UInt64 rawBits = _StringGuts.validateSubscalarIndex(_:)(result)._rawBits;
    if ((result._rawBits & 1) == 0) {
      return (Swift::String::Index)(result._rawBits & 0xC | _StringGuts.scalarAlignSlow(_:)(result)._rawBits & 0xFFFFFFFFFFFFFFF3 | 1);
    }
  }
  else
  {
    Swift::UInt64 v4 = HIBYTE(v2) & 0xF;
    if ((v2 & 0x2000000000000000) == 0) {
      Swift::UInt64 v4 = v1 & 0xFFFFFFFFFFFFLL;
    }
    if (v4 <= result._rawBits >> 16) {
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index is out of bounds", 29, 2, "Swift/StringIndexValidation.swift", 33, 2, 0x79uLL, 0);
    }
  }
  return result;
}

Swift::String __swiftcall _StringGuts.errorCorrectedCharacter(startingAt:endingAt:)(Swift::Int startingAt, Swift::Int endingAt)
{
  if ((v3 & 0x1000000000000000) != 0)
  {
    Swift::String v13 = _StringGuts.foreignErrorCorrectedGrapheme(startingAt:endingAt:)(startingAt, endingAt);
    object = v13._object;
    uint64_t countAndFlagsBits = v13._countAndFlagsBits;
  }
  else
  {
    if (endingAt < startingAt) {
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
    }
    if ((v3 & 0x2000000000000000) == 0)
    {
      if ((v2 & 0x1000000000000000) != 0)
      {
        id v6 = (id)((v3 & 0xFFFFFFFFFFFFFFFLL) + 32);
        Swift::Int v7 = v2 & 0xFFFFFFFFFFFFLL;
        if ((startingAt & 0x8000000000000000) == 0) {
          goto LABEL_6;
        }
      }
      else
      {
        id v6 = _StringObject.sharedUTF8.getter(v2, v3);
        Swift::Int v7 = v15;
        if ((startingAt & 0x8000000000000000) == 0)
        {
LABEL_6:
          if (v7 >= endingAt)
          {
            uint64_t v8 = (uint8x16_t *)specialized UnsafeBufferPointer.init(rebasing:)(startingAt, endingAt, (uint64_t)v6, v7);
            uint64_t countAndFlagsBits = specialized static String._uncheckedFromUTF8(_:)(v8, v9);
            goto LABEL_23;
          }
          goto LABEL_18;
        }
      }
LABEL_20:
      unint64_t v14 = 1860;
LABEL_21:
      _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, v14, 0);
    }
    v17[0] = v2;
    v17[1] = v3 & 0xFFFFFFFFFFFFFFLL;
    if (startingAt < 0) {
      goto LABEL_20;
    }
    if ((uint64_t)(HIBYTE(v3) & 0xF) < endingAt)
    {
LABEL_18:
      unint64_t v14 = 1861;
      goto LABEL_21;
    }
    uint64_t v12 = endingAt - startingAt;
    if (endingAt - startingAt < 0) {
      _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeBufferPointer with negative count", 39, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x53FuLL, 0);
    }
    uint64_t countAndFlagsBits = specialized static String._uncheckedFromUTF8(_:)((uint8x16_t *)((char *)v17 + startingAt), v12);
  }
LABEL_23:
  result._object = object;
  result._uint64_t countAndFlagsBits = countAndFlagsBits;
  return result;
}

uint64_t String.Index.characterStride.getter(unint64_t a1)
{
  return (a1 >> 8) & 0x3F;
}

Swift::String::Index protocol witness for BidirectionalCollection.index(before:) in conformance String@<X0>(Swift::String::Index *a1@<X0>, Swift::String::Index *a2@<X8>)
{
  result._Swift::UInt64 rawBits = String.index(before:)((Swift::String::Index)a1->_rawBits)._rawBits;
  a2->_Swift::UInt64 rawBits = result._rawBits;
  return result;
}

Swift::String::Index protocol witness for BidirectionalCollection.formIndex(before:) in conformance String(Swift::String::Index *a1)
{
  result._Swift::UInt64 rawBits = String.index(before:)((Swift::String::Index)a1->_rawBits)._rawBits;
  a1->_Swift::UInt64 rawBits = result._rawBits;
  return result;
}

Swift::String::Index protocol witness for BidirectionalCollection.index(_:offsetBy:) in conformance String@<X0>(Swift::String::Index *a1@<X0>, Swift::Int a2@<X1>, Swift::String::Index *a3@<X8>)
{
  result._Swift::UInt64 rawBits = String.index(_:offsetBy:)((Swift::String::Index)a1->_rawBits, a2)._rawBits;
  a3->_Swift::UInt64 rawBits = result._rawBits;
  return result;
}

uint64_t protocol witness for BidirectionalCollection.index(_:offsetBy:limitedBy:) in conformance String@<X0>(void *a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  return protocol witness for BidirectionalCollection.index(_:offsetBy:limitedBy:) in conformance String(a1, a2, a3, (uint64_t (*)(void, uint64_t, void, void, void))String.index(_:offsetBy:limitedBy:), a4);
}

Swift::Int protocol witness for BidirectionalCollection.distance(from:to:) in conformance String(Swift::String::Index *a1, Swift::String::Index *a2)
{
  return String.distance(from:to:)((Swift::String::Index)a1->_rawBits, (Swift::String::Index)a2->_rawBits);
}

void protocol witness for Collection.startIndex.getter in conformance String(void *a1@<X8>)
{
  *a1 = 15;
}

void (*protocol witness for Collection.subscript.read in conformance String(uint64_t *a1, Swift::UInt64 *a2))(uint64_t a1)
{
  v4._Swift::UInt64 rawBits = *a2;
  uint64_t v5 = String.subscript.getter(v4, *(void *)v2, *(void *)(v2 + 8));
  a1[1] = v6;
  a1[2] = v6;
  *a1 = v5;
  return protocol witness for Collection.subscript.read in conformance String;
}

void protocol witness for Collection.subscript.read in conformance String(uint64_t a1)
{
}

unint64_t protocol witness for Collection.subscript.getter in conformance String@<X0>(Swift::UInt64 *a1@<X0>, uint64_t *a2@<X8>)
{
  v4._Swift::UInt64 rawBits = a1[1];
  unint64_t v6 = *v2;
  unint64_t v5 = v2[1];
  v7._Swift::UInt64 rawBits = *a1;
  Swift::UInt64 v8 = _StringGuts.validateScalarRange(_:)(v7, v4, v6, v5);
  uint64_t v10 = v8 | 3;
  if (v8 >= 0x10000) {
    uint64_t v10 = v8;
  }
  *a2 = v10;
  a2[1] = v9;
  a2[2] = v6;
  a2[3] = v5;

  return swift_bridgeObjectRetain(v5);
}

BOOL protocol witness for Collection.isEmpty.getter in conformance String()
{
  unint64_t v1 = v0[1];
  uint64_t v2 = *v0 & 0xFFFFFFFFFFFFLL;
  if ((v1 & 0x2000000000000000) != 0) {
    uint64_t v2 = HIBYTE(v1) & 0xF;
  }
  return v2 == 0;
}

Swift::Int protocol witness for Collection.count.getter in conformance String()
{
  unint64_t v1 = v0[1];
  uint64_t v2 = HIBYTE(v1) & 0xF;
  if ((v1 & 0x2000000000000000) == 0) {
    uint64_t v2 = *v0;
  }
  uint64_t v3 = 7;
  if (((v1 >> 60) & ((*v0 & 0x800000000000000) == 0)) != 0) {
    uint64_t v3 = 11;
  }
  return String.distance(from:to:)((Swift::String::Index)15, (Swift::String::Index)(v3 | (v2 << 16)));
}

Swift::String::Index protocol witness for Collection.index(after:) in conformance String@<X0>(Swift::String::Index *a1@<X0>, Swift::String::Index *a2@<X8>)
{
  v3._Swift::UInt64 rawBits = _StringGuts.validateCharacterIndex(_:)((Swift::String::Index)a1->_rawBits)._rawBits;
  result._Swift::UInt64 rawBits = String._uncheckedIndex(after:)(v3)._rawBits;
  a2->_Swift::UInt64 rawBits = result._rawBits;
  return result;
}

Swift::String::Index protocol witness for Collection.formIndex(after:) in conformance String(Swift::String::Index *a1)
{
  v2._Swift::UInt64 rawBits = _StringGuts.validateCharacterIndex(_:)((Swift::String::Index)a1->_rawBits)._rawBits;
  result._Swift::UInt64 rawBits = String._uncheckedIndex(after:)(v2)._rawBits;
  a1->_Swift::UInt64 rawBits = result._rawBits;
  return result;
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance String(uint64_t a1, uint64_t a2)
{
  return protocol witness for Sequence._copyToContiguousArray() in conformance String(a1, a2, (uint64_t (*)(void, uint64_t))specialized _copyCollectionToContiguousArray<A>(_:));
}

uint64_t protocol witness for Sequence._copyContents(initializing:) in conformance String(void *a1, Swift::String_optional *a2, uint64_t a3)
{
  return specialized Sequence._copySequenceContents(initializing:)(a1, a2, a3, *(void *)v3, *(void *)(v3 + 8));
}

uint64_t (*String.Iterator._guts.modify())()
{
  return EnumeratedSequence._base.modify;
}

uint64_t String.Iterator._position.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a3;
}

uint64_t (*String.Iterator._position.modify())()
{
  return EnumeratedSequence._base.modify;
}

uint64_t String.Iterator._end.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a4;
}

uint64_t (*String.Iterator._end.modify())()
{
  return EnumeratedSequence._base.modify;
}

Swift::String_optional __swiftcall String.Iterator.next()()
{
  Swift::Int v1 = v0[2];
  if (v1 < v0[3])
  {
    uint64_t v2 = *v0;
    unint64_t v3 = v0[1];
    if ((v3 & 0x1000000000000000) != 0) {
      goto LABEL_30;
    }
    if ((v3 & 0x2000000000000000) != 0)
    {
      uint64_t v21 = *v0;
      uint64_t v22 = v3 & 0xFFFFFFFFFFFFFFLL;
      Swift::Int v6 = v1 + 1;
      if (v1 + 1 == (HIBYTE(v3) & 0xF)) {
        goto LABEL_16;
      }
      int v7 = *(unsigned __int16 *)((char *)&v21 + v1);
    }
    else
    {
      if ((v2 & 0x1000000000000000) != 0)
      {
        Swift::String::Index v4 = (char *)((v3 & 0xFFFFFFFFFFFFFFFLL) + 32);
        uint64_t v5 = v2 & 0xFFFFFFFFFFFFLL;
      }
      else
      {
        Swift::String::Index v4 = (char *)_StringObject.sharedUTF8.getter(*v0, v0[1]);
      }
      Swift::Int v6 = v1 + 1;
      if (v1 + 1 == v5) {
        goto LABEL_16;
      }
      if (!v4) {
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "unsafelyUnwrapped of nil optional", 33, 2, "Swift/Optional.swift", 20, 2, 0x163uLL, 0);
      }
      int v7 = *(unsigned __int16 *)&v4[v1];
    }
    if (v7 == 2573 || (v7 & 0x8080) != 0)
    {
LABEL_30:
      Swift::Int v9 = _StringGuts._opaqueComplexCharacterStride(startingAt:)(v1);
      Swift::Int v6 = v9 + v1;
      uint64_t v10 = *v0;
      unint64_t v11 = v0[1];
      if ((v11 & 0x1000000000000000) != 0) {
        goto LABEL_31;
      }
      goto LABEL_17;
    }
LABEL_16:
    Swift::Int v9 = 1;
    uint64_t v10 = *v0;
    unint64_t v11 = v0[1];
    if ((v11 & 0x1000000000000000) != 0)
    {
LABEL_31:
      Swift::String v17 = _StringGuts.foreignErrorCorrectedGrapheme(startingAt:endingAt:)(v1, v6);
      object = v17._object;
      uint64_t countAndFlagsBits = v17._countAndFlagsBits;
      goto LABEL_28;
    }
LABEL_17:
    if (v6 < v1) {
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
    }
    if ((v11 & 0x2000000000000000) != 0)
    {
      uint64_t v21 = v10;
      uint64_t v22 = v11 & 0xFFFFFFFFFFFFFFLL;
      if ((v1 & 0x8000000000000000) == 0)
      {
        if ((uint64_t)(HIBYTE(v11) & 0xF) >= v6)
        {
          if (v9 < 0) {
            _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeBufferPointer with negative count", 39, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x53FuLL, 0);
          }
          unint64_t v14 = (uint8x16_t *)((char *)&v21 + v1);
          goto LABEL_27;
        }
        goto LABEL_34;
      }
    }
    else if ((v10 & 0x1000000000000000) != 0)
    {
      id v12 = (id)((v11 & 0xFFFFFFFFFFFFFFFLL) + 32);
      uint64_t v13 = v10 & 0xFFFFFFFFFFFFLL;
      if ((v1 & 0x8000000000000000) == 0) {
        goto LABEL_21;
      }
    }
    else
    {
      id v12 = _StringObject.sharedUTF8.getter(v10, v11);
      uint64_t v13 = v19;
      if ((v1 & 0x8000000000000000) == 0)
      {
LABEL_21:
        if (v13 >= v6)
        {
          unint64_t v14 = (uint8x16_t *)specialized UnsafeBufferPointer.init(rebasing:)(v1, v6, (uint64_t)v12, v13);
LABEL_27:
          uint64_t countAndFlagsBits = specialized static String._uncheckedFromUTF8(_:)(v14, v9);
LABEL_28:
          v0[2] = v6;
          goto LABEL_41;
        }
LABEL_34:
        unint64_t v18 = 1861;
        goto LABEL_38;
      }
    }
    unint64_t v18 = 1860;
LABEL_38:
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, v18, 0);
  }
  uint64_t countAndFlagsBits = 0;
  object = 0;
LABEL_41:
  result.value._object = object;
  result.value._uint64_t countAndFlagsBits = countAndFlagsBits;
  return result;
}

uint64_t protocol witness for IteratorProtocol.next() in conformance String.Iterator@<X0>(Swift::String_optional *a1@<X8>)
{
  Swift::String_optional v3 = String.Iterator.next()();
  uint64_t result = v3.value._countAndFlagsBits;
  *a1 = v3;
  return result;
}

uint64_t static StringProtocol.== infix<A>(_:_:)(uint64_t *a1, uint64_t a2, ValueMetadata *a3, ValueMetadata *a4)
{
  uint64_t v7 = MEMORY[0x1F4188790](a1);
  uint64_t v8 = MEMORY[0x1F4188790](v7);
  uint64_t v9 = MEMORY[0x1F4188790](v8);
  unint64_t v11 = (unint64_t *)((char *)&v75 - v10);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v9);
  uint64_t v16 = (Swift::UInt64 *)((char *)&v75 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v17 = MEMORY[0x1F4188790](v14);
  uint64_t v19 = (unint64_t *)((char *)&v75 - v18);
  MEMORY[0x1F4188790](v17);
  int v27 = (unint64_t *)((char *)&v75 - v23);
  if (v28 == &type metadata for String)
  {
    if (a4 == &type metadata for String)
    {
      uint64_t v65 = *a1;
      unint64_t v66 = a1[1];
      uint64_t v67 = *v22;
      unint64_t v68 = v22[1];
      return specialized static StringProtocol.== infix<A>(_:_:)(v65, v66, v67, v68);
    }
    if (a4 == &type metadata for Substring)
    {
      uint64_t v32 = *a1;
      unint64_t v33 = a1[1];
      unint64_t v34 = *v22;
      unint64_t v35 = v22[1];
      uint64_t v36 = v22[2];
      unint64_t v37 = v22[3];
      return specialized static StringProtocol.== infix<A>(_:_:)(v32, v33, v34, v35, v36, v37);
    }
  }
  if (a3 != &type metadata for Substring) {
    goto LABEL_3;
  }
  if (a4 != &type metadata for String)
  {
    if (a4 == &type metadata for Substring)
    {
      uint64_t v39 = a1[2];
      unint64_t v40 = a1[3];
      unint64_t v41 = v22[1];
      uint64_t v42 = (unint64_t)*a1 >> 16;
      uint64_t v43 = (unint64_t)a1[1] >> 16;
      uint64_t v44 = v22[2];
      unint64_t v45 = v22[3];
      uint64_t v46 = (unint64_t)*v22 >> 16;
      uint64_t v47 = v41 >> 16;
      if (v39 != v44 || v40 != v45 || v42 != v46 || v43 != v47) {
        return _stringCompareInternal(_:_:_:_:expecting:)(v39, v40, v42, v43, v44, v45, v46, v47, 0) & 1;
      }
      char v48 = 1;
      return v48 & 1;
    }
LABEL_3:
    uint64_t v76 = v26;
    Swift::String::Index v77 = v22;
    uint64_t v29 = v20;
    size_t v75 = v25;
    uint64_t v79 = v24;
    uint64_t v80 = v21;
    Swift::Int v30 = *(void (**)(char *, uint64_t *, ValueMetadata *))(v13 + 16);
    v30((char *)&v75 - v23, a1, a3);
    if (swift_dynamicCast((char *)&v81, v27, (Class *)a3, (const char *)&type metadata for String, 6uLL))
    {
      unint64_t v31 = v82;
      Swift::UInt64 v78 = v81;
    }
    else
    {
      v30((char *)v19, a1, a3);
      if (swift_dynamicCast((char *)&v81, v19, (Class *)a3, (const char *)&type metadata for Substring, 6uLL))
      {
        unint64_t v31 = v84;
        Swift::UInt64 v78 = v83;
      }
      else
      {
        v30((char *)v16, a1, a3);
        Swift::UInt64 v78 = String.init<A>(_:)(v16, (Class *)a3, *(void *)(v29 + 40));
        unint64_t v31 = v49;
      }
    }
    uint64_t v50 = *(void *)(*(void *)(v29 + 8) + 8);
    (*(void (**)(Swift::UInt64 *__return_ptr, ValueMetadata *, uint64_t))(v50 + 64))(&v81, a3, v50);
    Swift::UInt64 v51 = v81;
    (*(void (**)(Swift::UInt64 *__return_ptr, ValueMetadata *, uint64_t))(v50 + 72))(&v81, a3, v50);
    Swift::UInt64 v52 = v81;
    uint16x8_t v53 = *(void (**)(unint64_t *, uint64_t *, ValueMetadata *))(v79 + 16);
    Swift::Bool v54 = v77;
    v53(v11, v77, a4);
    if (swift_dynamicCast((char *)&v81, v11, (Class *)a4, (const char *)&type metadata for String, 6uLL))
    {
      Swift::UInt64 v56 = v81;
      unint64_t v55 = v82;
    }
    else
    {
      uint64_t v57 = v76;
      v53(v76, v54, a4);
      if (swift_dynamicCast((char *)&v81, v57, (Class *)a4, (const char *)&type metadata for Substring, 6uLL))
      {
        Swift::UInt64 v56 = v83;
        unint64_t v55 = v84;
      }
      else
      {
        uint64_t v58 = v75;
        v53(v75, v54, a4);
        Swift::UInt64 v56 = String.init<A>(_:)(v58, (Class *)a4, *(void *)(v80 + 40));
        unint64_t v55 = v59;
      }
    }
    uint64_t v60 = v51 >> 16;
    uint64_t v61 = *(void *)(*(void *)(v80 + 8) + 8);
    (*(void (**)(Swift::UInt64 *__return_ptr, ValueMetadata *, uint64_t))(v61 + 64))(&v81, a4, v61);
    Swift::UInt64 v62 = v81;
    (*(void (**)(Swift::UInt64 *__return_ptr, ValueMetadata *, uint64_t))(v61 + 72))(&v81, a4, v61);
    uint64_t v63 = v62 >> 16;
    uint64_t v64 = v81 >> 16;
    if (v78 == v56 && v31 == v55 && v60 == v63 && v52 >> 16 == v64)
    {
      swift_bridgeObjectRelease_n(v31, 2);
      char v48 = 1;
    }
    else
    {
      char v48 = _stringCompareInternal(_:_:_:_:expecting:)(v78, v31, v60, v52 >> 16, v56, v55, v63, v64, 0);
      swift_bridgeObjectRelease(v31);
      swift_bridgeObjectRelease(v55);
    }
    return v48 & 1;
  }
  unint64_t v69 = *a1;
  unint64_t v70 = a1[1];
  uint64_t v71 = a1[2];
  unint64_t v72 = a1[3];
  uint64_t v73 = *v22;
  unint64_t v74 = v22[1];

  return specialized static StringProtocol.== infix<A>(_:_:)(v69, v70, v71, v72, v73, v74);
}

Swift::UInt64 StringProtocol._wholeGuts.getter(ValueMetadata *a1, uint64_t a2)
{
  Description = a1[-1].Description;
  uint64_t v6 = MEMORY[0x1F4188790](a1);
  uint64_t v8 = (void *)((char *)v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v9 = MEMORY[0x1F4188790](v6);
  unint64_t v11 = (void *)((char *)v19 - v10);
  uint64_t v12 = (ValueMetadata *)MEMORY[0x1F4188790](v9);
  uint64_t v14 = (void *)((char *)v19 - v13);
  if (v12 == &type metadata for String)
  {
    uint64_t v16 = *v2;
    unint64_t v17 = v2[1];
LABEL_7:
    swift_bridgeObjectRetain(v17);
    return v16;
  }
  if (a1 == &type metadata for Substring)
  {
    uint64_t v16 = v2[2];
    unint64_t v17 = v2[3];
    goto LABEL_7;
  }
  uint64_t v15 = (void (*)(char *, uint64_t *, ValueMetadata *))Description[2];
  v15((char *)v19 - v13, v2, a1);
  if (swift_dynamicCast((char *)v19, v14, (Class *)a1, (const char *)&type metadata for String, 6uLL)) {
    return v19[0];
  }
  v15((char *)v11, v2, a1);
  if (swift_dynamicCast((char *)v19, v11, (Class *)a1, (const char *)&type metadata for Substring, 6uLL)) {
    return v19[2];
  }
  v15((char *)v8, v2, a1);
  return String.init<A>(_:)(v8, (Class *)a1, *(void *)(a2 + 40));
}

unint64_t StringProtocol._offsetRange.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(*(void *)(a2 + 8) + 8);
  (*(void (**)(unint64_t *__return_ptr, uint64_t, uint64_t))(v3 + 64))(&v6, a1, v3);
  unint64_t v4 = v6;
  (*(void (**)(unint64_t *__return_ptr, uint64_t, uint64_t))(v3 + 72))(&v6, a1, v3);
  return v4 >> 16;
}

uint64_t _stringCompare(_:_:_:_:expecting:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  if (a1 == a5 && a2 == a6 && a3 == a7 && a4 == a8) {
    return (a9 & 1) == 0;
  }
  else {
    return _stringCompareInternal(_:_:_:_:expecting:)(a1, a2, a3, a4, a5, a6, a7, a8, a9 & 1);
  }
}

BOOL static StringProtocol.!= infix<A>(_:_:)(uint64_t *a1, uint64_t a2, ValueMetadata *a3, ValueMetadata *a4)
{
  return (static StringProtocol.== infix<A>(_:_:)(a1, a2, a3, a4) & 1) == 0;
}

uint64_t static StringProtocol.< infix<A>(_:_:)(uint64_t *a1, uint64_t *a2, Class *a3, ValueMetadata *a4)
{
  Description = a4[-1].Description;
  uint64_t v9 = MEMORY[0x1F4188790](a1);
  uint64_t v10 = MEMORY[0x1F4188790](v9);
  uint64_t v11 = MEMORY[0x1F4188790](v10);
  uint64_t v13 = (unint64_t *)((char *)&v82 - v12);
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = MEMORY[0x1F4188790](v11);
  uint64_t v18 = (Swift::UInt64 *)((char *)&v82 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v19 = MEMORY[0x1F4188790](v16);
  uint64_t v21 = (unint64_t *)((char *)&v82 - v20);
  MEMORY[0x1F4188790](v19);
  int v27 = (unint64_t *)((char *)&v82 - v24);
  if (v28 == &type metadata for String)
  {
    if (a4 == &type metadata for String)
    {
      uint64_t v34 = *a1;
      unint64_t v35 = a1[1];
      uint64_t v36 = *a2;
      unint64_t v37 = a2[1];
      return specialized static StringProtocol.< infix<A>(_:_:)(v34, v35, v36, v37);
    }
    if (a4 == &type metadata for Substring)
    {
      uint64_t v64 = *a1;
      unint64_t v65 = a1[1];
      unint64_t v66 = *a2;
      unint64_t v67 = a2[1];
      uint64_t v68 = a2[2];
      unint64_t v69 = a2[3];
      return specialized static StringProtocol.< infix<A>(_:_:)(v64, v65, v66, v67, v68, v69);
    }
    if (&full type metadata for String != &full type metadata for Substring) {
      goto LABEL_18;
    }
  }
  else if (a3 != (Class *)&type metadata for Substring)
  {
    Swift::UInt64 v83 = v26;
    uint64_t v84 = v22;
    unint64_t v82 = v25;
    Swift::String::Index v85 = Description;
    uint64_t v86 = v23;
    uint64_t v29 = *(void (**)(char *, uint64_t *, Class *))(v15 + 16);
    v29((char *)&v82 - v24, a1, a3);
    if (swift_dynamicCast((char *)&v88, v27, a3, (const char *)&type metadata for String, 6uLL))
    {
      uint64_t v30 = v88;
      unint64_t v31 = v89;
LABEL_14:
      uint64_t v87 = v30;
      uint64_t v33 = v84;
      Description = v85;
      goto LABEL_24;
    }
    v29((char *)v21, a1, a3);
    if (swift_dynamicCast((char *)&v88, v21, a3, (const char *)&type metadata for Substring, 6uLL))
    {
      uint64_t v30 = v90;
      unint64_t v31 = v91;
      goto LABEL_14;
    }
    v29((char *)v18, a1, a3);
    uint64_t v46 = v84;
    Swift::UInt64 v47 = String.init<A>(_:)(v18, a3, *(void *)(v84 + 40));
    uint64_t v33 = v46;
    uint64_t v87 = v47;
    unint64_t v31 = v48;
    Description = v85;
LABEL_24:
    uint64_t v49 = *(void *)(*(void *)(v33 + 8) + 8);
    (*(void (**)(unint64_t *__return_ptr, Class *, uint64_t))(v49 + 64))(&v88, a3, v49);
    unint64_t v50 = v88;
    (*(void (**)(unint64_t *__return_ptr, Class *, uint64_t))(v49 + 72))(&v88, a3, v49);
    unint64_t v51 = v88;
    if (a4 == &type metadata for String)
    {
      uint64_t v54 = *a2;
      unint64_t v53 = a2[1];
    }
    else
    {
      if (a4 != &type metadata for Substring)
      {
        Swift::UInt64 v52 = (void (*)(unint64_t *, uint64_t *, ValueMetadata *))Description[2];
        v52(v13, a2, a4);
        if (swift_dynamicCast((char *)&v88, v13, (Class *)a4, (const char *)&type metadata for String, 6uLL))
        {
          uint64_t v54 = v88;
          unint64_t v53 = v89;
        }
        else
        {
          uint64_t v63 = v83;
          v52(v83, a2, a4);
          if (!swift_dynamicCast((char *)&v88, v63, (Class *)a4, (const char *)&type metadata for Substring, 6uLL))
          {
            Swift::UInt64 v78 = v82;
            v52(v82, a2, a4);
            uint64_t v79 = v86;
            Swift::UInt64 v80 = String.init<A>(_:)(v78, (Class *)a4, *(void *)(v86 + 40));
            uint64_t v55 = v79;
            uint64_t v54 = v80;
            unint64_t v53 = v81;
            goto LABEL_32;
          }
          uint64_t v54 = v90;
          unint64_t v53 = v91;
        }
LABEL_31:
        uint64_t v55 = v86;
LABEL_32:
        uint64_t v56 = v50 >> 16;
        uint64_t v57 = v51 >> 16;
        uint64_t v58 = *(void *)(*(void *)(v55 + 8) + 8);
        (*(void (**)(unint64_t *__return_ptr, ValueMetadata *, uint64_t))(v58 + 64))(&v88, a4, v58);
        unint64_t v59 = v88;
        (*(void (**)(unint64_t *__return_ptr, ValueMetadata *, uint64_t))(v58 + 72))(&v88, a4, v58);
        uint64_t v60 = v59 >> 16;
        uint64_t v61 = v88 >> 16;
        if (v87 == v54 && v31 == v53 && v56 == v60 && v57 == v61)
        {
          swift_bridgeObjectRelease_n(v31, 2);
          char v62 = 0;
        }
        else
        {
          char v62 = _stringCompareInternal(_:_:_:_:expecting:)(v87, v31, v56, v57, v54, v53, v60, v61, 1);
          swift_bridgeObjectRelease(v31);
          swift_bridgeObjectRelease(v53);
        }
        return v62 & 1;
      }
      uint64_t v54 = a2[2];
      unint64_t v53 = a2[3];
    }
    swift_bridgeObjectRetain(v53);
    goto LABEL_31;
  }
  if (a4 != &type metadata for String)
  {
    if (a4 == &type metadata for Substring)
    {
      uint64_t v70 = a1[2];
      unint64_t v71 = a1[3];
      uint64_t v72 = (unint64_t)*a1 >> 16;
      uint64_t v73 = (unint64_t)a1[1] >> 16;
      uint64_t v74 = a2[2];
      unint64_t v75 = a2[3];
      uint64_t v76 = (unint64_t)*a2 >> 16;
      uint64_t v77 = (unint64_t)a2[1] >> 16;
      if (v70 != v74 || v71 != v75 || v72 != v76 || v73 != v77) {
        return _stringCompareInternal(_:_:_:_:expecting:)(v70, v71, v72, v73, v74, v75, v76, v77, 1) & 1;
      }
      char v62 = 0;
      return v62 & 1;
    }
    if (a3 != (Class *)&type metadata for String)
    {
      unint64_t v82 = v25;
      Swift::UInt64 v83 = v26;
      uint64_t v32 = a1[2];
      unint64_t v31 = a1[3];
LABEL_19:
      uint64_t v86 = v23;
      uint64_t v87 = v32;
      uint64_t v39 = v22;
      swift_bridgeObjectRetain(v31);
      uint64_t v33 = v39;
      goto LABEL_24;
    }
LABEL_18:
    unint64_t v82 = v25;
    Swift::UInt64 v83 = v26;
    uint64_t v32 = *a1;
    unint64_t v31 = a1[1];
    goto LABEL_19;
  }
  unint64_t v40 = *a1;
  unint64_t v41 = a1[1];
  uint64_t v42 = a1[2];
  unint64_t v43 = a1[3];
  uint64_t v44 = *a2;
  unint64_t v45 = a2[1];

  return specialized static StringProtocol.< infix<A>(_:_:)(v40, v41, v42, v43, v44, v45);
}

uint64_t static StringProtocol.> infix<A>(_:_:)(uint64_t *a1, uint64_t *a2, ValueMetadata *a3, Class *a4)
{
  return static StringProtocol.< infix<A>(_:_:)(a2, a1, a4, a3) & 1;
}

BOOL static StringProtocol.<= infix<A>(_:_:)(uint64_t *a1, uint64_t *a2, ValueMetadata *a3, Class *a4)
{
  return (static StringProtocol.< infix<A>(_:_:)(a2, a1, a4, a3) & 1) == 0;
}

BOOL static StringProtocol.>= infix<A>(_:_:)(uint64_t *a1, uint64_t *a2, Class *a3, ValueMetadata *a4)
{
  return (static StringProtocol.< infix<A>(_:_:)(a1, a2, a3, a4) & 1) == 0;
}

uint64_t _stringCompare(_:_:expecting:)(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, char a5)
{
  int v5 = a5 & 1;
  if (a1 == a3 && a2 == a4) {
    return v5 == 0;
  }
  if ((~a2 & 0x6000000000000000) != 0 || (a4 & 0x2000000000000000) == 0 || (a4 & 0x4000000000000000) == 0) {
    return _stringCompareInternal(_:_:expecting:)(a1, a2, a3, a4, v5);
  }
  BOOL v8 = bswap64(a1) < bswap64(a3) && v5 != 0;
  BOOL v9 = a2 == a4;
  BOOL v10 = bswap64(a2) < bswap64(a4);
  if (v5) {
    BOOL v9 = v10;
  }
  if (a1 == a3) {
    return v9;
  }
  else {
    return v8;
  }
}

uint64_t protocol witness for static Comparable.< infix(_:_:) in conformance Character(unint64_t *a1, unint64_t *a2)
{
  unint64_t v4 = *a1;
  unint64_t v5 = a1[1];
  unint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  if (v4 == *a2 && v5 == v7) {
    return 0;
  }
  if ((~v5 & 0x6000000000000000) != 0 || (v7 & 0x2000000000000000) == 0 || (v7 & 0x4000000000000000) == 0) {
    return _stringCompareInternal(_:_:expecting:)(v4, v5, v6, v7, 1);
  }
  BOOL v12 = bswap64(v4) < bswap64(v6);
  BOOL v13 = bswap64(v5) < bswap64(v7);
  if (v4 == v6) {
    return v13;
  }
  else {
    return v12;
  }
}

BOOL protocol witness for static Comparable.<= infix(_:_:) in conformance Character(unint64_t *a1, unint64_t *a2)
{
  unint64_t v2 = *a1;
  unint64_t v3 = a1[1];
  unint64_t v4 = *a2;
  unint64_t v5 = a2[1];
  if (v4 == v2 && v5 == v3)
  {
    char v9 = 0;
  }
  else if ((~v5 & 0x6000000000000000) != 0 || (v3 & 0x2000000000000000) == 0 || (v3 & 0x4000000000000000) == 0)
  {
    char v9 = _stringCompareInternal(_:_:expecting:)(v4, v5, v2, v3, 1);
  }
  else
  {
    BOOL v10 = bswap64(v4) < bswap64(v2);
    BOOL v11 = bswap64(v5) < bswap64(v3);
    if (v4 == v2) {
      char v9 = v11;
    }
    else {
      char v9 = v10;
    }
  }
  return (v9 & 1) == 0;
}

BOOL protocol witness for static Comparable.>= infix(_:_:) in conformance Character(unint64_t *a1, unint64_t *a2)
{
  unint64_t v4 = *a1;
  unint64_t v5 = a1[1];
  unint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  if (v4 == *a2 && v5 == v7)
  {
    char v11 = 0;
  }
  else if ((~v5 & 0x6000000000000000) != 0 || (v7 & 0x2000000000000000) == 0 || (v7 & 0x4000000000000000) == 0)
  {
    char v11 = _stringCompareInternal(_:_:expecting:)(v4, v5, v6, v7, 1);
  }
  else
  {
    BOOL v12 = bswap64(v4) < bswap64(v6);
    BOOL v13 = bswap64(v5) < bswap64(v7);
    if (v4 == v6) {
      char v11 = v13;
    }
    else {
      char v11 = v12;
    }
  }
  return (v11 & 1) == 0;
}

uint64_t protocol witness for static Comparable.> infix(_:_:) in conformance Character(unint64_t *a1, unint64_t *a2)
{
  unint64_t v2 = *a1;
  unint64_t v3 = a1[1];
  unint64_t v4 = *a2;
  unint64_t v5 = a2[1];
  if (v4 == v2 && v5 == v3) {
    return 0;
  }
  if ((~v5 & 0x6000000000000000) != 0 || (v3 & 0x2000000000000000) == 0 || (v3 & 0x4000000000000000) == 0) {
    return _stringCompareInternal(_:_:expecting:)(v4, v5, v2, v3, 1);
  }
  BOOL v10 = bswap64(v4) < bswap64(v2);
  BOOL v11 = bswap64(v5) < bswap64(v3);
  if (v4 == v2) {
    return v11;
  }
  else {
    return v10;
  }
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Substring(unint64_t *a1, void *a2)
{
  unint64_t v4 = *a1;
  unint64_t v5 = a1[1];
  uint64_t v6 = a1[2];
  unint64_t v7 = a1[3];
  uint64_t v8 = a2[2];
  unint64_t v9 = a2[3];
  uint64_t v10 = v4 >> 16;
  uint64_t v11 = v5 >> 16;
  uint64_t v12 = *a2 >> 16;
  uint64_t v13 = a2[1] >> 16;
  if (v6 == v8 && v7 == v9 && v10 == v12 && v11 == v13) {
    return 1;
  }
  else {
    return _stringCompareInternal(_:_:_:_:expecting:)(v6, v7, v10, v11, v8, v9, v12, v13, 0) & 1;
  }
}

uint64_t static _StringComparisonResult.== infix(_:_:)(char a1, char a2)
{
  if (a1)
  {
    if (a2) {
      return 1;
    }
  }
  else if ((a2 & 1) == 0)
  {
    return 1;
  }
  return 0;
}

uint64_t _stringCompareWithSmolCheck(_:_:expecting:)(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, char a5)
{
  int v5 = a5 & 1;
  if ((~a2 & 0x6000000000000000) != 0 || (~a4 & 0x6000000000000000) != 0) {
    return _stringCompareInternal(_:_:expecting:)(a1, a2, a3, a4, v5);
  }
  BOOL v6 = bswap64(a2) < bswap64(a4);
  if (!v5) {
    BOOL v6 = a2 == a4;
  }
  unint64_t v7 = bswap64(a1);
  unint64_t v8 = bswap64(a3);
  if (v5) {
    BOOL v9 = v7 >= v8;
  }
  else {
    BOOL v9 = 1;
  }
  unsigned int v10 = !v9;
  if (a1 == a3) {
    return v6;
  }
  else {
    return v10;
  }
}

uint64_t _stringCompareInternal(_:_:expecting:)(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, char a5)
{
  int v7 = a5 & 1;
  if ((a2 & 0x1000000000000000) == 0 && (a4 & 0x1000000000000000) == 0)
  {
    if ((a2 & 0x2000000000000000) != 0) {
      unint64_t v8 = a2;
    }
    else {
      unint64_t v8 = a1;
    }
    if ((v8 & 0x4000000000000000) != 0)
    {
      uint64_t v10 = a4 & 0x2000000000000000;
      if ((a4 & 0x2000000000000000) != 0) {
        unint64_t v11 = a4;
      }
      else {
        unint64_t v11 = a3;
      }
      uint64_t v9 = (v11 >> 62) & 1;
      if ((a2 & 0x2000000000000000) != 0)
      {
LABEL_20:
        uint64_t v17 = HIBYTE(a2) & 0xF;
        uint64_t __s1 = a1;
        uint64_t v42 = a2 & 0xFFFFFFFFFFFFFFLL;
        if (v10)
        {
          unint64_t v18 = HIBYTE(a4) & 0xF;
          v40[0] = a3;
          v40[1] = a4 & 0xFFFFFFFFFFFFFFLL;
          if (v9)
          {
            if ((a5 & 1) != 0 || v17 == v18)
            {
              if (v18 >= v17) {
                size_t v19 = HIBYTE(a2) & 0xF;
              }
              else {
                size_t v19 = HIBYTE(a4) & 0xF;
              }
              int v20 = _swift_stdlib_memcmp(&__s1, v40, v19);
              uint64_t v21 = v20;
              uint64_t v22 = v17 - v18;
LABEL_48:
              if (!v20) {
                uint64_t v21 = v22;
              }
              BOOL v31 = v21 == 0;
              BOOL v32 = v21 < 0;
              char v33 = v31;
              if (v7) {
                return v32;
              }
              else {
                return v33;
              }
            }
            return 0;
          }
          p_s1 = &__s1;
          unint64_t v35 = v40;
          uint64_t v37 = HIBYTE(a2) & 0xF;
          uint64_t v38 = HIBYTE(a4) & 0xF;
          return _stringCompareFastUTF8Abnormal(_:_:expecting:)((uint64_t)p_s1, v37, (uint64_t)v35, v38, v7);
        }
        if ((a3 & 0x1000000000000000) != 0)
        {
          id v23 = (id)((a4 & 0xFFFFFFFFFFFFFFFLL) + 32);
          uint64_t v24 = a3 & 0xFFFFFFFFFFFFLL;
          if (v9)
          {
LABEL_30:
            if (v7 || v17 == v24)
            {
              if (v24 >= v17) {
                size_t v25 = v17;
              }
              else {
                size_t v25 = v24;
              }
              int v20 = _swift_stdlib_memcmp(&__s1, v23, v25);
              uint64_t v21 = v20;
              uint64_t v22 = v17 - v24;
              goto LABEL_48;
            }
            return 0;
          }
        }
        else
        {
          id v23 = _StringObject.sharedUTF8.getter(a3, a4);
          uint64_t v24 = v39;
          if (v9) {
            goto LABEL_30;
          }
        }
        p_s1 = &__s1;
        uint64_t v37 = v17;
        unint64_t v35 = (uint64_t *)v23;
        uint64_t v38 = v24;
        return _stringCompareFastUTF8Abnormal(_:_:expecting:)((uint64_t)p_s1, v37, (uint64_t)v35, v38, v7);
      }
    }
    else
    {
      LODWORD(v9) = 0;
      if ((a2 & 0x2000000000000000) != 0)
      {
        uint64_t v10 = a4 & 0x2000000000000000;
        goto LABEL_20;
      }
    }
    if ((a1 & 0x1000000000000000) != 0)
    {
      id v12 = (id)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
      uint64_t v13 = a1 & 0xFFFFFFFFFFFFLL;
      if ((a4 & 0x2000000000000000) == 0)
      {
LABEL_15:
        if ((a3 & 0x1000000000000000) != 0)
        {
          id v14 = (id)((a4 & 0xFFFFFFFFFFFFFFFLL) + 32);
          uint64_t v15 = a3 & 0xFFFFFFFFFFFFLL;
        }
        else
        {
          id v14 = _StringObject.sharedUTF8.getter(a3, a4);
          uint64_t v15 = v34;
        }
        return _stringCompareFastUTF8(_:_:expecting:bothNFC:)(v12, v13, v14, v15, v7, v9);
      }
    }
    else
    {
      id v12 = _StringObject.sharedUTF8.getter(a1, a2);
      uint64_t v13 = v27;
      if ((a4 & 0x2000000000000000) == 0) {
        goto LABEL_15;
      }
    }
    uint64_t v28 = HIBYTE(a4) & 0xF;
    uint64_t __s1 = a3;
    uint64_t v42 = a4 & 0xFFFFFFFFFFFFFFLL;
    if (v9)
    {
      if (v7 || v13 == v28)
      {
        if (v28 >= v13) {
          size_t v30 = v13;
        }
        else {
          size_t v30 = HIBYTE(a4) & 0xF;
        }
        int v20 = _swift_stdlib_memcmp(v12, &__s1, v30);
        uint64_t v21 = v20;
        uint64_t v22 = v13 - v28;
        goto LABEL_48;
      }
      return 0;
    }
    unint64_t v35 = &__s1;
    p_s1 = (uint64_t *)v12;
    uint64_t v37 = v13;
    uint64_t v38 = HIBYTE(a4) & 0xF;
    return _stringCompareFastUTF8Abnormal(_:_:expecting:)((uint64_t)p_s1, v37, (uint64_t)v35, v38, v7);
  }
  char v26 = a5 & 1;

  return _stringCompareSlow(_:_:expecting:)(a1, a2, a3, a4, v26);
}

BOOL _stringCompareSlow(_:_:expecting:)(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, char a5)
{
  if ((a4 & 0x2000000000000000) != 0) {
    uint64_t v6 = HIBYTE(a4) & 0xF;
  }
  else {
    uint64_t v6 = a3 & 0xFFFFFFFFFFFFLL;
  }
  uint64_t v7 = a1 & 0xFFFFFFFFFFFFLL;
  if ((a2 & 0x2000000000000000) != 0) {
    uint64_t v7 = HIBYTE(a2) & 0xF;
  }
  return _StringGutsSlice.compare(with:expecting:)(a3, a4, 0, v6, a5 & 1, a1, a2, 0, v7);
}

uint64_t _stringCompareFastUTF8(_:_:expecting:bothNFC:)(const void *a1, uint64_t a2, void *__s2, uint64_t a4, char a5, char a6)
{
  int v8 = a5 & 1;
  if (a6)
  {
    if ((a5 & 1) != 0 || a2 == a4)
    {
      if (a4 >= a2) {
        size_t v10 = a2;
      }
      else {
        size_t v10 = a4;
      }
      int v11 = _swift_stdlib_memcmp(a1, __s2, v10);
      uint64_t v12 = v11;
      if (!v11) {
        uint64_t v12 = a2 - a4;
      }
      BOOL v13 = v12 == 0;
      BOOL v14 = v12 < 0;
      unsigned int v15 = v13;
      if (v8) {
        return v14;
      }
      else {
        return v15;
      }
    }
    else
    {
      return 0;
    }
  }
  else
  {
    char v16 = a5 & 1;
    return _stringCompareFastUTF8Abnormal(_:_:expecting:)((uint64_t)a1, a2, (uint64_t)__s2, a4, v16);
  }
}

uint64_t _stringCompareInternal(_:_:_:_:expecting:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  char v15 = a9 & 1;
  if ((a2 & 0x1000000000000000) != 0 || (a6 & 0x1000000000000000) != 0) {
    return _StringGutsSlice.compare(with:expecting:)(a5, a6, a7, a8, a9 & 1, a1, a2, a3, a4);
  }
  if ((a2 & 0x2000000000000000) != 0) {
    unint64_t v16 = a2;
  }
  else {
    unint64_t v16 = a1;
  }
  if ((v16 & 0x4000000000000000) == 0)
  {
    LODWORD(v17) = 0;
    if ((a2 & 0x2000000000000000) == 0) {
      goto LABEL_8;
    }
LABEL_22:
    uint64_t v57 = a1;
    uint64_t v58 = a2 & 0xFFFFFFFFFFFFFFLL;
    if (a3 < 0) {
      goto LABEL_77;
    }
    if ((uint64_t)(HIBYTE(a2) & 0xF) < a4) {
      goto LABEL_69;
    }
    uint64_t v30 = a4 - a3;
    if (a4 - a3 >= 0)
    {
      BOOL v31 = (char *)&v57 + a3;
      if ((a6 & 0x2000000000000000) == 0)
      {
        if ((a5 & 0x1000000000000000) != 0)
        {
          id v32 = (id)((a6 & 0xFFFFFFFFFFFFFFFLL) + 32);
          uint64_t v33 = a5 & 0xFFFFFFFFFFFFLL;
          if (a7 < 0) {
            goto LABEL_77;
          }
        }
        else
        {
          id v32 = _StringObject.sharedUTF8.getter(a5, a6);
          uint64_t v33 = v55;
          if (a7 < 0) {
            goto LABEL_77;
          }
        }
        if (v33 < a8) {
          goto LABEL_69;
        }
        unint64_t v35 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(a7, a8, (uint64_t)v32, v33);
        uint64_t v36 = v34;
        if (v17)
        {
          if ((a9 & 1) != 0 || v30 == v34)
          {
            if (v34 >= v30) {
              size_t v37 = v30;
            }
            else {
              size_t v37 = v34;
            }
            int v38 = _swift_stdlib_memcmp(v31, v35, v37);
            uint64_t v39 = v38;
            uint64_t v40 = v30 - v36;
LABEL_46:
            if (!v38) {
              uint64_t v39 = v40;
            }
LABEL_61:
            BOOL v48 = v39 == 0;
            BOOL v49 = v39 < 0;
            char v50 = v48;
            if (a9) {
              return v49;
            }
            else {
              return v50;
            }
          }
          return 0;
        }
        int v20 = v31;
        uint64_t v21 = v30;
        uint64_t v54 = v35;
        uint64_t v43 = v36;
        return _stringCompareFastUTF8Abnormal(_:_:expecting:)((uint64_t)v20, v21, (uint64_t)v54, v43, v15);
      }
      v56[0] = a5;
      v56[1] = a6 & 0xFFFFFFFFFFFFFFLL;
      if (a7 < 0) {
        goto LABEL_77;
      }
      if ((uint64_t)(HIBYTE(a6) & 0xF) < a8) {
        goto LABEL_69;
      }
      uint64_t v43 = a8 - a7;
      if (a8 - a7 >= 0)
      {
        if (v17)
        {
          uint64_t v44 = v30 - v43;
          if (v30 == v43 || (a9 & 1) != 0)
          {
            if (v43 >= v30) {
              size_t v46 = v30;
            }
            else {
              size_t v46 = a8 - a7;
            }
            int v47 = _swift_stdlib_memcmp(v31, (char *)v56 + a7, v46);
            uint64_t v39 = v47;
            if (!v47) {
              uint64_t v39 = v44;
            }
            goto LABEL_61;
          }
          return 0;
        }
        int v20 = (char *)&v57 + a3;
        uint64_t v21 = v30;
        uint64_t v54 = (char *)v56 + a7;
        return _stringCompareFastUTF8Abnormal(_:_:expecting:)((uint64_t)v20, v21, (uint64_t)v54, v43, v15);
      }
    }
LABEL_72:
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeBufferPointer with negative count", 39, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x53FuLL, 0);
  }
  if ((a6 & 0x2000000000000000) != 0) {
    unint64_t v29 = a6;
  }
  else {
    unint64_t v29 = a5;
  }
  uint64_t v17 = (v29 >> 62) & 1;
  if ((a2 & 0x2000000000000000) != 0) {
    goto LABEL_22;
  }
LABEL_8:
  if ((a1 & 0x1000000000000000) != 0)
  {
    id v18 = (id)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
    uint64_t v19 = a1 & 0xFFFFFFFFFFFFLL;
    if (a3 < 0) {
      goto LABEL_77;
    }
  }
  else
  {
    id v18 = _StringObject.sharedUTF8.getter(a1, a2);
    uint64_t v19 = v52;
    if (a3 < 0) {
      goto LABEL_77;
    }
  }
  if (v19 < a4)
  {
LABEL_69:
    unint64_t v51 = 1861;
    goto LABEL_78;
  }
  int v20 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(a3, a4, (uint64_t)v18, v19);
  uint64_t v22 = v20;
  uint64_t v23 = v21;
  if ((a6 & 0x2000000000000000) != 0)
  {
    uint64_t v57 = a5;
    uint64_t v58 = a6 & 0xFFFFFFFFFFFFFFLL;
    if (a7 < 0) {
      goto LABEL_77;
    }
    if ((uint64_t)(HIBYTE(a6) & 0xF) < a8) {
      goto LABEL_69;
    }
    uint64_t v41 = a8 - a7;
    if (v41 >= 0)
    {
      if (v17)
      {
        if ((a9 & 1) != 0 || v21 == v41)
        {
          if (v41 >= v21) {
            size_t v42 = v21;
          }
          else {
            size_t v42 = v41;
          }
          int v38 = _swift_stdlib_memcmp(v20, (char *)&v57 + a7, v42);
          uint64_t v39 = v38;
          uint64_t v40 = v23 - v41;
          goto LABEL_46;
        }
        return 0;
      }
      uint64_t v54 = (char *)&v57 + a7;
      uint64_t v43 = v41;
      return _stringCompareFastUTF8Abnormal(_:_:expecting:)((uint64_t)v20, v21, (uint64_t)v54, v43, v15);
    }
    goto LABEL_72;
  }
  if ((a5 & 0x1000000000000000) != 0)
  {
    id v24 = (id)((a6 & 0xFFFFFFFFFFFFFFFLL) + 32);
    uint64_t v25 = a5 & 0xFFFFFFFFFFFFLL;
    if ((a7 & 0x8000000000000000) == 0) {
      goto LABEL_14;
    }
LABEL_77:
    unint64_t v51 = 1860;
LABEL_78:
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, v51, 0);
  }
  id v24 = _StringObject.sharedUTF8.getter(a5, a6);
  uint64_t v25 = v53;
  if (a7 < 0) {
    goto LABEL_77;
  }
LABEL_14:
  if (v25 < a8) {
    goto LABEL_69;
  }
  uint64_t v27 = (void *)specialized UnsafeBufferPointer.init(rebasing:)(a7, a8, (uint64_t)v24, v25);

  return _stringCompareFastUTF8(_:_:expecting:bothNFC:)(v22, v23, v27, v26, v15, v17);
}

uint64_t _StringGuts.withFastUTF8<A>(range:_:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(char *), uint64_t a4, uint64_t a5, unint64_t a6)
{
  if ((a6 & 0x2000000000000000) == 0)
  {
    if ((a5 & 0x1000000000000000) != 0)
    {
      id v9 = (id)((a6 & 0xFFFFFFFFFFFFFFFLL) + 32);
      uint64_t v10 = a5 & 0xFFFFFFFFFFFFLL;
      if ((a1 & 0x8000000000000000) == 0) {
        goto LABEL_4;
      }
    }
    else
    {
      id v9 = _StringObject.sharedUTF8.getter(a5, a6);
      uint64_t v10 = v14;
      if ((a1 & 0x8000000000000000) == 0)
      {
LABEL_4:
        if (v10 >= a2)
        {
          int v11 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(a1, a2, (uint64_t)v9, v10);
          return a3(v11);
        }
        goto LABEL_11;
      }
    }
LABEL_13:
    unint64_t v13 = 1860;
LABEL_14:
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, v13, 0);
  }
  v15[0] = a5;
  v15[1] = a6 & 0xFFFFFFFFFFFFFFLL;
  if (a1 < 0) {
    goto LABEL_13;
  }
  if ((uint64_t)(HIBYTE(a6) & 0xF) < a2)
  {
LABEL_11:
    unint64_t v13 = 1861;
    goto LABEL_14;
  }
  if (a2 - a1 < 0) {
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeBufferPointer with negative count", 39, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x53FuLL, 0);
  }
  int v11 = (char *)v15 + a1;
  return a3(v11);
}

BOOL _stringCompareFastUTF8Abnormal(_:_:expecting:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  int v7 = a5 & 1;
  if (a4 >= a2) {
    uint64_t v8 = a2;
  }
  else {
    uint64_t v8 = a4;
  }
  if (v8 < 1)
  {
LABEL_8:
    if (a5) {
      return a2 < a4;
    }
    else {
      return a2 == a4;
    }
  }
  else
  {
    uint64_t v11 = 0;
    while (*(unsigned __int8 *)(a1 + v11) == *(unsigned __int8 *)(a3 + v11))
    {
      if (v8 == ++v11) {
        goto LABEL_8;
      }
    }
    uint64_t v13 = a2;
    if (a2 != v11)
    {
      uint64_t v14 = v11;
      do
        int v15 = *(unsigned char *)(a1 + v14--) & 0xC0;
      while (v15 == 128);
      uint64_t v13 = v14 + 1;
    }
    unsigned int v16 = _decodeScalar(_:startingAt:)(a1, a2, v13);
    uint64_t v18 = v17;
    unsigned int v19 = _decodeScalar(_:startingAt:)(a3, v17, v13);
    uint64_t v40 = v20;
    if (v16 >= 0x300 && (_swift_stdlib_getNormData(v16) & 0x7FE) != 0
      || v19 >= 0x300 && (_swift_stdlib_getNormData(v19) & 0x7FE) != 0
      || !UnsafeBufferPointer<A>.hasNormalizationBoundary(before:)(v18 + v13, a1, a2)
      || !UnsafeBufferPointer<A>.hasNormalizationBoundary(before:)(v40 + v13, a3, a4))
    {
      uint64_t v22 = _findBoundary(_:before:)(a1, a2, v11);
      uint64_t v23 = _findBoundary(_:before:)(a3, a4, v11);
      if (v23 >= v22) {
        uint64_t v24 = v22;
      }
      else {
        uint64_t v24 = v23;
      }
      uint64_t v25 = specialized Collection.subscript.getter(v24, a1, a2);
      uint64_t v29 = specialized UnsafeBufferPointer.init(rebasing:)(v25, v26, v27, v28);
      uint64_t v31 = v30;
      uint64_t v32 = specialized Collection.subscript.getter(v24, a3, a4);
      uint64_t v36 = specialized UnsafeBufferPointer.init(rebasing:)(v32, v33, v34, v35);
      uint64_t v38 = ((unint64_t)(v29 + 0x7FFFFFFFFFFFFFE0) >> 56) & 0xF;
      if (((v29 + 0x7FFFFFFFFFFFFFE0) & 0x2000000000000000) == 0) {
        uint64_t v38 = v31 & 0xFFFFFFFFFFFFLL;
      }
      if (((v36 + 0x7FFFFFFFFFFFFFE0) & 0x2000000000000000) != 0) {
        uint64_t v39 = ((unint64_t)(v36 + 0x7FFFFFFFFFFFFFE0) >> 56) & 0xF;
      }
      else {
        uint64_t v39 = v37 & 0xFFFFFFFFFFFFLL;
      }
      return _StringGutsSlice.compare(with:expecting:)(v37 | 0x1000000000000000, (v36 + 0x7FFFFFFFFFFFFFE0) | 0x8000000000000000, 0, v39, v7, v31 | 0x1000000000000000, (v29 + 0x7FFFFFFFFFFFFFE0) | 0x8000000000000000, 0, v38);
    }
    else
    {
      if (v7) {
        BOOL v21 = v16 >= v19;
      }
      else {
        BOOL v21 = 1;
      }
      return !v21;
    }
  }
}

uint64_t _scalarAlign(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3 != a2)
  {
    do
      int v3 = *(unsigned char *)(a1 + a3--) & 0xC0;
    while (v3 == 128);
    ++a3;
  }
  return a3;
}

BOOL UnsafeBufferPointer<A>.hasNormalizationBoundary(before:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  BOOL result = 1;
  if (a1 && a1 != a3)
  {
    if (*(unsigned __int8 *)(a2 + a1) < 0xCCu) {
      return 1;
    }
    unsigned int v5 = _decodeScalar(_:startingAt:)(a2, a2, a1);
    if (v5 >= 0x300)
    {
      __int16 NormData = _swift_stdlib_getNormData(v5);
      if ((NormData & 0x7F8) != 0) {
        return 0;
      }
    }
    else
    {
      LOBYTE(NormData) = 0;
    }
    return (NormData & 6) == 0;
  }
  return result;
}

uint64_t _findBoundary(_:before:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a2;
  if (a3 < a2)
  {
    do
      int v5 = *(unsigned char *)(a1 + a3--) & 0xC0;
    while (v5 == 128);
    uint64_t v6 = a3 + 1;
    if (a3 == -1)
    {
      return 0;
    }
    else
    {
      while (2)
      {
        uint64_t v3 = v6;
        int v8 = *(char *)(a1 + v6);
        if (v8 < 0)
        {
          switch(__clz(~(_BYTE)v8))
          {
            case 0x1Au:
              id v9 = (unsigned char *)(v6 + a1 + 1);
              int v10 = (v8 & 0x1F) << 6;
              goto LABEL_11;
            case 0x1Bu:
              id v9 = (unsigned char *)(v6 + a1 + 2);
              int v10 = ((v8 & 0xF) << 12) | ((*(unsigned char *)(v3 + a1 + 1) & 0x3F) << 6);
              goto LABEL_11;
            case 0x1Cu:
              id v9 = (unsigned char *)(v6 + a1 + 3);
              int v10 = ((v8 & 0xF) << 18) | ((*(unsigned char *)(v3 + a1 + 1) & 0x3F) << 12) | ((*(unsigned char *)(v3 + a1 + 2) & 0x3F) << 6);
LABEL_11:
              unsigned int v11 = v10 | *v9 & 0x3F;
              if (v11 < 0x300 || (_swift_stdlib_getNormData(v11) & 0x7FE) == 0) {
                return v3;
              }
              uint64_t v6 = v3 - 1;
              if ((*(unsigned char *)(a1 + v3 - 1) & 0xC0) == 0x80)
              {
                do
                  int v12 = *(unsigned char *)(a1 - 2 + v3--) & 0xC0;
                while (v12 == 128);
                uint64_t v6 = v3 - 1;
              }
              uint64_t v3 = 0;
              if (!v6) {
                return v3;
              }
              continue;
            default:
              return v3;
          }
        }
        break;
      }
    }
  }
  return v3;
}

BOOL _StringGutsSlice.compare(with:expecting:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v11 = a6;
  uint64_t v12 = a4;
  uint64_t v15 = a1;
  uint64_t v16 = a9;
  int v17 = a5 & 1;
  if ((a7 & 0x1000000000000000) != 0 || (a2 & 0x1000000000000000) != 0) {
    goto LABEL_49;
  }
  if ((a7 & 0x2000000000000000) != 0)
  {
    uint64_t v68 = a6;
    uint64_t v69 = a7 & 0xFFFFFFFFFFFFFFLL;
    if (a8 < 0) {
      goto LABEL_59;
    }
    if ((uint64_t)(HIBYTE(a7) & 0xF) < a9) {
      goto LABEL_52;
    }
    uint64_t v38 = a9 - a8;
    if (a9 - a8 >= 0)
    {
      if ((a2 & 0x2000000000000000) != 0)
      {
        v67[0] = a1;
        v67[1] = a2 & 0xFFFFFFFFFFFFFFLL;
        if (a3 < 0) {
          goto LABEL_59;
        }
        if ((uint64_t)(HIBYTE(a2) & 0xF) < a4) {
          goto LABEL_52;
        }
        int v41 = a5 & 1;
        uint64_t v42 = a6;
        uint64_t v45 = a4 - a3;
        if (a4 - a3 < 0) {
          goto LABEL_53;
        }
        BOOL v48 = (char *)v67 + a3;
        if (v45 >= v38) {
          size_t v46 = a9 - a8;
        }
        else {
          size_t v46 = a4 - a3;
        }
        int v47 = (char *)&v68 + a8;
      }
      else
      {
        if ((a1 & 0x1000000000000000) != 0)
        {
          uint64_t v39 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
          uint64_t v40 = a1 & 0xFFFFFFFFFFFFLL;
          if (a3 < 0) {
            goto LABEL_59;
          }
        }
        else
        {
          id v62 = _StringObject.sharedUTF8.getter(a1, a2);
          uint64_t v12 = a4;
          uint64_t v39 = (uint64_t)v62;
          uint64_t v40 = v63;
          if (a3 < 0) {
            goto LABEL_59;
          }
        }
        if (v40 < v12) {
          goto LABEL_52;
        }
        int v41 = v17;
        uint64_t v42 = v11;
        uint64_t v44 = specialized UnsafeBufferPointer.init(rebasing:)(a3, v12, v39, v40);
        uint64_t v45 = v43;
        if (v43 >= v38) {
          size_t v46 = a9 - a8;
        }
        else {
          size_t v46 = v43;
        }
        int v47 = (char *)&v68 + a8;
        BOOL v48 = (char *)v44;
      }
      int v56 = _swift_stdlib_memcmp(v47, v48, v46);
      uint64_t v57 = v56;
      if (!v56) {
        uint64_t v57 = v38 - v45;
      }
      uint64_t v11 = v42;
      int v17 = v41;
      uint64_t v15 = a1;
      uint64_t v12 = a4;
      if (!v57) {
        return v17 == 0;
      }
      goto LABEL_49;
    }
LABEL_53:
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeBufferPointer with negative count", 39, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x53FuLL, 0);
  }
  if ((a6 & 0x1000000000000000) != 0)
  {
    id v18 = (id)((a7 & 0xFFFFFFFFFFFFFFFLL) + 32);
    uint64_t v19 = a6 & 0xFFFFFFFFFFFFLL;
    if (a8 < 0) {
      goto LABEL_59;
    }
  }
  else
  {
    id v18 = _StringObject.sharedUTF8.getter(a6, a7);
    uint64_t v19 = v59;
    if (a8 < 0) {
      goto LABEL_59;
    }
  }
  if (v19 < a9)
  {
LABEL_52:
    unint64_t v58 = 1861;
    goto LABEL_60;
  }
  uint64_t v20 = (const void *)specialized UnsafeBufferPointer.init(rebasing:)(a8, a9, (uint64_t)v18, v19);
  int64_t v22 = v21;
  if ((a2 & 0x2000000000000000) != 0)
  {
    uint64_t v68 = v15;
    uint64_t v69 = a2 & 0xFFFFFFFFFFFFFFLL;
    if (a3 < 0) {
      goto LABEL_59;
    }
    if ((uint64_t)(HIBYTE(a2) & 0xF) < a4) {
      goto LABEL_52;
    }
    uint64_t v49 = v15;
    int v50 = v17;
    uint64_t v51 = v11;
    uint64_t v52 = a4 - a3;
    if (a4 - a3 >= 0)
    {
      if (v52 >= v21) {
        size_t v53 = v21;
      }
      else {
        size_t v53 = a4 - a3;
      }
      int v54 = _swift_stdlib_memcmp(v20, (char *)&v68 + a3, v53);
      int64_t v55 = v54;
      if (!v54) {
        int64_t v55 = v22 - v52;
      }
      uint64_t v12 = a4;
      uint64_t v11 = v51;
      int v17 = v50;
      uint64_t v15 = v49;
      if (!v55) {
        return v17 == 0;
      }
      goto LABEL_49;
    }
    goto LABEL_53;
  }
  if ((v15 & 0x1000000000000000) != 0)
  {
    id v23 = (id)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
    uint64_t v24 = v15 & 0xFFFFFFFFFFFFLL;
    uint64_t v25 = a4;
    if ((a3 & 0x8000000000000000) == 0) {
      goto LABEL_10;
    }
LABEL_59:
    unint64_t v58 = 1860;
LABEL_60:
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, v58, 0);
  }
  uint64_t v60 = v20;
  id v23 = _StringObject.sharedUTF8.getter(v15, a2);
  uint64_t v20 = v60;
  uint64_t v24 = v61;
  uint64_t v25 = a4;
  if (a3 < 0) {
    goto LABEL_59;
  }
LABEL_10:
  if (v24 < v25) {
    goto LABEL_52;
  }
  uint64_t v26 = v20;
  uint64_t v28 = (const void *)specialized UnsafeBufferPointer.init(rebasing:)(a3, v25, (uint64_t)v23, v24);
  uint64_t v64 = v15;
  int v29 = v17;
  uint64_t v30 = v11;
  int64_t v31 = v27;
  if (v27 >= v22) {
    size_t v32 = v22;
  }
  else {
    size_t v32 = v27;
  }
  uint64_t v33 = v26;
  uint64_t v16 = a9;
  int v34 = _swift_stdlib_memcmp(v33, v28, v32);
  uint64_t v35 = v34;
  int64_t v36 = v22 - v31;
  uint64_t v11 = v30;
  int v17 = v29;
  uint64_t v15 = v64;
  if (!v34) {
    uint64_t v35 = v36;
  }
  uint64_t v12 = a4;
  if (!v35) {
    return v17 == 0;
  }
LABEL_49:

  return _StringGutsSlice._slowCompare(with:expecting:)(v15, a2, a3, v12, v17, v11, a7, a8, v16);
}

uint64_t _utf8ScalarLength(_:endingAt:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = 0;
  do
    int v4 = *(unsigned char *)(a3 + a1 - 1 + v3--) & 0xC0;
  while (v4 == 128);
  return -v3;
}

Swift::_StringComparisonResult __swiftcall _StringComparisonResult.init(signedNotation:)(Swift::Int signedNotation)
{
  return signedNotation != 0;
}

Swift::Int _StringComparisonResult.hashValue.getter(char a1)
{
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance _StringComparisonResult(unsigned char *a1, unsigned char *a2)
{
  if (*a1)
  {
    if (*a2) {
      return 1;
    }
  }
  else if ((*a2 & 1) == 0)
  {
    return 1;
  }
  return 0;
}

BOOL _StringGutsSlice._slowCompare(with:expecting:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  unint64_t v9 = HIBYTE(a7) & 0xF;
  if ((a7 & 0x2000000000000000) == 0) {
    unint64_t v9 = a6 & 0xFFFFFFFFFFFFLL;
  }
  if (v9 < (a9 & 0xFFFFFFFFFFFFuLL)) {
    goto LABEL_128;
  }
  uint64_t v86 = &_swiftEmptyArrayStorage;
  unint64_t v11 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0) {
    unint64_t v11 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v11 < (a4 & 0xFFFFFFFFFFFFuLL)) {
LABEL_128:
  }
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index range is out of bounds", 35, 2, "Swift/StringIndexValidation.swift", 33, 2, 0xD2uLL, 0);
  uint64_t v84 = &_swiftEmptyArrayStorage;
  swift_bridgeObjectRetain(a7);
  swift_bridgeObjectRetain(a2);
  BOOL v12 = 0;
  unint64_t v13 = 0;
  unint64_t v14 = 0;
  BOOL v15 = 0;
  char v16 = 1;
  int v17 = 1;
  while (1)
  {
    id v18 = v86;
    unint64_t v19 = (unint64_t)v86[2];
    BOOL v83 = v19 != 0;
    if (v19)
    {
      if (!v15)
      {
        unint64_t v20 = v19 - 1;
        if (v19 > 1)
        {
          BOOL v72 = v12;
          int v76 = v17;
          uint64_t v21 = 0;
          unint64_t v22 = 0;
          uint64_t v23 = 8 * v19 + 24;
          do
          {
            uint64_t v24 = v18[2];
            if (v22 >= (unint64_t)v24 || v20 >= (unint64_t)v24) {
LABEL_121:
            }
              _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Index out of range", 18, 2, "Swift/ContiguousArrayBuffer.swift", 33, 2, 0x2A3uLL, 0);
            __int16 v78 = WORD2(v18[v21 + 4]);
            int v81 = (int)v18[v21 + 4];
            int v25 = *(_DWORD *)((char *)v18 + v23);
            __int16 v26 = *(_WORD *)((char *)v18 + v23 + 4);
            if (!swift_isUniquelyReferenced_nonNull_native((uint64_t)v18)) {
              id v18 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v18);
            }
            specialized Array._checkSubscript_mutating(_:)(v22, (uint64_t)v18);
            int64_t v27 = &v18[v21];
            *((_DWORD *)v27 + 8) = v25;
            *((_WORD *)v27 + 18) = v26;
            if (!swift_isUniquelyReferenced_nonNull_native((uint64_t)v18)) {
              id v18 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v18);
            }
            specialized Array._checkSubscript_mutating(_:)(v20, (uint64_t)v18);
            uint64_t v28 = (char *)v18 + v23;
            *(_DWORD *)uint64_t v28 = v81;
            *((_WORD *)v28 + 2) = v78;
            ++v22;
            --v20;
            v23 -= 8;
            ++v21;
          }
          while ((uint64_t)v22 < (uint64_t)v20);
          int v17 = v76;
          BOOL v12 = v72;
          if (!v18[2]) {
LABEL_127:
          }
            _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't remove last element from an empty collection", 50, 2, "Swift/RangeReplaceableCollection.swift", 38, 2, 0x363uLL, 0);
        }
      }
      if (swift_isUniquelyReferenced_nonNull_native((uint64_t)v18))
      {
        uint64_t v42 = v18[2];
        if (!v42) {
          goto LABEL_120;
        }
      }
      else
      {
        id v18 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v18);
        uint64_t v42 = v18[2];
        if (!v42) {
          goto LABEL_120;
        }
      }
      char v43 = 0;
      uint64_t v44 = (__objc2_class *)((char *)v42 - 1);
      unsigned int v45 = v18[(void)v44 + 4];
      v18[2] = v44;
      uint64_t v86 = v18;
      goto LABEL_59;
    }
    unint64_t v29 = specialized Unicode._InternalNFD.Iterator.next()();
    char v30 = v17;
    unint64_t v31 = v14;
    if ((v29 & 0x1000000000000) != 0) {
      goto LABEL_56;
    }
    while (2)
    {
      unint64_t v14 = v29;
      while (1)
      {
        if (v30)
        {
          if ((v14 & 0x7F800000000) == 0) {
            goto LABEL_49;
          }
          int v17 = 1;
          unsigned int v45 = v14;
          unint64_t v14 = v31;
          goto LABEL_58;
        }
        uint64_t v33 = v86;
        int v34 = v86[2];
        if (!v34)
        {
          if (v14 >= 0x300 && (v14 & 0x600000000) != 0)
          {
            unint64_t v35 = specialized Unicode._InternalNFC.Iterator.composeHangul(_:and:)(v31, v14);
            if ((v35 & 0x100000000) == 0)
            {
LABEL_51:
              unint64_t v14 = v35;
              goto LABEL_49;
            }
            uint64_t Composition = _swift_stdlib_getComposition(v31, v14);
            if (Composition != -1) {
              break;
            }
          }
          if ((v14 & 0x7F800000000) == 0) {
            goto LABEL_57;
          }
          goto LABEL_35;
        }
        if ((v14 >> 35) <= (WORD2(v86[(void)v34 + 3]) >> 3))
        {
          if ((v14 >> 35))
          {
            if (!swift_isUniquelyReferenced_nonNull_native((uint64_t)v86))
            {
              uint64_t v33 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, (int64_t)&v34->isa + 1, 1, (uint64_t)v86);
              uint64_t v86 = v33;
            }
            unint64_t v40 = (unint64_t)v33[2];
            unint64_t v39 = (unint64_t)v33[3];
            if (v40 >= v39 >> 1)
            {
              uint64_t v33 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((__objc2_class **)(v39 > 1), v40 + 1, 1, (uint64_t)v33);
              uint64_t v86 = v33;
            }
            v33[2] = (__objc2_class *)(v40 + 1);
            int v41 = &v33[v40];
            *((_DWORD *)v41 + 8) = v14;
            *((_WORD *)v41 + 18) = WORD2(v14);
            goto LABEL_23;
          }
LABEL_57:
          int v17 = 0;
          unsigned int v45 = v31;
LABEL_58:
          char v43 = 0;
          goto LABEL_59;
        }
        if (v14 >= 0x300 && (v14 & 0x600000000) != 0)
        {
          unint64_t v35 = specialized Unicode._InternalNFC.Iterator.composeHangul(_:and:)(v31, v14);
          if ((v35 & 0x100000000) == 0) {
            goto LABEL_51;
          }
          uint64_t Composition = _swift_stdlib_getComposition(v31, v14);
          if (Composition != -1) {
            break;
          }
        }
LABEL_35:
        if (!swift_isUniquelyReferenced_nonNull_native((uint64_t)v86)) {
          uint64_t v33 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, (int64_t)&v86[2]->isa + 1, 1, (uint64_t)v86);
        }
        unint64_t v38 = (unint64_t)v33[2];
        unint64_t v37 = (unint64_t)v33[3];
        if (v38 >= v37 >> 1) {
          uint64_t v33 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((__objc2_class **)(v37 > 1), v38 + 1, 1, (uint64_t)v33);
        }
        v33[2] = (__objc2_class *)(v38 + 1);
        size_t v32 = &v33[v38];
        *((_DWORD *)v32 + 8) = v14;
        *((_WORD *)v32 + 18) = WORD2(v14);
        uint64_t v86 = v33;
LABEL_23:
        unint64_t v14 = specialized Unicode._InternalNFD.Iterator.next()();
        char v30 = 0;
        if ((v14 & 0x1000000000000) != 0)
        {
          LODWORD(v14) = v31;
          LOBYTE(v17) = 0;
          goto LABEL_56;
        }
      }
      unint64_t v14 = Composition;
LABEL_49:
      unint64_t v29 = specialized Unicode._InternalNFD.Iterator.next()();
      LOBYTE(v17) = 0;
      char v30 = 0;
      unint64_t v31 = v14;
      if ((v29 & 0x1000000000000) == 0) {
        continue;
      }
      break;
    }
LABEL_56:
    unsigned int v45 = v14;
    char v43 = v17;
    int v17 = 1;
    unint64_t v14 = 0;
LABEL_59:
    size_t v46 = v84;
    unint64_t v47 = (unint64_t)v84[2];
    BOOL v82 = v47 != 0;
    if (v47)
    {
      if (!v12)
      {
        char v79 = v43;
        unint64_t v48 = v47 - 1;
        if (v47 <= 1)
        {
          char v43 = v79;
        }
        else
        {
          uint64_t v49 = 0;
          unint64_t v50 = 0;
          uint64_t v51 = 8 * v47 + 24;
          do
          {
            uint64_t v52 = v46[2];
            if (v50 >= (unint64_t)v52 || v48 >= (unint64_t)v52) {
              goto LABEL_121;
            }
            int v77 = v17;
            int v71 = (int)v46[v49 + 4];
            unsigned int v73 = v45;
            __int16 v70 = WORD2(v46[v49 + 4]);
            int v53 = *(_DWORD *)((char *)v46 + v51);
            __int16 v54 = *(_WORD *)((char *)v46 + v51 + 4);
            if (!swift_isUniquelyReferenced_nonNull_native((uint64_t)v46)) {
              size_t v46 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v46);
            }
            specialized Array._checkSubscript_mutating(_:)(v50, (uint64_t)v46);
            int64_t v55 = &v46[v49];
            *((_DWORD *)v55 + 8) = v53;
            *((_WORD *)v55 + 18) = v54;
            if (!swift_isUniquelyReferenced_nonNull_native((uint64_t)v46)) {
              size_t v46 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v46);
            }
            int v17 = v77;
            unsigned int v45 = v73;
            specialized Array._checkSubscript_mutating(_:)(v48, (uint64_t)v46);
            int v56 = (char *)v46 + v51;
            *(_DWORD *)int v56 = v71;
            *((_WORD *)v56 + 2) = v70;
            ++v50;
            --v48;
            v51 -= 8;
            ++v49;
          }
          while ((uint64_t)v50 < (uint64_t)v48);
          char v43 = v79;
          if (!v46[2]) {
            goto LABEL_127;
          }
        }
      }
      if (swift_isUniquelyReferenced_nonNull_native((uint64_t)v46))
      {
        unint64_t v66 = v46[2];
        if (v66)
        {
LABEL_102:
          char v65 = 0;
          unint64_t v67 = (__objc2_class *)((char *)v66 - 1);
          LODWORD(v59) = v46[(void)v67 + 4];
          v46[2] = v67;
          uint64_t v84 = v46;
          if ((v43 & 1) == 0) {
            goto LABEL_109;
          }
          goto LABEL_122;
        }
      }
      else
      {
        size_t v46 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v46);
        unint64_t v66 = v46[2];
        if (v66) {
          goto LABEL_102;
        }
      }
LABEL_120:
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't removeLast from an empty Array", 36, 2, "Swift/Array.swift", 17, 2, 0x51CuLL, 0);
    }
    char v80 = v43;
    unint64_t v57 = specialized Unicode._InternalNFD.Iterator.next()();
    if ((v57 & 0x1000000000000) != 0)
    {
      LODWORD(v59) = v13;
      char v65 = v16;
      char v16 = 1;
      unint64_t v13 = 0;
      if ((v43 & 1) == 0) {
        goto LABEL_109;
      }
      goto LABEL_122;
    }
    unint64_t v58 = v57;
    unint64_t v59 = v13;
LABEL_79:
    unint64_t v13 = v59;
    if (v16) {
      break;
    }
    uint64_t v60 = v84;
    uint64_t v64 = v84[2];
    if (v64)
    {
      if ((v58 >> 35) <= (WORD2(v84[(void)v64 + 3]) >> 3))
      {
        if (!(v58 >> 35)) {
          goto LABEL_108;
        }
      }
      else if (v58 >= 0x300 && (v58 & 0x600000000) != 0)
      {
        unint64_t v59 = specialized Unicode._InternalNFC.Iterator.composeHangul(_:and:)(v59, v58);
        if ((v59 & 0x100000000) == 0) {
          goto LABEL_78;
        }
        unint64_t v59 = _swift_stdlib_getComposition(v13, v58);
        if (v59 != -1) {
          goto LABEL_78;
        }
      }
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      uint64_t v60 = v84;
      goto LABEL_75;
    }
    if (v58 >= 0x300 && (v58 & 0x600000000) != 0)
    {
      unint64_t v59 = specialized Unicode._InternalNFC.Iterator.composeHangul(_:and:)(v59, v58);
      if ((v59 & 0x100000000) == 0) {
        goto LABEL_78;
      }
      unint64_t v59 = _swift_stdlib_getComposition(v13, v58);
      if (v59 != -1) {
        goto LABEL_78;
      }
    }
    if ((v58 & 0x7F800000000) != 0)
    {
      if (!swift_isUniquelyReferenced_nonNull_native((uint64_t)v84))
      {
        uint64_t v60 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, (int64_t)&v84[2]->isa + 1, 1, (uint64_t)v84);
        uint64_t v84 = v60;
      }
LABEL_75:
      unint64_t v62 = (unint64_t)v60[2];
      unint64_t v61 = (unint64_t)v60[3];
      if (v62 >= v61 >> 1)
      {
        uint64_t v60 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((__objc2_class **)(v61 > 1), v62 + 1, 1, (uint64_t)v60);
        uint64_t v84 = v60;
      }
      v60[2] = (__objc2_class *)(v62 + 1);
      uint64_t v63 = &v60[v62];
      *((_DWORD *)v63 + 8) = v58;
      *((_WORD *)v63 + 18) = WORD2(v58);
      unint64_t v59 = v13;
LABEL_78:
      unint64_t v58 = specialized Unicode._InternalNFD.Iterator.next()();
      char v16 = 0;
      if ((v58 & 0x1000000000000) == 0) {
        goto LABEL_79;
      }
      char v65 = 0;
      unint64_t v13 = 0;
      char v16 = 1;
      if ((v80 & 1) == 0) {
        goto LABEL_109;
      }
      goto LABEL_122;
    }
LABEL_108:
    char v65 = 0;
    char v16 = 0;
    LODWORD(v59) = v13;
    unint64_t v13 = v58;
    if (v80) {
      goto LABEL_122;
    }
LABEL_109:
    if (v65)
    {
      swift_bridgeObjectRelease((uint64_t)v84);
      swift_bridgeObjectRelease((uint64_t)&_swiftEmptyArrayStorage);
      swift_bridgeObjectRelease(a2);
      swift_bridgeObjectRelease((uint64_t)v86);
      swift_bridgeObjectRelease((uint64_t)&_swiftEmptyArrayStorage);
      swift_bridgeObjectRelease(a7);
      goto LABEL_125;
    }
    BOOL v12 = v82;
    BOOL v15 = v83;
    if (v45 != v59)
    {
      swift_bridgeObjectRelease((uint64_t)v84);
      swift_bridgeObjectRelease((uint64_t)&_swiftEmptyArrayStorage);
      swift_bridgeObjectRelease(a2);
      swift_bridgeObjectRelease((uint64_t)v86);
      swift_bridgeObjectRelease((uint64_t)&_swiftEmptyArrayStorage);
      swift_bridgeObjectRelease(a7);
      BOOL v69 = v45 < v59;
      return v69 & a5;
    }
  }
  if ((v58 & 0x7F800000000) == 0)
  {
    unint64_t v59 = v58;
    goto LABEL_78;
  }
  char v65 = 0;
  char v16 = 1;
  LODWORD(v59) = v58;
  if ((v80 & 1) == 0) {
    goto LABEL_109;
  }
LABEL_122:
  swift_bridgeObjectRelease((uint64_t)v84);
  swift_bridgeObjectRelease((uint64_t)&_swiftEmptyArrayStorage);
  swift_bridgeObjectRelease(a2);
  swift_bridgeObjectRelease((uint64_t)v86);
  swift_bridgeObjectRelease((uint64_t)&_swiftEmptyArrayStorage);
  swift_bridgeObjectRelease(a7);
  if (v65) {
    return (a5 & 1) == 0;
  }
LABEL_125:
  BOOL v69 = a9 < a4;
  return v69 & a5;
}

uint64_t Substring.init(_:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0) {
    unint64_t v4 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v4 < (a4 & 0xFFFFFFFFFFFFuLL)) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index range is out of bounds", 35, 2, "Swift/StringIndexValidation.swift", 33, 2, 0xD2uLL, 0);
  }
  if (((a3 << 16) | 1uLL) >= 0x10000) {
    return (a3 << 16) | 1;
  }
  else {
    return (a3 << 16) | 3;
  }
}

BOOL _allASCII(_:)(uint64_t *a1, uint64_t a2)
{
  if (!a2) {
    return 1;
  }
  if ((uint64_t)(a2 & 0xFFFFFFFFFFFFFFF0) < 1)
  {
    uint64_t i = a1;
  }
  else
  {
    if (((a1[1] | *a1) & 0x8080808080808080) != 0) {
      return 0;
    }
    for (uint64_t i = a1 + 2; i < (uint64_t *)((char *)a1 + (a2 & 0xFFFFFFFFFFFFFFF0)); i += 2)
    {
      uint64_t v3 = *i;
      uint64_t v4 = i[1];
      if (((v4 | v3) & 0x8080808080808080) != 0) {
        return 0;
      }
    }
  }
  if (i < (uint64_t *)((char *)a1 + (a2 & 0xFFFFFFFFFFFFFFF8)))
  {
    if ((*i & 0x8080808080808080) != 0) {
      return 0;
    }
    ++i;
  }
  if (i < (uint64_t *)((char *)a1 + (a2 & 0xFFFFFFFFFFFFFFFCLL)))
  {
    if ((*(_DWORD *)i & 0x80808080) != 0) {
      return 0;
    }
    uint64_t i = (uint64_t *)((char *)i + 4);
  }
  if (i < (uint64_t *)((char *)a1 + (a2 & 0xFFFFFFFFFFFFFFFELL)))
  {
    if ((*(_WORD *)i & 0x8080) != 0) {
      return 0;
    }
    uint64_t i = (uint64_t *)((char *)i + 2);
  }
  return i >= (uint64_t *)((char *)a1 + a2) || (*(char *)i & 0x80000000) == 0;
}

uint64_t static UInt16.& infix(_:_:)(unsigned int a1, int a2)
{
  return a2 & a1;
}

BOOL static UInt16.== infix(_:_:)(__int16 a1, __int16 a2)
{
  return a1 == a2;
}

uint64_t validateUTF8(_:)(uint64_t *a1, uint64_t a2)
{
  if (_allASCII(_:)(a1, a2)) {
    return 1;
  }
  if (a1 && a2)
  {
    uint64_t v5 = 0;
    uint64_t v6 = (uint64_t *)((char *)a1 + a2);
    char v7 = 1;
    int v8 = a1;
    unint64_t v9 = a1;
    while (1)
    {
      int v11 = *(char *)v9;
      unint64_t v9 = (uint64_t *)((char *)v9 + 1);
      unsigned __int8 v10 = v11;
      if ((v11 & 0x80000000) == 0)
      {
        uint64_t v12 = 1;
        goto LABEL_8;
      }
      if ((v10 + 11) < 0xCDu) {
        goto LABEL_53;
      }
      if (v10 <= 0xDFu)
      {
        if (v9 == v6 || (*(unsigned char *)v9 & 0xC0) != 0x80) {
          goto LABEL_53;
        }
        char v7 = 0;
        unint64_t v9 = (uint64_t *)((char *)v8 + 2);
        uint64_t v12 = 2;
      }
      else
      {
        if (v10 == 224)
        {
          if (v9 == v6
            || ((unint64_t v13 = (uint64_t *)((char *)v8 + 2), (*((unsigned char *)v8 + 1) + 64) >= 0xE0u)
              ? (BOOL v14 = v13 == v6)
              : (BOOL v14 = 1),
                v14))
          {
LABEL_53:
            int v17 = swift_allocError((uint64_t)&unk_1EC9FFB80, (uint64_t)&protocol witness table for UTF8ValidationError, 0, 0);
            swift_willThrow();
            swift_errorRelease(v17);
            uint64_t v18 = specialized Collection.subscript.getter(v5, (uint64_t)a1, a2);
            return findInvalidRange #1 (_:) in validateUTF8(_:)(v18, v19, v20, v21);
          }
          goto LABEL_37;
        }
        if (v10 <= 0xECu) {
          goto LABEL_33;
        }
        if (v10 == 237)
        {
          if (v9 == v6) {
            goto LABEL_53;
          }
          unsigned int v15 = *((unsigned __int8 *)v8 + 1);
          if (v15 > 0x9F) {
            goto LABEL_53;
          }
LABEL_35:
          if ((v15 & 0xC0) != 0x80) {
            goto LABEL_53;
          }
          unint64_t v13 = (uint64_t *)((char *)v8 + 2);
          if ((uint64_t *)((char *)v8 + 2) == v6) {
            goto LABEL_53;
          }
LABEL_37:
          if ((*(unsigned char *)v13 & 0xC0) != 0x80) {
            goto LABEL_53;
          }
          char v7 = 0;
          unint64_t v9 = (uint64_t *)((char *)v8 + 3);
          uint64_t v12 = 3;
          goto LABEL_8;
        }
        if ((v10 + 16) >= 0xFEu)
        {
LABEL_33:
          if (v9 == v6) {
            goto LABEL_53;
          }
          LOBYTE(v15) = *((unsigned char *)v8 + 1);
          goto LABEL_35;
        }
        if (v10 == 240)
        {
          if (v9 == v6 || (*((unsigned char *)v8 + 1) + 64) < 0xD0u) {
            goto LABEL_53;
          }
        }
        else
        {
          if ((v10 + 12) >= 0xFDu)
          {
            if (v9 == v6) {
              goto LABEL_53;
            }
            LOBYTE(v16) = *((unsigned char *)v8 + 1);
          }
          else
          {
            if (v9 == v6) {
              goto LABEL_53;
            }
            unsigned int v16 = *((unsigned __int8 *)v8 + 1);
            if (v16 > 0x8F) {
              goto LABEL_53;
            }
          }
          if ((v16 & 0xC0) != 0x80) {
            goto LABEL_53;
          }
        }
        if ((uint64_t *)((char *)v8 + 2) == v6
          || (*((unsigned char *)v8 + 2) & 0xC0) != 0x80
          || (uint64_t *)((char *)v8 + 3) == v6
          || (*((unsigned char *)v8 + 3) & 0xC0) != 0x80)
        {
          goto LABEL_53;
        }
        char v7 = 0;
        unint64_t v9 = (uint64_t *)((char *)v8 + 4);
        uint64_t v12 = 4;
      }
LABEL_8:
      v5 += v12;
      int v8 = v9;
      if (v9 == v6) {
        return v7 & 1;
      }
    }
  }
  char v7 = 1;
  return v7 & 1;
}

uint64_t repairUTF8(_:firstKnownBrokenRange:)(char *a1, int64_t a2, int64_t a3, int64_t a4)
{
  uint64_t v52 = 0;
  unint64_t v53 = 0xE000000000000000;
  if (__OFADD__(a2, 15))
  {
    __break(1u);
    goto LABEL_121;
  }
  int64_t v7 = a2;
  _StringGuts.reserveCapacity(_:)(a2 + 15);
  if (a3 < 0) {
    goto LABEL_102;
  }
  while (1)
  {
    if (v7 < a3) {
      goto LABEL_110;
    }
    uint64_t v8 = v52 & 0xFFFFFFFFFFFFLL;
    if ((v53 & 0x2000000000000000) != 0) {
      uint64_t v8 = HIBYTE(v53) & 0xF;
    }
    BOOL v9 = __OFADD__(v8, v7);
    uint64_t v10 = v8 + v7;
    if (v9)
    {
      __break(1u);
LABEL_112:
      __break(1u);
LABEL_113:
      __break(1u);
LABEL_114:
      unint64_t v51 = 1860;
      goto LABEL_109;
    }
    if (__OFADD__(v10, 3)) {
      goto LABEL_112;
    }
    _StringGuts.reserveCapacity(_:)(v10 + 3);
    if (a3 && !a1) {
      goto LABEL_122;
    }
    uint64_t v11 = v53 & 0xFFFFFFFFFFFFFFFLL;
    uint64_t v12 = (v53 & 0xFFFFFFFFFFFFFFFLL) + 32;
    specialized UnsafeMutablePointer.initialize(from:count:)(a1, a3, (char *)(v12 + (*(void *)((v53 & 0xFFFFFFFFFFFFFFFLL) + 0x18) & 0xFFFFFFFFFFFFLL)));
    uint64_t v13 = *(void *)(v11 + 24) & 0xFFFFFFFFFFFFLL;
    if (__OFADD__(v13, a3)) {
      goto LABEL_113;
    }
    __StringStorage._updateCountAndFlags(newCount:newIsASCII:)(v13 + a3, 0);
    uint64_t v52 = *(void *)(v11 + 24);
    size_t v54 = 3;
    uint64_t v55 = 12435439;
    specialized closure #1 in Unicode.Scalar.withUTF8CodeUnits<A>(_:)((char *)&v55, &v54, &v52);
    if (v7 < a4) {
      goto LABEL_102;
    }
    if (a4 < 0) {
      goto LABEL_114;
    }
    size_t v14 = v7 - a4;
    if (v7 - a4 < 0) {
      _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeBufferPointer with negative count", 39, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x53FuLL, 0);
    }
    uint64_t v15 = (uint64_t)&a1[a4];
    if (!v14) {
      break;
    }
    unsigned int v16 = &a1[a4];
    if ((v14 & 0xFFFFFFFFFFFFFFF0) != 0)
    {
      if (((*(void *)(v15 + 8) | *(void *)v15) & 0x8080808080808080) != 0) {
        goto LABEL_32;
      }
      unsigned int v16 = &a1[a4 + 16];
      while ((unint64_t)v16 < v15 + (v14 & 0xFFFFFFFFFFFFFFF0))
      {
        uint64_t v17 = *(void *)v16;
        uint64_t v18 = *((void *)v16 + 1);
        v16 += 16;
        if (((v18 | v17) & 0x8080808080808080) != 0) {
          goto LABEL_32;
        }
      }
    }
    if ((unint64_t)v16 < v15 + (v14 & 0xFFFFFFFFFFFFFFF8))
    {
      if ((*(void *)v16 & 0x8080808080808080) != 0) {
        goto LABEL_32;
      }
      v16 += 8;
    }
    if ((unint64_t)v16 < v15 + (v14 & 0xFFFFFFFFFFFFFFFCLL))
    {
      if ((*(_DWORD *)v16 & 0x80808080) != 0) {
        goto LABEL_32;
      }
      v16 += 4;
    }
    if ((unint64_t)v16 >= v15 + (v14 & 0xFFFFFFFFFFFFFFFELL)) {
      goto LABEL_30;
    }
    if ((*(_WORD *)v16 & 0x8080) == 0)
    {
      v16 += 2;
LABEL_30:
      if ((unint64_t)v16 >= v15 + v14 || (*v16 & 0x80000000) == 0) {
        break;
      }
    }
LABEL_32:
    if (v7 == a4) {
      break;
    }
    uint64_t v19 = 0;
    uint64_t v20 = &a1[v7];
    uint64_t v21 = (unsigned __int8 *)v15;
    unint64_t v22 = (unsigned __int8 *)v15;
    while (1)
    {
      int v24 = (char)*v22++;
      unsigned __int8 v23 = v24;
      if ((v24 & 0x80000000) == 0)
      {
        uint64_t v25 = 1;
        goto LABEL_36;
      }
      if ((v23 + 11) <= 0xCCu) {
        goto LABEL_79;
      }
      if (v23 <= 0xDFu)
      {
        if (v22 == (unsigned __int8 *)v20 || (*v22 & 0xC0) != 0x80) {
          goto LABEL_79;
        }
        unint64_t v22 = v21 + 2;
        uint64_t v25 = 2;
        goto LABEL_36;
      }
      if (v23 == 224) {
        break;
      }
      if (v23 <= 0xECu) {
        goto LABEL_61;
      }
      if (v23 == 237)
      {
        if (v22 == (unsigned __int8 *)v20) {
          goto LABEL_79;
        }
        unsigned int v28 = v21[1];
        if (v28 > 0x9F) {
          goto LABEL_79;
        }
LABEL_63:
        if ((v28 & 0xC0) != 0x80) {
          goto LABEL_79;
        }
        __int16 v26 = (char *)(v21 + 2);
        if (v21 + 2 == (unsigned __int8 *)v20) {
          goto LABEL_79;
        }
LABEL_65:
        if ((*v26 & 0xC0) != 0x80) {
          goto LABEL_79;
        }
        unint64_t v22 = v21 + 3;
        uint64_t v25 = 3;
        goto LABEL_36;
      }
      if ((v23 + 16) >= 0xFEu)
      {
LABEL_61:
        if (v22 == (unsigned __int8 *)v20) {
          goto LABEL_79;
        }
        LOBYTE(v28) = v21[1];
        goto LABEL_63;
      }
      if (v23 == 240)
      {
        if (v22 == (unsigned __int8 *)v20 || (v21[1] + 64) < 0xD0u) {
          goto LABEL_79;
        }
      }
      else
      {
        if ((v23 + 12) >= 0xFDu)
        {
          if (v22 == (unsigned __int8 *)v20) {
            goto LABEL_79;
          }
          LOBYTE(v29) = v21[1];
        }
        else
        {
          if (v22 == (unsigned __int8 *)v20) {
            goto LABEL_79;
          }
          unsigned int v29 = v21[1];
          if (v29 > 0x8F) {
            goto LABEL_79;
          }
        }
        if ((v29 & 0xC0) != 0x80) {
          goto LABEL_79;
        }
      }
      if (v21 + 2 == (unsigned __int8 *)v20
        || (v21[2] & 0xC0) != 0x80
        || v21 + 3 == (unsigned __int8 *)v20
        || (v21[3] & 0xC0) != 0x80)
      {
        goto LABEL_79;
      }
      unint64_t v22 = v21 + 4;
      uint64_t v25 = 4;
LABEL_36:
      v19 += v25;
      uint64_t v21 = v22;
      if (v22 == (unsigned __int8 *)v20) {
        goto LABEL_103;
      }
    }
    if (v22 != (unsigned __int8 *)v20)
    {
      __int16 v26 = (char *)(v21 + 2);
      if ((v21[1] + 64) >= 0xE0u && v26 != v20) {
        goto LABEL_65;
      }
    }
LABEL_79:
    char v30 = swift_allocError((uint64_t)&unk_1EC9FFB80, (uint64_t)&protocol witness table for UTF8ValidationError, 0, 0);
    swift_willThrow();
    swift_errorRelease(v30);
    uint64_t v31 = specialized Collection.subscript.getter(v19, v15, v14);
    uint64_t v35 = v31;
    uint64_t v36 = v32;
    uint64_t v37 = v33;
    uint64_t v38 = v34;
    uint64_t v39 = v31;
    if (v31 != v32)
    {
      specialized Slice.subscript.getter(v31, v31, v32, v33, v34);
      uint64_t v39 = v35 + 1;
      if (__OFADD__(v35, 1))
      {
        unint64_t v51 = 1525;
        goto LABEL_109;
      }
    }
    uint64_t v40 = 0;
    uint64_t v41 = v36 + v35 - v39;
    if (v36 <= v39) {
      uint64_t v42 = v39;
    }
    else {
      uint64_t v42 = v36;
    }
    if (v38 <= v39) {
      uint64_t v43 = v39;
    }
    else {
      uint64_t v43 = v38;
    }
    uint64_t v44 = v43 - v39;
    uint64_t v45 = v42 - v39;
    while (1)
    {
      if (v36 - v39 == v40) {
        goto LABEL_98;
      }
      if (v39 < v35)
      {
        unint64_t v51 = 1812;
        goto LABEL_109;
      }
      if (v45 == v40)
      {
        unint64_t v51 = 1813;
        goto LABEL_109;
      }
      if (v39 < 0)
      {
        unint64_t v51 = 1781;
        goto LABEL_109;
      }
      if (v44 == v40)
      {
        unint64_t v51 = 1782;
        goto LABEL_109;
      }
      if ((*(unsigned char *)(v37 + v39 + v40) & 0xC0) != 0x80) {
        break;
      }
      uint64_t v46 = v35 + v40++;
      if (__OFADD__(v46, 1))
      {
        __break(1u);
LABEL_110:
        unint64_t v51 = 1861;
LABEL_109:
        _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, v51, 0);
      }
    }
    uint64_t v41 = v35 + v40;
LABEL_98:
    if (v41 < v35) {
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/ClosedRange.swift", 23, 2, 0x15BuLL, 0);
    }
    uint64_t v47 = v41 + 1;
    if (__OFADD__(v41, 1))
    {
      __break(1u);
LABEL_118:
      unint64_t v51 = 1820;
      goto LABEL_109;
    }
    if (v36 < v47) {
      goto LABEL_118;
    }
    a3 = _legacyNarrowIllegalRange #1 (buf:) in validateUTF8(_:)(v35, v47, v37, v38);
    a4 = v48;
    a1 = (char *)v15;
    int64_t v7 = v14;
    if (a3 < 0) {
LABEL_102:
    }
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
  }
LABEL_103:
  specialized UnsafeMutablePointer.initialize(from:count:)((char *)v15, v14, (char *)(v12 + (*(void *)(v11 + 24) & 0xFFFFFFFFFFFFLL)));
  uint64_t v49 = *(void *)(v11 + 24) & 0xFFFFFFFFFFFFLL;
  if (__OFADD__(v49, v14))
  {
LABEL_121:
    __break(1u);
LABEL_122:
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeBufferPointer has a nil start and nonzero count", 53, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x541uLL, 0);
  }
  __StringStorage._updateCountAndFlags(newCount:newIsASCII:)(v49 + v14, 0);
  return *(void *)(v11 + 24);
}

Swift::Void __swiftcall __StringStorage._updateCountAndFlags(newCount:newIsASCII:)(Swift::Int newCount, Swift::Bool newIsASCII)
{
  if (newIsASCII) {
    unint64_t v3 = newCount | 0xC000000000000000;
  }
  else {
    unint64_t v3 = newCount;
  }
  *(void *)(v2 + 24) = v3 | 0x3000000000000000;
  *(unsigned char *)(v2 + 32 + (v3 & 0xFFFFFFFFFFFFLL)) = 0;
  uint64_t v4 = *(void *)(v2 + 16);
  if (v4 < 0)
  {
    uint64_t v5 = (uint64_t *)((v2 + 32 + (v4 & 0xFFFFFFFFFFFFLL) + 7) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v6 = *v5;
    *uint64_t v5 = 0;
    swift_release(v6);
  }
}

uint64_t static String._uncheckedFromUTF16(_:)(unsigned __int16 *a1, uint64_t a2)
{
  uint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a2 & ~(a2 >> 63), 0, (uint64_t)&_swiftEmptyArrayStorage);
  uint64_t v6 = (uint8x16_t *)v4;
  unsigned int v7 = 0;
  unsigned __int8 v8 = 0;
  if (a1) {
    BOOL v9 = &a1[a2];
  }
  else {
    BOOL v9 = 0;
  }
  unsigned int v42 = 0;
  unsigned __int8 v43 = 0;
  uint64_t v10 = &type metadata for Unicode.UTF16.ForwardParser;
  while (v8)
  {
    if ((v7 & 0xF800) != 0xD800)
    {
      unsigned __int8 v23 = v10;
      lazy protocol witness table accessor for type Unicode.UTF16.ForwardParser and conformance Unicode.UTF16.ForwardParser((uint64_t)v4, (uint64_t)v10, v5);
      uint64_t v40 = protocol witness for _UTFParser._buffer.modify in conformance Unicode.UTF8.ReverseParser();
      specialized RangeReplaceableCollection.remove(at:)(0);
      uint64_t v4 = (__objc2_class **)((uint64_t (*)(char *, void))v40)(v41, 0);
      uint64_t v10 = v23;
      unsigned int v7 = (unsigned __int16)v7;
      char v17 = 1;
      goto LABEL_25;
    }
    if (!a1) {
      goto LABEL_16;
    }
    uint64_t v12 = a1;
    if (a1 == v9) {
      goto LABEL_16;
    }
LABEL_12:
    unsigned int v13 = v8;
    if (v8 >= 0x20u) {
      _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UIntBuffer.swift", 22, 2, 0xBEuLL, 0);
    }
    a1 = v12 + 1;
    unsigned int v7 = (*v12 << v8) | ((-65535 << v8) - 1) & v7;
    v8 += 16;
    if (v13 <= 0xF && a1 != v9)
    {
      a1 = v12 + 2;
      unsigned int v7 = (v12[1] << v8) | ((0x10000 << v13) - 1) & v7;
      unsigned __int8 v8 = v13 + 32;
    }
LABEL_16:
    unsigned int v14 = v7 & 0xFC00FC00;
    if ((v7 & 0xFC00FC00) == 0xDC00D800) {
      char v15 = 32;
    }
    else {
      char v15 = 16;
    }
    unsigned __int8 v43 = v8 - v15;
    if (v14 == -603924480) {
      char v16 = 32;
    }
    else {
      char v16 = 16;
    }
    unsigned int v42 = (unint64_t)v7 >> v16;
    if (v14 == -603924480)
    {
      char v17 = 0;
      goto LABEL_25;
    }
    unint64_t v25 = v6[1].u64[0];
    unint64_t v24 = v6[1].u64[1];
    unint64_t v26 = v24 >> 1;
    unint64_t v27 = v25 + 1;
    if (v24 >> 1 <= v25)
    {
      uint64_t v34 = v10;
      uint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((__objc2_class **)(v24 > 1), v25 + 1, 1, (uint64_t)v6);
      uint64_t v10 = v34;
      uint64_t v6 = (uint8x16_t *)v4;
      unint64_t v24 = (unint64_t)v4[3];
      unint64_t v26 = v24 >> 1;
    }
    v6[1].i64[0] = v27;
    v6[2].i8[v25] = -17;
    unint64_t v28 = v25 + 2;
    if (v26 <= v27)
    {
      uint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((__objc2_class **)(v24 > 1), v25 + 2, 1, (uint64_t)v6);
      uint64_t v10 = &type metadata for Unicode.UTF16.ForwardParser;
      unint64_t v28 = v25 + 2;
      unint64_t v27 = v25 + 1;
      uint64_t v6 = (uint8x16_t *)v4;
      unint64_t v24 = (unint64_t)v4[3];
      unint64_t v26 = v24 >> 1;
    }
    v6[1].i64[0] = v28;
    v6[2].i8[v27] = -65;
    int64_t v29 = v25 + 3;
    if (v26 <= v28)
    {
      unint64_t v30 = v28;
      uint64_t v31 = v10;
      uint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((__objc2_class **)(v24 > 1), v29, 1, (uint64_t)v6);
      uint64_t v10 = v31;
      unint64_t v28 = v30;
      uint64_t v6 = (uint8x16_t *)v4;
    }
    v6[1].i64[0] = v29;
    v6[2].i8[v28] = -67;
LABEL_6:
    unsigned __int8 v8 = v43;
    unsigned int v7 = v42;
  }
  if (a1 && a1 != v9)
  {
    unsigned int v11 = *a1;
    uint64_t v12 = a1 + 1;
    if ((v11 & 0xF800) == 0xD800)
    {
      unsigned int v7 = v7 & 0xFFFF0000 | v11;
      unsigned __int8 v8 = 16;
      ++a1;
      if (v12 == v9) {
        goto LABEL_16;
      }
      goto LABEL_12;
    }
    char v17 = 1;
    ++a1;
    unsigned int v7 = v11;
LABEL_25:
    if ((unsigned __int16)v7 < 0x80u)
    {
      unsigned int v18 = (v7 + 1);
      if (!v18) {
        goto LABEL_6;
      }
      goto LABEL_27;
    }
    int v22 = (v7 & 0x3F) << 8;
    if ((unsigned __int16)v7 < 0x800u)
    {
      unsigned int v18 = (v22 | ((unsigned __int16)v7 >> 6)) + 33217;
      goto LABEL_27;
    }
    if ((v7 & 0xF800) != 0xD800)
    {
      unsigned int v32 = ((v22 | ((unsigned __int16)v7 >> 6) & 0x3F) << 8) | ((unsigned __int16)v7 >> 12);
LABEL_47:
      int v33 = 8487393;
LABEL_48:
      unsigned int v18 = v32 + v33;
      goto LABEL_27;
    }
    if ((v17 & 1) == 0)
    {
      unsigned int v35 = ((v7 & 0x3FF) << 10) | HIWORD(v7) & 0x3FF;
      unsigned int v32 = ((v35 + 0x10000) >> 4) & 0x3F00 | ((v35 + 0x10000) >> 18) | (((v35 >> 6) & 0x3F | (((v35 + 0x10000) & 0x3F) << 8)) << 16);
      int v33 = -2122219023;
      goto LABEL_48;
    }
    if ((unsigned __int16)v7 >= 0x80u)
    {
      int v36 = (v7 & 0x3F) << 8;
      if ((unsigned __int16)v7 >= 0x800u)
      {
        unsigned int v32 = ((unsigned __int16)v7 >> 12) | ((v36 | ((unsigned __int16)v7 >> 6) & 0x3F) << 8);
        goto LABEL_47;
      }
      unsigned int v18 = (v36 | ((unsigned __int16)v7 >> 6)) + 33217;
    }
    else
    {
      unsigned int v18 = (unsigned __int16)v7 + 1;
    }
LABEL_27:
    unint64_t v19 = v6[1].u64[0];
    do
    {
      unint64_t v20 = v6[1].u64[1];
      if (v19 >= v20 >> 1)
      {
        uint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((__objc2_class **)(v20 > 1), v19 + 1, 1, (uint64_t)v6);
        uint64_t v10 = &type metadata for Unicode.UTF16.ForwardParser;
        uint64_t v6 = (uint8x16_t *)v4;
      }
      v6[1].i64[0] = v19 + 1;
      v6[2].i8[v19++] = v18 - 1;
      BOOL v21 = v18 >= 0x100;
      v18 >>= 8;
    }
    while (v21);
    goto LABEL_6;
  }
  uint64_t v37 = v6[1].i64[0];
  swift_bridgeObjectRetain((unint64_t)v6);
  uint64_t v38 = specialized static String._uncheckedFromUTF8(_:)(v6 + 2, v37);
  swift_bridgeObjectRelease_n((uint64_t)v6, 2);
  return v38;
}

uint64_t specialized static String._slowFromCodeUnits<A, B>(_:encoding:repair:)(uint64_t a1, char a2)
{
  int64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = (uint8x16_t *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4, 0, (uint64_t)&_swiftEmptyArrayStorage);
  if (!v4) {
    goto LABEL_33;
  }
  int64_t v6 = 0;
  char v7 = 0;
  uint64_t v8 = a1 + 32;
  do
  {
    if (v6 <= v4) {
      int64_t v9 = v4;
    }
    else {
      int64_t v9 = v6;
    }
    while (1)
    {
      if (v6 == v9) {
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Index out of range", 18, 2, "Swift/ContiguousArrayBuffer.swift", 33, 2, 0x2A3uLL, 0);
      }
      unsigned int v10 = *(_DWORD *)(v8 + 4 * v6++);
      unsigned int v11 = HIWORD(v10);
      if (HIWORD(v10) > 0x10u || (v10 & 0xFFFFF800) == 55296) {
        break;
      }
      if (v10 >= 0x80)
      {
        int v17 = (v10 & 0x3F) << 8;
        if (v10 >= 0x800)
        {
          unsigned int v18 = v10 >> 12;
          int v19 = (v17 | (v10 >> 6) & 0x3F) << 8;
          int v20 = (((v19 | (v10 >> 12) & 0x3F) << 8) | (v10 >> 18)) - 2122219023;
          int v21 = (v19 | v18) + 8487393;
          if (v11) {
            unsigned int v13 = v20;
          }
          else {
            unsigned int v13 = v21;
          }
        }
        else
        {
          unsigned int v13 = (v17 | (v10 >> 6)) + 33217;
        }
      }
      else
      {
        unsigned int v13 = v10 + 1;
      }
      unint64_t v14 = v5[1].u64[0];
      do
      {
        unint64_t v15 = v5[1].u64[1];
        if (v14 >= v15 >> 1) {
          uint64_t v5 = (uint8x16_t *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((__objc2_class **)(v15 > 1), v14 + 1, 1, (uint64_t)v5);
        }
        v5[1].i64[0] = v14 + 1;
        v5[2].i8[v14++] = v13 - 1;
        BOOL v16 = v13 >= 0x100;
        v13 >>= 8;
      }
      while (v16);
      if (v6 == v4) {
        goto LABEL_35;
      }
    }
    unint64_t v23 = v5[1].u64[0];
    unint64_t v22 = v5[1].u64[1];
    unint64_t v24 = v22 >> 1;
    unint64_t v25 = v23 + 1;
    if (v22 >> 1 <= v23)
    {
      uint64_t v5 = (uint8x16_t *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((__objc2_class **)(v22 > 1), v23 + 1, 1, (uint64_t)v5);
      unint64_t v22 = v5[1].u64[1];
      unint64_t v24 = v22 >> 1;
    }
    v5[1].i64[0] = v25;
    v5[2].i8[v23] = -17;
    unint64_t v26 = v23 + 2;
    if (v24 <= v25)
    {
      uint64_t v5 = (uint8x16_t *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((__objc2_class **)(v22 > 1), v23 + 2, 1, (uint64_t)v5);
      unint64_t v22 = v5[1].u64[1];
      unint64_t v24 = v22 >> 1;
    }
    v5[1].i64[0] = v26;
    v5[2].i8[v25] = -65;
    if (v24 <= v26) {
      uint64_t v5 = (uint8x16_t *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((__objc2_class **)(v22 > 1), v23 + 3, 1, (uint64_t)v5);
    }
    v5[1].i64[0] = v23 + 3;
    v5[2].i8[v26] = -67;
    char v7 = 1;
  }
  while (v6 != v4);
LABEL_35:
  if ((v7 & 1) != 0 && (a2 & 1) == 0)
  {
    swift_bridgeObjectRelease((uint64_t)v5);
    return 0;
  }
  else
  {
LABEL_33:
    uint64_t v27 = v5[1].i64[0];
    swift_bridgeObjectRetain((unint64_t)v5);
    uint64_t v28 = specialized static String._uncheckedFromUTF8(_:)(v5 + 2, v27);
    swift_bridgeObjectRelease_n((uint64_t)v5, 2);
  }
  return v28;
}

{
  int64_t v4;
  uint8x16_t *v5;
  int64_t v6;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  int64_t v10;
  int64_t v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __objc2_class **v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t v24;
  __objc2_class **v25;
  uint64_t v26;
  uint64_t v27;
  __objc2_class **v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __objc2_class **v32;
  uint64_t v33;
  uint64_t v34;
  char v36;
  char v37;

  int64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = (uint8x16_t *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4, 0, (uint64_t)&_swiftEmptyArrayStorage);
  if (!v4) {
    goto LABEL_22;
  }
  int v36 = a2;
  uint64_t v37 = 0;
  int64_t v6 = 0;
  char v7 = a1 + 32;
  do
  {
    uint64_t v8 = 0;
    if (v6 <= v4) {
      int64_t v9 = v4;
    }
    else {
      int64_t v9 = v6;
    }
    unsigned int v10 = v6 - v9;
    unsigned int v11 = v4;
    uint64_t v12 = v7;
    while (1)
    {
      if (!(v10 + v8)) {
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Index out of range", 18, 2, "Swift/ContiguousArrayBuffer.swift", 33, 2, 0x2A3uLL, 0);
      }
      unsigned int v13 = *(char *)(v12 + v6);
      unint64_t v15 = v5[1].u64[0];
      unint64_t v14 = v5[1].u64[1];
      BOOL v16 = v14 >> 1;
      int v17 = v15 + 1;
      if (v13 < 0) {
        break;
      }
      if (v16 <= v15)
      {
        unsigned int v18 = (uint64_t)v5;
        int v19 = v7;
        int v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((__objc2_class **)(v14 > 1), v15 + 1, 1, v18);
        char v7 = v19;
        uint64_t v5 = (uint8x16_t *)v20;
      }
      v5[1].i64[0] = v17;
      v5[2].i8[v15] = v13;
      ++v8;
      ++v12;
      if (v6 == --v11) {
        goto LABEL_24;
      }
    }
    if (v16 <= v15)
    {
      unint64_t v23 = (uint64_t)v5;
      unint64_t v24 = v7;
      unint64_t v25 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((__objc2_class **)(v14 > 1), v15 + 1, 1, v23);
      char v7 = v24;
      uint64_t v5 = (uint8x16_t *)v25;
      unint64_t v14 = (unint64_t)v25[3];
      BOOL v16 = v14 >> 1;
    }
    v5[1].i64[0] = v17;
    v5[2].i8[v15] = -17;
    int v21 = v15 + 2;
    if (v16 <= v17)
    {
      unint64_t v26 = (uint64_t)v5;
      uint64_t v27 = v7;
      uint64_t v28 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((__objc2_class **)(v14 > 1), v15 + 2, 1, v26);
      char v7 = v27;
      int v21 = v15 + 2;
      uint64_t v5 = (uint8x16_t *)v28;
      unint64_t v14 = (unint64_t)v28[3];
      BOOL v16 = v14 >> 1;
    }
    v5[1].i64[0] = v21;
    v5[2].i8[v17] = -65;
    if (v16 <= v21)
    {
      int64_t v29 = v21;
      unint64_t v30 = (uint64_t)v5;
      uint64_t v31 = v7;
      unsigned int v32 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((__objc2_class **)(v14 > 1), v15 + 3, 1, v30);
      char v7 = v31;
      int v21 = v29;
      uint64_t v5 = (uint8x16_t *)v32;
    }
    unint64_t v22 = v6 + 1;
    v6 += 1 + v8;
    v5[1].i64[0] = v15 + 3;
    v5[2].i8[v21] = -67;
    uint64_t v37 = 1;
  }
  while (v22 != v11);
LABEL_24:
  if ((v37 & 1) != 0 && (v36 & 1) == 0)
  {
    swift_bridgeObjectRelease((uint64_t)v5);
    return 0;
  }
  else
  {
LABEL_22:
    int v33 = v5[1].i64[0];
    swift_bridgeObjectRetain((unint64_t)v5);
    uint64_t v34 = specialized static String._uncheckedFromUTF8(_:)(v5 + 2, v33);
    swift_bridgeObjectRelease_n((uint64_t)v5, 2);
  }
  return v34;
}

uint64_t specialized static String._slowFromCodeUnits<A, B>(_:encoding:repair:)(char *a1, uint64_t a2, char a3)
{
  int64_t v6 = (uint8x16_t *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a2 & ~(a2 >> 63), 0, (uint64_t)&_swiftEmptyArrayStorage);
  char v7 = 0;
  if (!a1 || !a2) {
    goto LABEL_20;
  }
  uint64_t v8 = &a1[a2];
  do
  {
    int64_t v9 = a1;
    while (1)
    {
      int v11 = *v9++;
      __int8 v10 = v11;
      unint64_t v13 = v6[1].u64[0];
      unint64_t v12 = v6[1].u64[1];
      unint64_t v14 = v12 >> 1;
      unint64_t v15 = v13 + 1;
      if (v11 < 0) {
        break;
      }
      if (v14 <= v13) {
        int64_t v6 = (uint8x16_t *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((__objc2_class **)(v12 > 1), v13 + 1, 1, (uint64_t)v6);
      }
      v6[1].i64[0] = v15;
      v6[2].i8[v13] = v10;
      a1 = v9;
      if (v9 == v8) {
        goto LABEL_17;
      }
    }
    if (v14 <= v13)
    {
      int64_t v6 = (uint8x16_t *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((__objc2_class **)(v12 > 1), v13 + 1, 1, (uint64_t)v6);
      unint64_t v12 = v6[1].u64[1];
      unint64_t v14 = v12 >> 1;
    }
    v6[1].i64[0] = v15;
    v6[2].i8[v13] = -17;
    unint64_t v16 = v13 + 2;
    if (v14 <= v15)
    {
      int v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((__objc2_class **)(v12 > 1), v13 + 2, 1, (uint64_t)v6);
      unint64_t v16 = v13 + 2;
      int64_t v6 = (uint8x16_t *)v17;
      unint64_t v12 = (unint64_t)v17[3];
      unint64_t v14 = v12 >> 1;
    }
    v6[1].i64[0] = v16;
    v6[2].i8[v15] = -65;
    if (v14 <= v16)
    {
      unint64_t v18 = v16;
      int v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((__objc2_class **)(v12 > 1), v13 + 3, 1, (uint64_t)v6);
      unint64_t v16 = v18;
      int64_t v6 = (uint8x16_t *)v19;
    }
    ++a1;
    v6[1].i64[0] = v13 + 3;
    v6[2].i8[v16] = -67;
    char v7 = 1;
  }
  while (a1 != v8);
LABEL_17:
  if ((v7 & 1) != 0 && (a3 & 1) == 0)
  {
    swift_bridgeObjectRelease((uint64_t)v6);
    return 0;
  }
  else
  {
LABEL_20:
    uint64_t v21 = v6[1].i64[0];
    swift_bridgeObjectRetain((unint64_t)v6);
    uint64_t v20 = specialized static String._uncheckedFromUTF8(_:)(v6 + 2, v21);
    swift_bridgeObjectRelease_n((uint64_t)v6, 2);
  }
  return v20;
}

uint64_t specialized static String._slowFromCodeUnits<A, B>(_:encoding:repair:)(unsigned __int16 *a1, uint64_t a2, char a3)
{
  int64_t v6 = (uint8x16_t *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a2 & ~(a2 >> 63), 0, (uint64_t)&_swiftEmptyArrayStorage);
  unsigned int v7 = 0;
  unsigned __int8 v8 = 0;
  uint64_t v9 = 0;
  if (a1) {
    __int8 v10 = &a1[a2];
  }
  else {
    __int8 v10 = 0;
  }
  unsigned int v50 = 0;
  unsigned __int8 v51 = 0;
  int v11 = &type metadata for Unicode.UTF16.ForwardParser;
  while (v8)
  {
    if ((v7 & 0xF800) != 0xD800)
    {
      unint64_t v25 = v11;
      unsigned int v47 = v9;
      lazy protocol witness table accessor for type Unicode.UTF16.ForwardParser and conformance Unicode.UTF16.ForwardParser(v9, (uint64_t)v11, v5);
      uint64_t v45 = protocol witness for _UTFParser._buffer.modify in conformance Unicode.UTF8.ReverseParser();
      specialized RangeReplaceableCollection.remove(at:)(0);
      ((void (*)(char *, void))v45)(v49, 0);
      uint64_t v9 = v47;
      int v11 = v25;
      unsigned int v7 = (unsigned __int16)v7;
      int v18 = 1;
      goto LABEL_25;
    }
    if (!a1) {
      goto LABEL_16;
    }
    unint64_t v13 = a1;
    if (a1 == v10) {
      goto LABEL_16;
    }
LABEL_12:
    unsigned int v14 = v8;
    if (v8 >= 0x20u) {
      _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UIntBuffer.swift", 22, 2, 0xBEuLL, 0);
    }
    a1 = v13 + 1;
    unsigned int v7 = (*v13 << v8) | ((-65535 << v8) - 1) & v7;
    v8 += 16;
    if (v14 <= 0xF && a1 != v10)
    {
      a1 = v13 + 2;
      unsigned int v7 = (v13[1] << v8) | ((0x10000 << v14) - 1) & v7;
      unsigned __int8 v8 = v14 + 32;
    }
LABEL_16:
    unsigned int v15 = v7 & 0xFC00FC00;
    if ((v7 & 0xFC00FC00) == 0xDC00D800) {
      char v16 = 32;
    }
    else {
      char v16 = 16;
    }
    unsigned __int8 v51 = v8 - v16;
    if (v15 == -603924480) {
      char v17 = 32;
    }
    else {
      char v17 = 16;
    }
    unsigned int v50 = (unint64_t)v7 >> v17;
    if (v15 == -603924480)
    {
      int v18 = 0;
      goto LABEL_25;
    }
    unint64_t v27 = v6[1].u64[0];
    unint64_t v26 = v6[1].u64[1];
    unint64_t v28 = v26 >> 1;
    unint64_t v29 = v27 + 1;
    if (v26 >> 1 <= v27)
    {
      uint64_t v37 = v11;
      uint64_t v38 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((__objc2_class **)(v26 > 1), v27 + 1, 1, (uint64_t)v6);
      int v11 = v37;
      int64_t v6 = (uint8x16_t *)v38;
      unint64_t v26 = (unint64_t)v38[3];
      unint64_t v28 = v26 >> 1;
    }
    v6[1].i64[0] = v29;
    v6[2].i8[v27] = -17;
    unint64_t v30 = v27 + 2;
    if (v28 <= v29)
    {
      uint64_t v39 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((__objc2_class **)(v26 > 1), v27 + 2, 1, (uint64_t)v6);
      int v11 = &type metadata for Unicode.UTF16.ForwardParser;
      unint64_t v30 = v27 + 2;
      unint64_t v29 = v27 + 1;
      int64_t v6 = (uint8x16_t *)v39;
      unint64_t v26 = (unint64_t)v39[3];
      unint64_t v28 = v26 >> 1;
    }
    v6[1].i64[0] = v30;
    v6[2].i8[v29] = -65;
    int64_t v31 = v27 + 3;
    if (v28 <= v30)
    {
      unint64_t v32 = v30;
      int v33 = v11;
      uint64_t v34 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((__objc2_class **)(v26 > 1), v31, 1, (uint64_t)v6);
      int v11 = v33;
      unint64_t v30 = v32;
      int64_t v6 = (uint8x16_t *)v34;
    }
    v6[1].i64[0] = v31;
    v6[2].i8[v30] = -67;
    uint64_t v9 = 1;
LABEL_6:
    unsigned __int8 v8 = v51;
    unsigned int v7 = v50;
  }
  if (a1 && a1 != v10)
  {
    unsigned int v12 = *a1;
    unint64_t v13 = a1 + 1;
    if ((v12 & 0xF800) == 0xD800)
    {
      unsigned int v7 = v7 & 0xFFFF0000 | v12;
      unsigned __int8 v8 = 16;
      ++a1;
      if (v13 == v10) {
        goto LABEL_16;
      }
      goto LABEL_12;
    }
    int v18 = 1;
    ++a1;
    unsigned int v7 = v12;
LABEL_25:
    if ((unsigned __int16)v7 < 0x80u)
    {
      unsigned int v19 = (v7 + 1);
      if (!v19) {
        goto LABEL_6;
      }
      goto LABEL_27;
    }
    int v24 = (v7 & 0x3F) << 8;
    if ((unsigned __int16)v7 < 0x800u)
    {
      unsigned int v19 = (v24 | ((unsigned __int16)v7 >> 6)) + 33217;
      goto LABEL_27;
    }
    if ((v7 & 0xF800) != 0xD800)
    {
      unsigned int v35 = ((v24 | ((unsigned __int16)v7 >> 6) & 0x3F) << 8) | ((unsigned __int16)v7 >> 12);
LABEL_47:
      int v36 = 8487393;
LABEL_48:
      unsigned int v19 = v35 + v36;
      goto LABEL_27;
    }
    if (!v18)
    {
      unsigned int v40 = ((v7 & 0x3FF) << 10) | HIWORD(v7) & 0x3FF;
      unsigned int v35 = ((v40 + 0x10000) >> 4) & 0x3F00 | ((v40 + 0x10000) >> 18) | (((v40 >> 6) & 0x3F | (((v40 + 0x10000) & 0x3F) << 8)) << 16);
      int v36 = -2122219023;
      goto LABEL_48;
    }
    if ((unsigned __int16)v7 >= 0x80u)
    {
      int v41 = (v7 & 0x3F) << 8;
      if ((unsigned __int16)v7 >= 0x800u)
      {
        unsigned int v35 = ((unsigned __int16)v7 >> 12) | ((v41 | ((unsigned __int16)v7 >> 6) & 0x3F) << 8);
        goto LABEL_47;
      }
      unsigned int v19 = (v41 | ((unsigned __int16)v7 >> 6)) + 33217;
    }
    else
    {
      unsigned int v19 = (unsigned __int16)v7 + 1;
    }
LABEL_27:
    unint64_t v20 = v6[1].u64[0];
    do
    {
      unint64_t v21 = v6[1].u64[1];
      if (v20 >= v21 >> 1)
      {
        unsigned int v46 = v9;
        unint64_t v23 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((__objc2_class **)(v21 > 1), v20 + 1, 1, (uint64_t)v6);
        int v11 = &type metadata for Unicode.UTF16.ForwardParser;
        int64_t v6 = (uint8x16_t *)v23;
        uint64_t v9 = v46;
      }
      v6[1].i64[0] = v20 + 1;
      v6[2].i8[v20++] = v19 - 1;
      BOOL v22 = v19 >= 0x100;
      v19 >>= 8;
    }
    while (v22);
    goto LABEL_6;
  }
  if (a3 & 1) != 0 || ((v9 ^ 1))
  {
    uint64_t v43 = v6[1].i64[0];
    swift_bridgeObjectRetain((unint64_t)v6);
    uint64_t v42 = specialized static String._uncheckedFromUTF8(_:)(v6 + 2, v43);
    swift_bridgeObjectRelease_n((uint64_t)v6, 2);
  }
  else
  {
    swift_bridgeObjectRelease((uint64_t)v6);
    return 0;
  }
  return v42;
}

uint64_t static String._slowFromCodeUnits<A, B>(_:encoding:repair:)(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, int **a6)
{
  int v67 = a2;
  int v71 = a6;
  uint64_t v74 = (ValueMetadata *)a4;
  AssociatedTypeWitness = (ValueMetadata *)swift_getAssociatedTypeWitness(0, a6, a4, (uint64_t)&protocol requirements base descriptor for _UnicodeEncoding, associated type descriptor for _UnicodeEncoding.EncodedScalar);
  Description = (char *)AssociatedTypeWitness[-1].Description;
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  unint64_t v13 = (unsigned int *)&v66[-v12];
  __int16 v78 = type metadata accessor for Unicode.ParseResult(0, (uint64_t)AssociatedTypeWitness, v14, v15);
  MEMORY[0x1F4188790](v78);
  char v17 = &v66[-v16];
  BOOL v82 = swift_getAssociatedTypeWitness(0, a6, a4, (uint64_t)&protocol requirements base descriptor for _UnicodeEncoding, associated type descriptor for _UnicodeEncoding.ForwardParser);
  uint64_t v69 = *((void *)v82 - 1);
  uint64_t v18 = MEMORY[0x1F4188790](v82);
  int v81 = &v66[-v19];
  uint64_t v20 = a3;
  char v79 = *(unsigned char **)(a3 - 8);
  MEMORY[0x1F4188790](v18);
  BOOL v22 = &v66[-((v21 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v23 = *(void *)(a5 + 8);
  uint64_t v75 = a3;
  char v80 = swift_getAssociatedTypeWitness(0, (int **)v23, a3, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Iterator);
  uint64_t v73 = *((void *)v80 - 1);
  uint64_t v24 = MEMORY[0x1F4188790](v80);
  unint64_t v26 = &v66[-((v25 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v24);
  unint64_t v28 = &v66[-v27];
  uint64_t v29 = (*(uint64_t (**)(uint64_t, uint64_t))(v23 + 40))(v20, v23);
  unint64_t v30 = (uint8x16_t *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v29 & ~(v29 >> 63), 0, (uint64_t)&_swiftEmptyArrayStorage);
  (*((void (**)(unsigned char *, uint64_t, uint64_t))v79 + 2))(v22, a1, v20);
  (*(void (**)(uint64_t, uint64_t))(v23 + 32))(v20, v23);
  int64_t v31 = *(void (**)(unsigned char *, unsigned char *, const char *))(v73 + 16);
  char v79 = v26;
  uint64_t v68 = v28;
  unint64_t v32 = v28;
  uint64_t v33 = (uint64_t)v80;
  v31(v26, v32, v80);
  uint64_t v34 = (uint64_t)v71;
  unsigned int v35 = v82;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness((uint64_t)v71, (uint64_t)v74, (uint64_t)v82, (uint64_t)&protocol requirements base descriptor for _UnicodeEncoding, associated conformance descriptor for _UnicodeEncoding._UnicodeEncoding.ForwardParser: _UnicodeParser);
  (*(void (**)(const char *, uint64_t))(AssociatedConformanceWitness + 24))(v35, AssociatedConformanceWitness);
  int v76 = *(void (**)(unsigned char *, const char *, uint64_t, const char *, uint64_t))(AssociatedConformanceWitness + 32);
  uint64_t v77 = AssociatedConformanceWitness + 32;
  uint64_t v75 = swift_getAssociatedConformanceWitness(v23, v75, v33, (uint64_t)&protocol requirements base descriptor for Sequence, associated conformance descriptor for Sequence.Sequence.Iterator: IteratorProtocol);
  int v72 = 0;
  uint64_t v37 = (void (**)(unsigned int *, unsigned __int8 *, ValueMetadata *))(Description + 32);
  uint64_t v38 = (void (**)(unsigned int *, ValueMetadata *))(Description + 8);
  Description = (char *)(v34 + 88);
LABEL_2:
  while (1)
  {
    uint64_t v39 = v74;
    while (1)
    {
      v76(v79, v80, v75, v82, AssociatedConformanceWitness);
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v17, (uint64_t)v78);
      if (EnumCaseMultiPayload) {
        break;
      }
      (*v37)(v13, v17, AssociatedTypeWitness);
      if (v39 == &type metadata for Unicode.UTF16)
      {
        if (AssociatedTypeWitness != (ValueMetadata *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _UIntBuffer<UInt16>)) {
          goto LABEL_43;
        }
        unsigned int v41 = *v13;
        unsigned int v42 = (unsigned __int16)*v13;
        if (v42 > 0x7F)
        {
          int v49 = (*v13 & 0x3F) << 8;
          if (v42 < 0x800)
          {
            unsigned int v50 = v42 >> 6;
            (*v38)(v13, AssociatedTypeWitness);
            int v51 = v49 | v50;
            goto LABEL_23;
          }
          if ((*v13 & 0xF800) == 0xD800)
          {
LABEL_31:
            unsigned int v56 = ((uint64_t (*)(unsigned int *))v71[11])(v13);
            (*v38)(v13, AssociatedTypeWitness);
            if (v56 >= 0x80)
            {
              int v57 = (v56 & 0x3F) << 8;
              if (v56 >= 0x800)
              {
                int v58 = (v57 | (v56 >> 6) & 0x3F) << 8;
                int v59 = (((v58 | (v56 >> 12) & 0x3F) << 8) | (v56 >> 18)) - 2122219023;
                int v60 = (v58 | (v56 >> 12)) + 8487393;
                if (HIWORD(v56)) {
                  unsigned int v43 = v59;
                }
                else {
                  unsigned int v43 = v60;
                }
              }
              else
              {
                int v51 = v57 | (v56 >> 6);
LABEL_23:
                unsigned int v43 = v51 + 33217;
              }
            }
            else
            {
              unsigned int v43 = v56 + 1;
            }
          }
          else
          {
            int v55 = (v49 | (v42 >> 6) & 0x3F) << 8;
            (*v38)(v13, AssociatedTypeWitness);
            unsigned int v43 = (v55 & 0xFFFFFFF0 | ((unsigned __int16)v41 >> 12)) + 8487393;
          }
LABEL_24:
          unint64_t v52 = v30[1].u64[0];
          do
          {
            unint64_t v53 = v30[1].u64[1];
            if (v52 >= v53 >> 1) {
              unint64_t v30 = (uint8x16_t *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((__objc2_class **)(v53 > 1), v52 + 1, 1, (uint64_t)v30);
            }
            v30[1].i64[0] = v52 + 1;
            v30[2].i8[v52++] = v43 - 1;
            BOOL v54 = v43 >= 0x100;
            v43 >>= 8;
          }
          while (v54);
          goto LABEL_2;
        }
        (*v38)(v13, AssociatedTypeWitness);
        unsigned int v43 = (v41 + 1);
        if ((_BYTE)v41 != 0xFF) {
          goto LABEL_24;
        }
      }
      else
      {
        if (v39 != &type metadata for Unicode.UTF8) {
          goto LABEL_31;
        }
        if (AssociatedTypeWitness != &type metadata for _ValidUTF8Buffer) {
LABEL_43:
        }
          _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "_identityCast to wrong type", 27, 2, "Swift/Builtin.swift", 19, 2, 0x6CuLL, 0);
        unsigned int v43 = *v13;
        ((void (*)(unsigned int *))*v38)(v13);
        uint64_t v39 = v74;
        if (v43) {
          goto LABEL_24;
        }
      }
    }
    if (EnumCaseMultiPayload == 2) {
      break;
    }
    unint64_t v45 = v30[1].u64[0];
    unint64_t v44 = v30[1].u64[1];
    unint64_t v46 = v44 >> 1;
    unint64_t v47 = v45 + 1;
    if (v44 >> 1 <= v45)
    {
      unint64_t v30 = (uint8x16_t *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((__objc2_class **)(v44 > 1), v45 + 1, 1, (uint64_t)v30);
      unint64_t v44 = v30[1].u64[1];
      unint64_t v46 = v44 >> 1;
    }
    v30[1].i64[0] = v47;
    v30[2].i8[v45] = -17;
    unint64_t v48 = v45 + 2;
    if (v46 <= v47)
    {
      unint64_t v30 = (uint8x16_t *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((__objc2_class **)(v44 > 1), v45 + 2, 1, (uint64_t)v30);
      unint64_t v44 = v30[1].u64[1];
      unint64_t v46 = v44 >> 1;
    }
    v30[1].i64[0] = v48;
    v30[2].i8[v47] = -65;
    if (v46 <= v48) {
      unint64_t v30 = (uint8x16_t *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((__objc2_class **)(v44 > 1), v45 + 3, 1, (uint64_t)v30);
    }
    v30[1].i64[0] = v45 + 3;
    v30[2].i8[v48] = -67;
    int v72 = 1;
  }
  (*(void (**)(unsigned char *, const char *))(v69 + 8))(v81, v82);
  unint64_t v61 = *(void (**)(unsigned char *, const char *))(v73 + 8);
  unint64_t v62 = v80;
  v61(v79, v80);
  v61(v68, v62);
  if (v72 & 1) == 0 || (v67)
  {
    uint64_t v64 = v30[1].i64[0];
    swift_bridgeObjectRetain((unint64_t)v30);
    uint64_t v63 = specialized static String._uncheckedFromUTF8(_:)(v30 + 2, v64);
    swift_bridgeObjectRelease_n((uint64_t)v30, 2);
  }
  else
  {
    swift_bridgeObjectRelease((uint64_t)v30);
    return 0;
  }
  return v63;
}

unint64_t closure #1 in static String._fromCodeUnits<A, B>(_:encoding:repair:)@<X0>(uint8x16_t *a1@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X8>)
{
  if (a1) {
    uint64_t v5 = a2 - (void)a1;
  }
  else {
    uint64_t v5 = 0;
  }
  if (_allASCII(_:)(a1->i64, v5))
  {
    unint64_t result = specialized static String._uncheckedFromASCII(_:)(a1, v5);
  }
  else
  {
    unint64_t result = 0;
    unint64_t v7 = 0;
  }
  *a3 = result;
  a3[1] = v7;
  return result;
}

unint64_t static String._fromInvalidUTF16(_:)(uint8x16_t *a1, uint64_t a2)
{
  unint64_t result = specialized static String._fromCodeUnits<A, B>(_:encoding:repair:)(a1, a2, 1);
  if (!v3) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/StringCreate.swift", 24, 2, 0x122uLL, 0);
  }
  return result;
}

unint64_t Substring._offsetRange.getter(unint64_t a1)
{
  return a1 >> 16;
}

void *static UnsafeMutableBufferPointer.allocate(capacity:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  int64_t v5 = v4 * a1;
  if ((unsigned __int128)(v4 * (__int128)a1) >> 64 != v5 >> 63)
  {
    __break(1u);
    goto LABEL_8;
  }
  unsigned int v6 = *(unsigned __int8 *)(v3 + 80);
  if (v6 > 0xF) {
    uint64_t v7 = v6 + 1;
  }
  else {
    uint64_t v7 = 0;
  }
  unint64_t result = swift_slowAlloc(v5, v7 - 1);
  if (a1 < 0) {
LABEL_8:
  }
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeMutableBufferPointer with negative count", 46, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x47uLL, 0);
  return result;
}

uint64_t _ValidUTF8Buffer.count.getter(unsigned int a1)
{
  return 4 - (__clz(a1) >> 3);
}

uint64_t specialized Slice.deinitialize<A>()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = a3 + a1;
  if (a3) {
    uint64_t v5 = result;
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = a2 - a1;
  if (v6 < 0) {
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeMutableBufferPointer with negative count", 46, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x47uLL, 0);
  }
  if (v6)
  {
    if (!v5) {
      _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeMutableBufferPointer has a nil start and nonzero count", 60, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x49uLL, 0);
    }
  }
  else if (!v5)
  {
    return 0;
  }
  return result;
}

Swift::_StringObject::CountAndFlags __swiftcall _StringObject.CountAndFlags.init(count:isASCII:isNFC:isNativelyStored:isTailAllocated:)(Swift::Int count, Swift::Bool isASCII, Swift::Bool isNFC, Swift::Bool isNativelyStored, Swift::Bool isTailAllocated)
{
  v5._storage = count | 0x8000000000000000;
  if (!isASCII) {
    v5._storage = count;
  }
  if (isNFC) {
    v5._storage |= 0x4000000000000000;
  }
  if (isNativelyStored) {
    v5._storage |= 0x2000000000000000;
  }
  if (isTailAllocated) {
    return (Swift::_StringObject::CountAndFlags)(v5._storage | 0x1000000000000000);
  }
  else {
    return v5;
  }
}

uint64_t (*_StringGuts._object.modify())()
{
  return EnumeratedSequence._base.modify;
}

uint64_t _StringObject.init(immortal:isASCII:)(uint64_t a1, unint64_t a2, char a3)
{
  unint64_t v3 = a2 | 0xC000000000000000;
  if ((a3 & 1) == 0) {
    unint64_t v3 = a2;
  }
  return v3 | 0x1000000000000000;
}

uint64_t _StringObject.count.getter(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x2000000000000000) != 0) {
    return HIBYTE(a2) & 0xF;
  }
  else {
    return a1 & 0xFFFFFFFFFFFFLL;
  }
}

BOOL _StringGuts.isEmpty.getter(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0) {
    uint64_t v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  return v2 == 0;
}

uint64_t _StringObject.smallIsASCII.getter(uint64_t a1, unint64_t a2)
{
  return (a2 >> 62) & 1;
}

BOOL _StringGuts.isASCII.getter(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x2000000000000000) != 0) {
    return (a2 >> 62) & 1;
  }
  else {
    return a1 < 0;
  }
}

BOOL _StringObject.isASCII.getter(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x2000000000000000) != 0) {
    return (a2 >> 62) & 1;
  }
  else {
    return a1 < 0;
  }
}

uint64_t _StringGuts.isForeign.getter(uint64_t a1, unint64_t a2)
{
  return (a2 >> 60) & 1;
}

uint64_t _StringObject.isForeign.getter(uint64_t a1, unint64_t a2)
{
  return (a2 >> 60) & 1;
}

void *_StringGuts.withFastCChar<A>(_:)@<X0>(id a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, void *a6@<X8>)
{
  id v7 = a1;
  if ((a4 & 0x2000000000000000) != 0)
  {
    v13[0] = a3;
    v13[1] = a4 & 0xFFFFFFFFFFFFFFLL;
    return ((void *(*)(void *__return_ptr, void *, unint64_t))a1)(a6, v13, HIBYTE(a4) & 0xF);
  }
  else
  {
    if ((a3 & 0x1000000000000000) == 0) {
      a1 = _StringObject.sharedUTF8.getter(a3, a4);
    }
    MEMORY[0x1F4188790](a1);
    void v12[2] = a5;
    v12[3] = v7;
    unint64_t v12[4] = a2;
    return (void *)_sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFSRyxGq0_q_Ri_zRi0_zRi__Ri0__Ri_0_Ri0_0_r1_lys4Int8VsAD_pqd_1_Isgyrzr_SRys5UInt8VGqd_1_sAD_pAIRszAGRsd__sAD_pRsd_0_Ri_d_1_r_1_lIetMgyrzo_Tpq5(partial apply for thunk for @callee_guaranteed (@unowned UnsafeBufferPointer<Int8>) -> (@out A, @error @owned Error), (uint64_t)v12, v9, v10);
  }
}

BOOL _StringObject.isFastZeroTerminated.getter(uint64_t a1, uint64_t a2)
{
  BOOL v2 = (a2 & 0x2000000000000000) != 0 || (a1 & 0x1000000000000000) != 0;
  return (a2 & 0x1000000000000000) == 0 && v2;
}

BOOL specialized _StringGuts._slowWithCString<A>(_:)(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t (*a4)(__objc2_class **, uint64_t))
{
  uint64_t v6 = String.utf8CString.getter(a1, a2);
  unint64_t v7 = *((unsigned __int8 *)v6 + 32);
  v9 = (v7 > 0x20 || ((0x100003E01uLL >> v7) & 1) == 0) && (unsigned __int8 v8 = (unsigned char *)a4(v6 + 4, a3)) != 0 && *v8 == 0;
  swift_release((uint64_t)v6);
  return v9;
}

uint64_t _StringGuts._slowWithCString<A>(_:)(void (*a1)(__objc2_class **), uint64_t a2, unint64_t a3, unint64_t a4)
{
  Swift::_StringObject::CountAndFlags v5 = String.utf8CString.getter(a3, a4);
  a1(v5 + 4);
  return swift_release((uint64_t)v5);
}

uint64_t _StringGuts.copyUTF8(into:)(char *__dst, uint64_t a2, unint64_t a3, unint64_t a4)
{
  if ((a4 & 0x1000000000000000) != 0) {
    return _StringGuts._foreignCopyUTF8(into:)((uint64_t)__dst, a2, a3, a4);
  }
  if ((a4 & 0x2000000000000000) == 0)
  {
    if ((a3 & 0x1000000000000000) != 0)
    {
      uint64_t v6 = (char *)((a4 & 0xFFFFFFFFFFFFFFFLL) + 32);
      int64_t v7 = a3 & 0xFFFFFFFFFFFFLL;
      if ((uint64_t)(a3 & 0xFFFFFFFFFFFFLL) > a2) {
        return 0;
      }
    }
    else
    {
      uint64_t v6 = (char *)_StringObject.sharedUTF8.getter(a3, a4);
      int64_t v7 = v8;
      if (v8 > a2) {
        return 0;
      }
    }
    specialized UnsafeMutablePointer.initialize(from:count:)(v6, v7, __dst);
    return v7;
  }
  int64_t v7 = HIBYTE(a4) & 0xF;
  v10[0] = a3;
  v10[1] = a4 & 0xFFFFFFFFFFFFFFLL;
  if (v7 > a2) {
    return 0;
  }
  specialized UnsafeMutablePointer.initialize(from:count:)((char *)v10, HIBYTE(a4) & 0xF, __dst);
  return v7;
}

uint64_t _StringGuts._foreignCopyUTF8(into:)(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4)
{
  int64_t v8 = (char *)(a4 & 0xFFFFFFFFFFFFFFFLL);
  uint64_t v9 = specialized UnsafeMutableRawBufferPointer.init<A>(_:)(a1, a2);
  uint64_t v11 = _NSStringCopyBytes(_:encoding:into:)(v8, 4, v9, v10);
  if ((v12 & 1) == 0) {
    return v11;
  }
  uint64_t v13 = 0;
  if ((a4 & 0x2000000000000000) != 0) {
    unint64_t v14 = HIBYTE(a4) & 0xF;
  }
  else {
    unint64_t v14 = a3 & 0xFFFFFFFFFFFFLL;
  }
  if (v14)
  {
    uint64_t v15 = (a3 >> 59) & 1;
    if ((a4 & 0x1000000000000000) == 0) {
      LOBYTE(v15) = 1;
    }
    uint64_t v16 = 4 << v15;
    unint64_t v26 = v8 + 32;
    Swift::UInt64 v17 = 15;
    uint64_t v18 = a2 & ~(a2 >> 63);
    do
    {
      Swift::UInt64 v19 = v17 & 0xC;
      Swift::UInt64 rawBits = v17;
      if (v19 == v16) {
        Swift::UInt64 rawBits = _StringGuts._slowEnsureMatchingEncoding(_:)((Swift::String::Index)v17)._rawBits;
      }
      Swift::UInt64 v21 = rawBits >> 16;
      if (rawBits >> 16 >= v14)
      {
        unint64_t v25 = 228;
        goto LABEL_34;
      }
      if ((a4 & 0x1000000000000000) != 0)
      {
        Swift::UInt8 v23 = String.UTF8View._foreignSubscript(position:)((Swift::String::Index)rawBits);
        if (v19 != v16) {
          goto LABEL_20;
        }
      }
      else if ((a4 & 0x2000000000000000) != 0)
      {
        v27[0] = a3;
        v27[1] = a4 & 0xFFFFFFFFFFFFFFLL;
        Swift::UInt8 v23 = *((unsigned char *)v27 + v21);
        if (v19 != v16) {
          goto LABEL_20;
        }
      }
      else
      {
        BOOL v22 = v26;
        if ((a3 & 0x1000000000000000) == 0) {
          BOOL v22 = _StringObject.sharedUTF8.getter(a3, a4);
        }
        Swift::UInt8 v23 = v22[v21];
        if (v19 != v16)
        {
LABEL_20:
          if ((a4 & 0x1000000000000000) == 0) {
            goto LABEL_21;
          }
          goto LABEL_24;
        }
      }
      Swift::UInt64 v17 = _StringGuts._slowEnsureMatchingEncoding(_:)((Swift::String::Index)v17)._rawBits;
      if ((a4 & 0x1000000000000000) == 0)
      {
LABEL_21:
        Swift::UInt64 v17 = (v17 & 0xFFFFFFFFFFFF0000) + 65540;
        goto LABEL_26;
      }
LABEL_24:
      if (v14 <= v17 >> 16)
      {
        unint64_t v25 = 144;
LABEL_34:
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index is out of bounds", 29, 2, "Swift/StringUTF8View.swift", 26, 2, v25, 0);
      }
      Swift::UInt64 v17 = String.UTF8View._foreignIndex(after:)((Swift::String::Index)v17)._rawBits;
LABEL_26:
      if (v18 == v13) {
        return 0;
      }
      *(unsigned char *)(a1 + v13++) = v23;
    }
    while (4 * v14 != v17 >> 14);
  }
  return v13;
}

Swift::String::Index __swiftcall _StringGuts._slowEnsureMatchingEncoding(_:)(Swift::String::Index a1)
{
  uint64_t v3 = v2;
  uint64_t v4 = v1;
  char rawBits = a1._rawBits;
  Swift::UInt64 v6 = a1._rawBits >> 16;
  uint64_t v7 = LOWORD(a1._rawBits) >> 14;
  if ((v3 & 0x1000000000000000) == 0 || (v4 & 0x800000000000000) != 0)
  {
    v13._char rawBits = String.UTF16View.index(_:offsetBy:)((Swift::String::Index)15, v6)._rawBits;
    Swift::UInt64 v14 = v13._rawBits + (v7 << 16);
    Swift::UInt64 v15 = v13._rawBits & 0xFFFFFFFFFFFFFFFCLL | rawBits & 3;
    unint64_t v16 = v14 & 0xFFFFFFFFFFFF0000;
    if (!v7) {
      unint64_t v16 = v15;
    }
    return (Swift::String::Index)(v16 | 4);
  }
  else
  {
    v8._char rawBits = String.UTF8View._foreignIndex(_:offsetBy:)((Swift::String::Index)15, v6)._rawBits;
    Swift::UInt64 v9 = v8._rawBits + (v7 << 16);
    Swift::UInt64 v10 = v8._rawBits & 0xFFFFFFFFFFFFFFFCLL | rawBits & 3;
    unint64_t v11 = v9 & 0xFFFFFFFFFFFF0000;
    if (!v7) {
      unint64_t v11 = v10;
    }
    return (Swift::String::Index)(v11 | 8);
  }
}

Swift::String::Index __swiftcall String.UTF16View.index(_:offsetBy:)(Swift::String::Index _, Swift::Int offsetBy)
{
  unint64_t v4 = v3;
  uint64_t v5 = v2;
  uint64_t v7 = (v2 >> 59) & 1;
  if ((v3 & 0x1000000000000000) == 0) {
    LOBYTE(v7) = 1;
  }
  if ((_._rawBits & 0xC) == 4 << v7) {
    _._char rawBits = _StringGuts._slowEnsureMatchingEncoding(_:)(_)._rawBits;
  }
  uint64_t v8 = HIBYTE(v4) & 0xF;
  if ((v4 & 0x2000000000000000) == 0) {
    uint64_t v8 = v5 & 0xFFFFFFFFFFFFLL;
  }
  if (4 * v8 < _._rawBits >> 14) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index is out of bounds", 29, 2, "Swift/StringUTF16View.swift", 27, 2, 0xCBuLL, 0);
  }
  if ((v4 & 0x1000000000000000) == 0)
  {
    uint64_t v9 = (v4 >> 62) & 1;
    if ((v4 & 0x2000000000000000) == 0) {
      LODWORD(v9) = v5 < 0;
    }
    if (v9 == 1)
    {
      if (!__OFADD__(offsetBy, _._rawBits >> 16)) {
        return (Swift::String::Index)(((offsetBy + (_._rawBits >> 16)) << 16) | 0xD);
      }
      __break(1u);
    }
    else if ((_._rawBits & 0xC001) != 0)
    {
LABEL_15:
      unint64_t v11 = 64;
      if (_._rawBits < 0x4000) {
        unint64_t v11 = 32;
      }
      if (offsetBy >= 0) {
        unint64_t v12 = offsetBy;
      }
      else {
        unint64_t v12 = -offsetBy;
      }
      if (v12 < v11) {
        return (Swift::String::Index)(specialized BidirectionalCollection._index(_:offsetBy:)(_, offsetBy, v5, v4) | 4);
      }
      Swift::Int v13 = String.UTF16View._nativeGetOffset(for:)(_);
      BOOL v14 = __OFADD__(v13, offsetBy);
      result._char rawBits = v13 + offsetBy;
      if (v14)
      {
        __break(1u);
      }
      else
      {
        return String.UTF16View._nativeGetIndex(for:)(result._rawBits);
      }
      return result;
    }
    _._char rawBits = _._rawBits & 0xC | _StringGuts.scalarAlignSlow(_:)(_)._rawBits & 0xFFFFFFFFFFFFFFF3 | 1;
    goto LABEL_15;
  }

  return String.UTF16View._foreignIndex(_:offsetBy:)(_, offsetBy);
}

uint64_t String.Index.transcodedOffset.getter(unsigned __int16 a1)
{
  return a1 >> 14;
}

Swift::String::Index __swiftcall String.Index.encoded(offsetBy:)(Swift::Int offsetBy)
{
  return (Swift::String::Index)((v1 + (offsetBy << 16)) & 0xFFFFFFFFFFFF0000);
}

Swift::String::Index __swiftcall String.UTF8View.index(_:offsetBy:)(Swift::String::Index _, Swift::Int offsetBy)
{
  unint64_t v4 = v3;
  unint64_t v5 = v2;
  uint64_t v7 = (v2 >> 59) & 1;
  if ((v3 & 0x1000000000000000) == 0) {
    LOBYTE(v7) = 1;
  }
  if ((_._rawBits & 0xC) == 4 << v7)
  {
    _._char rawBits = _StringGuts._slowEnsureMatchingEncoding(_:)(_)._rawBits;
    if ((v4 & 0x1000000000000000) == 0)
    {
LABEL_5:
      Swift::UInt64 v8 = offsetBy + (_._rawBits >> 16);
      if (__OFADD__(offsetBy, _._rawBits >> 16))
      {
        __break(1u);
      }
      else if ((v8 & 0x8000000000000000) == 0)
      {
        unint64_t v9 = HIBYTE(v4) & 0xF;
        if ((v4 & 0x2000000000000000) == 0) {
          unint64_t v9 = v5 & 0xFFFFFFFFFFFFLL;
        }
        if (v9 >= v8) {
          return (Swift::String::Index)((v8 << 16) | 4);
        }
      }
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index is out of bounds", 29, 2, "Swift/StringUTF8View.swift", 26, 2, 0xA7uLL, 0);
    }
  }
  else if ((v3 & 0x1000000000000000) == 0)
  {
    goto LABEL_5;
  }

  return String.UTF8View._foreignIndex(_:offsetBy:)(_, offsetBy);
}

BOOL _StringGuts._isContiguousASCII.getter(uint64_t a1, uint64_t a2)
{
  return (a2 & 0x3000000000000000) == 0 && a1 < 0;
}

uint64_t _StringGuts._isContiguousUTF16.getter()
{
  return 0;
}

id _StringGuts.startASCII.getter(uint64_t a1, uint64_t a2)
{
  if ((a1 & 0x1000000000000000) != 0) {
    return (id)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
  }
  id result = _StringObject.sharedUTF8.getter(a1, a2);
  if (!result) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/StringGuts.swift", 22, 2, 0x1A3uLL, 0);
  }
  return result;
}

void _StringGuts.startUTF16.getter()
{
}

uint64_t _StringGuts._isLargeZeroTerminatedContiguousUTF8.getter(unint64_t a1, uint64_t a2)
{
  if ((a2 & 0x3000000000000000) != 0) {
    return 0;
  }
  else {
    return (a1 >> 60) & 1;
  }
}

id _StringGuts._largeContiguousUTF8CodeUnits.getter(uint64_t a1, uint64_t a2)
{
  if ((a1 & 0x1000000000000000) != 0) {
    return (id)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
  }
  else {
    return _StringObject.sharedUTF8.getter(a1, a2);
  }
}

const char *_persistCString(_:)(const char *result)
{
  if (result)
  {
    uint64_t v1 = (char *)result;
    size_t v2 = _swift_stdlib_strlen(result);
    size_t v3 = v2 + 1;
    if (__OFADD__(v2, 1))
    {
      __break(1u);
    }
    else
    {
      unint64_t v4 = specialized static Array._allocateUninitialized(_:)((__objc2_class *)(v2 + 1), (uint64_t (*)(__objc2_class *))specialized static Array._allocateBufferUninitialized(minimumCapacity:));
      Swift::UInt64 v8 = v5;
      unint64_t v9 = v4;
      if ((v3 & 0x8000000000000000) == 0)
      {
        v6[0] = v5;
        v6[1] = v3;
        specialized UnsafeMutablePointer.moveInitialize(from:count:)(v1, v3, v5, "UnsafeMutablePointer.update with negative count", 47, 0x3DEuLL);
        size_t v7 = v3;
        specialized $defer #1 <A>() in Array.init(_unsafeUninitializedCapacity:initializingWith:)(&v7, v3, v6, &v8, (uint64_t *)&v9);
        return (const char *)v9;
      }
    }
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeMutableBufferPointer with negative count", 46, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x47uLL, 0);
  }
  return result;
}

Swift::tuple_Unicode_Scalar_scalarLength_Int __swiftcall _StringGuts.foreignErrorCorrectedScalar(startingAt:)(Swift::String::Index startingAt)
{
  unint64_t v3 = v2;
  uint64_t v4 = v1;
  Swift::UInt64 v5 = startingAt._rawBits >> 16;
  Swift::UInt64 v6 = (void *)(v2 & 0xFFFFFFFFFFFFFFFLL);
  int v7 = [v2 characterAtIndex:startingAt._rawBits >> 16];
  if ((v7 & 0xF800 | 0x400) == 0xDC00)
  {
    if ((v7 & 0xFC00) != 0xDC00)
    {
      uint64_t v9 = HIBYTE(v3) & 0xF;
      if ((v3 & 0x2000000000000000) == 0) {
        uint64_t v9 = v4 & 0xFFFFFFFFFFFFLL;
      }
      if (v5 + 1 != v9)
      {
        unsigned __int16 v10 = (unsigned __int16)[v6 characterAtIndex:];
        if ((v10 & 0xFC00) == 0xDC00)
        {
          int v7 = (v10 & 0x3FF | ((v7 & 0x3FF) << 10)) + 0x10000;
          Swift::Int v8 = 2;
          goto LABEL_10;
        }
      }
    }
    int v7 = 65533;
  }
  Swift::Int v8 = 1;
LABEL_10:
  Swift::UInt32 v11 = v7;
  result.Swift::Int scalarLength = v8;
  result._0._unsigned int value = v11;
  return result;
}

uint64_t _StringGuts.nativeCapacity.getter(uint64_t a1, uint64_t a2)
{
  if ((a1 & ~a2 & 0x2000000000000000) != 0) {
    return (*(void *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 0x10) & 0xFFFFFFFFFFFFLL) - 1;
  }
  else {
    return 0;
  }
}

unint64_t _StringGuts.nativeUnusedCapacity.getter(uint64_t a1, uint64_t a2)
{
  if ((a1 & ~a2 & 0x2000000000000000) != 0) {
    return (*(void *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 0x10) & 0xFFFFFFFFFFFFLL)
  }
         + (~*(void *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 0x18) | 0xFFFF000000000000);
  else {
    return 0;
  }
}

uint64_t _StringGuts.uniqueNativeCapacity.getter()
{
  uint64_t v1 = v0[1];
  if ((*v0 & ~v1 & 0x2000000000000000) != 0 && swift_isUniquelyReferenced_nonNull_native(v1 & 0xFFFFFFFFFFFFFFFLL)) {
    return (*(void *)((v0[1] & 0xFFFFFFFFFFFFFFFLL) + 0x10) & 0xFFFFFFFFFFFFLL) - 1;
  }
  else {
    return 0;
  }
}

BOOL _StringGuts.isUniqueNative.getter()
{
  uint64_t v1 = v0[1];
  return (*v0 & ~v1 & 0x2000000000000000) != 0 && swift_isUniquelyReferenced_nonNull_native(v1 & 0xFFFFFFFFFFFFFFFLL);
}

uint64_t _StringObject.largeAddressBits.getter(uint64_t a1, uint64_t a2)
{
  return a2 & 0xFFFFFFFFFFFFFFFLL;
}

Swift::Void __swiftcall _StringGuts.reserveCapacity(_:)(Swift::Int a1)
{
  if (a1 >= 16)
  {
    unint64_t v2 = v1;
    Swift::Int v4 = _StringGuts.uniqueNativeCapacity.getter();
    if ((v5 & 1) != 0 || v4 < a1)
    {
      uint64_t v6 = _StringGuts.uniqueNativeCapacity.getter();
      if (v7)
      {
        unint64_t v9 = v1[1];
        if ((v9 & 0x1000000000000000) != 0)
        {
          Swift::Int v8 = String.UTF8View._foreignCount()();
        }
        else if ((v9 & 0x2000000000000000) != 0)
        {
          Swift::Int v8 = HIBYTE(v9) & 0xF;
        }
        else
        {
          Swift::Int v8 = *v1 & 0xFFFFFFFFFFFFLL;
        }
      }
      else
      {
        Swift::Int v8 = 2 * v6;
      }
      if (v8 <= a1) {
        Swift::Int v10 = a1;
      }
      else {
        Swift::Int v10 = v8;
      }
      unint64_t v11 = v1[1];
      if ((v11 & 0x1000000000000000) != 0)
      {
        _StringGuts._foreignGrow(_:)(v10);
      }
      else
      {
        uint64_t v12 = *v1;
        if ((v11 & 0x2000000000000000) != 0)
        {
          size_t v16 = HIBYTE(v11) & 0xF;
          v22[0] = *v2;
          v22[1] = v11 & 0xFFFFFFFFFFFFFFLL;
          unint64_t v17 = v16 | 0xC000000000000000;
          if ((v11 & 0x4000000000000000) == 0) {
            unint64_t v17 = HIBYTE(v11) & 0xF;
          }
          uint64_t v18 = v17 | 0x3000000000000000;
          int64_t v15 = _allocateStringStorage(codeUnitCapacity:)(v10);
          *(void *)(v15 + 16) = v19;
          *(void *)(v15 + 24) = v18;
          if (v19 < 0)
          {
            *(void *)__StringStorage._breadcrumbsAddress.getter() = 0;
            uint64_t v18 = *(void *)(v15 + 24);
          }
          *(unsigned char *)(v15 + 32 + (v18 & 0xFFFFFFFFFFFFLL)) = 0;
          specialized UnsafeMutablePointer.initialize(from:count:)((char *)v22, v16, (char *)(v15 + 32));
        }
        else
        {
          if ((v12 & 0x1000000000000000) != 0)
          {
            Swift::Int v13 = (char *)((v11 & 0xFFFFFFFFFFFFFFFLL) + 32);
            size_t v14 = v12 & 0xFFFFFFFFFFFFLL;
          }
          else
          {
            Swift::Int v21 = v10;
            Swift::Int v13 = (char *)_StringObject.sharedUTF8.getter(*v2, v11);
            Swift::Int v10 = v21;
          }
          int64_t v15 = specialized static __StringStorage.create(initializingFrom:codeUnitCapacity:isASCII:)(v13, v14, v10, v12 < 0);
        }
        uint64_t v20 = *(void *)(v15 + 24);
        swift_bridgeObjectRelease(v2[1]);
        uint64_t *v2 = v20;
        v2[1] = v15;
      }
    }
  }
}

void _StringGuts._foreignGrow(_:)(int64_t a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  if (a1 > 15)
  {
    uint64_t v8 = specialized static String._fromLargeUTF8Repairing(uninitializedCapacity:initializingWith:)(a1, v1);
    unint64_t v12 = v13;
  }
  else
  {
    uint8x16_t v15 = (uint8x16_t)xmmword_18162AE10;
    if (a1 < 0) {
      _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeMutableBufferPointer with negative count", 46, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x47uLL, 0);
    }
    uint64_t v2 = _StringGuts._foreignCopyUTF8(into:)((uint64_t)&v15, a1, *v1, v1[1]);
    if (v3) {
      _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000029, 0x80000001816E2F80, "Swift/StringGutsRangeReplaceable.swift", 38, 2, 0x91uLL, 0);
    }
    if (v2 <= 0)
    {
      if (v2) {
        _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/SmallString.swift", 23, 2, 0x109uLL, 0);
      }
      uint64_t v8 = 0;
      unint64_t v12 = 0xE000000000000000;
    }
    else
    {
      char v4 = 8;
      if (v2 <= 8) {
        char v5 = 8;
      }
      else {
        char v5 = v2;
      }
      char v6 = 56 * v5;
      if (v2 < 8) {
        char v4 = v2;
      }
      unint64_t v7 = 0xFFFFFFFFFFFFFFFFLL >> (v6 & 0x38);
      if ((unint64_t)v2 <= 8) {
        unint64_t v7 = 0;
      }
      uint64_t v8 = v15.i64[0] & (0xFFFFFFFFFFFFFFFFLL >> ((56 * v4) & 0x38));
      uint64_t v9 = v15.i64[1] & v7;
      BOOL v10 = ((v15.i64[1] & v7 | v8) & 0x8080808080808080) == 0;
      unint64_t v11 = 0xA000000000000000;
      if (v10) {
        unint64_t v11 = 0xE000000000000000;
      }
      unint64_t v12 = v11 | (v2 << 56) | v9;
      if ((v12 & 0x4000000000000000) == 0)
      {
        v15.i64[0] = v8;
        v15.i64[1] = v9 & 0xFFFFFFFFFFFFFFLL;
        closure #2 in String.init(_uninitializedCapacity:initializingUTF8With:)(&v15, HIBYTE(v12) & 0xF, v14);
        uint64_t v8 = v14[0];
        unint64_t v12 = v14[1];
      }
    }
  }
  swift_bridgeObjectRelease(v1[1]);
  unint64_t *v1 = v8;
  v1[1] = v12;
}

void _StringGuts.prepareForAppendInPlace(totalCount:otherUTF8Count:)(int64_t a1, int64_t a2)
{
  char v3 = v2;
  uint64_t v6 = *v2;
  uint64_t v7 = v3[1];
  int64_t v8 = _StringGuts.nativeUnusedCapacity.getter(v6, v7);
  BOOL v11 = (v9 & 1) == 0 && v8 >= a2;
  if ((v6 & ~v7 & 0x2000000000000000) != 0)
  {
    BOOL isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v7 & 0xFFFFFFFFFFFFFFFLL);
    uint64_t v6 = *v3;
    uint64_t v7 = v3[1];
    if (isUniquelyReferenced_nonNull_native)
    {
      if (v11) {
        return;
      }
      goto LABEL_12;
    }
  }
  if (!v11)
  {
LABEL_12:
    uint64_t v13 = 2 * _StringGuts.nativeCapacity.getter(v6, v7);
    if (v14) {
      uint64_t v13 = 0;
    }
    if (v13 > a1) {
      a1 = v13;
    }
  }
  uint64_t v15 = _StringGuts.uniqueNativeCapacity.getter();
  if (v16)
  {
    unint64_t v18 = v3[1];
    if ((v18 & 0x1000000000000000) != 0)
    {
      Swift::Int v17 = String.UTF8View._foreignCount()();
    }
    else if ((v18 & 0x2000000000000000) != 0)
    {
      Swift::Int v17 = HIBYTE(v18) & 0xF;
    }
    else
    {
      Swift::Int v17 = *v3 & 0xFFFFFFFFFFFFLL;
    }
  }
  else
  {
    Swift::Int v17 = 2 * v15;
  }
  if (v17 <= a1) {
    int64_t v19 = a1;
  }
  else {
    int64_t v19 = v17;
  }
  unint64_t v20 = v3[1];
  if ((v20 & 0x1000000000000000) != 0)
  {
    _StringGuts._foreignGrow(_:)(v19);
  }
  else
  {
    uint64_t v21 = *v3;
    if ((v20 & 0x2000000000000000) != 0)
    {
      size_t v25 = HIBYTE(v20) & 0xF;
      v30[0] = *v3;
      v30[1] = v20 & 0xFFFFFFFFFFFFFFLL;
      unint64_t v26 = v25 | 0xC000000000000000;
      if ((v20 & 0x4000000000000000) == 0) {
        unint64_t v26 = HIBYTE(v20) & 0xF;
      }
      uint64_t v27 = v26 | 0x3000000000000000;
      int64_t v24 = _allocateStringStorage(codeUnitCapacity:)(v19);
      *(void *)(v24 + 16) = v28;
      *(void *)(v24 + 24) = v27;
      if (v28 < 0)
      {
        *(void *)__StringStorage._breadcrumbsAddress.getter() = 0;
        uint64_t v27 = *(void *)(v24 + 24);
      }
      *(unsigned char *)(v24 + 32 + (v27 & 0xFFFFFFFFFFFFLL)) = 0;
      specialized UnsafeMutablePointer.initialize(from:count:)((char *)v30, v25, (char *)(v24 + 32));
    }
    else
    {
      if ((v21 & 0x1000000000000000) != 0)
      {
        BOOL v22 = (char *)((v20 & 0xFFFFFFFFFFFFFFFLL) + 32);
        size_t v23 = v21 & 0xFFFFFFFFFFFFLL;
      }
      else
      {
        BOOL v22 = (char *)_StringObject.sharedUTF8.getter(*v3, v20);
      }
      int64_t v24 = specialized static __StringStorage.create(initializingFrom:codeUnitCapacity:isASCII:)(v22, v23, v19, v21 < 0);
    }
    uint64_t v29 = *(void *)(v24 + 24);
    swift_bridgeObjectRelease(v3[1]);
    *char v3 = v29;
    v3[1] = v24;
  }
}

void _StringGuts.append(_:)(uint64_t a1, unint64_t x1_0, uint64_t a3, uint64_t a4)
{
  char v5 = (uint64_t *)v4;
  if ((x1_0 & 0x1000000000000000) != 0)
  {
    unint64_t v53 = HIBYTE(x1_0) & 0xF;
    if ((x1_0 & 0x2000000000000000) == 0) {
      unint64_t v53 = a1 & 0xFFFFFFFFFFFFLL;
    }
    if (v53 < (a4 & 0xFFFFFFFFFFFFuLL)) {
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index range is out of bounds", 35, 2, "Swift/StringIndexValidation.swift", 33, 2, 0xD2uLL, 0);
    }
    if (((a3 << 16) | 1uLL) >= 0x10000) {
      v55._char rawBits = (a3 << 16) | 1;
    }
    else {
      v55._char rawBits = (a3 << 16) | 3;
    }
    v54._char rawBits = (a4 << 16) | 1;
    Swift::Int v10 = specialized Collection.count.getter(v55, v54, a1, x1_0);
    unint64_t v12 = *v4;
    unint64_t v11 = v4[1];
    if ((v11 & 0x1000000000000000) == 0) {
      goto LABEL_4;
    }
LABEL_52:
    Swift::Int v56 = String.UTF8View._foreignCount()();
    int64_t v14 = v56 + v10;
    if (!__OFADD__(v56, v10)) {
      goto LABEL_8;
    }
    goto LABEL_54;
  }
  Swift::Int v10 = a4 - a3;
  if (__OFSUB__(a4, a3))
  {
LABEL_55:
    __break(1u);
    goto LABEL_56;
  }
  unint64_t v12 = *v4;
  unint64_t v11 = v4[1];
  if ((v11 & 0x1000000000000000) != 0) {
    goto LABEL_52;
  }
LABEL_4:
  if ((v11 & 0x2000000000000000) != 0) {
    uint64_t v13 = HIBYTE(v11) & 0xF;
  }
  else {
    uint64_t v13 = v12 & 0xFFFFFFFFFFFFLL;
  }
  int64_t v14 = v13 + v10;
  if (__OFADD__(v13, v10))
  {
LABEL_54:
    __break(1u);
    goto LABEL_55;
  }
LABEL_8:
  if ((v12 & ~v11 & 0x2000000000000000) != 0)
  {
    BOOL isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v11 & 0xFFFFFFFFFFFFFFFLL);
    unint64_t v12 = *v5;
    unint64_t v11 = v5[1];
    if (isUniquelyReferenced_nonNull_native)
    {
      int64_t v16 = _StringGuts.nativeUnusedCapacity.getter(*v5, v5[1]);
      if (v17)
      {
        unint64_t v59 = 258;
LABEL_64:
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/StringGutsRangeReplaceable.swift", 38, 2, v59, 0);
      }
      if (v14 > 15 || (v11 & 0x2000000000000000) == 0 && v16 >= v10) {
        goto LABEL_14;
      }
LABEL_23:
      unint64_t v22 = _StringGuts._convertedToSmall()(v12, v11);
      unint64_t v24 = v23;
      swift_bridgeObjectRetain(x1_0);
      v25._char rawBits = Substring.init(_:)(a1, x1_0, a3, a4);
      uint64_t v27 = v26;
      unint64_t v29 = specialized String.init(_:)(v25, v62, v28, v26);
      unint64_t v31 = v30;
      swift_bridgeObjectRelease(v27);
      unint64_t v32 = _StringGuts._convertedToSmall()(v29, v31);
      unint64_t v34 = v33;
      swift_bridgeObjectRelease(v31);
      uint64_t v35 = HIBYTE(v24) & 0xF;
      uint64_t v36 = HIBYTE(v34) & 0xF;
      uint64_t v37 = v36 + v35;
      if ((unint64_t)(v36 + v35) > 0xF)
      {
LABEL_62:
        unint64_t v59 = 266;
        goto LABEL_64;
      }
      if (v36)
      {
        char v38 = 0;
        unint64_t v39 = 0;
        do
        {
          unint64_t v40 = v35 + v39;
          unint64_t v41 = v39 + 1;
          if (v39 >= 8) {
            unint64_t v42 = v34;
          }
          else {
            unint64_t v42 = v32;
          }
          unint64_t v43 = v42 >> (v38 & 0x38);
          char v44 = (8 * v35 + v38) & 0x38;
          uint64_t v45 = (-255 << v44) - 1;
          unint64_t v46 = (unint64_t)v43 << v44;
          unint64_t v47 = v45 & v24 | v46;
          unint64_t v48 = v45 & v22 | v46;
          if (v40 < 8) {
            unint64_t v22 = v48;
          }
          else {
            unint64_t v24 = v47;
          }
          v38 += 8;
          unint64_t v39 = v41;
        }
        while (v36 != v41);
      }
      swift_bridgeObjectRelease(v11);
      unint64_t v49 = 0xA000000000000000;
      if (!(v22 & 0x8080808080808080 | v24 & 0x80808080808080)) {
        unint64_t v49 = 0xE000000000000000;
      }
      *char v5 = v22;
      v5[1] = v49 & 0xFF00000000000000 | (v37 << 56) | v24 & 0xFFFFFFFFFFFFFFLL;
      return;
    }
  }
  if (v14 <= 15) {
    goto LABEL_23;
  }
LABEL_14:
  _StringGuts.prepareForAppendInPlace(totalCount:otherUTF8Count:)(v14, v10);
  if ((x1_0 & 0x1000000000000000) == 0)
  {
    if ((x1_0 & 0x2000000000000000) == 0)
    {
      if ((a1 & 0x1000000000000000) != 0)
      {
        id v18 = (id)((x1_0 & 0xFFFFFFFFFFFFFFFLL) + 32);
        uint64_t v19 = a1 & 0xFFFFFFFFFFFFLL;
        if ((a3 & 0x8000000000000000) == 0) {
          goto LABEL_18;
        }
      }
      else
      {
        id v18 = _StringObject.sharedUTF8.getter(a1, x1_0);
        uint64_t v19 = v58;
        if ((a3 & 0x8000000000000000) == 0)
        {
LABEL_18:
          if (v19 >= a4)
          {
            unint64_t v20 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(a3, a4, (uint64_t)v18, v19);
            _StringGuts.appendInPlace(_:isASCII:)(v20, v21, a1 < 0);
            return;
          }
          goto LABEL_56;
        }
      }
LABEL_58:
      unint64_t v57 = 1860;
LABEL_59:
      _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, v57, 0);
    }
    v60[0] = a1;
    v60[1] = x1_0 & 0xFFFFFFFFFFFFFFLL;
    if (a3 < 0) {
      goto LABEL_58;
    }
    if ((uint64_t)(HIBYTE(x1_0) & 0xF) >= a4)
    {
      int64_t v50 = a4 - a3;
      if (v50 < 0) {
        _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeBufferPointer with negative count", 39, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x53FuLL, 0);
      }
      uint64_t v51 = v5[1] & 0xFFFFFFFFFFFFFFFLL;
      specialized UnsafeMutablePointer.initialize(from:count:)((char *)v60 + a3, v50, (char *)(v51 + (*(void *)(v51 + 0x18) & 0xFFFFFFFFFFFFLL) + 32));
      uint64_t v52 = *(void *)(v51 + 24);
      if (!__OFADD__(v52 & 0xFFFFFFFFFFFFLL, v50))
      {
        __StringStorage._updateCountAndFlags(newCount:newIsASCII:)((v52 & 0xFFFFFFFFFFFFLL) + v50, (x1_0 >> 62) & (v52 < 0));
        *char v5 = *(void *)(v51 + 24);
        return;
      }
      __break(1u);
      goto LABEL_62;
    }
LABEL_56:
    unint64_t v57 = 1861;
    goto LABEL_59;
  }

  _StringGuts._foreignAppendInPlace(_:)(a1, x1_0, a3, a4);
}

unint64_t _StringGuts._foreignConvertedToSmall()(unint64_t a1, unint64_t a2)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  uint8x16_t v15 = (uint8x16_t)xmmword_18162AE10;
  uint64_t v2 = _StringGuts._foreignCopyUTF8(into:)((uint64_t)&v15, 15, a1, a2);
  if (v3) {
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000029, 0x80000001816E2F80, "Swift/StringGutsRangeReplaceable.swift", 38, 2, 0xD1uLL, 0);
  }
  if (v2 <= 0)
  {
    if (v2) {
      _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/SmallString.swift", 23, 2, 0x109uLL, 0);
    }
    unint64_t v8 = 0;
    unint64_t v12 = 0xE000000000000000;
  }
  else
  {
    char v4 = 8;
    if (v2 <= 8) {
      char v5 = 8;
    }
    else {
      char v5 = v2;
    }
    char v6 = 56 * v5;
    if (v2 < 8) {
      char v4 = v2;
    }
    unint64_t v7 = 0xFFFFFFFFFFFFFFFFLL >> (v6 & 0x38);
    if ((unint64_t)v2 <= 8) {
      unint64_t v7 = 0;
    }
    unint64_t v8 = v15.i64[0] & (0xFFFFFFFFFFFFFFFFLL >> ((56 * v4) & 0x38));
    uint64_t v9 = v15.i64[1] & v7;
    BOOL v10 = ((v15.i64[1] & v7 | v8) & 0x8080808080808080) == 0;
    unint64_t v11 = 0xA000000000000000;
    if (v10) {
      unint64_t v11 = 0xE000000000000000;
    }
    unint64_t v12 = v11 | (v2 << 56) | v9;
    if ((v12 & 0x4000000000000000) == 0)
    {
      v15.i64[0] = v8;
      v15.i64[1] = v9 & 0xFFFFFFFFFFFFFFLL;
      closure #2 in String.init(_uninitializedCapacity:initializingUTF8With:)(&v15, HIBYTE(v12) & 0xF, v14);
      unint64_t v8 = v14[0];
      unint64_t v12 = v14[1];
    }
  }
  swift_bridgeObjectRelease(v12);
  return v8;
}

unint64_t _StringGuts._convertedToSmall()(unint64_t result, unint64_t a2)
{
  if ((a2 & 0x2000000000000000) == 0)
  {
    void v6[2] = v2;
    v6[3] = v3;
    if ((a2 & 0x1000000000000000) != 0)
    {
      return _StringGuts._foreignConvertedToSmall()(result, a2);
    }
    else
    {
      if ((result & 0x1000000000000000) != 0)
      {
        char v4 = (unsigned __int8 *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
        uint64_t v5 = result & 0xFFFFFFFFFFFFLL;
      }
      else
      {
        char v4 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(result, a2);
      }
      closure #1 in _StringGuts._convertedToSmall()(v4, v5, v6);
      return v6[0];
    }
  }
  return result;
}

unsigned __int8 *closure #1 in _StringGuts._convertedToSmall()@<X0>(unsigned __int8 *result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  if (a2)
  {
    if (a2 > 15) {
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/StringGutsRangeReplaceable.swift", 38, 2, 0xDFuLL, 0);
    }
    uint64_t v3 = 0;
    uint64_t v4 = 0;
    uint64_t v5 = 8;
    if (a2 < 8) {
      uint64_t v5 = a2;
    }
    unint64_t v6 = v5 & ~(v5 >> 63);
    unint64_t v7 = v5 - 1;
    unint64_t v8 = result;
    do
    {
      if (v6 <= v7) {
        _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Index out of range", 18, 2, "Swift/Range.swift", 17, 2, 0x131uLL, 0);
      }
      unsigned int v9 = *v8++;
      v3 |= (unint64_t)v9 << (v4 & 0x38);
      v4 += 8;
      --v5;
    }
    while (v5);
    if (a2 <= 8)
    {
      uint64_t v10 = 0;
    }
    else
    {
      uint64_t v10 = result[8];
      if (a2 != 9)
      {
        v10 |= (unint64_t)result[9] << 8;
        if (a2 != 10)
        {
          v10 |= (unint64_t)result[10] << 16;
          if (a2 != 11)
          {
            v10 |= (unint64_t)result[11] << 24;
            if (a2 != 12)
            {
              v10 |= (unint64_t)result[12] << 32;
              if (a2 != 13)
              {
                v10 |= (unint64_t)result[13] << 40;
                if (a2 != 14) {
                  v10 |= (unint64_t)result[14] << 48;
                }
              }
            }
          }
        }
      }
    }
    unint64_t v12 = 0xA000000000000000;
    if (((v10 | v3) & 0x8080808080808080) == 0) {
      unint64_t v12 = 0xE000000000000000;
    }
    unint64_t v11 = v12 | (a2 << 56) | v10;
  }
  else
  {
    uint64_t v3 = 0;
    unint64_t v11 = 0xE000000000000000;
  }
  *a3 = v3;
  a3[1] = v11;
  return result;
}

void _StringGuts.appendInPlace(_:isASCII:)(char *a1, size_t a2, char a3)
{
  uint64_t v4 = v3;
  uint64_t v7 = v3[1] & 0xFFFFFFFFFFFFFFFLL;
  specialized UnsafeMutablePointer.initialize(from:count:)(a1, a2, (char *)(v7 + (*(void *)(v7 + 24) & 0xFFFFFFFFFFFFLL) + 32));
  uint64_t v8 = *(void *)(v7 + 24);
  if (__OFADD__(v8 & 0xFFFFFFFFFFFFLL, a2))
  {
    __break(1u);
  }
  else
  {
    __StringStorage._updateCountAndFlags(newCount:newIsASCII:)((v8 & 0xFFFFFFFFFFFFLL) + a2, (v8 < 0) & a3);
    *uint64_t v4 = *(void *)(v7 + 24);
  }
}

void _StringGuts._foreignAppendInPlace(_:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v5 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0) {
    unint64_t v5 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v5 < (a4 & 0xFFFFFFFFFFFFuLL)) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index range is out of bounds", 35, 2, "Swift/StringIndexValidation.swift", 33, 2, 0xD2uLL, 0);
  }
  unint64_t v6 = v4;
  unint64_t v8 = (a3 << 16) | 1;
  if (v8 < 0x10000) {
    unint64_t v8 = (a3 << 16) | 3;
  }
  v12[0] = v8;
  v12[1] = (a4 << 16) | 1;
  void v12[2] = a1;
  unint64_t v13 = a2;
  unint64_t v14 = v8;
  uint64_t v9 = v4[1] & 0xFFFFFFFFFFFFFFFLL;
  if ((a2 & 0x2000000000000000) != 0) {
    char v10 = (a2 & 0x4000000000000000) != 0;
  }
  else {
    char v10 = a1 < 0;
  }
  specialized __StringStorage.appendInPlace<A>(_:isASCII:)(v12, v10);
  uint64_t v11 = v13;
  swift_bridgeObjectRetain(a2);
  swift_bridgeObjectRelease(v11);
  *unint64_t v6 = *(void *)(v9 + 24);
}

void closure #1 in _StringGuts.appendInPlace(_:isASCII:)(uint64_t a1, char *__src, size_t __n, char a4)
{
  specialized UnsafeMutablePointer.initialize(from:count:)(__src, __n, (char *)(a1 + (*(void *)(a1 + 24) & 0xFFFFFFFFFFFFLL) + 32));
  uint64_t v7 = *(void *)(a1 + 24);
  if (__OFADD__(v7 & 0xFFFFFFFFFFFFLL, __n)) {
    __break(1u);
  }
  else {
    __StringStorage._updateCountAndFlags(newCount:newIsASCII:)((v7 & 0xFFFFFFFFFFFFLL) + __n, (v7 < 0) & a4);
  }
}

void __StringStorage.appendInPlace(_:isASCII:)(char *a1, size_t a2, char a3)
{
  specialized UnsafeMutablePointer.initialize(from:count:)(a1, a2, (char *)(v3 + (*(void *)(v3 + 24) & 0xFFFFFFFFFFFFLL) + 32));
  uint64_t v6 = *(void *)(v3 + 24);
  if (__OFADD__(v6 & 0xFFFFFFFFFFFFLL, a2))
  {
    __break(1u);
  }
  else
  {
    __StringStorage._updateCountAndFlags(newCount:newIsASCII:)((v6 & 0xFFFFFFFFFFFFLL) + a2, (v6 < 0) & a3);
  }
}

void specialized __StringStorage.appendInPlace<A>(_:isASCII:)(unint64_t *a1, char a2)
{
  Swift::UInt64 v4 = a1[4];
  Swift::UInt64 v5 = a1[1] >> 14;
  if (v5 != v4 >> 14)
  {
    unint64_t v6 = 0;
    uint64_t v10 = v2 + 32;
    while (1)
    {
      unint64_t v11 = *a1;
      unint64_t v13 = a1[2];
      uint64_t v12 = a1[3];
      uint64_t v14 = (v13 >> 59) & 1;
      if ((v12 & 0x1000000000000000) == 0) {
        LOBYTE(v14) = 1;
      }
      Swift::UInt64 rawBits = v4;
      if ((v4 & 0xC) == 4 << v14)
      {
        uint64_t v34 = v10;
        Swift::UInt64 rawBits = _StringGuts._slowEnsureMatchingEncoding(_:)((Swift::String::Index)v4)._rawBits;
        uint64_t v10 = v34;
      }
      if (rawBits >> 14 < v11 >> 14 || rawBits >> 14 >= v5) {
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index is out of bounds", 29, 2, "Swift/Substring.swift", 21, 2, 0x29BuLL, 0);
      }
      if ((v12 & 0x1000000000000000) != 0)
      {
        uint64_t v25 = v10;
        Swift::UInt8 v26 = String.UTF8View._foreignSubscript(position:)((Swift::String::Index)rawBits);
        uint64_t v10 = v25;
        Swift::UInt8 v19 = v26;
      }
      else
      {
        Swift::UInt64 v17 = rawBits >> 16;
        if ((v12 & 0x2000000000000000) != 0)
        {
          v35[0] = v13;
          v35[1] = v12 & 0xFFFFFFFFFFFFFFLL;
          Swift::UInt8 v19 = *((unsigned char *)v35 + v17);
        }
        else
        {
          if ((v13 & 0x1000000000000000) != 0)
          {
            id v18 = (unsigned char *)((v12 & 0xFFFFFFFFFFFFFFFLL) + 32);
          }
          else
          {
            uint64_t v32 = v12;
            uint64_t v33 = v10;
            id v18 = _StringObject.sharedUTF8.getter(v13, v32);
            uint64_t v10 = v33;
          }
          Swift::UInt8 v19 = v18[v17];
        }
      }
      unint64_t v20 = a1[2];
      unint64_t v21 = a1[3];
      uint64_t v22 = (v20 >> 59) & 1;
      if ((v21 & 0x1000000000000000) == 0) {
        LOBYTE(v22) = 1;
      }
      if ((v4 & 0xC) == 4 << v22)
      {
        v27._Swift::UInt64 rawBits = v4;
        uint64_t v28 = v10;
        v29._Swift::UInt64 rawBits = _StringGuts._slowEnsureMatchingEncoding(_:)(v27)._rawBits;
        uint64_t v10 = v28;
        Swift::UInt64 v4 = v29._rawBits;
        if ((v21 & 0x1000000000000000) != 0)
        {
LABEL_33:
          unint64_t v30 = HIBYTE(v21) & 0xF;
          if ((v21 & 0x2000000000000000) == 0) {
            unint64_t v30 = v20 & 0xFFFFFFFFFFFFLL;
          }
          if (v30 <= v4 >> 16) {
            _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index is out of bounds", 29, 2, "Swift/StringUTF8View.swift", 26, 2, 0x90uLL, 0);
          }
          uint64_t v31 = v10;
          Swift::UInt64 v23 = String.UTF8View._foreignIndex(after:)((Swift::String::Index)v4)._rawBits;
          uint64_t v10 = v31;
          goto LABEL_27;
        }
      }
      else if ((v21 & 0x1000000000000000) != 0)
      {
        goto LABEL_33;
      }
      Swift::UInt64 v23 = (v4 & 0xFFFFFFFFFFFF0000) + 65540;
LABEL_27:
      a1[4] = v23;
      uint64_t v7 = *(void *)(v2 + 24);
      uint64_t v8 = v7 & 0xFFFFFFFFFFFFLL;
      uint64_t v24 = (*(void *)(v2 + 16) & 0xFFFFFFFFFFFFLL) + ~(v7 & 0xFFFFFFFFFFFFLL);
      if (v24 < 0) {
        goto LABEL_40;
      }
      if (v6 >= v24) {
        _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x20EuLL, 0);
      }
      *(unsigned char *)(v10 + v8 + v6++) = v19;
      Swift::UInt64 v4 = a1[4];
      Swift::UInt64 v5 = a1[1] >> 14;
      if (v5 == v4 >> 14) {
        goto LABEL_3;
      }
    }
  }
  unint64_t v6 = 0;
  uint64_t v7 = *(void *)(v2 + 24);
  uint64_t v8 = v7 & 0xFFFFFFFFFFFFLL;
LABEL_3:
  if (__OFADD__(v8, v6))
  {
    __break(1u);
LABEL_40:
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeMutableBufferPointer with negative count", 46, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x47uLL, 0);
  }

  __StringStorage._updateCountAndFlags(newCount:newIsASCII:)(v8 + v6, (v7 < 0) & a2);
}

Swift::Void __swiftcall _StringGuts.clear()()
{
  uint64_t v1 = v0[1];
  if ((*v0 & ~v1 & 0x2000000000000000) != 0
    && (BOOL isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v1 & 0xFFFFFFFFFFFFFFFLL),
        uint64_t v1 = v0[1],
        isUniquelyReferenced_nonNull_native))
  {
    uint64_t v3 = v1 & 0xFFFFFFFFFFFFFFFLL;
    unint64_t v4 = 0xF000000000000000;
    *(void *)((v1 & 0xFFFFFFFFFFFFFFFLL) + 0x18) = 0xF000000000000000;
    *(unsigned char *)((v1 & 0xFFFFFFFFFFFFFFFLL) + 0x2_assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000015, 0x80000001816DF320, "Swift/StringGuts.swift", 22, 2, 0x1A9uLL, 0) = 0;
    uint64_t v5 = *(void *)((v1 & 0xFFFFFFFFFFFFFFFLL) + 0x10);
    if (v5 < 0)
    {
      unint64_t v6 = (uint64_t *)(((v1 & 0xFFFFFFFFFFFFFFFLL) + 32 + (v5 & 0xFFFFFFFFFFFFLL) + 7) & 0xFFFFFFFFFFFFFFF8);
      uint64_t v7 = *v6;
      *unint64_t v6 = 0;
      swift_release(v7);
      unint64_t v4 = *(void *)(v3 + 24);
    }
    unint64_t *v0 = v4;
  }
  else
  {
    swift_bridgeObjectRelease(v1);
    unint64_t *v0 = 0;
    v0[1] = 0xE000000000000000;
  }
}

Swift::Void __swiftcall _StringGuts.remove(from:to:)(Swift::String::Index from, Swift::String::Index to)
{
  uint64_t v3 = v2;
  Swift::UInt64 v6 = from._rawBits >> 16;
  Swift::UInt64 v7 = to._rawBits >> 16;
  uint64_t v9 = *v3;
  unint64_t v8 = v3[1];
  if ((*v3 & ~v8 & 0x2000000000000000) != 0)
  {
    BOOL isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v8 & 0xFFFFFFFFFFFFFFFLL);
    unint64_t v8 = v3[1];
    if (isUniquelyReferenced_nonNull_native)
    {
      __StringStorage.remove(from:to:)(v6, v7);
      *uint64_t v3 = *(void *)((v8 & 0xFFFFFFFFFFFFFFFLL) + 0x18);
      return;
    }
    uint64_t v9 = *v3;
  }
  v135._Swift::UInt64 rawBits = to._rawBits;
  unint64_t v138 = 0;
  unint64_t v139 = 0xE000000000000000;
  uint64_t v11 = _StringGuts.nativeCapacity.getter(v9, v8);
  uint64_t v13 = HIBYTE(v8) & 0xF;
  if ((v8 & 0x2000000000000000) == 0) {
    uint64_t v13 = v9 & 0xFFFFFFFFFFFFLL;
  }
  uint64_t v14 = v6 - v7 + v13;
  if (v12) {
    uint64_t v15 = v14;
  }
  else {
    uint64_t v15 = v11;
  }
  if (v15 >= 16 && ((uint64_t v16 = _StringGuts.uniqueNativeCapacity.getter(), (v17 & 1) != 0) || v16 < v15))
  {
    uint64_t v21 = 2 * _StringGuts.uniqueNativeCapacity.getter();
    if (v21 <= v15) {
      uint64_t v21 = v15;
    }
    if (v20) {
      int64_t v22 = v15;
    }
    else {
      int64_t v22 = v21;
    }
    uint64_t v136 = 0;
    uint64_t v137 = 0;
    unint64_t v19 = specialized static __StringStorage.create(initializingFrom:codeUnitCapacity:isASCII:)((char *)&v136, 0, v22, 1);
    unint64_t v18 = *(void *)(v19 + 24);
    swift_bridgeObjectRelease(0xE000000000000000);
    unint64_t v138 = v18;
    unint64_t v139 = v19;
  }
  else
  {
    unint64_t v18 = 0;
    unint64_t v19 = 0xE000000000000000;
  }
  v23._Swift::UInt64 rawBits = from._rawBits;
  unint64_t v26 = specialized Collection.subscript.getter(v23, *v3, v3[1]);
  uint64_t v28 = v27;
  unint64_t v29 = v25;
  uint64_t v30 = v26 >> 16;
  uint64_t v31 = v24 >> 16;
  unint64_t v134 = v24;
  if ((v25 & 0x1000000000000000) == 0)
  {
    unint64_t v32 = v31 - v30;
    swift_bridgeObjectRetain_n(v25, 2);
    if ((v19 & 0x1000000000000000) == 0) {
      goto LABEL_22;
    }
LABEL_114:
    Swift::Int v124 = String.UTF8View._foreignCount()();
    int64_t v35 = v124 + v32;
    if (!__OFADD__(v124, v32)) {
      goto LABEL_26;
    }
LABEL_116:
    __break(1u);
    goto LABEL_117;
  }
  Swift::UInt64 v119 = v24 & 0xFFFFFFFFFFFF0000 | 1;
  swift_bridgeObjectRetain_n(v25, 3);
  v120._Swift::UInt64 rawBits = v26 & 0xFFFFFFFFFFFF0000 | 1;
  v121._Swift::UInt64 rawBits = v119;
  v122._Swift::UInt64 rawBits = _StringGuts.validateScalarRange(_:)(v120, v121, v28, v29);
  if (v122._rawBits < 0x10000) {
    v122._rawBits |= 3;
  }
  unint64_t v32 = specialized Collection.count.getter(v122, v123, v28, v29);
  swift_bridgeObjectRelease(v29);
  unint64_t v18 = v138;
  unint64_t v19 = v139;
  if ((v139 & 0x1000000000000000) != 0) {
    goto LABEL_114;
  }
LABEL_22:
  if ((v19 & 0x2000000000000000) != 0) {
    uint64_t v34 = HIBYTE(v19) & 0xF;
  }
  else {
    uint64_t v34 = v18 & 0xFFFFFFFFFFFFLL;
  }
  int64_t v35 = v34 + v32;
  if (__OFADD__(v34, v32)) {
    goto LABEL_116;
  }
LABEL_26:
  if ((v18 & ~v19 & 0x2000000000000000) != 0 && swift_isUniquelyReferenced_nonNull_native(v19 & 0xFFFFFFFFFFFFFFFLL))
  {
    int64_t v36 = _StringGuts.nativeUnusedCapacity.getter(v18, v19);
    if (v37) {
      goto LABEL_129;
    }
    if (v35 > 15 || (v19 & 0x2000000000000000) == 0 && v36 >= (uint64_t)v32) {
      goto LABEL_32;
    }
LABEL_38:
    swift_bridgeObjectRelease(v29);
    swift_bridgeObjectRetain(v19);
    unint64_t v43 = _StringGuts._convertedToSmall()(v18, v19);
    unint64_t v45 = v44;
    swift_bridgeObjectRelease(v19);
    unint64_t v46 = HIBYTE(v29) & 0xF;
    if ((v29 & 0x2000000000000000) == 0) {
      unint64_t v46 = v28 & 0xFFFFFFFFFFFFLL;
    }
    if (v46 < v31) {
      goto LABEL_123;
    }
    if ((v26 & 0xFFFFFFFFFFFF0000 | 1) >= 0x10000) {
      v47._Swift::UInt64 rawBits = v26 & 0xFFFFFFFFFFFF0000 | 1;
    }
    else {
      v47._Swift::UInt64 rawBits = v26 & 0xFFFFFFFFFFFF0000 | 3;
    }
    if (v47._rawBits >> 16 || v31 != v46)
    {
      v48._Swift::UInt64 rawBits = v134 & 0xFFFFFFFFFFFF0000 | 1;
      uint64_t v28 = specialized static String._copying(_:)(v47, v48, v28, v29);
      unint64_t v50 = v49;
      swift_bridgeObjectRelease(v29);
      unint64_t v29 = v50;
    }
    unint64_t v51 = _StringGuts._convertedToSmall()(v28, v29);
    unint64_t v53 = v52;
    swift_bridgeObjectRelease(v29);
    uint64_t v54 = HIBYTE(v45) & 0xF;
    uint64_t v55 = HIBYTE(v53) & 0xF;
    uint64_t v56 = v55 + v54;
    if ((unint64_t)(v55 + v54) > 0xF)
    {
LABEL_128:
      unint64_t v133 = 266;
      goto LABEL_130;
    }
    if (v55)
    {
      char v57 = 0;
      unint64_t v58 = 0;
      do
      {
        unint64_t v59 = v54 + v58;
        unint64_t v60 = v58 + 1;
        if (v58 >= 8) {
          unint64_t v61 = v53;
        }
        else {
          unint64_t v61 = v51;
        }
        unint64_t v62 = v61 >> (v57 & 0x38);
        char v63 = (8 * v54 + v57) & 0x38;
        uint64_t v64 = (-255 << v63) - 1;
        unint64_t v65 = (unint64_t)v62 << v63;
        unint64_t v66 = v65 | v64 & v45;
        unint64_t v67 = v65 | v64 & v43;
        if (v59 < 8) {
          unint64_t v43 = v67;
        }
        else {
          unint64_t v45 = v66;
        }
        v57 += 8;
        unint64_t v58 = v60;
      }
      while (v55 != v60);
    }
    swift_bridgeObjectRelease(v19);
    unint64_t v68 = 0xA000000000000000;
    if (!(v43 & 0x8080808080808080 | v45 & 0x80808080808080)) {
      unint64_t v68 = 0xE000000000000000;
    }
    unint64_t v138 = v43;
    unint64_t v139 = v68 & 0xFF00000000000000 | (v56 << 56) | v45 & 0xFFFFFFFFFFFFFFLL;
    goto LABEL_64;
  }
  if (v35 <= 15) {
    goto LABEL_38;
  }
LABEL_32:
  _StringGuts.prepareForAppendInPlace(totalCount:otherUTF8Count:)(v35, v32);
  swift_bridgeObjectRelease(v29);
  if ((v29 & 0x1000000000000000) != 0)
  {
    _StringGuts._foreignAppendInPlace(_:)(v28, v29, v30, v31);
LABEL_61:
    swift_bridgeObjectRelease(v29);
    goto LABEL_64;
  }
  if ((v29 & 0x2000000000000000) == 0)
  {
    if ((v28 & 0x1000000000000000) != 0)
    {
      id v38 = (id)((v29 & 0xFFFFFFFFFFFFFFFLL) + 32);
      uint64_t v39 = v28 & 0xFFFFFFFFFFFFLL;
      if ((v28 & 0xFFFFFFFFFFFFLL) < v31) {
        goto LABEL_127;
      }
    }
    else
    {
      id v38 = _StringObject.sharedUTF8.getter(v28, v29);
      uint64_t v39 = v131;
      if (v131 < v31) {
        goto LABEL_127;
      }
    }
    unint64_t v40 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(v30, v31, (uint64_t)v38, v39);
    uint64_t v41 = v139 & 0xFFFFFFFFFFFFFFFLL;
    closure #1 in _StringGuts.appendInPlace(_:isASCII:)(v139 & 0xFFFFFFFFFFFFFFFLL, v40, v42, v28 < 0);
    unint64_t v138 = *(void *)(v41 + 24);
    goto LABEL_61;
  }
  swift_bridgeObjectRelease(v29);
  unint64_t v69 = HIBYTE(v29) & 0xF;
  uint64_t v136 = v28;
  uint64_t v137 = v29 & 0xFFFFFFFFFFFFFFLL;
  if (v69 < v31) {
    goto LABEL_127;
  }
  __int16 v70 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(v30, v31, (uint64_t)&v136, v69);
  uint64_t v71 = v139 & 0xFFFFFFFFFFFFFFFLL;
  closure #1 in _StringGuts.appendInPlace(_:isASCII:)(v139 & 0xFFFFFFFFFFFFFFFLL, v70, v72, (v29 & 0x4000000000000000) != 0);
  unint64_t v138 = *(void *)(v71 + 24);
LABEL_64:
  v73._Swift::UInt64 rawBits = v135._rawBits;
  uint64_t v28 = specialized Collection.subscript.getter(v73, *v3, v3[1]);
  unint64_t v26 = v74;
  unint64_t v32 = v75;
  uint64_t v31 = (unint64_t)v28 >> 16;
  int64_t v35 = v33 >> 16;
  v135._Swift::UInt64 rawBits = v33;
  if ((v75 & 0x1000000000000000) == 0)
  {
    uint64_t v76 = v74;
    Swift::Int v77 = v35 - v31;
    swift_bridgeObjectRetain_n(v75, 2);
    unint64_t v79 = v138;
    unint64_t v78 = v139;
    if ((v139 & 0x1000000000000000) == 0) {
      goto LABEL_66;
    }
LABEL_120:
    Swift::Int v130 = String.UTF8View._foreignCount()();
    int64_t v80 = v130 + v77;
    if (!__OFADD__(v130, v77)) {
      goto LABEL_71;
    }
    goto LABEL_122;
  }
LABEL_117:
  Swift::UInt64 v125 = v33 & 0xFFFFFFFFFFFF0000 | 1;
  swift_bridgeObjectRetain_n(v32, 3);
  v126._Swift::UInt64 rawBits = v28 & 0xFFFFFFFFFFFF0000 | 1;
  v127._Swift::UInt64 rawBits = v125;
  v128._Swift::UInt64 rawBits = _StringGuts.validateScalarRange(_:)(v126, v127, v26, v32);
  if (v128._rawBits < 0x10000) {
    v128._rawBits |= 3;
  }
  uint64_t v76 = v26;
  Swift::Int v77 = specialized Collection.count.getter(v128, v129, v26, v32);
  swift_bridgeObjectRelease(v32);
  unint64_t v79 = v138;
  unint64_t v78 = v139;
  if ((v139 & 0x1000000000000000) != 0) {
    goto LABEL_120;
  }
LABEL_66:
  if ((v78 & 0x2000000000000000) == 0)
  {
    int64_t v80 = (v79 & 0xFFFFFFFFFFFFLL) + v77;
    if (!__OFADD__(v79 & 0xFFFFFFFFFFFFLL, v77)) {
      goto LABEL_71;
    }
LABEL_122:
    __break(1u);
    goto LABEL_123;
  }
  uint64_t v81 = HIBYTE(v78) & 0xF;
  int64_t v80 = v81 + v77;
  if (__OFADD__(v81, v77)) {
    goto LABEL_122;
  }
LABEL_71:
  if ((v79 & ~v78 & 0x2000000000000000) == 0 || !swift_isUniquelyReferenced_nonNull_native(v78 & 0xFFFFFFFFFFFFFFFLL))
  {
    if (v80 > 15) {
      goto LABEL_77;
    }
LABEL_83:
    swift_bridgeObjectRelease(v32);
    swift_bridgeObjectRetain(v78);
    unint64_t v88 = _StringGuts._convertedToSmall()(v79, v78);
    unint64_t v90 = v89;
    swift_bridgeObjectRelease(v78);
    unint64_t v91 = HIBYTE(v32) & 0xF;
    if ((v32 & 0x2000000000000000) == 0) {
      unint64_t v91 = v76 & 0xFFFFFFFFFFFFLL;
    }
    if (v91 >= v35)
    {
      if ((v28 & 0xFFFFFFFFFFFF0000 | 1) >= 0x10000) {
        v92._Swift::UInt64 rawBits = v28 & 0xFFFFFFFFFFFF0000 | 1;
      }
      else {
        v92._Swift::UInt64 rawBits = v28 & 0xFFFFFFFFFFFF0000 | 3;
      }
      if (v92._rawBits >> 16 || v35 != v91)
      {
        v93._Swift::UInt64 rawBits = v135._rawBits & 0xFFFFFFFFFFFF0000 | 1;
        uint64_t v76 = specialized static String._copying(_:)(v92, v93, v76, v32);
        unint64_t v95 = v94;
        swift_bridgeObjectRelease(v32);
        unint64_t v32 = v95;
      }
      unint64_t v96 = _StringGuts._convertedToSmall()(v76, v32);
      unint64_t v98 = v97;
      swift_bridgeObjectRelease(v32);
      uint64_t v99 = HIBYTE(v90) & 0xF;
      uint64_t v100 = HIBYTE(v98) & 0xF;
      uint64_t v101 = v100 + v99;
      if ((unint64_t)(v100 + v99) <= 0xF)
      {
        if (v100)
        {
          char v102 = 0;
          unint64_t v103 = 0;
          do
          {
            unint64_t v104 = v99 + v103;
            unint64_t v105 = v103 + 1;
            if (v103 >= 8) {
              unint64_t v106 = v98;
            }
            else {
              unint64_t v106 = v96;
            }
            unint64_t v107 = v106 >> (v102 & 0x38);
            char v108 = (8 * v99 + v102) & 0x38;
            uint64_t v109 = (-255 << v108) - 1;
            unint64_t v110 = (unint64_t)v107 << v108;
            unint64_t v111 = v110 | v109 & v90;
            unint64_t v112 = v110 | v109 & v88;
            if (v104 < 8) {
              unint64_t v88 = v112;
            }
            else {
              unint64_t v90 = v111;
            }
            v102 += 8;
            unint64_t v103 = v105;
          }
          while (v100 != v105);
        }
        swift_bridgeObjectRelease(v78);
        unint64_t v113 = 0xA000000000000000;
        if (!(v88 & 0x8080808080808080 | v90 & 0x80808080808080)) {
          unint64_t v113 = 0xE000000000000000;
        }
        unint64_t v138 = v88;
        unint64_t v139 = v113 & 0xFF00000000000000 | (v101 << 56) | v90 & 0xFFFFFFFFFFFFFFLL;
        goto LABEL_109;
      }
      goto LABEL_128;
    }
LABEL_123:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index range is out of bounds", 35, 2, "Swift/StringIndexValidation.swift", 33, 2, 0xD2uLL, 0);
  }
  int64_t v82 = _StringGuts.nativeUnusedCapacity.getter(v79, v78);
  if (v83)
  {
LABEL_129:
    unint64_t v133 = 258;
LABEL_130:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/StringGutsRangeReplaceable.swift", 38, 2, v133, 0);
  }
  if (v80 <= 15 && ((v78 & 0x2000000000000000) != 0 || v82 < v77)) {
    goto LABEL_83;
  }
LABEL_77:
  _StringGuts.prepareForAppendInPlace(totalCount:otherUTF8Count:)(v80, v77);
  swift_bridgeObjectRelease(v32);
  if ((v32 & 0x1000000000000000) != 0)
  {
    _StringGuts._foreignAppendInPlace(_:)(v76, v32, v31, v35);
    goto LABEL_106;
  }
  if ((v32 & 0x2000000000000000) != 0)
  {
    swift_bridgeObjectRelease(v32);
    unint64_t v114 = HIBYTE(v32) & 0xF;
    uint64_t v136 = v76;
    uint64_t v137 = v32 & 0xFFFFFFFFFFFFFFLL;
    if (v114 >= v35)
    {
      char v115 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(v31, v35, (uint64_t)&v136, v114);
      _StringGuts.appendInPlace(_:isASCII:)(v115, v116, (v32 & 0x4000000000000000) != 0);
      goto LABEL_109;
    }
    goto LABEL_127;
  }
  if ((v76 & 0x1000000000000000) == 0)
  {
    id v84 = _StringObject.sharedUTF8.getter(v76, v32);
    uint64_t v85 = v132;
    if (v132 >= v35) {
      goto LABEL_81;
    }
LABEL_127:
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x745uLL, 0);
  }
  id v84 = (id)((v32 & 0xFFFFFFFFFFFFFFFLL) + 32);
  uint64_t v85 = v76 & 0xFFFFFFFFFFFFLL;
  if ((v76 & 0xFFFFFFFFFFFFLL) < v35) {
    goto LABEL_127;
  }
LABEL_81:
  uint64_t v86 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(v31, v35, (uint64_t)v84, v85);
  _StringGuts.appendInPlace(_:isASCII:)(v86, v87, v76 < 0);
LABEL_106:
  swift_bridgeObjectRelease(v32);
LABEL_109:
  unint64_t v117 = v138;
  unint64_t v118 = v139;
  swift_bridgeObjectRelease(v3[1]);
  *uint64_t v3 = v117;
  v3[1] = v118;
}

Swift::Void __swiftcall __StringStorage.remove(from:to:)(Swift::Int from, Swift::Int to)
{
  specialized UnsafeMutablePointer.moveInitialize(from:count:)((char *)(v2 + 32 + to), (*(void *)(v2 + 24) & 0xFFFFFFFFFFFFLL) - to, (char *)(v2 + 32 + from), "UnsafeMutablePointer.moveInitialize with negative count", 55, 0x416uLL);
  uint64_t v5 = *(void *)(v2 + 24);

  __StringStorage._updateCountAndFlags(newCount:newIsASCII:)(from - to + (v5 & 0xFFFFFFFFFFFFLL), v5 < 0);
}

void String.append(contentsOf:)(unint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v5 = (uint64_t *)v4;
  uint64_t v9 = a1 >> 16;
  unint64_t v10 = a2 >> 16;
  if ((a4 & 0x1000000000000000) == 0)
  {
    Swift::Int v11 = v10 - v9;
    unint64_t v13 = *v4;
    unint64_t v12 = v4[1];
    if ((v12 & 0x1000000000000000) == 0) {
      goto LABEL_3;
    }
LABEL_51:
    Swift::Int v61 = String.UTF8View._foreignCount()();
    int64_t v15 = v61 + v11;
    if (!__OFADD__(v61, v11)) {
      goto LABEL_7;
    }
LABEL_53:
    __break(1u);
    goto LABEL_54;
  }
  v53._Swift::UInt64 rawBits = a1 & 0xFFFFFFFFFFFF0000 | 1;
  v54._Swift::UInt64 rawBits = a2 & 0xFFFFFFFFFFFF0000 | 1;
  Swift::UInt64 v55 = _StringGuts.validateScalarRange(_:)(v53, v54, a3, a4);
  Swift::UInt64 v57 = v56;
  if (v55 >= 0x10000) {
    Swift::UInt64 v58 = v55;
  }
  else {
    Swift::UInt64 v58 = v55 | 3;
  }
  swift_bridgeObjectRetain(a4);
  v59._Swift::UInt64 rawBits = v58;
  v60._Swift::UInt64 rawBits = v57;
  Swift::Int v11 = specialized Collection.count.getter(v59, v60, a3, a4);
  swift_bridgeObjectRelease(a4);
  unint64_t v13 = *v5;
  unint64_t v12 = v5[1];
  if ((v12 & 0x1000000000000000) != 0) {
    goto LABEL_51;
  }
LABEL_3:
  if ((v12 & 0x2000000000000000) != 0) {
    uint64_t v14 = HIBYTE(v12) & 0xF;
  }
  else {
    uint64_t v14 = v13 & 0xFFFFFFFFFFFFLL;
  }
  int64_t v15 = v14 + v11;
  if (__OFADD__(v14, v11)) {
    goto LABEL_53;
  }
LABEL_7:
  if ((v13 & ~v12 & 0x2000000000000000) == 0
    || (BOOL isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v12 & 0xFFFFFFFFFFFFFFFLL),
        unint64_t v13 = *v5,
        unint64_t v12 = v5[1],
        !isUniquelyReferenced_nonNull_native))
  {
    if (v15 > 15) {
      goto LABEL_13;
    }
LABEL_21:
    unint64_t v23 = _StringGuts._convertedToSmall()(v13, v12);
    unint64_t v25 = HIBYTE(a4) & 0xF;
    if ((a4 & 0x2000000000000000) == 0) {
      unint64_t v25 = a3 & 0xFFFFFFFFFFFFLL;
    }
    if (v25 >= v10)
    {
      unint64_t v26 = v23;
      unint64_t v27 = v24;
      if ((a1 & 0xFFFFFFFFFFFF0000 | 1) >= 0x10000) {
        v29._Swift::UInt64 rawBits = a1 & 0xFFFFFFFFFFFF0000 | 1;
      }
      else {
        v29._Swift::UInt64 rawBits = a1 & 0xFFFFFFFFFFFF0000 | 3;
      }
      v28._Swift::UInt64 rawBits = a2 & 0xFFFFFFFFFFFF0000 | 1;
      unint64_t v30 = specialized String.init(_:)(v29, v28, a3, a4);
      uint64_t v32 = v31;
      unint64_t v33 = _StringGuts._convertedToSmall()(v30, v31);
      unint64_t v35 = v34;
      swift_bridgeObjectRelease(v32);
      uint64_t v36 = HIBYTE(v27) & 0xF;
      uint64_t v37 = HIBYTE(v35) & 0xF;
      uint64_t v38 = v37 + v36;
      if ((unint64_t)(v37 + v36) <= 0xF)
      {
        if (v37)
        {
          char v39 = 0;
          unint64_t v40 = 0;
          do
          {
            unint64_t v41 = v36 + v40;
            unint64_t v42 = v40 + 1;
            if (v40 >= 8) {
              unint64_t v43 = v35;
            }
            else {
              unint64_t v43 = v33;
            }
            unint64_t v44 = v43 >> (v39 & 0x38);
            char v45 = (8 * v36 + v39) & 0x38;
            uint64_t v46 = (-255 << v45) - 1;
            unint64_t v47 = (unint64_t)v44 << v45;
            unint64_t v48 = v47 | v46 & v27;
            unint64_t v49 = v47 | v46 & v26;
            if (v41 < 8) {
              unint64_t v26 = v49;
            }
            else {
              unint64_t v27 = v48;
            }
            v39 += 8;
            unint64_t v40 = v42;
          }
          while (v37 != v42);
        }
        swift_bridgeObjectRelease(v12);
        unint64_t v50 = 0xA000000000000000;
        if (!(v26 & 0x8080808080808080 | v27 & 0x80808080808080)) {
          unint64_t v50 = 0xE000000000000000;
        }
        *uint64_t v5 = v26;
        v5[1] = v50 & 0xFF00000000000000 | (v38 << 56) | v27 & 0xFFFFFFFFFFFFFFLL;
        return;
      }
      unint64_t v63 = 266;
LABEL_60:
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/StringGutsRangeReplaceable.swift", 38, 2, v63, 0);
    }
LABEL_54:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index range is out of bounds", 35, 2, "Swift/StringIndexValidation.swift", 33, 2, 0xD2uLL, 0);
  }
  int64_t v17 = _StringGuts.nativeUnusedCapacity.getter(*v5, v5[1]);
  if (v18)
  {
    unint64_t v63 = 258;
    goto LABEL_60;
  }
  if (v15 <= 15 && ((v12 & 0x2000000000000000) != 0 || v17 < v11)) {
    goto LABEL_21;
  }
LABEL_13:
  _StringGuts.prepareForAppendInPlace(totalCount:otherUTF8Count:)(v15, v11);
  if ((a4 & 0x1000000000000000) != 0)
  {
    _StringGuts._foreignAppendInPlace(_:)(a3, a4, v9, v10);
  }
  else
  {
    if ((a4 & 0x2000000000000000) == 0)
    {
      if ((a3 & 0x1000000000000000) != 0)
      {
        id v19 = (id)((a4 & 0xFFFFFFFFFFFFFFFLL) + 32);
        uint64_t v20 = a3 & 0xFFFFFFFFFFFFLL;
        if ((a3 & 0xFFFFFFFFFFFFLL) >= (uint64_t)v10)
        {
LABEL_17:
          uint64_t v21 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(v9, v10, (uint64_t)v19, v20);
          _StringGuts.appendInPlace(_:isASCII:)(v21, v22, a3 < 0);
          return;
        }
      }
      else
      {
        id v19 = _StringObject.sharedUTF8.getter(a3, a4);
        uint64_t v20 = v62;
        if (v62 >= (uint64_t)v10) {
          goto LABEL_17;
        }
      }
LABEL_56:
      _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x745uLL, 0);
    }
    v65[0] = a3;
    v65[1] = a4 & 0xFFFFFFFFFFFFFFLL;
    if ((HIBYTE(a4) & 0xF) < v10) {
      goto LABEL_56;
    }
    if ((uint64_t)(v10 - v9) < 0) {
      _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeBufferPointer with negative count", 39, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x53FuLL, 0);
    }
    uint64_t v51 = v5[1] & 0xFFFFFFFFFFFFFFFLL;
    specialized UnsafeMutablePointer.initialize(from:count:)((char *)v65 + v9, v10 - v9, (char *)(v51 + (*(void *)(v51 + 0x18) & 0xFFFFFFFFFFFFLL) + 32));
    __StringStorage._updateCountAndFlags(newCount:newIsASCII:)((*(void *)(v51 + 24) & 0xFFFFFFFFFFFFLL) + v10 - v9, (a4 >> 62) & (*(uint64_t *)(v51 + 24) < 0));
    *uint64_t v5 = *(void *)(v51 + 24);
  }
}

unint64_t specialized _StringGuts.replaceSubrange<A>(_:with:)(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v5 = v4;
  unint64_t v11 = *(void *)v5;
  unint64_t v10 = *(void *)(v5 + 8);
  if ((*(void *)v5 & ~v10 & 0x2000000000000000) != 0)
  {
    BOOL isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v10 & 0xFFFFFFFFFFFFFFFLL);
    unint64_t v11 = *(void *)v5;
    unint64_t v10 = *(void *)(v5 + 8);
    if (isUniquelyReferenced_nonNull_native)
    {
      if ((a4 & 0x1000000000000000) != 0) {
        return specialized _StringGuts.uniqueNativeReplaceSubrange<A>(_:with:)(a1, a2, a3, a4, (uint64_t)closure #3 in _StringGuts.replaceSubrange<A>(_:with:), 0, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))specialized FlattenSequence<>.startIndex.getter, (uint64_t (*)(uint64_t))specialized FlattenSequence<>.distance(from:to:), (void (*)(unint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))specialized __StringStorage.replace<A>(from:to:with:replacementCount:));
      }
      if ((a4 & 0x2000000000000000) != 0)
      {
        unint64_t v241 = a3;
        unint64_t v242 = a4 & 0xFFFFFFFFFFFFFFLL;
        unint64_t v15 = a1 >> 16;
        uint64_t v82 = (HIBYTE(a4) & 0xF) + (a1 >> 16);
        unint64_t v83 = a2 >> 16;
        uint64_t v84 = v11 & 0xFFFFFFFFFFFFLL;
        if ((v10 & 0x2000000000000000) != 0) {
          uint64_t v84 = HIBYTE(v10) & 0xF;
        }
        Swift::Int v85 = v84 - v83 + v82;
        if (v85 > 15)
        {
          uint64_t v86 = _StringGuts.uniqueNativeCapacity.getter();
          if ((v87 & 1) != 0 || v86 < v85) {
            _StringGuts.grow(_:)(v85);
          }
        }
        uint64_t v22 = *(void *)(v5 + 8) & 0xFFFFFFFFFFFFFFFLL;
        unint64_t v25 = (char *)&v241;
        uint64_t v23 = v15;
        uint64_t v24 = v83;
        size_t v26 = HIBYTE(a4) & 0xF;
        goto LABEL_94;
      }
      if ((a3 & 0x1000000000000000) != 0)
      {
        unint64_t v13 = (char *)((a4 & 0xFFFFFFFFFFFFFFFLL) + 32);
        uint64_t v14 = a3 & 0xFFFFFFFFFFFFLL;
LABEL_7:
        unint64_t v15 = a1 >> 16;
        unint64_t v16 = v14 + (a1 >> 16);
        unint64_t v17 = a2 >> 16;
        uint64_t v18 = v11 & 0xFFFFFFFFFFFFLL;
        if ((v10 & 0x2000000000000000) != 0) {
          uint64_t v18 = HIBYTE(v10) & 0xF;
        }
        Swift::Int v19 = v16 + v18 - v17;
        if (v19 >= 16)
        {
          uint64_t v20 = _StringGuts.uniqueNativeCapacity.getter();
          if ((v21 & 1) != 0 || v20 < v19) {
            _StringGuts.grow(_:)(v19);
          }
        }
        uint64_t v22 = *(void *)(v5 + 8) & 0xFFFFFFFFFFFFFFFLL;
        uint64_t v23 = v15;
        uint64_t v24 = v17;
        unint64_t v25 = v13;
        size_t v26 = v14;
LABEL_94:
        __StringStorage.replace(from:to:with:)(v23, v24, v25, v26);
        *(void *)uint64_t v5 = *(void *)(v22 + 24);
        return v15;
      }
LABEL_243:
      unint64_t v13 = (char *)_StringObject.sharedUTF8.getter(a3, a4);
      uint64_t v14 = v217;
      goto LABEL_7;
    }
  }
  Swift::UInt64 v236 = a2;
  a2 = 0xE000000000000000;
  unint64_t v241 = 0;
  unint64_t v242 = 0xE000000000000000;
  uint64_t v27 = _StringGuts.nativeCapacity.getter(v11, v10);
  uint64_t v28 = 0;
  if ((v29 & 1) == 0)
  {
    int64_t v30 = v27;
    if (v27 > 15)
    {
      uint64_t v31 = _StringGuts.uniqueNativeCapacity.getter();
      if ((v32 & 1) != 0 || v31 < v30)
      {
        uint64_t v34 = 2 * _StringGuts.uniqueNativeCapacity.getter();
        if (v34 <= v30) {
          uint64_t v34 = v30;
        }
        if (v33) {
          int64_t v35 = v30;
        }
        else {
          int64_t v35 = v34;
        }
        unint64_t v239 = 0;
        uint64_t v240 = 0;
        a2 = specialized static __StringStorage.create(initializingFrom:codeUnitCapacity:isASCII:)((char *)&v239, 0, v35, 1);
        uint64_t v28 = *(void *)(a2 + 24);
        swift_bridgeObjectRelease(0xE000000000000000);
        unint64_t v241 = v28;
        unint64_t v242 = a2;
      }
      else
      {
        uint64_t v28 = 0;
        a2 = 0xE000000000000000;
      }
    }
  }
  unint64_t v238 = a3;
  unint64_t v233 = (void *)v5;
  unint64_t v234 = *(void *)(v5 + 8);
  v36._Swift::UInt64 rawBits = a1;
  unint64_t v235 = *(void *)v5;
  a3 = specialized Collection.subscript.getter(v36, *(void *)v5, v234);
  uint64_t v5 = v38;
  a1 = v39;
  unint64_t v11 = v37;
  unint64_t v40 = v38 >> 16;
  uint64_t to = a3 >> 16;
  if ((v37 & 0x1000000000000000) == 0)
  {
    Swift::Int v41 = v40 - (a3 >> 16);
    swift_bridgeObjectRetain_n(v37, 2);
    if ((a2 & 0x1000000000000000) == 0) {
      goto LABEL_27;
    }
LABEL_218:
    Swift::Int v200 = String.UTF8View._foreignCount()();
    Swift::Int v43 = v200 + v41;
    if (!__OFADD__(v200, v41)) {
      goto LABEL_31;
    }
LABEL_220:
    __break(1u);
    goto LABEL_221;
  }
  swift_bridgeObjectRetain_n(v37, 3);
  v196._Swift::UInt64 rawBits = a3 & 0xFFFFFFFFFFFF0000 | 1;
  v197._Swift::UInt64 rawBits = v5 & 0xFFFFFFFFFFFF0000 | 1;
  v198._Swift::UInt64 rawBits = _StringGuts.validateScalarRange(_:)(v196, v197, a1, v11);
  if (v198._rawBits < 0x10000) {
    v198._rawBits |= 3;
  }
  Swift::Int v41 = specialized Collection.count.getter(v198, v199, a1, v11);
  swift_bridgeObjectRelease(v11);
  uint64_t v28 = v241;
  a2 = v242;
  if ((v242 & 0x1000000000000000) != 0) {
    goto LABEL_218;
  }
LABEL_27:
  if ((a2 & 0x2000000000000000) != 0) {
    uint64_t v42 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v42 = v28 & 0xFFFFFFFFFFFFLL;
  }
  Swift::Int v43 = v42 + v41;
  if (__OFADD__(v42, v41)) {
    goto LABEL_220;
  }
LABEL_31:
  unint64_t v237 = a4;
  unint64_t v44 = a1;
  unint64_t v45 = v28 & ~a2;
  if ((v45 & 0x2000000000000000) != 0 && swift_isUniquelyReferenced_nonNull_native(a2 & 0xFFFFFFFFFFFFFFFLL))
  {
    int64_t v46 = _StringGuts.nativeUnusedCapacity.getter(v28, a2);
    if (v47) {
      goto LABEL_255;
    }
    if (v43 > 15) {
      goto LABEL_39;
    }
    if ((a2 & 0x2000000000000000) == 0)
    {
      if (v46 < v41)
      {
LABEL_63:
        swift_bridgeObjectRelease(v11);
        if ((a2 & 0x1000000000000000) != 0)
        {
          a1 = _StringGuts._foreignConvertedToSmall()(v241, a2);
          unint64_t v40 = v218;
        }
        else
        {
          if ((v241 & 0x1000000000000000) != 0)
          {
            Swift::String::Index v59 = (unsigned __int8 *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
            uint64_t v60 = v241 & 0xFFFFFFFFFFFFLL;
          }
          else
          {
            Swift::String::Index v59 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v241, a2);
            uint64_t v60 = v219;
          }
          swift_bridgeObjectRetain(a2);
          closure #1 in _StringGuts._convertedToSmall()(v59, v60, &v239);
          swift_bridgeObjectRelease(a2);
          a1 = v239;
          unint64_t v40 = v240;
        }
        goto LABEL_70;
      }
LABEL_39:
      int64_t v48 = _StringGuts.nativeUnusedCapacity.getter(v28, a2);
      unint64_t v10 = (v49 & 1) == 0 && v48 >= v41;
      if ((v45 & 0x2000000000000000) != 0 && swift_isUniquelyReferenced_nonNull_native(a2 & 0xFFFFFFFFFFFFFFFLL))
      {
        a1 = v44;
        a4 = v237;
        if (v10)
        {
LABEL_57:
          swift_bridgeObjectRelease(v11);
          if ((v11 & 0x1000000000000000) != 0)
          {
            _StringGuts._foreignAppendInPlace(_:)(a1, v11, to, v40);
          }
          else
          {
            if ((v11 & 0x2000000000000000) != 0)
            {
              swift_bridgeObjectRelease(v11);
              unint64_t v88 = HIBYTE(v11) & 0xF;
              unint64_t v239 = a1;
              uint64_t v240 = v11 & 0xFFFFFFFFFFFFFFLL;
              if (v88 >= v40)
              {
                unint64_t v89 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(to, v40, (uint64_t)&v239, v88);
                _StringGuts.appendInPlace(_:isASCII:)(v89, v90, (v11 & 0x4000000000000000) != 0);
                goto LABEL_97;
              }
              goto LABEL_253;
            }
            if ((a1 & 0x1000000000000000) != 0)
            {
              id v55 = (id)((v11 & 0xFFFFFFFFFFFFFFFLL) + 32);
              uint64_t v56 = a1 & 0xFFFFFFFFFFFFLL;
              if ((uint64_t)(a1 & 0xFFFFFFFFFFFFLL) < (uint64_t)v40) {
                goto LABEL_253;
              }
            }
            else
            {
              id v55 = _StringObject.sharedUTF8.getter(a1, v11);
              uint64_t v56 = v222;
              if (v222 < (uint64_t)v40) {
                goto LABEL_253;
              }
            }
            Swift::UInt64 v57 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(to, v40, (uint64_t)v55, v56);
            _StringGuts.appendInPlace(_:isASCII:)(v57, v58, (a1 & 0x8000000000000000) != 0);
          }
          swift_bridgeObjectRelease(v11);
          goto LABEL_97;
        }
      }
      else
      {
        a1 = v44;
        a4 = v237;
        if (v10)
        {
LABEL_56:
          _StringGuts.grow(_:)(v43);
          goto LABEL_57;
        }
      }
      uint64_t v51 = _StringGuts.nativeCapacity.getter(v28, a2);
      if (v52) {
        uint64_t v53 = 0;
      }
      else {
        uint64_t v53 = v51;
      }
      if (v53 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_242;
      }
      uint64_t v54 = 2 * v53;
      if (v54 > v43) {
        Swift::Int v43 = v54;
      }
      goto LABEL_56;
    }
  }
  else
  {
    if (v43 > 15) {
      goto LABEL_39;
    }
    if ((a2 & 0x2000000000000000) == 0) {
      goto LABEL_63;
    }
  }
  swift_bridgeObjectRelease(v11);
  a1 = v241;
  unint64_t v40 = a2;
LABEL_70:
  v61._Swift::UInt64 rawBits = a3 & 0xFFFFFFFFFFFF0000 | 1;
  v62._Swift::UInt64 rawBits = v5 & 0xFFFFFFFFFFFF0000 | 1;
  v63._Swift::UInt64 rawBits = _StringGuts.validateScalarRange(_:)(v61, v62, v44, v11);
  if (v63._rawBits < 0x10000) {
    v63._rawBits |= 3;
  }
  uint64_t v5 = specialized String.init(_:)(v63, v64, v44, v11);
  uint64_t v66 = v65;
  swift_bridgeObjectRelease(v11);
  if ((v66 & 0x2000000000000000) == 0) {
    goto LABEL_232;
  }
  swift_bridgeObjectRelease(v66);
  a4 = v237;
  while (1)
  {
    uint64_t v67 = HIBYTE(v40) & 0xF;
    uint64_t v68 = HIBYTE(v66) & 0xF;
    uint64_t v69 = v68 + v67;
    if ((unint64_t)(v68 + v67) > 0xF) {
      goto LABEL_254;
    }
    if (v68)
    {
      char v70 = 0;
      unint64_t v71 = 0;
      do
      {
        unint64_t v72 = v67 + v71;
        unint64_t v73 = v71 + 1;
        if (v71 >= 8) {
          unint64_t v74 = v66;
        }
        else {
          unint64_t v74 = v5;
        }
        unint64_t v75 = v74 >> (v70 & 0x38);
        char v76 = (8 * v67 + v70) & 0x38;
        uint64_t v77 = (-255 << v76) - 1;
        unint64_t v78 = (unint64_t)v75 << v76;
        unint64_t v79 = v78 | v77 & v40;
        unint64_t v80 = v78 | v77 & a1;
        if (v72 < 8) {
          a1 = v80;
        }
        else {
          unint64_t v40 = v79;
        }
        v70 += 8;
        unint64_t v71 = v73;
      }
      while (v68 != v73);
    }
    swift_bridgeObjectRelease(a2);
    unint64_t v81 = 0xA000000000000000;
    if (!(a1 & 0x8080808080808080 | v40 & 0x80808080808080)) {
      unint64_t v81 = 0xE000000000000000;
    }
    unint64_t v241 = a1;
    unint64_t v242 = v81 & 0xFF00000000000000 | (v69 << 56) | v40 & 0xFFFFFFFFFFFFFFLL;
LABEL_97:
    a1 = v241;
    a2 = v242;
    unint64_t v91 = HIBYTE(v242) & 0xF;
    if ((v242 & 0x2000000000000000) != 0) {
      unint64_t v40 = HIBYTE(v242) & 0xF;
    }
    else {
      unint64_t v40 = v241 & 0xFFFFFFFFFFFFLL;
    }
    unint64_t v237 = v40;
    if (!v40 && (v241 & ~v242 & 0x2000000000000000) == 0)
    {
      swift_bridgeObjectRetain(a4);
      swift_bridgeObjectRelease(a2);
      unint64_t v241 = v238;
      unint64_t v242 = a4;
      goto LABEL_147;
    }
    Swift::Int v43 = a4 & 0x2000000000000000;
    if ((v242 & 0x2000000000000000) != 0 && v43)
    {
      uint64_t v92 = HIBYTE(a4) & 0xF;
      unint64_t v93 = v91 + v92;
      if (v91 + v92 <= 0xF)
      {
        if (v92)
        {
          char v125 = 0;
          unint64_t v126 = 0;
          unint64_t v127 = v242;
          do
          {
            unint64_t v128 = v91 + v126;
            unint64_t v129 = v126 + 1;
            if (v126 >= 8) {
              unint64_t v130 = a4;
            }
            else {
              unint64_t v130 = v238;
            }
            unint64_t v131 = v130 >> (v125 & 0x38);
            char v132 = (8 * v91 + v125) & 0x38;
            uint64_t v133 = (-255 << v132) - 1;
            unint64_t v134 = (unint64_t)v131 << v132;
            unint64_t v135 = v134 | v133 & v127;
            unint64_t v136 = v134 | v133 & a1;
            if (v128 < 8) {
              a1 = v136;
            }
            else {
              unint64_t v127 = v135;
            }
            v125 += 8;
            unint64_t v126 = v129;
          }
          while (v92 != v129);
        }
        else
        {
          unint64_t v127 = v242;
        }
        swift_bridgeObjectRelease(v242);
        unint64_t v141 = 0xA000000000000000;
        if (!(a1 & 0x8080808080808080 | v127 & 0x80808080808080)) {
          unint64_t v141 = 0xE000000000000000;
        }
        unint64_t v241 = a1;
        unint64_t v242 = v141 & 0xFF00000000000000 | (v93 << 56) | v127 & 0xFFFFFFFFFFFFFFLL;
        goto LABEL_147;
      }
      Swift::Int v43 = 1;
    }
    a3 = HIBYTE(a4) & 0xF;
    uint64_t v66 = v238 & 0xFFFFFFFFFFFFLL;
    if (v43) {
      uint64_t v5 = HIBYTE(a4) & 0xF;
    }
    else {
      uint64_t v5 = v238 & 0xFFFFFFFFFFFFLL;
    }
    Swift::Int v94 = v5;
    if ((a4 & 0x1000000000000000) != 0) {
      goto LABEL_225;
    }
    unint64_t v95 = v40;
    if ((v242 & 0x1000000000000000) != 0) {
      break;
    }
LABEL_111:
    int64_t v96 = v95 + v94;
    if (!__OFADD__(v95, v94)) {
      goto LABEL_112;
    }
LABEL_231:
    __break(1u);
LABEL_232:
    a4 = v237;
    if ((v66 & 0x1000000000000000) != 0)
    {
      uint64_t v5 = _StringGuts._foreignConvertedToSmall()(v5, v66);
      uint64_t v228 = v227;
      swift_bridgeObjectRelease(v66);
      uint64_t v66 = v228;
    }
    else
    {
      if ((v5 & 0x1000000000000000) != 0)
      {
        Swift::String::Index v213 = (unsigned __int8 *)((v66 & 0xFFFFFFFFFFFFFFFLL) + 32);
        uint64_t v214 = v5 & 0xFFFFFFFFFFFFLL;
      }
      else
      {
        Swift::String::Index v213 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v5, v66);
      }
      closure #1 in _StringGuts._convertedToSmall()(v213, v214, &v239);
      swift_bridgeObjectRelease(v66);
      uint64_t v5 = v239;
      uint64_t v66 = v240;
    }
  }
  while (2)
  {
    Swift::Int v212 = String.UTF8View._foreignCount()();
    int64_t v96 = v212 + v94;
    if (__OFADD__(v212, v94)) {
      goto LABEL_231;
    }
LABEL_112:
    if ((a1 & ~a2 & 0x2000000000000000) != 0 && swift_isUniquelyReferenced_nonNull_native(a2 & 0xFFFFFFFFFFFFFFFLL))
    {
      int64_t v97 = _StringGuts.nativeUnusedCapacity.getter(a1, a2);
      if (v98) {
        goto LABEL_255;
      }
      uint64_t v99 = (a2 >> 61) & 1;
      if (v97 < v94) {
        LODWORD(v99) = 1;
      }
      if (v96 > 15 || !v99)
      {
LABEL_125:
        _StringGuts.prepareForAppendInPlace(totalCount:otherUTF8Count:)(v96, v94);
        uint64_t v122 = v238;
        if ((a4 & 0x1000000000000000) != 0)
        {
          _StringGuts._foreignAppendInPlace(_:)(v238, a4, 0, v5);
        }
        else if (v43)
        {
          unint64_t v239 = v238;
          uint64_t v240 = a4 & 0xFFFFFFFFFFFFFFLL;
          Swift::String::Index v123 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, a3, (uint64_t)&v239, a3);
          _StringGuts.appendInPlace(_:isASCII:)(v123, v124, (a4 & 0x4000000000000000) != 0);
        }
        else
        {
          if ((v238 & 0x1000000000000000) != 0)
          {
            uint64_t v137 = (a4 & 0xFFFFFFFFFFFFFFFLL) + 32;
            uint64_t v138 = v66;
          }
          else
          {
            id v224 = _StringObject.sharedUTF8.getter(v238, a4);
            if (v225 < v66) {
              goto LABEL_253;
            }
            uint64_t v137 = (uint64_t)v224;
            uint64_t v138 = v225;
            uint64_t v122 = v238;
          }
          unint64_t v139 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, v66, v137, v138);
          _StringGuts.appendInPlace(_:isASCII:)(v139, v140, v122 < 0);
        }
        goto LABEL_147;
      }
    }
    else if (v96 > 15)
    {
      goto LABEL_125;
    }
    swift_bridgeObjectRetain(a2);
    unint64_t v100 = _StringGuts._convertedToSmall()(a1, a2);
    unint64_t v102 = v101;
    swift_bridgeObjectRelease(a2);
    v103._Swift::UInt64 rawBits = (v5 << 16) | 1;
    v104._Swift::UInt64 rawBits = 1;
    Swift::UInt64 v105 = _StringGuts.validateScalarRange(_:)(v104, v103, v238, a4);
    Swift::UInt64 v107 = v106;
    if (v105 >= 0x10000) {
      Swift::UInt64 v108 = v105;
    }
    else {
      Swift::UInt64 v108 = v105 | 3;
    }
    swift_bridgeObjectRetain(a4);
    v109._Swift::UInt64 rawBits = v108;
    v110._Swift::UInt64 rawBits = v107;
    unint64_t v111 = specialized String.init(_:)(v109, v110, v238, a4);
    unint64_t v113 = v112;
    swift_bridgeObjectRelease(a4);
    unint64_t v114 = _StringGuts._convertedToSmall()(v111, v113);
    unint64_t v116 = v115;
    swift_bridgeObjectRelease(v113);
    unint64_t v117 = specialized _SmallString.init(_:appending:)(v100, v102, v114, v116);
    if (v119) {
      goto LABEL_254;
    }
    unint64_t v120 = v117;
    unint64_t v121 = v118;
    swift_bridgeObjectRelease(a2);
    unint64_t v241 = v120;
    unint64_t v242 = v121;
LABEL_147:
    Swift::Int v41 = v241;
    a2 = v242;
    unint64_t v142 = HIBYTE(v242) & 0xF;
    if ((v242 & 0x2000000000000000) == 0) {
      unint64_t v142 = v241 & 0xFFFFFFFFFFFFLL;
    }
    unint64_t v238 = v142;
    swift_bridgeObjectRetain_n(v242, 3);
    v143._Swift::UInt64 rawBits = v236;
    unint64_t v40 = specialized Collection.subscript.getter(v143, v235, v234);
    Swift::Int v43 = v145;
    a4 = v146;
    a1 = v144;
    a3 = v40 >> 16;
    uint64_t v5 = v145 >> 16;
    if ((v144 & 0x1000000000000000) != 0)
    {
LABEL_221:
      swift_bridgeObjectRetain_n(a1, 3);
      v201._Swift::UInt64 rawBits = v40 & 0xFFFFFFFFFFFF0000 | 1;
      v202._Swift::UInt64 rawBits = v43 & 0xFFFFFFFFFFFF0000 | 1;
      v203._Swift::UInt64 rawBits = _StringGuts.validateScalarRange(_:)(v201, v202, a4, a1);
      if (v203._rawBits < 0x10000) {
        v203._rawBits |= 3;
      }
      Swift::Int v147 = specialized Collection.count.getter(v203, v204, a4, a1);
      swift_bridgeObjectRelease(a2);
      uint64_t v148 = a1;
    }
    else
    {
      Swift::Int v147 = v5 - a3;
      swift_bridgeObjectRetain_n(v144, 2);
      uint64_t v148 = a2;
    }
    swift_bridgeObjectRelease(a2);
    swift_bridgeObjectRelease(v148);
    Swift::Int v149 = v238;
    if ((a2 & 0x1000000000000000) != 0) {
      Swift::Int v149 = String.UTF8View._foreignCount()();
    }
    swift_bridgeObjectRelease(a2);
    BOOL v150 = __OFADD__(v149, v147);
    uint64_t v66 = v149 + v147;
    if (v150)
    {
      __break(1u);
LABEL_225:
      v205._Swift::UInt64 rawBits = (v5 << 16) | 1;
      v206._Swift::UInt64 rawBits = 1;
      Swift::UInt64 v207 = _StringGuts.validateScalarRange(_:)(v206, v205, v238, a4);
      Swift::UInt64 toa = v208;
      if (v207 >= 0x10000) {
        Swift::UInt64 v209 = v207;
      }
      else {
        Swift::UInt64 v209 = v207 | 3;
      }
      swift_bridgeObjectRetain(a4);
      v210._Swift::UInt64 rawBits = v209;
      v211._Swift::UInt64 rawBits = toa;
      Swift::Int v94 = specialized Collection.count.getter(v210, v211, v238, a4);
      swift_bridgeObjectRelease(a4);
      unint64_t v95 = v40;
      if ((a2 & 0x1000000000000000) != 0) {
        continue;
      }
      goto LABEL_111;
    }
    break;
  }
  if ((v41 & ~a2 & 0x2000000000000000) == 0 || !swift_isUniquelyReferenced_nonNull_native(a2 & 0xFFFFFFFFFFFFFFFLL))
  {
    if (v66 >= 16)
    {
      unint64_t v10 = v241;
      a2 = v242;
      goto LABEL_163;
    }
    a2 = v242;
    if ((v242 & 0x2000000000000000) == 0)
    {
LABEL_187:
      swift_bridgeObjectRelease(a1);
      if ((a2 & 0x1000000000000000) != 0)
      {
        unint64_t v166 = _StringGuts._foreignConvertedToSmall()(v241, a2);
        unint64_t v167 = v220;
      }
      else
      {
        if ((v241 & 0x1000000000000000) != 0)
        {
          unint64_t v164 = (unsigned __int8 *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
          uint64_t v165 = v241 & 0xFFFFFFFFFFFFLL;
        }
        else
        {
          unint64_t v164 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v241, a2);
          uint64_t v165 = v221;
        }
        swift_bridgeObjectRetain(a2);
        closure #1 in _StringGuts._convertedToSmall()(v164, v165, &v239);
        swift_bridgeObjectRelease(a2);
        unint64_t v166 = v239;
        unint64_t v167 = v240;
      }
      goto LABEL_194;
    }
LABEL_193:
    swift_bridgeObjectRelease(a1);
    unint64_t v166 = v241;
    unint64_t v167 = a2;
LABEL_194:
    v168._Swift::UInt64 rawBits = v40 & 0xFFFFFFFFFFFF0000 | 1;
    v169._Swift::UInt64 rawBits = v43 & 0xFFFFFFFFFFFF0000 | 1;
    v170._Swift::UInt64 rawBits = _StringGuts.validateScalarRange(_:)(v168, v169, a4, a1);
    if (v170._rawBits < 0x10000) {
      v170._rawBits |= 3;
    }
    unint64_t v172 = specialized String.init(_:)(v170, v171, a4, a1);
    unint64_t v174 = v173;
    swift_bridgeObjectRelease(a1);
    if ((v174 & 0x2000000000000000) != 0)
    {
      swift_bridgeObjectRelease(v174);
      unint64_t v15 = v237;
    }
    else
    {
      unint64_t v15 = v237;
      if ((v174 & 0x1000000000000000) != 0)
      {
        unint64_t v172 = _StringGuts._foreignConvertedToSmall()(v172, v174);
        unint64_t v230 = v229;
        swift_bridgeObjectRelease(v174);
        unint64_t v174 = v230;
      }
      else
      {
        if ((v172 & 0x1000000000000000) != 0)
        {
          Swift::UInt64 v215 = (unsigned __int8 *)((v174 & 0xFFFFFFFFFFFFFFFLL) + 32);
          uint64_t v216 = v172 & 0xFFFFFFFFFFFFLL;
        }
        else
        {
          Swift::UInt64 v215 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v172, v174);
        }
        closure #1 in _StringGuts._convertedToSmall()(v215, v216, &v239);
        swift_bridgeObjectRelease(v174);
        unint64_t v172 = v239;
        unint64_t v174 = v240;
      }
    }
    uint64_t v175 = HIBYTE(v167) & 0xF;
    uint64_t v176 = HIBYTE(v174) & 0xF;
    uint64_t v177 = v176 + v175;
    if ((unint64_t)(v176 + v175) <= 0xF)
    {
      if (v176)
      {
        char v178 = 0;
        unint64_t v179 = 0;
        do
        {
          unint64_t v180 = v175 + v179;
          unint64_t v181 = v179 + 1;
          if (v179 >= 8) {
            unint64_t v182 = v174;
          }
          else {
            unint64_t v182 = v172;
          }
          unint64_t v183 = v182 >> (v178 & 0x38);
          char v184 = (8 * v175 + v178) & 0x38;
          uint64_t v185 = (-255 << v184) - 1;
          unint64_t v186 = (unint64_t)v183 << v184;
          unint64_t v187 = v186 | v185 & v167;
          unint64_t v188 = v186 | v185 & v166;
          if (v180 < 8) {
            unint64_t v166 = v188;
          }
          else {
            unint64_t v167 = v187;
          }
          v178 += 8;
          unint64_t v179 = v181;
        }
        while (v176 != v181);
      }
      swift_bridgeObjectRelease(a2);
      unint64_t v189 = 0xA000000000000000;
      if (!(v166 & 0x8080808080808080 | v167 & 0x80808080808080)) {
        unint64_t v189 = 0xE000000000000000;
      }
      unint64_t v241 = v166;
      unint64_t v242 = v189 & 0xFF00000000000000 | (v177 << 56) | v167 & 0xFFFFFFFFFFFFFFLL;
      goto LABEL_213;
    }
LABEL_254:
    unint64_t v226 = 266;
LABEL_256:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/StringGutsRangeReplaceable.swift", 38, 2, v226, 0);
  }
  unint64_t v10 = v241;
  a2 = v242;
  int64_t v151 = _StringGuts.nativeUnusedCapacity.getter(v241, v242);
  if (v152)
  {
LABEL_255:
    unint64_t v226 = 258;
    goto LABEL_256;
  }
  if (v66 > 15) {
    goto LABEL_163;
  }
  if ((a2 & 0x2000000000000000) != 0) {
    goto LABEL_193;
  }
  if (v151 < v147) {
    goto LABEL_187;
  }
LABEL_163:
  int64_t v153 = _StringGuts.nativeUnusedCapacity.getter(v10, a2);
  unint64_t v11 = (v154 & 1) == 0 && v153 >= v147;
  if ((v10 & ~a2 & 0x2000000000000000) == 0 || !swift_isUniquelyReferenced_nonNull_native(a2 & 0xFFFFFFFFFFFFFFFLL))
  {
    unint64_t v15 = v237;
    if (v11)
    {
LABEL_180:
      _StringGuts.grow(_:)(v66);
      goto LABEL_181;
    }
    goto LABEL_174;
  }
  unint64_t v15 = v237;
  if ((v11 & 1) == 0)
  {
LABEL_174:
    uint64_t v156 = _StringGuts.nativeCapacity.getter(v10, a2);
    if (v157) {
      uint64_t v158 = 0;
    }
    else {
      uint64_t v158 = v156;
    }
    if (v158 + 0x4000000000000000 >= 0)
    {
      uint64_t v159 = 2 * v158;
      if (v159 > v66) {
        uint64_t v66 = v159;
      }
      goto LABEL_180;
    }
LABEL_242:
    __break(1u);
    goto LABEL_243;
  }
LABEL_181:
  swift_bridgeObjectRelease(a1);
  if ((a1 & 0x1000000000000000) != 0)
  {
    _StringGuts._foreignAppendInPlace(_:)(a4, a1, a3, v5);
    goto LABEL_192;
  }
  if ((a1 & 0x2000000000000000) != 0)
  {
    swift_bridgeObjectRelease(a1);
    unint64_t v190 = HIBYTE(a1) & 0xF;
    unint64_t v239 = a4;
    uint64_t v240 = a1 & 0xFFFFFFFFFFFFFFLL;
    if (v190 < v5) {
      goto LABEL_253;
    }
    uint64_t v191 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(a3, v5, (uint64_t)&v239, v190);
    _StringGuts.appendInPlace(_:isASCII:)(v191, v192, (a1 & 0x4000000000000000) != 0);
  }
  else
  {
    if ((a4 & 0x1000000000000000) != 0)
    {
      id v160 = (id)((a1 & 0xFFFFFFFFFFFFFFFLL) + 32);
      uint64_t v161 = a4 & 0xFFFFFFFFFFFFLL;
      if ((uint64_t)(a4 & 0xFFFFFFFFFFFFLL) >= v5) {
        goto LABEL_185;
      }
LABEL_253:
      _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x745uLL, 0);
    }
    id v160 = _StringObject.sharedUTF8.getter(a4, a1);
    uint64_t v161 = v223;
    if (v223 < v5) {
      goto LABEL_253;
    }
LABEL_185:
    unint64_t v162 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(a3, v5, (uint64_t)v160, v161);
    _StringGuts.appendInPlace(_:isASCII:)(v162, v163, (a4 & 0x8000000000000000) != 0);
LABEL_192:
    swift_bridgeObjectRelease(a1);
  }
LABEL_213:
  unint64_t v193 = v241;
  unint64_t v194 = v242;
  swift_bridgeObjectRelease(v233[1]);
  *unint64_t v233 = v193;
  v233[1] = v194;
  return v15;
}

uint64_t specialized _StringGuts.replaceSubrange<A>(_:with:)(Swift::UInt64 a1, unint64_t a2, Swift::Int a3, uint64_t a4, unint64_t a5, uint64_t a6)
{
  unint64_t v7 = (unint64_t)v6;
  uint64_t v14 = *v6;
  unint64_t v15 = v6[1];
  if ((*v6 & ~v15 & 0x2000000000000000) == 0
    || (v16 = swift_isUniquelyReferenced_nonNull_native(v15 & 0xFFFFFFFFFFFFFFFLL), uint64_t v14 = *v6, v15 = v6[1], !v16))
  {
    Swift::UInt64 v173 = a2;
    unint64_t v174 = a4;
    unint64_t v175 = a3;
    unint64_t v177 = a5;
    unint64_t v179 = a6;
    Swift::String::Index v171 = v6;
    unint64_t v187 = 0;
    unint64_t v188 = 0xE000000000000000;
    Swift::Int v30 = _StringGuts.nativeCapacity.getter(v14, v15);
    if ((v31 & 1) == 0) {
      String.reserveCapacity(_:)(v30);
    }
    v32._Swift::UInt64 rawBits = a1;
    unint64_t v172 = v14;
    unint64_t v7 = specialized Collection.subscript.getter(v32, v14, v15);
    a5 = v35;
    unint64_t v36 = v33;
    a1 = v34;
    a2 = v35 >> 16;
    uint64_t v170 = v7 >> 16;
    if ((v34 & 0x1000000000000000) != 0)
    {
      swift_bridgeObjectRetain_n(v34, 3);
      v136._Swift::UInt64 rawBits = v7 & 0xFFFFFFFFFFFF0000 | 1;
      v137._Swift::UInt64 rawBits = a5 & 0xFFFFFFFFFFFF0000 | 1;
      v138._Swift::UInt64 rawBits = _StringGuts.validateScalarRange(_:)(v136, v137, v36, a1);
      if (v138._rawBits < 0x10000) {
        v138._rawBits |= 3;
      }
      uint64_t v14 = v36;
      Swift::Int v37 = specialized Collection.count.getter(v138, v139, v36, a1);
      swift_bridgeObjectRelease(a1);
      uint64_t v39 = v187;
      unint64_t v38 = v188;
    }
    else
    {
      uint64_t v14 = v33;
      Swift::Int v37 = a2 - (v7 >> 16);
      swift_bridgeObjectRetain_n(v34, 2);
      uint64_t v39 = v187;
      unint64_t v38 = v188;
    }
    uint64_t v40 = HIBYTE(v38) & 0xF;
    a4 = v40 + v37;
    if (__OFADD__(v40, v37))
    {
      __break(1u);
      goto LABEL_109;
    }
    if ((v39 & ~v38 & 0x2000000000000000) != 0
      && swift_isUniquelyReferenced_nonNull_native(v38 & 0xFFFFFFFFFFFFFFFLL))
    {
      _StringGuts.nativeUnusedCapacity.getter(v39, v38);
      if (v41) {
        goto LABEL_149;
      }
      if (a4 > 15)
      {
LABEL_22:
        _StringGuts.prepareForAppendInPlace(totalCount:otherUTF8Count:)(a4, v37);
        swift_bridgeObjectRelease(a1);
        if ((a1 & 0x1000000000000000) != 0)
        {
          _StringGuts._foreignAppendInPlace(_:)(v14, a1, v170, a2);
          goto LABEL_48;
        }
        if ((a1 & 0x2000000000000000) != 0)
        {
          swift_bridgeObjectRelease(a1);
          unint64_t v85 = HIBYTE(a1) & 0xF;
          uint64_t v181 = v14;
          uint64_t v182 = a1 & 0xFFFFFFFFFFFFFFLL;
          if (v85 < a2) {
            goto LABEL_133;
          }
          uint64_t v86 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(v170, a2, (uint64_t)&v181, v85);
          _StringGuts.appendInPlace(_:isASCII:)(v86, v87, (a1 & 0x4000000000000000) != 0);
          goto LABEL_63;
        }
        if ((v14 & 0x1000000000000000) != 0)
        {
          id v42 = (id)((a1 & 0xFFFFFFFFFFFFFFFLL) + 32);
          uint64_t v43 = v14 & 0xFFFFFFFFFFFFLL;
          if ((v14 & 0xFFFFFFFFFFFFLL) < (uint64_t)a2) {
            goto LABEL_133;
          }
LABEL_26:
          unint64_t v44 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(v170, a2, (uint64_t)v42, v43);
          _StringGuts.appendInPlace(_:isASCII:)(v44, v45, v14 < 0);
LABEL_48:
          swift_bridgeObjectRelease(a1);
LABEL_63:
          unint64_t v61 = v179;
          unint64_t v62 = v172;
          goto LABEL_64;
        }
LABEL_130:
        id v42 = _StringObject.sharedUTF8.getter(v14, a1);
        uint64_t v43 = v158;
        if (v158 < (uint64_t)a2) {
LABEL_133:
        }
          _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x745uLL, 0);
        goto LABEL_26;
      }
    }
    else if (a4 >= 16)
    {
      goto LABEL_22;
    }
    swift_bridgeObjectRelease(a1);
    swift_bridgeObjectRetain(v38);
    unint64_t v46 = _StringGuts._convertedToSmall()(v39, v38);
    unint64_t v48 = v47;
    swift_bridgeObjectRelease(v38);
    unint64_t v49 = HIBYTE(a1) & 0xF;
    if ((a1 & 0x2000000000000000) == 0) {
      unint64_t v49 = v14 & 0xFFFFFFFFFFFFLL;
    }
    if (v49 < a2) {
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index range is out of bounds", 35, 2, "Swift/StringIndexValidation.swift", 33, 2, 0xD2uLL, 0);
    }
    if ((v7 & 0xFFFFFFFFFFFF0000 | 1) >= 0x10000) {
      v51._Swift::UInt64 rawBits = v7 & 0xFFFFFFFFFFFF0000 | 1;
    }
    else {
      v51._Swift::UInt64 rawBits = v7 & 0xFFFFFFFFFFFF0000 | 3;
    }
    v50._Swift::UInt64 rawBits = a5 & 0xFFFFFFFFFFFF0000 | 1;
    unint64_t v52 = specialized String.init(_:)(v51, v50, v14, a1);
    unint64_t v54 = v53;
    swift_bridgeObjectRelease(a1);
    unint64_t v55 = _StringGuts._convertedToSmall()(v52, v54);
    unint64_t v57 = v56;
    swift_bridgeObjectRelease(v54);
    uint64_t v58 = HIBYTE(v48) & 0xF;
    uint64_t v59 = HIBYTE(v57) & 0xF;
    uint64_t v60 = v59 + v58;
    if ((unint64_t)(v59 + v58) > 0xF)
    {
LABEL_148:
      unint64_t v169 = 266;
      goto LABEL_150;
    }
    unint64_t v61 = v179;
    unint64_t v62 = v172;
    if (v59)
    {
      uint64_t v63 = 0;
      unint64_t v64 = 0;
      uint64_t v65 = 8 * v59;
      do
      {
        unint64_t v66 = v58 + v64;
        BOOL v67 = v64++ >= 8;
        if (v67) {
          unint64_t v68 = v57;
        }
        else {
          unint64_t v68 = v55;
        }
        char v69 = (8 * v58 + v63) & 0x38;
        uint64_t v70 = (-255 << v69) - 1;
        unint64_t v71 = (unint64_t)(v68 >> (v63 & 0x38)) << v69;
        unint64_t v72 = v71 | v70 & v48;
        unint64_t v73 = v71 | v70 & v46;
        if (v66 < 8) {
          unint64_t v46 = v73;
        }
        else {
          unint64_t v48 = v72;
        }
        v63 += 8;
      }
      while (v65 != v63);
    }
    swift_bridgeObjectRelease(v38);
    unint64_t v74 = 0xA000000000000000;
    if (!(v46 & 0x8080808080808080 | v48 & 0x80808080808080)) {
      unint64_t v74 = 0xE000000000000000;
    }
    unint64_t v187 = v46;
    unint64_t v188 = v74 & 0xFF00000000000000 | (v60 << 56) | v48 & 0xFFFFFFFFFFFFFFLL;
LABEL_64:
    unint64_t v88 = v187 & 0xFFFFFFFFFFFFLL;
    if ((v188 & 0x2000000000000000) != 0) {
      unint64_t v88 = HIBYTE(v188) & 0xF;
    }
    unint64_t v172 = v88;
    specialized String.append<A>(contentsOf:)(v175, v174, v177, v61);
    unint64_t v7 = v187;
    unint64_t v38 = v188;
    if ((v188 & 0x2000000000000000) != 0) {
      unint64_t v89 = HIBYTE(v188) & 0xF;
    }
    else {
      unint64_t v89 = v187 & 0xFFFFFFFFFFFFLL;
    }
    swift_bridgeObjectRetain_n(v188, 3);
    v90._Swift::UInt64 rawBits = v173;
    a1 = specialized Collection.subscript.getter(v90, v62, v15);
    unint64_t v15 = v92;
    a4 = v93;
    a5 = v91;
    a2 = a1 >> 16;
    uint64_t v14 = v92 >> 16;
    unint64_t v179 = v89;
    if ((v91 & 0x1000000000000000) == 0)
    {
      swift_bridgeObjectRetain_n(v91, 2);
      swift_bridgeObjectRelease_n(v38, 2);
      a3 = v14 - a2;
      if ((v38 & 0x1000000000000000) == 0)
      {
LABEL_71:
        swift_bridgeObjectRelease(v38);
        BOOL v94 = __OFADD__(v89, a3);
        a6 = v89 + a3;
        if (!v94)
        {
          if ((v7 & ~v38 & 0x2000000000000000) == 0
            || (BOOL isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v38 & 0xFFFFFFFFFFFFFFFLL),
                unint64_t v7 = v187,
                unint64_t v38 = v188,
                !isUniquelyReferenced_nonNull_native))
          {
            if (a6 > 15) {
              goto LABEL_78;
            }
LABEL_84:
            swift_bridgeObjectRelease(a5);
            swift_bridgeObjectRetain(v38);
            unint64_t v103 = _StringGuts._convertedToSmall()(v7, v38);
            unint64_t v105 = v104;
            swift_bridgeObjectRelease(v38);
            v106._Swift::UInt64 rawBits = a1 & 0xFFFFFFFFFFFF0000 | 1;
            v107._Swift::UInt64 rawBits = v15 & 0xFFFFFFFFFFFF0000 | 1;
            v108._Swift::UInt64 rawBits = _StringGuts.validateScalarRange(_:)(v106, v107, a4, a5);
            if (v108._rawBits < 0x10000) {
              v108._rawBits |= 3;
            }
            unint64_t v110 = specialized String.init(_:)(v108, v109, a4, a5);
            unint64_t v112 = v111;
            swift_bridgeObjectRelease(a5);
            unint64_t v113 = _StringGuts._convertedToSmall()(v110, v112);
            unint64_t v115 = v114;
            swift_bridgeObjectRelease(v112);
            uint64_t v116 = HIBYTE(v105) & 0xF;
            uint64_t v117 = HIBYTE(v115) & 0xF;
            uint64_t v118 = v117 + v116;
            if ((unint64_t)(v117 + v116) <= 0xF)
            {
              char v98 = v171;
              uint64_t v23 = v172;
              if (v117)
              {
                uint64_t v119 = 0;
                unint64_t v120 = 0;
                uint64_t v121 = 8 * v117;
                do
                {
                  unint64_t v122 = v116 + v120;
                  BOOL v67 = v120++ >= 8;
                  if (v67) {
                    unint64_t v123 = v115;
                  }
                  else {
                    unint64_t v123 = v113;
                  }
                  char v124 = (8 * v116 + v119) & 0x38;
                  uint64_t v125 = (-255 << v124) - 1;
                  unint64_t v126 = (unint64_t)(v123 >> (v119 & 0x38)) << v124;
                  unint64_t v127 = v126 | v125 & v105;
                  unint64_t v128 = v126 | v125 & v103;
                  if (v122 < 8) {
                    unint64_t v103 = v128;
                  }
                  else {
                    unint64_t v105 = v127;
                  }
                  v119 += 8;
                }
                while (v121 != v119);
              }
              swift_bridgeObjectRelease(v38);
              unint64_t v129 = 0xA000000000000000;
              if (!(v103 & 0x8080808080808080 | v105 & 0x80808080808080)) {
                unint64_t v129 = 0xE000000000000000;
              }
              unint64_t v187 = v103;
              unint64_t v188 = v129 & 0xFF00000000000000 | (v118 << 56) | v105 & 0xFFFFFFFFFFFFFFLL;
              goto LABEL_103;
            }
            goto LABEL_148;
          }
          int64_t v96 = _StringGuts.nativeUnusedCapacity.getter(v187, v188);
          if ((v97 & 1) == 0)
          {
            if (a6 >= 16 || (v38 & 0x2000000000000000) == 0 && v96 >= a3)
            {
LABEL_78:
              _StringGuts.prepareForAppendInPlace(totalCount:otherUTF8Count:)(a6, a3);
              swift_bridgeObjectRelease(a5);
              if ((a5 & 0x1000000000000000) != 0)
              {
                _StringGuts._foreignAppendInPlace(_:)(a4, a5, a2, v14);
                swift_bridgeObjectRelease(a5);
                char v98 = v171;
                uint64_t v23 = v172;
              }
              else
              {
                char v98 = v171;
                if ((a5 & 0x2000000000000000) != 0)
                {
                  swift_bridgeObjectRelease(a5);
                  unint64_t v130 = HIBYTE(a5) & 0xF;
                  uint64_t v181 = a4;
                  uint64_t v182 = a5 & 0xFFFFFFFFFFFFFFLL;
                  if (v130 < v14) {
                    goto LABEL_133;
                  }
                  unint64_t v131 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(a2, v14, (uint64_t)&v181, v130);
                  _StringGuts.appendInPlace(_:isASCII:)(v131, v132, (a5 & 0x4000000000000000) != 0);
                }
                else
                {
                  if ((a4 & 0x1000000000000000) != 0)
                  {
                    id v99 = (id)((a5 & 0xFFFFFFFFFFFFFFFLL) + 32);
                    uint64_t v100 = a4 & 0xFFFFFFFFFFFFLL;
                    if ((a4 & 0xFFFFFFFFFFFFLL) < v14) {
                      goto LABEL_133;
                    }
                  }
                  else
                  {
                    id v99 = _StringObject.sharedUTF8.getter(a4, a5);
                    uint64_t v100 = v159;
                    if (v159 < v14) {
                      goto LABEL_133;
                    }
                  }
                  unint64_t v101 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(a2, v14, (uint64_t)v99, v100);
                  _StringGuts.appendInPlace(_:isASCII:)(v101, v102, a4 < 0);
                  swift_bridgeObjectRelease(a5);
                }
                uint64_t v23 = v172;
              }
LABEL_103:
              uint64_t v133 = v187;
              unint64_t v134 = v188;
              swift_bridgeObjectRelease(v98[1]);
              *char v98 = v133;
              v98[1] = v134;
              return v23;
            }
            goto LABEL_84;
          }
LABEL_149:
          unint64_t v169 = 258;
LABEL_150:
          _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/StringGutsRangeReplaceable.swift", 38, 2, v169, 0);
        }
        __break(1u);
LABEL_114:
        Swift::Int v176 = a3;
        unint64_t v178 = a5;
        unint64_t v187 = a3;
        unint64_t v188 = a4;
        unint64_t v189 = a5;
        uint64_t v190 = a6;
        uint64_t v191 = closure #3 in _StringGuts.replaceSubrange<A>(_:with:);
        uint64_t v192 = 0;
        uint64_t v180 = a6;
        swift_bridgeObjectRetain(a6);
        Swift::UInt64 v144 = specialized FlattenSequence<>.startIndex.getter();
        uint64_t v146 = a4;
        unint64_t v148 = specialized FlattenSequence<>.distance(from:to:)(v144, v147, v145 & 1, a4, 0, 1);
        Swift::UInt64 v149 = (a1 >> 16) + v148;
        if (__OFADD__(a1 >> 16, v148))
        {
          __break(1u);
        }
        else
        {
          a6 = a1 >> 16;
          a2 >>= 16;
          uint64_t v150 = v14 & 0xFFFFFFFFFFFFLL;
          if ((v15 & 0x2000000000000000) != 0) {
            uint64_t v150 = HIBYTE(v15) & 0xF;
          }
          unint64_t v151 = v150 - a2;
          a3 = v149 + v151;
          if (!__OFADD__(v149, v151))
          {
            a4 = v148;
            if (a3 < 16) {
              goto LABEL_147;
            }
            uint64_t v152 = _StringGuts.uniqueNativeCapacity.getter();
            if ((v153 & 1) == 0 && v152 >= a3) {
              goto LABEL_147;
            }
            a1 = v7;
            uint64_t v154 = _StringGuts.uniqueNativeCapacity.getter();
            if (v155)
            {
              unint64_t v160 = *(void *)(v7 + 8);
              if ((v160 & 0x1000000000000000) != 0)
              {
                Swift::Int v156 = String.UTF8View._foreignCount()();
              }
              else if ((v160 & 0x2000000000000000) != 0)
              {
                Swift::Int v156 = HIBYTE(v160) & 0xF;
              }
              else
              {
                Swift::Int v156 = *(void *)v7 & 0xFFFFFFFFFFFFLL;
              }
            }
            else
            {
              Swift::Int v156 = 2 * v154;
            }
            if (v156 > a3) {
              a3 = v156;
            }
            unint64_t v161 = *(void *)(v7 + 8);
            if ((v161 & 0x1000000000000000) == 0)
            {
              unint64_t v162 = *(void *)v7;
              if ((v161 & 0x2000000000000000) != 0)
              {
                uint64_t v165 = (v161 >> 62) & 1;
                uint64_t v181 = *(void *)v7;
                uint64_t v182 = v161 & 0xFFFFFFFFFFFFFFLL;
                size_t v163 = (char *)&v181;
                size_t v164 = HIBYTE(v161) & 0xF;
              }
              else
              {
                if ((v162 & 0x1000000000000000) != 0)
                {
                  size_t v163 = (char *)((v161 & 0xFFFFFFFFFFFFFFFLL) + 32);
                  size_t v164 = v162 & 0xFFFFFFFFFFFFLL;
                }
                else
                {
                  size_t v163 = (char *)_StringObject.sharedUTF8.getter(*(void *)v7, v161);
                }
                uint64_t v165 = v162 >> 63;
              }
              int64_t v166 = specialized static __StringStorage.create(initializingFrom:codeUnitCapacity:isASCII:)(v163, v164, a3, v165);
              uint64_t v167 = *(void *)(v166 + 24);
              swift_bridgeObjectRelease(*(void *)(v7 + 8));
              *(void *)unint64_t v7 = v167;
              *(void *)(v7 + 8) = v166;
              goto LABEL_147;
            }
LABEL_153:
            unint64_t v7 = a1;
            _StringGuts._foreignGrow(_:)(a3);
LABEL_147:
            uint64_t v84 = *(void *)(v7 + 8) & 0xFFFFFFFFFFFFFFFLL;
            uint64_t v181 = v176;
            uint64_t v182 = v146;
            unint64_t v183 = v178;
            uint64_t v184 = v180;
            uint64_t v185 = closure #3 in _StringGuts.replaceSubrange<A>(_:with:);
            uint64_t v186 = 0;
            uint64_t v168 = a4;
            uint64_t v23 = a6;
            specialized __StringStorage.replace<A>(from:to:with:replacementCount:)(a6, a2, (uint64_t)&v181, v168);
            swift_bridgeObjectRelease(v180);
            goto LABEL_60;
          }
        }
        __break(1u);
        goto LABEL_153;
      }
LABEL_112:
      unint64_t v89 = String.UTF8View._foreignCount()();
      goto LABEL_71;
    }
LABEL_109:
    swift_bridgeObjectRetain_n(a5, 3);
    v140._Swift::UInt64 rawBits = a1 & 0xFFFFFFFFFFFF0000 | 1;
    v141._Swift::UInt64 rawBits = v15 & 0xFFFFFFFFFFFF0000 | 1;
    unint64_t v89 = v179;
    v142._Swift::UInt64 rawBits = _StringGuts.validateScalarRange(_:)(v140, v141, a4, a5);
    if (v142._rawBits < 0x10000) {
      v142._rawBits |= 3;
    }
    a3 = specialized Collection.count.getter(v142, v143, a4, a5);
    swift_bridgeObjectRelease_n(v38, 2);
    swift_bridgeObjectRelease(a5);
    if ((v38 & 0x1000000000000000) == 0) {
      goto LABEL_71;
    }
    goto LABEL_112;
  }
  if ((a6 & 0x1000000000000000) != 0) {
    goto LABEL_114;
  }
  uint64_t v17 = (unint64_t)a3 >> 16;
  uint64_t v18 = (unint64_t)a4 >> 16;
  if ((a6 & 0x2000000000000000) == 0)
  {
    if ((a5 & 0x1000000000000000) != 0)
    {
      id v19 = (id)((a6 & 0xFFFFFFFFFFFFFFFLL) + 32);
      uint64_t v20 = a5 & 0xFFFFFFFFFFFFLL;
      if ((uint64_t)(a5 & 0xFFFFFFFFFFFFLL) < v18) {
        goto LABEL_133;
      }
    }
    else
    {
      id v19 = _StringObject.sharedUTF8.getter(a5, a6);
      uint64_t v20 = v157;
      if (v157 < v18) {
        goto LABEL_133;
      }
    }
    uint64_t v21 = specialized UnsafeBufferPointer.init(rebasing:)(v17, v18, (uint64_t)v19, v20);
    uint64_t v23 = a1 >> 16;
    Swift::UInt64 v24 = (a1 >> 16) + v22;
    if (!__OFADD__(a1 >> 16, v22))
    {
      a1 = a2 >> 16;
      uint64_t v25 = v14 & 0xFFFFFFFFFFFFLL;
      if ((v15 & 0x2000000000000000) != 0) {
        uint64_t v25 = HIBYTE(v15) & 0xF;
      }
      Swift::UInt64 v26 = v25 - a1;
      Swift::Int v27 = v24 + v26;
      if (!__OFADD__(v24, v26))
      {
        uint64_t v28 = (char *)v21;
        size_t v29 = v22;
        if (v27 < 16) {
          goto LABEL_59;
        }
LABEL_56:
        uint64_t v82 = _StringGuts.uniqueNativeCapacity.getter();
        if ((v83 & 1) != 0 || v82 < v27) {
          _StringGuts.grow(_:)(v27);
        }
        goto LABEL_59;
      }
      goto LABEL_128;
    }
    __break(1u);
LABEL_127:
    __break(1u);
LABEL_128:
    __break(1u);
LABEL_129:
    __break(1u);
    goto LABEL_130;
  }
  unint64_t v75 = HIBYTE(a6) & 0xF;
  unint64_t v187 = a5;
  unint64_t v188 = a6 & 0xFFFFFFFFFFFFFFLL;
  if (v75 < v18) {
    goto LABEL_133;
  }
  uint64_t v76 = specialized UnsafeBufferPointer.init(rebasing:)(v17, (unint64_t)a4 >> 16, (uint64_t)&v187, v75);
  uint64_t v23 = a1 >> 16;
  Swift::UInt64 v78 = (a1 >> 16) + v77;
  if (__OFADD__(a1 >> 16, v77)) {
    goto LABEL_127;
  }
  a1 = a2 >> 16;
  unint64_t v79 = *(void *)(v7 + 8);
  if ((v79 & 0x2000000000000000) != 0) {
    uint64_t v80 = HIBYTE(v79) & 0xF;
  }
  else {
    uint64_t v80 = *(void *)v7 & 0xFFFFFFFFFFFFLL;
  }
  Swift::UInt64 v81 = v80 - a1;
  Swift::Int v27 = v78 + v81;
  if (__OFADD__(v78, v81)) {
    goto LABEL_129;
  }
  uint64_t v28 = (char *)v76;
  size_t v29 = v77;
  if (v27 >= 16) {
    goto LABEL_56;
  }
LABEL_59:
  uint64_t v84 = *(void *)(v7 + 8) & 0xFFFFFFFFFFFFFFFLL;
  __StringStorage.replace(from:to:with:)(v23, a1, v28, v29);
LABEL_60:
  *(void *)unint64_t v7 = *(void *)(v84 + 24);
  return v23;
}

uint64_t specialized _StringGuts.replaceSubrange<A>(_:with:)(Swift::UInt64 a1, unint64_t a2, unint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v9 = *v3;
  unint64_t v8 = v3[1];
  if ((*v3 & ~v8 & 0x2000000000000000) == 0
    || (v10 = swift_isUniquelyReferenced_nonNull_native(v8 & 0xFFFFFFFFFFFFFFFLL), v9 = *v3, unint64_t v8 = v3[1], !v10))
  {
    Swift::UInt64 v156 = a2;
    uint64_t v154 = v3;
    unint64_t v160 = 0;
    unint64_t v161 = 0xE000000000000000;
    Swift::Int v17 = _StringGuts.nativeCapacity.getter(v9, v8);
    if ((v18 & 1) == 0) {
      String.reserveCapacity(_:)(v17);
    }
    v19._Swift::UInt64 rawBits = a1;
    unint64_t v155 = v9;
    uint64_t v22 = specialized Collection.subscript.getter(v19, v9, v8);
    unint64_t v24 = v23;
    unint64_t v25 = v20;
    unint64_t v14 = v21;
    a2 = v23 >> 16;
    uint64_t v153 = (unint64_t)v22 >> 16;
    if ((v21 & 0x1000000000000000) != 0)
    {
      swift_bridgeObjectRetain_n(v21, 3);
      v142._Swift::UInt64 rawBits = v22 & 0xFFFFFFFFFFFF0000 | 1;
      v143._Swift::UInt64 rawBits = v24 & 0xFFFFFFFFFFFF0000 | 1;
      v144._Swift::UInt64 rawBits = _StringGuts.validateScalarRange(_:)(v142, v143, v25, v14);
      if (v144._rawBits < 0x10000) {
        v144._rawBits |= 3;
      }
      uint64_t v9 = v25;
      Swift::Int v26 = specialized Collection.count.getter(v144, v145, v25, v14);
      swift_bridgeObjectRelease(v14);
    }
    else
    {
      uint64_t v9 = v20;
      Swift::Int v26 = a2 - ((unint64_t)v22 >> 16);
      swift_bridgeObjectRetain_n(v21, 2);
    }
    unint64_t v27 = v161;
    uint64_t v157 = a3;
    unint64_t v28 = HIBYTE(v161) & 0xF;
    int64_t v29 = v28 + v26;
    if (__OFADD__(v28, v26))
    {
      __break(1u);
      goto LABEL_122;
    }
    if ((v160 & ~v161 & 0x2000000000000000) != 0
      && swift_isUniquelyReferenced_nonNull_native(v161 & 0xFFFFFFFFFFFFFFFLL))
    {
      _StringGuts.nativeUnusedCapacity.getter(v160, v161);
      if (v30) {
        goto LABEL_138;
      }
      if (v29 > 15)
      {
LABEL_19:
        _StringGuts.prepareForAppendInPlace(totalCount:otherUTF8Count:)(v29, v26);
        swift_bridgeObjectRelease(v14);
        if ((v14 & 0x1000000000000000) != 0)
        {
          _StringGuts._foreignAppendInPlace(_:)(v9, v14, v153, a2);
          swift_bridgeObjectRelease(v14);
          unint64_t v36 = v160;
          unint64_t v34 = v161;
          goto LABEL_57;
        }
        if ((v14 & 0x2000000000000000) != 0)
        {
          swift_bridgeObjectRelease(v14);
          unint64_t v78 = HIBYTE(v14) & 0xF;
          uint64_t v158 = v9;
          uint64_t v159 = v14 & 0xFFFFFFFFFFFFFFLL;
          if (v78 < a2) {
            goto LABEL_133;
          }
          unint64_t v79 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(v153, a2, (uint64_t)&v158, v78);
          unint64_t v34 = v161;
          uint64_t v80 = v161 & 0xFFFFFFFFFFFFFFFLL;
          closure #1 in _StringGuts.appendInPlace(_:isASCII:)(v161 & 0xFFFFFFFFFFFFFFFLL, v79, v81, (v14 & 0x4000000000000000) != 0);
          unint64_t v36 = *(void *)(v80 + 24);
          unint64_t v160 = v36;
          goto LABEL_57;
        }
        if ((v9 & 0x1000000000000000) != 0)
        {
          id v31 = (id)((v14 & 0xFFFFFFFFFFFFFFFLL) + 32);
          uint64_t v32 = v9 & 0xFFFFFFFFFFFFLL;
          if ((v9 & 0xFFFFFFFFFFFFLL) < (uint64_t)a2) {
            goto LABEL_133;
          }
LABEL_23:
          unint64_t v33 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(v153, a2, (uint64_t)v31, v32);
          unint64_t v34 = v161;
          closure #1 in _StringGuts.appendInPlace(_:isASCII:)(v161 & 0xFFFFFFFFFFFFFFFLL, v33, v35, v9 < 0);
          unint64_t v36 = *(void *)((v161 & 0xFFFFFFFFFFFFFFFLL) + 0x18);
          unint64_t v160 = v36;
          swift_bridgeObjectRelease(v14);
LABEL_57:
          unint64_t v52 = v155;
          Swift::UInt64 v51 = v156;
          goto LABEL_58;
        }
LABEL_130:
        id v31 = _StringObject.sharedUTF8.getter(v9, v14);
        uint64_t v32 = v150;
        if (v150 < (uint64_t)a2) {
LABEL_133:
        }
          _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x745uLL, 0);
        goto LABEL_23;
      }
    }
    else if (v29 >= 16)
    {
      goto LABEL_19;
    }
    swift_bridgeObjectRelease(v14);
    swift_bridgeObjectRetain(v161);
    unint64_t v36 = _StringGuts._convertedToSmall()(v160, v161);
    unint64_t v38 = v37;
    swift_bridgeObjectRelease(v161);
    unint64_t v39 = HIBYTE(v14) & 0xF;
    if ((v14 & 0x2000000000000000) == 0) {
      unint64_t v39 = v9 & 0xFFFFFFFFFFFFLL;
    }
    if (v39 < a2) {
      goto LABEL_127;
    }
    if ((v22 & 0xFFFFFFFFFFFF0000 | 1) >= 0x10000) {
      v41._Swift::UInt64 rawBits = v22 & 0xFFFFFFFFFFFF0000 | 1;
    }
    else {
      v41._Swift::UInt64 rawBits = v22 & 0xFFFFFFFFFFFF0000 | 3;
    }
    v40._Swift::UInt64 rawBits = v24 & 0xFFFFFFFFFFFF0000 | 1;
    unint64_t v42 = specialized String.init(_:)(v41, v40, v9, v14);
    unint64_t v44 = v43;
    swift_bridgeObjectRelease(v14);
    unint64_t v45 = _StringGuts._convertedToSmall()(v42, v44);
    unint64_t v47 = v46;
    swift_bridgeObjectRelease(v44);
    uint64_t v48 = HIBYTE(v38) & 0xF;
    uint64_t v49 = HIBYTE(v47) & 0xF;
    uint64_t v50 = v49 + v48;
    if ((unint64_t)(v49 + v48) > 0xF)
    {
LABEL_137:
      unint64_t v152 = 266;
      goto LABEL_139;
    }
    unint64_t v52 = v155;
    Swift::UInt64 v51 = v156;
    if (v49)
    {
      uint64_t v53 = 0;
      unint64_t v54 = 0;
      uint64_t v55 = 8 * v49;
      do
      {
        unint64_t v56 = v48 + v54;
        BOOL v57 = v54++ >= 8;
        if (v57) {
          unint64_t v58 = v47;
        }
        else {
          unint64_t v58 = v45;
        }
        char v59 = (8 * v48 + v53) & 0x38;
        uint64_t v60 = (-255 << v59) - 1;
        unint64_t v61 = (unint64_t)(v58 >> (v53 & 0x38)) << v59;
        unint64_t v62 = v61 | v60 & v38;
        unint64_t v63 = v61 | v60 & v36;
        if (v56 < 8) {
          unint64_t v36 = v63;
        }
        else {
          unint64_t v38 = v62;
        }
        v53 += 8;
      }
      while (v55 != v53);
    }
    swift_bridgeObjectRelease(v161);
    unint64_t v64 = 0xA000000000000000;
    if (!(v36 & 0x8080808080808080 | v38 & 0x80808080808080)) {
      unint64_t v64 = 0xE000000000000000;
    }
    unint64_t v34 = v64 & 0xFF00000000000000 | (v50 << 56) | v38 & 0xFFFFFFFFFFFFFFLL;
    unint64_t v160 = v36;
    unint64_t v161 = v34;
LABEL_58:
    uint64_t v82 = HIBYTE(v34) & 0xF;
    if ((v34 & 0x2000000000000000) == 0) {
      uint64_t v82 = v36 & 0xFFFFFFFFFFFFLL;
    }
    Swift::UInt64 v156 = v82;
    specialized String.append<A>(contentsOf:)(v157);
    unint64_t v14 = v160;
    unint64_t v27 = v161;
    if ((v161 & 0x2000000000000000) != 0) {
      unint64_t v83 = HIBYTE(v161) & 0xF;
    }
    else {
      unint64_t v83 = v160 & 0xFFFFFFFFFFFFLL;
    }
    swift_bridgeObjectRetain_n(v161, 2);
    v84._Swift::UInt64 rawBits = v51;
    a2 = specialized Collection.subscript.getter(v84, v52, v8);
    int64_t v29 = v86;
    uint64_t v22 = v87;
    unint64_t v24 = v85;
    uint64_t v9 = a2 >> 16;
    unint64_t v8 = v86 >> 16;
    uint64_t v157 = v83;
    if ((v85 & 0x1000000000000000) == 0)
    {
      swift_bridgeObjectRetain_n(v85, 2);
      swift_bridgeObjectRelease(v27);
      Swift::Int v88 = v8 - v9;
      if ((v27 & 0x1000000000000000) == 0)
      {
LABEL_65:
        swift_bridgeObjectRelease(v27);
        BOOL v89 = __OFADD__(v83, v88);
        int64_t v90 = v83 + v88;
        if (v89)
        {
          __break(1u);
          goto LABEL_127;
        }
        if ((v14 & ~v27 & 0x2000000000000000) == 0
          || (BOOL isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v27 & 0xFFFFFFFFFFFFFFFLL),
              unint64_t v14 = v160,
              unint64_t v27 = v161,
              !isUniquelyReferenced_nonNull_native))
        {
          if (v90 > 15) {
            goto LABEL_72;
          }
          goto LABEL_78;
        }
        int64_t v92 = _StringGuts.nativeUnusedCapacity.getter(v160, v161);
        if ((v93 & 1) == 0)
        {
          if (v90 >= 16 || (v27 & 0x2000000000000000) == 0 && v92 >= v88)
          {
LABEL_72:
            _StringGuts.prepareForAppendInPlace(totalCount:otherUTF8Count:)(v90, v88);
            swift_bridgeObjectRelease(v24);
            if ((v24 & 0x1000000000000000) != 0)
            {
              _StringGuts._foreignAppendInPlace(_:)(v22, v24, v9, v8);
              swift_bridgeObjectRelease(v24);
              unint64_t v114 = (unint64_t *)v154;
            }
            else
            {
              if ((v24 & 0x2000000000000000) != 0)
              {
                swift_bridgeObjectRelease(v24);
                unint64_t v126 = HIBYTE(v24) & 0xF;
                uint64_t v158 = v22;
                uint64_t v159 = v24 & 0xFFFFFFFFFFFFFFLL;
                if (v126 < v8) {
                  goto LABEL_133;
                }
                unint64_t v127 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(v9, v8, (uint64_t)&v158, v126);
                uint64_t v128 = v161 & 0xFFFFFFFFFFFFFFFLL;
                closure #1 in _StringGuts.appendInPlace(_:isASCII:)(v161 & 0xFFFFFFFFFFFFFFFLL, v127, v129, (v24 & 0x4000000000000000) != 0);
                unint64_t v160 = *(void *)(v128 + 24);
              }
              else
              {
                if ((v22 & 0x1000000000000000) != 0)
                {
                  id v94 = (id)((v24 & 0xFFFFFFFFFFFFFFFLL) + 32);
                  uint64_t v95 = v22 & 0xFFFFFFFFFFFFLL;
                  if ((v22 & 0xFFFFFFFFFFFFLL) < (uint64_t)v8) {
                    goto LABEL_133;
                  }
                }
                else
                {
                  id v94 = _StringObject.sharedUTF8.getter(v22, v24);
                  uint64_t v95 = v151;
                  if (v151 < (uint64_t)v8) {
                    goto LABEL_133;
                  }
                }
                int64_t v96 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(v9, v8, (uint64_t)v94, v95);
                uint64_t v97 = v161 & 0xFFFFFFFFFFFFFFFLL;
                closure #1 in _StringGuts.appendInPlace(_:isASCII:)(v161 & 0xFFFFFFFFFFFFFFFLL, v96, v98, v22 < 0);
                unint64_t v160 = *(void *)(v97 + 24);
                swift_bridgeObjectRelease(v24);
              }
              unint64_t v114 = (unint64_t *)v154;
            }
LABEL_101:
            unint64_t v130 = v160;
            unint64_t v131 = v161;
            swift_bridgeObjectRelease(v114[1]);
            *unint64_t v114 = v130;
            v114[1] = v131;
            return v156;
          }
LABEL_78:
          swift_bridgeObjectRelease(v24);
          swift_bridgeObjectRetain(v27);
          unint64_t v99 = _StringGuts._convertedToSmall()(v14, v27);
          unint64_t v101 = v100;
          swift_bridgeObjectRelease(v27);
          unint64_t v102 = HIBYTE(v24) & 0xF;
          if ((v24 & 0x2000000000000000) == 0) {
            unint64_t v102 = v22 & 0xFFFFFFFFFFFFLL;
          }
          if (v102 >= v8)
          {
            if ((a2 & 0xFFFFFFFFFFFF0000 | 1) >= 0x10000) {
              v104._Swift::UInt64 rawBits = a2 & 0xFFFFFFFFFFFF0000 | 1;
            }
            else {
              v104._Swift::UInt64 rawBits = a2 & 0xFFFFFFFFFFFF0000 | 3;
            }
            v103._Swift::UInt64 rawBits = v29 & 0xFFFFFFFFFFFF0000 | 1;
            unint64_t v105 = specialized String.init(_:)(v104, v103, v22, v24);
            unint64_t v107 = v106;
            swift_bridgeObjectRelease(v24);
            unint64_t v108 = _StringGuts._convertedToSmall()(v105, v107);
            unint64_t v110 = v109;
            swift_bridgeObjectRelease(v107);
            uint64_t v111 = HIBYTE(v101) & 0xF;
            uint64_t v112 = HIBYTE(v110) & 0xF;
            uint64_t v113 = v112 + v111;
            if ((unint64_t)(v112 + v111) <= 0xF)
            {
              unint64_t v114 = (unint64_t *)v154;
              if (v112)
              {
                uint64_t v115 = 0;
                unint64_t v116 = 0;
                uint64_t v117 = 8 * v112;
                do
                {
                  unint64_t v118 = v111 + v116;
                  BOOL v57 = v116++ >= 8;
                  if (v57) {
                    unint64_t v119 = v110;
                  }
                  else {
                    unint64_t v119 = v108;
                  }
                  char v120 = (8 * v111 + v115) & 0x38;
                  uint64_t v121 = (-255 << v120) - 1;
                  unint64_t v122 = (unint64_t)(v119 >> (v115 & 0x38)) << v120;
                  unint64_t v123 = v122 | v121 & v101;
                  unint64_t v124 = v122 | v121 & v99;
                  if (v118 < 8) {
                    unint64_t v99 = v124;
                  }
                  else {
                    unint64_t v101 = v123;
                  }
                  v115 += 8;
                }
                while (v117 != v115);
              }
              swift_bridgeObjectRelease(v27);
              unint64_t v125 = 0xA000000000000000;
              if (!(v99 & 0x8080808080808080 | v101 & 0x80808080808080)) {
                unint64_t v125 = 0xE000000000000000;
              }
              unint64_t v160 = v99;
              unint64_t v161 = v125 & 0xFF00000000000000 | (v113 << 56) | v101 & 0xFFFFFFFFFFFFFFLL;
              goto LABEL_101;
            }
            goto LABEL_137;
          }
LABEL_127:
          _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index range is out of bounds", 35, 2, "Swift/StringIndexValidation.swift", 33, 2, 0xD2uLL, 0);
        }
LABEL_138:
        unint64_t v152 = 258;
LABEL_139:
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/StringGutsRangeReplaceable.swift", 38, 2, v152, 0);
      }
LABEL_125:
      unint64_t v83 = String.UTF8View._foreignCount()();
      goto LABEL_65;
    }
LABEL_122:
    swift_bridgeObjectRetain_n(v24, 3);
    v146._Swift::UInt64 rawBits = a2 & 0xFFFFFFFFFFFF0000 | 1;
    v147._Swift::UInt64 rawBits = v29 & 0xFFFFFFFFFFFF0000 | 1;
    unint64_t v83 = v157;
    v148._Swift::UInt64 rawBits = _StringGuts.validateScalarRange(_:)(v146, v147, v22, v24);
    if (v148._rawBits < 0x10000) {
      v148._rawBits |= 3;
    }
    Swift::Int v88 = specialized Collection.count.getter(v148, v149, v22, v24);
    swift_bridgeObjectRelease(v27);
    swift_bridgeObjectRelease(v24);
    if ((v27 & 0x1000000000000000) == 0) {
      goto LABEL_65;
    }
    goto LABEL_125;
  }
  unint64_t v11 = *(void *)(a3 + 16);
  if (v11)
  {
    uint64_t v12 = 0;
    unint64_t v13 = (void *)(a3 + 40);
    unint64_t v14 = 15;
    while (1)
    {
      uint64_t v15 = *(v13 - 1) & 0xFFFFFFFFFFFFLL;
      if ((*v13 & 0x2000000000000000) != 0) {
        uint64_t v15 = HIBYTE(*v13) & 0xFLL;
      }
      char v16 = v15 == 0;
      if (v15) {
        break;
      }
      v13 += 2;
      if (v11 == ++v12)
      {
        unint64_t v14 = 0;
        uint64_t v12 = *(void *)(a3 + 16);
        break;
      }
    }
  }
  else
  {
    unint64_t v14 = 0;
    uint64_t v12 = 0;
    char v16 = 1;
  }
  swift_bridgeObjectRetain(a3);
  Swift::UInt64 v65 = specialized FlattenSequence<>.distance(from:to:)(v12, v14, v16, v11, 0, 1, a3, (void (*)(unint64_t *__return_ptr, uint64_t *))closure #3 in _StringGuts.replaceSubrange<A>(_:with:), 0);
  uint64_t v66 = a1 >> 16;
  Swift::UInt64 v67 = v66 + v65;
  if (__OFADD__(v66, v65))
  {
    __break(1u);
LABEL_129:
    __break(1u);
    goto LABEL_130;
  }
  unint64_t v14 = a2 >> 16;
  uint64_t v68 = v9 & 0xFFFFFFFFFFFFLL;
  if ((v8 & 0x2000000000000000) != 0) {
    uint64_t v68 = HIBYTE(v8) & 0xF;
  }
  unint64_t v69 = v68 - v14;
  int64_t v70 = v67 + v69;
  if (__OFADD__(v67, v69)) {
    goto LABEL_129;
  }
  uint64_t v71 = v65;
  if (v70 >= 16)
  {
    Swift::UInt64 v72 = v65;
    uint64_t v73 = _StringGuts.uniqueNativeCapacity.getter();
    if ((v74 & 1) != 0 || (uint64_t v71 = v72, v73 < v70))
    {
      uint64_t v75 = _StringGuts.uniqueNativeCapacity.getter();
      if (v76)
      {
        unint64_t v132 = v4[1];
        if ((v132 & 0x1000000000000000) != 0)
        {
          Swift::Int v77 = String.UTF8View._foreignCount()();
        }
        else if ((v132 & 0x2000000000000000) != 0)
        {
          Swift::Int v77 = HIBYTE(v132) & 0xF;
        }
        else
        {
          Swift::Int v77 = *v4 & 0xFFFFFFFFFFFFLL;
        }
      }
      else
      {
        Swift::Int v77 = 2 * v75;
      }
      if (v77 > v70) {
        int64_t v70 = v77;
      }
      unint64_t v133 = v4[1];
      if ((v133 & 0x1000000000000000) != 0)
      {
        _StringGuts._foreignGrow(_:)(v70);
      }
      else
      {
        unint64_t v134 = *v4;
        if ((v133 & 0x2000000000000000) != 0)
        {
          uint64_t v137 = (v133 >> 62) & 1;
          unint64_t v160 = *v4;
          unint64_t v161 = v133 & 0xFFFFFFFFFFFFFFLL;
          unint64_t v135 = (char *)&v160;
          size_t v136 = HIBYTE(v133) & 0xF;
        }
        else
        {
          if ((v134 & 0x1000000000000000) != 0)
          {
            unint64_t v135 = (char *)((v133 & 0xFFFFFFFFFFFFFFFLL) + 32);
            size_t v136 = v134 & 0xFFFFFFFFFFFFLL;
          }
          else
          {
            unint64_t v135 = (char *)_StringObject.sharedUTF8.getter(*v4, v133);
          }
          uint64_t v137 = v134 >> 63;
        }
        int64_t v138 = specialized static __StringStorage.create(initializingFrom:codeUnitCapacity:isASCII:)(v135, v136, v70, v137);
        uint64_t v139 = *(void *)(v138 + 24);
        swift_bridgeObjectRelease(v4[1]);
        *uint64_t v4 = v139;
        v4[1] = v138;
      }
      uint64_t v71 = v72;
    }
  }
  uint64_t v140 = v4[1] & 0xFFFFFFFFFFFFFFFLL;
  specialized __StringStorage.replace<A>(from:to:with:replacementCount:)(v66, a2 >> 16, a3, (uint64_t)closure #3 in _StringGuts.replaceSubrange<A>(_:with:), 0, v71);
  swift_bridgeObjectRelease(a3);
  *uint64_t v4 = *(void *)(v140 + 24);
  return v66;
}

unint64_t specialized _StringGuts.replaceSubrange<A>(_:with:)(Swift::UInt64 a1, int64_t a2, uint64_t a3, Swift::UInt64 a4)
{
  int64_t v6 = (int64_t)v4;
  unint64_t v12 = *v4;
  unint64_t v11 = v4[1];
  if ((*v4 & ~v11 & 0x2000000000000000) == 0
    || (BOOL isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v11 & 0xFFFFFFFFFFFFFFFLL),
        unint64_t v12 = *v4,
        unint64_t v11 = v4[1],
        !isUniquelyReferenced_nonNull_native))
  {
    uint64_t v162 = a3;
    Swift::UInt64 v160 = a4;
    unint64_t __src = 0;
    unint64_t v167 = 0xE000000000000000;
    Swift::Int v28 = _StringGuts.nativeCapacity.getter(v12, v11);
    if ((v29 & 1) == 0) {
      String.reserveCapacity(_:)(v28);
    }
    v30._Swift::UInt64 rawBits = a1;
    unint64_t v18 = specialized Collection.subscript.getter(v30, v12, v11);
    a3 = v32;
    unint64_t v163 = v33;
    a4 = v31;
    int64_t v5 = v32 >> 16;
    uint64_t v158 = v18 >> 16;
    uint64_t v159 = v4;
    if ((v31 & 0x1000000000000000) != 0)
    {
      swift_bridgeObjectRetain_n(v31, 3);
      v147._Swift::UInt64 rawBits = v18 & 0xFFFFFFFFFFFF0000 | 1;
      v148._Swift::UInt64 rawBits = a3 & 0xFFFFFFFFFFFF0000 | 1;
      v149._Swift::UInt64 rawBits = _StringGuts.validateScalarRange(_:)(v147, v148, v163, a4);
      if (v149._rawBits < 0x10000) {
        v149._rawBits |= 3;
      }
      Swift::Int v34 = specialized Collection.count.getter(v149, v150, v163, a4);
      swift_bridgeObjectRelease(a4);
    }
    else
    {
      Swift::Int v34 = v5 - (v18 >> 16);
      swift_bridgeObjectRetain_n(v31, 2);
    }
    unint64_t v35 = v167;
    Swift::UInt64 v161 = a2;
    unint64_t v36 = HIBYTE(v167) & 0xF;
    a2 = v36 + v34;
    if (__OFADD__(v36, v34))
    {
      __break(1u);
      goto LABEL_117;
    }
    if ((__src & ~v167 & 0x2000000000000000) != 0
      && swift_isUniquelyReferenced_nonNull_native(v167 & 0xFFFFFFFFFFFFFFFLL))
    {
      _StringGuts.nativeUnusedCapacity.getter(__src, v167);
      if (v37) {
        goto LABEL_134;
      }
      if (a2 > 15) {
        goto LABEL_26;
      }
    }
    else if (a2 >= 16)
    {
LABEL_26:
      _StringGuts.prepareForAppendInPlace(totalCount:otherUTF8Count:)(a2, v34);
      swift_bridgeObjectRelease(a4);
      if ((a4 & 0x1000000000000000) != 0)
      {
        _StringGuts._foreignAppendInPlace(_:)(v163, a4, v158, v5);
        swift_bridgeObjectRelease(a4);
        unint64_t v45 = __src;
        unint64_t v18 = v167;
        unint64_t v61 = v160;
        a3 = v162;
        goto LABEL_53;
      }
      a3 = v162;
      int64_t v6 = v163;
      if ((a4 & 0x2000000000000000) == 0)
      {
        if ((v163 & 0x1000000000000000) == 0) {
          goto LABEL_123;
        }
        id v38 = (id)((a4 & 0xFFFFFFFFFFFFFFFLL) + 32);
        uint64_t v39 = v163 & 0xFFFFFFFFFFFFLL;
        if ((uint64_t)(v163 & 0xFFFFFFFFFFFFLL) >= v5) {
          goto LABEL_30;
        }
        goto LABEL_128;
      }
      swift_bridgeObjectRelease(a4);
      unint64_t v74 = HIBYTE(a4) & 0xF;
      unint64_t v164 = v163;
      uint64_t v165 = a4 & 0xFFFFFFFFFFFFFFLL;
      if (v74 < v5) {
        goto LABEL_128;
      }
      uint64_t v75 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(v158, v5, (uint64_t)&v164, v74);
      size_t v77 = v76;
      unint64_t v18 = v167;
      uint64_t v78 = v167 & 0xFFFFFFFFFFFFFFFLL;
      specialized UnsafeMutablePointer.initialize(from:count:)(v75, v76, (char *)((v167 & 0xFFFFFFFFFFFFFFFLL)+ (*(void *)((v167 & 0xFFFFFFFFFFFFFFFLL) + 0x18) & 0xFFFFFFFFFFFFLL)+ 32));
      uint64_t v79 = *(void *)(v78 + 24);
      if (!__OFADD__(v79 & 0xFFFFFFFFFFFFLL, v77))
      {
        __StringStorage._updateCountAndFlags(newCount:newIsASCII:)((v79 & 0xFFFFFFFFFFFFLL) + v77, (a4 >> 62) & (v79 < 0));
        unint64_t v45 = *(void *)(v78 + 24);
        unint64_t __src = v45;
        goto LABEL_52;
      }
      goto LABEL_126;
    }
    swift_bridgeObjectRelease(a4);
    swift_bridgeObjectRetain(v167);
    unint64_t v45 = _StringGuts._convertedToSmall()(__src, v167);
    unint64_t v47 = v46;
    swift_bridgeObjectRelease(v167);
    v48._Swift::UInt64 rawBits = v18 & 0xFFFFFFFFFFFF0000 | 1;
    v49._Swift::UInt64 rawBits = a3 & 0xFFFFFFFFFFFF0000 | 1;
    v50._Swift::UInt64 rawBits = _StringGuts.validateScalarRange(_:)(v48, v49, v163, a4);
    if (v50._rawBits < 0x10000) {
      v50._rawBits |= 3;
    }
    unint64_t v52 = specialized String.init(_:)(v50, v51, v163, a4);
    unint64_t v54 = v53;
    swift_bridgeObjectRelease(a4);
    unint64_t v55 = _StringGuts._convertedToSmall()(v52, v54);
    unint64_t v57 = v56;
    swift_bridgeObjectRelease(v54);
    uint64_t v58 = HIBYTE(v47) & 0xF;
    uint64_t v59 = HIBYTE(v57) & 0xF;
    uint64_t v60 = v59 + v58;
    if ((unint64_t)(v59 + v58) <= 0xF)
    {
      unint64_t v61 = v160;
      if (v59)
      {
        char v62 = 0;
        unint64_t v63 = 0;
        do
        {
          unint64_t v64 = v58 + v63;
          unint64_t v65 = v63 + 1;
          if (v63 >= 8) {
            unint64_t v66 = v57;
          }
          else {
            unint64_t v66 = v55;
          }
          unint64_t v67 = v66 >> (v62 & 0x38);
          char v68 = (8 * v58 + v62) & 0x38;
          uint64_t v69 = (-255 << v68) - 1;
          unint64_t v70 = (unint64_t)v67 << v68;
          unint64_t v71 = v70 | v69 & v47;
          unint64_t v72 = v70 | v69 & v45;
          if (v64 < 8) {
            unint64_t v45 = v72;
          }
          else {
            unint64_t v47 = v71;
          }
          v62 += 8;
          unint64_t v63 = v65;
        }
        while (v59 != v65);
      }
      swift_bridgeObjectRelease(v167);
      unint64_t v73 = 0xA000000000000000;
      if (!(v45 & 0x8080808080808080 | v47 & 0x80808080808080)) {
        unint64_t v73 = 0xE000000000000000;
      }
      unint64_t v18 = v73 & 0xFF00000000000000 | (v60 << 56) | v47 & 0xFFFFFFFFFFFFFFLL;
      unint64_t __src = v45;
      unint64_t v167 = v18;
      a3 = v162;
      goto LABEL_53;
    }
LABEL_133:
    unint64_t v157 = 266;
    goto LABEL_135;
  }
  uint64_t v14 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000) == 0) {
    uint64_t v14 = a3 & 0xFFFFFFFFFFFFLL;
  }
  BOOL v15 = v14 == 0;
  if (v14) {
    unint64_t v16 = 15;
  }
  else {
    unint64_t v16 = 0;
  }
  swift_bridgeObjectRetain(a4);
  Swift::UInt64 v17 = specialized FlattenSequence<>.distance(from:to:)(v15, v16, v15, 1, 0, 1, a3, a4, (void (*)(unint64_t *__return_ptr, uint64_t *))closure #3 in _StringGuts.replaceSubrange<A>(_:with:), 0);
  unint64_t v18 = a1 >> 16;
  Swift::UInt64 v19 = (a1 >> 16) + v17;
  if (__OFADD__(a1 >> 16, v17)) {
    goto LABEL_121;
  }
  a2 = (unint64_t)a2 >> 16;
  uint64_t v20 = v12 & 0xFFFFFFFFFFFFLL;
  if ((v11 & 0x2000000000000000) != 0) {
    uint64_t v20 = HIBYTE(v11) & 0xF;
  }
  uint64_t v21 = v20 - a2;
  int64_t v22 = v19 + v21;
  if (!__OFADD__(v19, v21))
  {
    int64_t v5 = v17;
    if (v22 < 16) {
      goto LABEL_111;
    }
    uint64_t v23 = _StringGuts.uniqueNativeCapacity.getter();
    if ((v24 & 1) == 0 && v23 >= v22) {
      goto LABEL_111;
    }
    uint64_t v25 = _StringGuts.uniqueNativeCapacity.getter();
    if (v26)
    {
      unint64_t v132 = *(void *)(v6 + 8);
      if ((v132 & 0x1000000000000000) != 0)
      {
        Swift::Int v27 = String.UTF8View._foreignCount()();
      }
      else if ((v132 & 0x2000000000000000) != 0)
      {
        Swift::Int v27 = HIBYTE(v132) & 0xF;
      }
      else
      {
        Swift::Int v27 = *(void *)v6 & 0xFFFFFFFFFFFFLL;
      }
    }
    else
    {
      Swift::Int v27 = 2 * v25;
    }
    if (v27 > v22) {
      int64_t v22 = v27;
    }
    unint64_t v133 = *(void *)(v6 + 8);
    if ((v133 & 0x1000000000000000) == 0)
    {
      uint64_t v134 = *(void *)v6;
      if ((v133 & 0x2000000000000000) != 0)
      {
        unint64_t v138 = v18;
        uint64_t v139 = a3;
        size_t v140 = HIBYTE(v133) & 0xF;
        unint64_t __src = *(void *)v6;
        unint64_t v167 = v133 & 0xFFFFFFFFFFFFFFLL;
        unint64_t v141 = v140 | 0xC000000000000000;
        if ((v133 & 0x4000000000000000) == 0) {
          unint64_t v141 = HIBYTE(v133) & 0xF;
        }
        uint64_t v142 = v141 | 0x3000000000000000;
        int64_t v137 = _allocateStringStorage(codeUnitCapacity:)(v22);
        *(void *)(v137 + 16) = v143;
        *(void *)(v137 + 24) = v142;
        if (v143 < 0)
        {
          *(void *)__StringStorage._breadcrumbsAddress.getter() = 0;
          uint64_t v142 = *(void *)(v137 + 24);
        }
        *(unsigned char *)(v137 + 32 + (v142 & 0xFFFFFFFFFFFFLL)) = 0;
        specialized UnsafeMutablePointer.initialize(from:count:)((char *)&__src, v140, (char *)(v137 + 32));
        a3 = v139;
        unint64_t v18 = v138;
      }
      else
      {
        if ((v134 & 0x1000000000000000) != 0)
        {
          unint64_t v135 = (char *)((v133 & 0xFFFFFFFFFFFFFFFLL) + 32);
          size_t v136 = v134 & 0xFFFFFFFFFFFFLL;
        }
        else
        {
          unint64_t v135 = (char *)_StringObject.sharedUTF8.getter(*(void *)v6, v133);
        }
        int64_t v137 = specialized static __StringStorage.create(initializingFrom:codeUnitCapacity:isASCII:)(v135, v136, v22, v134 < 0);
      }
      uint64_t v144 = *(void *)(v137 + 24);
      swift_bridgeObjectRelease(*(void *)(v6 + 8));
      *(void *)int64_t v6 = v144;
      *(void *)(v6 + 8) = v137;
      goto LABEL_111;
    }
LABEL_130:
    _StringGuts._foreignGrow(_:)(v22);
LABEL_111:
    uint64_t v145 = *(void *)(v6 + 8) & 0xFFFFFFFFFFFFFFFLL;
    specialized __StringStorage.replace<A>(from:to:with:replacementCount:)(v18, a2, a3, a4, (uint64_t)closure #3 in _StringGuts.replaceSubrange<A>(_:with:), 0, v5);
    swift_bridgeObjectRelease(a4);
    *(void *)int64_t v6 = *(void *)(v145 + 24);
    return v18;
  }
  while (1)
  {
    __break(1u);
LABEL_123:
    id v38 = _StringObject.sharedUTF8.getter(v6, a4);
    uint64_t v39 = v155;
    if (v155 < v5) {
      goto LABEL_128;
    }
LABEL_30:
    Swift::String::Index v40 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(v158, v5, (uint64_t)v38, v39);
    size_t v42 = v41;
    unint64_t v18 = v167;
    uint64_t v43 = v167 & 0xFFFFFFFFFFFFFFFLL;
    specialized UnsafeMutablePointer.initialize(from:count:)(v40, v41, (char *)((v167 & 0xFFFFFFFFFFFFFFFLL) + (*(void *)((v167 & 0xFFFFFFFFFFFFFFFLL) + 0x18) & 0xFFFFFFFFFFFFLL) + 32));
    uint64_t v44 = *(void *)(v43 + 24);
    if (__OFADD__(v44 & 0xFFFFFFFFFFFFLL, v42))
    {
      __break(1u);
LABEL_126:
      __break(1u);
      goto LABEL_127;
    }
    __StringStorage._updateCountAndFlags(newCount:newIsASCII:)((v44 & 0xFFFFFFFFFFFFLL) + v42, (v44 & v6) < 0);
    unint64_t v45 = *(void *)(v43 + 24);
    unint64_t __src = v45;
    swift_bridgeObjectRelease(a4);
LABEL_52:
    unint64_t v61 = v160;
LABEL_53:
    uint64_t v80 = HIBYTE(v18) & 0xF;
    if ((v18 & 0x2000000000000000) == 0) {
      uint64_t v80 = v45 & 0xFFFFFFFFFFFFLL;
    }
    uint64_t v162 = v80;
    specialized String.append<A>(contentsOf:)(a3, v61);
    int64_t v5 = __src;
    unint64_t v35 = v167;
    unint64_t v81 = HIBYTE(v167) & 0xF;
    if ((v167 & 0x2000000000000000) == 0) {
      unint64_t v81 = __src & 0xFFFFFFFFFFFFLL;
    }
    unint64_t v163 = v81;
    swift_bridgeObjectRetain_n(v167, 3);
    v82._Swift::UInt64 rawBits = v161;
    a4 = specialized Collection.subscript.getter(v82, v12, v11);
    unint64_t v12 = v84;
    a3 = v85;
    unint64_t v18 = v83;
    unint64_t v11 = a4 >> 16;
    a2 = v84 >> 16;
    if ((v83 & 0x1000000000000000) != 0)
    {
LABEL_117:
      swift_bridgeObjectRetain_n(v18, 3);
      v151._Swift::UInt64 rawBits = a4 & 0xFFFFFFFFFFFF0000 | 1;
      v152._Swift::UInt64 rawBits = v12 & 0xFFFFFFFFFFFF0000 | 1;
      v153._Swift::UInt64 rawBits = _StringGuts.validateScalarRange(_:)(v151, v152, a3, v18);
      if (v153._rawBits < 0x10000) {
        v153._rawBits |= 3;
      }
      int64_t v6 = specialized Collection.count.getter(v153, v154, a3, v18);
      swift_bridgeObjectRelease(v35);
      uint64_t v86 = v18;
    }
    else
    {
      int64_t v6 = a2 - v11;
      swift_bridgeObjectRetain_n(v83, 2);
      uint64_t v86 = v35;
    }
    swift_bridgeObjectRelease(v35);
    swift_bridgeObjectRelease(v86);
    Swift::Int v87 = v163;
    if ((v35 & 0x1000000000000000) != 0) {
      Swift::Int v87 = String.UTF8View._foreignCount()();
    }
    swift_bridgeObjectRelease(v35);
    BOOL v88 = __OFADD__(v87, v6);
    int64_t v89 = v87 + v6;
    if (!v88) {
      break;
    }
    __break(1u);
LABEL_121:
    __break(1u);
  }
  if ((v5 & ~v35 & 0x2000000000000000) == 0
    || (v90 = swift_isUniquelyReferenced_nonNull_native(v35 & 0xFFFFFFFFFFFFFFFLL), v5 = __src, unint64_t v35 = v167, !v90))
  {
    if (v89 > 15) {
      goto LABEL_68;
    }
LABEL_74:
    swift_bridgeObjectRelease(v18);
    swift_bridgeObjectRetain(v35);
    unint64_t v97 = _StringGuts._convertedToSmall()(v5, v35);
    unint64_t v99 = v98;
    swift_bridgeObjectRelease(v35);
    v100._Swift::UInt64 rawBits = a4 & 0xFFFFFFFFFFFF0000 | 1;
    v101._Swift::UInt64 rawBits = v12 & 0xFFFFFFFFFFFF0000 | 1;
    v102._Swift::UInt64 rawBits = _StringGuts.validateScalarRange(_:)(v100, v101, a3, v18);
    if (v102._rawBits < 0x10000) {
      v102._rawBits |= 3;
    }
    unint64_t v104 = specialized String.init(_:)(v102, v103, a3, v18);
    unint64_t v106 = v105;
    swift_bridgeObjectRelease(v18);
    unint64_t v107 = _StringGuts._convertedToSmall()(v104, v106);
    unint64_t v109 = v108;
    swift_bridgeObjectRelease(v106);
    uint64_t v110 = HIBYTE(v99) & 0xF;
    uint64_t v111 = HIBYTE(v109) & 0xF;
    uint64_t v112 = v111 + v110;
    if ((unint64_t)(v111 + v110) <= 0xF)
    {
      a4 = (Swift::UInt64)v159;
      if (v111)
      {
        char v113 = 0;
        unint64_t v114 = 0;
        do
        {
          unint64_t v115 = v110 + v114;
          unint64_t v116 = v114 + 1;
          if (v114 >= 8) {
            unint64_t v117 = v109;
          }
          else {
            unint64_t v117 = v107;
          }
          unint64_t v118 = v117 >> (v113 & 0x38);
          char v119 = (8 * v110 + v113) & 0x38;
          uint64_t v120 = (-255 << v119) - 1;
          unint64_t v121 = (unint64_t)v118 << v119;
          unint64_t v122 = v121 | v120 & v99;
          unint64_t v123 = v121 | v120 & v97;
          if (v115 < 8) {
            unint64_t v97 = v123;
          }
          else {
            unint64_t v99 = v122;
          }
          v113 += 8;
          unint64_t v114 = v116;
        }
        while (v111 != v116);
      }
      swift_bridgeObjectRelease(v35);
      unint64_t v124 = 0xA000000000000000;
      if (!(v97 & 0x8080808080808080 | v99 & 0x80808080808080)) {
        unint64_t v124 = 0xE000000000000000;
      }
      unint64_t __src = v97;
      unint64_t v167 = v124 & 0xFF00000000000000 | (v112 << 56) | v99 & 0xFFFFFFFFFFFFFFLL;
      goto LABEL_93;
    }
    goto LABEL_133;
  }
  int64_t v91 = _StringGuts.nativeUnusedCapacity.getter(__src, v167);
  if (v92)
  {
LABEL_134:
    unint64_t v157 = 258;
LABEL_135:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/StringGutsRangeReplaceable.swift", 38, 2, v157, 0);
  }
  if (v89 < 16 && ((v35 & 0x2000000000000000) != 0 || v91 < v6)) {
    goto LABEL_74;
  }
LABEL_68:
  _StringGuts.prepareForAppendInPlace(totalCount:otherUTF8Count:)(v89, v6);
  swift_bridgeObjectRelease(v18);
  if ((v18 & 0x1000000000000000) != 0)
  {
    _StringGuts._foreignAppendInPlace(_:)(a3, v18, v11, a2);
    swift_bridgeObjectRelease(v18);
    a4 = (Swift::UInt64)v159;
    goto LABEL_93;
  }
  a4 = (Swift::UInt64)v159;
  if ((v18 & 0x2000000000000000) != 0)
  {
    swift_bridgeObjectRelease(v18);
    unint64_t v125 = HIBYTE(v18) & 0xF;
    unint64_t v164 = a3;
    uint64_t v165 = v18 & 0xFFFFFFFFFFFFFFLL;
    if (v125 < a2) {
      goto LABEL_128;
    }
    unint64_t v126 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(v11, a2, (uint64_t)&v164, v125);
    int64_t v22 = v127;
    uint64_t v128 = v167 & 0xFFFFFFFFFFFFFFFLL;
    specialized UnsafeMutablePointer.initialize(from:count:)(v126, v127, (char *)((v167 & 0xFFFFFFFFFFFFFFFLL) + (*(void *)((v167 & 0xFFFFFFFFFFFFFFFLL) + 0x18) & 0xFFFFFFFFFFFFLL) + 32));
    uint64_t v129 = *(void *)(v128 + 24);
    if (!__OFADD__(v129 & 0xFFFFFFFFFFFFLL, v22))
    {
      __StringStorage._updateCountAndFlags(newCount:newIsASCII:)((v129 & 0xFFFFFFFFFFFFLL) + v22, (v18 >> 62) & (v129 < 0));
      unint64_t __src = *(void *)(v128 + 24);
      goto LABEL_93;
    }
    __break(1u);
    goto LABEL_130;
  }
  if ((a3 & 0x1000000000000000) != 0)
  {
    id v93 = (id)((v18 & 0xFFFFFFFFFFFFFFFLL) + 32);
    uint64_t v94 = a3 & 0xFFFFFFFFFFFFLL;
    if ((a3 & 0xFFFFFFFFFFFFLL) >= a2) {
      goto LABEL_72;
    }
LABEL_128:
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x745uLL, 0);
  }
LABEL_127:
  id v93 = _StringObject.sharedUTF8.getter(a3, v18);
  uint64_t v94 = v156;
  if (v156 < a2) {
    goto LABEL_128;
  }
LABEL_72:
  uint64_t v95 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(v11, a2, (uint64_t)v93, v94);
  _StringGuts.appendInPlace(_:isASCII:)(v95, v96, a3 < 0);
  swift_bridgeObjectRelease(v18);
LABEL_93:
  unint64_t v130 = __src;
  unint64_t v131 = v167;
  swift_bridgeObjectRelease(*(void *)(a4 + 8));
  *(void *)a4 = v130;
  *(void *)(a4 + 8) = v131;
  return v162;
}

uint64_t specialized _StringGuts.replaceSubrange<A>(_:with:)(Swift::UInt64 a1, Swift::UInt64 a2)
{
  uint64_t v3 = v2;
  uint64_t v7 = *v3;
  uint64_t v6 = v3[1];
  if ((*v3 & ~v6 & 0x2000000000000000) != 0)
  {
    BOOL isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v6 & 0xFFFFFFFFFFFFFFFLL);
    uint64_t v7 = *v3;
    uint64_t v6 = v3[1];
    if (isUniquelyReferenced_nonNull_native)
    {
      uint64_t v9 = a1 >> 16;
      uint64_t v10 = a2 >> 16;
      uint64_t v11 = v7 & 0xFFFFFFFFFFFFLL;
      if ((v6 & 0x2000000000000000) != 0) {
        uint64_t v11 = HIBYTE(v6) & 0xF;
      }
      int64_t v12 = v11 - v10 + v9;
      if (v12 >= 16)
      {
        uint64_t v13 = _StringGuts.uniqueNativeCapacity.getter();
        if ((v14 & 1) != 0 || v13 < v12)
        {
          uint64_t v15 = _StringGuts.uniqueNativeCapacity.getter();
          if (v16)
          {
            unint64_t v125 = v3[1];
            if ((v125 & 0x1000000000000000) != 0)
            {
              Swift::Int v17 = String.UTF8View._foreignCount()();
            }
            else if ((v125 & 0x2000000000000000) != 0)
            {
              Swift::Int v17 = HIBYTE(v125) & 0xF;
            }
            else
            {
              Swift::Int v17 = *v3 & 0xFFFFFFFFFFFFLL;
            }
          }
          else
          {
            Swift::Int v17 = 2 * v15;
          }
          if (v17 > v12) {
            int64_t v12 = v17;
          }
          unint64_t v126 = v3[1];
          if ((v126 & 0x1000000000000000) != 0)
          {
            _StringGuts._foreignGrow(_:)(v12);
          }
          else
          {
            uint64_t v127 = *v3;
            if ((v126 & 0x2000000000000000) != 0)
            {
              size_t v131 = HIBYTE(v126) & 0xF;
              uint64_t __src = *v3;
              unint64_t v156 = v126 & 0xFFFFFFFFFFFFFFLL;
              unint64_t v132 = v131 | 0xC000000000000000;
              if ((v126 & 0x4000000000000000) == 0) {
                unint64_t v132 = HIBYTE(v126) & 0xF;
              }
              uint64_t v133 = v132 | 0x3000000000000000;
              int64_t v130 = _allocateStringStorage(codeUnitCapacity:)(v12);
              *(void *)(v130 + 16) = v134;
              *(void *)(v130 + 24) = v133;
              if (v134 < 0)
              {
                *(void *)__StringStorage._breadcrumbsAddress.getter() = 0;
                uint64_t v133 = *(void *)(v130 + 24);
              }
              *(unsigned char *)(v130 + 32 + (v133 & 0xFFFFFFFFFFFFLL)) = 0;
              specialized UnsafeMutablePointer.initialize(from:count:)((char *)&__src, v131, (char *)(v130 + 32));
            }
            else
            {
              if ((v127 & 0x1000000000000000) != 0)
              {
                uint64_t v128 = (char *)((v126 & 0xFFFFFFFFFFFFFFFLL) + 32);
                size_t v129 = v127 & 0xFFFFFFFFFFFFLL;
              }
              else
              {
                uint64_t v128 = (char *)_StringObject.sharedUTF8.getter(*v3, v126);
              }
              int64_t v130 = specialized static __StringStorage.create(initializingFrom:codeUnitCapacity:isASCII:)(v128, v129, v12, v127 < 0);
            }
            uint64_t v135 = *(void *)(v130 + 24);
            swift_bridgeObjectRelease(v3[1]);
            *uint64_t v3 = v135;
            v3[1] = v130;
          }
        }
      }
      uint64_t v136 = v3[1] & 0xFFFFFFFFFFFFFFFLL;
      specialized __StringStorage.replace<A>(from:to:with:replacementCount:)(v9, v10, (uint64_t)closure #3 in _StringGuts.replaceSubrange<A>(_:with:), 0, 0);
      *uint64_t v3 = *(void *)(v136 + 24);
      return v9;
    }
  }
  Swift::UInt64 v151 = a2;
  uint64_t __src = 0;
  unint64_t v156 = 0xE000000000000000;
  Swift::Int v18 = _StringGuts.nativeCapacity.getter(v7, v6);
  if ((v19 & 1) == 0) {
    String.reserveCapacity(_:)(v18);
  }
  Swift::String::Index v150 = v3;
  v20._Swift::UInt64 rawBits = a1;
  unint64_t v21 = specialized Collection.subscript.getter(v20, v7, v6);
  unint64_t v24 = v21;
  unint64_t v25 = v22;
  unint64_t v27 = v26;
  uint64_t v28 = v23;
  uint64_t v152 = v22 >> 16;
  uint64_t v149 = v21 >> 16;
  if ((v23 & 0x1000000000000000) != 0)
  {
    swift_bridgeObjectRetain_n(v23, 3);
    v138._Swift::UInt64 rawBits = v24 & 0xFFFFFFFFFFFF0000 | 1;
    v139._Swift::UInt64 rawBits = v25 & 0xFFFFFFFFFFFF0000 | 1;
    v140._Swift::UInt64 rawBits = _StringGuts.validateScalarRange(_:)(v138, v139, v27, v28);
    if (v140._rawBits < 0x10000) {
      v140._rawBits |= 3;
    }
    Swift::Int v29 = specialized Collection.count.getter(v140, v141, v27, v28);
    swift_bridgeObjectRelease(v28);
    uint64_t v30 = __src;
    Swift::UInt64 v31 = v156;
  }
  else
  {
    Swift::Int v29 = (v22 >> 16) - (v21 >> 16);
    swift_bridgeObjectRetain_n(v23, 2);
    uint64_t v30 = __src;
    Swift::UInt64 v31 = v156;
  }
  uint64_t v32 = HIBYTE(v31) & 0xF;
  int64_t v33 = v32 + v29;
  if (__OFADD__(v32, v29))
  {
    __break(1u);
    goto LABEL_113;
  }
  if ((v30 & ~v31 & 0x2000000000000000) == 0 || !swift_isUniquelyReferenced_nonNull_native(v31 & 0xFFFFFFFFFFFFFFFLL))
  {
    if (v33 >= 16) {
      goto LABEL_19;
    }
LABEL_27:
    swift_bridgeObjectRelease(v28);
    swift_bridgeObjectRetain(v31);
    uint64_t v30 = _StringGuts._convertedToSmall()(v30, v31);
    unint64_t v43 = v42;
    swift_bridgeObjectRelease(v31);
    v44._Swift::UInt64 rawBits = v24 & 0xFFFFFFFFFFFF0000 | 1;
    v45._Swift::UInt64 rawBits = v25 & 0xFFFFFFFFFFFF0000 | 1;
    v46._Swift::UInt64 rawBits = _StringGuts.validateScalarRange(_:)(v44, v45, v27, v28);
    if (v46._rawBits < 0x10000) {
      v46._rawBits |= 3;
    }
    unint64_t v48 = specialized String.init(_:)(v46, v47, v27, v28);
    unint64_t v50 = v49;
    swift_bridgeObjectRelease(v28);
    unint64_t v51 = _StringGuts._convertedToSmall()(v48, v50);
    unint64_t v53 = v52;
    swift_bridgeObjectRelease(v50);
    uint64_t v54 = HIBYTE(v43) & 0xF;
    uint64_t v55 = HIBYTE(v53) & 0xF;
    uint64_t v56 = v55 + v54;
    if ((unint64_t)(v55 + v54) <= 0xF)
    {
      if (v55)
      {
        char v57 = 0;
        unint64_t v58 = 0;
        do
        {
          unint64_t v59 = v54 + v58;
          unint64_t v60 = v58 + 1;
          if (v58 >= 8) {
            unint64_t v61 = v53;
          }
          else {
            unint64_t v61 = v51;
          }
          unint64_t v62 = v61 >> (v57 & 0x38);
          char v63 = (8 * v54 + v57) & 0x38;
          uint64_t v64 = (-255 << v63) - 1;
          unint64_t v65 = (unint64_t)v62 << v63;
          unint64_t v66 = v65 | v64 & v43;
          unint64_t v67 = v65 | v64 & v30;
          if (v59 < 8) {
            uint64_t v30 = v67;
          }
          else {
            unint64_t v43 = v66;
          }
          v57 += 8;
          unint64_t v58 = v60;
        }
        while (v55 != v60);
      }
      swift_bridgeObjectRelease(v31);
      unint64_t v68 = 0xA000000000000000;
      if (!(v30 & 0x8080808080808080 | v43 & 0x80808080808080)) {
        unint64_t v68 = 0xE000000000000000;
      }
      unint64_t v27 = v68 & 0xFF00000000000000 | (v56 << 56) | v43 & 0xFFFFFFFFFFFFFFLL;
      uint64_t __src = v30;
      unint64_t v156 = v27;
      goto LABEL_46;
    }
LABEL_128:
    unint64_t v148 = 266;
    goto LABEL_130;
  }
  _StringGuts.nativeUnusedCapacity.getter(v30, v31);
  if (v34) {
    goto LABEL_129;
  }
  if (v33 <= 15) {
    goto LABEL_27;
  }
LABEL_19:
  _StringGuts.prepareForAppendInPlace(totalCount:otherUTF8Count:)(v33, v29);
  swift_bridgeObjectRelease(v28);
  if ((v28 & 0x1000000000000000) != 0)
  {
    _StringGuts._foreignAppendInPlace(_:)(v27, v28, v149, v152);
    swift_bridgeObjectRelease(v28);
    uint64_t v30 = __src;
    unint64_t v27 = v156;
    goto LABEL_46;
  }
  unint64_t v25 = v27;
  if ((v28 & 0x2000000000000000) != 0)
  {
    swift_bridgeObjectRelease(v28);
    unint64_t v69 = HIBYTE(v28) & 0xF;
    unint64_t v153 = v27;
    uint64_t v154 = v28 & 0xFFFFFFFFFFFFFFLL;
    if (v69 < v152) {
      goto LABEL_121;
    }
    unint64_t v70 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(v149, v152, (uint64_t)&v153, v69);
    size_t v72 = v71;
    unint64_t v27 = v156;
    uint64_t v73 = v156 & 0xFFFFFFFFFFFFFFFLL;
    specialized UnsafeMutablePointer.initialize(from:count:)(v70, v71, (char *)((v156 & 0xFFFFFFFFFFFFFFFLL) + (*(void *)((v156 & 0xFFFFFFFFFFFFFFFLL) + 0x18) & 0xFFFFFFFFFFFFLL) + 32));
    uint64_t v74 = *(void *)(v73 + 24);
    if (!__OFADD__(v74 & 0xFFFFFFFFFFFFLL, v72))
    {
      __StringStorage._updateCountAndFlags(newCount:newIsASCII:)((v74 & 0xFFFFFFFFFFFFLL) + v72, ((unint64_t)v28 >> 62) & (v74 < 0));
      uint64_t v30 = *(void *)(v73 + 24);
      uint64_t __src = v30;
      goto LABEL_46;
    }
    goto LABEL_119;
  }
  if ((v27 & 0x1000000000000000) == 0) {
    goto LABEL_117;
  }
  id v35 = (id)((v28 & 0xFFFFFFFFFFFFFFFLL) + 32);
  for (uint64_t i = v27 & 0xFFFFFFFFFFFFLL; ; uint64_t i = v146)
  {
    if (i < v152) {
      goto LABEL_121;
    }
    char v37 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(v149, v152, (uint64_t)v35, i);
    size_t v39 = v38;
    unint64_t v27 = v156;
    uint64_t v40 = v156 & 0xFFFFFFFFFFFFFFFLL;
    specialized UnsafeMutablePointer.initialize(from:count:)(v37, v38, (char *)((v156 & 0xFFFFFFFFFFFFFFFLL) + (*(void *)((v156 & 0xFFFFFFFFFFFFFFFLL) + 0x18) & 0xFFFFFFFFFFFFLL) + 32));
    uint64_t v41 = *(void *)(v40 + 24);
    if (__OFADD__(v41 & 0xFFFFFFFFFFFFLL, v39))
    {
      __break(1u);
LABEL_119:
      __break(1u);
      goto LABEL_120;
    }
    __StringStorage._updateCountAndFlags(newCount:newIsASCII:)((v41 & 0xFFFFFFFFFFFFLL) + v39, (v41 & v25 & 0x8000000000000000) != 0);
    uint64_t v30 = *(void *)(v40 + 24);
    uint64_t __src = v30;
    swift_bridgeObjectRelease(v28);
LABEL_46:
    if ((v27 & 0x2000000000000000) != 0) {
      uint64_t v75 = HIBYTE(v27) & 0xF;
    }
    else {
      uint64_t v75 = v30 & 0xFFFFFFFFFFFFLL;
    }
    if (&full type metadata for EmptyCollection<Character> == &full type metadata for String)
    {
      __break(1u);
LABEL_126:
      __break(1u);
LABEL_127:
      __break(1u);
      goto LABEL_128;
    }
    if (&full type metadata for EmptyCollection<Character> == &full type metadata for Substring) {
      goto LABEL_126;
    }
    uint64_t v152 = v75;
    if (&full type metadata for EmptyCollection<Character> == &full type metadata for [Character]) {
      goto LABEL_127;
    }
    swift_bridgeObjectRetain_n(v27, 3);
    v76._Swift::UInt64 rawBits = v151;
    Swift::UInt64 v31 = specialized Collection.subscript.getter(v76, v7, v6);
    int64_t v33 = v78;
    uint64_t v6 = v79;
    unint64_t v25 = v77;
    Swift::Int v29 = v31 >> 16;
    uint64_t v7 = v78 >> 16;
    if ((v77 & 0x1000000000000000) != 0)
    {
LABEL_113:
      swift_bridgeObjectRetain_n(v25, 3);
      v142._Swift::UInt64 rawBits = v31 & 0xFFFFFFFFFFFF0000 | 1;
      v143._Swift::UInt64 rawBits = v33 & 0xFFFFFFFFFFFF0000 | 1;
      v144._Swift::UInt64 rawBits = _StringGuts.validateScalarRange(_:)(v142, v143, v6, v25);
      if (v144._rawBits < 0x10000) {
        v144._rawBits |= 3;
      }
      Swift::Int v80 = specialized Collection.count.getter(v144, v145, v6, v25);
      swift_bridgeObjectRelease(v27);
      uint64_t v81 = v25;
    }
    else
    {
      Swift::Int v80 = v7 - v29;
      swift_bridgeObjectRetain_n(v77, 2);
      uint64_t v81 = v27;
    }
    swift_bridgeObjectRelease(v27);
    swift_bridgeObjectRelease(v81);
    Swift::Int v82 = v152;
    if ((v27 & 0x1000000000000000) != 0) {
      Swift::Int v82 = String.UTF8View._foreignCount()();
    }
    swift_bridgeObjectRelease(v27);
    BOOL v83 = __OFADD__(v82, v80);
    uint64_t v28 = v82 + v80;
    if (!v83) {
      break;
    }
    __break(1u);
LABEL_117:
    id v35 = _StringObject.sharedUTF8.getter(v25, v28);
  }
  if ((v30 & ~v27 & 0x2000000000000000) == 0
    || (v84 = swift_isUniquelyReferenced_nonNull_native(v27 & 0xFFFFFFFFFFFFFFFLL), v30 = __src, unint64_t v27 = v156, !v84))
  {
    if (v28 > 15) {
      goto LABEL_63;
    }
LABEL_69:
    swift_bridgeObjectRelease(v25);
    swift_bridgeObjectRetain(v27);
    unint64_t v91 = _StringGuts._convertedToSmall()(v30, v27);
    unint64_t v93 = v92;
    swift_bridgeObjectRelease(v27);
    v94._Swift::UInt64 rawBits = v31 & 0xFFFFFFFFFFFF0000 | 1;
    v95._Swift::UInt64 rawBits = v33 & 0xFFFFFFFFFFFF0000 | 1;
    v96._Swift::UInt64 rawBits = _StringGuts.validateScalarRange(_:)(v94, v95, v6, v25);
    if (v96._rawBits < 0x10000) {
      v96._rawBits |= 3;
    }
    unint64_t v98 = specialized String.init(_:)(v96, v97, v6, v25);
    unint64_t v100 = v99;
    swift_bridgeObjectRelease(v25);
    unint64_t v101 = _StringGuts._convertedToSmall()(v98, v100);
    unint64_t v103 = v102;
    swift_bridgeObjectRelease(v100);
    uint64_t v104 = HIBYTE(v93) & 0xF;
    uint64_t v105 = HIBYTE(v103) & 0xF;
    uint64_t v106 = v105 + v104;
    if ((unint64_t)(v105 + v104) <= 0xF)
    {
      unint64_t v107 = v150;
      uint64_t v9 = v152;
      if (v105)
      {
        char v108 = 0;
        unint64_t v109 = 0;
        do
        {
          unint64_t v110 = v104 + v109;
          unint64_t v111 = v109 + 1;
          if (v109 >= 8) {
            unint64_t v112 = v103;
          }
          else {
            unint64_t v112 = v101;
          }
          unint64_t v113 = v112 >> (v108 & 0x38);
          char v114 = (8 * v104 + v108) & 0x38;
          uint64_t v115 = (-255 << v114) - 1;
          unint64_t v116 = (unint64_t)v113 << v114;
          unint64_t v117 = v116 | v115 & v93;
          unint64_t v118 = v116 | v115 & v91;
          if (v110 < 8) {
            unint64_t v91 = v118;
          }
          else {
            unint64_t v93 = v117;
          }
          v108 += 8;
          unint64_t v109 = v111;
        }
        while (v105 != v111);
      }
      swift_bridgeObjectRelease(v27);
      unint64_t v119 = 0xA000000000000000;
      if (!(v91 & 0x8080808080808080 | v93 & 0x80808080808080)) {
        unint64_t v119 = 0xE000000000000000;
      }
      uint64_t __src = v91;
      unint64_t v156 = v119 & 0xFF00000000000000 | (v106 << 56) | v93 & 0xFFFFFFFFFFFFFFLL;
      goto LABEL_89;
    }
    goto LABEL_128;
  }
  int64_t v85 = _StringGuts.nativeUnusedCapacity.getter(__src, v156);
  if (v86)
  {
LABEL_129:
    unint64_t v148 = 258;
LABEL_130:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/StringGutsRangeReplaceable.swift", 38, 2, v148, 0);
  }
  if (v28 < 16 && ((v27 & 0x2000000000000000) != 0 || v85 < v80)) {
    goto LABEL_69;
  }
LABEL_63:
  _StringGuts.prepareForAppendInPlace(totalCount:otherUTF8Count:)(v28, v80);
  swift_bridgeObjectRelease(v25);
  if ((v25 & 0x1000000000000000) != 0)
  {
    _StringGuts._foreignAppendInPlace(_:)(v6, v25, v29, v7);
    goto LABEL_85;
  }
  if ((v25 & 0x2000000000000000) != 0)
  {
    swift_bridgeObjectRelease(v25);
    unint64_t v120 = HIBYTE(v25) & 0xF;
    unint64_t v153 = v6;
    uint64_t v154 = v25 & 0xFFFFFFFFFFFFFFLL;
    if (v120 < v7) {
      goto LABEL_121;
    }
    unint64_t v121 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(v29, v7, (uint64_t)&v153, v120);
    _StringGuts.appendInPlace(_:isASCII:)(v121, v122, (v25 & 0x4000000000000000) != 0);
  }
  else
  {
    if ((v6 & 0x1000000000000000) != 0)
    {
      id v87 = (id)((v25 & 0xFFFFFFFFFFFFFFFLL) + 32);
      uint64_t v88 = v6 & 0xFFFFFFFFFFFFLL;
      if ((v6 & 0xFFFFFFFFFFFFLL) >= v7) {
        goto LABEL_67;
      }
LABEL_121:
      _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x745uLL, 0);
    }
LABEL_120:
    id v87 = _StringObject.sharedUTF8.getter(v6, v25);
    uint64_t v88 = v147;
    if (v147 < v7) {
      goto LABEL_121;
    }
LABEL_67:
    int64_t v89 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(v29, v7, (uint64_t)v87, v88);
    _StringGuts.appendInPlace(_:isASCII:)(v89, v90, v6 < 0);
LABEL_85:
    swift_bridgeObjectRelease(v25);
  }
  unint64_t v107 = v150;
  uint64_t v9 = v152;
LABEL_89:
  uint64_t v123 = __src;
  uint64_t v124 = v156;
  swift_bridgeObjectRelease(v107[1]);
  uint64_t *v107 = v123;
  v107[1] = v124;
  return v9;
}

unint64_t *_StringGuts.replaceSubrange<A>(_:with:)(unint64_t a1, Swift::UInt64 a2, unint64_t *a3, ValueMetadata *a4, unint64_t a5)
{
  unint64_t v6 = a5;
  Swift::String::Index v263 = a3;
  unint64_t v264 = a1;
  Swift::UInt64 v261 = a2;
  uint64_t v8 = *(void *)(a5 + 8);
  unint64_t v9 = (unint64_t)type metadata accessor for LazyMapSequence(255, (uint64_t)a4, (uint64_t)&type metadata for String.UTF8View, v8);
  unint64_t v274 = v6;
  uint64_t WitnessTable = swift_getWitnessTable(protocol conformance descriptor for <> LazyMapSequence<A, B>, (unint64_t *)v9, (uint64_t)&v274);
  unint64_t v258 = (int **)lazy protocol witness table accessor for type String.UTF8View and conformance String.UTF8View(WitnessTable, v10, v11);
  int64_t v12 = type metadata accessor for FlattenSequence<>.Index(0, v9, WitnessTable, (uint64_t)v258);
  uint64_t v256 = (uint64_t)*(v12 - 1);
  uint64_t v13 = MEMORY[0x1F4188790](v12);
  uint64_t v255 = (uint64_t *)((char *)&v251 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1F4188790](v13);
  uint64_t v254 = (char *)&v251 - v15;
  uint64_t v260 = v8;
  Swift::Int v17 = type metadata accessor for LazySequence(0, (uint64_t)a4, v8, v16);
  MEMORY[0x1F4188790](v17 - 1);
  char v19 = (char *)&v251 - v18;
  uint64_t v21 = swift_getWitnessTable(protocol conformance descriptor for LazyMapSequence<A, B>, (unint64_t *)v9, v20);
  unint64_t v24 = lazy protocol witness table accessor for type String.UTF8View and conformance String.UTF8View(v21, v22, v23);
  unint64_t v25 = (unint64_t *)type metadata accessor for FlattenSequence(255, v9, v21, v24);
  uint64_t v27 = swift_getWitnessTable(protocol conformance descriptor for FlattenSequence<A>, v25, v26);
  unint64_t v259 = v25;
  Swift::Int v29 = type metadata accessor for LazySequence(0, (uint64_t)v25, v27, v28);
  uint64_t v30 = MEMORY[0x1F4188790](v29);
  uint64_t v262 = a4;
  Swift::UInt64 Description = (Swift::UInt64)a4[-1].Description;
  uint64_t v32 = MEMORY[0x1F4188790](v30);
  char v34 = (unint64_t *)((char *)&v251 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0));
  id v35 = (unint64_t *)MEMORY[0x1F4188790](v32);
  size_t v39 = (unint64_t *)((char *)&v251 - v38);
  unint64_t v41 = *v5;
  unint64_t v40 = v5[1];
  uint64_t v265 = v5;
  if ((v41 & ~v40 & 0x2000000000000000) == 0)
  {
LABEL_17:
    unint64_t __src = 0;
    unint64_t v269 = 0xE000000000000000;
    Swift::Int v59 = _StringGuts.nativeCapacity.getter(v41, v40);
    if ((v60 & 1) == 0) {
      String.reserveCapacity(_:)(v59);
    }
    v61._Swift::UInt64 rawBits = v264;
    unint64_t v64 = specialized Collection.subscript.getter(v61, v41, v40);
    unint64_t v66 = v65;
    unint64_t v67 = v63;
    uint64_t v68 = v65 >> 16;
    unint64_t v264 = v62;
    unint64_t v259 = (unint64_t *)(v64 >> 16);
    if ((v63 & 0x1000000000000000) != 0)
    {
      unint64_t v208 = v62;
      swift_bridgeObjectRetain_n(v63, 3);
      v209._Swift::UInt64 rawBits = v64 & 0xFFFFFFFFFFFF0000 | 1;
      v210._Swift::UInt64 rawBits = v66 & 0xFFFFFFFFFFFF0000 | 1;
      v211._Swift::UInt64 rawBits = _StringGuts.validateScalarRange(_:)(v209, v210, v208, v67);
      if (v211._rawBits < 0x10000) {
        v211._rawBits |= 3;
      }
      Swift::Int v69 = specialized Collection.count.getter(v211, v212, v208, v67);
      swift_bridgeObjectRelease(v67);
      uint64_t v71 = __src;
      unint64_t v70 = v269;
      if ((v269 & 0x1000000000000000) == 0)
      {
LABEL_21:
        if ((v70 & 0x2000000000000000) != 0) {
          goto LABEL_25;
        }
        int64_t v72 = (v71 & 0xFFFFFFFFFFFFLL) + v69;
        if (!__OFADD__(v71 & 0xFFFFFFFFFFFFLL, v69)) {
          goto LABEL_26;
        }
        goto LABEL_24;
      }
    }
    else
    {
      Swift::Int v69 = v68 - (v64 >> 16);
      swift_bridgeObjectRetain_n(v63, 2);
      uint64_t v71 = __src;
      unint64_t v70 = v269;
      if ((v269 & 0x1000000000000000) == 0) {
        goto LABEL_21;
      }
    }
    Swift::Int v213 = String.UTF8View._foreignCount()();
    int64_t v72 = v213 + v69;
    if (!__OFADD__(v213, v69)) {
      goto LABEL_26;
    }
    do
    {
LABEL_24:
      __break(1u);
LABEL_25:
      uint64_t v73 = HIBYTE(v70) & 0xF;
      int64_t v72 = v73 + v69;
    }
    while (__OFADD__(v73, v69));
LABEL_26:
    if ((v71 & ~v70 & 0x2000000000000000) != 0
      && swift_isUniquelyReferenced_nonNull_native(v70 & 0xFFFFFFFFFFFFFFFLL))
    {
      int64_t v74 = _StringGuts.nativeUnusedCapacity.getter(v71, v70);
      if (v75) {
        goto LABEL_193;
      }
      if (v72 > 15 || (v70 & 0x2000000000000000) == 0 && v74 >= v69)
      {
LABEL_32:
        _StringGuts.prepareForAppendInPlace(totalCount:otherUTF8Count:)(v72, v69);
        swift_bridgeObjectRelease(v67);
        if ((v67 & 0x1000000000000000) != 0)
        {
          _StringGuts._foreignAppendInPlace(_:)(v264, v67, (uint64_t)v259, v68);
        }
        else
        {
          uint64_t v76 = v264;
          if ((v67 & 0x2000000000000000) != 0)
          {
            swift_bridgeObjectRelease(v67);
            unint64_t v130 = HIBYTE(v67) & 0xF;
            uint64_t v272 = v76;
            uint64_t v273 = v67 & 0xFFFFFFFFFFFFFFLL;
            if (v130 < v68) {
              goto LABEL_184;
            }
            size_t v131 = (char *)specialized UnsafeBufferPointer.init(rebasing:)((uint64_t)v259, v68, (uint64_t)&v272, v130);
            _StringGuts.appendInPlace(_:isASCII:)(v131, v132, (v67 & 0x4000000000000000) != 0);
            goto LABEL_73;
          }
          if ((v264 & 0x1000000000000000) != 0)
          {
            id v77 = (id)((v67 & 0xFFFFFFFFFFFFFFFLL) + 32);
            uint64_t v78 = v264 & 0xFFFFFFFFFFFFLL;
            if ((uint64_t)(v264 & 0xFFFFFFFFFFFFLL) < v68) {
              goto LABEL_184;
            }
          }
          else
          {
            id v77 = _StringObject.sharedUTF8.getter(v264, v67);
            uint64_t v78 = v218;
            if (v218 < v68) {
              goto LABEL_184;
            }
          }
          uint64_t v79 = (char *)specialized UnsafeBufferPointer.init(rebasing:)((uint64_t)v259, v68, (uint64_t)v77, v78);
          _StringGuts.appendInPlace(_:isASCII:)(v79, v80, v76 < 0);
        }
        swift_bridgeObjectRelease(v67);
LABEL_73:
        uint64_t v133 = (unint64_t *)(__src & 0xFFFFFFFFFFFFLL);
        if ((v269 & 0x2000000000000000) != 0) {
          uint64_t v133 = (unint64_t *)(HIBYTE(v269) & 0xF);
        }
        unint64_t v259 = v133;
        String.append<A>(contentsOf:)(v263, v262, v260);
        unint64_t v42 = __src;
        unint64_t v46 = v269;
        unint64_t v134 = HIBYTE(v269) & 0xF;
        if ((v269 & 0x2000000000000000) == 0) {
          unint64_t v134 = __src & 0xFFFFFFFFFFFFLL;
        }
        unint64_t v264 = v134;
        swift_bridgeObjectRetain_n(v269, 3);
        v135._Swift::UInt64 rawBits = v261;
        Swift::UInt64 Description = specialized Collection.subscript.getter(v135, v41, v40);
        unint64_t v6 = v137;
        uint64_t v139 = v138;
        unint64_t v9 = v136;
        char v19 = (char *)(Description >> 16);
        Swift::String::Index v45 = (Class *)(v137 >> 16);
        if ((v136 & 0x1000000000000000) != 0)
        {
          swift_bridgeObjectRetain_n(v136, 3);
          v214._Swift::UInt64 rawBits = Description & 0xFFFFFFFFFFFF0000 | 1;
          v215._Swift::UInt64 rawBits = v6 & 0xFFFFFFFFFFFF0000 | 1;
          v216._Swift::UInt64 rawBits = _StringGuts.validateScalarRange(_:)(v214, v215, v139, v9);
          if (v216._rawBits < 0x10000) {
            v216._rawBits |= 3;
          }
          Swift::Int v140 = specialized Collection.count.getter(v216, v217, v139, v9);
          swift_bridgeObjectRelease(v46);
          uint64_t v141 = v9;
        }
        else
        {
          Swift::Int v140 = (char *)v45 - v19;
          swift_bridgeObjectRetain_n(v136, 2);
          uint64_t v141 = v46;
        }
        swift_bridgeObjectRelease(v46);
        swift_bridgeObjectRelease(v141);
        Swift::Int v142 = v264;
        if ((v46 & 0x1000000000000000) != 0) {
          Swift::Int v142 = String.UTF8View._foreignCount()();
        }
        swift_bridgeObjectRelease(v46);
        BOOL v143 = __OFADD__(v142, v140);
        int64_t v144 = v142 + v140;
        if (v143)
        {
          __break(1u);
          goto LABEL_144;
        }
        if ((v42 & ~v46 & 0x2000000000000000) == 0
          || (BOOL isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v46 & 0xFFFFFFFFFFFFFFFLL),
              unint64_t v42 = __src,
              unint64_t v46 = v269,
              !isUniquelyReferenced_nonNull_native))
        {
          if (v144 > 15)
          {
LABEL_88:
            _StringGuts.prepareForAppendInPlace(totalCount:otherUTF8Count:)(v144, v140);
            swift_bridgeObjectRelease(v9);
            if ((v9 & 0x1000000000000000) != 0)
            {
              _StringGuts._foreignAppendInPlace(_:)(v139, v9, (uint64_t)v19, (uint64_t)v45);
              swift_bridgeObjectRelease(v9);
              uint64_t v168 = v265;
              unint64_t v50 = v259;
LABEL_113:
              unint64_t v184 = __src;
              unint64_t v185 = v269;
              swift_bridgeObjectRelease(v168[1]);
              *uint64_t v168 = v184;
              v168[1] = v185;
              return v50;
            }
            unint64_t v50 = v259;
            if ((v9 & 0x2000000000000000) != 0)
            {
              swift_bridgeObjectRelease(v9);
              unint64_t v181 = HIBYTE(v9) & 0xF;
              uint64_t v272 = v139;
              uint64_t v273 = v9 & 0xFFFFFFFFFFFFFFLL;
              if (v181 < (unint64_t)v45) {
                goto LABEL_184;
              }
              uint64_t v182 = (char *)specialized UnsafeBufferPointer.init(rebasing:)((uint64_t)v19, (uint64_t)v45, (uint64_t)&v272, v181);
              _StringGuts.appendInPlace(_:isASCII:)(v182, v183, (v9 & 0x4000000000000000) != 0);
              goto LABEL_112;
            }
            if ((v139 & 0x1000000000000000) != 0)
            {
              id v148 = (id)((v9 & 0xFFFFFFFFFFFFFFFLL) + 32);
              uint64_t v149 = v139 & 0xFFFFFFFFFFFFLL;
              if ((v139 & 0xFFFFFFFFFFFFLL) < (uint64_t)v45) {
                goto LABEL_184;
              }
              goto LABEL_92;
            }
            id v148 = _StringObject.sharedUTF8.getter(v139, v9);
            uint64_t v149 = v219;
            if (v219 >= (uint64_t)v45)
            {
LABEL_92:
              Swift::String::Index v150 = (char *)specialized UnsafeBufferPointer.init(rebasing:)((uint64_t)v19, (uint64_t)v45, (uint64_t)v148, v149);
              _StringGuts.appendInPlace(_:isASCII:)(v150, v151, v139 < 0);
              swift_bridgeObjectRelease(v9);
LABEL_112:
              uint64_t v168 = v265;
              goto LABEL_113;
            }
LABEL_184:
            _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x745uLL, 0);
          }
          goto LABEL_94;
        }
        int64_t v146 = _StringGuts.nativeUnusedCapacity.getter(__src, v269);
        if ((v147 & 1) == 0)
        {
          if (v144 > 15 || (v46 & 0x2000000000000000) == 0 && v146 >= v140) {
            goto LABEL_88;
          }
LABEL_94:
          swift_bridgeObjectRelease(v9);
          swift_bridgeObjectRetain(v46);
          unint64_t v152 = _StringGuts._convertedToSmall()(v42, v46);
          unint64_t v154 = v153;
          swift_bridgeObjectRelease(v46);
          v155._Swift::UInt64 rawBits = Description & 0xFFFFFFFFFFFF0000 | 1;
          v156._Swift::UInt64 rawBits = v6 & 0xFFFFFFFFFFFF0000 | 1;
          v157._Swift::UInt64 rawBits = _StringGuts.validateScalarRange(_:)(v155, v156, v139, v9);
          if (v157._rawBits < 0x10000) {
            v157._rawBits |= 3;
          }
          unint64_t v159 = specialized String.init(_:)(v157, v158, v139, v9);
          unint64_t v161 = v160;
          swift_bridgeObjectRelease(v9);
          unint64_t v162 = _StringGuts._convertedToSmall()(v159, v161);
          unint64_t v164 = v163;
          swift_bridgeObjectRelease(v161);
          uint64_t v165 = HIBYTE(v154) & 0xF;
          uint64_t v166 = HIBYTE(v164) & 0xF;
          uint64_t v167 = v166 + v165;
          if ((unint64_t)(v166 + v165) <= 0xF)
          {
            uint64_t v168 = v265;
            unint64_t v50 = v259;
            if (v166)
            {
              char v169 = 0;
              unint64_t v170 = 0;
              do
              {
                unint64_t v171 = v165 + v170;
                unint64_t v172 = v170 + 1;
                if (v170 >= 8) {
                  unint64_t v173 = v164;
                }
                else {
                  unint64_t v173 = v162;
                }
                unint64_t v174 = v173 >> (v169 & 0x38);
                char v175 = (8 * v165 + v169) & 0x38;
                uint64_t v176 = (-255 << v175) - 1;
                unint64_t v177 = (unint64_t)v174 << v175;
                unint64_t v178 = v177 | v176 & v154;
                unint64_t v179 = v177 | v176 & v152;
                if (v171 < 8) {
                  unint64_t v152 = v179;
                }
                else {
                  unint64_t v154 = v178;
                }
                v169 += 8;
                unint64_t v170 = v172;
              }
              while (v166 != v172);
            }
            swift_bridgeObjectRelease(v46);
            unint64_t v180 = 0xA000000000000000;
            if (!(v152 & 0x8080808080808080 | v154 & 0x80808080808080)) {
              unint64_t v180 = 0xE000000000000000;
            }
            unint64_t __src = v152;
            unint64_t v269 = v180 & 0xFF00000000000000 | (v167 << 56) | v154 & 0xFFFFFFFFFFFFFFLL;
            goto LABEL_113;
          }
          goto LABEL_192;
        }
LABEL_193:
        unint64_t v250 = 258;
LABEL_194:
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/StringGutsRangeReplaceable.swift", 38, 2, v250, 0);
      }
    }
    else if (v72 > 15)
    {
      goto LABEL_32;
    }
    swift_bridgeObjectRelease(v67);
    swift_bridgeObjectRetain(v70);
    unint64_t v81 = _StringGuts._convertedToSmall()(v71, v70);
    unint64_t v83 = v82;
    swift_bridgeObjectRelease(v70);
    v84._Swift::UInt64 rawBits = v64 & 0xFFFFFFFFFFFF0000 | 1;
    v85._Swift::UInt64 rawBits = v66 & 0xFFFFFFFFFFFF0000 | 1;
    unint64_t v86 = v264;
    v87._Swift::UInt64 rawBits = _StringGuts.validateScalarRange(_:)(v84, v85, v264, v67);
    if (v87._rawBits < 0x10000) {
      v87._rawBits |= 3;
    }
    unint64_t v89 = specialized String.init(_:)(v87, v88, v86, v67);
    unint64_t v91 = v90;
    swift_bridgeObjectRelease(v67);
    unint64_t v92 = _StringGuts._convertedToSmall()(v89, v91);
    unint64_t v94 = v93;
    swift_bridgeObjectRelease(v91);
    uint64_t v95 = HIBYTE(v83) & 0xF;
    uint64_t v96 = HIBYTE(v94) & 0xF;
    uint64_t v97 = v96 + v95;
    if ((unint64_t)(v96 + v95) > 0xF)
    {
LABEL_192:
      unint64_t v250 = 266;
      goto LABEL_194;
    }
    if (v96)
    {
      char v98 = 0;
      unint64_t v99 = 0;
      do
      {
        unint64_t v100 = v95 + v99;
        unint64_t v101 = v99 + 1;
        if (v99 >= 8) {
          unint64_t v102 = v94;
        }
        else {
          unint64_t v102 = v92;
        }
        unint64_t v103 = v102 >> (v98 & 0x38);
        char v104 = (8 * v95 + v98) & 0x38;
        uint64_t v105 = (-255 << v104) - 1;
        unint64_t v106 = (unint64_t)v103 << v104;
        unint64_t v107 = v106 | v105 & v83;
        unint64_t v108 = v106 | v105 & v81;
        if (v100 < 8) {
          unint64_t v81 = v108;
        }
        else {
          unint64_t v83 = v107;
        }
        v98 += 8;
        unint64_t v99 = v101;
      }
      while (v96 != v101);
    }
    swift_bridgeObjectRelease(v70);
    unint64_t v109 = 0xA000000000000000;
    if (!(v81 & 0x8080808080808080 | v83 & 0x80808080808080)) {
      unint64_t v109 = 0xE000000000000000;
    }
    unint64_t __src = v81;
    unint64_t v269 = v109 & 0xFF00000000000000 | (v97 << 56) | v83 & 0xFFFFFFFFFFFFFFLL;
    goto LABEL_73;
  }
  uint64_t v253 = v37;
  uint64_t v251 = v36;
  unint64_t v252 = v35;
  if (!swift_isUniquelyReferenced_nonNull_native(v40 & 0xFFFFFFFFFFFFFFFLL))
  {
    unint64_t v41 = *v265;
    unint64_t v40 = v265[1];
    goto LABEL_17;
  }
  uint64_t v260 = (uint64_t)v12;
  uint64_t v43 = Description + 16;
  unint64_t v42 = *(void *)(Description + 16);
  Swift::String::Index v45 = (Class *)v262;
  Swift::String::Index v44 = v263;
  ((void (*)(unint64_t *, unint64_t *, ValueMetadata *))v42)(v39, v263, v262);
  if (!swift_dynamicCast((char *)&__src, v39, v45, (const char *)&type metadata for String, 6uLL))
  {
    ((void (*)(unint64_t *, unint64_t *, Class *))v42)(v34, v44, v45);
    if (swift_dynamicCast((char *)&__src, v34, v45, (const char *)&type metadata for Substring, 6uLL))
    {
      unint64_t v110 = (int **)v271;
      if ((v271 & 0x1000000000000000) == 0)
      {
        unint64_t v111 = v269;
        uint64_t v112 = v270;
        int64_t v113 = __src >> 16;
        int64_t v114 = v269 >> 16;
        if ((v271 & 0x2000000000000000) != 0)
        {
          unint64_t v195 = HIBYTE(v271) & 0xF;
          unint64_t __src = v270;
          unint64_t v269 = v271 & 0xFFFFFFFFFFFFFFLL;
          uint64_t v115 = (uint64_t *)v265;
          if (v195 < v114) {
            goto LABEL_184;
          }
          uint64_t v196 = specialized UnsafeBufferPointer.init(rebasing:)(v113, v111 >> 16, (uint64_t)&__src, v195);
          unint64_t v50 = (unint64_t *)(v264 >> 16);
          unint64_t v198 = (v264 >> 16) + v197;
          if (!__OFADD__(v264 >> 16, v197))
          {
            Swift::String::Index v44 = (unint64_t *)(v261 >> 16);
            unint64_t v199 = v115[1];
            if ((v199 & 0x2000000000000000) != 0) {
              uint64_t v200 = HIBYTE(v199) & 0xF;
            }
            else {
              uint64_t v200 = *v115 & 0xFFFFFFFFFFFFLL;
            }
            uint64_t v201 = v200 - (void)v44;
            Swift::Int v202 = v198 + v201;
            if (!__OFADD__(v198, v201))
            {
              Swift::String::Index v203 = (char *)v196;
              size_t v204 = v197;
              if (v202 >= 16)
              {
                uint64_t v205 = _StringGuts.uniqueNativeCapacity.getter();
                if ((v206 & 1) != 0 || v205 < v202) {
                  _StringGuts.grow(_:)(v202);
                }
              }
              uint64_t v207 = v115[1] & 0xFFFFFFFFFFFFFFFLL;
              __StringStorage.replace(from:to:with:)((uint64_t)v50, (uint64_t)v44, v203, v204);
              swift_bridgeObjectRelease((uint64_t)v110);
              goto LABEL_180;
            }
            goto LABEL_188;
          }
          goto LABEL_186;
        }
        uint64_t v115 = (uint64_t *)v265;
        if ((v270 & 0x1000000000000000) != 0)
        {
          id v116 = (id)((v271 & 0xFFFFFFFFFFFFFFFLL) + 32);
          uint64_t v117 = v270 & 0xFFFFFFFFFFFFLL;
          if ((uint64_t)(v270 & 0xFFFFFFFFFFFFLL) < v114) {
            goto LABEL_184;
          }
LABEL_60:
          uint64_t v118 = specialized UnsafeBufferPointer.init(rebasing:)(v113, v114, (uint64_t)v116, v117);
          unint64_t v50 = (unint64_t *)(v264 >> 16);
          unint64_t v120 = (v264 >> 16) + v119;
          if (!__OFADD__(v264 >> 16, v119))
          {
            Swift::String::Index v44 = (unint64_t *)(v261 >> 16);
            unint64_t v121 = v115[1];
            if ((v121 & 0x2000000000000000) != 0) {
              uint64_t v122 = HIBYTE(v121) & 0xF;
            }
            else {
              uint64_t v122 = *v115 & 0xFFFFFFFFFFFFLL;
            }
            uint64_t v123 = v122 - (void)v44;
            Swift::Int v124 = v120 + v123;
            if (!__OFADD__(v120, v123))
            {
              unint64_t v125 = (char *)v118;
              size_t v126 = v119;
              if (v124 >= 16)
              {
                uint64_t v127 = _StringGuts.uniqueNativeCapacity.getter();
                if ((v128 & 1) != 0 || v127 < v124) {
                  _StringGuts.grow(_:)(v124);
                }
              }
              uint64_t v129 = v115[1] & 0xFFFFFFFFFFFFFFFLL;
              __StringStorage.replace(from:to:with:)((uint64_t)v50, (uint64_t)v44, v125, v126);
              *uint64_t v115 = *(void *)(v129 + 24);
              uint64_t v58 = (uint64_t)v110;
              goto LABEL_70;
            }
            goto LABEL_187;
          }
          __break(1u);
LABEL_186:
          __break(1u);
LABEL_187:
          __break(1u);
LABEL_188:
          __break(1u);
          goto LABEL_189;
        }
LABEL_183:
        id v116 = _StringObject.sharedUTF8.getter(v112, (uint64_t)v110);
        uint64_t v117 = v249;
        if (v249 < v114) {
          goto LABEL_184;
        }
        goto LABEL_60;
      }
      swift_bridgeObjectRelease(v271);
    }
LABEL_151:
    ((void (*)(char *, unint64_t *, Class *))v42)(v19, v44, v45);
    uint64_t v221 = v253;
    (*(void (**)(uint64_t, char *, Class *))(Description + 32))(v253, v19, v45);
    uint64_t v222 = (void *)(v221 + *(int *)(v9 + 44));
    *uint64_t v222 = closure #3 in _StringGuts.replaceSubrange<A>(_:with:);
    v222[1] = 0;
    uint64_t v223 = v254;
    unint64_t v110 = v258;
    unint64_t v9 = (unint64_t)v259;
    uint64_t v43 = WitnessTable;
    FlattenSequence<>.startIndex.getter((uint64_t)v259, WitnessTable, v258, v254);
    uint64_t v115 = v255;
    (*(void (**)(Class *, unint64_t))(v6 + 72))(v45, v6);
    uint64_t v224 = v260;
    uint64_t v225 = (char *)v115 + *(int *)(v260 + 44);
    *(void *)uint64_t v225 = 0;
    v225[8] = 1;
    Swift::String::Index v44 = (unint64_t *)FlattenSequence<>.distance(from:to:)((uint64_t)v223, (uint64_t)v115, v9, v43, v110);
    int64_t v114 = v256 + 8;
    int64_t v113 = *(void *)(v256 + 8);
    ((void (*)(uint64_t *, uint64_t))v113)(v115, v224);
    uint64_t v112 = ((uint64_t (*)(char *, uint64_t))v113)(v223, v224);
    unint64_t v50 = (unint64_t *)(v264 >> 16);
    unint64_t v226 = (char *)v44 + (v264 >> 16);
    if (__OFADD__(v264 >> 16, v44))
    {
      __break(1u);
    }
    else
    {
      unint64_t v9 = v261 >> 16;
      uint64_t v115 = (uint64_t *)v265;
      unint64_t v227 = v265[1];
      if ((v227 & 0x2000000000000000) != 0) {
        uint64_t v228 = HIBYTE(v227) & 0xF;
      }
      else {
        uint64_t v228 = *v265 & 0xFFFFFFFFFFFFLL;
      }
      unint64_t v229 = v228 - v9;
      int64_t v113 = (int64_t)&v226[v229];
      if (!__OFADD__(v226, v229))
      {
        if (v113 < 16) {
          goto LABEL_179;
        }
        uint64_t v230 = _StringGuts.uniqueNativeCapacity.getter();
        if ((v231 & 1) == 0 && v230 >= v113) {
          goto LABEL_179;
        }
        uint64_t v232 = _StringGuts.uniqueNativeCapacity.getter();
        if (v233)
        {
          unint64_t v235 = v115[1];
          if ((v235 & 0x1000000000000000) != 0)
          {
            Swift::Int v234 = String.UTF8View._foreignCount()();
          }
          else if ((v235 & 0x2000000000000000) != 0)
          {
            Swift::Int v234 = HIBYTE(v235) & 0xF;
          }
          else
          {
            Swift::Int v234 = *v115 & 0xFFFFFFFFFFFFLL;
          }
        }
        else
        {
          Swift::Int v234 = 2 * v232;
        }
        if (v234 <= v113) {
          int64_t v114 = v113;
        }
        else {
          int64_t v114 = v234;
        }
        unint64_t v236 = v115[1];
        if ((v236 & 0x1000000000000000) == 0)
        {
          uint64_t v237 = *v115;
          if ((v236 & 0x2000000000000000) != 0)
          {
            size_t v241 = HIBYTE(v236) & 0xF;
            unint64_t __src = *v115;
            unint64_t v269 = v236 & 0xFFFFFFFFFFFFFFLL;
            unint64_t v242 = v241 | 0xC000000000000000;
            if ((v236 & 0x4000000000000000) == 0) {
              unint64_t v242 = HIBYTE(v236) & 0xF;
            }
            uint64_t v243 = v242 | 0x3000000000000000;
            int64_t v240 = _allocateStringStorage(codeUnitCapacity:)(v114);
            *(void *)(v240 + 16) = v244;
            *(void *)(v240 + 24) = v243;
            if (v244 < 0)
            {
              *(void *)__StringStorage._breadcrumbsAddress.getter() = 0;
              uint64_t v243 = *(void *)(v240 + 24);
            }
            *(unsigned char *)(v240 + 32 + (v243 & 0xFFFFFFFFFFFFLL)) = 0;
            specialized UnsafeMutablePointer.initialize(from:count:)((char *)&__src, v241, (char *)(v240 + 32));
            unint64_t v110 = v258;
          }
          else
          {
            if ((v237 & 0x1000000000000000) != 0)
            {
              unint64_t v238 = (char *)((v236 & 0xFFFFFFFFFFFFFFFLL) + 32);
              size_t v239 = v237 & 0xFFFFFFFFFFFFLL;
            }
            else
            {
              unint64_t v238 = (char *)_StringObject.sharedUTF8.getter(*v115, v236);
            }
            int64_t v240 = specialized static __StringStorage.create(initializingFrom:codeUnitCapacity:isASCII:)(v238, v239, v114, v237 < 0);
          }
          uint64_t v245 = *(void *)(v240 + 24);
          swift_bridgeObjectRelease(v115[1]);
          *uint64_t v115 = v245;
          v115[1] = v240;
          goto LABEL_179;
        }
LABEL_189:
        _StringGuts._foreignGrow(_:)(v114);
LABEL_179:
        uint64_t v207 = v115[1] & 0xFFFFFFFFFFFFFFFLL;
        v267[0] = v43;
        v267[1] = v110;
        uint64_t v266 = swift_getWitnessTable(protocol conformance descriptor for <> FlattenSequence<A>, v259, (uint64_t)v267);
        uint64_t v246 = v252;
        swift_getWitnessTable(protocol conformance descriptor for <> LazySequence<A>, v252, (uint64_t)&v266);
        uint64_t v247 = v9;
        uint64_t v248 = v253;
        __StringStorage.replace<A>(from:to:with:replacementCount:)((uint64_t)v50, v247, v253, (uint64_t)v44, (uint64_t)v246);
        (*(void (**)(uint64_t, unint64_t *))(v251 + 8))(v248, v246);
LABEL_180:
        *uint64_t v115 = *(void *)(v207 + 24);
        return v50;
      }
    }
    __break(1u);
    goto LABEL_183;
  }
  unint64_t v46 = v269;
  if ((v269 & 0x1000000000000000) != 0)
  {
LABEL_144:
    swift_bridgeObjectRelease(v46);
    Swift::String::Index v44 = v263;
    goto LABEL_151;
  }
  if ((v269 & 0x2000000000000000) == 0)
  {
    Swift::String::Index v47 = v265;
    if ((__src & 0x1000000000000000) != 0)
    {
      unint64_t v48 = (char *)((v269 & 0xFFFFFFFFFFFFFFFLL) + 32);
      size_t v49 = __src & 0xFFFFFFFFFFFFLL;
    }
    else
    {
      unint64_t v48 = (char *)_StringObject.sharedUTF8.getter(__src, v269);
      size_t v49 = v220;
    }
    unint64_t v50 = (unint64_t *)(v264 >> 16);
    uint64_t v51 = v261 >> 16;
    unint64_t v52 = v47[1];
    if ((v52 & 0x2000000000000000) != 0) {
      uint64_t v53 = HIBYTE(v52) & 0xF;
    }
    else {
      uint64_t v53 = *v47 & 0xFFFFFFFFFFFFLL;
    }
    Swift::Int v54 = v53 - v51 + v49 + (v264 >> 16);
    if (v54 >= 16)
    {
      uint64_t v55 = _StringGuts.uniqueNativeCapacity.getter();
      if ((v56 & 1) != 0 || v55 < v54) {
        _StringGuts.grow(_:)(v54);
      }
    }
    uint64_t v57 = v47[1] & 0xFFFFFFFFFFFFFFFLL;
    __StringStorage.replace(from:to:with:)((uint64_t)v50, v51, v48, v49);
    *Swift::String::Index v47 = *(void *)(v57 + 24);
    uint64_t v58 = v46;
LABEL_70:
    swift_bridgeObjectRelease(v58);
    return v50;
  }
  v269 &= 0xFFFFFFFFFFFFFFuLL;
  unint64_t v187 = v265;
  unint64_t v50 = (unint64_t *)(v264 >> 16);
  uint64_t v188 = v261 >> 16;
  unint64_t v189 = v265[1];
  if ((v189 & 0x2000000000000000) != 0) {
    uint64_t v190 = HIBYTE(v189) & 0xF;
  }
  else {
    uint64_t v190 = *v265 & 0xFFFFFFFFFFFFLL;
  }
  Swift::Int v191 = v190 - v188 + (HIBYTE(v46) & 0xF) + (v264 >> 16);
  if (v191 > 15)
  {
    uint64_t v192 = _StringGuts.uniqueNativeCapacity.getter();
    if ((v193 & 1) != 0 || v192 < v191) {
      _StringGuts.grow(_:)(v191);
    }
  }
  uint64_t v194 = v187[1] & 0xFFFFFFFFFFFFFFFLL;
  __StringStorage.replace(from:to:with:)((uint64_t)v50, v188, (char *)&__src, HIBYTE(v46) & 0xF);
  swift_bridgeObjectRelease(v46);
  *unint64_t v187 = *(void *)(v194 + 24);
  return v50;
}

unint64_t closure #3 in _StringGuts.replaceSubrange<A>(_:with:)@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *a1;
  unint64_t v3 = a1[1];
  *a2 = v2;
  a2[1] = v3;
  return swift_bridgeObjectRetain(v3);
}

unint64_t specialized _StringGuts.uniqueNativeReplaceSubrange<A>(_:with:)(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t (*a7)(uint64_t, uint64_t, uint64_t, uint64_t), uint64_t (*a8)(uint64_t), void (*a9)(unint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v13 = v9;
  uint64_t v20 = a7(a3, a4, a5, a6);
  uint64_t v21 = a8(v20);
  unint64_t v23 = a1 >> 16;
  uint64_t v24 = (a1 >> 16) + v21;
  if (__OFADD__(a1 >> 16, v21))
  {
    __break(1u);
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  unint64_t v11 = a2 >> 16;
  unint64_t v25 = v13[1];
  if ((v25 & 0x2000000000000000) != 0) {
    uint64_t v26 = HIBYTE(v25) & 0xF;
  }
  else {
    uint64_t v26 = *v13 & 0xFFFFFFFFFFFFLL;
  }
  unint64_t v27 = v26 - v11;
  uint64_t v28 = v24 + v27;
  if (__OFADD__(v24, v27)) {
    goto LABEL_32;
  }
  uint64_t v10 = v21;
  Swift::Int v29 = a9;
  if (v28 >= 16)
  {
    size_t v49 = a9;
    uint64_t v30 = _StringGuts.uniqueNativeCapacity.getter();
    Swift::Int v29 = a9;
    if ((v31 & 1) != 0 || v30 < v28)
    {
      uint64_t v32 = _StringGuts.uniqueNativeCapacity.getter();
      if (v33)
      {
        unint64_t v35 = v13[1];
        if ((v35 & 0x1000000000000000) != 0)
        {
          Swift::Int v34 = String.UTF8View._foreignCount()();
        }
        else if ((v35 & 0x2000000000000000) != 0)
        {
          Swift::Int v34 = HIBYTE(v35) & 0xF;
        }
        else
        {
          Swift::Int v34 = *v13 & 0xFFFFFFFFFFFFLL;
        }
      }
      else
      {
        Swift::Int v34 = 2 * v32;
      }
      if (v34 <= v28) {
        int64_t v22 = v28;
      }
      else {
        int64_t v22 = v34;
      }
      unint64_t v36 = v13[1];
      if ((v36 & 0x1000000000000000) == 0)
      {
        uint64_t v37 = *v13;
        if ((v36 & 0x2000000000000000) != 0)
        {
          __src[0] = *v13;
          __src[1] = v36 & 0xFFFFFFFFFFFFFFLL;
          unint64_t v41 = HIBYTE(v36) & 0xF | 0xC000000000000000;
          uint64_t __n = HIBYTE(v36) & 0xF;
          if ((v36 & 0x4000000000000000) == 0) {
            unint64_t v41 = HIBYTE(v36) & 0xF;
          }
          uint64_t v42 = v41 | 0x3000000000000000;
          int64_t v40 = _allocateStringStorage(codeUnitCapacity:)(v22);
          *(void *)(v40 + 16) = v43;
          *(void *)(v40 + 24) = v42;
          if (v43 < 0)
          {
            *(void *)__StringStorage._breadcrumbsAddress.getter() = 0;
            uint64_t v42 = *(void *)(v40 + 24);
          }
          *(unsigned char *)(v40 + 32 + (v42 & 0xFFFFFFFFFFFFLL)) = 0;
          specialized UnsafeMutablePointer.initialize(from:count:)((char *)__src, __n, (char *)(v40 + 32));
        }
        else
        {
          if ((v37 & 0x1000000000000000) != 0)
          {
            uint64_t v38 = (char *)((v36 & 0xFFFFFFFFFFFFFFFLL) + 32);
            size_t v39 = v37 & 0xFFFFFFFFFFFFLL;
          }
          else
          {
            int64_t v47 = v22;
            uint64_t v38 = (char *)_StringObject.sharedUTF8.getter(*v13, v36);
            int64_t v22 = v47;
          }
          int64_t v40 = specialized static __StringStorage.create(initializingFrom:codeUnitCapacity:isASCII:)(v38, v39, v22, v37 < 0);
        }
        uint64_t v44 = *(void *)(v40 + 24);
        swift_bridgeObjectRelease(v13[1]);
        *uint64_t v13 = v44;
        v13[1] = v40;
        goto LABEL_29;
      }
LABEL_33:
      _StringGuts._foreignGrow(_:)(v22);
LABEL_29:
      Swift::Int v29 = v49;
    }
  }
  uint64_t v45 = v13[1] & 0xFFFFFFFFFFFFFFFLL;
  v29(v23, v11, a3, a4, a5, a6, v10);
  *uint64_t v13 = *(void *)(v45 + 24);
  return v23;
}

uint64_t specialized _StringGuts.uniqueNativeReplaceSubrange<A>(_:with:)(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  int64_t v5 = v4;
  uint64_t v8 = a1 >> 16;
  uint64_t v9 = a2 >> 16;
  unint64_t v10 = v4[1];
  if ((v10 & 0x2000000000000000) != 0) {
    uint64_t v11 = HIBYTE(v10) & 0xF;
  }
  else {
    uint64_t v11 = *v4 & 0xFFFFFFFFFFFFLL;
  }
  uint64_t v12 = v11 - v9 + v8;
  if (v12 >= 16)
  {
    uint64_t v13 = _StringGuts.uniqueNativeCapacity.getter();
    if ((v14 & 1) != 0 || v13 < v12)
    {
      uint64_t v15 = _StringGuts.uniqueNativeCapacity.getter();
      if (v16)
      {
        unint64_t v18 = v4[1];
        if ((v18 & 0x1000000000000000) != 0)
        {
          Swift::Int v17 = String.UTF8View._foreignCount()();
        }
        else if ((v18 & 0x2000000000000000) != 0)
        {
          Swift::Int v17 = HIBYTE(v18) & 0xF;
        }
        else
        {
          Swift::Int v17 = *v4 & 0xFFFFFFFFFFFFLL;
        }
      }
      else
      {
        Swift::Int v17 = 2 * v15;
      }
      if (v17 <= v12) {
        int64_t v19 = v12;
      }
      else {
        int64_t v19 = v17;
      }
      unint64_t v20 = v4[1];
      if ((v20 & 0x1000000000000000) != 0)
      {
        _StringGuts._foreignGrow(_:)(v19);
      }
      else
      {
        uint64_t v21 = *v4;
        if ((v20 & 0x2000000000000000) != 0)
        {
          size_t v25 = HIBYTE(v20) & 0xF;
          v33[0] = *v5;
          v33[1] = v20 & 0xFFFFFFFFFFFFFFLL;
          unint64_t v26 = v25 | 0xC000000000000000;
          if ((v20 & 0x4000000000000000) == 0) {
            unint64_t v26 = HIBYTE(v20) & 0xF;
          }
          uint64_t v27 = v26 | 0x3000000000000000;
          int64_t v24 = _allocateStringStorage(codeUnitCapacity:)(v19);
          *(void *)(v24 + 16) = v28;
          *(void *)(v24 + 24) = v27;
          if (v28 < 0)
          {
            *(void *)__StringStorage._breadcrumbsAddress.getter() = 0;
            uint64_t v27 = *(void *)(v24 + 24);
          }
          *(unsigned char *)(v24 + 32 + (v27 & 0xFFFFFFFFFFFFLL)) = 0;
          specialized UnsafeMutablePointer.initialize(from:count:)((char *)v33, v25, (char *)(v24 + 32));
        }
        else
        {
          if ((v21 & 0x1000000000000000) != 0)
          {
            int64_t v22 = (char *)((v20 & 0xFFFFFFFFFFFFFFFLL) + 32);
            size_t v23 = v21 & 0xFFFFFFFFFFFFLL;
          }
          else
          {
            int64_t v32 = v19;
            int64_t v22 = (char *)_StringObject.sharedUTF8.getter(*v5, v20);
            int64_t v19 = v32;
          }
          int64_t v24 = specialized static __StringStorage.create(initializingFrom:codeUnitCapacity:isASCII:)(v22, v23, v19, v21 < 0);
        }
        uint64_t v29 = *(void *)(v24 + 24);
        swift_bridgeObjectRelease(v5[1]);
        *int64_t v5 = v29;
        v5[1] = v24;
      }
    }
  }
  uint64_t v30 = v5[1] & 0xFFFFFFFFFFFFFFFLL;
  specialized __StringStorage.replace<A>(from:to:with:replacementCount:)(v8, v9, a3, a4, 0);
  *int64_t v5 = *(void *)(v30 + 24);
  return v8;
}

uint64_t specialized _StringGuts.uniqueNativeReplaceSubrange<A>(_:with:)(unint64_t a1, unint64_t a2, int a3, void (*a4)(uint64_t *__return_ptr, int *), atomic_ullong *a5)
{
  uint64_t v7 = v5;
  int v41 = a3;
  a4(__src, &v41);
  unint64_t v13 = specialized FlattenSequence<>.distance(from:to:)(0, 0, 0, 1, 0, 1, a3, a4, a5);
  uint64_t v15 = a1 >> 16;
  unint64_t v16 = v15 + v13;
  if (__OFADD__(v15, v13))
  {
    __break(1u);
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  a2 >>= 16;
  unint64_t v17 = v5[1];
  if ((v17 & 0x2000000000000000) != 0) {
    uint64_t v18 = HIBYTE(v17) & 0xF;
  }
  else {
    uint64_t v18 = *v5 & 0xFFFFFFFFFFFFLL;
  }
  unint64_t v19 = v18 - a2;
  uint64_t v20 = v16 + v19;
  if (__OFADD__(v16, v19)) {
    goto LABEL_31;
  }
  uint64_t v6 = v13;
  if (v20 < 16) {
    goto LABEL_29;
  }
  uint64_t v21 = _StringGuts.uniqueNativeCapacity.getter();
  if ((v22 & 1) == 0 && v21 >= v20) {
    goto LABEL_29;
  }
  uint64_t v23 = _StringGuts.uniqueNativeCapacity.getter();
  if (v24)
  {
    unint64_t v26 = v5[1];
    if ((v26 & 0x1000000000000000) != 0)
    {
      Swift::Int v25 = String.UTF8View._foreignCount()();
    }
    else if ((v26 & 0x2000000000000000) != 0)
    {
      Swift::Int v25 = HIBYTE(v26) & 0xF;
    }
    else
    {
      Swift::Int v25 = *v5 & 0xFFFFFFFFFFFFLL;
    }
  }
  else
  {
    Swift::Int v25 = 2 * v23;
  }
  if (v25 <= v20) {
    int64_t v14 = v20;
  }
  else {
    int64_t v14 = v25;
  }
  unint64_t v27 = v5[1];
  if ((v27 & 0x1000000000000000) != 0)
  {
LABEL_32:
    _StringGuts._foreignGrow(_:)(v14);
    goto LABEL_29;
  }
  uint64_t v28 = *v5;
  if ((v27 & 0x2000000000000000) != 0)
  {
    __src[0] = *v7;
    __src[1] = v27 & 0xFFFFFFFFFFFFFFLL;
    unint64_t v32 = HIBYTE(v27) & 0xF | 0xC000000000000000;
    uint64_t __n = HIBYTE(v27) & 0xF;
    if ((v27 & 0x4000000000000000) == 0) {
      unint64_t v32 = HIBYTE(v27) & 0xF;
    }
    uint64_t v33 = v32 | 0x3000000000000000;
    int64_t v31 = _allocateStringStorage(codeUnitCapacity:)(v14);
    *(void *)(v31 + 16) = v34;
    *(void *)(v31 + 24) = v33;
    if (v34 < 0)
    {
      *(void *)__StringStorage._breadcrumbsAddress.getter() = 0;
      uint64_t v33 = *(void *)(v31 + 24);
    }
    *(unsigned char *)(v31 + 32 + (v33 & 0xFFFFFFFFFFFFLL)) = 0;
    specialized UnsafeMutablePointer.initialize(from:count:)((char *)__src, __n, (char *)(v31 + 32));
  }
  else
  {
    if ((v28 & 0x1000000000000000) != 0)
    {
      uint64_t v29 = (char *)((v27 & 0xFFFFFFFFFFFFFFFLL) + 32);
      size_t v30 = v28 & 0xFFFFFFFFFFFFLL;
    }
    else
    {
      int64_t v38 = v14;
      uint64_t v29 = (char *)_StringObject.sharedUTF8.getter(*v7, v27);
      int64_t v14 = v38;
    }
    int64_t v31 = specialized static __StringStorage.create(initializingFrom:codeUnitCapacity:isASCII:)(v29, v30, v14, v28 < 0);
  }
  uint64_t v35 = *(void *)(v31 + 24);
  swift_bridgeObjectRelease(v7[1]);
  *uint64_t v7 = v35;
  v7[1] = v31;
LABEL_29:
  uint64_t v36 = v7[1] & 0xFFFFFFFFFFFFFFFLL;
  specialized __StringStorage.replace<A>(from:to:with:replacementCount:)(v15, a2, a3, (void (*)(uint64_t *__return_ptr, char *))a4, a5, v6);
  *uint64_t v7 = *(void *)(v36 + 24);
  return v15;
}

uint64_t _StringGuts.uniqueNativeReplaceSubrange<A>(_:with:)(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7 = v5;
  uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t))(a5 + 112))(a4, a5);
  uint64_t v14 = a1 >> 16;
  uint64_t v15 = v14 + v12;
  if (__OFADD__(v14, v12))
  {
    __break(1u);
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  a2 >>= 16;
  unint64_t v16 = v5[1];
  if ((v16 & 0x2000000000000000) != 0) {
    uint64_t v17 = HIBYTE(v16) & 0xF;
  }
  else {
    uint64_t v17 = *v5 & 0xFFFFFFFFFFFFLL;
  }
  unint64_t v18 = v17 - a2;
  uint64_t v19 = v15 + v18;
  if (__OFADD__(v15, v18)) {
    goto LABEL_31;
  }
  uint64_t v6 = v12;
  if (v19 < 16) {
    goto LABEL_29;
  }
  uint64_t v20 = _StringGuts.uniqueNativeCapacity.getter();
  if ((v21 & 1) == 0 && v20 >= v19) {
    goto LABEL_29;
  }
  uint64_t v22 = _StringGuts.uniqueNativeCapacity.getter();
  if (v23)
  {
    unint64_t v25 = v5[1];
    if ((v25 & 0x1000000000000000) != 0)
    {
      Swift::Int v24 = String.UTF8View._foreignCount()();
    }
    else if ((v25 & 0x2000000000000000) != 0)
    {
      Swift::Int v24 = HIBYTE(v25) & 0xF;
    }
    else
    {
      Swift::Int v24 = *v5 & 0xFFFFFFFFFFFFLL;
    }
  }
  else
  {
    Swift::Int v24 = 2 * v22;
  }
  if (v24 <= v19) {
    int64_t v13 = v19;
  }
  else {
    int64_t v13 = v24;
  }
  unint64_t v26 = v5[1];
  if ((v26 & 0x1000000000000000) != 0)
  {
LABEL_32:
    _StringGuts._foreignGrow(_:)(v13);
    goto LABEL_29;
  }
  uint64_t v27 = *v5;
  if ((v26 & 0x2000000000000000) != 0)
  {
    __src[0] = *v7;
    __src[1] = v26 & 0xFFFFFFFFFFFFFFLL;
    unint64_t v31 = HIBYTE(v26) & 0xF | 0xC000000000000000;
    uint64_t __n = HIBYTE(v26) & 0xF;
    if ((v26 & 0x4000000000000000) == 0) {
      unint64_t v31 = HIBYTE(v26) & 0xF;
    }
    uint64_t v32 = v31 | 0x3000000000000000;
    int64_t v30 = _allocateStringStorage(codeUnitCapacity:)(v13);
    *(void *)(v30 + 16) = v33;
    *(void *)(v30 + 24) = v32;
    if (v33 < 0)
    {
      *(void *)__StringStorage._breadcrumbsAddress.getter() = 0;
      uint64_t v32 = *(void *)(v30 + 24);
    }
    *(unsigned char *)(v30 + 32 + (v32 & 0xFFFFFFFFFFFFLL)) = 0;
    specialized UnsafeMutablePointer.initialize(from:count:)((char *)__src, __n, (char *)(v30 + 32));
  }
  else
  {
    if ((v27 & 0x1000000000000000) != 0)
    {
      uint64_t v28 = (char *)((v26 & 0xFFFFFFFFFFFFFFFLL) + 32);
      size_t v29 = v27 & 0xFFFFFFFFFFFFLL;
    }
    else
    {
      int64_t v37 = v13;
      uint64_t v28 = (char *)_StringObject.sharedUTF8.getter(*v7, v26);
      int64_t v13 = v37;
    }
    int64_t v30 = specialized static __StringStorage.create(initializingFrom:codeUnitCapacity:isASCII:)(v28, v29, v13, v27 < 0);
  }
  uint64_t v34 = *(void *)(v30 + 24);
  swift_bridgeObjectRelease(v7[1]);
  *uint64_t v7 = v34;
  v7[1] = v30;
LABEL_29:
  uint64_t v35 = v7[1] & 0xFFFFFFFFFFFFFFFLL;
  __StringStorage.replace<A>(from:to:with:replacementCount:)(v14, a2, a3, v6, a4);
  *uint64_t v7 = *(void *)(v35 + 24);
  return v14;
}

void specialized String.append<A>(contentsOf:)(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  int64_t v5 = (uint64_t *)v4;
  uint64_t v9 = a1 >> 16;
  uint64_t v10 = a2 >> 16;
  if ((a4 & 0x1000000000000000) == 0)
  {
    Swift::Int v11 = v10 - v9;
    unint64_t v13 = *v4;
    unint64_t v12 = v4[1];
    if ((v12 & 0x1000000000000000) == 0) {
      goto LABEL_3;
    }
LABEL_51:
    Swift::Int v66 = String.UTF8View._foreignCount()();
    int64_t v15 = v66 + v11;
    if (!__OFADD__(v66, v11)) {
      goto LABEL_7;
    }
LABEL_53:
    __break(1u);
    goto LABEL_54;
  }
  v58._Swift::UInt64 rawBits = a1 & 0xFFFFFFFFFFFF0000 | 1;
  v59._Swift::UInt64 rawBits = a2 & 0xFFFFFFFFFFFF0000 | 1;
  Swift::UInt64 v60 = _StringGuts.validateScalarRange(_:)(v58, v59, a3, a4);
  Swift::UInt64 v62 = v61;
  if (v60 >= 0x10000) {
    Swift::UInt64 v63 = v60;
  }
  else {
    Swift::UInt64 v63 = v60 | 3;
  }
  swift_bridgeObjectRetain(a4);
  v64._Swift::UInt64 rawBits = v63;
  v65._Swift::UInt64 rawBits = v62;
  Swift::Int v11 = specialized Collection.count.getter(v64, v65, a3, a4);
  swift_bridgeObjectRelease(a4);
  unint64_t v13 = *v5;
  unint64_t v12 = v5[1];
  if ((v12 & 0x1000000000000000) != 0) {
    goto LABEL_51;
  }
LABEL_3:
  if ((v12 & 0x2000000000000000) != 0) {
    uint64_t v14 = HIBYTE(v12) & 0xF;
  }
  else {
    uint64_t v14 = v13 & 0xFFFFFFFFFFFFLL;
  }
  int64_t v15 = v14 + v11;
  if (__OFADD__(v14, v11)) {
    goto LABEL_53;
  }
LABEL_7:
  if ((v13 & ~v12 & 0x2000000000000000) != 0)
  {
    BOOL isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v12 & 0xFFFFFFFFFFFFFFFLL);
    unint64_t v13 = *v5;
    unint64_t v12 = v5[1];
    if (isUniquelyReferenced_nonNull_native)
    {
      int64_t v17 = _StringGuts.nativeUnusedCapacity.getter(*v5, v5[1]);
      if (v18)
      {
        unint64_t v68 = 258;
        goto LABEL_61;
      }
      if (v15 > 15 || (v12 & 0x2000000000000000) == 0 && v17 >= v11) {
        goto LABEL_13;
      }
      goto LABEL_20;
    }
  }
  if (v15 <= 15)
  {
LABEL_20:
    unint64_t v28 = _StringGuts._convertedToSmall()(v13, v12);
    unint64_t v30 = HIBYTE(a4) & 0xF;
    if ((a4 & 0x2000000000000000) == 0) {
      unint64_t v30 = a3 & 0xFFFFFFFFFFFFLL;
    }
    if (v30 >= v10)
    {
      unint64_t v31 = v28;
      unint64_t v32 = v29;
      if ((a1 & 0xFFFFFFFFFFFF0000 | 1) >= 0x10000) {
        v34._Swift::UInt64 rawBits = a1 & 0xFFFFFFFFFFFF0000 | 1;
      }
      else {
        v34._Swift::UInt64 rawBits = a1 & 0xFFFFFFFFFFFF0000 | 3;
      }
      v33._Swift::UInt64 rawBits = a2 & 0xFFFFFFFFFFFF0000 | 1;
      unint64_t v35 = specialized String.init(_:)(v34, v33, a3, a4);
      uint64_t v37 = v36;
      unint64_t v38 = _StringGuts._convertedToSmall()(v35, v36);
      unint64_t v40 = v39;
      swift_bridgeObjectRelease(v37);
      uint64_t v41 = HIBYTE(v32) & 0xF;
      uint64_t v42 = HIBYTE(v40) & 0xF;
      uint64_t v43 = v42 + v41;
      if ((unint64_t)(v42 + v41) <= 0xF)
      {
        if (v42)
        {
          char v44 = 0;
          unint64_t v45 = 0;
          do
          {
            unint64_t v46 = v41 + v45;
            unint64_t v47 = v45 + 1;
            if (v45 >= 8) {
              unint64_t v48 = v40;
            }
            else {
              unint64_t v48 = v38;
            }
            unint64_t v49 = v48 >> (v44 & 0x38);
            char v50 = (8 * v41 + v44) & 0x38;
            uint64_t v51 = (-255 << v50) - 1;
            unint64_t v52 = (unint64_t)v49 << v50;
            unint64_t v53 = v52 | v51 & v32;
            unint64_t v54 = v52 | v51 & v31;
            if (v46 < 8) {
              unint64_t v31 = v54;
            }
            else {
              unint64_t v32 = v53;
            }
            v44 += 8;
            unint64_t v45 = v47;
          }
          while (v42 != v47);
        }
        swift_bridgeObjectRelease(v12);
        unint64_t v55 = 0xA000000000000000;
        if (!(v31 & 0x8080808080808080 | v32 & 0x80808080808080)) {
          unint64_t v55 = 0xE000000000000000;
        }
        *int64_t v5 = v31;
        v5[1] = v55 & 0xFF00000000000000 | (v43 << 56) | v32 & 0xFFFFFFFFFFFFFFLL;
        return;
      }
      unint64_t v68 = 266;
LABEL_61:
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/StringGutsRangeReplaceable.swift", 38, 2, v68, 0);
    }
LABEL_54:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index range is out of bounds", 35, 2, "Swift/StringIndexValidation.swift", 33, 2, 0xD2uLL, 0);
  }
LABEL_13:
  _StringGuts.prepareForAppendInPlace(totalCount:otherUTF8Count:)(v15, v11);
  if ((a4 & 0x1000000000000000) == 0)
  {
    if ((a4 & 0x2000000000000000) != 0)
    {
      v70[0] = a3;
      v70[1] = a4 & 0xFFFFFFFFFFFFFFLL;
      if ((HIBYTE(a4) & 0xF) >= (unint64_t)v10)
      {
        if (v10 - v9 >= 0)
        {
          uint64_t v24 = v5[1] & 0xFFFFFFFFFFFFFFFLL;
          specialized UnsafeMutablePointer.initialize(from:count:)((char *)v70 + v9, v10 - v9, (char *)(v24 + (*(void *)(v24 + 0x18) & 0xFFFFFFFFFFFFLL) + 32));
          uint64_t v56 = *(void *)(v24 + 24);
          Swift::Int v26 = (v56 & 0xFFFFFFFFFFFFLL) + v10 - v9;
          LOBYTE(v27) = (a4 >> 62) & (v56 < 0);
          goto LABEL_45;
        }
LABEL_58:
        _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeBufferPointer with negative count", 39, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x53FuLL, 0);
      }
    }
    else if ((a3 & 0x1000000000000000) != 0)
    {
      id v19 = (id)((a4 & 0xFFFFFFFFFFFFFFFLL) + 32);
      uint64_t v20 = a3 & 0xFFFFFFFFFFFFLL;
      if ((uint64_t)(a3 & 0xFFFFFFFFFFFFLL) >= v10)
      {
LABEL_17:
        char v21 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(v9, v10, (uint64_t)v19, v20);
        size_t v23 = v22;
        uint64_t v24 = v5[1] & 0xFFFFFFFFFFFFFFFLL;
        specialized UnsafeMutablePointer.initialize(from:count:)(v21, v22, (char *)(v24 + (*(void *)(v24 + 0x18) & 0xFFFFFFFFFFFFLL) + 32));
        uint64_t v25 = *(void *)(v24 + 24);
        Swift::Int v26 = (v25 & 0xFFFFFFFFFFFFLL) + v23;
        if (!__OFADD__(v25 & 0xFFFFFFFFFFFFLL, v23))
        {
          BOOL v27 = (v25 & a3) >> 63;
LABEL_45:
          __StringStorage._updateCountAndFlags(newCount:newIsASCII:)(v26, v27);
          *int64_t v5 = *(void *)(v24 + 24);
          return;
        }
        __break(1u);
        goto LABEL_58;
      }
    }
    else
    {
      id v19 = _StringObject.sharedUTF8.getter(a3, a4);
      uint64_t v20 = v67;
      if (v67 >= v10) {
        goto LABEL_17;
      }
    }
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x745uLL, 0);
  }

  _StringGuts._foreignAppendInPlace(_:)(a3, a4, v9, v10);
}

void specialized String.append<A>(contentsOf:)(uint64_t a1)
{
  uint64_t v91 = *(void *)(a1 + 16);
  if (v91)
  {
    uint64_t v2 = 0;
    uint64_t v90 = a1 + 32;
    do
    {
      unint64_t v3 = (unint64_t *)(v90 + 16 * v2);
      unint64_t v5 = *v3;
      unint64_t v4 = v3[1];
      unint64_t v7 = *v1;
      unint64_t v6 = v1[1];
      uint64_t v8 = HIBYTE(v6) & 0xF;
      if ((v6 & 0x2000000000000000) != 0) {
        uint64_t v9 = HIBYTE(v6) & 0xF;
      }
      else {
        uint64_t v9 = *v1 & 0xFFFFFFFFFFFFLL;
      }
      if (!v9 && (v7 & ~v6 & 0x2000000000000000) == 0)
      {
        swift_bridgeObjectRetain(v4);
        swift_bridgeObjectRelease(v6);
        uint64_t *v1 = v5;
        v1[1] = v4;
        goto LABEL_4;
      }
      uint64_t v10 = v4 & 0x2000000000000000;
      uint64_t v11 = HIBYTE(v4) & 0xF;
      if ((v6 & 0x2000000000000000) != 0 && v10)
      {
        uint64_t v12 = v8 + v11;
        if ((unint64_t)(v8 + v11) <= 0xF)
        {
          if (v11)
          {
            uint64_t v55 = 0;
            unint64_t v56 = 0;
            uint64_t v57 = v1[1];
            do
            {
              unint64_t v58 = v8 + v56;
              unint64_t v59 = v56 + 1;
              if (v56 >= 8) {
                unint64_t v60 = v4;
              }
              else {
                unint64_t v60 = v5;
              }
              unint64_t v61 = v60 >> (v55 & 0x38);
              char v62 = (8 * v8 + v55) & 0x38;
              uint64_t v63 = (-255 << v62) - 1;
              unint64_t v64 = (unint64_t)v61 << v62;
              unint64_t v65 = v64 | v63 & v57;
              unint64_t v66 = v64 | v63 & v7;
              if (v58 < 8) {
                unint64_t v7 = v66;
              }
              else {
                uint64_t v57 = v65;
              }
              v55 += 8;
              unint64_t v56 = v59;
            }
            while (v11 != v59);
          }
          else
          {
            uint64_t v57 = v1[1];
          }
          swift_bridgeObjectRelease(v1[1]);
          unint64_t v80 = 0xA000000000000000;
          if (!(v7 & 0x8080808080808080 | v57 & 0x80808080808080)) {
            unint64_t v80 = 0xE000000000000000;
          }
          unint64_t v54 = v80 & 0xFF00000000000000 | (v12 << 56) | v57 & 0xFFFFFFFFFFFFFFLL;
          uint64_t *v1 = v7;
LABEL_79:
          v1[1] = v54;
          goto LABEL_4;
        }
        uint64_t v10 = 1;
      }
      uint64_t v92 = v2;
      int64_t __n = v5 & 0xFFFFFFFFFFFFLL;
      if (v10) {
        uint64_t v13 = HIBYTE(v4) & 0xF;
      }
      else {
        uint64_t v13 = v5 & 0xFFFFFFFFFFFFLL;
      }
      if ((v4 & 0x1000000000000000) != 0)
      {
        swift_bridgeObjectRetain_n(v4, 3);
        v81._Swift::UInt64 rawBits = 1;
        v82._Swift::UInt64 rawBits = (v13 << 16) | 1;
        v83._Swift::UInt64 rawBits = _StringGuts.validateScalarRange(_:)(v81, v82, v5, v4);
        if (v83._rawBits < 0x10000) {
          v83._rawBits |= 3;
        }
        Swift::Int v14 = specialized Collection.count.getter(v83, v84, v5, v4);
        swift_bridgeObjectRelease(v4);
        if ((v6 & 0x1000000000000000) == 0)
        {
LABEL_19:
          BOOL v15 = __OFADD__(v9, v14);
          int64_t v16 = v9 + v14;
          if (v15) {
            goto LABEL_92;
          }
          goto LABEL_20;
        }
      }
      else
      {
        swift_bridgeObjectRetain_n(v4, 2);
        Swift::Int v14 = v13;
        if ((v6 & 0x1000000000000000) == 0) {
          goto LABEL_19;
        }
      }
      Swift::Int v85 = String.UTF8View._foreignCount()();
      int64_t v16 = v85 + v14;
      if (__OFADD__(v85, v14))
      {
LABEL_92:
        __break(1u);
LABEL_93:
        _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 0x444uLL, 0);
      }
LABEL_20:
      if ((v7 & ~v6 & 0x2000000000000000) != 0
        && (BOOL isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v6 & 0xFFFFFFFFFFFFFFFLL),
            unint64_t v7 = *v1,
            unint64_t v6 = v1[1],
            isUniquelyReferenced_nonNull_native))
      {
        int64_t v18 = _StringGuts.nativeUnusedCapacity.getter(*v1, v1[1]);
        if (v19)
        {
          unint64_t v88 = 258;
LABEL_97:
          _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/StringGutsRangeReplaceable.swift", 38, 2, v88, 0);
        }
        if (v16 <= 15 && ((v6 & 0x2000000000000000) != 0 || v18 < v14))
        {
LABEL_38:
          unint64_t v28 = _StringGuts._convertedToSmall()(v7, v6);
          unint64_t v30 = v29;
          v31._Swift::UInt64 rawBits = (v13 << 16) | 1;
          v32._Swift::UInt64 rawBits = 3;
          unint64_t v33 = specialized String.init(_:)(v32, v31, v5, v4);
          unint64_t v35 = v34;
          swift_bridgeObjectRelease(v4);
          unint64_t v36 = _StringGuts._convertedToSmall()(v33, v35);
          unint64_t v38 = v37;
          swift_bridgeObjectRelease(v35);
          uint64_t v39 = HIBYTE(v30) & 0xF;
          uint64_t v40 = HIBYTE(v38) & 0xF;
          uint64_t v41 = v40 + v39;
          if ((unint64_t)(v40 + v39) > 0xF)
          {
            unint64_t v88 = 266;
            goto LABEL_97;
          }
          uint64_t v2 = v92;
          if (v40)
          {
            char v42 = 0;
            unint64_t v43 = 0;
            do
            {
              unint64_t v44 = v39 + v43;
              unint64_t v45 = v43 + 1;
              if (v43 >= 8) {
                unint64_t v46 = v38;
              }
              else {
                unint64_t v46 = v36;
              }
              unint64_t v47 = v46 >> (v42 & 0x38);
              char v48 = (8 * v39 + v42) & 0x38;
              uint64_t v49 = (-255 << v48) - 1;
              unint64_t v50 = (unint64_t)v47 << v48;
              unint64_t v51 = v50 | v49 & v30;
              unint64_t v52 = v50 | v49 & v28;
              if (v44 < 8) {
                unint64_t v28 = v52;
              }
              else {
                unint64_t v30 = v51;
              }
              v42 += 8;
              unint64_t v43 = v45;
            }
            while (v40 != v45);
          }
          swift_bridgeObjectRelease(v6);
          swift_bridgeObjectRelease(v4);
          unint64_t v53 = 0xA000000000000000;
          if (!(v28 & 0x8080808080808080 | v30 & 0x80808080808080)) {
            unint64_t v53 = 0xE000000000000000;
          }
          unint64_t v54 = v53 & 0xFF00000000000000 | (v41 << 56) | v30 & 0xFFFFFFFFFFFFFFLL;
          uint64_t *v1 = v28;
          goto LABEL_79;
        }
      }
      else if (v16 <= 15)
      {
        goto LABEL_38;
      }
      _StringGuts.prepareForAppendInPlace(totalCount:otherUTF8Count:)(v16, v14);
      if ((v4 & 0x1000000000000000) != 0)
      {
        _StringGuts._foreignAppendInPlace(_:)(v5, v4, 0, v13);
        swift_bridgeObjectRelease_n(v4, 2);
        uint64_t v2 = v92;
        goto LABEL_4;
      }
      swift_bridgeObjectRelease(v4);
      uint64_t v2 = v92;
      if (v10)
      {
        __src[0] = v5;
        __src[1] = v4 & 0xFFFFFFFFFFFFFFLL;
        uint64_t v20 = v1[1] & 0xFFFFFFFFFFFFFFFLL;
        uint64_t v21 = v20 + 32;
        size_t v22 = (char *)(v20 + 32 + (*(void *)(v20 + 0x18) & 0xFFFFFFFFFFFFLL));
        if (__src < (void *)&v22[v11] && v22 < (char *)__src + v11) {
          goto LABEL_93;
        }
        memcpy(v22, __src, HIBYTE(v4) & 0xF);
        uint64_t v23 = *(void *)(v20 + 24);
        unint64_t v24 = (v23 & 0xFFFFFFFFFFFFLL) + v11;
        BOOL v25 = v23 > -1 || (v4 & 0x4000000000000000) == 0;
        unint64_t v26 = v24 | 0xC000000000000000;
        if (v25) {
          unint64_t v26 = v24;
        }
        *(void *)(v20 + 24) = v26 | 0x3000000000000000;
        *(unsigned char *)(v21 + (v26 & 0xFFFFFFFFFFFFLL)) = 0;
        uint64_t v27 = *(void *)(v20 + 16);
        if (v27 < 0)
        {
          uint64_t v78 = (uint64_t *)((v21 + (v27 & 0xFFFFFFFFFFFFLL) + 7) & 0x7FFFFFFFFFFFFFF8);
          uint64_t v79 = *v78;
          *uint64_t v78 = 0;
          swift_bridgeObjectRelease(v4);
          swift_release(v79);
        }
        else
        {
          swift_bridgeObjectRelease(v4);
        }
        uint64_t *v1 = *(void *)(v20 + 24);
        goto LABEL_4;
      }
      if ((v5 & 0x1000000000000000) != 0)
      {
        uint64_t v67 = (char *)((v4 & 0xFFFFFFFFFFFFFFFLL) + 32);
      }
      else
      {
        unint64_t v86 = (char *)_StringObject.sharedUTF8.getter(v5, v4);
        if (v87 < __n) {
          _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x745uLL, 0);
        }
        uint64_t v67 = v86;
        if (__n)
        {
          uint64_t v2 = v92;
          size_t v68 = v5 & 0xFFFFFFFFFFFFLL;
          if (!v86) {
            _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeBufferPointer has a nil start and nonzero count", 53, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x541uLL, 0);
          }
          goto LABEL_65;
        }
        uint64_t v2 = v92;
      }
      size_t v68 = v5 & 0xFFFFFFFFFFFFLL;
LABEL_65:
      uint64_t v69 = v1[1] & 0xFFFFFFFFFFFFFFFLL;
      uint64_t v70 = v69 + 32;
      uint64_t v71 = (char *)(v69 + 32 + (*(void *)(v69 + 0x18) & 0xFFFFFFFFFFFFLL));
      if (&v71[v68] > v67 && v71 < &v67[v68]) {
        goto LABEL_93;
      }
      memcpy(v71, v67, v68);
      uint64_t v72 = *(void *)(v69 + 24);
      size_t v73 = (v72 & 0xFFFFFFFFFFFFLL) + v68;
      if (((v72 & v5 & 0x8000000000000000) != 0) != v15) {
        v73 |= 0xC000000000000000;
      }
      uint64_t v74 = v73 | 0x3000000000000000;
      *(void *)(v69 + 24) = v73 | 0x3000000000000000;
      *(unsigned char *)(v70 + (v73 & 0xFFFFFFFFFFFFLL)) = 0;
      uint64_t v75 = *(void *)(v69 + 16);
      if (v75 < 0)
      {
        uint64_t v76 = (uint64_t *)((v70 + (v75 & 0xFFFFFFFFFFFFLL) + 7) & 0x7FFFFFFFFFFFFFF8);
        uint64_t v77 = *v76;
        *uint64_t v76 = 0;
        swift_release(v77);
        uint64_t v74 = *(void *)(v69 + 24);
      }
      uint64_t *v1 = v74;
      swift_bridgeObjectRelease(v4);
LABEL_4:
      ++v2;
    }
    while (v2 != v91);
  }
}

void specialized String.append<A>(contentsOf:)(unint64_t a1, unint64_t a2)
{
  if (&full type metadata for CollectionOfOne<Character> == &full type metadata for String)
  {
    specialized String.append<A>(contentsOf:)(a1, a2);
    return;
  }
  if (&full type metadata for CollectionOfOne<Character> == &full type metadata for Substring)
  {
    __break(1u);
LABEL_96:
    unint64_t v86 = 266;
    goto LABEL_98;
  }
  if (&full type metadata for CollectionOfOne<Character> == &full type metadata for [Character])
  {
    specialized String.append<A>(contentsOf:)(a1);
    return;
  }
  unint64_t v6 = *v2;
  unint64_t v5 = v2[1];
  uint64_t v7 = HIBYTE(v5) & 0xF;
  if ((v5 & 0x2000000000000000) != 0) {
    uint64_t v8 = HIBYTE(v5) & 0xF;
  }
  else {
    uint64_t v8 = *v2 & 0xFFFFFFFFFFFFLL;
  }
  if (!v8 && (v6 & ~v5 & 0x2000000000000000) == 0)
  {
    swift_bridgeObjectRetain(a2);
    swift_bridgeObjectRelease(v5);
    uint64_t *v2 = a1;
    v2[1] = a2;
    return;
  }
  uint64_t v9 = a2 & 0x2000000000000000;
  uint64_t v10 = HIBYTE(a2) & 0xF;
  if ((v5 & 0x2000000000000000) != 0 && v9)
  {
    uint64_t v11 = v7 + v10;
    if ((unint64_t)(v7 + v10) <= 0xF)
    {
      if (v10)
      {
        uint64_t v53 = 0;
        unint64_t v54 = 0;
        uint64_t v55 = v2[1];
        do
        {
          unint64_t v56 = v7 + v54;
          unint64_t v57 = v54 + 1;
          if (v54 >= 8) {
            unint64_t v58 = a2;
          }
          else {
            unint64_t v58 = a1;
          }
          unint64_t v59 = v58 >> (v53 & 0x38);
          char v60 = (8 * v7 + v53) & 0x38;
          uint64_t v61 = (-255 << v60) - 1;
          unint64_t v62 = (unint64_t)v59 << v60;
          unint64_t v63 = v62 | v61 & v55;
          unint64_t v64 = v62 | v61 & v6;
          if (v56 < 8) {
            unint64_t v6 = v64;
          }
          else {
            uint64_t v55 = v63;
          }
          v53 += 8;
          unint64_t v54 = v57;
        }
        while (v10 != v57);
      }
      else
      {
        uint64_t v55 = v2[1];
      }
      swift_bridgeObjectRelease(v2[1]);
      unint64_t v78 = 0xA000000000000000;
      if (!(v6 & 0x8080808080808080 | v55 & 0x80808080808080)) {
        unint64_t v78 = 0xE000000000000000;
      }
      uint64_t *v2 = v6;
      v2[1] = v78 & 0xFF00000000000000 | (v11 << 56) | v55 & 0xFFFFFFFFFFFFFFLL;
      return;
    }
    uint64_t v9 = 1;
  }
  int64_t __n = a1 & 0xFFFFFFFFFFFFLL;
  if (v9) {
    uint64_t v12 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v12 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if ((a2 & 0x1000000000000000) == 0)
  {
    swift_bridgeObjectRetain_n(a2, 2);
    Swift::Int v13 = v12;
    if ((v5 & 0x1000000000000000) == 0) {
      goto LABEL_23;
    }
LABEL_89:
    Swift::Int v83 = String.UTF8View._foreignCount()();
    int64_t v15 = v83 + v13;
    if (!__OFADD__(v83, v13)) {
      goto LABEL_24;
    }
LABEL_91:
    __break(1u);
    goto LABEL_92;
  }
  swift_bridgeObjectRetain_n(a2, 2);
  v79._Swift::UInt64 rawBits = 1;
  v80._Swift::UInt64 rawBits = (v12 << 16) | 1;
  v81._Swift::UInt64 rawBits = _StringGuts.validateScalarRange(_:)(v79, v80, a1, a2);
  if (v81._rawBits < 0x10000) {
    v81._rawBits |= 3;
  }
  Swift::Int v13 = specialized Collection.count.getter(v81, v82, a1, a2);
  if ((v5 & 0x1000000000000000) != 0) {
    goto LABEL_89;
  }
LABEL_23:
  BOOL v14 = __OFADD__(v8, v13);
  int64_t v15 = v8 + v13;
  if (v14) {
    goto LABEL_91;
  }
LABEL_24:
  if ((v6 & ~v5 & 0x2000000000000000) == 0
    || (BOOL isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v5 & 0xFFFFFFFFFFFFFFFLL),
        unint64_t v6 = *v2,
        unint64_t v5 = v2[1],
        !isUniquelyReferenced_nonNull_native))
  {
    if (v15 >= 16) {
      goto LABEL_30;
    }
LABEL_42:
    unint64_t v27 = _StringGuts._convertedToSmall()(v6, v5);
    unint64_t v29 = v28;
    v30._Swift::UInt64 rawBits = (v12 << 16) | 1;
    v31._Swift::UInt64 rawBits = 3;
    unint64_t v32 = specialized String.init(_:)(v31, v30, a1, a2);
    unint64_t v34 = v33;
    swift_bridgeObjectRelease(a2);
    unint64_t v35 = _StringGuts._convertedToSmall()(v32, v34);
    unint64_t v37 = v36;
    swift_bridgeObjectRelease(v34);
    uint64_t v38 = HIBYTE(v29) & 0xF;
    uint64_t v39 = HIBYTE(v37) & 0xF;
    uint64_t v40 = v39 + v38;
    if ((unint64_t)(v39 + v38) <= 0xF)
    {
      if (v39)
      {
        char v41 = 0;
        unint64_t v42 = 0;
        do
        {
          unint64_t v43 = v38 + v42;
          unint64_t v44 = v42 + 1;
          if (v42 >= 8) {
            unint64_t v45 = v37;
          }
          else {
            unint64_t v45 = v35;
          }
          unint64_t v46 = v45 >> (v41 & 0x38);
          char v47 = (8 * v38 + v41) & 0x38;
          uint64_t v48 = (-255 << v47) - 1;
          unint64_t v49 = (unint64_t)v46 << v47;
          unint64_t v50 = v49 | v48 & v29;
          unint64_t v51 = v49 | v48 & v27;
          if (v43 < 8) {
            unint64_t v27 = v51;
          }
          else {
            unint64_t v29 = v50;
          }
          v41 += 8;
          unint64_t v42 = v44;
        }
        while (v39 != v44);
      }
      swift_bridgeObjectRelease(v5);
      swift_bridgeObjectRelease(a2);
      unint64_t v52 = 0xA000000000000000;
      if (!(v27 & 0x8080808080808080 | v29 & 0x80808080808080)) {
        unint64_t v52 = 0xE000000000000000;
      }
      uint64_t *v2 = v27;
      v2[1] = v52 & 0xFF00000000000000 | (v40 << 56) | v29 & 0xFFFFFFFFFFFFFFLL;
      return;
    }
    goto LABEL_96;
  }
  int64_t v17 = _StringGuts.nativeUnusedCapacity.getter(*v2, v2[1]);
  if (v18)
  {
    unint64_t v86 = 258;
LABEL_98:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/StringGutsRangeReplaceable.swift", 38, 2, v86, 0);
  }
  if (v15 <= 15 && ((v5 & 0x2000000000000000) != 0 || v17 < v13)) {
    goto LABEL_42;
  }
LABEL_30:
  _StringGuts.prepareForAppendInPlace(totalCount:otherUTF8Count:)(v15, v13);
  if ((a2 & 0x1000000000000000) != 0)
  {
    _StringGuts._foreignAppendInPlace(_:)(a1, a2, 0, v12);
    swift_bridgeObjectRelease_n(a2, 2);
    return;
  }
  swift_bridgeObjectRelease(a2);
  if (v9)
  {
    __src[0] = a1;
    __src[1] = a2 & 0xFFFFFFFFFFFFFFLL;
    uint64_t v19 = v2[1] & 0xFFFFFFFFFFFFFFFLL;
    uint64_t v20 = v19 + 32;
    uint64_t v21 = (char *)(v19 + 32 + (*(void *)(v19 + 0x18) & 0xFFFFFFFFFFFFLL));
    if (__src >= (void *)&v21[v10] || v21 >= (char *)__src + v10)
    {
      memcpy(v21, __src, HIBYTE(a2) & 0xF);
      uint64_t v22 = *(void *)(v19 + 24);
      unint64_t v23 = (v22 & 0xFFFFFFFFFFFFLL) + v10;
      BOOL v24 = v22 > -1 || (a2 & 0x4000000000000000) == 0;
      unint64_t v25 = v23 | 0xC000000000000000;
      if (v24) {
        unint64_t v25 = v23;
      }
      *(void *)(v19 + 24) = v25 | 0x3000000000000000;
      *(unsigned char *)(v20 + (v25 & 0xFFFFFFFFFFFFLL)) = 0;
      uint64_t v26 = *(void *)(v19 + 16);
      if (v26 < 0)
      {
        uint64_t v76 = (uint64_t *)((v20 + (v26 & 0xFFFFFFFFFFFFLL) + 7) & 0x7FFFFFFFFFFFFFF8);
        uint64_t v77 = *v76;
        *uint64_t v76 = 0;
        swift_bridgeObjectRelease(a2);
        swift_release(v77);
      }
      else
      {
        swift_bridgeObjectRelease(a2);
      }
      uint64_t *v2 = *(void *)(v19 + 24);
      return;
    }
LABEL_92:
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 0x444uLL, 0);
  }
  if ((a1 & 0x1000000000000000) != 0)
  {
    unint64_t v65 = (char *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
  }
  else
  {
    Swift::String::Index v84 = (char *)_StringObject.sharedUTF8.getter(a1, a2);
    if (v85 < __n) {
      _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x745uLL, 0);
    }
    unint64_t v65 = v84;
    if (__n)
    {
      size_t v66 = a1 & 0xFFFFFFFFFFFFLL;
      if (!v84) {
        _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeBufferPointer has a nil start and nonzero count", 53, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x541uLL, 0);
      }
      goto LABEL_70;
    }
  }
  size_t v66 = a1 & 0xFFFFFFFFFFFFLL;
LABEL_70:
  uint64_t v67 = v2[1] & 0xFFFFFFFFFFFFFFFLL;
  uint64_t v68 = v67 + 32;
  uint64_t v69 = (char *)(v67 + 32 + (*(void *)(v67 + 0x18) & 0xFFFFFFFFFFFFLL));
  if (&v69[v66] > v65 && v69 < &v65[v66]) {
    goto LABEL_92;
  }
  memcpy(v69, v65, v66);
  uint64_t v70 = *(void *)(v67 + 24);
  size_t v71 = (v70 & 0xFFFFFFFFFFFFLL) + v66;
  if (((v70 & a1 & 0x8000000000000000) != 0) != v14) {
    v71 |= 0xC000000000000000;
  }
  uint64_t v72 = v71 | 0x3000000000000000;
  *(void *)(v67 + 24) = v71 | 0x3000000000000000;
  *(unsigned char *)(v68 + (v71 & 0xFFFFFFFFFFFFLL)) = 0;
  uint64_t v73 = *(void *)(v67 + 16);
  if (v73 < 0)
  {
    uint64_t v74 = (uint64_t *)((v68 + (v73 & 0xFFFFFFFFFFFFLL) + 7) & 0x7FFFFFFFFFFFFFF8);
    uint64_t v75 = *v74;
    uint64_t *v74 = 0;
    swift_release(v75);
    uint64_t v72 = *(void *)(v67 + 24);
  }
  uint64_t *v2 = v72;

  swift_bridgeObjectRelease(a2);
}

{
  unint64_t *v2;
  unint64_t v5;
  uint64_t v6;
  uint64_t vars8;

  unint64_t v5 = v2[1];
  unint64_t v6 = HIBYTE(v5) & 0xF;
  if ((v5 & 0x2000000000000000) == 0) {
    unint64_t v6 = *v2 & 0xFFFFFFFFFFFFLL;
  }
  if (v6 || (*v2 & ~v5 & 0x2000000000000000) != 0)
  {
    _StringGuts.append(_:)(a1, a2);
  }
  else
  {
    swift_bridgeObjectRetain(a2);
    swift_bridgeObjectRelease(v5);
    uint64_t *v2 = a1;
    v2[1] = a2;
  }
}

void specialized String.append<A>(contentsOf:)(uint64_t a1, unint64_t a2, unint64_t a3)
{
  if (&full type metadata for Repeated<Character> == &full type metadata for String)
  {
    specialized String.append<A>(contentsOf:)(a1, a2);
    return;
  }
  if (&full type metadata for Repeated<Character> == &full type metadata for Substring)
  {
    __break(1u);
LABEL_105:
    unint64_t v89 = 266;
LABEL_107:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/StringGutsRangeReplaceable.swift", 38, 2, v89, 0);
  }
  if (&full type metadata for Repeated<Character> != &full type metadata for [Character])
  {
    swift_bridgeObjectRetain(a3);
    if (!a1)
    {
LABEL_100:
      swift_bridgeObjectRelease(a3);
      return;
    }
    uint64_t v7 = 0;
    uint64_t v8 = HIBYTE(a3) & 0xF;
    size_t v9 = a2 & 0xFFFFFFFFFFFFLL;
    if ((a3 & 0x2000000000000000) != 0) {
      uint64_t v10 = HIBYTE(a3) & 0xF;
    }
    else {
      uint64_t v10 = a2 & 0xFFFFFFFFFFFFLL;
    }
    uint64_t v91 = (char *)v97 + v8;
    uint64_t v95 = v10;
    Swift::UInt64 v92 = (v10 << 16) | 1;
    uint64_t v11 = a1 & ~(a1 >> 63);
    while (1)
    {
      if (v7 == v11) {
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Index out of range", 18, 2, "Swift/Repeat.swift", 18, 2, 0x51uLL, 0);
      }
      int64_t __n = v9;
      unint64_t v13 = *v3;
      unint64_t v12 = v3[1];
      uint64_t v14 = HIBYTE(v12) & 0xF;
      uint64_t v15 = (v12 & 0x2000000000000000) != 0 ? HIBYTE(v12) & 0xF : *v3 & 0xFFFFFFFFFFFFLL;
      if (v15 || (v13 & ~v12 & 0x2000000000000000) != 0) {
        break;
      }
      uint64_t v71 = v11;
      swift_bridgeObjectRetain(a3);
      swift_bridgeObjectRelease(v12);
      uint64_t v11 = v71;
      *unint64_t v3 = a2;
      v3[1] = a3;
      size_t v9 = __n;
LABEL_84:
      if (++v7 == a1) {
        goto LABEL_100;
      }
    }
    uint64_t v94 = v11;
    if ((v12 & 0x2000000000000000) != 0 && (a3 & 0x2000000000000000) != 0)
    {
      uint64_t v16 = v14 + v8;
      if ((unint64_t)(v14 + v8) <= 0xF)
      {
        if (v8)
        {
          uint64_t v59 = 0;
          unint64_t v60 = 0;
          uint64_t v61 = v3[1];
          do
          {
            unint64_t v62 = v14 + v60;
            unint64_t v63 = v60 + 1;
            if (v60 >= 8) {
              unint64_t v64 = a3;
            }
            else {
              unint64_t v64 = a2;
            }
            unint64_t v65 = v64 >> (v59 & 0x38);
            char v66 = (8 * v14 + v59) & 0x38;
            uint64_t v67 = (-255 << v66) - 1;
            unint64_t v68 = (unint64_t)v65 << v66;
            unint64_t v69 = v68 | v67 & v61;
            unint64_t v70 = v68 | v67 & v13;
            if (v62 < 8) {
              unint64_t v13 = v70;
            }
            else {
              uint64_t v61 = v69;
            }
            v59 += 8;
            unint64_t v60 = v63;
          }
          while (v8 != v63);
        }
        else
        {
          uint64_t v61 = v3[1];
        }
        swift_bridgeObjectRelease(v12);
        unint64_t v79 = 0xA000000000000000;
        if (!(v13 & 0x8080808080808080 | v61 & 0x80808080808080)) {
          unint64_t v79 = 0xE000000000000000;
        }
        *unint64_t v3 = v13;
        v3[1] = v79 & 0xFF00000000000000 | (v16 << 56) | v61 & 0xFFFFFFFFFFFFFFLL;
        goto LABEL_82;
      }
    }
    size_t v93 = v8;
    swift_bridgeObjectRetain_n(a3, 2);
    Swift::Int v17 = v95;
    if ((a3 & 0x1000000000000000) != 0)
    {
      v82._Swift::UInt64 rawBits = 1;
      v83._Swift::UInt64 rawBits = v92;
      v84._Swift::UInt64 rawBits = _StringGuts.validateScalarRange(_:)(v82, v83, a2, a3);
      if (v84._rawBits < 0x10000) {
        v84._rawBits |= 3;
      }
      Swift::Int v17 = specialized Collection.count.getter(v84, v85, a2, a3);
      if ((v12 & 0x1000000000000000) == 0)
      {
LABEL_25:
        BOOL v18 = __OFADD__(v15, v17);
        int64_t v19 = v15 + v17;
        if (v18) {
          goto LABEL_101;
        }
LABEL_26:
        if ((v13 & ~v12 & 0x2000000000000000) != 0
          && (BOOL isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v12 & 0xFFFFFFFFFFFFFFFLL),
              unint64_t v13 = *v3,
              unint64_t v12 = v3[1],
              isUniquelyReferenced_nonNull_native))
        {
          int64_t v21 = _StringGuts.nativeUnusedCapacity.getter(*v3, v3[1]);
          if (v22)
          {
            unint64_t v89 = 258;
            goto LABEL_107;
          }
          if (v19 > 15 || (v12 & 0x2000000000000000) == 0 && v21 >= v17) {
            goto LABEL_32;
          }
        }
        else if (v19 >= 16)
        {
LABEL_32:
          _StringGuts.prepareForAppendInPlace(totalCount:otherUTF8Count:)(v19, v17);
          if ((a3 & 0x1000000000000000) != 0)
          {
            _StringGuts._foreignAppendInPlace(_:)(a2, a3, 0, v95);
            swift_bridgeObjectRelease_n(a3, 2);
            uint64_t v8 = v93;
            size_t v9 = __n;
          }
          else
          {
            swift_bridgeObjectRelease(a3);
            size_t v9 = __n;
            if ((a3 & 0x2000000000000000) != 0)
            {
              v97[0] = a2;
              v97[1] = a3 & 0xFFFFFFFFFFFFFFLL;
              uint64_t v72 = v3[1] & 0xFFFFFFFFFFFFFFFLL;
              uint64_t v73 = v72 + 32;
              uint64_t v74 = (char *)(v72 + 32 + (*(void *)(v72 + 0x18) & 0xFFFFFFFFFFFFLL));
              if (v97 < (void *)&v74[v93] && v74 < v91) {
                goto LABEL_103;
              }
              memcpy(v74, v97, v93);
              uint64_t v75 = *(void *)(v72 + 24);
              BOOL v76 = v75 > -1 || (a3 & 0x4000000000000000) == 0;
              size_t v77 = (v75 & 0xFFFFFFFFFFFFLL) + v93;
              if (!v76) {
                v77 |= 0xC000000000000000;
              }
              *(void *)(v72 + 24) = v77 | 0x3000000000000000;
              *(unsigned char *)(v73 + (v77 & 0xFFFFFFFFFFFFLL)) = 0;
              uint64_t v78 = *(void *)(v72 + 16);
              if (v78 < 0)
              {
                Swift::String::Index v80 = (uint64_t *)((v73 + (v78 & 0xFFFFFFFFFFFFLL) + 7) & 0x7FFFFFFFFFFFFFF8);
                uint64_t v81 = *v80;
                uint64_t *v80 = 0;
                swift_bridgeObjectRelease(a3);
                swift_release(v81);
              }
              else
              {
                swift_bridgeObjectRelease(a3);
              }
              *unint64_t v3 = *(void *)(v72 + 24);
              uint64_t v8 = v93;
            }
            else
            {
              unint64_t v23 = (char *)((a3 & 0xFFFFFFFFFFFFFFFLL) + 32);
              if ((a2 & 0x1000000000000000) == 0)
              {
                int64_t v87 = (char *)_StringObject.sharedUTF8.getter(a2, a3);
                if (v88 < __n) {
                  goto LABEL_102;
                }
                unint64_t v23 = v87;
                if (__n)
                {
                  size_t v9 = __n;
                  if (!v87) {
                    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeBufferPointer has a nil start and nonzero count", 53, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x541uLL, 0);
                  }
                }
                else
                {
                  size_t v9 = 0;
                }
              }
              uint64_t v24 = v3[1] & 0xFFFFFFFFFFFFFFFLL;
              uint64_t v25 = v24 + 32;
              uint64_t v26 = (char *)(v24 + 32 + (*(void *)(v24 + 0x18) & 0xFFFFFFFFFFFFLL));
              uint64_t v8 = v93;
              if (&v26[v9] > v23 && v26 < &v23[v9]) {
LABEL_103:
              }
                _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 0x444uLL, 0);
              memcpy(v26, v23, v9);
              uint64_t v27 = *(void *)(v24 + 24);
              size_t v28 = (v27 & 0xFFFFFFFFFFFFLL) + v9;
              if (((v27 & a2 & 0x8000000000000000) != 0) != v18) {
                v28 |= 0xC000000000000000;
              }
              uint64_t v29 = v28 | 0x3000000000000000;
              *(void *)(v24 + 24) = v28 | 0x3000000000000000;
              *(unsigned char *)(v25 + (v28 & 0xFFFFFFFFFFFFLL)) = 0;
              uint64_t v30 = *(void *)(v24 + 16);
              if (v30 < 0)
              {
                Swift::String::Index v31 = (uint64_t *)((v25 + (v30 & 0xFFFFFFFFFFFFLL) + 7) & 0x7FFFFFFFFFFFFFF8);
                uint64_t v32 = *v31;
                *Swift::String::Index v31 = 0;
                swift_release(v32);
                uint64_t v29 = *(void *)(v24 + 24);
              }
              *unint64_t v3 = v29;
              swift_bridgeObjectRelease(a3);
            }
          }
          goto LABEL_83;
        }
        uint64_t v90 = v7;
        unint64_t v33 = _StringGuts._convertedToSmall()(v13, v12);
        unint64_t v35 = v34;
        v36._Swift::UInt64 rawBits = 3;
        v37._Swift::UInt64 rawBits = v92;
        unint64_t v38 = specialized String.init(_:)(v36, v37, a2, a3);
        unint64_t v40 = v39;
        swift_bridgeObjectRelease(a3);
        unint64_t v41 = _StringGuts._convertedToSmall()(v38, v40);
        unint64_t v43 = v42;
        swift_bridgeObjectRelease(v40);
        uint64_t v44 = HIBYTE(v35) & 0xF;
        uint64_t v45 = HIBYTE(v43) & 0xF;
        uint64_t v46 = v45 + v44;
        if ((unint64_t)(v45 + v44) > 0xF) {
          goto LABEL_105;
        }
        if (v45)
        {
          char v47 = 0;
          unint64_t v48 = 0;
          do
          {
            unint64_t v49 = v44 + v48;
            unint64_t v50 = v48 + 1;
            if (v48 >= 8) {
              unint64_t v51 = v43;
            }
            else {
              unint64_t v51 = v41;
            }
            unint64_t v52 = v51 >> (v47 & 0x38);
            char v53 = (8 * v44 + v47) & 0x38;
            uint64_t v54 = (-255 << v53) - 1;
            unint64_t v55 = (unint64_t)v52 << v53;
            unint64_t v56 = v55 | v54 & v35;
            unint64_t v57 = v55 | v54 & v33;
            if (v49 < 8) {
              unint64_t v33 = v57;
            }
            else {
              unint64_t v35 = v56;
            }
            v47 += 8;
            unint64_t v48 = v50;
          }
          while (v45 != v50);
        }
        swift_bridgeObjectRelease(v12);
        swift_bridgeObjectRelease(a3);
        unint64_t v58 = 0xA000000000000000;
        if (!(v33 & 0x8080808080808080 | v35 & 0x80808080808080)) {
          unint64_t v58 = 0xE000000000000000;
        }
        *unint64_t v3 = v33;
        v3[1] = v58 & 0xFF00000000000000 | (v46 << 56) | v35 & 0xFFFFFFFFFFFFFFLL;
        uint64_t v7 = v90;
        uint64_t v8 = v93;
LABEL_82:
        size_t v9 = __n;
LABEL_83:
        uint64_t v11 = v94;
        goto LABEL_84;
      }
    }
    else if ((v12 & 0x1000000000000000) == 0)
    {
      goto LABEL_25;
    }
    Swift::Int v86 = String.UTF8View._foreignCount()();
    int64_t v19 = v86 + v17;
    if (__OFADD__(v86, v17))
    {
LABEL_101:
      __break(1u);
LABEL_102:
      _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x745uLL, 0);
    }
    goto LABEL_26;
  }

  specialized String.append<A>(contentsOf:)(a1);
}

void String.append<A>(contentsOf:)(unint64_t *a1, ValueMetadata *a2, uint64_t a3)
{
  void (*v32)(unint64_t *__return_ptr, const char *, uint64_t);
  unint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v47;
  Swift::Int v48;
  BOOL v49;
  int64_t v50;
  BOOL isUniquelyReferenced_nonNull_native;
  int64_t v52;
  char v53;
  int64_t v54;
  char *v55;
  size_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  size_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  Swift::String::Index v69;
  Swift::String::Index v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  char v86;
  uint64_t v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t v91;
  uint64_t v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  unint64_t v97;
  char v98;
  uint64_t v99;
  unint64_t v100;
  unint64_t v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  uint64_t v106;
  unint64_t v107;
  BOOL v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t *v111;
  uint64_t v112;
  Swift::String::Index v113;
  Swift::String::Index v114;
  Swift::String::Index v115;
  Swift::String::Index v116;
  Swift::Int v117;
  char *v118;
  uint64_t v119;
  unint64_t v120;
  uint64_t v121;
  uint64_t v122;
  void (*v123)(unint64_t *__return_ptr, const char *, uint64_t);
  uint64_t v124;
  uint64_t v125;
  char *v126;
  const char *AssociatedTypeWitness;
  uint64_t *v128;
  unint64_t __src;
  unint64_t v130;
  uint64_t v131;
  unint64_t v132;
  uint64_t vars8;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (int **)a3, (uint64_t)a2, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Iterator);
  uint64_t v7 = MEMORY[0x1F4188790](AssociatedTypeWitness);
  size_t v126 = (char *)&v121 - v8;
  Swift::UInt64 Description = a2[-1].Description;
  uint64_t v10 = MEMORY[0x1F4188790](v7);
  unint64_t v12 = (char *)&v121 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = MEMORY[0x1F4188790](v10);
  uint64_t v15 = (unint64_t *)((char *)&v121 - v14);
  MEMORY[0x1F4188790](v13);
  BOOL v18 = (unint64_t *)((char *)&v121 - v16);
  if (a2 == &type metadata for String)
  {
    specialized String.append<A>(contentsOf:)(*a1, a1[1]);
    return;
  }
  char v128 = v3;
  if (a2 == &type metadata for Substring)
  {
    unint64_t v25 = *a1;
    unint64_t v26 = a1[1];
    unint64_t v27 = a1[2];
    unint64_t v28 = a1[3];
    specialized String.append<A>(contentsOf:)(v25, v26, v27, v28);
    return;
  }
  if (a2 == (ValueMetadata *)&unk_1EC9FFD50)
  {
    uint64_t v29 = *a1;
    specialized String.append<A>(contentsOf:)(v29);
    return;
  }
  unint64_t v121 = v17;
  int64_t v19 = (void (*)(char *, unint64_t *, ValueMetadata *))Description[2];
  v19((char *)&v121 - v16, a1, a2);
  if (!swift_dynamicCast((char *)&__src, v18, (Class *)a2, (const char *)&type metadata for String, 6uLL))
  {
    v19((char *)v15, a1, a2);
    if (swift_dynamicCast((char *)&__src, v15, (Class *)a2, (const char *)&type metadata for Substring, 6uLL))
    {
      uint64_t v21 = v132;
      String.append(contentsOf:)(__src, v130, v131, v132);
      goto LABEL_19;
    }
    v19(v12, a1, a2);
    (*(void (**)(ValueMetadata *, uint64_t))(a3 + 32))(a2, a3);
    uint64_t v30 = AssociatedTypeWitness;
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(a3, (uint64_t)a2, (uint64_t)AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Sequence, associated conformance descriptor for Sequence.Sequence.Iterator: IteratorProtocol);
    uint64_t v32 = *(void (**)(unint64_t *__return_ptr, const char *, uint64_t))(AssociatedConformanceWitness
                                                                                       + 16);
    Swift::Int v124 = AssociatedConformanceWitness + 16;
    unint64_t v125 = AssociatedConformanceWitness;
    uint64_t v123 = v32;
    ((void (*)(unint64_t *__return_ptr, const char *))v32)(&__src, v30);
    unint64_t v33 = v130;
    unint64_t v34 = (unint64_t *)v128;
    if (!v130)
    {
LABEL_111:
      (*(void (**)(char *, const char *))(v121 + 8))(v126, AssociatedTypeWitness);
      return;
    }
    unint64_t v35 = __src;
    while (1)
    {
      unint64_t v40 = *v34;
      unint64_t v39 = v34[1];
      unint64_t v41 = HIBYTE(v39) & 0xF;
      if ((v39 & 0x2000000000000000) != 0) {
        unint64_t v42 = HIBYTE(v39) & 0xF;
      }
      else {
        unint64_t v42 = *v34 & 0xFFFFFFFFFFFFLL;
      }
      if (!v42 && (v40 & ~v39 & 0x2000000000000000) == 0)
      {
        swift_bridgeObjectRelease(v34[1]);
        *unint64_t v34 = v35;
        v34[1] = v33;
        goto LABEL_27;
      }
      unint64_t v43 = v33 & 0x2000000000000000;
      uint64_t v44 = HIBYTE(v33) & 0xF;
      uint64_t v45 = v41 + v44;
      if ((v33 & 0x2000000000000000 & v39) != 0 && v45 <= 0xF)
      {
        if (v44)
        {
          Swift::UInt64 v92 = 0;
          size_t v93 = 0;
          Swift::String::Index v36 = v34[1];
          do
          {
            uint64_t v94 = v41 + v93;
            uint64_t v95 = v93 + 1;
            if (v93 >= 8) {
              uint64_t v96 = v33;
            }
            else {
              uint64_t v96 = v35;
            }
            uint64_t v97 = v96 >> (v92 & 0x38);
            char v98 = (8 * v41 + v92) & 0x38;
            unint64_t v99 = (-255 << v98) - 1;
            unint64_t v100 = (unint64_t)v97 << v98;
            unint64_t v101 = v100 | v99 & v36;
            unint64_t v102 = v100 | v99 & v40;
            if (v94 < 8) {
              unint64_t v40 = v102;
            }
            else {
              Swift::String::Index v36 = v101;
            }
            v92 += 8;
            size_t v93 = v95;
          }
          while (v44 != v95);
        }
        else
        {
          Swift::String::Index v36 = v34[1];
        }
        swift_bridgeObjectRelease(v34[1]);
        swift_bridgeObjectRelease(v33);
        Swift::String::Index v37 = 0xA000000000000000;
        if (!(v40 & 0x8080808080808080 | v36 & 0x80808080808080)) {
          Swift::String::Index v37 = 0xE000000000000000;
        }
        unint64_t v38 = v37 & 0xFF00000000000000 | (v45 << 56) | v36 & 0xFFFFFFFFFFFFFFLL;
        *unint64_t v34 = v40;
LABEL_26:
        v34[1] = v38;
        goto LABEL_27;
      }
      uint64_t v122 = v35 & 0xFFFFFFFFFFFFLL;
      if (v43) {
        char v47 = HIBYTE(v33) & 0xF;
      }
      else {
        char v47 = v35 & 0xFFFFFFFFFFFFLL;
      }
      if ((v33 & 0x1000000000000000) != 0)
      {
        swift_bridgeObjectRetain_n(v33, 2);
        v113._Swift::UInt64 rawBits = 1;
        v114._Swift::UInt64 rawBits = (v47 << 16) | 1;
        v115._Swift::UInt64 rawBits = _StringGuts.validateScalarRange(_:)(v113, v114, v35, v33);
        if (v115._rawBits < 0x10000) {
          v115._rawBits |= 3;
        }
        unint64_t v48 = specialized Collection.count.getter(v115, v116, v35, v33);
        swift_bridgeObjectRelease(v33);
        if ((v39 & 0x1000000000000000) == 0)
        {
LABEL_43:
          unint64_t v49 = __OFADD__(v42, v48);
          unint64_t v50 = v42 + v48;
          if (v49) {
            goto LABEL_114;
          }
          goto LABEL_44;
        }
      }
      else
      {
        swift_bridgeObjectRetain(v33);
        unint64_t v48 = v47;
        if ((v39 & 0x1000000000000000) == 0) {
          goto LABEL_43;
        }
      }
      uint64_t v117 = String.UTF8View._foreignCount()();
      unint64_t v50 = v117 + v48;
      if (__OFADD__(v117, v48))
      {
LABEL_114:
        __break(1u);
LABEL_115:
        _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x745uLL, 0);
      }
LABEL_44:
      if ((v40 & ~v39 & 0x2000000000000000) != 0
        && (BOOL isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v39 & 0xFFFFFFFFFFFFFFFLL),
            unint64_t v40 = *v128,
            unint64_t v39 = v128[1],
            isUniquelyReferenced_nonNull_native))
      {
        unint64_t v52 = _StringGuts.nativeUnusedCapacity.getter(*v128, v128[1]);
        if (v53)
        {
          unint64_t v120 = 258;
LABEL_119:
          _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/StringGutsRangeReplaceable.swift", 38, 2, v120, 0);
        }
        if (v50 <= 15 && ((v39 & 0x2000000000000000) != 0 || v52 < v48))
        {
LABEL_64:
          char v66 = _StringGuts._convertedToSmall()(v40, v39);
          unint64_t v68 = v67;
          v69._Swift::UInt64 rawBits = (v47 << 16) | 1;
          v70._Swift::UInt64 rawBits = 3;
          uint64_t v71 = specialized String.init(_:)(v70, v69, v35, v33);
          uint64_t v73 = v72;
          swift_bridgeObjectRelease(v33);
          uint64_t v74 = _StringGuts._convertedToSmall()(v71, v73);
          BOOL v76 = v75;
          swift_bridgeObjectRelease(v73);
          size_t v77 = HIBYTE(v68) & 0xF;
          uint64_t v78 = HIBYTE(v76) & 0xF;
          unint64_t v79 = v78 + v77;
          if ((unint64_t)(v78 + v77) > 0xF)
          {
            unint64_t v120 = 266;
            goto LABEL_119;
          }
          unint64_t v34 = (unint64_t *)v128;
          if (v78)
          {
            Swift::String::Index v80 = 0;
            uint64_t v81 = 0;
            do
            {
              Swift::String::Index v82 = v77 + v81;
              Swift::String::Index v83 = v81 + 1;
              if (v81 >= 8) {
                Swift::String::Index v84 = v76;
              }
              else {
                Swift::String::Index v84 = v74;
              }
              Swift::String::Index v85 = v84 >> (v80 & 0x38);
              Swift::Int v86 = (8 * v77 + v80) & 0x38;
              int64_t v87 = (-255 << v86) - 1;
              int64_t v88 = (unint64_t)v85 << v86;
              unint64_t v89 = v88 | v87 & v68;
              uint64_t v90 = v88 | v87 & v66;
              if (v82 < 8) {
                char v66 = v90;
              }
              else {
                unint64_t v68 = v89;
              }
              v80 += 8;
              uint64_t v81 = v83;
            }
            while (v78 != v83);
          }
          swift_bridgeObjectRelease(v39);
          swift_bridgeObjectRelease(v33);
          uint64_t v91 = 0xA000000000000000;
          if (!(v66 & 0x8080808080808080 | v68 & 0x80808080808080)) {
            uint64_t v91 = 0xE000000000000000;
          }
          unint64_t v38 = v91 & 0xFF00000000000000 | (v79 << 56) | v68 & 0xFFFFFFFFFFFFFFLL;
          *unint64_t v34 = v66;
          goto LABEL_26;
        }
      }
      else if (v50 <= 15)
      {
        goto LABEL_64;
      }
      uint64_t v54 = v48;
      unint64_t v34 = (unint64_t *)v128;
      _StringGuts.prepareForAppendInPlace(totalCount:otherUTF8Count:)(v50, v54);
      if ((v33 & 0x1000000000000000) != 0)
      {
        _StringGuts._foreignAppendInPlace(_:)(v35, v33, 0, v47);
        swift_bridgeObjectRelease_n(v33, 2);
        goto LABEL_27;
      }
      swift_bridgeObjectRelease(v33);
      if (!v43)
      {
        if ((v35 & 0x1000000000000000) != 0)
        {
          unint64_t v55 = (char *)((v33 & 0xFFFFFFFFFFFFFFFLL) + 32);
          goto LABEL_54;
        }
        uint64_t v118 = (char *)_StringObject.sharedUTF8.getter(v35, v33);
        if (v119 < v122) {
          goto LABEL_115;
        }
        unint64_t v55 = v118;
        if (v122)
        {
          unint64_t v34 = (unint64_t *)v128;
          unint64_t v56 = v122;
          if (!v118) {
            _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeBufferPointer has a nil start and nonzero count", 53, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x541uLL, 0);
          }
        }
        else
        {
          unint64_t v34 = (unint64_t *)v128;
LABEL_54:
          unint64_t v56 = v122;
        }
        unint64_t v57 = v34[1] & 0xFFFFFFFFFFFFFFFLL;
        unint64_t v58 = v57 + 32;
        uint64_t v59 = (char *)(v57 + 32 + (*(void *)(v57 + 0x18) & 0xFFFFFFFFFFFFLL));
        if (&v59[v56] > v55 && v59 < &v55[v56]) {
          goto LABEL_116;
        }
        memcpy(v59, v55, v56);
        unint64_t v60 = *(void *)(v57 + 24);
        uint64_t v61 = (v60 & 0xFFFFFFFFFFFFLL) + v56;
        if (((v60 & v35 & 0x8000000000000000) != 0) != v49) {
          v61 |= 0xC000000000000000;
        }
        unint64_t v62 = v61 | 0x3000000000000000;
        *(void *)(v57 + 24) = v61 | 0x3000000000000000;
        *(unsigned char *)(v58 + (v61 & 0xFFFFFFFFFFFFLL)) = 0;
        unint64_t v63 = *(void *)(v57 + 16);
        if (v63 < 0)
        {
          unint64_t v64 = (uint64_t *)((v58 + (v63 & 0xFFFFFFFFFFFFLL) + 7) & 0x7FFFFFFFFFFFFFF8);
          unint64_t v65 = *v64;
          __objc2_class *v64 = 0;
          swift_release(v65);
          unint64_t v62 = *(void *)(v57 + 24);
        }
        *unint64_t v34 = v62;
        swift_bridgeObjectRelease(v33);
        goto LABEL_27;
      }
      unint64_t __src = v35;
      unint64_t v130 = v33 & 0xFFFFFFFFFFFFFFLL;
      unint64_t v103 = v34[1] & 0xFFFFFFFFFFFFFFFLL;
      char v104 = v103 + 32;
      uint64_t v105 = (char *)(v103 + 32 + (*(void *)(v103 + 0x18) & 0xFFFFFFFFFFFFLL));
      if (&__src < (unint64_t *)&v105[v44] && v105 < (char *)&__src + v44) {
LABEL_116:
      }
        _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 0x444uLL, 0);
      memcpy(v105, &__src, HIBYTE(v33) & 0xF);
      unint64_t v106 = *(void *)(v103 + 24);
      unint64_t v107 = (v106 & 0xFFFFFFFFFFFFLL) + v44;
      unint64_t v108 = v106 > -1 || (v33 & 0x4000000000000000) == 0;
      unint64_t v109 = v107 | 0xC000000000000000;
      if (v108) {
        unint64_t v109 = v107;
      }
      *(void *)(v103 + 24) = v109 | 0x3000000000000000;
      *(unsigned char *)(v104 + (v109 & 0xFFFFFFFFFFFFLL)) = 0;
      unint64_t v110 = *(void *)(v103 + 16);
      if (v110 < 0)
      {
        unint64_t v111 = (uint64_t *)((v104 + (v110 & 0xFFFFFFFFFFFFLL) + 7) & 0x7FFFFFFFFFFFFFF8);
        uint64_t v112 = *v111;
        void *v111 = 0;
        swift_bridgeObjectRelease(v33);
        swift_release(v112);
      }
      else
      {
        swift_bridgeObjectRelease(v33);
      }
      *unint64_t v34 = *(void *)(v103 + 24);
LABEL_27:
      v123(&__src, AssociatedTypeWitness, v125);
      unint64_t v35 = __src;
      unint64_t v33 = v130;
      if (!v130) {
        goto LABEL_111;
      }
    }
  }
  unint64_t v20 = __src;
  uint64_t v21 = v130;
  char v22 = v128;
  unint64_t v23 = v128[1];
  uint64_t v24 = HIBYTE(v23) & 0xF;
  if ((v23 & 0x2000000000000000) == 0) {
    uint64_t v24 = *v128 & 0xFFFFFFFFFFFFLL;
  }
  if (v24 || (*v128 & ~v23 & 0x2000000000000000) != 0)
  {
    _StringGuts.append(_:)(__src, v130);
LABEL_19:
    swift_bridgeObjectRelease(v21);
    return;
  }
  swift_bridgeObjectRelease(v23);
  *char v22 = v20;
  v22[1] = v21;
}

unint64_t specialized _StringGuts.replaceSubrange<A>(_:with:)(unint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v5 = v4;
  unint64_t v11 = *v5;
  unint64_t v10 = v5[1];
  if ((*v5 & ~v10 & 0x2000000000000000) != 0)
  {
    if (swift_isUniquelyReferenced_nonNull_native(v10 & 0xFFFFFFFFFFFFFFFLL))
    {
      if ((a4 & 0x1000000000000000) != 0) {
        return specialized _StringGuts.uniqueNativeReplaceSubrange<A>(_:with:)(a1, a2, a3, a4, (uint64_t)protocol witness for ExpressibleByUnicodeScalarLiteral.init(unicodeScalarLiteral:) in conformance Unicode.Scalar, 0, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))specialized FlattenSequence<>.startIndex.getter, (uint64_t (*)(uint64_t))specialized FlattenSequence<>.distance(from:to:), (void (*)(unint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))specialized __StringStorage.replace<A>(from:to:with:replacementCount:));
      }
      if ((a4 & 0x2000000000000000) != 0)
      {
        size_t v13 = HIBYTE(a4) & 0xF;
        unint64_t v66 = a3;
        unint64_t v67 = a4 & 0xFFFFFFFFFFFFFFLL;
        unint64_t v12 = (char *)&v66;
      }
      else if ((a3 & 0x1000000000000000) != 0)
      {
        unint64_t v12 = (char *)((a4 & 0xFFFFFFFFFFFFFFFLL) + 32);
        size_t v13 = a3 & 0xFFFFFFFFFFFFLL;
      }
      else
      {
        unint64_t v12 = (char *)_StringObject.sharedUTF8.getter(a3, a4);
        size_t v13 = v60;
      }
      return specialized _StringGuts.uniqueNativeReplaceSubrange(_:with:isASCII:)(a1, a2, v12, v13);
    }
    Swift::UInt64 v61 = a2;
    uint64_t v62 = a3;
    unint64_t v11 = *v5;
    unint64_t v10 = v5[1];
  }
  else
  {
    Swift::UInt64 v61 = a2;
    uint64_t v62 = a3;
  }
  unint64_t v66 = 0;
  unint64_t v67 = 0xE000000000000000;
  uint64_t v14 = _StringGuts.nativeCapacity.getter(v11, v10);
  if ((v15 & 1) == 0)
  {
    Swift::Int v16 = v14;
    if (v14 > 15)
    {
      uint64_t v17 = _StringGuts.uniqueNativeCapacity.getter();
      if ((v18 & 1) != 0 || v17 < v16) {
        _StringGuts.grow(_:)(v16);
      }
    }
  }
  v19._Swift::UInt64 rawBits = a1;
  uint64_t v20 = specialized Collection.subscript.getter(v19, v11, v10);
  uint64_t v22 = v21;
  uint64_t v24 = v23;
  uint64_t v26 = v25;
  swift_bridgeObjectRetain(v25);
  uint64_t v27 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, char *))_sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSs17UnicodeScalarViewV_s6UInt32Vs5NeverOTg506_sSS17def38V6append10contentsOfyx_tSTRzs0A0O0B0V7b7RtzlFs6G8VAHXEfU_Tf1cn_n)(v20, v22, v24, v26, v65);
  swift_bridgeObjectRelease(v26);
  unint64_t v28 = specialized static String._fromCodeUnits<A, B>(_:encoding:repair:)(v27, 1);
  unint64_t v30 = v29;
  swift_bridgeObjectRelease(v27);
  if (!v30) {
    goto LABEL_27;
  }
  uint64_t v31 = v67;
  unint64_t v32 = specialized static String.+ infix(_:_:)(v66, v67, v28, v30);
  unint64_t v34 = v33;
  swift_bridgeObjectRelease(v31);
  swift_bridgeObjectRelease(v30);
  unint64_t v66 = v32;
  unint64_t v67 = v34;
  uint64_t v35 = (v34 & 0x2000000000000000) != 0 ? HIBYTE(v34) & 0xF : v32 & 0xFFFFFFFFFFFFLL;
  uint64_t v36 = ((uint64_t (*)(uint64_t, unint64_t, char *))_sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSS17UnicodeScalarViewV_s6UInt32Vs5NeverOTg506_sSS17def38V6append10contentsOfyx_tSTRzs0A0O0B0V7b7RtzlFs6G8VAHXEfU_Tf1cn_n)(v62, a4, v64);
  unint64_t v37 = specialized static String._fromCodeUnits<A, B>(_:encoding:repair:)(v36, 1);
  unint64_t v39 = v38;
  swift_bridgeObjectRelease(v36);
  if (!v39) {
    goto LABEL_27;
  }
  unint64_t v40 = specialized static String.+ infix(_:_:)(v32, v34, v37, v39);
  unint64_t v42 = v41;
  swift_bridgeObjectRelease(v34);
  swift_bridgeObjectRelease(v39);
  unint64_t v66 = v40;
  unint64_t v67 = v42;
  v43._Swift::UInt64 rawBits = v61;
  Swift::UInt64 v44 = specialized Collection.subscript.getter(v43, v11, v10);
  uint64_t v46 = v45;
  uint64_t v48 = v47;
  uint64_t v50 = v49;
  swift_bridgeObjectRetain(v49);
  uint64_t v51 = ((uint64_t (*)(Swift::UInt64, uint64_t, uint64_t, uint64_t, char *))_sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSs17UnicodeScalarViewV_s6UInt32Vs5NeverOTg506_sSS17def38V6append10contentsOfyx_tSTRzs0A0O0B0V7b7RtzlFs6G8VAHXEfU_Tf1cn_n)(v44, v46, v48, v50, v63);
  swift_bridgeObjectRelease(v50);
  unint64_t v52 = specialized static String._fromCodeUnits<A, B>(_:encoding:repair:)(v51, 1);
  unint64_t v54 = v53;
  swift_bridgeObjectRelease(v51);
  if (!v54) {
LABEL_27:
  }
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/String.swift", 18, 2, 0x1C9uLL, 0);
  unint64_t v55 = specialized static String.+ infix(_:_:)(v40, v42, v52, v54);
  unint64_t v57 = v56;
  swift_bridgeObjectRelease(v10);
  swift_bridgeObjectRelease(v42);
  swift_bridgeObjectRelease(v54);
  *unint64_t v5 = v55;
  v5[1] = v57;
  return v35;
}

uint64_t specialized _StringGuts.replaceSubrange<A>(_:with:)(unint64_t a1, unint64_t a2)
{
  unint64_t v3 = v2;
  unint64_t v7 = *v3;
  unint64_t v6 = v3[1];
  if ((*v3 & ~v6 & 0x2000000000000000) != 0)
  {
    if (swift_isUniquelyReferenced_nonNull_native(v6 & 0xFFFFFFFFFFFFFFFLL)) {
      return specialized _StringGuts.uniqueNativeReplaceSubrange<A>(_:with:)(a1, a2, (uint64_t)protocol witness for ExpressibleByUnicodeScalarLiteral.init(unicodeScalarLiteral:) in conformance Unicode.Scalar, 0);
    }
    Swift::UInt64 v49 = a2;
    unint64_t v7 = *v3;
    unint64_t v6 = v3[1];
  }
  else
  {
    Swift::UInt64 v49 = a2;
  }
  unint64_t v53 = 0;
  unint64_t v54 = 0xE000000000000000;
  Swift::Int v9 = _StringGuts.nativeCapacity.getter(v7, v6);
  if ((v10 & 1) == 0) {
    String.reserveCapacity(_:)(v9);
  }
  v11._Swift::UInt64 rawBits = a1;
  uint64_t v12 = specialized Collection.subscript.getter(v11, v7, v6);
  uint64_t v14 = v13;
  uint64_t v16 = v15;
  uint64_t v18 = v17;
  swift_bridgeObjectRetain(v17);
  uint64_t v19 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, char *))_sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSs17UnicodeScalarViewV_s6UInt32Vs5NeverOTg506_sSS17def38V6append10contentsOfyx_tSTRzs0A0O0B0V7b7RtzlFs6G8VAHXEfU_Tf1cn_n)(v12, v14, v16, v18, v52);
  unint64_t v20 = specialized static String._fromCodeUnits<A, B>(_:encoding:repair:)(v19, 1);
  unint64_t v22 = v21;
  swift_bridgeObjectRelease(v19);
  if (!v22) {
    goto LABEL_16;
  }
  uint64_t v23 = v54;
  unint64_t v24 = specialized static String.+ infix(_:_:)(v53, v54, v20, v22);
  unint64_t v26 = v25;
  swift_bridgeObjectRelease(v18);
  swift_bridgeObjectRelease(v23);
  swift_bridgeObjectRelease(v22);
  unint64_t v53 = v24;
  unint64_t v54 = v26;
  uint64_t v8 = (v26 & 0x2000000000000000) != 0 ? HIBYTE(v26) & 0xF : v24 & 0xFFFFFFFFFFFFLL;
  uint64_t v51 = &_swiftEmptyArrayStorage;
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0, 0);
  unint64_t v27 = specialized static String._fromCodeUnits<A, B>(_:encoding:repair:)(&_swiftEmptyArrayStorage, 1);
  unint64_t v29 = v28;
  swift_release((uint64_t)&_swiftEmptyArrayStorage);
  if (!v29) {
    goto LABEL_16;
  }
  unint64_t v30 = specialized static String.+ infix(_:_:)(v24, v26, v27, v29);
  unint64_t v32 = v31;
  swift_bridgeObjectRelease(v26);
  swift_bridgeObjectRelease(v29);
  unint64_t v53 = v30;
  unint64_t v54 = v32;
  v33._Swift::UInt64 rawBits = v49;
  Swift::UInt64 v34 = specialized Collection.subscript.getter(v33, v7, v6);
  uint64_t v36 = v35;
  uint64_t v38 = v37;
  uint64_t v40 = v39;
  swift_bridgeObjectRetain(v39);
  uint64_t v41 = ((uint64_t (*)(Swift::UInt64, uint64_t, uint64_t, uint64_t, char *))_sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSs17UnicodeScalarViewV_s6UInt32Vs5NeverOTg506_sSS17def38V6append10contentsOfyx_tSTRzs0A0O0B0V7b7RtzlFs6G8VAHXEfU_Tf1cn_n)(v34, v36, v38, v40, v50);
  unint64_t v42 = specialized static String._fromCodeUnits<A, B>(_:encoding:repair:)(v41, 1);
  unint64_t v44 = v43;
  swift_bridgeObjectRelease(v41);
  if (!v44) {
LABEL_16:
  }
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/String.swift", 18, 2, 0x1C9uLL, 0);
  unint64_t v45 = specialized static String.+ infix(_:_:)(v30, v32, v42, v44);
  unint64_t v47 = v46;
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v40);
  swift_bridgeObjectRelease(v32);
  swift_bridgeObjectRelease(v44);
  *unint64_t v3 = v45;
  v3[1] = v47;
  return v8;
}

uint64_t specialized _StringGuts.replaceSubrange<A>(_:with:)(unint64_t a1, unint64_t a2, int a3)
{
  unint64_t v4 = v3;
  unint64_t v9 = *v4;
  unint64_t v8 = v4[1];
  if ((*v4 & ~v8 & 0x2000000000000000) != 0)
  {
    if (swift_isUniquelyReferenced_nonNull_native(v8 & 0xFFFFFFFFFFFFFFFLL)) {
      return specialized _StringGuts.uniqueNativeReplaceSubrange<A>(_:with:)(a1, a2, a3, (void (*)(uint64_t *__return_ptr, int *))protocol witness for ExpressibleByUnicodeScalarLiteral.init(unicodeScalarLiteral:) in conformance Unicode.Scalar, 0);
    }
    Swift::UInt64 v52 = a2;
    unint64_t v9 = *v4;
    unint64_t v8 = v4[1];
  }
  else
  {
    Swift::UInt64 v52 = a2;
  }
  unint64_t v55 = 0;
  unint64_t v56 = 0xE000000000000000;
  Swift::Int v11 = _StringGuts.nativeCapacity.getter(v9, v8);
  if ((v12 & 1) == 0) {
    String.reserveCapacity(_:)(v11);
  }
  v13._Swift::UInt64 rawBits = a1;
  uint64_t v14 = specialized Collection.subscript.getter(v13, v9, v8);
  uint64_t v16 = v15;
  uint64_t v18 = v17;
  uint64_t v20 = v19;
  swift_bridgeObjectRetain(v19);
  uint64_t v21 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, char *))_sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSs17UnicodeScalarViewV_s6UInt32Vs5NeverOTg506_sSS17def38V6append10contentsOfyx_tSTRzs0A0O0B0V7b7RtzlFs6G8VAHXEfU_Tf1cn_n)(v14, v16, v18, v20, v54);
  unint64_t v22 = specialized static String._fromCodeUnits<A, B>(_:encoding:repair:)(v21, 1);
  unint64_t v24 = v23;
  swift_bridgeObjectRelease(v21);
  if (!v24) {
    goto LABEL_16;
  }
  uint64_t v25 = v56;
  unint64_t v26 = specialized static String.+ infix(_:_:)(v55, v56, v22, v24);
  unint64_t v28 = v27;
  swift_bridgeObjectRelease(v20);
  swift_bridgeObjectRelease(v25);
  swift_bridgeObjectRelease(v24);
  unint64_t v55 = v26;
  unint64_t v56 = v28;
  uint64_t v10 = (v28 & 0x2000000000000000) != 0 ? HIBYTE(v28) & 0xF : v26 & 0xFFFFFFFFFFFFLL;
  unint64_t v29 = _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFxq0_q_Ri_zRi0_zRi__Ri0__Ri_0_Ri0_0_r1_lyADs5NeverOs6UInt32VIsgnrzr_xSayAIGAGSTRzAIRsd__AGRsd_0_r_0_lIetMgnozo_Tp5s15CollectionOfOneVys7UnicodeO6ScalarVG_Tg506_sSS17ij42ViewV6append10contentsOfyx_tSTRzs0A0O0B0V7b7RtzlFs6E8VAHXEfU_Tf1cn_n(a3);
  unint64_t v30 = specialized static String._fromCodeUnits<A, B>(_:encoding:repair:)(v29, 1);
  unint64_t v32 = v31;
  swift_bridgeObjectRelease((uint64_t)v29);
  if (!v32) {
    goto LABEL_16;
  }
  unint64_t v33 = specialized static String.+ infix(_:_:)(v26, v28, v30, v32);
  unint64_t v35 = v34;
  swift_bridgeObjectRelease(v28);
  swift_bridgeObjectRelease(v32);
  unint64_t v55 = v33;
  unint64_t v56 = v35;
  v36._Swift::UInt64 rawBits = v52;
  Swift::UInt64 v37 = specialized Collection.subscript.getter(v36, v9, v8);
  uint64_t v39 = v38;
  uint64_t v41 = v40;
  uint64_t v43 = v42;
  swift_bridgeObjectRetain(v42);
  uint64_t v44 = ((uint64_t (*)(Swift::UInt64, uint64_t, uint64_t, uint64_t, char *))_sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSs17UnicodeScalarViewV_s6UInt32Vs5NeverOTg506_sSS17def38V6append10contentsOfyx_tSTRzs0A0O0B0V7b7RtzlFs6G8VAHXEfU_Tf1cn_n)(v37, v39, v41, v43, v53);
  unint64_t v45 = specialized static String._fromCodeUnits<A, B>(_:encoding:repair:)(v44, 1);
  unint64_t v47 = v46;
  swift_bridgeObjectRelease(v44);
  if (!v47) {
LABEL_16:
  }
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/String.swift", 18, 2, 0x1C9uLL, 0);
  unint64_t v48 = specialized static String.+ infix(_:_:)(v33, v35, v45, v47);
  unint64_t v50 = v49;
  swift_bridgeObjectRelease(v8);
  swift_bridgeObjectRelease(v43);
  swift_bridgeObjectRelease(v35);
  swift_bridgeObjectRelease(v47);
  *unint64_t v4 = v48;
  v4[1] = v50;
  return v10;
}

uint64_t _StringGuts.replaceSubrange<A>(_:with:)(Swift::UInt64 a1, Swift::UInt64 a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v6 = (Class *)a4;
  Swift::UInt64 v183 = a1;
  uint64_t v184 = a3;
  uint64_t v181 = a5;
  Swift::UInt64 v182 = a2;
  uint64_t v7 = *(void *)(a5 + 8);
  unint64_t v8 = type metadata accessor for LazySequence(0, a4, v7, a4);
  MEMORY[0x1F4188790](v8 - 1);
  unint64_t v180 = (char *)&v177 - v9;
  uint64_t v10 = type metadata accessor for LazyMapSequence(255, (uint64_t)v6, (uint64_t)&type metadata for Unicode.Scalar.UTF8View, v7);
  uint64_t WitnessTable = swift_getWitnessTable(protocol conformance descriptor for LazyMapSequence<A, B>, (unint64_t *)v10, v11);
  unint64_t v15 = lazy protocol witness table accessor for type Unicode.Scalar.UTF8View and conformance Unicode.Scalar.UTF8View(WitnessTable, v13, v14);
  uint64_t v16 = (unint64_t *)type metadata accessor for FlattenSequence(255, (uint64_t)v10, WitnessTable, v15);
  uint64_t v18 = swift_getWitnessTable(protocol conformance descriptor for FlattenSequence<A>, v16, v17);
  uint64_t v20 = type metadata accessor for LazySequence(0, (uint64_t)v16, v18, v19);
  uint64_t v21 = MEMORY[0x1F4188790](v20);
  unint64_t v23 = (char *)&v177 - v22;
  uint64_t v24 = MEMORY[0x1F4188790](v21);
  unint64_t v26 = (unint64_t *)((char *)&v177 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0));
  unint64_t v27 = (unint64_t *)MEMORY[0x1F4188790](v24);
  unint64_t v31 = (unint64_t *)((char *)&v177 - v30);
  unint64_t v32 = *v5;
  unint64_t v33 = v5[1];
  unint64_t v185 = v5;
  if ((v32 & ~v33 & 0x2000000000000000) == 0) {
    goto LABEL_17;
  }
  uint64_t v179 = v29;
  uint64_t v177 = v28;
  unint64_t v178 = v27;
  if (!swift_isUniquelyReferenced_nonNull_native(v33 & 0xFFFFFFFFFFFFFFFLL))
  {
    unint64_t v32 = *v185;
    unint64_t v33 = v185[1];
LABEL_17:
    unint64_t v191 = 0;
    unint64_t v192 = 0xE000000000000000;
    Swift::Int v48 = _StringGuts.nativeCapacity.getter(v32, v33);
    if ((v49 & 1) == 0) {
      String.reserveCapacity(_:)(v48);
    }
    v50._Swift::UInt64 rawBits = v183;
    uint64_t v51 = specialized Collection.subscript.getter(v50, v32, v33);
    uint64_t v53 = v52;
    uint64_t v55 = v54;
    uint64_t v57 = v56;
    swift_bridgeObjectRetain(v56);
    uint64_t v58 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, char *))_sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSs17UnicodeScalarViewV_s6UInt32Vs5NeverOTg506_sSS17def38V6append10contentsOfyx_tSTRzs0A0O0B0V7b7RtzlFs6G8VAHXEfU_Tf1cn_n)(v51, v53, v55, v57, v196);
    unint64_t v59 = specialized static String._fromCodeUnits<A, B>(_:encoding:repair:)(v58, 1);
    unint64_t v61 = v60;
    swift_bridgeObjectRelease(v58);
    if (!v61) {
      goto LABEL_143;
    }
    uint64_t v62 = v192;
    unint64_t v63 = specialized static String.+ infix(_:_:)(v191, v192, v59, v61);
    unint64_t v65 = v64;
    swift_bridgeObjectRelease(v57);
    swift_bridgeObjectRelease(v62);
    swift_bridgeObjectRelease(v61);
    unint64_t v191 = v63;
    unint64_t v192 = v65;
    uint64_t v39 = (v65 & 0x2000000000000000) != 0 ? HIBYTE(v65) & 0xF : v63 & 0xFFFFFFFFFFFFLL;
    unint64_t v66 = _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFxq0_q_Ri_zRi0_zRi__Ri0__Ri_0_Ri0_0_r1_lyADs5NeverOs6UInt32VIsgnrzr_xSayAIGAGSTRzAIRsd__AGRsd_0_r_0_lIetMgnozo_Tp5((void (*)(uint64_t *__return_ptr, char *))protocol witness for ExpressibleByUnicodeScalarLiteral.init(unicodeScalarLiteral:) in conformance Unicode.Scalar, 0, (uint64_t)v6, v7);
    unint64_t v67 = specialized static String._fromCodeUnits<A, B>(_:encoding:repair:)(v66, 1);
    unint64_t v69 = v68;
    swift_bridgeObjectRelease((uint64_t)v66);
    if (!v69) {
      goto LABEL_143;
    }
    unint64_t v70 = specialized static String.+ infix(_:_:)(v63, v65, v67, v69);
    unint64_t v72 = v71;
    swift_bridgeObjectRelease(v65);
    swift_bridgeObjectRelease(v69);
    unint64_t v191 = v70;
    unint64_t v192 = v72;
    v73._Swift::UInt64 rawBits = v182;
    Swift::UInt64 v74 = specialized Collection.subscript.getter(v73, v32, v33);
    uint64_t v76 = v75;
    uint64_t v78 = v77;
    uint64_t v80 = v79;
    swift_bridgeObjectRetain(v79);
    uint64_t v81 = ((uint64_t (*)(Swift::UInt64, uint64_t, uint64_t, uint64_t, char *))_sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSs17UnicodeScalarViewV_s6UInt32Vs5NeverOTg506_sSS17def38V6append10contentsOfyx_tSTRzs0A0O0B0V7b7RtzlFs6G8VAHXEfU_Tf1cn_n)(v74, v76, v78, v80, v195);
    unint64_t v82 = specialized static String._fromCodeUnits<A, B>(_:encoding:repair:)(v81, 1);
    unint64_t v84 = v83;
    swift_bridgeObjectRelease(v81);
    if (!v84) {
LABEL_143:
    }
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/String.swift", 18, 2, 0x1C9uLL, 0);
    unint64_t v85 = specialized static String.+ infix(_:_:)(v70, v72, v82, v84);
    unint64_t v87 = v86;
    swift_bridgeObjectRelease(v33);
    swift_bridgeObjectRelease(v80);
    swift_bridgeObjectRelease(v72);
    swift_bridgeObjectRelease(v84);
    int64_t v88 = v185;
    unint64_t *v185 = v85;
    v88[1] = v87;
    return v39;
  }
  size_t v34 = v179 + 16;
  unint64_t v35 = *(void (**)(unint64_t *, uint64_t, Class *))(v179 + 16);
  uint64_t v36 = v184;
  v35(v31, v184, v6);
  if (!swift_dynamicCast((char *)&v191, v31, v6, (const char *)&type metadata for String.UnicodeScalarView, 6uLL))
  {
    v35(v26, v36, v6);
    if ((swift_dynamicCast((char *)&v191, v26, v6, (const char *)&type metadata for Substring.UnicodeScalarView, 6uLL) & 1) == 0)
    {
LABEL_126:
      unint64_t v166 = v182;
      uint64_t v167 = v180;
      v35((unint64_t *)v180, v36, v6);
      (*(void (**)(char *, char *, Class *))(v179 + 32))(v23, v167, v6);
      uint64_t v168 = &v23[*((int *)v10 + 11)];
      *(void *)uint64_t v168 = protocol witness for ExpressibleByUnicodeScalarLiteral.init(unicodeScalarLiteral:) in conformance Unicode.Scalar;
      *((void *)v168 + 1) = 0;
      uint64_t v190 = v181;
      uint64_t v169 = swift_getWitnessTable(protocol conformance descriptor for <> LazyMapSequence<A, B>, (unint64_t *)v10, (uint64_t)&v190);
      unint64_t v172 = lazy protocol witness table accessor for type Unicode.Scalar.UTF8View and conformance Unicode.Scalar.UTF8View(v169, v170, v171);
      v189[0] = v169;
      v189[1] = v172;
      uint64_t v188 = swift_getWitnessTable(protocol conformance descriptor for <> FlattenSequence<A>, v16, (uint64_t)v189);
      unint64_t v173 = v178;
      uint64_t v174 = swift_getWitnessTable(protocol conformance descriptor for <> LazySequence<A>, v178, (uint64_t)&v188);
      uint64_t v39 = _StringGuts.uniqueNativeReplaceSubrange<A>(_:with:)(v183, v166, (uint64_t)v23, (uint64_t)v173, v174);
      (*(void (**)(char *, unint64_t *))(v177 + 8))(v23, v173);
      return v39;
    }
    unint64_t v37 = v194;
    if ((v194 & 0x1000000000000000) != 0)
    {
LABEL_125:
      swift_bridgeObjectRelease(v37);
      goto LABEL_126;
    }
    unint64_t v90 = v192;
    int64_t v42 = v191 >> 16;
    int64_t v91 = v192 >> 16;
    if ((v194 & 0x2000000000000000) != 0)
    {
      unint64_t v115 = HIBYTE(v194) & 0xF;
      unint64_t v191 = v193;
      unint64_t v192 = v194 & 0xFFFFFFFFFFFFFFLL;
      uint64_t v38 = (uint64_t *)v185;
      if (v115 >= v91)
      {
        uint64_t v116 = specialized UnsafeBufferPointer.init(rebasing:)(v42, v90 >> 16, (uint64_t)&v191, v115);
        uint64_t v39 = v183 >> 16;
        Swift::UInt64 v118 = (v183 >> 16) + v117;
        if (!__OFADD__(v183 >> 16, v117))
        {
          unint64_t v23 = (char *)(v182 >> 16);
          unint64_t v119 = v38[1];
          if ((v119 & 0x2000000000000000) != 0) {
            uint64_t v120 = HIBYTE(v119) & 0xF;
          }
          else {
            uint64_t v120 = *v38 & 0xFFFFFFFFFFFFLL;
          }
          uint64_t v121 = v120 - (void)v23;
          int64_t v42 = v118 + v121;
          if (!__OFADD__(v118, v121))
          {
            uint64_t v122 = (char *)v116;
            size_t v123 = v117;
            if (v42 >= 16)
            {
              uint64_t v124 = _StringGuts.uniqueNativeCapacity.getter();
              if ((v125 & 1) != 0 || v124 < v42)
              {
                uint64_t v126 = _StringGuts.uniqueNativeCapacity.getter();
                if (v127)
                {
                  unint64_t v148 = v38[1];
                  if ((v148 & 0x1000000000000000) != 0)
                  {
                    Swift::Int v128 = String.UTF8View._foreignCount()();
                  }
                  else if ((v148 & 0x2000000000000000) != 0)
                  {
                    Swift::Int v128 = HIBYTE(v148) & 0xF;
                  }
                  else
                  {
                    Swift::Int v128 = *v38 & 0xFFFFFFFFFFFFLL;
                  }
                }
                else
                {
                  Swift::Int v128 = 2 * v126;
                }
                if (v128 > v42) {
                  int64_t v42 = v128;
                }
                unint64_t v155 = v38[1];
                if ((v155 & 0x1000000000000000) != 0)
                {
                  _StringGuts._foreignGrow(_:)(v42);
                }
                else
                {
                  uint64_t v156 = *v38;
                  if ((v155 & 0x2000000000000000) != 0)
                  {
                    size_t v160 = HIBYTE(v155) & 0xF;
                    uint64_t __src = v156;
                    uint64_t v187 = v155 & 0xFFFFFFFFFFFFFFLL;
                    unint64_t v161 = v160 | 0xC000000000000000;
                    if ((v155 & 0x4000000000000000) == 0) {
                      unint64_t v161 = HIBYTE(v155) & 0xF;
                    }
                    uint64_t v162 = v161 | 0x3000000000000000;
                    int64_t v159 = _allocateStringStorage(codeUnitCapacity:)(v42);
                    *(void *)(v159 + 16) = v163;
                    *(void *)(v159 + 24) = v162;
                    if (v163 < 0)
                    {
                      *(void *)__StringStorage._breadcrumbsAddress.getter() = 0;
                      uint64_t v162 = *(void *)(v159 + 24);
                    }
                    *(unsigned char *)(v159 + 32 + (v162 & 0xFFFFFFFFFFFFLL)) = 0;
                    specialized UnsafeMutablePointer.initialize(from:count:)((char *)&__src, v160, (char *)(v159 + 32));
                    uint64_t v38 = (uint64_t *)v185;
                  }
                  else
                  {
                    if ((v156 & 0x1000000000000000) != 0)
                    {
                      Swift::String::Index v157 = (char *)((v155 & 0xFFFFFFFFFFFFFFFLL) + 32);
                      size_t v158 = v156 & 0xFFFFFFFFFFFFLL;
                    }
                    else
                    {
                      Swift::String::Index v157 = (char *)_StringObject.sharedUTF8.getter(*v38, v155);
                    }
                    int64_t v159 = specialized static __StringStorage.create(initializingFrom:codeUnitCapacity:isASCII:)(v157, v158, v42, v156 < 0);
                  }
                  uint64_t v164 = *(void *)(v159 + 24);
                  swift_bridgeObjectRelease(v38[1]);
                  uint64_t *v38 = v164;
                  v38[1] = v159;
                }
              }
            }
            uint64_t v165 = v38[1] & 0xFFFFFFFFFFFFFFFLL;
            __StringStorage.replace(from:to:with:)(v39, (uint64_t)v23, v122, v123);
            swift_bridgeObjectRelease(v37);
            uint64_t *v38 = *(void *)(v165 + 24);
            return v39;
          }
LABEL_133:
          __break(1u);
          goto LABEL_134;
        }
LABEL_132:
        __break(1u);
        goto LABEL_133;
      }
    }
    else
    {
      uint64_t v38 = (uint64_t *)v185;
      if ((v193 & 0x1000000000000000) != 0)
      {
        id v92 = (id)((v194 & 0xFFFFFFFFFFFFFFFLL) + 32);
        uint64_t v93 = v193 & 0xFFFFFFFFFFFFLL;
        if ((uint64_t)(v193 & 0xFFFFFFFFFFFFLL) >= v91)
        {
LABEL_32:
          uint64_t v94 = specialized UnsafeBufferPointer.init(rebasing:)(v42, v91, (uint64_t)v92, v93);
          uint64_t v39 = v183 >> 16;
          Swift::UInt64 v96 = (v183 >> 16) + v95;
          if (__OFADD__(v183 >> 16, v95))
          {
            __break(1u);
          }
          else
          {
            unint64_t v23 = (char *)(v182 >> 16);
            unint64_t v97 = v38[1];
            if ((v97 & 0x2000000000000000) != 0) {
              uint64_t v98 = HIBYTE(v97) & 0xF;
            }
            else {
              uint64_t v98 = *v38 & 0xFFFFFFFFFFFFLL;
            }
            uint64_t v99 = v98 - (void)v23;
            int64_t v42 = v96 + v99;
            if (!__OFADD__(v96, v99))
            {
              unint64_t v6 = (Class *)v94;
              size_t v34 = v95;
              if (v42 < 16) {
                goto LABEL_109;
              }
              uint64_t v100 = _StringGuts.uniqueNativeCapacity.getter();
              if ((v101 & 1) == 0 && v100 >= v42) {
                goto LABEL_109;
              }
              uint64_t v102 = _StringGuts.uniqueNativeCapacity.getter();
              if (v103)
              {
                unint64_t v147 = v38[1];
                if ((v147 & 0x1000000000000000) != 0)
                {
                  Swift::Int v104 = String.UTF8View._foreignCount()();
                }
                else if ((v147 & 0x2000000000000000) != 0)
                {
                  Swift::Int v104 = HIBYTE(v147) & 0xF;
                }
                else
                {
                  Swift::Int v104 = *v38 & 0xFFFFFFFFFFFFLL;
                }
              }
              else
              {
                Swift::Int v104 = 2 * v102;
              }
              if (v104 > v42) {
                int64_t v42 = v104;
              }
              unint64_t v131 = v38[1];
              if ((v131 & 0x1000000000000000) == 0)
              {
                uint64_t v132 = *v38;
                if ((v131 & 0x2000000000000000) == 0)
                {
                  if ((v132 & 0x1000000000000000) != 0) {
                    goto LABEL_73;
                  }
                  goto LABEL_102;
                }
LABEL_103:
                size_t v149 = HIBYTE(v131) & 0xF;
                unint64_t v191 = v132;
                unint64_t v192 = v131 & 0xFFFFFFFFFFFFFFLL;
                unint64_t v150 = v149 | 0xC000000000000000;
                if ((v131 & 0x4000000000000000) == 0) {
                  unint64_t v150 = HIBYTE(v131) & 0xF;
                }
                uint64_t v151 = v150 | 0x3000000000000000;
                int64_t v135 = _allocateStringStorage(codeUnitCapacity:)(v42);
                *(void *)(v135 + 16) = v152;
                *(void *)(v135 + 24) = v151;
                if (v152 < 0)
                {
                  *(void *)__StringStorage._breadcrumbsAddress.getter() = 0;
                  uint64_t v151 = *(void *)(v135 + 24);
                }
                *(unsigned char *)(v135 + 32 + (v151 & 0xFFFFFFFFFFFFLL)) = 0;
                specialized UnsafeMutablePointer.initialize(from:count:)((char *)&v191, v149, (char *)(v135 + 32));
                uint64_t v38 = (uint64_t *)v185;
                goto LABEL_108;
              }
LABEL_134:
              _StringGuts._foreignGrow(_:)(v42);
              goto LABEL_109;
            }
          }
          __break(1u);
          goto LABEL_132;
        }
      }
      else
      {
        id v92 = _StringObject.sharedUTF8.getter(v193, v194);
        uint64_t v93 = v176;
        if (v176 >= v91) {
          goto LABEL_32;
        }
      }
    }
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x745uLL, 0);
  }
  unint64_t v37 = v192;
  if ((v192 & 0x1000000000000000) != 0) {
    goto LABEL_125;
  }
  if ((v192 & 0x2000000000000000) == 0)
  {
    uint64_t v38 = (uint64_t *)v185;
    if ((v191 & 0x1000000000000000) != 0)
    {
      unint64_t v6 = (Class *)((v192 & 0xFFFFFFFFFFFFFFFLL) + 32);
      size_t v34 = v191 & 0xFFFFFFFFFFFFLL;
    }
    else
    {
      unint64_t v6 = (Class *)_StringObject.sharedUTF8.getter(v191, v192);
      size_t v34 = v175;
    }
    uint64_t v39 = v183 >> 16;
    unint64_t v23 = (char *)(v182 >> 16);
    unint64_t v40 = v38[1];
    if ((v40 & 0x2000000000000000) != 0) {
      uint64_t v41 = HIBYTE(v40) & 0xF;
    }
    else {
      uint64_t v41 = *v38 & 0xFFFFFFFFFFFFLL;
    }
    int64_t v42 = v41 - (void)v23 + v34 + (v183 >> 16);
    if (v42 < 16) {
      goto LABEL_109;
    }
    uint64_t v43 = _StringGuts.uniqueNativeCapacity.getter();
    if ((v44 & 1) == 0 && v43 >= v42) {
      goto LABEL_109;
    }
    uint64_t v45 = _StringGuts.uniqueNativeCapacity.getter();
    if (v46)
    {
      unint64_t v129 = v38[1];
      if ((v129 & 0x1000000000000000) != 0)
      {
        Swift::Int v47 = String.UTF8View._foreignCount()();
      }
      else if ((v129 & 0x2000000000000000) != 0)
      {
        Swift::Int v47 = HIBYTE(v129) & 0xF;
      }
      else
      {
        Swift::Int v47 = *v38 & 0xFFFFFFFFFFFFLL;
      }
    }
    else
    {
      Swift::Int v47 = 2 * v45;
    }
    if (v47 > v42) {
      int64_t v42 = v47;
    }
    unint64_t v131 = v38[1];
    if ((v131 & 0x1000000000000000) == 0)
    {
      uint64_t v132 = *v38;
      if ((v131 & 0x2000000000000000) == 0)
      {
        if ((v132 & 0x1000000000000000) != 0)
        {
LABEL_73:
          uint64_t v133 = (char *)((v131 & 0xFFFFFFFFFFFFFFFLL) + 32);
          size_t v134 = v132 & 0xFFFFFFFFFFFFLL;
LABEL_74:
          int64_t v135 = specialized static __StringStorage.create(initializingFrom:codeUnitCapacity:isASCII:)(v133, v134, v42, v132 < 0);
LABEL_108:
          uint64_t v153 = *(void *)(v135 + 24);
          swift_bridgeObjectRelease(v38[1]);
          uint64_t *v38 = v153;
          v38[1] = v135;
LABEL_109:
          uint64_t v154 = v38[1] & 0xFFFFFFFFFFFFFFFLL;
          __StringStorage.replace(from:to:with:)(v39, (uint64_t)v23, (char *)v6, v34);
          uint64_t *v38 = *(void *)(v154 + 24);
          swift_bridgeObjectRelease(v37);
          return v39;
        }
LABEL_102:
        uint64_t v133 = (char *)_StringObject.sharedUTF8.getter(v132, v131);
        goto LABEL_74;
      }
      goto LABEL_103;
    }
    goto LABEL_134;
  }
  v192 &= 0xFFFFFFFFFFFFFFuLL;
  uint64_t v39 = v183 >> 16;
  uint64_t v105 = v182 >> 16;
  unint64_t v106 = (uint64_t *)v185;
  unint64_t v107 = v185[1];
  if ((v107 & 0x2000000000000000) != 0) {
    uint64_t v108 = HIBYTE(v107) & 0xF;
  }
  else {
    uint64_t v108 = *v185 & 0xFFFFFFFFFFFFLL;
  }
  int64_t v109 = v108 - v105 + (HIBYTE(v37) & 0xF) + (v183 >> 16);
  if (v109 > 15)
  {
    uint64_t v110 = _StringGuts.uniqueNativeCapacity.getter();
    if ((v111 & 1) != 0 || v110 < v109)
    {
      uint64_t v112 = _StringGuts.uniqueNativeCapacity.getter();
      if (v113)
      {
        unint64_t v130 = v106[1];
        if ((v130 & 0x1000000000000000) != 0)
        {
          Swift::Int v114 = String.UTF8View._foreignCount()();
        }
        else if ((v130 & 0x2000000000000000) != 0)
        {
          Swift::Int v114 = HIBYTE(v130) & 0xF;
        }
        else
        {
          Swift::Int v114 = *v106 & 0xFFFFFFFFFFFFLL;
        }
      }
      else
      {
        Swift::Int v114 = 2 * v112;
      }
      if (v114 > v109) {
        int64_t v109 = v114;
      }
      unint64_t v136 = v106[1];
      if ((v136 & 0x1000000000000000) != 0)
      {
        _StringGuts._foreignGrow(_:)(v109);
      }
      else
      {
        uint64_t v137 = *v106;
        if ((v136 & 0x2000000000000000) != 0)
        {
          size_t v141 = HIBYTE(v136) & 0xF;
          uint64_t __src = v137;
          uint64_t v187 = v136 & 0xFFFFFFFFFFFFFFLL;
          unint64_t v142 = v141 | 0xC000000000000000;
          if ((v136 & 0x4000000000000000) == 0) {
            unint64_t v142 = HIBYTE(v136) & 0xF;
          }
          uint64_t v143 = v142 | 0x3000000000000000;
          int64_t v140 = _allocateStringStorage(codeUnitCapacity:)(v109);
          *(void *)(v140 + 16) = v144;
          *(void *)(v140 + 24) = v143;
          if (v144 < 0)
          {
            *(void *)__StringStorage._breadcrumbsAddress.getter() = 0;
            uint64_t v143 = *(void *)(v140 + 24);
          }
          *(unsigned char *)(v140 + 32 + (v143 & 0xFFFFFFFFFFFFLL)) = 0;
          specialized UnsafeMutablePointer.initialize(from:count:)((char *)&__src, v141, (char *)(v140 + 32));
          unint64_t v106 = (uint64_t *)v185;
        }
        else
        {
          if ((v137 & 0x1000000000000000) != 0)
          {
            uint64_t v138 = (char *)((v136 & 0xFFFFFFFFFFFFFFFLL) + 32);
            size_t v139 = v137 & 0xFFFFFFFFFFFFLL;
          }
          else
          {
            uint64_t v138 = (char *)_StringObject.sharedUTF8.getter(*v106, v136);
          }
          int64_t v140 = specialized static __StringStorage.create(initializingFrom:codeUnitCapacity:isASCII:)(v138, v139, v109, v137 < 0);
        }
        uint64_t v145 = *(void *)(v140 + 24);
        swift_bridgeObjectRelease(v106[1]);
        uint64_t *v106 = v145;
        v106[1] = v140;
      }
    }
  }
  uint64_t v146 = v106[1] & 0xFFFFFFFFFFFFFFFLL;
  __StringStorage.replace(from:to:with:)(v39, v105, (char *)&v191, HIBYTE(v37) & 0xF);
  swift_bridgeObjectRelease(v37);
  uint64_t *v106 = *(void *)(v146 + 24);
  return v39;
}

uint64_t String.UnicodeScalarView.init()()
{
  return 0;
}

void __StringStorage.replace(from:to:with:)(uint64_t a1, uint64_t a2, char *a3, size_t a4)
{
  unint64_t v8 = (char *)(v4 + 32 + a1);
  size_t v9 = (*(void *)(v4 + 24) & 0xFFFFFFFFFFFFLL) - a2;
  specialized UnsafeMutablePointer.moveInitialize(from:count:)((char *)(v4 + 32 + a2), v9, &v8[a4], "UnsafeMutablePointer.moveInitialize with negative count", 55, 0x416uLL);
  specialized UnsafeMutablePointer.moveInitialize(from:count:)(a3, a4, v8, "UnsafeMutablePointer.moveInitialize with negative count", 55, 0x416uLL);
  if ((*(void *)(v4 + 24) & 0x8000000000000000) == 0)
  {
    BOOL v10 = 0;
    size_t v11 = a1 + a4;
    if (!__OFADD__(a1, a4)) {
      goto LABEL_3;
    }
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  BOOL v10 = _allASCII(_:)((uint64_t *)a3, a4);
  size_t v11 = a1 + a4;
  if (__OFADD__(a1, a4)) {
    goto LABEL_9;
  }
LABEL_3:
  BOOL v12 = __OFADD__(v11, v9);
  Swift::Int v13 = v11 + v9;
  if (v12)
  {
LABEL_10:
    __break(1u);
    return;
  }

  __StringStorage._updateCountAndFlags(newCount:newIsASCII:)(v13, v10);
}

void specialized __StringStorage.replace<A>(from:to:with:replacementCount:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, atomic_ullong *a6, uint64_t a7)
{
  uint64_t v8 = v7;
  Swift::Int v13 = (unsigned char *)(v8 + 32 + a1);
  size_t v14 = (*(void *)(v8 + 24) & 0xFFFFFFFFFFFFLL) - a2;
  specialized UnsafeMutablePointer.moveInitialize(from:count:)((char *)(v8 + 32 + a2), v14, &v13[a7], "UnsafeMutablePointer.moveInitialize with negative count", 55, 0x416uLL);
  uint64_t v15 = *(void *)(v8 + 24);
  uint64_t v29 = a4;
  uint64_t v30 = (uint64_t)a6;
  swift_bridgeObjectRetain(a4);
  swift_retain(a6);
  unint64_t v16 = specialized LazyMapSequence.Iterator.next()();
  if ((v16 & 0x100000000) == 0)
  {
    unsigned int v17 = v16;
    char v18 = specialized Unicode.Scalar.withUTF8CodeUnits<A>(_:)(v16, 0);
    unint64_t v19 = 1;
    LOBYTE(v21) = v18 >= 0 && v15 < 0;
    *Swift::Int v13 = v18;
    uint64_t v22 = 1;
    while (v17 > 0x7F)
    {
      if (v17 >= 0x800)
      {
        if (v17 >= 0x10000)
        {
          if (v19 == 4) {
            goto LABEL_27;
          }
        }
        else if (v19 == 3)
        {
          goto LABEL_27;
        }
        if ((v19 & 0x8000000000000000) != 0) {
          goto LABEL_39;
        }
        if (v17 >= 0x10000)
        {
          if (v19 >= 4) {
LABEL_39:
          }
            _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unicode.Scalar.UTF8View index is out of bounds", 46, 2, "Swift/UnicodeScalar.swift", 25, 2, 0x1E9uLL, 0);
          uint64_t v25 = 4;
        }
        else
        {
          if (v19 >= 3) {
            goto LABEL_39;
          }
          uint64_t v25 = 3;
        }
        unint64_t v28 = v25;
        char v23 = specialized Unicode.Scalar.withUTF8CodeUnits<A>(_:)(v17, v19);
        if (v19 >= v28) {
          _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Index out of bounds", 19, 2, "Swift/Collection.swift", 22, 2, 0x2CAuLL, 0);
        }
LABEL_13:
        ++v19;
        LOBYTE(v21) = (v23 >= 0) & v21;
        v13[v22] = v23;
        if (__OFADD__(v22++, 1)) {
          goto LABEL_42;
        }
      }
      else
      {
        if (v19 != 2)
        {
          if (v19 >= 2) {
            goto LABEL_39;
          }
          goto LABEL_12;
        }
LABEL_27:
        unint64_t v26 = specialized LazyMapSequence.Iterator.next()();
        if ((v26 & 0x100000000) != 0) {
          goto LABEL_34;
        }
        unsigned int v17 = v26;
        unint64_t v19 = 0;
      }
    }
    if (v19 != 1)
    {
      if (v19) {
        goto LABEL_39;
      }
LABEL_12:
      char v23 = specialized Unicode.Scalar.withUTF8CodeUnits<A>(_:)(v17, v19);
      goto LABEL_13;
    }
    goto LABEL_27;
  }
  unint64_t v21 = (unint64_t)v15 >> 63;
LABEL_34:
  swift_release(v30);
  swift_bridgeObjectRelease(v29);
  uint64_t v27 = a1 + a7;
  if (__OFADD__(a1, a7))
  {
    __break(1u);
  }
  else if (!__OFADD__(v27, v14))
  {
    __StringStorage._updateCountAndFlags(newCount:newIsASCII:)(v27 + v14, v21 & 1);
    return;
  }
  __break(1u);
LABEL_42:
  __break(1u);
}

{
  uint64_t v7;
  uint64_t v8;
  size_t v13;
  uint64_t v14;
  uint64_t v15;
  __int16 v16;
  uint64_t v18;
  uint64_t vars8;

  uint64_t v8 = v7;
  Swift::Int v13 = (*(void *)(v8 + 24) & 0xFFFFFFFFFFFFLL) - a2;
  specialized UnsafeMutablePointer.moveInitialize(from:count:)((char *)(v8 + 32 + a2), v13, (char *)(v8 + 32 + a1 + a7), "UnsafeMutablePointer.moveInitialize with negative count", 55, 0x416uLL);
  size_t v14 = *(void *)(v8 + 24) >> 63;
  swift_bridgeObjectRetain(a4);
  swift_retain(a6);
  uint64_t v15 = 0;
  while (1)
  {
    unint64_t v16 = specialized FlattenSequence.Iterator.next()();
    if ((v16 & 0x100) != 0) {
      break;
    }
    LOBYTE(v14) = ((v16 & 0x80u) == 0) & v14;
    *(unsigned char *)(v8 + a1 + v15 + 32) = v16;
    if (__OFADD__(v15++, 1))
    {
      __break(1u);
      break;
    }
  }
  swift_release((uint64_t)a6);
  swift_bridgeObjectRelease(a4);
  swift_bridgeObjectRelease(0);
  char v18 = a1 + a7;
  if (__OFADD__(a1, a7))
  {
    __break(1u);
    goto LABEL_12;
  }
  if (__OFADD__(v18, v13))
  {
LABEL_12:
    __break(1u);
    return;
  }

  __StringStorage._updateCountAndFlags(newCount:newIsASCII:)(v18 + v13, v14 & 1);
}

{
  uint64_t v7;
  uint64_t v8;
  size_t v13;
  uint64_t v14;
  uint64_t v15;
  __int16 v16;
  uint64_t v18;
  uint64_t vars8;

  uint64_t v8 = v7;
  Swift::Int v13 = (*(void *)(v8 + 24) & 0xFFFFFFFFFFFFLL) - a2;
  specialized UnsafeMutablePointer.moveInitialize(from:count:)((char *)(v8 + 32 + a2), v13, (char *)(v8 + 32 + a1 + a7), "UnsafeMutablePointer.moveInitialize with negative count", 55, 0x416uLL);
  size_t v14 = *(void *)(v8 + 24) >> 63;
  swift_bridgeObjectRetain(a4);
  swift_retain(a6);
  uint64_t v15 = 0;
  while (1)
  {
    unint64_t v16 = specialized FlattenSequence.Iterator.next()();
    if ((v16 & 0x100) != 0) {
      break;
    }
    LOBYTE(v14) = ((v16 & 0x80u) == 0) & v14;
    *(unsigned char *)(v8 + a1 + v15 + 32) = v16;
    if (__OFADD__(v15++, 1))
    {
      __break(1u);
      break;
    }
  }
  swift_bridgeObjectRelease(a4);
  swift_release((uint64_t)a6);
  swift_bridgeObjectRelease(0);
  char v18 = a1 + a7;
  if (__OFADD__(a1, a7))
  {
    __break(1u);
    goto LABEL_12;
  }
  if (__OFADD__(v18, v13))
  {
LABEL_12:
    __break(1u);
    return;
  }

  __StringStorage._updateCountAndFlags(newCount:newIsASCII:)(v18 + v13, v14 & 1);
}

void specialized __StringStorage.replace<A>(from:to:with:replacementCount:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  size_t v9 = (*(void *)(v5 + 24) & 0xFFFFFFFFFFFFLL) - a2;
  specialized UnsafeMutablePointer.moveInitialize(from:count:)((char *)(v5 + 32 + a2), v9, (char *)(v5 + 32 + a1 + a4), "UnsafeMutablePointer.moveInitialize with negative count", 55, 0x416uLL);
  uint64_t v10 = *(void *)(v5 + 24) >> 63;
  size_t v11 = *(atomic_ullong **)(a3 + 40);
  unint64_t v16 = *(void *)(a3 + 24);
  uint64_t v17 = (uint64_t)v11;
  swift_bridgeObjectRetain(v16);
  swift_retain(v11);
  uint64_t v12 = 0;
  while (1)
  {
    __int16 v13 = specialized FlattenSequence.Iterator.next()();
    if ((v13 & 0x100) != 0) {
      break;
    }
    LOBYTE(v1_assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000015, 0x80000001816DF320, "Swift/StringGuts.swift", 22, 2, 0x1A9uLL, 0) = ((v13 & 0x80u) == 0) & v10;
    *(unsigned char *)(v5 + a1 + v12 + 32) = v13;
    if (__OFADD__(v12++, 1))
    {
      __break(1u);
      break;
    }
  }
  swift_release(v17);
  swift_bridgeObjectRelease(v16);
  swift_bridgeObjectRelease(0);
  uint64_t v15 = a1 + a4;
  if (__OFADD__(a1, a4))
  {
    __break(1u);
    goto LABEL_12;
  }
  if (__OFADD__(v15, v9))
  {
LABEL_12:
    __break(1u);
    return;
  }

  __StringStorage._updateCountAndFlags(newCount:newIsASCII:)(v15 + v9, v10 & 1);
}

void specialized __StringStorage.replace<A>(from:to:with:replacementCount:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, atomic_ullong *a5, uint64_t a6)
{
  uint64_t v7 = v6;
  size_t v12 = (*(void *)(v7 + 24) & 0xFFFFFFFFFFFFLL) - a2;
  specialized UnsafeMutablePointer.moveInitialize(from:count:)((char *)(v7 + 32 + a2), v12, (char *)(v7 + 32 + a1 + a6), "UnsafeMutablePointer.moveInitialize with negative count", 55, 0x416uLL);
  uint64_t v13 = *(void *)(v7 + 24) >> 63;
  swift_bridgeObjectRetain(a3);
  swift_retain(a5);
  uint64_t v14 = 0;
  while (1)
  {
    __int16 v15 = specialized FlattenSequence.Iterator.next()();
    if ((v15 & 0x100) != 0) {
      break;
    }
    LOBYTE(v13) = ((v15 & 0x80u) == 0) & v13;
    *(unsigned char *)(v7 + a1 + v14 + 32) = v15;
    if (__OFADD__(v14++, 1))
    {
      __break(1u);
      break;
    }
  }
  swift_bridgeObjectRelease(a3);
  swift_release((uint64_t)a5);
  swift_bridgeObjectRelease(0);
  uint64_t v17 = a1 + a6;
  if (__OFADD__(a1, a6))
  {
    __break(1u);
    goto LABEL_12;
  }
  if (__OFADD__(v17, v12))
  {
LABEL_12:
    __break(1u);
    return;
  }

  __StringStorage._updateCountAndFlags(newCount:newIsASCII:)(v17 + v12, v13 & 1);
}

void specialized __StringStorage.replace<A>(from:to:with:replacementCount:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  size_t v8 = (*(void *)(v5 + 24) & 0xFFFFFFFFFFFFLL) - a2;
  specialized UnsafeMutablePointer.moveInitialize(from:count:)((char *)(v5 + 32 + a2), v8, (char *)(v5 + 32 + a1 + a5), "UnsafeMutablePointer.moveInitialize with negative count", 55, 0x416uLL);
  uint64_t v9 = a1 + a5;
  if (__OFADD__(a1, a5))
  {
    __break(1u);
    goto LABEL_7;
  }
  if (__OFADD__(v9, v8))
  {
LABEL_7:
    __break(1u);
    return;
  }
  BOOL v10 = *(void *)(v5 + 24) >> 63;

  __StringStorage._updateCountAndFlags(newCount:newIsASCII:)(v9 + v8, v10);
}

void specialized __StringStorage.replace<A>(from:to:with:replacementCount:)(uint64_t a1, uint64_t a2, int a3, void (*a4)(uint64_t *__return_ptr, char *), atomic_ullong *a5, uint64_t a6)
{
  uint64_t v7 = v6;
  size_t v12 = (unsigned char *)(v7 + 32 + a1);
  size_t v24 = (*(void *)(v7 + 24) & 0xFFFFFFFFFFFFLL) - a2;
  specialized UnsafeMutablePointer.moveInitialize(from:count:)((char *)(v7 + 32 + a2), v24, &v12[a6], "UnsafeMutablePointer.moveInitialize with negative count", 55, 0x416uLL);
  uint64_t v13 = *(void *)(v7 + 24);
  swift_retain(a5);
  HIDWORD(v26) = a3;
  a4(&v26, (char *)&v26 + 4);
  unsigned int v14 = v26;
  char v15 = Unicode.Scalar.UTF8View.subscript.getter(0, v26);
  unint64_t v16 = specialized RandomAccessCollection<>.index(after:)(0, v14);
  char v18 = v15 >= 0 && v13 < 0;
  *size_t v12 = v15;
  uint64_t v19 = v7 + a1;
  uint64_t v20 = 33;
  while (1)
  {
    if (v14 < 0x80)
    {
      if (v16 == 1) {
        break;
      }
      goto LABEL_8;
    }
    if (v14 < 0x800)
    {
      if (v16 == 2) {
        break;
      }
      goto LABEL_8;
    }
    if (v14 < 0x10000)
    {
      if (v16 == 3) {
        break;
      }
      goto LABEL_8;
    }
    if (v16 == 4) {
      break;
    }
LABEL_8:
    uint64_t v21 = v20 - 32;
    char v22 = Unicode.Scalar.UTF8View.subscript.getter(v16, v14);
    unint64_t v16 = specialized RandomAccessCollection<>.index(after:)(v16, v14);
    v18 &= v22 >= 0;
    *(unsigned char *)(v19 + v20++) = v22;
    if (__OFADD__(v21, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
  }
  swift_release((uint64_t)a5);
  uint64_t v23 = a1 + a6;
  if (__OFADD__(a1, a6))
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  if (__OFADD__(v23, v24))
  {
LABEL_26:
    __break(1u);
    return;
  }

  __StringStorage._updateCountAndFlags(newCount:newIsASCII:)(v23 + v24, v18 & 1);
}

void specialized __StringStorage.replace<A>(from:to:with:replacementCount:)(uint64_t a1, uint64_t a2, uint64_t a3, atomic_ullong *a4, uint64_t a5)
{
  size_t v9 = (*(void *)(v5 + 24) & 0xFFFFFFFFFFFFLL) - a2;
  specialized UnsafeMutablePointer.moveInitialize(from:count:)((char *)(v5 + 32 + a2), v9, (char *)(v5 + 32 + a1 + a5), "UnsafeMutablePointer.moveInitialize with negative count", 55, 0x416uLL);
  uint64_t v10 = *(void *)(v5 + 24) >> 63;
  swift_retain(a4);
  uint64_t v11 = 0;
  while (1)
  {
    __int16 v12 = specialized FlattenSequence.Iterator.next()();
    if ((v12 & 0x100) != 0) {
      break;
    }
    LOBYTE(v1_assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000015, 0x80000001816DF320, "Swift/StringGuts.swift", 22, 2, 0x1A9uLL, 0) = ((v12 & 0x80u) == 0) & v10;
    *(unsigned char *)(v5 + a1 + v11 + 32) = v12;
    if (__OFADD__(v11++, 1))
    {
      __break(1u);
      break;
    }
  }
  swift_release((uint64_t)a4);
  swift_bridgeObjectRelease(0);
  uint64_t v14 = a1 + a5;
  if (__OFADD__(a1, a5))
  {
    __break(1u);
    goto LABEL_12;
  }
  if (__OFADD__(v14, v9))
  {
LABEL_12:
    __break(1u);
    return;
  }

  __StringStorage._updateCountAndFlags(newCount:newIsASCII:)(v14 + v9, v10 & 1);
}

void __StringStorage.replace<A>(from:to:with:replacementCount:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void (*v24)(uint64_t *__return_ptr, const char *, uint64_t);
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  size_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  uint64_t v6 = v5;
  unint64_t v32 = a3;
  uint64_t v11 = *(void *)(a5 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v13 = (char *)&v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = *(void *)(v14 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (int **)v15, a5, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Iterator);
  uint64_t v30 = *((void *)AssociatedTypeWitness - 1);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  char v18 = (char *)&v28 - v17;
  unint64_t v31 = a4;
  uint64_t v19 = a1 + a4;
  uint64_t v20 = a1;
  uint64_t v29 = (*(void *)(v6 + 24) & 0xFFFFFFFFFFFFLL) - a2;
  specialized UnsafeMutablePointer.moveInitialize(from:count:)((char *)(v6 + 32 + a2), v29, (char *)(v6 + 32 + v19), "UnsafeMutablePointer.moveInitialize with negative count", 55, 0x416uLL);
  uint64_t v21 = *(void *)(v6 + 24) >> 63;
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, v32, a5);
  (*(void (**)(uint64_t, uint64_t))(v15 + 32))(a5, v15);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v15, a5, (uint64_t)AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Sequence, associated conformance descriptor for Sequence.Sequence.Iterator: IteratorProtocol);
  uint64_t v23 = 0;
  size_t v24 = *(void (**)(uint64_t *__return_ptr, const char *, uint64_t))(AssociatedConformanceWitness + 16);
  unint64_t v32 = v20;
  uint64_t v25 = v6 + v20;
  while (1)
  {
    v24(&v33, AssociatedTypeWitness, AssociatedConformanceWitness);
    if ((v33 & 0x100) != 0) {
      break;
    }
    LOBYTE(v21) = ((v33 & 0x80u) == 0) & v21;
    *(unsigned char *)(v25 + v23 + 32) = v33;
    if (__OFADD__(v23++, 1))
    {
      __break(1u);
      break;
    }
  }
  (*(void (**)(char *, const char *))(v30 + 8))(v18, AssociatedTypeWitness);
  uint64_t v27 = v32 + v31;
  if (__OFADD__(v32, v31))
  {
    __break(1u);
  }
  else if (!__OFADD__(v27, v29))
  {
    __StringStorage._updateCountAndFlags(newCount:newIsASCII:)(v27 + v29, v21 & 1);
    return;
  }
  __break(1u);
}

uint64_t _StringGuts.mutateSubrangeInSubstring(subrange:startIndex:endIndex:with:)(Swift::UInt64 a1, Swift::UInt64 a2, uint64_t *a3, Swift::UInt64 *a4, uint64_t (*a5)(uint64_t *))
{
  uint64_t v7 = v5;
  size_t v8 = a5;
  unint64_t v13 = v5[1];
  if ((v13 & 0x1000000000000000) != 0)
  {
    uint64_t v6 = *v5;
    if ((*v5 & 0x800000000000000) == 0)
    {
LABEL_35:
      v29._Swift::UInt64 rawBits = *a3;
      Swift::UInt64 v30 = *a3;
      uint64_t v53 = *a3 & 0xC;
      if (v53 == 4) {
        goto LABEL_75;
      }
      while (1)
      {
        unint64_t v31 = HIBYTE(v13) & 0xF;
        if ((v13 & 0x2000000000000000) == 0) {
          unint64_t v31 = v6 & 0xFFFFFFFFFFFFLL;
        }
        Swift::UInt64 v54 = v31;
        if (v31 < v30 >> 16) {
LABEL_79:
        }
          _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index is out of bounds", 29, 2, "Swift/StringUTF8View.swift", 26, 2, 0xCFuLL, 0);
        Swift::Int startingAt = String.UTF8View._foreignDistance(from:to:)((Swift::String::Index)15, (Swift::String::Index)v30);
        Swift::UInt64 rawBits = *a4;
        if (v53 == 4)
        {
          v33._Swift::UInt64 rawBits = v29._rawBits;
          Swift::UInt64 v34 = *a4;
          v35._Swift::UInt64 rawBits = _StringGuts._slowEnsureMatchingEncoding(_:)(v33)._rawBits;
          Swift::UInt64 rawBits = v34;
          v29._Swift::UInt64 rawBits = v35._rawBits;
        }
        Swift::UInt64 v36 = v54;
        if ((rawBits & 0xC) == 4)
        {
          v50._Swift::UInt64 rawBits = _StringGuts._slowEnsureMatchingEncoding(_:)((Swift::String::Index)rawBits)._rawBits;
          Swift::UInt64 v36 = v54;
          Swift::UInt64 rawBits = v50._rawBits;
          if (v54 < v29._rawBits >> 16) {
            goto LABEL_79;
          }
        }
        else if (v54 < v29._rawBits >> 16)
        {
          goto LABEL_79;
        }
        if (v36 < rawBits >> 16) {
          goto LABEL_79;
        }
        v29._Swift::UInt64 rawBits = String.UTF8View._foreignDistance(from:to:)(v29, (Swift::String::Index)rawBits);
        if ((a1 & 0xC) == 4) {
          a1 = _StringGuts._slowEnsureMatchingEncoding(_:)((Swift::String::Index)a1)._rawBits;
        }
        Swift::UInt64 v37 = v54;
        if ((a2 & 0xC) == 4)
        {
          v51._Swift::UInt64 rawBits = _StringGuts._slowEnsureMatchingEncoding(_:)((Swift::String::Index)a2)._rawBits;
          Swift::UInt64 v37 = v54;
          a2 = v51._rawBits;
          if (v54 < a1 >> 16) {
            goto LABEL_79;
          }
        }
        else if (v54 < a1 >> 16)
        {
          goto LABEL_79;
        }
        if (v37 < a2 >> 16) {
          goto LABEL_79;
        }
        Swift::Int v38 = String.UTF8View._foreignDistance(from:to:)((Swift::String::Index)a1, (Swift::String::Index)a2);
        uint64_t v39 = v8(v7);
        uint64_t v41 = v40 - v39;
        if (__OFSUB__(v40, v39)) {
          break;
        }
        BOOL v42 = __OFADD__(v29._rawBits, v41);
        Swift::UInt64 v43 = v29._rawBits + v41;
        if (v42) {
          goto LABEL_82;
        }
        size_t v8 = (uint64_t (*)(uint64_t *))(v43 - v38);
        if (__OFSUB__(v43, v38)) {
          goto LABEL_83;
        }
        if (v39 == v40)
        {
          Swift::Int v44 = 0;
          Swift::Int v45 = startingAt << 16;
LABEL_69:
          v45 |= v44 << 8;
          goto LABEL_70;
        }
        uint64_t v46 = *v7;
        v29._Swift::UInt64 rawBits = v7[1];
        if ((v29._rawBits & 0x1000000000000000) == 0)
        {
          if ((v29._rawBits & 0x2000000000000000) != 0)
          {
            uint64_t v55 = *v7;
            uint64_t v56 = v29._rawBits & 0xFFFFFFFFFFFFFFLL;
            if (startingAt + 1 == (HIBYTE(v29._rawBits) & 0xF)) {
              goto LABEL_68;
            }
            int v49 = *(unsigned __int16 *)((char *)&v55 + startingAt);
          }
          else
          {
            if ((v46 & 0x1000000000000000) != 0)
            {
              Swift::Int v47 = (char *)((v29._rawBits & 0xFFFFFFFFFFFFFFFLL) + 32);
              uint64_t v48 = v46 & 0xFFFFFFFFFFFFLL;
            }
            else
            {
              Swift::Int v47 = (char *)_StringObject.sharedUTF8.getter(*v7, v7[1]);
            }
            if (startingAt + 1 == v48)
            {
LABEL_68:
              Swift::Int v45 = startingAt << 16;
              Swift::Int v44 = 1;
              goto LABEL_69;
            }
            if (!v47) {
              goto LABEL_80;
            }
            int v49 = *(unsigned __int16 *)&v47[startingAt];
          }
          if (v49 != 2573 && (v49 & 0x80808080) == 0) {
            goto LABEL_68;
          }
        }
LABEL_84:
        Swift::Int v44 = _StringGuts._opaqueComplexCharacterStride(startingAt:)(startingAt);
        Swift::Int v45 = startingAt << 16;
        if (v44 <= 63) {
          goto LABEL_69;
        }
LABEL_70:
        *a3 = v45 | 5;
        uint64_t result = _StringGuts.isOnGraphemeClusterBoundary(_:)((Swift::String::Index)(v45 | 5));
        if (result) {
          *a3 = v45 | 7;
        }
        a2 = (Swift::UInt64)v8 + startingAt;
        if (!__OFADD__(startingAt, v8)) {
          goto LABEL_32;
        }
        __break(1u);
LABEL_75:
        Swift::UInt64 v30 = _StringGuts._slowEnsureMatchingEncoding(_:)(v29)._rawBits;
      }
      __break(1u);
LABEL_82:
      __break(1u);
LABEL_83:
      __break(1u);
      goto LABEL_84;
    }
  }
  uint64_t result = a5(v5);
  if (__OFSUB__(v15, result))
  {
    __break(1u);
    goto LABEL_35;
  }
  Swift::UInt64 v16 = a1 >> 16;
  Swift::UInt64 v17 = *a3;
  unint64_t v18 = (unint64_t)*a3 >> 16;
  Swift::UInt64 v19 = v15 - result + (a1 >> 16) - (a2 >> 16);
  a2 = v19 + (*a4 >> 16);
  uint64_t v20 = ((unint64_t)*a3 >> 8) & 0x3F;
  if (v20)
  {
    if (v20 + v18 < v16) {
      goto LABEL_31;
    }
  }
  else if (v18 < v16)
  {
    goto LABEL_31;
  }
  if (v18 == a2)
  {
    uint64_t result = 0;
    unint64_t v21 = v17 & 0xFFFFFFFFFFFF0000;
LABEL_25:
    v21 |= result << 8;
    goto LABEL_26;
  }
  uint64_t v22 = *v7;
  unint64_t v23 = v7[1];
  if ((v23 & 0x1000000000000000) == 0)
  {
    if ((v23 & 0x2000000000000000) != 0)
    {
      uint64_t v55 = *v7;
      uint64_t v56 = v23 & 0xFFFFFFFFFFFFFFLL;
      if (v18 + 1 == (HIBYTE(v23) & 0xF)) {
        goto LABEL_24;
      }
      int v26 = *(unsigned __int16 *)((char *)&v55 + v18);
    }
    else
    {
      if ((v22 & 0x1000000000000000) != 0)
      {
        size_t v24 = (char *)((v23 & 0xFFFFFFFFFFFFFFFLL) + 32);
        uint64_t v25 = v22 & 0xFFFFFFFFFFFFLL;
      }
      else
      {
        size_t v24 = (char *)_StringObject.sharedUTF8.getter(*v7, v7[1]);
      }
      if (v18 + 1 == v25) {
        goto LABEL_24;
      }
      if (!v24) {
LABEL_80:
      }
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "unsafelyUnwrapped of nil optional", 33, 2, "Swift/Optional.swift", 20, 2, 0x163uLL, 0);
      int v26 = *(unsigned __int16 *)&v24[v18];
    }
    if (v26 == 2573 || (v26 & 0x8080) != 0) {
      goto LABEL_54;
    }
LABEL_24:
    unint64_t v21 = v17 & 0xFFFFFFFFFFFF0000;
    uint64_t result = 1;
    goto LABEL_25;
  }
LABEL_54:
  uint64_t result = _StringGuts._opaqueComplexCharacterStride(startingAt:)(v18);
  unint64_t v21 = v17 & 0xFFFFFFFFFFFF0000;
  if (result <= 63) {
    goto LABEL_25;
  }
LABEL_26:
  uint64_t v28 = v21 | 5;
  if ((v17 & 2) != 0)
  {
    if (v18 < v16
      || (uint64_t result = _StringGuts.isOnGraphemeClusterBoundary(_:)((Swift::String::Index)(v21 | 5)), (result & 1) != 0))
    {
      uint64_t v28 = v21 | 7;
    }
  }
  *a3 = v28;
LABEL_31:
  if (v19) {
LABEL_32:
  }
    *a4 = (a2 << 16) | 5;
  return result;
}

Swift::Int __swiftcall String.UTF8View.distance(from:to:)(Swift::String::Index from, Swift::String::Index to)
{
  unint64_t v4 = v3;
  unint64_t v5 = v2;
  Swift::UInt64 rawBits = from._rawBits;
  uint64_t v8 = (v2 >> 59) & 1;
  if ((v3 & 0x1000000000000000) == 0) {
    LOBYTE(v8) = 1;
  }
  uint64_t v9 = 4 << v8;
  if ((from._rawBits & 0xC) == 4 << v8) {
    Swift::UInt64 rawBits = _StringGuts._slowEnsureMatchingEncoding(_:)(from)._rawBits;
  }
  if ((to._rawBits & 0xC) == v9)
  {
    to._Swift::UInt64 rawBits = _StringGuts._slowEnsureMatchingEncoding(_:)(to)._rawBits;
    if ((v4 & 0x1000000000000000) == 0) {
      return (to._rawBits >> 16) - (rawBits >> 16);
    }
  }
  else if ((v4 & 0x1000000000000000) == 0)
  {
    return (to._rawBits >> 16) - (rawBits >> 16);
  }
  unint64_t v11 = HIBYTE(v4) & 0xF;
  if ((v4 & 0x2000000000000000) == 0) {
    unint64_t v11 = v5 & 0xFFFFFFFFFFFFLL;
  }
  if (v11 < rawBits >> 16 || v11 < to._rawBits >> 16) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index is out of bounds", 29, 2, "Swift/StringUTF8View.swift", 26, 2, 0xCFuLL, 0);
  }

  return String.UTF8View._foreignDistance(from:to:)((Swift::String::Index)rawBits, to);
}

Swift::String::Index __swiftcall String.Index.init(encodedOffset:transcodedOffset:characterStride:)(Swift::Int encodedOffset, Swift::Int transcodedOffset, Swift::Int characterStride)
{
  Swift::Int v3 = characterStride << 8;
  if (characterStride > 63) {
    Swift::Int v3 = 0;
  }
  return (Swift::String::Index)((transcodedOffset << 14) | (encodedOffset << 16) | v3);
}

Swift::String::Index __swiftcall String.Index.init(encodedOffset:transcodedOffset:)(Swift::Int encodedOffset, Swift::Int transcodedOffset)
{
  return (Swift::String::Index)((transcodedOffset << 14) | (encodedOffset << 16));
}

uint64_t _StringObject.CountAndFlags._storage.setter(uint64_t result)
{
  void *v1 = result;
  return result;
}

uint64_t (*_StringObject.CountAndFlags._storage.modify())()
{
  return EnumeratedSequence._base.modify;
}

uint64_t _StringObject.CountAndFlags.init(zero:)()
{
  return 0;
}

uint64_t _StringObject._countAndFlagsBits.setter(uint64_t result)
{
  void *v1 = result;
  return result;
}

uint64_t (*_StringObject._countAndFlagsBits.modify())()
{
  return EnumeratedSequence._base.modify;
}

unint64_t _StringObject._object.getter(uint64_t a1, unint64_t a2)
{
  return swift_bridgeObjectRetain(a2);
}

void _StringObject._object.setter(uint64_t a1)
{
  swift_bridgeObjectRelease(*(void *)(v1 + 8));
  *(void *)(v1 + 8) = a1;
}

uint64_t (*_StringObject._object.modify())()
{
  return EnumeratedSequence._base.modify;
}

uint64_t _StringObject.discriminatedObjectRawBits.getter(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t _StringObject.init(bridgeObject:countAndFlags:)(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t _StringObject.init(object:discriminator:countAndFlags:)(unint64_t a1, uint64_t a2, uint64_t a3)
{
  return a3;
}

uint64_t _StringObject.init(pointerBits:discriminator:countAndFlags:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a3;
}

unint64_t static _StringObject.Nibbles.emptyString.getter()
{
  return 0xE000000000000000;
}

unint64_t static _StringObject.Nibbles.small(isASCII:)(char a1)
{
  if (a1) {
    return 0xE000000000000000;
  }
  else {
    return 0xA000000000000000;
  }
}

uint64_t static _StringObject.Nibbles.largeAddressMask.getter()
{
  return 0xFFFFFFFFFFFFFFFLL;
}

unint64_t static _StringObject.Nibbles.discriminatorMask.getter()
{
  return 0xF000000000000000;
}

unint64_t static _StringObject.Nibbles.largeImmortal()()
{
  return 0x8000000000000000;
}

uint64_t static _StringObject.Nibbles.largeMortal()()
{
  return 0;
}

uint64_t static _StringObject.nativeBias.getter()
{
  return 32;
}

BOOL _StringObject.isLarge.getter(uint64_t a1, uint64_t a2)
{
  return (a2 & 0x2000000000000000) == 0;
}

uint64_t _StringObject.largeFastIsTailAllocated.getter(unint64_t a1)
{
  return (a1 >> 60) & 1;
}

uint64_t _StringObject.CountAndFlags.isTailAllocated.getter(unint64_t a1)
{
  return (a1 >> 60) & 1;
}

uint64_t _StringObject.smallCount.getter(uint64_t a1, unint64_t a2)
{
  return HIBYTE(a2) & 0xF;
}

uint64_t static _StringObject.CountAndFlags.countMask.getter()
{
  return 0xFFFFFFFFFFFFLL;
}

unint64_t static _StringObject.CountAndFlags.flagsMask.getter()
{
  return 0xFFFF000000000000;
}

unint64_t static _StringObject.CountAndFlags.isASCIIMask.getter()
{
  return 0x8000000000000000;
}

uint64_t static _StringObject.CountAndFlags.isNFCMask.getter()
{
  return 0x4000000000000000;
}

uint64_t static _StringObject.CountAndFlags.isNativelyStoredMask.getter()
{
  return 0x2000000000000000;
}

uint64_t static _StringObject.CountAndFlags.isTailAllocatedMask.getter()
{
  return 0x1000000000000000;
}

BOOL static UInt64.<= infix(_:_:)(unint64_t a1, unint64_t a2)
{
  return a2 >= a1;
}

uint64_t _StringObject.CountAndFlags.count.getter(uint64_t a1)
{
  return a1 & 0xFFFFFFFFFFFFLL;
}

uint64_t _StringObject.CountAndFlags.isNFC.getter(unint64_t a1)
{
  return (a1 >> 62) & 1;
}

uint64_t _StringObject.CountAndFlags.isNativelyStored.getter(unint64_t a1)
{
  return (a1 >> 61) & 1;
}

Swift::_StringObject::CountAndFlags __swiftcall _StringObject.CountAndFlags.init(count:flags:)(Swift::Int count, Swift::UInt16 flags)
{
  return (Swift::_StringObject::CountAndFlags)(count | (flags << 48));
}

unint64_t _StringObject.CountAndFlags.flags.getter(unint64_t a1)
{
  return HIWORD(a1);
}

Swift::_StringObject::CountAndFlags __swiftcall _StringObject.CountAndFlags.init(immortalCount:isASCII:)(Swift::Int immortalCount, Swift::Bool isASCII)
{
  unint64_t v2 = immortalCount | 0xC000000000000000;
  if (!isASCII) {
    unint64_t v2 = immortalCount;
  }
  return (Swift::_StringObject::CountAndFlags)(v2 | 0x1000000000000000);
}

uint64_t _StringObject.largeCount.getter(uint64_t a1)
{
  return a1 & 0xFFFFFFFFFFFFLL;
}

uint64_t _StringObject.nativeUTF8Start.getter(uint64_t a1, uint64_t a2)
{
  return (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
}

uint64_t _StringObject.nativeUTF8.getter(uint64_t a1, uint64_t a2)
{
  return (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
}

id _StringObject.getSharedUTF8Start()(uint64_t a1, uint64_t a2)
{
  if ((a2 & 0x4000000000000000) != 0) {
    return [((id)(a2 & 0xFFFFFFFFFFFFFFFLL)) _fastCStringContents:1];
  }
  else {
    return *(id *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 0x18);
  }
}

id _StringObject.sharedUTF8.getter(uint64_t a1, uint64_t a2)
{
  return _StringObject.getSharedUTF8Start()(a1, a2);
}

uint64_t Unmanaged._withUnsafeGuaranteedRef<A>(_:)(uint64_t (*a1)(uint64_t), uint64_t a2, uint64_t a3)
{
  return a1(a3);
}

uint64_t specialized StringProtocol.hasPrefix<A>(_:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return specialized Sequence<>.starts<A>(with:)(a1, a2, a3, *(void *)(*(void *)(*(void *)(a4 + 8) + 8) + 8));
}

uint64_t StringProtocol.hasPrefix<A>(_:)(char *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return Sequence<>.starts<A>(with:)(a1, a2, a3, *(int ***)(*(void *)(*(void *)(a4 + 8) + 8) + 8), *(void *)(*(void *)(*(void *)(a5 + 8) + 8) + 8), (uint64_t)&protocol witness table for Character);
}

uint64_t specialized StringProtocol.hasSuffix<A>(_:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a3;
  uint64_t v8 = (unint64_t *)type metadata accessor for ReversedCollection(0, a3, *(void *)(a4 + 8), a4);
  uint64_t v9 = *(v8 - 1);
  MEMORY[0x1F4188790](v8);
  unint64_t v11 = (char *)&v15 - v10;
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))((char *)&v15 - v10, v4, v5);
  uint64_t WitnessTable = swift_getWitnessTable(protocol conformance descriptor for ReversedCollection<A>, v8, v12);
  LOBYTE(v5) = specialized Sequence<>.starts<A>(with:)(a1, a2, (uint64_t)v8, WitnessTable);
  (*(void (**)(char *, unint64_t *))(v9 + 8))(v11, v8);
  return v5 & 1;
}

uint64_t StringProtocol.hasSuffix<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = v5;
  uint64_t v8 = a3;
  unint64_t v11 = (unint64_t *)type metadata accessor for ReversedCollection(0, a3, *(void *)(a5 + 8), a4);
  uint64_t v12 = *(v11 - 1);
  MEMORY[0x1F4188790](v11);
  uint64_t v14 = (char *)&v25 - v13;
  Swift::UInt64 v16 = (unint64_t *)type metadata accessor for ReversedCollection(0, a2, *(void *)(a4 + 8), v15);
  uint64_t v17 = *(v16 - 1);
  MEMORY[0x1F4188790](v16);
  Swift::UInt64 v19 = (char *)&v25 - v18;
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(a2 - 8) + 16))((char *)&v25 - v18, v6, a2);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 16))(v14, a1, v8);
  uint64_t WitnessTable = (int **)swift_getWitnessTable(protocol conformance descriptor for ReversedCollection<A>, v16, v20);
  uint64_t v23 = swift_getWitnessTable(protocol conformance descriptor for ReversedCollection<A>, v11, v22);
  LOBYTE(v8) = Sequence<>.starts<A>(with:)(v14, (uint64_t)v16, (uint64_t)v11, WitnessTable, v23, (uint64_t)&protocol witness table for Character);
  (*(void (**)(char *, unint64_t *))(v12 + 8))(v14, v11);
  (*(void (**)(char *, unint64_t *))(v17 + 8))(v19, v16);
  return v8 & 1;
}

Swift::Void __swiftcall Substring._slowMakeContiguousUTF8()()
{
  uint64_t v2 = v0[2];
  unint64_t v1 = v0[3];
  v3._Swift::UInt64 rawBits = *v0;
  swift_bridgeObjectRetain(v1);
  v4._Swift::UInt64 rawBits = _StringGuts.validateInclusiveScalarIndex(_:)((Swift::String::Index)15)._rawBits;
  v5._Swift::UInt64 rawBits = _StringGuts.validateInclusiveScalarIndex(_:)(v3)._rawBits >> 14;
  if (v4._rawBits >> 14 < v5._rawBits)
  {
    uint64_t v6 = 0;
    while (1)
    {
      uint64_t v7 = v6 + 1;
      if (__OFADD__(v6, 1)) {
        break;
      }
      if ((v1 & 0x1000000000000000) != 0)
      {
        v4._Swift::UInt64 rawBits = String.UnicodeScalarView._foreignIndex(after:)(v4)._rawBits;
      }
      else
      {
        Swift::UInt64 v8 = v4._rawBits >> 16;
        if ((v1 & 0x2000000000000000) != 0)
        {
          uint64_t v86 = v2;
          uint64_t v87 = v1 & 0xFFFFFFFFFFFFFFLL;
          int v10 = *((unsigned __int8 *)&v86 + v8);
        }
        else
        {
          uint64_t v9 = (unsigned __int8 *)((v1 & 0xFFFFFFFFFFFFFFFLL) + 32);
          if ((v2 & 0x1000000000000000) == 0) {
            uint64_t v9 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v2, v1);
          }
          int v10 = v9[v8];
        }
        int v11 = (char)v10;
        unsigned int v12 = __clz(v10 ^ 0xFF) - 24;
        if (v11 >= 0) {
          LOBYTE(v12) = 1;
        }
        v4._Swift::UInt64 rawBits = ((v8 + v12) << 16) | 5;
      }
      ++v6;
      if (v5._rawBits <= v4._rawBits >> 14) {
        goto LABEL_34;
      }
    }
    __break(1u);
    goto LABEL_151;
  }
  if (v5._rawBits < v4._rawBits >> 14)
  {
    uint64_t v7 = 0;
    while (1)
    {
      BOOL v13 = __OFSUB__(v7--, 1);
      if (v13) {
        goto LABEL_152;
      }
      if ((v1 & 0x1000000000000000) != 0)
      {
        v4._Swift::UInt64 rawBits = String.UnicodeScalarView._foreignIndex(before:)(v4)._rawBits;
      }
      else
      {
        if ((v1 & 0x2000000000000000) != 0)
        {
          uint64_t v86 = v2;
          uint64_t v87 = v1 & 0xFFFFFFFFFFFFFFLL;
          if ((*((unsigned char *)&v86 + (v4._rawBits >> 16) - 1) & 0xC0) == 0x80)
          {
            uint64_t v18 = 0;
            do
              int v19 = *((unsigned char *)&v85 + (v4._rawBits >> 16) + v18-- + 6) & 0xC0;
            while (v19 == 128);
            uint64_t v17 = 1 - v18;
          }
          else
          {
            uint64_t v17 = 1;
          }
        }
        else
        {
          uint64_t v14 = (char *)((v1 & 0xFFFFFFFFFFFFFFFLL) + 32);
          if ((v2 & 0x1000000000000000) == 0) {
            uint64_t v14 = (char *)_StringObject.sharedUTF8.getter(v2, v1);
          }
          uint64_t v15 = 0;
          do
            int v16 = v14[(v4._rawBits >> 16) - 1 + v15--] & 0xC0;
          while (v16 == 128);
          uint64_t v17 = -v15;
        }
        v4._Swift::UInt64 rawBits = (v4._rawBits - (v17 << 16)) & 0xFFFFFFFFFFFF0000 | 5;
      }
      if (v5._rawBits >= v4._rawBits >> 14) {
        goto LABEL_34;
      }
    }
  }
  uint64_t v7 = 0;
LABEL_34:
  swift_bridgeObjectRelease(v1);
  uint64_t v21 = v85[2];
  unint64_t v20 = v85[3];
  v22._Swift::UInt64 rawBits = *v85;
  v23._Swift::UInt64 rawBits = v85[1];
  swift_bridgeObjectRetain(v20);
  v24._Swift::UInt64 rawBits = _StringGuts.validateInclusiveScalarIndex(_:)(v22)._rawBits;
  v25._Swift::UInt64 rawBits = _StringGuts.validateInclusiveScalarIndex(_:)(v23)._rawBits >> 14;
  if (v24._rawBits >> 14 < v25._rawBits)
  {
    uint64_t v26 = 0;
    while (1)
    {
      uint64_t v27 = v26 + 1;
      if (__OFADD__(v26, 1)) {
        break;
      }
      if ((v20 & 0x1000000000000000) != 0)
      {
        v24._Swift::UInt64 rawBits = String.UnicodeScalarView._foreignIndex(after:)(v24)._rawBits;
      }
      else
      {
        Swift::UInt64 v28 = v24._rawBits >> 16;
        if ((v20 & 0x2000000000000000) != 0)
        {
          uint64_t v86 = v21;
          uint64_t v87 = v20 & 0xFFFFFFFFFFFFFFLL;
          int v30 = *((unsigned __int8 *)&v86 + v28);
        }
        else
        {
          Swift::String::Index v29 = (unsigned __int8 *)((v20 & 0xFFFFFFFFFFFFFFFLL) + 32);
          if ((v21 & 0x1000000000000000) == 0) {
            Swift::String::Index v29 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v21, v20);
          }
          int v30 = v29[v28];
        }
        int v31 = (char)v30;
        unsigned int v32 = __clz(v30 ^ 0xFF) - 24;
        if (v31 >= 0) {
          LOBYTE(v32) = 1;
        }
        v24._Swift::UInt64 rawBits = ((v28 + v32) << 16) | 5;
      }
      ++v26;
      if (v25._rawBits <= v24._rawBits >> 14) {
        goto LABEL_67;
      }
    }
LABEL_151:
    __break(1u);
LABEL_152:
    __break(1u);
LABEL_153:
    __break(1u);
    goto LABEL_154;
  }
  if (v25._rawBits < v24._rawBits >> 14)
  {
    uint64_t v27 = 0;
    while (1)
    {
      BOOL v13 = __OFSUB__(v27--, 1);
      if (v13) {
        goto LABEL_153;
      }
      if ((v20 & 0x1000000000000000) != 0)
      {
        v24._Swift::UInt64 rawBits = String.UnicodeScalarView._foreignIndex(before:)(v24)._rawBits;
      }
      else
      {
        if ((v20 & 0x2000000000000000) != 0)
        {
          uint64_t v86 = v21;
          uint64_t v87 = v20 & 0xFFFFFFFFFFFFFFLL;
          if ((*((unsigned char *)&v86 + (v24._rawBits >> 16) - 1) & 0xC0) == 0x80)
          {
            uint64_t v37 = 0;
            do
              int v38 = *((unsigned char *)&v85 + (v24._rawBits >> 16) + v37-- + 6) & 0xC0;
            while (v38 == 128);
            uint64_t v36 = 1 - v37;
          }
          else
          {
            uint64_t v36 = 1;
          }
        }
        else
        {
          Swift::String::Index v33 = (char *)((v20 & 0xFFFFFFFFFFFFFFFLL) + 32);
          if ((v21 & 0x1000000000000000) == 0) {
            Swift::String::Index v33 = (char *)_StringObject.sharedUTF8.getter(v21, v20);
          }
          uint64_t v34 = 0;
          do
            int v35 = v33[(v24._rawBits >> 16) - 1 + v34--] & 0xC0;
          while (v35 == 128);
          uint64_t v36 = -v34;
        }
        v24._Swift::UInt64 rawBits = (v24._rawBits - (v36 << 16)) & 0xFFFFFFFFFFFF0000 | 5;
      }
      if (v25._rawBits >= v24._rawBits >> 14) {
        goto LABEL_67;
      }
    }
  }
  uint64_t v27 = 0;
LABEL_67:
  swift_bridgeObjectRelease(v20);
  unint64_t v39 = v85[2];
  unint64_t v40 = v85[3];
  swift_bridgeObjectRetain(v40);
  uint64_t v41 = specialized static String._copying(_:)(v39, v40);
  unint64_t v43 = v42;
  swift_bridgeObjectRelease(v40);
  swift_bridgeObjectRetain(v43);
  v44._Swift::UInt64 rawBits = _StringGuts.validateInclusiveScalarIndex(_:)((Swift::String::Index)15)._rawBits;
  if (v7 < 0)
  {
    uint64_t v51 = 0;
    uint64_t v52 = (char *)&v85 + 6;
    while (1)
    {
      Swift::UInt64 v53 = v44._rawBits >> 16;
      if (!(v44._rawBits >> 16)) {
        goto LABEL_148;
      }
      if ((v43 & 0x1000000000000000) != 0)
      {
        Swift::UInt64 rawBits = v44._rawBits;
        unint64_t v60 = v52;
        v61._Swift::UInt64 rawBits = String.UnicodeScalarView._foreignIndex(before:)((Swift::String::Index)rawBits)._rawBits;
        uint64_t v52 = v60;
        v44._Swift::UInt64 rawBits = v61._rawBits;
      }
      else
      {
        if ((v43 & 0x2000000000000000) != 0)
        {
          uint64_t v86 = v41;
          uint64_t v87 = v43 & 0xFFFFFFFFFFFFFFLL;
          if ((*((unsigned char *)&v86 + v53 - 1) & 0xC0) == 0x80)
          {
            uint64_t v56 = 0;
            do
              int v57 = v52[v53 + v56--] & 0xC0;
            while (v57 == 128);
            uint64_t v58 = 1 - v56;
          }
          else
          {
            uint64_t v58 = 1;
          }
          v53 -= v58;
        }
        else
        {
          Swift::UInt64 v54 = (char *)((v43 & 0xFFFFFFFFFFFFFFFLL) + 32);
          if ((v41 & 0x1000000000000000) == 0)
          {
            uint64_t v62 = v52;
            Swift::UInt64 v54 = (char *)_StringObject.sharedUTF8.getter(v41, v43);
            uint64_t v52 = v62;
          }
          do
            int v55 = v54[--v53] & 0xC0;
          while (v55 == 128);
        }
        v44._Swift::UInt64 rawBits = (v53 << 16) | 5;
      }
      if (v7 >= --v51) {
        goto LABEL_103;
      }
    }
  }
  if (v7)
  {
    if ((v43 & 0x2000000000000000) != 0) {
      Swift::UInt64 v45 = HIBYTE(v43) & 0xF;
    }
    else {
      Swift::UInt64 v45 = v41 & 0xFFFFFFFFFFFFLL;
    }
    while (1)
    {
      Swift::UInt64 v46 = v44._rawBits >> 16;
      if (v44._rawBits >> 16 >= v45) {
        goto LABEL_147;
      }
      if ((v43 & 0x1000000000000000) != 0)
      {
        v44._Swift::UInt64 rawBits = String.UnicodeScalarView._foreignIndex(after:)(v44)._rawBits;
        if (!--v7) {
          break;
        }
      }
      else
      {
        if ((v43 & 0x2000000000000000) != 0)
        {
          uint64_t v86 = v41;
          uint64_t v87 = v43 & 0xFFFFFFFFFFFFFFLL;
          int v48 = *((unsigned __int8 *)&v86 + v46);
        }
        else
        {
          Swift::Int v47 = (unsigned __int8 *)((v43 & 0xFFFFFFFFFFFFFFFLL) + 32);
          if ((v41 & 0x1000000000000000) == 0) {
            Swift::Int v47 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v41, v43);
          }
          int v48 = v47[v46];
        }
        int v49 = (char)v48;
        unsigned int v50 = __clz(v48 ^ 0xFF) - 24;
        if (v49 >= 0) {
          LOBYTE(v5_assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000015, 0x80000001816DF320, "Swift/StringGuts.swift", 22, 2, 0x1A9uLL, 0) = 1;
        }
        v44._Swift::UInt64 rawBits = ((v46 + v50) << 16) | 5;
        if (!--v7) {
          break;
        }
      }
    }
  }
LABEL_103:
  v63._Swift::UInt64 rawBits = _StringGuts.validateInclusiveScalarIndex(_:)(v44)._rawBits;
  if (v27 < 0)
  {
    uint64_t v70 = 0;
    unint64_t v71 = (char *)&v85 + 6;
    while (1)
    {
      Swift::UInt64 v72 = v63._rawBits >> 16;
      if (!(v63._rawBits >> 16)) {
        break;
      }
      if ((v43 & 0x1000000000000000) != 0)
      {
        uint64_t v78 = v71;
        v79._Swift::UInt64 rawBits = String.UnicodeScalarView._foreignIndex(before:)(v63)._rawBits;
        unint64_t v71 = v78;
        v63._Swift::UInt64 rawBits = v79._rawBits;
      }
      else
      {
        if ((v43 & 0x2000000000000000) != 0)
        {
          uint64_t v86 = v41;
          uint64_t v87 = v43 & 0xFFFFFFFFFFFFFFLL;
          if ((*((unsigned char *)&v86 + v72 - 1) & 0xC0) == 0x80)
          {
            uint64_t v75 = 0;
            do
              int v76 = v71[v72 + v75--] & 0xC0;
            while (v76 == 128);
            uint64_t v77 = 1 - v75;
          }
          else
          {
            uint64_t v77 = 1;
          }
          v72 -= v77;
        }
        else
        {
          Swift::String::Index v73 = (char *)((v43 & 0xFFFFFFFFFFFFFFFLL) + 32);
          if ((v41 & 0x1000000000000000) == 0)
          {
            uint64_t v80 = v71;
            Swift::String::Index v73 = (char *)_StringObject.sharedUTF8.getter(v41, v43);
            unint64_t v71 = v80;
          }
          do
            int v74 = v73[--v72] & 0xC0;
          while (v74 == 128);
        }
        v63._Swift::UInt64 rawBits = (v72 << 16) | 5;
      }
      if (v27 >= --v70) {
        goto LABEL_139;
      }
    }
LABEL_148:
    unint64_t v84 = 206;
LABEL_149:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index is out of bounds", 29, 2, "Swift/StringUnicodeScalarView.swift", 35, 2, v84, 0);
  }
  if (v27)
  {
    if ((v43 & 0x2000000000000000) != 0) {
      Swift::UInt64 v64 = HIBYTE(v43) & 0xF;
    }
    else {
      Swift::UInt64 v64 = v41 & 0xFFFFFFFFFFFFLL;
    }
    while (1)
    {
      Swift::UInt64 v65 = v63._rawBits >> 16;
      if (v63._rawBits >> 16 >= v64) {
        break;
      }
      if ((v43 & 0x1000000000000000) != 0)
      {
        v63._Swift::UInt64 rawBits = String.UnicodeScalarView._foreignIndex(after:)(v63)._rawBits;
        if (!--v27) {
          goto LABEL_139;
        }
      }
      else
      {
        if ((v43 & 0x2000000000000000) != 0)
        {
          uint64_t v86 = v41;
          uint64_t v87 = v43 & 0xFFFFFFFFFFFFFFLL;
          int v67 = *((unsigned __int8 *)&v86 + v65);
        }
        else
        {
          unint64_t v66 = (unsigned __int8 *)((v43 & 0xFFFFFFFFFFFFFFFLL) + 32);
          if ((v41 & 0x1000000000000000) == 0) {
            unint64_t v66 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v41, v43);
          }
          int v67 = v66[v65];
        }
        int v68 = (char)v67;
        unsigned int v69 = __clz(v67 ^ 0xFF) - 24;
        if (v68 >= 0) {
          LOBYTE(v69) = 1;
        }
        v63._Swift::UInt64 rawBits = ((v65 + v69) << 16) | 5;
        if (!--v27) {
          goto LABEL_139;
        }
      }
    }
LABEL_147:
    unint64_t v84 = 201;
    goto LABEL_149;
  }
LABEL_139:
  swift_bridgeObjectRelease(v43);
  uint64_t v81 = v85;
  if ((*(unsigned char *)v85 & 2) != 0) {
    Swift::UInt64 v82 = v44._rawBits | 3;
  }
  else {
    Swift::UInt64 v82 = v44._rawBits;
  }
  if ((v85[1] & 2) != 0) {
    Swift::UInt64 v83 = v63._rawBits | 3;
  }
  else {
    Swift::UInt64 v83 = v63._rawBits;
  }
  if (v83 >> 14 < v82 >> 14) {
LABEL_154:
  }
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
  swift_bridgeObjectRelease(v85[3]);
  *uint64_t v81 = v82;
  v81[1] = v83;
  v81[2] = v41;
  v81[3] = v43;
}

Swift::Int __swiftcall String.UnicodeScalarView.distance(from:to:)(Swift::String::Index from, Swift::String::Index to)
{
  uint64_t v4 = v3;
  uint64_t v5 = v2;
  v7._Swift::UInt64 rawBits = _StringGuts.validateInclusiveScalarIndex(_:)(from)._rawBits;
  Swift::Int result = _StringGuts.validateInclusiveScalarIndex(_:)(to)._rawBits;
  Swift::UInt64 v9 = (unint64_t)result >> 14;
  if (v7._rawBits >> 14 < (unint64_t)result >> 14)
  {
    for (uint64_t i = 0; ; ++i)
    {
      Swift::Int v11 = i + 1;
      if (__OFADD__(i, 1)) {
        break;
      }
      if ((v4 & 0x1000000000000000) != 0)
      {
        Swift::Int result = String.UnicodeScalarView._foreignIndex(after:)(v7)._rawBits;
        v7._Swift::UInt64 rawBits = result;
      }
      else
      {
        Swift::UInt64 v12 = v7._rawBits >> 16;
        if ((v4 & 0x2000000000000000) != 0)
        {
          uint64_t v22 = v5;
          uint64_t v23 = v4 & 0xFFFFFFFFFFFFFFLL;
          int v13 = *((unsigned __int8 *)&v22 + v12);
        }
        else
        {
          Swift::Int result = (v4 & 0xFFFFFFFFFFFFFFFLL) + 32;
          if ((v5 & 0x1000000000000000) == 0) {
            Swift::Int result = (Swift::Int)_StringObject.sharedUTF8.getter(v5, v4);
          }
          int v13 = *(unsigned __int8 *)(result + v12);
        }
        int v14 = (char)v13;
        unsigned int v15 = __clz(v13 ^ 0xFF) - 24;
        if (v14 >= 0) {
          LOBYTE(v15) = 1;
        }
        v7._Swift::UInt64 rawBits = ((v12 + v15) << 16) | 5;
      }
      if (v9 <= v7._rawBits >> 14) {
        return v11;
      }
    }
    __break(1u);
LABEL_36:
    __break(1u);
    return result;
  }
  if (v9 < v7._rawBits >> 14)
  {
    Swift::Int v11 = 0;
    while (!__OFSUB__(v11--, 1))
    {
      if ((v4 & 0x1000000000000000) != 0)
      {
        Swift::Int result = String.UnicodeScalarView._foreignIndex(before:)(v7)._rawBits;
        v7._Swift::UInt64 rawBits = result;
        if (v9 >= (unint64_t)result >> 14) {
          return v11;
        }
      }
      else
      {
        if ((v4 & 0x2000000000000000) != 0)
        {
          uint64_t v22 = v5;
          uint64_t v23 = v4 & 0xFFFFFFFFFFFFFFLL;
          if ((*((unsigned char *)&v22 + (v7._rawBits >> 16) - 1) & 0xC0) == 0x80)
          {
            uint64_t v20 = 0;
            do
              int v21 = *((unsigned char *)&v22 + (v7._rawBits >> 16) + v20-- - 2) & 0xC0;
            while (v21 == 128);
            uint64_t v19 = 1 - v20;
          }
          else
          {
            uint64_t v19 = 1;
          }
        }
        else
        {
          Swift::Int result = (v4 & 0xFFFFFFFFFFFFFFFLL) + 32;
          if ((v5 & 0x1000000000000000) == 0) {
            Swift::Int result = (Swift::Int)_StringObject.sharedUTF8.getter(v5, v4);
          }
          uint64_t v17 = 0;
          do
            int v18 = *(unsigned char *)(result + (v7._rawBits >> 16) - 1 + v17--) & 0xC0;
          while (v18 == 128);
          uint64_t v19 = -v17;
        }
        v7._Swift::UInt64 rawBits = (v7._rawBits - (v19 << 16)) & 0xFFFFFFFFFFFF0000 | 5;
        if (v9 >= v7._rawBits >> 14) {
          return v11;
        }
      }
    }
    goto LABEL_36;
  }
  return 0;
}

Swift::String::Index __swiftcall String.UnicodeScalarView.index(_:offsetBy:)(Swift::String::Index _, Swift::Int offsetBy)
{
  unint64_t v4 = v3;
  uint64_t v5 = v2;
  result._Swift::UInt64 rawBits = _StringGuts.validateInclusiveScalarIndex(_:)(_)._rawBits;
  if (offsetBy < 0)
  {
    uint64_t v14 = 0;
    while (1)
    {
      Swift::UInt64 v15 = result._rawBits >> 16;
      if (!(result._rawBits >> 16)) {
        break;
      }
      if ((v4 & 0x1000000000000000) != 0)
      {
        result._Swift::UInt64 rawBits = String.UnicodeScalarView._foreignIndex(before:)(result)._rawBits;
      }
      else
      {
        if ((v4 & 0x2000000000000000) != 0)
        {
          uint64_t v23 = v5;
          uint64_t v24 = v4 & 0xFFFFFFFFFFFFFFLL;
          if ((*((unsigned char *)&v23 + v15 - 1) & 0xC0) == 0x80)
          {
            uint64_t v18 = 0;
            do
              int v19 = v22[v15 + v18--] & 0xC0;
            while (v19 == 128);
            uint64_t v20 = 1 - v18;
          }
          else
          {
            uint64_t v20 = 1;
          }
          v15 -= v20;
        }
        else
        {
          int v16 = (char *)((v4 & 0xFFFFFFFFFFFFFFFLL) + 32);
          if ((v5 & 0x1000000000000000) == 0) {
            int v16 = (char *)_StringObject.sharedUTF8.getter(v5, v4);
          }
          do
            int v17 = v16[--v15] & 0xC0;
          while (v17 == 128);
        }
        result._Swift::UInt64 rawBits = (v15 << 16) | 5;
      }
      if (--v14 <= offsetBy) {
        return result;
      }
    }
    unint64_t v21 = 206;
LABEL_40:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index is out of bounds", 29, 2, "Swift/StringUnicodeScalarView.swift", 35, 2, v21, 0);
  }
  if (offsetBy)
  {
    if ((v4 & 0x2000000000000000) != 0) {
      Swift::UInt64 v8 = HIBYTE(v4) & 0xF;
    }
    else {
      Swift::UInt64 v8 = v5 & 0xFFFFFFFFFFFFLL;
    }
    while (1)
    {
      Swift::UInt64 v9 = result._rawBits >> 16;
      if (result._rawBits >> 16 >= v8) {
        break;
      }
      if ((v4 & 0x1000000000000000) != 0)
      {
        result._Swift::UInt64 rawBits = String.UnicodeScalarView._foreignIndex(after:)(result)._rawBits;
      }
      else
      {
        if ((v4 & 0x2000000000000000) != 0)
        {
          uint64_t v23 = v5;
          uint64_t v24 = v4 & 0xFFFFFFFFFFFFFFLL;
          int v11 = *((unsigned __int8 *)&v23 + v9);
        }
        else
        {
          int v10 = (unsigned __int8 *)((v4 & 0xFFFFFFFFFFFFFFFLL) + 32);
          if ((v5 & 0x1000000000000000) == 0) {
            int v10 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v5, v4);
          }
          int v11 = v10[v9];
        }
        int v12 = (char)v11;
        unsigned int v13 = __clz(v11 ^ 0xFF) - 24;
        if (v12 >= 0) {
          LOBYTE(v13) = 1;
        }
        result._Swift::UInt64 rawBits = ((v9 + v13) << 16) | 5;
      }
      if (!--offsetBy) {
        return result;
      }
    }
    unint64_t v21 = 201;
    goto LABEL_40;
  }
  return result;
}

uint64_t String.Index._rawBits.setter(uint64_t result)
{
  void *v1 = result;
  return result;
}

uint64_t (*String.Index._rawBits.modify())()
{
  return EnumeratedSequence._base.modify;
}

unint64_t String.Index.orderingValue.getter(unint64_t a1)
{
  return a1 >> 14;
}

BOOL String.Index.isZeroPosition.getter(unint64_t a1)
{
  return a1 < 0x4000;
}

uint64_t String.Index.utf16Offset<A>(in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v18 = a2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (int **)a4, a3, (uint64_t)&protocol requirements base descriptor for StringProtocol, associated type descriptor for StringProtocol.UTF16View);
  uint64_t v7 = *((void *)AssociatedTypeWitness - 1);
  uint64_t v8 = MEMORY[0x1F4188790](AssociatedTypeWitness);
  int v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8);
  int v12 = (char *)&v18 - v11;
  unsigned int v13 = *(void (**)(uint64_t, uint64_t))(a4 + 128);
  v13(a3, a4);
  v13(a3, a4);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(a4, a3, (uint64_t)AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for StringProtocol, associated conformance descriptor for StringProtocol.StringProtocol.UTF16View: BidirectionalCollection);
  (*(void (**)(uint64_t *__return_ptr, const char *))(*(void *)(AssociatedConformanceWitness + 8) + 64))(&v21, AssociatedTypeWitness);
  Swift::UInt64 v15 = *(void (**)(char *, const char *))(v7 + 8);
  v15(v10, AssociatedTypeWitness);
  uint64_t v19 = v18;
  uint64_t v20 = v21;
  uint64_t v16 = (*(uint64_t (**)(uint64_t *, uint64_t *, const char *, uint64_t))(AssociatedConformanceWitness + 64))(&v20, &v19, AssociatedTypeWitness, AssociatedConformanceWitness);
  v15(v12, AssociatedTypeWitness);
  return v16;
}

unint64_t String.Index.encodedOffset.getter(unint64_t a1)
{
  return a1 >> 16;
}

unint64_t String.Index.init<A>(utf16Offset:in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void (*v18)(uint64_t *__return_ptr, const char *, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  void (*v30)(uint64_t, uint64_t);
  uint64_t AssociatedConformanceWitness;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;

  uint64_t v34 = a1;
  int v35 = a2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (int **)a4, a3, (uint64_t)&protocol requirements base descriptor for StringProtocol, associated type descriptor for StringProtocol.UTF16View);
  uint64_t v7 = *((void *)AssociatedTypeWitness - 1);
  uint64_t v8 = MEMORY[0x1F4188790](AssociatedTypeWitness);
  unsigned int v32 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)&v26 - v10;
  int v12 = *(void (**)(uint64_t, uint64_t))(a4 + 128);
  v12(a3, a4);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(a4, a3, (uint64_t)AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for StringProtocol, associated conformance descriptor for StringProtocol.StringProtocol.UTF16View: BidirectionalCollection);
  uint64_t v13 = *(void *)(AssociatedConformanceWitness + 8);
  (*(void (**)(uint64_t *__return_ptr, const char *, uint64_t))(v13 + 64))(&v37, AssociatedTypeWitness, v13);
  uint64_t v14 = *(void (**)(char *, const char *))(v7 + 8);
  Swift::UInt64 v28 = v11;
  Swift::UInt64 v15 = v11;
  uint64_t v16 = AssociatedTypeWitness;
  v14(v15, AssociatedTypeWitness);
  uint64_t v27 = v37;
  int v17 = v32;
  Swift::String::Index v33 = a3;
  Swift::String::Index v29 = a4;
  int v30 = v12;
  v12(a3, a4);
  uint64_t v18 = *(void (**)(uint64_t *__return_ptr, const char *, uint64_t))(v13 + 72);
  uint64_t v19 = v13;
  uint64_t v20 = v34;
  v18(&v39, v16, v19);
  v14(v17, v16);
  uint64_t v21 = v39;
  if (v20 < 0)
  {
    (*(void (**)(uint64_t))(*(void *)(v33 - 8) + 8))(v35);
  }
  else
  {
    uint64_t v22 = v28;
    uint64_t v23 = v35;
    uint64_t v24 = v33;
    v30(v33, v29);
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v24 - 8) + 8))(v23, v24);
    unint64_t v39 = v27;
    uint64_t v36 = v21;
    (*(void (**)(uint64_t *__return_ptr, uint64_t *, uint64_t, uint64_t *, const char *))(AssociatedConformanceWitness
                                                                                               + 56))(&v37, &v39, v20, &v36, v16);
    v14(v22, v16);
    if (v38 != 1) {
      return v37;
    }
  }
  return (v21 & 0xFFFFFFFFFFFF0000) + 0x10000;
}

unint64_t String.Index.nextEncoded.getter(uint64_t a1)
{
  return (a1 & 0xFFFFFFFFFFFF0000) + 0x10000;
}

Swift::String::Index __swiftcall String.Index.init(encodedOffset:)(Swift::Int encodedOffset)
{
  return (Swift::String::Index)(encodedOffset << 16);
}

unint64_t String.Index.strippingTranscoding.getter(uint64_t a1)
{
  return a1 & 0xFFFFFFFFFFFF0000;
}

unint64_t String.Index.priorEncoded.getter(uint64_t a1)
{
  return (a1 & 0xFFFFFFFFFFFF0000) - 0x10000;
}

unint64_t String.Index.nextTranscoded.getter(uint64_t a1)
{
  return (((unsigned __int16)a1 & 0xC000) + 0x4000) | a1 & 0xFFFFFFFFFFFF0000;
}

unint64_t String.Index.priorTranscoded.getter(uint64_t a1)
{
  return (((unsigned __int16)a1 & 0xC000) - 0x4000) | a1 & 0xFFFFFFFFFFFF0000;
}

Swift::String::Index __swiftcall String.Index.transcoded(withOffset:)(Swift::Int withOffset)
{
  return (Swift::String::Index)(v1 & 0xFFFFFFFFFFFF0000 | (withOffset << 14));
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance String.Index(void *a1, void *a2)
{
  return (*a2 ^ *a1) < 0x4000uLL;
}

BOOL protocol witness for static Comparable.< infix(_:_:) in conformance String.Index(void *a1, void *a2)
{
  return *a1 >> 14 < *a2 >> 14;
}

BOOL protocol witness for static Comparable.<= infix(_:_:) in conformance String.Index(void *a1, void *a2)
{
  return *a2 >> 14 >= *a1 >> 14;
}

BOOL protocol witness for static Comparable.>= infix(_:_:) in conformance String.Index(void *a1, void *a2)
{
  return *a1 >> 14 >= *a2 >> 14;
}

BOOL protocol witness for static Comparable.> infix(_:_:) in conformance String.Index(void *a1, void *a2)
{
  return *a2 >> 14 < *a1 >> 14;
}

void String.Index.hash(into:)(uint64_t a1, unint64_t a2)
{
}

Swift::Int String.Index.hashValue.getter(unint64_t a1)
{
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance String.Index()
{
  Hasher._combine(_:)(*v0 >> 14);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance String.Index()
{
  Hasher._combine(_:)(*v0 >> 14);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance String.Index()
{
  Hasher._combine(_:)(*v0 >> 14);
  return Hasher._finalize()();
}

Swift::String::Index_optional __swiftcall String.Index.init(_:within:)(Swift::String::Index _, Swift::String within)
{
  Swift::UInt64 v2 = specialized String.Index.init(_:within:)(_, within._countAndFlagsBits, (uint64_t)within._object);
  Swift::Bool v4 = v3 & 1;
  result.value._Swift::UInt64 rawBits = v2;
  result.is_nil = v4;
  return result;
}

Swift::UInt64 String.Index.init<A>(_:within:)(Swift::UInt64 a1, Swift::UInt64 *a2, Class *a3, uint64_t a4)
{
  v7._Swift::UInt64 rawBits = a1;
  uint64_t v8 = (uint64_t)*(a3 - 1);
  uint64_t v9 = MEMORY[0x1F4188790](a1);
  uint64_t v11 = (unint64_t *)((char *)v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1F4188790](v9);
  uint64_t v13 = (unint64_t *)((char *)v26 - v12);
  uint64_t v14 = *(void (**)(char *))(v8 + 16);
  v14((char *)v26 - v12);
  if (swift_dynamicCast((char *)v26, v13, a3, (const char *)&type metadata for String, 6uLL))
  {
    (*(void (**)(Swift::UInt64 *, Class *))(v8 + 8))(a2, a3);
    v15._Swift::UInt64 rawBits = v7._rawBits;
    Swift::UInt64 v16 = specialized String.Index.init(_:within:)(v15, v26[0], v26[1]);
    if (v17) {
      return 0;
    }
    return v16;
  }
  ((void (*)(unint64_t *, Swift::UInt64 *, Class *))v14)(v11, a2, a3);
  if ((swift_dynamicCast((char *)v26, v11, a3, (const char *)&type metadata for Substring, 6uLL) & 1) == 0)
  {
    Swift::UInt64 v21 = String.init<A>(_:)(a2, a3, *(void *)(a4 + 40));
    v22._Swift::UInt64 rawBits = v7._rawBits;
    Swift::UInt64 v16 = specialized String.Index.init(_:within:)(v22, v21, v23);
    if (v24) {
      return 0;
    }
    return v16;
  }
  (*(void (**)(Swift::UInt64 *, Class *))(v8 + 8))(a2, a3);
  uint64_t v18 = v27;
  unint64_t v19 = (v26[2] >> 59) & 1;
  if ((v27 & 0x1000000000000000) == 0) {
    LOBYTE(v19) = 1;
  }
  if ((v7._rawBits & 0xC) == 4 << v19) {
    v7._Swift::UInt64 rawBits = _StringGuts._slowEnsureMatchingEncoding(_:)(v7)._rawBits;
  }
  Swift::Bool v20 = Substring._isValidIndex(_:)(v7);
  swift_bridgeObjectRelease(v18);
  if (!v20) {
    return 0;
  }
  return v7._rawBits;
}

Swift::Bool __swiftcall Substring._isValidIndex(_:)(Swift::String::Index a1)
{
  uint64_t v5 = (v3 >> 59) & 1;
  if ((v4 & 0x1000000000000000) == 0) {
    LOBYTE(v5) = 1;
  }
  if ((a1._rawBits & 0xC) == 4 << v5) {
    return 0;
  }
  unint64_t v7 = v1;
  Swift::UInt64 v9 = a1._rawBits >> 14;
  unint64_t v10 = v1 >> 14;
  if (a1._rawBits >> 14 < v1 >> 14) {
    return 0;
  }
  uint64_t v11 = v2;
  unint64_t v12 = v2 >> 14;
  if (v2 >> 14 < v9) {
    return 0;
  }
  unint64_t v13 = v4;
  uint64_t v14 = v3;
  if (!_StringGuts.isOnUnicodeScalarBoundary(_:)(a1)) {
    return 0;
  }
  unint64_t v15 = a1._rawBits | 1;
  if ((a1._rawBits & v7 & 2) == 0 && v9 != v10 && v9 != v12) {
    unint64_t v15 = _StringGuts._slowRoundDownToNearestCharacter(_:in:)(v15, v7, v11, v14, v13);
  }
  return v9 == v15 >> 14;
}

uint64_t String.Index.samePosition(in:)(uint64_t a1, unint64_t a2, uint64_t a3)
{
  return String.Index.samePosition(in:)(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, unint64_t))specialized String.Index.init(_:within:));
}

{
  return String.Index.samePosition(in:)(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, unint64_t))specialized String.Index.init(_:within:));
}

{
  return String.Index.samePosition(in:)(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, unint64_t))specialized String.Index.init(_:within:));
}

Swift::UInt64 String.Index.init(_:within:)(Swift::String::Index a1, unint64_t a2, unint64_t a3)
{
  return specialized String.Index.init(_:within:)(a1, a2, a3);
}

{
  return specialized String.Index.init(_:within:)(a1, a2, a3);
}

{
  return specialized String.Index.init(_:within:)(a1, a2, a3);
}

Swift::String::Index __swiftcall _StringGuts.validateInclusiveCharacterIndex(_:)(Swift::String::Index result)
{
  unint64_t v3 = v2;
  unint64_t v4 = v1;
  uint64_t v5 = (v1 >> 59) & 1;
  if ((v2 & 0x1000000000000000) == 0) {
    LOBYTE(v5) = 1;
  }
  if ((result._rawBits & 2) == 0 || (result._rawBits & 0xC) == 4 << v5)
  {
    result._Swift::UInt64 rawBits = _StringGuts.validateInclusiveSubscalarIndex(_:)(result)._rawBits;
    if (result._rawBits)
    {
      if ((result._rawBits & 2) != 0) {
        return result;
      }
    }
    else
    {
      Swift::UInt64 v7 = result._rawBits & 0xC | _StringGuts.scalarAlignSlow(_:)(result)._rawBits & 0xFFFFFFFFFFFFFFF3;
      result._Swift::UInt64 rawBits = v7 | 1;
      if ((v7 & 2) != 0) {
        return result;
      }
    }
    if (result._rawBits < 0x10000) {
      return (Swift::String::Index)(result._rawBits | 3);
    }
    uint64_t v8 = HIBYTE(v3) & 0xF;
    if ((v3 & 0x2000000000000000) == 0) {
      uint64_t v8 = v4 & 0xFFFFFFFFFFFFLL;
    }
    if (result._rawBits >> 16 == v8)
    {
      return (Swift::String::Index)(result._rawBits | 3);
    }
    else
    {
      return _StringGuts._slowRoundDownToNearestCharacter(_:)(result);
    }
  }
  else
  {
    Swift::UInt64 v6 = HIBYTE(v2) & 0xF;
    if ((v2 & 0x2000000000000000) == 0) {
      Swift::UInt64 v6 = v1 & 0xFFFFFFFFFFFFLL;
    }
    if (v6 < result._rawBits >> 16) {
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index is out of bounds", 29, 2, "Swift/StringIndexValidation.swift", 33, 2, 0x119uLL, 0);
    }
  }
  return result;
}

unint64_t _StringGuts.validateInclusiveCharacterIndex(_:in:)(unint64_t result, unint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5)
{
  uint64_t v9 = (a4 >> 59) & 1;
  if ((a5 & 0x1000000000000000) == 0) {
    LOBYTE(v9) = 1;
  }
  if ((result & 2) != 0 && (result & 0xC) != 4 << v9)
  {
    if (result >> 14 < a2 >> 14 || a3 >> 14 < result >> 14) {
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Substring index is out of bounds", 32, 2, "Swift/StringIndexValidation.swift", 33, 2, 0x128uLL, 0);
    }
    return result;
  }
  Swift::String::Index_optional result = _StringGuts.validateInclusiveSubscalarIndex(_:in:)(result, a2, a3, a4, a5);
  if (result)
  {
    if ((a2 & 2) != 0) {
      goto LABEL_10;
    }
  }
  else
  {
    Swift::String::Index_optional result = result & 0xC | _StringGuts.scalarAlignSlow(_:)((Swift::String::Index)result)._rawBits & 0xFFFFFFFFFFFFFFF3 | 1;
    if ((a2 & 2) != 0)
    {
LABEL_10:
      if ((result & 2) != 0) {
        return result;
      }
    }
  }
  if (result >> 14 != a2 >> 14 && result >> 14 != a3 >> 14)
  {
    return _StringGuts._slowRoundDownToNearestCharacter(_:in:)(result, a2, a3, a4, a5);
  }
  return result;
}

Swift::String::Index __swiftcall _StringGuts.validateInclusiveScalarIndex(_:)(Swift::String::Index result)
{
  uint64_t v3 = (v1 >> 59) & 1;
  if ((v2 & 0x1000000000000000) == 0) {
    LOBYTE(v3) = 1;
  }
  if ((result._rawBits & 1) == 0 || (result._rawBits & 0xC) == 4 << v3)
  {
    result._Swift::UInt64 rawBits = _StringGuts.validateInclusiveSubscalarIndex(_:)(result)._rawBits;
    if ((result._rawBits & 1) == 0) {
      return (Swift::String::Index)(result._rawBits & 0xC | _StringGuts.scalarAlignSlow(_:)(result)._rawBits & 0xFFFFFFFFFFFFFFF3 | 1);
    }
  }
  else
  {
    Swift::UInt64 v4 = HIBYTE(v2) & 0xF;
    if ((v2 & 0x2000000000000000) == 0) {
      Swift::UInt64 v4 = v1 & 0xFFFFFFFFFFFFLL;
    }
    if (v4 < result._rawBits >> 16) {
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index is out of bounds", 29, 2, "Swift/StringIndexValidation.swift", 33, 2, 0xA5uLL, 0);
    }
  }
  return result;
}

Swift::String::Index __swiftcall _StringGuts.validateInclusiveSubscalarIndex(_:)(Swift::String::Index result)
{
  unint64_t v3 = v2;
  unint64_t v4 = v1;
  uint64_t v5 = (v1 >> 59) & 1;
  if ((v2 & 0x1000000000000000) == 0) {
    LOBYTE(v5) = 1;
  }
  if ((result._rawBits & 0xC) == 4 << v5) {
    result._Swift::UInt64 rawBits = _StringGuts._slowEnsureMatchingEncoding(_:)(result)._rawBits;
  }
  Swift::UInt64 v6 = HIBYTE(v3) & 0xF;
  if ((v3 & 0x2000000000000000) == 0) {
    Swift::UInt64 v6 = v4 & 0xFFFFFFFFFFFFLL;
  }
  if (v6 < result._rawBits >> 16) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index is out of bounds", 29, 2, "Swift/StringIndexValidation.swift", 33, 2, 0x35uLL, 0);
  }
  return result;
}

Swift::UInt64 _StringGuts.validateInclusiveSubscalarIndex(_:in:)(Swift::UInt64 result, unint64_t a2, unint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v7 = (a4 >> 59) & 1;
  if ((a5 & 0x1000000000000000) == 0) {
    LOBYTE(v7) = 1;
  }
  if ((result & 0xC) == 4 << v7) {
    Swift::String::Index_optional result = _StringGuts._slowEnsureMatchingEncoding(_:)((Swift::String::Index)result)._rawBits;
  }
  if (result >> 14 < a2 >> 14 || a3 >> 14 < result >> 14) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Substring index is out of bounds", 32, 2, "Swift/StringIndexValidation.swift", 33, 2, 0x41uLL, 0);
  }
  return result;
}

Swift::String::Index __swiftcall _StringGuts.validateSubscalarIndex(_:)(Swift::String::Index result)
{
  unint64_t v3 = v2;
  unint64_t v4 = v1;
  uint64_t v5 = (v1 >> 59) & 1;
  if ((v2 & 0x1000000000000000) == 0) {
    LOBYTE(v5) = 1;
  }
  if ((result._rawBits & 0xC) == 4 << v5) {
    result._Swift::UInt64 rawBits = _StringGuts._slowEnsureMatchingEncoding(_:)(result)._rawBits;
  }
  Swift::UInt64 v6 = HIBYTE(v3) & 0xF;
  if ((v3 & 0x2000000000000000) == 0) {
    Swift::UInt64 v6 = v4 & 0xFFFFFFFFFFFFLL;
  }
  if (v6 <= result._rawBits >> 16) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index is out of bounds", 29, 2, "Swift/StringIndexValidation.swift", 33, 2, 0x1FuLL, 0);
  }
  return result;
}

Swift::UInt64 _StringGuts.validateSubscalarIndex(_:in:)(Swift::UInt64 result, unint64_t a2, unint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v7 = (a4 >> 59) & 1;
  if ((a5 & 0x1000000000000000) == 0) {
    LOBYTE(v7) = 1;
  }
  if ((result & 0xC) == 4 << v7) {
    Swift::String::Index_optional result = _StringGuts._slowEnsureMatchingEncoding(_:)((Swift::String::Index)result)._rawBits;
  }
  if (result >> 14 < a2 >> 14 || result >> 14 >= a3 >> 14) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Substring index is out of bounds", 32, 2, "Swift/StringIndexValidation.swift", 33, 2, 0x2BuLL, 0);
  }
  return result;
}

Swift::UInt64 _StringGuts.validateSubscalarRange(_:in:)(Swift::String::Index a1, Swift::String::Index a2, unint64_t a3, unint64_t a4, unint64_t a5, uint64_t a6)
{
  Swift::UInt64 rawBits = a2._rawBits;
  uint64_t v10 = (a5 >> 59) & 1;
  if ((a6 & 0x1000000000000000) == 0) {
    LOBYTE(v1_assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000015, 0x80000001816DF320, "Swift/StringGuts.swift", 22, 2, 0x1A9uLL, 0) = 1;
  }
  uint64_t v11 = 4 << v10;
  if ((a2._rawBits & 0xC) == 4 << v10) {
    Swift::UInt64 rawBits = _StringGuts._slowEnsureMatchingEncoding(_:)(a2)._rawBits;
  }
  if ((a1._rawBits & 0xC) == v11) {
    a1._Swift::UInt64 rawBits = _StringGuts._slowEnsureMatchingEncoding(_:)(a1)._rawBits;
  }
  if (a1._rawBits >> 14 < a3 >> 14 || rawBits >> 14 < a1._rawBits >> 14 || a4 >> 14 < rawBits >> 14) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Substring index range is out of bounds", 38, 2, "Swift/StringIndexValidation.swift", 33, 2, 0x63uLL, 0);
  }
  return a1._rawBits;
}

Swift::String::Index __swiftcall _StringGuts.scalarAlign(_:)(Swift::String::Index a1)
{
  Swift::UInt64 rawBits = a1._rawBits;
  if ((a1._rawBits & 1) == 0) {
    return (Swift::String::Index)(a1._rawBits & 0xC | _StringGuts.scalarAlignSlow(_:)(a1)._rawBits & 0xFFFFFFFFFFFFFFF3 | 1);
  }
  return (Swift::String::Index)rawBits;
}

Swift::String::Index _StringGuts.validateScalarIndex(_:in:)(Swift::String::Index result, unint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  char v7 = (a5 & 0x1000000000000000) == 0 || (a4 & 0x800000000000000) != 0;
  uint64_t v8 = result._rawBits & 0xC;
  uint64_t v9 = 4 << v7;
  if ((result._rawBits & 1) == 0 || v8 == v9)
  {
    if (v8 == v9) {
      result._Swift::UInt64 rawBits = _StringGuts._slowEnsureMatchingEncoding(_:)(result)._rawBits;
    }
    if (result._rawBits >> 14 < a2 >> 14 || result._rawBits >> 14 >= a3 >> 14)
    {
      unint64_t v10 = 43;
LABEL_17:
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Substring index is out of bounds", 32, 2, "Swift/StringIndexValidation.swift", 33, 2, v10, 0);
    }
    if ((result._rawBits & 1) == 0) {
      return (Swift::String::Index)(result._rawBits & 0xC | _StringGuts.scalarAlignSlow(_:)(result)._rawBits & 0xFFFFFFFFFFFFFFF3 | 1);
    }
  }
  else if (result._rawBits >> 14 < a2 >> 14 || result._rawBits >> 14 >= a3 >> 14)
  {
    unint64_t v10 = 143;
    goto LABEL_17;
  }
  return result;
}

Swift::UInt64 _StringGuts.validateScalarRange(_:)(Swift::String::Index a1, Swift::String::Index a2, unint64_t a3, unint64_t a4)
{
  Swift::UInt64 rawBits = a1._rawBits;
  uint64_t v5 = (a3 >> 59) & 1;
  if ((a4 & 0x1000000000000000) == 0) {
    LOBYTE(v5) = 1;
  }
  if ((a1._rawBits & 1) == 0
    || (uint64_t v6 = 4 << v5, (a1._rawBits & 0xC) == v6)
    || (a2._rawBits & 1) == 0
    || (a2._rawBits & 0xC) == v6)
  {
    Swift::UInt64 v8 = _StringGuts.validateSubscalarRange(_:)(a1, a2, a3, a4, 0x50uLL);
    Swift::UInt64 rawBits = v8;
    v10._Swift::UInt64 rawBits = v9;
    if (v8)
    {
      if (v9) {
        return rawBits;
      }
    }
    else
    {
      Swift::UInt64 rawBits = v8 & 0xC | _StringGuts.scalarAlignSlow(_:)((Swift::String::Index)v8)._rawBits & 0xFFFFFFFFFFFFFFF3 | 1;
      if (v10._rawBits) {
        return rawBits;
      }
    }
    _StringGuts.scalarAlignSlow(_:)(v10)._rawBits;
    return rawBits;
  }
  Swift::UInt64 v7 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000) == 0) {
    Swift::UInt64 v7 = a3 & 0xFFFFFFFFFFFFLL;
  }
  if (v7 < a2._rawBits >> 16) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index range is out of bounds", 35, 2, "Swift/StringIndexValidation.swift", 33, 2, 0xD2uLL, 0);
  }
  return rawBits;
}

Swift::UInt64 _StringGuts.validateScalarRange(_:in:)(Swift::String::Index a1, Swift::String::Index a2, unint64_t a3, unint64_t a4, unint64_t a5, uint64_t a6)
{
  Swift::UInt64 rawBits = a1._rawBits;
  uint64_t v7 = (a5 >> 59) & 1;
  if ((a6 & 0x1000000000000000) == 0) {
    LOBYTE(v7) = 1;
  }
  if ((a1._rawBits & 1) == 0
    || (uint64_t v8 = 4 << v7, (a1._rawBits & 0xC) == v8)
    || (a2._rawBits & 1) == 0
    || (a2._rawBits & 0xC) == v8)
  {
    Swift::UInt64 v9 = _StringGuts.validateSubscalarRange(_:in:)(a1, a2, a3, a4, a5, a6);
    Swift::UInt64 rawBits = v9;
    if (v10._rawBits)
    {
      if (v9) {
        return rawBits;
      }
    }
    else
    {
      _StringGuts.scalarAlignSlow(_:)(v10)._rawBits;
      if (rawBits) {
        return rawBits;
      }
    }
    return rawBits & 0xC | _StringGuts.scalarAlignSlow(_:)((Swift::String::Index)rawBits)._rawBits & 0xFFFFFFFFFFFFFFF3 | 1;
  }
  if (a1._rawBits >> 14 < a3 >> 14 || a4 >> 14 < a2._rawBits >> 14) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index range is out of bounds", 35, 2, "Swift/StringIndexValidation.swift", 33, 2, 0xECuLL, 0);
  }
  return rawBits;
}

unint64_t _StringGuts.validateCharacterIndex(_:in:)(unint64_t result, unint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5)
{
  uint64_t v9 = (a4 >> 59) & 1;
  if ((a5 & 0x1000000000000000) == 0) {
    LOBYTE(v9) = 1;
  }
  if ((result & 2) != 0 && (result & 0xC) != 4 << v9)
  {
    if (result >> 14 < a2 >> 14 || result >> 14 >= a3 >> 14) {
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Substring index is out of bounds", 32, 2, "Swift/StringIndexValidation.swift", 33, 2, 0x10BuLL, 0);
    }
    return result;
  }
  Swift::String::Index_optional result = _StringGuts.validateSubscalarIndex(_:in:)(result, a2, a3, a4, a5);
  if (result)
  {
    if ((a2 & 2) != 0) {
      goto LABEL_10;
    }
  }
  else
  {
    Swift::String::Index_optional result = result & 0xC | _StringGuts.scalarAlignSlow(_:)((Swift::String::Index)result)._rawBits & 0xFFFFFFFFFFFFFFF3 | 1;
    if ((a2 & 2) != 0)
    {
LABEL_10:
      if ((result & 2) != 0) {
        return result;
      }
    }
  }
  if (result >> 14 != a2 >> 14 && result >> 14 != a3 >> 14)
  {
    return _StringGuts._slowRoundDownToNearestCharacter(_:in:)(result, a2, a3, a4, a5);
  }
  return result;
}

Swift::String::Index __swiftcall _StringGuts.validateInclusiveSubscalarIndex_5_7(_:)(Swift::String::Index a1)
{
  unint64_t v3 = v2;
  unint64_t v4 = v1;
  Swift::UInt64 rawBits = a1._rawBits;
  uint64_t v6 = (v1 >> 59) & 1;
  if ((v2 & 0x1000000000000000) == 0) {
    LOBYTE(v6) = 1;
  }
  if ((a1._rawBits & 0xC) == 4 << v6) {
    Swift::UInt64 rawBits = _StringGuts._slowEnsureMatchingEncoding(_:)(a1)._rawBits;
  }
  unint64_t v7 = HIBYTE(v3) & 0xF;
  if ((v3 & 0x2000000000000000) == 0) {
    unint64_t v7 = v4 & 0xFFFFFFFFFFFFLL;
  }
  if (v7 < rawBits >> 16 && _swift_stdlib_isExecutableLinkedOnOrAfter(0x50700u)) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index is out of bounds", 29, 2, "Swift/StringIndexValidation.swift", 33, 2, 0x141uLL, 0);
  }
  return (Swift::String::Index)rawBits;
}

Swift::UInt64 _StringGuts.validateSubscalarRange(_:)(Swift::String::Index a1, Swift::String::Index a2, unint64_t a3, unint64_t a4, unint64_t a5)
{
  Swift::UInt64 rawBits = a2._rawBits;
  uint64_t v10 = (a3 >> 59) & 1;
  if ((a4 & 0x1000000000000000) == 0) {
    LOBYTE(v1_assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000015, 0x80000001816DF320, "Swift/StringGuts.swift", 22, 2, 0x1A9uLL, 0) = 1;
  }
  uint64_t v11 = 4 << v10;
  if ((a2._rawBits & 0xC) == 4 << v10) {
    Swift::UInt64 rawBits = _StringGuts._slowEnsureMatchingEncoding(_:)(a2)._rawBits;
  }
  if ((a1._rawBits & 0xC) == v11) {
    a1._Swift::UInt64 rawBits = _StringGuts._slowEnsureMatchingEncoding(_:)(a1)._rawBits;
  }
  uint64_t v12 = a3 & 0xFFFFFFFFFFFFLL;
  if ((a4 & 0x2000000000000000) != 0) {
    uint64_t v12 = HIBYTE(a4) & 0xF;
  }
  if (rawBits >> 14 > 4 * v12 || rawBits >> 14 < a1._rawBits >> 14) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index range is out of bounds", 35, 2, "Swift/StringIndexValidation.swift", 33, 2, a5, 0);
  }
  return a1._rawBits;
}

Swift::UInt64 _StringGuts.validateScalarRange_5_7(_:)(Swift::String::Index a1, Swift::String::Index a2, unint64_t a3, unint64_t a4)
{
  Swift::UInt64 rawBits = a1._rawBits;
  uint64_t v5 = (a3 >> 59) & 1;
  if ((a4 & 0x1000000000000000) == 0) {
    LOBYTE(v5) = 1;
  }
  if ((a1._rawBits & 1) == 0
    || (uint64_t v6 = 4 << v5, (a1._rawBits & 0xC) == v6)
    || (a2._rawBits & 1) == 0
    || (a2._rawBits & 0xC) == v6)
  {
    Swift::UInt64 v8 = _StringGuts.validateSubscalarRange(_:)(a1, a2, a3, a4, 0x164uLL);
    Swift::UInt64 rawBits = v8;
    v10._Swift::UInt64 rawBits = v9;
    if (v8)
    {
      if (v9) {
        return rawBits;
      }
    }
    else
    {
      Swift::UInt64 rawBits = v8 & 0xC | _StringGuts.scalarAlignSlow(_:)((Swift::String::Index)v8)._rawBits & 0xFFFFFFFFFFFFFFF3 | 1;
      if (v10._rawBits) {
        return rawBits;
      }
    }
    _StringGuts.scalarAlignSlow(_:)(v10)._rawBits;
    return rawBits;
  }
  Swift::UInt64 v7 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000) == 0) {
    Swift::UInt64 v7 = a3 & 0xFFFFFFFFFFFFLL;
  }
  if (v7 < a2._rawBits >> 16 && _swift_stdlib_isExecutableLinkedOnOrAfter(0x50700u)) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index range is out of bounds", 35, 2, "Swift/StringIndexValidation.swift", 33, 2, 0x174uLL, 0);
  }
  return rawBits;
}

Swift::Int _StringGuts.validateWordIndex(_:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t (*a4)(void))
{
  v6._Swift::UInt64 rawBits = a4();
  Swift::UInt64 rawBits = v6._rawBits;
  if (v6._rawBits)
  {
    if (v6._rawBits < 0x10000) {
      return rawBits;
    }
  }
  else
  {
    Swift::UInt64 rawBits = v6._rawBits & 0xC | _StringGuts.scalarAlignSlow(_:)(v6)._rawBits & 0xFFFFFFFFFFFFFFF3 | 1;
    if (rawBits < 0x10000) {
      return rawBits;
    }
  }
  Swift::UInt64 v8 = rawBits >> 16;
  uint64_t v9 = HIBYTE(a3) & 0xF;
  if ((a3 & 0x2000000000000000) == 0) {
    uint64_t v9 = a2 & 0xFFFFFFFFFFFFLL;
  }
  if (v8 != v9)
  {
    Swift::Int v10 = _StringGuts.previousWordIndex(endingAt:)(rawBits >> 16);
    if (v8 != _StringGuts.nextWordIndex(startingAt:)(v10)) {
      return v10 << 16;
    }
  }
  return rawBits;
}

uint64_t (*DefaultStringInterpolation._storage.modify())()
{
  return EnumeratedSequence._base.modify;
}

uint64_t DefaultStringInterpolation.appendInterpolation<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, ValueMetadata *, _UNKNOWN **, uint64_t, uint64_t))(a3 + 8))(v3, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation, a2, a3);
}

uint64_t protocol witness for StringInterpolationProtocol.init(literalCapacity:interpolationCount:) in conformance DefaultStringInterpolation@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  if (a2 + 0x4000000000000000 < 0)
  {
    __break(1u);
  }
  else
  {
    BOOL v4 = __OFADD__(result, 2 * a2);
    result += 2 * a2;
    if (!v4)
    {
      Swift::String::Index_optional result = static String._createEmpty(withInitialCapacity:)(result);
      *a3 = result;
      a3[1] = v5;
      return result;
    }
  }
  __break(1u);
  return result;
}

void protocol witness for StringInterpolationProtocol.appendLiteral(_:) in conformance DefaultStringInterpolation(Swift::String *a1)
{
}

void String._writeASCII(_:)(uint64_t a1, uint64_t a2)
{
}

Swift::Bool __swiftcall String.hasPrefix(_:)(Swift::String a1)
{
  unint64_t v3 = v2;
  uint64_t v4 = v1;
  uint64_t object = (uint64_t)a1._object;
  if ((v2 & 0x2000000000000000) != 0) {
    unint64_t v6 = v2;
  }
  else {
    unint64_t v6 = v1;
  }
  if ((v2 & 0x1000000000000000) == 0 && (v6 & 0x4000000000000000) != 0)
  {
    unint64_t v7 = ((uint64_t)a1._object & 0x2000000000000000) != 0 ? (unint64_t)a1._object : a1._countAndFlagsBits;
    if (((uint64_t)a1._object & 0x1000000000000000) == 0 && (v7 & 0x4000000000000000) != 0)
    {
      int64_t v8 = HIBYTE(a1._object) & 0xF;
      uint64_t v9 = a1._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
      if (((uint64_t)a1._object & 0x2000000000000000) != 0) {
        unint64_t v10 = HIBYTE(a1._object) & 0xF;
      }
      else {
        unint64_t v10 = a1._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
      }
      uint64_t v11 = HIBYTE(v2) & 0xF;
      uint64_t v12 = v1 & 0xFFFFFFFFFFFFLL;
      if ((v2 & 0x2000000000000000) != 0) {
        unint64_t v13 = HIBYTE(v2) & 0xF;
      }
      else {
        unint64_t v13 = v1 & 0xFFFFFFFFFFFFLL;
      }
      if (v13 < v10) {
        return 0;
      }
      if ((object & 0x2000000000000000) != 0)
      {
        uint64_t __s2 = a1._countAndFlagsBits;
        uint64_t v26 = object & 0xFFFFFFFFFFFFFFLL;
        if ((v2 & 0x2000000000000000) != 0)
        {
          __s1[0] = v1;
          __s1[1] = v2 & 0xFFFFFFFFFFFFFFLL;
          if (v11 < (unint64_t)v8) {
            goto LABEL_49;
          }
          uint64_t v18 = __s1;
        }
        else
        {
          if ((v1 & 0x1000000000000000) != 0)
          {
            uint64_t v18 = (void *)((v2 & 0xFFFFFFFFFFFFFFFLL) + 32);
            if (v12 < v8) {
              goto LABEL_49;
            }
          }
          else
          {
            uint64_t v18 = _StringObject.sharedUTF8.getter(v1, v2);
            if (v22 < v8) {
              goto LABEL_49;
            }
          }
          if (v8 && !v18) {
LABEL_34:
          }
            _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeBufferPointer has a nil start and nonzero count", 53, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x541uLL, 0);
        }
        uint64_t v9 = v8;
        if (!_swift_stdlib_memcmp(v18, &__s2, v8))
        {
LABEL_43:
          return _StringGuts.isOnGraphemeClusterBoundary(_:)((Swift::String::Index)(v9 << 16));
        }
        return 0;
      }
      if ((a1._countAndFlagsBits & 0x1000000000000000) != 0)
      {
        uint64_t v14 = (const void *)((object & 0xFFFFFFFFFFFFFFFLL) + 32);
        int64_t v15 = a1._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
        if ((v2 & 0x2000000000000000) == 0) {
          goto LABEL_21;
        }
      }
      else
      {
        id v19 = _StringObject.sharedUTF8.getter(a1._countAndFlagsBits, object);
        uint64_t v11 = HIBYTE(v3) & 0xF;
        uint64_t v14 = v19;
        int64_t v15 = v20;
        uint64_t v12 = v4 & 0xFFFFFFFFFFFFLL;
        if ((v3 & 0x2000000000000000) == 0)
        {
LABEL_21:
          if ((v4 & 0x1000000000000000) != 0)
          {
            p_s2 = (uint64_t *)((v3 & 0xFFFFFFFFFFFFFFFLL) + 32);
            if (v12 >= v15)
            {
LABEL_23:
              if (v15 && !p_s2) {
                goto LABEL_34;
              }
LABEL_42:
              if (!_swift_stdlib_memcmp(p_s2, v14, v15)) {
                goto LABEL_43;
              }
              return 0;
            }
          }
          else
          {
            int64_t v23 = v15;
            p_s2 = (uint64_t *)_StringObject.sharedUTF8.getter(v4, v3);
            int64_t v15 = v23;
            if (v21 >= v23) {
              goto LABEL_23;
            }
          }
LABEL_49:
          _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x745uLL, 0);
        }
      }
      uint64_t __s2 = v4;
      uint64_t v26 = v3 & 0xFFFFFFFFFFFFFFLL;
      if (v11 >= v15)
      {
        p_s2 = &__s2;
        goto LABEL_42;
      }
      goto LABEL_49;
    }
  }

  return specialized Sequence<>.starts<A>(with:)(a1._countAndFlagsBits, (unint64_t)a1._object, v1, v2);
}

Swift::Bool __swiftcall String.hasSuffix(_:)(Swift::String a1)
{
  uint64_t v3 = v2;
  uint64_t v4 = v1;
  unint64_t object = (unint64_t)a1._object;
  if ((v2 & 0x2000000000000000) != 0) {
    unint64_t v6 = v2;
  }
  else {
    unint64_t v6 = v1;
  }
  if ((v2 & 0x1000000000000000) == 0 && (v6 & 0x4000000000000000) != 0)
  {
    unint64_t v7 = ((uint64_t)a1._object & 0x2000000000000000) != 0 ? (unint64_t)a1._object : a1._countAndFlagsBits;
    if (((uint64_t)a1._object & 0x1000000000000000) == 0 && (v7 & 0x4000000000000000) != 0)
    {
      uint64_t v8 = HIBYTE(v2) & 0xF;
      uint64_t v9 = v1 & 0xFFFFFFFFFFFFLL;
      if ((v2 & 0x2000000000000000) == 0) {
        uint64_t v8 = v1 & 0xFFFFFFFFFFFFLL;
      }
      int64_t v10 = HIBYTE(object) & 0xF;
      uint64_t v11 = a1._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
      if ((object & 0x2000000000000000) != 0) {
        uint64_t v12 = HIBYTE(object) & 0xF;
      }
      else {
        uint64_t v12 = a1._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
      }
      uint64_t v13 = v8 - v12;
      if (v8 - v12 < 0) {
        return 0;
      }
      if ((object & 0x2000000000000000) != 0)
      {
        uint64_t __s2 = a1._countAndFlagsBits;
        uint64_t v40 = object & 0xFFFFFFFFFFFFFFLL;
        if ((v2 & 0x2000000000000000) != 0)
        {
          v38[0] = v1;
          v38[1] = v2 & 0xFFFFFFFFFFFFFFLL;
          if (_swift_stdlib_memcmp((char *)v38 + v13, &__s2, v10)) {
            return 0;
          }
          goto LABEL_36;
        }
        if ((v1 & 0x1000000000000000) != 0)
        {
          uint64_t v22 = (v2 & 0xFFFFFFFFFFFFFFFLL) + 32;
          uint64_t v23 = v4 & 0xFFFFFFFFFFFFLL;
        }
        else
        {
          uint64_t v35 = v1 & 0xFFFFFFFFFFFFLL;
          id v36 = _StringObject.sharedUTF8.getter(v1, v2);
          uint64_t v23 = v37;
          if (v37 < v35) {
            goto LABEL_51;
          }
          uint64_t v22 = (uint64_t)v36;
          uint64_t v9 = v35;
        }
        char v24 = (const void *)specialized UnsafeBufferPointer.init(rebasing:)(v13, v9, v22, v23);
        int64_t v26 = v25;
        if (v10 >= v25) {
          size_t v27 = v25;
        }
        else {
          size_t v27 = v10;
        }
        int v28 = _swift_stdlib_memcmp(v24, &__s2, v27);
        uint64_t v29 = v28;
        uint64_t v30 = v26 - v10;
LABEL_44:
        if (!v28) {
          uint64_t v29 = v30;
        }
        if (v29) {
          return 0;
        }
LABEL_36:
        return _StringGuts.isOnGraphemeClusterBoundary(_:)((Swift::String::Index)(v13 << 16));
      }
      if ((a1._countAndFlagsBits & 0x1000000000000000) != 0)
      {
        id v14 = (id)((object & 0xFFFFFFFFFFFFFFFLL) + 32);
        uint64_t v15 = a1._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
        if ((v2 & 0x2000000000000000) == 0)
        {
LABEL_20:
          if ((v4 & 0x1000000000000000) != 0)
          {
            uint64_t v16 = (v3 & 0xFFFFFFFFFFFFFFFLL) + 32;
            uint64_t v17 = v9;
            goto LABEL_22;
          }
          uint64_t v32 = v9;
          id v33 = _StringObject.sharedUTF8.getter(v4, v3);
          uint64_t v17 = v34;
          if (v34 >= v32)
          {
            uint64_t v16 = (uint64_t)v33;
            uint64_t v9 = v32;
LABEL_22:
            uint64_t v18 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(v13, v9, v16, v17);
            uint64_t v11 = v19;
            if (v15 >= v19) {
              size_t v20 = v19;
            }
            else {
              size_t v20 = v15;
            }
LABEL_43:
            int v28 = _swift_stdlib_memcmp(v18, v14, v20);
            uint64_t v29 = v28;
            uint64_t v30 = v11 - v15;
            goto LABEL_44;
          }
LABEL_51:
          _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x745uLL, 0);
        }
      }
      else
      {
        id v14 = _StringObject.sharedUTF8.getter(a1._countAndFlagsBits, object);
        uint64_t v15 = v31;
        uint64_t v9 = v4 & 0xFFFFFFFFFFFFLL;
        if ((v3 & 0x2000000000000000) == 0) {
          goto LABEL_20;
        }
      }
      uint64_t __s2 = v4;
      uint64_t v40 = v3 & 0xFFFFFFFFFFFFFFLL;
      uint64_t v18 = (char *)&__s2 + v13;
      if (v15 >= v11) {
        size_t v20 = v11;
      }
      else {
        size_t v20 = v15;
      }
      goto LABEL_43;
    }
  }

  return specialized Sequence<>.starts<A>(with:)(a1._countAndFlagsBits, (unint64_t)a1._object, v1, v2);
}

BOOL protocol witness for StringProtocol.hasPrefix(_:) in conformance String(Swift::String a1)
{
  return String.hasPrefix(_:)(a1);
}

BOOL protocol witness for StringProtocol.hasSuffix(_:) in conformance String(Swift::String a1)
{
  return String.hasSuffix(_:)(a1);
}

uint64_t protocol witness for StringProtocol.lowercased() in conformance String()
{
  return String.lowercased()()._countAndFlagsBits;
}

uint64_t protocol witness for StringProtocol.uppercased() in conformance String()
{
  return String.uppercased()()._countAndFlagsBits;
}

uint64_t protocol witness for StringProtocol.init<A, B>(decoding:as:) in conformance String@<X0>(uint64_t a1@<X0>, Class *a2@<X2>, uint64_t a3@<X4>, uint64_t a4@<X6>, uint64_t *a5@<X8>)
{
  uint64_t v10 = (uint64_t)*(a2 - 1);
  uint64_t v11 = MEMORY[0x1F4188790](a1);
  uint64_t v16 = (unint64_t *)((char *)v27 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (v12 != &type metadata for Unicode.UTF8)
  {
    unint64_t v25 = static String._fromCodeUnits<A, B>(_:encoding:repair:)(a1, (uint64_t)v12, 1, a2, v13, a3, v14);
    if (!v26) {
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/String.swift", 18, 2, 0x1C9uLL, 0);
    }
    goto LABEL_10;
  }
  MEMORY[0x1F4188790](v11);
  (*(void (**)(uint64_t *__return_ptr, uint64_t (*)@<X0>(uint64_t@<X0>, uint64_t@<X1>, uint64_t *@<X8>)))(*(void *)(a3 + 8) + 72))(&v29, closure #1 in String.init<A, B>(decoding:as:)partial apply);
  uint64_t v17 = v30;
  if (v30)
  {
    uint64_t v18 = v29;
LABEL_11:
    uint64_t result = (*(uint64_t (**)(uint64_t, Class *))(v10 + 8))(a1, a2);
    goto LABEL_12;
  }
  (*(void (**)(unint64_t *, uint64_t, Class *))(v10 + 16))(v16, a1, a2);
  uint64_t v19 = (const char *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _HasContiguousBytes);
  if ((swift_dynamicCast((char *)v27, v16, a2, v19, 6uLL) & 1) == 0)
  {
    uint64_t v28 = 0;
    memset(v27, 0, sizeof(v27));
    outlined destroy of _HasContiguousBytes?((uint64_t)v27, &demangling cache variable for type metadata for _HasContiguousBytes?);
LABEL_9:
    unint64_t v25 = (unint64_t)static String._fromNonContiguousUnsafeBitcastUTF8Repairing<A>(_:)(a1, (uint64_t)a2, a3);
LABEL_10:
    uint64_t v18 = v25;
    uint64_t v17 = v26;
    goto LABEL_11;
  }
  outlined init with take of MirrorPath(v27, (uint64_t)&v29);
  uint64_t v20 = v31;
  uint64_t v21 = v32;
  __swift_project_boxed_opaque_existential_0Tm(&v29, v31);
  if (((*(uint64_t (**)(uint64_t, uint64_t))(v21 + 16))(v20, v21) & 1) == 0)
  {
    __swift_destroy_boxed_opaque_existential_1Tm(&v29);
    goto LABEL_9;
  }
  (*(void (**)(uint64_t, Class *))(v10 + 8))(a1, a2);
  uint64_t v22 = v31;
  uint64_t v23 = v32;
  __swift_project_boxed_opaque_existential_0Tm(&v29, v31);
  (*(void (**)(long long *__return_ptr, uint64_t (*)@<X0>(uint8x16_t *@<X0>, uint64_t@<X1>, uint64_t *@<X8>), void, uint64_t, uint64_t, uint64_t))(v23 + 8))(v27, closure #2 in String.init<A, B>(decoding:as:), 0, a4, v22, v23);
  uint64_t v17 = *((void *)&v27[0] + 1);
  uint64_t v18 = *(void *)&v27[0];
  uint64_t result = __swift_destroy_boxed_opaque_existential_1Tm(&v29);
LABEL_12:
  *a5 = v18;
  a5[1] = v17;
  return result;
}

uint64_t *protocol witness for StringProtocol.init(cString:) in conformance String@<X0>(char *a1@<X0>, uint64_t **a2@<X8>)
{
  size_t v4 = _swift_stdlib_strlen(a1);
  if ((v4 & 0x8000000000000000) != 0) {
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeBufferPointer with negative count", 39, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x53FuLL, 0);
  }
  uint64_t result = _sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFs4Int8V_s5UInt8Vs5NeverOSSTgm5019_sSS7cStringSSSPys4f14VG_tcfcSSSRys5G7VGXEfU_Tf1cn_n((uint64_t *)a1, v4);
  *a2 = result;
  a2[1] = v6;
  return result;
}

unint64_t protocol witness for StringProtocol.init<A>(decodingCString:as:) in conformance String@<X0>(uint8x16_t *a1@<X0>, ValueMetadata *a2@<X1>, ValueMetadata *a3@<X2>, int **a4@<X3>, unint64_t *a5@<X8>)
{
  unint64_t result = String.init<A>(decodingCString:as:)(a1, a2, a3, a4);
  *a5 = result;
  a5[1] = v7;
  return result;
}

uint64_t protocol witness for StringProtocol.withCString<A>(_:) in conformance String(void (*a1)(__objc2_class **), uint64_t a2, uint64_t a3)
{
  return String.withCString<A>(_:)(a1, a2, *v3, v3[1], a3);
}

void protocol witness for StringProtocol.withCString<A, B>(encodedAs:_:) in conformance String(ValueMetadata *a1, uint64_t a2, uint64_t a3)
{
  if (a1 == &type metadata for Unicode.UTF8)
  {
    MEMORY[0x1F4188790](a1);
    void v11[2] = v4;
    uint64_t v11[3] = v5;
    v11[4] = v7;
    void v11[5] = v6;
    v11[6] = v8;
    String.withCString<A>(_:)((void (*)(__objc2_class **))partial apply for closure #1 in String.withCString<A, B>(encodedAs:_:), (uint64_t)v11, v9, v10, v4);
  }
  else
  {
    String._slowWithCString<A, B>(encodedAs:_:)((uint64_t)a1, a2, a3, *(void *)v3, *(void *)(v3 + 8));
  }
}

uint64_t protocol witness for LosslessStringConvertible.init(_:) in conformance String@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = result;
  a3[1] = a2;
  return result;
}

Swift::UInt64 String.init<A>(_:)(unint64_t *a1, Class *a2, uint64_t a3)
{
  uint64_t v6 = (uint64_t)*(a2 - 1);
  uint64_t v7 = MEMORY[0x1F4188790](a1);
  unint64_t v9 = (Swift::UInt64 *)((char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1F4188790](v7);
  uint64_t v11 = (Swift::UInt64 *)((char *)&v21 - v10);
  if (v12 != &type metadata for String)
  {
    if (a2 != (Class *)&type metadata for Substring)
    {
      if (a2 == (Class *)&unk_1EC9FFD50)
      {
        uint64_t v19 = *a1;
        Swift::UInt64 v21 = 0;
        Swift::UInt64 v22 = 0xE000000000000000;
        specialized String.append<A>(contentsOf:)(v19);
        swift_bridgeObjectRelease(v19);
      }
      else
      {
        uint64_t v13 = *(void (**)(char *, unint64_t *, Class *))(v6 + 16);
        v13((char *)&v21 - v10, a1, a2);
        if ((swift_dynamicCast((char *)&v21, v11, a2, (const char *)&type metadata for String, 6uLL) & 1) == 0)
        {
          v13((char *)v9, a1, a2);
          if (swift_dynamicCast((char *)&v21, v9, a2, (const char *)&type metadata for Substring, 6uLL))
          {
            (*(void (**)(unint64_t *, Class *))(v6 + 8))(a1, a2);
            v14._Swift::UInt64 rawBits = v21;
            v15._Swift::UInt64 rawBits = v22;
            unint64_t v16 = v23;
            unint64_t v17 = v24;
LABEL_9:
            uint64_t v18 = specialized String.init(_:)(v14, v15, v16, v17);
            swift_bridgeObjectRelease(v17);
            return v18;
          }
          Swift::UInt64 v21 = 0;
          Swift::UInt64 v22 = 0xE000000000000000;
          String.append<A>(contentsOf:)(a1, (ValueMetadata *)a2, a3);
        }
        (*(void (**)(unint64_t *, Class *))(v6 + 8))(a1, a2);
      }
      return v21;
    }
    v14._Swift::UInt64 rawBits = *a1;
    v15._Swift::UInt64 rawBits = a1[1];
    unint64_t v16 = a1[2];
    unint64_t v17 = a1[3];
    goto LABEL_9;
  }
  return *a1;
}

unint64_t specialized String.replaceSubrange<A>(_:with:)(Swift::String::Index a1, Swift::String::Index a2, unint64_t a3, unint64_t a4)
{
  Swift::UInt64 rawBits = a2._rawBits;
  Swift::UInt64 v8 = a1._rawBits;
  uint64_t v10 = *v4;
  unint64_t v9 = v4[1];
  uint64_t v11 = ((unint64_t)*v4 >> 59) & 1;
  if ((v9 & 0x1000000000000000) == 0) {
    LOBYTE(v11) = 1;
  }
  uint64_t v12 = a1._rawBits & 0xC;
  uint64_t v13 = 4 << v11;
  uint64_t v14 = a2._rawBits & 0xC;
  if ((a1._rawBits & 1) != 0 && v12 != v13 && (a2._rawBits & 1) != 0 && v14 != v13)
  {
    Swift::UInt64 v15 = HIBYTE(v9) & 0xF;
    if ((v9 & 0x2000000000000000) == 0) {
      Swift::UInt64 v15 = v10 & 0xFFFFFFFFFFFFLL;
    }
    if (v15 < a2._rawBits >> 16)
    {
      unint64_t v16 = 210;
      goto LABEL_20;
    }
    goto LABEL_23;
  }
  if (v14 == v13)
  {
    Swift::UInt64 rawBits = _StringGuts._slowEnsureMatchingEncoding(_:)(a2)._rawBits;
    if (v12 != v13) {
      goto LABEL_13;
    }
LABEL_27:
    Swift::UInt64 v8 = _StringGuts._slowEnsureMatchingEncoding(_:)((Swift::String::Index)v8)._rawBits;
    goto LABEL_13;
  }
  if (v12 == v13) {
    goto LABEL_27;
  }
LABEL_13:
  uint64_t v17 = HIBYTE(v9) & 0xF;
  if ((v9 & 0x2000000000000000) == 0) {
    uint64_t v17 = v10 & 0xFFFFFFFFFFFFLL;
  }
  if (rawBits >> 14 > 4 * v17 || rawBits >> 14 < v8 >> 14)
  {
    unint64_t v16 = 80;
LABEL_20:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index range is out of bounds", 35, 2, "Swift/StringIndexValidation.swift", 33, 2, v16, 0);
  }
  if (v8)
  {
    if (rawBits) {
      goto LABEL_23;
    }
  }
  else
  {
    Swift::UInt64 v8 = v8 & 0xC | _StringGuts.scalarAlignSlow(_:)((Swift::String::Index)v8)._rawBits & 0xFFFFFFFFFFFFFFF3 | 1;
    if (rawBits) {
      goto LABEL_23;
    }
  }
  Swift::UInt64 rawBits = rawBits & 0xC | _StringGuts.scalarAlignSlow(_:)((Swift::String::Index)rawBits)._rawBits & 0xFFFFFFFFFFFFFFF3 | 1;
LABEL_23:

  return specialized _StringGuts.replaceSubrange<A>(_:with:)(v8, rawBits, a3, a4);
}

uint64_t specialized String.replaceSubrange<A>(_:with:)(Swift::String::Index a1, Swift::String::Index a2, unint64_t a3)
{
  Swift::UInt64 rawBits = a2._rawBits;
  v6._Swift::UInt64 rawBits = a1._rawBits;
  uint64_t v8 = *v3;
  unint64_t v7 = v3[1];
  uint64_t v9 = ((unint64_t)*v3 >> 59) & 1;
  if ((v7 & 0x1000000000000000) == 0) {
    LOBYTE(v9) = 1;
  }
  uint64_t v10 = a1._rawBits & 0xC;
  uint64_t v11 = 4 << v9;
  uint64_t v12 = a2._rawBits & 0xC;
  if ((a1._rawBits & 1) != 0 && v10 != v11 && (a2._rawBits & 1) != 0 && v12 != v11)
  {
    Swift::UInt64 v13 = HIBYTE(v7) & 0xF;
    if ((v7 & 0x2000000000000000) == 0) {
      Swift::UInt64 v13 = v8 & 0xFFFFFFFFFFFFLL;
    }
    if (v13 < a2._rawBits >> 16)
    {
      unint64_t v14 = 210;
      goto LABEL_20;
    }
    goto LABEL_23;
  }
  if (v12 == v11)
  {
    Swift::UInt64 rawBits = _StringGuts._slowEnsureMatchingEncoding(_:)(a2)._rawBits;
    if (v10 != v11) {
      goto LABEL_13;
    }
LABEL_27:
    v6._Swift::UInt64 rawBits = _StringGuts._slowEnsureMatchingEncoding(_:)(v6)._rawBits;
    goto LABEL_13;
  }
  if (v10 == v11) {
    goto LABEL_27;
  }
LABEL_13:
  uint64_t v15 = HIBYTE(v7) & 0xF;
  if ((v7 & 0x2000000000000000) == 0) {
    uint64_t v15 = v8 & 0xFFFFFFFFFFFFLL;
  }
  if (rawBits >> 14 > 4 * v15 || rawBits >> 14 < v6._rawBits >> 14)
  {
    unint64_t v14 = 80;
LABEL_20:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index range is out of bounds", 35, 2, "Swift/StringIndexValidation.swift", 33, 2, v14, 0);
  }
  if (v6._rawBits)
  {
    if (rawBits) {
      goto LABEL_23;
    }
  }
  else
  {
    v6._Swift::UInt64 rawBits = v6._rawBits & 0xC | _StringGuts.scalarAlignSlow(_:)(v6)._rawBits & 0xFFFFFFFFFFFFFFF3 | 1;
    if (rawBits) {
      goto LABEL_23;
    }
  }
  Swift::UInt64 rawBits = rawBits & 0xC | _StringGuts.scalarAlignSlow(_:)((Swift::String::Index)rawBits)._rawBits & 0xFFFFFFFFFFFFFFF3 | 1;
LABEL_23:

  return specialized _StringGuts.replaceSubrange<A>(_:with:)(v6._rawBits, rawBits, a3);
}

uint64_t specialized String.replaceSubrange<A>(_:with:)(Swift::String::Index a1, Swift::String::Index a2, Swift::Int a3, uint64_t a4, unint64_t a5, uint64_t a6)
{
  Swift::UInt64 rawBits = a2._rawBits;
  v11._Swift::UInt64 rawBits = a1._rawBits;
  uint64_t v13 = *v6;
  unint64_t v12 = v6[1];
  uint64_t v14 = ((unint64_t)*v6 >> 59) & 1;
  if ((v12 & 0x1000000000000000) == 0) {
    LOBYTE(v14) = 1;
  }
  uint64_t v15 = a1._rawBits & 0xC;
  uint64_t v16 = 4 << v14;
  uint64_t v17 = a2._rawBits & 0xC;
  if ((a1._rawBits & 1) != 0 && v15 != v16 && (a2._rawBits & 1) != 0 && v17 != v16)
  {
    Swift::UInt64 v18 = HIBYTE(v12) & 0xF;
    if ((v12 & 0x2000000000000000) == 0) {
      Swift::UInt64 v18 = v13 & 0xFFFFFFFFFFFFLL;
    }
    if (v18 < a2._rawBits >> 16)
    {
      unint64_t v19 = 210;
      goto LABEL_20;
    }
    goto LABEL_23;
  }
  if (v17 == v16)
  {
    uint64_t v23 = a6;
    v24._Swift::UInt64 rawBits = _StringGuts._slowEnsureMatchingEncoding(_:)(a2)._rawBits;
    a6 = v23;
    Swift::UInt64 rawBits = v24._rawBits;
    if (v15 != v16) {
      goto LABEL_13;
    }
LABEL_27:
    uint64_t v25 = a6;
    v26._Swift::UInt64 rawBits = _StringGuts._slowEnsureMatchingEncoding(_:)(v11)._rawBits;
    a6 = v25;
    v11._Swift::UInt64 rawBits = v26._rawBits;
    goto LABEL_13;
  }
  if (v15 == v16) {
    goto LABEL_27;
  }
LABEL_13:
  uint64_t v20 = HIBYTE(v12) & 0xF;
  if ((v12 & 0x2000000000000000) == 0) {
    uint64_t v20 = v13 & 0xFFFFFFFFFFFFLL;
  }
  if (rawBits >> 14 > 4 * v20 || rawBits >> 14 < v11._rawBits >> 14)
  {
    unint64_t v19 = 80;
LABEL_20:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index range is out of bounds", 35, 2, "Swift/StringIndexValidation.swift", 33, 2, v19, 0);
  }
  if (v11._rawBits)
  {
    if (rawBits) {
      goto LABEL_23;
    }
  }
  else
  {
    uint64_t v27 = a6;
    v28._Swift::UInt64 rawBits = _StringGuts.scalarAlignSlow(_:)(v11)._rawBits;
    a6 = v27;
    v11._Swift::UInt64 rawBits = v11._rawBits & 0xC | v28._rawBits & 0xFFFFFFFFFFFFFFF3 | 1;
    if (rawBits) {
      goto LABEL_23;
    }
  }
  uint64_t v29 = a6;
  v30._Swift::UInt64 rawBits = _StringGuts.scalarAlignSlow(_:)((Swift::String::Index)rawBits)._rawBits;
  a6 = v29;
  Swift::UInt64 rawBits = rawBits & 0xC | v30._rawBits & 0xFFFFFFFFFFFFFFF3 | 1;
LABEL_23:

  return specialized _StringGuts.replaceSubrange<A>(_:with:)(v11._rawBits, rawBits, a3, a4, a5, a6);
}

unint64_t *String.replaceSubrange<A>(_:with:)(Swift::String::Index a1, Swift::String::Index a2, unint64_t *a3, ValueMetadata *a4, unint64_t a5)
{
  v7._Swift::UInt64 rawBits = a2._rawBits;
  Swift::UInt64 rawBits = a1._rawBits;
  if (a4 == &type metadata for String)
  {
    unint64_t v19 = *a3;
    unint64_t v20 = a3[1];
    return (unint64_t *)specialized String.replaceSubrange<A>(_:with:)(a1, a2, v19, v20);
  }
  else if (a4 == &type metadata for Substring)
  {
    Swift::Int v22 = *a3;
    uint64_t v23 = a3[1];
    unint64_t v24 = a3[2];
    uint64_t v25 = a3[3];
    return (unint64_t *)specialized String.replaceSubrange<A>(_:with:)(a1, a2, v22, v23, v24, v25);
  }
  else
  {
    if (a4 != (ValueMetadata *)&unk_1EC9FFD50)
    {
      uint64_t v12 = *v5;
      unint64_t v11 = v5[1];
      char v13 = (v11 & 0x1000000000000000) == 0 || (*v5 & 0x800000000000000) != 0;
      uint64_t v14 = a1._rawBits & 0xC;
      uint64_t v15 = 4 << v13;
      uint64_t v16 = a2._rawBits & 0xC;
      if ((a1._rawBits & 1) != 0 && v14 != v15 && (a2._rawBits & 1) != 0 && v16 != v15)
      {
        Swift::UInt64 v17 = HIBYTE(v11) & 0xF;
        if ((v11 & 0x2000000000000000) == 0) {
          Swift::UInt64 v17 = v12 & 0xFFFFFFFFFFFFLL;
        }
        if (v17 < a2._rawBits >> 16)
        {
          unint64_t v18 = 210;
          goto LABEL_36;
        }
        goto LABEL_29;
      }
      if (v16 == v15)
      {
        uint64_t v31 = a1._rawBits & 0xC;
        uint64_t v28 = v15;
        v29._Swift::UInt64 rawBits = _StringGuts._slowEnsureMatchingEncoding(_:)(a2)._rawBits;
        uint64_t v30 = v28;
        v7._Swift::UInt64 rawBits = v29._rawBits;
        if (v31 != v30) {
          goto LABEL_23;
        }
      }
      else if (v14 != v15)
      {
        goto LABEL_23;
      }
      Swift::UInt64 rawBits = _StringGuts._slowEnsureMatchingEncoding(_:)((Swift::String::Index)rawBits)._rawBits;
LABEL_23:
      uint64_t v26 = v12 & 0xFFFFFFFFFFFFLL;
      if ((v11 & 0x2000000000000000) != 0) {
        uint64_t v26 = HIBYTE(v11) & 0xF;
      }
      if (v7._rawBits >> 14 > 4 * v26 || v7._rawBits >> 14 < rawBits >> 14)
      {
        unint64_t v18 = 80;
LABEL_36:
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index range is out of bounds", 35, 2, "Swift/StringIndexValidation.swift", 33, 2, v18, 0);
      }
      if (rawBits)
      {
        if (v7._rawBits)
        {
LABEL_29:
          return _StringGuts.replaceSubrange<A>(_:with:)(rawBits, v7._rawBits, a3, a4, a5);
        }
      }
      else
      {
        Swift::UInt64 rawBits = rawBits & 0xC | _StringGuts.scalarAlignSlow(_:)((Swift::String::Index)rawBits)._rawBits & 0xFFFFFFFFFFFFFFF3 | 1;
        if (v7._rawBits) {
          goto LABEL_29;
        }
      }
      v7._Swift::UInt64 rawBits = v7._rawBits & 0xC | _StringGuts.scalarAlignSlow(_:)(v7)._rawBits & 0xFFFFFFFFFFFFFFF3 | 1;
      goto LABEL_29;
    }
    unint64_t v27 = *a3;
    return (unint64_t *)specialized String.replaceSubrange<A>(_:with:)(a1, a2, v27);
  }
}

Swift::Void __swiftcall String.insert(_:at:)(Swift::String _, Swift::String::Index at)
{
  unint64_t object = _._object;
  unint64_t countAndFlagsBits = _._countAndFlagsBits;
  v4._Swift::UInt64 rawBits = _StringGuts.validateInclusiveScalarIndex(_:)(at)._rawBits;

  specialized _StringGuts.replaceSubrange<A>(_:with:)(v4._rawBits, v4._rawBits, countAndFlagsBits, (unint64_t)object);
}

unint64_t *String.insert<A>(contentsOf:at:)(unint64_t *a1, Swift::String::Index a2, ValueMetadata *a3, unint64_t a4)
{
  if (a3 == &type metadata for String)
  {
    unint64_t v10 = *a1;
    unint64_t v9 = a1[1];
    v11._Swift::UInt64 rawBits = _StringGuts.validateInclusiveScalarIndex(_:)(a2)._rawBits;
    return (unint64_t *)specialized _StringGuts.replaceSubrange<A>(_:with:)(v11._rawBits, v11._rawBits, v10, v9);
  }
  else if (a3 == &type metadata for Substring)
  {
    Swift::Int v12 = *a1;
    uint64_t v13 = a1[1];
    unint64_t v15 = a1[2];
    uint64_t v14 = a1[3];
    v16._Swift::UInt64 rawBits = _StringGuts.validateInclusiveScalarIndex(_:)(a2)._rawBits;
    return (unint64_t *)specialized _StringGuts.replaceSubrange<A>(_:with:)(v16._rawBits, v16._rawBits, v12, v13, v15, v14);
  }
  else if (a3 == (ValueMetadata *)&unk_1EC9FFD50)
  {
    unint64_t v17 = *a1;
    v18._Swift::UInt64 rawBits = _StringGuts.validateInclusiveScalarIndex(_:)(a2)._rawBits;
    return (unint64_t *)specialized _StringGuts.replaceSubrange<A>(_:with:)(v18._rawBits, v18._rawBits, v17);
  }
  else
  {
    v7._Swift::UInt64 rawBits = _StringGuts.validateInclusiveScalarIndex(_:)(a2)._rawBits;
    return _StringGuts.replaceSubrange<A>(_:with:)(v7._rawBits, v7._rawBits, a1, a3, a4);
  }
}

Swift::String __swiftcall String.remove(at:)(Swift::String::Index at)
{
  uint64_t v2 = *v1;
  unint64_t v3 = v1[1];
  v4._Swift::UInt64 rawBits = _StringGuts.validateScalarIndex(_:)(at)._rawBits;
  Swift::UInt64 v5 = (v4._rawBits >> 8) & 0x3F;
  Swift::UInt64 v6 = v4._rawBits >> 16;
  if (!v5)
  {
    uint64_t v7 = v2 & 0xFFFFFFFFFFFFLL;
    if ((v3 & 0x2000000000000000) != 0) {
      uint64_t v8 = HIBYTE(v3) & 0xF;
    }
    else {
      uint64_t v8 = v2 & 0xFFFFFFFFFFFFLL;
    }
    if (v4._rawBits >> 14 == 4 * v8)
    {
      Swift::UInt64 v5 = 0;
      goto LABEL_22;
    }
    if ((v3 & 0x1000000000000000) != 0) {
      goto LABEL_38;
    }
    if ((v3 & 0x2000000000000000) != 0)
    {
      uint64_t v29 = v2;
      uint64_t v30 = v3 & 0xFFFFFFFFFFFFFFLL;
      if (v6 + 1 == (HIBYTE(v3) & 0xF)) {
        goto LABEL_21;
      }
      int v10 = *(unsigned __int16 *)((char *)&v29 + v6);
    }
    else
    {
      if ((v2 & 0x1000000000000000) != 0) {
        unint64_t v9 = (char *)((v3 & 0xFFFFFFFFFFFFFFFLL) + 32);
      }
      else {
        unint64_t v9 = (char *)_StringObject.sharedUTF8.getter(v2, v3);
      }
      if (v6 + 1 == v7) {
        goto LABEL_21;
      }
      if (!v9) {
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "unsafelyUnwrapped of nil optional", 33, 2, "Swift/Optional.swift", 20, 2, 0x163uLL, 0);
      }
      int v10 = *(unsigned __int16 *)&v9[v6];
    }
    if (v10 == 2573 || (v10 & 0x8080) != 0)
    {
LABEL_38:
      Swift::UInt64 v5 = _StringGuts._opaqueComplexCharacterStride(startingAt:)(v4._rawBits >> 16);
      goto LABEL_22;
    }
LABEL_21:
    Swift::UInt64 v5 = 1;
  }
LABEL_22:
  Swift::UInt64 v12 = v5 + v6;
  uint64_t v13 = *v1;
  unint64_t v14 = v1[1];
  Swift::Int v15 = (v5 + v6) & 0xFFFFFFFFFFFFLL;
  if ((v14 & 0x1000000000000000) != 0)
  {
    Swift::String v26 = _StringGuts.foreignErrorCorrectedGrapheme(startingAt:endingAt:)(v4._rawBits >> 16, v15);
    unint64_t object = v26._object;
    uint64_t countAndFlagsBits = v26._countAndFlagsBits;
    goto LABEL_32;
  }
  if (v15 < v6) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
  }
  if ((v14 & 0x2000000000000000) != 0)
  {
    uint64_t v29 = *v1;
    uint64_t v30 = v14 & 0xFFFFFFFFFFFFFFLL;
    if ((HIBYTE(v14) & 0xF) >= (unint64_t)v15)
    {
      uint64_t v19 = v15 - v6;
      if ((uint64_t)(v15 - v6) < 0) {
        _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeBufferPointer with negative count", 39, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x53FuLL, 0);
      }
      Swift::String::Index v18 = (uint8x16_t *)((char *)&v29 + v6);
      goto LABEL_31;
    }
    goto LABEL_36;
  }
  if ((v13 & 0x1000000000000000) == 0)
  {
    id v16 = _StringObject.sharedUTF8.getter(v13, v14);
    uint64_t v17 = v27;
    if (v27 >= v15) {
      goto LABEL_27;
    }
LABEL_36:
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x745uLL, 0);
  }
  id v16 = (id)((v14 & 0xFFFFFFFFFFFFFFFLL) + 32);
  uint64_t v17 = v13 & 0xFFFFFFFFFFFFLL;
  if ((v13 & 0xFFFFFFFFFFFFLL) < v15) {
    goto LABEL_36;
  }
LABEL_27:
  Swift::String::Index v18 = (uint8x16_t *)specialized UnsafeBufferPointer.init(rebasing:)(v4._rawBits >> 16, v15, (uint64_t)v16, v17);
LABEL_31:
  uint64_t countAndFlagsBits = specialized static String._uncheckedFromUTF8(_:)(v18, v19);
LABEL_32:
  uint64_t v22 = countAndFlagsBits;
  uint64_t v23 = object;
  _StringGuts.remove(from:to:)(v4, (Swift::String::Index)((v12 << 16) | 1));
  uint64_t v24 = v22;
  uint64_t v25 = v23;
  result._unint64_t object = v25;
  result._uint64_t countAndFlagsBits = v24;
  return result;
}

void String.removeSubrange(_:)(Swift::String::Index a1, Swift::String::Index a2)
{
  Swift::UInt64 v3 = _StringGuts.validateScalarRange(_:)(a1, a2, *v2, v2[1]);

  _StringGuts.remove(from:to:)((Swift::String::Index)v3, v4);
}

Swift::Void __swiftcall String.removeAll(keepingCapacity:)(Swift::Bool keepingCapacity)
{
  if (keepingCapacity)
  {
    _StringGuts.clear()();
  }
  else
  {
    swift_bridgeObjectRelease(v1[1]);
    void *v1 = 0;
    v1[1] = 0xE000000000000000;
  }
}

uint64_t protocol witness for RangeReplaceableCollection.replaceSubrange<A>(_:with:) in conformance String(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for RangeReplaceableCollection.replaceSubrange<A>(_:with:) in conformance String(a1, a2, a3, a4, a5, a6, (void (*)(void, void, uint64_t, uint64_t, uint64_t))String.replaceSubrange<A>(_:with:));
}

unint64_t protocol witness for RangeReplaceableCollection.init(repeating:count:) in conformance String@<X0>(unint64_t *a1@<X0>, unint64_t a2@<X1>, unint64_t *a3@<X8>)
{
  unint64_t result = specialized String.init(repeating:count:)(*a1, a1[1], a2);
  *a3 = result;
  a3[1] = v5;
  return result;
}

Swift::UInt64 protocol witness for RangeReplaceableCollection.init<A>(_:) in conformance String@<X0>(unint64_t *a1@<X0>, Class *a2@<X1>, uint64_t a3@<X2>, Swift::UInt64 *a4@<X8>)
{
  Swift::UInt64 result = String.init<A>(_:)(a1, a2, a3);
  *a4 = result;
  a4[1] = v6;
  return result;
}

void protocol witness for RangeReplaceableCollection.append(_:) in conformance String(uint64_t *a1)
{
  uint64_t v1 = (void *)a1[1];
  v2._uint64_t countAndFlagsBits = *a1;
  v2._unint64_t object = v1;
  String.append(contentsOf:)(v2);

  swift_bridgeObjectRelease((uint64_t)v1);
}

uint64_t protocol witness for RangeReplaceableCollection.append<A>(contentsOf:) in conformance String(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return protocol witness for RangeReplaceableCollection.append<A>(contentsOf:) in conformance String(a1, a2, a3, a4, a5, (void (*)(void))String.append<A>(contentsOf:));
}

void protocol witness for RangeReplaceableCollection.insert(_:at:) in conformance String(unint64_t *a1, Swift::String::Index *a2)
{
  unint64_t v2 = *a1;
  unint64_t v3 = a1[1];
  v4._Swift::UInt64 rawBits = _StringGuts.validateInclusiveScalarIndex(_:)((Swift::String::Index)a2->_rawBits)._rawBits;
  specialized _StringGuts.replaceSubrange<A>(_:with:)(v4._rawBits, v4._rawBits, v2, v3);

  swift_bridgeObjectRelease(v3);
}

uint64_t protocol witness for RangeReplaceableCollection.insert<A>(contentsOf:at:) in conformance String(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for RangeReplaceableCollection.insert<A>(contentsOf:at:) in conformance String(a1, a2, a3, a4, a5, a6, (void (*)(uint64_t, void))String.insert<A>(contentsOf:at:));
}

uint64_t protocol witness for RangeReplaceableCollection.remove(at:) in conformance String@<X0>(Swift::String::Index *a1@<X0>, Swift::String *a2@<X8>)
{
  Swift::String v4 = String.remove(at:)((Swift::String::Index)a1->_rawBits);
  uint64_t result = v4._countAndFlagsBits;
  *a2 = v4;
  return result;
}

void protocol witness for RangeReplaceableCollection.removeSubrange(_:) in conformance String(Swift::UInt64 *a1)
{
  v2._Swift::UInt64 rawBits = a1[1];
  v3._Swift::UInt64 rawBits = *a1;
  Swift::UInt64 v4 = _StringGuts.validateScalarRange(_:)(v3, v2, *v1, v1[1]);

  _StringGuts.remove(from:to:)((Swift::String::Index)v4, v5);
}

void protocol witness for RangeReplaceableCollection._customRemoveLast() in conformance String(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

uint64_t protocol witness for RangeReplaceableCollection.removeFirst() in conformance String@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = specialized RangeReplaceableCollection.removeFirst()();
  *a1 = result;
  a1[1] = v3;
  return result;
}

void protocol witness for RangeReplaceableCollection.removeAll(keepingCapacity:) in conformance String(char a1)
{
  if (a1)
  {
    _StringGuts.clear()();
  }
  else
  {
    swift_bridgeObjectRelease(v1[1]);
    void *v1 = 0;
    v1[1] = 0xE000000000000000;
  }
}

void protocol witness for RangeReplaceableCollection.removeAll(where:) in conformance String(uint64_t (*a1)(void *))
{
}

Swift::Void __swiftcall String._boundsCheck(_:)(Swift::String::Index a1)
{
  Swift::UInt64 v3 = HIBYTE(v2) & 0xF;
  if ((v2 & 0x2000000000000000) == 0) {
    Swift::UInt64 v3 = v1 & 0xFFFFFFFFFFFFLL;
  }
  if (v3 <= a1._rawBits >> 16) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index is out of bounds", 29, 2, "Swift/StringRangeReplaceableCollection.swift", 44, 2, 0x13EuLL, 0);
  }
}

void String._boundsCheck(_:)(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000) == 0) {
    unint64_t v4 = a3 & 0xFFFFFFFFFFFFLL;
  }
  if (v4 < a2 >> 16) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index range is out of bounds", 35, 2, "Swift/StringRangeReplaceableCollection.swift", 44, 2, 0x146uLL, 0);
  }
}

{
  unint64_t v4;

  unint64_t v4 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000) == 0) {
    unint64_t v4 = a3 & 0xFFFFFFFFFFFFLL;
  }
  if (v4 <= a2 >> 16) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index range is out of bounds", 35, 2, "Swift/StringRangeReplaceableCollection.swift", 44, 2, 0x14FuLL, 0);
  }
}

uint64_t String.max<A>(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X8>)
{
  char v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a4 + 32))(a2, a1, a3, a4);
  int v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a3 - 8) + 16);
  if (v9) {
    uint64_t v11 = a2;
  }
  else {
    uint64_t v11 = a1;
  }

  return v10(a5, v11, a3);
}

uint64_t String.min<A>(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X8>)
{
  char v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a4 + 16))(a2, a1, a3, a4);
  int v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a3 - 8) + 16);
  if (v9) {
    uint64_t v11 = a2;
  }
  else {
    uint64_t v11 = a1;
  }

  return v10(a5, v11, a3);
}

void static Sequence<>.+ infix(_:_:)()
{
}

{
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0, 0xE000000000000000, "Swift/StringRangeReplaceableCollection.swift", 44, 2, 0x16DuLL, 0);
}

Swift::Float __swiftcall Float.init(_:)(Swift::Int a1)
{
  return (float)a1;
}

float static Float.* infix(_:_:)(float a1, float a2)
{
  return a1 * a2;
}

Swift::Int __swiftcall Int.init(_:)(Swift::Float a1)
{
  if ((~LODWORD(a1) & 0x7F800000) == 0) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Float value cannot be converted to Int because it is either infinite or NaN", 75, 2, "Swift/IntegerTypes.swift", 24, 2, 0x36EDuLL, 0);
  }
  if (a1 <= -9.2234e18) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Float value cannot be converted to Int because the result would be less than Int.min", 84, 2, "Swift/IntegerTypes.swift", 24, 2, 0x36F0uLL, 0);
  }
  if (a1 >= 9.2234e18) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Float value cannot be converted to Int because the result would be greater than Int.max", 87, 2, "Swift/IntegerTypes.swift", 24, 2, 0x36F3uLL, 0);
  }
  return (uint64_t)a1;
}

int64_t _allocateStringStorage(codeUnitCapacity:)(int64_t result)
{
  uint64_t v2 = result + 1;
  if (__OFADD__(result, 1))
  {
    __break(1u);
    goto LABEL_10;
  }
  uint64_t v1 = 8 * (result > 63);
  BOOL v3 = __OFADD__(v2, v1);
  v2 += v1;
  if (v3)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  BOOL v3 = __OFADD__(v2, 32);
  v2 += 32;
  if (v3)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  if (v2 <= 127)
  {
    unint64_t v4 = (v2 + 15) & 0xFFFFFFFFFFFFFFF0;
    int64_t v5 = v4 - 32;
    if (!__OFSUB__(v4, 32))
    {
      Swift::UInt64 v6 = (unint64_t *)type metadata accessor for __StringStorage();
      uint64_t result = (int64_t)swift_allocObject(v6, v5 + 32, 7uLL);
      uint64_t v7 = (void *)result;
      goto LABEL_7;
    }
    goto LABEL_16;
  }
LABEL_12:
  BOOL v3 = __OFADD__(v2, 15);
  uint64_t v8 = v2 + 15;
  if (!v3)
  {
    size_t v9 = v8 & 0xFFFFFFFFFFFFFFF0;
    int v10 = (unint64_t *)type metadata accessor for __StringStorage();
    uint64_t v7 = swift_allocObject(v10, v9, 7uLL);
    uint64_t result = _swift_stdlib_malloc_size(v7);
    int64_t v5 = result - 32;
    if (!__OFSUB__(result, 32))
    {
LABEL_7:
      if (!__OFSUB__(v5, v1)) {
        return (int64_t)v7;
      }
      goto LABEL_17;
    }
    __break(1u);
LABEL_16:
    __break(1u);
LABEL_17:
    __break(1u);
  }
  __break(1u);
  return result;
}

unint64_t __StringStorage._breadcrumbsAddress.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  if ((v1 & 0x8000000000000000) == 0) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Internal error: string breadcrumbs not present", 46, 2, "Swift/StringStorage.swift", 25, 2, 0x1C6uLL, 0);
  }
  return (v0 + (v1 & 0xFFFFFFFFFFFFLL) + 39) & 0xFFFFFFFFFFFFFFF8;
}

void __StringStorage.__deallocating_deinit()
{
  uint64_t v1 = *(void *)(v0 + 16);
  if (v1 < 0)
  {
    unint64_t v2 = (v0 + (v1 & 0xFFFFFFFFFFFFLL) + 39) & 0xFFFFFFFFFFFFFFF8;
    BOOL v3 = (unint64_t *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _StringBreadcrumbs?);
    swift_arrayDestroy(v2, 1, v3);
  }

  swift_deallocClassInstance(v0);
}

uint64_t __SharedStringStorage.__ivar_destroyer()
{
  swift_unknownObjectRelease(*(id *)(v0 + 16));
  uint64_t v1 = *(void *)(v0 + 40);

  return swift_release(v1);
}

Swift::Void __swiftcall UnsafePointer.deallocate()()
{
  swift_slowDealloc(v0);
}

void __SharedStringStorage.__deallocating_deinit()
{
  uint64_t v1 = *(void **)(v0 + 16);
  if (!v1)
  {
    if (*(unsigned char *)(v0 + 48) == 1)
    {
      uint64_t v1 = 0;
    }
    else
    {
      swift_slowDealloc(*(void **)(v0 + 24));
      uint64_t v1 = *(void **)(v0 + 16);
    }
  }
  swift_retain((atomic_ullong *)v0);
  swift_unknownObjectRelease(v1);
  uint64_t v2 = *(void *)(v0 + 40);
  swift_release(v0);
  swift_release(v2);

  swift_deallocClassInstance(v0);
}

atomic_ullong *_StringGuts.loadUnmanagedBreadcrumbs()(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = a2 & 0xFFFFFFFFFFFFFFFLL;
  if ((a1 & ~a2 & 0x2000000000000000) != 0)
  {
    int64_t v5 = (atomic_ullong *)__StringStorage._breadcrumbsAddress.getter();
    explicit = (atomic_ullong *)atomic_load_explicit(v5, memory_order_acquire);
    if (explicit) {
      return explicit;
    }
  }
  else
  {
    int64_t v5 = (atomic_ullong *)(v4 + 40);
    explicit = (atomic_ullong *)atomic_load_explicit((atomic_ullong *volatile)(v4 + 40), memory_order_acquire);
    if (explicit) {
      return explicit;
    }
  }
  uint64_t v7 = (unint64_t *)type metadata accessor for _StringBreadcrumbs();
  explicit = swift_allocObject(v7, 0x20uLL, 7uLL);
  swift_bridgeObjectRetain(a2);
  _StringBreadcrumbs.init(_:)(a1, a2);
  swift_retain(explicit);
  uint64_t v8 = 0;
  atomic_compare_exchange_strong(v5, (unint64_t *)&v8, (unint64_t)explicit);
  swift_release((uint64_t)explicit);
  if (v8)
  {
    swift_release((uint64_t)explicit);
    return (atomic_ullong *)v8;
  }
  return explicit;
}

uint64_t String.init(_nativeStorage:)(unint64_t a1)
{
  if ((a1 & 0x8000000000000000) != 0)
  {
    swift_unknownObjectRelease((id)a1);
    if ((a1 & 0xFF80000000000007) == 0xC000000000000007)
    {
      uint64_t v3 = a1 & 0x7FFFFFFFFFFFF8;
      if (!v3) {
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/StringBridge.swift", 24, 2, 0x224uLL, 0);
      }
      if (_swift_stdlib_dyld_is_objc_constant_string() == 1)
      {
        if ((*(unsigned char *)(v3 + 8) & 4) != 0) {
          _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/StringBridge.swift", 24, 2, 0x22FuLL, 0);
        }
        if ((*(void *)(v3 + 24) & 0x8000000000000000) != 0) {
          _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Not enough bits to represent the passed value", 45, 2, "Swift/Integers.swift", 20, 2, 0xE67uLL, 0);
        }
      }
    }
    return 0;
  }
  uint64_t v2 = _swift_classOfObjCHeapObject((void *)a1);
  if (type metadata accessor for __StringStorage() == v2) {
    return *(void *)(a1 + 24);
  }
  if (type metadata accessor for __SharedStringStorage() != v2)
  {
    swift_unknownObjectRelease((id)a1);
    return 0;
  }
  return *(void *)(a1 + 32);
}

BOOL specialized _AbstractStringStorage._nativeIsEqual<A>(_:)(uint64_t a1)
{
  size_t v2 = *(void *)(v1 + 32) & 0xFFFFFFFFFFFFLL;
  if (v2 != (*(void *)(a1 + 24) & 0xFFFFFFFFFFFFLL)) {
    return 0;
  }
  if (*(void *)(v1 + 24) == a1 + 32) {
    return 1;
  }
  return memcmp(*(const void **)(v1 + 24), (const void *)(a1 + 32), v2) == 0;
}

{
  uint64_t v1;
  size_t v2;
  const void *v3;

  size_t v2 = *(void *)(v1 + 24) & 0xFFFFFFFFFFFFLL;
  if (v2 != (*(void *)(a1 + 32) & 0xFFFFFFFFFFFFLL)) {
    return 0;
  }
  uint64_t v3 = *(const void **)(a1 + 24);
  return (const void *)(v1 + 32) == v3 || memcmp((const void *)(v1 + 32), v3, v2) == 0;
}

{
  uint64_t v1;
  size_t v2;
  const void *v3;

  size_t v2 = *(void *)(v1 + 32) & 0xFFFFFFFFFFFFLL;
  if (v2 != (*(void *)(a1 + 32) & 0xFFFFFFFFFFFFLL)) {
    return 0;
  }
  uint64_t v3 = *(const void **)(a1 + 24);
  return *(const void **)(v1 + 24) == v3 || memcmp(*(const void **)(v1 + 24), v3, v2) == 0;
}

Swift::UInt16 __swiftcall __StringStorage.character(at:)(Swift::Int at)
{
  unint64_t v2 = *(void *)(v1 + 24);
  v3._Swift::UInt64 rawBits = String.UTF16View.index(_:offsetBy:)((Swift::String::Index)15, at)._rawBits;
  Swift::UInt64 rawBits = v3._rawBits;
  uint64_t v5 = (v2 >> 59) & 1;
  if ((v1 & 0x1000000000000000) == 0) {
    LOBYTE(v5) = 1;
  }
  if ((v3._rawBits & 0xC) == 4 << v5) {
    Swift::UInt64 rawBits = _StringGuts._slowEnsureMatchingEncoding(_:)(v3)._rawBits;
  }
  unint64_t v6 = rawBits >> 16;
  unint64_t v7 = HIBYTE(v1) & 0xF;
  if ((v1 & 0x2000000000000000) == 0) {
    unint64_t v7 = v2 & 0xFFFFFFFFFFFFLL;
  }
  if (v6 >= v7) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index is out of bounds", 29, 2, "Swift/StringUTF16View.swift", 27, 2, 0x1A7uLL, 0);
  }
  if ((v1 & 0x1000000000000000) != 0)
  {
    return String.UTF16View._foreignSubscript(position:)((Swift::String::Index)rawBits);
  }
  else
  {
    if ((rawBits & 1) == 0) {
      unint64_t v6 = _StringGuts.scalarAlignSlow(_:)((Swift::String::Index)rawBits)._rawBits >> 16;
    }
    swift_bridgeObjectRetain(v1);
    v8._Swift::UInt32 value = _StringGuts.fastUTF8Scalar(startingAt:)(v6)._value;
    Swift::UInt32 value = v8._value;
    if ((rawBits & 0xC000) == 0x4000)
    {
      if (v8._value < 0x10000) {
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UTF16.swift", 17, 2, 0x5BuLL, 0);
      }
      swift_bridgeObjectRelease(v1);
      return value & 0x3FF | 0xDC00;
    }
    else
    {
      swift_bridgeObjectRelease(v1);
      if (HIWORD(value)) {
        return ((value + 67043328) >> 10) - 10240;
      }
      else {
        return value;
      }
    }
  }
}

uint64_t String.UTF16View.subscript.getter(Swift::String::Index a1, unint64_t a2, unint64_t a3)
{
  Swift::UInt64 rawBits = a1._rawBits;
  uint64_t v6 = (a2 >> 59) & 1;
  if ((a3 & 0x1000000000000000) == 0) {
    LOBYTE(v6) = 1;
  }
  if ((a1._rawBits & 0xC) == 4 << v6) {
    Swift::UInt64 rawBits = _StringGuts._slowEnsureMatchingEncoding(_:)(a1)._rawBits;
  }
  unint64_t v7 = rawBits >> 16;
  unint64_t v8 = HIBYTE(a3) & 0xF;
  if ((a3 & 0x2000000000000000) == 0) {
    unint64_t v8 = a2 & 0xFFFFFFFFFFFFLL;
  }
  if (v7 >= v8) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index is out of bounds", 29, 2, "Swift/StringUTF16View.swift", 27, 2, 0x1A7uLL, 0);
  }
  if ((a3 & 0x1000000000000000) != 0)
  {
    return String.UTF16View._foreignSubscript(position:)((Swift::String::Index)rawBits);
  }
  else
  {
    if ((rawBits & 1) == 0) {
      unint64_t v7 = _StringGuts.scalarAlignSlow(_:)((Swift::String::Index)rawBits)._rawBits >> 16;
    }
    v9._Swift::UInt32 value = _StringGuts.fastUTF8Scalar(startingAt:)(v7)._value;
    if ((rawBits & 0xC000) == 0x4000)
    {
      if (!HIWORD(v9._value)) {
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UTF16.swift", 17, 2, 0x5BuLL, 0);
      }
      return v9._value & 0x3FF | 0xFFFFDC00;
    }
    else if (HIWORD(v9._value))
    {
      return ((v9._value + 67043328) >> 10) - 10240;
    }
    else
    {
      return v9._value;
    }
  }
}

void __StringStorage.getCharacters(_:range:)(unint64_t a1, Swift::Int a2, uint64_t a3)
{
  if (a2 < 0 || a3 < 0)
  {
    unint64_t v11 = 49;
    goto LABEL_11;
  }
  uint64_t v5 = a2 + a3;
  if (__OFADD__(a2, a3))
  {
    __break(1u);
    goto LABEL_13;
  }
  uint64_t v6 = *(void *)(v3 + 24);
  if ((v6 & 0xFFFFFFFFFFFFLL) < v5)
  {
LABEL_13:
    unint64_t v11 = 54;
LABEL_11:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range out of bounds", 19, 2, "Swift/StringStorageBridge.swift", 31, 2, v11, 0);
  }
  if (__OFSUB__(v5, a2))
  {
    __break(1u);
LABEL_15:
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeMutableBufferPointer with negative count", 46, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x47uLL, 0);
  }
  if (a3 < 0) {
    goto LABEL_15;
  }
  swift_bridgeObjectRetain(v3);
  v8._Swift::UInt64 rawBits = 15;
  Swift::Int v9 = String.UTF16View._indexRange(for:from:)(a2, v5, v8, v6, v3);
  String.UTF16View._nativeCopy(into:alignedRange:)(a1, v5 - a2, v9, v10, v6, v3);

  swift_bridgeObjectRelease(v3);
}

uint64_t __StringStorage.getCString(_:maxLength:encoding:)(char *__dst, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(v3 + 24);
  if (a3 == 1 && v5 < 0 || a3 == 4)
  {
    if ((v5 & 0xFFFFFFFFFFFFLL) >= a2)
    {
      return 0;
    }
    else
    {
      specialized UnsafeMutablePointer.initialize(from:count:)((char *)(v3 + 32), v5 & 0xFFFFFFFFFFFFLL, __dst);
      __dst[*(void *)(v3 + 24) & 0xFFFFFFFFFFFFLL] = 0;
      return 1;
    }
  }
  else
  {
    char CStringTrampoline = _swift_stdlib_NSStringGetCStringTrampoline((void *)v3, (uint64_t)__dst, a2, a3);
    if (CStringTrampoline < 0) {
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Not enough bits to represent the passed value", 45, 2, "Swift/Integers.swift", 20, 2, 0xE67uLL, 0);
    }
    return CStringTrampoline;
  }
}

uint64_t __StringStorage.isEqualToString(to:)(uint64_t result)
{
  if (!result) {
    return result;
  }
  unint64_t v2 = result;
  if ((uint64_t *)result == v1) {
    return 1;
  }
  if (result < 0)
  {
    if ((result & 0xFF80000000000007) == 0xC000000000000007)
    {
      if ((result & 0x7FFFFFFFFFFFF8) == 0) {
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/StringBridge.swift", 24, 2, 0x224uLL, 0);
      }
      if (_swift_stdlib_dyld_is_objc_constant_string() == 1)
      {
        if ((*(unsigned char *)((v2 & 0x7FFFFFFFFFFFF8) + 8) & 4) != 0) {
          _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/StringBridge.swift", 24, 2, 0x22FuLL, 0);
        }
        if ((*(void *)((v2 & 0x7FFFFFFFFFFFF8) + 0x18) & 0x8000000000000000) != 0) {
          _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Not enough bits to represent the passed value", 45, 2, "Swift/Integers.swift", 20, 2, 0xE67uLL, 0);
        }
      }
    }
  }
  else
  {
    uint64_t v3 = *v1;
    uint64_t v4 = _swift_classOfObjCHeapObject((void *)result);
    if (v3 == v4)
    {
      size_t v5 = v1[3] & 0xFFFFFFFFFFFFLL;
      if (v5 == (*(void *)(v2 + 24) & 0xFFFFFFFFFFFFLL)) {
        return memcmp(v1 + 4, (const void *)(v2 + 32), v5) == 0;
      }
      return 0;
    }
    if (type metadata accessor for __SharedStringStorage() == v4)
    {
      return specialized _AbstractStringStorage._nativeIsEqual<A>(_:)(v2);
    }
  }
  if ((_isNSString(_:)(v2) & 1) == 0) {
    return 0;
  }
  uint64_t v6 = _stdlib_binary_CFStringGetLength(_:)(v2);
  uint64_t v8 = MEMORY[0x1F4188790](v6);
  MEMORY[0x1F4188790](v8);
  char v7 = specialized _withCocoaASCIIPointer<A>(_:requireStableAddress:work:)(v2, (void (*)(uint64_t *__return_ptr, void *))thunk for @callee_guaranteed (@unowned UnsafePointer<UInt8>) -> (@unowned Bool)partial apply);
  if (v7 == 2)
  {
    if (String.UTF16View.count.getter(v1[3], (unint64_t)v1) == v6) {
      return [v1 compare:v2 options:2 range:NSMakeRange(0, [v1 length]) locale:nil] == 0;
    }
    return 0;
  }
  return v7 & 1;
}

Swift::UInt16 __swiftcall __SharedStringStorage.character(at:)(Swift::Int at)
{
  unint64_t v2 = *(void *)(v1 + 32);
  v3._Swift::UInt64 rawBits = String.UTF16View.index(_:offsetBy:)((Swift::String::Index)15, at)._rawBits;
  Swift::UInt64 rawBits = v3._rawBits;
  uint64_t v5 = (v2 >> 59) & 1;
  if ((v1 & 0x1000000000000000) == 0) {
    LOBYTE(v5) = 1;
  }
  if ((v3._rawBits & 0xC) == 4 << v5) {
    Swift::UInt64 rawBits = _StringGuts._slowEnsureMatchingEncoding(_:)(v3)._rawBits;
  }
  unint64_t v6 = rawBits >> 16;
  unint64_t v7 = HIBYTE(v1) & 0xF;
  if ((v1 & 0x2000000000000000) == 0) {
    unint64_t v7 = v2 & 0xFFFFFFFFFFFFLL;
  }
  if (v6 >= v7) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index is out of bounds", 29, 2, "Swift/StringUTF16View.swift", 27, 2, 0x1A7uLL, 0);
  }
  if ((v1 & 0x1000000000000000) != 0)
  {
    return String.UTF16View._foreignSubscript(position:)((Swift::String::Index)rawBits);
  }
  else
  {
    if ((rawBits & 1) == 0) {
      unint64_t v6 = _StringGuts.scalarAlignSlow(_:)((Swift::String::Index)rawBits)._rawBits >> 16;
    }
    swift_bridgeObjectRetain(v1);
    v8._Swift::UInt32 value = _StringGuts.fastUTF8Scalar(startingAt:)(v6)._value;
    Swift::UInt32 value = v8._value;
    if ((rawBits & 0xC000) == 0x4000)
    {
      if (v8._value < 0x10000) {
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UTF16.swift", 17, 2, 0x5BuLL, 0);
      }
      swift_bridgeObjectRelease(v1);
      return value & 0x3FF | 0xDC00;
    }
    else
    {
      swift_bridgeObjectRelease(v1);
      if (HIWORD(value)) {
        return ((value + 67043328) >> 10) - 10240;
      }
      else {
        return value;
      }
    }
  }
}

void __SharedStringStorage.getCharacters(_:range:)(unint64_t a1, Swift::Int a2, uint64_t a3)
{
  if (a2 < 0 || a3 < 0)
  {
    unint64_t v11 = 49;
    goto LABEL_11;
  }
  uint64_t v5 = a2 + a3;
  if (__OFADD__(a2, a3))
  {
    __break(1u);
    goto LABEL_13;
  }
  uint64_t v6 = *(void *)(v3 + 32);
  if ((v6 & 0xFFFFFFFFFFFFLL) < v5)
  {
LABEL_13:
    unint64_t v11 = 54;
LABEL_11:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range out of bounds", 19, 2, "Swift/StringStorageBridge.swift", 31, 2, v11, 0);
  }
  if (__OFSUB__(v5, a2))
  {
    __break(1u);
LABEL_15:
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeMutableBufferPointer with negative count", 46, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x47uLL, 0);
  }
  if (a3 < 0) {
    goto LABEL_15;
  }
  swift_bridgeObjectRetain(v3);
  v8._Swift::UInt64 rawBits = 15;
  Swift::Int v9 = String.UTF16View._indexRange(for:from:)(a2, v5, v8, v6, v3);
  String.UTF16View._nativeCopy(into:alignedRange:)(a1, v5 - a2, v9, v10, v6, v3);

  swift_bridgeObjectRelease(v3);
}

uint64_t __SharedStringStorage.getCString(_:maxLength:encoding:)(char *__dst, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(v3 + 32);
  if (a3 == 1 && v5 < 0 || a3 == 4)
  {
    if ((v5 & 0xFFFFFFFFFFFFLL) >= a2)
    {
      return 0;
    }
    else
    {
      specialized UnsafeMutablePointer.initialize(from:count:)(*(char **)(v3 + 24), v5 & 0xFFFFFFFFFFFFLL, __dst);
      __dst[*(void *)(v3 + 32) & 0xFFFFFFFFFFFFLL] = 0;
      return 1;
    }
  }
  else
  {
    char CStringTrampoline = _swift_stdlib_NSStringGetCStringTrampoline((void *)v3, (uint64_t)__dst, a2, a3);
    if (CStringTrampoline < 0) {
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Not enough bits to represent the passed value", 45, 2, "Swift/Integers.swift", 20, 2, 0xE67uLL, 0);
    }
    return CStringTrampoline;
  }
}

uint64_t __SharedStringStorage.isEqualToString(to:)(uint64_t result)
{
  if (!result) {
    return result;
  }
  unint64_t v2 = result;
  if ((uint64_t *)result == v1) {
    return 1;
  }
  if (result < 0)
  {
    if ((result & 0xFF80000000000007) == 0xC000000000000007)
    {
      if ((result & 0x7FFFFFFFFFFFF8) == 0) {
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/StringBridge.swift", 24, 2, 0x224uLL, 0);
      }
      if (_swift_stdlib_dyld_is_objc_constant_string() == 1)
      {
        if ((*(unsigned char *)((v2 & 0x7FFFFFFFFFFFF8) + 8) & 4) != 0) {
          _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/StringBridge.swift", 24, 2, 0x22FuLL, 0);
        }
        if ((*(void *)((v2 & 0x7FFFFFFFFFFFF8) + 0x18) & 0x8000000000000000) != 0) {
          _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Not enough bits to represent the passed value", 45, 2, "Swift/Integers.swift", 20, 2, 0xE67uLL, 0);
        }
      }
    }
    goto LABEL_15;
  }
  uint64_t v3 = *v1;
  uint64_t v4 = _swift_classOfObjCHeapObject((void *)result);
  if (type metadata accessor for __StringStorage() != v4)
  {
    if (v3 == v4)
    {
      return specialized _AbstractStringStorage._nativeIsEqual<A>(_:)(v2);
    }
LABEL_15:
    if (_isNSString(_:)(v2))
    {
      uint64_t v5 = _stdlib_binary_CFStringGetLength(_:)(v2);
      uint64_t v7 = MEMORY[0x1F4188790](v5);
      MEMORY[0x1F4188790](v7);
      char v6 = specialized _withCocoaASCIIPointer<A>(_:requireStableAddress:work:)(v2, (void (*)(uint64_t *__return_ptr, void *))thunk for @callee_guaranteed (@unowned UnsafePointer<UInt8>) -> (@unowned Bool)partial apply);
      if (v6 != 2) {
        return v6 & 1;
      }
      if (String.UTF16View.count.getter(v1[4], (unint64_t)v1) == v5) {
        return [v1 compare:v2 options:2 range:NSMakeRange(0, [v1 length]) locale:nil] == 0;
      }
    }
    return 0;
  }

  return specialized _AbstractStringStorage._nativeIsEqual<A>(_:)(v2);
}

uint64_t __SharedStringStorage.isEqual(to:)(uint64_t result)
{
  if (!result) {
    return result;
  }
  unint64_t v2 = result;
  if ((uint64_t *)result == v1) {
    return 1;
  }
  if (result < 0)
  {
    if ((result & 0xFF80000000000007) == 0xC000000000000007)
    {
      if ((result & 0x7FFFFFFFFFFFF8) == 0) {
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/StringBridge.swift", 24, 2, 0x224uLL, 0);
      }
      if (_swift_stdlib_dyld_is_objc_constant_string() == 1)
      {
        if ((*(unsigned char *)((v2 & 0x7FFFFFFFFFFFF8) + 8) & 4) != 0) {
          _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/StringBridge.swift", 24, 2, 0x22FuLL, 0);
        }
        if ((*(void *)((v2 & 0x7FFFFFFFFFFFF8) + 0x18) & 0x8000000000000000) != 0) {
          _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Not enough bits to represent the passed value", 45, 2, "Swift/Integers.swift", 20, 2, 0xE67uLL, 0);
        }
      }
    }
    goto LABEL_15;
  }
  uint64_t v3 = *v1;
  uint64_t v4 = _swift_classOfObjCHeapObject((void *)result);
  if (type metadata accessor for __StringStorage() != v4)
  {
    if (v3 == v4)
    {
      return specialized _AbstractStringStorage._nativeIsEqual<A>(_:)(v2);
    }
LABEL_15:
    if (_isNSString(_:)(v2))
    {
      uint64_t v5 = _stdlib_binary_CFStringGetLength(_:)(v2);
      uint64_t v7 = MEMORY[0x1F4188790](v5);
      MEMORY[0x1F4188790](v7);
      char v6 = specialized _withCocoaASCIIPointer<A>(_:requireStableAddress:work:)(v2, (void (*)(uint64_t *__return_ptr, void *))partial apply for thunk for @callee_guaranteed (@unowned UnsafePointer<UInt8>) -> (@unowned Bool));
      if (v6 != 2) {
        return v6 & 1;
      }
      if (String.UTF16View.count.getter(v1[4], (unint64_t)v1) == v5) {
        return [v1 compare:v2 options:2 range:NSMakeRange(0, [v1 length]) locale:nil] == 0;
      }
    }
    return 0;
  }

  return specialized _AbstractStringStorage._nativeIsEqual<A>(_:)(v2);
}

Swift::Int __swiftcall _findStringSwitchCase(cases:string:)(Swift::OpaquePointer cases, Swift::String string)
{
  uint64_t v2 = *((void *)cases._rawValue + 2);
  if (v2)
  {
    unint64_t object = (unint64_t)string._object;
    uint64_t countAndFlagsBits = string._countAndFlagsBits;
    Swift::Int v5 = 0;
    char v6 = (char *)cases._rawValue + 32;
    do
    {
      uint64_t v7 = &v6[24 * v5];
      char v8 = v7[16];
      if (v8) {
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "StaticString should have pointer representation", 47, 2, "Swift/StaticString.swift", 24, 2, 0x85uLL, 0);
      }
      Swift::Int v9 = *(unsigned __int8 **)v7;
      if (!*(void *)v7) {
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/StaticString.swift", 24, 2, 0x88uLL, 0);
      }
      uint64_t v10 = *((void *)v7 + 1);
      if (v10 < 0) {
        _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeBufferPointer with negative count", 39, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x53FuLL, 0);
      }
      if (v10)
      {
        if ((unint64_t)v10 <= 0xF)
        {
          uint64_t v13 = v10 - 8;
          if (v10 >= 8) {
            uint64_t v14 = 8;
          }
          else {
            uint64_t v14 = v10;
          }
          uint64_t v11 = *v9;
          if (v14 != 1)
          {
            v11 |= (unint64_t)v9[1] << 8;
            if (v14 != 2)
            {
              v11 |= (unint64_t)v9[2] << 16;
              if (v14 != 3)
              {
                v11 |= (unint64_t)v9[3] << 24;
                if (v14 != 4)
                {
                  v11 |= (unint64_t)v9[4] << 32;
                  if (v14 != 5)
                  {
                    v11 |= (unint64_t)v9[5] << 40;
                    if (v14 != 6)
                    {
                      v11 |= (unint64_t)v9[6] << 48;
                      if (v14 != 7) {
                        v11 |= (unint64_t)v9[7] << 56;
                      }
                    }
                  }
                }
              }
            }
          }
          uint64_t v15 = 0;
          if ((unint64_t)v10 >= 9)
          {
            uint64_t v16 = 0;
            uint64_t v17 = v9 + 8;
            unint64_t v18 = v13 & ~(v13 >> 63);
            do
            {
              if (v18 <= v10 - 9) {
                _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Index out of range", 18, 2, "Swift/Range.swift", 17, 2, 0x131uLL, 0);
              }
              unsigned int v19 = *v17++;
              v15 |= (unint64_t)v19 << v16;
              v16 += 8;
              --v13;
            }
            while (v13);
          }
          unint64_t v20 = 0xA000000000000000;
          if (((v15 | v11) & 0x8080808080808080) == 0) {
            unint64_t v20 = 0xE000000000000000;
          }
          unint64_t v12 = v20 | (v10 << 56) | v15;
          if (v11 != countAndFlagsBits) {
            goto LABEL_34;
          }
        }
        else
        {
          if ((v8 & 2) != 0) {
            v10 |= 0xC000000000000000;
          }
          uint64_t v11 = v10 | 0x1000000000000000;
          unint64_t v12 = (unint64_t)(v9 + 0x7FFFFFFFFFFFFFE0) | 0x8000000000000000;
          if ((v10 | 0x1000000000000000) != countAndFlagsBits) {
            goto LABEL_34;
          }
        }
      }
      else
      {
        uint64_t v11 = 0;
        unint64_t v12 = 0xE000000000000000;
        if (countAndFlagsBits) {
          goto LABEL_34;
        }
      }
      if (v12 == object)
      {
        swift_bridgeObjectRelease(v12);
        return v5;
      }
LABEL_34:
      if ((~v12 & 0x6000000000000000) != 0
        || (object & 0x2000000000000000) == 0
        || (object & 0x4000000000000000) == 0)
      {
        char v23 = _stringCompareInternal(_:_:expecting:)(v11, v12, countAndFlagsBits, object, 0);
        swift_bridgeObjectRelease(v12);
        if (v23) {
          return v5;
        }
      }
      else
      {
        swift_bridgeObjectRelease(v12);
      }
      ++v5;
    }
    while (v5 != v2);
  }
  return -1;
}

Swift::Int __swiftcall _findStringSwitchCaseWithCache(cases:string:cache:)(Swift::OpaquePointer cases, Swift::String string, Swift::_OpaqueStringSwitchCache *cache)
{
  unint64_t object = string._object;
  unint64_t countAndFlagsBits = string._countAndFlagsBits;
  context[2] = *MEMORY[0x1E4F143B8];
  p_b = &cache->b;
  Builtin::Word a = cache->a;
  context[0] = cases._rawValue;
  context[1] = &cache->b;
  if (a != -1) {
    swift_once((dispatch_once_t *)cache, (dispatch_function_t)@objc _createStringTableCache(_:), context);
  }
  unint64_t v7 = *p_b;
  if (!*(void *)(v7 + 16)) {
    return -1;
  }
  swift_bridgeObjectRetain(v7);
  unint64_t v8 = specialized __RawDictionaryStorage.find<A>(_:)(countAndFlagsBits, (unint64_t)object);
  if (v9) {
    Swift::Int v10 = *(void *)(*(void *)(v7 + 56) + 8 * v8);
  }
  else {
    Swift::Int v10 = -1;
  }
  swift_bridgeObjectRelease(v7);
  return v10;
}

uint64_t UnsafeMutableRawPointer.bindMemory<A>(to:capacity:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a3;
}

Swift::Void __swiftcall _createStringTableCache(_:)(Builtin::RawPointer a1)
{
  unint64_t v1 = *(void *)a1;
  uint64_t v2 = (void *)*((void *)a1 + 1);
  unint64_t v3 = *(void *)(*(void *)a1 + 16);
  swift_bridgeObjectRetain(*(void *)a1);
  BOOL isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native((uint64_t)&_swiftEmptyDictionarySingleton);
  uint64_t v32 = v2;
  if (qword_1EB1F31B0 >= v3)
  {
    if (!isUniquelyReferenced_nonNull_native) {
      specialized _NativeDictionary.copy()();
    }
  }
  else
  {
    if (isUniquelyReferenced_nonNull_native)
    {
      uint64_t v5 = v3;
      char v6 = 1;
    }
    else
    {
      uint64_t v5 = v3;
      char v6 = 0;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v5, v6);
  }
  swift_bridgeObjectRelease(0x8000000000000000);
  uint64_t v7 = *(void *)(v1 + 16);
  swift_bridgeObjectRetain(v1);
  if (v7)
  {
    for (unint64_t i = 0; i != v7; ++i)
    {
      if (i >= *(void *)(v1 + 16)) {
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Index out of range", 18, 2, "Swift/ContiguousArrayBuffer.swift", 33, 2, 0x2A3uLL, 0);
      }
      uint64_t v9 = v1 + 32 + 24 * i;
      char v10 = *(unsigned char *)(v9 + 16);
      if (v10) {
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "StaticString should have pointer representation", 47, 2, "Swift/StaticString.swift", 24, 2, 0x85uLL, 0);
      }
      uint64_t v11 = *(unsigned __int8 **)v9;
      if (!*(void *)v9) {
        goto LABEL_59;
      }
      uint64_t v12 = *(void *)(v9 + 8);
      if (v12 < 0) {
        _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeBufferPointer with negative count", 39, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x53FuLL, 0);
      }
      if (v12)
      {
        if ((unint64_t)v12 <= 0xF)
        {
          uint64_t v15 = v12 - 8;
          uint64_t v16 = 8;
          if (v12 < 8) {
            uint64_t v16 = v12;
          }
          unint64_t v13 = *v11;
          if (v16 != 1)
          {
            v13 |= (unint64_t)v11[1] << 8;
            if (v16 != 2)
            {
              v13 |= (unint64_t)v11[2] << 16;
              if (v16 != 3)
              {
                v13 |= (unint64_t)v11[3] << 24;
                if (v16 != 4)
                {
                  v13 |= (unint64_t)v11[4] << 32;
                  if (v16 != 5)
                  {
                    v13 |= (unint64_t)v11[5] << 40;
                    if (v16 != 6)
                    {
                      v13 |= (unint64_t)v11[6] << 48;
                      if (v16 != 7) {
                        v13 |= (unint64_t)v11[7] << 56;
                      }
                    }
                  }
                }
              }
            }
          }
          uint64_t v17 = 0;
          if ((unint64_t)v12 >= 9)
          {
            uint64_t v18 = 0;
            unsigned int v19 = v11 + 8;
            unint64_t v20 = v15 & ~(v15 >> 63);
            do
            {
              if (v20 <= v12 - 9) {
                _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Index out of range", 18, 2, "Swift/Range.swift", 17, 2, 0x131uLL, 0);
              }
              unsigned int v21 = *v19++;
              v17 |= (unint64_t)v21 << v18;
              v18 += 8;
              --v15;
            }
            while (v15);
          }
          unint64_t v22 = 0xA000000000000000;
          if (((v17 | v13) & 0x8080808080808080) == 0) {
            unint64_t v22 = 0xE000000000000000;
          }
          unint64_t v14 = v22 | (v12 << 56) | v17;
        }
        else
        {
          if ((v10 & 2) != 0) {
            v12 |= 0xC000000000000000;
          }
          unint64_t v13 = v12 | 0x1000000000000000;
          unint64_t v14 = (unint64_t)(v11 + 0x7FFFFFFFFFFFFFE0) | 0x8000000000000000;
        }
      }
      else
      {
        unint64_t v13 = 0;
        unint64_t v14 = 0xE000000000000000;
      }
      char v23 = swift_isUniquelyReferenced_nonNull_native((uint64_t)&_swiftEmptyDictionarySingleton);
      unint64_t v25 = specialized __RawDictionaryStorage.find<A>(_:)(v13, v14);
      BOOL v26 = (v24 & 1) == 0;
      uint64_t v27 = qword_1EB1F31A8 + v26;
      if (__OFADD__(qword_1EB1F31A8, v26))
      {
        __break(1u);
LABEL_58:
        __break(1u);
LABEL_59:
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/StaticString.swift", 24, 2, 0x88uLL, 0);
      }
      char v28 = v24;
      if (qword_1EB1F31B0 >= v27)
      {
        if (v23)
        {
          if (v24) {
            goto LABEL_10;
          }
        }
        else
        {
          specialized _NativeDictionary.copy()();
          if (v28) {
            goto LABEL_10;
          }
        }
      }
      else
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v27, v23);
        unint64_t v29 = specialized __RawDictionaryStorage.find<A>(_:)(v13, v14);
        if ((v28 & 1) != (v30 & 1)) {
          KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)((unint64_t)&type metadata for String);
        }
        unint64_t v25 = v29;
        if (v28)
        {
LABEL_10:
          swift_bridgeObjectRelease(v14);
          *(void *)(qword_1EB1F31D0 + 8 * v25) = i;
          goto LABEL_11;
        }
      }
      *(&_swiftEmptyDictionarySingleton + (v25 >> 6) + 8) = (__objc2_class *)((unint64_t)*(&_swiftEmptyDictionarySingleton
                                                                                                + (v25 >> 6)
                                                                                                + 8) | (1 << v25));
      uint64_t v31 = (unint64_t *)(qword_1EB1F31C8 + 16 * v25);
      *uint64_t v31 = v13;
      v31[1] = v14;
      *(void *)(qword_1EB1F31D0 + 8 * v25) = i;
      if (__OFADD__(qword_1EB1F31A8, 1)) {
        goto LABEL_58;
      }
      ++qword_1EB1F31A8;
LABEL_11:
      swift_bridgeObjectRelease(0x8000000000000000);
    }
  }
  swift_bridgeObjectRelease(v1);
  *uint64_t v32 = &_swiftEmptyDictionarySingleton;

  swift_bridgeObjectRelease(v1);
}

uint64_t _StringRepresentation._isASCII.getter()
{
  return *v0;
}

uint64_t _StringRepresentation._isASCII.setter(uint64_t result)
{
  unsigned char *v1 = result;
  return result;
}

uint64_t (*_StringRepresentation._isASCII.modify())()
{
  return EnumeratedSequence._base.modify;
}

uint64_t _StringRepresentation._count.getter()
{
  return *(void *)(v0 + 8);
}

uint64_t _StringRepresentation._count.setter(uint64_t result)
{
  *(void *)(v1 + 8) = result;
  return result;
}

uint64_t (*_StringRepresentation._count.modify())()
{
  return EnumeratedSequence._base.modify;
}

uint64_t _StringRepresentation._capacity.getter()
{
  return *(void *)(v0 + 16);
}

uint64_t _StringRepresentation._capacity.setter(uint64_t result)
{
  *(void *)(v1 + 16) = result;
  return result;
}

uint64_t (*_StringRepresentation._capacity.modify())()
{
  return EnumeratedSequence._base.modify;
}

id _StringRepresentation._form.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void **)(v1 + 24);
  *(void *)a1 = v2;
  unsigned __int8 v3 = *(unsigned char *)(v1 + 32);
  *(unsigned char *)(a1 + 8) = v3;
  return outlined copy of _StringRepresentation._Form(v2, v3);
}

void _StringRepresentation._form.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  char v3 = *((unsigned char *)a1 + 8);
  outlined consume of _StringRepresentation._Form(*(id *)(v1 + 24), *(unsigned char *)(v1 + 32));
  *(void *)(v1 + 24) = v2;
  *(unsigned char *)(v1 + 32) = v3;
}

uint64_t (*_StringRepresentation._form.modify())()
{
  return EnumeratedSequence._base.modify;
}

uint64_t _StringRepresentation._objectIdentifier.getter()
{
  if (*(unsigned char *)(v0 + 32)) {
    uint64_t v1 = 0;
  }
  else {
    uint64_t v1 = *(void *)(v0 + 24);
  }
  if (*(unsigned char *)(v0 + 32) == 1) {
    return *(void *)(v0 + 24);
  }
  else {
    return v1;
  }
}

atomic_ullong *_StringGuts._classify()@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if ((a2 & 0x2000000000000000) != 0)
  {
    uint64_t result = (atomic_ullong *)_StringGuts.nativeCapacity.getter(a1, a2);
    *(unsigned char *)a3 = (a2 & 0x4000000000000000) != 0;
    *(void *)(a3 + 8) = HIBYTE(a2) & 0xF;
    *(_OWORD *)(a3 + 16) = xmmword_18162AE30;
    char v10 = 3;
    goto LABEL_12;
  }
  uint64_t v6 = a1 & 0xFFFFFFFFFFFFLL;
  uint64_t result = (atomic_ullong *)_StringGuts.nativeCapacity.getter(a1, a2);
  if (v8) {
    uint64_t v9 = 0;
  }
  else {
    uint64_t v9 = result;
  }
  if ((a2 & 0x4000000000000000) == 0)
  {
    if ((a2 & 0x8000000000000000) == 0)
    {
      if ((a1 & ~a2 & 0x2000000000000000) == 0) {
        _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0, 0xE000000000000000, "Swift/StringTesting.swift", 25, 2, 0x5DuLL, 0);
      }
      *(unsigned char *)a3 = a1 < 0;
      *(void *)(a3 + 8) = v6;
      *(void *)(a3 + 16) = v9;
      *(void *)(a3 + 24) = a2 & 0xFFFFFFFFFFFFFFFLL;
      *(unsigned char *)(a3 + 32) = 1;
      return swift_retain((atomic_ullong *)(a2 & 0xFFFFFFFFFFFFFFFLL));
    }
    *(unsigned char *)a3 = a1 < 0;
    *(void *)(a3 + 8) = v6;
    *(void *)(a3 + 16) = v9;
    *(void *)(a3 + 24) = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
    char v10 = 2;
LABEL_12:
    *(unsigned char *)(a3 + 32) = v10;
    return result;
  }
  *(unsigned char *)a3 = a1 < 0;
  *(void *)(a3 + 8) = v6;
  *(void *)(a3 + 16) = v9;
  *(void *)(a3 + 24) = a2 & 0xFFFFFFFFFFFFFFFLL;
  *(unsigned char *)(a3 + 32) = 0;

  return (atomic_ullong *)swift_unknownObjectRetain((id)(a2 & 0xFFFFFFFFFFFFFFFLL));
}

char *UnsafeMutableRawPointer.initializeMemory<A>(as:from:count:)(int a1, char *a2, uint64_t a3, char *__dst, unint64_t *a5)
{
  if (a3 < 0) {
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeMutableRawPointer.initializeMemory with negative count", 60, 2, "Swift/UnsafeRawPointer.swift", 28, 2, 0x492uLL, 0);
  }
  uint64_t v5 = *(void *)(*(a5 - 1) + 72);
  uint64_t v6 = a3 * v5;
  if ((unsigned __int128)(a3 * (__int128)v5) >> 64 != (a3 * v5) >> 63)
  {
    __break(1u);
    goto LABEL_10;
  }
  char v8 = &__dst[v6];
  unint64_t v9 = (unint64_t)&a2[v6];
  if (v8 > a2 && v9 > (unint64_t)__dst) {
LABEL_10:
  }
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeMutableRawPointer.initializeMemory overlapping range", 58, 2, "Swift/UnsafeRawPointer.swift", 28, 2, 0x495uLL, 0);
  swift_arrayInitWithCopy(__dst, a2, a3, a5);
  return __dst;
}

uint64_t UnsafeMutableRawBufferPointer.subscript.setter(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 < 0) {
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeRawBufferPointer.swift", 34, 2, 0xC1uLL, 0);
  }
  if (!a3 || a4 - a3 <= a2) {
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeRawBufferPointer.swift", 34, 2, 0xC2uLL, 0);
  }
  *(unsigned char *)(a3 + a2) = result;
  return result;
}

uint64_t (*String.UnicodeScalarView._guts.modify())()
{
  return EnumeratedSequence._base.modify;
}

Swift::String::Index __swiftcall String.UnicodeScalarView.index(after:)(Swift::String::Index after)
{
  uint64_t v3 = v2;
  uint64_t v4 = v1;
  v5._Swift::UInt64 rawBits = _StringGuts.validateScalarIndex(_:)(after)._rawBits;
  if ((v3 & 0x1000000000000000) != 0)
  {
    return String.UnicodeScalarView._foreignIndex(after:)(v5);
  }
  else
  {
    Swift::UInt64 v6 = v5._rawBits >> 16;
    if ((v3 & 0x2000000000000000) != 0)
    {
      v12[0] = v4;
      v12[1] = v3 & 0xFFFFFFFFFFFFFFLL;
      int v8 = *((unsigned __int8 *)v12 + v6);
    }
    else
    {
      if ((v4 & 0x1000000000000000) != 0) {
        uint64_t v7 = (unsigned __int8 *)((v3 & 0xFFFFFFFFFFFFFFFLL) + 32);
      }
      else {
        uint64_t v7 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v4, v3);
      }
      int v8 = v7[v6];
    }
    int v9 = (char)v8;
    unsigned int v10 = __clz(v8 ^ 0xFF) - 24;
    if (v9 >= 0) {
      LOBYTE(v1_assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0, 0xE000000000000000, "Swift/StringRangeReplaceableCollection.swift", 44, 2, 0x168uLL, 0) = 1;
    }
    return (Swift::String::Index)(((v6 + v10) << 16) | 5);
  }
}

Swift::Int __swiftcall _StringGuts.fastUTF8ScalarLength(startingAt:)(Swift::Int startingAt)
{
  if ((v2 & 0x2000000000000000) != 0)
  {
    v9[0] = v1;
    v9[1] = v2 & 0xFFFFFFFFFFFFFFLL;
    int v5 = *((unsigned __int8 *)v9 + startingAt);
  }
  else
  {
    if ((v1 & 0x1000000000000000) != 0) {
      uint64_t v4 = (unsigned __int8 *)((v2 & 0xFFFFFFFFFFFFFFFLL) + 32);
    }
    else {
      uint64_t v4 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v1, v2);
    }
    int v5 = v4[startingAt];
  }
  int v6 = (char)v5;
  unsigned int v7 = __clz(v5 ^ 0xFF) - 24;
  if (v6 >= 0) {
    LOBYTE(v7) = 1;
  }
  return v7;
}

Swift::String::Index __swiftcall String.UnicodeScalarView._foreignIndex(after:)(Swift::String::Index after)
{
  Swift::UInt16 v2 = _StringGuts.foreignErrorCorrectedUTF16CodeUnit(at:)(after);
  uint64_t v3 = 0x10000;
  if (v2 >> 10 == 54) {
    uint64_t v3 = 0x20000;
  }
  return (Swift::String::Index)((v3 + after._rawBits) & 0xFFFFFFFFFFFF0000 | 9);
}

Swift::String::Index __swiftcall String.UnicodeScalarView._foreignIndex(before:)(Swift::String::Index before)
{
  Swift::UInt16 v2 = _StringGuts.foreignErrorCorrectedUTF16CodeUnit(at:)((Swift::String::Index)((before._rawBits & 0xFFFFFFFFFFFF0000)
                                                                                - 0x10000));
  uint64_t v3 = -65536;
  if (v2 >> 10 == 55) {
    uint64_t v3 = -131072;
  }
  return (Swift::String::Index)((v3 + before._rawBits) & 0xFFFFFFFFFFFF0000 | 9);
}

uint64_t String.UnicodeScalarView.subscript.getter(Swift::String::Index a1, uint64_t a2, uint64_t a3)
{
  v5._Swift::UInt64 rawBits = _StringGuts.validateScalarIndex(_:)(a1)._rawBits;
  if ((a3 & 0x1000000000000000) != 0)
  {
    Swift::UInt64 v10 = v5._rawBits & 0xFFFFFFFFFFFF0000;
    return *(_OWORD *)&_StringGuts.foreignErrorCorrectedScalar(startingAt:)((Swift::String::Index)v10);
  }
  else
  {
    Swift::UInt64 v7 = v5._rawBits >> 16;
    if ((a3 & 0x2000000000000000) != 0)
    {
      v11[0] = a2;
      v11[1] = a3 & 0xFFFFFFFFFFFFFFLL;
      return _decodeScalar(_:startingAt:)((uint64_t)v11, v6._rawBits, v7);
    }
    else
    {
      if ((a2 & 0x1000000000000000) != 0) {
        id v8 = (id)((a3 & 0xFFFFFFFFFFFFFFFLL) + 32);
      }
      else {
        id v8 = _StringObject.sharedUTF8.getter(a2, a3);
      }
      return _decodeScalar(_:startingAt:)((uint64_t)v8, v6._rawBits, v7);
    }
  }
}

Swift::tuple_Unicode_Scalar_scalarLength_Int __swiftcall _StringGuts.errorCorrectedScalar(startingAt:)(Swift::Int startingAt)
{
  if ((v2 & 0x1000000000000000) != 0)
  {
    Swift::Int v7 = startingAt << 16;
    Swift::tuple_Unicode_Scalar_scalarLength_Int v8 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)((Swift::String::Index)v7);
    Swift::Int scalarLength = v8.scalarLength;
    Swift::UInt32 value = v8._0._value;
  }
  else if ((v2 & 0x2000000000000000) != 0)
  {
    v9[0] = v1;
    v9[1] = v2 & 0xFFFFFFFFFFFFFFLL;
    Swift::UInt32 value = _decodeScalar(_:startingAt:)((uint64_t)v9, v1, startingAt);
  }
  else
  {
    if ((v1 & 0x1000000000000000) != 0) {
      id v4 = (id)((v2 & 0xFFFFFFFFFFFFFFFLL) + 32);
    }
    else {
      id v4 = _StringObject.sharedUTF8.getter(v1, v2);
    }
    Swift::UInt32 value = _decodeScalar(_:startingAt:)((uint64_t)v4, v1, startingAt);
  }
  result.Swift::Int scalarLength = scalarLength;
  result._0._Swift::UInt32 value = value;
  return result;
}

Swift::String::Index_optional __swiftcall String.UnicodeScalarView.index(_:offsetBy:limitedBy:)(Swift::String::Index _, Swift::Int offsetBy, Swift::String::Index limitedBy)
{
  unint64_t v5 = v4;
  uint64_t v6 = v3;
  Swift::UInt64 rawBits = limitedBy._rawBits;
  uint64_t v10 = (v3 >> 59) & 1;
  if ((v4 & 0x1000000000000000) == 0) {
    LOBYTE(v1_assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0, 0xE000000000000000, "Swift/StringRangeReplaceableCollection.swift", 44, 2, 0x168uLL, 0) = 1;
  }
  uint64_t v11 = 4 << v10;
  if ((limitedBy._rawBits & 0xC) == 4 << v10) {
    Swift::UInt64 rawBits = _StringGuts._slowEnsureMatchingEncoding(_:)(limitedBy)._rawBits;
  }
  Swift::UInt64 v12 = _._rawBits;
  if ((_._rawBits & 0xC) == v11) {
    Swift::UInt64 v12 = _StringGuts._slowEnsureMatchingEncoding(_:)(_)._rawBits;
  }
  v13._Swift::UInt64 rawBits = _StringGuts.validateInclusiveScalarIndex(_:)(_)._rawBits;
  Swift::UInt64 v14 = rawBits >> 14;
  if ((offsetBy & 0x8000000000000000) == 0)
  {
    Swift::UInt64 v15 = v12 >> 14;
    if (offsetBy)
    {
      if ((v5 & 0x2000000000000000) != 0) {
        Swift::UInt64 v16 = HIBYTE(v5) & 0xF;
      }
      else {
        Swift::UInt64 v16 = v6 & 0xFFFFFFFFFFFFLL;
      }
      while (1)
      {
        if (v14 >= v15 && v13._rawBits >> 14 >= v14) {
          goto LABEL_51;
        }
        Swift::UInt64 v17 = v13._rawBits >> 16;
        if (v13._rawBits >> 16 >= v16) {
          break;
        }
        if ((v5 & 0x1000000000000000) != 0)
        {
          v13._Swift::UInt64 rawBits = String.UnicodeScalarView._foreignIndex(after:)(v13)._rawBits;
          if (!--offsetBy) {
            goto LABEL_26;
          }
        }
        else
        {
          if ((v5 & 0x2000000000000000) != 0)
          {
            uint64_t v35 = v6;
            uint64_t v36 = v5 & 0xFFFFFFFFFFFFFFLL;
            int v19 = *((unsigned __int8 *)&v35 + v17);
          }
          else
          {
            uint64_t v18 = (unsigned __int8 *)((v5 & 0xFFFFFFFFFFFFFFFLL) + 32);
            if ((v6 & 0x1000000000000000) == 0) {
              uint64_t v18 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v6, v5);
            }
            int v19 = v18[v17];
          }
          int v20 = (char)v19;
          unsigned int v21 = __clz(v19 ^ 0xFF) - 24;
          if (v20 >= 0) {
            LOBYTE(v21) = 1;
          }
          v13._Swift::UInt64 rawBits = ((v17 + v21) << 16) | 5;
          if (!--offsetBy) {
            goto LABEL_26;
          }
        }
      }
      unint64_t v33 = 229;
LABEL_55:
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index is out of bounds", 29, 2, "Swift/StringUnicodeScalarView.swift", 35, 2, v33, 0);
    }
LABEL_26:
    if (v14 >= v15 && v14 < v13._rawBits >> 14) {
      goto LABEL_51;
    }
    goto LABEL_52;
  }
  Swift::Int v22 = 0;
  Swift::UInt64 v23 = v12 >> 14;
  char v24 = (char *)&v34 + 6;
  do
  {
    if (v23 >= v14 && v14 >= v13._rawBits >> 14) {
      goto LABEL_51;
    }
    Swift::UInt64 v25 = v13._rawBits >> 16;
    if (!(v13._rawBits >> 16))
    {
      unint64_t v33 = 236;
      goto LABEL_55;
    }
    if ((v5 & 0x1000000000000000) != 0)
    {
      uint64_t v31 = v24;
      v13._Swift::UInt64 rawBits = String.UnicodeScalarView._foreignIndex(before:)(v13)._rawBits;
      char v24 = v31;
    }
    else
    {
      if ((v5 & 0x2000000000000000) != 0)
      {
        uint64_t v35 = v6;
        uint64_t v36 = v5 & 0xFFFFFFFFFFFFFFLL;
        if ((*((unsigned char *)&v35 + v25 - 1) & 0xC0) == 0x80)
        {
          uint64_t v28 = 0;
          do
            int v29 = v24[v25 + v28--] & 0xC0;
          while (v29 == 128);
          uint64_t v30 = 1 - v28;
        }
        else
        {
          uint64_t v30 = 1;
        }
        v25 -= v30;
      }
      else
      {
        BOOL v26 = (char *)((v5 & 0xFFFFFFFFFFFFFFFLL) + 32);
        if ((v6 & 0x1000000000000000) == 0)
        {
          uint64_t v34 = v24;
          BOOL v26 = (char *)_StringObject.sharedUTF8.getter(v6, v5);
          char v24 = v34;
        }
        do
          int v27 = v26[--v25] & 0xC0;
        while (v27 == 128);
      }
      v13._Swift::UInt64 rawBits = (v25 << 16) | 5;
    }
    --v22;
  }
  while (v22 > offsetBy);
  if (v23 < v14 || v13._rawBits >> 14 >= v14)
  {
LABEL_52:
    Swift::Bool v32 = 0;
    goto LABEL_56;
  }
LABEL_51:
  v13._Swift::UInt64 rawBits = 0;
  Swift::Bool v32 = 1;
LABEL_56:
  result.Swift::UInt32 value = v13;
  result.is_nil = v32;
  return result;
}

Swift::UInt64 protocol witness for BidirectionalCollection.index(before:) in conformance String.UnicodeScalarView@<X0>(Swift::String::Index *a1@<X0>, Swift::UInt64 *a2@<X8>)
{
  uint64_t v5 = *v2;
  uint64_t v4 = v2[1];
  v6._Swift::UInt64 rawBits = _StringGuts.validateInclusiveScalarIndex(_:)((Swift::String::Index)a1->_rawBits)._rawBits;
  if (!(v6._rawBits >> 14)) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index is out of bounds", 29, 2, "Swift/StringUnicodeScalarView.swift", 35, 2, 0x84uLL, 0);
  }
  Swift::UInt64 rawBits = v6._rawBits;
  if ((v4 & 0x1000000000000000) != 0)
  {
    Swift::UInt64 result = String.UnicodeScalarView._foreignIndex(before:)(v6)._rawBits;
  }
  else
  {
    if ((v4 & 0x2000000000000000) != 0)
    {
      v17[0] = v5;
      v17[1] = v4 & 0xFFFFFFFFFFFFFFLL;
      Swift::UInt64 v12 = (char *)v17 + (v6._rawBits >> 16);
      if ((*(v12 - 1) & 0xC0) == 0x80)
      {
        uint64_t v13 = 0;
        Swift::UInt64 v14 = v12 - 2;
        do
          int v15 = v14[v13--] & 0xC0;
        while (v15 == 128);
        uint64_t v11 = 1 - v13;
      }
      else
      {
        uint64_t v11 = 1;
      }
    }
    else
    {
      if ((v5 & 0x1000000000000000) != 0) {
        Swift::tuple_Unicode_Scalar_scalarLength_Int v8 = (char *)((v4 & 0xFFFFFFFFFFFFFFFLL) + 32);
      }
      else {
        Swift::tuple_Unicode_Scalar_scalarLength_Int v8 = (char *)_StringObject.sharedUTF8.getter(v5, v4);
      }
      uint64_t v9 = 0;
      do
        int v10 = v8[(rawBits >> 16) - 1 + v9--] & 0xC0;
      while (v10 == 128);
      uint64_t v11 = -v9;
    }
    Swift::UInt64 result = (rawBits - (v11 << 16)) & 0xFFFFFFFFFFFF0000 | 5;
  }
  *a2 = result;
  return result;
}

Swift::UInt64 protocol witness for BidirectionalCollection.formIndex(before:) in conformance String.UnicodeScalarView(Swift::String::Index *a1)
{
  uint64_t v4 = *v1;
  uint64_t v3 = v1[1];
  v5._Swift::UInt64 rawBits = _StringGuts.validateInclusiveScalarIndex(_:)((Swift::String::Index)a1->_rawBits)._rawBits;
  if (!(v5._rawBits >> 14)) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index is out of bounds", 29, 2, "Swift/StringUnicodeScalarView.swift", 35, 2, 0x84uLL, 0);
  }
  Swift::UInt64 rawBits = v5._rawBits;
  if ((v3 & 0x1000000000000000) != 0)
  {
    Swift::UInt64 result = String.UnicodeScalarView._foreignIndex(before:)(v5)._rawBits;
  }
  else
  {
    if ((v3 & 0x2000000000000000) != 0)
    {
      v16[0] = v4;
      v16[1] = v3 & 0xFFFFFFFFFFFFFFLL;
      uint64_t v11 = (char *)v16 + (v5._rawBits >> 16);
      if ((*(v11 - 1) & 0xC0) == 0x80)
      {
        uint64_t v12 = 0;
        uint64_t v13 = v11 - 2;
        do
          int v14 = v13[v12--] & 0xC0;
        while (v14 == 128);
        uint64_t v10 = 1 - v12;
      }
      else
      {
        uint64_t v10 = 1;
      }
    }
    else
    {
      if ((v4 & 0x1000000000000000) != 0) {
        Swift::Int v7 = (char *)((v3 & 0xFFFFFFFFFFFFFFFLL) + 32);
      }
      else {
        Swift::Int v7 = (char *)_StringObject.sharedUTF8.getter(v4, v3);
      }
      uint64_t v8 = 0;
      do
        int v9 = v7[(rawBits >> 16) - 1 + v8--] & 0xC0;
      while (v9 == 128);
      uint64_t v10 = -v8;
    }
    Swift::UInt64 result = (rawBits - (v10 << 16)) & 0xFFFFFFFFFFFF0000 | 5;
  }
  a1->_Swift::UInt64 rawBits = result;
  return result;
}

Swift::String::Index protocol witness for BidirectionalCollection.index(_:offsetBy:) in conformance String.UnicodeScalarView@<X0>(Swift::String::Index *a1@<X0>, Swift::Int a2@<X1>, Swift::String::Index *a3@<X8>)
{
  result._Swift::UInt64 rawBits = String.UnicodeScalarView.index(_:offsetBy:)((Swift::String::Index)a1->_rawBits, a2)._rawBits;
  a3->_Swift::UInt64 rawBits = result._rawBits;
  return result;
}

uint64_t protocol witness for BidirectionalCollection.index(_:offsetBy:limitedBy:) in conformance String.UnicodeScalarView@<X0>(void *a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  return protocol witness for BidirectionalCollection.index(_:offsetBy:limitedBy:) in conformance String(a1, a2, a3, (uint64_t (*)(void, uint64_t, void, void, void))String.UnicodeScalarView.index(_:offsetBy:limitedBy:), a4);
}

Swift::Int protocol witness for BidirectionalCollection.distance(from:to:) in conformance String.UnicodeScalarView(Swift::String::Index *a1, Swift::String::Index *a2)
{
  return String.UnicodeScalarView.distance(from:to:)((Swift::String::Index)a1->_rawBits, (Swift::String::Index)a2->_rawBits);
}

uint64_t (*protocol witness for Collection.subscript.read in conformance String.UnicodeScalarView(uint64_t *a1, Swift::String::Index *a2))()
{
  uint64_t v5 = *v2;
  uint64_t v4 = v2[1];
  v6._Swift::UInt64 rawBits = _StringGuts.validateScalarIndex(_:)((Swift::String::Index)a2->_rawBits)._rawBits;
  if ((v4 & 0x1000000000000000) != 0)
  {
    int value = _StringGuts.foreignErrorCorrectedScalar(startingAt:)((Swift::String::Index)(v6._rawBits & 0xFFFFFFFFFFFF0000))._0._value;
  }
  else
  {
    Swift::UInt64 v8 = v6._rawBits >> 16;
    if ((v4 & 0x2000000000000000) != 0)
    {
      *a1 = v5;
      a1[1] = v4 & 0xFFFFFFFFFFFFFFLL;
      id v9 = a1;
    }
    else if ((v5 & 0x1000000000000000) != 0)
    {
      id v9 = (id)((v4 & 0xFFFFFFFFFFFFFFFLL) + 32);
    }
    else
    {
      id v9 = _StringObject.sharedUTF8.getter(v5, v4);
    }
    int value = _decodeScalar(_:startingAt:)((uint64_t)v9, v7._rawBits, v8);
  }
  *(_DWORD *)a1 = value;
  return EnumeratedSequence._base.modify;
}

unint64_t protocol witness for Collection.subscript.getter in conformance String.UnicodeScalarView@<X0>(Swift::UInt64 *a1@<X0>, Swift::UInt64 *a2@<X8>)
{
  v4._Swift::UInt64 rawBits = a1[1];
  v5._Swift::UInt64 rawBits = *a1;
  *a2 = specialized String.UnicodeScalarView.subscript.getter(v5, v4, *v2, v2[1]);
  a2[1] = v6;
  a2[2] = v8;
  a2[3] = v7;

  return swift_bridgeObjectRetain(v7);
}

Swift::UInt64 String.UnicodeScalarView.subscript.getter(Swift::String::Index a1, Swift::String::Index a2, unint64_t a3, unint64_t a4)
{
  Swift::UInt64 v4 = specialized String.UnicodeScalarView.subscript.getter(a1, a2, a3, a4);
  swift_bridgeObjectRetain(v5);
  return v4;
}

unint64_t protocol witness for Collection.indices.getter in conformance String@<X0>(void *a1@<X8>)
{
  specialized Collection<>.indices.getter();
  *a1 = v3;
  a1[1] = v2;
  a1[2] = v4;
  a1[3] = v5;

  return swift_bridgeObjectRetain(v2);
}

BOOL protocol witness for Collection.isEmpty.getter in conformance String.UnicodeScalarView()
{
  return specialized Collection.isEmpty.getter(*(void *)v0, *(void *)(v0 + 8));
}

Swift::String::Index protocol witness for Collection.count.getter in conformance String.UnicodeScalarView()
{
  return specialized Collection.count.getter(*(void *)v0, *(void *)(v0 + 8));
}

unint64_t protocol witness for Collection._failEarlyRangeCheck(_:bounds:) in conformance String.UnicodeScalarView(unint64_t *a1, unint64_t *a2)
{
  return specialized Substring.UTF8View._failEarlyRangeCheck(_:bounds:)(*a1, *a2, a2[1]);
}

{
  return specialized Collection._failEarlyRangeCheck(_:bounds:)(*a1, *a2, a2[1]);
}

{
  return specialized Substring.UTF8View._failEarlyRangeCheck(_:bounds:)(*a1, a1[1], *a2, a2[1]);
}

Swift::UInt64 protocol witness for Collection.index(after:) in conformance String.UnicodeScalarView@<X0>(Swift::String::Index *a1@<X0>, Swift::UInt64 *a2@<X8>)
{
  uint64_t v5 = *v2;
  uint64_t v4 = v2[1];
  v6._Swift::UInt64 rawBits = _StringGuts.validateScalarIndex(_:)((Swift::String::Index)a1->_rawBits)._rawBits;
  if ((v4 & 0x1000000000000000) != 0)
  {
    Swift::UInt64 result = String.UnicodeScalarView._foreignIndex(after:)(v6)._rawBits;
  }
  else
  {
    Swift::UInt64 v7 = v6._rawBits >> 16;
    if ((v4 & 0x2000000000000000) != 0)
    {
      v13[0] = v5;
      v13[1] = v4 & 0xFFFFFFFFFFFFFFLL;
      int v9 = *((unsigned __int8 *)v13 + v7);
    }
    else
    {
      if ((v5 & 0x1000000000000000) != 0) {
        Swift::UInt64 v8 = (unsigned __int8 *)((v4 & 0xFFFFFFFFFFFFFFFLL) + 32);
      }
      else {
        Swift::UInt64 v8 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v5, v4);
      }
      int v9 = v8[v7];
    }
    int v10 = (char)v9;
    unsigned int v11 = __clz(v9 ^ 0xFF) - 24;
    if (v10 >= 0) {
      LOBYTE(v11) = 1;
    }
    Swift::UInt64 result = ((v7 + v11) << 16) | 5;
  }
  *a2 = result;
  return result;
}

Swift::UInt64 protocol witness for Collection.formIndex(after:) in conformance String.UnicodeScalarView(Swift::String::Index *a1)
{
  uint64_t v4 = *v1;
  uint64_t v3 = v1[1];
  v5._Swift::UInt64 rawBits = _StringGuts.validateScalarIndex(_:)((Swift::String::Index)a1->_rawBits)._rawBits;
  if ((v3 & 0x1000000000000000) != 0)
  {
    Swift::UInt64 result = String.UnicodeScalarView._foreignIndex(after:)(v5)._rawBits;
  }
  else
  {
    Swift::UInt64 v6 = v5._rawBits >> 16;
    if ((v3 & 0x2000000000000000) != 0)
    {
      v12[0] = v4;
      v12[1] = v3 & 0xFFFFFFFFFFFFFFLL;
      int v8 = *((unsigned __int8 *)v12 + v6);
    }
    else
    {
      if ((v4 & 0x1000000000000000) != 0) {
        Swift::UInt64 v7 = (unsigned __int8 *)((v3 & 0xFFFFFFFFFFFFFFFLL) + 32);
      }
      else {
        Swift::UInt64 v7 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v4, v3);
      }
      int v8 = v7[v6];
    }
    int v9 = (char)v8;
    unsigned int v10 = __clz(v8 ^ 0xFF) - 24;
    if (v9 >= 0) {
      LOBYTE(v1_assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0, 0xE000000000000000, "Swift/StringRangeReplaceableCollection.swift", 44, 2, 0x168uLL, 0) = 1;
    }
    Swift::UInt64 result = ((v6 + v10) << 16) | 5;
  }
  a1->_Swift::UInt64 rawBits = result;
  return result;
}

void protocol witness for Sequence.makeIterator() in conformance String(void *a1@<X8>)
{
  unint64_t v2 = v1[1];
  uint64_t v3 = HIBYTE(v2) & 0xF;
  if ((v2 & 0x2000000000000000) == 0) {
    uint64_t v3 = *v1 & 0xFFFFFFFFFFFFLL;
  }
  *a1 = *v1;
  a1[1] = v2;
  a1[2] = 0;
  a1[3] = v3;
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance String.UnicodeScalarView(uint64_t a1, uint64_t a2)
{
  return protocol witness for Sequence._copyToContiguousArray() in conformance String(a1, a2, (uint64_t (*)(void, uint64_t))specialized _copyCollectionToContiguousArray<A>(_:));
}

uint64_t protocol witness for Sequence._copyContents(initializing:) in conformance String.UnicodeScalarView(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return specialized Sequence._copySequenceContents(initializing:)(a1, a2, a3, *(void *)v3, *(void *)(v3 + 8));
}

uint64_t protocol witness for Sequence.withContiguousStorageIfAvailable<A>(_:) in conformance String.UnicodeScalarView@<X0>(uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  return _sSTsE32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lySuqd__Isgyrzo_s7UInt128V5WordsVABsAG_pAKRszr__lIetMgyrzo_Tpq5(a1, a2);
}

uint64_t String.UnicodeScalarView.Iterator._guts.getter(uint64_t a1, unint64_t a2)
{
  return a1;
}

void String.UnicodeScalarView.Iterator._guts.setter(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease(v2[1]);
  void *v2 = a1;
  v2[1] = a2;
}

uint64_t (*String.UnicodeScalarView.Iterator._guts.modify())()
{
  return EnumeratedSequence._base.modify;
}

uint64_t String.UnicodeScalarView.Iterator._position.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a3;
}

uint64_t String.UnicodeScalarView.Iterator._position.setter(uint64_t result)
{
  *(void *)(v1 + 16) = result;
  return result;
}

uint64_t (*String.UnicodeScalarView.Iterator._position.modify())()
{
  return EnumeratedSequence._base.modify;
}

uint64_t String.UnicodeScalarView.Iterator._end.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a4;
}

uint64_t String.UnicodeScalarView.Iterator._end.setter(uint64_t result)
{
  *(void *)(v1 + 24) = result;
  return result;
}

uint64_t (*String.UnicodeScalarView.Iterator._end.modify())()
{
  return EnumeratedSequence._base.modify;
}

uint64_t protocol witness for IteratorProtocol.next() in conformance String.UnicodeScalarView.Iterator@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1[2];
  uint64_t v4 = v1[3];
  if (v3 >= v4)
  {
    uint64_t result = 0;
  }
  else
  {
    uint64_t v5 = *v1;
    uint64_t v6 = v1[1];
    if ((v6 & 0x1000000000000000) != 0)
    {
      Swift::tuple_Unicode_Scalar_scalarLength_Int v10 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)((Swift::String::Index)(v3 << 16));
      Swift::Int scalarLength = v10.scalarLength;
      uint64_t result = *(void *)&v10._0._value;
    }
    else
    {
      if ((v6 & 0x2000000000000000) != 0)
      {
        v11[0] = *v1;
        v11[1] = v6 & 0xFFFFFFFFFFFFFFLL;
        Swift::UInt64 v7 = v11;
      }
      else if ((v5 & 0x1000000000000000) != 0)
      {
        Swift::UInt64 v7 = (void *)((v6 & 0xFFFFFFFFFFFFFFFLL) + 32);
      }
      else
      {
        Swift::UInt64 v7 = _StringObject.sharedUTF8.getter(*v1, v1[1]);
      }
      uint64_t result = _decodeScalar(_:startingAt:)((uint64_t)v7, v5, v3);
    }
    v1[2] += scalarLength;
  }
  *(_DWORD *)a1 = result;
  *(unsigned char *)(a1 + 4) = v3 >= v4;
  return result;
}

uint64_t String.UnicodeScalarView.debugDescription.getter(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = specialized static String._createEmpty(withInitialCapacity:)(27);
  unint64_t v6 = v4;
  unint64_t v7 = v5;
  unint64_t v234 = v4;
  unint64_t v235 = v5;
  uint64_t v8 = HIBYTE(v5) & 0xF;
  uint64_t v9 = v4 & 0xFFFFFFFFFFFFLL;
  if ((v5 & 0x2000000000000000) != 0) {
    uint64_t v10 = HIBYTE(v5) & 0xF;
  }
  else {
    uint64_t v10 = v4 & 0xFFFFFFFFFFFFLL;
  }
  if (!v10 && (v4 & ~v5 & 0x2000000000000000) == 0)
  {
    swift_bridgeObjectRelease(v5);
    unint64_t v234 = 0xD000000000000018;
    unint64_t v235 = 0x80000001816DF500 | 0x8000000000000000;
    goto LABEL_86;
  }
  if ((v5 & 0x2000000000000000) != 0 && (0x80000001816DF500 & 0x2000000000000000) != 0)
  {
    unint64_t v11 = v8 + ((0x80000001816DF500 >> 56) & 0xF);
    if (v11 <= 0xF)
    {
      unint64_t v33 = (0x80000001816DF500 >> 56) & 0xF;
      if (v33)
      {
        char v59 = 0;
        uint64_t v60 = 0;
        unint64_t v34 = v5;
        do
        {
          uint64_t v61 = v8 + v60;
          uint64_t v62 = v60 + 1;
          unint64_t v63 = 0x80000001816DF500 | 0x8000000000000000;
          if (v60 < 8) {
            unint64_t v63 = 0xD000000000000018;
          }
          unint64_t v64 = v63 >> (v59 & 0x38);
          char v65 = (8 * v8 + v59) & 0x38;
          uint64_t v66 = (-255 << v65) - 1;
          unint64_t v67 = (unint64_t)v64 << v65;
          unint64_t v68 = v67 | v66 & v34;
          unint64_t v69 = v67 | v66 & v6;
          if (v61 < 8) {
            unint64_t v6 = v69;
          }
          else {
            unint64_t v34 = v68;
          }
          v59 += 8;
          uint64_t v60 = v62;
        }
        while (v33 != v62);
      }
      else
      {
        unint64_t v34 = v5;
      }
      swift_bridgeObjectRelease(v5);
      swift_bridgeObjectRelease(0x80000001816DF500 | 0x8000000000000000);
      unint64_t v70 = 0xA000000000000000;
      if (!(v6 & 0x8080808080808080 | v34 & 0x80808080808080)) {
        unint64_t v70 = 0xE000000000000000;
      }
      unint64_t v58 = v70 & 0xFF00000000000000 | (v11 << 56) | v34 & 0xFFFFFFFFFFFFFFLL;
      goto LABEL_85;
    }
  }
  if ((0x80000001816DF500 & 0x2000000000000000) != 0) {
    unint64_t v12 = (0x80000001816DF500 >> 56) & 0xF;
  }
  else {
    unint64_t v12 = 24;
  }
  swift_bridgeObjectRetain_n(0x80000001816DF500 | 0x8000000000000000, 2);
  if ((0x80000001816DF500 & 0x1000000000000000) == 0)
  {
    swift_bridgeObjectRetain_n(0x80000001816DF500 | 0x8000000000000000, 4);
    Swift::Int v13 = v12;
    if ((v7 & 0x1000000000000000) == 0) {
      goto LABEL_14;
    }
LABEL_274:
    Swift::Int v214 = String.UTF8View._foreignCount()();
    Swift::Int v15 = v214 + v13;
    if (!__OFADD__(v214, v13)) {
      goto LABEL_15;
    }
LABEL_276:
    __break(1u);
LABEL_277:
    unint64_t v215 = 816;
LABEL_278:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/String.swift", 18, 2, v215, 0);
  }
  swift_bridgeObjectRetain_n(0x80000001816DF500 | 0x8000000000000000, 5);
  v210._Swift::UInt64 rawBits = 1;
  v211._Swift::UInt64 rawBits = (v12 << 16) | 1;
  v212._Swift::UInt64 rawBits = _StringGuts.validateScalarRange(_:)(v210, v211, 0xD000000000000018, 0x80000001816DF500 | 0x8000000000000000);
  if (v212._rawBits < 0x10000) {
    v212._rawBits |= 3;
  }
  Swift::Int v13 = specialized Collection.count.getter(v212, v213, 0xD000000000000018, 0x80000001816DF500 | 0x8000000000000000);
  swift_bridgeObjectRelease(0x80000001816DF500 | 0x8000000000000000);
  if ((v7 & 0x1000000000000000) != 0) {
    goto LABEL_274;
  }
LABEL_14:
  BOOL v14 = __OFADD__(v10, v13);
  Swift::Int v15 = v10 + v13;
  if (v14) {
    goto LABEL_276;
  }
LABEL_15:
  unint64_t v16 = v6 & ~v7;
  if ((v16 & 0x2000000000000000) == 0 || !swift_isUniquelyReferenced_nonNull_native(v7 & 0xFFFFFFFFFFFFFFFLL))
  {
    if (v15 > 15) {
      goto LABEL_23;
    }
    if ((v7 & 0x2000000000000000) == 0) {
      goto LABEL_48;
    }
    goto LABEL_56;
  }
  int64_t v17 = _StringGuts.nativeUnusedCapacity.getter(v6, v7);
  if (v18)
  {
LABEL_284:
    unint64_t v216 = 258;
    goto LABEL_285;
  }
  if (v15 > 15) {
    goto LABEL_23;
  }
  if ((v7 & 0x2000000000000000) != 0)
  {
LABEL_56:
    swift_bridgeObjectRelease_n(0x80000001816DF500 | 0x8000000000000000, 5);
    unint64_t v32 = v7;
LABEL_57:
    v36._Swift::UInt64 rawBits = (v12 << 16) | 1;
    v37._Swift::UInt64 rawBits = 1;
    v38._Swift::UInt64 rawBits = _StringGuts.validateScalarRange(_:)(v37, v36, 0xD000000000000018, 0x80000001816DF500 | 0x8000000000000000);
    if (v38._rawBits < 0x10000) {
      v38._rawBits |= 3;
    }
    unint64_t v40 = specialized String.init(_:)(v38, v39, 0xD000000000000018, 0x80000001816DF500 | 0x8000000000000000);
    unint64_t v42 = v41;
    swift_bridgeObjectRelease(0x80000001816DF500 | 0x8000000000000000);
    if ((v42 & 0x2000000000000000) != 0)
    {
      swift_bridgeObjectRelease(v42);
    }
    else if ((v42 & 0x1000000000000000) != 0)
    {
      unint64_t v40 = _StringGuts._foreignConvertedToSmall()(v40, v42);
      unint64_t v222 = v221;
      swift_bridgeObjectRelease(v42);
      unint64_t v42 = v222;
    }
    else
    {
      if ((v40 & 0x1000000000000000) != 0)
      {
        Swift::String::Index v217 = (unsigned __int8 *)((v42 & 0xFFFFFFFFFFFFFFFLL) + 32);
        uint64_t v218 = v40 & 0xFFFFFFFFFFFFLL;
      }
      else
      {
        Swift::String::Index v217 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v40, v42);
      }
      closure #1 in _StringGuts._convertedToSmall()(v217, v218, &v233);
      swift_bridgeObjectRelease(v42);
      unint64_t v40 = v233;
      unint64_t v42 = *((void *)&v233 + 1);
    }
    uint64_t v43 = HIBYTE(v32) & 0xF;
    uint64_t v44 = HIBYTE(v42) & 0xF;
    uint64_t v45 = v44 + v43;
    if ((unint64_t)(v44 + v43) <= 0xF)
    {
      if (v44)
      {
        char v46 = 0;
        unint64_t v47 = 0;
        do
        {
          unint64_t v48 = v43 + v47;
          unint64_t v49 = v47 + 1;
          if (v47 >= 8) {
            unint64_t v50 = v42;
          }
          else {
            unint64_t v50 = v40;
          }
          unint64_t v51 = v50 >> (v46 & 0x38);
          char v52 = (8 * v43 + v46) & 0x38;
          uint64_t v53 = (-255 << v52) - 1;
          unint64_t v54 = (unint64_t)v51 << v52;
          unint64_t v55 = v54 | v53 & v32;
          unint64_t v56 = v54 | v53 & v6;
          if (v48 < 8) {
            unint64_t v6 = v56;
          }
          else {
            unint64_t v32 = v55;
          }
          v46 += 8;
          unint64_t v47 = v49;
        }
        while (v44 != v49);
      }
      swift_bridgeObjectRelease(v7);
      swift_bridgeObjectRelease(0x80000001816DF500 | 0x8000000000000000);
      unint64_t v57 = 0xA000000000000000;
      if (!(v6 & 0x8080808080808080 | v32 & 0x80808080808080)) {
        unint64_t v57 = 0xE000000000000000;
      }
      unint64_t v58 = v57 & 0xFF00000000000000 | (v45 << 56) | v32 & 0xFFFFFFFFFFFFFFLL;
LABEL_85:
      unint64_t v234 = v6;
      unint64_t v235 = v58;
      goto LABEL_86;
    }
LABEL_279:
    unint64_t v216 = 266;
LABEL_285:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/StringGutsRangeReplaceable.swift", 38, 2, v216, 0);
  }
  if (v17 < v13)
  {
LABEL_48:
    swift_bridgeObjectRelease_n(0x80000001816DF500 | 0x8000000000000000, 5);
    if ((v7 & 0x1000000000000000) == 0)
    {
      if ((v6 & 0x1000000000000000) != 0)
      {
        uint64_t v31 = (unsigned __int8 *)((v7 & 0xFFFFFFFFFFFFFFFLL) + 32);
      }
      else
      {
        uint64_t v31 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v6, v7);
        uint64_t v9 = v220;
      }
      swift_bridgeObjectRetain(v7);
      closure #1 in _StringGuts._convertedToSmall()(v31, v9, &v233);
      swift_bridgeObjectRelease(v7);
      unint64_t v6 = v233;
      unint64_t v32 = *((void *)&v233 + 1);
      goto LABEL_57;
    }
    goto LABEL_287;
  }
LABEL_23:
  int64_t v19 = _StringGuts.nativeUnusedCapacity.getter(v6, v7);
  BOOL v22 = (v20 & 1) == 0 && v19 >= v13;
  if ((v16 & 0x2000000000000000) != 0 && swift_isUniquelyReferenced_nonNull_native(v7 & 0xFFFFFFFFFFFFFFFLL))
  {
    if (v22) {
      goto LABEL_41;
    }
    goto LABEL_34;
  }
  if (!v22)
  {
LABEL_34:
    uint64_t v23 = _StringGuts.nativeCapacity.getter(v6, v7);
    if (v24) {
      uint64_t v25 = 0;
    }
    else {
      uint64_t v25 = v23;
    }
    if (v25 + 0x4000000000000000 < 0)
    {
      __break(1u);
LABEL_287:
      unint64_t v6 = _StringGuts._foreignConvertedToSmall()(v6, v7);
      unint64_t v32 = v219;
      goto LABEL_57;
    }
    uint64_t v26 = 2 * v25;
    if (v26 > v15) {
      Swift::Int v15 = v26;
    }
  }
  _StringGuts.grow(_:)(v15);
LABEL_41:
  unint64_t v27 = 0x80000001816DF500 | 0x8000000000000000;
  swift_bridgeObjectRelease_n(0x80000001816DF500 | 0x8000000000000000, 4);
  if ((0x80000001816DF500 & 0x1000000000000000) != 0)
  {
    swift_bridgeObjectRelease(0x80000001816DF500 | 0x8000000000000000);
    _StringGuts._foreignAppendInPlace(_:)(0xD000000000000018, 0x80000001816DF500 | 0x8000000000000000, 0, v12);
  }
  else
  {
    char v28 = (0x80000001816DF500 & 0x2000000000000000) == 0 || (0x80000001816DF500 & 0x4000000000000000) != 0;
    swift_bridgeObjectRelease(0x80000001816DF500 | 0x8000000000000000);
    if ((0x80000001816DF500 & 0x2000000000000000) != 0)
    {
      swift_bridgeObjectRelease(0x80000001816DF500 | 0x8000000000000000);
      *(void *)&unsigned long long v233 = 0xD000000000000018;
      *((void *)&v233 + 1) = 0x80000001816DF500 & 0xFFFFFFFFFFFFFFLL;
      unint64_t v208 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, v12, (uint64_t)&v233, (0x80000001816DF500 >> 56) & 0xF);
      _StringGuts.appendInPlace(_:isASCII:)(v208, v209, v28);
      swift_bridgeObjectRelease(0x80000001816DF500 | 0x8000000000000000);
      goto LABEL_86;
    }
    unint64_t v27 = 0x80000001816DF500 | 0x8000000000000000;
    int v29 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, v12, (0x80000001816DF500 & 0xFFFFFFFFFFFFFFFLL) + 32, 24);
    _StringGuts.appendInPlace(_:isASCII:)(v29, v30, v28);
  }
  swift_bridgeObjectRelease_n(v27, 2);
LABEL_86:
  uint64_t v71 = 34;
  uint64_t v72 = 0xE100000000000000;
  *(void *)&unsigned long long v233 = 34;
  *((void *)&v233 + 1) = 0xE100000000000000;
  uint64_t v73 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0) {
    uint64_t v73 = a1 & 0xFFFFFFFFFFFFLL;
  }
  uint64_t v228 = v73;
  if (!v73)
  {
    unint64_t v94 = 0xE100000000000000;
    goto LABEL_192;
  }
  uint64_t v74 = 0;
  uint64_t v223 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
  uint64_t v224 = a2 & 0xFFFFFFFFFFFFFFLL;
  char v75 = 1;
  unint64_t v225 = a2;
  uint64_t v226 = a1;
  do
  {
    while (1)
    {
      if ((a2 & 0x1000000000000000) != 0)
      {
        Swift::tuple_Unicode_Scalar_scalarLength_Int v80 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)((Swift::String::Index)(v74 << 16));
        Swift::Int scalarLength = v80.scalarLength;
        unsigned int value = v80._0._value;
      }
      else
      {
        if ((a2 & 0x2000000000000000) != 0)
        {
          uint64_t v231 = a1;
          uint64_t v232 = v224;
          uint64_t v77 = &v231;
        }
        else
        {
          uint64_t v77 = (uint64_t *)v223;
          if ((a1 & 0x1000000000000000) == 0) {
            uint64_t v77 = (uint64_t *)_StringObject.sharedUTF8.getter(a1, a2);
          }
        }
        unsigned int value = _decodeScalar(_:startingAt:)((uint64_t)v77, v35, v74);
      }
      unsigned int v81 = value;
      v74 += scalarLength;
      unsigned long long v82 = (unsigned __int128)Unicode.Scalar._escaped(asASCII:)(0);
      if (*((void *)&v82 + 1))
      {
        uint64_t v83 = *((void *)&v233 + 1);
        unint64_t v84 = HIBYTE(*((void *)&v233 + 1)) & 0xFLL;
        if ((*((void *)&v233 + 1) & 0x2000000000000000) == 0) {
          unint64_t v84 = v233 & 0xFFFFFFFFFFFFLL;
        }
        if (v84 || ((unint64_t)v233 & ~*((void *)&v233 + 1) & 0x2000000000000000) != 0)
        {
          if ((*((void *)&v82 + 1) & 0x2000000000000000 & *((void *)&v233 + 1)) == 0
            || (unint64_t v85 = specialized _SmallString.init(_:appending:)(v233, *((unint64_t *)&v233 + 1), v82, *((unint64_t *)&v82 + 1)), (v87 & 1) != 0))
          {
            if ((*((void *)&v82 + 1) & 0x2000000000000000) != 0) {
              uint64_t v76 = HIBYTE(*((void *)&v82 + 1)) & 0xFLL;
            }
            else {
              uint64_t v76 = v82 & 0xFFFFFFFFFFFFLL;
            }
            swift_bridgeObjectRetain(*((unint64_t *)&v82 + 1));
            _StringGuts.append(_:)(v82, *((unint64_t *)&v82 + 1), 0, v76);
            swift_bridgeObjectRelease_n(*((uint64_t *)&v82 + 1), 2);
          }
          else
          {
            uint64_t v88 = v85;
            unint64_t v89 = v86;
            swift_bridgeObjectRelease(v83);
            swift_bridgeObjectRelease(*((uint64_t *)&v82 + 1));
            *(void *)&unsigned long long v233 = v88;
            *((void *)&v233 + 1) = v89;
          }
        }
        else
        {
          swift_bridgeObjectRelease(*((uint64_t *)&v233 + 1));
          unsigned long long v233 = v82;
        }
        goto LABEL_94;
      }
      uint64_t v91 = v233;
      unint64_t v90 = *((void *)&v233 + 1);
      if (v75)
      {
        LODWORD(v231) = 0;
        swift_bridgeObjectRetain(*((unint64_t *)&v233 + 1));
        unint64_t v92 = specialized BidirectionalCollection.last.getter(v91, v90);
        swift_bridgeObjectRelease(v90);
        if ((v92 & 0x100000000) != 0) {
          goto LABEL_277;
        }
        if (!_GraphemeBreakingState.shouldBreak(between:and:)((Swift::Unicode::Scalar)v92, (Swift::Unicode::Scalar)v81)) {
          break;
        }
      }
      uint64_t v231 = v91;
      uint64_t v232 = v90;
      *(void *)&unsigned long long v233 = 0;
      *((void *)&v233 + 1) = 0xE000000000000000;
      unint64_t v94 = specialized Unicode.Scalar.withUTF8CodeUnits<A>(_:)(v81);
      uint64_t v71 = v93;
      uint64_t v95 = v93 & 0x2000000000000000;
      uint64_t v96 = HIBYTE(v93) & 0xF;
      uint64_t v97 = HIBYTE(v90) & 0xF;
      if ((v90 & 0x2000000000000000) != 0 && v95)
      {
        if ((unint64_t)(v96 + v97) <= 0xF)
        {
          swift_bridgeObjectRelease(v93);
          if (v96)
          {
            char v129 = 0;
            unint64_t v130 = 0;
            unint64_t v131 = v90;
            do
            {
              unint64_t v132 = v97 + v130;
              unint64_t v133 = v130 + 1;
              if (v130 >= 8) {
                unint64_t v134 = v71;
              }
              else {
                unint64_t v134 = v94;
              }
              unint64_t v135 = v134 >> (v129 & 0x38);
              char v136 = (8 * v97 + v129) & 0x38;
              uint64_t v137 = (-255 << v136) - 1;
              unint64_t v138 = (unint64_t)v135 << v136;
              unint64_t v139 = v138 | v137 & v131;
              unint64_t v140 = v138 | v137 & v91;
              if (v132 < 8) {
                uint64_t v91 = v140;
              }
              else {
                unint64_t v131 = v139;
              }
              v129 += 8;
              unint64_t v130 = v133;
            }
            while (v96 != v133);
          }
          else
          {
            unint64_t v131 = v90;
          }
          swift_bridgeObjectRelease(v90);
          unint64_t v153 = 0xE000000000000000;
          if (v91 & 0x8080808080808080 | v131 & 0x80808080808080) {
            unint64_t v153 = 0xA000000000000000;
          }
          uint64_t v231 = v91;
          uint64_t v232 = v153 & 0xFF00000000000000 | ((v96 + v97) << 56) | v131 & 0xFFFFFFFFFFFFFFLL;
          a2 = v225;
          a1 = v226;
          goto LABEL_178;
        }
        uint64_t v95 = 1;
      }
      if (v95) {
        uint64_t v98 = HIBYTE(v93) & 0xF;
      }
      else {
        uint64_t v98 = v94 & 0xFFFFFFFFFFFFLL;
      }
      swift_bridgeObjectRetain(v93);
      uint64_t v227 = v98;
      if ((v71 & 0x1000000000000000) != 0)
      {
        swift_bridgeObjectRetain_n(v71, 5);
        v154._Swift::UInt64 rawBits = 1;
        v155._Swift::UInt64 rawBits = (v98 << 16) | 1;
        v156._Swift::UInt64 rawBits = _StringGuts.validateScalarRange(_:)(v154, v155, v94, v71);
        if (v156._rawBits < 0x10000) {
          v156._rawBits |= 3;
        }
        uint64_t v98 = specialized Collection.count.getter(v156, v157, v94, v71);
        swift_bridgeObjectRelease(v71);
        if ((v90 & 0x1000000000000000) != 0)
        {
LABEL_185:
          Swift::Int v99 = String.UTF8View._foreignCount()();
          int64_t v100 = v99 + v98;
          if (__OFADD__(v99, v98)) {
            goto LABEL_256;
          }
          goto LABEL_126;
        }
      }
      else
      {
        swift_bridgeObjectRetain_n(v71, 4);
        if ((v90 & 0x1000000000000000) != 0) {
          goto LABEL_185;
        }
      }
      if ((v90 & 0x2000000000000000) != 0) {
        Swift::Int v99 = HIBYTE(v90) & 0xF;
      }
      else {
        Swift::Int v99 = v91 & 0xFFFFFFFFFFFFLL;
      }
      int64_t v100 = v99 + v98;
      if (__OFADD__(v99, v98))
      {
LABEL_256:
        __break(1u);
        goto LABEL_257;
      }
LABEL_126:
      if ((v91 & ~v90 & 0x2000000000000000) != 0
        && swift_isUniquelyReferenced_nonNull_native(v90 & 0xFFFFFFFFFFFFFFFLL))
      {
        uint64_t v101 = v232;
        int64_t v102 = _StringGuts.nativeUnusedCapacity.getter(v231, v232);
        a1 = v226;
        if (v103) {
          goto LABEL_284;
        }
        a2 = v225;
        if (v100 > 15 || (v101 & 0x2000000000000000) == 0 && v102 >= v98)
        {
LABEL_134:
          _StringGuts.prepareForAppendInPlace(totalCount:otherUTF8Count:)(v100, v98);
          swift_bridgeObjectRelease_n(v71, 4);
          if ((v71 & 0x1000000000000000) != 0)
          {
            swift_bridgeObjectRelease(v71);
            _StringGuts._foreignAppendInPlace(_:)(v94, v71, 0, v227);
          }
          else
          {
            if (v95)
            {
              swift_bridgeObjectRelease_n(v71, 2);
              *(void *)&unsigned long long v230 = v94;
              *((void *)&v230 + 1) = v71 & 0xFFFFFFFFFFFFFFLL;
              Swift::Int v104 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, v96, (uint64_t)&v230, v96);
              _StringGuts.appendInPlace(_:isASCII:)(v104, v105, (v71 & 0x4000000000000000) != 0);
              goto LABEL_178;
            }
            if ((v94 & 0x1000000000000000) != 0)
            {
              swift_bridgeObjectRelease(v71);
              id v143 = (id)((v71 & 0xFFFFFFFFFFFFFFFLL) + 32);
              uint64_t v144 = v94 & 0xFFFFFFFFFFFFLL;
              uint64_t v145 = v94 & 0xFFFFFFFFFFFFLL;
            }
            else
            {
              id v143 = _StringObject.sharedUTF8.getter(v94, v71);
              uint64_t v145 = v158;
              swift_bridgeObjectRelease(v71);
              uint64_t v144 = v94 & 0xFFFFFFFFFFFFLL;
              if (v145 < (uint64_t)(v94 & 0xFFFFFFFFFFFFLL)) {
                _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x745uLL, 0);
              }
            }
            uint64_t v146 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, v144, (uint64_t)v143, v145);
            _StringGuts.appendInPlace(_:isASCII:)(v146, v147, (v94 & 0x8000000000000000) != 0);
          }
          swift_bridgeObjectRelease(v71);
          goto LABEL_178;
        }
      }
      else
      {
        a2 = v225;
        a1 = v226;
        if (v100 > 15) {
          goto LABEL_134;
        }
        uint64_t v101 = v232;
      }
      swift_bridgeObjectRelease_n(v71, 5);
      unint64_t v110 = v231;
      swift_bridgeObjectRetain(v101);
      unint64_t v111 = _StringGuts._convertedToSmall()(v110, v101);
      unint64_t v113 = v112;
      swift_bridgeObjectRelease(v101);
      v114._Swift::UInt64 rawBits = (v227 << 16) | 1;
      v115._Swift::UInt64 rawBits = 1;
      v116._Swift::UInt64 rawBits = _StringGuts.validateScalarRange(_:)(v115, v114, v94, v71);
      if (v116._rawBits < 0x10000) {
        v116._rawBits |= 3;
      }
      unint64_t v118 = specialized String.init(_:)(v116, v117, v94, v71);
      unint64_t v120 = v119;
      swift_bridgeObjectRelease(v71);
      unint64_t v121 = _StringGuts._convertedToSmall()(v118, v120);
      unint64_t v123 = v122;
      swift_bridgeObjectRelease(v120);
      unint64_t v124 = specialized _SmallString.init(_:appending:)(v111, v113, v121, v123);
      if (v126) {
        goto LABEL_279;
      }
      uint64_t v127 = v124;
      uint64_t v128 = v125;
      swift_bridgeObjectRelease(v101);
      uint64_t v231 = v127;
      uint64_t v232 = v128;
LABEL_178:
      uint64_t v71 = v231;
      unint64_t v94 = v232;
      swift_bridgeObjectRelease(*((uint64_t *)&v233 + 1));
      char v75 = 0;
      *(void *)&unsigned long long v233 = v71;
      *((void *)&v233 + 1) = v94;
      if (v74 >= v228) {
        goto LABEL_191;
      }
    }
    Swift::String_optional v107 = Unicode.Scalar._escaped(asASCII:)(1);
    unint64_t object = (unint64_t)v107.value._object;
    if (v107.value._object) {
      uint64_t countAndFlagsBits = v107.value._countAndFlagsBits;
    }
    else {
      uint64_t countAndFlagsBits = specialized Unicode.Scalar.withUTF8CodeUnits<A>(_:)(v81);
    }
    unint64_t v109 = object;
    uint64_t v141 = HIBYTE(v90) & 0xF;
    if ((v90 & 0x2000000000000000) == 0) {
      uint64_t v141 = v91 & 0xFFFFFFFFFFFFLL;
    }
    if (v141 || (v91 & ~v90 & 0x2000000000000000) != 0)
    {
      if ((v90 & 0x2000000000000000) == 0)
      {
        if ((object & 0x2000000000000000) != 0) {
LABEL_172:
        }
          uint64_t v142 = HIBYTE(v109) & 0xF;
        else {
LABEL_165:
        }
          uint64_t v142 = countAndFlagsBits & 0xFFFFFFFFFFFFLL;
        a1 = v226;
        swift_bridgeObjectRetain(v109);
        _StringGuts.append(_:)(countAndFlagsBits, v109, 0, v142);
        swift_bridgeObjectRelease_n(v109, 2);
        a2 = v225;
        goto LABEL_94;
      }
      if ((object & 0x2000000000000000) == 0) {
        goto LABEL_165;
      }
      unint64_t v148 = specialized _SmallString.init(_:appending:)(v91, v90, countAndFlagsBits, object);
      if (v150) {
        goto LABEL_172;
      }
      uint64_t v151 = v148;
      uint64_t v152 = v149;
      swift_bridgeObjectRelease(v90);
      swift_bridgeObjectRelease(v109);
      *(void *)&unsigned long long v233 = v151;
      *((void *)&v233 + 1) = v152;
    }
    else
    {
      swift_bridgeObjectRelease(v90);
      *(void *)&unsigned long long v233 = countAndFlagsBits;
      *((void *)&v233 + 1) = v109;
    }
    a2 = v225;
    a1 = v226;
LABEL_94:
    char v75 = 1;
  }
  while (v74 < v228);
  uint64_t v71 = v233;
  unint64_t v94 = *((void *)&v233 + 1);
LABEL_191:
  uint64_t v72 = 0xE100000000000000;
LABEL_192:
  uint64_t v231 = 34;
  uint64_t v232 = 0xE100000000000000;
  uint64_t v159 = HIBYTE(v94) & 0xF;
  if ((v94 & 0x2000000000000000) == 0) {
    uint64_t v159 = v71 & 0xFFFFFFFFFFFFLL;
  }
  if (!v159) {
    goto LABEL_246;
  }
  while (2)
  {
    uint64_t v165 = v231;
    uint64_t v166 = v232;
    swift_bridgeObjectRetain(v232);
    unint64_t v167 = specialized Collection.first.getter(v165, v166);
    swift_bridgeObjectRelease(v166);
    if ((v167 & 0x100000000) != 0)
    {
      unint64_t v215 = 839;
      goto LABEL_278;
    }
    *(void *)&unsigned long long v230 = v71;
    *((void *)&v230 + 1) = v94;
    *(void *)&unsigned long long v233 = 0;
    *((void *)&v233 + 1) = 0xE000000000000000;
    unint64_t v168 = specialized Unicode.Scalar.withUTF8CodeUnits<A>(_:)(v167);
    uint64_t v170 = v169;
    _StringGuts.append(_:)(v168, v169);
    swift_bridgeObjectRelease(v170);
    unint64_t v172 = *((void *)&v230 + 1);
    uint64_t v171 = v230;
    swift_bridgeObjectRetain(*((unint64_t *)&v230 + 1));
    swift_bridgeObjectRelease(0xE000000000000000);
    unsigned long long v233 = __PAIR128__(v172, v171);
    uint64_t v173 = HIBYTE(v172) & 0xF;
    if ((v172 & 0x2000000000000000) == 0) {
      uint64_t v173 = v171;
    }
    uint64_t v174 = 7;
    if (((v172 >> 60) & ((v171 & 0x800000000000000) == 0)) != 0) {
      uint64_t v174 = 11;
    }
    v175._Swift::UInt64 rawBits = v174 | (v173 << 16);
    swift_bridgeObjectRetain(v172);
    v176._Swift::UInt64 rawBits = _StringGuts.validateInclusiveCharacterIndex_5_7(_:)(v175)._rawBits;
    Swift::UInt64 rawBits = v176._rawBits;
    if (!(v176._rawBits >> 14))
    {
      if (_swift_stdlib_isExecutableLinkedOnOrAfter(0x50700u)) {
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index is out of bounds", 29, 2, "Swift/StringCharacterView.swift", 31, 2, 0x62uLL, 0);
      }
      uint64_t v178 = 0;
      goto LABEL_219;
    }
    uint64_t v178 = v176._rawBits >> 16;
    if (v176._rawBits < 0x20000)
    {
LABEL_223:
      if (v178 <= 63) {
        uint64_t v183 = v178 << 8;
      }
      else {
        uint64_t v183 = 63;
      }
    }
    else
    {
      if ((v172 & 0x1000000000000000) != 0) {
        goto LABEL_222;
      }
      if ((v172 & 0x2000000000000000) != 0)
      {
        *(void *)&unsigned long long v230 = v171;
        *((void *)&v230 + 1) = v172 & 0xFFFFFFFFFFFFFFLL;
        unint64_t v180 = (char *)&v230 + v178;
      }
      else
      {
        if ((v171 & 0x1000000000000000) != 0)
        {
          uint64_t v179 = (char *)((v172 & 0xFFFFFFFFFFFFFFFLL) + 32);
        }
        else
        {
          uint64_t v179 = (char *)_StringObject.sharedUTF8.getter(v171, v172);
          if (!v179) {
            _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "unsafelyUnwrapped of nil optional", 33, 2, "Swift/Optional.swift", 20, 2, 0x163uLL, 0);
          }
        }
        unint64_t v180 = &v179[v178];
      }
      int v181 = *((unsigned __int16 *)v180 - 1);
      if (v181 == 2573 || (v181 & 0x80808080) != 0)
      {
LABEL_222:
        uint64_t v178 = _StringGuts._opaqueComplexCharacterStride(endingAt:)(rawBits >> 16);
        goto LABEL_223;
      }
      uint64_t v178 = 1;
LABEL_219:
      uint64_t v183 = v178 << 8;
    }
    v184._Swift::UInt64 rawBits = _StringGuts.validateInclusiveScalarIndex(_:)(v175)._rawBits;
    if (!(v184._rawBits >> 14)) {
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index is out of bounds", 29, 2, "Swift/StringUnicodeScalarView.swift", 35, 2, 0x84uLL, 0);
    }
    Swift::UInt64 v185 = v184._rawBits;
    swift_bridgeObjectRelease(v172);
    if ((v172 & 0x1000000000000000) != 0)
    {
      Swift::UInt64 v190 = String.UnicodeScalarView._foreignIndex(before:)((Swift::String::Index)v185)._rawBits;
      swift_bridgeObjectRelease(v172);
    }
    else
    {
      if ((v172 & 0x2000000000000000) != 0)
      {
        uint64_t v187 = 0;
        *(void *)&unsigned long long v230 = v171;
        *((void *)&v230 + 1) = v172 & 0xFFFFFFFFFFFFFFLL;
        do
          int v189 = *(&v229 + (v185 >> 16) + v187--) & 0xC0;
        while (v189 == 128);
      }
      else
      {
        if ((v171 & 0x1000000000000000) != 0) {
          uint64_t v186 = (char *)((v172 & 0xFFFFFFFFFFFFFFFLL) + 32);
        }
        else {
          uint64_t v186 = (char *)_StringObject.sharedUTF8.getter(v171, v172);
        }
        uint64_t v187 = 0;
        do
          int v188 = v186[(v185 >> 16) - 1 + v187--] & 0xC0;
        while (v188 == 128);
      }
      swift_bridgeObjectRelease(v172);
      Swift::UInt64 v190 = (v185 - -65536 * v187) & 0xFFFFFFFFFFFF0000 | 5;
    }
    if (((rawBits - (v178 << 16)) & 0xFFFFFFFFFFFF0000 | v183) >> 14 >= v190 >> 14)
    {
      Swift::UInt64 v194 = specialized Collection.dropFirst(_:)(1, v231, v232);
      uint64_t v196 = v195;
      *(void *)&unsigned long long v230 = v171;
      *((void *)&v230 + 1) = v172;
      *(void *)&unsigned long long v233 = 0;
      *((void *)&v233 + 1) = 0xE000000000000000;
      specialized String.UnicodeScalarView.append<A>(contentsOf:)(v194, v197, v198, v195);
      swift_bridgeObjectRelease(0xE000000000000000);
      swift_bridgeObjectRelease(v196);
      unint64_t v94 = *((void *)&v230 + 1);
      uint64_t v71 = v230;
      goto LABEL_247;
    }
    *(void *)&unsigned long long v230 = v171;
    *((void *)&v230 + 1) = v172;
    specialized RangeReplaceableCollection<>.removeLast()();
    swift_bridgeObjectRelease(0xE000000000000000);
    unsigned int v191 = specialized RangeReplaceableCollection<>.removeLast()();
    swift_bridgeObjectRelease(0xE000000000000000);
    unsigned long long v233 = v230;
    Swift::String_optional v192 = Unicode.Scalar._escaped(asASCII:)(1);
    size_t v160 = v192.value._object;
    if (v192.value._object) {
      uint64_t v161 = v192.value._countAndFlagsBits;
    }
    else {
      uint64_t v161 = specialized Unicode.Scalar.withUTF8CodeUnits<A>(_:)(v191);
    }
    unint64_t v193 = (unint64_t)v160;
    v162._Swift::UInt64 rawBits = 15;
    v163._Swift::UInt64 rawBits = 15;
    specialized String.UnicodeScalarView.replaceSubrange<A>(_:with:)(v162, v163, v161, v193);
    swift_bridgeObjectRelease(v193);
    uint64_t v71 = v233;
    unint64_t v94 = *((void *)&v233 + 1);
    unint64_t v164 = HIBYTE(*((void *)&v233 + 1)) & 0xFLL;
    if ((*((void *)&v233 + 1) & 0x2000000000000000) == 0) {
      unint64_t v164 = v233 & 0xFFFFFFFFFFFFLL;
    }
    if (v164) {
      continue;
    }
    break;
  }
  uint64_t v72 = v232;
LABEL_246:
  swift_bridgeObjectRelease(v72);
LABEL_247:
  Swift::Int v99 = v234;
  uint64_t v98 = v235;
  unint64_t v199 = HIBYTE(v235) & 0xF;
  if ((v235 & 0x2000000000000000) == 0) {
    unint64_t v199 = v234 & 0xFFFFFFFFFFFFLL;
  }
  if (!v199 && (v234 & ~v235 & 0x2000000000000000) == 0)
  {
    swift_bridgeObjectRelease(v235);
    unint64_t v234 = v71;
    unint64_t v235 = v94;
    goto LABEL_261;
  }
  if ((v235 & 0x2000000000000000) != 0)
  {
    if ((v94 & 0x2000000000000000) != 0)
    {
LABEL_257:
      unint64_t v201 = specialized _SmallString.init(_:appending:)(v99, v98, v71, v94);
      if (v203) {
        goto LABEL_259;
      }
      unint64_t v204 = v201;
      unint64_t v205 = v202;
      swift_bridgeObjectRelease(v98);
      swift_bridgeObjectRelease(v94);
      unint64_t v234 = v204;
      unint64_t v235 = v205;
      unint64_t v94 = v205;
      uint64_t v71 = v204;
      goto LABEL_261;
    }
LABEL_255:
    uint64_t v200 = v71 & 0xFFFFFFFFFFFFLL;
    goto LABEL_260;
  }
  if ((v94 & 0x2000000000000000) == 0) {
    goto LABEL_255;
  }
LABEL_259:
  uint64_t v200 = HIBYTE(v94) & 0xF;
LABEL_260:
  swift_bridgeObjectRetain(v94);
  _StringGuts.append(_:)(v71, v94, 0, v200);
  swift_bridgeObjectRelease_n(v94, 2);
  uint64_t v71 = v234;
  unint64_t v94 = v235;
LABEL_261:
  uint64_t v206 = HIBYTE(v94) & 0xF;
  if ((v94 & 0x2000000000000000) == 0) {
    uint64_t v206 = v71 & 0xFFFFFFFFFFFFLL;
  }
  if (v206 || (v71 & ~v94 & 0x2000000000000000) != 0)
  {
    _StringGuts.append(_:)(0x29uLL, 0xE100000000000000);
    swift_bridgeObjectRelease(0xE100000000000000);
    return v234;
  }
  else
  {
    swift_bridgeObjectRelease(v94);
    return 41;
  }
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance String.UnicodeScalarView()
{
  return String.UnicodeScalarView.debugDescription.getter(*(void *)v0, *(void *)(v0 + 8));
}

unint64_t key path setter for String.unicodeScalars : String(void *a1, void *a2)
{
  swift_bridgeObjectRelease(a2[1]);
  unint64_t v4 = a1[1];
  *a2 = *a1;
  a2[1] = v4;

  return swift_bridgeObjectRetain(v4);
}

void String.unicodeScalars.setter(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease(v2[1]);
  void *v2 = a1;
  v2[1] = a2;
}

unint64_t specialized String.UnicodeScalarView.replaceSubrange<A>(_:with:)(Swift::String::Index a1, Swift::String::Index a2, uint64_t a3, unint64_t a4)
{
  Swift::UInt64 rawBits = a2._rawBits;
  Swift::UInt64 v8 = a1._rawBits;
  uint64_t v10 = *v4;
  unint64_t v9 = v4[1];
  uint64_t v11 = ((unint64_t)*v4 >> 59) & 1;
  if ((v9 & 0x1000000000000000) == 0) {
    LOBYTE(v11) = 1;
  }
  uint64_t v12 = a1._rawBits & 0xC;
  uint64_t v13 = 4 << v11;
  uint64_t v14 = a2._rawBits & 0xC;
  if ((a1._rawBits & 1) != 0 && v12 != v13 && (a2._rawBits & 1) != 0 && v14 != v13)
  {
    Swift::UInt64 v15 = HIBYTE(v9) & 0xF;
    if ((v9 & 0x2000000000000000) == 0) {
      Swift::UInt64 v15 = v10 & 0xFFFFFFFFFFFFLL;
    }
    if (v15 < a2._rawBits >> 16 && _swift_stdlib_isExecutableLinkedOnOrAfter(0x50700u))
    {
      unint64_t v16 = 372;
      goto LABEL_21;
    }
    goto LABEL_24;
  }
  if (v14 == v13)
  {
    Swift::UInt64 rawBits = _StringGuts._slowEnsureMatchingEncoding(_:)(a2)._rawBits;
    if (v12 != v13) {
      goto LABEL_14;
    }
LABEL_28:
    Swift::UInt64 v8 = _StringGuts._slowEnsureMatchingEncoding(_:)((Swift::String::Index)v8)._rawBits;
    goto LABEL_14;
  }
  if (v12 == v13) {
    goto LABEL_28;
  }
LABEL_14:
  uint64_t v17 = HIBYTE(v9) & 0xF;
  if ((v9 & 0x2000000000000000) == 0) {
    uint64_t v17 = v10 & 0xFFFFFFFFFFFFLL;
  }
  if (rawBits >> 14 > 4 * v17 || rawBits >> 14 < v8 >> 14)
  {
    unint64_t v16 = 356;
LABEL_21:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index range is out of bounds", 35, 2, "Swift/StringIndexValidation.swift", 33, 2, v16, 0);
  }
  if (v8)
  {
    if (rawBits) {
      goto LABEL_24;
    }
  }
  else
  {
    Swift::UInt64 v8 = v8 & 0xC | _StringGuts.scalarAlignSlow(_:)((Swift::String::Index)v8)._rawBits & 0xFFFFFFFFFFFFFFF3 | 1;
    if (rawBits) {
      goto LABEL_24;
    }
  }
  Swift::UInt64 rawBits = rawBits & 0xC | _StringGuts.scalarAlignSlow(_:)((Swift::String::Index)rawBits)._rawBits & 0xFFFFFFFFFFFFFFF3 | 1;
LABEL_24:

  return specialized _StringGuts.replaceSubrange<A>(_:with:)(v8, rawBits, a3, a4);
}

uint64_t String.UnicodeScalarView.replaceSubrange<A>(_:with:)(Swift::String::Index a1, Swift::String::Index a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  Swift::UInt64 v9 = _StringGuts.validateScalarRange_5_7(_:)(a1, a2, *v5, v5[1]);

  return _StringGuts.replaceSubrange<A>(_:with:)(v9, v10, a3, a4, a5);
}

void protocol witness for RangeReplaceableCollection.init() in conformance String.UnicodeScalarView(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0xE000000000000000;
}

uint64_t protocol witness for RangeReplaceableCollection.replaceSubrange<A>(_:with:) in conformance String.UnicodeScalarView(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for RangeReplaceableCollection.replaceSubrange<A>(_:with:) in conformance String(a1, a2, a3, a4, a5, a6, (void (*)(void, void, uint64_t, uint64_t, uint64_t))String.UnicodeScalarView.replaceSubrange<A>(_:with:));
}

uint64_t protocol witness for RangeReplaceableCollection.replaceSubrange<A>(_:with:) in conformance String(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void (*a7)(void, void, uint64_t, uint64_t, uint64_t))
{
  a7(*a1, a1[1], a2, a3, a4);
  Swift::UInt64 v9 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 8);

  return v9(a2, a3);
}

unint64_t protocol witness for RangeReplaceableCollection.init(repeating:count:) in conformance String.UnicodeScalarView@<X0>(int *a1@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X8>)
{
  unint64_t result = specialized RangeReplaceableCollection.init(repeating:count:)(*a1, a2);
  *a3 = result;
  a3[1] = v5;
  return result;
}

uint64_t protocol witness for RangeReplaceableCollection.init<A>(_:) in conformance String.UnicodeScalarView@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t *a4@<X8>)
{
  unint64_t v7 = specialized RangeReplaceableCollection.init<A>(_:)(a1, a2, a3);
  unint64_t v9 = v8;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a2 - 8) + 8))(a1, a2);
  *a4 = v7;
  a4[1] = v9;
  return result;
}

void protocol witness for RangeReplaceableCollection.append(_:) in conformance String.UnicodeScalarView(unsigned int *a1)
{
  unint64_t v1 = specialized Unicode.Scalar.withUTF8CodeUnits<A>(_:)(*a1);
  uint64_t v3 = v2;
  _StringGuts.append(_:)(v1, v2);

  swift_bridgeObjectRelease(v3);
}

uint64_t protocol witness for RangeReplaceableCollection.append<A>(contentsOf:) in conformance String.UnicodeScalarView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return protocol witness for RangeReplaceableCollection.append<A>(contentsOf:) in conformance String(a1, a2, a3, a4, a5, (void (*)(void))String.UnicodeScalarView.append<A>(contentsOf:));
}

uint64_t protocol witness for RangeReplaceableCollection.append<A>(contentsOf:) in conformance String(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void (*a6)(void))
{
  a6();
  unint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a2 - 8) + 8);

  return v8(a1, a2);
}

uint64_t protocol witness for RangeReplaceableCollection.insert(_:at:) in conformance String.UnicodeScalarView(int *a1, Swift::UInt64 *a2)
{
  int v3 = *a1;
  v5._Swift::UInt64 rawBits = *a2;
  v4._Swift::UInt64 rawBits = v5._rawBits;
  Swift::UInt64 v6 = _StringGuts.validateScalarRange_5_7(_:)(v4, v5, *v2, v2[1]);

  return specialized _StringGuts.replaceSubrange<A>(_:with:)(v6, v7, v3);
}

uint64_t protocol witness for RangeReplaceableCollection.insert<A>(contentsOf:at:) in conformance String.UnicodeScalarView(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for RangeReplaceableCollection.insert<A>(contentsOf:at:) in conformance String(a1, a2, a3, a4, a5, a6, (void (*)(uint64_t, void))specialized RangeReplaceableCollection.insert<A>(contentsOf:at:));
}

uint64_t protocol witness for RangeReplaceableCollection.insert<A>(contentsOf:at:) in conformance String(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void (*a7)(uint64_t, void))
{
  a7(a1, *a2);
  unint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 8);

  return v9(a1, a3);
}

uint64_t protocol witness for RangeReplaceableCollection.remove(at:) in conformance String.UnicodeScalarView@<X0>(Swift::UInt64 *a1@<X0>, _DWORD *a2@<X8>)
{
  uint64_t result = specialized RangeReplaceableCollection.remove(at:)(*a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for RangeReplaceableCollection.removeSubrange(_:) in conformance String.UnicodeScalarView(Swift::UInt64 *a1)
{
  v2._Swift::UInt64 rawBits = a1[1];
  v3._Swift::UInt64 rawBits = *a1;
  Swift::UInt64 v4 = _StringGuts.validateScalarRange_5_7(_:)(v3, v2, *v1, v1[1]);

  return specialized _StringGuts.replaceSubrange<A>(_:with:)(v4, v5);
}

void protocol witness for RangeReplaceableCollection._customRemoveLast() in conformance String.UnicodeScalarView(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 0;
  *(unsigned char *)(a1 + 4) = 1;
}

unint64_t protocol witness for RangeReplaceableCollection.removeFirst() in conformance String.UnicodeScalarView@<X0>(_DWORD *a1@<X8>)
{
  unint64_t result = specialized RangeReplaceableCollection.removeFirst()();
  *a1 = result;
  return result;
}

void protocol witness for RangeReplaceableCollection.removeAll(where:) in conformance String.UnicodeScalarView(uint64_t (*a1)(void *), uint64_t a2)
{
}

Swift::Bool __swiftcall _StringGuts.isOnUnicodeScalarBoundary(_:)(Swift::String::Index a1)
{
  if ((a1._rawBits & 0xC000) != 0) {
    return 0;
  }
  if (a1._rawBits < 0x4000) {
    return 1;
  }
  uint64_t v6 = HIBYTE(v2) & 0xF;
  if ((v2 & 0x2000000000000000) == 0) {
    uint64_t v6 = v1 & 0xFFFFFFFFFFFFLL;
  }
  if (a1._rawBits >> 14 == 4 * v6) {
    return 1;
  }
  v10[4] = v3;
  unint64_t v10[5] = v4;
  if ((v2 & 0x1000000000000000) != 0) {
    return a1._rawBits >> 14 == _StringGuts.foreignScalarAlign(_:)(a1)._rawBits >> 14;
  }
  if ((v2 & 0x2000000000000000) != 0)
  {
    v10[0] = v1;
    v10[1] = v2 & 0xFFFFFFFFFFFFFFLL;
    char v8 = *((unsigned char *)v10 + (a1._rawBits >> 16));
  }
  else
  {
    if ((v1 & 0x1000000000000000) != 0)
    {
      unint64_t v7 = (unsigned char *)((v2 & 0xFFFFFFFFFFFFFFFLL) + 32);
    }
    else
    {
      Swift::UInt64 rawBits = a1._rawBits;
      unint64_t v7 = _StringObject.sharedUTF8.getter(v1, v2);
      a1._Swift::UInt64 rawBits = rawBits;
    }
    char v8 = v7[a1._rawBits >> 16];
  }
  return (v8 & 0xC0) != 128;
}

Swift::String::Index_optional __swiftcall String.Index.samePosition(in:)(Swift::String in)
{
  Swift::UInt64 v2 = String.Index.samePosition(in:)(in._countAndFlagsBits, (unint64_t)in._object, v1, (uint64_t (*)(uint64_t, uint64_t, unint64_t))specialized String.Index.init(_:within:));
  result.value._Swift::UInt64 rawBits = v2;
  result.is_nil = v3;
  return result;
}

uint64_t String.UnicodeScalarView.customMirror.getter@<X0>(unint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  swift_bridgeObjectRetain_n(a2, 2);

  return specialized Mirror.init<A, B>(_:unlabeledChildren:displayStyle:ancestorRepresentation:)(a1, a2, a1, a2, 8, 0, 0, a3);
}

uint64_t protocol witness for CustomReflectable.customMirror.getter in conformance String.UnicodeScalarView(uint64_t a1, uint64_t a2)
{
  return protocol witness for CustomReflectable.customMirror.getter in conformance String.UnicodeScalarView(a1, a2, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, void))specialized Mirror.init<A, B>(_:unlabeledChildren:displayStyle:ancestorRepresentation:));
}

Swift::UInt16 __swiftcall _StringGuts.foreignErrorCorrectedUTF16CodeUnit(at:)(Swift::String::Index at)
{
  unint64_t v3 = v2;
  uint64_t v4 = v1;
  Swift::UInt64 v6 = at._rawBits >> 16;
  unint64_t v7 = (void *)(v2 & 0xFFFFFFFFFFFFFFFLL);
  Swift::UInt16 v8 = [(unsigned __int16)[(id)(v2 & 0xFFFFFFFFFFFFFFFLL) characterAtIndex:((at._rawBits >> 16) & 0xFFFF)]
  if ((v8 & 0xFC00) != 0xD800)
  {
    if ((v8 & 0xFC00) != 0xDC00
      || at._rawBits >= 0x10000 && (objc_msgSend(v7, sel_characterAtIndex_, v6 - 1) & 0xFC00) == 0xD800)
    {
      return v8;
    }
    return -3;
  }
  unint64_t v9 = HIBYTE(v3) & 0xF;
  if ((v3 & 0x2000000000000000) == 0) {
    unint64_t v9 = v4 & 0xFFFFFFFFFFFFLL;
  }
  if (v6 + 1 >= v9) {
    return -3;
  }
  if ((objc_msgSend(v7, sel_characterAtIndex_) & 0xFC00) != 0xDC00) {
    return -3;
  }
  return v8;
}

BOOL static Unicode.UTF16.isLeadSurrogate(_:)(unsigned __int16 a1)
{
  return a1 >> 10 == 54;
}

BOOL static Unicode.UTF16.isTrailSurrogate(_:)(unsigned __int16 a1)
{
  return a1 >> 10 == 55;
}

uint64_t (*String.UTF16View._guts.modify())()
{
  return EnumeratedSequence._base.modify;
}

Swift::String::Index __swiftcall String.UTF16View.index(before:)(Swift::String::Index before)
{
  unint64_t v3 = v2;
  uint64_t v4 = v1;
  Swift::UInt64 rawBits = before._rawBits;
  uint64_t v6 = (v1 >> 59) & 1;
  if ((v2 & 0x1000000000000000) == 0) {
    LOBYTE(v6) = 1;
  }
  if ((before._rawBits & 0xC) == 4 << v6)
  {
    Swift::UInt64 rawBits = _StringGuts._slowEnsureMatchingEncoding(_:)(before)._rawBits;
    if (rawBits < 0x4000) {
      goto LABEL_23;
    }
  }
  else if (before._rawBits < 0x4000)
  {
    goto LABEL_23;
  }
  uint64_t v7 = HIBYTE(v3) & 0xF;
  if ((v3 & 0x2000000000000000) == 0) {
    uint64_t v7 = v4 & 0xFFFFFFFFFFFFLL;
  }
  if (4 * v7 < rawBits >> 14) {
LABEL_23:
  }
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index is out of bounds", 29, 2, "Swift/StringUTF16View.swift", 27, 2, 0xAFuLL, 0);
  if ((v3 & 0x1000000000000000) != 0)
  {
    return (Swift::String::Index)specialized String.UTF16View._foreignIndex(before:)(rawBits);
  }
  else
  {
    uint64_t v8 = (v3 >> 62) & 1;
    if ((v3 & 0x2000000000000000) == 0) {
      LODWORD(v8) = v4 < 0;
    }
    if (v8 == 1) {
      return (Swift::String::Index)((rawBits & 0xFFFFFFFFFFFF0000) - 65523);
    }
    if ((rawBits & 0xC000) != 0) {
      return (Swift::String::Index)(rawBits & 0xFFFFFFFFFFFF0000 | 5);
    }
    if ((rawBits & 1) == 0) {
      Swift::UInt64 rawBits = _StringGuts.scalarAlignSlow(_:)((Swift::String::Index)rawBits)._rawBits & 0xFFFFFFFFFFFFFFF2 | 1;
    }
    result._Swift::UInt64 rawBits = _StringGuts.fastUTF8ScalarLength(endingAt:)(rawBits >> 16);
    if (result._rawBits == 4) {
      return (Swift::String::Index)((rawBits & 0xFFFFFFFFFFFF0000) - 245756);
    }
    if (!__OFSUB__(0, result._rawBits)) {
      return (Swift::String::Index)((((rawBits >> 16) - result._rawBits) << 16) | 5);
    }
    __break(1u);
  }
  return result;
}

Swift::Int __swiftcall _StringGuts.fastUTF8ScalarLength(endingAt:)(Swift::Int endingAt)
{
  if ((v2 & 0x2000000000000000) != 0)
  {
LABEL_11:
    v9[0] = v1;
    v9[1] = v2 & 0xFFFFFFFFFFFFFFLL;
    Swift::Int result = 1;
    Swift::Int v8 = endingAt - 1;
    do
    {
      if (v8 < 0) {
        goto LABEL_19;
      }
      if (endingAt - 1 >= (uint64_t)(HIBYTE(v2) & 0xF)) {
        goto LABEL_20;
      }
      if ((*((unsigned char *)v9 + v8) & 0xC0) != 0x80) {
        return result;
      }
      --v8;
      BOOL v7 = __OFADD__(result++, 1);
    }
    while (!v7);
    __break(1u);
  }
  else
  {
    if ((v1 & 0x1000000000000000) != 0)
    {
      uint64_t v4 = (unsigned char *)((v2 & 0xFFFFFFFFFFFFFFFLL) + 32);
      v1 &= 0xFFFFFFFFFFFFuLL;
    }
    else
    {
      uint64_t v4 = _StringObject.sharedUTF8.getter(v1, v2);
    }
    Swift::Int result = 1;
    Swift::Int v6 = endingAt - 1;
    while (1)
    {
      if (v6 < 0) {
LABEL_19:
      }
        _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x6F5uLL, 0);
      if (endingAt - 1 >= v1) {
LABEL_20:
      }
        _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x6F6uLL, 0);
      if ((v4[v6] & 0xC0) != 0x80) {
        break;
      }
      --v6;
      BOOL v7 = __OFADD__(result++, 1);
      if (v7)
      {
        __break(1u);
        goto LABEL_11;
      }
    }
  }
  return result;
}

Swift::String::Index __swiftcall String.UTF16View._foreignIndex(_:offsetBy:)(Swift::String::Index _, Swift::Int offsetBy)
{
  int64_t v4 = offsetBy + (_._rawBits >> 16);
  if (v4 < 0) {
    goto LABEL_6;
  }
  unint64_t v5 = HIBYTE(v3) & 0xF;
  if ((v3 & 0x2000000000000000) == 0) {
    unint64_t v5 = v2 & 0xFFFFFFFFFFFFLL;
  }
  if (v5 < v4) {
LABEL_6:
  }
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index is out of bounds", 29, 2, "Swift/StringUTF16View.swift", 27, 2, 0x2A6uLL, 0);
  return (Swift::String::Index)((v4 << 16) | 8);
}

uint64_t Int.magnitude.getter(uint64_t result)
{
  if (result < 0) {
    return -result;
  }
  return result;
}

Swift::Int __swiftcall String.UTF16View._nativeGetOffset(for:)(Swift::String::Index a1)
{
  unint64_t rawBits = a1._rawBits;
  uint64_t v4 = (v2 >> 62) & 1;
  if ((v2 & 0x2000000000000000) == 0) {
    LODWORD(v4) = v1 < 0;
  }
  if (v4 == 1) {
    return a1._rawBits >> 16;
  }
  if (a1._rawBits < 0x4000) {
    return 0;
  }
  unint64_t v6 = v2;
  uint64_t v7 = v1;
  if ((a1._rawBits & 0xC001) == 0) {
    goto LABEL_60;
  }
  while (1)
  {
    uint64_t v8 = v7 & ~v6 & 0x2000000000000000;
    if (v6 >> 60)
    {
      if (!v8) {
        break;
      }
    }
    else if (!v8)
    {
      goto LABEL_13;
    }
    if ((*(void *)((v6 & 0xFFFFFFFFFFFFFFFLL) + 0x10) & 0x8000000000000000) == 0) {
      break;
    }
LABEL_13:
    if (rawBits < 0x400000) {
      break;
    }
    unint64_t v9 = _StringGuts.loadUnmanagedBreadcrumbs()(v7, v6);
    uint64_t v10 = HIBYTE(v6) & 0xF;
    uint64_t v11 = v7 & 0xFFFFFFFFFFFFLL;
    if ((v6 & 0x2000000000000000) == 0) {
      uint64_t v10 = v7 & 0xFFFFFFFFFFFFLL;
    }
    if (rawBits >> 14 == 4 * v10) {
      return v9[2];
    }
    Swift::tuple_lowerBound_String_Index_offset_Int v13 = _StringBreadcrumbs.getBreadcrumb(forIndex:)((Swift::String::Index)rawBits);
    unsigned __int16 v12 = v13.lowerBound._rawBits;
    uint64_t v14 = rawBits >> 16;
    if (rawBits >> 16 < v13.lowerBound._rawBits >> 16) {
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
    }
    if ((v6 & 0x2000000000000000) != 0) {
LABEL_63:
    }
      _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x745uLL, 0);
    if ((v7 & 0x1000000000000000) != 0)
    {
      id v15 = (id)((v6 & 0xFFFFFFFFFFFFFFFLL) + 32);
      if (v11 < v14) {
        goto LABEL_63;
      }
    }
    else
    {
      id v15 = _StringObject.sharedUTF8.getter(v7, v6);
      unsigned __int16 v12 = v13.lowerBound._rawBits;
      uint64_t v11 = v31;
      uint64_t v14 = rawBits >> 16;
      if (v11 < (uint64_t)(rawBits >> 16)) {
        goto LABEL_63;
      }
    }
    unint64_t v16 = ((unsigned __int16)rawBits >> 14) - (unint64_t)(v12 >> 14);
    uint64_t v17 = specialized UnsafeBufferPointer.init(rebasing:)(v13.lowerBound._rawBits >> 16, v14, (uint64_t)v15, v11);
    Swift::Int result = specialized UnsafeRawBufferPointer.init<A>(_:)(v17, v18);
    if (result)
    {
      unint64_t rawBits = result;
      if ((uint64_t)(v19 - result) < 1) {
        goto LABEL_55;
      }
      unint64_t v20 = v19;
      unsigned int v21 = (int8x8_t *)result;
      if ((*(unsigned char *)result & 0xC0) == 0x80)
      {
        unint64_t v22 = result + 1;
        do
        {
          unsigned int v21 = (int8x8_t *)v22;
          if (v22 >= v19) {
            break;
          }
          ++v22;
        }
        while ((v21->i8[0] & 0xC0) == 0x80);
      }
      unint64_t v32 = v21;
      Swift::Int result = specialized String.UTF16View._utf16Length<A, B>(readPtr:endPtr:unsignedSIMDType:signedSIMDType:)(&v32, v19);
      uint64_t v23 = v32;
      if (result >= 1)
      {
        __int8 v24 = v32->i8[0];
        if ((v32->i8[0] & 0xC0) == 0x80)
        {
          if ((unint64_t)v32 > rawBits)
          {
            uint64_t v25 = (char *)&v32[-1] + 7;
            while ((unint64_t)v25 > rawBits)
            {
              __int8 v26 = *v25--;
              __int8 v24 = v26;
              if ((v26 & 0xC0) != 0x80)
              {
                uint64_t v23 = (int8x8_t *)(v25 + 1);
                goto LABEL_39;
              }
            }
            __int8 v24 = *(unsigned char *)rawBits;
            uint64_t v23 = (int8x8_t *)rawBits;
LABEL_39:
            unint64_t v32 = v23;
          }
          if ((v24 & 0xF8) == 0xF0)
          {
            if (v23 == (int8x8_t *)rawBits) {
              goto LABEL_55;
            }
            result -= 2;
          }
          else
          {
            --result;
            if (v23 == (int8x8_t *)rawBits)
            {
LABEL_55:
              Swift::Int result = 0;
              goto LABEL_56;
            }
          }
        }
      }
      for (; (unint64_t)v23 < v20; result += v29)
      {
        unsigned int v27 = __clz(~v23->i8[0]) - 24;
        if (v23->i8[0] >= 0) {
          int v28 = 1;
        }
        else {
          int v28 = v27;
        }
        uint64_t v23 = (int8x8_t *)((char *)v23 + v28);
        if (v28 == 4) {
          uint64_t v29 = 2;
        }
        else {
          uint64_t v29 = 1;
        }
        if (v20 < (unint64_t)v23) {
          uint64_t v29 = 0;
        }
      }
    }
LABEL_56:
    unint64_t v30 = v16 + result;
    if (__OFADD__(v16, result))
    {
      __break(1u);
      return result;
    }
    Swift::Int result = v13.offset + v30;
    if (!__OFADD__(v13.offset, v30)) {
      return result;
    }
    __break(1u);
LABEL_60:
    unint64_t rawBits = rawBits & 0xC | _StringGuts.scalarAlignSlow(_:)((Swift::String::Index)rawBits)._rawBits & 0xFFFFFFFFFFFFFFF3 | 1;
  }

  return String.UTF16View._utf16Distance(from:to:)((Swift::String::Index)15, (Swift::String::Index)rawBits);
}

Swift::String::Index __swiftcall String.UTF16View._nativeGetIndex(for:)(Swift::Int a1)
{
  if (a1 < 0)
  {
    unint64_t v32 = 883;
LABEL_65:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index is out of bounds", 29, 2, "Swift/StringUTF16View.swift", 27, 2, v32, 0);
  }
  if (!a1) {
    return (Swift::String::Index)15;
  }
  unint64_t v4 = v2;
  uint64_t v5 = v1;
  uint64_t v6 = (v2 >> 62) & 1;
  if ((v2 & 0x2000000000000000) == 0) {
    LODWORD(v6) = v1 < 0;
  }
  if (v6 == 1) {
    return (Swift::String::Index)((a1 << 16) | 0xD);
  }
  uint64_t v8 = v1 & ~v2 & 0x2000000000000000;
  if (v2 >> 60)
  {
    if (!v8)
    {
LABEL_21:
      v12._unint64_t rawBits = 15;
      return (Swift::String::Index)(specialized BidirectionalCollection._index(_:offsetBy:)(v12, a1, v1, v2) | 4);
    }
    goto LABEL_13;
  }
  if (v8)
  {
LABEL_13:
    if ((unint64_t)a1 < 0x40 || (*(void *)((v2 & 0xFFFFFFFFFFFFFFFLL) + 0x10) & 0x8000000000000000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_15;
  }
  if ((unint64_t)a1 < 0x40) {
    goto LABEL_21;
  }
LABEL_15:
  unint64_t v9 = _StringGuts.loadUnmanagedBreadcrumbs()(v1, v2);
  if (v9[2] == a1)
  {
    uint64_t v10 = HIBYTE(v4) & 0xF;
    if ((v4 & 0x2000000000000000) == 0) {
      uint64_t v10 = v5;
    }
    uint64_t v11 = v10 << 16;
    if ((v4 & 0x1000000000000000) == 0 || (v5 & 0x800000000000000) != 0) {
      return (Swift::String::Index)(v11 | 7);
    }
    else {
      return (Swift::String::Index)(v11 | 0xB);
    }
  }
  uint64_t v15 = v9[3];
  specialized Array._checkSubscript(_:wasNativeTypeChecked:)((unint64_t)a1 >> 6, 1, v15);
  unint64_t v14 = (unint64_t)a1 >> 6;
  v7._unint64_t rawBits = *(void *)(v15 + 8 * ((unint64_t)a1 >> 6) + 32);
  Swift::Int v16 = a1 & 0x3F;
  if (!v16) {
    return v7;
  }
  if ((v4 & 0x2000000000000000) != 0)
  {
    uint64_t v25 = HIBYTE(v4) & 0xF;
    v35[0] = v5;
    v35[1] = v4 & 0xFFFFFFFFFFFFFFLL;
    int64_t v19 = v7._rawBits >> 16;
    if (v7._rawBits >> 16 < v25)
    {
      if ((v7._rawBits & 0xC000) != 0) {
        uint64_t v26 = -1;
      }
      else {
        uint64_t v26 = 0;
      }
      while (1)
      {
        int v27 = *((char *)v35 + v19);
        if (v27 < 0)
        {
          unsigned int v29 = __clz(~(_BYTE)v27);
          unsigned int v30 = v29 - 24;
          uint64_t v28 = (v29 - 24);
          if (v30 == 4)
          {
            v26 += 2;
            if (v26 >= v16)
            {
LABEL_60:
              if (v16 >= v26)
              {
LABEL_61:
                v19 += v28;
                uint64_t v31 = 5;
                return (Swift::String::Index)(v31 | (v19 << 16));
              }
LABEL_66:
              uint64_t v31 = 16388;
              return (Swift::String::Index)(v31 | (v19 << 16));
            }
            uint64_t v28 = 4;
          }
          else if (++v26 >= v16)
          {
            goto LABEL_60;
          }
        }
        else
        {
          if (++v26 >= v16)
          {
            if (v16 >= v26)
            {
              uint64_t v28 = 1;
              goto LABEL_61;
            }
            goto LABEL_66;
          }
          uint64_t v28 = 1;
        }
        v19 += v28;
        if (v19 >= v25) {
          goto LABEL_63;
        }
      }
    }
    goto LABEL_63;
  }
  if ((v5 & 0x1000000000000000) != 0)
  {
    uint64_t v17 = (char *)((v4 & 0xFFFFFFFFFFFFFFFLL) + 32);
    uint64_t v18 = v5 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    uint64_t v33 = v5;
    Swift::UInt64 v34 = *(void *)(v15 + 8 * v14 + 32);
    uint64_t v17 = (char *)_StringObject.sharedUTF8.getter(v33, v4);
    v7._unint64_t rawBits = v34;
  }
  int64_t v19 = v7._rawBits >> 16;
  if ((uint64_t)(v7._rawBits >> 16) >= v18)
  {
LABEL_63:
    unint64_t v32 = 928;
    goto LABEL_65;
  }
  if ((v7._rawBits & 0xC000) != 0) {
    uint64_t v20 = -1;
  }
  else {
    uint64_t v20 = 0;
  }
  while (1)
  {
    int v21 = v17[v19];
    if (v21 < 0) {
      break;
    }
    if (++v20 >= v16)
    {
      if (v16 < v20) {
        goto LABEL_66;
      }
      uint64_t v22 = 1;
      return (Swift::String::Index)(((v22 + v19) << 16) | 5);
    }
    uint64_t v22 = 1;
LABEL_33:
    v19 += v22;
    if (v19 >= v18) {
      goto LABEL_63;
    }
  }
  unsigned int v23 = __clz(~(_BYTE)v21);
  unsigned int v24 = v23 - 24;
  uint64_t v22 = (v23 - 24);
  if (v24 != 4)
  {
    if (++v20 >= v16) {
      goto LABEL_58;
    }
    goto LABEL_33;
  }
  v20 += 2;
  if (v20 < v16)
  {
    uint64_t v22 = 4;
    goto LABEL_33;
  }
LABEL_58:
  if (v16 < v20) {
    goto LABEL_66;
  }
  return (Swift::String::Index)(((v22 + v19) << 16) | 5);
}

Swift::String::Index_optional __swiftcall String.UTF16View.index(_:offsetBy:limitedBy:)(Swift::String::Index _, Swift::Int offsetBy, Swift::String::Index limitedBy)
{
  unint64_t v5 = v4;
  uint64_t v6 = v3;
  Swift::UInt64 rawBits = limitedBy._rawBits;
  uint64_t v10 = (v3 >> 59) & 1;
  if ((v4 & 0x1000000000000000) == 0) {
    LOBYTE(v1_assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0, 0xE000000000000000, "Swift/StringRangeReplaceableCollection.swift", 44, 2, 0x168uLL, 0) = 1;
  }
  uint64_t v11 = 4 << v10;
  if ((limitedBy._rawBits & 0xC) == 4 << v10) {
    Swift::UInt64 rawBits = _StringGuts._slowEnsureMatchingEncoding(_:)(limitedBy)._rawBits;
  }
  uint64_t v12 = HIBYTE(v5) & 0xF;
  if ((v5 & 0x2000000000000000) == 0) {
    uint64_t v12 = v6 & 0xFFFFFFFFFFFFLL;
  }
  Swift::UInt64 v13 = 4 * v12;
  if (4 * v12 < rawBits >> 14)
  {
    v18.unsigned int value = String.UTF16View.index(_:offsetBy:)(_, offsetBy);
    goto LABEL_37;
  }
  if ((_._rawBits & 0xC) != v11)
  {
    if (v13 >= _._rawBits >> 14) {
      goto LABEL_10;
    }
LABEL_41:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index is out of bounds", 29, 2, "Swift/StringUTF16View.swift", 27, 2, 0xEDuLL, 0);
  }
  _._Swift::UInt64 rawBits = _StringGuts._slowEnsureMatchingEncoding(_:)(_)._rawBits;
  if (v13 < _._rawBits >> 14) {
    goto LABEL_41;
  }
LABEL_10:
  if ((v5 & 0x1000000000000000) != 0)
  {
    Swift::String::Index_optional v18 = String.UTF16View._foreignIndex(_:offsetBy:limitedBy:)(_, offsetBy, (Swift::String::Index)rawBits);
    Swift::Bool is_nil = v18.is_nil;
    goto LABEL_38;
  }
  uint64_t v14 = (v5 >> 62) & 1;
  if ((v5 & 0x2000000000000000) == 0) {
    LOBYTE(v14) = v6 < 0;
  }
  if ((v14 & 1) == 0)
  {
    if ((rawBits & 0xC001) == 0) {
      Swift::UInt64 rawBits = rawBits & 0xC | _StringGuts.scalarAlignSlow(_:)((Swift::String::Index)rawBits)._rawBits & 0xFFFFFFFFFFFFFFF3 | 1;
    }
    if ((_._rawBits & 0xC001) == 0) {
      _._Swift::UInt64 rawBits = _._rawBits & 0xC | _StringGuts.scalarAlignSlow(_:)(_)._rawBits & 0xFFFFFFFFFFFFFFF3 | 1;
    }
    unint64_t v15 = 96;
    if (_._rawBits < 0x4000) {
      unint64_t v15 = 64;
    }
    unint64_t v16 = offsetBy >= 0 ? offsetBy : -offsetBy;
    if (v16 < v15)
    {
      v17._Swift::UInt64 rawBits = _._rawBits;
      v18.value._Swift::UInt64 rawBits = specialized BidirectionalCollection._index(_:offsetBy:limitedBy:)(v17, offsetBy, rawBits, v6, v5);
      Swift::Bool is_nil = v18.is_nil;
      if (!v18.is_nil) {
        v18.value._rawBits |= 4uLL;
      }
      goto LABEL_38;
    }
  }
  Swift::Int v20 = String.UTF16View._nativeGetOffset(for:)(_);
  v18.value._Swift::UInt64 rawBits = String.UTF16View._nativeGetOffset(for:)((Swift::String::Index)rawBits);
  if ((offsetBy & 0x8000000000000000) == 0)
  {
    if (rawBits >> 14 < _._rawBits >> 14) {
      goto LABEL_35;
    }
    if (!__OFADD__(v20, offsetBy))
    {
      if ((uint64_t)v18.value._rawBits < v20 + offsetBy) {
        goto LABEL_44;
      }
      goto LABEL_35;
    }
    __break(1u);
LABEL_46:
    __break(1u);
    return v18;
  }
  if (_._rawBits >> 14 < rawBits >> 14) {
    goto LABEL_35;
  }
  if (__OFADD__(v20, offsetBy)) {
    goto LABEL_46;
  }
  if (v20 + offsetBy < (uint64_t)v18.value._rawBits)
  {
LABEL_44:
    v18.value._Swift::UInt64 rawBits = 0;
    Swift::Bool is_nil = 1;
    goto LABEL_38;
  }
LABEL_35:
  if (__OFADD__(v20, offsetBy))
  {
    __break(1u);
    goto LABEL_44;
  }
  v18.unsigned int value = String.UTF16View._nativeGetIndex(for:)(v20 + offsetBy);
LABEL_37:
  Swift::Bool is_nil = 0;
LABEL_38:
  v18.Swift::Bool is_nil = is_nil;
  return v18;
}

Swift::String::Index_optional __swiftcall String.UTF16View._foreignIndex(_:offsetBy:limitedBy:)(Swift::String::Index _, Swift::Int offsetBy, Swift::String::Index limitedBy)
{
  Swift::Int v5 = (limitedBy._rawBits >> 16) - (_._rawBits >> 16);
  if (offsetBy >= 1)
  {
    if (v5 < 0 || v5 >= (unint64_t)offsetBy) {
      goto LABEL_8;
    }
LABEL_7:
    Swift::UInt64 v6 = 0;
    Swift::Bool v7 = 1;
    goto LABEL_14;
  }
  if (v5 <= 0 && v5 > offsetBy) {
    goto LABEL_7;
  }
LABEL_8:
  int64_t v8 = (_._rawBits >> 16) + offsetBy;
  if (v8 < 0) {
    goto LABEL_13;
  }
  unint64_t v9 = HIBYTE(v4) & 0xF;
  if ((v4 & 0x2000000000000000) == 0) {
    unint64_t v9 = v3 & 0xFFFFFFFFFFFFLL;
  }
  if (v9 < v8) {
LABEL_13:
  }
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index is out of bounds", 29, 2, "Swift/StringUTF16View.swift", 27, 2, 0x29CuLL, 0);
  Swift::Bool v7 = 0;
  Swift::UInt64 v6 = (v8 << 16) | 8;
LABEL_14:
  result.value._Swift::UInt64 rawBits = v6;
  result.Swift::Bool is_nil = v7;
  return result;
}

Swift::Int __swiftcall String.UTF16View.distance(from:to:)(Swift::String::Index from, Swift::String::Index to)
{
  unint64_t v4 = v3;
  uint64_t v5 = v2;
  Swift::UInt64 rawBits = from._rawBits;
  uint64_t v8 = (v2 >> 59) & 1;
  if ((v3 & 0x1000000000000000) == 0) {
    LOBYTE(v8) = 1;
  }
  uint64_t v9 = 4 << v8;
  if ((from._rawBits & 0xC) == 4 << v8) {
    Swift::UInt64 rawBits = _StringGuts._slowEnsureMatchingEncoding(_:)(from)._rawBits;
  }
  if ((to._rawBits & 0xC) == v9) {
    to._Swift::UInt64 rawBits = _StringGuts._slowEnsureMatchingEncoding(_:)(to)._rawBits;
  }
  Swift::UInt64 v10 = rawBits >> 16;
  if ((v4 & 0x2000000000000000) != 0) {
    Swift::UInt64 v11 = HIBYTE(v4) & 0xF;
  }
  else {
    Swift::UInt64 v11 = v5 & 0xFFFFFFFFFFFFLL;
  }
  if (v11 < v10 && _swift_stdlib_isExecutableLinkedOnOrAfter(0x50700u))
  {
    unint64_t v18 = 279;
    goto LABEL_41;
  }
  if (v11 < to._rawBits >> 16 && _swift_stdlib_isExecutableLinkedOnOrAfter(0x50700u))
  {
    unint64_t v18 = 283;
LABEL_41:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index is out of bounds", 29, 2, "Swift/StringUTF16View.swift", 27, 2, v18, 0);
  }
  if ((v4 & 0x1000000000000000) != 0)
  {
    return specialized String.UTF16View._foreignDistance(from:to:)(rawBits, to._rawBits);
  }
  else
  {
    Swift::Int result = (to._rawBits >> 16) - v10;
    uint64_t v13 = (v4 >> 62) & 1;
    if ((v4 & 0x2000000000000000) == 0) {
      LOBYTE(v13) = v5 < 0;
    }
    if ((v13 & 1) == 0)
    {
      if (rawBits < 0x4000 || to._rawBits < 0x4000)
      {
        if ((result & 0x8000000000000000) == 0)
        {
          if ((unint64_t)result >= 0x20) {
            goto LABEL_23;
          }
LABEL_27:
          if ((rawBits & 0xC001) == 0) {
            Swift::UInt64 rawBits = rawBits & 0xC | _StringGuts.scalarAlignSlow(_:)((Swift::String::Index)rawBits)._rawBits & 0xFFFFFFFFFFFFFFF3 | 1;
          }
          if ((to._rawBits & 0xC001) == 0) {
            to._Swift::UInt64 rawBits = to._rawBits & 0xC | _StringGuts.scalarAlignSlow(_:)(to)._rawBits & 0xFFFFFFFFFFFFFFF3 | 1;
          }
          if (to._rawBits >> 14 >= rawBits >> 14)
          {
            return String.UTF16View._utf16Distance(from:to:)((Swift::String::Index)rawBits, to);
          }
          else
          {
            Swift::Int v16 = String.UTF16View._utf16Distance(from:to:)(to, (Swift::String::Index)rawBits);
            BOOL v17 = __OFSUB__(0, v16);
            Swift::Int result = -v16;
            if (v17) {
              __break(1u);
            }
          }
          return result;
        }
        unint64_t v15 = 32;
      }
      else
      {
        if ((result & 0x8000000000000000) == 0)
        {
          if ((unint64_t)result < 0x40) {
            goto LABEL_27;
          }
LABEL_23:
          Swift::Int v14 = String.UTF16View._nativeGetOffset(for:)((Swift::String::Index)rawBits);
          return String.UTF16View._nativeGetOffset(for:)(to) - v14;
        }
        unint64_t v15 = 64;
      }
      if (v15 <= v10 - (to._rawBits >> 16)) {
        goto LABEL_23;
      }
      goto LABEL_27;
    }
  }
  return result;
}

Swift::Int __swiftcall String.UTF16View._utf16Distance(from:to:)(Swift::String::Index from, Swift::String::Index to)
{
  unint64_t v4 = (int8x8_t *)(from._rawBits >> 16);
  Swift::UInt64 v5 = to._rawBits >> 16;
  if (to._rawBits >> 16 < from._rawBits >> 16) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
  }
  uint64_t v6 = v3;
  uint64_t v7 = v2;
  unsigned __int16 rawBits = to._rawBits;
  unsigned __int16 v9 = from._rawBits;
  if ((v3 & 0x2000000000000000) != 0)
  {
    v41[0] = (int8x8_t *)v2;
    v41[1] = (int8x8_t *)(v3 & 0xFFFFFFFFFFFFFFLL);
    if ((HIBYTE(v3) & 0xF) >= v5)
    {
      if ((uint64_t)(v5 - (void)v4) < 0) {
        _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeBufferPointer with negative count", 39, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x53FuLL, 0);
      }
      if ((int8x8_t *)v5 == v4) {
        goto LABEL_21;
      }
      uint64_t v22 = (int8x8_t *)((char *)v41 + (void)v4);
      v5 += (Swift::UInt64)v41;
      unsigned int v23 = (int8x8_t *)((char *)v41 + (void)v4);
      if ((*((unsigned char *)v41 + (void)v4) & 0xC0) == 0x80)
      {
        unsigned int v24 = (int8x8_t *)((char *)v41 + (void)v4 + 1);
        do
        {
          unsigned int v23 = v24;
          if ((unint64_t)v24 >= v5) {
            break;
          }
          unsigned int v24 = (int8x8_t *)((char *)v24 + 1);
        }
        while ((v23->i8[0] & 0xC0) == 0x80);
      }
      unint64_t v40 = v23;
      uint64_t v14 = specialized String.UTF16View._utf16Length<A, B>(readPtr:endPtr:unsignedSIMDType:signedSIMDType:)(&v40, v5);
      uint64_t v25 = v40;
      if (v14 >= 1)
      {
        __int8 v26 = v40->i8[0];
        if ((v40->i8[0] & 0xC0) == 0x80)
        {
          if (v22 < v40)
          {
            int v27 = (int8x8_t *)((char *)v41 + (void)v4);
            uint64_t v28 = (int8x8_t *)((char *)v40 - 1);
            do
            {
              if (v22 >= v28) {
                goto LABEL_33;
              }
              __int8 v29 = v28->i8[0];
              uint64_t v28 = (int8x8_t *)((char *)v28 - 1);
            }
            while ((v29 & 0xC0) == 0x80);
            int v27 = (int8x8_t *)((char *)v28 + 1);
LABEL_33:
            unint64_t v40 = v27;
            __int8 v26 = v27->i8[0];
            uint64_t v25 = v27;
          }
          if ((v26 & 0xF8) == 0xF0)
          {
            if (v25 == v22) {
              goto LABEL_21;
            }
            v14 -= 2;
          }
          else
          {
            --v14;
            if (v25 == v22) {
              goto LABEL_21;
            }
          }
        }
      }
      for (; (unint64_t)v25 < v5; v14 += v32)
      {
        unsigned int v30 = __clz(~v25->i8[0]) - 24;
        if (v25->i8[0] >= 0) {
          int v31 = 1;
        }
        else {
          int v31 = v30;
        }
        uint64_t v25 = (int8x8_t *)((char *)v25 + v31);
        if (v31 == 4) {
          uint64_t v32 = 2;
        }
        else {
          uint64_t v32 = 1;
        }
        if (v5 < (unint64_t)v25) {
          uint64_t v32 = 0;
        }
      }
      goto LABEL_65;
    }
LABEL_70:
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x745uLL, 0);
  }
  if ((v2 & 0x1000000000000000) == 0) {
    goto LABEL_69;
  }
  id v10 = (id)((v3 & 0xFFFFFFFFFFFFFFFLL) + 32);
  uint64_t v11 = v7 & 0xFFFFFFFFFFFFLL;
  if ((v7 & 0xFFFFFFFFFFFFLL) < (uint64_t)v5) {
    goto LABEL_70;
  }
  while (1)
  {
    uint64_t v12 = specialized UnsafeBufferPointer.init(rebasing:)((uint64_t)v4, v5, (uint64_t)v10, v11);
    uint64_t v14 = specialized UnsafeRawBufferPointer.init<A>(_:)(v12, v13);
    if (!v14) {
      goto LABEL_65;
    }
    unint64_t v4 = (int8x8_t *)v14;
    if ((uint64_t)(v15 - v14) < 1)
    {
LABEL_21:
      uint64_t v14 = 0;
      goto LABEL_65;
    }
    Swift::UInt64 v5 = v15;
    Swift::Int v16 = (int8x8_t *)v14;
    if ((*(unsigned char *)v14 & 0xC0) == 0x80)
    {
      BOOL v17 = (int8x8_t *)(v14 + 1);
      do
      {
        Swift::Int v16 = v17;
        if ((unint64_t)v17 >= v15) {
          break;
        }
        BOOL v17 = (int8x8_t *)((char *)v17 + 1);
      }
      while ((v16->i8[0] & 0xC0) == 0x80);
    }
    v41[0] = v16;
    uint64_t v14 = specialized String.UTF16View._utf16Length<A, B>(readPtr:endPtr:unsignedSIMDType:signedSIMDType:)(v41, v15);
    unint64_t v18 = v41[0];
    if (v14 >= 1)
    {
      __int8 v19 = v41[0]->i8[0];
      if ((v41[0]->i8[0] & 0xC0) == 0x80)
      {
        if (v41[0] > v4)
        {
          Swift::Int v20 = (char *)&v41[0][-1] + 7;
          while (v20 > (char *)v4)
          {
            char v21 = *v20--;
            if ((v21 & 0xC0) != 0x80)
            {
              unint64_t v18 = (int8x8_t *)(v20 + 1);
              goto LABEL_50;
            }
          }
          unint64_t v18 = v4;
LABEL_50:
          v41[0] = v18;
          __int8 v19 = v18->i8[0];
        }
        if ((v19 & 0xF8) == 0xF0)
        {
          if (v18 == v4) {
            goto LABEL_21;
          }
          v14 -= 2;
        }
        else
        {
          --v14;
          if (v18 == v4) {
            goto LABEL_21;
          }
        }
      }
    }
    for (; (unint64_t)v18 < v5; v14 += v35)
    {
      unsigned int v33 = __clz(~v18->i8[0]) - 24;
      if (v18->i8[0] >= 0) {
        int v34 = 1;
      }
      else {
        int v34 = v33;
      }
      unint64_t v18 = (int8x8_t *)((char *)v18 + v34);
      if (v34 == 4) {
        uint64_t v35 = 2;
      }
      else {
        uint64_t v35 = 1;
      }
      if (v5 < (unint64_t)v18) {
        uint64_t v35 = 0;
      }
    }
LABEL_65:
    unint64_t v36 = (rawBits >> 14) - (unint64_t)(v9 >> 14);
    BOOL v37 = __OFADD__(v36, v14);
    Swift::Int result = v36 + v14;
    if (!v37) {
      return result;
    }
    __break(1u);
LABEL_69:
    id v10 = _StringObject.sharedUTF8.getter(v7, v6);
    uint64_t v11 = v39;
    if (v39 < (uint64_t)v5) {
      goto LABEL_70;
    }
  }
}

Swift::Int __swiftcall String.UTF16View._foreignCount()()
{
  if ((v1 & 0x2000000000000000) != 0) {
    return HIBYTE(v1) & 0xF;
  }
  else {
    return v0 & 0xFFFFFFFFFFFFLL;
  }
}

Swift::Unicode::Scalar __swiftcall _StringGuts.fastUTF8Scalar(startingAt:)(Swift::Int startingAt)
{
  if ((v2 & 0x2000000000000000) != 0)
  {
    v6[0] = v1;
    v6[1] = v2 & 0xFFFFFFFFFFFFFFLL;
    return (Swift::Unicode::Scalar)_decodeScalar(_:startingAt:)((uint64_t)v6, v1, startingAt);
  }
  else
  {
    if ((v1 & 0x1000000000000000) != 0) {
      id v4 = (id)((v2 & 0xFFFFFFFFFFFFFFFLL) + 32);
    }
    else {
      id v4 = _StringObject.sharedUTF8.getter(v1, v2);
    }
    return (Swift::Unicode::Scalar)_decodeScalar(_:startingAt:)((uint64_t)v4, v1, startingAt);
  }
}

Swift::UInt16 __swiftcall String.UTF16View._foreignSubscript(position:)(Swift::String::Index position)
{
  return _StringGuts.foreignErrorCorrectedUTF16CodeUnit(at:)((Swift::String::Index)(position._rawBits & 0xFFFFFFFFFFFF0000));
}

void protocol witness for BidirectionalCollection.index(before:) in conformance String.UTF16View(Swift::String::Index *a1@<X0>, unint64_t *a2@<X8>)
{
  Swift::UInt64 rawBits = a1->_rawBits;
  uint64_t v5 = *v2;
  unint64_t v6 = v2[1];
  uint64_t v7 = ((unint64_t)*v2 >> 59) & 1;
  if ((v6 & 0x1000000000000000) == 0) {
    LOBYTE(v7) = 1;
  }
  if ((a1->_rawBits & 0xC) == 4 << v7)
  {
    Swift::UInt64 rawBits = _StringGuts._slowEnsureMatchingEncoding(_:)((Swift::String::Index)a1->_rawBits)._rawBits;
    if (rawBits < 0x4000) {
      goto LABEL_24;
    }
  }
  else if (rawBits < 0x4000)
  {
    goto LABEL_24;
  }
  uint64_t v8 = HIBYTE(v6) & 0xF;
  uint64_t v9 = v5 & 0xFFFFFFFFFFFFLL;
  if ((v6 & 0x2000000000000000) != 0) {
    uint64_t v10 = HIBYTE(v6) & 0xF;
  }
  else {
    uint64_t v10 = v5 & 0xFFFFFFFFFFFFLL;
  }
  if (4 * v10 < rawBits >> 14) {
LABEL_24:
  }
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index is out of bounds", 29, 2, "Swift/StringUTF16View.swift", 27, 2, 0xAFuLL, 0);
  if ((v6 & 0x1000000000000000) != 0)
  {
    unint64_t v12 = specialized String.UTF16View._foreignIndex(before:)(rawBits);
    goto LABEL_29;
  }
  uint64_t v11 = (v6 >> 62) & 1;
  if ((v6 & 0x2000000000000000) == 0) {
    LOBYTE(v11) = v5 < 0;
  }
  if (v11)
  {
    unint64_t v12 = (rawBits & 0xFFFFFFFFFFFF0000) - 65523;
LABEL_29:
    *a2 = v12;
    return;
  }
  if ((rawBits & 0xC000) != 0)
  {
    unint64_t v12 = rawBits & 0xFFFFFFFFFFFF0000 | 5;
    goto LABEL_29;
  }
  if (rawBits)
  {
    uint64_t v13 = rawBits >> 16;
    if ((v6 & 0x2000000000000000) == 0) {
      goto LABEL_18;
    }
LABEL_27:
    v21[0] = v5;
    v21[1] = v6 & 0xFFFFFFFFFFFFFFLL;
    closure #1 in _StringGuts.fastUTF8ScalarLength(endingAt:)((uint64_t)v21, v8, v13, &v20);
    uint64_t v15 = v20;
    if (v20 != 4) {
      goto LABEL_21;
    }
LABEL_28:
    unint64_t v12 = (rawBits & 0xFFFFFFFFFFFF0000) - 245756;
    goto LABEL_29;
  }
  v18._Swift::UInt64 rawBits = _StringGuts.scalarAlignSlow(_:)((Swift::String::Index)rawBits)._rawBits;
  uint64_t v8 = HIBYTE(v6) & 0xF;
  Swift::UInt64 rawBits = v18._rawBits & 0xFFFFFFFFFFFFFFF2 | 1;
  uint64_t v13 = rawBits >> 16;
  if ((v6 & 0x2000000000000000) != 0) {
    goto LABEL_27;
  }
LABEL_18:
  if ((v5 & 0x1000000000000000) != 0)
  {
    id v14 = (id)((v6 & 0xFFFFFFFFFFFFFFFLL) + 32);
  }
  else
  {
    id v14 = _StringObject.sharedUTF8.getter(v5, v6);
    uint64_t v9 = v19;
  }
  swift_bridgeObjectRetain(v6);
  closure #1 in _StringGuts.fastUTF8ScalarLength(endingAt:)((uint64_t)v14, v9, v13, v21);
  swift_bridgeObjectRelease(v6);
  uint64_t v15 = v21[0];
  if (v21[0] == 4) {
    goto LABEL_28;
  }
LABEL_21:
  BOOL v16 = __OFSUB__(0, v15);
  uint64_t v17 = -v15;
  if (!v16)
  {
    unint64_t v12 = ((v17 + v13) << 16) | 5;
    goto LABEL_29;
  }
  __break(1u);
  swift_errorRelease(0);
  swift_bridgeObjectRelease(v6);
  __break(1u);
  swift_errorRelease(0);
  __break(1u);
}

unint64_t protocol witness for BidirectionalCollection.formIndex(before:) in conformance String.UTF16View(Swift::UInt64 *a1)
{
  uint64_t v4 = *v1;
  unint64_t v3 = v1[1];
  Swift::UInt64 rawBits = *a1;
  uint64_t v6 = ((unint64_t)v4 >> 59) & 1;
  if ((v3 & 0x1000000000000000) == 0) {
    LOBYTE(v6) = 1;
  }
  if ((rawBits & 0xC) == 4 << v6)
  {
    Swift::UInt64 rawBits = _StringGuts._slowEnsureMatchingEncoding(_:)((Swift::String::Index)rawBits)._rawBits;
    if (rawBits < 0x4000) {
      goto LABEL_26;
    }
  }
  else if (rawBits < 0x4000)
  {
    goto LABEL_26;
  }
  unint64_t v7 = HIBYTE(v3) & 0xF;
  uint64_t v8 = v4 & 0xFFFFFFFFFFFFLL;
  if ((v3 & 0x2000000000000000) != 0) {
    uint64_t v9 = HIBYTE(v3) & 0xF;
  }
  else {
    uint64_t v9 = v4 & 0xFFFFFFFFFFFFLL;
  }
  if (4 * v9 < rawBits >> 14) {
LABEL_26:
  }
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index is out of bounds", 29, 2, "Swift/StringUTF16View.swift", 27, 2, 0xAFuLL, 0);
  if ((v3 & 0x1000000000000000) != 0)
  {
    unint64_t result = specialized String.UTF16View._foreignIndex(before:)(rawBits);
    goto LABEL_38;
  }
  uint64_t v10 = (v3 >> 62) & 1;
  if ((v3 & 0x2000000000000000) == 0) {
    LOBYTE(v1_assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0, 0xE000000000000000, "Swift/StringRangeReplaceableCollection.swift", 44, 2, 0x168uLL, 0) = v4 < 0;
  }
  if (v10)
  {
    unint64_t result = (rawBits & 0xFFFFFFFFFFFF0000) - 65523;
    goto LABEL_38;
  }
  if ((rawBits & 0xC000) != 0)
  {
    unint64_t result = rawBits & 0xFFFFFFFFFFFF0000 | 5;
    goto LABEL_38;
  }
  if (rawBits)
  {
    Swift::UInt64 v12 = rawBits >> 16;
    if ((v3 & 0x2000000000000000) == 0) {
      goto LABEL_18;
    }
  }
  else
  {
    unint64_t v21 = v4 & 0xFFFFFFFFFFFFLL;
    v16._Swift::UInt64 rawBits = _StringGuts.scalarAlignSlow(_:)((Swift::String::Index)rawBits)._rawBits;
    unint64_t v7 = HIBYTE(v3) & 0xF;
    uint64_t v8 = v4 & 0xFFFFFFFFFFFFLL;
    Swift::UInt64 rawBits = v16._rawBits & 0xFFFFFFFFFFFFFFF2 | 1;
    Swift::UInt64 v12 = rawBits >> 16;
    if ((v3 & 0x2000000000000000) == 0)
    {
LABEL_18:
      if ((v4 & 0x1000000000000000) != 0)
      {
        uint64_t v13 = (v3 & 0xFFFFFFFFFFFFFFFLL) + 32;
        if (rawBits >= 0x10000) {
          goto LABEL_20;
        }
      }
      else
      {
        unint64_t v21 = rawBits;
        uint64_t v18 = v3;
        Swift::UInt64 v19 = v12;
        id v20 = _StringObject.sharedUTF8.getter(v4, v18);
        Swift::UInt64 v12 = v19;
        uint64_t v13 = (uint64_t)v20;
        Swift::UInt64 rawBits = v21;
        if (v21 >= 0x10000)
        {
LABEL_20:
          uint64_t v14 = 0;
          uint64_t v15 = v12 + v13 - 1;
          while ((uint64_t)v12 <= v8)
          {
            if ((*(unsigned char *)(v15 + v14) & 0xC0) != 0x80) {
              goto LABEL_35;
            }
            if (-(uint64_t)v12 == --v14) {
              goto LABEL_34;
            }
          }
LABEL_39:
          _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x6F6uLL, 0);
        }
      }
LABEL_34:
      _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x6F5uLL, 0);
    }
  }
  v22[0] = v4;
  v22[1] = v3 & 0xFFFFFFFFFFFFFFLL;
  if (rawBits < 0x10000) {
    goto LABEL_34;
  }
  uint64_t v14 = 0;
  while (1)
  {
    if (v12 > v7) {
      goto LABEL_39;
    }
    if ((*((unsigned char *)v22 + v12 + v14 - 1) & 0xC0) != 0x80) {
      break;
    }
    --v14;
    if (!(v12 + v14)) {
      goto LABEL_34;
    }
  }
LABEL_35:
  uint64_t v17 = ((v12 - (1 - v14)) << 16) | 5;
  if (v14 == -3) {
    unint64_t result = (rawBits & 0xFFFFFFFFFFFF0000) - 245756;
  }
  else {
    unint64_t result = v17;
  }
LABEL_38:
  *a1 = result;
  return result;
}

Swift::String::Index protocol witness for BidirectionalCollection.index(_:offsetBy:) in conformance String.UTF16View@<X0>(Swift::String::Index *a1@<X0>, Swift::Int a2@<X1>, Swift::String::Index *a3@<X8>)
{
  result._Swift::UInt64 rawBits = String.UTF16View.index(_:offsetBy:)((Swift::String::Index)a1->_rawBits, a2)._rawBits;
  a3->_Swift::UInt64 rawBits = result._rawBits;
  return result;
}

uint64_t protocol witness for BidirectionalCollection.index(_:offsetBy:limitedBy:) in conformance String.UTF16View@<X0>(void *a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  return protocol witness for BidirectionalCollection.index(_:offsetBy:limitedBy:) in conformance String(a1, a2, a3, (uint64_t (*)(void, uint64_t, void, void, void))String.UTF16View.index(_:offsetBy:limitedBy:), a4);
}

Swift::Int protocol witness for BidirectionalCollection.distance(from:to:) in conformance String.UTF16View(Swift::String::Index *a1, Swift::String::Index *a2)
{
  return String.UTF16View.distance(from:to:)((Swift::String::Index)a1->_rawBits, (Swift::String::Index)a2->_rawBits);
}

uint64_t (*protocol witness for Collection.subscript.read in conformance String.UTF16View(_WORD *a1, Swift::String::Index *a2))()
{
  Swift::UInt64 rawBits = a2->_rawBits;
  uint64_t v5 = *v2;
  unint64_t v6 = v2[1];
  uint64_t v7 = ((unint64_t)*v2 >> 59) & 1;
  if ((v6 & 0x1000000000000000) == 0) {
    LOBYTE(v7) = 1;
  }
  if ((a2->_rawBits & 0xC) == 4 << v7) {
    Swift::UInt64 rawBits = _StringGuts._slowEnsureMatchingEncoding(_:)((Swift::String::Index)a2->_rawBits)._rawBits;
  }
  unint64_t v8 = rawBits >> 16;
  unint64_t v9 = HIBYTE(v6) & 0xF;
  if ((v6 & 0x2000000000000000) == 0) {
    unint64_t v9 = v5 & 0xFFFFFFFFFFFFLL;
  }
  if (v8 >= v9) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index is out of bounds", 29, 2, "Swift/StringUTF16View.swift", 27, 2, 0x1A7uLL, 0);
  }
  if ((v6 & 0x1000000000000000) != 0)
  {
    __int16 value = String.UTF16View._foreignSubscript(position:)((Swift::String::Index)rawBits);
  }
  else
  {
    if ((rawBits & 1) == 0) {
      unint64_t v8 = _StringGuts.scalarAlignSlow(_:)((Swift::String::Index)rawBits)._rawBits >> 16;
    }
    v10.___int16 value = _StringGuts.fastUTF8Scalar(startingAt:)(v8)._value;
    if ((rawBits & 0xC000) == 0x4000)
    {
      if (!HIWORD(v10._value)) {
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UTF16.swift", 17, 2, 0x5BuLL, 0);
      }
      __int16 value = v10._value & 0x3FF | 0xDC00;
    }
    else if (HIWORD(v10._value))
    {
      __int16 value = ((v10._value + 67043328) >> 10) - 10240;
    }
    else
    {
      __int16 value = v10._value;
    }
  }
  *a1 = value;
  return EnumeratedSequence._base.modify;
}

unint64_t protocol witness for Collection.subscript.getter in conformance String.UTF8View@<X0>(Swift::UInt64 *a1@<X0>, Swift::UInt64 *a2@<X8>)
{
  v4._Swift::UInt64 rawBits = a1[1];
  v5._Swift::UInt64 rawBits = *a1;
  *a2 = specialized String.UTF8View.subscript.getter(v5, v4, *v2, v2[1]);
  a2[1] = v6;
  a2[2] = v8;
  a2[3] = v7;

  return swift_bridgeObjectRetain(v7);
}

Swift::UInt64 String.UTF8View.subscript.getter(Swift::String::Index a1, Swift::String::Index a2, unint64_t a3, unint64_t a4)
{
  Swift::UInt64 v4 = specialized String.UTF8View.subscript.getter(a1, a2, a3, a4);
  swift_bridgeObjectRetain(v5);
  return v4;
}

Swift::Int protocol witness for Collection.count.getter in conformance String.UTF16View()
{
  unint64_t v1 = v0[1];
  if ((v1 & 0x1000000000000000) != 0) {
    return String.UTF16View._foreignCount()();
  }
  uint64_t v2 = HIBYTE(v1) & 0xF;
  if ((v1 & 0x2000000000000000) == 0) {
    uint64_t v2 = *v0;
  }
  return String.UTF16View._nativeGetOffset(for:)((Swift::String::Index)((v2 << 16) | 7));
}

uint64_t protocol witness for BidirectionalCollection.index(_:offsetBy:limitedBy:) in conformance String@<X0>(void *a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t (*a4)(void, uint64_t, void, void, void)@<X5>, uint64_t a5@<X8>)
{
  uint64_t result = a4(*a1, a2, *a3, *v5, v5[1]);
  *(void *)a5 = result;
  *(unsigned char *)(a5 + 8) = v8 & 1;
  return result;
}

unint64_t protocol witness for Collection.index(after:) in conformance String.UTF16View@<X0>(Swift::UInt64 *a1@<X0>, unint64_t *a2@<X8>)
{
  Swift::UInt64 rawBits = *a1;
  uint64_t v6 = *v2;
  unint64_t v5 = v2[1];
  uint64_t v7 = ((unint64_t)*v2 >> 59) & 1;
  if ((v5 & 0x1000000000000000) == 0) {
    LOBYTE(v7) = 1;
  }
  if ((rawBits & 0xC) == 4 << v7) {
    Swift::UInt64 rawBits = _StringGuts._slowEnsureMatchingEncoding(_:)((Swift::String::Index)rawBits)._rawBits;
  }
  Swift::UInt64 v8 = rawBits >> 16;
  unint64_t v9 = HIBYTE(v5) & 0xF;
  if ((v5 & 0x2000000000000000) == 0) {
    unint64_t v9 = v6 & 0xFFFFFFFFFFFFLL;
  }
  if (v8 >= v9) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index is out of bounds", 29, 2, "Swift/StringUTF16View.swift", 27, 2, 0x93uLL, 0);
  }
  if ((v5 & 0x1000000000000000) != 0)
  {
    unint64_t result = specialized String.UTF16View._foreignIndex(after:)(rawBits);
    goto LABEL_29;
  }
  uint64_t v10 = (v5 >> 62) & 1;
  if ((v5 & 0x2000000000000000) == 0) {
    LOBYTE(v1_assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0, 0xE000000000000000, "Swift/StringRangeReplaceableCollection.swift", 44, 2, 0x168uLL, 0) = v6 < 0;
  }
  if ((v10 & 1) == 0)
  {
    if ((rawBits & 0xC001) != 0)
    {
      if ((v5 & 0x2000000000000000) == 0)
      {
LABEL_15:
        if ((v6 & 0x1000000000000000) != 0)
        {
          LODWORD(v12) = *(unsigned __int8 *)((v5 & 0xFFFFFFFFFFFFFFFLL) + 32 + v8);
          if ((v12 & 0x80) != 0) {
            goto LABEL_17;
          }
LABEL_26:
          uint64_t v12 = 1;
          goto LABEL_27;
        }
        Swift::UInt64 v15 = rawBits;
        uint64_t v12 = (uint64_t)_StringObject.sharedUTF8.getter(v6, v5);
        Swift::UInt64 rawBits = v15;
        LODWORD(v12) = *(unsigned __int8 *)(v12 + v8);
        if ((v12 & 0x80) == 0) {
          goto LABEL_26;
        }
LABEL_17:
        LODWORD(v12) = __clz(v12 ^ 0xFF) - 24;
        if (v12 == 4)
        {
          if ((rawBits & 0xC000) == 0)
          {
            unsigned __int16 v13 = 16388;
LABEL_28:
            unint64_t result = rawBits & 0xFFFFFFFFFFFF0000 | v13;
            goto LABEL_29;
          }
          uint64_t v12 = 4;
        }
        else
        {
          uint64_t v12 = v12;
        }
LABEL_27:
        rawBits += v12 << 16;
        unsigned __int16 v13 = 5;
        goto LABEL_28;
      }
    }
    else
    {
      Swift::UInt64 v14 = _StringGuts.scalarAlignSlow(_:)((Swift::String::Index)rawBits)._rawBits;
      Swift::UInt64 rawBits = v14 & 0xFFFFFFFFFFFFFFF2 | 1;
      Swift::UInt64 v8 = v14 >> 16;
      if ((v5 & 0x2000000000000000) == 0) {
        goto LABEL_15;
      }
    }
    v16[0] = v6;
    v16[1] = v5 & 0xFFFFFFFFFFFFFFLL;
    LODWORD(v12) = *((unsigned __int8 *)v16 + v8);
    if ((v12 & 0x80) == 0) {
      goto LABEL_26;
    }
    goto LABEL_17;
  }
  unint64_t result = (rawBits & 0xFFFFFFFFFFFF0000) + 65549;
LABEL_29:
  *a2 = result;
  return result;
}

unint64_t protocol witness for Collection.formIndex(after:) in conformance String.UTF16View(Swift::UInt64 *a1)
{
  uint64_t v4 = *v1;
  unint64_t v3 = v1[1];
  Swift::UInt64 rawBits = *a1;
  uint64_t v6 = ((unint64_t)*v1 >> 59) & 1;
  if ((v3 & 0x1000000000000000) == 0) {
    LOBYTE(v6) = 1;
  }
  if ((rawBits & 0xC) == 4 << v6) {
    Swift::UInt64 rawBits = _StringGuts._slowEnsureMatchingEncoding(_:)((Swift::String::Index)rawBits)._rawBits;
  }
  Swift::UInt64 v7 = rawBits >> 16;
  unint64_t v8 = HIBYTE(v3) & 0xF;
  if ((v3 & 0x2000000000000000) == 0) {
    unint64_t v8 = v4 & 0xFFFFFFFFFFFFLL;
  }
  if (v7 >= v8) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index is out of bounds", 29, 2, "Swift/StringUTF16View.swift", 27, 2, 0x93uLL, 0);
  }
  if ((v3 & 0x1000000000000000) != 0)
  {
    unint64_t result = specialized String.UTF16View._foreignIndex(after:)(rawBits);
    goto LABEL_29;
  }
  uint64_t v9 = (v3 >> 62) & 1;
  if ((v3 & 0x2000000000000000) == 0) {
    LOBYTE(v9) = v4 < 0;
  }
  if ((v9 & 1) == 0)
  {
    if ((rawBits & 0xC001) != 0)
    {
      if ((v3 & 0x2000000000000000) == 0)
      {
LABEL_15:
        if ((v4 & 0x1000000000000000) != 0)
        {
          LODWORD(v11) = *(unsigned __int8 *)((v3 & 0xFFFFFFFFFFFFFFFLL) + 32 + v7);
          if ((v11 & 0x80) != 0) {
            goto LABEL_17;
          }
LABEL_26:
          uint64_t v11 = 1;
          goto LABEL_27;
        }
        Swift::UInt64 v14 = rawBits;
        uint64_t v11 = (uint64_t)_StringObject.sharedUTF8.getter(v4, v3);
        Swift::UInt64 rawBits = v14;
        LODWORD(v11) = *(unsigned __int8 *)(v11 + v7);
        if ((v11 & 0x80) == 0) {
          goto LABEL_26;
        }
LABEL_17:
        LODWORD(v11) = __clz(v11 ^ 0xFF) - 24;
        if (v11 == 4)
        {
          if ((rawBits & 0xC000) == 0)
          {
            unsigned __int16 v12 = 16388;
LABEL_28:
            unint64_t result = rawBits & 0xFFFFFFFFFFFF0000 | v12;
            goto LABEL_29;
          }
          uint64_t v11 = 4;
        }
        else
        {
          uint64_t v11 = v11;
        }
LABEL_27:
        rawBits += v11 << 16;
        unsigned __int16 v12 = 5;
        goto LABEL_28;
      }
    }
    else
    {
      Swift::UInt64 v13 = _StringGuts.scalarAlignSlow(_:)((Swift::String::Index)rawBits)._rawBits;
      Swift::UInt64 rawBits = v13 & 0xFFFFFFFFFFFFFFF2 | 1;
      Swift::UInt64 v7 = v13 >> 16;
      if ((v3 & 0x2000000000000000) == 0) {
        goto LABEL_15;
      }
    }
    v15[0] = v4;
    v15[1] = v3 & 0xFFFFFFFFFFFFFFLL;
    LODWORD(v11) = *((unsigned __int8 *)v15 + v7);
    if ((v11 & 0x80) == 0) {
      goto LABEL_26;
    }
    goto LABEL_17;
  }
  unint64_t result = (rawBits & 0xFFFFFFFFFFFF0000) + 65549;
LABEL_29:
  *a1 = result;
  return result;
}

void protocol witness for Sequence.makeIterator() in conformance String.UTF16View(uint64_t a1@<X8>)
{
  unint64_t v2 = v1[1];
  uint64_t v3 = HIBYTE(v2) & 0xF;
  if ((v2 & 0x2000000000000000) == 0) {
    uint64_t v3 = *v1 & 0xFFFFFFFFFFFFLL;
  }
  *(void *)a1 = *v1;
  *(void *)(a1 + 8) = v2;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = v3;
  *(_WORD *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 34) = 1;
}

uint64_t String.UTF16View.makeIterator()@<X0>(uint64_t result@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3 = HIBYTE(a2) & 0xF;
  *(void *)a3 = result;
  *(void *)(a3 + 8) = a2;
  if ((a2 & 0x2000000000000000) == 0) {
    uint64_t v3 = result & 0xFFFFFFFFFFFFLL;
  }
  *(void *)(a3 + 16) = 0;
  *(void *)(a3 + 24) = v3;
  *(_WORD *)(a3 + 32) = 0;
  *(unsigned char *)(a3 + 34) = 1;
  return result;
}

Swift::Int protocol witness for Sequence.underestimatedCount.getter in conformance String.UTF16View()
{
  return specialized Collection.underestimatedCount.getter(*(void *)v0, *(void *)(v0 + 8));
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance String.UTF16View(uint64_t a1, uint64_t a2)
{
  return protocol witness for Sequence._copyToContiguousArray() in conformance String(a1, a2, (uint64_t (*)(void, uint64_t))specialized _copyCollectionToContiguousArray<A>(_:));
}

uint64_t protocol witness for Sequence._copyContents(initializing:) in conformance String.UTF16View(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return specialized Sequence._copySequenceContents(initializing:)(a1, a2, a3, *(void *)v3, *(void *)(v3 + 8));
}

uint64_t String.UTF16View.Iterator._guts.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain(v0[1]);
  return v1;
}

void String.UTF16View.Iterator._guts.setter(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease(v2[1]);
  void *v2 = a1;
  v2[1] = a2;
}

uint64_t (*String.UTF16View.Iterator._guts.modify())()
{
  return EnumeratedSequence._base.modify;
}

uint64_t String.UTF16View.Iterator._position.getter()
{
  return *(void *)(v0 + 16);
}

uint64_t String.UTF16View.Iterator._position.setter(uint64_t result)
{
  *(void *)(v1 + 16) = result;
  return result;
}

uint64_t (*String.UTF16View.Iterator._position.modify())()
{
  return EnumeratedSequence._base.modify;
}

uint64_t String.UTF16View.Iterator._end.getter()
{
  return *(void *)(v0 + 24);
}

uint64_t String.UTF16View.Iterator._end.setter(uint64_t result)
{
  *(void *)(v1 + 24) = result;
  return result;
}

uint64_t (*String.UTF16View.Iterator._end.modify())()
{
  return EnumeratedSequence._base.modify;
}

uint64_t String.UTF16View.Iterator._nextIsTrailingSurrogate.getter()
{
  return *(unsigned __int16 *)(v0 + 32) | (*(unsigned __int8 *)(v0 + 34) << 16);
}

uint64_t String.UTF16View.Iterator._nextIsTrailingSurrogate.setter(uint64_t result)
{
  *(_WORD *)(v1 + 32) = result;
  *(unsigned char *)(v1 + 34) = BYTE2(result) & 1;
  return result;
}

uint64_t (*String.UTF16View.Iterator._nextIsTrailingSurrogate.modify())()
{
  return EnumeratedSequence._base.modify;
}

uint64_t String.UTF16View.Iterator.init(_:)@<X0>(uint64_t result@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3 = HIBYTE(a2) & 0xF;
  *(void *)a3 = result;
  *(void *)(a3 + 8) = a2;
  if ((a2 & 0x2000000000000000) == 0) {
    uint64_t v3 = result & 0xFFFFFFFFFFFFLL;
  }
  *(void *)(a3 + 16) = 0;
  *(void *)(a3 + 24) = v3;
  *(_WORD *)(a3 + 32) = 0;
  *(unsigned char *)(a3 + 34) = 1;
  return result;
}

Swift::UInt16_optional __swiftcall String.UTF16View.Iterator.next()()
{
  if (*(unsigned char *)(v0 + 34))
  {
    uint64_t v1 = *(void *)(v0 + 16);
    if (v1 >= *(void *)(v0 + 24))
    {
      LOWORD(v3) = 0;
      int v5 = 1;
    }
    else
    {
      uint64_t v2 = *(void *)v0;
      uint64_t v3 = *(void *)(v0 + 8);
      if ((v3 & 0x1000000000000000) != 0)
      {
        Swift::tuple_Unicode_Scalar_scalarLength_Int v9 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)((Swift::String::Index)(v1 << 16));
        Swift::Int scalarLength = v9.scalarLength;
        uint64_t v6 = *(void *)&v9._0._value;
        goto LABEL_10;
      }
      if ((v3 & 0x2000000000000000) != 0)
      {
        v12[0] = *(void *)v0;
        v12[1] = v3 & 0xFFFFFFFFFFFFFFLL;
        uint64_t v4 = v12;
      }
      else
      {
        if ((v2 & 0x1000000000000000) == 0) {
          goto LABEL_17;
        }
        uint64_t v4 = (void *)((v3 & 0xFFFFFFFFFFFFFFFLL) + 32);
      }
      while (1)
      {
        uint64_t v6 = _decodeScalar(_:startingAt:)((uint64_t)v4, v2, v1);
LABEL_10:
        LOWORD(v3) = v6;
        *(void *)(v0 + 16) += scalarLength;
        if (v6 < 0x10000) {
          break;
        }
        int v10 = v6;
        *(_WORD *)(v0 + 32) = Unicode.Scalar.UTF16View.subscript.getter(1, v6);
        *(unsigned char *)(v0 + 34) = 0;
        uint64_t v3 = (unsigned __int16)((v10 + 67043328) >> 10) + 55296;
        if ((v3 & 0x10000) == 0) {
          break;
        }
        __break(1u);
LABEL_17:
        uint64_t v11 = v1;
        uint64_t v4 = _StringObject.sharedUTF8.getter(v2, v3);
        uint64_t v1 = v11;
      }
      int v5 = 0;
    }
  }
  else
  {
    int v5 = 0;
    LOWORD(v3) = *(_WORD *)(v0 + 32);
    *(_WORD *)(v0 + 32) = 0;
    *(unsigned char *)(v0 + 34) = 1;
  }
  return (Swift::UInt16_optional)((unsigned __int16)v3 | (v5 << 16));
}

uint64_t protocol witness for IteratorProtocol.next() in conformance String.UTF16View.Iterator@<X0>(uint64_t a1@<X8>)
{
  *(Swift::UInt16_optional *)&uint64_t result = String.UTF16View.Iterator.next()();
  *(_WORD *)a1 = result;
  *(unsigned char *)(a1 + 2) = BYTE2(result) & 1;
  return result;
}

uint64_t String.UTF16View.debugDescription.getter(uint64_t a1, unint64_t a2)
{
  unint64_t v3 = specialized static String._createEmpty(withInitialCapacity:)(15);
  unint64_t v5 = (unint64_t)v4;
  v239._uint64_t countAndFlagsBits = v3;
  v239._unint64_t object = v4;
  Swift::String v6 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("StringUTF16(", 0xCuLL, 1);
  uint64_t v7 = HIBYTE(v5) & 0xF;
  uint64_t v8 = v3 & 0xFFFFFFFFFFFFLL;
  if ((v5 & 0x2000000000000000) != 0) {
    uint64_t v9 = HIBYTE(v5) & 0xF;
  }
  else {
    uint64_t v9 = v3 & 0xFFFFFFFFFFFFLL;
  }
  unint64_t v229 = a2;
  if (v9 || (v3 & ~v5 & 0x2000000000000000) != 0)
  {
    uint64_t v10 = (uint64_t)v6._object & 0x2000000000000000;
    unint64_t v11 = ((unint64_t)v6._object >> 56) & 0xF;
    if ((v5 & 0x2000000000000000) != 0 && v10)
    {
      unint64_t v12 = v11 + v7;
      if (v11 + v7 <= 0xF)
      {
        if (v11)
        {
          char v57 = 0;
          unint64_t v58 = 0;
          unint64_t v59 = v5;
          a2 = v229;
          uint64_t v23 = a1;
          do
          {
            unint64_t v60 = v7 + v58;
            unint64_t v61 = v58 + 1;
            if (v58 >= 8) {
              unint64_t object = (unint64_t)v6._object;
            }
            else {
              unint64_t object = v6._countAndFlagsBits;
            }
            unint64_t v63 = object >> (v57 & 0x38);
            char v64 = (8 * v7 + v57) & 0x38;
            uint64_t v65 = (-255 << v64) - 1;
            unint64_t v66 = (unint64_t)v63 << v64;
            unint64_t v67 = v66 | v65 & v59;
            unint64_t v68 = v66 | v65 & v3;
            if (v60 < 8) {
              unint64_t v3 = v68;
            }
            else {
              unint64_t v59 = v67;
            }
            v57 += 8;
            unint64_t v58 = v61;
          }
          while (v11 != v61);
        }
        else
        {
          unint64_t v59 = v5;
          a2 = v229;
          uint64_t v23 = a1;
        }
        swift_bridgeObjectRelease(v5);
        swift_bridgeObjectRelease((uint64_t)v6._object);
        unint64_t v74 = 0xA000000000000000;
        if (!(v3 & 0x8080808080808080 | v59 & 0x80808080808080)) {
          unint64_t v74 = 0xE000000000000000;
        }
        unint64_t v56 = (void *)(v74 & 0xFF00000000000000 | (v12 << 56) | v59 & 0xFFFFFFFFFFFFFFLL);
        goto LABEL_88;
      }
      uint64_t v10 = 1;
    }
    if (v10) {
      int64_t v13 = ((unint64_t)v6._object >> 56) & 0xF;
    }
    else {
      int64_t v13 = v6._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
    }
    swift_bridgeObjectRetain_n((uint64_t)v6._object, 2);
    uint64_t v232 = v13;
    if (((uint64_t)v6._object & 0x1000000000000000) != 0)
    {
      swift_bridgeObjectRetain_n((uint64_t)v6._object, 5);
      v212._Swift::UInt64 rawBits = 1;
      v213._Swift::UInt64 rawBits = (v13 << 16) | 1;
      v214._Swift::UInt64 rawBits = _StringGuts.validateScalarRange(_:)(v212, v213, v6._countAndFlagsBits, (unint64_t)v6._object);
      if (v214._rawBits < 0x10000) {
        v214._rawBits |= 3;
      }
      int64_t v13 = specialized Collection.count.getter(v214, v215, v6._countAndFlagsBits, (unint64_t)v6._object);
      swift_bridgeObjectRelease((uint64_t)v6._object);
      if ((v5 & 0x1000000000000000) == 0)
      {
LABEL_15:
        BOOL v14 = __OFADD__(v9, v13);
        Swift::Int v15 = v9 + v13;
        if (!v14)
        {
LABEL_16:
          unint64_t v16 = v3 & ~v5;
          if ((v16 & 0x2000000000000000) != 0 && swift_isUniquelyReferenced_nonNull_native(v5 & 0xFFFFFFFFFFFFFFFLL))
          {
            int64_t v17 = _StringGuts.nativeUnusedCapacity.getter(v3, v5);
            if (v18)
            {
LABEL_286:
              unint64_t v220 = 258;
              goto LABEL_287;
            }
            if (v15 > 15) {
              goto LABEL_24;
            }
            if ((v5 & 0x2000000000000000) == 0)
            {
              if (v17 < v13)
              {
LABEL_46:
                swift_bridgeObjectRelease_n((uint64_t)v6._object, 5);
                if ((v5 & 0x1000000000000000) == 0)
                {
                  if ((v3 & 0x1000000000000000) != 0)
                  {
                    int v31 = (unsigned __int8 *)((v5 & 0xFFFFFFFFFFFFFFFLL) + 32);
                  }
                  else
                  {
                    int v31 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v3, v5);
                    uint64_t v8 = v222;
                  }
                  a2 = v229;
                  uint64_t v32 = v232;
                  swift_bridgeObjectRetain(v5);
                  closure #1 in _StringGuts._convertedToSmall()(v31, v8, &v238);
                  swift_bridgeObjectRelease(v5);
                  unint64_t v3 = v238;
                  unint64_t v33 = *((void *)&v238 + 1);
                  goto LABEL_53;
                }
                goto LABEL_289;
              }
LABEL_24:
              int64_t v19 = _StringGuts.nativeUnusedCapacity.getter(v3, v5);
              BOOL v22 = (v20 & 1) == 0 && v19 >= v13;
              if ((v16 & 0x2000000000000000) != 0
                && swift_isUniquelyReferenced_nonNull_native(v5 & 0xFFFFFFFFFFFFFFFLL))
              {
                uint64_t v23 = a1;
                if (v22)
                {
LABEL_42:
                  swift_bridgeObjectRelease_n((uint64_t)v6._object, 4);
                  if (((uint64_t)v6._object & 0x1000000000000000) != 0)
                  {
                    swift_bridgeObjectRelease((uint64_t)v6._object);
                    _StringGuts._foreignAppendInPlace(_:)(v6._countAndFlagsBits, (unint64_t)v6._object, 0, v232);
                    swift_bridgeObjectRelease_n((uint64_t)v6._object, 2);
                    a2 = v229;
                  }
                  else if (v10)
                  {
                    swift_bridgeObjectRelease_n((uint64_t)v6._object, 2);
                    *(void *)&unsigned long long v238 = v6._countAndFlagsBits;
                    *((void *)&v238 + 1) = (uint64_t)v6._object & 0xFFFFFFFFFFFFFFLL;
                    uint64_t v28 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, ((unint64_t)v6._object >> 56) & 0xF, (uint64_t)&v238, ((unint64_t)v6._object >> 56) & 0xF);
                    _StringGuts.appendInPlace(_:isASCII:)(v28, v29, ((uint64_t)v6._object & 0x4000000000000000) != 0);
                    swift_bridgeObjectRelease((uint64_t)v6._object);
                    a2 = v229;
                  }
                  else
                  {
                    if ((v6._countAndFlagsBits & 0x1000000000000000) != 0)
                    {
                      swift_bridgeObjectRelease((uint64_t)v6._object);
                      id v69 = (id)(((uint64_t)v6._object & 0xFFFFFFFFFFFFFFFLL) + 32);
                      uint64_t v70 = v6._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
                      uint64_t v71 = v6._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
                      a2 = v229;
                    }
                    else
                    {
                      id v69 = _StringObject.sharedUTF8.getter(v6._countAndFlagsBits, (uint64_t)v6._object);
                      uint64_t v71 = v223;
                      swift_bridgeObjectRelease((uint64_t)v6._object);
                      if (v71 < (v6._countAndFlagsBits & 0xFFFFFFFFFFFFLL)) {
LABEL_192:
                      }
                        _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x745uLL, 0);
                      a2 = v229;
                      uint64_t v23 = a1;
                      uint64_t v70 = v6._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
                    }
                    uint64_t v72 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, v70, (uint64_t)v69, v71);
                    _StringGuts.appendInPlace(_:isASCII:)(v72, v73, v6._countAndFlagsBits < 0);
                    swift_bridgeObjectRelease_n((uint64_t)v6._object, 2);
                  }
                  goto LABEL_89;
                }
              }
              else
              {
                uint64_t v23 = a1;
                if (v22)
                {
LABEL_41:
                  _StringGuts.grow(_:)(v15);
                  goto LABEL_42;
                }
              }
              uint64_t v24 = _StringGuts.nativeCapacity.getter(v3, v5);
              if (v25) {
                uint64_t v26 = 0;
              }
              else {
                uint64_t v26 = v24;
              }
              if (v26 + 0x4000000000000000 < 0)
              {
                __break(1u);
LABEL_289:
                unint64_t v3 = _StringGuts._foreignConvertedToSmall()(v3, v5);
                unint64_t v33 = v221;
                goto LABEL_52;
              }
              uint64_t v27 = 2 * v26;
              if (v27 > v15) {
                Swift::Int v15 = v27;
              }
              goto LABEL_41;
            }
          }
          else
          {
            if (v15 > 15) {
              goto LABEL_24;
            }
            if ((v5 & 0x2000000000000000) == 0) {
              goto LABEL_46;
            }
          }
          swift_bridgeObjectRelease_n((uint64_t)v6._object, 5);
          unint64_t v33 = v5;
LABEL_52:
          a2 = v229;
          uint64_t v32 = v232;
LABEL_53:
          v34._Swift::UInt64 rawBits = (v32 << 16) | 1;
          v35._Swift::UInt64 rawBits = 1;
          v36._Swift::UInt64 rawBits = _StringGuts.validateScalarRange(_:)(v35, v34, v6._countAndFlagsBits, (unint64_t)v6._object);
          if (v36._rawBits < 0x10000) {
            v36._rawBits |= 3;
          }
          unint64_t v38 = specialized String.init(_:)(v36, v37, v6._countAndFlagsBits, (unint64_t)v6._object);
          unint64_t v40 = v39;
          swift_bridgeObjectRelease((uint64_t)v6._object);
          if ((v40 & 0x2000000000000000) != 0)
          {
            swift_bridgeObjectRelease(v40);
            uint64_t v23 = a1;
          }
          else
          {
            uint64_t v23 = a1;
            if ((v40 & 0x1000000000000000) != 0)
            {
              unint64_t v38 = _StringGuts._foreignConvertedToSmall()(v38, v40);
              unint64_t v225 = v224;
              swift_bridgeObjectRelease(v40);
              unint64_t v40 = v225;
            }
            else
            {
              if ((v38 & 0x1000000000000000) != 0)
              {
                uint64_t v218 = (unsigned __int8 *)((v40 & 0xFFFFFFFFFFFFFFFLL) + 32);
                uint64_t v219 = v38 & 0xFFFFFFFFFFFFLL;
              }
              else
              {
                uint64_t v218 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v38, v40);
              }
              closure #1 in _StringGuts._convertedToSmall()(v218, v219, &v238);
              swift_bridgeObjectRelease(v40);
              unint64_t v38 = v238;
              unint64_t v40 = *((void *)&v238 + 1);
            }
          }
          uint64_t v41 = HIBYTE(v33) & 0xF;
          uint64_t v42 = HIBYTE(v40) & 0xF;
          uint64_t v43 = v42 + v41;
          if ((unint64_t)(v42 + v41) <= 0xF)
          {
            if (v42)
            {
              char v44 = 0;
              unint64_t v45 = 0;
              do
              {
                unint64_t v46 = v41 + v45;
                unint64_t v47 = v45 + 1;
                if (v45 >= 8) {
                  unint64_t v48 = v40;
                }
                else {
                  unint64_t v48 = v38;
                }
                unint64_t v49 = v48 >> (v44 & 0x38);
                char v50 = (8 * v41 + v44) & 0x38;
                uint64_t v51 = (-255 << v50) - 1;
                unint64_t v52 = (unint64_t)v49 << v50;
                unint64_t v53 = v52 | v51 & v33;
                unint64_t v54 = v52 | v51 & v3;
                if (v46 < 8) {
                  unint64_t v3 = v54;
                }
                else {
                  unint64_t v33 = v53;
                }
                v44 += 8;
                unint64_t v45 = v47;
              }
              while (v42 != v47);
            }
            swift_bridgeObjectRelease(v5);
            swift_bridgeObjectRelease((uint64_t)v6._object);
            unint64_t v55 = 0xA000000000000000;
            if (!(v3 & 0x8080808080808080 | v33 & 0x80808080808080)) {
              unint64_t v55 = 0xE000000000000000;
            }
            unint64_t v56 = (void *)(v55 & 0xFF00000000000000 | (v43 << 56) | v33 & 0xFFFFFFFFFFFFFFLL);
LABEL_88:
            v239._uint64_t countAndFlagsBits = v3;
            v239._unint64_t object = v56;
            goto LABEL_89;
          }
LABEL_285:
          unint64_t v220 = 266;
LABEL_287:
          _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/StringGutsRangeReplaceable.swift", 38, 2, v220, 0);
        }
LABEL_278:
        __break(1u);
LABEL_279:
        unint64_t v217 = 816;
LABEL_280:
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/String.swift", 18, 2, v217, 0);
      }
    }
    else
    {
      swift_bridgeObjectRetain_n((uint64_t)v6._object, 4);
      if ((v5 & 0x1000000000000000) == 0) {
        goto LABEL_15;
      }
    }
    Swift::Int v216 = String.UTF8View._foreignCount()();
    Swift::Int v15 = v216 + v13;
    if (!__OFADD__(v216, v13)) {
      goto LABEL_16;
    }
    goto LABEL_278;
  }
  swift_bridgeObjectRelease(v5);
  Swift::String v239 = v6;
  uint64_t v23 = a1;
LABEL_89:
  uint64_t v75 = 34;
  uint64_t v76 = 0xE100000000000000;
  *(void *)&unsigned long long v238 = 34;
  *((void *)&v238 + 1) = 0xE100000000000000;
  uint64_t v77 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0) {
    uint64_t v77 = v23 & 0xFFFFFFFFFFFFLL;
  }
  uint64_t v233 = v77;
  if (!v77)
  {
    unint64_t v98 = 0xE100000000000000;
    goto LABEL_195;
  }
  uint64_t v78 = 0;
  uint64_t v226 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
  uint64_t v227 = a2 & 0xFFFFFFFFFFFFFFLL;
  char v79 = 1;
  do
  {
    while (1)
    {
      if ((a2 & 0x1000000000000000) != 0)
      {
        Swift::tuple_Unicode_Scalar_scalarLength_Int v84 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)((Swift::String::Index)(v78 << 16));
        Swift::Int scalarLength = v84.scalarLength;
        unsigned int value = v84._0._value;
      }
      else
      {
        if ((a2 & 0x2000000000000000) != 0)
        {
          uint64_t v236 = v23;
          uint64_t v237 = v227;
          unsigned int v81 = &v236;
        }
        else
        {
          unsigned int v81 = (uint64_t *)v226;
          if ((v23 & 0x1000000000000000) == 0) {
            unsigned int v81 = (uint64_t *)_StringObject.sharedUTF8.getter(v23, a2);
          }
        }
        unsigned int value = _decodeScalar(_:startingAt:)((uint64_t)v81, v30, v78);
      }
      unsigned int v85 = value;
      v78 += scalarLength;
      unsigned long long v86 = (unsigned __int128)Unicode.Scalar._escaped(asASCII:)(0);
      if (*((void *)&v86 + 1))
      {
        uint64_t v87 = *((void *)&v238 + 1);
        unint64_t v88 = HIBYTE(*((void *)&v238 + 1)) & 0xFLL;
        if ((*((void *)&v238 + 1) & 0x2000000000000000) == 0) {
          unint64_t v88 = v238 & 0xFFFFFFFFFFFFLL;
        }
        if (v88 || ((unint64_t)v238 & ~*((void *)&v238 + 1) & 0x2000000000000000) != 0)
        {
          if ((*((void *)&v86 + 1) & 0x2000000000000000 & *((void *)&v238 + 1)) == 0
            || (unint64_t v89 = specialized _SmallString.init(_:appending:)(v238, *((unint64_t *)&v238 + 1), v86, *((unint64_t *)&v86 + 1)), (v91 & 1) != 0))
          {
            if ((*((void *)&v86 + 1) & 0x2000000000000000) != 0) {
              uint64_t v80 = HIBYTE(*((void *)&v86 + 1)) & 0xFLL;
            }
            else {
              uint64_t v80 = v86 & 0xFFFFFFFFFFFFLL;
            }
            swift_bridgeObjectRetain(*((unint64_t *)&v86 + 1));
            _StringGuts.append(_:)(v86, *((unint64_t *)&v86 + 1), 0, v80);
            swift_bridgeObjectRelease_n(*((uint64_t *)&v86 + 1), 2);
          }
          else
          {
            uint64_t v92 = v89;
            unint64_t v93 = v90;
            swift_bridgeObjectRelease(v87);
            swift_bridgeObjectRelease(*((uint64_t *)&v86 + 1));
            *(void *)&unsigned long long v238 = v92;
            *((void *)&v238 + 1) = v93;
          }
        }
        else
        {
          swift_bridgeObjectRelease(*((uint64_t *)&v238 + 1));
          unsigned long long v238 = v86;
        }
        goto LABEL_97;
      }
      uint64_t v95 = v238;
      unint64_t v94 = *((void *)&v238 + 1);
      if (v79)
      {
        LODWORD(v236) = 0;
        swift_bridgeObjectRetain(*((unint64_t *)&v238 + 1));
        unint64_t v96 = specialized BidirectionalCollection.last.getter(v95, v94);
        swift_bridgeObjectRelease(v94);
        if ((v96 & 0x100000000) != 0) {
          goto LABEL_279;
        }
        if (!_GraphemeBreakingState.shouldBreak(between:and:)((Swift::Unicode::Scalar)v96, (Swift::Unicode::Scalar)v85)) {
          break;
        }
      }
      uint64_t v236 = v95;
      uint64_t v237 = v94;
      *(void *)&unsigned long long v238 = 0;
      *((void *)&v238 + 1) = 0xE000000000000000;
      unint64_t v98 = specialized Unicode.Scalar.withUTF8CodeUnits<A>(_:)(v85);
      uint64_t v75 = v97;
      uint64_t v99 = v97 & 0x2000000000000000;
      uint64_t v100 = HIBYTE(v97) & 0xF;
      uint64_t v101 = HIBYTE(v94) & 0xF;
      if ((v94 & 0x2000000000000000) != 0 && v99)
      {
        if ((unint64_t)(v100 + v101) <= 0xF)
        {
          swift_bridgeObjectRelease(v97);
          if (v100)
          {
            char v133 = 0;
            unint64_t v134 = 0;
            unint64_t v135 = v94;
            do
            {
              unint64_t v136 = v101 + v134;
              unint64_t v137 = v134 + 1;
              if (v134 >= 8) {
                unint64_t v138 = v75;
              }
              else {
                unint64_t v138 = v98;
              }
              unint64_t v139 = v138 >> (v133 & 0x38);
              char v140 = (8 * v101 + v133) & 0x38;
              uint64_t v141 = (-255 << v140) - 1;
              unint64_t v142 = (unint64_t)v139 << v140;
              unint64_t v143 = v142 | v141 & v135;
              unint64_t v144 = v142 | v141 & v95;
              if (v136 < 8) {
                uint64_t v95 = v144;
              }
              else {
                unint64_t v135 = v143;
              }
              v133 += 8;
              unint64_t v134 = v137;
            }
            while (v100 != v137);
          }
          else
          {
            unint64_t v135 = v94;
          }
          swift_bridgeObjectRelease(v94);
          unint64_t v157 = 0xE000000000000000;
          if (v95 & 0x8080808080808080 | v135 & 0x80808080808080) {
            unint64_t v157 = 0xA000000000000000;
          }
          uint64_t v236 = v95;
          uint64_t v237 = v157 & 0xFF00000000000000 | ((v100 + v101) << 56) | v135 & 0xFFFFFFFFFFFFFFLL;
          a2 = v229;
          uint64_t v23 = a1;
          goto LABEL_181;
        }
        uint64_t v99 = 1;
      }
      if (v99) {
        int64_t v102 = HIBYTE(v97) & 0xF;
      }
      else {
        int64_t v102 = v98 & 0xFFFFFFFFFFFFLL;
      }
      swift_bridgeObjectRetain(v97);
      uint64_t v231 = v102;
      if ((v75 & 0x1000000000000000) != 0)
      {
        swift_bridgeObjectRetain_n(v75, 5);
        v158._Swift::UInt64 rawBits = 1;
        v159._Swift::UInt64 rawBits = (v102 << 16) | 1;
        v160._Swift::UInt64 rawBits = _StringGuts.validateScalarRange(_:)(v158, v159, v98, v75);
        if (v160._rawBits < 0x10000) {
          v160._rawBits |= 3;
        }
        int64_t v102 = specialized Collection.count.getter(v160, v161, v98, v75);
        swift_bridgeObjectRelease(v75);
        uint64_t v228 = v98 & 0xFFFFFFFFFFFFLL;
        if ((v94 & 0x1000000000000000) != 0)
        {
LABEL_188:
          Swift::Int v103 = String.UTF8View._foreignCount()();
          int64_t v104 = v103 + v102;
          if (__OFADD__(v103, v102)) {
            goto LABEL_259;
          }
          goto LABEL_129;
        }
      }
      else
      {
        swift_bridgeObjectRetain_n(v75, 4);
        uint64_t v228 = v98 & 0xFFFFFFFFFFFFLL;
        if ((v94 & 0x1000000000000000) != 0) {
          goto LABEL_188;
        }
      }
      if ((v94 & 0x2000000000000000) != 0) {
        Swift::Int v103 = HIBYTE(v94) & 0xF;
      }
      else {
        Swift::Int v103 = v95 & 0xFFFFFFFFFFFFLL;
      }
      int64_t v104 = v103 + v102;
      if (__OFADD__(v103, v102))
      {
LABEL_259:
        __break(1u);
        goto LABEL_260;
      }
LABEL_129:
      if ((v95 & ~v94 & 0x2000000000000000) != 0
        && swift_isUniquelyReferenced_nonNull_native(v94 & 0xFFFFFFFFFFFFFFFLL))
      {
        uint64_t v105 = v237;
        int64_t v106 = _StringGuts.nativeUnusedCapacity.getter(v236, v237);
        uint64_t v23 = a1;
        if (v107) {
          goto LABEL_286;
        }
        a2 = v229;
        if (v104 > 15 || (v105 & 0x2000000000000000) == 0 && v106 >= v102)
        {
LABEL_137:
          _StringGuts.prepareForAppendInPlace(totalCount:otherUTF8Count:)(v104, v102);
          swift_bridgeObjectRelease_n(v75, 4);
          if ((v75 & 0x1000000000000000) != 0)
          {
            swift_bridgeObjectRelease(v75);
            _StringGuts._foreignAppendInPlace(_:)(v98, v75, 0, v231);
          }
          else
          {
            if (v99)
            {
              swift_bridgeObjectRelease_n(v75, 2);
              *(void *)&unsigned long long v235 = v98;
              *((void *)&v235 + 1) = v75 & 0xFFFFFFFFFFFFFFLL;
              uint64_t v108 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, v100, (uint64_t)&v235, v100);
              _StringGuts.appendInPlace(_:isASCII:)(v108, v109, (v75 & 0x4000000000000000) != 0);
              goto LABEL_181;
            }
            if ((v98 & 0x1000000000000000) != 0)
            {
              swift_bridgeObjectRelease(v75);
              id v147 = (id)((v75 & 0xFFFFFFFFFFFFFFFLL) + 32);
              uint64_t v148 = v228;
              uint64_t v149 = v228;
            }
            else
            {
              id v147 = _StringObject.sharedUTF8.getter(v98, v75);
              uint64_t v149 = v162;
              swift_bridgeObjectRelease(v75);
              uint64_t v148 = v228;
              if (v149 < v228) {
                goto LABEL_192;
              }
            }
            char v150 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, v148, (uint64_t)v147, v149);
            _StringGuts.appendInPlace(_:isASCII:)(v150, v151, (v98 & 0x8000000000000000) != 0);
          }
          swift_bridgeObjectRelease(v75);
          goto LABEL_181;
        }
      }
      else
      {
        a2 = v229;
        uint64_t v23 = a1;
        if (v104 > 15) {
          goto LABEL_137;
        }
        uint64_t v105 = v237;
      }
      swift_bridgeObjectRelease_n(v75, 5);
      unint64_t v114 = v236;
      swift_bridgeObjectRetain(v105);
      unint64_t v115 = _StringGuts._convertedToSmall()(v114, v105);
      unint64_t v117 = v116;
      swift_bridgeObjectRelease(v105);
      v118._Swift::UInt64 rawBits = (v231 << 16) | 1;
      v119._Swift::UInt64 rawBits = 1;
      v120._Swift::UInt64 rawBits = _StringGuts.validateScalarRange(_:)(v119, v118, v98, v75);
      if (v120._rawBits < 0x10000) {
        v120._rawBits |= 3;
      }
      unint64_t v122 = specialized String.init(_:)(v120, v121, v98, v75);
      unint64_t v124 = v123;
      swift_bridgeObjectRelease(v75);
      unint64_t v125 = _StringGuts._convertedToSmall()(v122, v124);
      unint64_t v127 = v126;
      swift_bridgeObjectRelease(v124);
      unint64_t v128 = specialized _SmallString.init(_:appending:)(v115, v117, v125, v127);
      if (v130) {
        goto LABEL_285;
      }
      uint64_t v131 = v128;
      uint64_t v132 = v129;
      swift_bridgeObjectRelease(v105);
      uint64_t v236 = v131;
      uint64_t v237 = v132;
LABEL_181:
      uint64_t v75 = v236;
      unint64_t v98 = v237;
      swift_bridgeObjectRelease(*((uint64_t *)&v238 + 1));
      char v79 = 0;
      *(void *)&unsigned long long v238 = v75;
      *((void *)&v238 + 1) = v98;
      if (v78 >= v233) {
        goto LABEL_194;
      }
    }
    Swift::String_optional v111 = Unicode.Scalar._escaped(asASCII:)(1);
    unint64_t v110 = (unint64_t)v111.value._object;
    if (v111.value._object) {
      uint64_t countAndFlagsBits = v111.value._countAndFlagsBits;
    }
    else {
      uint64_t countAndFlagsBits = specialized Unicode.Scalar.withUTF8CodeUnits<A>(_:)(v85);
    }
    unint64_t v113 = v110;
    uint64_t v145 = HIBYTE(v94) & 0xF;
    if ((v94 & 0x2000000000000000) == 0) {
      uint64_t v145 = v95 & 0xFFFFFFFFFFFFLL;
    }
    if (v145 || (v95 & ~v94 & 0x2000000000000000) != 0)
    {
      if ((v94 & 0x2000000000000000) == 0)
      {
        if ((v110 & 0x2000000000000000) != 0) {
LABEL_175:
        }
          uint64_t v146 = HIBYTE(v113) & 0xF;
        else {
LABEL_168:
        }
          uint64_t v146 = countAndFlagsBits & 0xFFFFFFFFFFFFLL;
        uint64_t v23 = a1;
        swift_bridgeObjectRetain(v113);
        _StringGuts.append(_:)(countAndFlagsBits, v113, 0, v146);
        swift_bridgeObjectRelease_n(v113, 2);
        a2 = v229;
        goto LABEL_97;
      }
      if ((v110 & 0x2000000000000000) == 0) {
        goto LABEL_168;
      }
      unint64_t v152 = specialized _SmallString.init(_:appending:)(v95, v94, countAndFlagsBits, v110);
      if (v154) {
        goto LABEL_175;
      }
      uint64_t v155 = v152;
      Swift::String::Index v156 = v153;
      swift_bridgeObjectRelease(v94);
      swift_bridgeObjectRelease(v113);
      *(void *)&unsigned long long v238 = v155;
      *((void *)&v238 + 1) = v156;
    }
    else
    {
      swift_bridgeObjectRelease(v94);
      *(void *)&unsigned long long v238 = countAndFlagsBits;
      *((void *)&v238 + 1) = v113;
    }
    a2 = v229;
    uint64_t v23 = a1;
LABEL_97:
    char v79 = 1;
  }
  while (v78 < v233);
  uint64_t v75 = v238;
  unint64_t v98 = *((void *)&v238 + 1);
LABEL_194:
  uint64_t v76 = 0xE100000000000000;
LABEL_195:
  uint64_t v236 = 34;
  uint64_t v237 = 0xE100000000000000;
  uint64_t v163 = HIBYTE(v98) & 0xF;
  if ((v98 & 0x2000000000000000) == 0) {
    uint64_t v163 = v75 & 0xFFFFFFFFFFFFLL;
  }
  if (!v163) {
    goto LABEL_249;
  }
  while (2)
  {
    uint64_t v169 = v236;
    uint64_t v170 = v237;
    swift_bridgeObjectRetain(v237);
    unint64_t v171 = specialized Collection.first.getter(v169, v170);
    swift_bridgeObjectRelease(v170);
    if ((v171 & 0x100000000) != 0)
    {
      unint64_t v217 = 839;
      goto LABEL_280;
    }
    *(void *)&unsigned long long v235 = v75;
    *((void *)&v235 + 1) = v98;
    *(void *)&unsigned long long v238 = 0;
    *((void *)&v238 + 1) = 0xE000000000000000;
    unint64_t v172 = specialized Unicode.Scalar.withUTF8CodeUnits<A>(_:)(v171);
    uint64_t v174 = v173;
    _StringGuts.append(_:)(v172, v173);
    swift_bridgeObjectRelease(v174);
    unint64_t v176 = *((void *)&v235 + 1);
    uint64_t v175 = v235;
    swift_bridgeObjectRetain(*((unint64_t *)&v235 + 1));
    swift_bridgeObjectRelease(0xE000000000000000);
    unsigned long long v238 = __PAIR128__(v176, v175);
    uint64_t v177 = HIBYTE(v176) & 0xF;
    if ((v176 & 0x2000000000000000) == 0) {
      uint64_t v177 = v175;
    }
    uint64_t v178 = 7;
    if (((v176 >> 60) & ((v175 & 0x800000000000000) == 0)) != 0) {
      uint64_t v178 = 11;
    }
    v179._Swift::UInt64 rawBits = v178 | (v177 << 16);
    swift_bridgeObjectRetain(v176);
    v180._Swift::UInt64 rawBits = _StringGuts.validateInclusiveCharacterIndex_5_7(_:)(v179)._rawBits;
    Swift::UInt64 rawBits = v180._rawBits;
    if (!(v180._rawBits >> 14))
    {
      if (_swift_stdlib_isExecutableLinkedOnOrAfter(0x50700u)) {
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index is out of bounds", 29, 2, "Swift/StringCharacterView.swift", 31, 2, 0x62uLL, 0);
      }
      uint64_t v182 = 0;
      goto LABEL_222;
    }
    uint64_t v182 = v180._rawBits >> 16;
    if (v180._rawBits < 0x20000)
    {
LABEL_226:
      if (v182 <= 63) {
        uint64_t v187 = v182 << 8;
      }
      else {
        uint64_t v187 = 63;
      }
    }
    else
    {
      if ((v176 & 0x1000000000000000) != 0) {
        goto LABEL_225;
      }
      if ((v176 & 0x2000000000000000) != 0)
      {
        *(void *)&unsigned long long v235 = v175;
        *((void *)&v235 + 1) = v176 & 0xFFFFFFFFFFFFFFLL;
        Swift::String::Index v184 = (char *)&v235 + v182;
      }
      else
      {
        if ((v175 & 0x1000000000000000) != 0)
        {
          uint64_t v183 = (char *)((v176 & 0xFFFFFFFFFFFFFFFLL) + 32);
        }
        else
        {
          uint64_t v183 = (char *)_StringObject.sharedUTF8.getter(v175, v176);
          if (!v183) {
            _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "unsafelyUnwrapped of nil optional", 33, 2, "Swift/Optional.swift", 20, 2, 0x163uLL, 0);
          }
        }
        Swift::String::Index v184 = &v183[v182];
      }
      int v185 = *((unsigned __int16 *)v184 - 1);
      if (v185 == 2573 || (v185 & 0x80808080) != 0)
      {
LABEL_225:
        uint64_t v182 = _StringGuts._opaqueComplexCharacterStride(endingAt:)(rawBits >> 16);
        goto LABEL_226;
      }
      uint64_t v182 = 1;
LABEL_222:
      uint64_t v187 = v182 << 8;
    }
    v188._Swift::UInt64 rawBits = _StringGuts.validateInclusiveScalarIndex(_:)(v179)._rawBits;
    if (!(v188._rawBits >> 14)) {
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index is out of bounds", 29, 2, "Swift/StringUnicodeScalarView.swift", 35, 2, 0x84uLL, 0);
    }
    Swift::UInt64 v189 = v188._rawBits;
    swift_bridgeObjectRelease(v176);
    if ((v176 & 0x1000000000000000) != 0)
    {
      Swift::UInt64 v194 = String.UnicodeScalarView._foreignIndex(before:)((Swift::String::Index)v189)._rawBits;
      swift_bridgeObjectRelease(v176);
    }
    else
    {
      if ((v176 & 0x2000000000000000) != 0)
      {
        uint64_t v191 = 0;
        *(void *)&unsigned long long v235 = v175;
        *((void *)&v235 + 1) = v176 & 0xFFFFFFFFFFFFFFLL;
        do
          int v193 = *(&v234 + (v189 >> 16) + v191--) & 0xC0;
        while (v193 == 128);
      }
      else
      {
        if ((v175 & 0x1000000000000000) != 0) {
          Swift::UInt64 v190 = (char *)((v176 & 0xFFFFFFFFFFFFFFFLL) + 32);
        }
        else {
          Swift::UInt64 v190 = (char *)_StringObject.sharedUTF8.getter(v175, v176);
        }
        uint64_t v191 = 0;
        do
          int v192 = v190[(v189 >> 16) - 1 + v191--] & 0xC0;
        while (v192 == 128);
      }
      swift_bridgeObjectRelease(v176);
      Swift::UInt64 v194 = (v189 - -65536 * v191) & 0xFFFFFFFFFFFF0000 | 5;
    }
    if (((rawBits - (v182 << 16)) & 0xFFFFFFFFFFFF0000 | v187) >> 14 >= v194 >> 14)
    {
      Swift::UInt64 v198 = specialized Collection.dropFirst(_:)(1, v236, v237);
      uint64_t v200 = v199;
      *(void *)&unsigned long long v235 = v175;
      *((void *)&v235 + 1) = v176;
      *(void *)&unsigned long long v238 = 0;
      *((void *)&v238 + 1) = 0xE000000000000000;
      specialized String.UnicodeScalarView.append<A>(contentsOf:)(v198, v201, v202, v199);
      swift_bridgeObjectRelease(0xE000000000000000);
      swift_bridgeObjectRelease(v200);
      unint64_t v98 = *((void *)&v235 + 1);
      uint64_t v75 = v235;
      goto LABEL_250;
    }
    *(void *)&unsigned long long v235 = v175;
    *((void *)&v235 + 1) = v176;
    specialized RangeReplaceableCollection<>.removeLast()();
    swift_bridgeObjectRelease(0xE000000000000000);
    unsigned int v195 = specialized RangeReplaceableCollection<>.removeLast()();
    swift_bridgeObjectRelease(0xE000000000000000);
    unsigned long long v238 = v235;
    Swift::String_optional v196 = Unicode.Scalar._escaped(asASCII:)(1);
    unint64_t v164 = v196.value._object;
    if (v196.value._object) {
      uint64_t v165 = v196.value._countAndFlagsBits;
    }
    else {
      uint64_t v165 = specialized Unicode.Scalar.withUTF8CodeUnits<A>(_:)(v195);
    }
    unint64_t v197 = (unint64_t)v164;
    v166._Swift::UInt64 rawBits = 15;
    v167._Swift::UInt64 rawBits = 15;
    specialized String.UnicodeScalarView.replaceSubrange<A>(_:with:)(v166, v167, v165, v197);
    swift_bridgeObjectRelease(v197);
    uint64_t v75 = v238;
    unint64_t v98 = *((void *)&v238 + 1);
    unint64_t v168 = HIBYTE(*((void *)&v238 + 1)) & 0xFLL;
    if ((*((void *)&v238 + 1) & 0x2000000000000000) == 0) {
      unint64_t v168 = v238 & 0xFFFFFFFFFFFFLL;
    }
    if (v168) {
      continue;
    }
    break;
  }
  uint64_t v76 = v237;
LABEL_249:
  swift_bridgeObjectRelease(v76);
LABEL_250:
  Swift::Int v103 = v239._countAndFlagsBits;
  int64_t v102 = (int64_t)v239._object;
  unint64_t v203 = ((unint64_t)v239._object >> 56) & 0xF;
  if (((uint64_t)v239._object & 0x2000000000000000) == 0) {
    unint64_t v203 = v239._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
  }
  if (!v203 && (v239._countAndFlagsBits & ~(uint64_t)v239._object & 0x2000000000000000) == 0)
  {
    swift_bridgeObjectRelease((uint64_t)v239._object);
    v239._uint64_t countAndFlagsBits = v75;
    v239._unint64_t object = (void *)v98;
    goto LABEL_264;
  }
  if (((uint64_t)v239._object & 0x2000000000000000) != 0)
  {
    if ((v98 & 0x2000000000000000) != 0)
    {
LABEL_260:
      unint64_t v205 = specialized _SmallString.init(_:appending:)(v103, v102, v75, v98);
      if (v207) {
        goto LABEL_262;
      }
      uint64_t v208 = v205;
      size_t v209 = v206;
      swift_bridgeObjectRelease(v102);
      swift_bridgeObjectRelease(v98);
      v239._uint64_t countAndFlagsBits = v208;
      v239._unint64_t object = v209;
      unint64_t v98 = (unint64_t)v209;
      uint64_t v75 = v208;
      goto LABEL_264;
    }
LABEL_258:
    uint64_t v204 = v75 & 0xFFFFFFFFFFFFLL;
    goto LABEL_263;
  }
  if ((v98 & 0x2000000000000000) == 0) {
    goto LABEL_258;
  }
LABEL_262:
  uint64_t v204 = HIBYTE(v98) & 0xF;
LABEL_263:
  swift_bridgeObjectRetain(v98);
  _StringGuts.append(_:)(v75, v98, 0, v204);
  swift_bridgeObjectRelease_n(v98, 2);
  uint64_t v75 = v239._countAndFlagsBits;
  unint64_t v98 = (unint64_t)v239._object;
LABEL_264:
  uint64_t v210 = HIBYTE(v98) & 0xF;
  if ((v98 & 0x2000000000000000) == 0) {
    uint64_t v210 = v75 & 0xFFFFFFFFFFFFLL;
  }
  if (v210 || (v75 & ~v98 & 0x2000000000000000) != 0)
  {
    _StringGuts.append(_:)(0x29uLL, 0xE100000000000000);
    swift_bridgeObjectRelease(0xE100000000000000);
    return v239._countAndFlagsBits;
  }
  else
  {
    swift_bridgeObjectRelease(v98);
    return 41;
  }
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance String.UTF16View()
{
  return String.UTF16View.debugDescription.getter(*(void *)v0, *(void *)(v0 + 8));
}

uint64_t (*String.utf16.modify(void *a1))()
{
  a1[2] = v1;
  unint64_t v3 = v1[1];
  *a1 = *v1;
  a1[1] = v3;
  swift_bridgeObjectRetain(v3);
  return String.utf16.modify;
}

BOOL String.Index._foreignIsWithin(_:)(uint64_t a1, uint64_t a2, __int16 a3)
{
  return specialized String.Index._foreignIsWithin(_:)(a3);
}

uint64_t String.Index.samePosition(in:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, unint64_t))
{
  return a4(a3, a1, a2);
}

uint64_t String.UTF16View.customMirror.getter@<X0>(unint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  swift_bridgeObjectRetain_n(a2, 2);

  return specialized Mirror.init<A, B>(_:unlabeledChildren:displayStyle:ancestorRepresentation:)(a1, a2, a1, a2, 8, 0, 0, a3);
}

uint64_t protocol witness for CustomReflectable.customMirror.getter in conformance String.UTF16View(uint64_t a1, uint64_t a2)
{
  return protocol witness for CustomReflectable.customMirror.getter in conformance String.UnicodeScalarView(a1, a2, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, void))specialized Mirror.init<A, B>(_:unlabeledChildren:displayStyle:ancestorRepresentation:));
}

uint64_t specialized String.UTF16View._utf16Length<A, B>(readPtr:endPtr:unsignedSIMDType:signedSIMDType:)(int8x8_t **a1, unint64_t a2)
{
  uint64_t v2 = *a1;
  if ((unint64_t)&(*a1)[1] >= a2) {
    return 0;
  }
  uint64_t v3 = 0;
  do
  {
    uint64_t v4 = v2 + 2;
    uint8x8_t v5 = (uint8x8_t)vcnt_s8((int8x8_t)vaddv_s8(vand_s8(vcgt_s8((int8x8_t)0xC0C0C0C0C0C0C0C0, *v2), (int8x8_t)0x8040201008040201)));
    v5.i16[0] = vaddlv_u8(v5);
    uint8x8_t v6 = (uint8x8_t)vcnt_s8((int8x8_t)vaddv_s8(vand_s8((int8x8_t)vcgt_u8((uint8x8_t)*v2, (uint8x8_t)0xEFEFEFEFEFEFEFEFLL), (int8x8_t)0x8040201008040201)));
    v6.i16[0] = vaddlv_u8(v6);
    uint64_t v3 = v3 - v5.u32[0] + v6.u32[0] + 8;
    *a1 = ++v2;
  }
  while ((unint64_t)v4 < a2);
  return v3;
}

uint64_t static Int8.+ infix(_:_:)(char a1, char a2)
{
  uint64_t result = (a1 + a2);
  if ((char)result != result) {
    __break(1u);
  }
  return result;
}

uint64_t static SIMD<>..< infix(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v80 = a1;
  uint64_t v88 = a6;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, (int **)a4, a3, (uint64_t)&protocol requirements base descriptor for SIMD, associated type descriptor for SIMD.MaskStorage);
  Swift::tuple_Unicode_Scalar_scalarLength_Int v84 = *(int ***)(swift_getAssociatedConformanceWitness(a4, a3, (uint64_t)AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for SIMD, associated conformance descriptor for SIMD.SIMD.MaskStorage: SIMD)+ 48);
  unint64_t v11 = swift_getAssociatedTypeWitness(255, v84, (uint64_t)AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for SIMDStorage, associated type descriptor for SIMDStorage.Scalar);
  unsigned int v85 = *(int ***)(*(void *)(*(void *)(swift_getAssociatedConformanceWitness(a4, a3, (uint64_t)v11, (uint64_t)&protocol requirements base descriptor for SIMD, associated conformance descriptor for SIMD.SIMD.MaskStorage.SIMDStorage.Scalar: FixedWidthInteger)+ 8)+ 24)+ 16);
  uint64_t v72 = swift_getAssociatedTypeWitness(0, v85, (uint64_t)v11, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, associated type descriptor for ExpressibleByIntegerLiteral.IntegerLiteralType);
  MEMORY[0x1F4188790](v72);
  uint64_t v71 = (char *)v66 - v12;
  uint64_t v75 = swift_checkMetadataState(0, (uint64_t)v11);
  MEMORY[0x1F4188790](v75);
  uint64_t v70 = (char *)v66 - v13;
  uint64_t v14 = *(void *)(a4 + 48);
  Swift::Int v15 = swift_getAssociatedTypeWitness(0, (int **)v14, a3, (uint64_t)&protocol requirements base descriptor for SIMDStorage, associated type descriptor for SIMDStorage.Scalar);
  uint64_t v16 = *((void *)v15 - 1);
  uint64_t v17 = MEMORY[0x1F4188790](v15);
  char v79 = (char *)v66 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = MEMORY[0x1F4188790](v17);
  unint64_t v21 = (char *)v66 - v20;
  uint64_t v22 = MEMORY[0x1F4188790](v19);
  uint64_t v24 = (char *)v66 - v23;
  uint64_t v81 = *(void *)(a3 - 8);
  uint64_t v25 = MEMORY[0x1F4188790](v22);
  uint64_t v27 = (int *)((char *)v66 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1F4188790](v25);
  uint64_t v87 = (char *)v66 - v28;
  uint64_t v89 = v16;
  uint64_t v82 = *(void *)(v16 + 16);
  uint64_t v83 = v29;
  ((void (*)(char *, uint64_t))v82)(v24, a2);
  (*(void (**)(uint64_t, uint64_t))(v14 + 48))(a3, v14);
  uint64_t v30 = (*(uint64_t (**)(uint64_t, uint64_t))(v14 + 40))(a3, v14);
  if (v30 < 0) {
    goto LABEL_16;
  }
  uint64_t v76 = AssociatedTypeWitness;
  uint64_t v86 = a5;
  unint64_t v90 = v27;
  uint64_t v91 = a3;
  uint64_t v32 = (void (*)(char *, char *, uint64_t))v82;
  uint64_t v31 = v83;
  if (v30)
  {
    uint64_t v33 = 0;
    do
    {
      uint64_t v34 = v30;
      uint64_t v35 = v31;
      v32(v21, v24, v31);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v14 + 64))(v21, v33, v91, v14);
      uint64_t v30 = v34;
      uint64_t v31 = v35;
      ++v33;
    }
    while (v34 != v33);
  }
  uint64_t v82 = v14;
  Swift::String::Index v36 = *(void (**)(char *, uint64_t))(v89 + 8);
  v89 += 8;
  uint64_t v77 = v36;
  uint64_t v78 = v21;
  uint64_t v37 = v31;
  v36(v24, v31);
  (*(void (**)(char *, int *, uint64_t))(v81 + 32))(v87, v90, v91);
  unint64_t v38 = swift_checkMetadataState(0, (uint64_t)v76);
  unint64_t v39 = v84;
  ((void (*)(uint64_t *, int **))v84[6])(v38, v84);
  unint64_t v40 = v38;
  uint64_t v41 = v39;
  unint64_t v90 = v39[5];
  uint64_t v76 = (const char *)(v39 + 5);
  uint64_t v42 = ((uint64_t (*)(uint64_t *, int **))v90)(v38, v39);
  if (v42 < 0) {
    goto LABEL_16;
  }
  uint64_t v43 = v37;
  uint64_t v44 = v82;
  if (v42)
  {
    unint64_t v45 = 0;
    unint64_t v46 = *(void (**)(void, void, void))(v82 + 56);
    v66[1] = v85 + 3;
    v66[0] = v41 + 8;
    uint64_t v69 = v42;
    uint64_t v68 = v82 + 56;
    unint64_t v74 = v40;
    unint64_t v67 = v46;
    uint64_t v73 = v86 + 16;
    unint64_t v47 = v78;
    while (1)
    {
      uint64_t v48 = v91;
      unint64_t v49 = v46;
      v46(v45, v91, v44);
      char v50 = v79;
      uint64_t v51 = v48;
      uint64_t v52 = v86;
      v49(v45, v51, v44);
      unint64_t v53 = v41;
      char v54 = (*(uint64_t (**)(char *, char *, uint64_t, uint64_t))(v52 + 16))(v47, v50, v43, v52);
      unint64_t v55 = v50;
      unint64_t v56 = v77;
      v77(v55, v43);
      v56(v47, v43);
      char v57 = v74;
      unint64_t v58 = ((uint64_t (*)(uint64_t *, int **))v90)(v74, v53);
      if ((v58 & 0x8000000000000000) != 0) {
        break;
      }
      if (v45 >= v58) {
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/SIMDVector.swift", 22, 2, 0x2CDuLL, 0);
      }
      unint64_t v59 = v72;
      uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness((uint64_t)v85, (uint64_t)v75, (uint64_t)v72, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
      if (v54)
      {
        unint64_t v61 = v71;
        uint64_t v62 = (uint64_t *)&unk_18162B0C8;
        uint64_t v63 = 257;
      }
      else
      {
        unint64_t v61 = v71;
        uint64_t v62 = &qword_18162B0B8;
        uint64_t v63 = 256;
      }
      (*(void (**)(uint64_t *, uint64_t, const char *, uint64_t))(AssociatedConformanceWitness + 8))(v62, v63, v59, AssociatedConformanceWitness);
      char v64 = v70;
      ((void (*)(char *))v85[3])(v61);
      uint64_t v41 = v84;
      ((void (*)(char *, unint64_t, uint64_t *, int **))v84[8])(v64, v45++, v57, v84);
      uint64_t v44 = v82;
      uint64_t v43 = v83;
      unint64_t v46 = v67;
      if (v69 == v45) {
        return (*(uint64_t (**)(char *, uint64_t))(v81 + 8))(v87, v91);
      }
    }
LABEL_16:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v81 + 8))(v87, v91);
}

{
  const char *AssociatedTypeWitness;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  int **v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t (*v21)(uint64_t *, uint64_t);
  uint64_t result;
  unint64_t v23;
  int *v24;
  uint64_t v25;
  void (**v26)(char *, const char *);
  char *v27;
  uint64_t v28;
  int **v29;
  void (**v30)(char *, const char *);
  uint64_t v31;
  int *v32;
  char *v33;
  const char *v34;
  char v35;
  void (*v36)(char *, const char *);
  char *v37;
  uint64_t v38;
  uint64_t *v39;
  unint64_t v40;
  const char *v41;
  uint64_t AssociatedConformanceWitness;
  char *v43;
  uint64_t *v44;
  uint64_t v45;
  char *v46;
  void v47[3];
  int *v48;
  uint64_t v49;
  char *v50;
  char *v51;
  const char *v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t *v55;
  const char *v56;
  uint64_t v57;
  char *v58;
  uint64_t (*v59)(uint64_t *, uint64_t);
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int **v65;
  int **v66;
  uint64_t v67;

  unint64_t v67 = a5;
  unint64_t v61 = a1;
  uint64_t v62 = a2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, (int **)a4, a3, (uint64_t)&protocol requirements base descriptor for SIMD, associated type descriptor for SIMD.MaskStorage);
  uint64_t v10 = *(void *)(swift_getAssociatedConformanceWitness(a4, a3, (uint64_t)AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for SIMD, associated conformance descriptor for SIMD.SIMD.MaskStorage: SIMD)+ 48);
  unint64_t v11 = swift_getAssociatedTypeWitness(255, (int **)v10, (uint64_t)AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for SIMDStorage, associated type descriptor for SIMDStorage.Scalar);
  uint64_t v65 = *(int ***)(*(void *)(*(void *)(swift_getAssociatedConformanceWitness(a4, a3, (uint64_t)v11, (uint64_t)&protocol requirements base descriptor for SIMD, associated conformance descriptor for SIMD.SIMD.MaskStorage.SIMDStorage.Scalar: FixedWidthInteger)+ 8)+ 24)+ 16);
  uint64_t v52 = swift_getAssociatedTypeWitness(0, v65, (uint64_t)v11, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, associated type descriptor for ExpressibleByIntegerLiteral.IntegerLiteralType);
  MEMORY[0x1F4188790](v52);
  uint64_t v51 = (char *)v47 - v12;
  unint64_t v55 = swift_checkMetadataState(0, (uint64_t)v11);
  MEMORY[0x1F4188790](v55);
  char v50 = (char *)v47 - v13;
  uint64_t v14 = *(int ***)(a4 + 48);
  Swift::Int v15 = v10;
  unint64_t v66 = v14;
  uint64_t v63 = a3;
  unint64_t v56 = swift_getAssociatedTypeWitness(0, v14, a3, (uint64_t)&protocol requirements base descriptor for SIMDStorage, associated type descriptor for SIMDStorage.Scalar);
  uint64_t v16 = *((void *)v56 - 1);
  uint64_t v17 = MEMORY[0x1F4188790](v56);
  unint64_t v60 = (char *)v47 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v17);
  unint64_t v58 = (char *)v47 - v19;
  uint64_t v20 = swift_checkMetadataState(0, (uint64_t)AssociatedTypeWitness);
  (*(void (**)(uint64_t *, uint64_t))(v10 + 48))(v20, v10);
  unint64_t v21 = *(uint64_t (**)(uint64_t *, uint64_t))(v10 + 40);
  char v64 = a6;
  unint64_t v59 = v21;
  char v57 = v10 + 40;
  uint64_t result = v21(v20, v10);
  if (result < 0) {
    goto LABEL_12;
  }
  if (result)
  {
    uint64_t v23 = 0;
    uint64_t v24 = v66[7];
    uint64_t v25 = v67 + 16;
    uint64_t v26 = (void (**)(char *, const char *))(v16 + 8);
    v47[1] = v65 + 3;
    v47[0] = v15 + 64;
    uint64_t v48 = v24;
    unint64_t v49 = result;
    void v47[2] = v66 + 7;
    unint64_t v53 = v15;
    char v54 = v20;
    while (1)
    {
      uint64_t v27 = v58;
      uint64_t v28 = v63;
      uint64_t v29 = v66;
      uint64_t v30 = v26;
      uint64_t v31 = v25;
      uint64_t v32 = v24;
      ((void (*)(unint64_t, uint64_t, int **))v24)(v23, v63, v66);
      uint64_t v33 = v60;
      ((void (*)(unint64_t, uint64_t, int **))v32)(v23, v28, v29);
      uint64_t v25 = v31;
      uint64_t v26 = v30;
      uint64_t v34 = v56;
      uint64_t v35 = (*(uint64_t (**)(char *, char *, const char *))(v67 + 16))(v27, v33, v56);
      Swift::String::Index v36 = *v30;
      (*v30)(v33, v34);
      uint64_t v37 = v27;
      unint64_t v38 = v53;
      unint64_t v39 = v54;
      v36(v37, v34);
      unint64_t v40 = v59(v39, v38);
      if ((v40 & 0x8000000000000000) != 0) {
        break;
      }
      if (v23 >= v40) {
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/SIMDVector.swift", 22, 2, 0x2CDuLL, 0);
      }
      uint64_t v41 = v52;
      uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness((uint64_t)v65, (uint64_t)v55, (uint64_t)v52, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
      uint64_t v43 = v51;
      if (v35)
      {
        uint64_t v44 = (uint64_t *)&unk_18162B0C8;
        unint64_t v45 = 257;
      }
      else
      {
        uint64_t v44 = &qword_18162B0B8;
        unint64_t v45 = 256;
      }
      (*(void (**)(uint64_t *, uint64_t, const char *, uint64_t))(AssociatedConformanceWitness + 8))(v44, v45, v41, AssociatedConformanceWitness);
      unint64_t v46 = v50;
      ((void (*)(char *))v65[3])(v43);
      (*(void (**)(char *, unint64_t, uint64_t *, uint64_t))(v38 + 64))(v46, v23++, v39, v38);
      uint64_t v24 = v48;
      uint64_t result = v49;
      if (v49 == v23) {
        return result;
      }
    }
LABEL_12:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
  }
  return result;
}

{
  const char *AssociatedTypeWitness;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  int *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(char *, char *, uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(char *, uint64_t);
  uint64_t v37;
  uint64_t *v38;
  int **v39;
  uint64_t *v40;
  int **v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  void (*v46)(void, void, void);
  char *v47;
  uint64_t v48;
  void (*v49)(unint64_t, uint64_t, uint64_t);
  char *v50;
  uint64_t v51;
  uint64_t v52;
  int **v53;
  char v54;
  char *v55;
  void (*v56)(char *, uint64_t);
  uint64_t *v57;
  unint64_t v58;
  const char *v59;
  uint64_t AssociatedConformanceWitness;
  char *v61;
  uint64_t *v62;
  uint64_t v63;
  char *v64;
  void v66[2];
  void (*v67)(void, void, void);
  uint64_t v68;
  uint64_t v69;
  char *v70;
  char *v71;
  const char *v72;
  uint64_t v73;
  uint64_t *v74;
  uint64_t *v75;
  const char *v76;
  void (*v77)(char *, uint64_t);
  char *v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  int **v84;
  int **v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  int *v90;
  uint64_t v91;

  uint64_t v80 = a2;
  uint64_t v88 = a6;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, (int **)a4, a3, (uint64_t)&protocol requirements base descriptor for SIMD, associated type descriptor for SIMD.MaskStorage);
  Swift::tuple_Unicode_Scalar_scalarLength_Int v84 = *(int ***)(swift_getAssociatedConformanceWitness(a4, a3, (uint64_t)AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for SIMD, associated conformance descriptor for SIMD.SIMD.MaskStorage: SIMD)+ 48);
  unint64_t v11 = swift_getAssociatedTypeWitness(255, v84, (uint64_t)AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for SIMDStorage, associated type descriptor for SIMDStorage.Scalar);
  unsigned int v85 = *(int ***)(*(void *)(*(void *)(swift_getAssociatedConformanceWitness(a4, a3, (uint64_t)v11, (uint64_t)&protocol requirements base descriptor for SIMD, associated conformance descriptor for SIMD.SIMD.MaskStorage.SIMDStorage.Scalar: FixedWidthInteger)+ 8)+ 24)+ 16);
  uint64_t v72 = swift_getAssociatedTypeWitness(0, v85, (uint64_t)v11, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, associated type descriptor for ExpressibleByIntegerLiteral.IntegerLiteralType);
  MEMORY[0x1F4188790](v72);
  uint64_t v71 = (char *)v66 - v12;
  uint64_t v75 = swift_checkMetadataState(0, (uint64_t)v11);
  MEMORY[0x1F4188790](v75);
  uint64_t v70 = (char *)v66 - v13;
  uint64_t v14 = *(void *)(a4 + 48);
  Swift::Int v15 = swift_getAssociatedTypeWitness(0, (int **)v14, a3, (uint64_t)&protocol requirements base descriptor for SIMDStorage, associated type descriptor for SIMDStorage.Scalar);
  uint64_t v16 = *((void *)v15 - 1);
  uint64_t v17 = MEMORY[0x1F4188790](v15);
  char v79 = (char *)v66 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = MEMORY[0x1F4188790](v17);
  unint64_t v21 = (char *)v66 - v20;
  uint64_t v22 = MEMORY[0x1F4188790](v19);
  uint64_t v24 = (char *)v66 - v23;
  uint64_t v81 = *(void *)(a3 - 8);
  uint64_t v25 = MEMORY[0x1F4188790](v22);
  uint64_t v27 = (int *)((char *)v66 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1F4188790](v25);
  uint64_t v87 = (char *)v66 - v28;
  uint64_t v89 = v16;
  uint64_t v82 = *(void *)(v16 + 16);
  uint64_t v83 = v29;
  ((void (*)(char *, uint64_t))v82)(v24, a1);
  (*(void (**)(uint64_t, uint64_t))(v14 + 48))(a3, v14);
  uint64_t v30 = (*(uint64_t (**)(uint64_t, uint64_t))(v14 + 40))(a3, v14);
  if (v30 < 0) {
    goto LABEL_16;
  }
  uint64_t v76 = AssociatedTypeWitness;
  uint64_t v86 = a5;
  unint64_t v90 = v27;
  uint64_t v91 = a3;
  uint64_t v32 = (void (*)(char *, char *, uint64_t))v82;
  uint64_t v31 = v83;
  if (v30)
  {
    uint64_t v33 = 0;
    do
    {
      uint64_t v34 = v30;
      uint64_t v35 = v31;
      v32(v21, v24, v31);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v14 + 64))(v21, v33, v91, v14);
      uint64_t v30 = v34;
      uint64_t v31 = v35;
      ++v33;
    }
    while (v34 != v33);
  }
  uint64_t v82 = v14;
  Swift::String::Index v36 = *(void (**)(char *, uint64_t))(v89 + 8);
  v89 += 8;
  uint64_t v77 = v36;
  uint64_t v78 = v21;
  uint64_t v37 = v31;
  v36(v24, v31);
  (*(void (**)(char *, int *, uint64_t))(v81 + 32))(v87, v90, v91);
  unint64_t v38 = swift_checkMetadataState(0, (uint64_t)v76);
  unint64_t v39 = v84;
  ((void (*)(uint64_t *, int **))v84[6])(v38, v84);
  unint64_t v40 = v38;
  uint64_t v41 = v39;
  unint64_t v90 = v39[5];
  uint64_t v76 = (const char *)(v39 + 5);
  uint64_t v42 = ((uint64_t (*)(uint64_t *, int **))v90)(v38, v39);
  if (v42 < 0) {
    goto LABEL_16;
  }
  uint64_t v43 = v37;
  uint64_t v44 = v82;
  if (v42)
  {
    unint64_t v45 = 0;
    unint64_t v46 = *(void (**)(void, void, void))(v82 + 56);
    v66[1] = v85 + 3;
    v66[0] = v41 + 8;
    uint64_t v69 = v42;
    uint64_t v68 = v82 + 56;
    unint64_t v74 = v40;
    unint64_t v67 = v46;
    uint64_t v73 = v86 + 16;
    unint64_t v47 = v78;
    while (1)
    {
      uint64_t v48 = v91;
      unint64_t v49 = v46;
      v46(v45, v91, v44);
      char v50 = v79;
      uint64_t v51 = v48;
      uint64_t v52 = v86;
      v49(v45, v51, v44);
      unint64_t v53 = v41;
      char v54 = (*(uint64_t (**)(char *, char *, uint64_t, uint64_t))(v52 + 16))(v47, v50, v43, v52);
      unint64_t v55 = v50;
      unint64_t v56 = v77;
      v77(v55, v43);
      v56(v47, v43);
      char v57 = v74;
      unint64_t v58 = ((uint64_t (*)(uint64_t *, int **))v90)(v74, v53);
      if ((v58 & 0x8000000000000000) != 0) {
        break;
      }
      if (v45 >= v58) {
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/SIMDVector.swift", 22, 2, 0x2CDuLL, 0);
      }
      unint64_t v59 = v72;
      uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness((uint64_t)v85, (uint64_t)v75, (uint64_t)v72, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
      if (v54)
      {
        unint64_t v61 = v71;
        uint64_t v62 = (uint64_t *)&unk_18162B0C8;
        uint64_t v63 = 257;
      }
      else
      {
        unint64_t v61 = v71;
        uint64_t v62 = &qword_18162B0B8;
        uint64_t v63 = 256;
      }
      (*(void (**)(uint64_t *, uint64_t, const char *, uint64_t))(AssociatedConformanceWitness + 8))(v62, v63, v59, AssociatedConformanceWitness);
      char v64 = v70;
      ((void (*)(char *))v85[3])(v61);
      uint64_t v41 = v84;
      ((void (*)(char *, unint64_t, uint64_t *, int **))v84[8])(v64, v45++, v57, v84);
      uint64_t v44 = v82;
      uint64_t v43 = v83;
      unint64_t v46 = v67;
      if (v69 == v45) {
        return (*(uint64_t (**)(char *, uint64_t))(v81 + 8))(v87, v91);
      }
    }
LABEL_16:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v81 + 8))(v87, v91);
}

uint64_t SIMD.replacing(with:where:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v96 = a5;
  uint64_t v97 = a2;
  uint64_t v87 = a1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, (int **)a4, a3, (uint64_t)&protocol requirements base descriptor for SIMD, associated type descriptor for SIMD.MaskStorage);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(a4, a3, (uint64_t)AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for SIMD, associated conformance descriptor for SIMD.SIMD.MaskStorage: SIMD);
  uint64_t v95 = *(int ***)(AssociatedConformanceWitness + 48);
  uint64_t v9 = swift_getAssociatedTypeWitness(255, v95, (uint64_t)AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for SIMDStorage, associated type descriptor for SIMDStorage.Scalar);
  uint64_t v10 = swift_getAssociatedConformanceWitness(a4, a3, (uint64_t)v9, (uint64_t)&protocol requirements base descriptor for SIMD, associated conformance descriptor for SIMD.SIMD.MaskStorage.SIMDStorage.Scalar: FixedWidthInteger);
  uint64_t v11 = *(void *)(v10 + 8);
  unint64_t v90 = *(int ***)(*(void *)(v11 + 24) + 16);
  unint64_t v74 = swift_getAssociatedTypeWitness(0, v90, (uint64_t)v9, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, associated type descriptor for ExpressibleByIntegerLiteral.IntegerLiteralType);
  MEMORY[0x1F4188790](v74);
  uint64_t v73 = (char *)&v67 - v12;
  uint64_t v13 = swift_checkMetadataState(0, (uint64_t)v9);
  uint64_t v14 = *(v13 - 1);
  uint64_t v15 = MEMORY[0x1F4188790](v13);
  uint64_t v72 = (char *)&v67 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = MEMORY[0x1F4188790](v15);
  uint64_t v86 = (char *)&v67 - v18;
  MEMORY[0x1F4188790](v17);
  uint64_t v91 = (char *)&v67 - v19;
  uint64_t v20 = swift_getAssociatedConformanceWitness(a4, a3, (uint64_t)v13, (uint64_t)&protocol requirements base descriptor for SIMD, associated conformance descriptor for SIMD.SIMD.MaskStorage.SIMDStorage.Scalar: SignedInteger);
  unint64_t v94 = AssociatedTypeWitness;
  v98[0] = AssociatedTypeWitness;
  v98[1] = AssociatedConformanceWitness;
  v98[2] = v10;
  v98[3] = v20;
  uint64_t v21 = v96;
  uint64_t v22 = type metadata accessor for SIMDMask(0, (uint64_t)v98);
  uint64_t v23 = (uint64_t)*(v22 - 1);
  MEMORY[0x1F4188790](v22);
  unint64_t v93 = (char *)&v67 - v24;
  uint64_t v25 = *(void *)(a4 + 48);
  uint64_t v26 = swift_getAssociatedTypeWitness(0, (int **)v25, a3, (uint64_t)&protocol requirements base descriptor for SIMDStorage, associated type descriptor for SIMDStorage.Scalar);
  MEMORY[0x1F4188790](v26 - 8);
  uint64_t v89 = (char *)&v67 - v27;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a3 - 8) + 16))(v21, v92, a3);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v25 + 40))(a3, v25);
  if (result < 0) {
LABEL_22:
  }
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
  uint64_t v88 = v13;
  uint64_t v29 = v95;
  if (result)
  {
    unint64_t v30 = 0;
    uint64_t v31 = *(void (**)(void, void, void))(v23 + 16);
    uint64_t v32 = v95 + 5;
    uint64_t v92 = v23 + 16;
    uint64_t v82 = v95 + 7;
    uint64_t v83 = (void (**)(char *, Class *))(v23 + 8);
    uint64_t v81 = v11 + 64;
    uint64_t v80 = v11 + 128;
    uint64_t v77 = (void (**)(char *, uint64_t))(v14 + 8);
    uint64_t v71 = v11 + 120;
    uint64_t v69 = v90 + 3;
    uint64_t v68 = (void (**)(char *, char *, uint64_t))(v14 + 32);
    uint64_t v70 = v11 + 96;
    uint64_t v79 = v25 + 56;
    uint64_t v78 = v25 + 64;
    Swift::tuple_Unicode_Scalar_scalarLength_Int v84 = v31;
    uint64_t v85 = result;
    while (1)
    {
      uint64_t v33 = v93;
      v31(v93, v97, v22);
      uint64_t v34 = v94;
      unint64_t v35 = ((uint64_t (*)(const char *, int **))v29[5])(v94, v29);
      if ((v35 & 0x8000000000000000) != 0) {
        goto LABEL_22;
      }
      if (v30 >= v35) {
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/SIMDVector.swift", 22, 2, 0x2C8uLL, 0);
      }
      Swift::String::Index v36 = v32;
      unint64_t v37 = v30;
      unint64_t v38 = *v83;
      uint64_t v75 = v22;
      v38(v33, v22);
      unint64_t v39 = v91;
      ((void (*)(unint64_t, const char *, int **))v29[7])(v30, v34, v29);
      unint64_t v40 = *(uint64_t (**)(uint64_t *, uint64_t))(v11 + 64);
      uint64_t v41 = (uint64_t)v88;
      char v42 = v40(v88, v11);
      uint64_t v76 = v36;
      if (v42) {
        break;
      }
      char v49 = v40((uint64_t *)v41, v11);
      uint64_t v50 = (*(uint64_t (**)(uint64_t, uint64_t))(v11 + 128))(v41, v11);
      if (v49)
      {
        if (v50 <= 64)
        {
          unint64_t v56 = v90;
          char v57 = v74;
          uint64_t v58 = swift_getAssociatedConformanceWitness((uint64_t)v90, v41, (uint64_t)v74, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
          unint64_t v59 = v73;
          (*(void (**)(uint64_t *, uint64_t, const char *, uint64_t))(v58 + 8))(&qword_18162B0B8, 256, v57, v58);
          unint64_t v60 = v86;
          ((void (*)(char *, uint64_t, int **))v56[3])(v59, v41, v56);
          unint64_t v61 = v91;
          LOBYTE(v57) = (*(uint64_t (**)(char *, char *, uint64_t))(*(void *)(*(void *)(v11 + 32) + 8)
                                                                           + 16))(v91, v60, v41);
          uint64_t v62 = v60;
          uint64_t v63 = *v77;
          (*v77)(v62, v41);
          char v64 = v72;
          (*v68)(v72, v61, v41);
          if ((v57 & 1) == 0) {
            uint64_t v67 = (*(uint64_t (**)(uint64_t, uint64_t))(v11 + 120))(v41, v11);
          }
          v63(v64, v41);
          uint64_t v22 = v75;
          goto LABEL_19;
        }
        v98[0] = 0;
        unint64_t v53 = *(void (**)(void *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v11 + 96);
        unint64_t v54 = lazy protocol witness table accessor for type Int and conformance Int(v50, v51, v52);
        uint64_t v48 = v86;
        v53(v98, &type metadata for Int, v54, v41, v11);
        unint64_t v39 = v91;
        (*(void (**)(char *, char *, uint64_t))(*(void *)(*(void *)(v11 + 32) + 8) + 16))(v91, v48, v41);
LABEL_12:
        unint64_t v55 = *v77;
        (*v77)(v48, v41);
        v55(v39, v41);
        uint64_t v22 = v75;
        goto LABEL_19;
      }
      if (v50 < 64)
      {
LABEL_15:
        (*(void (**)(uint64_t, uint64_t))(v11 + 120))(v41, v11);
        (*v77)(v39, v41);
        uint64_t v22 = v75;
        goto LABEL_19;
      }
      (*v77)(v39, v41);
      uint64_t v22 = v75;
LABEL_19:
      unint64_t v65 = v37 + 1;
      unint64_t v66 = v89;
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v25 + 56))(v37, a3, v25);
      (*(void (**)(char *, unint64_t, uint64_t, uint64_t))(v25 + 64))(v66, v37, a3, v25);
      unint64_t v30 = v37 + 1;
      uint64_t v31 = v84;
      uint64_t result = v85;
      uint64_t v29 = v95;
      uint64_t v32 = v76;
      if (v85 == v65) {
        return result;
      }
    }
    uint64_t v43 = (*(uint64_t (**)(uint64_t, uint64_t))(v11 + 128))(v41, v11);
    if (v43 < 64) {
      goto LABEL_15;
    }
    v98[0] = 0;
    unint64_t v46 = *(void (**)(void *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v11 + 96);
    unint64_t v47 = lazy protocol witness table accessor for type Int and conformance Int(v43, v44, v45);
    uint64_t v48 = v86;
    v46(v98, &type metadata for Int, v47, v41, v11);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(*(void *)(v11 + 32) + 8) + 16))(v39, v48, v41);
    goto LABEL_12;
  }
  return result;
}

uint64_t static SIMD<>..>= infix(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v80 = a1;
  uint64_t v88 = a6;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, (int **)a4, a3, (uint64_t)&protocol requirements base descriptor for SIMD, associated type descriptor for SIMD.MaskStorage);
  Swift::tuple_Unicode_Scalar_scalarLength_Int v84 = *(int ***)(swift_getAssociatedConformanceWitness(a4, a3, (uint64_t)AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for SIMD, associated conformance descriptor for SIMD.SIMD.MaskStorage: SIMD)+ 48);
  uint64_t v11 = swift_getAssociatedTypeWitness(255, v84, (uint64_t)AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for SIMDStorage, associated type descriptor for SIMDStorage.Scalar);
  uint64_t v85 = *(int ***)(*(void *)(*(void *)(swift_getAssociatedConformanceWitness(a4, a3, (uint64_t)v11, (uint64_t)&protocol requirements base descriptor for SIMD, associated conformance descriptor for SIMD.SIMD.MaskStorage.SIMDStorage.Scalar: FixedWidthInteger)+ 8)+ 24)+ 16);
  uint64_t v72 = swift_getAssociatedTypeWitness(0, v85, (uint64_t)v11, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, associated type descriptor for ExpressibleByIntegerLiteral.IntegerLiteralType);
  MEMORY[0x1F4188790](v72);
  uint64_t v71 = (char *)v66 - v12;
  uint64_t v75 = swift_checkMetadataState(0, (uint64_t)v11);
  MEMORY[0x1F4188790](v75);
  uint64_t v70 = (char *)v66 - v13;
  uint64_t v14 = *(void *)(a4 + 48);
  uint64_t v15 = swift_getAssociatedTypeWitness(0, (int **)v14, a3, (uint64_t)&protocol requirements base descriptor for SIMDStorage, associated type descriptor for SIMDStorage.Scalar);
  uint64_t v16 = *((void *)v15 - 1);
  uint64_t v17 = MEMORY[0x1F4188790](v15);
  uint64_t v79 = (char *)v66 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = MEMORY[0x1F4188790](v17);
  uint64_t v21 = (char *)v66 - v20;
  uint64_t v22 = MEMORY[0x1F4188790](v19);
  uint64_t v24 = (char *)v66 - v23;
  uint64_t v81 = *(void *)(a3 - 8);
  uint64_t v25 = MEMORY[0x1F4188790](v22);
  uint64_t v27 = (int *)((char *)v66 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1F4188790](v25);
  uint64_t v87 = (char *)v66 - v28;
  uint64_t v89 = v16;
  uint64_t v82 = *(void *)(v16 + 16);
  uint64_t v83 = v29;
  ((void (*)(char *, uint64_t))v82)(v24, a2);
  (*(void (**)(uint64_t, uint64_t))(v14 + 48))(a3, v14);
  uint64_t v30 = (*(uint64_t (**)(uint64_t, uint64_t))(v14 + 40))(a3, v14);
  if (v30 < 0) {
    goto LABEL_16;
  }
  uint64_t v76 = AssociatedTypeWitness;
  uint64_t v86 = a5;
  unint64_t v90 = v27;
  uint64_t v91 = a3;
  uint64_t v32 = (void (*)(char *, char *, uint64_t))v82;
  uint64_t v31 = v83;
  if (v30)
  {
    uint64_t v33 = 0;
    do
    {
      uint64_t v34 = v30;
      uint64_t v35 = v31;
      v32(v21, v24, v31);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v14 + 64))(v21, v33, v91, v14);
      uint64_t v30 = v34;
      uint64_t v31 = v35;
      ++v33;
    }
    while (v34 != v33);
  }
  uint64_t v82 = v14;
  Swift::String::Index v36 = *(void (**)(char *, uint64_t))(v89 + 8);
  v89 += 8;
  uint64_t v77 = v36;
  uint64_t v78 = v21;
  uint64_t v37 = v31;
  v36(v24, v31);
  (*(void (**)(char *, int *, uint64_t))(v81 + 32))(v87, v90, v91);
  unint64_t v38 = swift_checkMetadataState(0, (uint64_t)v76);
  unint64_t v39 = v84;
  ((void (*)(uint64_t *, int **))v84[6])(v38, v84);
  unint64_t v40 = v38;
  uint64_t v41 = v39;
  unint64_t v90 = v39[5];
  uint64_t v76 = (const char *)(v39 + 5);
  uint64_t v42 = ((uint64_t (*)(uint64_t *, int **))v90)(v38, v39);
  if (v42 < 0) {
    goto LABEL_16;
  }
  uint64_t v43 = v37;
  uint64_t v44 = v82;
  if (v42)
  {
    unint64_t v45 = 0;
    unint64_t v46 = *(void (**)(void, void, void))(v82 + 56);
    v66[1] = v85 + 3;
    v66[0] = v41 + 8;
    uint64_t v69 = v42;
    uint64_t v68 = v82 + 56;
    unint64_t v74 = v40;
    uint64_t v67 = v46;
    uint64_t v73 = v86 + 24;
    unint64_t v47 = v78;
    while (1)
    {
      uint64_t v48 = v91;
      char v49 = v46;
      v46(v45, v91, v44);
      uint64_t v50 = v79;
      uint64_t v51 = v48;
      uint64_t v52 = v86;
      v49(v45, v51, v44);
      unint64_t v53 = v41;
      char v54 = (*(uint64_t (**)(char *, char *, uint64_t, uint64_t))(v52 + 24))(v47, v50, v43, v52);
      unint64_t v55 = v50;
      unint64_t v56 = v77;
      v77(v55, v43);
      v56(v47, v43);
      char v57 = v74;
      unint64_t v58 = ((uint64_t (*)(uint64_t *, int **))v90)(v74, v53);
      if ((v58 & 0x8000000000000000) != 0) {
        break;
      }
      if (v45 >= v58) {
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/SIMDVector.swift", 22, 2, 0x2CDuLL, 0);
      }
      unint64_t v59 = v72;
      uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness((uint64_t)v85, (uint64_t)v75, (uint64_t)v72, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
      if (v54)
      {
        unint64_t v61 = v71;
        uint64_t v62 = (uint64_t *)&unk_18162B0C8;
        uint64_t v63 = 257;
      }
      else
      {
        unint64_t v61 = v71;
        uint64_t v62 = &qword_18162B0B8;
        uint64_t v63 = 256;
      }
      (*(void (**)(uint64_t *, uint64_t, const char *, uint64_t))(AssociatedConformanceWitness + 8))(v62, v63, v59, AssociatedConformanceWitness);
      char v64 = v70;
      ((void (*)(char *))v85[3])(v61);
      uint64_t v41 = v84;
      ((void (*)(char *, unint64_t, uint64_t *, int **))v84[8])(v64, v45++, v57, v84);
      uint64_t v44 = v82;
      uint64_t v43 = v83;
      unint64_t v46 = v67;
      if (v69 == v45) {
        return (*(uint64_t (**)(char *, uint64_t))(v81 + 8))(v87, v91);
      }
    }
LABEL_16:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v81 + 8))(v87, v91);
}

{
  const char *AssociatedTypeWitness;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  int **v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t (*v21)(uint64_t *, uint64_t);
  uint64_t result;
  unint64_t v23;
  int *v24;
  uint64_t v25;
  void (**v26)(char *, const char *);
  char *v27;
  uint64_t v28;
  int **v29;
  void (**v30)(char *, const char *);
  uint64_t v31;
  int *v32;
  char *v33;
  const char *v34;
  char v35;
  void (*v36)(char *, const char *);
  char *v37;
  uint64_t v38;
  uint64_t *v39;
  unint64_t v40;
  const char *v41;
  uint64_t AssociatedConformanceWitness;
  char *v43;
  uint64_t *v44;
  uint64_t v45;
  char *v46;
  void v47[3];
  int *v48;
  uint64_t v49;
  char *v50;
  char *v51;
  const char *v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t *v55;
  const char *v56;
  uint64_t v57;
  char *v58;
  uint64_t (*v59)(uint64_t *, uint64_t);
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int **v65;
  int **v66;
  uint64_t v67;

  uint64_t v67 = a5;
  unint64_t v61 = a1;
  uint64_t v62 = a2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, (int **)a4, a3, (uint64_t)&protocol requirements base descriptor for SIMD, associated type descriptor for SIMD.MaskStorage);
  uint64_t v10 = *(void *)(swift_getAssociatedConformanceWitness(a4, a3, (uint64_t)AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for SIMD, associated conformance descriptor for SIMD.SIMD.MaskStorage: SIMD)+ 48);
  uint64_t v11 = swift_getAssociatedTypeWitness(255, (int **)v10, (uint64_t)AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for SIMDStorage, associated type descriptor for SIMDStorage.Scalar);
  unint64_t v65 = *(int ***)(*(void *)(*(void *)(swift_getAssociatedConformanceWitness(a4, a3, (uint64_t)v11, (uint64_t)&protocol requirements base descriptor for SIMD, associated conformance descriptor for SIMD.SIMD.MaskStorage.SIMDStorage.Scalar: FixedWidthInteger)+ 8)+ 24)+ 16);
  uint64_t v52 = swift_getAssociatedTypeWitness(0, v65, (uint64_t)v11, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, associated type descriptor for ExpressibleByIntegerLiteral.IntegerLiteralType);
  MEMORY[0x1F4188790](v52);
  uint64_t v51 = (char *)v47 - v12;
  unint64_t v55 = swift_checkMetadataState(0, (uint64_t)v11);
  MEMORY[0x1F4188790](v55);
  uint64_t v50 = (char *)v47 - v13;
  uint64_t v14 = *(int ***)(a4 + 48);
  uint64_t v15 = v10;
  unint64_t v66 = v14;
  uint64_t v63 = a3;
  unint64_t v56 = swift_getAssociatedTypeWitness(0, v14, a3, (uint64_t)&protocol requirements base descriptor for SIMDStorage, associated type descriptor for SIMDStorage.Scalar);
  uint64_t v16 = *((void *)v56 - 1);
  uint64_t v17 = MEMORY[0x1F4188790](v56);
  unint64_t v60 = (char *)v47 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v17);
  unint64_t v58 = (char *)v47 - v19;
  uint64_t v20 = swift_checkMetadataState(0, (uint64_t)AssociatedTypeWitness);
  (*(void (**)(uint64_t *, uint64_t))(v10 + 48))(v20, v10);
  uint64_t v21 = *(uint64_t (**)(uint64_t *, uint64_t))(v10 + 40);
  char v64 = a6;
  unint64_t v59 = v21;
  char v57 = v10 + 40;
  uint64_t result = v21(v20, v10);
  if (result < 0) {
    goto LABEL_12;
  }
  if (result)
  {
    uint64_t v23 = 0;
    uint64_t v24 = v66[7];
    uint64_t v25 = v67 + 24;
    uint64_t v26 = (void (**)(char *, const char *))(v16 + 8);
    v47[1] = v65 + 3;
    v47[0] = v15 + 64;
    uint64_t v48 = v24;
    char v49 = result;
    void v47[2] = v66 + 7;
    unint64_t v53 = v15;
    char v54 = v20;
    while (1)
    {
      uint64_t v27 = v58;
      uint64_t v28 = v63;
      uint64_t v29 = v66;
      uint64_t v30 = v26;
      uint64_t v31 = v25;
      uint64_t v32 = v24;
      ((void (*)(unint64_t, uint64_t, int **))v24)(v23, v63, v66);
      uint64_t v33 = v60;
      ((void (*)(unint64_t, uint64_t, int **))v32)(v23, v28, v29);
      uint64_t v25 = v31;
      uint64_t v26 = v30;
      uint64_t v34 = v56;
      uint64_t v35 = (*(uint64_t (**)(char *, char *, const char *))(v67 + 24))(v27, v33, v56);
      Swift::String::Index v36 = *v30;
      (*v30)(v33, v34);
      uint64_t v37 = v27;
      unint64_t v38 = v53;
      unint64_t v39 = v54;
      v36(v37, v34);
      unint64_t v40 = v59(v39, v38);
      if ((v40 & 0x8000000000000000) != 0) {
        break;
      }
      if (v23 >= v40) {
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/SIMDVector.swift", 22, 2, 0x2CDuLL, 0);
      }
      uint64_t v41 = v52;
      uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness((uint64_t)v65, (uint64_t)v55, (uint64_t)v52, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
      uint64_t v43 = v51;
      if (v35)
      {
        uint64_t v44 = (uint64_t *)&unk_18162B0C8;
        unint64_t v45 = 257;
      }
      else
      {
        uint64_t v44 = &qword_18162B0B8;
        unint64_t v45 = 256;
      }
      (*(void (**)(uint64_t *, uint64_t, const char *, uint64_t))(AssociatedConformanceWitness + 8))(v44, v45, v41, AssociatedConformanceWitness);
      unint64_t v46 = v50;
      ((void (*)(char *))v65[3])(v43);
      (*(void (**)(char *, unint64_t, uint64_t *, uint64_t))(v38 + 64))(v46, v23++, v39, v38);
      uint64_t v24 = v48;
      uint64_t result = v49;
      if (v49 == v23) {
        return result;
      }
    }
LABEL_12:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
  }
  return result;
}

{
  const char *AssociatedTypeWitness;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  int *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(char *, char *, uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(char *, uint64_t);
  uint64_t v37;
  uint64_t *v38;
  int **v39;
  uint64_t *v40;
  int **v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  void (*v46)(void, void, void);
  char *v47;
  uint64_t v48;
  void (*v49)(unint64_t, uint64_t, uint64_t);
  char *v50;
  uint64_t v51;
  uint64_t v52;
  int **v53;
  char v54;
  char *v55;
  void (*v56)(char *, uint64_t);
  uint64_t *v57;
  unint64_t v58;
  const char *v59;
  uint64_t AssociatedConformanceWitness;
  char *v61;
  uint64_t *v62;
  uint64_t v63;
  char *v64;
  void v66[2];
  void (*v67)(void, void, void);
  uint64_t v68;
  uint64_t v69;
  char *v70;
  char *v71;
  const char *v72;
  uint64_t v73;
  uint64_t *v74;
  uint64_t *v75;
  const char *v76;
  void (*v77)(char *, uint64_t);
  char *v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  int **v84;
  int **v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  int *v90;
  uint64_t v91;

  uint64_t v80 = a2;
  uint64_t v88 = a6;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, (int **)a4, a3, (uint64_t)&protocol requirements base descriptor for SIMD, associated type descriptor for SIMD.MaskStorage);
  Swift::tuple_Unicode_Scalar_scalarLength_Int v84 = *(int ***)(swift_getAssociatedConformanceWitness(a4, a3, (uint64_t)AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for SIMD, associated conformance descriptor for SIMD.SIMD.MaskStorage: SIMD)+ 48);
  uint64_t v11 = swift_getAssociatedTypeWitness(255, v84, (uint64_t)AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for SIMDStorage, associated type descriptor for SIMDStorage.Scalar);
  uint64_t v85 = *(int ***)(*(void *)(*(void *)(swift_getAssociatedConformanceWitness(a4, a3, (uint64_t)v11, (uint64_t)&protocol requirements base descriptor for SIMD, associated conformance descriptor for SIMD.SIMD.MaskStorage.SIMDStorage.Scalar: FixedWidthInteger)+ 8)+ 24)+ 16);
  uint64_t v72 = swift_getAssociatedTypeWitness(0, v85, (uint64_t)v11, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, associated type descriptor for ExpressibleByIntegerLiteral.IntegerLiteralType);
  MEMORY[0x1F4188790](v72);
  uint64_t v71 = (char *)v66 - v12;
  uint64_t v75 = swift_checkMetadataState(0, (uint64_t)v11);
  MEMORY[0x1F4188790](v75);
  uint64_t v70 = (char *)v66 - v13;
  uint64_t v14 = *(void *)(a4 + 48);
  uint64_t v15 = swift_getAssociatedTypeWitness(0, (int **)v14, a3, (uint64_t)&protocol requirements base descriptor for SIMDStorage, associated type descriptor for SIMDStorage.Scalar);
  uint64_t v16 = *((void *)v15 - 1);
  uint64_t v17 = MEMORY[0x1F4188790](v15);
  uint64_t v79 = (char *)v66 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = MEMORY[0x1F4188790](v17);
  uint64_t v21 = (char *)v66 - v20;
  uint64_t v22 = MEMORY[0x1F4188790](v19);
  uint64_t v24 = (char *)v66 - v23;
  uint64_t v81 = *(void *)(a3 - 8);
  uint64_t v25 = MEMORY[0x1F4188790](v22);
  uint64_t v27 = (int *)((char *)v66 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1F4188790](v25);
  uint64_t v87 = (char *)v66 - v28;
  uint64_t v89 = v16;
  uint64_t v82 = *(void *)(v16 + 16);
  uint64_t v83 = v29;
  ((void (*)(char *, uint64_t))v82)(v24, a1);
  (*(void (**)(uint64_t, uint64_t))(v14 + 48))(a3, v14);
  uint64_t v30 = (*(uint64_t (**)(uint64_t, uint64_t))(v14 + 40))(a3, v14);
  if (v30 < 0) {
    goto LABEL_16;
  }
  uint64_t v76 = AssociatedTypeWitness;
  uint64_t v86 = a5;
  unint64_t v90 = v27;
  uint64_t v91 = a3;
  uint64_t v32 = (void (*)(char *, char *, uint64_t))v82;
  uint64_t v31 = v83;
  if (v30)
  {
    uint64_t v33 = 0;
    do
    {
      uint64_t v34 = v30;
      uint64_t v35 = v31;
      v32(v21, v24, v31);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v14 + 64))(v21, v33, v91, v14);
      uint64_t v30 = v34;
      uint64_t v31 = v35;
      ++v33;
    }
    while (v34 != v33);
  }
  uint64_t v82 = v14;
  Swift::String::Index v36 = *(void (**)(char *, uint64_t))(v89 + 8);
  v89 += 8;
  uint64_t v77 = v36;
  uint64_t v78 = v21;
  uint64_t v37 = v31;
  v36(v24, v31);
  (*(void (**)(char *, int *, uint64_t))(v81 + 32))(v87, v90, v91);
  unint64_t v38 = swift_checkMetadataState(0, (uint64_t)v76);
  unint64_t v39 = v84;
  ((void (*)(uint64_t *, int **))v84[6])(v38, v84);
  unint64_t v40 = v38;
  uint64_t v41 = v39;
  unint64_t v90 = v39[5];
  uint64_t v76 = (const char *)(v39 + 5);
  uint64_t v42 = ((uint64_t (*)(uint64_t *, int **))v90)(v38, v39);
  if (v42 < 0) {
    goto LABEL_16;
  }
  uint64_t v43 = v37;
  uint64_t v44 = v82;
  if (v42)
  {
    unint64_t v45 = 0;
    unint64_t v46 = *(void (**)(void, void, void))(v82 + 56);
    v66[1] = v85 + 3;
    v66[0] = v41 + 8;
    uint64_t v69 = v42;
    uint64_t v68 = v82 + 56;
    unint64_t v74 = v40;
    uint64_t v67 = v46;
    uint64_t v73 = v86 + 24;
    unint64_t v47 = v78;
    while (1)
    {
      uint64_t v48 = v91;
      char v49 = v46;
      v46(v45, v91, v44);
      uint64_t v50 = v79;
      uint64_t v51 = v48;
      uint64_t v52 = v86;
      v49(v45, v51, v44);
      unint64_t v53 = v41;
      char v54 = (*(uint64_t (**)(char *, char *, uint64_t, uint64_t))(v52 + 24))(v47, v50, v43, v52);
      unint64_t v55 = v50;
      unint64_t v56 = v77;
      v77(v55, v43);
      v56(v47, v43);
      char v57 = v74;
      unint64_t v58 = ((uint64_t (*)(uint64_t *, int **))v90)(v74, v53);
      if ((v58 & 0x8000000000000000) != 0) {
        break;
      }
      if (v45 >= v58) {
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/SIMDVector.swift", 22, 2, 0x2CDuLL, 0);
      }
      unint64_t v59 = v72;
      uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness((uint64_t)v85, (uint64_t)v75, (uint64_t)v72, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
      if (v54)
      {
        unint64_t v61 = v71;
        uint64_t v62 = (uint64_t *)&unk_18162B0C8;
        uint64_t v63 = 257;
      }
      else
      {
        unint64_t v61 = v71;
        uint64_t v62 = &qword_18162B0B8;
        uint64_t v63 = 256;
      }
      (*(void (**)(uint64_t *, uint64_t, const char *, uint64_t))(AssociatedConformanceWitness + 8))(v62, v63, v59, AssociatedConformanceWitness);
      char v64 = v70;
      ((void (*)(char *))v85[3])(v61);
      uint64_t v41 = v84;
      ((void (*)(char *, unint64_t, uint64_t *, int **))v84[8])(v64, v45++, v57, v84);
      uint64_t v44 = v82;
      uint64_t v43 = v83;
      unint64_t v46 = v67;
      if (v69 == v45) {
        return (*(uint64_t (**)(char *, uint64_t))(v81 + 8))(v87, v91);
      }
    }
LABEL_16:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v81 + 8))(v87, v91);
}

uint64_t static SIMD<>.&- infix(_:_:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v38 = a1;
  uint64_t v8 = *(void *)(a3 + 48);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (int **)v8, a2, (uint64_t)&protocol requirements base descriptor for SIMDStorage, associated type descriptor for SIMDStorage.Scalar);
  uint64_t v40 = *((void *)AssociatedTypeWitness - 1);
  uint64_t v10 = MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v12 = (char *)v31 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = MEMORY[0x1F4188790](v10);
  uint64_t v15 = (char *)v31 - v14;
  MEMORY[0x1F4188790](v13);
  uint64_t v17 = (char *)v31 - v16;
  (*(void (**)(uint64_t, uint64_t))(v8 + 48))(a2, v8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 40))(a2, v8);
  if (result < 0) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
  }
  uint64_t v39 = a4;
  Swift::String::Index v36 = v17;
  uint64_t v37 = a5;
  uint64_t v35 = AssociatedTypeWitness;
  if (result)
  {
    uint64_t v19 = a2;
    uint64_t v20 = v15;
    uint64_t v21 = v12;
    uint64_t v22 = 0;
    uint64_t v23 = *(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 56);
    v31[2] = v39 + 88;
    uint64_t v32 = v23;
    uint64_t v33 = v8 + 56;
    uint64_t v34 = result;
    v31[0] = v8 + 64;
    v31[1] = v40 + 8;
    uint64_t v24 = (void (**)(char *, const char *))(v40 + 8);
    do
    {
      uint64_t v40 = v22 + 1;
      uint64_t v25 = v32;
      v32(v22, v19, v8);
      v25(v22, v19, v8);
      uint64_t v26 = v19;
      uint64_t v27 = v35;
      uint64_t v28 = v36;
      (*(void (**)(char *, char *, const char *))(v39 + 88))(v36, v21, v35);
      uint64_t v29 = *v24;
      (*v24)(v21, v27);
      v29(v20, v27);
      uint64_t v30 = v28;
      uint64_t v19 = v26;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 64))(v30, v22, v26, v8);
      uint64_t result = v34;
      uint64_t v22 = v40;
    }
    while (v34 != v40);
  }
  return result;
}

Swift::Int __swiftcall _utf8ScalarLength(_:)(Swift::UInt8 a1)
{
  unsigned int v1 = __clz(~a1) - 24;
  if ((a1 & 0x80u) == 0) {
    return 1;
  }
  else {
    return v1;
  }
}

uint64_t (*String.UTF8View._guts.modify())()
{
  return EnumeratedSequence._base.modify;
}

uint64_t String.endIndex.getter(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0) {
    uint64_t v2 = a1;
  }
  uint64_t v3 = 7;
  if (((a2 >> 60) & ((a1 & 0x800000000000000) == 0)) != 0) {
    uint64_t v3 = 11;
  }
  return v3 | (v2 << 16);
}

Swift::String::Index __swiftcall String.UTF8View.index(after:)(Swift::String::Index after)
{
  unint64_t v3 = v2;
  unint64_t v4 = v1;
  uint64_t v5 = (v1 >> 59) & 1;
  if ((v2 & 0x1000000000000000) == 0) {
    LOBYTE(v5) = 1;
  }
  if ((after._rawBits & 0xC) == 4 << v5)
  {
    after._Swift::UInt64 rawBits = _StringGuts._slowEnsureMatchingEncoding(_:)(after)._rawBits;
    if ((v3 & 0x1000000000000000) == 0) {
      return (Swift::String::Index)((after._rawBits & 0xFFFFFFFFFFFF0000) + 65540);
    }
  }
  else if ((v2 & 0x1000000000000000) == 0)
  {
    return (Swift::String::Index)((after._rawBits & 0xFFFFFFFFFFFF0000) + 65540);
  }
  Swift::UInt64 v7 = HIBYTE(v3) & 0xF;
  if ((v3 & 0x2000000000000000) == 0) {
    Swift::UInt64 v7 = v4 & 0xFFFFFFFFFFFFLL;
  }
  if (v7 <= after._rawBits >> 16) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index is out of bounds", 29, 2, "Swift/StringUTF8View.swift", 26, 2, 0x90uLL, 0);
  }

  return String.UTF8View._foreignIndex(after:)(after);
}

Swift::String::Index __swiftcall String.UTF8View._foreignIndex(after:)(Swift::String::Index after)
{
  Swift::UInt64 rawBits = after._rawBits;
  if ((after._rawBits & 0xC001) == 0) {
    Swift::UInt64 rawBits = _StringGuts.scalarAlignSlow(_:)(after)._rawBits & 0xFFFFFFFFFFFFFFF2 | 1;
  }
  unint64_t v2 = rawBits & 0xFFFFFFFFFFFF0000;
  Swift::tuple_Unicode_Scalar_scalarLength_Int v3 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)((Swift::String::Index)(rawBits & 0xFFFFFFFFFFFF0000));
  unint64_t v4 = (unsigned __int16)rawBits >> 14;
  unint64_t v5 = 2;
  if (v3._0._value >= 0x10000) {
    unint64_t v5 = 3;
  }
  if (v3._0._value < 0x800) {
    unint64_t v5 = 1;
  }
  BOOL v6 = v4 >= v5;
  v7._Swift::UInt64 rawBits = v2 | ((v4 << 14) + 0x4000) | 8;
  if (v6) {
    v7._Swift::UInt64 rawBits = (rawBits + (v3.scalarLength << 16)) & 0xFFFFFFFFFFFF0000 | 9;
  }
  if (v3._0._value >= 0x80) {
    return v7;
  }
  else {
    return (Swift::String::Index)(v2 + 65545);
  }
}

Swift::String::Index __swiftcall String.UTF8View.index(before:)(Swift::String::Index before)
{
  unint64_t v3 = v2;
  unint64_t v4 = v1;
  uint64_t v5 = (v1 >> 59) & 1;
  if ((v2 & 0x1000000000000000) == 0) {
    LOBYTE(v5) = 1;
  }
  if ((before._rawBits & 0xC) != 4 << v5)
  {
    if (before._rawBits >> 14) {
      goto LABEL_5;
    }
LABEL_8:
    unint64_t v7 = 152;
    goto LABEL_9;
  }
  before._Swift::UInt64 rawBits = _StringGuts._slowEnsureMatchingEncoding(_:)(before)._rawBits;
  if (!(before._rawBits >> 14)) {
    goto LABEL_8;
  }
LABEL_5:
  if ((v3 & 0x1000000000000000) == 0) {
    return (Swift::String::Index)((before._rawBits & 0xFFFFFFFFFFFF0000) - 65532);
  }
  Swift::UInt64 v8 = HIBYTE(v3) & 0xF;
  if ((v3 & 0x2000000000000000) == 0) {
    Swift::UInt64 v8 = v4 & 0xFFFFFFFFFFFFLL;
  }
  if (v8 < before._rawBits >> 16)
  {
    unint64_t v7 = 157;
LABEL_9:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index is out of bounds", 29, 2, "Swift/StringUTF8View.swift", 26, 2, v7, 0);
  }

  return String.UTF8View._foreignIndex(before:)(before);
}

Swift::String::Index __swiftcall String.UTF8View._foreignIndex(before:)(Swift::String::Index before)
{
  Swift::UInt64 rawBits = before._rawBits;
  if ((before._rawBits & 0xC001) == 0) {
    Swift::UInt64 rawBits = _StringGuts.scalarAlignSlow(_:)(before)._rawBits & 0xFFFFFFFFFFFFFFF2 | 1;
  }
  unint64_t v2 = rawBits & 0xFFFFFFFFFFFF0000;
  if ((unsigned __int16)rawBits >> 14)
  {
    unint64_t v3 = (((unint64_t)((unsigned __int16)rawBits >> 14) << 14) - 0x4000) | v2;
  }
  else
  {
    Swift::tuple_Unicode_Scalar_scalarLength_Int v4 = _StringGuts.foreignErrorCorrectedScalar(endingAt:)((Swift::String::Index)v2);
    uint64_t v5 = 0x4000;
    uint64_t v6 = 49152;
    if (v4._0._value < 0x10000) {
      uint64_t v6 = 0x8000;
    }
    if (v4._0._value >= 0x800) {
      uint64_t v5 = v6;
    }
    if (v4._0._value <= 0x7F) {
      uint64_t v5 = 0;
    }
    unint64_t v3 = v5 | (rawBits - (v4.scalarLength << 16)) & 0xFFFFFFFFFFFF0000;
  }
  return (Swift::String::Index)(v3 | 8);
}

Swift::String::Index_optional __swiftcall String.UTF8View.index(_:offsetBy:limitedBy:)(Swift::String::Index _, Swift::Int offsetBy, Swift::String::Index limitedBy)
{
  unint64_t v5 = v4;
  unint64_t v6 = v3;
  uint64_t v9 = (v3 >> 59) & 1;
  if ((v4 & 0x1000000000000000) == 0) {
    LOBYTE(v9) = 1;
  }
  if ((_._rawBits & 0xC) != 4 << v9)
  {
    if ((v4 & 0x1000000000000000) == 0) {
      goto LABEL_5;
    }
LABEL_19:
    Swift::String::Index_optional v13 = String.UTF8View._foreignIndex(_:offsetBy:limitedBy:)(_, offsetBy, limitedBy);
    v13.is_nil &= 1u;
    return v13;
  }
  _._Swift::UInt64 rawBits = _StringGuts._slowEnsureMatchingEncoding(_:)(_)._rawBits;
  if ((v5 & 0x1000000000000000) != 0) {
    goto LABEL_19;
  }
LABEL_5:
  Swift::UInt64 v10 = _._rawBits >> 16;
  int64_t v11 = (_._rawBits >> 16) + offsetBy;
  if (__OFADD__(_._rawBits >> 16, offsetBy))
  {
    __break(1u);
    goto LABEL_21;
  }
  Swift::UInt64 v12 = limitedBy._rawBits >> 16;
  if (offsetBy < 0)
  {
    if (v10 < v12 || v11 >= (uint64_t)v12) {
      goto LABEL_13;
    }
  }
  else if (v12 < v10 || (uint64_t)v12 >= v11)
  {
LABEL_13:
    if ((v11 & 0x8000000000000000) == 0)
    {
      unint64_t v14 = HIBYTE(v5) & 0xF;
      if ((v5 & 0x2000000000000000) == 0) {
        unint64_t v14 = v6 & 0xFFFFFFFFFFFFLL;
      }
      if (v14 >= v11)
      {
        v13.Swift::Bool is_nil = 0;
        v13.value._Swift::UInt64 rawBits = (v11 << 16) | 4;
        return v13;
      }
    }
LABEL_21:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index is out of bounds", 29, 2, "Swift/StringUTF8View.swift", 26, 2, 0xC0uLL, 0);
  }
  v13.value._Swift::UInt64 rawBits = 0;
  v13.Swift::Bool is_nil = 1;
  return v13;
}

Swift::String::Index_optional __swiftcall String.UTF8View._foreignIndex(_:offsetBy:limitedBy:)(Swift::String::Index _, Swift::Int offsetBy, Swift::String::Index limitedBy)
{
  Swift::UInt64 v5 = specialized BidirectionalCollection._index(_:offsetBy:limitedBy:)(_._rawBits, offsetBy, limitedBy._rawBits, v3, v4);
  Swift::Bool v7 = v6 & 1;
  result.value._Swift::UInt64 rawBits = v5;
  result.Swift::Bool is_nil = v7;
  return result;
}

Swift::Int __swiftcall String.UTF8View._foreignDistance(from:to:)(Swift::String::Index from, Swift::String::Index to)
{
  unint64_t v4 = v3;
  unint64_t v5 = v2;
  v7._Swift::UInt64 rawBits = from._rawBits;
  if ((from._rawBits & 0xC001) == 0) {
    goto LABEL_18;
  }
  while (1)
  {
    if ((to._rawBits & 0xC001) == 0) {
      to._Swift::UInt64 rawBits = to._rawBits & 0xC | _StringGuts.scalarAlignSlow(_:)(to)._rawBits & 0xFFFFFFFFFFFFFFF3 | 1;
    }
    if (to._rawBits >> 16 < v7._rawBits >> 16) {
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
    }
    if (to._rawBits >> 16 == v7._rawBits >> 16)
    {
      uint64_t v8 = 0;
    }
    else
    {
      uint64_t v15 = 0;
      uint64_t v16 = 0;
      uint64_t v14 = 0;
      if (!objc_msgSend((id)(v4 & 0xFFFFFFFFFFFFFFFLL), sel_getBytes_maxLength_usedLength_encoding_options_range_remainingRange_, 0, 0, &v14, 4, 0, v7._rawBits >> 16, (to._rawBits >> 16) - (v7._rawBits >> 16), &v15)|| v16)
      {
        return specialized BidirectionalCollection._distance(from:to:)(v7._rawBits, to._rawBits, v5, v4);
      }
      uint64_t v8 = v14;
    }
    uint64_t v9 = LOWORD(v7._rawBits) >> 14;
    BOOL v10 = __OFSUB__(v8, v9);
    uint64_t v11 = v8 - v9;
    if (!v10) {
      break;
    }
    __break(1u);
LABEL_18:
    v7._Swift::UInt64 rawBits = v7._rawBits & 0xC | _StringGuts.scalarAlignSlow(_:)(v7)._rawBits & 0xFFFFFFFFFFFFFFF3 | 1;
  }
  uint64_t v12 = LOWORD(to._rawBits) >> 14;
  Swift::Int result = v11 + v12;
  if (!__OFADD__(v11, v12)) {
    return result;
  }
  __break(1u);
  return specialized BidirectionalCollection._distance(from:to:)(v7._rawBits, to._rawBits, v5, v4);
}

uint64_t String.UTF8View.subscript.getter(Swift::UInt64 rawBits, unint64_t a2, unint64_t a3)
{
  uint64_t v5 = (a2 >> 59) & 1;
  if ((a3 & 0x1000000000000000) == 0) {
    LOBYTE(v5) = 1;
  }
  if ((rawBits & 0xC) == 4 << v5) {
    Swift::UInt64 rawBits = _StringGuts._slowEnsureMatchingEncoding(_:)((Swift::String::Index)rawBits)._rawBits;
  }
  Swift::UInt64 v6 = rawBits >> 16;
  unint64_t v7 = HIBYTE(a3) & 0xF;
  if ((a3 & 0x2000000000000000) == 0) {
    unint64_t v7 = a2 & 0xFFFFFFFFFFFFLL;
  }
  if (v6 >= v7) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index is out of bounds", 29, 2, "Swift/StringUTF8View.swift", 26, 2, 0xE4uLL, 0);
  }
  if ((a3 & 0x1000000000000000) != 0)
  {
    return String.UTF8View._foreignSubscript(position:)((Swift::String::Index)rawBits);
  }
  else if ((a3 & 0x2000000000000000) != 0)
  {
    v10[0] = a2;
    v10[1] = a3 & 0xFFFFFFFFFFFFFFLL;
    return *((unsigned __int8 *)v10 + v6);
  }
  else
  {
    if ((a2 & 0x1000000000000000) != 0) {
      uint64_t v8 = (unsigned __int8 *)((a3 & 0xFFFFFFFFFFFFFFFLL) + 32);
    }
    else {
      uint64_t v8 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(a2, a3);
    }
    return v8[v6];
  }
}

Swift::UInt8 __swiftcall String.UTF8View._foreignSubscript(position:)(Swift::String::Index position)
{
  Swift::UInt64 rawBits = position._rawBits;
  if ((position._rawBits & 0xC001) == 0) {
    Swift::UInt64 rawBits = _StringGuts.scalarAlignSlow(_:)(position)._rawBits & 0xFFFFFFFFFFFFFFF2 | 1;
  }
  uint64_t v2 = *(_OWORD *)&_StringGuts.foreignErrorCorrectedScalar(startingAt:)((Swift::String::Index)(rawBits & 0xFFFFFFFFFFFF0000));
  if (v2 >= 0x80)
  {
    int v7 = (v2 & 0x3F) << 8;
    if (v2 > 0x7FF)
    {
      unsigned int v9 = (v7 | (v2 >> 6) & 0x3F) << 8;
      unsigned int v10 = (((v9 | (v2 >> 12) & 0x3F) << 8) | (v2 >> 18)) - 2122219023;
      unsigned int v11 = (v9 | (v2 >> 12)) + 8487393;
      if (WORD1(v2)) {
        unsigned int v3 = v10;
      }
      else {
        unsigned int v3 = v11;
      }
    }
    else
    {
      unsigned int v3 = (v7 | (v2 >> 6)) + 33217;
    }
  }
  else
  {
    unsigned int v3 = v2 + 1;
  }
  unsigned int v15 = v3;
  MEMORY[0x1F4188790](v2);
  uint64_t v14 = &v15;
  uint64_t v4 = specialized Sequence.contains(where:)((unsigned int (*)(int *))partial apply for specialized closure #1 in Sequence<>.contains(_:), (uint64_t)v13, v3 | ((unint64_t)v3 << 32), 0);
  if ((v4 & 1) == 0)
  {
    LODWORD(v14) = 0;
    unint64_t v8 = 130;
    goto LABEL_14;
  }
  unsigned int v15 = v3;
  MEMORY[0x1F4188790](v4);
  uint64_t v14 = &v15;
  if ((specialized Sequence.contains(where:)((unsigned int (*)(int *))closure #1 in Sequence<>.contains(_:)specialized partial apply, (uint64_t)v13, v3 | ((unint64_t)v3 << 32), 0) & 1) == 0)
  {
    LODWORD(v14) = 0;
    unint64_t v8 = 131;
    goto LABEL_14;
  }
  unint64_t v5 = (unsigned __int16)rawBits >> 14;
  if (v5 > 4 - (__clz(v3) >> 3))
  {
    LODWORD(v14) = 0;
    unint64_t v8 = 143;
LABEL_14:
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/ValidUTF8Buffer.swift", 27, 2, v8, (int)v14);
  }
  return (v3 >> (4 * v5) >> (4 * v5)) - 1;
}

Swift::UInt64 protocol witness for BidirectionalCollection.index(before:) in conformance String.UTF8View@<X0>(Swift::UInt64 *a1@<X0>, Swift::UInt64 *a2@<X8>)
{
  Swift::UInt64 rawBits = *a1;
  uint64_t v6 = *v2;
  unint64_t v5 = v2[1];
  uint64_t v7 = ((unint64_t)*v2 >> 59) & 1;
  if ((v5 & 0x1000000000000000) == 0) {
    LOBYTE(v7) = 1;
  }
  if ((rawBits & 0xC) != 4 << v7)
  {
    if (rawBits >> 14) {
      goto LABEL_5;
    }
LABEL_9:
    unint64_t v9 = 152;
    goto LABEL_10;
  }
  Swift::UInt64 rawBits = _StringGuts._slowEnsureMatchingEncoding(_:)((Swift::String::Index)rawBits)._rawBits;
  if (!(rawBits >> 14)) {
    goto LABEL_9;
  }
LABEL_5:
  if ((v5 & 0x1000000000000000) != 0)
  {
    unint64_t v10 = HIBYTE(v5) & 0xF;
    if ((v5 & 0x2000000000000000) == 0) {
      unint64_t v10 = v6 & 0xFFFFFFFFFFFFLL;
    }
    if (v10 >= rawBits >> 16)
    {
      Swift::UInt64 result = String.UTF8View._foreignIndex(before:)((Swift::String::Index)rawBits)._rawBits;
      goto LABEL_7;
    }
    unint64_t v9 = 157;
LABEL_10:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index is out of bounds", 29, 2, "Swift/StringUTF8View.swift", 26, 2, v9, 0);
  }
  Swift::UInt64 result = (rawBits & 0xFFFFFFFFFFFF0000) - 65532;
LABEL_7:
  *a2 = result;
  return result;
}

Swift::UInt64 protocol witness for BidirectionalCollection.formIndex(before:) in conformance String.UTF8View(Swift::UInt64 *a1)
{
  uint64_t v4 = *v1;
  unint64_t v3 = v1[1];
  Swift::UInt64 rawBits = *a1;
  uint64_t v6 = ((unint64_t)*v1 >> 59) & 1;
  if ((v3 & 0x1000000000000000) == 0) {
    LOBYTE(v6) = 1;
  }
  if ((rawBits & 0xC) != 4 << v6)
  {
    if (rawBits >> 14) {
      goto LABEL_5;
    }
LABEL_9:
    unint64_t v8 = 152;
    goto LABEL_10;
  }
  Swift::UInt64 rawBits = _StringGuts._slowEnsureMatchingEncoding(_:)((Swift::String::Index)rawBits)._rawBits;
  if (!(rawBits >> 14)) {
    goto LABEL_9;
  }
LABEL_5:
  if ((v3 & 0x1000000000000000) != 0)
  {
    unint64_t v9 = HIBYTE(v3) & 0xF;
    if ((v3 & 0x2000000000000000) == 0) {
      unint64_t v9 = v4 & 0xFFFFFFFFFFFFLL;
    }
    if (v9 >= rawBits >> 16)
    {
      Swift::UInt64 result = String.UTF8View._foreignIndex(before:)((Swift::String::Index)rawBits)._rawBits;
      goto LABEL_7;
    }
    unint64_t v8 = 157;
LABEL_10:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index is out of bounds", 29, 2, "Swift/StringUTF8View.swift", 26, 2, v8, 0);
  }
  Swift::UInt64 result = (rawBits & 0xFFFFFFFFFFFF0000) - 65532;
LABEL_7:
  *a1 = result;
  return result;
}

Swift::UInt64 protocol witness for BidirectionalCollection.index(_:offsetBy:limitedBy:) in conformance String.UTF8View@<X0>(Swift::Int offsetBy@<X1>, Swift::UInt64 *a2@<X0>, Swift::UInt64 *a3@<X2>, uint64_t a4@<X8>)
{
  Swift::UInt64 rawBits = *a2;
  v8._Swift::UInt64 rawBits = *a3;
  uint64_t v10 = *v4;
  unint64_t v9 = v4[1];
  uint64_t v11 = ((unint64_t)*v4 >> 59) & 1;
  if ((v9 & 0x1000000000000000) == 0) {
    LOBYTE(v11) = 1;
  }
  if ((rawBits & 0xC) != 4 << v11)
  {
    if ((v9 & 0x1000000000000000) == 0) {
      goto LABEL_5;
    }
LABEL_20:
    Swift::String::Index_optional v15 = String.UTF8View._foreignIndex(_:offsetBy:limitedBy:)((Swift::String::Index)rawBits, offsetBy, v8);
    Swift::Bool is_nil = v15.is_nil;
    goto LABEL_18;
  }
  Swift::UInt64 rawBits = _StringGuts._slowEnsureMatchingEncoding(_:)((Swift::String::Index)rawBits)._rawBits;
  if ((v9 & 0x1000000000000000) != 0) {
    goto LABEL_20;
  }
LABEL_5:
  Swift::UInt64 v12 = rawBits >> 16;
  int64_t v13 = (rawBits >> 16) + offsetBy;
  if (__OFADD__(rawBits >> 16, offsetBy))
  {
    __break(1u);
    goto LABEL_22;
  }
  Swift::UInt64 v14 = v8._rawBits >> 16;
  if (offsetBy < 0)
  {
    if (v12 < v14 || v13 >= (uint64_t)v14) {
      goto LABEL_13;
    }
  }
  else if (v14 < v12 || (uint64_t)v14 >= v13)
  {
LABEL_13:
    if ((v13 & 0x8000000000000000) == 0)
    {
      unint64_t v17 = HIBYTE(v9) & 0xF;
      if ((v9 & 0x2000000000000000) == 0) {
        unint64_t v17 = v10 & 0xFFFFFFFFFFFFLL;
      }
      if (v17 >= v13)
      {
        Swift::Bool is_nil = 0;
        v15.value._Swift::UInt64 rawBits = (v13 << 16) | 4;
        goto LABEL_18;
      }
    }
LABEL_22:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index is out of bounds", 29, 2, "Swift/StringUTF8View.swift", 26, 2, 0xC0uLL, 0);
  }
  v15.value._Swift::UInt64 rawBits = 0;
  Swift::Bool is_nil = 1;
LABEL_18:
  *(void *)a4 = v15.value._rawBits;
  *(unsigned char *)(a4 + 8) = is_nil;
  return v15.value._rawBits;
}

void protocol witness for Collection.endIndex.getter in conformance String(uint64_t *a1@<X8>)
{
  unint64_t v2 = v1[1];
  uint64_t v3 = HIBYTE(v2) & 0xF;
  if ((v2 & 0x2000000000000000) == 0) {
    uint64_t v3 = *v1;
  }
  uint64_t v4 = 7;
  if (((v2 >> 60) & ((*v1 & 0x800000000000000) == 0)) != 0) {
    uint64_t v4 = 11;
  }
  *a1 = v4 | (v3 << 16);
}

uint64_t (*protocol witness for Collection.subscript.read in conformance String.UTF8View(Swift::UInt8 *a1, Swift::UInt64 *a2))()
{
  Swift::UInt64 rawBits = *a2;
  unint64_t v6 = *v2;
  unint64_t v5 = v2[1];
  uint64_t v7 = (v6 >> 59) & 1;
  if ((v5 & 0x1000000000000000) == 0) {
    LOBYTE(v7) = 1;
  }
  if ((*a2 & 0xC) == 4 << v7) {
    Swift::UInt64 rawBits = _StringGuts._slowEnsureMatchingEncoding(_:)((Swift::String::Index)rawBits)._rawBits;
  }
  Swift::UInt64 v8 = rawBits >> 16;
  unint64_t v9 = HIBYTE(v5) & 0xF;
  if ((v5 & 0x2000000000000000) == 0) {
    unint64_t v9 = v6 & 0xFFFFFFFFFFFFLL;
  }
  if (v8 >= v9) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index is out of bounds", 29, 2, "Swift/StringUTF8View.swift", 26, 2, 0xE4uLL, 0);
  }
  if ((v5 & 0x1000000000000000) != 0)
  {
    Swift::UInt8 v10 = String.UTF8View._foreignSubscript(position:)((Swift::String::Index)rawBits);
  }
  else if ((v5 & 0x2000000000000000) != 0)
  {
    v12[0] = v6;
    v12[1] = v5 & 0xFFFFFFFFFFFFFFLL;
    Swift::UInt8 v10 = *((unsigned char *)v12 + v8);
  }
  else if ((v6 & 0x1000000000000000) != 0)
  {
    Swift::UInt8 v10 = *(unsigned char *)((v5 & 0xFFFFFFFFFFFFFFFLL) + 0x20 + (rawBits >> 16));
  }
  else
  {
    Swift::UInt8 v10 = *((unsigned char *)_StringObject.sharedUTF8.getter(v6, v5) + v8);
  }
  *a1 = v10;
  return EnumeratedSequence._base.modify;
}

Swift::Int protocol witness for Collection.count.getter in conformance String.UTF8View()
{
  unint64_t v1 = v0[1];
  if ((v1 & 0x1000000000000000) != 0) {
    return String.UTF8View._foreignCount()();
  }
  if ((v1 & 0x2000000000000000) != 0) {
    return HIBYTE(v1) & 0xF;
  }
  return *v0 & 0xFFFFFFFFFFFFLL;
}

Swift::UInt64 protocol witness for BidirectionalCollection.index(_:offsetBy:) in conformance String.UTF8View@<X0>(Swift::Int offsetBy@<X1>, Swift::UInt64 *a2@<X0>, Swift::UInt64 *a3@<X8>)
{
  Swift::UInt64 rawBits = *a2;
  uint64_t v8 = *v3;
  unint64_t v7 = v3[1];
  uint64_t v9 = ((unint64_t)*v3 >> 59) & 1;
  if ((v7 & 0x1000000000000000) == 0) {
    LOBYTE(v9) = 1;
  }
  if ((rawBits & 0xC) != 4 << v9)
  {
    if ((v7 & 0x1000000000000000) == 0) {
      goto LABEL_5;
    }
LABEL_13:
    Swift::UInt64 result = String.UTF8View._foreignIndex(_:offsetBy:)((Swift::String::Index)rawBits, offsetBy)._rawBits;
    goto LABEL_11;
  }
  Swift::UInt64 rawBits = _StringGuts._slowEnsureMatchingEncoding(_:)((Swift::String::Index)rawBits)._rawBits;
  if ((v7 & 0x1000000000000000) != 0) {
    goto LABEL_13;
  }
LABEL_5:
  unint64_t v10 = offsetBy + (rawBits >> 16);
  if (__OFADD__(offsetBy, rawBits >> 16))
  {
    __break(1u);
    goto LABEL_15;
  }
  if ((v10 & 0x8000000000000000) != 0) {
    goto LABEL_15;
  }
  unint64_t v11 = HIBYTE(v7) & 0xF;
  if ((v7 & 0x2000000000000000) == 0) {
    unint64_t v11 = v8 & 0xFFFFFFFFFFFFLL;
  }
  if (v11 < v10) {
LABEL_15:
  }
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index is out of bounds", 29, 2, "Swift/StringUTF8View.swift", 26, 2, 0xA7uLL, 0);
  Swift::UInt64 result = (v10 << 16) | 4;
LABEL_11:
  *a3 = result;
  return result;
}

Swift::Int protocol witness for BidirectionalCollection.distance(from:to:) in conformance String.UTF8View(Swift::String::Index *a1, Swift::UInt64 *a2)
{
  Swift::UInt64 rawBits = a1->_rawBits;
  Swift::UInt64 v4 = *a2;
  unint64_t v5 = *v2;
  unint64_t v6 = v2[1];
  uint64_t v7 = (v5 >> 59) & 1;
  if ((v6 & 0x1000000000000000) == 0) {
    LOBYTE(v7) = 1;
  }
  uint64_t v8 = 4 << v7;
  if ((a1->_rawBits & 0xC) == 4 << v7) {
    Swift::UInt64 rawBits = _StringGuts._slowEnsureMatchingEncoding(_:)((Swift::String::Index)a1->_rawBits)._rawBits;
  }
  if ((v4 & 0xC) == v8)
  {
    Swift::UInt64 v4 = _StringGuts._slowEnsureMatchingEncoding(_:)((Swift::String::Index)v4)._rawBits;
    if ((v6 & 0x1000000000000000) == 0) {
      return (v4 >> 16) - (rawBits >> 16);
    }
  }
  else if ((v6 & 0x1000000000000000) == 0)
  {
    return (v4 >> 16) - (rawBits >> 16);
  }
  unint64_t v10 = HIBYTE(v6) & 0xF;
  if ((v6 & 0x2000000000000000) == 0) {
    unint64_t v10 = v5 & 0xFFFFFFFFFFFFLL;
  }
  if (v10 < rawBits >> 16 || v10 < v4 >> 16) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index is out of bounds", 29, 2, "Swift/StringUTF8View.swift", 26, 2, 0xCFuLL, 0);
  }

  return String.UTF8View._foreignDistance(from:to:)((Swift::String::Index)rawBits, (Swift::String::Index)v4);
}

Swift::UInt64 protocol witness for Collection.index(after:) in conformance String.UTF8View@<X0>(Swift::UInt64 *a1@<X0>, Swift::UInt64 *a2@<X8>)
{
  Swift::UInt64 rawBits = *a1;
  uint64_t v6 = *v2;
  unint64_t v5 = v2[1];
  uint64_t v7 = ((unint64_t)*v2 >> 59) & 1;
  if ((v5 & 0x1000000000000000) == 0) {
    LOBYTE(v7) = 1;
  }
  if ((rawBits & 0xC) == 4 << v7)
  {
    Swift::UInt64 rawBits = _StringGuts._slowEnsureMatchingEncoding(_:)((Swift::String::Index)rawBits)._rawBits;
    if ((v5 & 0x1000000000000000) == 0) {
      goto LABEL_5;
    }
  }
  else if ((v5 & 0x1000000000000000) == 0)
  {
LABEL_5:
    Swift::UInt64 result = (rawBits & 0xFFFFFFFFFFFF0000) + 65540;
    goto LABEL_6;
  }
  unint64_t v9 = HIBYTE(v5) & 0xF;
  if ((v5 & 0x2000000000000000) == 0) {
    unint64_t v9 = v6 & 0xFFFFFFFFFFFFLL;
  }
  if (v9 <= rawBits >> 16) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index is out of bounds", 29, 2, "Swift/StringUTF8View.swift", 26, 2, 0x90uLL, 0);
  }
  Swift::UInt64 result = String.UTF8View._foreignIndex(after:)((Swift::String::Index)rawBits)._rawBits;
LABEL_6:
  *a2 = result;
  return result;
}

Swift::UInt64 protocol witness for Collection.formIndex(after:) in conformance String.UTF8View(Swift::UInt64 *a1)
{
  uint64_t v4 = *v1;
  unint64_t v3 = v1[1];
  Swift::UInt64 rawBits = *a1;
  uint64_t v6 = ((unint64_t)*v1 >> 59) & 1;
  if ((v3 & 0x1000000000000000) == 0) {
    LOBYTE(v6) = 1;
  }
  if ((rawBits & 0xC) == 4 << v6)
  {
    Swift::UInt64 rawBits = _StringGuts._slowEnsureMatchingEncoding(_:)((Swift::String::Index)rawBits)._rawBits;
    if ((v3 & 0x1000000000000000) == 0) {
      goto LABEL_5;
    }
  }
  else if ((v3 & 0x1000000000000000) == 0)
  {
LABEL_5:
    Swift::UInt64 result = (rawBits & 0xFFFFFFFFFFFF0000) + 65540;
    goto LABEL_6;
  }
  unint64_t v8 = HIBYTE(v3) & 0xF;
  if ((v3 & 0x2000000000000000) == 0) {
    unint64_t v8 = v4 & 0xFFFFFFFFFFFFLL;
  }
  if (v8 <= rawBits >> 16) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index is out of bounds", 29, 2, "Swift/StringUTF8View.swift", 26, 2, 0x90uLL, 0);
  }
  Swift::UInt64 result = String.UTF8View._foreignIndex(after:)((Swift::String::Index)rawBits)._rawBits;
LABEL_6:
  *a1 = result;
  return result;
}

void protocol witness for Sequence.makeIterator() in conformance String.UTF8View(void *a1@<X8>)
{
  uint64_t v2 = v1[1];
  *a1 = *v1;
  a1[1] = v2;
  a1[2] = 15;
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance String.UTF8View(uint64_t a1, uint64_t a2)
{
  return protocol witness for Sequence._copyToContiguousArray() in conformance String(a1, a2, (uint64_t (*)(void, uint64_t))specialized _copyCollectionToContiguousArray<A>(_:));
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance String(uint64_t a1, uint64_t a2, uint64_t (*a3)(void, uint64_t))
{
  uint64_t v4 = v3[1];
  uint64_t v5 = a3(*v3, v4);
  swift_bridgeObjectRelease(v4);
  return v5;
}

uint64_t protocol witness for Sequence._copyContents(initializing:) in conformance String.UTF8View(void *a1, char *__dst, uint64_t a3)
{
  if (!__dst) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Attempt to copy string contents into nil buffer pointer", 55, 2, "Swift/StringUTF8View.swift", 26, 2, 0x1AAuLL, 0);
  }
  unint64_t v5 = v3[1];
  uint64_t v6 = _StringGuts.copyUTF8(into:)(__dst, a3, *v3, v5);
  if (v7) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Insufficient space allocated to copy string contents", 52, 2, "Swift/StringUTF8View.swift", 26, 2, 0x1AEuLL, 0);
  }
  uint64_t v8 = v6;
  swift_bridgeObjectRelease(v5);
  *a1 = 0;
  a1[1] = 0xE000000000000000;
  a1[2] = 15;
  return v8;
}

uint64_t String.UTF8View._copyContents(initializing:)(char *a1, uint64_t a2, unint64_t a3, unint64_t a4)
{
  if (!a1) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Attempt to copy string contents into nil buffer pointer", 55, 2, "Swift/StringUTF8View.swift", 26, 2, 0x1AAuLL, 0);
  }
  _StringGuts.copyUTF8(into:)(a1, a2, a3, a4);
  if (v4) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Insufficient space allocated to copy string contents", 52, 2, "Swift/StringUTF8View.swift", 26, 2, 0x1AEuLL, 0);
  }
  return 0;
}

uint64_t protocol witness for Sequence.withContiguousStorageIfAvailable<A>(_:) in conformance String.UTF8View@<X0>(uint64_t (*a1)(void *, uint64_t)@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  return String.UTF8View.withContiguousStorageIfAvailable<A>(_:)(a1, *(void *)v3, *(void *)(v3 + 8), a2, a3);
}

unint64_t specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)(uint64_t a1, unint64_t a2, uint64_t a3)
{
  if ((a2 & 0x1000000000000000) != 0)
  {
    unint64_t result = 0;
    char v163 = 0;
    goto LABEL_262;
  }
  if ((a2 & 0x2000000000000000) == 0)
  {
    if ((a1 & 0x1000000000000000) != 0)
    {
      char v7 = (unsigned __int8 *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
      uint64_t v8 = a1 & 0xFFFFFFFFFFFFLL;
      if ((a1 & 0xFFFFFFFFFFFFLL) != 0)
      {
LABEL_5:
        int v9 = *v7;
        if (v9 != 43)
        {
          if (v9 != 45)
          {
            unint64_t v96 = 0;
            uint64_t v97 = 0;
            unsigned __int8 v98 = a3 + 48;
            unsigned __int8 v99 = a3 + 55;
            unsigned __int8 v100 = a3 + 87;
            if (a3 > 10)
            {
              unsigned __int8 v98 = 58;
            }
            else
            {
              unsigned __int8 v100 = 97;
              unsigned __int8 v99 = 65;
            }
            unint64_t v101 = abs64(a3);
            unint64_t v102 = -(v4 + ((a3 ^ (unint64_t)(a3 >> 63)) < a3 >> 63));
            while (1)
            {
              unsigned int v103 = *v7;
              if (v103 < 0x30 || v103 >= v98)
              {
                if (v103 < 0x41 || v103 >= v99)
                {
                  unint64_t result = 0;
                  char v10 = 1;
                  if (v103 < 0x61 || v103 >= v100) {
                    goto LABEL_261;
                  }
                  char v104 = -87;
                }
                else
                {
                  char v104 = -55;
                }
              }
              else
              {
                char v104 = -48;
              }
              unsigned long long v105 = __PAIR128__(v97 ^ (unint64_t)(v97 >> 63), v96 ^ (v97 >> 63))
                   - __PAIR128__(v97 >> 63, v97 >> 63);
              BOOL v106 = !((__PAIR128__(v97 ^ (unint64_t)(v97 >> 63), v96 ^ (v97 >> 63))
                      - __PAIR128__(v97 >> 63, v97 >> 63)) >> 64)
                  || v102 == 0;
              BOOL v107 = v106 && (*((unint64_t *)&v105 + 1) * (unsigned __int128)v101) >> 64 == 0;
              BOOL v108 = v107 && (v102 * (unsigned __int128)(unint64_t)v105) >> 64 == 0;
              BOOL v109 = !v108;
              unint64_t v110 = (__PAIR128__(v102, v101) * v105) >> 64;
              char v111 = __CFADD__(((unint64_t)v105 * (unsigned __int128)v101) >> 64, v102 * v105 + *((void *)&v105 + 1) * v101)|| v109;
              unint64_t v112 = v105 * v101;
              if ((v97 ^ (a3 >> 63)) < 0)
              {
                if (v111) {
                  goto LABEL_260;
                }
                BOOL v39 = v112 == 0;
                unint64_t v112 = -(uint64_t)v112;
                unint64_t v110 = -(uint64_t)(v110 + !v39);
                LOBYTE(v113) = v112 != 0;
              }
              else
              {
                if (v111) {
                  goto LABEL_260;
                }
                unint64_t v113 = v110 >> 63;
              }
              unint64_t result = 0;
              BOOL v39 = __CFADD__(v112, (v103 + v104));
              uint64_t v97 = (__PAIR128__(v110, v112) + (v103 + v104)) >> 64;
              unint64_t v96 = v112 + (v103 + v104);
              BOOL v114 = __OFADD__(v39, v110);
              char v10 = 1;
              if ((v113 & 1) != 0 || v114) {
                goto LABEL_261;
              }
              ++v7;
              if (!--v8) {
                goto LABEL_258;
              }
            }
          }
          char v10 = 1;
          uint64_t v11 = specialized Collection.subscript.getter(1, (uint64_t)v7, v8);
          uint64_t v15 = specialized UnsafeBufferPointer.init(rebasing:)(v11, v12, v13, v14);
          if (v16)
          {
            uint64_t v18 = (unsigned __int8 *)v15;
            unsigned __int8 v19 = a3 + 48;
            unsigned __int8 v20 = a3 + 55;
            unsigned __int8 v21 = a3 + 87;
            if (a3 > 10)
            {
              unsigned __int8 v19 = 58;
            }
            else
            {
              unsigned __int8 v21 = 97;
              unsigned __int8 v20 = 65;
            }
            if (v15)
            {
              uint64_t v22 = v16;
              unint64_t v23 = 0;
              uint64_t v24 = 0;
              unint64_t v25 = abs64(a3);
              unint64_t v26 = -(v17 + ((a3 ^ (unint64_t)(a3 >> 63)) < a3 >> 63));
              while (1)
              {
                unsigned int v27 = *v18;
                if (v27 < 0x30 || v27 >= v19)
                {
                  if (v27 < 0x41 || v27 >= v20)
                  {
                    unint64_t result = 0;
                    char v10 = 1;
                    if (v27 < 0x61 || v27 >= v21) {
                      goto LABEL_261;
                    }
                    char v28 = -87;
                  }
                  else
                  {
                    char v28 = -55;
                  }
                }
                else
                {
                  char v28 = -48;
                }
                unsigned long long v30 = __PAIR128__(v24 ^ (unint64_t)(v24 >> 63), v23 ^ (v24 >> 63))
                    - __PAIR128__(v24 >> 63, v24 >> 63);
                BOOL v31 = !((__PAIR128__(v24 ^ (unint64_t)(v24 >> 63), v23 ^ (v24 >> 63))
                       - __PAIR128__(v24 >> 63, v24 >> 63)) >> 64)
                   || v26 == 0;
                BOOL v32 = v31 && (*((unint64_t *)&v30 + 1) * (unsigned __int128)v25) >> 64 == 0;
                BOOL v33 = v32 && (v26 * (unsigned __int128)(unint64_t)v30) >> 64 == 0;
                BOOL v34 = !v33;
                unint64_t v35 = (__PAIR128__(v26, v25) * v30) >> 64;
                char v36 = __CFADD__(((unint64_t)v30 * (unsigned __int128)v25) >> 64, v26 * v30 + *((void *)&v30 + 1) * v25)|| v34;
                unint64_t v37 = v30 * v25;
                if ((v24 ^ (a3 >> 63)) < 0)
                {
                  if (v36) {
                    goto LABEL_260;
                  }
                  BOOL v39 = v37 == 0;
                  unint64_t v37 = -(uint64_t)v37;
                  unint64_t v35 = -(uint64_t)(v35 + !v39);
                  LOBYTE(v38) = v37 != 0;
                }
                else
                {
                  if (v36) {
                    goto LABEL_260;
                  }
                  unint64_t v38 = v35 >> 63;
                }
                unint64_t result = 0;
                BOOL v39 = v37 >= (v27 + v28);
                uint64_t v24 = (__PAIR128__(v35, v37) - (v27 + v28)) >> 64;
                unint64_t v23 = v37 - (v27 + v28);
                BOOL v40 = __OFSUB__(v35, !v39);
                char v10 = 1;
                if ((v38 & 1) != 0 || v40) {
                  goto LABEL_261;
                }
                ++v18;
                if (!--v22) {
                  goto LABEL_217;
                }
              }
            }
LABEL_218:
            unint64_t result = 0;
            char v10 = 0;
            goto LABEL_261;
          }
          goto LABEL_266;
        }
        char v10 = 1;
        uint64_t v69 = specialized Collection.subscript.getter(1, (uint64_t)v7, v8);
        uint64_t v73 = specialized UnsafeBufferPointer.init(rebasing:)(v69, v70, v71, v72);
        if (v74)
        {
          uint64_t v76 = (unsigned __int8 *)v73;
          unsigned __int8 v77 = a3 + 48;
          unsigned __int8 v78 = a3 + 55;
          unsigned __int8 v79 = a3 + 87;
          if (a3 > 10)
          {
            unsigned __int8 v77 = 58;
          }
          else
          {
            unsigned __int8 v79 = 97;
            unsigned __int8 v78 = 65;
          }
          if (v73)
          {
            uint64_t v80 = v74;
            unint64_t v23 = 0;
            uint64_t v81 = 0;
            unint64_t v82 = abs64(a3);
            unint64_t v83 = -(v75 + ((a3 ^ (unint64_t)(a3 >> 63)) < a3 >> 63));
            while (1)
            {
              unsigned int v84 = *v76;
              if (v84 < 0x30 || v84 >= v77)
              {
                if (v84 < 0x41 || v84 >= v78)
                {
                  unint64_t result = 0;
                  char v10 = 1;
                  if (v84 < 0x61 || v84 >= v79) {
                    goto LABEL_261;
                  }
                  char v85 = -87;
                }
                else
                {
                  char v85 = -55;
                }
              }
              else
              {
                char v85 = -48;
              }
              unsigned long long v86 = __PAIR128__(v81 ^ (unint64_t)(v81 >> 63), v23 ^ (v81 >> 63))
                  - __PAIR128__(v81 >> 63, v81 >> 63);
              BOOL v87 = !((__PAIR128__(v81 ^ (unint64_t)(v81 >> 63), v23 ^ (v81 >> 63))
                     - __PAIR128__(v81 >> 63, v81 >> 63)) >> 64)
                 || v83 == 0;
              BOOL v88 = v87 && (*((unint64_t *)&v86 + 1) * (unsigned __int128)v82) >> 64 == 0;
              BOOL v89 = v88 && (v83 * (unsigned __int128)(unint64_t)v86) >> 64 == 0;
              BOOL v90 = !v89;
              unint64_t v91 = (__PAIR128__(v83, v82) * v86) >> 64;
              char v92 = __CFADD__(((unint64_t)v86 * (unsigned __int128)v82) >> 64, v83 * v86 + *((void *)&v86 + 1) * v82)|| v90;
              unint64_t v93 = v86 * v82;
              if ((v81 ^ (a3 >> 63)) < 0)
              {
                if (v92) {
                  goto LABEL_260;
                }
                BOOL v39 = v93 == 0;
                unint64_t v93 = -(uint64_t)v93;
                unint64_t v91 = -(uint64_t)(v91 + !v39);
                LOBYTE(v94) = v93 != 0;
              }
              else
              {
                if (v92) {
                  goto LABEL_260;
                }
                unint64_t v94 = v91 >> 63;
              }
              unint64_t result = 0;
              BOOL v39 = __CFADD__(v93, (v84 + v85));
              uint64_t v81 = (__PAIR128__(v91, v93) + (v84 + v85)) >> 64;
              unint64_t v23 = v93 + (v84 + v85);
              BOOL v95 = __OFADD__(v39, v91);
              char v10 = 1;
              if ((v94 & 1) != 0 || v95) {
                goto LABEL_261;
              }
              ++v76;
              if (!--v80) {
                goto LABEL_217;
              }
            }
          }
          goto LABEL_218;
        }
LABEL_267:
        unint64_t result = 0;
        goto LABEL_261;
      }
    }
    else
    {
      char v7 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(a1, a2);
      uint64_t v8 = v161;
      if (v161 > 0) {
        goto LABEL_5;
      }
    }
LABEL_265:
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x6F6uLL, 0);
  }
  uint64_t v41 = HIBYTE(a2) & 0xF;
  v162[0] = a1;
  v162[1] = a2 & 0xFFFFFFFFFFFFFFLL;
  if (!v41) {
    goto LABEL_265;
  }
  if (a1 == 43)
  {
    char v10 = 1;
    uint64_t v115 = specialized Collection.subscript.getter(1, (uint64_t)v162, v41);
    uint64_t v119 = specialized UnsafeBufferPointer.init(rebasing:)(v115, v116, v117, v118);
    if (v120)
    {
      unint64_t v122 = (unsigned __int8 *)v119;
      unsigned __int8 v123 = a3 + 48;
      unsigned __int8 v124 = a3 + 55;
      unsigned __int8 v125 = a3 + 87;
      if (a3 > 10)
      {
        unsigned __int8 v123 = 58;
      }
      else
      {
        unsigned __int8 v125 = 97;
        unsigned __int8 v124 = 65;
      }
      if (v119)
      {
        uint64_t v126 = v120;
        unint64_t v23 = 0;
        uint64_t v127 = 0;
        unint64_t v128 = abs64(a3);
        unint64_t v129 = -(v121 + ((a3 ^ (unint64_t)(a3 >> 63)) < a3 >> 63));
        while (1)
        {
          unsigned int v130 = *v122;
          if (v130 < 0x30 || v130 >= v123)
          {
            if (v130 < 0x41 || v130 >= v124)
            {
              unint64_t result = 0;
              char v10 = 1;
              if (v130 < 0x61 || v130 >= v125) {
                goto LABEL_261;
              }
              char v131 = -87;
            }
            else
            {
              char v131 = -55;
            }
          }
          else
          {
            char v131 = -48;
          }
          unsigned long long v132 = __PAIR128__(v127 ^ (unint64_t)(v127 >> 63), v23 ^ (v127 >> 63))
               - __PAIR128__(v127 >> 63, v127 >> 63);
          if ((__PAIR128__(v127 ^ (unint64_t)(v127 >> 63), v23 ^ (v127 >> 63))
              - __PAIR128__(v127 >> 63, v127 >> 63)) >> 64)
            BOOL v133 = v129 == 0;
          else {
            BOOL v133 = 1;
          }
          char v136 = !v133
              || (*((unint64_t *)&v132 + 1) * (unsigned __int128)v128) >> 64 != 0
              || (v129 * (unsigned __int128)(unint64_t)v132) >> 64 != 0;
          unint64_t v137 = (__PAIR128__(v129, v128) * v132) >> 64;
          if (__CFADD__(((unint64_t)v132 * (unsigned __int128)v128) >> 64, v129 * v132 + *((void *)&v132 + 1) * v128))
          {
            char v138 = 1;
          }
          else
          {
            char v138 = v136;
          }
          unint64_t v139 = v132 * v128;
          if ((v127 ^ (a3 >> 63)) < 0)
          {
            if (v138)
            {
LABEL_260:
              unint64_t result = 0;
              char v10 = 1;
              goto LABEL_261;
            }
            BOOL v39 = v139 == 0;
            unint64_t v139 = -(uint64_t)v139;
            unint64_t v137 = -(uint64_t)(v137 + !v39);
            LOBYTE(v14_assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0, 0xE000000000000000, "Swift/StringRangeReplaceableCollection.swift", 44, 2, 0x168uLL, 0) = v139 != 0;
          }
          else
          {
            if (v138) {
              goto LABEL_260;
            }
            unint64_t v140 = v137 >> 63;
          }
          unint64_t result = 0;
          BOOL v39 = __CFADD__(v139, (v130 + v131));
          uint64_t v127 = (__PAIR128__(v137, v139) + (v130 + v131)) >> 64;
          unint64_t v23 = v139 + (v130 + v131);
          BOOL v141 = __OFADD__(v39, v137);
          char v10 = 1;
          if ((v140 & 1) != 0 || v141) {
            goto LABEL_261;
          }
          ++v122;
          if (!--v126)
          {
LABEL_217:
            char v10 = 0;
            unint64_t result = v23;
            goto LABEL_261;
          }
        }
      }
      goto LABEL_218;
    }
    goto LABEL_267;
  }
  if (a1 != 45)
  {
    unint64_t v96 = 0;
    uint64_t v142 = 0;
    unsigned __int8 v143 = a3 + 48;
    unsigned __int8 v144 = a3 + 55;
    unsigned __int8 v145 = a3 + 87;
    if (a3 > 10)
    {
      unsigned __int8 v143 = 58;
    }
    else
    {
      unsigned __int8 v145 = 97;
      unsigned __int8 v144 = 65;
    }
    unint64_t v146 = abs64(a3);
    unint64_t v147 = -(v3 + ((a3 ^ (unint64_t)(a3 >> 63)) < a3 >> 63));
    uint64_t v148 = (unsigned __int8 *)v162;
    while (1)
    {
      unsigned int v149 = *v148;
      if (v149 < 0x30 || v149 >= v143)
      {
        if (v149 < 0x41 || v149 >= v144)
        {
          unint64_t result = 0;
          char v10 = 1;
          if (v149 < 0x61 || v149 >= v145) {
            goto LABEL_261;
          }
          char v150 = -87;
        }
        else
        {
          char v150 = -55;
        }
      }
      else
      {
        char v150 = -48;
      }
      unsigned long long v151 = __PAIR128__(v142 ^ (unint64_t)(v142 >> 63), v96 ^ (v142 >> 63))
           - __PAIR128__(v142 >> 63, v142 >> 63);
      BOOL v152 = !((__PAIR128__(v142 ^ (unint64_t)(v142 >> 63), v96 ^ (v142 >> 63))
              - __PAIR128__(v142 >> 63, v142 >> 63)) >> 64)
          || v147 == 0;
      BOOL v153 = v152 && (*((unint64_t *)&v151 + 1) * (unsigned __int128)v146) >> 64 == 0;
      BOOL v154 = v153 && (v147 * (unsigned __int128)(unint64_t)v151) >> 64 == 0;
      BOOL v155 = !v154;
      unint64_t v156 = (__PAIR128__(v147, v146) * v151) >> 64;
      char v157 = __CFADD__(((unint64_t)v151 * (unsigned __int128)v146) >> 64, v147 * v151 + *((void *)&v151 + 1) * v146)|| v155;
      unint64_t v158 = v151 * v146;
      if ((v142 ^ (a3 >> 63)) < 0)
      {
        if (v157) {
          goto LABEL_260;
        }
        BOOL v39 = v158 == 0;
        unint64_t v158 = -(uint64_t)v158;
        unint64_t v156 = -(uint64_t)(v156 + !v39);
        LOBYTE(v159) = v158 != 0;
      }
      else
      {
        if (v157) {
          goto LABEL_260;
        }
        unint64_t v159 = v156 >> 63;
      }
      unint64_t result = 0;
      BOOL v39 = __CFADD__(v158, (v149 + v150));
      uint64_t v142 = (__PAIR128__(v156, v158) + (v149 + v150)) >> 64;
      unint64_t v96 = v158 + (v149 + v150);
      BOOL v160 = __OFADD__(v39, v156);
      char v10 = 1;
      if ((v159 & 1) != 0 || v160) {
        goto LABEL_261;
      }
      ++v148;
      if (!--v41)
      {
LABEL_258:
        char v10 = 0;
        unint64_t result = v96;
        goto LABEL_261;
      }
    }
  }
  char v10 = 1;
  uint64_t v42 = specialized Collection.subscript.getter(1, (uint64_t)v162, v41);
  uint64_t v46 = specialized UnsafeBufferPointer.init(rebasing:)(v42, v43, v44, v45);
  if (v47)
  {
    char v49 = (unsigned __int8 *)v46;
    unsigned __int8 v50 = a3 + 48;
    unsigned __int8 v51 = a3 + 55;
    unsigned __int8 v52 = a3 + 87;
    if (a3 > 10)
    {
      unsigned __int8 v50 = 58;
    }
    else
    {
      unsigned __int8 v52 = 97;
      unsigned __int8 v51 = 65;
    }
    if (v46)
    {
      uint64_t v53 = v47;
      unint64_t v23 = 0;
      uint64_t v54 = 0;
      unint64_t v55 = abs64(a3);
      unint64_t v56 = -(v48 + ((a3 ^ (unint64_t)(a3 >> 63)) < a3 >> 63));
      while (1)
      {
        unsigned int v57 = *v49;
        if (v57 < 0x30 || v57 >= v50)
        {
          if (v57 < 0x41 || v57 >= v51)
          {
            unint64_t result = 0;
            char v10 = 1;
            if (v57 < 0x61 || v57 >= v52) {
              goto LABEL_261;
            }
            char v58 = -87;
          }
          else
          {
            char v58 = -55;
          }
        }
        else
        {
          char v58 = -48;
        }
        unsigned long long v59 = __PAIR128__(v54 ^ (unint64_t)(v54 >> 63), v23 ^ (v54 >> 63)) - __PAIR128__(v54 >> 63, v54 >> 63);
        BOOL v60 = !((__PAIR128__(v54 ^ (unint64_t)(v54 >> 63), v23 ^ (v54 >> 63)) - __PAIR128__(v54 >> 63, v54 >> 63)) >> 64)
           || v56 == 0;
        BOOL v61 = v60 && (*((unint64_t *)&v59 + 1) * (unsigned __int128)v55) >> 64 == 0;
        BOOL v62 = v61 && (v56 * (unsigned __int128)(unint64_t)v59) >> 64 == 0;
        BOOL v63 = !v62;
        unint64_t v64 = (__PAIR128__(v56, v55) * v59) >> 64;
        char v65 = __CFADD__(((unint64_t)v59 * (unsigned __int128)v55) >> 64, v56 * v59 + *((void *)&v59 + 1) * v55)
           || v63;
        unint64_t v66 = v59 * v55;
        if ((v54 ^ (a3 >> 63)) < 0)
        {
          if (v65) {
            goto LABEL_260;
          }
          BOOL v39 = v66 == 0;
          unint64_t v66 = -(uint64_t)v66;
          unint64_t v64 = -(uint64_t)(v64 + !v39);
          LOBYTE(v67) = v66 != 0;
        }
        else
        {
          if (v65) {
            goto LABEL_260;
          }
          unint64_t v67 = v64 >> 63;
        }
        unint64_t result = 0;
        BOOL v39 = v66 >= (v57 + v58);
        uint64_t v54 = (__PAIR128__(v64, v66) - (v57 + v58)) >> 64;
        unint64_t v23 = v66 - (v57 + v58);
        BOOL v68 = __OFSUB__(v64, !v39);
        char v10 = 1;
        if ((v67 & 1) != 0 || v68) {
          goto LABEL_261;
        }
        ++v49;
        if (!--v53) {
          goto LABEL_217;
        }
      }
    }
    goto LABEL_218;
  }
LABEL_266:
  unint64_t result = 0;
LABEL_261:
  char v163 = v10;
LABEL_262:
  LOBYTE(v162[0]) = (a2 & 0x1000000000000000) != 0;
  return result;
}

{
  unsigned __int8 *v5;
  uint64_t v6;
  int v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 *v15;
  unsigned __int8 v16;
  unsigned __int8 v17;
  unsigned __int8 v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unsigned int v23;
  char v24;
  unint64_t result;
  unsigned __int8 v26;
  BOOL v27;
  char v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  unint64_t v34;
  unint64_t v35;
  BOOL v36;
  BOOL v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unsigned __int8 *v45;
  unsigned __int8 v46;
  unsigned __int8 v47;
  unsigned __int8 v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unsigned int v52;
  char v53;
  unsigned __int8 v54;
  BOOL v55;
  char v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  BOOL v63;
  BOOL v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unsigned __int8 *v71;
  unsigned __int8 v72;
  unsigned __int8 v73;
  unsigned __int8 v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  unsigned int v78;
  char v79;
  unsigned __int8 v80;
  BOOL v81;
  char v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  BOOL v89;
  BOOL v90;
  uint64_t v91;
  unint64_t v92;
  unsigned __int8 v93;
  unsigned __int8 v94;
  unsigned __int8 v95;
  uint64_t v96;
  unsigned int v97;
  char v98;
  unsigned __int8 v99;
  BOOL v100;
  char v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  BOOL v108;
  BOOL v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unsigned __int8 *v116;
  unsigned __int8 v117;
  unsigned __int8 v118;
  unsigned __int8 v119;
  uint64_t v120;
  unint64_t v121;
  uint64_t v122;
  unsigned int v123;
  char v124;
  unsigned __int8 v125;
  BOOL v126;
  char v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  BOOL v134;
  BOOL v135;
  uint64_t v136;
  unint64_t v137;
  unsigned __int8 v138;
  unsigned __int8 v139;
  unsigned __int8 v140;
  uint64_t v141;
  unsigned __int8 *v142;
  unsigned int v143;
  char v144;
  unsigned __int8 v145;
  BOOL v146;
  char v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  BOOL v154;
  BOOL v155;
  uint64_t v156;
  void v157[2];
  char v158;

  if ((a2 & 0x1000000000000000) != 0)
  {
    unint64_t result = 0;
    unint64_t v158 = 0;
    goto LABEL_230;
  }
  if ((a2 & 0x2000000000000000) == 0)
  {
    if ((a1 & 0x1000000000000000) != 0)
    {
      unint64_t v5 = (unsigned __int8 *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
      uint64_t v6 = a1 & 0xFFFFFFFFFFFFLL;
      if ((a1 & 0xFFFFFFFFFFFFLL) != 0) {
        goto LABEL_5;
      }
    }
    else
    {
      unint64_t v5 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(a1, a2);
      uint64_t v6 = v156;
      if (v156 > 0)
      {
LABEL_5:
        char v7 = *v5;
        if (v7 != 43)
        {
          if (v7 != 45)
          {
            unint64_t v91 = 0;
            char v92 = 0;
            unint64_t v93 = a3 + 48;
            unint64_t v94 = a3 + 55;
            BOOL v95 = a3 + 87;
            if (a3 > 10)
            {
              unint64_t v93 = 58;
            }
            else
            {
              BOOL v95 = 97;
              unint64_t v94 = 65;
            }
            unint64_t v96 = a3 >> 63;
            while (1)
            {
              uint64_t v97 = *v5;
              if (v97 < 0x30 || v97 >= v93)
              {
                if (v97 < 0x41 || v97 >= v94)
                {
                  unint64_t result = 0;
                  uint64_t v8 = 1;
                  if (v97 < 0x61 || v97 >= v95) {
                    goto LABEL_229;
                  }
                  unsigned __int8 v98 = -87;
                }
                else
                {
                  unsigned __int8 v98 = -55;
                }
              }
              else
              {
                unsigned __int8 v98 = -48;
              }
              unint64_t result = 0;
              unsigned __int8 v99 = v97 + v98;
              if (v92) {
                unsigned __int8 v100 = a3 >= 0;
              }
              else {
                unsigned __int8 v100 = 1;
              }
              unsigned int v103 = !v100
                  || (v92 * (unsigned __int128)(unint64_t)a3) >> 64 != 0
                  || ((unint64_t)v96 * (unsigned __int128)(unint64_t)v91) >> 64 != 0;
              char v104 = v96 * v91 + v92 * a3;
              unsigned long long v105 = ((unint64_t)v91 * (unsigned __int128)(unint64_t)a3) >> 64;
              BOOL v33 = __CFADD__(v105, v104);
              BOOL v106 = v105 + v104;
              if (v33) {
                unsigned int v103 = 1;
              }
              BOOL v107 = v91 * a3;
              BOOL v33 = __CFADD__(v107, v99);
              unint64_t v91 = v107 + v99;
              BOOL v108 = v33;
              BOOL v33 = __CFADD__(v33, v106);
              char v92 = v108 + v106;
              BOOL v109 = v33;
              uint64_t v8 = 1;
              if ((v103 & 1) != 0 || v109) {
                goto LABEL_229;
              }
              ++v5;
              if (!--v6)
              {
                uint64_t v8 = 0;
                unint64_t result = v91;
                goto LABEL_229;
              }
            }
          }
          uint64_t v8 = 1;
          int v9 = specialized Collection.subscript.getter(1, (uint64_t)v5, v6);
          uint64_t v13 = specialized UnsafeBufferPointer.init(rebasing:)(v9, v10, v11, v12);
          if (v14)
          {
            uint64_t v15 = (unsigned __int8 *)v13;
            uint64_t v16 = a3 + 55;
            uint64_t v17 = a3 + 87;
            if (a3 > 10)
            {
              uint64_t v18 = 58;
            }
            else
            {
              uint64_t v17 = 97;
              uint64_t v16 = 65;
              uint64_t v18 = a3 + 48;
            }
            if (v13)
            {
              unsigned __int8 v19 = v14;
              unsigned __int8 v20 = 0;
              unsigned __int8 v21 = 0;
              uint64_t v22 = a3 >> 63;
              while (1)
              {
                unint64_t v23 = *v15;
                if (v23 < 0x30 || v23 >= v18)
                {
                  if (v23 < 0x41 || v23 >= v16)
                  {
                    unint64_t result = 0;
                    uint64_t v8 = 1;
                    if (v23 < 0x61 || v23 >= v17) {
                      goto LABEL_229;
                    }
                    uint64_t v24 = -87;
                  }
                  else
                  {
                    uint64_t v24 = -55;
                  }
                }
                else
                {
                  uint64_t v24 = -48;
                }
                unint64_t result = 0;
                unint64_t v26 = v23 + v24;
                if (v21) {
                  unsigned int v27 = a3 >= 0;
                }
                else {
                  unsigned int v27 = 1;
                }
                unsigned long long v30 = !v27
                   || (v21 * (unsigned __int128)(unint64_t)a3) >> 64 != 0
                   || ((unint64_t)v22 * (unsigned __int128)v20) >> 64 != 0;
                BOOL v31 = v22 * v20 + v21 * a3;
                BOOL v32 = (v20 * (unsigned __int128)(unint64_t)a3) >> 64;
                BOOL v33 = __CFADD__(v32, v31);
                BOOL v34 = v32 + v31;
                if (v33) {
                  unsigned long long v30 = 1;
                }
                unint64_t v35 = v20 * a3;
                BOOL v33 = v35 >= v26;
                unsigned __int8 v20 = v35 - v26;
                char v36 = v33;
                BOOL v33 = v34 >= !v33;
                unsigned __int8 v21 = v34 - !v36;
                unint64_t v37 = !v33;
                uint64_t v8 = 1;
                if ((v30 & 1) != 0 || v37) {
                  goto LABEL_229;
                }
                ++v15;
                if (!--v19) {
                  goto LABEL_192;
                }
              }
            }
            goto LABEL_193;
          }
LABEL_234:
          unint64_t result = 0;
          goto LABEL_229;
        }
        uint64_t v8 = 1;
        char v65 = specialized Collection.subscript.getter(1, (uint64_t)v5, v6);
        uint64_t v69 = specialized UnsafeBufferPointer.init(rebasing:)(v65, v66, v67, v68);
        if (v70)
        {
          uint64_t v71 = (unsigned __int8 *)v69;
          uint64_t v72 = a3 + 55;
          uint64_t v73 = a3 + 87;
          if (a3 > 10)
          {
            uint64_t v74 = 58;
          }
          else
          {
            uint64_t v73 = 97;
            uint64_t v72 = 65;
            uint64_t v74 = a3 + 48;
          }
          if (v69)
          {
            uint64_t v75 = v70;
            unsigned __int8 v20 = 0;
            uint64_t v76 = 0;
            unsigned __int8 v77 = a3 >> 63;
            while (1)
            {
              unsigned __int8 v78 = *v71;
              if (v78 < 0x30 || v78 >= v74)
              {
                if (v78 < 0x41 || v78 >= v72)
                {
                  unint64_t result = 0;
                  uint64_t v8 = 1;
                  if (v78 < 0x61 || v78 >= v73) {
                    goto LABEL_229;
                  }
                  unsigned __int8 v79 = -87;
                }
                else
                {
                  unsigned __int8 v79 = -55;
                }
              }
              else
              {
                unsigned __int8 v79 = -48;
              }
              unint64_t result = 0;
              uint64_t v80 = v78 + v79;
              if (v76) {
                uint64_t v81 = a3 >= 0;
              }
              else {
                uint64_t v81 = 1;
              }
              unsigned int v84 = !v81
                 || (v76 * (unsigned __int128)(unint64_t)a3) >> 64 != 0
                 || ((unint64_t)v77 * (unsigned __int128)v20) >> 64 != 0;
              char v85 = v77 * v20 + v76 * a3;
              unsigned long long v86 = (v20 * (unsigned __int128)(unint64_t)a3) >> 64;
              BOOL v33 = __CFADD__(v86, v85);
              BOOL v87 = v86 + v85;
              if (v33) {
                unsigned int v84 = 1;
              }
              BOOL v88 = v20 * a3;
              BOOL v33 = __CFADD__(v88, v80);
              unsigned __int8 v20 = v88 + v80;
              BOOL v89 = v33;
              BOOL v33 = __CFADD__(v33, v87);
              uint64_t v76 = v89 + v87;
              BOOL v90 = v33;
              uint64_t v8 = 1;
              if ((v84 & 1) != 0 || v90) {
                goto LABEL_229;
              }
              ++v71;
              if (!--v75) {
                goto LABEL_192;
              }
            }
          }
          goto LABEL_193;
        }
LABEL_235:
        unint64_t result = 0;
        goto LABEL_229;
      }
    }
LABEL_233:
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x6F6uLL, 0);
  }
  unint64_t v38 = HIBYTE(a2) & 0xF;
  v157[0] = a1;
  v157[1] = a2 & 0xFFFFFFFFFFFFFFLL;
  if (!v38) {
    goto LABEL_233;
  }
  if (a1 == 43)
  {
    uint64_t v8 = 1;
    unint64_t v110 = specialized Collection.subscript.getter(1, (uint64_t)v157, v38);
    BOOL v114 = specialized UnsafeBufferPointer.init(rebasing:)(v110, v111, v112, v113);
    if (!v115) {
      goto LABEL_235;
    }
    uint64_t v116 = (unsigned __int8 *)v114;
    uint64_t v117 = a3 + 55;
    uint64_t v118 = a3 + 87;
    if (a3 > 10)
    {
      uint64_t v119 = 58;
    }
    else
    {
      uint64_t v118 = 97;
      uint64_t v117 = 65;
      uint64_t v119 = a3 + 48;
    }
    if (v114)
    {
      uint64_t v120 = v115;
      unsigned __int8 v20 = 0;
      uint64_t v121 = 0;
      unint64_t v122 = a3 >> 63;
      while (1)
      {
        unsigned __int8 v123 = *v116;
        if (v123 < 0x30 || v123 >= v119)
        {
          if (v123 < 0x41 || v123 >= v117)
          {
            unint64_t result = 0;
            uint64_t v8 = 1;
            if (v123 < 0x61 || v123 >= v118) {
              goto LABEL_229;
            }
            unsigned __int8 v124 = -87;
          }
          else
          {
            unsigned __int8 v124 = -55;
          }
        }
        else
        {
          unsigned __int8 v124 = -48;
        }
        unint64_t result = 0;
        unsigned __int8 v125 = v123 + v124;
        if (v121) {
          uint64_t v126 = a3 >= 0;
        }
        else {
          uint64_t v126 = 1;
        }
        unint64_t v129 = !v126
            || (v121 * (unsigned __int128)(unint64_t)a3) >> 64 != 0
            || ((unint64_t)v122 * (unsigned __int128)v20) >> 64 != 0;
        unsigned int v130 = v122 * v20 + v121 * a3;
        char v131 = (v20 * (unsigned __int128)(unint64_t)a3) >> 64;
        BOOL v33 = __CFADD__(v131, v130);
        unsigned long long v132 = v131 + v130;
        if (v33) {
          unint64_t v129 = 1;
        }
        BOOL v133 = v20 * a3;
        BOOL v33 = __CFADD__(v133, v125);
        unsigned __int8 v20 = v133 + v125;
        unint64_t v134 = v33;
        BOOL v33 = __CFADD__(v33, v132);
        uint64_t v121 = v134 + v132;
        unint64_t v135 = v33;
        uint64_t v8 = 1;
        if ((v129 & 1) != 0 || v135) {
          goto LABEL_229;
        }
        ++v116;
        if (!--v120)
        {
LABEL_192:
          uint64_t v8 = 0;
          unint64_t result = v20;
          goto LABEL_229;
        }
      }
    }
  }
  else
  {
    if (a1 != 45)
    {
      char v136 = 0;
      unint64_t v137 = 0;
      char v138 = a3 + 48;
      unint64_t v139 = a3 + 55;
      unint64_t v140 = a3 + 87;
      if (a3 > 10)
      {
        char v138 = 58;
      }
      else
      {
        unint64_t v140 = 97;
        unint64_t v139 = 65;
      }
      BOOL v141 = a3 >> 63;
      uint64_t v142 = (unsigned __int8 *)v157;
      while (1)
      {
        unsigned __int8 v143 = *v142;
        if (v143 < 0x30 || v143 >= v138)
        {
          if (v143 < 0x41 || v143 >= v139)
          {
            unint64_t result = 0;
            uint64_t v8 = 1;
            if (v143 < 0x61 || v143 >= v140) {
              goto LABEL_229;
            }
            unsigned __int8 v144 = -87;
          }
          else
          {
            unsigned __int8 v144 = -55;
          }
        }
        else
        {
          unsigned __int8 v144 = -48;
        }
        unint64_t result = 0;
        unsigned __int8 v145 = v143 + v144;
        if (v137) {
          unint64_t v146 = a3 >= 0;
        }
        else {
          unint64_t v146 = 1;
        }
        unsigned int v149 = !v146
            || (v137 * (unsigned __int128)(unint64_t)a3) >> 64 != 0
            || ((unint64_t)v141 * (unsigned __int128)(unint64_t)v136) >> 64 != 0;
        char v150 = v141 * v136 + v137 * a3;
        unsigned long long v151 = ((unint64_t)v136 * (unsigned __int128)(unint64_t)a3) >> 64;
        BOOL v33 = __CFADD__(v151, v150);
        BOOL v152 = v151 + v150;
        if (v33) {
          unsigned int v149 = 1;
        }
        BOOL v153 = v136 * a3;
        BOOL v33 = __CFADD__(v153, v145);
        char v136 = v153 + v145;
        BOOL v154 = v33;
        BOOL v33 = __CFADD__(v33, v152);
        unint64_t v137 = v154 + v152;
        BOOL v155 = v33;
        uint64_t v8 = 1;
        if ((v149 & 1) != 0 || v155) {
          goto LABEL_229;
        }
        ++v142;
        if (!--v38)
        {
          uint64_t v8 = 0;
          unint64_t result = v136;
          goto LABEL_229;
        }
      }
    }
    uint64_t v8 = 1;
    BOOL v39 = specialized Collection.subscript.getter(1, (uint64_t)v157, v38);
    uint64_t v43 = specialized UnsafeBufferPointer.init(rebasing:)(v39, v40, v41, v42);
    if (!v44) {
      goto LABEL_234;
    }
    uint64_t v45 = (unsigned __int8 *)v43;
    uint64_t v46 = a3 + 55;
    uint64_t v47 = a3 + 87;
    if (a3 > 10)
    {
      uint64_t v48 = 58;
    }
    else
    {
      uint64_t v47 = 97;
      uint64_t v46 = 65;
      uint64_t v48 = a3 + 48;
    }
    if (v43)
    {
      char v49 = v44;
      unsigned __int8 v20 = 0;
      unsigned __int8 v50 = 0;
      unsigned __int8 v51 = a3 >> 63;
      while (1)
      {
        unsigned __int8 v52 = *v45;
        if (v52 < 0x30 || v52 >= v48)
        {
          if (v52 < 0x41 || v52 >= v46)
          {
            unint64_t result = 0;
            uint64_t v8 = 1;
            if (v52 < 0x61 || v52 >= v47) {
              goto LABEL_229;
            }
            uint64_t v53 = -87;
          }
          else
          {
            uint64_t v53 = -55;
          }
        }
        else
        {
          uint64_t v53 = -48;
        }
        unint64_t result = 0;
        uint64_t v54 = v52 + v53;
        if (v50) {
          unint64_t v55 = a3 >= 0;
        }
        else {
          unint64_t v55 = 1;
        }
        char v58 = !v55
           || (v50 * (unsigned __int128)(unint64_t)a3) >> 64 != 0
           || ((unint64_t)v51 * (unsigned __int128)v20) >> 64 != 0;
        unsigned long long v59 = v51 * v20 + v50 * a3;
        BOOL v60 = (v20 * (unsigned __int128)(unint64_t)a3) >> 64;
        BOOL v33 = __CFADD__(v60, v59);
        BOOL v61 = v60 + v59;
        if (v33) {
          char v58 = 1;
        }
        BOOL v62 = v20 * a3;
        BOOL v33 = v62 >= v54;
        unsigned __int8 v20 = v62 - v54;
        BOOL v63 = v33;
        BOOL v33 = v61 >= !v33;
        unsigned __int8 v50 = v61 - !v63;
        unint64_t v64 = !v33;
        uint64_t v8 = 1;
        if ((v58 & 1) != 0 || v64) {
          goto LABEL_229;
        }
        ++v45;
        if (!--v49) {
          goto LABEL_192;
        }
      }
    }
  }
LABEL_193:
  unint64_t result = 0;
  uint64_t v8 = 0;
LABEL_229:
  unint64_t v158 = v8;
LABEL_230:
  LOBYTE(v157[0]) = (a2 & 0x1000000000000000) != 0;
  return result;
}

{
  unsigned __int8 *v5;
  uint64_t v6;
  int v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 *v13;
  uint64_t v14;
  unsigned __int8 v15;
  unsigned __int8 v16;
  unsigned __int8 v17;
  unsigned int v18;
  unsigned int v19;
  char v20;
  unsigned int v21;
  unsigned __int8 v22;
  unint64_t v23;
  BOOL v24;
  BOOL v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned __int8 *v32;
  uint64_t v33;
  unsigned __int8 v34;
  unsigned __int8 v35;
  unsigned __int8 v36;
  unsigned int v37;
  unsigned int v38;
  char v39;
  unsigned __int8 v40;
  unint64_t v41;
  BOOL v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unsigned __int8 *v48;
  uint64_t v49;
  unsigned __int8 v50;
  unsigned __int8 v51;
  unsigned __int8 v52;
  unsigned int v53;
  unsigned int v54;
  char v55;
  unsigned __int8 v56;
  unint64_t v57;
  BOOL v58;
  char v59;
  unsigned int v60;
  unsigned __int8 v61;
  unsigned __int8 v62;
  unsigned __int8 v63;
  unsigned int v64;
  char v65;
  unsigned __int8 v66;
  unint64_t v67;
  BOOL v68;
  char v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unsigned __int8 *v74;
  uint64_t v75;
  unsigned __int8 v76;
  unsigned __int8 v77;
  unsigned __int8 v78;
  unsigned int v79;
  unsigned int v80;
  char v81;
  unsigned __int8 v82;
  unint64_t v83;
  BOOL v84;
  char v85;
  unsigned int v87;
  unsigned __int8 v88;
  unsigned __int8 v89;
  unsigned __int8 v90;
  unsigned __int8 *v91;
  unsigned int v92;
  char v93;
  unsigned __int8 v94;
  unint64_t v95;
  BOOL v96;
  char v97;
  uint64_t v98;
  void v99[2];
  unsigned __int8 v100;

  if ((a2 & 0x1000000000000000) != 0)
  {
    unsigned __int8 v21 = 0;
    unsigned __int8 v100 = 0;
    return v21 | ((unint64_t)v100 << 32) | (((a2 >> 60) & 1) << 40);
  }
  if ((a2 & 0x2000000000000000) == 0)
  {
    if ((a1 & 0x1000000000000000) != 0)
    {
      unint64_t v5 = (unsigned __int8 *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
      uint64_t v6 = a1 & 0xFFFFFFFFFFFFLL;
      if ((a1 & 0xFFFFFFFFFFFFLL) != 0) {
        goto LABEL_5;
      }
    }
    else
    {
      unint64_t v5 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(a1, a2);
      uint64_t v6 = v98;
      if (v98 > 0)
      {
LABEL_5:
        char v7 = *v5;
        if (v7 != 43)
        {
          if (v7 != 45)
          {
            BOOL v60 = 0;
            BOOL v61 = a3 + 55;
            BOOL v62 = a3 + 87;
            if (a3 > 10)
            {
              BOOL v63 = 58;
            }
            else
            {
              BOOL v62 = 97;
              BOOL v61 = 65;
              BOOL v63 = a3 + 48;
            }
            do
            {
              unint64_t v64 = *v5;
              if (v64 < 0x30 || v64 >= v63)
              {
                if (v64 < 0x41 || v64 >= v61)
                {
                  unsigned __int8 v21 = 0;
                  uint64_t v8 = 1;
                  if (v64 < 0x61 || v64 >= v62) {
                    goto LABEL_118;
                  }
                  char v65 = -87;
                }
                else
                {
                  char v65 = -55;
                }
              }
              else
              {
                char v65 = -48;
              }
              unsigned __int8 v21 = 0;
              unint64_t v66 = v64 + v65;
              unint64_t v67 = v60 * (unint64_t)a3;
              BOOL v68 = (v67 & 0xFFFFFFFF00000000) != 0;
              unint64_t v25 = __CFADD__(v67, v66);
              BOOL v60 = v67 + v66;
              uint64_t v69 = v25;
              uint64_t v8 = 1;
              if (v68) {
                break;
              }
              if (v69) {
                break;
              }
              uint64_t v8 = 0;
              ++v5;
              unsigned __int8 v21 = v60;
              --v6;
            }
            while (v6);
            goto LABEL_118;
          }
          uint64_t v8 = 1;
          int v9 = specialized Collection.subscript.getter(1, (uint64_t)v5, v6);
          uint64_t v13 = (unsigned __int8 *)specialized UnsafeBufferPointer.init(rebasing:)(v9, v10, v11, v12);
          if (v14)
          {
            uint64_t v15 = a3 + 55;
            uint64_t v16 = a3 + 87;
            if (a3 > 10)
            {
              uint64_t v17 = 58;
            }
            else
            {
              uint64_t v16 = 97;
              uint64_t v15 = 65;
              uint64_t v17 = a3 + 48;
            }
            if (v13)
            {
              uint64_t v18 = 0;
              do
              {
                unsigned __int8 v19 = *v13;
                if (v19 < 0x30 || v19 >= v17)
                {
                  if (v19 < 0x41 || v19 >= v15)
                  {
                    unsigned __int8 v21 = 0;
                    uint64_t v8 = 1;
                    if (v19 < 0x61 || v19 >= v16) {
                      goto LABEL_118;
                    }
                    unsigned __int8 v20 = -87;
                  }
                  else
                  {
                    unsigned __int8 v20 = -55;
                  }
                }
                else
                {
                  unsigned __int8 v20 = -48;
                }
                unsigned __int8 v21 = 0;
                uint64_t v22 = v19 + v20;
                unint64_t v23 = v18 * (unint64_t)a3;
                uint64_t v24 = (v23 & 0xFFFFFFFF00000000) != 0;
                unint64_t v25 = v23 >= v22;
                uint64_t v18 = v23 - v22;
                unint64_t v26 = !v25;
                uint64_t v8 = 1;
                if (v24) {
                  break;
                }
                if (v26) {
                  break;
                }
                uint64_t v8 = 0;
                ++v13;
                unsigned __int8 v21 = v18;
                --v14;
              }
              while (v14);
              goto LABEL_118;
            }
            goto LABEL_117;
          }
LABEL_143:
          unsigned __int8 v21 = 0;
          goto LABEL_118;
        }
        uint64_t v8 = 1;
        uint64_t v44 = specialized Collection.subscript.getter(1, (uint64_t)v5, v6);
        uint64_t v48 = (unsigned __int8 *)specialized UnsafeBufferPointer.init(rebasing:)(v44, v45, v46, v47);
        if (v49)
        {
          unsigned __int8 v50 = a3 + 55;
          unsigned __int8 v51 = a3 + 87;
          if (a3 > 10)
          {
            unsigned __int8 v52 = 58;
          }
          else
          {
            unsigned __int8 v51 = 97;
            unsigned __int8 v50 = 65;
            unsigned __int8 v52 = a3 + 48;
          }
          if (v48)
          {
            uint64_t v53 = 0;
            do
            {
              uint64_t v54 = *v48;
              if (v54 < 0x30 || v54 >= v52)
              {
                if (v54 < 0x41 || v54 >= v50)
                {
                  unsigned __int8 v21 = 0;
                  uint64_t v8 = 1;
                  if (v54 < 0x61 || v54 >= v51) {
                    goto LABEL_118;
                  }
                  unint64_t v55 = -87;
                }
                else
                {
                  unint64_t v55 = -55;
                }
              }
              else
              {
                unint64_t v55 = -48;
              }
              unsigned __int8 v21 = 0;
              unint64_t v56 = v54 + v55;
              unsigned int v57 = v53 * (unint64_t)a3;
              char v58 = (v57 & 0xFFFFFFFF00000000) != 0;
              unint64_t v25 = __CFADD__(v57, v56);
              uint64_t v53 = v57 + v56;
              unsigned long long v59 = v25;
              uint64_t v8 = 1;
              if (v58) {
                break;
              }
              if (v59) {
                break;
              }
              uint64_t v8 = 0;
              ++v48;
              unsigned __int8 v21 = v53;
              --v49;
            }
            while (v49);
            goto LABEL_118;
          }
          goto LABEL_117;
        }
LABEL_144:
        unsigned __int8 v21 = 0;
        goto LABEL_118;
      }
    }
LABEL_142:
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x6F6uLL, 0);
  }
  unsigned int v27 = HIBYTE(a2) & 0xF;
  v99[0] = a1;
  v99[1] = a2 & 0xFFFFFFFFFFFFFFLL;
  if (!v27) {
    goto LABEL_142;
  }
  if (a1 == 43)
  {
    uint64_t v8 = 1;
    uint64_t v70 = specialized Collection.subscript.getter(1, (uint64_t)v99, v27);
    uint64_t v74 = (unsigned __int8 *)specialized UnsafeBufferPointer.init(rebasing:)(v70, v71, v72, v73);
    if (!v75) {
      goto LABEL_144;
    }
    uint64_t v76 = a3 + 55;
    unsigned __int8 v77 = a3 + 87;
    if (a3 > 10)
    {
      unsigned __int8 v78 = 58;
    }
    else
    {
      unsigned __int8 v77 = 97;
      uint64_t v76 = 65;
      unsigned __int8 v78 = a3 + 48;
    }
    if (v74)
    {
      unsigned __int8 v79 = 0;
      do
      {
        uint64_t v80 = *v74;
        if (v80 < 0x30 || v80 >= v78)
        {
          if (v80 < 0x41 || v80 >= v76)
          {
            unsigned __int8 v21 = 0;
            uint64_t v8 = 1;
            if (v80 < 0x61 || v80 >= v77) {
              goto LABEL_118;
            }
            uint64_t v81 = -87;
          }
          else
          {
            uint64_t v81 = -55;
          }
        }
        else
        {
          uint64_t v81 = -48;
        }
        unsigned __int8 v21 = 0;
        unint64_t v82 = v80 + v81;
        unint64_t v83 = v79 * (unint64_t)a3;
        unsigned int v84 = (v83 & 0xFFFFFFFF00000000) != 0;
        unint64_t v25 = __CFADD__(v83, v82);
        unsigned __int8 v79 = v83 + v82;
        char v85 = v25;
        uint64_t v8 = 1;
        if (v84) {
          break;
        }
        if (v85) {
          break;
        }
        uint64_t v8 = 0;
        ++v74;
        unsigned __int8 v21 = v79;
        --v75;
      }
      while (v75);
      goto LABEL_118;
    }
  }
  else
  {
    if (a1 != 45)
    {
      BOOL v87 = 0;
      BOOL v88 = a3 + 55;
      BOOL v89 = a3 + 87;
      if (a3 > 10)
      {
        BOOL v90 = 58;
      }
      else
      {
        BOOL v89 = 97;
        BOOL v88 = 65;
        BOOL v90 = a3 + 48;
      }
      unint64_t v91 = (unsigned __int8 *)v99;
      do
      {
        char v92 = *v91;
        if (v92 < 0x30 || v92 >= v90)
        {
          if (v92 < 0x41 || v92 >= v88)
          {
            unsigned __int8 v21 = 0;
            uint64_t v8 = 1;
            if (v92 < 0x61 || v92 >= v89) {
              goto LABEL_118;
            }
            unint64_t v93 = -87;
          }
          else
          {
            unint64_t v93 = -55;
          }
        }
        else
        {
          unint64_t v93 = -48;
        }
        unsigned __int8 v21 = 0;
        unint64_t v94 = v92 + v93;
        BOOL v95 = v87 * (unint64_t)a3;
        unint64_t v96 = (v95 & 0xFFFFFFFF00000000) != 0;
        unint64_t v25 = __CFADD__(v95, v94);
        BOOL v87 = v95 + v94;
        uint64_t v97 = v25;
        uint64_t v8 = 1;
        if (v96) {
          break;
        }
        if (v97) {
          break;
        }
        uint64_t v8 = 0;
        ++v91;
        unsigned __int8 v21 = v87;
        --v27;
      }
      while (v27);
      goto LABEL_118;
    }
    uint64_t v8 = 1;
    char v28 = specialized Collection.subscript.getter(1, (uint64_t)v99, v27);
    BOOL v32 = (unsigned __int8 *)specialized UnsafeBufferPointer.init(rebasing:)(v28, v29, v30, v31);
    if (!v33) {
      goto LABEL_143;
    }
    BOOL v34 = a3 + 55;
    unint64_t v35 = a3 + 87;
    if (a3 > 10)
    {
      char v36 = 58;
    }
    else
    {
      unint64_t v35 = 97;
      BOOL v34 = 65;
      char v36 = a3 + 48;
    }
    if (v32)
    {
      unint64_t v37 = 0;
      do
      {
        unint64_t v38 = *v32;
        if (v38 < 0x30 || v38 >= v36)
        {
          if (v38 < 0x41 || v38 >= v34)
          {
            unsigned __int8 v21 = 0;
            uint64_t v8 = 1;
            if (v38 < 0x61 || v38 >= v35) {
              goto LABEL_118;
            }
            BOOL v39 = -87;
          }
          else
          {
            BOOL v39 = -55;
          }
        }
        else
        {
          BOOL v39 = -48;
        }
        unsigned __int8 v21 = 0;
        BOOL v40 = v38 + v39;
        uint64_t v41 = v37 * (unint64_t)a3;
        uint64_t v42 = (v41 & 0xFFFFFFFF00000000) != 0;
        unint64_t v25 = v41 >= v40;
        unint64_t v37 = v41 - v40;
        uint64_t v43 = !v25;
        uint64_t v8 = 1;
        if (v42) {
          break;
        }
        if (v43) {
          break;
        }
        uint64_t v8 = 0;
        ++v32;
        unsigned __int8 v21 = v37;
        --v33;
      }
      while (v33);
      goto LABEL_118;
    }
  }
LABEL_117:
  unsigned __int8 v21 = 0;
  uint64_t v8 = 0;
LABEL_118:
  unsigned __int8 v100 = v8;
  return v21 | ((unint64_t)v100 << 32) | (((a2 >> 60) & 1) << 40);
}

{
  unsigned __int8 *v5;
  uint64_t v6;
  int v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 *v13;
  uint64_t v14;
  unsigned __int8 v15;
  unsigned __int8 v16;
  unsigned __int8 v17;
  unsigned int v18;
  unsigned int v19;
  char v20;
  unsigned int v21;
  unsigned __int8 v22;
  uint64_t v23;
  BOOL v24;
  BOOL v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned __int8 *v32;
  uint64_t v33;
  unsigned __int8 v34;
  unsigned __int8 v35;
  unsigned __int8 v36;
  unsigned int v37;
  unsigned int v38;
  char v39;
  unsigned __int8 v40;
  uint64_t v41;
  BOOL v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unsigned __int8 *v48;
  uint64_t v49;
  unsigned __int8 v50;
  unsigned __int8 v51;
  unsigned __int8 v52;
  unsigned int v53;
  unsigned int v54;
  char v55;
  unsigned __int8 v56;
  uint64_t v57;
  BOOL v58;
  char v59;
  unsigned int v60;
  unsigned __int8 v61;
  unsigned __int8 v62;
  unsigned __int8 v63;
  unsigned int v64;
  char v65;
  unsigned __int8 v66;
  uint64_t v67;
  BOOL v68;
  char v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unsigned __int8 *v74;
  uint64_t v75;
  unsigned __int8 v76;
  unsigned __int8 v77;
  unsigned __int8 v78;
  unsigned int v79;
  unsigned int v80;
  char v81;
  unsigned __int8 v82;
  uint64_t v83;
  BOOL v84;
  char v85;
  unsigned int v87;
  unsigned __int8 v88;
  unsigned __int8 v89;
  unsigned __int8 v90;
  unsigned __int8 *v91;
  unsigned int v92;
  char v93;
  unsigned __int8 v94;
  uint64_t v95;
  BOOL v96;
  char v97;
  uint64_t v98;
  void v99[2];
  unsigned __int8 v100;

  if ((a2 & 0x1000000000000000) != 0)
  {
    unsigned __int8 v21 = 0;
    unsigned __int8 v100 = 0;
    return v21 | ((unint64_t)v100 << 32) | (((a2 >> 60) & 1) << 40);
  }
  if ((a2 & 0x2000000000000000) == 0)
  {
    if ((a1 & 0x1000000000000000) != 0)
    {
      unint64_t v5 = (unsigned __int8 *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
      uint64_t v6 = a1 & 0xFFFFFFFFFFFFLL;
      if ((a1 & 0xFFFFFFFFFFFFLL) != 0) {
        goto LABEL_5;
      }
    }
    else
    {
      unint64_t v5 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(a1, a2);
      uint64_t v6 = v98;
      if (v98 > 0)
      {
LABEL_5:
        char v7 = *v5;
        if (v7 != 43)
        {
          if (v7 != 45)
          {
            BOOL v60 = 0;
            BOOL v61 = a3 + 55;
            BOOL v62 = a3 + 87;
            if (a3 > 10)
            {
              BOOL v63 = 58;
            }
            else
            {
              BOOL v62 = 97;
              BOOL v61 = 65;
              BOOL v63 = a3 + 48;
            }
            do
            {
              unint64_t v64 = *v5;
              if (v64 < 0x30 || v64 >= v63)
              {
                if (v64 < 0x41 || v64 >= v61)
                {
                  unsigned __int8 v21 = 0;
                  uint64_t v8 = 1;
                  if (v64 < 0x61 || v64 >= v62) {
                    goto LABEL_118;
                  }
                  char v65 = -87;
                }
                else
                {
                  char v65 = -55;
                }
              }
              else
              {
                char v65 = -48;
              }
              unsigned __int8 v21 = 0;
              unint64_t v66 = v64 + v65;
              unint64_t v67 = (int)v60 * (uint64_t)(int)a3;
              BOOL v68 = v67 != (int)v67;
              unint64_t v25 = __OFADD__(v67, v66);
              BOOL v60 = v67 + v66;
              uint64_t v69 = v25;
              uint64_t v8 = 1;
              if (v68) {
                break;
              }
              if (v69) {
                break;
              }
              uint64_t v8 = 0;
              ++v5;
              unsigned __int8 v21 = v60;
              --v6;
            }
            while (v6);
            goto LABEL_118;
          }
          uint64_t v8 = 1;
          int v9 = specialized Collection.subscript.getter(1, (uint64_t)v5, v6);
          uint64_t v13 = (unsigned __int8 *)specialized UnsafeBufferPointer.init(rebasing:)(v9, v10, v11, v12);
          if (v14)
          {
            uint64_t v15 = a3 + 55;
            uint64_t v16 = a3 + 87;
            if (a3 > 10)
            {
              uint64_t v17 = 58;
            }
            else
            {
              uint64_t v16 = 97;
              uint64_t v15 = 65;
              uint64_t v17 = a3 + 48;
            }
            if (v13)
            {
              uint64_t v18 = 0;
              do
              {
                unsigned __int8 v19 = *v13;
                if (v19 < 0x30 || v19 >= v17)
                {
                  if (v19 < 0x41 || v19 >= v15)
                  {
                    unsigned __int8 v21 = 0;
                    uint64_t v8 = 1;
                    if (v19 < 0x61 || v19 >= v16) {
                      goto LABEL_118;
                    }
                    unsigned __int8 v20 = -87;
                  }
                  else
                  {
                    unsigned __int8 v20 = -55;
                  }
                }
                else
                {
                  unsigned __int8 v20 = -48;
                }
                unsigned __int8 v21 = 0;
                uint64_t v22 = v19 + v20;
                unint64_t v23 = (int)v18 * (uint64_t)(int)a3;
                uint64_t v24 = v23 != (int)v23;
                unint64_t v25 = __OFSUB__(v23, v22);
                uint64_t v18 = v23 - v22;
                unint64_t v26 = v25;
                uint64_t v8 = 1;
                if (v24) {
                  break;
                }
                if (v26) {
                  break;
                }
                uint64_t v8 = 0;
                ++v13;
                unsigned __int8 v21 = v18;
                --v14;
              }
              while (v14);
              goto LABEL_118;
            }
            goto LABEL_117;
          }
LABEL_143:
          unsigned __int8 v21 = 0;
          goto LABEL_118;
        }
        uint64_t v8 = 1;
        uint64_t v44 = specialized Collection.subscript.getter(1, (uint64_t)v5, v6);
        uint64_t v48 = (unsigned __int8 *)specialized UnsafeBufferPointer.init(rebasing:)(v44, v45, v46, v47);
        if (v49)
        {
          unsigned __int8 v50 = a3 + 55;
          unsigned __int8 v51 = a3 + 87;
          if (a3 > 10)
          {
            unsigned __int8 v52 = 58;
          }
          else
          {
            unsigned __int8 v51 = 97;
            unsigned __int8 v50 = 65;
            unsigned __int8 v52 = a3 + 48;
          }
          if (v48)
          {
            uint64_t v53 = 0;
            do
            {
              uint64_t v54 = *v48;
              if (v54 < 0x30 || v54 >= v52)
              {
                if (v54 < 0x41 || v54 >= v50)
                {
                  unsigned __int8 v21 = 0;
                  uint64_t v8 = 1;
                  if (v54 < 0x61 || v54 >= v51) {
                    goto LABEL_118;
                  }
                  unint64_t v55 = -87;
                }
                else
                {
                  unint64_t v55 = -55;
                }
              }
              else
              {
                unint64_t v55 = -48;
              }
              unsigned __int8 v21 = 0;
              unint64_t v56 = v54 + v55;
              unsigned int v57 = (int)v53 * (uint64_t)(int)a3;
              char v58 = v57 != (int)v57;
              unint64_t v25 = __OFADD__(v57, v56);
              uint64_t v53 = v57 + v56;
              unsigned long long v59 = v25;
              uint64_t v8 = 1;
              if (v58) {
                break;
              }
              if (v59) {
                break;
              }
              uint64_t v8 = 0;
              ++v48;
              unsigned __int8 v21 = v53;
              --v49;
            }
            while (v49);
            goto LABEL_118;
          }
          goto LABEL_117;
        }
LABEL_144:
        unsigned __int8 v21 = 0;
        goto LABEL_118;
      }
    }
LABEL_142:
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x6F6uLL, 0);
  }
  unsigned int v27 = HIBYTE(a2) & 0xF;
  v99[0] = a1;
  v99[1] = a2 & 0xFFFFFFFFFFFFFFLL;
  if (!v27) {
    goto LABEL_142;
  }
  if (a1 == 43)
  {
    uint64_t v8 = 1;
    uint64_t v70 = specialized Collection.subscript.getter(1, (uint64_t)v99, v27);
    uint64_t v74 = (unsigned __int8 *)specialized UnsafeBufferPointer.init(rebasing:)(v70, v71, v72, v73);
    if (!v75) {
      goto LABEL_144;
    }
    uint64_t v76 = a3 + 55;
    unsigned __int8 v77 = a3 + 87;
    if (a3 > 10)
    {
      unsigned __int8 v78 = 58;
    }
    else
    {
      unsigned __int8 v77 = 97;
      uint64_t v76 = 65;
      unsigned __int8 v78 = a3 + 48;
    }
    if (v74)
    {
      unsigned __int8 v79 = 0;
      do
      {
        uint64_t v80 = *v74;
        if (v80 < 0x30 || v80 >= v78)
        {
          if (v80 < 0x41 || v80 >= v76)
          {
            unsigned __int8 v21 = 0;
            uint64_t v8 = 1;
            if (v80 < 0x61 || v80 >= v77) {
              goto LABEL_118;
            }
            uint64_t v81 = -87;
          }
          else
          {
            uint64_t v81 = -55;
          }
        }
        else
        {
          uint64_t v81 = -48;
        }
        unsigned __int8 v21 = 0;
        unint64_t v82 = v80 + v81;
        unint64_t v83 = (int)v79 * (uint64_t)(int)a3;
        unsigned int v84 = v83 != (int)v83;
        unint64_t v25 = __OFADD__(v83, v82);
        unsigned __int8 v79 = v83 + v82;
        char v85 = v25;
        uint64_t v8 = 1;
        if (v84) {
          break;
        }
        if (v85) {
          break;
        }
        uint64_t v8 = 0;
        ++v74;
        unsigned __int8 v21 = v79;
        --v75;
      }
      while (v75);
      goto LABEL_118;
    }
  }
  else
  {
    if (a1 != 45)
    {
      BOOL v87 = 0;
      BOOL v88 = a3 + 55;
      BOOL v89 = a3 + 87;
      if (a3 > 10)
      {
        BOOL v90 = 58;
      }
      else
      {
        BOOL v89 = 97;
        BOOL v88 = 65;
        BOOL v90 = a3 + 48;
      }
      unint64_t v91 = (unsigned __int8 *)v99;
      do
      {
        char v92 = *v91;
        if (v92 < 0x30 || v92 >= v90)
        {
          if (v92 < 0x41 || v92 >= v88)
          {
            unsigned __int8 v21 = 0;
            uint64_t v8 = 1;
            if (v92 < 0x61 || v92 >= v89) {
              goto LABEL_118;
            }
            unint64_t v93 = -87;
          }
          else
          {
            unint64_t v93 = -55;
          }
        }
        else
        {
          unint64_t v93 = -48;
        }
        unsigned __int8 v21 = 0;
        unint64_t v94 = v92 + v93;
        BOOL v95 = (int)v87 * (uint64_t)(int)a3;
        unint64_t v96 = v95 != (int)v95;
        unint64_t v25 = __OFADD__(v95, v94);
        BOOL v87 = v95 + v94;
        uint64_t v97 = v25;
        uint64_t v8 = 1;
        if (v96) {
          break;
        }
        if (v97) {
          break;
        }
        uint64_t v8 = 0;
        ++v91;
        unsigned __int8 v21 = v87;
        --v27;
      }
      while (v27);
      goto LABEL_118;
    }
    uint64_t v8 = 1;
    char v28 = specialized Collection.subscript.getter(1, (uint64_t)v99, v27);
    BOOL v32 = (unsigned __int8 *)specialized UnsafeBufferPointer.init(rebasing:)(v28, v29, v30, v31);
    if (!v33) {
      goto LABEL_143;
    }
    BOOL v34 = a3 + 55;
    unint64_t v35 = a3 + 87;
    if (a3 > 10)
    {
      char v36 = 58;
    }
    else
    {
      unint64_t v35 = 97;
      BOOL v34 = 65;
      char v36 = a3 + 48;
    }
    if (v32)
    {
      unint64_t v37 = 0;
      do
      {
        unint64_t v38 = *v32;
        if (v38 < 0x30 || v38 >= v36)
        {
          if (v38 < 0x41 || v38 >= v34)
          {
            unsigned __int8 v21 = 0;
            uint64_t v8 = 1;
            if (v38 < 0x61 || v38 >= v35) {
              goto LABEL_118;
            }
            BOOL v39 = -87;
          }
          else
          {
            BOOL v39 = -55;
          }
        }
        else
        {
          BOOL v39 = -48;
        }
        unsigned __int8 v21 = 0;
        BOOL v40 = v38 + v39;
        uint64_t v41 = (int)v37 * (uint64_t)(int)a3;
        uint64_t v42 = v41 != (int)v41;
        unint64_t v25 = __OFSUB__(v41, v40);
        unint64_t v37 = v41 - v40;
        uint64_t v43 = v25;
        uint64_t v8 = 1;
        if (v42) {
          break;
        }
        if (v43) {
          break;
        }
        uint64_t v8 = 0;
        ++v32;
        unsigned __int8 v21 = v37;
        --v33;
      }
      while (v33);
      goto LABEL_118;
    }
  }
LABEL_117:
  unsigned __int8 v21 = 0;
  uint64_t v8 = 0;
LABEL_118:
  unsigned __int8 v100 = v8;
  return v21 | ((unint64_t)v100 << 32) | (((a2 >> 60) & 1) << 40);
}

uint64_t specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)(uint64_t a1, unint64_t a2, uint64_t a3)
{
  if ((a2 & 0x1000000000000000) != 0)
  {
    unsigned __int8 v21 = 0;
    unsigned __int8 v83 = 0;
    goto LABEL_104;
  }
  if ((a2 & 0x2000000000000000) != 0)
  {
    uint64_t v24 = HIBYTE(a2) & 0xF;
    v82[0] = a1;
    v82[1] = a2 & 0xFFFFFFFFFFFFFFLL;
    if (v24)
    {
      if (a1 != 43)
      {
        if (a1 != 45)
        {
          LOBYTE(v73) = 0;
          unsigned __int8 v74 = a3 + 55;
          unsigned __int8 v75 = a3 + 87;
          if (a3 > 10)
          {
            unsigned __int8 v76 = 58;
          }
          else
          {
            unsigned __int8 v75 = 97;
            unsigned __int8 v74 = 65;
            unsigned __int8 v76 = a3 + 48;
          }
          unsigned __int8 v77 = (unsigned __int8 *)v82;
          while (1)
          {
            unsigned int v78 = *v77;
            if (v78 < 0x30 || v78 >= v76)
            {
              if (v78 < 0x41 || v78 >= v74)
              {
                unsigned __int8 v21 = 0;
                char v8 = 1;
                if (v78 < 0x61 || v78 >= v75) {
                  goto LABEL_103;
                }
                char v79 = -87;
              }
              else
              {
                char v79 = -55;
              }
            }
            else
            {
              char v79 = -48;
            }
            unsigned __int8 v21 = 0;
            __int16 v80 = v73 * a3;
            char v8 = 1;
            if ((v80 & 0xFF00) == 0)
            {
              unsigned int v73 = v80 + (v78 + v79);
              if (((v73 >> 8) & 1) == 0)
              {
                char v8 = 0;
                ++v77;
                unsigned __int8 v21 = v73;
                if (--v24) {
                  continue;
                }
              }
            }
            goto LABEL_103;
          }
        }
        char v8 = 1;
        uint64_t v25 = specialized Collection.subscript.getter(1, (uint64_t)v82, v24);
        uint64_t v29 = (unsigned __int8 *)specialized UnsafeBufferPointer.init(rebasing:)(v25, v26, v27, v28);
        if (v30)
        {
          unsigned __int8 v31 = a3 + 55;
          unsigned __int8 v32 = a3 + 87;
          if (a3 > 10)
          {
            unsigned __int8 v33 = 58;
          }
          else
          {
            unsigned __int8 v32 = 97;
            unsigned __int8 v31 = 65;
            unsigned __int8 v33 = a3 + 48;
          }
          if (v29)
          {
            LOBYTE(v34) = 0;
            while (1)
            {
              unsigned int v35 = *v29;
              if (v35 < 0x30 || v35 >= v33)
              {
                if (v35 < 0x41 || v35 >= v31)
                {
                  unsigned __int8 v21 = 0;
                  char v8 = 1;
                  if (v35 < 0x61 || v35 >= v32) {
                    goto LABEL_103;
                  }
                  char v36 = -87;
                }
                else
                {
                  char v36 = -55;
                }
              }
              else
              {
                char v36 = -48;
              }
              unsigned __int8 v21 = 0;
              unsigned __int8 v37 = v35 + v36;
              __int16 v38 = v34 * a3;
              int v34 = (v34 * a3) - v37;
              char v8 = 1;
              if ((v38 & 0xFF00) == 0 && (v34 & 0xFFFFFF00) == 0)
              {
                char v8 = 0;
                ++v29;
                unsigned __int8 v21 = v34;
                if (--v30) {
                  continue;
                }
              }
              goto LABEL_103;
            }
          }
          goto LABEL_102;
        }
LABEL_125:
        unsigned __int8 v21 = 0;
        goto LABEL_103;
      }
      char v8 = 1;
      uint64_t v59 = specialized Collection.subscript.getter(1, (uint64_t)v82, v24);
      BOOL v63 = (unsigned __int8 *)specialized UnsafeBufferPointer.init(rebasing:)(v59, v60, v61, v62);
      if (v64)
      {
        unsigned __int8 v65 = a3 + 55;
        unsigned __int8 v66 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v67 = 58;
        }
        else
        {
          unsigned __int8 v66 = 97;
          unsigned __int8 v65 = 65;
          unsigned __int8 v67 = a3 + 48;
        }
        if (v63)
        {
          LOBYTE(v68) = 0;
          while (1)
          {
            unsigned int v69 = *v63;
            if (v69 < 0x30 || v69 >= v67)
            {
              if (v69 < 0x41 || v69 >= v65)
              {
                unsigned __int8 v21 = 0;
                char v8 = 1;
                if (v69 < 0x61 || v69 >= v66) {
                  goto LABEL_103;
                }
                char v70 = -87;
              }
              else
              {
                char v70 = -55;
              }
            }
            else
            {
              char v70 = -48;
            }
            unsigned __int8 v21 = 0;
            __int16 v71 = v68 * a3;
            char v8 = 1;
            if ((v71 & 0xFF00) == 0)
            {
              unsigned int v68 = v71 + (v69 + v70);
              if (((v68 >> 8) & 1) == 0)
              {
                char v8 = 0;
                ++v63;
                unsigned __int8 v21 = v68;
                if (--v64) {
                  continue;
                }
              }
            }
            goto LABEL_103;
          }
        }
        goto LABEL_102;
      }
LABEL_126:
      unsigned __int8 v21 = 0;
      goto LABEL_103;
    }
    goto LABEL_124;
  }
  if ((a1 & 0x1000000000000000) != 0)
  {
    unint64_t v5 = (unsigned __int8 *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
    uint64_t v6 = a1 & 0xFFFFFFFFFFFFLL;
    if ((a1 & 0xFFFFFFFFFFFFLL) != 0) {
      goto LABEL_5;
    }
LABEL_124:
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x6F6uLL, 0);
  }
  unint64_t v5 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(a1, a2);
  uint64_t v6 = v81;
  if (v81 <= 0) {
    goto LABEL_124;
  }
LABEL_5:
  int v7 = *v5;
  if (v7 == 43)
  {
    char v8 = 1;
    uint64_t v39 = specialized Collection.subscript.getter(1, (uint64_t)v5, v6);
    uint64_t v43 = (unsigned __int8 *)specialized UnsafeBufferPointer.init(rebasing:)(v39, v40, v41, v42);
    if (v44)
    {
      unsigned __int8 v45 = a3 + 55;
      unsigned __int8 v46 = a3 + 87;
      if (a3 > 10)
      {
        unsigned __int8 v47 = 58;
      }
      else
      {
        unsigned __int8 v46 = 97;
        unsigned __int8 v45 = 65;
        unsigned __int8 v47 = a3 + 48;
      }
      if (v43)
      {
        LOBYTE(v48) = 0;
        while (1)
        {
          unsigned int v49 = *v43;
          if (v49 < 0x30 || v49 >= v47)
          {
            if (v49 < 0x41 || v49 >= v45)
            {
              unsigned __int8 v21 = 0;
              char v8 = 1;
              if (v49 < 0x61 || v49 >= v46) {
                goto LABEL_103;
              }
              char v50 = -87;
            }
            else
            {
              char v50 = -55;
            }
          }
          else
          {
            char v50 = -48;
          }
          unsigned __int8 v21 = 0;
          __int16 v51 = v48 * a3;
          char v8 = 1;
          if ((v51 & 0xFF00) == 0)
          {
            unsigned int v48 = v51 + (v49 + v50);
            if (((v48 >> 8) & 1) == 0)
            {
              char v8 = 0;
              ++v43;
              unsigned __int8 v21 = v48;
              if (--v44) {
                continue;
              }
            }
          }
          goto LABEL_103;
        }
      }
      goto LABEL_102;
    }
    goto LABEL_126;
  }
  if (v7 != 45)
  {
    LOBYTE(v52) = 0;
    unsigned __int8 v53 = a3 + 55;
    unsigned __int8 v54 = a3 + 87;
    if (a3 > 10)
    {
      unsigned __int8 v55 = 58;
    }
    else
    {
      unsigned __int8 v54 = 97;
      unsigned __int8 v53 = 65;
      unsigned __int8 v55 = a3 + 48;
    }
    while (1)
    {
      unsigned int v56 = *v5;
      if (v56 < 0x30 || v56 >= v55)
      {
        if (v56 < 0x41 || v56 >= v53)
        {
          unsigned __int8 v21 = 0;
          char v8 = 1;
          if (v56 < 0x61 || v56 >= v54) {
            goto LABEL_103;
          }
          char v57 = -87;
        }
        else
        {
          char v57 = -55;
        }
      }
      else
      {
        char v57 = -48;
      }
      unsigned __int8 v21 = 0;
      __int16 v58 = v52 * a3;
      char v8 = 1;
      if ((v58 & 0xFF00) == 0)
      {
        unsigned int v52 = v58 + (v56 + v57);
        if (((v52 >> 8) & 1) == 0)
        {
          char v8 = 0;
          ++v5;
          unsigned __int8 v21 = v52;
          if (--v6) {
            continue;
          }
        }
      }
      goto LABEL_103;
    }
  }
  char v8 = 1;
  uint64_t v9 = specialized Collection.subscript.getter(1, (uint64_t)v5, v6);
  uint64_t v13 = (unsigned __int8 *)specialized UnsafeBufferPointer.init(rebasing:)(v9, v10, v11, v12);
  if (!v14) {
    goto LABEL_125;
  }
  unsigned __int8 v15 = a3 + 55;
  unsigned __int8 v16 = a3 + 87;
  if (a3 > 10)
  {
    unsigned __int8 v17 = 58;
  }
  else
  {
    unsigned __int8 v16 = 97;
    unsigned __int8 v15 = 65;
    unsigned __int8 v17 = a3 + 48;
  }
  if (v13)
  {
    LOBYTE(v18) = 0;
    while (1)
    {
      unsigned int v19 = *v13;
      if (v19 < 0x30 || v19 >= v17)
      {
        if (v19 < 0x41 || v19 >= v15)
        {
          unsigned __int8 v21 = 0;
          char v8 = 1;
          if (v19 < 0x61 || v19 >= v16) {
            goto LABEL_103;
          }
          char v20 = -87;
        }
        else
        {
          char v20 = -55;
        }
      }
      else
      {
        char v20 = -48;
      }
      unsigned __int8 v21 = 0;
      unsigned __int8 v22 = v19 + v20;
      __int16 v23 = v18 * a3;
      int v18 = (v18 * a3) - v22;
      char v8 = 1;
      if ((v23 & 0xFF00) == 0 && (v18 & 0xFFFFFF00) == 0)
      {
        char v8 = 0;
        ++v13;
        unsigned __int8 v21 = v18;
        if (--v14) {
          continue;
        }
      }
      goto LABEL_103;
    }
  }
LABEL_102:
  unsigned __int8 v21 = 0;
  char v8 = 0;
LABEL_103:
  unsigned __int8 v83 = v8;
LABEL_104:
  LOBYTE(v82[0]) = (a2 & 0x1000000000000000) != 0;
  return v21 | (v83 << 8) | (LOBYTE(v82[0]) << 16);
}

{
  unsigned __int8 *v5;
  uint64_t v6;
  int v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 *v13;
  uint64_t v14;
  unsigned __int8 v15;
  unsigned __int8 v16;
  unsigned __int8 v17;
  int v18;
  unsigned int v19;
  char v20;
  unsigned __int8 v21;
  char v22;
  int v23;
  int v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned __int8 *v31;
  uint64_t v32;
  unsigned __int8 v33;
  unsigned __int8 v34;
  unsigned __int8 v35;
  int v36;
  unsigned int v37;
  char v38;
  char v39;
  int v40;
  int v41;
  BOOL v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned __int8 *v47;
  uint64_t v48;
  unsigned __int8 v49;
  unsigned __int8 v50;
  unsigned __int8 v51;
  int v52;
  unsigned int v53;
  char v54;
  char v55;
  int v56;
  int v57;
  BOOL v58;
  int v59;
  unsigned __int8 v60;
  unsigned __int8 v61;
  unsigned __int8 v62;
  unsigned int v63;
  char v64;
  char v65;
  int v66;
  int v67;
  BOOL v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unsigned __int8 *v73;
  uint64_t v74;
  unsigned __int8 v75;
  unsigned __int8 v76;
  unsigned __int8 v77;
  int v78;
  unsigned int v79;
  char v80;
  char v81;
  int v82;
  int v83;
  BOOL v84;
  int v86;
  unsigned __int8 v87;
  unsigned __int8 v88;
  unsigned __int8 v89;
  unsigned __int8 *v90;
  unsigned int v91;
  char v92;
  char v93;
  int v94;
  int v95;
  BOOL v96;
  uint64_t v97;
  void v98[2];
  unsigned __int8 v99;

  if ((a2 & 0x1000000000000000) != 0)
  {
    unsigned __int8 v21 = 0;
    unsigned __int8 v99 = 0;
    goto LABEL_104;
  }
  if ((a2 & 0x2000000000000000) != 0)
  {
    uint64_t v26 = HIBYTE(a2) & 0xF;
    v98[0] = a1;
    v98[1] = a2 & 0xFFFFFFFFFFFFFFLL;
    if (v26)
    {
      if (a1 != 43)
      {
        if (a1 != 45)
        {
          LOBYTE(v86) = 0;
          BOOL v87 = a3 + 55;
          BOOL v88 = a3 + 87;
          if (a3 > 10)
          {
            BOOL v89 = 58;
          }
          else
          {
            BOOL v88 = 97;
            BOOL v87 = 65;
            BOOL v89 = a3 + 48;
          }
          BOOL v90 = (unsigned __int8 *)v98;
          while (1)
          {
            unint64_t v91 = *v90;
            if (v91 < 0x30 || v91 >= v89)
            {
              if (v91 < 0x41 || v91 >= v87)
              {
                unsigned __int8 v21 = 0;
                char v8 = 1;
                if (v91 < 0x61 || v91 >= v88) {
                  goto LABEL_103;
                }
                char v92 = -87;
              }
              else
              {
                char v92 = -55;
              }
            }
            else
            {
              char v92 = -48;
            }
            unsigned __int8 v21 = 0;
            unint64_t v93 = v91 + v92;
            unint64_t v94 = (char)v86 * (char)a3;
            BOOL v95 = (char)(v86 * a3);
            unsigned long long v86 = v95 + v93;
            unint64_t v96 = v86 != (char)(v95 + v93);
            char v8 = 1;
            if (v95 == v94 && !v96)
            {
              char v8 = 0;
              ++v90;
              unsigned __int8 v21 = v86;
              if (--v26) {
                continue;
              }
            }
            goto LABEL_103;
          }
        }
        char v8 = 1;
        uint64_t v27 = specialized Collection.subscript.getter(1, (uint64_t)v98, v26);
        unsigned __int8 v31 = (unsigned __int8 *)specialized UnsafeBufferPointer.init(rebasing:)(v27, v28, v29, v30);
        if (v32)
        {
          unsigned __int8 v33 = a3 + 55;
          int v34 = a3 + 87;
          if (a3 > 10)
          {
            unsigned int v35 = 58;
          }
          else
          {
            int v34 = 97;
            unsigned __int8 v33 = 65;
            unsigned int v35 = a3 + 48;
          }
          if (v31)
          {
            LOBYTE(v36) = 0;
            while (1)
            {
              unsigned __int8 v37 = *v31;
              if (v37 < 0x30 || v37 >= v35)
              {
                if (v37 < 0x41 || v37 >= v33)
                {
                  unsigned __int8 v21 = 0;
                  char v8 = 1;
                  if (v37 < 0x61 || v37 >= v34) {
                    goto LABEL_103;
                  }
                  __int16 v38 = -87;
                }
                else
                {
                  __int16 v38 = -55;
                }
              }
              else
              {
                __int16 v38 = -48;
              }
              unsigned __int8 v21 = 0;
              uint64_t v39 = v37 + v38;
              uint64_t v40 = (char)v36 * (char)a3;
              uint64_t v41 = (char)(v36 * a3);
              char v36 = v41 - v39;
              uint64_t v42 = v36 != (char)(v41 - v39);
              char v8 = 1;
              if (v41 == v40 && !v42)
              {
                char v8 = 0;
                ++v31;
                unsigned __int8 v21 = v36;
                if (--v32) {
                  continue;
                }
              }
              goto LABEL_103;
            }
          }
          goto LABEL_102;
        }
LABEL_125:
        unsigned __int8 v21 = 0;
        goto LABEL_103;
      }
      char v8 = 1;
      unsigned int v69 = specialized Collection.subscript.getter(1, (uint64_t)v98, v26);
      unsigned int v73 = (unsigned __int8 *)specialized UnsafeBufferPointer.init(rebasing:)(v69, v70, v71, v72);
      if (v74)
      {
        unsigned __int8 v75 = a3 + 55;
        unsigned __int8 v76 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v77 = 58;
        }
        else
        {
          unsigned __int8 v76 = 97;
          unsigned __int8 v75 = 65;
          unsigned __int8 v77 = a3 + 48;
        }
        if (v73)
        {
          LOBYTE(v78) = 0;
          while (1)
          {
            char v79 = *v73;
            if (v79 < 0x30 || v79 >= v77)
            {
              if (v79 < 0x41 || v79 >= v75)
              {
                unsigned __int8 v21 = 0;
                char v8 = 1;
                if (v79 < 0x61 || v79 >= v76) {
                  goto LABEL_103;
                }
                __int16 v80 = -87;
              }
              else
              {
                __int16 v80 = -55;
              }
            }
            else
            {
              __int16 v80 = -48;
            }
            unsigned __int8 v21 = 0;
            uint64_t v81 = v79 + v80;
            unint64_t v82 = (char)v78 * (char)a3;
            unsigned __int8 v83 = (char)(v78 * a3);
            unsigned int v78 = v83 + v81;
            unsigned int v84 = v78 != (char)(v83 + v81);
            char v8 = 1;
            if (v83 == v82 && !v84)
            {
              char v8 = 0;
              ++v73;
              unsigned __int8 v21 = v78;
              if (--v74) {
                continue;
              }
            }
            goto LABEL_103;
          }
        }
        goto LABEL_102;
      }
LABEL_126:
      unsigned __int8 v21 = 0;
      goto LABEL_103;
    }
    goto LABEL_124;
  }
  if ((a1 & 0x1000000000000000) != 0)
  {
    unint64_t v5 = (unsigned __int8 *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
    uint64_t v6 = a1 & 0xFFFFFFFFFFFFLL;
    if ((a1 & 0xFFFFFFFFFFFFLL) != 0) {
      goto LABEL_5;
    }
LABEL_124:
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x6F6uLL, 0);
  }
  unint64_t v5 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(a1, a2);
  uint64_t v6 = v97;
  if (v97 <= 0) {
    goto LABEL_124;
  }
LABEL_5:
  int v7 = *v5;
  if (v7 == 43)
  {
    char v8 = 1;
    uint64_t v43 = specialized Collection.subscript.getter(1, (uint64_t)v5, v6);
    unsigned __int8 v47 = (unsigned __int8 *)specialized UnsafeBufferPointer.init(rebasing:)(v43, v44, v45, v46);
    if (v48)
    {
      unsigned int v49 = a3 + 55;
      char v50 = a3 + 87;
      if (a3 > 10)
      {
        __int16 v51 = 58;
      }
      else
      {
        char v50 = 97;
        unsigned int v49 = 65;
        __int16 v51 = a3 + 48;
      }
      if (v47)
      {
        LOBYTE(v52) = 0;
        while (1)
        {
          unsigned __int8 v53 = *v47;
          if (v53 < 0x30 || v53 >= v51)
          {
            if (v53 < 0x41 || v53 >= v49)
            {
              unsigned __int8 v21 = 0;
              char v8 = 1;
              if (v53 < 0x61 || v53 >= v50) {
                goto LABEL_103;
              }
              unsigned __int8 v54 = -87;
            }
            else
            {
              unsigned __int8 v54 = -55;
            }
          }
          else
          {
            unsigned __int8 v54 = -48;
          }
          unsigned __int8 v21 = 0;
          unsigned __int8 v55 = v53 + v54;
          unsigned int v56 = (char)v52 * (char)a3;
          char v57 = (char)(v52 * a3);
          unsigned int v52 = v57 + v55;
          __int16 v58 = v52 != (char)(v57 + v55);
          char v8 = 1;
          if (v57 == v56 && !v58)
          {
            char v8 = 0;
            ++v47;
            unsigned __int8 v21 = v52;
            if (--v48) {
              continue;
            }
          }
          goto LABEL_103;
        }
      }
      goto LABEL_102;
    }
    goto LABEL_126;
  }
  if (v7 != 45)
  {
    LOBYTE(v59) = 0;
    uint64_t v60 = a3 + 55;
    uint64_t v61 = a3 + 87;
    if (a3 > 10)
    {
      uint64_t v62 = 58;
    }
    else
    {
      uint64_t v61 = 97;
      uint64_t v60 = 65;
      uint64_t v62 = a3 + 48;
    }
    while (1)
    {
      BOOL v63 = *v5;
      if (v63 < 0x30 || v63 >= v62)
      {
        if (v63 < 0x41 || v63 >= v60)
        {
          unsigned __int8 v21 = 0;
          char v8 = 1;
          if (v63 < 0x61 || v63 >= v61) {
            goto LABEL_103;
          }
          uint64_t v64 = -87;
        }
        else
        {
          uint64_t v64 = -55;
        }
      }
      else
      {
        uint64_t v64 = -48;
      }
      unsigned __int8 v21 = 0;
      unsigned __int8 v65 = v63 + v64;
      unsigned __int8 v66 = (char)v59 * (char)a3;
      unsigned __int8 v67 = (char)(v59 * a3);
      uint64_t v59 = v67 + v65;
      unsigned int v68 = v59 != (char)(v67 + v65);
      char v8 = 1;
      if (v67 == v66 && !v68)
      {
        char v8 = 0;
        ++v5;
        unsigned __int8 v21 = v59;
        if (--v6) {
          continue;
        }
      }
      goto LABEL_103;
    }
  }
  char v8 = 1;
  uint64_t v9 = specialized Collection.subscript.getter(1, (uint64_t)v5, v6);
  uint64_t v13 = (unsigned __int8 *)specialized UnsafeBufferPointer.init(rebasing:)(v9, v10, v11, v12);
  if (!v14) {
    goto LABEL_125;
  }
  unsigned __int8 v15 = a3 + 55;
  unsigned __int8 v16 = a3 + 87;
  if (a3 > 10)
  {
    unsigned __int8 v17 = 58;
  }
  else
  {
    unsigned __int8 v16 = 97;
    unsigned __int8 v15 = 65;
    unsigned __int8 v17 = a3 + 48;
  }
  if (v13)
  {
    LOBYTE(v18) = 0;
    while (1)
    {
      unsigned int v19 = *v13;
      if (v19 < 0x30 || v19 >= v17)
      {
        if (v19 < 0x41 || v19 >= v15)
        {
          unsigned __int8 v21 = 0;
          char v8 = 1;
          if (v19 < 0x61 || v19 >= v16) {
            goto LABEL_103;
          }
          char v20 = -87;
        }
        else
        {
          char v20 = -55;
        }
      }
      else
      {
        char v20 = -48;
      }
      unsigned __int8 v21 = 0;
      unsigned __int8 v22 = v19 + v20;
      __int16 v23 = (char)v18 * (char)a3;
      uint64_t v24 = (char)(v18 * a3);
      int v18 = v24 - v22;
      uint64_t v25 = v18 != (char)(v24 - v22);
      char v8 = 1;
      if (v24 == v23 && !v25)
      {
        char v8 = 0;
        ++v13;
        unsigned __int8 v21 = v18;
        if (--v14) {
          continue;
        }
      }
      goto LABEL_103;
    }
  }
LABEL_102:
  unsigned __int8 v21 = 0;
  char v8 = 0;
LABEL_103:
  unsigned __int8 v99 = v8;
LABEL_104:
  LOBYTE(v98[0]) = (a2 & 0x1000000000000000) != 0;
  return v21 | (v99 << 8) | (LOBYTE(v98[0]) << 16);
}

{
  unsigned __int8 *v5;
  uint64_t v6;
  int v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 *v13;
  uint64_t v14;
  unsigned __int8 v15;
  unsigned __int8 v16;
  unsigned __int8 v17;
  int v18;
  unsigned int v19;
  char v20;
  unsigned __int16 v21;
  unsigned __int8 v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned __int8 *v29;
  uint64_t v30;
  unsigned __int8 v31;
  unsigned __int8 v32;
  unsigned __int8 v33;
  int v34;
  unsigned int v35;
  char v36;
  unsigned __int8 v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned __int8 *v43;
  uint64_t v44;
  unsigned __int8 v45;
  unsigned __int8 v46;
  unsigned __int8 v47;
  int v48;
  unsigned int v49;
  char v50;
  int v51;
  int v52;
  unsigned __int8 v53;
  unsigned __int8 v54;
  unsigned __int8 v55;
  unsigned int v56;
  char v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unsigned __int8 *v63;
  uint64_t v64;
  unsigned __int8 v65;
  unsigned __int8 v66;
  unsigned __int8 v67;
  int v68;
  unsigned int v69;
  char v70;
  int v71;
  int v73;
  unsigned __int8 v74;
  unsigned __int8 v75;
  unsigned __int8 v76;
  unsigned __int8 *v77;
  unsigned int v78;
  char v79;
  int v80;
  uint64_t v81;
  void v82[2];
  unsigned __int8 v83;

  if ((a2 & 0x1000000000000000) != 0)
  {
    unsigned __int8 v21 = 0;
    unsigned __int8 v83 = 0;
    goto LABEL_104;
  }
  if ((a2 & 0x2000000000000000) != 0)
  {
    uint64_t v24 = HIBYTE(a2) & 0xF;
    v82[0] = a1;
    v82[1] = a2 & 0xFFFFFFFFFFFFFFLL;
    if (v24)
    {
      if (a1 != 43)
      {
        if (a1 != 45)
        {
          LOWORD(v73) = 0;
          unsigned __int8 v74 = a3 + 55;
          unsigned __int8 v75 = a3 + 87;
          if (a3 > 10)
          {
            unsigned __int8 v76 = 58;
          }
          else
          {
            unsigned __int8 v75 = 97;
            unsigned __int8 v74 = 65;
            unsigned __int8 v76 = a3 + 48;
          }
          unsigned __int8 v77 = (unsigned __int8 *)v82;
          while (1)
          {
            unsigned int v78 = *v77;
            if (v78 < 0x30 || v78 >= v76)
            {
              if (v78 < 0x41 || v78 >= v74)
              {
                unsigned __int8 v21 = 0;
                char v8 = 1;
                if (v78 < 0x61 || v78 >= v75) {
                  goto LABEL_103;
                }
                char v79 = -87;
              }
              else
              {
                char v79 = -55;
              }
            }
            else
            {
              char v79 = -48;
            }
            unsigned __int8 v21 = 0;
            __int16 v80 = (unsigned __int16)v73 * (unsigned __int16)a3;
            char v8 = 1;
            if ((v80 & 0xFFFF0000) == 0)
            {
              unsigned int v73 = (unsigned __int16)v80 + (v78 + v79);
              if ((v73 & 0x10000) == 0)
              {
                char v8 = 0;
                ++v77;
                unsigned __int8 v21 = v73;
                if (--v24) {
                  continue;
                }
              }
            }
            goto LABEL_103;
          }
        }
        char v8 = 1;
        uint64_t v25 = specialized Collection.subscript.getter(1, (uint64_t)v82, v24);
        uint64_t v29 = (unsigned __int8 *)specialized UnsafeBufferPointer.init(rebasing:)(v25, v26, v27, v28);
        if (v30)
        {
          unsigned __int8 v31 = a3 + 55;
          unsigned __int8 v32 = a3 + 87;
          if (a3 > 10)
          {
            unsigned __int8 v33 = 58;
          }
          else
          {
            unsigned __int8 v32 = 97;
            unsigned __int8 v31 = 65;
            unsigned __int8 v33 = a3 + 48;
          }
          if (v29)
          {
            LOWORD(v34) = 0;
            while (1)
            {
              unsigned int v35 = *v29;
              if (v35 < 0x30 || v35 >= v33)
              {
                if (v35 < 0x41 || v35 >= v31)
                {
                  unsigned __int8 v21 = 0;
                  char v8 = 1;
                  if (v35 < 0x61 || v35 >= v32) {
                    goto LABEL_103;
                  }
                  char v36 = -87;
                }
                else
                {
                  char v36 = -55;
                }
              }
              else
              {
                char v36 = -48;
              }
              unsigned __int8 v21 = 0;
              unsigned __int8 v37 = v35 + v36;
              __int16 v38 = (unsigned __int16)v34 * (unsigned __int16)a3;
              int v34 = (unsigned __int16)(v34 * a3) - v37;
              char v8 = 1;
              if ((v38 & 0xFFFF0000) == 0 && (v34 & 0xFFFF0000) == 0)
              {
                char v8 = 0;
                ++v29;
                unsigned __int8 v21 = v34;
                if (--v30) {
                  continue;
                }
              }
              goto LABEL_103;
            }
          }
          goto LABEL_102;
        }
LABEL_125:
        unsigned __int8 v21 = 0;
        goto LABEL_103;
      }
      char v8 = 1;
      uint64_t v59 = specialized Collection.subscript.getter(1, (uint64_t)v82, v24);
      BOOL v63 = (unsigned __int8 *)specialized UnsafeBufferPointer.init(rebasing:)(v59, v60, v61, v62);
      if (v64)
      {
        unsigned __int8 v65 = a3 + 55;
        unsigned __int8 v66 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v67 = 58;
        }
        else
        {
          unsigned __int8 v66 = 97;
          unsigned __int8 v65 = 65;
          unsigned __int8 v67 = a3 + 48;
        }
        if (v63)
        {
          LOWORD(v68) = 0;
          while (1)
          {
            unsigned int v69 = *v63;
            if (v69 < 0x30 || v69 >= v67)
            {
              if (v69 < 0x41 || v69 >= v65)
              {
                unsigned __int8 v21 = 0;
                char v8 = 1;
                if (v69 < 0x61 || v69 >= v66) {
                  goto LABEL_103;
                }
                char v70 = -87;
              }
              else
              {
                char v70 = -55;
              }
            }
            else
            {
              char v70 = -48;
            }
            unsigned __int8 v21 = 0;
            __int16 v71 = (unsigned __int16)v68 * (unsigned __int16)a3;
            char v8 = 1;
            if ((v71 & 0xFFFF0000) == 0)
            {
              unsigned int v68 = (unsigned __int16)v71 + (v69 + v70);
              if ((v68 & 0x10000) == 0)
              {
                char v8 = 0;
                ++v63;
                unsigned __int8 v21 = v68;
                if (--v64) {
                  continue;
                }
              }
            }
            goto LABEL_103;
          }
        }
        goto LABEL_102;
      }
LABEL_126:
      unsigned __int8 v21 = 0;
      goto LABEL_103;
    }
    goto LABEL_124;
  }
  if ((a1 & 0x1000000000000000) != 0)
  {
    unint64_t v5 = (unsigned __int8 *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
    uint64_t v6 = a1 & 0xFFFFFFFFFFFFLL;
    if ((a1 & 0xFFFFFFFFFFFFLL) != 0) {
      goto LABEL_5;
    }
LABEL_124:
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x6F6uLL, 0);
  }
  unint64_t v5 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(a1, a2);
  uint64_t v6 = v81;
  if (v81 <= 0) {
    goto LABEL_124;
  }
LABEL_5:
  int v7 = *v5;
  if (v7 == 43)
  {
    char v8 = 1;
    uint64_t v39 = specialized Collection.subscript.getter(1, (uint64_t)v5, v6);
    uint64_t v43 = (unsigned __int8 *)specialized UnsafeBufferPointer.init(rebasing:)(v39, v40, v41, v42);
    if (v44)
    {
      unsigned __int8 v45 = a3 + 55;
      unsigned __int8 v46 = a3 + 87;
      if (a3 > 10)
      {
        unsigned __int8 v47 = 58;
      }
      else
      {
        unsigned __int8 v46 = 97;
        unsigned __int8 v45 = 65;
        unsigned __int8 v47 = a3 + 48;
      }
      if (v43)
      {
        LOWORD(v48) = 0;
        while (1)
        {
          unsigned int v49 = *v43;
          if (v49 < 0x30 || v49 >= v47)
          {
            if (v49 < 0x41 || v49 >= v45)
            {
              unsigned __int8 v21 = 0;
              char v8 = 1;
              if (v49 < 0x61 || v49 >= v46) {
                goto LABEL_103;
              }
              char v50 = -87;
            }
            else
            {
              char v50 = -55;
            }
          }
          else
          {
            char v50 = -48;
          }
          unsigned __int8 v21 = 0;
          __int16 v51 = (unsigned __int16)v48 * (unsigned __int16)a3;
          char v8 = 1;
          if ((v51 & 0xFFFF0000) == 0)
          {
            unsigned int v48 = (unsigned __int16)v51 + (v49 + v50);
            if ((v48 & 0x10000) == 0)
            {
              char v8 = 0;
              ++v43;
              unsigned __int8 v21 = v48;
              if (--v44) {
                continue;
              }
            }
          }
          goto LABEL_103;
        }
      }
      goto LABEL_102;
    }
    goto LABEL_126;
  }
  if (v7 != 45)
  {
    LOWORD(v52) = 0;
    unsigned __int8 v53 = a3 + 55;
    unsigned __int8 v54 = a3 + 87;
    if (a3 > 10)
    {
      unsigned __int8 v55 = 58;
    }
    else
    {
      unsigned __int8 v54 = 97;
      unsigned __int8 v53 = 65;
      unsigned __int8 v55 = a3 + 48;
    }
    while (1)
    {
      unsigned int v56 = *v5;
      if (v56 < 0x30 || v56 >= v55)
      {
        if (v56 < 0x41 || v56 >= v53)
        {
          unsigned __int8 v21 = 0;
          char v8 = 1;
          if (v56 < 0x61 || v56 >= v54) {
            goto LABEL_103;
          }
          char v57 = -87;
        }
        else
        {
          char v57 = -55;
        }
      }
      else
      {
        char v57 = -48;
      }
      unsigned __int8 v21 = 0;
      __int16 v58 = (unsigned __int16)v52 * (unsigned __int16)a3;
      char v8 = 1;
      if ((v58 & 0xFFFF0000) == 0)
      {
        unsigned int v52 = (unsigned __int16)v58 + (v56 + v57);
        if ((v52 & 0x10000) == 0)
        {
          char v8 = 0;
          ++v5;
          unsigned __int8 v21 = v52;
          if (--v6) {
            continue;
          }
        }
      }
      goto LABEL_103;
    }
  }
  char v8 = 1;
  uint64_t v9 = specialized Collection.subscript.getter(1, (uint64_t)v5, v6);
  uint64_t v13 = (unsigned __int8 *)specialized UnsafeBufferPointer.init(rebasing:)(v9, v10, v11, v12);
  if (!v14) {
    goto LABEL_125;
  }
  unsigned __int8 v15 = a3 + 55;
  unsigned __int8 v16 = a3 + 87;
  if (a3 > 10)
  {
    unsigned __int8 v17 = 58;
  }
  else
  {
    unsigned __int8 v16 = 97;
    unsigned __int8 v15 = 65;
    unsigned __int8 v17 = a3 + 48;
  }
  if (v13)
  {
    LOWORD(v18) = 0;
    while (1)
    {
      unsigned int v19 = *v13;
      if (v19 < 0x30 || v19 >= v17)
      {
        if (v19 < 0x41 || v19 >= v15)
        {
          unsigned __int8 v21 = 0;
          char v8 = 1;
          if (v19 < 0x61 || v19 >= v16) {
            goto LABEL_103;
          }
          char v20 = -87;
        }
        else
        {
          char v20 = -55;
        }
      }
      else
      {
        char v20 = -48;
      }
      unsigned __int8 v21 = 0;
      unsigned __int8 v22 = v19 + v20;
      __int16 v23 = (unsigned __int16)v18 * (unsigned __int16)a3;
      int v18 = (unsigned __int16)(v18 * a3) - v22;
      char v8 = 1;
      if ((v23 & 0xFFFF0000) == 0 && (v18 & 0xFFFF0000) == 0)
      {
        char v8 = 0;
        ++v13;
        unsigned __int8 v21 = v18;
        if (--v14) {
          continue;
        }
      }
      goto LABEL_103;
    }
  }
LABEL_102:
  unsigned __int8 v21 = 0;
  char v8 = 0;
LABEL_103:
  unsigned __int8 v83 = v8;
LABEL_104:
  LOBYTE(v82[0]) = (a2 & 0x1000000000000000) != 0;
  return v21 | (v83 << 16) | (LOBYTE(v82[0]) << 24);
}

{
  unsigned __int8 *v5;
  uint64_t v6;
  int v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 *v13;
  uint64_t v14;
  unsigned __int8 v15;
  unsigned __int8 v16;
  unsigned __int8 v17;
  int v18;
  unsigned int v19;
  char v20;
  unsigned __int16 v21;
  unsigned __int8 v22;
  int v23;
  int v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned __int8 *v31;
  uint64_t v32;
  unsigned __int8 v33;
  unsigned __int8 v34;
  unsigned __int8 v35;
  int v36;
  unsigned int v37;
  char v38;
  unsigned __int8 v39;
  int v40;
  int v41;
  BOOL v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned __int8 *v47;
  uint64_t v48;
  unsigned __int8 v49;
  unsigned __int8 v50;
  unsigned __int8 v51;
  int v52;
  unsigned int v53;
  char v54;
  unsigned __int8 v55;
  int v56;
  int v57;
  BOOL v58;
  int v59;
  unsigned __int8 v60;
  unsigned __int8 v61;
  unsigned __int8 v62;
  unsigned int v63;
  char v64;
  unsigned __int8 v65;
  int v66;
  int v67;
  BOOL v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unsigned __int8 *v73;
  uint64_t v74;
  unsigned __int8 v75;
  unsigned __int8 v76;
  unsigned __int8 v77;
  int v78;
  unsigned int v79;
  char v80;
  unsigned __int8 v81;
  int v82;
  int v83;
  BOOL v84;
  int v86;
  unsigned __int8 v87;
  unsigned __int8 v88;
  unsigned __int8 v89;
  unsigned __int8 *v90;
  unsigned int v91;
  char v92;
  unsigned __int8 v93;
  int v94;
  int v95;
  BOOL v96;
  uint64_t v97;
  void v98[2];
  unsigned __int8 v99;

  if ((a2 & 0x1000000000000000) != 0)
  {
    unsigned __int8 v21 = 0;
    unsigned __int8 v99 = 0;
    goto LABEL_104;
  }
  if ((a2 & 0x2000000000000000) != 0)
  {
    uint64_t v26 = HIBYTE(a2) & 0xF;
    v98[0] = a1;
    v98[1] = a2 & 0xFFFFFFFFFFFFFFLL;
    if (v26)
    {
      if (a1 != 43)
      {
        if (a1 != 45)
        {
          LOWORD(v86) = 0;
          BOOL v87 = a3 + 55;
          BOOL v88 = a3 + 87;
          if (a3 > 10)
          {
            BOOL v89 = 58;
          }
          else
          {
            BOOL v88 = 97;
            BOOL v87 = 65;
            BOOL v89 = a3 + 48;
          }
          BOOL v90 = (unsigned __int8 *)v98;
          while (1)
          {
            unint64_t v91 = *v90;
            if (v91 < 0x30 || v91 >= v89)
            {
              if (v91 < 0x41 || v91 >= v87)
              {
                unsigned __int8 v21 = 0;
                char v8 = 1;
                if (v91 < 0x61 || v91 >= v88) {
                  goto LABEL_103;
                }
                char v92 = -87;
              }
              else
              {
                char v92 = -55;
              }
            }
            else
            {
              char v92 = -48;
            }
            unsigned __int8 v21 = 0;
            unint64_t v93 = v91 + v92;
            unint64_t v94 = (__int16)v86 * (__int16)a3;
            BOOL v95 = (__int16)(v86 * a3);
            unsigned long long v86 = v95 + v93;
            unint64_t v96 = v86 != (__int16)(v95 + v93);
            char v8 = 1;
            if (v95 == v94 && !v96)
            {
              char v8 = 0;
              ++v90;
              unsigned __int8 v21 = v86;
              if (--v26) {
                continue;
              }
            }
            goto LABEL_103;
          }
        }
        char v8 = 1;
        uint64_t v27 = specialized Collection.subscript.getter(1, (uint64_t)v98, v26);
        unsigned __int8 v31 = (unsigned __int8 *)specialized UnsafeBufferPointer.init(rebasing:)(v27, v28, v29, v30);
        if (v32)
        {
          unsigned __int8 v33 = a3 + 55;
          int v34 = a3 + 87;
          if (a3 > 10)
          {
            unsigned int v35 = 58;
          }
          else
          {
            int v34 = 97;
            unsigned __int8 v33 = 65;
            unsigned int v35 = a3 + 48;
          }
          if (v31)
          {
            LOWORD(v36) = 0;
            while (1)
            {
              unsigned __int8 v37 = *v31;
              if (v37 < 0x30 || v37 >= v35)
              {
                if (v37 < 0x41 || v37 >= v33)
                {
                  unsigned __int8 v21 = 0;
                  char v8 = 1;
                  if (v37 < 0x61 || v37 >= v34) {
                    goto LABEL_103;
                  }
                  __int16 v38 = -87;
                }
                else
                {
                  __int16 v38 = -55;
                }
              }
              else
              {
                __int16 v38 = -48;
              }
              unsigned __int8 v21 = 0;
              uint64_t v39 = v37 + v38;
              uint64_t v40 = (__int16)v36 * (__int16)a3;
              uint64_t v41 = (__int16)(v36 * a3);
              char v36 = v41 - v39;
              uint64_t v42 = v36 != (__int16)(v41 - v39);
              char v8 = 1;
              if (v41 == v40 && !v42)
              {
                char v8 = 0;
                ++v31;
                unsigned __int8 v21 = v36;
                if (--v32) {
                  continue;
                }
              }
              goto LABEL_103;
            }
          }
          goto LABEL_102;
        }
LABEL_125:
        unsigned __int8 v21 = 0;
        goto LABEL_103;
      }
      char v8 = 1;
      unsigned int v69 = specialized Collection.subscript.getter(1, (uint64_t)v98, v26);
      unsigned int v73 = (unsigned __int8 *)specialized UnsafeBufferPointer.init(rebasing:)(v69, v70, v71, v72);
      if (v74)
      {
        unsigned __int8 v75 = a3 + 55;
        unsigned __int8 v76 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v77 = 58;
        }
        else
        {
          unsigned __int8 v76 = 97;
          unsigned __int8 v75 = 65;
          unsigned __int8 v77 = a3 + 48;
        }
        if (v73)
        {
          LOWORD(v78) = 0;
          while (1)
          {
            char v79 = *v73;
            if (v79 < 0x30 || v79 >= v77)
            {
              if (v79 < 0x41 || v79 >= v75)
              {
                unsigned __int8 v21 = 0;
                char v8 = 1;
                if (v79 < 0x61 || v79 >= v76) {
                  goto LABEL_103;
                }
                __int16 v80 = -87;
              }
              else
              {
                __int16 v80 = -55;
              }
            }
            else
            {
              __int16 v80 = -48;
            }
            unsigned __int8 v21 = 0;
            uint64_t v81 = v79 + v80;
            unint64_t v82 = (__int16)v78 * (__int16)a3;
            unsigned __int8 v83 = (__int16)(v78 * a3);
            unsigned int v78 = v83 + v81;
            unsigned int v84 = v78 != (__int16)(v83 + v81);
            char v8 = 1;
            if (v83 == v82 && !v84)
            {
              char v8 = 0;
              ++v73;
              unsigned __int8 v21 = v78;
              if (--v74) {
                continue;
              }
            }
            goto LABEL_103;
          }
        }
        goto LABEL_102;
      }
LABEL_126:
      unsigned __int8 v21 = 0;
      goto LABEL_103;
    }
    goto LABEL_124;
  }
  if ((a1 & 0x1000000000000000) != 0)
  {
    unint64_t v5 = (unsigned __int8 *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
    uint64_t v6 = a1 & 0xFFFFFFFFFFFFLL;
    if ((a1 & 0xFFFFFFFFFFFFLL) != 0) {
      goto LABEL_5;
    }
LABEL_124:
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x6F6uLL, 0);
  }
  unint64_t v5 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(a1, a2);
  uint64_t v6 = v97;
  if (v97 <= 0) {
    goto LABEL_124;
  }
LABEL_5:
  int v7 = *v5;
  if (v7 == 43)
  {
    char v8 = 1;
    uint64_t v43 = specialized Collection.subscript.getter(1, (uint64_t)v5, v6);
    unsigned __int8 v47 = (unsigned __int8 *)specialized UnsafeBufferPointer.init(rebasing:)(v43, v44, v45, v46);
    if (v48)
    {
      unsigned int v49 = a3 + 55;
      char v50 = a3 + 87;
      if (a3 > 10)
      {
        __int16 v51 = 58;
      }
      else
      {
        char v50 = 97;
        unsigned int v49 = 65;
        __int16 v51 = a3 + 48;
      }
      if (v47)
      {
        LOWORD(v52) = 0;
        while (1)
        {
          unsigned __int8 v53 = *v47;
          if (v53 < 0x30 || v53 >= v51)
          {
            if (v53 < 0x41 || v53 >= v49)
            {
              unsigned __int8 v21 = 0;
              char v8 = 1;
              if (v53 < 0x61 || v53 >= v50) {
                goto LABEL_103;
              }
              unsigned __int8 v54 = -87;
            }
            else
            {
              unsigned __int8 v54 = -55;
            }
          }
          else
          {
            unsigned __int8 v54 = -48;
          }
          unsigned __int8 v21 = 0;
          unsigned __int8 v55 = v53 + v54;
          unsigned int v56 = (__int16)v52 * (__int16)a3;
          char v57 = (__int16)(v52 * a3);
          unsigned int v52 = v57 + v55;
          __int16 v58 = v52 != (__int16)(v57 + v55);
          char v8 = 1;
          if (v57 == v56 && !v58)
          {
            char v8 = 0;
            ++v47;
            unsigned __int8 v21 = v52;
            if (--v48) {
              continue;
            }
          }
          goto LABEL_103;
        }
      }
      goto LABEL_102;
    }
    goto LABEL_126;
  }
  if (v7 != 45)
  {
    LOWORD(v59) = 0;
    uint64_t v60 = a3 + 55;
    uint64_t v61 = a3 + 87;
    if (a3 > 10)
    {
      uint64_t v62 = 58;
    }
    else
    {
      uint64_t v61 = 97;
      uint64_t v60 = 65;
      uint64_t v62 = a3 + 48;
    }
    while (1)
    {
      BOOL v63 = *v5;
      if (v63 < 0x30 || v63 >= v62)
      {
        if (v63 < 0x41 || v63 >= v60)
        {
          unsigned __int8 v21 = 0;
          char v8 = 1;
          if (v63 < 0x61 || v63 >= v61) {
            goto LABEL_103;
          }
          uint64_t v64 = -87;
        }
        else
        {
          uint64_t v64 = -55;
        }
      }
      else
      {
        uint64_t v64 = -48;
      }
      unsigned __int8 v21 = 0;
      unsigned __int8 v65 = v63 + v64;
      unsigned __int8 v66 = (__int16)v59 * (__int16)a3;
      unsigned __int8 v67 = (__int16)(v59 * a3);
      uint64_t v59 = v67 + v65;
      unsigned int v68 = v59 != (__int16)(v67 + v65);
      char v8 = 1;
      if (v67 == v66 && !v68)
      {
        char v8 = 0;
        ++v5;
        unsigned __int8 v21 = v59;
        if (--v6) {
          continue;
        }
      }
      goto LABEL_103;
    }
  }
  char v8 = 1;
  uint64_t v9 = specialized Collection.subscript.getter(1, (uint64_t)v5, v6);
  uint64_t v13 = (unsigned __int8 *)specialized UnsafeBufferPointer.init(rebasing:)(v9, v10, v11, v12);
  if (!v14) {
    goto LABEL_125;
  }
  unsigned __int8 v15 = a3 + 55;
  unsigned __int8 v16 = a3 + 87;
  if (a3 > 10)
  {
    unsigned __int8 v17 = 58;
  }
  else
  {
    unsigned __int8 v16 = 97;
    unsigned __int8 v15 = 65;
    unsigned __int8 v17 = a3 + 48;
  }
  if (v13)
  {
    LOWORD(v18) = 0;
    while (1)
    {
      unsigned int v19 = *v13;
      if (v19 < 0x30 || v19 >= v17)
      {
        if (v19 < 0x41 || v19 >= v15)
        {
          unsigned __int8 v21 = 0;
          char v8 = 1;
          if (v19 < 0x61 || v19 >= v16) {
            goto LABEL_103;
          }
          char v20 = -87;
        }
        else
        {
          char v20 = -55;
        }
      }
      else
      {
        char v20 = -48;
      }
      unsigned __int8 v21 = 0;
      unsigned __int8 v22 = v19 + v20;
      __int16 v23 = (__int16)v18 * (__int16)a3;
      uint64_t v24 = (__int16)(v18 * a3);
      int v18 = v24 - v22;
      uint64_t v25 = v18 != (__int16)(v24 - v22);
      char v8 = 1;
      if (v24 == v23 && !v25)
      {
        char v8 = 0;
        ++v13;
        unsigned __int8 v21 = v18;
        if (--v14) {
          continue;
        }
      }
      goto LABEL_103;
    }
  }
LABEL_102:
  unsigned __int8 v21 = 0;
  char v8 = 0;
LABEL_103:
  unsigned __int8 v99 = v8;
LABEL_104:
  LOBYTE(v98[0]) = (a2 & 0x1000000000000000) != 0;
  return v21 | (v99 << 16) | (LOBYTE(v98[0]) << 24);
}

{
  unsigned __int8 *v5;
  uint64_t v6;
  int v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 *v15;
  unsigned __int8 v16;
  unsigned __int8 v17;
  unsigned __int8 v18;
  uint64_t v19;
  unsigned int v20;
  char v21;
  uint64_t result;
  unsigned __int8 v23;
  uint64_t v24;
  BOOL v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned __int8 *v34;
  unsigned __int8 v35;
  unsigned __int8 v36;
  unsigned __int8 v37;
  uint64_t v38;
  unsigned int v39;
  char v40;
  unsigned __int8 v41;
  uint64_t v42;
  BOOL v43;
  BOOL v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unsigned __int8 *v51;
  unsigned __int8 v52;
  unsigned __int8 v53;
  unsigned __int8 v54;
  uint64_t v55;
  unsigned int v56;
  char v57;
  unsigned __int8 v58;
  uint64_t v59;
  BOOL v60;
  BOOL v61;
  uint64_t v62;
  unsigned __int8 v63;
  unsigned __int8 v64;
  unsigned __int8 v65;
  unsigned int v66;
  char v67;
  unsigned __int8 v68;
  uint64_t v69;
  BOOL v70;
  BOOL v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unsigned __int8 *v78;
  unsigned __int8 v79;
  unsigned __int8 v80;
  unsigned __int8 v81;
  uint64_t v82;
  unsigned int v83;
  char v84;
  unsigned __int8 v85;
  uint64_t v86;
  BOOL v87;
  BOOL v88;
  uint64_t v89;
  unsigned __int8 v90;
  unsigned __int8 v91;
  unsigned __int8 v92;
  unsigned __int8 *v93;
  unsigned int v94;
  char v95;
  unsigned __int8 v96;
  uint64_t v97;
  BOOL v98;
  BOOL v99;
  uint64_t v100;
  void v101[2];
  char v102;

  if ((a2 & 0x1000000000000000) != 0)
  {
    unint64_t result = 0;
    unint64_t v102 = 0;
    goto LABEL_119;
  }
  if ((a2 & 0x2000000000000000) == 0)
  {
    if ((a1 & 0x1000000000000000) != 0)
    {
      unint64_t v5 = (unsigned __int8 *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
      uint64_t v6 = a1 & 0xFFFFFFFFFFFFLL;
      if ((a1 & 0xFFFFFFFFFFFFLL) != 0) {
        goto LABEL_5;
      }
    }
    else
    {
      unint64_t v5 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(a1, a2);
      uint64_t v6 = v100;
      if (v100 > 0)
      {
LABEL_5:
        int v7 = *v5;
        if (v7 != 43)
        {
          if (v7 != 45)
          {
            uint64_t v62 = 0;
            BOOL v63 = a3 + 48;
            uint64_t v64 = a3 + 55;
            unsigned __int8 v65 = a3 + 87;
            if (a3 > 10)
            {
              BOOL v63 = 58;
            }
            else
            {
              unsigned __int8 v65 = 97;
              uint64_t v64 = 65;
            }
            do
            {
              unsigned __int8 v66 = *v5;
              if (v66 < 0x30 || v66 >= v63)
              {
                if (v66 < 0x41 || v66 >= v64)
                {
                  unint64_t result = 0;
                  char v8 = 1;
                  if (v66 < 0x61 || v66 >= v65) {
                    goto LABEL_118;
                  }
                  unsigned __int8 v67 = -87;
                }
                else
                {
                  unsigned __int8 v67 = -55;
                }
              }
              else
              {
                unsigned __int8 v67 = -48;
              }
              unint64_t result = 0;
              unsigned int v68 = v66 + v67;
              unsigned int v69 = v62 * a3;
              char v70 = (unsigned __int128)(v62 * (__int128)a3) >> 64 != (v62 * a3) >> 63;
              uint64_t v62 = v62 * a3 + v68;
              __int16 v71 = __OFADD__(v69, v68);
              char v8 = 1;
              if (v70) {
                break;
              }
              if (v71) {
                break;
              }
              char v8 = 0;
              ++v5;
              unint64_t result = v62;
              --v6;
            }
            while (v6);
            goto LABEL_118;
          }
          char v8 = 1;
          uint64_t v9 = specialized Collection.subscript.getter(1, (uint64_t)v5, v6);
          uint64_t v13 = specialized UnsafeBufferPointer.init(rebasing:)(v9, v10, v11, v12);
          if (v14)
          {
            unsigned __int8 v15 = (unsigned __int8 *)v13;
            unsigned __int8 v16 = a3 + 48;
            unsigned __int8 v17 = a3 + 55;
            int v18 = a3 + 87;
            if (a3 > 10)
            {
              unsigned __int8 v16 = 58;
            }
            else
            {
              int v18 = 97;
              unsigned __int8 v17 = 65;
            }
            if (v13)
            {
              unsigned int v19 = 0;
              do
              {
                char v20 = *v15;
                if (v20 < 0x30 || v20 >= v16)
                {
                  if (v20 < 0x41 || v20 >= v17)
                  {
                    unint64_t result = 0;
                    char v8 = 1;
                    if (v20 < 0x61 || v20 >= v18) {
                      goto LABEL_118;
                    }
                    unsigned __int8 v21 = -87;
                  }
                  else
                  {
                    unsigned __int8 v21 = -55;
                  }
                }
                else
                {
                  unsigned __int8 v21 = -48;
                }
                unint64_t result = 0;
                __int16 v23 = v20 + v21;
                uint64_t v24 = v19 * a3;
                uint64_t v25 = (unsigned __int128)(v19 * (__int128)a3) >> 64 != (v19 * a3) >> 63;
                unsigned int v19 = v19 * a3 - v23;
                uint64_t v26 = __OFSUB__(v24, v23);
                char v8 = 1;
                if (v25) {
                  break;
                }
                if (v26) {
                  break;
                }
                char v8 = 0;
                ++v15;
                unint64_t result = v19;
                --v14;
              }
              while (v14);
              goto LABEL_118;
            }
            goto LABEL_117;
          }
LABEL_143:
          unint64_t result = 0;
          goto LABEL_118;
        }
        char v8 = 1;
        unsigned __int8 v45 = specialized Collection.subscript.getter(1, (uint64_t)v5, v6);
        unsigned int v49 = specialized UnsafeBufferPointer.init(rebasing:)(v45, v46, v47, v48);
        if (v50)
        {
          __int16 v51 = (unsigned __int8 *)v49;
          unsigned int v52 = a3 + 48;
          unsigned __int8 v53 = a3 + 55;
          unsigned __int8 v54 = a3 + 87;
          if (a3 > 10)
          {
            unsigned int v52 = 58;
          }
          else
          {
            unsigned __int8 v54 = 97;
            unsigned __int8 v53 = 65;
          }
          if (v49)
          {
            unsigned __int8 v55 = 0;
            do
            {
              unsigned int v56 = *v51;
              if (v56 < 0x30 || v56 >= v52)
              {
                if (v56 < 0x41 || v56 >= v53)
                {
                  unint64_t result = 0;
                  char v8 = 1;
                  if (v56 < 0x61 || v56 >= v54) {
                    goto LABEL_118;
                  }
                  char v57 = -87;
                }
                else
                {
                  char v57 = -55;
                }
              }
              else
              {
                char v57 = -48;
              }
              unint64_t result = 0;
              __int16 v58 = v56 + v57;
              uint64_t v59 = v55 * a3;
              uint64_t v60 = (unsigned __int128)(v55 * (__int128)a3) >> 64 != (v55 * a3) >> 63;
              unsigned __int8 v55 = v55 * a3 + v58;
              uint64_t v61 = __OFADD__(v59, v58);
              char v8 = 1;
              if (v60) {
                break;
              }
              if (v61) {
                break;
              }
              char v8 = 0;
              ++v51;
              unint64_t result = v55;
              --v50;
            }
            while (v50);
            goto LABEL_118;
          }
          goto LABEL_117;
        }
LABEL_144:
        unint64_t result = 0;
        goto LABEL_118;
      }
    }
LABEL_142:
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x6F6uLL, 0);
  }
  uint64_t v27 = HIBYTE(a2) & 0xF;
  v101[0] = a1;
  v101[1] = a2 & 0xFFFFFFFFFFFFFFLL;
  if (!v27) {
    goto LABEL_142;
  }
  if (a1 == 43)
  {
    char v8 = 1;
    uint64_t v72 = specialized Collection.subscript.getter(1, (uint64_t)v101, v27);
    unsigned __int8 v76 = specialized UnsafeBufferPointer.init(rebasing:)(v72, v73, v74, v75);
    if (!v77) {
      goto LABEL_144;
    }
    unsigned int v78 = (unsigned __int8 *)v76;
    char v79 = a3 + 48;
    __int16 v80 = a3 + 55;
    uint64_t v81 = a3 + 87;
    if (a3 > 10)
    {
      char v79 = 58;
    }
    else
    {
      uint64_t v81 = 97;
      __int16 v80 = 65;
    }
    if (v76)
    {
      unint64_t v82 = 0;
      do
      {
        unsigned __int8 v83 = *v78;
        if (v83 < 0x30 || v83 >= v79)
        {
          if (v83 < 0x41 || v83 >= v80)
          {
            unint64_t result = 0;
            char v8 = 1;
            if (v83 < 0x61 || v83 >= v81) {
              goto LABEL_118;
            }
            unsigned int v84 = -87;
          }
          else
          {
            unsigned int v84 = -55;
          }
        }
        else
        {
          unsigned int v84 = -48;
        }
        unint64_t result = 0;
        char v85 = v83 + v84;
        unsigned long long v86 = v82 * a3;
        BOOL v87 = (unsigned __int128)(v82 * (__int128)a3) >> 64 != (v82 * a3) >> 63;
        unint64_t v82 = v82 * a3 + v85;
        BOOL v88 = __OFADD__(v86, v85);
        char v8 = 1;
        if (v87) {
          break;
        }
        if (v88) {
          break;
        }
        char v8 = 0;
        ++v78;
        unint64_t result = v82;
        --v77;
      }
      while (v77);
      goto LABEL_118;
    }
  }
  else
  {
    if (a1 != 45)
    {
      BOOL v89 = 0;
      BOOL v90 = a3 + 48;
      unint64_t v91 = a3 + 55;
      char v92 = a3 + 87;
      if (a3 > 10)
      {
        BOOL v90 = 58;
      }
      else
      {
        char v92 = 97;
        unint64_t v91 = 65;
      }
      unint64_t v93 = (unsigned __int8 *)v101;
      do
      {
        unint64_t v94 = *v93;
        if (v94 < 0x30 || v94 >= v90)
        {
          if (v94 < 0x41 || v94 >= v91)
          {
            unint64_t result = 0;
            char v8 = 1;
            if (v94 < 0x61 || v94 >= v92) {
              goto LABEL_118;
            }
            BOOL v95 = -87;
          }
          else
          {
            BOOL v95 = -55;
          }
        }
        else
        {
          BOOL v95 = -48;
        }
        unint64_t result = 0;
        unint64_t v96 = v94 + v95;
        uint64_t v97 = v89 * a3;
        unsigned __int8 v98 = (unsigned __int128)(v89 * (__int128)a3) >> 64 != (v89 * a3) >> 63;
        BOOL v89 = v89 * a3 + v96;
        unsigned __int8 v99 = __OFADD__(v97, v96);
        char v8 = 1;
        if (v98) {
          break;
        }
        if (v99) {
          break;
        }
        char v8 = 0;
        ++v93;
        unint64_t result = v89;
        --v27;
      }
      while (v27);
      goto LABEL_118;
    }
    char v8 = 1;
    uint64_t v28 = specialized Collection.subscript.getter(1, (uint64_t)v101, v27);
    unsigned __int8 v32 = specialized UnsafeBufferPointer.init(rebasing:)(v28, v29, v30, v31);
    if (!v33) {
      goto LABEL_143;
    }
    int v34 = (unsigned __int8 *)v32;
    unsigned int v35 = a3 + 48;
    char v36 = a3 + 55;
    unsigned __int8 v37 = a3 + 87;
    if (a3 > 10)
    {
      unsigned int v35 = 58;
    }
    else
    {
      unsigned __int8 v37 = 97;
      char v36 = 65;
    }
    if (v32)
    {
      __int16 v38 = 0;
      do
      {
        uint64_t v39 = *v34;
        if (v39 < 0x30 || v39 >= v35)
        {
          if (v39 < 0x41 || v39 >= v36)
          {
            unint64_t result = 0;
            char v8 = 1;
            if (v39 < 0x61 || v39 >= v37) {
              goto LABEL_118;
            }
            uint64_t v40 = -87;
          }
          else
          {
            uint64_t v40 = -55;
          }
        }
        else
        {
          uint64_t v40 = -48;
        }
        unint64_t result = 0;
        uint64_t v41 = v39 + v40;
        uint64_t v42 = v38 * a3;
        uint64_t v43 = (unsigned __int128)(v38 * (__int128)a3) >> 64 != (v38 * a3) >> 63;
        __int16 v38 = v38 * a3 - v41;
        uint64_t v44 = __OFSUB__(v42, v41);
        char v8 = 1;
        if (v43) {
          break;
        }
        if (v44) {
          break;
        }
        char v8 = 0;
        ++v34;
        unint64_t result = v38;
        --v33;
      }
      while (v33);
      goto LABEL_118;
    }
  }
LABEL_117:
  unint64_t result = 0;
  char v8 = 0;
LABEL_118:
  unint64_t v102 = v8;
LABEL_119:
  LOBYTE(v101[0]) = (a2 & 0x1000000000000000) != 0;
  return result;
}

unint64_t specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)(uint64_t a1, unint64_t a2, int64_t a3)
{
  if ((a2 & 0x1000000000000000) != 0)
  {
    unint64_t result = 0;
    char v103 = 0;
    goto LABEL_119;
  }
  if ((a2 & 0x2000000000000000) == 0)
  {
    if ((a1 & 0x1000000000000000) != 0)
    {
      unint64_t v5 = (unsigned __int8 *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
      uint64_t v6 = a1 & 0xFFFFFFFFFFFFLL;
      if ((a1 & 0xFFFFFFFFFFFFLL) != 0) {
        goto LABEL_5;
      }
    }
    else
    {
      unint64_t v5 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(a1, a2);
      uint64_t v6 = v101;
      if (v101 > 0)
      {
LABEL_5:
        int v7 = *v5;
        if (v7 != 43)
        {
          if (v7 != 45)
          {
            unint64_t v63 = 0;
            unsigned __int8 v64 = a3 + 48;
            unsigned __int8 v65 = a3 + 55;
            unsigned __int8 v66 = a3 + 87;
            if (a3 > 10)
            {
              unsigned __int8 v64 = 58;
            }
            else
            {
              unsigned __int8 v66 = 97;
              unsigned __int8 v65 = 65;
            }
            do
            {
              unsigned int v67 = *v5;
              if (v67 < 0x30 || v67 >= v64)
              {
                if (v67 < 0x41 || v67 >= v65)
                {
                  unint64_t result = 0;
                  char v8 = 1;
                  if (v67 < 0x61 || v67 >= v66) {
                    goto LABEL_118;
                  }
                  char v68 = -87;
                }
                else
                {
                  char v68 = -55;
                }
              }
              else
              {
                char v68 = -48;
              }
              unint64_t result = 0;
              unsigned __int8 v69 = v67 + v68;
              BOOL v70 = !is_mul_ok(v63, a3);
              unint64_t v71 = v63 * a3;
              BOOL v26 = __CFADD__(v71, v69);
              unint64_t v63 = v71 + v69;
              char v72 = v26;
              char v8 = 1;
              if (v70) {
                break;
              }
              if (v72) {
                break;
              }
              char v8 = 0;
              ++v5;
              unint64_t result = v63;
              --v6;
            }
            while (v6);
            goto LABEL_118;
          }
          char v8 = 1;
          uint64_t v9 = specialized Collection.subscript.getter(1, (uint64_t)v5, v6);
          uint64_t v13 = specialized UnsafeBufferPointer.init(rebasing:)(v9, v10, v11, v12);
          if (v14)
          {
            unsigned __int8 v15 = (unsigned __int8 *)v13;
            unsigned __int8 v16 = a3 + 48;
            unsigned __int8 v17 = a3 + 55;
            unsigned __int8 v18 = a3 + 87;
            if (a3 > 10)
            {
              unsigned __int8 v16 = 58;
            }
            else
            {
              unsigned __int8 v18 = 97;
              unsigned __int8 v17 = 65;
            }
            if (v13)
            {
              unint64_t v19 = 0;
              do
              {
                unsigned int v20 = *v15;
                if (v20 < 0x30 || v20 >= v16)
                {
                  if (v20 < 0x41 || v20 >= v17)
                  {
                    unint64_t result = 0;
                    char v8 = 1;
                    if (v20 < 0x61 || v20 >= v18) {
                      goto LABEL_118;
                    }
                    char v21 = -87;
                  }
                  else
                  {
                    char v21 = -55;
                  }
                }
                else
                {
                  char v21 = -48;
                }
                unint64_t result = 0;
                unsigned __int8 v23 = v20 + v21;
                BOOL v24 = !is_mul_ok(v19, a3);
                unint64_t v25 = v19 * a3;
                BOOL v26 = v25 >= v23;
                unint64_t v19 = v25 - v23;
                char v27 = !v26;
                char v8 = 1;
                if (v24) {
                  break;
                }
                if (v27) {
                  break;
                }
                char v8 = 0;
                ++v15;
                unint64_t result = v19;
                --v14;
              }
              while (v14);
              goto LABEL_118;
            }
            goto LABEL_117;
          }
LABEL_143:
          unint64_t result = 0;
          goto LABEL_118;
        }
        char v8 = 1;
        uint64_t v46 = specialized Collection.subscript.getter(1, (uint64_t)v5, v6);
        uint64_t v50 = specialized UnsafeBufferPointer.init(rebasing:)(v46, v47, v48, v49);
        if (v51)
        {
          unsigned int v52 = (unsigned __int8 *)v50;
          unsigned __int8 v53 = a3 + 48;
          unsigned __int8 v54 = a3 + 55;
          unsigned __int8 v55 = a3 + 87;
          if (a3 > 10)
          {
            unsigned __int8 v53 = 58;
          }
          else
          {
            unsigned __int8 v55 = 97;
            unsigned __int8 v54 = 65;
          }
          if (v50)
          {
            unint64_t v56 = 0;
            do
            {
              unsigned int v57 = *v52;
              if (v57 < 0x30 || v57 >= v53)
              {
                if (v57 < 0x41 || v57 >= v54)
                {
                  unint64_t result = 0;
                  char v8 = 1;
                  if (v57 < 0x61 || v57 >= v55) {
                    goto LABEL_118;
                  }
                  char v58 = -87;
                }
                else
                {
                  char v58 = -55;
                }
              }
              else
              {
                char v58 = -48;
              }
              unint64_t result = 0;
              unsigned __int8 v59 = v57 + v58;
              BOOL v60 = !is_mul_ok(v56, a3);
              unint64_t v61 = v56 * a3;
              BOOL v26 = __CFADD__(v61, v59);
              unint64_t v56 = v61 + v59;
              char v62 = v26;
              char v8 = 1;
              if (v60) {
                break;
              }
              if (v62) {
                break;
              }
              char v8 = 0;
              ++v52;
              unint64_t result = v56;
              --v51;
            }
            while (v51);
            goto LABEL_118;
          }
          goto LABEL_117;
        }
LABEL_144:
        unint64_t result = 0;
        goto LABEL_118;
      }
    }
LABEL_142:
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x6F6uLL, 0);
  }
  uint64_t v28 = HIBYTE(a2) & 0xF;
  v102[0] = a1;
  v102[1] = a2 & 0xFFFFFFFFFFFFFFLL;
  if (!v28) {
    goto LABEL_142;
  }
  if (a1 == 43)
  {
    char v8 = 1;
    uint64_t v73 = specialized Collection.subscript.getter(1, (uint64_t)v102, v28);
    uint64_t v77 = specialized UnsafeBufferPointer.init(rebasing:)(v73, v74, v75, v76);
    if (!v78) {
      goto LABEL_144;
    }
    char v79 = (unsigned __int8 *)v77;
    unsigned __int8 v80 = a3 + 48;
    unsigned __int8 v81 = a3 + 55;
    unsigned __int8 v82 = a3 + 87;
    if (a3 > 10)
    {
      unsigned __int8 v80 = 58;
    }
    else
    {
      unsigned __int8 v82 = 97;
      unsigned __int8 v81 = 65;
    }
    if (v77)
    {
      unint64_t v83 = 0;
      do
      {
        unsigned int v84 = *v79;
        if (v84 < 0x30 || v84 >= v80)
        {
          if (v84 < 0x41 || v84 >= v81)
          {
            unint64_t result = 0;
            char v8 = 1;
            if (v84 < 0x61 || v84 >= v82) {
              goto LABEL_118;
            }
            char v85 = -87;
          }
          else
          {
            char v85 = -55;
          }
        }
        else
        {
          char v85 = -48;
        }
        unint64_t result = 0;
        unsigned __int8 v86 = v84 + v85;
        BOOL v87 = !is_mul_ok(v83, a3);
        unint64_t v88 = v83 * a3;
        BOOL v26 = __CFADD__(v88, v86);
        unint64_t v83 = v88 + v86;
        char v89 = v26;
        char v8 = 1;
        if (v87) {
          break;
        }
        if (v89) {
          break;
        }
        char v8 = 0;
        ++v79;
        unint64_t result = v83;
        --v78;
      }
      while (v78);
      goto LABEL_118;
    }
  }
  else
  {
    if (a1 != 45)
    {
      unint64_t v90 = 0;
      unsigned __int8 v91 = a3 + 48;
      unsigned __int8 v92 = a3 + 55;
      unsigned __int8 v93 = a3 + 87;
      if (a3 > 10)
      {
        unsigned __int8 v91 = 58;
      }
      else
      {
        unsigned __int8 v93 = 97;
        unsigned __int8 v92 = 65;
      }
      unint64_t v94 = (unsigned __int8 *)v102;
      do
      {
        unsigned int v95 = *v94;
        if (v95 < 0x30 || v95 >= v91)
        {
          if (v95 < 0x41 || v95 >= v92)
          {
            unint64_t result = 0;
            char v8 = 1;
            if (v95 < 0x61 || v95 >= v93) {
              goto LABEL_118;
            }
            char v96 = -87;
          }
          else
          {
            char v96 = -55;
          }
        }
        else
        {
          char v96 = -48;
        }
        unint64_t result = 0;
        unsigned __int8 v97 = v95 + v96;
        BOOL v98 = !is_mul_ok(v90, a3);
        unint64_t v99 = v90 * a3;
        BOOL v26 = __CFADD__(v99, v97);
        unint64_t v90 = v99 + v97;
        char v100 = v26;
        char v8 = 1;
        if (v98) {
          break;
        }
        if (v100) {
          break;
        }
        char v8 = 0;
        ++v94;
        unint64_t result = v90;
        --v28;
      }
      while (v28);
      goto LABEL_118;
    }
    char v8 = 1;
    uint64_t v29 = specialized Collection.subscript.getter(1, (uint64_t)v102, v28);
    uint64_t v33 = specialized UnsafeBufferPointer.init(rebasing:)(v29, v30, v31, v32);
    if (!v34) {
      goto LABEL_143;
    }
    unsigned int v35 = (unsigned __int8 *)v33;
    unsigned __int8 v36 = a3 + 48;
    unsigned __int8 v37 = a3 + 55;
    unsigned __int8 v38 = a3 + 87;
    if (a3 > 10)
    {
      unsigned __int8 v36 = 58;
    }
    else
    {
      unsigned __int8 v38 = 97;
      unsigned __int8 v37 = 65;
    }
    if (v33)
    {
      unint64_t v39 = 0;
      do
      {
        unsigned int v40 = *v35;
        if (v40 < 0x30 || v40 >= v36)
        {
          if (v40 < 0x41 || v40 >= v37)
          {
            unint64_t result = 0;
            char v8 = 1;
            if (v40 < 0x61 || v40 >= v38) {
              goto LABEL_118;
            }
            char v41 = -87;
          }
          else
          {
            char v41 = -55;
          }
        }
        else
        {
          char v41 = -48;
        }
        unint64_t result = 0;
        unsigned __int8 v42 = v40 + v41;
        BOOL v43 = !is_mul_ok(v39, a3);
        unint64_t v44 = v39 * a3;
        BOOL v26 = v44 >= v42;
        unint64_t v39 = v44 - v42;
        char v45 = !v26;
        char v8 = 1;
        if (v43) {
          break;
        }
        if (v45) {
          break;
        }
        char v8 = 0;
        ++v35;
        unint64_t result = v39;
        --v34;
      }
      while (v34);
      goto LABEL_118;
    }
  }
LABEL_117:
  unint64_t result = 0;
  char v8 = 0;
LABEL_118:
  char v103 = v8;
LABEL_119:
  LOBYTE(v102[0]) = (a2 & 0x1000000000000000) != 0;
  return result;
}

{
  unsigned __int8 *v5;
  uint64_t v6;
  int v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 *v15;
  unsigned __int8 v16;
  unsigned __int8 v17;
  unsigned __int8 v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unsigned int v23;
  char v24;
  unint64_t result;
  BOOL v26;
  BOOL v27;
  BOOL v28;
  unint64_t v29;
  BOOL v30;
  BOOL v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned __int8 *v40;
  unsigned __int8 v41;
  unsigned __int8 v42;
  unsigned __int8 v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unsigned int v48;
  char v49;
  BOOL v50;
  BOOL v51;
  BOOL v52;
  unint64_t v53;
  BOOL v54;
  BOOL v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unsigned __int8 *v63;
  unsigned __int8 v64;
  unsigned __int8 v65;
  unsigned __int8 v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unsigned __int8 v73;
  unsigned __int8 v74;
  unsigned __int8 v75;
  unint64_t v76;
  unsigned int v77;
  char v78;
  BOOL v79;
  BOOL v80;
  BOOL v81;
  unint64_t v82;
  BOOL v83;
  BOOL v84;
  unint64_t v85;
  BOOL v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unsigned __int8 *v94;
  unsigned __int8 v95;
  unsigned __int8 v96;
  unsigned __int8 v97;
  uint64_t v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t v101;
  unint64_t v102;
  unsigned __int8 v103;
  unsigned __int8 v104;
  unsigned __int8 v105;
  unint64_t v106;
  unsigned __int8 *v107;
  unsigned int v108;
  char v109;
  BOOL v110;
  BOOL v111;
  BOOL v112;
  unint64_t v113;
  BOOL v114;
  BOOL v115;
  unint64_t v116;
  int v117;
  unsigned int v118;
  char v119;
  BOOL v120;
  BOOL v121;
  BOOL v122;
  unint64_t v123;
  BOOL v124;
  BOOL v125;
  unint64_t v126;
  int v127;
  unsigned int v128;
  char v129;
  BOOL v130;
  BOOL v131;
  BOOL v132;
  unint64_t v133;
  BOOL v134;
  BOOL v135;
  unint64_t v136;
  int v137;
  uint64_t v138;
  void v139[2];
  char v140;

  if ((a2 & 0x1000000000000000) != 0)
  {
    unint64_t result = 0;
    unint64_t v140 = 0;
    goto LABEL_249;
  }
  if ((a2 & 0x2000000000000000) == 0)
  {
    if ((a1 & 0x1000000000000000) != 0)
    {
      unint64_t v5 = (unsigned __int8 *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
      uint64_t v6 = a1 & 0xFFFFFFFFFFFFLL;
      if ((a1 & 0xFFFFFFFFFFFFLL) != 0)
      {
LABEL_5:
        int v7 = *v5;
        if (v7 != 43)
        {
          if (v7 != 45)
          {
            unint64_t v71 = 0;
            char v72 = 0;
            uint64_t v73 = a3 + 48;
            uint64_t v74 = a3 + 55;
            uint64_t v75 = a3 + 87;
            if (a3 > 10)
            {
              uint64_t v73 = 58;
            }
            else
            {
              uint64_t v75 = 97;
              uint64_t v74 = 65;
            }
            uint64_t v76 = a3 >> 63;
            while (1)
            {
              uint64_t v77 = *v5;
              if (v77 < 0x30 || v77 >= v73)
              {
                if (v77 < 0x41 || v77 >= v74)
                {
                  unint64_t result = 0;
                  char v8 = 1;
                  if (v77 < 0x61 || v77 >= v75) {
                    goto LABEL_248;
                  }
                  uint64_t v78 = -87;
                }
                else
                {
                  uint64_t v78 = -55;
                }
              }
              else
              {
                uint64_t v78 = -48;
              }
              unint64_t result = 0;
              char v79 = !is_mul_ok(v72, a3);
              unsigned __int8 v80 = !is_mul_ok(v71, v76);
              unsigned __int8 v81 = __CFADD__(v72 * a3, v71 * v76);
              unsigned __int8 v82 = (a3 * __PAIR128__(v72, v71)) >> 64;
              unint64_t v83 = __CFADD__(v72 * a3 + v71 * v76, (v71 * (unsigned __int128)(unint64_t)a3) >> 64);
              unsigned int v84 = a3 >= 0 || v72 == 0;
              char v8 = 1;
              if (!v84 || v79 || v80 || v81) {
                goto LABEL_248;
              }
              char v85 = v71 * a3;
              unsigned __int8 v86 = __CFADD__(v85, (v77 + v78));
              unint64_t v71 = v85 + (v77 + v78);
              BOOL v87 = v86;
              if (v82 == -1)
              {
                if ((v87 | v83)) {
                  goto LABEL_244;
                }
                char v72 = -1;
              }
              else if (v87)
              {
                if (v83) {
                  goto LABEL_244;
                }
                char v72 = v82 + 1;
              }
              else
              {
                char v72 = v82;
                if (v83) {
                  goto LABEL_244;
                }
              }
              ++v5;
              if (!--v6)
              {
                char v8 = 0;
                unint64_t result = v71;
                goto LABEL_248;
              }
            }
          }
          char v8 = 1;
          uint64_t v9 = specialized Collection.subscript.getter(1, (uint64_t)v5, v6);
          uint64_t v13 = specialized UnsafeBufferPointer.init(rebasing:)(v9, v10, v11, v12);
          if (v14)
          {
            unsigned __int8 v15 = (unsigned __int8 *)v13;
            unsigned __int8 v16 = a3 + 48;
            unsigned __int8 v17 = a3 + 55;
            unsigned __int8 v18 = a3 + 87;
            if (a3 > 10)
            {
              unsigned __int8 v16 = 58;
            }
            else
            {
              unsigned __int8 v18 = 97;
              unsigned __int8 v17 = 65;
            }
            if (v13)
            {
              unint64_t v19 = v14;
              unsigned int v20 = 0;
              char v21 = 0;
              unsigned __int8 v22 = a3 >> 63;
              while (1)
              {
                unsigned __int8 v23 = *v15;
                if (v23 < 0x30 || v23 >= v16)
                {
                  if (v23 < 0x41 || v23 >= v17)
                  {
                    unint64_t result = 0;
                    char v8 = 1;
                    if (v23 < 0x61 || v23 >= v18) {
                      goto LABEL_248;
                    }
                    BOOL v24 = -87;
                  }
                  else
                  {
                    BOOL v24 = -55;
                  }
                }
                else
                {
                  BOOL v24 = -48;
                }
                unint64_t result = 0;
                BOOL v26 = !is_mul_ok(v21, a3);
                char v27 = !is_mul_ok(v20, v22);
                uint64_t v28 = __CFADD__(v21 * a3, v20 * v22);
                uint64_t v29 = (a3 * __PAIR128__(v21, v20)) >> 64;
                uint64_t v30 = __CFADD__(v21 * a3 + v20 * v22, (v20 * (unsigned __int128)(unint64_t)a3) >> 64);
                uint64_t v31 = a3 >= 0 || v21 == 0;
                char v8 = 1;
                if (!v31 || v26 || v27 || v28) {
                  goto LABEL_248;
                }
                uint64_t v32 = v20 * a3;
                unint64_t result = v32 - (v23 + v24);
                if (v32 < (v23 + v24)) {
                  break;
                }
                if (v29) {
                  goto LABEL_40;
                }
                if (v30) {
                  goto LABEL_85;
                }
LABEL_41:
                char v8 = 0;
                ++v15;
                unsigned int v20 = v32 - (v23 + v24);
                char v21 = v29;
                if (!--v19) {
                  goto LABEL_248;
                }
              }
              if (!v29) {
                goto LABEL_244;
              }
              --v29;
LABEL_40:
              if (v30) {
                goto LABEL_244;
              }
              goto LABEL_41;
            }
            goto LABEL_136;
          }
LABEL_253:
          unint64_t result = 0;
          goto LABEL_248;
        }
        char v8 = 1;
        unsigned int v57 = specialized Collection.subscript.getter(1, (uint64_t)v5, v6);
        unint64_t v61 = specialized UnsafeBufferPointer.init(rebasing:)(v57, v58, v59, v60);
        if (v62)
        {
          unint64_t v63 = (unsigned __int8 *)v61;
          unsigned __int8 v64 = a3 + 48;
          unsigned __int8 v65 = a3 + 55;
          unsigned __int8 v66 = a3 + 87;
          if (a3 > 10)
          {
            unsigned __int8 v64 = 58;
          }
          else
          {
            unsigned __int8 v66 = 97;
            unsigned __int8 v65 = 65;
          }
          if (v61)
          {
            unsigned int v67 = v62;
            char v68 = 0;
            unsigned __int8 v69 = 0;
            BOOL v70 = a3 >> 63;
            while (1)
            {
              uint64_t v118 = *v63;
              if (v118 < 0x30 || v118 >= v64)
              {
                if (v118 < 0x41 || v118 >= v65)
                {
                  unint64_t result = 0;
                  char v8 = 1;
                  if (v118 < 0x61 || v118 >= v66) {
                    goto LABEL_248;
                  }
                  uint64_t v119 = -87;
                }
                else
                {
                  uint64_t v119 = -55;
                }
              }
              else
              {
                uint64_t v119 = -48;
              }
              unint64_t result = 0;
              uint64_t v120 = !is_mul_ok(v69, a3);
              uint64_t v121 = !is_mul_ok(v68, v70);
              unint64_t v122 = __CFADD__(v69 * a3, v68 * v70);
              unsigned __int8 v123 = (a3 * __PAIR128__(v69, v68)) >> 64;
              unsigned __int8 v124 = __CFADD__(v69 * a3 + v68 * v70, (v68 * (unsigned __int128)(unint64_t)a3) >> 64);
              unsigned __int8 v125 = a3 >= 0 || v69 == 0;
              char v8 = 1;
              if (!v125 || v120 || v121 || v122) {
                goto LABEL_248;
              }
              uint64_t v126 = v68 * a3;
              unsigned __int8 v86 = __CFADD__(v126, (v118 + v119));
              char v68 = v126 + (v118 + v119);
              uint64_t v127 = v86;
              if (v123 == -1)
              {
                if ((v127 | v124)) {
                  goto LABEL_244;
                }
                unsigned __int8 v69 = -1;
              }
              else if (v127)
              {
                if (v124) {
                  goto LABEL_244;
                }
                unsigned __int8 v69 = v123 + 1;
              }
              else
              {
                unsigned __int8 v69 = v123;
                if (v124) {
                  goto LABEL_244;
                }
              }
              ++v63;
              if (!--v67) {
                goto LABEL_245;
              }
            }
          }
          goto LABEL_136;
        }
LABEL_254:
        unint64_t result = 0;
        goto LABEL_248;
      }
    }
    else
    {
      unint64_t v5 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(a1, a2);
      uint64_t v6 = v138;
      if (v138 > 0) {
        goto LABEL_5;
      }
    }
LABEL_252:
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x6F6uLL, 0);
  }
  uint64_t v33 = HIBYTE(a2) & 0xF;
  v139[0] = a1;
  v139[1] = a2 & 0xFFFFFFFFFFFFFFLL;
  if (!v33) {
    goto LABEL_252;
  }
  if (a1 == 43)
  {
    char v8 = 1;
    unint64_t v88 = specialized Collection.subscript.getter(1, (uint64_t)v139, v33);
    unsigned __int8 v92 = specialized UnsafeBufferPointer.init(rebasing:)(v88, v89, v90, v91);
    if (v93)
    {
      unint64_t v94 = (unsigned __int8 *)v92;
      unsigned int v95 = a3 + 48;
      char v96 = a3 + 55;
      unsigned __int8 v97 = a3 + 87;
      if (a3 > 10)
      {
        unsigned int v95 = 58;
      }
      else
      {
        unsigned __int8 v97 = 97;
        char v96 = 65;
      }
      if (v92)
      {
        BOOL v98 = v93;
        char v68 = 0;
        unint64_t v99 = 0;
        char v100 = a3 >> 63;
        while (1)
        {
          unint64_t v128 = *v94;
          if (v128 < 0x30 || v128 >= v95)
          {
            if (v128 < 0x41 || v128 >= v96)
            {
              unint64_t result = 0;
              char v8 = 1;
              if (v128 < 0x61 || v128 >= v97) {
                goto LABEL_248;
              }
              unint64_t v129 = -87;
            }
            else
            {
              unint64_t v129 = -55;
            }
          }
          else
          {
            unint64_t v129 = -48;
          }
          unint64_t result = 0;
          unsigned int v130 = !is_mul_ok(v99, a3);
          char v131 = !is_mul_ok(v68, v100);
          unsigned long long v132 = __CFADD__(v99 * a3, v68 * v100);
          BOOL v133 = (a3 * __PAIR128__(v99, v68)) >> 64;
          unint64_t v134 = __CFADD__(v99 * a3 + v68 * v100, (v68 * (unsigned __int128)(unint64_t)a3) >> 64);
          unint64_t v135 = a3 >= 0 || v99 == 0;
          char v8 = 1;
          if (!v135 || v130 || v131 || v132) {
            goto LABEL_248;
          }
          char v136 = v68 * a3;
          unsigned __int8 v86 = __CFADD__(v136, (v128 + v129));
          char v68 = v136 + (v128 + v129);
          unint64_t v137 = v86;
          if (v133 == -1)
          {
            if ((v137 | v134))
            {
LABEL_244:
              unint64_t result = 0;
              char v8 = 1;
              goto LABEL_248;
            }
            unint64_t v99 = -1;
          }
          else if (v137)
          {
            if (v134) {
              goto LABEL_244;
            }
            unint64_t v99 = v133 + 1;
          }
          else
          {
            unint64_t v99 = v133;
            if (v134) {
              goto LABEL_244;
            }
          }
          ++v94;
          if (!--v98)
          {
LABEL_245:
            char v8 = 0;
            unint64_t result = v68;
            goto LABEL_248;
          }
        }
      }
      goto LABEL_136;
    }
    goto LABEL_254;
  }
  if (a1 != 45)
  {
    uint64_t v101 = 0;
    unint64_t v102 = 0;
    char v103 = a3 + 48;
    char v104 = a3 + 55;
    unsigned long long v105 = a3 + 87;
    if (a3 > 10)
    {
      char v103 = 58;
    }
    else
    {
      unsigned long long v105 = 97;
      char v104 = 65;
    }
    BOOL v106 = a3 >> 63;
    BOOL v107 = (unsigned __int8 *)v139;
    while (1)
    {
      BOOL v108 = *v107;
      if (v108 < 0x30 || v108 >= v103)
      {
        if (v108 < 0x41 || v108 >= v104)
        {
          unint64_t result = 0;
          char v8 = 1;
          if (v108 < 0x61 || v108 >= v105) {
            goto LABEL_248;
          }
          BOOL v109 = -87;
        }
        else
        {
          BOOL v109 = -55;
        }
      }
      else
      {
        BOOL v109 = -48;
      }
      unint64_t result = 0;
      unint64_t v110 = !is_mul_ok(v102, a3);
      char v111 = !is_mul_ok(v101, v106);
      unint64_t v112 = __CFADD__(v102 * a3, v101 * v106);
      unint64_t v113 = (a3 * __PAIR128__(v102, v101)) >> 64;
      BOOL v114 = __CFADD__(v102 * a3 + v101 * v106, (v101 * (unsigned __int128)(unint64_t)a3) >> 64);
      uint64_t v115 = a3 >= 0 || v102 == 0;
      char v8 = 1;
      if (!v115 || v110 || v111 || v112) {
        goto LABEL_248;
      }
      uint64_t v116 = v101 * a3;
      unsigned __int8 v86 = __CFADD__(v116, (v108 + v109));
      uint64_t v101 = v116 + (v108 + v109);
      uint64_t v117 = v86;
      if (v113 == -1)
      {
        if ((v117 | v114)) {
          goto LABEL_244;
        }
        unint64_t v102 = -1;
      }
      else if (v117)
      {
        if (v114) {
          goto LABEL_244;
        }
        unint64_t v102 = v113 + 1;
      }
      else
      {
        unint64_t v102 = v113;
        if (v114) {
          goto LABEL_244;
        }
      }
      ++v107;
      if (!--v33)
      {
        char v8 = 0;
        unint64_t result = v101;
        goto LABEL_248;
      }
    }
  }
  char v8 = 1;
  uint64_t v34 = specialized Collection.subscript.getter(1, (uint64_t)v139, v33);
  unsigned __int8 v38 = specialized UnsafeBufferPointer.init(rebasing:)(v34, v35, v36, v37);
  if (!v39) {
    goto LABEL_253;
  }
  unsigned int v40 = (unsigned __int8 *)v38;
  char v41 = a3 + 48;
  unsigned __int8 v42 = a3 + 55;
  BOOL v43 = a3 + 87;
  if (a3 > 10)
  {
    char v41 = 58;
  }
  else
  {
    BOOL v43 = 97;
    unsigned __int8 v42 = 65;
  }
  if (v38)
  {
    unint64_t v44 = v39;
    char v45 = 0;
    uint64_t v46 = 0;
    uint64_t v47 = a3 >> 63;
    while (1)
    {
      uint64_t v48 = *v40;
      if (v48 < 0x30 || v48 >= v41)
      {
        if (v48 < 0x41 || v48 >= v42)
        {
          unint64_t result = 0;
          char v8 = 1;
          if (v48 < 0x61 || v48 >= v43) {
            goto LABEL_248;
          }
          uint64_t v49 = -87;
        }
        else
        {
          uint64_t v49 = -55;
        }
      }
      else
      {
        uint64_t v49 = -48;
      }
      unint64_t result = 0;
      uint64_t v50 = !is_mul_ok(v46, a3);
      uint64_t v51 = !is_mul_ok(v45, v47);
      unsigned int v52 = __CFADD__(v46 * a3, v45 * v47);
      unsigned __int8 v53 = (a3 * __PAIR128__(v46, v45)) >> 64;
      unsigned __int8 v54 = __CFADD__(v46 * a3 + v45 * v47, (v45 * (unsigned __int128)(unint64_t)a3) >> 64);
      unsigned __int8 v55 = a3 >= 0 || v46 == 0;
      char v8 = 1;
      if (!v55 || v50 || v51 || v52) {
        goto LABEL_248;
      }
      unint64_t v56 = v45 * a3;
      unint64_t result = v56 - (v48 + v49);
      if (v56 < (v48 + v49)) {
        break;
      }
      if (v53) {
        goto LABEL_81;
      }
      if (v54)
      {
LABEL_85:
        char v8 = 1;
        unint64_t result = 0;
        goto LABEL_248;
      }
LABEL_82:
      char v8 = 0;
      ++v40;
      char v45 = v56 - (v48 + v49);
      uint64_t v46 = v53;
      if (!--v44) {
        goto LABEL_248;
      }
    }
    if (!v53) {
      goto LABEL_244;
    }
    --v53;
LABEL_81:
    if (v54) {
      goto LABEL_244;
    }
    goto LABEL_82;
  }
LABEL_136:
  unint64_t result = 0;
  char v8 = 0;
LABEL_248:
  unint64_t v140 = v8;
LABEL_249:
  LOBYTE(v139[0]) = (a2 & 0x1000000000000000) != 0;
  return result;
}

Swift::UInt64 specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)(uint64_t a1, unint64_t a2, Swift::_Int128 by)
{
  if ((a2 & 0x1000000000000000) != 0)
  {
    v22.partialValue.uint64_t low = 0;
    char v103 = 0;
    goto LABEL_194;
  }
  uint64_t low = by.low;
  if ((a2 & 0x2000000000000000) == 0)
  {
    if ((a1 & 0x1000000000000000) != 0)
    {
      unint64_t v5 = (unsigned __int8 *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
      uint64_t v6 = a1 & 0xFFFFFFFFFFFFLL;
      if ((a1 & 0xFFFFFFFFFFFFLL) != 0) {
        goto LABEL_5;
      }
    }
    else
    {
      unint64_t v5 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(a1, a2);
      uint64_t v6 = v100;
      if (v100 > 0)
      {
LABEL_5:
        int v7 = *v5;
        if (v7 != 43)
        {
          if (v7 != 45)
          {
            int v57 = low + 87;
            if (low <= 10) {
              int v57 = 97;
            }
            int v104 = v57;
            if (low <= 10) {
              unsigned __int8 v58 = 65;
            }
            else {
              unsigned __int8 v58 = low + 55;
            }
            if (low <= 10) {
              unsigned __int8 v59 = low + 48;
            }
            else {
              unsigned __int8 v59 = 58;
            }
            while (1)
            {
              unsigned int v60 = *v5;
              if (v60 < 0x30 || v60 >= v59)
              {
                if (v60 < 0x41 || v60 >= v58)
                {
                  v22.partialValue.uint64_t low = 0;
                  char v8 = 1;
                  if (v60 < 0x61 || v60 >= v104) {
                    goto LABEL_193;
                  }
                  char v61 = -87;
                }
                else
                {
                  char v61 = -55;
                }
              }
              else
              {
                char v61 = -48;
              }
              unsigned __int8 v62 = v60 + v61;
              v63.uint64_t low = low;
              v63.high = low >> 63;
              Swift::tuple_partialValue__Int128_overflow_Bool v22 = _Int128.multipliedReportingOverflow(by:)(v63);
              int v64 = *(_DWORD *)&v22.overflow;
              *(void *)&v22.overfuint64_t low = v22.partialValue.low + v62;
              BOOL v66 = __CFADD__(v22.partialValue.low, v62);
              if (v22.partialValue.high == 0x7FFFFFFFFFFFFFFFLL)
              {
                if ((v66 | v64)) {
                  goto LABEL_191;
                }
              }
              else if (v66)
              {
                if (v64) {
                  goto LABEL_191;
                }
              }
              else if (v64)
              {
                goto LABEL_191;
              }
              ++v5;
              if (!--v6) {
                goto LABEL_192;
              }
            }
          }
          char v8 = 1;
          uint64_t v9 = specialized Collection.subscript.getter(1, (uint64_t)v5, v6);
          uint64_t v13 = specialized UnsafeBufferPointer.init(rebasing:)(v9, v10, v11, v12);
          if (v14)
          {
            unsigned __int8 v15 = (unsigned __int8 *)v13;
            if (low <= 10) {
              unsigned __int8 v16 = 97;
            }
            else {
              unsigned __int8 v16 = low + 87;
            }
            if (low <= 10) {
              unsigned __int8 v17 = 65;
            }
            else {
              unsigned __int8 v17 = low + 55;
            }
            if (low <= 10) {
              unsigned __int8 v18 = low + 48;
            }
            else {
              unsigned __int8 v18 = 58;
            }
            if (v13)
            {
              uint64_t v19 = v14;
              do
              {
                unsigned int v20 = *v15;
                if (v20 < 0x30 || v20 >= v18)
                {
                  if (v20 < 0x41 || v20 >= v17)
                  {
                    v22.partialValue.uint64_t low = 0;
                    char v8 = 1;
                    if (v20 < 0x61 || v20 >= v16) {
                      goto LABEL_193;
                    }
                    char v21 = -87;
                  }
                  else
                  {
                    char v21 = -55;
                  }
                }
                else
                {
                  char v21 = -48;
                }
                unsigned __int8 v23 = v20 + v21;
                v24.uint64_t low = low;
                v24.high = low >> 63;
                Swift::tuple_partialValue__Int128_overflow_Bool v22 = _Int128.multipliedReportingOverflow(by:)(v24);
                BOOL v26 = v22.partialValue.low >= v23;
                v22.partialValue.low -= v23;
                int v27 = !v26;
                if (v22.partialValue.high == 0x8000000000000000)
                {
                  if ((*(_DWORD *)&v22.overflow | v27)) {
                    goto LABEL_191;
                  }
                }
                else if (v22.overflow)
                {
                  goto LABEL_191;
                }
                char v8 = 0;
                ++v15;
                --v19;
              }
              while (v19);
              goto LABEL_193;
            }
            goto LABEL_120;
          }
LABEL_198:
          v22.partialValue.uint64_t low = 0;
          goto LABEL_193;
        }
        char v8 = 1;
        uint64_t v46 = specialized Collection.subscript.getter(1, (uint64_t)v5, v6);
        uint64_t v50 = specialized UnsafeBufferPointer.init(rebasing:)(v46, v47, v48, v49);
        if (v51)
        {
          unsigned int v52 = (unsigned __int8 *)v50;
          int v53 = low + 87;
          if (low <= 10) {
            int v53 = 97;
          }
          int v104 = v53;
          if (low <= 10) {
            unsigned __int8 v54 = 65;
          }
          else {
            unsigned __int8 v54 = low + 55;
          }
          if (low <= 10) {
            unsigned __int8 v55 = low + 48;
          }
          else {
            unsigned __int8 v55 = 58;
          }
          if (v50)
          {
            uint64_t v56 = v51;
            while (1)
            {
              unsigned int v88 = *v52;
              if (v88 < 0x30 || v88 >= v55)
              {
                if (v88 < 0x41 || v88 >= v54)
                {
                  v22.partialValue.uint64_t low = 0;
                  char v8 = 1;
                  if (v88 < 0x61 || v88 >= v104) {
                    goto LABEL_193;
                  }
                  char v89 = -87;
                }
                else
                {
                  char v89 = -55;
                }
              }
              else
              {
                char v89 = -48;
              }
              unsigned __int8 v90 = v88 + v89;
              v91.uint64_t low = low;
              v91.high = low >> 63;
              Swift::tuple_partialValue__Int128_overflow_Bool v22 = _Int128.multipliedReportingOverflow(by:)(v91);
              int v92 = *(_DWORD *)&v22.overflow;
              *(void *)&v22.overfuint64_t low = v22.partialValue.low + v90;
              BOOL v93 = __CFADD__(v22.partialValue.low, v90);
              if (v22.partialValue.high == 0x7FFFFFFFFFFFFFFFLL)
              {
                if ((v93 | v92)) {
                  goto LABEL_191;
                }
              }
              else if (v93)
              {
                if (v92) {
                  goto LABEL_191;
                }
              }
              else if (v92)
              {
                goto LABEL_191;
              }
              ++v52;
              if (!--v56) {
                goto LABEL_192;
              }
            }
          }
          goto LABEL_120;
        }
LABEL_199:
        v22.partialValue.uint64_t low = 0;
        goto LABEL_193;
      }
    }
LABEL_197:
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x6F6uLL, 0);
  }
  uint64_t v28 = HIBYTE(a2) & 0xF;
  v102[0] = a1;
  v102[1] = a2 & 0xFFFFFFFFFFFFFFLL;
  if (!v28) {
    goto LABEL_197;
  }
  if (a1 == 43)
  {
    char v8 = 1;
    uint64_t v67 = specialized Collection.subscript.getter(1, (uint64_t)v102, HIBYTE(a2) & 0xF);
    uint64_t v71 = specialized UnsafeBufferPointer.init(rebasing:)(v67, v68, v69, v70);
    if (v72)
    {
      uint64_t v73 = (unsigned __int8 *)v71;
      int v74 = low + 87;
      if (low <= 10) {
        int v74 = 97;
      }
      int v104 = v74;
      if (low <= 10) {
        unsigned __int8 v75 = 65;
      }
      else {
        unsigned __int8 v75 = low + 55;
      }
      if (low <= 10) {
        unsigned __int8 v76 = low + 48;
      }
      else {
        unsigned __int8 v76 = 58;
      }
      if (v71)
      {
        uint64_t v77 = v72;
        do
        {
          unsigned int v94 = *v73;
          if (v94 < 0x30 || v94 >= v76)
          {
            if (v94 < 0x41 || v94 >= v75)
            {
              v22.partialValue.uint64_t low = 0;
              char v8 = 1;
              if (v94 < 0x61 || v94 >= v104) {
                goto LABEL_193;
              }
              char v95 = -87;
            }
            else
            {
              char v95 = -55;
            }
          }
          else
          {
            char v95 = -48;
          }
          unsigned __int8 v96 = v94 + v95;
          v97.uint64_t low = low;
          v97.high = low >> 63;
          Swift::tuple_partialValue__Int128_overflow_Bool v22 = _Int128.multipliedReportingOverflow(by:)(v97);
          int v98 = *(_DWORD *)&v22.overflow;
          *(void *)&v22.overfuint64_t low = v22.partialValue.low + v96;
          BOOL v99 = __CFADD__(v22.partialValue.low, v96);
          if (v22.partialValue.high == 0x7FFFFFFFFFFFFFFFLL)
          {
            if ((v99 | v98)) {
              goto LABEL_191;
            }
          }
          else if (v99)
          {
            if (v98)
            {
LABEL_191:
              v22.partialValue.uint64_t low = 0;
              char v8 = 1;
              goto LABEL_193;
            }
          }
          else if (v98)
          {
            goto LABEL_191;
          }
          ++v73;
          --v77;
        }
        while (v77);
LABEL_192:
        char v8 = 0;
        v22.partialValue.uint64_t low = *(void *)&v22.overflow;
        goto LABEL_193;
      }
      goto LABEL_120;
    }
    goto LABEL_199;
  }
  if (a1 != 45)
  {
    int v78 = LODWORD(by.low) + 87;
    if ((uint64_t)by.low <= 10) {
      int v78 = 97;
    }
    int v104 = v78;
    if ((uint64_t)by.low <= 10) {
      unsigned __int8 v79 = 65;
    }
    else {
      unsigned __int8 v79 = LOBYTE(by.low) + 55;
    }
    if ((uint64_t)by.low <= 10) {
      unsigned __int8 v80 = LOBYTE(by.low) + 48;
    }
    else {
      unsigned __int8 v80 = 58;
    }
    unsigned __int8 v81 = (unsigned __int8 *)v102;
    while (1)
    {
      unsigned int v82 = *v81;
      if (v82 < 0x30 || v82 >= v80)
      {
        if (v82 < 0x41 || v82 >= v79)
        {
          v22.partialValue.uint64_t low = 0;
          char v8 = 1;
          if (v82 < 0x61 || v82 >= v104) {
            goto LABEL_193;
          }
          char v83 = -87;
        }
        else
        {
          char v83 = -55;
        }
      }
      else
      {
        char v83 = -48;
      }
      unsigned __int8 v84 = v82 + v83;
      v85.uint64_t low = low;
      v85.high = low >> 63;
      Swift::tuple_partialValue__Int128_overflow_Bool v22 = _Int128.multipliedReportingOverflow(by:)(v85);
      int v86 = *(_DWORD *)&v22.overflow;
      *(void *)&v22.overfuint64_t low = v22.partialValue.low + v84;
      BOOL v87 = __CFADD__(v22.partialValue.low, v84);
      if (v22.partialValue.high == 0x7FFFFFFFFFFFFFFFLL)
      {
        if ((v87 | v86)) {
          goto LABEL_191;
        }
      }
      else if (v87)
      {
        if (v86) {
          goto LABEL_191;
        }
      }
      else if (v86)
      {
        goto LABEL_191;
      }
      ++v81;
      if (!--v28) {
        goto LABEL_192;
      }
    }
  }
  char v8 = 1;
  uint64_t v29 = specialized Collection.subscript.getter(1, (uint64_t)v102, HIBYTE(a2) & 0xF);
  uint64_t v33 = specialized UnsafeBufferPointer.init(rebasing:)(v29, v30, v31, v32);
  if (!v34) {
    goto LABEL_198;
  }
  unsigned int v35 = (unsigned __int8 *)v33;
  if (low <= 10) {
    unsigned __int8 v36 = 97;
  }
  else {
    unsigned __int8 v36 = low + 87;
  }
  if (low <= 10) {
    unsigned __int8 v37 = 65;
  }
  else {
    unsigned __int8 v37 = low + 55;
  }
  if (low <= 10) {
    unsigned __int8 v38 = low + 48;
  }
  else {
    unsigned __int8 v38 = 58;
  }
  if (v33)
  {
    uint64_t v39 = v34;
    do
    {
      unsigned int v40 = *v35;
      if (v40 < 0x30 || v40 >= v38)
      {
        if (v40 < 0x41 || v40 >= v37)
        {
          v22.partialValue.uint64_t low = 0;
          char v8 = 1;
          if (v40 < 0x61 || v40 >= v36) {
            goto LABEL_193;
          }
          char v41 = -87;
        }
        else
        {
          char v41 = -55;
        }
      }
      else
      {
        char v41 = -48;
      }
      unsigned __int8 v42 = v40 + v41;
      v43.uint64_t low = low;
      v43.high = low >> 63;
      Swift::tuple_partialValue__Int128_overflow_Bool v22 = _Int128.multipliedReportingOverflow(by:)(v43);
      BOOL v26 = v22.partialValue.low >= v42;
      v22.partialValue.low -= v42;
      int v45 = !v26;
      if (v22.partialValue.high == 0x8000000000000000)
      {
        if ((*(_DWORD *)&v22.overflow | v45)) {
          goto LABEL_191;
        }
      }
      else if (v22.overflow)
      {
        goto LABEL_191;
      }
      char v8 = 0;
      ++v35;
      --v39;
    }
    while (v39);
    goto LABEL_193;
  }
LABEL_120:
  v22.partialValue.uint64_t low = 0;
  char v8 = 0;
LABEL_193:
  char v103 = v8;
LABEL_194:
  LOBYTE(v102[0]) = (a2 & 0x1000000000000000) != 0;
  return v22.partialValue.low;
}

uint64_t String.UTF8View.withContiguousStorageIfAvailable<A>(_:)@<X0>(uint64_t (*a1)(void *, uint64_t)@<X0>, uint64_t a2@<X2>, unint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  if ((a3 & 0x1000000000000000) != 0) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a4 - 8) + 56))(a5, 1, 1, a4);
  }
  if ((a3 & 0x2000000000000000) != 0)
  {
    uint64_t v10 = HIBYTE(a3) & 0xF;
    v12[0] = a2;
    v12[1] = a3 & 0xFFFFFFFFFFFFFFLL;
    uint64_t v9 = v12;
  }
  else if ((a2 & 0x1000000000000000) != 0)
  {
    uint64_t v9 = (void *)((a3 & 0xFFFFFFFFFFFFFFFLL) + 32);
    uint64_t v10 = a2 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    uint64_t v9 = _StringObject.sharedUTF8.getter(a2, a3);
  }
  uint64_t result = a1(v9, v10);
  if (!v5) {
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(a4 - 8) + 56))(a5, 0, 1, a4);
  }
  return result;
}

uint64_t String.UTF8View.debugDescription.getter(uint64_t a1, unint64_t a2)
{
  unint64_t v3 = specialized static String._createEmpty(withInitialCapacity:)(12);
  unint64_t v5 = (unint64_t)v4;
  v239._uint64_t countAndFlagsBits = v3;
  v239._unint64_t object = v4;
  Swift::String v6 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("UTF8View(", 9uLL, 1);
  uint64_t v7 = HIBYTE(v5) & 0xF;
  uint64_t v8 = v3 & 0xFFFFFFFFFFFFLL;
  if ((v5 & 0x2000000000000000) != 0) {
    uint64_t v9 = HIBYTE(v5) & 0xF;
  }
  else {
    uint64_t v9 = v3 & 0xFFFFFFFFFFFFLL;
  }
  unint64_t v229 = a2;
  if (v9 || (v3 & ~v5 & 0x2000000000000000) != 0)
  {
    uint64_t v10 = (uint64_t)v6._object & 0x2000000000000000;
    unint64_t v11 = ((unint64_t)v6._object >> 56) & 0xF;
    if ((v5 & 0x2000000000000000) != 0 && v10)
    {
      unint64_t v12 = v11 + v7;
      if (v11 + v7 <= 0xF)
      {
        if (v11)
        {
          char v57 = 0;
          unint64_t v58 = 0;
          unint64_t v59 = v5;
          a2 = v229;
          uint64_t v23 = a1;
          do
          {
            unint64_t v60 = v7 + v58;
            unint64_t v61 = v58 + 1;
            if (v58 >= 8) {
              unint64_t object = (unint64_t)v6._object;
            }
            else {
              unint64_t object = v6._countAndFlagsBits;
            }
            unint64_t v63 = object >> (v57 & 0x38);
            char v64 = (8 * v7 + v57) & 0x38;
            uint64_t v65 = (-255 << v64) - 1;
            unint64_t v66 = (unint64_t)v63 << v64;
            unint64_t v67 = v66 | v65 & v59;
            unint64_t v68 = v66 | v65 & v3;
            if (v60 < 8) {
              unint64_t v3 = v68;
            }
            else {
              unint64_t v59 = v67;
            }
            v57 += 8;
            unint64_t v58 = v61;
          }
          while (v11 != v61);
        }
        else
        {
          unint64_t v59 = v5;
          a2 = v229;
          uint64_t v23 = a1;
        }
        swift_bridgeObjectRelease(v5);
        swift_bridgeObjectRelease((uint64_t)v6._object);
        unint64_t v74 = 0xA000000000000000;
        if (!(v3 & 0x8080808080808080 | v59 & 0x80808080808080)) {
          unint64_t v74 = 0xE000000000000000;
        }
        uint64_t v56 = (void *)(v74 & 0xFF00000000000000 | (v12 << 56) | v59 & 0xFFFFFFFFFFFFFFLL);
        goto LABEL_88;
      }
      uint64_t v10 = 1;
    }
    if (v10) {
      int64_t v13 = ((unint64_t)v6._object >> 56) & 0xF;
    }
    else {
      int64_t v13 = v6._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
    }
    swift_bridgeObjectRetain_n((uint64_t)v6._object, 2);
    uint64_t v232 = v13;
    if (((uint64_t)v6._object & 0x1000000000000000) != 0)
    {
      swift_bridgeObjectRetain_n((uint64_t)v6._object, 5);
      v212._Swift::UInt64 rawBits = 1;
      v213._Swift::UInt64 rawBits = (v13 << 16) | 1;
      v214._Swift::UInt64 rawBits = _StringGuts.validateScalarRange(_:)(v212, v213, v6._countAndFlagsBits, (unint64_t)v6._object);
      if (v214._rawBits < 0x10000) {
        v214._rawBits |= 3;
      }
      int64_t v13 = specialized Collection.count.getter(v214, v215, v6._countAndFlagsBits, (unint64_t)v6._object);
      swift_bridgeObjectRelease((uint64_t)v6._object);
      if ((v5 & 0x1000000000000000) == 0)
      {
LABEL_15:
        BOOL v14 = __OFADD__(v9, v13);
        Swift::Int v15 = v9 + v13;
        if (!v14)
        {
LABEL_16:
          unint64_t v16 = v3 & ~v5;
          if ((v16 & 0x2000000000000000) != 0 && swift_isUniquelyReferenced_nonNull_native(v5 & 0xFFFFFFFFFFFFFFFLL))
          {
            int64_t v17 = _StringGuts.nativeUnusedCapacity.getter(v3, v5);
            if (v18)
            {
LABEL_286:
              unint64_t v220 = 258;
              goto LABEL_287;
            }
            if (v15 > 15) {
              goto LABEL_24;
            }
            if ((v5 & 0x2000000000000000) == 0)
            {
              if (v17 < v13)
              {
LABEL_46:
                swift_bridgeObjectRelease_n((uint64_t)v6._object, 5);
                if ((v5 & 0x1000000000000000) == 0)
                {
                  if ((v3 & 0x1000000000000000) != 0)
                  {
                    uint64_t v31 = (unsigned __int8 *)((v5 & 0xFFFFFFFFFFFFFFFLL) + 32);
                  }
                  else
                  {
                    uint64_t v31 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v3, v5);
                    uint64_t v8 = v222;
                  }
                  a2 = v229;
                  uint64_t v32 = v232;
                  swift_bridgeObjectRetain(v5);
                  closure #1 in _StringGuts._convertedToSmall()(v31, v8, &v238);
                  swift_bridgeObjectRelease(v5);
                  unint64_t v3 = v238;
                  unint64_t v33 = *((void *)&v238 + 1);
                  goto LABEL_53;
                }
                goto LABEL_289;
              }
LABEL_24:
              int64_t v19 = _StringGuts.nativeUnusedCapacity.getter(v3, v5);
              BOOL v22 = (v20 & 1) == 0 && v19 >= v13;
              if ((v16 & 0x2000000000000000) != 0
                && swift_isUniquelyReferenced_nonNull_native(v5 & 0xFFFFFFFFFFFFFFFLL))
              {
                uint64_t v23 = a1;
                if (v22)
                {
LABEL_42:
                  swift_bridgeObjectRelease_n((uint64_t)v6._object, 4);
                  if (((uint64_t)v6._object & 0x1000000000000000) != 0)
                  {
                    swift_bridgeObjectRelease((uint64_t)v6._object);
                    _StringGuts._foreignAppendInPlace(_:)(v6._countAndFlagsBits, (unint64_t)v6._object, 0, v232);
                    swift_bridgeObjectRelease_n((uint64_t)v6._object, 2);
                    a2 = v229;
                  }
                  else if (v10)
                  {
                    swift_bridgeObjectRelease_n((uint64_t)v6._object, 2);
                    *(void *)&unsigned long long v238 = v6._countAndFlagsBits;
                    *((void *)&v238 + 1) = (uint64_t)v6._object & 0xFFFFFFFFFFFFFFLL;
                    uint64_t v28 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, ((unint64_t)v6._object >> 56) & 0xF, (uint64_t)&v238, ((unint64_t)v6._object >> 56) & 0xF);
                    _StringGuts.appendInPlace(_:isASCII:)(v28, v29, ((uint64_t)v6._object & 0x4000000000000000) != 0);
                    swift_bridgeObjectRelease((uint64_t)v6._object);
                    a2 = v229;
                  }
                  else
                  {
                    if ((v6._countAndFlagsBits & 0x1000000000000000) != 0)
                    {
                      swift_bridgeObjectRelease((uint64_t)v6._object);
                      id v69 = (id)(((uint64_t)v6._object & 0xFFFFFFFFFFFFFFFLL) + 32);
                      uint64_t v70 = v6._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
                      uint64_t v71 = v6._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
                      a2 = v229;
                    }
                    else
                    {
                      id v69 = _StringObject.sharedUTF8.getter(v6._countAndFlagsBits, (uint64_t)v6._object);
                      uint64_t v71 = v223;
                      swift_bridgeObjectRelease((uint64_t)v6._object);
                      if (v71 < (v6._countAndFlagsBits & 0xFFFFFFFFFFFFLL)) {
LABEL_192:
                      }
                        _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x745uLL, 0);
                      a2 = v229;
                      uint64_t v23 = a1;
                      uint64_t v70 = v6._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
                    }
                    uint64_t v72 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, v70, (uint64_t)v69, v71);
                    _StringGuts.appendInPlace(_:isASCII:)(v72, v73, v6._countAndFlagsBits < 0);
                    swift_bridgeObjectRelease_n((uint64_t)v6._object, 2);
                  }
                  goto LABEL_89;
                }
              }
              else
              {
                uint64_t v23 = a1;
                if (v22)
                {
LABEL_41:
                  _StringGuts.grow(_:)(v15);
                  goto LABEL_42;
                }
              }
              uint64_t v24 = _StringGuts.nativeCapacity.getter(v3, v5);
              if (v25) {
                uint64_t v26 = 0;
              }
              else {
                uint64_t v26 = v24;
              }
              if (v26 + 0x4000000000000000 < 0)
              {
                __break(1u);
LABEL_289:
                unint64_t v3 = _StringGuts._foreignConvertedToSmall()(v3, v5);
                unint64_t v33 = v221;
                goto LABEL_52;
              }
              uint64_t v27 = 2 * v26;
              if (v27 > v15) {
                Swift::Int v15 = v27;
              }
              goto LABEL_41;
            }
          }
          else
          {
            if (v15 > 15) {
              goto LABEL_24;
            }
            if ((v5 & 0x2000000000000000) == 0) {
              goto LABEL_46;
            }
          }
          swift_bridgeObjectRelease_n((uint64_t)v6._object, 5);
          unint64_t v33 = v5;
LABEL_52:
          a2 = v229;
          uint64_t v32 = v232;
LABEL_53:
          v34._Swift::UInt64 rawBits = (v32 << 16) | 1;
          v35._Swift::UInt64 rawBits = 1;
          v36._Swift::UInt64 rawBits = _StringGuts.validateScalarRange(_:)(v35, v34, v6._countAndFlagsBits, (unint64_t)v6._object);
          if (v36._rawBits < 0x10000) {
            v36._rawBits |= 3;
          }
          unint64_t v38 = specialized String.init(_:)(v36, v37, v6._countAndFlagsBits, (unint64_t)v6._object);
          unint64_t v40 = v39;
          swift_bridgeObjectRelease((uint64_t)v6._object);
          if ((v40 & 0x2000000000000000) != 0)
          {
            swift_bridgeObjectRelease(v40);
            uint64_t v23 = a1;
          }
          else
          {
            uint64_t v23 = a1;
            if ((v40 & 0x1000000000000000) != 0)
            {
              unint64_t v38 = _StringGuts._foreignConvertedToSmall()(v38, v40);
              unint64_t v225 = v224;
              swift_bridgeObjectRelease(v40);
              unint64_t v40 = v225;
            }
            else
            {
              if ((v38 & 0x1000000000000000) != 0)
              {
                uint64_t v218 = (unsigned __int8 *)((v40 & 0xFFFFFFFFFFFFFFFLL) + 32);
                uint64_t v219 = v38 & 0xFFFFFFFFFFFFLL;
              }
              else
              {
                uint64_t v218 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v38, v40);
              }
              closure #1 in _StringGuts._convertedToSmall()(v218, v219, &v238);
              swift_bridgeObjectRelease(v40);
              unint64_t v38 = v238;
              unint64_t v40 = *((void *)&v238 + 1);
            }
          }
          uint64_t v41 = HIBYTE(v33) & 0xF;
          uint64_t v42 = HIBYTE(v40) & 0xF;
          uint64_t v43 = v42 + v41;
          if ((unint64_t)(v42 + v41) <= 0xF)
          {
            if (v42)
            {
              char v44 = 0;
              unint64_t v45 = 0;
              do
              {
                unint64_t v46 = v41 + v45;
                unint64_t v47 = v45 + 1;
                if (v45 >= 8) {
                  unint64_t v48 = v40;
                }
                else {
                  unint64_t v48 = v38;
                }
                unint64_t v49 = v48 >> (v44 & 0x38);
                char v50 = (8 * v41 + v44) & 0x38;
                uint64_t v51 = (-255 << v50) - 1;
                unint64_t v52 = (unint64_t)v49 << v50;
                unint64_t v53 = v52 | v51 & v33;
                unint64_t v54 = v52 | v51 & v3;
                if (v46 < 8) {
                  unint64_t v3 = v54;
                }
                else {
                  unint64_t v33 = v53;
                }
                v44 += 8;
                unint64_t v45 = v47;
              }
              while (v42 != v47);
            }
            swift_bridgeObjectRelease(v5);
            swift_bridgeObjectRelease((uint64_t)v6._object);
            unint64_t v55 = 0xA000000000000000;
            if (!(v3 & 0x8080808080808080 | v33 & 0x80808080808080)) {
              unint64_t v55 = 0xE000000000000000;
            }
            uint64_t v56 = (void *)(v55 & 0xFF00000000000000 | (v43 << 56) | v33 & 0xFFFFFFFFFFFFFFLL);
LABEL_88:
            v239._uint64_t countAndFlagsBits = v3;
            v239._unint64_t object = v56;
            goto LABEL_89;
          }
LABEL_285:
          unint64_t v220 = 266;
LABEL_287:
          _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/StringGutsRangeReplaceable.swift", 38, 2, v220, 0);
        }
LABEL_278:
        __break(1u);
LABEL_279:
        unint64_t v217 = 816;
LABEL_280:
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/String.swift", 18, 2, v217, 0);
      }
    }
    else
    {
      swift_bridgeObjectRetain_n((uint64_t)v6._object, 4);
      if ((v5 & 0x1000000000000000) == 0) {
        goto LABEL_15;
      }
    }
    Swift::Int v216 = String.UTF8View._foreignCount()();
    Swift::Int v15 = v216 + v13;
    if (!__OFADD__(v216, v13)) {
      goto LABEL_16;
    }
    goto LABEL_278;
  }
  swift_bridgeObjectRelease(v5);
  Swift::String v239 = v6;
  uint64_t v23 = a1;
LABEL_89:
  uint64_t v75 = 34;
  uint64_t v76 = 0xE100000000000000;
  *(void *)&unsigned long long v238 = 34;
  *((void *)&v238 + 1) = 0xE100000000000000;
  uint64_t v77 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0) {
    uint64_t v77 = v23 & 0xFFFFFFFFFFFFLL;
  }
  uint64_t v233 = v77;
  if (!v77)
  {
    unint64_t v98 = 0xE100000000000000;
    goto LABEL_195;
  }
  uint64_t v78 = 0;
  uint64_t v226 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
  uint64_t v227 = a2 & 0xFFFFFFFFFFFFFFLL;
  char v79 = 1;
  do
  {
    while (1)
    {
      if ((a2 & 0x1000000000000000) != 0)
      {
        Swift::tuple_Unicode_Scalar_scalarLength_Int v84 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)((Swift::String::Index)(v78 << 16));
        Swift::Int scalarLength = v84.scalarLength;
        unsigned int value = v84._0._value;
      }
      else
      {
        if ((a2 & 0x2000000000000000) != 0)
        {
          uint64_t v236 = v23;
          uint64_t v237 = v227;
          unsigned __int8 v81 = &v236;
        }
        else
        {
          unsigned __int8 v81 = (uint64_t *)v226;
          if ((v23 & 0x1000000000000000) == 0) {
            unsigned __int8 v81 = (uint64_t *)_StringObject.sharedUTF8.getter(v23, a2);
          }
        }
        unsigned int value = _decodeScalar(_:startingAt:)((uint64_t)v81, v30, v78);
      }
      unsigned int v85 = value;
      v78 += scalarLength;
      unsigned long long v86 = (unsigned __int128)Unicode.Scalar._escaped(asASCII:)(0);
      if (*((void *)&v86 + 1))
      {
        uint64_t v87 = *((void *)&v238 + 1);
        unint64_t v88 = HIBYTE(*((void *)&v238 + 1)) & 0xFLL;
        if ((*((void *)&v238 + 1) & 0x2000000000000000) == 0) {
          unint64_t v88 = v238 & 0xFFFFFFFFFFFFLL;
        }
        if (v88 || ((unint64_t)v238 & ~*((void *)&v238 + 1) & 0x2000000000000000) != 0)
        {
          if ((*((void *)&v86 + 1) & 0x2000000000000000 & *((void *)&v238 + 1)) == 0
            || (unint64_t v89 = specialized _SmallString.init(_:appending:)(v238, *((unint64_t *)&v238 + 1), v86, *((unint64_t *)&v86 + 1)), (v91 & 1) != 0))
          {
            if ((*((void *)&v86 + 1) & 0x2000000000000000) != 0) {
              uint64_t v80 = HIBYTE(*((void *)&v86 + 1)) & 0xFLL;
            }
            else {
              uint64_t v80 = v86 & 0xFFFFFFFFFFFFLL;
            }
            swift_bridgeObjectRetain(*((unint64_t *)&v86 + 1));
            _StringGuts.append(_:)(v86, *((unint64_t *)&v86 + 1), 0, v80);
            swift_bridgeObjectRelease_n(*((uint64_t *)&v86 + 1), 2);
          }
          else
          {
            uint64_t v92 = v89;
            BOOL v93 = v90;
            swift_bridgeObjectRelease(v87);
            swift_bridgeObjectRelease(*((uint64_t *)&v86 + 1));
            *(void *)&unsigned long long v238 = v92;
            *((void *)&v238 + 1) = v93;
          }
        }
        else
        {
          swift_bridgeObjectRelease(*((uint64_t *)&v238 + 1));
          unsigned long long v238 = v86;
        }
        goto LABEL_97;
      }
      uint64_t v95 = v238;
      unint64_t v94 = *((void *)&v238 + 1);
      if (v79)
      {
        LODWORD(v236) = 0;
        swift_bridgeObjectRetain(*((unint64_t *)&v238 + 1));
        unint64_t v96 = specialized BidirectionalCollection.last.getter(v95, v94);
        swift_bridgeObjectRelease(v94);
        if ((v96 & 0x100000000) != 0) {
          goto LABEL_279;
        }
        if (!_GraphemeBreakingState.shouldBreak(between:and:)((Swift::Unicode::Scalar)v96, (Swift::Unicode::Scalar)v85)) {
          break;
        }
      }
      uint64_t v236 = v95;
      uint64_t v237 = v94;
      *(void *)&unsigned long long v238 = 0;
      *((void *)&v238 + 1) = 0xE000000000000000;
      unint64_t v98 = specialized Unicode.Scalar.withUTF8CodeUnits<A>(_:)(v85);
      uint64_t v75 = v97;
      uint64_t v99 = v97 & 0x2000000000000000;
      uint64_t v100 = HIBYTE(v97) & 0xF;
      uint64_t v101 = HIBYTE(v94) & 0xF;
      if ((v94 & 0x2000000000000000) != 0 && v99)
      {
        if ((unint64_t)(v100 + v101) <= 0xF)
        {
          swift_bridgeObjectRelease(v97);
          if (v100)
          {
            char v133 = 0;
            unint64_t v134 = 0;
            unint64_t v135 = v94;
            do
            {
              unint64_t v136 = v101 + v134;
              unint64_t v137 = v134 + 1;
              if (v134 >= 8) {
                unint64_t v138 = v75;
              }
              else {
                unint64_t v138 = v98;
              }
              unint64_t v139 = v138 >> (v133 & 0x38);
              char v140 = (8 * v101 + v133) & 0x38;
              uint64_t v141 = (-255 << v140) - 1;
              unint64_t v142 = (unint64_t)v139 << v140;
              unint64_t v143 = v142 | v141 & v135;
              unint64_t v144 = v142 | v141 & v95;
              if (v136 < 8) {
                uint64_t v95 = v144;
              }
              else {
                unint64_t v135 = v143;
              }
              v133 += 8;
              unint64_t v134 = v137;
            }
            while (v100 != v137);
          }
          else
          {
            unint64_t v135 = v94;
          }
          swift_bridgeObjectRelease(v94);
          unint64_t v157 = 0xE000000000000000;
          if (v95 & 0x8080808080808080 | v135 & 0x80808080808080) {
            unint64_t v157 = 0xA000000000000000;
          }
          uint64_t v236 = v95;
          uint64_t v237 = v157 & 0xFF00000000000000 | ((v100 + v101) << 56) | v135 & 0xFFFFFFFFFFFFFFLL;
          a2 = v229;
          uint64_t v23 = a1;
          goto LABEL_181;
        }
        uint64_t v99 = 1;
      }
      if (v99) {
        int64_t v102 = HIBYTE(v97) & 0xF;
      }
      else {
        int64_t v102 = v98 & 0xFFFFFFFFFFFFLL;
      }
      swift_bridgeObjectRetain(v97);
      uint64_t v231 = v102;
      if ((v75 & 0x1000000000000000) != 0)
      {
        swift_bridgeObjectRetain_n(v75, 5);
        v158._Swift::UInt64 rawBits = 1;
        v159._Swift::UInt64 rawBits = (v102 << 16) | 1;
        v160._Swift::UInt64 rawBits = _StringGuts.validateScalarRange(_:)(v158, v159, v98, v75);
        if (v160._rawBits < 0x10000) {
          v160._rawBits |= 3;
        }
        int64_t v102 = specialized Collection.count.getter(v160, v161, v98, v75);
        swift_bridgeObjectRelease(v75);
        uint64_t v228 = v98 & 0xFFFFFFFFFFFFLL;
        if ((v94 & 0x1000000000000000) != 0)
        {
LABEL_188:
          Swift::Int v103 = String.UTF8View._foreignCount()();
          int64_t v104 = v103 + v102;
          if (__OFADD__(v103, v102)) {
            goto LABEL_259;
          }
          goto LABEL_129;
        }
      }
      else
      {
        swift_bridgeObjectRetain_n(v75, 4);
        uint64_t v228 = v98 & 0xFFFFFFFFFFFFLL;
        if ((v94 & 0x1000000000000000) != 0) {
          goto LABEL_188;
        }
      }
      if ((v94 & 0x2000000000000000) != 0) {
        Swift::Int v103 = HIBYTE(v94) & 0xF;
      }
      else {
        Swift::Int v103 = v95 & 0xFFFFFFFFFFFFLL;
      }
      int64_t v104 = v103 + v102;
      if (__OFADD__(v103, v102))
      {
LABEL_259:
        __break(1u);
        goto LABEL_260;
      }
LABEL_129:
      if ((v95 & ~v94 & 0x2000000000000000) != 0
        && swift_isUniquelyReferenced_nonNull_native(v94 & 0xFFFFFFFFFFFFFFFLL))
      {
        uint64_t v105 = v237;
        int64_t v106 = _StringGuts.nativeUnusedCapacity.getter(v236, v237);
        uint64_t v23 = a1;
        if (v107) {
          goto LABEL_286;
        }
        a2 = v229;
        if (v104 > 15 || (v105 & 0x2000000000000000) == 0 && v106 >= v102)
        {
LABEL_137:
          _StringGuts.prepareForAppendInPlace(totalCount:otherUTF8Count:)(v104, v102);
          swift_bridgeObjectRelease_n(v75, 4);
          if ((v75 & 0x1000000000000000) != 0)
          {
            swift_bridgeObjectRelease(v75);
            _StringGuts._foreignAppendInPlace(_:)(v98, v75, 0, v231);
          }
          else
          {
            if (v99)
            {
              swift_bridgeObjectRelease_n(v75, 2);
              *(void *)&unsigned long long v235 = v98;
              *((void *)&v235 + 1) = v75 & 0xFFFFFFFFFFFFFFLL;
              BOOL v108 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, v100, (uint64_t)&v235, v100);
              _StringGuts.appendInPlace(_:isASCII:)(v108, v109, (v75 & 0x4000000000000000) != 0);
              goto LABEL_181;
            }
            if ((v98 & 0x1000000000000000) != 0)
            {
              swift_bridgeObjectRelease(v75);
              id v147 = (id)((v75 & 0xFFFFFFFFFFFFFFFLL) + 32);
              uint64_t v148 = v228;
              uint64_t v149 = v228;
            }
            else
            {
              id v147 = _StringObject.sharedUTF8.getter(v98, v75);
              uint64_t v149 = v162;
              swift_bridgeObjectRelease(v75);
              uint64_t v148 = v228;
              if (v149 < v228) {
                goto LABEL_192;
              }
            }
            char v150 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, v148, (uint64_t)v147, v149);
            _StringGuts.appendInPlace(_:isASCII:)(v150, v151, (v98 & 0x8000000000000000) != 0);
          }
          swift_bridgeObjectRelease(v75);
          goto LABEL_181;
        }
      }
      else
      {
        a2 = v229;
        uint64_t v23 = a1;
        if (v104 > 15) {
          goto LABEL_137;
        }
        uint64_t v105 = v237;
      }
      swift_bridgeObjectRelease_n(v75, 5);
      unint64_t v114 = v236;
      swift_bridgeObjectRetain(v105);
      unint64_t v115 = _StringGuts._convertedToSmall()(v114, v105);
      unint64_t v117 = v116;
      swift_bridgeObjectRelease(v105);
      v118._Swift::UInt64 rawBits = (v231 << 16) | 1;
      v119._Swift::UInt64 rawBits = 1;
      v120._Swift::UInt64 rawBits = _StringGuts.validateScalarRange(_:)(v119, v118, v98, v75);
      if (v120._rawBits < 0x10000) {
        v120._rawBits |= 3;
      }
      unint64_t v122 = specialized String.init(_:)(v120, v121, v98, v75);
      unint64_t v124 = v123;
      swift_bridgeObjectRelease(v75);
      unint64_t v125 = _StringGuts._convertedToSmall()(v122, v124);
      unint64_t v127 = v126;
      swift_bridgeObjectRelease(v124);
      unint64_t v128 = specialized _SmallString.init(_:appending:)(v115, v117, v125, v127);
      if (v130) {
        goto LABEL_285;
      }
      uint64_t v131 = v128;
      uint64_t v132 = v129;
      swift_bridgeObjectRelease(v105);
      uint64_t v236 = v131;
      uint64_t v237 = v132;
LABEL_181:
      uint64_t v75 = v236;
      unint64_t v98 = v237;
      swift_bridgeObjectRelease(*((uint64_t *)&v238 + 1));
      char v79 = 0;
      *(void *)&unsigned long long v238 = v75;
      *((void *)&v238 + 1) = v98;
      if (v78 >= v233) {
        goto LABEL_194;
      }
    }
    Swift::String_optional v111 = Unicode.Scalar._escaped(asASCII:)(1);
    unint64_t v110 = (unint64_t)v111.value._object;
    if (v111.value._object) {
      uint64_t countAndFlagsBits = v111.value._countAndFlagsBits;
    }
    else {
      uint64_t countAndFlagsBits = specialized Unicode.Scalar.withUTF8CodeUnits<A>(_:)(v85);
    }
    unint64_t v113 = v110;
    uint64_t v145 = HIBYTE(v94) & 0xF;
    if ((v94 & 0x2000000000000000) == 0) {
      uint64_t v145 = v95 & 0xFFFFFFFFFFFFLL;
    }
    if (v145 || (v95 & ~v94 & 0x2000000000000000) != 0)
    {
      if ((v94 & 0x2000000000000000) == 0)
      {
        if ((v110 & 0x2000000000000000) != 0) {
LABEL_175:
        }
          uint64_t v146 = HIBYTE(v113) & 0xF;
        else {
LABEL_168:
        }
          uint64_t v146 = countAndFlagsBits & 0xFFFFFFFFFFFFLL;
        uint64_t v23 = a1;
        swift_bridgeObjectRetain(v113);
        _StringGuts.append(_:)(countAndFlagsBits, v113, 0, v146);
        swift_bridgeObjectRelease_n(v113, 2);
        a2 = v229;
        goto LABEL_97;
      }
      if ((v110 & 0x2000000000000000) == 0) {
        goto LABEL_168;
      }
      unint64_t v152 = specialized _SmallString.init(_:appending:)(v95, v94, countAndFlagsBits, v110);
      if (v154) {
        goto LABEL_175;
      }
      uint64_t v155 = v152;
      unint64_t v156 = v153;
      swift_bridgeObjectRelease(v94);
      swift_bridgeObjectRelease(v113);
      *(void *)&unsigned long long v238 = v155;
      *((void *)&v238 + 1) = v156;
    }
    else
    {
      swift_bridgeObjectRelease(v94);
      *(void *)&unsigned long long v238 = countAndFlagsBits;
      *((void *)&v238 + 1) = v113;
    }
    a2 = v229;
    uint64_t v23 = a1;
LABEL_97:
    char v79 = 1;
  }
  while (v78 < v233);
  uint64_t v75 = v238;
  unint64_t v98 = *((void *)&v238 + 1);
LABEL_194:
  uint64_t v76 = 0xE100000000000000;
LABEL_195:
  uint64_t v236 = 34;
  uint64_t v237 = 0xE100000000000000;
  uint64_t v163 = HIBYTE(v98) & 0xF;
  if ((v98 & 0x2000000000000000) == 0) {
    uint64_t v163 = v75 & 0xFFFFFFFFFFFFLL;
  }
  if (!v163) {
    goto LABEL_249;
  }
  while (2)
  {
    uint64_t v169 = v236;
    uint64_t v170 = v237;
    swift_bridgeObjectRetain(v237);
    unint64_t v171 = specialized Collection.first.getter(v169, v170);
    swift_bridgeObjectRelease(v170);
    if ((v171 & 0x100000000) != 0)
    {
      unint64_t v217 = 839;
      goto LABEL_280;
    }
    *(void *)&unsigned long long v235 = v75;
    *((void *)&v235 + 1) = v98;
    *(void *)&unsigned long long v238 = 0;
    *((void *)&v238 + 1) = 0xE000000000000000;
    unint64_t v172 = specialized Unicode.Scalar.withUTF8CodeUnits<A>(_:)(v171);
    uint64_t v174 = v173;
    _StringGuts.append(_:)(v172, v173);
    swift_bridgeObjectRelease(v174);
    unint64_t v176 = *((void *)&v235 + 1);
    uint64_t v175 = v235;
    swift_bridgeObjectRetain(*((unint64_t *)&v235 + 1));
    swift_bridgeObjectRelease(0xE000000000000000);
    unsigned long long v238 = __PAIR128__(v176, v175);
    uint64_t v177 = HIBYTE(v176) & 0xF;
    if ((v176 & 0x2000000000000000) == 0) {
      uint64_t v177 = v175;
    }
    uint64_t v178 = 7;
    if (((v176 >> 60) & ((v175 & 0x800000000000000) == 0)) != 0) {
      uint64_t v178 = 11;
    }
    v179._Swift::UInt64 rawBits = v178 | (v177 << 16);
    swift_bridgeObjectRetain(v176);
    v180._Swift::UInt64 rawBits = _StringGuts.validateInclusiveCharacterIndex_5_7(_:)(v179)._rawBits;
    Swift::UInt64 rawBits = v180._rawBits;
    if (!(v180._rawBits >> 14))
    {
      if (_swift_stdlib_isExecutableLinkedOnOrAfter(0x50700u)) {
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index is out of bounds", 29, 2, "Swift/StringCharacterView.swift", 31, 2, 0x62uLL, 0);
      }
      uint64_t v182 = 0;
      goto LABEL_222;
    }
    uint64_t v182 = v180._rawBits >> 16;
    if (v180._rawBits < 0x20000)
    {
LABEL_226:
      if (v182 <= 63) {
        uint64_t v187 = v182 << 8;
      }
      else {
        uint64_t v187 = 63;
      }
    }
    else
    {
      if ((v176 & 0x1000000000000000) != 0) {
        goto LABEL_225;
      }
      if ((v176 & 0x2000000000000000) != 0)
      {
        *(void *)&unsigned long long v235 = v175;
        *((void *)&v235 + 1) = v176 & 0xFFFFFFFFFFFFFFLL;
        Swift::String::Index v184 = (char *)&v235 + v182;
      }
      else
      {
        if ((v175 & 0x1000000000000000) != 0)
        {
          uint64_t v183 = (char *)((v176 & 0xFFFFFFFFFFFFFFFLL) + 32);
        }
        else
        {
          uint64_t v183 = (char *)_StringObject.sharedUTF8.getter(v175, v176);
          if (!v183) {
            _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "unsafelyUnwrapped of nil optional", 33, 2, "Swift/Optional.swift", 20, 2, 0x163uLL, 0);
          }
        }
        Swift::String::Index v184 = &v183[v182];
      }
      int v185 = *((unsigned __int16 *)v184 - 1);
      if (v185 == 2573 || (v185 & 0x80808080) != 0)
      {
LABEL_225:
        uint64_t v182 = _StringGuts._opaqueComplexCharacterStride(endingAt:)(rawBits >> 16);
        goto LABEL_226;
      }
      uint64_t v182 = 1;
LABEL_222:
      uint64_t v187 = v182 << 8;
    }
    v188._Swift::UInt64 rawBits = _StringGuts.validateInclusiveScalarIndex(_:)(v179)._rawBits;
    if (!(v188._rawBits >> 14)) {
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index is out of bounds", 29, 2, "Swift/StringUnicodeScalarView.swift", 35, 2, 0x84uLL, 0);
    }
    Swift::UInt64 v189 = v188._rawBits;
    swift_bridgeObjectRelease(v176);
    if ((v176 & 0x1000000000000000) != 0)
    {
      Swift::UInt64 v194 = String.UnicodeScalarView._foreignIndex(before:)((Swift::String::Index)v189)._rawBits;
      swift_bridgeObjectRelease(v176);
    }
    else
    {
      if ((v176 & 0x2000000000000000) != 0)
      {
        uint64_t v191 = 0;
        *(void *)&unsigned long long v235 = v175;
        *((void *)&v235 + 1) = v176 & 0xFFFFFFFFFFFFFFLL;
        do
          int v193 = *(&v234 + (v189 >> 16) + v191--) & 0xC0;
        while (v193 == 128);
      }
      else
      {
        if ((v175 & 0x1000000000000000) != 0) {
          Swift::UInt64 v190 = (char *)((v176 & 0xFFFFFFFFFFFFFFFLL) + 32);
        }
        else {
          Swift::UInt64 v190 = (char *)_StringObject.sharedUTF8.getter(v175, v176);
        }
        uint64_t v191 = 0;
        do
          int v192 = v190[(v189 >> 16) - 1 + v191--] & 0xC0;
        while (v192 == 128);
      }
      swift_bridgeObjectRelease(v176);
      Swift::UInt64 v194 = (v189 - -65536 * v191) & 0xFFFFFFFFFFFF0000 | 5;
    }
    if (((rawBits - (v182 << 16)) & 0xFFFFFFFFFFFF0000 | v187) >> 14 >= v194 >> 14)
    {
      Swift::UInt64 v198 = specialized Collection.dropFirst(_:)(1, v236, v237);
      uint64_t v200 = v199;
      *(void *)&unsigned long long v235 = v175;
      *((void *)&v235 + 1) = v176;
      *(void *)&unsigned long long v238 = 0;
      *((void *)&v238 + 1) = 0xE000000000000000;
      specialized String.UnicodeScalarView.append<A>(contentsOf:)(v198, v201, v202, v199);
      swift_bridgeObjectRelease(0xE000000000000000);
      swift_bridgeObjectRelease(v200);
      unint64_t v98 = *((void *)&v235 + 1);
      uint64_t v75 = v235;
      goto LABEL_250;
    }
    *(void *)&unsigned long long v235 = v175;
    *((void *)&v235 + 1) = v176;
    specialized RangeReplaceableCollection<>.removeLast()();
    swift_bridgeObjectRelease(0xE000000000000000);
    unsigned int v195 = specialized RangeReplaceableCollection<>.removeLast()();
    swift_bridgeObjectRelease(0xE000000000000000);
    unsigned long long v238 = v235;
    Swift::String_optional v196 = Unicode.Scalar._escaped(asASCII:)(1);
    unint64_t v164 = v196.value._object;
    if (v196.value._object) {
      uint64_t v165 = v196.value._countAndFlagsBits;
    }
    else {
      uint64_t v165 = specialized Unicode.Scalar.withUTF8CodeUnits<A>(_:)(v195);
    }
    unint64_t v197 = (unint64_t)v164;
    v166._Swift::UInt64 rawBits = 15;
    v167._Swift::UInt64 rawBits = 15;
    specialized String.UnicodeScalarView.replaceSubrange<A>(_:with:)(v166, v167, v165, v197);
    swift_bridgeObjectRelease(v197);
    uint64_t v75 = v238;
    unint64_t v98 = *((void *)&v238 + 1);
    unint64_t v168 = HIBYTE(*((void *)&v238 + 1)) & 0xFLL;
    if ((*((void *)&v238 + 1) & 0x2000000000000000) == 0) {
      unint64_t v168 = v238 & 0xFFFFFFFFFFFFLL;
    }
    if (v168) {
      continue;
    }
    break;
  }
  uint64_t v76 = v237;
LABEL_249:
  swift_bridgeObjectRelease(v76);
LABEL_250:
  Swift::Int v103 = v239._countAndFlagsBits;
  int64_t v102 = (int64_t)v239._object;
  unint64_t v203 = ((unint64_t)v239._object >> 56) & 0xF;
  if (((uint64_t)v239._object & 0x2000000000000000) == 0) {
    unint64_t v203 = v239._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
  }
  if (!v203 && (v239._countAndFlagsBits & ~(uint64_t)v239._object & 0x2000000000000000) == 0)
  {
    swift_bridgeObjectRelease((uint64_t)v239._object);
    v239._uint64_t countAndFlagsBits = v75;
    v239._unint64_t object = (void *)v98;
    goto LABEL_264;
  }
  if (((uint64_t)v239._object & 0x2000000000000000) != 0)
  {
    if ((v98 & 0x2000000000000000) != 0)
    {
LABEL_260:
      unint64_t v205 = specialized _SmallString.init(_:appending:)(v103, v102, v75, v98);
      if (v207) {
        goto LABEL_262;
      }
      uint64_t v208 = v205;
      size_t v209 = v206;
      swift_bridgeObjectRelease(v102);
      swift_bridgeObjectRelease(v98);
      v239._uint64_t countAndFlagsBits = v208;
      v239._unint64_t object = v209;
      unint64_t v98 = (unint64_t)v209;
      uint64_t v75 = v208;
      goto LABEL_264;
    }
LABEL_258:
    uint64_t v204 = v75 & 0xFFFFFFFFFFFFLL;
    goto LABEL_263;
  }
  if ((v98 & 0x2000000000000000) == 0) {
    goto LABEL_258;
  }
LABEL_262:
  uint64_t v204 = HIBYTE(v98) & 0xF;
LABEL_263:
  swift_bridgeObjectRetain(v98);
  _StringGuts.append(_:)(v75, v98, 0, v204);
  swift_bridgeObjectRelease_n(v98, 2);
  uint64_t v75 = v239._countAndFlagsBits;
  unint64_t v98 = (unint64_t)v239._object;
LABEL_264:
  uint64_t v210 = HIBYTE(v98) & 0xF;
  if ((v98 & 0x2000000000000000) == 0) {
    uint64_t v210 = v75 & 0xFFFFFFFFFFFFLL;
  }
  if (v210 || (v75 & ~v98 & 0x2000000000000000) != 0)
  {
    _StringGuts.append(_:)(0x29uLL, 0xE100000000000000);
    swift_bridgeObjectRelease(0xE100000000000000);
    return v239._countAndFlagsBits;
  }
  else
  {
    swift_bridgeObjectRelease(v98);
    return 41;
  }
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance String.UTF8View()
{
  return String.UTF8View.debugDescription.getter(*(void *)v0, *(void *)(v0 + 8));
}

void key path setter for String.utf16 : String(uint64_t *a1, void *a2)
{
  uint64_t v4 = *a1;
  unint64_t v3 = a1[1];
  uint64_t v5 = a2[1];
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRelease(v5);
  *a2 = v4;
  a2[1] = v3;
}

uint64_t (*String.utf8.modify(void *a1))()
{
  a1[2] = v1;
  unint64_t v3 = v1[1];
  *a1 = *v1;
  a1[1] = v3;
  swift_bridgeObjectRetain(v3);
  return String.utf16.modify;
}

void String.utf16.modify(uint64_t *a1, char a2)
{
  uint64_t v2 = a1[1];
  unint64_t v3 = (void *)a1[2];
  uint64_t v4 = *a1;
  uint64_t v5 = v3[1];
  if (a2)
  {
    swift_bridgeObjectRetain(a1[1]);
    swift_bridgeObjectRelease(v5);
    *unint64_t v3 = v4;
    v3[1] = v2;
    swift_bridgeObjectRelease(v2);
  }
  else
  {
    swift_bridgeObjectRelease(v3[1]);
    *unint64_t v3 = v4;
    v3[1] = v2;
  }
}

__objc2_class **String._slowUTF8CString()(unint64_t a1, unint64_t a2)
{
  if ((a2 & 0x2000000000000000) != 0) {
    unint64_t v4 = HIBYTE(a2) & 0xF;
  }
  else {
    unint64_t v4 = a1 & 0xFFFFFFFFFFFFLL;
  }
  BOOL v22 = &_swiftEmptyArrayStorage;
  swift_bridgeObjectRetain(a2);
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4 + 1, 0);
  uint64_t v5 = &_swiftEmptyArrayStorage;
  if (v4)
  {
    uint64_t v6 = (a1 >> 59) & 1;
    if ((a2 & 0x1000000000000000) == 0) {
      LOBYTE(v6) = 1;
    }
    uint64_t v7 = 4 << v6;
    Swift::UInt64 v8 = 15;
    do
    {
      Swift::UInt64 v9 = v8 & 0xC;
      Swift::UInt64 rawBits = v8;
      if (v9 == v7) {
        Swift::UInt64 rawBits = _StringGuts._slowEnsureMatchingEncoding(_:)((Swift::String::Index)v8)._rawBits;
      }
      Swift::UInt64 v11 = rawBits >> 16;
      if (rawBits >> 16 >= v4)
      {
        unint64_t v20 = 228;
        goto LABEL_34;
      }
      if ((a2 & 0x1000000000000000) != 0)
      {
        Swift::UInt8 v13 = String.UTF8View._foreignSubscript(position:)((Swift::String::Index)rawBits);
        if (v9 != v7) {
          goto LABEL_18;
        }
      }
      else if ((a2 & 0x2000000000000000) != 0)
      {
        v21[0] = a1;
        v21[1] = a2 & 0xFFFFFFFFFFFFFFLL;
        Swift::UInt8 v13 = *((unsigned char *)v21 + v11);
        if (v9 != v7) {
          goto LABEL_18;
        }
      }
      else
      {
        unint64_t v12 = (unsigned char *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
        if ((a1 & 0x1000000000000000) == 0) {
          unint64_t v12 = _StringObject.sharedUTF8.getter(a1, a2);
        }
        Swift::UInt8 v13 = v12[v11];
        if (v9 != v7)
        {
LABEL_18:
          if ((a2 & 0x1000000000000000) == 0) {
            goto LABEL_19;
          }
          goto LABEL_22;
        }
      }
      Swift::UInt64 v8 = _StringGuts._slowEnsureMatchingEncoding(_:)((Swift::String::Index)v8)._rawBits;
      if ((a2 & 0x1000000000000000) == 0)
      {
LABEL_19:
        Swift::UInt64 v8 = (v8 & 0xFFFFFFFFFFFF0000) + 65540;
        goto LABEL_24;
      }
LABEL_22:
      if (v4 <= v8 >> 16)
      {
        unint64_t v20 = 144;
LABEL_34:
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index is out of bounds", 29, 2, "Swift/StringUTF8View.swift", 26, 2, v20, 0);
      }
      Swift::UInt64 v8 = String.UTF8View._foreignIndex(after:)((Swift::String::Index)v8)._rawBits;
LABEL_24:
      if (!swift_isUniquelyReferenced_nonNull_native((uint64_t)v5))
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, (int64_t)&v5[2]->isa + 1, 1);
        uint64_t v5 = v22;
      }
      Swift::Int v15 = v5[2];
      unint64_t v14 = (unint64_t)v5[3];
      if ((unint64_t)v15 >= v14 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((__objc2_class **)(v14 > 1), (int64_t)&v15->isa + 1, 1);
        uint64_t v5 = v22;
      }
      void v5[2] = (__objc2_class *)((char *)&v15->isa + 1);
      *((unsigned char *)&v15->info + (void)v5) = v13;
    }
    while (4 * v4 != v8 >> 14);
  }
  swift_bridgeObjectRelease(a2);
  BOOL v22 = v5;
  int64_t v17 = v5[2];
  unint64_t v16 = (unint64_t)v5[3];
  int64_t v18 = (int64_t)&v17->isa + 1;
  if ((unint64_t)v17 >= v16 >> 1)
  {
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((__objc2_class **)(v16 > 1), v18, 1);
    uint64_t v5 = v22;
  }
  void v5[2] = (__objc2_class *)v18;
  *((unsigned char *)&v17->info + (void)v5) = 0;
  return v5;
}

Swift::Int __swiftcall String.UTF8View._foreignCount()()
{
  uint64_t v2 = HIBYTE(v1) & 0xF;
  if ((v1 & 0x2000000000000000) == 0) {
    uint64_t v2 = v0;
  }
  uint64_t v3 = 7;
  if (((v1 >> 60) & ((v0 & 0x800000000000000) == 0)) != 0) {
    uint64_t v3 = 11;
  }
  return String.UTF8View._foreignDistance(from:to:)((Swift::String::Index)15, (Swift::String::Index)(v3 | (v2 << 16)));
}

BOOL String.Index._foreignIsWithin(_:)(int a1, int a2, Swift::String::Index a3)
{
  Swift::UInt64 rawBits = a3._rawBits;
  if ((a3._rawBits & 0xC001) == 0) {
    Swift::UInt64 rawBits = a3._rawBits & 0xC | _StringGuts.scalarAlignSlow(_:)(a3)._rawBits & 0xFFFFFFFFFFFFFFF3 | 1;
  }
  return (rawBits ^ a3._rawBits) < 0x4000;
}

uint64_t String.UTF8View.customMirror.getter@<X0>(unint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  swift_bridgeObjectRetain_n(a2, 2);

  return specialized Mirror.init<A, B>(_:unlabeledChildren:displayStyle:ancestorRepresentation:)(a1, a2, a1, a2, 8, 0, 0, a3);
}

uint64_t protocol witness for CustomReflectable.customMirror.getter in conformance String.UTF8View(uint64_t a1, uint64_t a2)
{
  return protocol witness for CustomReflectable.customMirror.getter in conformance String.UnicodeScalarView(a1, a2, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, void))specialized Mirror.init<A, B>(_:unlabeledChildren:displayStyle:ancestorRepresentation:));
}

uint64_t protocol witness for CustomReflectable.customMirror.getter in conformance String.UnicodeScalarView(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, void))
{
  uint64_t v5 = *v3;
  uint64_t v4 = v3[1];
  swift_bridgeObjectRetain_n(v4, 2);

  return a3(v5, v4, v5, v4, 8, 0, 0);
}

uint64_t Substring.UTF8View.init(_:_bounds:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a3;
}

Swift::tuple_Unicode_Scalar_scalarLength_Int __swiftcall _StringGuts.foreignErrorCorrectedScalar(endingAt:)(Swift::String::Index endingAt)
{
  Swift::UInt64 v3 = endingAt._rawBits >> 16;
  uint64_t v4 = (void *)(v1 & 0xFFFFFFFFFFFFFFFLL);
  unsigned int v5 = [v1 characterAtIndex:(endingAt._rawBits >> 16) - 1];
  if ((v5 & 0xFC00) != 0xD800)
  {
    int v6 = v5;
    if ((v5 & 0xFC00) != 0xDC00) {
      goto LABEL_4;
    }
    if (endingAt._rawBits >= 0x20000)
    {
      unsigned __int16 v9 = (unsigned __int16)[v4 characterAtIndex:v3 - 2];
      if ((v9 & 0xFC00) == 0xD800)
      {
        int v6 = (v6 & 0x3FF | ((v9 & 0x3FF) << 10)) + 0x10000;
        Swift::Int v7 = 2;
        goto LABEL_5;
      }
    }
  }
  int v6 = 65533;
LABEL_4:
  Swift::Int v7 = 1;
LABEL_5:
  Swift::UInt32 v8 = v6;
  result.Swift::Int scalarLength = v7;
  result._0._unsigned int value = v8;
  return result;
}

Swift::_ValidUTF8Buffer::Index __swiftcall _ValidUTF8Buffer.index(_:offsetBy:)(Swift::_ValidUTF8Buffer::Index _, Swift::Int offsetBy)
{
  unsigned int v3 = v2;
  Swift::UInt32 biasedBits = _._biasedBits;
  if (!v2)
  {
    if (!_._biasedBits) {
      goto LABEL_8;
    }
    unint64_t v6 = 0;
    goto LABEL_7;
  }
  Swift::UInt32 v15 = v2;
  MEMORY[0x1F4188790](*(void *)&_._biasedBits);
  unint64_t v14 = &v15;
  unint64_t v6 = v3 | ((unint64_t)v3 << 32);
  *(void *)&_._Swift::UInt32 biasedBits = specialized Sequence.contains(where:)((unsigned int (*)(int *))closure #1 in Sequence<>.contains(_:)specialized partial apply, (uint64_t)v13, v6, 0);
  if ((_._biasedBits & 1) == 0)
  {
    LODWORD(v14) = 0;
    unint64_t v12 = 130;
    goto LABEL_17;
  }
  if (biasedBits)
  {
LABEL_7:
    Swift::UInt32 v15 = biasedBits;
    MEMORY[0x1F4188790](*(void *)&_._biasedBits);
    unint64_t v14 = &v15;
    if (specialized Sequence.contains(where:)((unsigned int (*)(int *))closure #1 in Sequence<>.contains(_:)specialized partial apply, (uint64_t)v13, v6, 0))goto LABEL_8; {
    LODWORD(v14) = 0;
    }
    unint64_t v12 = 131;
LABEL_17:
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/ValidUTF8Buffer.swift", 27, 2, v12, (int)v14);
  }
LABEL_8:
  unint64_t v7 = __clz(v3);
  uint64_t v8 = __clz(biasedBits);
  BOOL v9 = __OFADD__(offsetBy, (uint64_t)(v7 - v8) >> 3);
  unint64_t v10 = offsetBy + ((uint64_t)(v7 - v8) >> 3);
  if (v9)
  {
    __break(1u);
    goto LABEL_13;
  }
  if ((v10 & 0x8000000000000000) != 0)
  {
LABEL_13:
    LODWORD(v14) = 0;
    unint64_t v12 = 142;
    goto LABEL_17;
  }
  if (4 - (v7 >> 3) < v10)
  {
    LODWORD(v14) = 0;
    unint64_t v12 = 143;
    goto LABEL_17;
  }
  return (Swift::_ValidUTF8Buffer::Index)(v3 >> (4 * (v10 & 7)) >> (4 * (v10 & 7)));
}

uint64_t _ValidUTF8Buffer.subscript.getter(int a1)
{
  return (a1 - 1);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance UTF8ValidationResult(uint64_t a1, uint64_t a2)
{
  BOOL v3 = *(void *)a1 == *(void *)a2 && *(void *)(a1 + 8) == *(void *)(a2 + 8);
  if ((*(unsigned char *)(a2 + 16) & 1) == 0) {
    BOOL v3 = 0;
  }
  char v4 = ((*(void *)a1 & 1) == 0) ^ *(void *)a2;
  if (*(unsigned char *)(a2 + 16)) {
    char v4 = 0;
  }
  if (*(unsigned char *)(a1 + 16)) {
    char v4 = v3;
  }
  return v4 & 1;
}

uint64_t protocol witness for Error._domain.getter in conformance UTF8ValidationError(uint64_t a1, uint64_t a2)
{
  return protocol witness for Error._domain.getter in conformance _MergeError(a1, a2, &demangling cache variable for type metadata for UTF8ValidationError.Type);
}

uint64_t UnsafeBufferPointer.startIndex.getter()
{
  return 0;
}

uint64_t UInt16.byteSwapped.getter(unsigned int a1)
{
  return bswap32(a1) >> 16;
}

BOOL static UInt16.<= infix(_:_:)(unsigned __int16 a1, unsigned __int16 a2)
{
  return a2 >= a1;
}

uint64_t _legacyNarrowIllegalRange #1 (buf:) in validateUTF8(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = specialized Collection.dropFirst(_:)(2, a1, a2);
  __int16 v12 = specialized Collection.first.getter(v8, v9, v10, v11);
  uint64_t v13 = specialized Collection.dropFirst(_:)(1, a1, a2);
  __int16 v17 = specialized Collection.first.getter(v13, v14, v15, v16);
  __int16 v18 = specialized Collection.first.getter(a1, a2, a3, a4);
  if ((v18 & 0x100) != 0) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/StringUTF8Validation.swift", 32, 2, 0x5FuLL, 0);
  }
  __int16 v19 = v12 << 8;
  if ((v12 & 0x100) != 0) {
    __int16 v19 = 0;
  }
  int v20 = v19 & 0xFF00;
  int v21 = (v19 & 0xFF00 | v17) << 8;
  if ((v17 & 0x100) != 0) {
    int v21 = v20;
  }
  if ((v21 & 0xC000 | v18 & 0xF0) == 0x80E0)
  {
    if ((v21 & 0x2000 | v18 & 0xF) == 0x200D || (v21 & 0x2000 | v18 & 0xF) == 0) {
      uint64_t v23 = 1;
    }
    else {
      uint64_t v23 = 2;
    }
  }
  else if ((v21 & 0xC000 | v18 & 0xF8) == 0x80F0)
  {
    uint64_t v23 = 1;
    if (v21 & 0x3000 | v18 & 7 && __rev16(v21 & 0x3000 | v18 & 7) <= 0x400)
    {
      if ((v21 & 0xC00000) == 0x800000) {
        uint64_t v23 = 3;
      }
      else {
        uint64_t v23 = 2;
      }
    }
  }
  else
  {
    uint64_t v23 = 1;
  }
  if (__OFADD__(a1, v23))
  {
    __break(1u);
LABEL_24:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
  }
  if (a1 + v23 < a1) {
    goto LABEL_24;
  }
  return a1;
}

uint64_t findInvalidRange #1 (_:) in validateUTF8(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = a1;
  if (a1 != a2)
  {
    specialized Slice.subscript.getter(a1, a1, a2, a3, a4);
    uint64_t v8 = a1 + 1;
    if (__OFADD__(a1, 1)) {
      _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x5F5uLL, 0);
    }
  }
  uint64_t v9 = 0;
  uint64_t v10 = a2 + a1 - v8;
  if (v8 <= a2) {
    uint64_t v11 = a2;
  }
  else {
    uint64_t v11 = v8;
  }
  if (v8 <= a4) {
    uint64_t v12 = a4;
  }
  else {
    uint64_t v12 = v8;
  }
  uint64_t v13 = v12 - v8;
  uint64_t v14 = v11 - v8;
  while (a2 - v8 != v9)
  {
    if (v8 < a1) {
      _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x714uLL, 0);
    }
    if (v14 == v9) {
      _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x715uLL, 0);
    }
    if (v8 < 0) {
      _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x6F5uLL, 0);
    }
    if (v13 == v9) {
      _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x6F6uLL, 0);
    }
    if ((*(unsigned char *)(a3 + v8 + v9) & 0xC0) != 0x80) {
      goto LABEL_19;
    }
    uint64_t v15 = a1 + v9++;
    if (__OFADD__(v15, 1))
    {
      __break(1u);
LABEL_19:
      uint64_t v10 = a1 + v9;
      break;
    }
  }
  if (v10 < a1) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/ClosedRange.swift", 23, 2, 0x15BuLL, 0);
  }
  uint64_t v16 = v10 + 1;
  if (__OFADD__(v10, 1))
  {
    __break(1u);
LABEL_32:
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x71CuLL, 0);
  }
  if (v16 > a2) {
    goto LABEL_32;
  }

  return _legacyNarrowIllegalRange #1 (buf:) in validateUTF8(_:)(a1, v16, a3, a4);
}

Swift::Int __swiftcall _StringGuts.previousWordIndex(endingAt:)(Swift::Int endingAt)
{
  unint64_t v3 = v2;
  uint64_t v4 = v1;
  if ((v2 & 0x1000000000000000) != 0)
  {
    return _StringGuts._foreignPreviousWordIndex(endingAt:)(endingAt);
  }
  else
  {
    if ((v2 & 0x2000000000000000) != 0)
    {
      v16[0] = v1;
      v16[1] = v2 & 0xFFFFFFFFFFFFFFLL;
      swift_bridgeObjectRetain(v2);
      uint64_t v11 = v16;
      Swift::Int v8 = endingAt;
      uint64_t v9 = v4;
      unint64_t v10 = v3;
      uint64_t v12 = HIBYTE(v3) & 0xF;
    }
    else
    {
      if ((v1 & 0x1000000000000000) != 0)
      {
        unint64_t v6 = (void *)((v2 & 0xFFFFFFFFFFFFFFFLL) + 32);
        uint64_t v7 = v1 & 0xFFFFFFFFFFFFLL;
      }
      else
      {
        unint64_t v6 = _StringObject.sharedUTF8.getter(v1, v2);
        uint64_t v7 = v15;
      }
      swift_bridgeObjectRetain(v3);
      Swift::Int v8 = endingAt;
      uint64_t v9 = v4;
      unint64_t v10 = v3;
      uint64_t v11 = v6;
      uint64_t v12 = v7;
    }
    Swift::Int v13 = ((uint64_t (*)(Swift::Int, uint64_t, unint64_t, void *, uint64_t))specialized _StringGuts.previousWordBoundary(endingAt:previousScalar:))(v8, v9, v10, v11, v12);
    swift_bridgeObjectRelease(v3);
    return v13;
  }
}

Swift::Int __swiftcall _StringGuts.nextWordIndex(startingAt:)(Swift::Int startingAt)
{
  unint64_t v3 = v2;
  uint64_t v4 = v1;
  if ((v2 & 0x1000000000000000) != 0)
  {
    swift_bridgeObjectRetain(v2);
    Swift::Int v9 = specialized _StringGuts.nextWordBoundary(startingAt:nextScalar:)(startingAt, v4, v3, v4, v3);
    swift_bridgeObjectRelease(v3);
    return v9;
  }
  else if ((v2 & 0x2000000000000000) != 0)
  {
    v11[0] = v1;
    v11[1] = v2 & 0xFFFFFFFFFFFFFFLL;
    return specialized _StringGuts.nextWordBoundary(startingAt:nextScalar:)(startingAt, v1, v2, (uint64_t)v11, HIBYTE(v2) & 0xF);
  }
  else
  {
    if ((v1 & 0x1000000000000000) != 0)
    {
      id v6 = (id)((v2 & 0xFFFFFFFFFFFFFFFLL) + 32);
      uint64_t v7 = v1 & 0xFFFFFFFFFFFFLL;
    }
    else
    {
      id v6 = _StringObject.sharedUTF8.getter(v1, v2);
      uint64_t v7 = v10;
    }
    return specialized _StringGuts.nextWordBoundary(startingAt:nextScalar:)(startingAt, v4, v3, (uint64_t)v6, v7);
  }
}

uint64_t specialized _StringGuts.nextWordBoundary(startingAt:nextScalar:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = HIBYTE(a3) & 0xF;
  if ((a3 & 0x2000000000000000) == 0) {
    uint64_t v5 = a2 & 0xFFFFFFFFFFFFLL;
  }
  if (v5 <= a1) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/StringWordBreaking.swift", 30, 2, 0x9AuLL, 0);
  }
  if (a1 >= a5) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/StringWordBreaking.swift", 30, 2, 0x9CuLL, 0);
  }
  unsigned int v9 = _decodeScalar(_:startingAt:)(a4, a2, a1);
  uint64_t v11 = v10 + a1;
  if (v11 >= a5) {
    return v11;
  }
  unsigned int v12 = v9;
  int v31 = 0;
  uint64_t v13 = 0;
  unint64_t v32 = 0;
  char v33 = 0;
  int v14 = 18;
  char v15 = 1;
  do
  {
    unsigned int v16 = v12;
    unsigned int v17 = _decodeScalar(_:startingAt:)(a4, v10, v11);
    unsigned int v12 = v17;
    uint64_t v18 = v10;
    if (v16 == 13 && v17 == 10) {
      goto LABEL_8;
    }
    if (v16 - 10 < 4 || v16 == 133 || v16 - 8234 >= 0xFFFFFFFE) {
      break;
    }
    switch(v16)
    {
      case 0x200Du:
        if (v17 >= 0xA)
        {
          if (v17 < 0xE || v17 == 133) {
            goto LABEL_258;
          }
          if (v17 >> 3 >= 0x405)
          {
            if (v17 < 0x202A) {
              goto LABEL_258;
            }
            int v20 = 17;
            if (v17 - 127488 < 0xFFFFFFE6)
            {
              LOBYTE(v19) = 17;
              goto LABEL_65;
            }
            goto LABEL_206;
          }
        }
        int v19 = 17;
        break;
      case 0x27u:
        if (v17 >= 0xA)
        {
          if (v17 < 0xE || v17 == 133) {
            goto LABEL_258;
          }
          if (v17 >> 3 >= 0x405)
          {
            if (v17 < 0x202A) {
              goto LABEL_258;
            }
            int v20 = 15;
            if (v17 - 127488 < 0xFFFFFFE6)
            {
              LOBYTE(v19) = 15;
              goto LABEL_65;
            }
            goto LABEL_206;
          }
        }
        int v19 = 15;
        break;
      case 0x22u:
        if (v17 >= 0xA)
        {
          if (v17 < 0xE || v17 == 133) {
            goto LABEL_258;
          }
          if (v17 >> 3 >= 0x405)
          {
            if (v17 < 0x202A) {
              goto LABEL_258;
            }
            int v20 = 2;
            if (v17 - 127488 < 0xFFFFFFE6)
            {
              LOBYTE(v19) = 2;
              goto LABEL_65;
            }
            goto LABEL_206;
          }
        }
        int v19 = 2;
        break;
      default:
        if (v16 - 127488 < 0xFFFFFFE6)
        {
          switch(_swift_stdlib_getWordBreakProperty(v16))
          {
            case 0u:
              if (v12 < 0xA) {
                goto LABEL_43;
              }
              if (v12 < 0xE || v12 == 133) {
                goto LABEL_258;
              }
              if (v12 >> 3 < 0x405)
              {
LABEL_43:
                int v19 = 3;
                goto LABEL_32;
              }
              if (v12 < 0x202A) {
                goto LABEL_258;
              }
              int v20 = 3;
              if (v12 - 127488 >= 0xFFFFFFE6) {
                goto LABEL_206;
              }
              LOBYTE(v19) = 3;
              goto LABEL_65;
            case 1u:
              if (v12 < 0xA) {
                goto LABEL_87;
              }
              if (v12 < 0xE || v12 == 133) {
                goto LABEL_258;
              }
              if (v12 >> 3 < 0x405)
              {
LABEL_87:
                int v19 = 6;
                goto LABEL_32;
              }
              if (v12 < 0x202A) {
                goto LABEL_258;
              }
              int v20 = 6;
              if (v12 - 127488 >= 0xFFFFFFE6) {
                goto LABEL_206;
              }
              LOBYTE(v19) = 6;
              goto LABEL_65;
            case 2u:
              if (v12 < 0xA) {
                goto LABEL_92;
              }
              if (v12 < 0xE || v12 == 133) {
                goto LABEL_258;
              }
              if (v12 >> 3 < 0x405)
              {
LABEL_92:
                int v19 = 8;
                goto LABEL_32;
              }
              if (v12 < 0x202A) {
                goto LABEL_258;
              }
              int v20 = 8;
              if (v12 - 127488 >= 0xFFFFFFE6) {
                goto LABEL_206;
              }
              LOBYTE(v19) = 8;
              goto LABEL_65;
            case 3u:
              if (v12 < 0xA) {
                goto LABEL_97;
              }
              if (v12 < 0xE || v12 == 133) {
                goto LABEL_258;
              }
              if (v12 >> 3 < 0x405)
              {
LABEL_97:
                int v19 = 7;
                goto LABEL_32;
              }
              if (v12 < 0x202A) {
                goto LABEL_258;
              }
              int v20 = 7;
              if (v12 - 127488 >= 0xFFFFFFE6) {
                goto LABEL_206;
              }
              LOBYTE(v19) = 7;
              goto LABEL_65;
            case 4u:
              if (v12 < 0xA) {
                goto LABEL_102;
              }
              if (v12 < 0xE || v12 == 133) {
                goto LABEL_258;
              }
              if (v12 >> 3 < 0x405)
              {
LABEL_102:
                int v20 = 0;
                LOBYTE(v19) = 0;
                goto LABEL_33;
              }
              if (v12 < 0x202A) {
                goto LABEL_258;
              }
              if (v12 - 127488 < 0xFFFFFFE6)
              {
                int v20 = 0;
                LOBYTE(v19) = 0;
                goto LABEL_65;
              }
              int v25 = 0;
              char v21 = 0;
              char v22 = 0;
              int v20 = 0;
              goto LABEL_207;
            case 5u:
              if (v12 < 0xA) {
                goto LABEL_107;
              }
              if (v12 < 0xE || v12 == 133) {
                goto LABEL_258;
              }
              if (v12 >> 3 < 0x405)
              {
LABEL_107:
                int v19 = 11;
                goto LABEL_32;
              }
              if (v12 < 0x202A) {
                goto LABEL_258;
              }
              int v20 = 11;
              if (v12 - 127488 >= 0xFFFFFFE6) {
                goto LABEL_206;
              }
              LOBYTE(v19) = 11;
              goto LABEL_65;
            case 6u:
              if (v12 < 0xA) {
                goto LABEL_112;
              }
              if (v12 < 0xE || v12 == 133) {
                goto LABEL_258;
              }
              if (v12 >> 3 < 0x405)
              {
LABEL_112:
                int v19 = 9;
                goto LABEL_32;
              }
              if (v12 < 0x202A) {
                goto LABEL_258;
              }
              int v20 = 9;
              if (v12 - 127488 >= 0xFFFFFFE6) {
                goto LABEL_206;
              }
              LOBYTE(v19) = 9;
              goto LABEL_65;
            case 7u:
              if (v12 < 0xA)
              {
                int v19 = 10;
                goto LABEL_32;
              }
              if (v12 < 0xE || v12 == 133) {
                goto LABEL_258;
              }
              if (v12 >> 3 > 0x404)
              {
                if (v12 < 0x202A) {
                  goto LABEL_258;
                }
                int v20 = 10;
                if (v12 - 127488 < 0xFFFFFFE6) {
                  goto LABEL_193;
                }
                goto LABEL_206;
              }
              int v20 = 10;
              if (v12 == 34) {
                goto LABEL_36;
              }
              if (v12 != 39)
              {
                if (v12 == 8205) {
                  goto LABEL_67;
                }
LABEL_193:
                LOBYTE(v19) = 10;
                goto LABEL_65;
              }
              goto LABEL_165;
            case 8u:
              if (v12 < 0xA)
              {
                int v19 = 13;
                goto LABEL_32;
              }
              if (v12 < 0xE || v12 == 133) {
                goto LABEL_258;
              }
              if (v12 >> 3 > 0x404)
              {
                if (v12 < 0x202A) {
                  goto LABEL_258;
                }
                int v20 = 13;
                if (v12 - 127488 < 0xFFFFFFE6) {
                  goto LABEL_196;
                }
                goto LABEL_206;
              }
              int v20 = 13;
              if (v12 == 34) {
                goto LABEL_36;
              }
              if (v12 != 39)
              {
                if (v12 == 8205) {
                  goto LABEL_67;
                }
LABEL_196:
                LOBYTE(v19) = 13;
                goto LABEL_65;
              }
              goto LABEL_165;
            case 9u:
              if (v12 < 0xA)
              {
                int v19 = 5;
                goto LABEL_32;
              }
              if (v12 < 0xE || v12 == 133) {
                goto LABEL_258;
              }
              if (v12 >> 3 > 0x404)
              {
                if (v12 < 0x202A) {
                  goto LABEL_258;
                }
                int v20 = 5;
                if (v12 - 127488 < 0xFFFFFFE6) {
                  goto LABEL_199;
                }
                goto LABEL_206;
              }
              int v20 = 5;
              if (v12 == 34) {
                goto LABEL_36;
              }
              if (v12 != 39)
              {
                if (v12 == 8205) {
                  goto LABEL_67;
                }
LABEL_199:
                LOBYTE(v19) = 5;
                goto LABEL_65;
              }
              goto LABEL_165;
            case 0xAu:
              if (v12 < 0xA)
              {
                int v19 = 16;
                goto LABEL_32;
              }
              if (v12 < 0xE || v12 == 133) {
                goto LABEL_258;
              }
              if (v12 >> 3 > 0x404)
              {
                if (v12 < 0x202A) {
                  goto LABEL_258;
                }
                int v20 = 16;
                if (v12 - 127488 < 0xFFFFFFE6) {
                  goto LABEL_202;
                }
                goto LABEL_206;
              }
              int v20 = 16;
              if (v12 == 34) {
                goto LABEL_36;
              }
              if (v12 != 39)
              {
                if (v12 == 8205)
                {
                  int v14 = 16;
                  goto LABEL_8;
                }
LABEL_202:
                LOBYTE(v19) = 16;
                goto LABEL_65;
              }
              goto LABEL_165;
            case 0xBu:
              if (v12 < 0xA)
              {
                int v19 = 4;
                goto LABEL_32;
              }
              if (v12 < 0xE || v12 == 133) {
                goto LABEL_258;
              }
              if (v12 >> 3 > 0x404)
              {
                if (v12 < 0x202A) {
                  goto LABEL_258;
                }
                int v20 = 4;
                if (v12 - 127488 < 0xFFFFFFE6) {
                  goto LABEL_205;
                }
                goto LABEL_206;
              }
              int v20 = 4;
              if (v12 == 34) {
                goto LABEL_36;
              }
              if (v12 != 39)
              {
                if (v12 == 8205)
                {
                  int v14 = 4;
                  goto LABEL_8;
                }
LABEL_205:
                LOBYTE(v19) = 4;
                goto LABEL_65;
              }
              break;
            default:
              if (v12 < 0xA)
              {
                LOBYTE(v19) = 1;
                int v20 = 1;
                goto LABEL_65;
              }
              if (v12 < 0xE || v12 == 133) {
                goto LABEL_258;
              }
              if (v12 >> 3 > 0x404)
              {
                if (v12 < 0x202A) {
                  goto LABEL_258;
                }
                int v20 = 1;
                if (v12 - 127488 < 0xFFFFFFE6) {
                  goto LABEL_190;
                }
                goto LABEL_206;
              }
              int v20 = 1;
              if (v12 == 34) {
                goto LABEL_36;
              }
              if (v12 != 39)
              {
                if (v12 == 8205)
                {
                  int v14 = 1;
                  goto LABEL_8;
                }
LABEL_190:
                LOBYTE(v19) = 1;
                goto LABEL_65;
              }
              goto LABEL_165;
          }
          goto LABEL_165;
        }
        if (v17 < 0xA)
        {
          LOBYTE(v19) = 14;
          int v20 = 14;
          goto LABEL_65;
        }
        if (v17 < 0xE || v17 == 133) {
          goto LABEL_258;
        }
        if (v17 >> 3 > 0x404)
        {
          if (v17 < 0x202A) {
            goto LABEL_258;
          }
          int v20 = 14;
          if (v17 - 127488 >= 0xFFFFFFE6)
          {
LABEL_206:
            int v25 = 0;
            char v21 = 0;
            char v22 = 0;
LABEL_207:
            unsigned int v23 = 14;
            goto LABEL_208;
          }
        }
        else
        {
          int v20 = 14;
          switch(v17)
          {
            case 0x22u:
LABEL_36:
              char v21 = 0;
              char v22 = 0;
              unsigned int v23 = 2;
              goto LABEL_166;
            case 0x27u:
              goto LABEL_165;
            case 0x200Du:
              int v14 = 14;
              goto LABEL_8;
          }
        }
        LOBYTE(v19) = 14;
        goto LABEL_65;
    }
LABEL_32:
    int v20 = v19;
LABEL_33:
    if (v12 != 8205)
    {
      if (v12 != 39)
      {
        if (v12 == 34) {
          goto LABEL_36;
        }
LABEL_65:
        int WordBreakProperty = _swift_stdlib_getWordBreakProperty(v12);
        char v21 = 0;
        char v22 = 0;
        unsigned int v23 = 8;
        int v25 = 1;
        switch(WordBreakProperty)
        {
          case 0:
          case 1:
            goto LABEL_66;
          case 2:
            break;
          case 3:
            char v21 = 0;
            unsigned int v23 = 7;
            char v22 = 1;
            break;
          case 4:
            char v21 = 0;
            char v22 = 0;
            unsigned int v23 = 0;
            break;
          case 5:
            char v21 = 0;
            char v22 = 0;
            unsigned int v23 = 11;
            break;
          case 6:
            char v21 = 0;
            char v22 = 0;
            unsigned int v23 = 9;
            break;
          case 7:
            char v21 = 0;
            char v22 = 0;
            unsigned int v23 = 10;
            break;
          case 8:
            char v22 = 0;
            unsigned int v23 = 13;
            char v21 = 1;
            break;
          case 9:
            char v21 = 0;
            char v22 = 0;
            unsigned int v23 = 5;
            break;
          case 10:
            if (v20 == 16) {
              goto LABEL_8;
            }
            char v21 = 0;
            char v22 = 0;
            unsigned int v23 = 16;
            break;
          case 11:
            if (v20 == 17) {
              goto LABEL_8;
            }
            char v21 = 0;
            char v22 = 0;
            unsigned int v23 = 4;
            break;
          default:
            if (v20 == 1) {
              goto LABEL_258;
            }
            char v21 = 0;
            char v22 = 0;
            int v25 = 1;
            unsigned int v23 = 1;
            break;
        }
LABEL_208:
        if (v14 == 18) {
          int v26 = v20;
        }
        else {
          int v26 = v14;
        }
        switch(v26)
        {
          case 0:
            if (v23 > 0xF) {
              goto LABEL_258;
            }
            int v27 = 1 << v23;
            if ((v27 & 0x20A1) != 0) {
              goto LABEL_248;
            }
            if ((v27 & 0x8A00) == 0) {
              goto LABEL_258;
            }
            goto LABEL_231;
          case 2:
            if ((v22 & 1) == 0) {
              goto LABEL_258;
            }
            if (v15) {
              return v11;
            }
            if ((v33 & 1) == 0 || v32 < 2) {
              return v13;
            }
            goto LABEL_7;
          case 5:
            if (v23 > 0xD || ((1 << v23) & 0x21A1) == 0) {
              goto LABEL_258;
            }
            goto LABEL_248;
          case 7:
            if (v23 > 0xF) {
              goto LABEL_258;
            }
            if (((1 << v23) & 0xA0A1) != 0) {
              goto LABEL_248;
            }
            if (((1 << v23) & 0xA00) != 0)
            {
LABEL_231:
              unint64_t v32 = 0;
              char v15 = 0;
              int v14 = 18;
            }
            else
            {
              if (v23 != 2) {
                goto LABEL_258;
              }
              char v15 = 0;
              int v14 = 18;
              uint64_t v29 = 2;
LABEL_255:
              unint64_t v32 = v29;
            }
            char v33 = 1;
            uint64_t v13 = v11;
            goto LABEL_8;
          case 8:
            int v14 = 18;
            if (v23 != 5 && v23 != 8) {
              goto LABEL_258;
            }
            goto LABEL_8;
          case 9:
            if (v23 && v23 != 7) {
              goto LABEL_258;
            }
            goto LABEL_237;
          case 10:
            if ((v21 & 1) == 0) {
              goto LABEL_258;
            }
            goto LABEL_242;
          case 11:
          case 15:
            if (!v23 || v23 == 7)
            {
LABEL_237:
              if (v15) {
                return v11;
              }
              if ((v33 & 1) == 0 || v32) {
                return v13;
              }
            }
            else
            {
              if (v23 != 13) {
                goto LABEL_258;
              }
LABEL_242:
              if (v15) {
                return v11;
              }
              if ((v33 & 1) == 0 || v32 != 1) {
                return v13;
              }
            }
LABEL_7:
            unint64_t v32 = 0;
            char v33 = 0;
            uint64_t v13 = 0;
            int v14 = 18;
            char v15 = 1;
            break;
          case 13:
            if (v23 > 0xF) {
              goto LABEL_258;
            }
            int v28 = 1 << v23;
            if ((v28 & 0x20A1) != 0)
            {
LABEL_248:
              int v14 = 18;
              goto LABEL_8;
            }
            if ((v28 & 0x8C00) == 0) {
              goto LABEL_258;
            }
            char v15 = 0;
            int v14 = 18;
            uint64_t v29 = 1;
            goto LABEL_255;
          case 14:
            if ((v25 | v31)) {
              goto LABEL_258;
            }
            int v14 = 18;
            int v31 = 1;
            goto LABEL_8;
          default:
            goto LABEL_258;
        }
        goto LABEL_8;
      }
LABEL_165:
      char v21 = 0;
      char v22 = 0;
      unsigned int v23 = 15;
LABEL_166:
      int v25 = 1;
      goto LABEL_208;
    }
LABEL_66:
    if (((1 << v19) & 0x20048) == 0) {
LABEL_67:
    }
      int v14 = v20;
LABEL_8:
    v11 += v18;
  }
  while (v11 < a5);
LABEL_258:
  if (v15) {
    return v11;
  }
  return v13;
}

uint64_t closure #1 in _StringGuts._foreignNextWordIndex(startingAt:)(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if ((a3 & 0x2000000000000000) != 0) {
    uint64_t v4 = HIBYTE(a3) & 0xF;
  }
  else {
    uint64_t v4 = a2 & 0xFFFFFFFFFFFFLL;
  }
  if (v4 <= a1) {
    return 0;
  }
  v8._Swift::UInt64 rawBits = _StringGuts.validateScalarIndex(_:)((Swift::String::Index)(a1 << 16))._rawBits;
  if ((a3 & 0x1000000000000000) != 0)
  {
    unsigned int value = _StringGuts.foreignErrorCorrectedScalar(startingAt:)((Swift::String::Index)(v8._rawBits & 0xFFFFFFFFFFFF0000))._0._value;
    v13._Swift::UInt64 rawBits = _StringGuts.validateScalarIndex(_:)((Swift::String::Index)(a1 << 16))._rawBits;
    String.UnicodeScalarView._foreignIndex(after:)(v13);
  }
  else
  {
    Swift::UInt64 v10 = v8._rawBits >> 16;
    if ((a3 & 0x2000000000000000) != 0)
    {
      uint64_t v14 = a2;
      uint64_t v15 = a3 & 0xFFFFFFFFFFFFFFLL;
      unsigned int value = _decodeScalar(_:startingAt:)((uint64_t)&v14, v9._rawBits, v10);
      _StringGuts.validateScalarIndex(_:)((Swift::String::Index)(a1 << 16))._rawBits;
      uint64_t v14 = a2;
      uint64_t v15 = a3 & 0xFFFFFFFFFFFFFFLL;
    }
    else
    {
      if ((a2 & 0x1000000000000000) != 0) {
        id v11 = (id)((a3 & 0xFFFFFFFFFFFFFFFLL) + 32);
      }
      else {
        id v11 = _StringObject.sharedUTF8.getter(a2, a3);
      }
      unsigned int value = _decodeScalar(_:startingAt:)((uint64_t)v11, v9._rawBits, v10);
      _StringGuts.validateScalarIndex(_:)((Swift::String::Index)(a1 << 16))._rawBits;
      if ((a2 & 0x1000000000000000) == 0) {
        _StringObject.sharedUTF8.getter(a2, a3);
      }
    }
  }
  return value;
}

Swift::Int __swiftcall _StringGuts._foreignPreviousWordIndex(endingAt:)(Swift::Int endingAt)
{
  uint64_t v3 = v2;
  uint64_t v4 = v1;
  swift_bridgeObjectRetain(v2);
  Swift::Int v6 = ((uint64_t (*)(Swift::Int, uint64_t, uint64_t))specialized _StringGuts.previousWordBoundary(endingAt:previousScalar:))(endingAt, v4, v3);
  swift_bridgeObjectRelease(v3);
  return v6;
}

uint64_t _decodeScalar(_:endingAt:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = 0;
  do
    int v4 = *(unsigned char *)(a1 + a3 - 1 + v3--) & 0xC0;
  while (v4 == 128);
  return _decodeScalar(_:startingAt:)(a1, a2, a3 + v3);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance _WordQuestion(uint64_t *a1, unint64_t *a2)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  unint64_t v5 = *a2;
  unint64_t v4 = a2[1];
  if (*((unsigned char *)a1 + 16) == 1)
  {
    if (v3 | v2)
    {
      if (v3 ^ 1 | v2)
      {
        if (*((unsigned char *)a2 + 16) && __PAIR128__(v4, v5) >= 2) {
          return 1;
        }
      }
      else if (*((unsigned char *)a2 + 16) && !(v5 ^ 1 | v4))
      {
        return 1;
      }
      return 0;
    }
    uint64_t v8 = v5 | v4;
    return *((unsigned char *)a2 + 16) && v8 == 0;
  }
  else
  {
    unsigned int v6 = (v3 == v5) & ~*((unsigned __int8 *)a2 + 16);
    if (v2 == v4) {
      return v6;
    }
    else {
      return 0;
    }
  }
}

uint64_t (*Substring._slice.modify())()
{
  return EnumeratedSequence._base.modify;
}

Swift::UInt64 Substring.init(_:)(Swift::UInt64 a1, Swift::UInt64 a2, unint64_t a3, unint64_t a4)
{
  swift_bridgeObjectRetain(a4);
  v8._Swift::UInt64 rawBits = a1;
  v9._Swift::UInt64 rawBits = a2;
  Swift::UInt64 v10 = _StringGuts.validateScalarRange(_:)(v8, v9, a3, a4);
  swift_bridgeObjectRelease(a4);
  return v10;
}

uint64_t specialized Substring.init<A>(_:)()
{
  return 15;
}

uint64_t Substring.init<A>(_:)(uint64_t *a1, ValueMetadata *a2, uint64_t a3)
{
  Swift::UInt64 Description = a2[-1].Description;
  uint64_t v7 = MEMORY[0x1F4188790](a1);
  Swift::String::Index v9 = (unint64_t *)((char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v10 = MEMORY[0x1F4188790](v7);
  unsigned int v12 = (unint64_t *)((char *)&v18 - v11);
  MEMORY[0x1F4188790](v10);
  uint64_t v14 = (unint64_t *)((char *)&v18 - v13);
  if (v15 != &type metadata for String)
  {
    if (a2 == &type metadata for Substring) {
      return *a1;
    }
    if (a2 == (ValueMetadata *)&unk_1EC9FFD50) {
      return specialized Substring.init<A>(_:)(*a1);
    }
    unsigned int v16 = (void (*)(char *, uint64_t *, ValueMetadata *))Description[2];
    v16((char *)&v18 - v13, a1, a2);
    if (swift_dynamicCast((char *)&v18, v14, (Class *)a2, (const char *)&type metadata for String, 6uLL))
    {
      ((void (*)(uint64_t *, ValueMetadata *))Description[1])(a1, a2);
    }
    else
    {
      v16((char *)v12, a1, a2);
      if (swift_dynamicCast((char *)&v18, v12, (Class *)a2, (const char *)&type metadata for Substring, 6uLL))
      {
        ((void (*)(uint64_t *, ValueMetadata *))Description[1])(a1, a2);
        return v18;
      }
      ((void (*)(unint64_t *, uint64_t *, ValueMetadata *))Description[4])(v9, a1, a2);
      String.init<A>(_:)(v9, (Class *)a2, a3);
    }
  }
  return 15;
}

uint64_t Substring.init()()
{
  return 15;
}

Swift::String::Index __swiftcall Substring.index(after:)(Swift::String::Index after)
{
  unint64_t v5 = v4;
  uint64_t v6 = v3;
  unint64_t v7 = v2;
  char v8 = v1;
  unint64_t v9 = _StringGuts.validateCharacterIndex(_:in:)(after._rawBits, v1, v2, v3, v4);
  uint64_t v10 = (v9 >> 8) & 0x3F;
  Swift::Int v11 = v9 >> 16;
  uint64_t v12 = v7 >> 16;
  if (!v10)
  {
    if (v11 == v12)
    {
      uint64_t v10 = 0;
      goto LABEL_20;
    }
    if ((v5 & 0x1000000000000000) != 0) {
      goto LABEL_48;
    }
    if ((v5 & 0x2000000000000000) != 0)
    {
      uint64_t v30 = v6;
      uint64_t v31 = v5 & 0xFFFFFFFFFFFFFFLL;
      if (v11 + 1 != (HIBYTE(v5) & 0xF))
      {
        int v16 = *(unsigned __int16 *)((char *)&v30 + v11);
        if (v16 == 2573 || (v16 & 0x80808080) != 0)
        {
LABEL_48:
          uint64_t v10 = _StringGuts._opaqueComplexCharacterStride(startingAt:)(v11);
          goto LABEL_20;
        }
      }
    }
    else
    {
      if ((v6 & 0x1000000000000000) != 0)
      {
        uint64_t v13 = (char *)((v5 & 0xFFFFFFFFFFFFFFFLL) + 32);
        uint64_t v14 = v6 & 0xFFFFFFFFFFFFLL;
      }
      else
      {
        uint64_t v13 = (char *)_StringObject.sharedUTF8.getter(v6, v5);
      }
      if (v11 + 1 != v14)
      {
        if (!v13) {
          goto LABEL_51;
        }
        int v15 = *(unsigned __int16 *)&v13[v11];
        if (v15 == 2573 || (v15 & 0x80808080) != 0) {
          goto LABEL_48;
        }
      }
    }
    uint64_t v10 = 1;
  }
LABEL_20:
  uint64_t v18 = v10 + v11;
  if (v12 < v10 + v11) {
    uint64_t v18 = v7 >> 16;
  }
  uint64_t v19 = v18 << 16;
  Swift::Int v20 = v18 & 0xFFFFFFFFFFFFLL;
  uint64_t v21 = v5 & 0x1000000000000000;
  if ((v18 & 0xFFFFFFFFFFFFLL) == v12)
  {
    Swift::Int v22 = 0;
LABEL_39:
    v19 |= v22 << 8;
    goto LABEL_40;
  }
  if (!v21)
  {
    if ((v5 & 0x2000000000000000) != 0)
    {
      uint64_t v30 = v6;
      uint64_t v31 = v5 & 0xFFFFFFFFFFFFFFLL;
      if (v20 + 1 == (HIBYTE(v5) & 0xF)) {
        goto LABEL_38;
      }
      int v25 = *(unsigned __int16 *)((char *)&v30 + v20);
LABEL_33:
      if (v25 == 2573 || (v25 & 0x8080) != 0) {
        goto LABEL_46;
      }
LABEL_38:
      uint64_t v21 = 0;
      Swift::Int v22 = 1;
      goto LABEL_39;
    }
    if ((v6 & 0x1000000000000000) != 0)
    {
      unsigned int v23 = (char *)((v5 & 0xFFFFFFFFFFFFFFFLL) + 32);
      uint64_t v24 = v6 & 0xFFFFFFFFFFFFLL;
    }
    else
    {
      unsigned int v23 = (char *)_StringObject.sharedUTF8.getter(v6, v5);
    }
    if (v20 + 1 == v24) {
      goto LABEL_38;
    }
    if (v23)
    {
      int v25 = *(unsigned __int16 *)&v23[v20];
      goto LABEL_33;
    }
LABEL_51:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "unsafelyUnwrapped of nil optional", 33, 2, "Swift/Optional.swift", 20, 2, 0x163uLL, 0);
  }
LABEL_46:
  Swift::Int v22 = _StringGuts._opaqueComplexCharacterStride(startingAt:)(v20);
  if (v22 <= 63) {
    goto LABEL_39;
  }
LABEL_40:
  BOOL v27 = (v6 & 0x800000000000000) != 0 || v21 == 0;
  uint64_t v28 = 4;
  if (!v27) {
    uint64_t v28 = 8;
  }
  return (Swift::String::Index)(v8 & 2 | v28 | v19 | 1);
}

Swift::String::Index __swiftcall Substring._uncheckedIndex(after:)(Swift::String::Index after)
{
  unint64_t v5 = v4;
  uint64_t v6 = v3;
  char v7 = v1;
  Swift::UInt64 v9 = (after._rawBits >> 8) & 0x3F;
  Swift::UInt64 v10 = after._rawBits >> 16;
  int64_t v11 = v2 >> 16;
  if (!v9)
  {
    if (v10 == v11)
    {
      Swift::UInt64 v9 = 0;
      goto LABEL_20;
    }
    if ((v4 & 0x1000000000000000) != 0) {
      goto LABEL_48;
    }
    if ((v4 & 0x2000000000000000) != 0)
    {
      uint64_t v29 = v3;
      uint64_t v30 = v4 & 0xFFFFFFFFFFFFFFLL;
      if (v10 + 1 != (HIBYTE(v4) & 0xF))
      {
        int v15 = *(unsigned __int16 *)((char *)&v29 + v10);
        if (v15 == 2573 || (v15 & 0x80808080) != 0)
        {
LABEL_48:
          Swift::UInt64 v9 = _StringGuts._opaqueComplexCharacterStride(startingAt:)(v10);
          goto LABEL_20;
        }
      }
    }
    else
    {
      if ((v3 & 0x1000000000000000) != 0)
      {
        uint64_t v12 = (char *)((v4 & 0xFFFFFFFFFFFFFFFLL) + 32);
        uint64_t v13 = v3 & 0xFFFFFFFFFFFFLL;
      }
      else
      {
        uint64_t v12 = (char *)_StringObject.sharedUTF8.getter(v3, v4);
      }
      if (v10 + 1 != v13)
      {
        if (!v12) {
          goto LABEL_51;
        }
        int v14 = *(unsigned __int16 *)&v12[v10];
        if (v14 == 2573 || (v14 & 0x80808080) != 0) {
          goto LABEL_48;
        }
      }
    }
    Swift::UInt64 v9 = 1;
  }
LABEL_20:
  Swift::UInt64 v17 = v9 + v10;
  if (v11 < (uint64_t)(v9 + v10)) {
    Swift::UInt64 v17 = v11;
  }
  Swift::UInt64 v18 = v17 << 16;
  Swift::Int v19 = v17 & 0xFFFFFFFFFFFFLL;
  uint64_t v20 = v5 & 0x1000000000000000;
  if ((v17 & 0xFFFFFFFFFFFFLL) == v11)
  {
    Swift::Int v21 = 0;
LABEL_39:
    v18 |= v21 << 8;
    goto LABEL_40;
  }
  if (!v20)
  {
    if ((v5 & 0x2000000000000000) != 0)
    {
      uint64_t v29 = v6;
      uint64_t v30 = v5 & 0xFFFFFFFFFFFFFFLL;
      if (v19 + 1 == (HIBYTE(v5) & 0xF)) {
        goto LABEL_38;
      }
      int v24 = *(unsigned __int16 *)((char *)&v29 + v19);
LABEL_33:
      if (v24 == 2573 || (v24 & 0x8080) != 0) {
        goto LABEL_46;
      }
LABEL_38:
      uint64_t v20 = 0;
      Swift::Int v21 = 1;
      goto LABEL_39;
    }
    if ((v6 & 0x1000000000000000) != 0)
    {
      Swift::Int v22 = (char *)((v5 & 0xFFFFFFFFFFFFFFFLL) + 32);
      uint64_t v23 = v6 & 0xFFFFFFFFFFFFLL;
    }
    else
    {
      Swift::Int v22 = (char *)_StringObject.sharedUTF8.getter(v6, v5);
    }
    if (v19 + 1 == v23) {
      goto LABEL_38;
    }
    if (v22)
    {
      int v24 = *(unsigned __int16 *)&v22[v19];
      goto LABEL_33;
    }
LABEL_51:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "unsafelyUnwrapped of nil optional", 33, 2, "Swift/Optional.swift", 20, 2, 0x163uLL, 0);
  }
LABEL_46:
  Swift::Int v21 = _StringGuts._opaqueComplexCharacterStride(startingAt:)(v19);
  if (v21 <= 63) {
    goto LABEL_39;
  }
LABEL_40:
  BOOL v26 = (v6 & 0x800000000000000) != 0 || v20 == 0;
  uint64_t v27 = 4;
  if (!v26) {
    uint64_t v27 = 8;
  }
  return (Swift::String::Index)(v7 & 2 | v27 | v18 | 1);
}

Swift::String::Index __swiftcall Substring.index(before:)(Swift::String::Index before)
{
  unint64_t v5 = v1;
  unint64_t v6 = _StringGuts.validateInclusiveCharacterIndex(_:in:)(before._rawBits, v1, v2, v3, v4);
  if (v5 >> 14 >= v6 >> 14) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Substring index is out of bounds", 32, 2, "Swift/Substring.swift", 21, 2, 0x10BuLL, 0);
  }

  return Substring._uncheckedIndex(before:)((Swift::String::Index)v6);
}

Swift::String::Index __swiftcall Substring._uncheckedIndex(before:)(Swift::String::Index before)
{
  unint64_t v5 = v4;
  uint64_t v6 = v3;
  char v7 = v1;
  Swift::UInt64 rawBits = before._rawBits;
  if ((v1 ^ before._rawBits) >= 0x4000)
  {
    uint64_t v10 = _StringGuts._opaqueCharacterStride(endingAt:in:)(before._rawBits >> 16, v1 >> 16, v2, v3, v4);
    rawBits -= v10 << 16;
    uint64_t v9 = v10 << 8;
    if (v10 > 63) {
      uint64_t v9 = 0;
    }
  }
  else
  {
    uint64_t v9 = 0;
  }
  uint64_t v11 = 4;
  if (((v5 >> 60) & ((v6 & 0x800000000000000) == 0)) != 0) {
    uint64_t v11 = 8;
  }
  return (Swift::String::Index)(v7 & 2 | (unint64_t)v9 | rawBits & 0xFFFFFFFFFFFF0000 | v11 | 1);
}

Swift::String::Index __swiftcall Substring.index(_:offsetBy:)(Swift::String::Index _, Swift::Int offsetBy)
{
  unint64_t v6 = v5;
  uint64_t v7 = v4;
  unint64_t v8 = v3;
  unint64_t v9 = v2;
  v11._Swift::UInt64 rawBits = _._rawBits;
  char v12 = (v5 & 0x1000000000000000) == 0 || (v4 & 0x800000000000000) != 0;
  uint64_t v13 = _._rawBits & 0xC;
  uint64_t v14 = 4 << v12;
  if ((_._rawBits & 2) == 0 || v13 == v14)
  {
    if (v13 == v14) {
      v11._Swift::UInt64 rawBits = _StringGuts._slowEnsureMatchingEncoding(_:)(_)._rawBits;
    }
    if (v11._rawBits >> 14 < v9 >> 14 || v8 >> 14 < v11._rawBits >> 14)
    {
      unint64_t v15 = 65;
LABEL_66:
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Substring index is out of bounds", 32, 2, "Swift/StringIndexValidation.swift", 33, 2, v15, 0);
    }
    if (v11._rawBits)
    {
      if ((v9 & 2) != 0) {
        goto LABEL_15;
      }
    }
    else
    {
      v11._Swift::UInt64 rawBits = v11._rawBits & 0xC | _StringGuts.scalarAlignSlow(_:)(v11)._rawBits & 0xFFFFFFFFFFFFFFF3 | 1;
      if ((v9 & 2) != 0)
      {
LABEL_15:
        if ((v11._rawBits & 2) != 0) {
          goto LABEL_19;
        }
      }
    }
    if (v11._rawBits >> 14 != v9 >> 14 && v11._rawBits >> 14 != v8 >> 14) {
      v11._Swift::UInt64 rawBits = _StringGuts._slowRoundDownToNearestCharacter(_:in:)(v11._rawBits, v9, v8, v7, v6);
    }
    goto LABEL_19;
  }
  if (_._rawBits >> 14 < v2 >> 14 || v3 >> 14 < _._rawBits >> 14)
  {
    unint64_t v15 = 296;
    goto LABEL_66;
  }
LABEL_19:
  if (offsetBy < 0)
  {
    Swift::Int v39 = 0;
    Swift::UInt64 v40 = v9 >> 14;
    uint64_t v41 = v9 >> 16;
    uint64_t v42 = 4;
    if (((v6 >> 60) & ((v7 & 0x800000000000000) == 0)) != 0) {
      uint64_t v42 = 8;
    }
    unint64_t v43 = v9 & 2 | v42;
    do
    {
      if (v40 >= v11._rawBits >> 14)
      {
        unint64_t v47 = 321;
LABEL_77:
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index is out of bounds", 29, 2, "Swift/Substring.swift", 21, 2, v47, 0);
      }
      --v39;
      uint64_t v44 = _StringGuts._opaqueCharacterStride(endingAt:in:)(v11._rawBits >> 16, v41, v2, v7, v6);
      uint64_t v45 = v44 << 8;
      if (v44 > 63) {
        uint64_t v45 = 0;
      }
      v11._Swift::UInt64 rawBits = v43 | v45 | (v11._rawBits - (v44 << 16)) & 0xFFFFFFFFFFFF0000 | 1;
    }
    while (v39 > offsetBy);
  }
  else if (offsetBy)
  {
    Swift::UInt64 v16 = v8 >> 14;
    int64_t v17 = v8 >> 16;
    uint64_t v18 = HIBYTE(v6) & 0xF;
    uint64_t v19 = v6 & 0xFFFFFFFFFFFFFFLL;
    uint64_t v20 = 4;
    if (((v6 >> 60) & ((v7 & 0x800000000000000) == 0)) != 0) {
      uint64_t v20 = 8;
    }
    unint64_t v21 = v9 & 2 | v20;
    while (1)
    {
      if (v16 <= v11._rawBits >> 14)
      {
        unint64_t v47 = 316;
        goto LABEL_77;
      }
      uint64_t v22 = (v11._rawBits >> 8) & 0x3F;
      Swift::Int v23 = v11._rawBits >> 16;
      if (!v22) {
        break;
      }
LABEL_40:
      uint64_t v27 = v22 + v23;
      if (v17 < v22 + v23) {
        uint64_t v27 = v17;
      }
      uint64_t v28 = v27 << 16;
      uint64_t v29 = v27 & 0xFFFFFFFFFFFFLL;
      if ((v27 & 0xFFFFFFFFFFFFLL) != v17)
      {
        if ((v6 & 0x1000000000000000) != 0) {
          goto LABEL_62;
        }
        if ((v6 & 0x2000000000000000) != 0)
        {
          uint64_t v53 = v7;
          uint64_t v54 = v19;
          if (v29 + 1 != v18)
          {
            int v33 = *(unsigned __int16 *)((char *)&v53 + v29);
LABEL_53:
            if (v33 == 2573 || (v33 & 0x8080) != 0)
            {
LABEL_62:
              uint64_t v49 = v18;
              Swift::Int v35 = v29;
              uint64_t v36 = v19;
              Swift::Int v30 = _StringGuts._opaqueComplexCharacterStride(startingAt:)(v35);
              uint64_t v19 = v36;
              uint64_t v18 = v49;
              if (v30 > 63) {
                goto LABEL_60;
              }
              goto LABEL_59;
            }
          }
        }
        else
        {
          uint64_t v31 = (char *)((v6 & 0xFFFFFFFFFFFFFFFLL) + 32);
          uint64_t v32 = v7 & 0xFFFFFFFFFFFFLL;
          if ((v7 & 0x1000000000000000) == 0)
          {
            uint64_t v48 = v19;
            uint64_t v51 = v18;
            uint64_t v31 = (char *)_StringObject.sharedUTF8.getter(v7, v6);
            uint64_t v19 = v48;
            uint64_t v18 = v51;
          }
          if (v29 + 1 != v32)
          {
            if (!v31) {
LABEL_80:
            }
              _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "unsafelyUnwrapped of nil optional", 33, 2, "Swift/Optional.swift", 20, 2, 0x163uLL, 0);
            int v33 = *(unsigned __int16 *)&v31[v29];
            goto LABEL_53;
          }
        }
        Swift::Int v30 = 1;
        goto LABEL_59;
      }
      Swift::Int v30 = 0;
LABEL_59:
      v28 |= v30 << 8;
LABEL_60:
      v11._Swift::UInt64 rawBits = v21 | v28 | 1;
      if (!--offsetBy) {
        return v11;
      }
    }
    if (v23 == v17)
    {
      uint64_t v22 = 0;
      goto LABEL_40;
    }
    if ((v6 & 0x1000000000000000) == 0)
    {
      if ((v6 & 0x2000000000000000) == 0)
      {
        int v24 = (char *)((v6 & 0xFFFFFFFFFFFFFFFLL) + 32);
        uint64_t v25 = v7 & 0xFFFFFFFFFFFFLL;
        if ((v7 & 0x1000000000000000) == 0)
        {
          uint64_t v52 = v18;
          uint64_t v38 = v19;
          int v24 = (char *)_StringObject.sharedUTF8.getter(v7, v6);
          uint64_t v19 = v38;
          uint64_t v18 = v52;
        }
        if (v23 + 1 == v25)
        {
LABEL_39:
          uint64_t v22 = 1;
          goto LABEL_40;
        }
        if (!v24) {
          goto LABEL_80;
        }
        int v26 = *(unsigned __int16 *)&v24[v23];
        if (v26 == 2573) {
          goto LABEL_64;
        }
        goto LABEL_38;
      }
      uint64_t v53 = v7;
      uint64_t v54 = v19;
      if (v23 + 1 == v18) {
        goto LABEL_39;
      }
      int v26 = *(unsigned __int16 *)((char *)&v53 + v23);
      if (v26 != 2573)
      {
LABEL_38:
        if ((v26 & 0x80808080) == 0) {
          goto LABEL_39;
        }
      }
    }
LABEL_64:
    uint64_t v50 = v18;
    uint64_t v37 = v19;
    uint64_t v22 = _StringGuts._opaqueComplexCharacterStride(startingAt:)(v23);
    uint64_t v19 = v37;
    uint64_t v18 = v50;
    goto LABEL_40;
  }
  return v11;
}

Swift::String::Index_optional __swiftcall Substring.index(_:offsetBy:limitedBy:)(Swift::String::Index _, Swift::Int offsetBy, Swift::String::Index limitedBy)
{
  unint64_t v7 = v6;
  uint64_t v8 = v5;
  unint64_t v9 = v4;
  unint64_t v10 = v3;
  Swift::UInt64 rawBits = limitedBy._rawBits;
  uint64_t v14 = (v5 >> 59) & 1;
  if ((v6 & 0x1000000000000000) == 0) {
    LOBYTE(v14) = 1;
  }
  uint64_t v15 = 4 << v14;
  if ((limitedBy._rawBits & 0xC) == 4 << v14) {
    Swift::UInt64 rawBits = _StringGuts._slowEnsureMatchingEncoding(_:)(limitedBy)._rawBits;
  }
  if ((_._rawBits & 0xC) == v15)
  {
    Swift::UInt64 v59 = _StringGuts._slowEnsureMatchingEncoding(_:)(_)._rawBits;
    unint64_t v16 = _StringGuts._slowEnsureMatchingEncoding(_:)(_)._rawBits;
    _._Swift::UInt64 rawBits = v59;
  }
  else
  {
    if ((_._rawBits & 2) != 0)
    {
      if (_._rawBits >> 14 >= v10 >> 14)
      {
        unint64_t v16 = _._rawBits;
        if (v9 >> 14 >= _._rawBits >> 14) {
          goto LABEL_18;
        }
      }
      unint64_t v45 = 296;
LABEL_68:
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Substring index is out of bounds", 32, 2, "Swift/StringIndexValidation.swift", 33, 2, v45, 0);
    }
    unint64_t v16 = _._rawBits;
  }
  if (v16 >> 14 < v10 >> 14 || v9 >> 14 < v16 >> 14)
  {
    unint64_t v45 = 65;
    goto LABEL_68;
  }
  if (v16)
  {
    if ((v10 & 2) != 0) {
      goto LABEL_12;
    }
  }
  else
  {
    unint64_t v16 = v16 & 0xC | _StringGuts.scalarAlignSlow(_:)((Swift::String::Index)v16)._rawBits & 0xFFFFFFFFFFFFFFF3 | 1;
    if ((v10 & 2) != 0)
    {
LABEL_12:
      if ((v16 & 2) != 0) {
        goto LABEL_18;
      }
    }
  }
  if (v16 >> 14 != v10 >> 14 && v16 >> 14 != v9 >> 14) {
    unint64_t v16 = _StringGuts._slowRoundDownToNearestCharacter(_:in:)(v16, v10, v9, v8, v7);
  }
LABEL_18:
  Swift::UInt64 v17 = rawBits >> 14;
  if (offsetBy < 0)
  {
    Swift::Int v46 = 0;
    Swift::UInt64 v47 = _._rawBits >> 14;
    unint64_t v48 = v10 >> 14;
    uint64_t v49 = v10 >> 16;
    uint64_t v50 = 4;
    if (((v7 >> 60) & ((v8 & 0x800000000000000) == 0)) != 0) {
      uint64_t v50 = 8;
    }
    unint64_t v51 = v10 & 2 | v50;
    while (1)
    {
      unint64_t v52 = v16 >> 14;
      if (v47 >= v17 && v17 >= v52) {
        break;
      }
      if (v48 >= v52)
      {
        unint64_t v58 = 360;
LABEL_88:
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index is out of bounds", 29, 2, "Swift/Substring.swift", 21, 2, v58, 0);
      }
      --v46;
      uint64_t v53 = _StringGuts._opaqueCharacterStride(endingAt:in:)(v16 >> 16, v49, limitedBy._rawBits, v8, v7);
      uint64_t v54 = v53 << 8;
      if (v53 > 63) {
        uint64_t v54 = 0;
      }
      unint64_t v55 = v51 | v54 | (v16 - (v53 << 16)) & 0xFFFFFFFFFFFF0000;
      unint64_t v16 = v55 | 1;
      if (v46 <= offsetBy)
      {
        if (v47 < v17 || v55 >> 14 >= v17) {
          goto LABEL_84;
        }
        break;
      }
    }
  }
  else
  {
    Swift::UInt64 v18 = _._rawBits >> 14;
    if (offsetBy)
    {
      unint64_t v19 = v9 >> 14;
      int64_t v20 = v9 >> 16;
      uint64_t v21 = HIBYTE(v7) & 0xF;
      uint64_t v22 = v7 & 0xFFFFFFFFFFFFFFLL;
      uint64_t v23 = (v7 & 0xFFFFFFFFFFFFFFFLL) + 32;
      uint64_t v24 = v8 & 0xFFFFFFFFFFFFLL;
      uint64_t v25 = 4;
      if (((v7 >> 60) & ((v8 & 0x800000000000000) == 0)) != 0) {
        uint64_t v25 = 8;
      }
      unint64_t v26 = v10 & 2 | v25;
      while (1)
      {
        unint64_t v27 = v16 >> 14;
        if (v17 >= v18 && v27 >= v17) {
          goto LABEL_83;
        }
        if (v27 >= v19)
        {
          unint64_t v58 = 353;
          goto LABEL_88;
        }
        uint64_t v28 = (v16 >> 8) & 0x3F;
        Swift::Int v29 = v16 >> 16;
        if (!v28) {
          break;
        }
LABEL_41:
        uint64_t v33 = v28 + v29;
        if (v20 < v28 + v29) {
          uint64_t v33 = v20;
        }
        uint64_t v34 = v33 << 16;
        uint64_t v35 = v33 & 0xFFFFFFFFFFFFLL;
        if ((v33 & 0xFFFFFFFFFFFFLL) != v20)
        {
          if ((v7 & 0x1000000000000000) != 0) {
            goto LABEL_63;
          }
          if ((v7 & 0x2000000000000000) != 0)
          {
            uint64_t v73 = v8;
            uint64_t v74 = v22;
            if (v35 + 1 != v21)
            {
              int v39 = *(unsigned __int16 *)((char *)&v73 + v35);
LABEL_54:
              if (v39 == 2573 || (v39 & 0x8080) != 0)
              {
LABEL_63:
                uint64_t v61 = v24;
                uint64_t v65 = v23;
                uint64_t v69 = v21;
                Swift::Int v41 = v35;
                uint64_t v42 = v22;
                Swift::Int v36 = _StringGuts._opaqueComplexCharacterStride(startingAt:)(v41);
                uint64_t v24 = v61;
                uint64_t v23 = v65;
                uint64_t v22 = v42;
                uint64_t v21 = v69;
                if (v36 > 63) {
                  goto LABEL_61;
                }
                goto LABEL_60;
              }
            }
          }
          else
          {
            uint64_t v37 = (char *)v23;
            uint64_t v38 = v24;
            if ((v8 & 0x1000000000000000) == 0)
            {
              uint64_t v67 = v23;
              uint64_t v71 = v21;
              uint64_t v60 = v22;
              uint64_t v63 = v24;
              uint64_t v37 = (char *)_StringObject.sharedUTF8.getter(v8, v7);
              uint64_t v24 = v63;
              uint64_t v23 = v67;
              uint64_t v22 = v60;
              uint64_t v21 = v71;
            }
            if (v35 + 1 != v38)
            {
              if (!v37) {
LABEL_92:
              }
                _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "unsafelyUnwrapped of nil optional", 33, 2, "Swift/Optional.swift", 20, 2, 0x163uLL, 0);
              int v39 = *(unsigned __int16 *)&v37[v35];
              goto LABEL_54;
            }
          }
          Swift::Int v36 = 1;
          goto LABEL_60;
        }
        Swift::Int v36 = 0;
LABEL_60:
        v34 |= v36 << 8;
LABEL_61:
        unint64_t v16 = v26 | v34 | 1;
        if (!--offsetBy) {
          goto LABEL_69;
        }
      }
      if (v29 == v20)
      {
        uint64_t v28 = 0;
        goto LABEL_41;
      }
      if ((v7 & 0x1000000000000000) == 0)
      {
        if ((v7 & 0x2000000000000000) == 0)
        {
          Swift::Int v30 = (char *)v23;
          uint64_t v31 = v24;
          if ((v8 & 0x1000000000000000) == 0)
          {
            uint64_t v68 = v23;
            uint64_t v72 = v21;
            uint64_t v44 = v22;
            uint64_t v64 = v24;
            Swift::Int v30 = (char *)_StringObject.sharedUTF8.getter(v8, v7);
            uint64_t v24 = v64;
            uint64_t v23 = v68;
            uint64_t v22 = v44;
            uint64_t v21 = v72;
          }
          if (v29 + 1 == v31)
          {
LABEL_40:
            uint64_t v28 = 1;
            goto LABEL_41;
          }
          if (!v30) {
            goto LABEL_92;
          }
          int v32 = *(unsigned __int16 *)&v30[v29];
          if (v32 == 2573) {
            goto LABEL_65;
          }
          goto LABEL_39;
        }
        uint64_t v73 = v8;
        uint64_t v74 = v22;
        if (v29 + 1 == v21) {
          goto LABEL_40;
        }
        int v32 = *(unsigned __int16 *)((char *)&v73 + v29);
        if (v32 != 2573)
        {
LABEL_39:
          if ((v32 & 0x80808080) == 0) {
            goto LABEL_40;
          }
        }
      }
LABEL_65:
      uint64_t v62 = v24;
      uint64_t v66 = v23;
      uint64_t v70 = v21;
      uint64_t v43 = v22;
      uint64_t v28 = _StringGuts._opaqueComplexCharacterStride(startingAt:)(v29);
      uint64_t v24 = v62;
      uint64_t v23 = v66;
      uint64_t v22 = v43;
      uint64_t v21 = v70;
      goto LABEL_41;
    }
LABEL_69:
    if (v17 < v18 || v17 >= v16 >> 14)
    {
LABEL_84:
      Swift::Bool v56 = 0;
      goto LABEL_85;
    }
  }
LABEL_83:
  unint64_t v16 = 0;
  Swift::Bool v56 = 1;
LABEL_85:
  Swift::UInt64 v57 = v16;
  result.value._Swift::UInt64 rawBits = v57;
  result.Swift::Bool is_nil = v56;
  return result;
}

Swift::Int __swiftcall Substring.distance(from:to:)(Swift::String::Index from, Swift::String::Index to)
{
  unint64_t v6 = v5;
  uint64_t v7 = v4;
  unint64_t v8 = v3;
  unint64_t v9 = v2;
  unint64_t rawBits = from._rawBits;
  char v12 = (v5 & 0x1000000000000000) == 0 || (v4 & 0x800000000000000) != 0;
  uint64_t v13 = from._rawBits & 0xC;
  uint64_t v14 = 4 << v12;
  Swift::UInt64 v15 = v3 >> 14;
  if ((from._rawBits & 2) == 0 || v13 == v14)
  {
    if (v13 == v14) {
      goto LABEL_94;
    }
    goto LABEL_10;
  }
  if (from._rawBits >> 14 < v2 >> 14 || v15 < from._rawBits >> 14)
  {
LABEL_22:
    unint64_t v17 = 296;
    goto LABEL_79;
  }
LABEL_18:
  uint64_t v16 = to._rawBits & 0xC;
  if ((to._rawBits & 2) == 0 || v16 == v14)
  {
    if (v16 == v14) {
      to._unint64_t rawBits = _StringGuts._slowEnsureMatchingEncoding(_:)(to)._rawBits;
    }
    if (to._rawBits >> 14 < v9 >> 14 || v15 < to._rawBits >> 14) {
      goto LABEL_78;
    }
    if (to._rawBits)
    {
      if ((v9 & 2) != 0) {
        goto LABEL_29;
      }
    }
    else
    {
      to._unint64_t rawBits = to._rawBits & 0xC | _StringGuts.scalarAlignSlow(_:)(to)._rawBits & 0xFFFFFFFFFFFFFFF3 | 1;
      if ((v9 & 2) != 0)
      {
LABEL_29:
        if ((to._rawBits & 2) != 0) {
          goto LABEL_33;
        }
      }
    }
    if (to._rawBits >> 14 != v9 >> 14 && to._rawBits >> 14 != v15) {
      to._unint64_t rawBits = _StringGuts._slowRoundDownToNearestCharacter(_:in:)(to._rawBits, v9, v8, v7, v6);
    }
    goto LABEL_33;
  }
  if (to._rawBits >> 14 < v9 >> 14 || v15 < to._rawBits >> 14) {
    goto LABEL_22;
  }
LABEL_33:
  Swift::UInt64 v15 = to._rawBits >> 14;
  if (rawBits >> 14 < to._rawBits >> 14)
  {
    unint64_t v9 = 0;
    to._unint64_t rawBits = v8 >> 16;
    uint64_t v18 = HIBYTE(v6) & 0xF;
    uint64_t v19 = v6 & 0xFFFFFFFFFFFFFFLL;
    uint64_t v20 = (v6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    uint64_t v14 = v7 & 0xFFFFFFFFFFFFLL;
    if (((v6 >> 60) & ((v7 & 0x800000000000000) == 0)) != 0) {
      uint64_t v21 = 8;
    }
    else {
      uint64_t v21 = 4;
    }
    while (1)
    {
      unint64_t v8 = v9 + 1;
      if (__OFADD__(v9, 1))
      {
        __break(1u);
LABEL_93:
        __break(1u);
LABEL_94:
        unint64_t rawBits = _StringGuts._slowEnsureMatchingEncoding(_:)((Swift::String::Index)rawBits)._rawBits;
LABEL_10:
        if (rawBits >> 14 < v9 >> 14 || v15 < rawBits >> 14)
        {
LABEL_78:
          unint64_t v17 = 65;
LABEL_79:
          _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Substring index is out of bounds", 32, 2, "Swift/StringIndexValidation.swift", 33, 2, v17, 0);
        }
        if (rawBits)
        {
          if ((v9 & 2) != 0) {
            goto LABEL_14;
          }
LABEL_15:
          if (rawBits >> 14 != v9 >> 14 && rawBits >> 14 != v15) {
            unint64_t rawBits = _StringGuts._slowRoundDownToNearestCharacter(_:in:)(rawBits, v9, v8, v7, v6);
          }
        }
        else
        {
          unint64_t rawBits = rawBits & 0xC | _StringGuts.scalarAlignSlow(_:)((Swift::String::Index)rawBits)._rawBits & 0xFFFFFFFFFFFFFFF3 | 1;
          if ((v9 & 2) == 0) {
            goto LABEL_15;
          }
LABEL_14:
          if ((rawBits & 2) == 0) {
            goto LABEL_15;
          }
        }
        goto LABEL_18;
      }
      uint64_t v22 = (rawBits >> 8) & 0x3F;
      Swift::Int v23 = rawBits >> 16;
      if (!v22) {
        break;
      }
LABEL_53:
      Swift::UInt64 v27 = v22 + v23;
      if ((uint64_t)to._rawBits < v22 + v23) {
        Swift::UInt64 v27 = to._rawBits;
      }
      Swift::UInt64 v28 = v27 << 16;
      uint64_t v29 = v27 & 0xFFFFFFFFFFFFLL;
      if ((v27 & 0xFFFFFFFFFFFFLL) != to._rawBits)
      {
        if ((v6 & 0x1000000000000000) != 0) {
          goto LABEL_75;
        }
        if ((v6 & 0x2000000000000000) != 0)
        {
          uint64_t v54 = v7;
          uint64_t v55 = v19;
          if (v29 + 1 != v18)
          {
            int v33 = *(unsigned __int16 *)((char *)&v54 + v29);
LABEL_66:
            if (v33 == 2573 || (v33 & 0x8080) != 0)
            {
LABEL_75:
              uint64_t v46 = v20;
              uint64_t v50 = v18;
              Swift::Int v35 = v29;
              uint64_t v36 = v19;
              Swift::Int v30 = _StringGuts._opaqueComplexCharacterStride(startingAt:)(v35);
              uint64_t v20 = v46;
              uint64_t v18 = v50;
              uint64_t v19 = v36;
              if (v30 > 63) {
                goto LABEL_73;
              }
              goto LABEL_72;
            }
          }
        }
        else
        {
          uint64_t v31 = (char *)v20;
          uint64_t v32 = v7 & 0xFFFFFFFFFFFFLL;
          if ((v7 & 0x1000000000000000) == 0)
          {
            uint64_t v48 = v20;
            uint64_t v52 = v18;
            uint64_t v45 = v19;
            uint64_t v31 = (char *)_StringObject.sharedUTF8.getter(v7, v6);
            uint64_t v19 = v45;
            uint64_t v20 = v48;
            uint64_t v18 = v52;
          }
          if (v29 + 1 != v32)
          {
            if (!v31) {
LABEL_99:
            }
              _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "unsafelyUnwrapped of nil optional", 33, 2, "Swift/Optional.swift", 20, 2, 0x163uLL, 0);
            int v33 = *(unsigned __int16 *)&v31[v29];
            goto LABEL_66;
          }
        }
        Swift::Int v30 = 1;
        goto LABEL_72;
      }
      Swift::Int v30 = 0;
LABEL_72:
      v28 |= v30 << 8;
LABEL_73:
      unint64_t rawBits = v21 | v28 | 1;
      ++v9;
      if (v15 <= v28 >> 14) {
        return v8;
      }
    }
    if (v23 == to._rawBits)
    {
      uint64_t v22 = 0;
      goto LABEL_53;
    }
    if ((v6 & 0x1000000000000000) == 0)
    {
      if ((v6 & 0x2000000000000000) == 0)
      {
        uint64_t v24 = (char *)v20;
        uint64_t v25 = v7 & 0xFFFFFFFFFFFFLL;
        if ((v7 & 0x1000000000000000) == 0)
        {
          uint64_t v49 = v20;
          uint64_t v53 = v18;
          uint64_t v38 = v19;
          uint64_t v24 = (char *)_StringObject.sharedUTF8.getter(v7, v6);
          uint64_t v20 = v49;
          uint64_t v18 = v53;
          uint64_t v19 = v38;
        }
        if (v23 + 1 == v25)
        {
LABEL_52:
          uint64_t v22 = 1;
          goto LABEL_53;
        }
        if (!v24) {
          goto LABEL_99;
        }
        int v26 = *(unsigned __int16 *)&v24[v23];
        if (v26 == 2573) {
          goto LABEL_77;
        }
        goto LABEL_51;
      }
      uint64_t v54 = v7;
      uint64_t v55 = v19;
      if (v23 + 1 == v18) {
        goto LABEL_52;
      }
      int v26 = *(unsigned __int16 *)((char *)&v54 + v23);
      if (v26 != 2573)
      {
LABEL_51:
        if ((v26 & 0x80808080) == 0) {
          goto LABEL_52;
        }
      }
    }
LABEL_77:
    uint64_t v47 = v20;
    uint64_t v51 = v18;
    uint64_t v37 = v19;
    uint64_t v22 = _StringGuts._opaqueComplexCharacterStride(startingAt:)(v23);
    uint64_t v20 = v47;
    uint64_t v18 = v51;
    uint64_t v19 = v37;
    goto LABEL_53;
  }
  if (v15 >= rawBits >> 14) {
    return 0;
  }
  unint64_t v8 = 0;
  to._unint64_t rawBits = v9 >> 16;
  uint64_t v39 = 4;
  if (((v6 >> 60) & ((v7 & 0x800000000000000) == 0)) != 0) {
    uint64_t v39 = 8;
  }
  uint64_t v14 = v9 & 2 | v39;
  do
  {
    if (__OFSUB__(v8--, 1)) {
      goto LABEL_93;
    }
    if ((rawBits ^ v9) >= 0x4000)
    {
      uint64_t v40 = _StringGuts._opaqueCharacterStride(endingAt:in:)(rawBits >> 16, v9 >> 16, v2, v7, v6);
      rawBits -= v40 << 16;
      uint64_t v41 = v40 << 8;
      if (v40 > 63) {
        uint64_t v41 = 0;
      }
    }
    else
    {
      uint64_t v41 = 0;
    }
    unint64_t v42 = rawBits & 0xFFFFFFFFFFFF0000 | v41;
    unint64_t rawBits = v14 | v42 | 1;
  }
  while (v15 < v42 >> 14);
  return v8;
}

uint64_t Substring.subscript.getter(Swift::UInt64 rawBits, unint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5)
{
  char v9 = (a5 & 0x1000000000000000) == 0 || (a4 & 0x800000000000000) != 0;
  Swift::UInt64 v10 = rawBits & 0xC;
  uint64_t v11 = 4 << v9;
  Swift::UInt64 v12 = a3 >> 14;
  if ((rawBits & 1) == 0 || v10 == v11)
  {
    if (v10 == v11) {
      unint64_t rawBits = _StringGuts._slowEnsureMatchingEncoding(_:)((Swift::String::Index)rawBits)._rawBits;
    }
    if (rawBits >> 14 < a2 >> 14 || rawBits >> 14 >= v12)
    {
      unint64_t v13 = 43;
LABEL_29:
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Substring index is out of bounds", 32, 2, "Swift/StringIndexValidation.swift", 33, 2, v13, 0);
    }
    if ((rawBits & 1) == 0) {
      unint64_t rawBits = _StringGuts.scalarAlignSlow(_:)((Swift::String::Index)rawBits)._rawBits & 0xFFFFFFFFFFFFFFF2 | 1;
    }
  }
  else if (rawBits >> 14 < a2 >> 14 || rawBits >> 14 >= v12)
  {
    unint64_t v13 = 143;
    goto LABEL_29;
  }
  uint64_t v14 = (rawBits >> 8) & 0x3F;
  Swift::Int v15 = rawBits >> 16;
  Swift::Int v16 = a3 >> 16;
  if (!v14)
  {
    if (v15 == v16)
    {
      uint64_t v14 = 0;
      goto LABEL_18;
    }
    if ((a5 & 0x1000000000000000) == 0)
    {
      if ((a5 & 0x2000000000000000) != 0)
      {
        uint64_t v28 = a4;
        uint64_t v29 = a5 & 0xFFFFFFFFFFFFFFLL;
        Swift::Int v25 = v15 + 1;
        if (v15 + 1 == (HIBYTE(a5) & 0xF)) {
          goto LABEL_44;
        }
        int v26 = *(unsigned __int16 *)((char *)&v28 + v15);
      }
      else
      {
        if ((a4 & 0x1000000000000000) != 0)
        {
          Swift::Int v23 = (char *)((a5 & 0xFFFFFFFFFFFFFFFLL) + 32);
          uint64_t v24 = a4 & 0xFFFFFFFFFFFFLL;
        }
        else
        {
          Swift::Int v23 = (char *)_StringObject.sharedUTF8.getter(a4, a5);
        }
        Swift::Int v25 = v15 + 1;
        if (v15 + 1 == v24)
        {
LABEL_44:
          if (v16 >= v25) {
            Swift::Int v16 = v25;
          }
          if (v16 >= v15) {
            goto LABEL_22;
          }
LABEL_47:
          _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
        }
        if (!v23) {
          _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "unsafelyUnwrapped of nil optional", 33, 2, "Swift/Optional.swift", 20, 2, 0x163uLL, 0);
        }
        int v26 = *(unsigned __int16 *)&v23[v15];
      }
      if (v26 != 2573 && (v26 & 0x80808080) == 0) {
        goto LABEL_44;
      }
    }
    uint64_t v14 = _StringGuts._opaqueComplexCharacterStride(startingAt:)(v15);
  }
LABEL_18:
  Swift::Int v17 = v14 + v15;
  if (v16 >= v17) {
    Swift::Int v16 = v17;
  }
  if ((a5 & 0x1000000000000000) != 0)
  {
    return _StringGuts.foreignErrorCorrectedGrapheme(startingAt:endingAt:)(v15, v16)._countAndFlagsBits;
  }
  if (v16 < v15) {
    goto LABEL_47;
  }
LABEL_22:
  if ((a5 & 0x2000000000000000) == 0)
  {
    if ((a4 & 0x1000000000000000) != 0)
    {
      id v18 = (id)((a5 & 0xFFFFFFFFFFFFFFFLL) + 32);
      uint64_t v19 = a4 & 0xFFFFFFFFFFFFLL;
      if ((a4 & 0xFFFFFFFFFFFFLL) >= v16)
      {
LABEL_25:
        uint64_t v20 = (uint8x16_t *)specialized UnsafeBufferPointer.init(rebasing:)(v15, v16, (uint64_t)v18, v19);
        return specialized static String._uncheckedFromUTF8(_:)(v20, v21);
      }
    }
    else
    {
      id v18 = _StringObject.sharedUTF8.getter(a4, a5);
      uint64_t v19 = v27;
      if (v27 >= v16) {
        goto LABEL_25;
      }
    }
LABEL_52:
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x745uLL, 0);
  }
  uint64_t v28 = a4;
  uint64_t v29 = a5 & 0xFFFFFFFFFFFFFFLL;
  if ((uint64_t)(HIBYTE(a5) & 0xF) < v16) {
    goto LABEL_52;
  }
  if (v16 - v15 < 0) {
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeBufferPointer with negative count", 39, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x53FuLL, 0);
  }
  return specialized static String._uncheckedFromUTF8(_:)((uint8x16_t *)((char *)&v28 + v15), v16 - v15);
}

void specialized Substring._replaceSubrange<A>(_:with:)(Swift::String::Index a1, Swift::String::Index a2, unint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6)
{
  v7._Swift::UInt64 rawBits = a1._rawBits;
  unint64_t v8 = (unint64_t)(v6 + 2);
  unint64_t v9 = v6[2];
  uint64_t v10 = v6[3];
  Swift::UInt64 v11 = *v6;
  Swift::UInt64 v12 = v6[1];
  if ((v10 & 0x1000000000000000) != 0) {
    uint64_t v13 = (v9 >> 59) & 1;
  }
  else {
    uint64_t v13 = 1;
  }
  unint64_t v14 = a1._rawBits & 0xC;
  uint64_t v15 = 4 << v13;
  uint64_t v16 = a2._rawBits & 0xC;
  if ((a1._rawBits & 1) != 0 && v14 != v15 && (a2._rawBits & 1) != 0 && v16 != v15)
  {
    Swift::Int v17 = (uint64_t *)v199;
    if (a1._rawBits >> 14 < v11 >> 14 || v12 >> 14 < a2._rawBits >> 14) {
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index range is out of bounds", 35, 2, "Swift/StringIndexValidation.swift", 33, 2, 0xECuLL, 0);
    }
    goto LABEL_18;
  }
  if (v16 == v15)
  {
    unint64_t v191 = a3;
    unint64_t v195 = a4;
    unint64_t v188 = a6;
    unint64_t v122 = a5;
    v123._Swift::UInt64 rawBits = _StringGuts._slowEnsureMatchingEncoding(_:)(a2)._rawBits;
    a3 = v191;
    a4 = v195;
    a5 = v122;
    a6 = v188;
    a2._Swift::UInt64 rawBits = v123._rawBits;
    if (v14 != v15) {
      goto LABEL_13;
    }
LABEL_129:
    v124._Swift::UInt64 rawBits = v7._rawBits;
    v189._Swift::UInt64 rawBits = a2._rawBits;
    unint64_t v125 = a3;
    unint64_t v126 = a6;
    unint64_t v127 = a5;
    unint64_t v14 = a4;
    v128._Swift::UInt64 rawBits = _StringGuts._slowEnsureMatchingEncoding(_:)(v124)._rawBits;
    a2._Swift::UInt64 rawBits = v189._rawBits;
    a3 = v125;
    a4 = v14;
    a5 = v127;
    a6 = v126;
    v7._Swift::UInt64 rawBits = v128._rawBits;
    goto LABEL_13;
  }
  if (v14 == v15) {
    goto LABEL_129;
  }
LABEL_13:
  Swift::Int v17 = (uint64_t *)v199;
  if (v7._rawBits >> 14 < v11 >> 14 || a2._rawBits >> 14 < v7._rawBits >> 14 || v12 >> 14 < a2._rawBits >> 14) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Substring index range is out of bounds", 38, 2, "Swift/StringIndexValidation.swift", 33, 2, 0x63uLL, 0);
  }
  if ((a2._rawBits & 1) == 0) {
    goto LABEL_141;
  }
  if ((v7._rawBits & 1) == 0) {
    goto LABEL_142;
  }
LABEL_18:
  uint64_t v186 = a5;
  unint64_t v187 = a6;
  unint64_t v190 = a3;
  unint64_t v194 = a4;
  if (!v13)
  {
    Swift::UInt64 rawBits = a2._rawBits;
    Swift::UInt64 v143 = v11;
    if ((v11 & 0xC) == 4) {
      Swift::UInt64 v143 = _StringGuts._slowEnsureMatchingEncoding(_:)((Swift::String::Index)v11)._rawBits;
    }
    if ((v10 & 0x2000000000000000) != 0) {
      unint64_t v14 = HIBYTE(v10) & 0xF;
    }
    else {
      unint64_t v14 = v9 & 0xFFFFFFFFFFFFLL;
    }
    if (v14 < v143 >> 16) {
      goto LABEL_223;
    }
    Swift::Int startingAt = String.UTF8View._foreignDistance(from:to:)((Swift::String::Index)15, (Swift::String::Index)v143);
    if ((v11 & 0xC) == 4) {
      Swift::UInt64 v11 = _StringGuts._slowEnsureMatchingEncoding(_:)((Swift::String::Index)v11)._rawBits;
    }
    if ((v12 & 0xC) == 4)
    {
      Swift::UInt64 v12 = _StringGuts._slowEnsureMatchingEncoding(_:)((Swift::String::Index)v12)._rawBits;
      if (v14 < v11 >> 16) {
        goto LABEL_223;
      }
    }
    else if (v14 < v11 >> 16)
    {
      goto LABEL_223;
    }
    if (v14 < v12 >> 16) {
      goto LABEL_223;
    }
    uint64_t v13 = String.UTF8View._foreignDistance(from:to:)((Swift::String::Index)v11, (Swift::String::Index)v12);
    Swift::UInt64 v144 = v7._rawBits;
    if ((v7._rawBits & 0xC) != 4)
    {
LABEL_155:
      Swift::UInt64 v145 = rawBits;
      if ((rawBits & 0xC) == 4)
      {
        Swift::UInt64 v145 = _StringGuts._slowEnsureMatchingEncoding(_:)((Swift::String::Index)rawBits)._rawBits;
        if (v14 < v144 >> 16) {
          goto LABEL_223;
        }
      }
      else if (v14 < v144 >> 16)
      {
        goto LABEL_223;
      }
      if (v14 >= v145 >> 16)
      {
        Swift::Int v146 = String.UTF8View._foreignDistance(from:to:)((Swift::String::Index)v144, (Swift::String::Index)v145);
        unint64_t v147 = v8;
        uint64_t v148 = specialized _StringGuts.replaceSubrange<A>(_:with:)(v7._rawBits, rawBits, v190, v194, v186, v187);
        uint64_t v150 = v149 - v148;
        if (__OFSUB__(v149, v148))
        {
          __break(1u);
        }
        else
        {
          BOOL v78 = __OFADD__(v13, v150);
          uint64_t v151 = v13 + v150;
          if (!v78)
          {
            uint64_t v13 = v151 - v146;
            if (!__OFSUB__(v151, v146))
            {
              if (v148 == v149)
              {
                Swift::Int v152 = 0;
                Swift::Int v153 = startingAt << 16;
LABEL_196:
                v153 |= v152 << 8;
LABEL_197:
                *(void *)uint64_t v199 = v153 | 5;
                if (_StringGuts.isOnGraphemeClusterBoundary(_:)((Swift::String::Index)(v153 | 5))) {
                  *(void *)uint64_t v199 = v153 | 7;
                }
                uint64_t v112 = startingAt + v13;
                if (!__OFADD__(startingAt, v13))
                {
                  Swift::Int v17 = (uint64_t *)v199;
                  goto LABEL_126;
                }
                __break(1u);
                goto LABEL_231;
              }
              uint64_t v169 = *(void *)(v199 + 16);
              unint64_t v147 = *(void *)(v199 + 24);
              if ((v147 & 0x1000000000000000) != 0) {
                goto LABEL_228;
              }
              if ((v147 & 0x2000000000000000) != 0)
              {
                Swift::UInt64 v207 = *(void *)(v199 + 16);
                unint64_t v208 = v147 & 0xFFFFFFFFFFFFFFLL;
                if (startingAt + 1 == (HIBYTE(v147) & 0xF))
                {
LABEL_195:
                  Swift::Int v153 = startingAt << 16;
                  Swift::Int v152 = 1;
                  goto LABEL_196;
                }
                int v172 = *(unsigned __int16 *)((char *)&v207 + startingAt);
                goto LABEL_193;
              }
              if ((v169 & 0x1000000000000000) != 0)
              {
                uint64_t v170 = (char *)((v147 & 0xFFFFFFFFFFFFFFFLL) + 32);
                uint64_t v171 = v169 & 0xFFFFFFFFFFFFLL;
              }
              else
              {
                uint64_t v170 = (char *)_StringObject.sharedUTF8.getter(*(void *)(v199 + 16), *(void *)(v199 + 24));
              }
              if (startingAt + 1 == v171) {
                goto LABEL_195;
              }
              if (v170)
              {
                int v172 = *(unsigned __int16 *)&v170[startingAt];
LABEL_193:
                if (v172 != 2573 && (v172 & 0x80808080) == 0) {
                  goto LABEL_195;
                }
LABEL_228:
                Swift::Int v152 = _StringGuts._opaqueComplexCharacterStride(startingAt:)(startingAt);
                Swift::Int v153 = startingAt << 16;
                if (v152 > 63) {
                  goto LABEL_197;
                }
                goto LABEL_196;
              }
LABEL_224:
              _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "unsafelyUnwrapped of nil optional", 33, 2, "Swift/Optional.swift", 20, 2, 0x163uLL, 0);
            }
LABEL_227:
            __break(1u);
            goto LABEL_228;
          }
        }
        __break(1u);
        goto LABEL_227;
      }
LABEL_223:
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index is out of bounds", 29, 2, "Swift/StringUTF8View.swift", 26, 2, 0xCFuLL, 0);
    }
LABEL_221:
    Swift::UInt64 v144 = _StringGuts._slowEnsureMatchingEncoding(_:)(v7)._rawBits;
    goto LABEL_155;
  }
  Swift::UInt64 v18 = v7._rawBits >> 16;
  v189._Swift::UInt64 rawBits = a2._rawBits;
  Swift::UInt64 v12 = a2._rawBits >> 16;
  if ((v9 & ~v10 & 0x2000000000000000) != 0)
  {
    BOOL isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v10 & 0xFFFFFFFFFFFFFFFLL);
    unint64_t v9 = v17[2];
    uint64_t v10 = v17[3];
    if (isUniquelyReferenced_nonNull_native)
    {
      if ((v187 & 0x1000000000000000) == 0)
      {
        uint64_t v13 = v194 >> 16;
        if ((v187 & 0x2000000000000000) != 0)
        {
          unint64_t v21 = HIBYTE(v187) & 0xF;
          Swift::UInt64 v207 = v186;
          unint64_t v208 = v187 & 0xFFFFFFFFFFFFFFLL;
          if (v21 < v13) {
            goto LABEL_180;
          }
          uint64_t v20 = (uint64_t *)&v207;
          goto LABEL_65;
        }
        if ((v186 & 0x1000000000000000) != 0)
        {
          uint64_t v20 = (uint64_t *)((v187 & 0xFFFFFFFFFFFFFFFLL) + 32);
          unint64_t v21 = v186 & 0xFFFFFFFFFFFFLL;
          if ((v186 & 0xFFFFFFFFFFFFLL) < v13) {
            goto LABEL_180;
          }
LABEL_65:
          uint64_t v63 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(v190 >> 16, v13, (uint64_t)v20, v21);
          unint64_t v9 = specialized _StringGuts.uniqueNativeReplaceSubrange(_:with:isASCII:)(v7._rawBits, v189._rawBits, v63, v64);
          goto LABEL_100;
        }
        uint64_t v20 = (uint64_t *)_StringObject.sharedUTF8.getter(v186, v187);
        unint64_t v21 = v166;
        if (v166 >= v13) {
          goto LABEL_65;
        }
LABEL_180:
        _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x745uLL, 0);
      }
      Swift::UInt64 rawBits = v194;
      Swift::UInt64 v207 = v190;
      unint64_t v208 = v194;
      uint64_t v209 = v186;
      unint64_t v210 = v187;
      Swift::String::Index v211 = closure #3 in _StringGuts.replaceSubrange<A>(_:with:);
      uint64_t v212 = 0;
      swift_bridgeObjectRetain(v187);
      Swift::UInt64 v154 = specialized FlattenSequence<>.startIndex.getter();
      unint64_t v157 = specialized FlattenSequence<>.distance(from:to:)(v154, v156, v155 & 1, v194, 0, 1);
      Swift::UInt64 v158 = v18 + v157;
      if (__OFADD__(v18, v157))
      {
        __break(1u);
      }
      else
      {
        uint64_t v159 = v9 & 0xFFFFFFFFFFFFLL;
        if ((v10 & 0x2000000000000000) != 0) {
          uint64_t v159 = HIBYTE(v10) & 0xF;
        }
        Swift::UInt64 v160 = v159 - v12;
        Swift::Int startingAt = v18 + v157;
        uint64_t v13 = v158 + v160;
        if (!__OFADD__(v158, v160))
        {
          uint64_t v112 = v157;
          v7._rawBits >>= 16;
          uint64_t v10 = v12;
          unint64_t v9 = v18;
          if (v13 < 16) {
            goto LABEL_213;
          }
          uint64_t v161 = _StringGuts.uniqueNativeCapacity.getter();
          if ((v162 & 1) == 0 && v161 >= v13) {
            goto LABEL_213;
          }
          uint64_t v163 = _StringGuts.uniqueNativeCapacity.getter();
          if (v164)
          {
            uint64_t v173 = *(void *)(v199 + 24);
            if ((v173 & 0x1000000000000000) != 0)
            {
              uint64_t v165 = String.UTF8View._foreignCount()();
            }
            else if ((v173 & 0x2000000000000000) != 0)
            {
              uint64_t v165 = HIBYTE(v173) & 0xF;
            }
            else
            {
              uint64_t v165 = *(void *)(v199 + 16) & 0xFFFFFFFFFFFFLL;
            }
          }
          else
          {
            uint64_t v165 = 2 * v163;
          }
          if (v165 <= v13) {
            unint64_t v147 = v13;
          }
          else {
            unint64_t v147 = v165;
          }
          unint64_t v174 = *(void *)(v199 + 24);
          if ((v174 & 0x1000000000000000) == 0)
          {
            unint64_t v175 = *(void *)v8;
            if ((v174 & 0x2000000000000000) != 0)
            {
              uint64_t v178 = (v174 >> 62) & 1;
              unint64_t v201 = v175;
              uint64_t v202 = v174 & 0xFFFFFFFFFFFFFFLL;
              unint64_t v176 = (char *)&v201;
              size_t v177 = HIBYTE(v174) & 0xF;
            }
            else
            {
              if ((v175 & 0x1000000000000000) != 0)
              {
                unint64_t v176 = (char *)((v174 & 0xFFFFFFFFFFFFFFFLL) + 32);
                size_t v177 = v175 & 0xFFFFFFFFFFFFLL;
              }
              else
              {
                unint64_t v176 = (char *)_StringObject.sharedUTF8.getter(v175, v174);
              }
              uint64_t v178 = v175 >> 63;
            }
            int64_t v179 = specialized static __StringStorage.create(initializingFrom:codeUnitCapacity:isASCII:)(v176, v177, v147, v178);
            uint64_t v180 = *(void *)(v179 + 24);
            swift_bridgeObjectRelease(*(void *)(v199 + 24));
            *(void *)(v199 + 16) = v180;
            *(void *)(v199 + 24) = v179;
            goto LABEL_212;
          }
LABEL_231:
          _StringGuts._foreignGrow(_:)(v147);
LABEL_212:
          Swift::UInt64 v18 = v7._rawBits;
LABEL_213:
          Swift::Int v17 = (uint64_t *)v199;
          uint64_t v181 = *(void *)(v199 + 24) & 0xFFFFFFFFFFFFFFFLL;
          unint64_t v201 = v190;
          uint64_t v202 = v194;
          unint64_t v8 = v187;
          uint64_t v203 = v186;
          unint64_t v204 = v187;
          unint64_t v205 = closure #3 in _StringGuts.replaceSubrange<A>(_:with:);
          uint64_t v206 = 0;
          Swift::UInt64 v12 = v10;
          specialized __StringStorage.replace<A>(from:to:with:replacementCount:)(v9, v10, (uint64_t)&v201, v112);
          swift_bridgeObjectRelease(v187);
          *(void *)(v199 + 16) = *(void *)(v181 + 24);
          goto LABEL_99;
        }
      }
      __break(1u);
      goto LABEL_221;
    }
  }
  unint64_t v22 = 0xE000000000000000;
  Swift::UInt64 v207 = 0;
  unint64_t v208 = 0xE000000000000000;
  uint64_t v23 = _StringGuts.nativeCapacity.getter(v9, v10);
  uint64_t v24 = 0;
  if ((v25 & 1) == 0)
  {
    int64_t v26 = v23;
    if (v23 >= 16)
    {
      uint64_t v27 = _StringGuts.uniqueNativeCapacity.getter();
      if ((v28 & 1) != 0 || v27 < v26)
      {
        uint64_t v30 = 2 * _StringGuts.uniqueNativeCapacity.getter();
        if (v30 <= v26) {
          uint64_t v30 = v26;
        }
        if (v29) {
          int64_t v31 = v26;
        }
        else {
          int64_t v31 = v30;
        }
        unint64_t v201 = 0;
        uint64_t v202 = 0;
        unint64_t v22 = specialized static __StringStorage.create(initializingFrom:codeUnitCapacity:isASCII:)((char *)&v201, 0, v31, 1);
        uint64_t v24 = *(void *)(v22 + 24);
        swift_bridgeObjectRelease(0xE000000000000000);
        Swift::UInt64 v207 = v24;
        unint64_t v208 = v22;
      }
      else
      {
        uint64_t v24 = 0;
        unint64_t v22 = 0xE000000000000000;
      }
    }
  }
  Swift::UInt64 v184 = v7._rawBits >> 16;
  Swift::UInt64 v185 = v12;
  v32._Swift::UInt64 rawBits = v7._rawBits;
  Swift::Int startingAt = v17[3];
  uint64_t v199 = v17[2];
  unint64_t v8 = specialized Collection.subscript.getter(v32, v199, startingAt);
  uint64_t v13 = v35;
  v7._Swift::UInt64 rawBits = v33;
  unint64_t v9 = v34;
  Swift::UInt64 v12 = v35 >> 16;
  uint64_t v183 = v8 >> 16;
  if ((v34 & 0x1000000000000000) == 0)
  {
    Swift::UInt64 v11 = v33;
    v7._Swift::UInt64 rawBits = v12 - (v8 >> 16);
    swift_bridgeObjectRetain_n(v34, 2);
    if ((v22 & 0x1000000000000000) != 0) {
      goto LABEL_134;
    }
LABEL_40:
    if ((v22 & 0x2000000000000000) != 0)
    {
      uint64_t v37 = HIBYTE(v22) & 0xF;
      int64_t v36 = v37 + v7._rawBits;
      if (__OFADD__(v37, v7._rawBits)) {
        goto LABEL_136;
      }
    }
    else
    {
      int64_t v36 = (v24 & 0xFFFFFFFFFFFFLL) + v7._rawBits;
      if (__OFADD__(v24 & 0xFFFFFFFFFFFFLL, v7._rawBits)) {
        goto LABEL_136;
      }
    }
LABEL_45:
    if ((v24 & ~v22 & 0x2000000000000000) != 0
      && swift_isUniquelyReferenced_nonNull_native(v22 & 0xFFFFFFFFFFFFFFFLL))
    {
      int64_t v38 = _StringGuts.nativeUnusedCapacity.getter(v24, v22);
      if (v39)
      {
LABEL_215:
        unint64_t v182 = 258;
        goto LABEL_216;
      }
      if (v36 >= 16 || (v22 & 0x2000000000000000) == 0 && v38 >= (uint64_t)v7._rawBits)
      {
LABEL_51:
        _StringGuts.prepareForAppendInPlace(totalCount:otherUTF8Count:)(v36, v7._rawBits);
        swift_bridgeObjectRelease(v9);
        if ((v9 & 0x1000000000000000) != 0)
        {
          _StringGuts._foreignAppendInPlace(_:)(v11, v9, v183, v12);
        }
        else
        {
          if ((v9 & 0x2000000000000000) != 0)
          {
            swift_bridgeObjectRelease(v9);
            unint64_t v66 = HIBYTE(v9) & 0xF;
            unint64_t v201 = v11;
            uint64_t v202 = v9 & 0xFFFFFFFFFFFFFFLL;
            if (v66 < v12) {
              goto LABEL_180;
            }
            uint64_t v67 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(v183, v12, (uint64_t)&v201, v66);
            _StringGuts.appendInPlace(_:isASCII:)(v67, v68, (v9 & 0x4000000000000000) != 0);
LABEL_68:
            unint64_t v69 = startingAt;
            unint64_t v70 = v207 & 0xFFFFFFFFFFFFLL;
            if ((v208 & 0x2000000000000000) != 0) {
              unint64_t v70 = HIBYTE(v208) & 0xF;
            }
            uint64_t v183 = v70;
            specialized String.append<A>(contentsOf:)(v190, v194, v186, v187);
            Swift::UInt64 v12 = v207;
            v7._Swift::UInt64 rawBits = v208;
            unint64_t v71 = HIBYTE(v208) & 0xF;
            if ((v208 & 0x2000000000000000) == 0) {
              unint64_t v71 = v207 & 0xFFFFFFFFFFFFLL;
            }
            Swift::Int startingAt = v71;
            swift_bridgeObjectRetain_n(v208, 3);
            v72._Swift::UInt64 rawBits = v189._rawBits;
            unint64_t v9 = specialized Collection.subscript.getter(v72, v199, v69);
            unint64_t v22 = v74;
            uint64_t v199 = v75;
            unint64_t v8 = v73;
            int64_t v36 = v74 >> 16;
            unint64_t v194 = v9 >> 16;
            if ((v73 & 0x1000000000000000) == 0)
            {
              uint64_t v13 = v36 - (v9 >> 16);
              swift_bridgeObjectRetain_n(v73, 2);
              uint64_t v76 = v7._rawBits;
              goto LABEL_74;
            }
            goto LABEL_137;
          }
          if ((v11 & 0x1000000000000000) != 0)
          {
            id v40 = (id)((v9 & 0xFFFFFFFFFFFFFFFLL) + 32);
            uint64_t v41 = v11 & 0xFFFFFFFFFFFFLL;
            if ((uint64_t)(v11 & 0xFFFFFFFFFFFFLL) < (uint64_t)v12) {
              goto LABEL_180;
            }
          }
          else
          {
            id v40 = _StringObject.sharedUTF8.getter(v11, v9);
            uint64_t v41 = v167;
            if (v167 < (uint64_t)v12) {
              goto LABEL_180;
            }
          }
          unint64_t v42 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(v183, v12, (uint64_t)v40, v41);
          _StringGuts.appendInPlace(_:isASCII:)(v42, v43, (v11 & 0x8000000000000000) != 0);
        }
        swift_bridgeObjectRelease(v9);
        goto LABEL_68;
      }
    }
    else if (v36 > 15)
    {
      goto LABEL_51;
    }
    swift_bridgeObjectRelease(v9);
    unint64_t v44 = v207;
    swift_bridgeObjectRetain(v22);
    unint64_t v45 = _StringGuts._convertedToSmall()(v44, v22);
    unint64_t v47 = v46;
    swift_bridgeObjectRelease(v22);
    v48._Swift::UInt64 rawBits = v8 & 0xFFFFFFFFFFFF0000 | 1;
    v49._Swift::UInt64 rawBits = v13 & 0xFFFFFFFFFFFF0000 | 1;
    v50._Swift::UInt64 rawBits = _StringGuts.validateScalarRange(_:)(v48, v49, v11, v9);
    if (v50._rawBits < 0x10000) {
      v50._rawBits |= 3;
    }
    unint64_t v52 = specialized String.init(_:)(v50, v51, v11, v9);
    unint64_t v54 = v53;
    swift_bridgeObjectRelease(v9);
    unint64_t v55 = _StringGuts._convertedToSmall()(v52, v54);
    unint64_t v57 = v56;
    swift_bridgeObjectRelease(v54);
    unint64_t v58 = specialized _SmallString.init(_:appending:)(v45, v47, v55, v57);
    if ((v60 & 1) == 0)
    {
      uint64_t v61 = v58;
      unint64_t v62 = v59;
      swift_bridgeObjectRelease(v22);
      Swift::UInt64 v207 = v61;
      unint64_t v208 = v62;
      goto LABEL_68;
    }
LABEL_214:
    unint64_t v182 = 266;
LABEL_216:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/StringGutsRangeReplaceable.swift", 38, 2, v182, 0);
  }
  while (1)
  {
    swift_bridgeObjectRetain_n(v9, 3);
    v129._Swift::UInt64 rawBits = v8 & 0xFFFFFFFFFFFF0000 | 1;
    v130._Swift::UInt64 rawBits = v13 & 0xFFFFFFFFFFFF0000 | 1;
    v131._Swift::UInt64 rawBits = _StringGuts.validateScalarRange(_:)(v129, v130, v7._rawBits, v9);
    if (v131._rawBits < 0x10000) {
      v131._rawBits |= 3;
    }
    Swift::UInt64 v11 = v7._rawBits;
    v7._Swift::UInt64 rawBits = specialized Collection.count.getter(v131, v132, v7._rawBits, v9);
    swift_bridgeObjectRelease(v9);
    uint64_t v24 = v207;
    unint64_t v22 = v208;
    if ((v208 & 0x1000000000000000) == 0) {
      goto LABEL_40;
    }
LABEL_134:
    Swift::Int v133 = String.UTF8View._foreignCount()();
    int64_t v36 = v133 + v7._rawBits;
    if (!__OFADD__(v133, v7._rawBits)) {
      goto LABEL_45;
    }
LABEL_136:
    __break(1u);
LABEL_137:
    swift_bridgeObjectRetain_n(v8, 3);
    v134._Swift::UInt64 rawBits = v9 & 0xFFFFFFFFFFFF0000 | 1;
    v135._Swift::UInt64 rawBits = v22 & 0xFFFFFFFFFFFF0000 | 1;
    v136._Swift::UInt64 rawBits = _StringGuts.validateScalarRange(_:)(v134, v135, v199, v8);
    if (v136._rawBits < 0x10000) {
      v136._rawBits |= 3;
    }
    uint64_t v13 = specialized Collection.count.getter(v136, v137, v199, v8);
    swift_bridgeObjectRelease(v7._rawBits);
    uint64_t v76 = v8;
LABEL_74:
    swift_bridgeObjectRelease(v7._rawBits);
    swift_bridgeObjectRelease(v76);
    Swift::Int v77 = startingAt;
    if ((v7._rawBits & 0x1000000000000000) != 0) {
      Swift::Int v77 = String.UTF8View._foreignCount()();
    }
    swift_bridgeObjectRelease(v7._rawBits);
    BOOL v78 = __OFADD__(v77, v13);
    uint64_t v10 = v77 + v13;
    if (v78)
    {
      __break(1u);
LABEL_141:
      v189._Swift::UInt64 rawBits = a2._rawBits;
      unint64_t v192 = a3;
      unint64_t v138 = a6;
      unint64_t v14 = a5;
      unint64_t v196 = a4;
      v139._Swift::UInt64 rawBits = _StringGuts.scalarAlignSlow(_:)(a2)._rawBits;
      a3 = v192;
      a4 = v196;
      a5 = v14;
      a6 = v138;
      a2._Swift::UInt64 rawBits = v189._rawBits & 0xC | v139._rawBits & 0xFFFFFFFFFFFFFFF3 | 1;
      if ((v7._rawBits & 1) == 0)
      {
LABEL_142:
        v189._Swift::UInt64 rawBits = a2._rawBits;
        unint64_t v193 = a3;
        unint64_t v140 = a6;
        unint64_t v14 = a5;
        unint64_t v197 = a4;
        v141._Swift::UInt64 rawBits = _StringGuts.scalarAlignSlow(_:)(v7)._rawBits;
        a2._Swift::UInt64 rawBits = v189._rawBits;
        a3 = v193;
        a4 = v197;
        a5 = v14;
        a6 = v140;
        v7._Swift::UInt64 rawBits = v7._rawBits & 0xC | v141._rawBits & 0xFFFFFFFFFFFFFFF3 | 1;
      }
      goto LABEL_18;
    }
    if ((v12 & ~v7._rawBits & 0x2000000000000000) != 0
      && swift_isUniquelyReferenced_nonNull_native(v7._rawBits & 0xFFFFFFFFFFFFFFFLL))
    {
      uint64_t v79 = v208;
      int64_t v80 = _StringGuts.nativeUnusedCapacity.getter(v207, v208);
      Swift::UInt64 v12 = v185;
      if (v81) {
        goto LABEL_215;
      }
      if (v10 >= 16 || (v79 & 0x2000000000000000) == 0 && v80 >= v13)
      {
LABEL_85:
        _StringGuts.prepareForAppendInPlace(totalCount:otherUTF8Count:)(v10, v13);
        swift_bridgeObjectRelease(v8);
        unint64_t v9 = v183;
        if ((v8 & 0x1000000000000000) != 0)
        {
          _StringGuts._foreignAppendInPlace(_:)(v199, v8, v194, v36);
          swift_bridgeObjectRelease(v8);
          Swift::UInt64 v18 = v184;
        }
        else
        {
          Swift::UInt64 v18 = v184;
          if ((v8 & 0x2000000000000000) != 0)
          {
            swift_bridgeObjectRelease(v8);
            unint64_t v104 = HIBYTE(v8) & 0xF;
            unint64_t v201 = v199;
            uint64_t v202 = v8 & 0xFFFFFFFFFFFFFFLL;
            if (v104 < v36) {
              goto LABEL_180;
            }
            uint64_t v105 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(v194, v36, (uint64_t)&v201, v104);
            _StringGuts.appendInPlace(_:isASCII:)(v105, v106, (v8 & 0x4000000000000000) != 0);
          }
          else
          {
            if ((v199 & 0x1000000000000000) != 0)
            {
              id v82 = (id)((v8 & 0xFFFFFFFFFFFFFFFLL) + 32);
              uint64_t v83 = v199 & 0xFFFFFFFFFFFFLL;
              if ((v199 & 0xFFFFFFFFFFFFLL) < v36) {
                goto LABEL_180;
              }
            }
            else
            {
              id v82 = _StringObject.sharedUTF8.getter(v199, v8);
              uint64_t v83 = v168;
              if (v168 < v36) {
                goto LABEL_180;
              }
            }
            Swift::tuple_Unicode_Scalar_scalarLength_Int v84 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(v194, v36, (uint64_t)v82, v83);
            _StringGuts.appendInPlace(_:isASCII:)(v84, v85, v199 < 0);
            swift_bridgeObjectRelease(v8);
          }
        }
        goto LABEL_98;
      }
    }
    else
    {
      Swift::UInt64 v12 = v185;
      if (v10 > 15) {
        goto LABEL_85;
      }
      uint64_t v79 = v208;
    }
    swift_bridgeObjectRelease(v8);
    unint64_t v86 = v207;
    swift_bridgeObjectRetain(v79);
    uint64_t v13 = _StringGuts._convertedToSmall()(v86, v79);
    unint64_t v88 = v87;
    swift_bridgeObjectRelease(v79);
    v89._Swift::UInt64 rawBits = v9 & 0xFFFFFFFFFFFF0000 | 1;
    v90._Swift::UInt64 rawBits = v22 & 0xFFFFFFFFFFFF0000 | 1;
    v91._Swift::UInt64 rawBits = _StringGuts.validateScalarRange(_:)(v89, v90, v199, v8);
    if (v91._rawBits < 0x10000) {
      v91._rawBits |= 3;
    }
    unint64_t v93 = specialized String.init(_:)(v91, v92, v199, v8);
    unint64_t v95 = v94;
    swift_bridgeObjectRelease(v8);
    unint64_t v96 = _StringGuts._convertedToSmall()(v93, v95);
    unint64_t v98 = v97;
    swift_bridgeObjectRelease(v95);
    unint64_t v99 = specialized _SmallString.init(_:appending:)(v13, v88, v96, v98);
    if (v101) {
      goto LABEL_214;
    }
    uint64_t v102 = v99;
    unint64_t v103 = v100;
    swift_bridgeObjectRelease(v79);
    Swift::UInt64 v207 = v102;
    unint64_t v208 = v103;
    unint64_t v9 = v183;
    Swift::UInt64 v18 = v184;
LABEL_98:
    unint64_t v8 = v207;
    unint64_t v107 = v208;
    swift_bridgeObjectRelease(v17[3]);
    void v17[2] = v8;
    void v17[3] = v107;
LABEL_99:
    Swift::Int v65 = startingAt;
LABEL_100:
    unint64_t v108 = v65 - v9;
    if (!__OFSUB__(v65, v9)) {
      break;
    }
    __break(1u);
  }
  uint64_t v109 = *v17;
  unint64_t v110 = (unint64_t)*v17 >> 16;
  Swift::UInt64 v111 = v108 + v18 - v12;
  uint64_t v112 = v111 + ((unint64_t)v17[1] >> 16);
  uint64_t v113 = ((unint64_t)*v17 >> 8) & 0x3F;
  if (v113)
  {
    if (v113 + v110 < v18) {
      goto LABEL_125;
    }
  }
  else if (v110 < v18)
  {
    goto LABEL_125;
  }
  if (v110 == v112)
  {
    Swift::Int v114 = 0;
    unint64_t v115 = v109 & 0xFFFFFFFFFFFF0000;
    goto LABEL_119;
  }
  uint64_t v116 = v17[2];
  unint64_t v117 = v17[3];
  if ((v117 & 0x1000000000000000) != 0) {
    goto LABEL_163;
  }
  if ((v117 & 0x2000000000000000) != 0)
  {
    v200[0] = v17[2];
    v200[1] = v117 & 0xFFFFFFFFFFFFFFLL;
    if (v110 + 1 != (HIBYTE(v117) & 0xF))
    {
      int v120 = *(unsigned __int16 *)((char *)v200 + v110);
      goto LABEL_116;
    }
LABEL_118:
    unint64_t v115 = v109 & 0xFFFFFFFFFFFF0000;
    Swift::Int v114 = 1;
    goto LABEL_119;
  }
  if ((v116 & 0x1000000000000000) != 0)
  {
    Swift::String::Index v118 = (char *)((v117 & 0xFFFFFFFFFFFFFFFLL) + 32);
    uint64_t v119 = v116 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    Swift::String::Index v118 = (char *)_StringObject.sharedUTF8.getter(v17[2], v17[3]);
  }
  if (v110 + 1 == v119) {
    goto LABEL_118;
  }
  if (!v118) {
    goto LABEL_224;
  }
  int v120 = *(unsigned __int16 *)&v118[v110];
LABEL_116:
  if (v120 != 2573 && (v120 & 0x80808080) == 0) {
    goto LABEL_118;
  }
LABEL_163:
  Swift::Int v114 = _StringGuts._opaqueComplexCharacterStride(startingAt:)(v110);
  unint64_t v115 = v109 & 0xFFFFFFFFFFFF0000;
  if (v114 <= 63) {
LABEL_119:
  }
    v115 |= v114 << 8;
  uint64_t v121 = v115 | 5;
  if ((v109 & 2) != 0 && (v110 < v18 || _StringGuts.isOnGraphemeClusterBoundary(_:)((Swift::String::Index)(v115 | 5)))) {
    uint64_t v121 = v115 | 7;
  }
  *Swift::Int v17 = v121;
LABEL_125:
  if (v111) {
LABEL_126:
  }
    v17[1] = (v112 << 16) | 5;
}

void specialized Substring._replaceSubrange<A>(_:with:)(Swift::String::Index a1, Swift::String::Index a2, unint64_t a3, Swift::UInt64 a4)
{
  unint64_t v5 = v4;
  v6._Swift::UInt64 rawBits = a2._rawBits;
  v7._Swift::UInt64 rawBits = a1._rawBits;
  unint64_t v10 = v4[2];
  unint64_t v8 = (unint64_t)(v4 + 2);
  uint64_t v9 = v10;
  unint64_t v11 = v5[3];
  unint64_t v13 = *v5;
  Swift::UInt64 v12 = v5[1];
  uint64_t v166 = (uint64_t)v5;
  uint64_t v14 = (v10 >> 59) & 1;
  if ((v11 & 0x1000000000000000) != 0) {
    uint64_t v15 = v14;
  }
  else {
    uint64_t v15 = 1;
  }
  uint64_t v16 = a1._rawBits & 0xC;
  uint64_t v17 = 4 << v15;
  uint64_t v18 = a2._rawBits & 0xC;
  if ((a1._rawBits & 1) != 0 && v16 != v17 && (a2._rawBits & 1) != 0 && v18 != v17)
  {
    uint64_t v19 = (Swift::String::Index *)v166;
    if (a1._rawBits >> 14 < v13 >> 14 || v12 >> 14 < a2._rawBits >> 14) {
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index range is out of bounds", 35, 2, "Swift/StringIndexValidation.swift", 33, 2, 0xECuLL, 0);
    }
    goto LABEL_18;
  }
  if (v18 == v17)
  {
    v6._Swift::UInt64 rawBits = _StringGuts._slowEnsureMatchingEncoding(_:)(a2)._rawBits;
    if (v16 != v17) {
      goto LABEL_13;
    }
  }
  else if (v16 != v17)
  {
    goto LABEL_13;
  }
  v7._Swift::UInt64 rawBits = _StringGuts._slowEnsureMatchingEncoding(_:)(v7)._rawBits;
LABEL_13:
  uint64_t v19 = (Swift::String::Index *)v166;
  if (v7._rawBits >> 14 < v13 >> 14 || v6._rawBits >> 14 < v7._rawBits >> 14 || v12 >> 14 < v6._rawBits >> 14) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Substring index range is out of bounds", 38, 2, "Swift/StringIndexValidation.swift", 33, 2, 0x63uLL, 0);
  }
  if ((v6._rawBits & 1) == 0) {
    goto LABEL_156;
  }
  if ((v7._rawBits & 1) == 0) {
    goto LABEL_157;
  }
LABEL_18:
  if (!v15)
  {
LABEL_158:
    Swift::UInt64 rawBits = v13;
    if ((v13 & 0xC) == 4) {
      Swift::UInt64 rawBits = _StringGuts._slowEnsureMatchingEncoding(_:)((Swift::String::Index)v13)._rawBits;
    }
    if ((v11 & 0x2000000000000000) != 0) {
      unint64_t v141 = HIBYTE(v11) & 0xF;
    }
    else {
      unint64_t v141 = v9 & 0xFFFFFFFFFFFFLL;
    }
    if (v141 >= rawBits >> 16)
    {
      startingAtBuiltin::Word a = String.UTF8View._foreignDistance(from:to:)((Swift::String::Index)15, (Swift::String::Index)rawBits);
      if ((v13 & 0xC) == 4) {
        unint64_t v13 = _StringGuts._slowEnsureMatchingEncoding(_:)((Swift::String::Index)v13)._rawBits;
      }
      if ((v12 & 0xC) == 4)
      {
        Swift::UInt64 v12 = _StringGuts._slowEnsureMatchingEncoding(_:)((Swift::String::Index)v12)._rawBits;
        if (v141 < v13 >> 16) {
          goto LABEL_213;
        }
      }
      else if (v141 < v13 >> 16)
      {
        goto LABEL_213;
      }
      if (v141 < v12 >> 16) {
        goto LABEL_213;
      }
      unint64_t v142 = String.UTF8View._foreignDistance(from:to:)((Swift::String::Index)v13, (Swift::String::Index)v12);
      Swift::UInt64 v143 = v7._rawBits;
      if ((v7._rawBits & 0xC) == 4) {
        Swift::UInt64 v143 = _StringGuts._slowEnsureMatchingEncoding(_:)(v7)._rawBits;
      }
      Swift::UInt64 v144 = v6._rawBits;
      if ((v6._rawBits & 0xC) == 4)
      {
        Swift::UInt64 v144 = _StringGuts._slowEnsureMatchingEncoding(_:)(v6)._rawBits;
        if (v141 < v143 >> 16) {
          goto LABEL_213;
        }
      }
      else if (v141 < v143 >> 16)
      {
        goto LABEL_213;
      }
      if (v141 >= v144 >> 16)
      {
        Swift::Int v145 = String.UTF8View._foreignDistance(from:to:)((Swift::String::Index)v143, (Swift::String::Index)v144);
        unint64_t v146 = specialized _StringGuts.replaceSubrange<A>(_:with:)(v7._rawBits, v6._rawBits, a3, a4);
        uint64_t v148 = v147 - v146;
        if (__OFSUB__(v147, v146))
        {
          __break(1u);
        }
        else
        {
          BOOL v85 = __OFADD__(v142, v148);
          uint64_t v149 = v142 + v148;
          if (!v85)
          {
            BOOL v85 = __OFSUB__(v149, v145);
            Swift::Int v145 = v149 - v145;
            if (!v85)
            {
              if (v146 == v147)
              {
                Swift::Int v150 = 0;
                uint64_t v151 = startingAta << 16;
              }
              else
              {
                uint64_t v151 = *(void *)(v166 + 16);
                unint64_t v142 = *(void *)(v166 + 24);
                if ((v142 & 0x1000000000000000) != 0) {
                  goto LABEL_218;
                }
                if ((v142 & 0x2000000000000000) == 0)
                {
                  if ((v151 & 0x1000000000000000) == 0) {
                    goto LABEL_221;
                  }
                  Swift::UInt64 v154 = (char *)((v142 & 0xFFFFFFFFFFFFFFFLL) + 32);
                  uint64_t v155 = v151 & 0xFFFFFFFFFFFFLL;
                  goto LABEL_192;
                }
                unint64_t v169 = *(void *)(v166 + 16);
                unint64_t v170 = v142 & 0xFFFFFFFFFFFFFFLL;
                if (startingAta + 1 != (HIBYTE(v142) & 0xF))
                {
                  int v156 = *(unsigned __int16 *)((char *)&v169 + startingAta);
                  goto LABEL_199;
                }
LABEL_201:
                uint64_t v151 = startingAta << 16;
                Swift::Int v150 = 1;
              }
LABEL_202:
              v151 |= v150 << 8;
              while (1)
              {
                *(void *)uint64_t v166 = v151 | 5;
                if (_StringGuts.isOnGraphemeClusterBoundary(_:)((Swift::String::Index)(v151 | 5))) {
                  *(void *)uint64_t v166 = v151 | 7;
                }
                uint64_t v21 = startingAta + v145;
                if (!__OFADD__(startingAta, v145)) {
                  break;
                }
                __break(1u);
LABEL_221:
                Swift::UInt64 v154 = (char *)_StringObject.sharedUTF8.getter(v151, v142);
LABEL_192:
                if (startingAta + 1 == v155) {
                  goto LABEL_201;
                }
                if (!v154) {
                  goto LABEL_214;
                }
                int v156 = *(unsigned __int16 *)&v154[startingAta];
LABEL_199:
                if (v156 != 2573 && (v156 & 0x80808080) == 0) {
                  goto LABEL_201;
                }
LABEL_218:
                Swift::Int v150 = _StringGuts._opaqueComplexCharacterStride(startingAt:)(startingAta);
                uint64_t v151 = startingAta << 16;
                if (v150 <= 63) {
                  goto LABEL_202;
                }
              }
              uint64_t v19 = (Swift::String::Index *)v166;
              goto LABEL_141;
            }
LABEL_217:
            __break(1u);
            goto LABEL_218;
          }
        }
        __break(1u);
        goto LABEL_217;
      }
    }
LABEL_213:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index is out of bounds", 29, 2, "Swift/StringUTF8View.swift", 26, 2, 0xCFuLL, 0);
  }
LABEL_19:
  unint64_t v20 = v7._rawBits >> 16;
  uint64_t v21 = v6._rawBits >> 16;
  if ((v9 & ~v11 & 0x2000000000000000) != 0)
  {
    BOOL isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v11 & 0xFFFFFFFFFFFFFFFLL);
    uint64_t v9 = v19[2]._rawBits;
    unint64_t v11 = v19[3]._rawBits;
    if (isUniquelyReferenced_nonNull_native)
    {
      v6._Swift::UInt64 rawBits = a4;
      swift_bridgeObjectRetain(a4);
      v7._Swift::UInt64 rawBits = a3;
      Swift::UInt64 v23 = specialized Collection.count.getter(a3, a4, (void (*)(unint64_t *__return_ptr, uint64_t *))closure #3 in _StringGuts.replaceSubrange<A>(_:with:), 0);
      unint64_t v24 = v20 + v23;
      if (__OFADD__(v20, v23))
      {
        __break(1u);
      }
      else
      {
        uint64_t v25 = v9 & 0xFFFFFFFFFFFFLL;
        if ((v11 & 0x2000000000000000) != 0) {
          uint64_t v25 = HIBYTE(v11) & 0xF;
        }
        uint64_t v26 = v25 - v21;
        uint64_t v15 = v24 + v26;
        if (!__OFADD__(v24, v26))
        {
          uint64_t v27 = v23;
          Swift::Int startingAt = v20 + v23;
          unint64_t v11 = v20;
          if (v15 >= 16)
          {
            uint64_t v28 = _StringGuts.uniqueNativeCapacity.getter();
            if ((v29 & 1) != 0 || v28 < v15)
            {
              uint64_t v30 = _StringGuts.uniqueNativeCapacity.getter();
              if (v31)
              {
                Swift::UInt64 v115 = v19[3]._rawBits;
                if ((v115 & 0x1000000000000000) != 0)
                {
                  uint64_t v32 = String.UTF8View._foreignCount()();
                }
                else if ((v115 & 0x2000000000000000) != 0)
                {
                  uint64_t v32 = HIBYTE(v115) & 0xF;
                }
                else
                {
                  uint64_t v32 = v19[2]._rawBits & 0xFFFFFFFFFFFFLL;
                }
              }
              else
              {
                uint64_t v32 = 2 * v30;
              }
              if (v32 > v15) {
                uint64_t v15 = v32;
              }
              unint64_t v116 = v19[3]._rawBits;
              if ((v116 & 0x1000000000000000) != 0)
              {
                _StringGuts._foreignGrow(_:)(v15);
              }
              else
              {
                unint64_t v117 = *(void *)v8;
                if ((v116 & 0x2000000000000000) != 0)
                {
                  uint64_t v120 = (v116 >> 62) & 1;
                  unint64_t v169 = v117;
                  unint64_t v170 = v116 & 0xFFFFFFFFFFFFFFLL;
                  Swift::String::Index v118 = (char *)&v169;
                  size_t v119 = HIBYTE(v116) & 0xF;
                }
                else
                {
                  if ((v117 & 0x1000000000000000) != 0)
                  {
                    Swift::String::Index v118 = (char *)((v116 & 0xFFFFFFFFFFFFFFFLL) + 32);
                    size_t v119 = v117 & 0xFFFFFFFFFFFFLL;
                  }
                  else
                  {
                    Swift::String::Index v118 = (char *)_StringObject.sharedUTF8.getter(v117, v116);
                  }
                  uint64_t v120 = v117 >> 63;
                }
                int64_t v121 = specialized static __StringStorage.create(initializingFrom:codeUnitCapacity:isASCII:)(v118, v119, v15, v120);
                uint64_t v122 = *(void *)(v121 + 24);
                swift_bridgeObjectRelease(*(void *)(v166 + 24));
                *(void *)(v166 + 16) = v122;
                *(void *)(v166 + 24) = v121;
                uint64_t v19 = (Swift::String::Index *)v166;
              }
            }
          }
          uint64_t v15 = v19[3]._rawBits;
          specialized __StringStorage.replace<A>(from:to:with:replacementCount:)(v20, v21, a3, a4, (uint64_t)closure #3 in _StringGuts.replaceSubrange<A>(_:with:), 0, v27);
          swift_bridgeObjectRelease(a4);
          Swift::UInt64 v12 = *(void *)((v15 & 0xFFFFFFFFFFFFFFFLL) + 0x18);
          v19[2]._Swift::UInt64 rawBits = v12;
          goto LABEL_115;
        }
      }
      __break(1u);
      goto LABEL_183;
    }
  }
  unint64_t v8 = 0xE000000000000000;
  unint64_t v169 = 0;
  unint64_t v170 = 0xE000000000000000;
  uint64_t v33 = _StringGuts.nativeCapacity.getter(v9, v11);
  uint64_t v9 = 0;
  if ((v34 & 1) == 0)
  {
    int64_t v35 = v33;
    if (v33 >= 16)
    {
      uint64_t v36 = _StringGuts.uniqueNativeCapacity.getter();
      if ((v37 & 1) != 0 || v36 < v35)
      {
        uint64_t v39 = 2 * _StringGuts.uniqueNativeCapacity.getter();
        if (v39 <= v35) {
          uint64_t v39 = v35;
        }
        if (v38) {
          int64_t v40 = v35;
        }
        else {
          int64_t v40 = v39;
        }
        uint64_t v167 = 0;
        uint64_t v168 = 0;
        unint64_t v8 = specialized static __StringStorage.create(initializingFrom:codeUnitCapacity:isASCII:)((char *)&v167, 0, v40, 1);
        uint64_t v9 = *(void *)(v8 + 24);
        swift_bridgeObjectRelease(0xE000000000000000);
        unint64_t v169 = v9;
        unint64_t v170 = v8;
      }
      else
      {
        uint64_t v9 = 0;
        unint64_t v8 = 0xE000000000000000;
      }
    }
  }
  v41._Swift::UInt64 rawBits = v7._rawBits;
  Swift::Int startingAt = v19[2]._rawBits;
  Swift::UInt64 v160 = v7._rawBits >> 16;
  unint64_t v161 = v19[3]._rawBits;
  unint64_t v11 = specialized Collection.subscript.getter(v41, startingAt, v161);
  uint64_t v15 = v44;
  v7._Swift::UInt64 rawBits = v43;
  Swift::UInt64 v12 = v44 >> 16;
  uint64_t v158 = v11 >> 16;
  Swift::UInt64 v159 = v6._rawBits >> 16;
  uint64_t v166 = v42;
  if ((v43 & 0x1000000000000000) == 0)
  {
    unint64_t v13 = v12 - (v11 >> 16);
    swift_bridgeObjectRetain_n(v43, 2);
    if ((v8 & 0x1000000000000000) != 0) {
      goto LABEL_149;
    }
LABEL_44:
    if ((v8 & 0x2000000000000000) != 0)
    {
      uint64_t v46 = HIBYTE(v8) & 0xF;
      int64_t v45 = v46 + v13;
      if (__OFADD__(v46, v13)) {
        goto LABEL_151;
      }
    }
    else
    {
      int64_t v45 = (v9 & 0xFFFFFFFFFFFFLL) + v13;
      if (__OFADD__(v9 & 0xFFFFFFFFFFFFLL, v13)) {
        goto LABEL_151;
      }
    }
LABEL_49:
    if ((v9 & ~v8 & 0x2000000000000000) != 0 && swift_isUniquelyReferenced_nonNull_native(v8 & 0xFFFFFFFFFFFFFFFLL))
    {
      int64_t v47 = _StringGuts.nativeUnusedCapacity.getter(v9, v8);
      if (v48)
      {
LABEL_208:
        unint64_t v157 = 258;
        goto LABEL_209;
      }
      if (v45 >= 16 || (v8 & 0x2000000000000000) == 0 && v47 >= (uint64_t)v13)
      {
LABEL_55:
        _StringGuts.prepareForAppendInPlace(totalCount:otherUTF8Count:)(v45, v13);
        swift_bridgeObjectRelease(v7._rawBits);
        if ((v7._rawBits & 0x1000000000000000) != 0)
        {
          _StringGuts._foreignAppendInPlace(_:)(v166, v7._rawBits, v158, v12);
          goto LABEL_66;
        }
        if ((v7._rawBits & 0x2000000000000000) != 0)
        {
          swift_bridgeObjectRelease(v7._rawBits);
          unint64_t v72 = HIBYTE(v7._rawBits) & 0xF;
          uint64_t v167 = v166;
          uint64_t v168 = v7._rawBits & 0xFFFFFFFFFFFFFFLL;
          if (v72 >= v12)
          {
            uint64_t v73 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(v158, v12, (uint64_t)&v167, v72);
            _StringGuts.appendInPlace(_:isASCII:)(v73, v74, (v7._rawBits & 0x4000000000000000) != 0);
LABEL_69:
            unint64_t v75 = a4;
            unint64_t v76 = startingAt;
            unint64_t v77 = v169 & 0xFFFFFFFFFFFFLL;
            if ((v170 & 0x2000000000000000) != 0) {
              unint64_t v77 = HIBYTE(v170) & 0xF;
            }
            a4 = v77;
            specialized String.append<A>(contentsOf:)(a3, v75);
            unint64_t v13 = v169;
            uint64_t v9 = v170;
            unint64_t v78 = HIBYTE(v170) & 0xF;
            if ((v170 & 0x2000000000000000) == 0) {
              unint64_t v78 = v169 & 0xFFFFFFFFFFFFLL;
            }
            Swift::Int startingAt = v78;
            swift_bridgeObjectRetain_n(v170, 3);
            v79._Swift::UInt64 rawBits = v6._rawBits;
            unint64_t v11 = specialized Collection.subscript.getter(v79, v76, v161);
            unint64_t v8 = v81;
            uint64_t v166 = v82;
            uint64_t v15 = v80;
            v6._Swift::UInt64 rawBits = v11 >> 16;
            Swift::UInt64 v12 = v81 >> 16;
            if ((v80 & 0x1000000000000000) == 0)
            {
              v7._Swift::UInt64 rawBits = v12 - v6._rawBits;
              swift_bridgeObjectRetain_n(v80, 2);
              uint64_t v83 = v9;
              goto LABEL_75;
            }
            goto LABEL_152;
          }
        }
        else if ((v166 & 0x1000000000000000) != 0)
        {
          id v49 = (id)((v7._rawBits & 0xFFFFFFFFFFFFFFFLL) + 32);
          uint64_t v50 = v166 & 0xFFFFFFFFFFFFLL;
          if ((v166 & 0xFFFFFFFFFFFFLL) >= (uint64_t)v12)
          {
LABEL_59:
            Swift::String::Index v51 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(v158, v12, (uint64_t)v49, v50);
            _StringGuts.appendInPlace(_:isASCII:)(v51, v52, v166 < 0);
LABEL_66:
            swift_bridgeObjectRelease(v7._rawBits);
            goto LABEL_69;
          }
        }
        else
        {
          id v49 = _StringObject.sharedUTF8.getter(v166, v7._rawBits);
          uint64_t v50 = v152;
          if (v152 >= (uint64_t)v12) {
            goto LABEL_59;
          }
        }
LABEL_185:
        _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x745uLL, 0);
      }
    }
    else if (v45 > 15)
    {
      goto LABEL_55;
    }
    swift_bridgeObjectRelease(v7._rawBits);
    unint64_t v53 = v169;
    swift_bridgeObjectRetain(v8);
    unint64_t v54 = _StringGuts._convertedToSmall()(v53, v8);
    unint64_t v56 = v55;
    swift_bridgeObjectRelease(v8);
    v57._Swift::UInt64 rawBits = v11 & 0xFFFFFFFFFFFF0000 | 1;
    v58._Swift::UInt64 rawBits = v15 & 0xFFFFFFFFFFFF0000 | 1;
    v59._Swift::UInt64 rawBits = _StringGuts.validateScalarRange(_:)(v57, v58, v166, v7._rawBits);
    if (v59._rawBits < 0x10000) {
      v59._rawBits |= 3;
    }
    unint64_t v61 = specialized String.init(_:)(v59, v60, v166, v7._rawBits);
    unint64_t v63 = v62;
    swift_bridgeObjectRelease(v7._rawBits);
    unint64_t v64 = _StringGuts._convertedToSmall()(v61, v63);
    unint64_t v66 = v65;
    swift_bridgeObjectRelease(v63);
    unint64_t v67 = specialized _SmallString.init(_:appending:)(v54, v56, v64, v66);
    if ((v69 & 1) == 0)
    {
      uint64_t v70 = v67;
      unint64_t v71 = v68;
      swift_bridgeObjectRelease(v8);
      unint64_t v169 = v70;
      unint64_t v170 = v71;
      goto LABEL_69;
    }
LABEL_207:
    unint64_t v157 = 266;
LABEL_209:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/StringGutsRangeReplaceable.swift", 38, 2, v157, 0);
  }
  while (1)
  {
    unint64_t v130 = v42;
    swift_bridgeObjectRetain_n(v7._rawBits, 3);
    v131._Swift::UInt64 rawBits = v11 & 0xFFFFFFFFFFFF0000 | 1;
    v132._Swift::UInt64 rawBits = v15 & 0xFFFFFFFFFFFF0000 | 1;
    v133._Swift::UInt64 rawBits = _StringGuts.validateScalarRange(_:)(v131, v132, v130, v7._rawBits);
    if (v133._rawBits < 0x10000) {
      v133._rawBits |= 3;
    }
    unint64_t v13 = specialized Collection.count.getter(v133, v134, v130, v7._rawBits);
    swift_bridgeObjectRelease(v7._rawBits);
    uint64_t v9 = v169;
    unint64_t v8 = v170;
    if ((v170 & 0x1000000000000000) == 0) {
      goto LABEL_44;
    }
LABEL_149:
    Swift::Int v135 = String.UTF8View._foreignCount()();
    int64_t v45 = v135 + v13;
    if (!__OFADD__(v135, v13)) {
      goto LABEL_49;
    }
LABEL_151:
    __break(1u);
LABEL_152:
    swift_bridgeObjectRetain_n(v15, 3);
    v136._Swift::UInt64 rawBits = v11 & 0xFFFFFFFFFFFF0000 | 1;
    v137._Swift::UInt64 rawBits = v8 & 0xFFFFFFFFFFFF0000 | 1;
    v138._Swift::UInt64 rawBits = _StringGuts.validateScalarRange(_:)(v136, v137, v166, v15);
    if (v138._rawBits < 0x10000) {
      v138._rawBits |= 3;
    }
    v7._Swift::UInt64 rawBits = specialized Collection.count.getter(v138, v139, v166, v15);
    swift_bridgeObjectRelease(v9);
    uint64_t v83 = v15;
LABEL_75:
    swift_bridgeObjectRelease(v9);
    swift_bridgeObjectRelease(v83);
    Swift::Int v84 = startingAt;
    if ((v9 & 0x1000000000000000) != 0) {
      Swift::Int v84 = String.UTF8View._foreignCount()();
    }
    swift_bridgeObjectRelease(v9);
    BOOL v85 = __OFADD__(v84, v7._rawBits);
    int64_t v86 = v84 + v7._rawBits;
    if (v85)
    {
      __break(1u);
LABEL_156:
      v6._Swift::UInt64 rawBits = v6._rawBits & 0xC | _StringGuts.scalarAlignSlow(_:)(v6)._rawBits & 0xFFFFFFFFFFFFFFF3 | 1;
      if (v7._rawBits) {
        goto LABEL_18;
      }
LABEL_157:
      v7._Swift::UInt64 rawBits = v7._rawBits & 0xC | _StringGuts.scalarAlignSlow(_:)(v7)._rawBits & 0xFFFFFFFFFFFFFFF3 | 1;
      if (!v15) {
        goto LABEL_158;
      }
      goto LABEL_19;
    }
    if ((v13 & ~v9 & 0x2000000000000000) != 0 && swift_isUniquelyReferenced_nonNull_native(v9 & 0xFFFFFFFFFFFFFFFLL))
    {
      uint64_t v87 = v170;
      int64_t v88 = _StringGuts.nativeUnusedCapacity.getter(v169, v170);
      unint64_t v20 = v160;
      if (v89) {
        goto LABEL_208;
      }
      if (v86 >= 16 || (v87 & 0x2000000000000000) == 0 && v88 >= (uint64_t)v7._rawBits)
      {
LABEL_86:
        _StringGuts.prepareForAppendInPlace(totalCount:otherUTF8Count:)(v86, v7._rawBits);
        swift_bridgeObjectRelease(v15);
        unint64_t v11 = a4;
        if ((v15 & 0x1000000000000000) != 0)
        {
          _StringGuts._foreignAppendInPlace(_:)(v166, v15, v6._rawBits, v12);
          swift_bridgeObjectRelease(v15);
          uint64_t v21 = v159;
        }
        else if ((v15 & 0x2000000000000000) != 0)
        {
          swift_bridgeObjectRelease(v15);
          unint64_t v112 = HIBYTE(v15) & 0xF;
          uint64_t v167 = v166;
          uint64_t v168 = v15 & 0xFFFFFFFFFFFFFFLL;
          uint64_t v21 = v159;
          if (v112 < v12) {
            goto LABEL_185;
          }
          uint64_t v113 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(v6._rawBits, v12, (uint64_t)&v167, v112);
          _StringGuts.appendInPlace(_:isASCII:)(v113, v114, (v15 & 0x4000000000000000) != 0);
        }
        else
        {
          if ((v166 & 0x1000000000000000) != 0)
          {
            id v90 = (id)((v15 & 0xFFFFFFFFFFFFFFFLL) + 32);
            uint64_t v91 = v166 & 0xFFFFFFFFFFFFLL;
          }
          else
          {
            id v90 = _StringObject.sharedUTF8.getter(v166, v15);
            uint64_t v91 = v153;
          }
          uint64_t v21 = v159;
          if (v91 < (uint64_t)v12) {
            goto LABEL_185;
          }
          Swift::String::Index v92 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(v6._rawBits, v12, (uint64_t)v90, v91);
          _StringGuts.appendInPlace(_:isASCII:)(v92, v93, v166 < 0);
          swift_bridgeObjectRelease(v15);
        }
        goto LABEL_100;
      }
    }
    else
    {
      unint64_t v20 = v160;
      if (v86 > 15) {
        goto LABEL_86;
      }
      uint64_t v87 = v170;
    }
    swift_bridgeObjectRelease(v15);
    unint64_t v94 = v169;
    swift_bridgeObjectRetain(v87);
    unint64_t v95 = _StringGuts._convertedToSmall()(v94, v87);
    unint64_t v97 = v96;
    swift_bridgeObjectRelease(v87);
    v98._Swift::UInt64 rawBits = v11 & 0xFFFFFFFFFFFF0000 | 1;
    v99._Swift::UInt64 rawBits = v8 & 0xFFFFFFFFFFFF0000 | 1;
    v100._Swift::UInt64 rawBits = _StringGuts.validateScalarRange(_:)(v98, v99, v166, v15);
    if (v100._rawBits < 0x10000) {
      v100._rawBits |= 3;
    }
    unint64_t v102 = specialized String.init(_:)(v100, v101, v166, v15);
    v6._Swift::UInt64 rawBits = v103;
    swift_bridgeObjectRelease(v15);
    unint64_t v104 = _StringGuts._convertedToSmall()(v102, v6._rawBits);
    unint64_t v106 = v105;
    swift_bridgeObjectRelease(v6._rawBits);
    unint64_t v107 = specialized _SmallString.init(_:appending:)(v95, v97, v104, v106);
    if (v109) {
      goto LABEL_207;
    }
    uint64_t v110 = v107;
    unint64_t v111 = v108;
    swift_bridgeObjectRelease(v87);
    unint64_t v169 = v110;
    unint64_t v170 = v111;
    uint64_t v21 = v159;
    unint64_t v11 = a4;
LABEL_100:
    Swift::UInt64 v12 = v169;
    uint64_t v15 = v170;
    swift_bridgeObjectRelease(v19[3]._rawBits);
    v19[2]._Swift::UInt64 rawBits = v12;
    v19[3]._Swift::UInt64 rawBits = v15;
LABEL_115:
    if (!__OFSUB__(startingAt, v11)) {
      break;
    }
    __break(1u);
  }
  v7._Swift::UInt64 rawBits = v19->_rawBits;
  unint64_t v8 = v19->_rawBits >> 16;
  v6._Swift::UInt64 rawBits = startingAt - v11 + v20 - v21;
  uint64_t v21 = v6._rawBits + (v19[1]._rawBits >> 16);
  uint64_t v123 = (v19->_rawBits >> 8) & 0x3F;
  if (v123)
  {
    if (v123 + v8 < v20) {
      goto LABEL_140;
    }
  }
  else if (v8 < v20)
  {
    goto LABEL_140;
  }
  if (v8 == v21)
  {
    Swift::Int v124 = 0;
    unint64_t v125 = v7._rawBits & 0xFFFFFFFFFFFF0000;
    goto LABEL_134;
  }
  if ((v15 & 0x1000000000000000) != 0) {
    goto LABEL_179;
  }
  if ((v15 & 0x2000000000000000) != 0)
  {
    unint64_t v169 = v12;
    unint64_t v170 = v15 & 0xFFFFFFFFFFFFFFLL;
    if (v8 + 1 != (HIBYTE(v15) & 0xF))
    {
      int v128 = *(unsigned __int16 *)((char *)&v169 + v8);
      goto LABEL_131;
    }
LABEL_133:
    unint64_t v125 = v7._rawBits & 0xFFFFFFFFFFFF0000;
    Swift::Int v124 = 1;
LABEL_134:
    v125 |= v124 << 8;
    goto LABEL_135;
  }
  if ((v12 & 0x1000000000000000) != 0)
  {
    unint64_t v126 = (char *)((v15 & 0xFFFFFFFFFFFFFFFLL) + 32);
    uint64_t v127 = v12 & 0xFFFFFFFFFFFFLL;
    goto LABEL_126;
  }
LABEL_183:
  unint64_t v126 = (char *)_StringObject.sharedUTF8.getter(v12, v15);
LABEL_126:
  if (v8 + 1 == v127) {
    goto LABEL_133;
  }
  if (!v126) {
LABEL_214:
  }
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "unsafelyUnwrapped of nil optional", 33, 2, "Swift/Optional.swift", 20, 2, 0x163uLL, 0);
  int v128 = *(unsigned __int16 *)&v126[v8];
LABEL_131:
  if (v128 != 2573 && (v128 & 0x80808080) == 0) {
    goto LABEL_133;
  }
LABEL_179:
  Swift::Int v124 = _StringGuts._opaqueComplexCharacterStride(startingAt:)(v8);
  unint64_t v125 = v7._rawBits & 0xFFFFFFFFFFFF0000;
  if (v124 <= 63) {
    goto LABEL_134;
  }
LABEL_135:
  uint64_t v129 = v125 | 5;
  if ((v7._rawBits & 2) != 0
    && (v8 < v20 || _StringGuts.isOnGraphemeClusterBoundary(_:)((Swift::String::Index)(v125 | 5))))
  {
    uint64_t v129 = v125 | 7;
  }
  v19->_Swift::UInt64 rawBits = v129;
LABEL_140:
  if (v6._rawBits) {
LABEL_141:
  }
    v19[1]._Swift::UInt64 rawBits = (v21 << 16) | 5;
}

void specialized Substring._replaceSubrange<A>(_:with:)(Swift::String::Index a1, Swift::String::Index a2)
{
  unint64_t v3 = v2;
  v4._Swift::UInt64 rawBits = a1._rawBits;
  Swift::UInt64 v7 = v2[2];
  unint64_t v5 = (unint64_t)(v2 + 2);
  Swift::UInt64 v6 = v7;
  unint64_t v8 = v3[3];
  Swift::UInt64 v9 = *v3;
  unint64_t v10 = v3[1];
  uint64_t v11 = (v7 >> 59) & 1;
  if ((v8 & 0x1000000000000000) != 0) {
    LODWORD(v12) = v11;
  }
  else {
    LODWORD(v12) = 1;
  }
  uint64_t v13 = a1._rawBits & 0xC;
  uint64_t v14 = 4 << v12;
  uint64_t v15 = a2._rawBits & 0xC;
  if ((a1._rawBits & 1) != 0 && v13 != v14 && (a2._rawBits & 1) != 0 && v15 != v14)
  {
    if (a1._rawBits >> 14 < v9 >> 14 || v10 >> 14 < a2._rawBits >> 14) {
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index range is out of bounds", 35, 2, "Swift/StringIndexValidation.swift", 33, 2, 0xECuLL, 0);
    }
    goto LABEL_18;
  }
  if (v15 == v14)
  {
    a2._Swift::UInt64 rawBits = _StringGuts._slowEnsureMatchingEncoding(_:)(a2)._rawBits;
    if (v13 != v14) {
      goto LABEL_13;
    }
  }
  else if (v13 != v14)
  {
    goto LABEL_13;
  }
  Swift::UInt64 rawBits = a2._rawBits;
  v128._Swift::UInt64 rawBits = _StringGuts._slowEnsureMatchingEncoding(_:)(v4)._rawBits;
  a2._Swift::UInt64 rawBits = rawBits;
  v4._Swift::UInt64 rawBits = v128._rawBits;
LABEL_13:
  if (v4._rawBits >> 14 < v9 >> 14 || a2._rawBits >> 14 < v4._rawBits >> 14 || v10 >> 14 < a2._rawBits >> 14) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Substring index range is out of bounds", 38, 2, "Swift/StringIndexValidation.swift", 33, 2, 0x63uLL, 0);
  }
  if ((a2._rawBits & 1) == 0) {
    goto LABEL_154;
  }
  if ((v4._rawBits & 1) == 0) {
    goto LABEL_155;
  }
LABEL_18:
  if (!v12)
  {
LABEL_156:
    v140._Swift::UInt64 rawBits = a2._rawBits;
    Swift::UInt64 v141 = v9 & 0xC;
    Swift::UInt64 v142 = v9;
    if (v141 == 4) {
      Swift::UInt64 v142 = _StringGuts._slowEnsureMatchingEncoding(_:)((Swift::String::Index)v9)._rawBits;
    }
    if ((v8 & 0x2000000000000000) != 0) {
      unint64_t v143 = HIBYTE(v8) & 0xF;
    }
    else {
      unint64_t v143 = v6 & 0xFFFFFFFFFFFFLL;
    }
    if (v143 >= v142 >> 16)
    {
      startingAtBuiltin::Word a = String.UTF8View._foreignDistance(from:to:)((Swift::String::Index)15, (Swift::String::Index)v142);
      if (v141 == 4) {
        Swift::UInt64 v9 = _StringGuts._slowEnsureMatchingEncoding(_:)((Swift::String::Index)v9)._rawBits;
      }
      if ((v10 & 0xC) == 4)
      {
        unint64_t v10 = _StringGuts._slowEnsureMatchingEncoding(_:)((Swift::String::Index)v10)._rawBits;
        if (v143 < v9 >> 16) {
          goto LABEL_213;
        }
      }
      else if (v143 < v9 >> 16)
      {
        goto LABEL_213;
      }
      if (v143 < v10 >> 16) {
        goto LABEL_213;
      }
      Swift::Int v144 = String.UTF8View._foreignDistance(from:to:)((Swift::String::Index)v9, (Swift::String::Index)v10);
      Swift::UInt64 v145 = v4._rawBits;
      if ((v4._rawBits & 0xC) == 4) {
        Swift::UInt64 v145 = _StringGuts._slowEnsureMatchingEncoding(_:)(v4)._rawBits;
      }
      Swift::UInt64 v146 = v140._rawBits;
      if ((v140._rawBits & 0xC) == 4)
      {
        Swift::UInt64 v146 = _StringGuts._slowEnsureMatchingEncoding(_:)(v140)._rawBits;
        if (v143 < v145 >> 16) {
          goto LABEL_213;
        }
      }
      else if (v143 < v145 >> 16)
      {
        goto LABEL_213;
      }
      if (v143 >= v146 >> 16)
      {
        Swift::Int v147 = String.UTF8View._foreignDistance(from:to:)((Swift::String::Index)v145, (Swift::String::Index)v146);
        uint64_t v148 = specialized _StringGuts.replaceSubrange<A>(_:with:)(v4._rawBits, v140._rawBits);
        uint64_t v150 = v149 - v148;
        if (__OFSUB__(v149, v148))
        {
          __break(1u);
        }
        else
        {
          BOOL v76 = __OFADD__(v144, v150);
          Swift::Int v151 = v144 + v150;
          if (!v76)
          {
            Swift::UInt64 v141 = v151 - v147;
            if (!__OFSUB__(v151, v147))
            {
              if (v148 == v149)
              {
                Swift::Int v152 = 0;
                Swift::Int v153 = startingAta << 16;
                goto LABEL_198;
              }
              uint64_t v156 = v3[2];
              unint64_t v157 = v3[3];
              if ((v157 & 0x1000000000000000) == 0)
              {
                if ((v157 & 0x2000000000000000) != 0)
                {
                  Swift::UInt64 v171 = v3[2];
                  unint64_t v172 = v157 & 0xFFFFFFFFFFFFFFLL;
                  if (startingAta + 1 == (HIBYTE(v157) & 0xF))
                  {
LABEL_197:
                    Swift::Int v153 = startingAta << 16;
                    Swift::Int v152 = 1;
                    goto LABEL_198;
                  }
                  int v160 = *(unsigned __int16 *)((char *)&v171 + startingAta);
                }
                else
                {
                  if ((v156 & 0x1000000000000000) != 0)
                  {
                    uint64_t v158 = (char *)((v157 & 0xFFFFFFFFFFFFFFFLL) + 32);
                    uint64_t v159 = v156 & 0xFFFFFFFFFFFFLL;
                  }
                  else
                  {
                    uint64_t v158 = (char *)_StringObject.sharedUTF8.getter(v3[2], v3[3]);
                  }
                  if (startingAta + 1 == v159) {
                    goto LABEL_197;
                  }
                  if (!v158) {
                    goto LABEL_214;
                  }
                  int v160 = *(unsigned __int16 *)&v158[startingAta];
                }
                if (v160 != 2573 && (v160 & 0x80808080) == 0) {
                  goto LABEL_197;
                }
              }
LABEL_218:
              Swift::Int v152 = _StringGuts._opaqueComplexCharacterStride(startingAt:)(startingAta);
              Swift::Int v153 = startingAta << 16;
              if (v152 > 63)
              {
LABEL_199:
                *unint64_t v3 = v153 | 5;
                if (_StringGuts.isOnGraphemeClusterBoundary(_:)((Swift::String::Index)(v153 | 5))) {
                  *unint64_t v3 = v153 | 7;
                }
                BOOL v76 = __OFADD__(startingAta, v141);
                Swift::UInt64 v119 = startingAta + v141;
                if (v76)
                {
                  __break(1u);
LABEL_204:
                  __break(1u);
LABEL_205:
                  __break(1u);
LABEL_206:
                  __break(1u);
                  goto LABEL_207;
                }
                goto LABEL_140;
              }
LABEL_198:
              v153 |= v152 << 8;
              goto LABEL_199;
            }
LABEL_217:
            __break(1u);
            goto LABEL_218;
          }
        }
        __break(1u);
        goto LABEL_217;
      }
    }
LABEL_213:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index is out of bounds", 29, 2, "Swift/StringUTF8View.swift", 26, 2, 0xCFuLL, 0);
  }
  while (1)
  {
    Swift::UInt64 v16 = v4._rawBits >> 16;
    Swift::Int startingAt = a2._rawBits;
    Swift::UInt64 v17 = a2._rawBits >> 16;
    if ((v6 & ~v8 & 0x2000000000000000) != 0)
    {
      BOOL isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v8 & 0xFFFFFFFFFFFFFFFLL);
      Swift::UInt64 v6 = v3[2];
      unint64_t v8 = v3[3];
      if (isUniquelyReferenced_nonNull_native)
      {
        uint64_t v19 = v6 & 0xFFFFFFFFFFFFLL;
        if ((v8 & 0x2000000000000000) != 0) {
          uint64_t v19 = HIBYTE(v8) & 0xF;
        }
        int64_t v20 = v19 - v17 + v16;
        if (v20 >= 16)
        {
          uint64_t v21 = _StringGuts.uniqueNativeCapacity.getter();
          if ((v22 & 1) != 0 || v21 < v20)
          {
            uint64_t v23 = _StringGuts.uniqueNativeCapacity.getter();
            if (v24)
            {
              uint64_t v109 = v3[3];
              if ((v109 & 0x1000000000000000) != 0)
              {
                uint64_t v25 = String.UTF8View._foreignCount()();
              }
              else if ((v109 & 0x2000000000000000) != 0)
              {
                uint64_t v25 = HIBYTE(v109) & 0xF;
              }
              else
              {
                uint64_t v25 = v3[2] & 0xFFFFFFFFFFFFLL;
              }
            }
            else
            {
              uint64_t v25 = 2 * v23;
            }
            if (v25 > v20) {
              int64_t v20 = v25;
            }
            unint64_t v110 = v3[3];
            if ((v110 & 0x1000000000000000) != 0)
            {
              _StringGuts._foreignGrow(_:)(v20);
            }
            else
            {
              unint64_t v111 = *(void *)v5;
              if ((v110 & 0x2000000000000000) != 0)
              {
                uint64_t v114 = (v110 >> 62) & 1;
                Swift::UInt64 v171 = v111;
                unint64_t v172 = v110 & 0xFFFFFFFFFFFFFFLL;
                unint64_t v112 = (char *)&v171;
                size_t v113 = HIBYTE(v110) & 0xF;
              }
              else
              {
                if ((v111 & 0x1000000000000000) != 0)
                {
                  unint64_t v112 = (char *)((v110 & 0xFFFFFFFFFFFFFFFLL) + 32);
                  size_t v113 = v111 & 0xFFFFFFFFFFFFLL;
                }
                else
                {
                  unint64_t v112 = (char *)_StringObject.sharedUTF8.getter(v111, v110);
                }
                uint64_t v114 = v111 >> 63;
              }
              int64_t v115 = specialized static __StringStorage.create(initializingFrom:codeUnitCapacity:isASCII:)(v112, v113, v20, v114);
              uint64_t v116 = *(void *)(v115 + 24);
              swift_bridgeObjectRelease(v3[3]);
              v3[2] = v116;
              v3[3] = v115;
            }
          }
        }
        unint64_t v107 = v3[3];
        specialized __StringStorage.replace<A>(from:to:with:replacementCount:)(v4._rawBits >> 16, v17, (uint64_t)closure #3 in _StringGuts.replaceSubrange<A>(_:with:), 0, 0);
        uint64_t v108 = *(void *)((v107 & 0xFFFFFFFFFFFFFFFLL) + 0x18);
        v3[2] = v108;
        goto LABEL_115;
      }
    }
    unint64_t v5 = 0xE000000000000000;
    Swift::UInt64 v171 = 0;
    unint64_t v172 = 0xE000000000000000;
    uint64_t v26 = _StringGuts.nativeCapacity.getter(v6, v8);
    Swift::UInt64 v6 = 0;
    if ((v27 & 1) == 0)
    {
      int64_t v28 = v26;
      if (v26 >= 16)
      {
        uint64_t v29 = _StringGuts.uniqueNativeCapacity.getter();
        if ((v30 & 1) != 0 || v29 < v28)
        {
          uint64_t v32 = 2 * _StringGuts.uniqueNativeCapacity.getter();
          if (v32 <= v28) {
            uint64_t v32 = v28;
          }
          if (v31) {
            int64_t v33 = v28;
          }
          else {
            int64_t v33 = v32;
          }
          uint64_t v169 = 0;
          uint64_t v170 = 0;
          unint64_t v5 = specialized static __StringStorage.create(initializingFrom:codeUnitCapacity:isASCII:)((char *)&v169, 0, v33, 1);
          Swift::UInt64 v6 = *(void *)(v5 + 24);
          swift_bridgeObjectRelease(0xE000000000000000);
          Swift::UInt64 v171 = v6;
          unint64_t v172 = v5;
        }
        else
        {
          Swift::UInt64 v6 = 0;
          unint64_t v5 = 0xE000000000000000;
        }
      }
    }
    Swift::UInt64 v163 = v17;
    Swift::UInt64 v164 = v4._rawBits >> 16;
    v34._Swift::UInt64 rawBits = v4._rawBits;
    unint64_t v165 = v3[2];
    unint64_t v166 = v3[3];
    unint64_t v8 = specialized Collection.subscript.getter(v34, v165, v166);
    uint64_t v12 = v37;
    unint64_t v38 = v35;
    unint64_t v39 = v36;
    uint64_t v40 = v37 >> 16;
    uint64_t v162 = v8 >> 16;
    if ((v36 & 0x1000000000000000) != 0)
    {
      swift_bridgeObjectRetain_n(v36, 3);
      v129._Swift::UInt64 rawBits = v8 & 0xFFFFFFFFFFFF0000 | 1;
      v130._Swift::UInt64 rawBits = v12 & 0xFFFFFFFFFFFF0000 | 1;
      v131._Swift::UInt64 rawBits = _StringGuts.validateScalarRange(_:)(v129, v130, v38, v39);
      if (v131._rawBits < 0x10000) {
        v131._rawBits |= 3;
      }
      uint64_t v41 = v38;
      unint64_t v10 = specialized Collection.count.getter(v131, v132, v38, v39);
      swift_bridgeObjectRelease(v39);
      Swift::UInt64 v6 = v171;
      unint64_t v5 = v172;
      if ((v172 & 0x1000000000000000) == 0)
      {
LABEL_42:
        if ((v5 & 0x2000000000000000) != 0)
        {
          uint64_t v42 = HIBYTE(v5) & 0xF;
          Swift::UInt64 v9 = v42 + v10;
          if (__OFADD__(v42, v10)) {
            goto LABEL_149;
          }
        }
        else
        {
          Swift::UInt64 v9 = (v6 & 0xFFFFFFFFFFFFLL) + v10;
          if (__OFADD__(v6 & 0xFFFFFFFFFFFFLL, v10)) {
            goto LABEL_149;
          }
        }
        goto LABEL_47;
      }
    }
    else
    {
      uint64_t v41 = v35;
      unint64_t v10 = v40 - (v8 >> 16);
      swift_bridgeObjectRetain_n(v36, 2);
      if ((v5 & 0x1000000000000000) == 0) {
        goto LABEL_42;
      }
    }
    Swift::Int v133 = String.UTF8View._foreignCount()();
    Swift::UInt64 v9 = v133 + v10;
    if (__OFADD__(v133, v10))
    {
LABEL_149:
      __break(1u);
      goto LABEL_150;
    }
LABEL_47:
    if ((v6 & ~v5 & 0x2000000000000000) != 0 && swift_isUniquelyReferenced_nonNull_native(v5 & 0xFFFFFFFFFFFFFFFLL))
    {
      int64_t v43 = _StringGuts.nativeUnusedCapacity.getter(v6, v5);
      if (v44) {
        goto LABEL_208;
      }
      if ((uint64_t)v9 < 16 && ((v5 & 0x2000000000000000) != 0 || v43 < (uint64_t)v10))
      {
LABEL_59:
        swift_bridgeObjectRelease(v39);
        unint64_t v49 = v171;
        swift_bridgeObjectRetain(v5);
        unint64_t v50 = _StringGuts._convertedToSmall()(v49, v5);
        unint64_t v52 = v51;
        swift_bridgeObjectRelease(v5);
        v53._Swift::UInt64 rawBits = v8 & 0xFFFFFFFFFFFF0000 | 1;
        v54._Swift::UInt64 rawBits = v12 & 0xFFFFFFFFFFFF0000 | 1;
        v55._Swift::UInt64 rawBits = _StringGuts.validateScalarRange(_:)(v53, v54, v41, v39);
        if (v55._rawBits < 0x10000) {
          v55._rawBits |= 3;
        }
        unint64_t v57 = specialized String.init(_:)(v55, v56, v41, v39);
        unint64_t v59 = v58;
        swift_bridgeObjectRelease(v39);
        unint64_t v60 = _StringGuts._convertedToSmall()(v57, v59);
        unint64_t v62 = v61;
        swift_bridgeObjectRelease(v59);
        unint64_t v63 = specialized _SmallString.init(_:appending:)(v50, v52, v60, v62);
        if (v65) {
          goto LABEL_207;
        }
        uint64_t v66 = v63;
        unint64_t v67 = v64;
        swift_bridgeObjectRelease(v5);
        Swift::UInt64 v171 = v66;
        unint64_t v172 = v67;
        goto LABEL_67;
      }
    }
    else if ((uint64_t)v9 <= 15)
    {
      goto LABEL_59;
    }
    _StringGuts.prepareForAppendInPlace(totalCount:otherUTF8Count:)(v9, v10);
    swift_bridgeObjectRelease(v39);
    if ((v39 & 0x1000000000000000) != 0)
    {
      _StringGuts._foreignAppendInPlace(_:)(v41, v39, v162, v40);
LABEL_64:
      swift_bridgeObjectRelease(v39);
      goto LABEL_67;
    }
    if ((v39 & 0x2000000000000000) == 0)
    {
      if ((v41 & 0x1000000000000000) != 0)
      {
        id v45 = (id)((v39 & 0xFFFFFFFFFFFFFFFLL) + 32);
        uint64_t v46 = v41 & 0xFFFFFFFFFFFFLL;
        if ((v41 & 0xFFFFFFFFFFFFLL) < v40) {
          goto LABEL_181;
        }
      }
      else
      {
        id v45 = _StringObject.sharedUTF8.getter(v41, v39);
        uint64_t v46 = v154;
        if (v154 < v40) {
          goto LABEL_181;
        }
      }
      int64_t v47 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(v162, v40, (uint64_t)v45, v46);
      _StringGuts.appendInPlace(_:isASCII:)(v47, v48, v41 < 0);
      goto LABEL_64;
    }
    swift_bridgeObjectRelease(v39);
    unint64_t v68 = HIBYTE(v39) & 0xF;
    uint64_t v169 = v41;
    uint64_t v170 = v39 & 0xFFFFFFFFFFFFFFLL;
    if (v68 < v40) {
      goto LABEL_181;
    }
    char v69 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(v162, v40, (uint64_t)&v169, v68);
    _StringGuts.appendInPlace(_:isASCII:)(v69, v70, (v39 & 0x4000000000000000) != 0);
LABEL_67:
    unint64_t v10 = v171;
    uint64_t v12 = v172;
    if ((v172 & 0x2000000000000000) != 0) {
      uint64_t v40 = HIBYTE(v172) & 0xF;
    }
    else {
      uint64_t v40 = v171 & 0xFFFFFFFFFFFFLL;
    }
    if (&full type metadata for EmptyCollection<Character> == &full type metadata for String) {
      goto LABEL_204;
    }
    if (&full type metadata for EmptyCollection<Character> == &full type metadata for Substring) {
      goto LABEL_205;
    }
    if (&full type metadata for EmptyCollection<Character> == &full type metadata for [Character]) {
      goto LABEL_206;
    }
    swift_bridgeObjectRetain_n(v172, 3);
    v71._Swift::UInt64 rawBits = startingAt;
    Swift::UInt64 v6 = specialized Collection.subscript.getter(v71, v165, v166);
    unint64_t v5 = v73;
    unint64_t v8 = v72;
    Swift::UInt64 v9 = v73 >> 16;
    unint64_t v166 = v6 >> 16;
    Swift::Int startingAt = v74;
    if ((v72 & 0x1000000000000000) == 0)
    {
      v4._Swift::UInt64 rawBits = v9 - (v6 >> 16);
      swift_bridgeObjectRetain_n(v72, 2);
      uint64_t v75 = v12;
      goto LABEL_75;
    }
LABEL_150:
    swift_bridgeObjectRetain_n(v8, 3);
    v134._Swift::UInt64 rawBits = v6 & 0xFFFFFFFFFFFF0000 | 1;
    v135._Swift::UInt64 rawBits = v5 & 0xFFFFFFFFFFFF0000 | 1;
    v136._Swift::UInt64 rawBits = _StringGuts.validateScalarRange(_:)(v134, v135, startingAt, v8);
    if (v136._rawBits < 0x10000) {
      v136._rawBits |= 3;
    }
    v4._Swift::UInt64 rawBits = specialized Collection.count.getter(v136, v137, startingAt, v8);
    swift_bridgeObjectRelease(v12);
    uint64_t v75 = v8;
LABEL_75:
    swift_bridgeObjectRelease(v12);
    swift_bridgeObjectRelease(v75);
    if ((v12 & 0x1000000000000000) != 0) {
      uint64_t v40 = String.UTF8View._foreignCount()();
    }
    swift_bridgeObjectRelease(v12);
    BOOL v76 = __OFADD__(v40, v4._rawBits);
    int64_t v77 = v40 + v4._rawBits;
    if (!v76) {
      break;
    }
    __break(1u);
LABEL_154:
    a2._Swift::UInt64 rawBits = a2._rawBits & 0xC | _StringGuts.scalarAlignSlow(_:)(a2)._rawBits & 0xFFFFFFFFFFFFFFF3 | 1;
    if (v4._rawBits) {
      goto LABEL_18;
    }
LABEL_155:
    Swift::UInt64 v138 = a2._rawBits;
    v139._Swift::UInt64 rawBits = _StringGuts.scalarAlignSlow(_:)(v4)._rawBits;
    a2._Swift::UInt64 rawBits = v138;
    v4._Swift::UInt64 rawBits = v4._rawBits & 0xC | v139._rawBits & 0xFFFFFFFFFFFFFFF3 | 1;
    if (!v12) {
      goto LABEL_156;
    }
  }
  if ((v10 & ~v12 & 0x2000000000000000) != 0 && swift_isUniquelyReferenced_nonNull_native(v12 & 0xFFFFFFFFFFFFFFFLL))
  {
    uint64_t v78 = v172;
    int64_t v79 = _StringGuts.nativeUnusedCapacity.getter(v171, v172);
    if (v80)
    {
LABEL_208:
      unint64_t v161 = 258;
      goto LABEL_209;
    }
    if (v77 < 16 && ((v78 & 0x2000000000000000) != 0 || v79 < (uint64_t)v4._rawBits))
    {
LABEL_93:
      swift_bridgeObjectRelease(v8);
      unint64_t v85 = v171;
      swift_bridgeObjectRetain(v78);
      unint64_t v86 = _StringGuts._convertedToSmall()(v85, v78);
      unint64_t v88 = v87;
      swift_bridgeObjectRelease(v78);
      v89._Swift::UInt64 rawBits = v6 & 0xFFFFFFFFFFFF0000 | 1;
      v90._Swift::UInt64 rawBits = v5 & 0xFFFFFFFFFFFF0000 | 1;
      v91._Swift::UInt64 rawBits = _StringGuts.validateScalarRange(_:)(v89, v90, startingAt, v8);
      if (v91._rawBits < 0x10000) {
        v91._rawBits |= 3;
      }
      unint64_t v93 = specialized String.init(_:)(v91, v92, startingAt, v8);
      unint64_t v95 = v94;
      swift_bridgeObjectRelease(v8);
      unint64_t v96 = _StringGuts._convertedToSmall()(v93, v95);
      unint64_t v98 = v97;
      swift_bridgeObjectRelease(v95);
      unint64_t v99 = specialized _SmallString.init(_:appending:)(v86, v88, v96, v98);
      Swift::UInt64 v17 = v163;
      Swift::UInt64 v16 = v164;
      if ((v101 & 1) == 0)
      {
        uint64_t v102 = v99;
        unint64_t v103 = v100;
        swift_bridgeObjectRelease(v78);
        Swift::UInt64 v171 = v102;
        unint64_t v172 = v103;
        goto LABEL_100;
      }
LABEL_207:
      unint64_t v161 = 266;
LABEL_209:
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/StringGutsRangeReplaceable.swift", 38, 2, v161, 0);
    }
  }
  else if (v77 <= 15)
  {
    uint64_t v78 = v172;
    goto LABEL_93;
  }
  _StringGuts.prepareForAppendInPlace(totalCount:otherUTF8Count:)(v77, v4._rawBits);
  swift_bridgeObjectRelease(v8);
  if ((v8 & 0x1000000000000000) != 0)
  {
    _StringGuts._foreignAppendInPlace(_:)(startingAt, v8, v166, v9);
    swift_bridgeObjectRelease(v8);
    Swift::UInt64 v17 = v163;
    Swift::UInt64 v16 = v164;
  }
  else
  {
    if ((v8 & 0x2000000000000000) == 0)
    {
      if ((startingAt & 0x1000000000000000) != 0)
      {
        id v81 = (id)((v8 & 0xFFFFFFFFFFFFFFFLL) + 32);
        uint64_t v82 = startingAt & 0xFFFFFFFFFFFFLL;
      }
      else
      {
        id v81 = _StringObject.sharedUTF8.getter(startingAt, v8);
        uint64_t v82 = v155;
      }
      Swift::UInt64 v17 = v163;
      Swift::UInt64 v16 = v164;
      if (v82 >= (uint64_t)v9)
      {
        uint64_t v83 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(v166, v9, (uint64_t)v81, v82);
        _StringGuts.appendInPlace(_:isASCII:)(v83, v84, startingAt < 0);
        swift_bridgeObjectRelease(v8);
        goto LABEL_100;
      }
LABEL_181:
      _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x745uLL, 0);
    }
    swift_bridgeObjectRelease(v8);
    unint64_t v104 = HIBYTE(v8) & 0xF;
    uint64_t v169 = startingAt;
    uint64_t v170 = v8 & 0xFFFFFFFFFFFFFFLL;
    Swift::UInt64 v17 = v163;
    Swift::UInt64 v16 = v164;
    if (v104 < v9) {
      goto LABEL_181;
    }
    unint64_t v105 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(v166, v9, (uint64_t)&v169, v104);
    _StringGuts.appendInPlace(_:isASCII:)(v105, v106, (v8 & 0x4000000000000000) != 0);
  }
LABEL_100:
  uint64_t v108 = v171;
  unint64_t v107 = v172;
  swift_bridgeObjectRelease(v3[3]);
  v3[2] = v108;
  v3[3] = v107;
LABEL_115:
  Swift::UInt64 v117 = *v3;
  unint64_t v118 = (unint64_t)*v3 >> 16;
  Swift::UInt64 v119 = v16 - v17 + ((unint64_t)v3[1] >> 16);
  uint64_t v120 = ((unint64_t)*v3 >> 8) & 0x3F;
  if (!v120)
  {
    if (v118 >= v16) {
      goto LABEL_120;
    }
LABEL_117:
    if (v16 == v17) {
      return;
    }
LABEL_140:
    v3[1] = (v119 << 16) | 5;
    return;
  }
  if (v120 + v118 < v16) {
    goto LABEL_117;
  }
LABEL_120:
  if (v118 == v119)
  {
    Swift::Int v121 = 0;
    unint64_t v122 = v117 & 0xFFFFFFFFFFFF0000;
    goto LABEL_134;
  }
  if ((v107 & 0x1000000000000000) != 0) {
    goto LABEL_177;
  }
  if ((v107 & 0x2000000000000000) != 0)
  {
    Swift::UInt64 v171 = v108;
    unint64_t v172 = v107 & 0xFFFFFFFFFFFFFFLL;
    if (v118 + 1 != (HIBYTE(v107) & 0xF))
    {
      int v125 = *(unsigned __int16 *)((char *)&v171 + v118);
      goto LABEL_131;
    }
LABEL_133:
    unint64_t v122 = v117 & 0xFFFFFFFFFFFF0000;
    Swift::Int v121 = 1;
LABEL_134:
    v122 |= v121 << 8;
    goto LABEL_135;
  }
  if ((v108 & 0x1000000000000000) != 0)
  {
    uint64_t v123 = (char *)((v107 & 0xFFFFFFFFFFFFFFFLL) + 32);
    uint64_t v124 = v108 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    uint64_t v123 = (char *)_StringObject.sharedUTF8.getter(v108, v107);
  }
  if (v118 + 1 == v124) {
    goto LABEL_133;
  }
  if (!v123) {
LABEL_214:
  }
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "unsafelyUnwrapped of nil optional", 33, 2, "Swift/Optional.swift", 20, 2, 0x163uLL, 0);
  int v125 = *(unsigned __int16 *)&v123[v118];
LABEL_131:
  if (v125 != 2573 && (v125 & 0x80808080) == 0) {
    goto LABEL_133;
  }
LABEL_177:
  Swift::Int v121 = _StringGuts._opaqueComplexCharacterStride(startingAt:)(v118);
  unint64_t v122 = v117 & 0xFFFFFFFFFFFF0000;
  if (v121 <= 63) {
    goto LABEL_134;
  }
LABEL_135:
  uint64_t v126 = v122 | 5;
  if ((v117 & 2) != 0 && (v118 < v16 || _StringGuts.isOnGraphemeClusterBoundary(_:)((Swift::String::Index)(v122 | 5)))) {
    uint64_t v126 = v122 | 7;
  }
  *unint64_t v3 = v126;
  if (v16 != v17) {
    goto LABEL_140;
  }
}

void Substring._replaceSubrange<A>(_:with:)(uint64_t a1, Swift::UInt64 a2, uint64_t a3, ValueMetadata *a4, unint64_t a5)
{
  unint64_t v257 = (unint64_t *)a5;
  uint64_t v10 = *(void *)(a5 + 8);
  uint64_t v11 = type metadata accessor for LazySequence(0, (uint64_t)a4, v10, (uint64_t)a4);
  MEMORY[0x1F4188790](v11 - 1);
  uint64_t v255 = (char *)&v251 - v12;
  Swift::Int v261 = v10;
  uint64_t v13 = (unint64_t *)type metadata accessor for LazyMapSequence(255, (uint64_t)a4, (uint64_t)&type metadata for String.UTF8View, v10);
  uint64_t WitnessTable = swift_getWitnessTable(protocol conformance descriptor for LazyMapSequence<A, B>, v13, v14);
  unint64_t v18 = lazy protocol witness table accessor for type String.UTF8View and conformance String.UTF8View(WitnessTable, v16, v17);
  uint64_t v256 = v13;
  uint64_t v19 = (unint64_t *)type metadata accessor for FlattenSequence(255, (uint64_t)v13, WitnessTable, v18);
  uint64_t v21 = swift_getWitnessTable(protocol conformance descriptor for FlattenSequence<A>, v19, v20);
  type metadata accessor for LazySequence(0, (uint64_t)v19, v21, v22);
  uint64_t v23 = MEMORY[0x1F4188790](a1);
  uint64_t v262 = a4;
  uint64_t v24 = MEMORY[0x1F4188790](v23);
  unint64_t v26 = (unint64_t)&v251 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  Swift::UInt64 v27 = MEMORY[0x1F4188790](v24);
  uint64_t v33 = (uint64_t)&v251 - v32;
  Swift::String::Index v34 = (uint64_t *)(v5 + 2);
  Swift::Int v35 = v5[2];
  Swift::UInt64 v36 = v5[3];
  v37._Swift::UInt64 rawBits = *v5;
  Swift::UInt64 v38 = v5[1];
  Swift::String::Index v263 = (uint64_t *)v5;
  v39._Swift::UInt64 rawBits = a2;
  LOBYTE(v4_assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0, 0xE000000000000000, "Swift/StringRangeReplaceableCollection.swift", 44, 2, 0x168uLL, 0) = (v36 & 0x1000000000000000) == 0 || (v35 & 0x800000000000000) != 0;
  Swift::UInt64 v41 = v27 & 0xC;
  uint64_t v42 = 4 << v40;
  uint64_t v43 = v39._rawBits & 0xC;
  if ((v27 & 1) != 0 && v41 != v42 && (v39._rawBits & 1) != 0 && v43 != v42)
  {
    if (v27 >> 14 < v37._rawBits >> 14 || v38 >> 14 < v39._rawBits >> 14) {
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index range is out of bounds", 35, 2, "Swift/StringIndexValidation.swift", 33, 2, 0xECuLL, 0);
    }
    goto LABEL_18;
  }
  if (v43 == v42)
  {
    Swift::UInt64 v258 = v27;
    v164._Swift::UInt64 rawBits = v39._rawBits;
    uint64_t v254 = v34;
    Swift::UInt64 v260 = v28;
    unint64_t v252 = v29;
    uint64_t v253 = v31;
    uint64_t v251 = v30;
    Swift::UInt64 rawBits = v37._rawBits;
    Swift::UInt64 v259 = v38;
    v166._Swift::UInt64 rawBits = _StringGuts._slowEnsureMatchingEncoding(_:)(v164)._rawBits;
    Swift::UInt64 v38 = v259;
    Swift::UInt64 v28 = v260;
    v37._Swift::UInt64 rawBits = rawBits;
    uint64_t v31 = v253;
    Swift::String::Index v34 = v254;
    uint64_t v30 = v251;
    uint64_t v29 = v252;
    v39._Swift::UInt64 rawBits = v166._rawBits;
    Swift::UInt64 v27 = v258;
    if (v41 != v42) {
      goto LABEL_13;
    }
  }
  else if (v41 != v42)
  {
    goto LABEL_13;
  }
  uint64_t v254 = v34;
  Swift::UInt64 v260 = v28;
  unint64_t v252 = v29;
  uint64_t v253 = v31;
  uint64_t v167 = v30;
  Swift::UInt64 v168 = v37._rawBits;
  Swift::UInt64 v259 = v38;
  Swift::UInt64 v27 = _StringGuts._slowEnsureMatchingEncoding(_:)((Swift::String::Index)v27)._rawBits;
  Swift::UInt64 v38 = v259;
  Swift::UInt64 v28 = v260;
  v37._Swift::UInt64 rawBits = v168;
  uint64_t v31 = v253;
  Swift::String::Index v34 = v254;
  uint64_t v30 = v167;
  uint64_t v29 = v252;
LABEL_13:
  if (v27 >> 14 < v37._rawBits >> 14 || v39._rawBits >> 14 < v27 >> 14 || v38 >> 14 < v39._rawBits >> 14) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Substring index range is out of bounds", 38, 2, "Swift/StringIndexValidation.swift", 33, 2, 0x63uLL, 0);
  }
  if ((v39._rawBits & 1) == 0) {
    goto LABEL_152;
  }
  if ((v27 & 1) == 0) {
    goto LABEL_153;
  }
LABEL_18:
  if ((v40 & 1) == 0)
  {
LABEL_154:
    unint64_t v186 = (unint64_t)v34;
    unint64_t v187 = (unint64_t *)a3;
    uint64_t v188 = v37._rawBits & 0xC;
    Swift::UInt64 v189 = v37._rawBits;
    if (v188 == 4)
    {
      Swift::UInt64 v244 = v27;
      Swift::UInt64 v245 = v37._rawBits;
      Swift::UInt64 v246 = v38;
      v247._Swift::UInt64 rawBits = _StringGuts._slowEnsureMatchingEncoding(_:)(v37)._rawBits;
      Swift::UInt64 v38 = v246;
      v37._Swift::UInt64 rawBits = v245;
      Swift::UInt64 v189 = v247._rawBits;
      Swift::UInt64 v27 = v244;
    }
    if ((v36 & 0x2000000000000000) != 0) {
      unint64_t v190 = HIBYTE(v36) & 0xF;
    }
    else {
      unint64_t v190 = v35 & 0xFFFFFFFFFFFFLL;
    }
    if (v190 >= v189 >> 16)
    {
      Swift::UInt64 v191 = v38;
      Swift::UInt64 v192 = v37._rawBits;
      unint64_t v193 = v27;
      Swift::Int v261 = String.UTF8View._foreignDistance(from:to:)((Swift::String::Index)15, (Swift::String::Index)v189);
      if (v188 == 4) {
        v194._Swift::UInt64 rawBits = _StringGuts._slowEnsureMatchingEncoding(_:)((Swift::String::Index)v192)._rawBits;
      }
      else {
        v194._Swift::UInt64 rawBits = v192;
      }
      if ((v191 & 0xC) == 4)
      {
        Swift::UInt64 v248 = v194._rawBits;
        v249._Swift::UInt64 rawBits = _StringGuts._slowEnsureMatchingEncoding(_:)((Swift::String::Index)v191)._rawBits;
        v194._Swift::UInt64 rawBits = v248;
        Swift::UInt64 v191 = v249._rawBits;
        if (v190 < v248 >> 16) {
          goto LABEL_241;
        }
      }
      else if (v190 < v194._rawBits >> 16)
      {
        goto LABEL_241;
      }
      if (v190 < v191 >> 16) {
        goto LABEL_241;
      }
      Swift::UInt64 v195 = v39._rawBits;
      Swift::Int v196 = String.UTF8View._foreignDistance(from:to:)(v194, (Swift::String::Index)v191);
      Swift::UInt64 v197 = v193;
      if ((v193 & 0xC) == 4) {
        Swift::UInt64 v197 = _StringGuts._slowEnsureMatchingEncoding(_:)((Swift::String::Index)v193)._rawBits;
      }
      Swift::UInt64 v198 = v195;
      if ((v195 & 0xC) == 4)
      {
        Swift::UInt64 v198 = _StringGuts._slowEnsureMatchingEncoding(_:)((Swift::String::Index)v195)._rawBits;
        if (v190 < v197 >> 16) {
          goto LABEL_241;
        }
      }
      else if (v190 < v197 >> 16)
      {
        goto LABEL_241;
      }
      if (v190 >= v198 >> 16)
      {
        Swift::Int v199 = String.UTF8View._foreignDistance(from:to:)((Swift::String::Index)v197, (Swift::String::Index)v198);
        unint64_t v200 = v186;
        unint64_t v201 = _StringGuts.replaceSubrange<A>(_:with:)(v193, v195, v187, v262, (unint64_t)v257);
        int64_t v203 = (char *)v202 - (char *)v201;
        if (__OFSUB__(v202, v201))
        {
          __break(1u);
        }
        else
        {
          BOOL v114 = __OFADD__(v196, v203);
          Swift::Int v204 = v196 + v203;
          if (!v114)
          {
            BOOL v114 = __OFSUB__(v204, v199);
            Swift::Int v199 = v204 - v199;
            if (!v114)
            {
              if (v201 == v202)
              {
                Swift::Int v205 = 0;
                uint64_t v206 = v261 << 16;
              }
              else
              {
                uint64_t v206 = v263[2];
                unint64_t v200 = v263[3];
                if ((v200 & 0x1000000000000000) != 0) {
                  goto LABEL_246;
                }
                if ((v200 & 0x2000000000000000) == 0)
                {
                  if ((v206 & 0x1000000000000000) == 0) {
                    goto LABEL_249;
                  }
                  Swift::String v239 = (char *)((v200 & 0xFFFFFFFFFFFFFFFLL) + 32);
                  uint64_t v240 = v206 & 0xFFFFFFFFFFFFLL;
                  goto LABEL_217;
                }
                unint64_t v267 = v263[2];
                unint64_t v268 = v200 & 0xFFFFFFFFFFFFFFLL;
                if (v261 + 1 != (HIBYTE(v200) & 0xF))
                {
                  int v241 = *(unsigned __int16 *)((char *)&v267 + v261);
                  goto LABEL_224;
                }
LABEL_226:
                uint64_t v206 = v261 << 16;
                Swift::Int v205 = 1;
              }
LABEL_227:
              v206 |= v205 << 8;
              while (1)
              {
                *Swift::String::Index v263 = v206 | 5;
                if (_StringGuts.isOnGraphemeClusterBoundary(_:)((Swift::String::Index)(v206 | 5))) {
                  *Swift::String::Index v263 = v206 | 7;
                }
                Swift::Int v147 = v261 + v199;
                if (!__OFADD__(v261, v199)) {
                  break;
                }
                __break(1u);
LABEL_249:
                Swift::String v239 = (char *)_StringObject.sharedUTF8.getter(v206, v200);
LABEL_217:
                if (v261 + 1 == v240) {
                  goto LABEL_226;
                }
                if (!v239) {
                  goto LABEL_242;
                }
                int v241 = *(unsigned __int16 *)&v239[v261];
LABEL_224:
                if (v241 != 2573 && (v241 & 0x80808080) == 0) {
                  goto LABEL_226;
                }
LABEL_246:
                Swift::Int v250 = v261;
                Swift::Int v205 = _StringGuts._opaqueComplexCharacterStride(startingAt:)(v261);
                uint64_t v206 = v250 << 16;
                if (v205 <= 63) {
                  goto LABEL_227;
                }
              }
              uint64_t v45 = (uint64_t)v263;
              goto LABEL_130;
            }
LABEL_245:
            __break(1u);
            goto LABEL_246;
          }
        }
        __break(1u);
        goto LABEL_245;
      }
    }
LABEL_241:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index is out of bounds", 29, 2, "Swift/StringUTF8View.swift", 26, 2, 0xCFuLL, 0);
  }
LABEL_19:
  unint64_t v44 = v27;
  uint64_t v45 = (uint64_t)v263;
  Swift::UInt64 v259 = v27 >> 16;
  Swift::UInt64 v260 = v39._rawBits >> 16;
  Swift::UInt64 v258 = v39._rawBits;
  if ((v35 & ~v36 & 0x2000000000000000) != 0)
  {
    Swift::UInt64 v46 = v28;
    uint64_t v253 = v31;
    uint64_t v251 = v30;
    unint64_t v252 = v29;
    uint64_t v254 = v34;
    if (swift_isUniquelyReferenced_nonNull_native(v36 & 0xFFFFFFFFFFFFFFFLL))
    {
      int64_t v47 = *(void (**)(uint64_t, uint64_t, ValueMetadata *))(v46 + 16);
      uint64_t v48 = a3;
      Swift::UInt64 v36 = a3;
      a3 = (uint64_t)v262;
      v47(v33, v48, v262);
      if (swift_dynamicCast((char *)&v267, (unint64_t *)v33, (Class *)a3, (const char *)&type metadata for String, 6uLL))
      {
        unint64_t v26 = v268;
        if ((v268 & 0x1000000000000000) == 0)
        {
          unint64_t v49 = v267;
          if ((v268 & 0x2000000000000000) != 0)
          {
            size_t v160 = HIBYTE(v268) & 0xF;
            v268 &= 0xFFFFFFFFFFFFFFuLL;
            uint64_t v33 = specialized _StringGuts.uniqueNativeReplaceSubrange(_:with:isASCII:)(v44, v258, (char *)&v267, v160);
            uint64_t v262 = v161;
            swift_bridgeObjectRelease(v26);
            unint64_t v44 = v259;
            uint64_t v50 = v260;
            goto LABEL_104;
          }
          Swift::UInt64 v36 = v258;
          uint64_t v50 = v260;
          if ((v267 & 0x1000000000000000) != 0)
          {
            unint64_t v51 = (char *)((v268 & 0xFFFFFFFFFFFFFFFLL) + 32);
            size_t v52 = v267 & 0xFFFFFFFFFFFFLL;
LABEL_26:
            unint64_t v53 = v44;
            unint64_t v54 = v36;
LABEL_138:
            uint64_t v33 = specialized _StringGuts.uniqueNativeReplaceSubrange(_:with:isASCII:)(v53, v54, v51, v52);
            uint64_t v262 = v163;
            swift_bridgeObjectRelease(v26);
            unint64_t v44 = v259;
            goto LABEL_104;
          }
LABEL_212:
          unint64_t v51 = (char *)_StringObject.sharedUTF8.getter(v49, v26);
          size_t v52 = v238;
          goto LABEL_26;
        }
        Swift::UInt64 v97 = v36;
        goto LABEL_179;
      }
      Swift::UInt64 v97 = v36;
      v47(v26, v36, (ValueMetadata *)a3);
      if ((swift_dynamicCast((char *)&v267, (unint64_t *)v26, (Class *)a3, (const char *)&type metadata for Substring, 6uLL) & 1) == 0)
      {
LABEL_180:
        Swift::UInt64 v207 = v255;
        v47((uint64_t)v255, v97, (ValueMetadata *)a3);
        unint64_t v208 = *(void (**)(uint64_t, char *, uint64_t))(v46 + 32);
        uint64_t v50 = v46 + 32;
        uint64_t v209 = v253;
        v208(v253, v207, a3);
        unint64_t v210 = v256;
        Swift::String::Index v211 = (void *)(v209 + *((int *)v256 + 11));
        *Swift::String::Index v211 = closure #3 in _StringGuts.replaceSubrange<A>(_:with:);
        v211[1] = 0;
        unint64_t v266 = (unint64_t)v257;
        unint64_t v26 = swift_getWitnessTable(protocol conformance descriptor for <> LazyMapSequence<A, B>, v210, (uint64_t)&v266);
        unint64_t v214 = lazy protocol witness table accessor for type String.UTF8View and conformance String.UTF8View(v26, v212, v213);
        v265[0] = v26;
        v265[1] = v214;
        uint64_t v215 = swift_getWitnessTable(protocol conformance descriptor for <> FlattenSequence<A>, v19, (uint64_t)v265);
        unint64_t v49 = Collection.count.getter((uint64_t)v19, v215);
        unint64_t v44 = v259;
        Swift::UInt64 v216 = v259 + v49;
        if (__OFADD__(v259, v49))
        {
          __break(1u);
        }
        else
        {
          unint64_t v217 = *(void *)(v45 + 24);
          if ((v217 & 0x2000000000000000) != 0) {
            uint64_t v218 = HIBYTE(v217) & 0xF;
          }
          else {
            uint64_t v218 = *(void *)(v45 + 16) & 0xFFFFFFFFFFFFLL;
          }
          uint64_t v50 = v260;
          Swift::UInt64 v219 = v218 - v260;
          uint64_t v262 = (ValueMetadata *)(v259 + v49);
          a3 = v216 + v219;
          if (!__OFADD__(v216, v219))
          {
            unint64_t v26 = v49;
            uint64_t v33 = v259;
            if (a3 >= 16)
            {
              uint64_t v220 = _StringGuts.uniqueNativeCapacity.getter();
              if ((v221 & 1) != 0 || v220 < a3)
              {
                uint64_t v222 = _StringGuts.uniqueNativeCapacity.getter();
                if (v223)
                {
                  unint64_t v225 = *(void *)(v45 + 24);
                  if ((v225 & 0x1000000000000000) != 0)
                  {
                    Swift::Int v224 = String.UTF8View._foreignCount()();
                  }
                  else if ((v225 & 0x2000000000000000) != 0)
                  {
                    Swift::Int v224 = HIBYTE(v225) & 0xF;
                  }
                  else
                  {
                    Swift::Int v224 = *(void *)(v45 + 16) & 0xFFFFFFFFFFFFLL;
                  }
                }
                else
                {
                  Swift::Int v224 = 2 * v222;
                }
                if (v224 <= a3) {
                  int64_t v226 = a3;
                }
                else {
                  int64_t v226 = v224;
                }
                unint64_t v227 = *(void *)(v45 + 24);
                if ((v227 & 0x1000000000000000) != 0)
                {
                  _StringGuts._foreignGrow(_:)(v226);
                }
                else
                {
                  unint64_t v228 = *v254;
                  if ((v227 & 0x2000000000000000) != 0)
                  {
                    uint64_t v231 = (v227 >> 62) & 1;
                    unint64_t v267 = *v254;
                    unint64_t v268 = v227 & 0xFFFFFFFFFFFFFFLL;
                    unint64_t v229 = (char *)&v267;
                    size_t v230 = HIBYTE(v227) & 0xF;
                  }
                  else
                  {
                    if ((v228 & 0x1000000000000000) != 0)
                    {
                      unint64_t v229 = (char *)((v227 & 0xFFFFFFFFFFFFFFFLL) + 32);
                      size_t v230 = v228 & 0xFFFFFFFFFFFFLL;
                    }
                    else
                    {
                      unint64_t v229 = (char *)_StringObject.sharedUTF8.getter(*v254, v227);
                    }
                    uint64_t v231 = v228 >> 63;
                  }
                  int64_t v232 = specialized static __StringStorage.create(initializingFrom:codeUnitCapacity:isASCII:)(v229, v230, v226, v231);
                  uint64_t v233 = *(void *)(v232 + 24);
                  swift_bridgeObjectRelease(*(void *)(v45 + 24));
                  *(void *)(v45 + 16) = v233;
                  *(void *)(v45 + 24) = v232;
                }
              }
            }
            uint64_t v234 = *(void *)(v45 + 24) & 0xFFFFFFFFFFFFFFFLL;
            uint64_t v264 = v215;
            unsigned long long v235 = v252;
            swift_getWitnessTable(protocol conformance descriptor for <> LazySequence<A>, v252, (uint64_t)&v264);
            a3 = v253;
            __StringStorage.replace<A>(from:to:with:replacementCount:)(v44, v50, v253, v26, (uint64_t)v235);
            (*(void (**)(uint64_t, unint64_t *))(v251 + 8))(a3, v235);
            *(void *)(v45 + 16) = *(void *)(v234 + 24);
            goto LABEL_104;
          }
        }
        __break(1u);
        goto LABEL_212;
      }
      unint64_t v26 = v270;
      if ((v270 & 0x1000000000000000) != 0)
      {
LABEL_179:
        swift_bridgeObjectRelease(v26);
        goto LABEL_180;
      }
      unint64_t v98 = v267 >> 16;
      int64_t v99 = v268 >> 16;
      if ((v270 & 0x2000000000000000) != 0)
      {
        unint64_t v101 = HIBYTE(v270) & 0xF;
        unint64_t v267 = v269;
        unint64_t v268 = v270 & 0xFFFFFFFFFFFFFFLL;
        uint64_t v50 = v260;
        if (v101 < v99) {
          goto LABEL_221;
        }
        unint64_t v100 = &v267;
      }
      else
      {
        uint64_t v50 = v260;
        if ((v269 & 0x1000000000000000) != 0)
        {
          unint64_t v100 = (unint64_t *)((v270 & 0xFFFFFFFFFFFFFFFLL) + 32);
          unint64_t v101 = v269 & 0xFFFFFFFFFFFFLL;
          if ((uint64_t)(v269 & 0xFFFFFFFFFFFFLL) < v99) {
            goto LABEL_221;
          }
        }
        else
        {
          unint64_t v100 = (unint64_t *)_StringObject.sharedUTF8.getter(v269, v270);
          unint64_t v101 = v242;
          if (v242 < v99) {
            goto LABEL_221;
          }
        }
      }
      unint64_t v51 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(v98, v99, (uint64_t)v100, v101);
      size_t v52 = v162;
      unint64_t v53 = v44;
      unint64_t v54 = v258;
      goto LABEL_138;
    }
    Swift::Int v35 = *(void *)(v45 + 16);
    Swift::UInt64 v36 = *(void *)(v45 + 24);
  }
  v39._Swift::UInt64 rawBits = 0xE000000000000000;
  unint64_t v267 = 0;
  unint64_t v268 = 0xE000000000000000;
  uint64_t v55 = _StringGuts.nativeCapacity.getter(v35, v36);
  uint64_t v40 = 0;
  if ((v56 & 1) == 0)
  {
    int64_t v57 = v55;
    if (v55 > 15)
    {
      uint64_t v58 = _StringGuts.uniqueNativeCapacity.getter();
      if ((v59 & 1) != 0 || v58 < v57)
      {
        uint64_t v61 = 2 * _StringGuts.uniqueNativeCapacity.getter();
        if (v61 <= v57) {
          uint64_t v61 = v57;
        }
        if (v60) {
          int64_t v62 = v57;
        }
        else {
          int64_t v62 = v61;
        }
        Swift::UInt64 v271 = 0;
        uint64_t v272 = 0;
        v39._Swift::UInt64 rawBits = specialized static __StringStorage.create(initializingFrom:codeUnitCapacity:isASCII:)((char *)&v271, 0, v62, 1);
        uint64_t v40 = *(void *)(v39._rawBits + 24);
        swift_bridgeObjectRelease(0xE000000000000000);
        unint64_t v267 = v40;
        unint64_t v268 = v39._rawBits;
      }
      else
      {
        uint64_t v40 = 0;
        v39._Swift::UInt64 rawBits = 0xE000000000000000;
      }
    }
  }
  unint64_t v63 = *(void *)(v45 + 24);
  v64._Swift::UInt64 rawBits = v44;
  uint64_t v256 = *(unint64_t **)(v45 + 16);
  unint64_t v257 = (unint64_t *)a3;
  uint64_t v255 = (char *)v63;
  a3 = specialized Collection.subscript.getter(v64, (unint64_t)v256, v63);
  unint64_t v26 = v66;
  Swift::UInt64 v36 = v67;
  uint64_t v33 = v65;
  unint64_t v44 = (unint64_t)a3 >> 16;
  uint64_t v45 = v66 >> 16;
  if ((v65 & 0x1000000000000000) == 0)
  {
    Swift::Int v35 = v45 - v44;
    swift_bridgeObjectRetain_n(v65, 2);
    if ((v39._rawBits & 0x1000000000000000) != 0) {
      goto LABEL_145;
    }
LABEL_42:
    if ((v39._rawBits & 0x2000000000000000) != 0)
    {
      uint64_t v69 = HIBYTE(v39._rawBits) & 0xF;
      int64_t v68 = v69 + v35;
      if (__OFADD__(v69, v35)) {
        goto LABEL_147;
      }
    }
    else
    {
      int64_t v68 = (v40 & 0xFFFFFFFFFFFFLL) + v35;
      if (__OFADD__(v40 & 0xFFFFFFFFFFFFLL, v35)) {
        goto LABEL_147;
      }
    }
LABEL_47:
    if ((v40 & ~v39._rawBits & 0x2000000000000000) != 0
      && swift_isUniquelyReferenced_nonNull_native(v39._rawBits & 0xFFFFFFFFFFFFFFFLL))
    {
      int64_t v70 = _StringGuts.nativeUnusedCapacity.getter(v40, v39._rawBits);
      if (v71)
      {
LABEL_236:
        unint64_t v243 = 258;
        goto LABEL_237;
      }
      if (v68 > 15 || (v39._rawBits & 0x2000000000000000) == 0 && v70 >= v35)
      {
LABEL_53:
        _StringGuts.prepareForAppendInPlace(totalCount:otherUTF8Count:)(v68, v35);
        swift_bridgeObjectRelease(v33);
        uint64_t v72 = v262;
        unint64_t v73 = v257;
        if ((v33 & 0x1000000000000000) != 0)
        {
          _StringGuts._foreignAppendInPlace(_:)(v36, v33, v44, v45);
        }
        else
        {
          if ((v33 & 0x2000000000000000) != 0)
          {
            swift_bridgeObjectRelease(v33);
            unint64_t v102 = HIBYTE(v33) & 0xF;
            Swift::UInt64 v271 = v36;
            uint64_t v272 = v33 & 0xFFFFFFFFFFFFFFLL;
            if (v102 < v45) {
              goto LABEL_221;
            }
            unint64_t v103 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(v44, v45, (uint64_t)&v271, v102);
            _StringGuts.appendInPlace(_:isASCII:)(v103, v104, (v33 & 0x4000000000000000) != 0);
LABEL_73:
            unint64_t v106 = (unint64_t)v255;
            unint64_t v105 = (unint64_t)v256;
            unint64_t v107 = v267 & 0xFFFFFFFFFFFFLL;
            if ((v268 & 0x2000000000000000) != 0) {
              unint64_t v107 = HIBYTE(v268) & 0xF;
            }
            unint64_t v257 = (unint64_t *)v107;
            String.append<A>(contentsOf:)(v73, v72, v261);
            unint64_t v44 = v267;
            uint64_t v40 = v268;
            if ((v268 & 0x2000000000000000) != 0) {
              uint64_t v45 = HIBYTE(v268) & 0xF;
            }
            else {
              uint64_t v45 = v267 & 0xFFFFFFFFFFFFLL;
            }
            swift_bridgeObjectRetain_n(v268, 3);
            v108._Swift::UInt64 rawBits = v258;
            Swift::UInt64 v36 = specialized Collection.subscript.getter(v108, v105, v106);
            v39._Swift::UInt64 rawBits = v110;
            Swift::Int v261 = v111;
            Swift::Int v35 = v109;
            unint64_t v26 = v36 >> 16;
            uint64_t v33 = v110 >> 16;
            if ((v109 & 0x1000000000000000) == 0)
            {
              uint64_t v19 = (unint64_t *)(v33 - v26);
              swift_bridgeObjectRetain_n(v109, 2);
              uint64_t v112 = v40;
              goto LABEL_80;
            }
            goto LABEL_148;
          }
          if ((v36 & 0x1000000000000000) != 0)
          {
            id v74 = (id)((v33 & 0xFFFFFFFFFFFFFFFLL) + 32);
            uint64_t v75 = v36 & 0xFFFFFFFFFFFFLL;
            if ((uint64_t)(v36 & 0xFFFFFFFFFFFFLL) < v45) {
              goto LABEL_221;
            }
          }
          else
          {
            id v74 = _StringObject.sharedUTF8.getter(v36, v33);
            uint64_t v75 = v236;
            if (v236 < v45) {
LABEL_221:
            }
              _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x745uLL, 0);
          }
          BOOL v76 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(v44, v45, (uint64_t)v74, v75);
          _StringGuts.appendInPlace(_:isASCII:)(v76, v77, (v36 & 0x8000000000000000) != 0);
        }
        swift_bridgeObjectRelease(v33);
        goto LABEL_73;
      }
    }
    else if (v68 > 15)
    {
      goto LABEL_53;
    }
    swift_bridgeObjectRelease(v33);
    unint64_t v78 = v267;
    swift_bridgeObjectRetain(v39._rawBits);
    unint64_t v79 = _StringGuts._convertedToSmall()(v78, v39._rawBits);
    unint64_t v81 = v80;
    swift_bridgeObjectRelease(v39._rawBits);
    v82._Swift::UInt64 rawBits = a3 & 0xFFFFFFFFFFFF0000 | 1;
    v83._Swift::UInt64 rawBits = v26 & 0xFFFFFFFFFFFF0000 | 1;
    v84._Swift::UInt64 rawBits = _StringGuts.validateScalarRange(_:)(v82, v83, v36, v33);
    if (v84._rawBits < 0x10000) {
      v84._rawBits |= 3;
    }
    unint64_t v86 = specialized String.init(_:)(v84, v85, v36, v33);
    unint64_t v88 = v87;
    swift_bridgeObjectRelease(v33);
    unint64_t v89 = _StringGuts._convertedToSmall()(v86, v88);
    unint64_t v91 = v90;
    swift_bridgeObjectRelease(v88);
    unint64_t v92 = specialized _SmallString.init(_:appending:)(v79, v81, v89, v91);
    if ((v94 & 1) == 0)
    {
      unint64_t v95 = v92;
      unint64_t v96 = v93;
      swift_bridgeObjectRelease(v39._rawBits);
      unint64_t v267 = v95;
      unint64_t v268 = v96;
      uint64_t v72 = v262;
      unint64_t v73 = v257;
      goto LABEL_73;
    }
LABEL_235:
    unint64_t v243 = 266;
LABEL_237:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/StringGutsRangeReplaceable.swift", 38, 2, v243, 0);
  }
  while (1)
  {
    swift_bridgeObjectRetain_n(v33, 3);
    v169._Swift::UInt64 rawBits = a3 & 0xFFFFFFFFFFFF0000 | 1;
    v170._Swift::UInt64 rawBits = v26 & 0xFFFFFFFFFFFF0000 | 1;
    v171._Swift::UInt64 rawBits = _StringGuts.validateScalarRange(_:)(v169, v170, v36, v33);
    if (v171._rawBits < 0x10000) {
      v171._rawBits |= 3;
    }
    Swift::Int v35 = specialized Collection.count.getter(v171, v172, v36, v33);
    swift_bridgeObjectRelease(v33);
    uint64_t v40 = v267;
    v39._Swift::UInt64 rawBits = v268;
    if ((v268 & 0x1000000000000000) == 0) {
      goto LABEL_42;
    }
LABEL_145:
    Swift::Int v173 = String.UTF8View._foreignCount()();
    int64_t v68 = v173 + v35;
    if (!__OFADD__(v173, v35)) {
      goto LABEL_47;
    }
LABEL_147:
    __break(1u);
LABEL_148:
    swift_bridgeObjectRetain_n(v35, 3);
    v174._Swift::UInt64 rawBits = v36 & 0xFFFFFFFFFFFF0000 | 1;
    v175._Swift::UInt64 rawBits = v39._rawBits & 0xFFFFFFFFFFFF0000 | 1;
    unint64_t v176 = v261;
    v177._Swift::UInt64 rawBits = _StringGuts.validateScalarRange(_:)(v174, v175, v261, v35);
    if (v177._rawBits < 0x10000) {
      v177._rawBits |= 3;
    }
    uint64_t v19 = (unint64_t *)specialized Collection.count.getter(v177, v178, v176, v35);
    swift_bridgeObjectRelease(v40);
    uint64_t v112 = v35;
LABEL_80:
    swift_bridgeObjectRelease(v40);
    swift_bridgeObjectRelease(v112);
    Swift::Int v113 = v45;
    if ((v40 & 0x1000000000000000) != 0) {
      Swift::Int v113 = String.UTF8View._foreignCount()();
    }
    swift_bridgeObjectRelease(v40);
    BOOL v114 = __OFADD__(v113, v19);
    a3 = (uint64_t)v19 + v113;
    if (v114)
    {
      __break(1u);
LABEL_152:
      Swift::UInt64 v258 = v27;
      uint64_t v254 = v34;
      Swift::UInt64 v260 = v28;
      unint64_t v252 = v29;
      uint64_t v253 = v31;
      uint64_t v179 = v30;
      Swift::UInt64 v180 = v37._rawBits;
      Swift::UInt64 v259 = v38;
      v181._Swift::UInt64 rawBits = _StringGuts.scalarAlignSlow(_:)(v39)._rawBits;
      Swift::UInt64 v38 = v259;
      Swift::UInt64 v28 = v260;
      v37._Swift::UInt64 rawBits = v180;
      uint64_t v31 = v253;
      Swift::String::Index v34 = v254;
      uint64_t v30 = v179;
      uint64_t v29 = v252;
      Swift::UInt64 v182 = v181._rawBits & 0xFFFFFFFFFFFFFFF3;
      Swift::UInt64 v27 = v258;
      v39._Swift::UInt64 rawBits = v39._rawBits & 0xC | v182 | 1;
      if (v258) {
        goto LABEL_18;
      }
LABEL_153:
      char v183 = v27;
      uint64_t v254 = v34;
      Swift::UInt64 v260 = v28;
      unint64_t v252 = v29;
      uint64_t v253 = v31;
      uint64_t v251 = v30;
      Swift::UInt64 v184 = v37._rawBits;
      Swift::UInt64 v259 = v38;
      v185._Swift::UInt64 rawBits = _StringGuts.scalarAlignSlow(_:)((Swift::String::Index)v27)._rawBits;
      Swift::UInt64 v38 = v259;
      Swift::UInt64 v28 = v260;
      v37._Swift::UInt64 rawBits = v184;
      uint64_t v31 = v253;
      Swift::String::Index v34 = v254;
      uint64_t v30 = v251;
      uint64_t v29 = v252;
      Swift::UInt64 v27 = v183 & 0xC | v185._rawBits & 0xFFFFFFFFFFFFFFF3 | 1;
      if ((v40 & 1) == 0) {
        goto LABEL_154;
      }
      goto LABEL_19;
    }
    uint64_t v262 = (ValueMetadata *)v45;
    if ((v44 & ~v40 & 0x2000000000000000) != 0
      && swift_isUniquelyReferenced_nonNull_native(v40 & 0xFFFFFFFFFFFFFFFLL))
    {
      uint64_t v115 = v268;
      int64_t v116 = _StringGuts.nativeUnusedCapacity.getter(v267, v268);
      if (v117) {
        goto LABEL_236;
      }
      uint64_t v50 = v260;
      if (a3 <= 15 && ((v115 & 0x2000000000000000) != 0 || v116 < (uint64_t)v19)) {
        goto LABEL_97;
      }
    }
    else
    {
      uint64_t v50 = v260;
      if (a3 <= 15)
      {
        uint64_t v115 = v268;
LABEL_97:
        swift_bridgeObjectRelease(v35);
        unint64_t v123 = v267;
        swift_bridgeObjectRetain(v115);
        unint64_t v124 = _StringGuts._convertedToSmall()(v123, v115);
        a3 = v125;
        swift_bridgeObjectRelease(v115);
        v126._Swift::UInt64 rawBits = v36 & 0xFFFFFFFFFFFF0000 | 1;
        v127._Swift::UInt64 rawBits = v39._rawBits & 0xFFFFFFFFFFFF0000 | 1;
        unint64_t v128 = v261;
        v129._Swift::UInt64 rawBits = _StringGuts.validateScalarRange(_:)(v126, v127, v261, v35);
        if (v129._rawBits < 0x10000) {
          v129._rawBits |= 3;
        }
        unint64_t v131 = specialized String.init(_:)(v129, v130, v128, v35);
        unint64_t v133 = v132;
        swift_bridgeObjectRelease(v35);
        unint64_t v134 = _StringGuts._convertedToSmall()(v131, v133);
        unint64_t v136 = v135;
        swift_bridgeObjectRelease(v133);
        unint64_t v137 = specialized _SmallString.init(_:appending:)(v124, a3, v134, v136);
        uint64_t v45 = (uint64_t)v263;
        if (v139) {
          goto LABEL_235;
        }
        unint64_t v140 = v137;
        unint64_t v141 = v138;
        swift_bridgeObjectRelease(v115);
        unint64_t v267 = v140;
        unint64_t v268 = v141;
LABEL_102:
        unint64_t v44 = v259;
        goto LABEL_103;
      }
    }
    _StringGuts.prepareForAppendInPlace(totalCount:otherUTF8Count:)(a3, (int64_t)v19);
    swift_bridgeObjectRelease(v35);
    if ((v35 & 0x1000000000000000) != 0)
    {
      _StringGuts._foreignAppendInPlace(_:)(v261, v35, v26, v33);
      swift_bridgeObjectRelease(v35);
      uint64_t v45 = (uint64_t)v263;
      goto LABEL_102;
    }
    uint64_t v45 = (uint64_t)v263;
    unint64_t v44 = v259;
    uint64_t v118 = v261;
    if ((v35 & 0x2000000000000000) != 0)
    {
      swift_bridgeObjectRelease(v35);
      unint64_t v157 = HIBYTE(v35) & 0xF;
      Swift::UInt64 v271 = v118;
      uint64_t v272 = v35 & 0xFFFFFFFFFFFFFFLL;
      if (v157 < v33) {
        goto LABEL_221;
      }
      uint64_t v158 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(v26, v33, (uint64_t)&v271, v157);
      _StringGuts.appendInPlace(_:isASCII:)(v158, v159, (v35 & 0x4000000000000000) != 0);
    }
    else
    {
      if ((v261 & 0x1000000000000000) != 0)
      {
        id v119 = (id)((v35 & 0xFFFFFFFFFFFFFFFLL) + 32);
        uint64_t v120 = v261 & 0xFFFFFFFFFFFFLL;
        if ((v261 & 0xFFFFFFFFFFFFLL) < v33) {
          goto LABEL_221;
        }
      }
      else
      {
        id v119 = _StringObject.sharedUTF8.getter(v261, v35);
        uint64_t v120 = v237;
        if (v237 < v33) {
          goto LABEL_221;
        }
      }
      Swift::Int v121 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(v26, v33, (uint64_t)v119, v120);
      _StringGuts.appendInPlace(_:isASCII:)(v121, v122, v118 < 0);
      swift_bridgeObjectRelease(v35);
    }
LABEL_103:
    uint64_t v33 = (uint64_t)v257;
    unint64_t v26 = v267;
    unint64_t v142 = v268;
    swift_bridgeObjectRelease(*(void *)(v45 + 24));
    *(void *)(v45 + 16) = v26;
    *(void *)(v45 + 24) = v142;
LABEL_104:
    unint64_t v143 = (char *)v262 - v33;
    if (!__OFSUB__(v262, v33)) {
      break;
    }
    __break(1u);
  }
  uint64_t v144 = *(void *)v45;
  unint64_t v145 = *(void *)v45 >> 16;
  Swift::UInt64 v146 = &v143[v44 - v50];
  Swift::Int v147 = (Swift::Int)&v146[*(void *)(v45 + 8) >> 16];
  uint64_t v148 = (*(void *)v45 >> 8) & 0x3FLL;
  if (v148)
  {
    if (v148 + v145 < v44) {
      goto LABEL_129;
    }
  }
  else if (v145 < v44)
  {
    goto LABEL_129;
  }
  if (v145 == v147)
  {
    Swift::Int v149 = 0;
    unint64_t v150 = v144 & 0xFFFFFFFFFFFF0000;
    goto LABEL_123;
  }
  uint64_t v151 = *(void *)(v45 + 16);
  unint64_t v152 = *(void *)(v45 + 24);
  if ((v152 & 0x1000000000000000) != 0) {
    goto LABEL_162;
  }
  if ((v152 & 0x2000000000000000) != 0)
  {
    unint64_t v267 = *(void *)(v45 + 16);
    unint64_t v268 = v152 & 0xFFFFFFFFFFFFFFLL;
    if (v145 + 1 != (HIBYTE(v152) & 0xF))
    {
      int v155 = *(unsigned __int16 *)((char *)&v267 + v145);
      goto LABEL_120;
    }
LABEL_122:
    unint64_t v150 = v144 & 0xFFFFFFFFFFFF0000;
    Swift::Int v149 = 1;
LABEL_123:
    v150 |= v149 << 8;
    goto LABEL_124;
  }
  if ((v151 & 0x1000000000000000) != 0)
  {
    Swift::Int v153 = (char *)((v152 & 0xFFFFFFFFFFFFFFFLL) + 32);
    uint64_t v154 = v151 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    Swift::Int v153 = (char *)_StringObject.sharedUTF8.getter(*(void *)(v45 + 16), *(void *)(v45 + 24));
  }
  if (v145 + 1 == v154) {
    goto LABEL_122;
  }
  if (!v153) {
LABEL_242:
  }
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "unsafelyUnwrapped of nil optional", 33, 2, "Swift/Optional.swift", 20, 2, 0x163uLL, 0);
  int v155 = *(unsigned __int16 *)&v153[v145];
LABEL_120:
  if (v155 != 2573 && (v155 & 0x80808080) == 0) {
    goto LABEL_122;
  }
LABEL_162:
  Swift::Int v149 = _StringGuts._opaqueComplexCharacterStride(startingAt:)(v145);
  unint64_t v150 = v144 & 0xFFFFFFFFFFFF0000;
  if (v149 <= 63) {
    goto LABEL_123;
  }
LABEL_124:
  uint64_t v156 = v150 | 5;
  if ((v144 & 2) != 0 && (v145 < v44 || _StringGuts.isOnGraphemeClusterBoundary(_:)((Swift::String::Index)(v150 | 5)))) {
    uint64_t v156 = v150 | 7;
  }
  *(void *)uint64_t v45 = v156;
LABEL_129:
  if (v146) {
LABEL_130:
  }
    *(void *)(v45 + 8) = (v147 << 16) | 5;
}

uint64_t Substring.init<A, B>(decoding:as:)(uint64_t a1, uint64_t a2, Class *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8 = (uint64_t)*(a3 - 1);
  uint64_t v9 = MEMORY[0x1F4188790](a1);
  uint64_t v14 = (unint64_t *)((char *)v22 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (v10 != &type metadata for Unicode.UTF8)
  {
    static String._fromCodeUnits<A, B>(_:encoding:repair:)(a1, (uint64_t)v10, 1, a3, v11, a5, v12);
    if (!v21) {
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/String.swift", 18, 2, 0x1C9uLL, 0);
    }
    goto LABEL_9;
  }
  MEMORY[0x1F4188790](v9);
  (*(void (**)(uint64_t *__return_ptr, uint64_t (*)@<X0>(uint64_t@<X0>, uint64_t@<X1>, uint64_t *@<X8>)))(*(void *)(a5 + 8) + 72))(v24, closure #1 in String.init<A, B>(decoding:as:)partial apply);
  if (v24[1])
  {
LABEL_9:
    (*(void (**)(uint64_t, Class *))(v8 + 8))(a1, a3);
    return 15;
  }
  (*(void (**)(unint64_t *, uint64_t, Class *))(v8 + 16))(v14, a1, a3);
  uint64_t v15 = (const char *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _HasContiguousBytes);
  if ((swift_dynamicCast((char *)v22, v14, a3, v15, 6uLL) & 1) == 0)
  {
    uint64_t v23 = 0;
    memset(v22, 0, sizeof(v22));
    outlined destroy of _HasContiguousBytes?((uint64_t)v22, &demangling cache variable for type metadata for _HasContiguousBytes?);
LABEL_8:
    static String._fromNonContiguousUnsafeBitcastUTF8Repairing<A>(_:)(a1, (uint64_t)a3, a5);
    goto LABEL_9;
  }
  outlined init with take of MirrorPath(v22, (uint64_t)v24);
  uint64_t v16 = v25;
  uint64_t v17 = v26;
  __swift_project_boxed_opaque_existential_0Tm(v24, v25);
  if (((*(uint64_t (**)(uint64_t, uint64_t))(v17 + 16))(v16, v17) & 1) == 0)
  {
    __swift_destroy_boxed_opaque_existential_1Tm(v24);
    goto LABEL_8;
  }
  (*(void (**)(uint64_t, Class *))(v8 + 8))(a1, a3);
  uint64_t v18 = v25;
  uint64_t v19 = v26;
  __swift_project_boxed_opaque_existential_0Tm(v24, v25);
  (*(void (**)(long long *__return_ptr, uint64_t (*)@<X0>(uint8x16_t *@<X0>, uint64_t@<X1>, uint64_t *@<X8>), void, ValueMetadata *, uint64_t, uint64_t))(v19 + 8))(v22, closure #2 in String.init<A, B>(decoding:as:), 0, &type metadata for String, v18, v19);
  __swift_destroy_boxed_opaque_existential_1Tm(v24);
  return 15;
}

uint64_t Substring.init<A>(decodingCString:as:)(uint8x16_t *a1, ValueMetadata *a2, ValueMetadata *a3, int **a4)
{
  id v74 = a2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, a4, (uint64_t)a3, (uint64_t)&protocol requirements base descriptor for _UnicodeEncoding, associated type descriptor for _UnicodeEncoding.CodeUnit);
  uint64_t v8 = *(void *)(swift_getAssociatedConformanceWitness((uint64_t)a4, (uint64_t)a3, (uint64_t)AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for _UnicodeEncoding, associated conformance descriptor for _UnicodeEncoding._UnicodeEncoding.CodeUnit: FixedWidthInteger)+ 8);
  unint64_t v73 = *(int ***)(*(void *)(v8 + 24) + 16);
  uint64_t v9 = swift_getAssociatedTypeWitness(0, v73, (uint64_t)AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, associated type descriptor for ExpressibleByIntegerLiteral.IntegerLiteralType);
  MEMORY[0x1F4188790](v9);
  uint64_t v11 = (char *)&v58 - v10;
  uint64_t v12 = swift_checkMetadataState(0, (uint64_t)AssociatedTypeWitness);
  uint64_t v13 = MEMORY[0x1F4188790](v12);
  uint64_t v15 = (char *)&v58 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = MEMORY[0x1F4188790](v13);
  uint64_t v18 = (char *)&v58 - v17;
  MEMORY[0x1F4188790](v16);
  uint64_t v21 = (char *)&v58 - v20;
  if (a3 == &type metadata for Unicode.UTF8)
  {
    size_t v27 = _swift_stdlib_strlen(a1->i8);
    if ((v27 & 0x8000000000000000) != 0) {
      goto LABEL_25;
    }
    uint64_t v24 = v27;
    goto LABEL_16;
  }
  if (a3 == &type metadata for Unicode.UTF16)
  {
    uint64_t v31 = a1;
    if (a1->i16[0])
    {
      uint64_t v31 = a1;
      do
      {
        int v32 = v31->u16[1];
        uint64_t v31 = (uint8x16_t *)((char *)v31 + 2);
      }
      while (v32);
    }
    uint64_t v33 = (char *)v31 - (char *)a1;
    if (v33 > -2)
    {
      specialized static String._fromCodeUnits<A, B>(_:encoding:repair:)(a1, v33 / 2, v74, 1);
      if (!v34) {
        goto LABEL_45;
      }
      return 15;
    }
    goto LABEL_25;
  }
  if (v74 == &type metadata for Unicode.UTF8)
  {
    uint64_t v22 = v19;
    int64_t v23 = _swift_stdlib_strlen(a1->i8);
    if (v23 < 0) {
      goto LABEL_25;
    }
    uint64_t v24 = v23;
    uint64_t v25 = *(void *)(v22 + 72);
    if (v25 != 1)
    {
      if ((unsigned __int128)(v23 * (__int128)v25) >> 64 != (v23 * v25) >> 63)
      {
        __break(1u);
LABEL_47:
        if (!v25) {
          _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Division by zero in remainder operation", 39, 2, "Swift/IntegerTypes.swift", 24, 2, 0x390EuLL, 0);
        }
        LODWORD(v6_assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0, 0xE000000000000000, "Swift/StringRangeReplaceableCollection.swift", 44, 2, 0x168uLL, 0) = 0;
        uint64_t v59 = 2033;
        LOBYTE(v58) = 2;
        Swift::UInt64 v36 = "Buffer must contain a whole number of Element instances";
        uint64_t v37 = 55;
LABEL_26:
        _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, v36, v37, 2, "Swift/UnsafeBufferPointer.swift", 31, v55, v56, v57);
      }
      if (v25 < 1 && v25 != -1) {
        goto LABEL_47;
      }
      uint64_t v24 = v23 * v25;
      if (v23 * v25 < 0)
      {
LABEL_25:
        int v57 = 0;
        unint64_t v56 = 1343;
        char v55 = 2;
        Swift::UInt64 v36 = "UnsafeBufferPointer with negative count";
        uint64_t v37 = 39;
        goto LABEL_26;
      }
    }
LABEL_16:
    int64_t v28 = validateUTF8(_:)(a1->i64, v24);
    if (v30) {
      repairUTF8(_:firstKnownBrokenRange:)(a1->i8, v24, v28, v29);
    }
    else {
      specialized static String._uncheckedFromUTF8(_:isASCII:)(a1, v24, v28 & 1);
    }
    return 15;
  }
  uint64_t v72 = v8;
  uint64_t v69 = *(uint64_t (**)(uint64_t *, uint64_t))(v8 + 64);
  uint64_t v70 = v8 + 64;
  uint64_t v65 = v19;
  unint64_t v66 = *(void (**)(char *))(v19 + 16);
  uint64_t v67 = v19 + 16;
  uint64_t v64 = v8 + 128;
  uint64_t v62 = v8 + 96;
  int64_t v68 = (void (**)(char *, uint64_t *))(v19 + 8);
  uint64_t v59 = (uint64_t)(v73 + 3);
  uint64_t v60 = v8 + 120;
  uint64_t v58 = (void (**)(char *, char *, uint64_t *))(v19 + 32);
  for (unint64_t i = a1; ; unint64_t i = (uint8x16_t *)((char *)v71 + *(void *)(v65 + 72)))
  {
    char v71 = i;
    v66(v21);
    if (v69(v12, v72)) {
      break;
    }
    LODWORD(v63) = v69(v12, v72);
    uint64_t v40 = (*(uint64_t (**)(uint64_t *))(v72 + 128))(v12);
    if ((v63 & 1) == 0) {
      goto LABEL_37;
    }
    if (v40 > 64) {
      goto LABEL_28;
    }
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness((uint64_t)v73, (uint64_t)v12, (uint64_t)v9, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
    (*(void (**)(uint64_t *, uint64_t, const char *, uint64_t))(AssociatedConformanceWitness + 8))(&qword_18162B0B8, 256, v9, AssociatedConformanceWitness);
    ((void (*)(char *, uint64_t *))v73[3])(v11, v12);
    char v44 = (*(uint64_t (**)(char *, char *, uint64_t *))(*(void *)(*(void *)(v72 + 32) + 8) + 32))(v21, v18, v12);
    unint64_t v63 = *v68;
    v63(v18, v12);
    (*v58)(v15, v21, v12);
    if (v44)
    {
      uint64_t v45 = (*(uint64_t (**)(uint64_t *))(v72 + 120))(v12);
      v63(v15, v12);
      if (!v45) {
        goto LABEL_41;
      }
    }
    else
    {
      v63(v15, v12);
    }
LABEL_29:
    ;
  }
  uint64_t v40 = (*(uint64_t (**)(uint64_t *))(v72 + 128))(v12);
LABEL_37:
  if (v40 >= 64)
  {
LABEL_28:
    v75[0] = 0;
    unint64_t v63 = *(void (**)(char *, uint64_t *))(v72 + 96);
    unint64_t v39 = lazy protocol witness table accessor for type Int and conformance Int(v40, v41, v42);
    ((void (*)(void *, ValueMetadata *, unint64_t, uint64_t *, uint64_t))v63)(v75, &type metadata for Int, v39, v12, v72);
    int v61 = (*(uint64_t (**)(char *, char *, uint64_t *))(*(void *)(*(void *)(v72 + 16) + 8) + 8))(v21, v18, v12);
    unint64_t v63 = *v68;
    v63(v18, v12);
    v63(v21, v12);
    if (v61) {
      goto LABEL_41;
    }
    goto LABEL_29;
  }
  uint64_t v46 = (*(uint64_t (**)(uint64_t *))(v72 + 120))(v12);
  (*v68)(v21, v12);
  if (v46) {
    goto LABEL_29;
  }
LABEL_41:
  uint64_t v47 = *(void *)(v65 + 72);
  if (!v47) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Division by zero", 16, 2, "Swift/IntegerTypes.swift", 24, 2, 0x3829uLL, 0);
  }
  if ((char *)v71 - (char *)a1 == 0x8000000000000000 && v47 == -1) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Division results in an overflow", 31, 2, "Swift/IntegerTypes.swift", 24, 2, 0x3830uLL, 0);
  }
  v75[0] = UnsafeBufferPointer.init(start:count:)((uint64_t)a1, ((char *)v71 - (char *)a1) / v47);
  v75[1] = v48;
  unint64_t v51 = (unint64_t *)type metadata accessor for UnsafeBufferPointer(0, (uint64_t)v12, v49, v50);
  uint64_t WitnessTable = swift_getWitnessTable(protocol conformance descriptor for UnsafeBufferPointer<A>, v51, v52);
  static String._fromCodeUnits<A, B>(_:encoding:repair:)((uint64_t)v75, (uint64_t)v74, 1, (Class *)v51, a3, WitnessTable, a4);
  if (!v54) {
LABEL_45:
  }
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/CString.swift", 19, 2, 0x1E3uLL, 0);
  return 15;
}

void Substring.withCString<A>(_:)(void (*a1)(__objc2_class **), uint64_t a2, Swift::String::Index a3, Swift::String::Index a4, unint64_t a5, unint64_t a6, uint64_t a7)
{
  unint64_t v12 = specialized String.init(_:)(a3, a4, a5, a6);
  uint64_t v14 = v13;
  String.withCString<A>(_:)(a1, a2, v12, v13, a7);
  swift_bridgeObjectRelease(v14);
}

void Substring.withCString<A, B>(encodedAs:_:)(ValueMetadata *a1, uint64_t a2, uint64_t a3, Swift::String::Index a4, Swift::String::Index a5, unint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v16 = specialized String.init(_:)(a4, a5, a6, a7);
  unint64_t v18 = v17;
  if (a1 == &type metadata for Unicode.UTF8)
  {
    MEMORY[0x1F4188790](v16);
    void v20[2] = a8;
    v20[3] = a9;
    v20[4] = a10;
    v20[5] = a2;
    v20[6] = a3;
    String.withCString<A>(_:)((void (*)(__objc2_class **))partial apply for closure #1 in String.withCString<A, B>(encodedAs:_:), (uint64_t)v20, v19, v18, a8);
    swift_bridgeObjectRelease(v18);
  }
  else
  {
    String._slowWithCString<A, B>(encodedAs:_:)((uint64_t)a1, a2, a3, v16, v17);
    swift_bridgeObjectRelease(v18);
  }
}

Swift::Int Substring.hashValue.getter(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  v5[0] = 0;
  v5[1] = _swift_stdlib_Hashing_parameters ^ 0x736F6D6570736575;
  void v5[2] = unk_1EB208F00 ^ 0x646F72616E646F6DLL;
  v5[3] = _swift_stdlib_Hashing_parameters ^ 0x6C7967656E657261;
  v5[4] = unk_1EB208F00 ^ 0x7465646279746573;
  long long v6 = 0u;
  long long v7 = 0u;
  _StringGutsSlice._normalizedHash(into:)(v5, a3, a4, a1 >> 16, a2 >> 16);
  return Hasher._finalize()();
}

unint64_t protocol witness for StringProtocol.utf8.getter in conformance Substring@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + 16);
  unint64_t v2 = *(void *)(v1 + 24);
  *(_OWORD *)a1 = *(_OWORD *)v1;
  *(void *)(a1 + 16) = v3;
  *(void *)(a1 + 24) = v2;
  return swift_bridgeObjectRetain(v2);
}

uint64_t protocol witness for StringProtocol.hasPrefix(_:) in conformance Substring(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for StringProtocol.hasPrefix(_:) in conformance Substring(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t, void, void, void, void))specialized Sequence<>.starts<A>(with:));
}

uint64_t protocol witness for StringProtocol.hasSuffix(_:) in conformance Substring(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for StringProtocol.hasPrefix(_:) in conformance Substring(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t, void, void, void, void))specialized Sequence<>.starts<A>(with:));
}

uint64_t protocol witness for StringProtocol.hasPrefix(_:) in conformance Substring(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, void, void, void, void))
{
  return a5(a1, a2, *v5, v5[1], v5[2], v5[3]);
}

uint64_t protocol witness for StringProtocol.lowercased() in conformance Substring(uint64_t a1, uint64_t a2)
{
  return protocol witness for StringProtocol.lowercased() in conformance Substring(a1, a2, (uint64_t (*)(uint64_t))String.lowercased());
}

Swift::String __swiftcall Substring.lowercased()()
{
  uint64_t v4 = Substring.lowercased()(v0, v1, v2, v3, (uint64_t (*)(uint64_t))String.lowercased());
  result._unint64_t object = v5;
  result._uint64_t countAndFlagsBits = v4;
  return result;
}

uint64_t protocol witness for StringProtocol.uppercased() in conformance Substring(uint64_t a1, uint64_t a2)
{
  return protocol witness for StringProtocol.lowercased() in conformance Substring(a1, a2, (uint64_t (*)(uint64_t))String.uppercased());
}

uint64_t protocol witness for StringProtocol.lowercased() in conformance Substring(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  v5._Swift::UInt64 rawBits = *v3;
  v6._Swift::UInt64 rawBits = v3[1];
  uint64_t v7 = specialized String.init(_:)(v5, v6, v3[2], v3[3]);
  uint64_t v9 = v8;
  uint64_t v10 = a3(v7);
  swift_bridgeObjectRelease(v9);
  return v10;
}

Swift::String __swiftcall Substring.uppercased()()
{
  uint64_t v4 = Substring.lowercased()(v0, v1, v2, v3, (uint64_t (*)(uint64_t))String.uppercased());
  result._unint64_t object = v5;
  result._uint64_t countAndFlagsBits = v4;
  return result;
}

uint64_t Substring.lowercased()(Swift::String::Index a1, Swift::String::Index a2, unint64_t a3, unint64_t a4, uint64_t (*a5)(uint64_t))
{
  uint64_t v6 = specialized String.init(_:)(a1, a2, a3, a4);
  uint64_t v8 = v7;
  uint64_t v9 = a5(v6);
  swift_bridgeObjectRelease(v8);
  return v9;
}

uint64_t protocol witness for StringProtocol.init<A, B>(decoding:as:) in conformance Substring@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, Class *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, void *a6@<X8>)
{
  uint64_t result = Substring.init<A, B>(decoding:as:)(a1, a2, a3, a4, a5);
  *a6 = 15;
  a6[1] = v8;
  a6[2] = v9;
  a6[3] = v10;
  return result;
}

uint64_t protocol witness for StringProtocol.init(cString:) in conformance Substring@<X0>(uint8x16_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = specialized Substring.init(cString:)(a1);
  *a2 = result;
  a2[1] = v4;
  a2[2] = v5;
  a2[3] = v6;
  return result;
}

uint64_t protocol witness for StringProtocol.init<A>(decodingCString:as:) in conformance Substring@<X0>(uint8x16_t *a1@<X0>, ValueMetadata *a2@<X1>, ValueMetadata *a3@<X2>, int **a4@<X3>, void *a5@<X8>)
{
  uint64_t result = Substring.init<A>(decodingCString:as:)(a1, a2, a3, a4);
  *a5 = 15;
  a5[1] = v7;
  a5[2] = v8;
  a5[3] = v9;
  return result;
}

void protocol witness for StringProtocol.withCString<A>(_:) in conformance Substring(void (*a1)(__objc2_class **), uint64_t a2, uint64_t a3)
{
  v5._Swift::UInt64 rawBits = *v3;
  v6._Swift::UInt64 rawBits = v3[1];
  Substring.withCString<A>(_:)(a1, a2, v5, v6, v3[2], v3[3], a3);
}

void protocol witness for StringProtocol.withCString<A, B>(encodedAs:_:) in conformance Substring(ValueMetadata *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v8._Swift::UInt64 rawBits = *v6;
  v9._Swift::UInt64 rawBits = v6[1];
  Substring.withCString<A, B>(encodedAs:_:)(a1, a2, a3, v8, v9, v6[2], v6[3], a4, a5, a6);
}

uint64_t protocol witness for BidirectionalCollection.index(before:) in conformance Substring@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return protocol witness for BidirectionalCollection.index(before:) in conformance Substring(a1, (uint64_t (*)(void, void, void, void, void))Substring.index(before:), a2);
}

uint64_t protocol witness for BidirectionalCollection.formIndex(before:) in conformance Substring(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for BidirectionalCollection.formIndex(before:) in conformance Substring(a1, a2, a3, (uint64_t (*)(uint64_t, void, void, void, void))Substring.index(before:));
}

uint64_t protocol witness for ExpressibleByStringInterpolation.init(stringInterpolation:) in conformance Substring@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = specialized Substring.init<A>(_:)();
  *a1 = result;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  return result;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Substring()
{
  unint64_t v1 = *v0;
  unint64_t v2 = v0[1];
  unint64_t v3 = v0[2];
  unint64_t v4 = v0[3];
  v6[0] = 0;
  v6[1] = _swift_stdlib_Hashing_parameters ^ 0x736F6D6570736575;
  void v6[2] = unk_1EB208F00 ^ 0x646F72616E646F6DLL;
  v6[3] = _swift_stdlib_Hashing_parameters ^ 0x6C7967656E657261;
  void v6[4] = unk_1EB208F00 ^ 0x7465646279746573;
  long long v7 = 0u;
  long long v8 = 0u;
  _StringGutsSlice._normalizedHash(into:)(v6, v3, v4, v1 >> 16, v2 >> 16);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance Substring(unint64_t *a1, ValueMetadata *a2)
{
  unint64_t v4 = *v2;
  unint64_t v5 = v2[1];
  if (a2 == &type metadata for String)
  {
    if ((v5 & 0x2000000000000000) != 0) {
      uint64_t v7 = HIBYTE(v5) & 0xF;
    }
    else {
      uint64_t v7 = v4 & 0xFFFFFFFFFFFFLL;
    }
    uint64_t v6 = 0;
  }
  else
  {
    uint64_t v6 = v4 >> 16;
    uint64_t v7 = v5 >> 16;
    unint64_t v4 = v2[2];
    unint64_t v5 = v2[3];
  }
  _StringGutsSlice._normalizedHash(into:)(a1, v4, v5, v6, v7);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Substring(uint64_t a1, ValueMetadata *a2)
{
  unint64_t v4 = *v2;
  unint64_t v5 = v2[1];
  unint64_t v6 = v2[2];
  unint64_t v7 = v2[3];
  v11[0] = 0;
  v11[1] = _swift_stdlib_Hashing_parameters ^ a1 ^ 0x736F6D6570736575;
  void v11[2] = unk_1EB208F00 ^ 0x646F72616E646F6DLL;
  uint64_t v11[3] = _swift_stdlib_Hashing_parameters ^ a1 ^ 0x6C7967656E657261;
  v11[4] = unk_1EB208F00 ^ 0x7465646279746573;
  long long v12 = 0u;
  long long v13 = 0u;
  if (a2 == &type metadata for String)
  {
    if ((v5 & 0x2000000000000000) != 0) {
      uint64_t v9 = HIBYTE(v5) & 0xF;
    }
    else {
      uint64_t v9 = v4 & 0xFFFFFFFFFFFFLL;
    }
    uint64_t v8 = 0;
  }
  else
  {
    uint64_t v8 = v4 >> 16;
    uint64_t v9 = v5 >> 16;
    unint64_t v4 = v6;
    unint64_t v5 = v7;
  }
  _StringGutsSlice._normalizedHash(into:)(v11, v4, v5, v8, v9);
  return Hasher._finalize()();
}

uint64_t protocol witness for static Comparable.< infix(_:_:) in conformance Substring(unint64_t *a1, void *a2)
{
  unint64_t v4 = *a1;
  unint64_t v5 = a1[1];
  uint64_t v6 = a1[2];
  unint64_t v7 = a1[3];
  uint64_t v8 = a2[2];
  unint64_t v9 = a2[3];
  uint64_t v10 = v4 >> 16;
  uint64_t v11 = v5 >> 16;
  uint64_t v12 = *a2 >> 16;
  uint64_t v13 = a2[1] >> 16;
  if (v6 == v8 && v7 == v9 && v10 == v12 && v11 == v13) {
    return 0;
  }
  else {
    return _stringCompareInternal(_:_:_:_:expecting:)(v6, v7, v10, v11, v8, v9, v12, v13, 1) & 1;
  }
}

uint64_t protocol witness for static Comparable.<= infix(_:_:) in conformance Substring(unint64_t *a1, unint64_t *a2)
{
  unint64_t v2 = *a1;
  unint64_t v3 = a1[1];
  uint64_t v4 = a1[2];
  unint64_t v5 = a1[3];
  unint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  uint64_t v8 = a2[2];
  unint64_t v9 = a2[3];
  uint64_t v10 = v6 >> 16;
  uint64_t v11 = v7 >> 16;
  uint64_t v12 = v2 >> 16;
  uint64_t v13 = v3 >> 16;
  char v14 = 1;
  if (v8 != v4 || v9 != v5 || v10 != v12 || v11 != v13) {
    char v14 = _stringCompareInternal(_:_:_:_:expecting:)(v8, v9, v10, v11, v4, v5, v12, v13, 1) ^ 1;
  }
  return v14 & 1;
}

uint64_t protocol witness for static Comparable.>= infix(_:_:) in conformance Substring(unint64_t *a1, void *a2)
{
  unint64_t v4 = *a1;
  unint64_t v5 = a1[1];
  uint64_t v6 = a1[2];
  unint64_t v7 = a1[3];
  uint64_t v8 = a2[2];
  unint64_t v9 = a2[3];
  uint64_t v10 = v4 >> 16;
  uint64_t v11 = v5 >> 16;
  uint64_t v12 = *a2 >> 16;
  uint64_t v13 = a2[1] >> 16;
  char v14 = 1;
  if (v6 != v8 || v7 != v9 || v10 != v12 || v11 != v13) {
    char v14 = _stringCompareInternal(_:_:_:_:expecting:)(v6, v7, v10, v11, v8, v9, v12, v13, 1) ^ 1;
  }
  return v14 & 1;
}

uint64_t protocol witness for static Comparable.> infix(_:_:) in conformance Substring(unint64_t *a1, unint64_t *a2)
{
  unint64_t v2 = *a1;
  unint64_t v3 = a1[1];
  uint64_t v4 = a1[2];
  unint64_t v5 = a1[3];
  unint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  uint64_t v8 = a2[2];
  unint64_t v9 = a2[3];
  uint64_t v10 = v6 >> 16;
  uint64_t v11 = v7 >> 16;
  uint64_t v12 = v2 >> 16;
  uint64_t v13 = v3 >> 16;
  if (v8 == v4 && v9 == v5 && v10 == v12 && v11 == v13) {
    return 0;
  }
  else {
    return _stringCompareInternal(_:_:_:_:expecting:)(v8, v9, v10, v11, v4, v5, v12, v13, 1) & 1;
  }
}

uint64_t (*protocol witness for Collection.subscript.read in conformance Substring(uint64_t *a1, Swift::UInt64 *a2))()
{
  uint64_t v4 = Substring.subscript.getter(*a2, *(void *)v2, *(void *)(v2 + 8), *(void *)(v2 + 16), *(void *)(v2 + 24));
  a1[1] = v5;
  a1[2] = v5;
  *a1 = v4;
  return protocol witness for Collection.subscript.read in conformance Substring;
}

unint64_t protocol witness for Collection.subscript.getter in conformance Substring@<X0>(Swift::UInt64 *a1@<X0>, Swift::UInt64 *a2@<X8>)
{
  v4._Swift::UInt64 rawBits = a1[1];
  v5._Swift::UInt64 rawBits = *a1;
  *a2 = specialized Substring.subscript.getter(v5, v4, *(void *)v2, *(void *)(v2 + 8), *(void *)(v2 + 16), *(void *)(v2 + 24));
  a2[1] = v6;
  a2[2] = v8;
  a2[3] = v7;

  return swift_bridgeObjectRetain(v7);
}

Swift::UInt64 Substring.subscript.getter(Swift::String::Index a1, Swift::String::Index a2, unint64_t a3, unint64_t a4, unint64_t a5, uint64_t a6)
{
  Swift::UInt64 v6 = specialized Substring.subscript.getter(a1, a2, a3, a4, a5, a6);
  swift_bridgeObjectRetain(v7);
  return v6;
}

unint64_t protocol witness for Collection.indices.getter in conformance Substring@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *v1;
  unint64_t v3 = v1[3];
  *(void *)a1 = *v1;
  long long v4 = *(_OWORD *)(v1 + 1);
  *(_OWORD *)(a1 + 8) = v4;
  *(void *)(a1 + 24) = v3;
  *(void *)(a1 + 32) = v2;
  *(void *)(a1 + 4_assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0, 0xE000000000000000, "Swift/StringRangeReplaceableCollection.swift", 44, 2, 0x168uLL, 0) = v4;
  return swift_bridgeObjectRetain(v3);
}

Swift::Int protocol witness for Collection.count.getter in conformance Substring()
{
  return Substring.distance(from:to:)((Swift::String::Index)v0->_rawBits, v0[1]);
}

Swift::String::Index protocol witness for BidirectionalCollection.index(_:offsetBy:) in conformance Substring@<X0>(Swift::String::Index *a1@<X0>, Swift::Int a2@<X1>, Swift::String::Index *a3@<X8>)
{
  result._Swift::UInt64 rawBits = Substring.index(_:offsetBy:)((Swift::String::Index)a1->_rawBits, a2)._rawBits;
  a3->_Swift::UInt64 rawBits = result._rawBits;
  return result;
}

Swift::String::Index protocol witness for BidirectionalCollection.index(_:offsetBy:limitedBy:) in conformance Substring@<X0>(Swift::String::Index *a1@<X0>, Swift::Int a2@<X1>, Swift::String::Index *a3@<X2>, uint64_t a4@<X8>)
{
  Swift::String::Index_optional v6 = Substring.index(_:offsetBy:limitedBy:)((Swift::String::Index)a1->_rawBits, a2, (Swift::String::Index)a3->_rawBits);
  *(void *)a4 = v6.value._rawBits;
  *(unsigned char *)(a4 + 8) = v6.is_nil;
  return v6.value;
}

Swift::Int protocol witness for BidirectionalCollection.distance(from:to:) in conformance Substring(Swift::String::Index *a1, Swift::String::Index *a2)
{
  return Substring.distance(from:to:)((Swift::String::Index)a1->_rawBits, (Swift::String::Index)a2->_rawBits);
}

uint64_t protocol witness for Collection.index(after:) in conformance Substring@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return protocol witness for BidirectionalCollection.index(before:) in conformance Substring(a1, (uint64_t (*)(void, void, void, void, void))Substring.index(after:), a2);
}

uint64_t protocol witness for BidirectionalCollection.index(before:) in conformance Substring@<X0>(void *a1@<X0>, uint64_t (*a2)(void, void, void, void, void)@<X3>, uint64_t *a3@<X8>)
{
  uint64_t result = a2(*a1, *v3, v3[1], v3[2], v3[3]);
  *a3 = result;
  return result;
}

uint64_t protocol witness for Collection.formIndex(after:) in conformance Substring(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for BidirectionalCollection.formIndex(before:) in conformance Substring(a1, a2, a3, (uint64_t (*)(uint64_t, void, void, void, void))Substring.index(after:));
}

uint64_t protocol witness for BidirectionalCollection.formIndex(before:) in conformance Substring(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, void, void, void, void))
{
  uint64_t result = a4(*a1, *v4, v4[1], v4[2], v4[3]);
  *a1 = result;
  return result;
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance Substring(uint64_t a1, uint64_t a2)
{
  return protocol witness for Sequence._copyToContiguousArray() in conformance Substring(a1, a2, (uint64_t (*)(void, void, void, uint64_t))specialized _copyCollectionToContiguousArray<A>(_:));
}

uint64_t protocol witness for Sequence._copyContents(initializing:) in conformance Substring(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return protocol witness for Sequence._copyContents(initializing:) in conformance Substring(a1, a2, a3, a4, a5, (uint64_t (*)(uint64_t, uint64_t, uint64_t, void, void, void, void))specialized Sequence._copySequenceContents(initializing:));
}

uint64_t _StringGuts._opaqueCharacterStride(endingAt:in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = a1;
  if ((a5 & 0x1000000000000000) != 0)
  {
    JUMPOUT(0x1813F2108);
  }
  if ((a5 & 0x2000000000000000) != 0)
  {
    v95[0] = a4;
    v95[1] = a5 & 0xFFFFFFFFFFFFFFLL;
    if (a2 >= a1) {
      goto LABEL_198;
    }
    uint64_t v14 = a1 - 1;
    if ((*((unsigned char *)v95 + a1 - 1) & 0xC0) == 0x80)
    {
      uint64_t v15 = a1;
      do
        int v16 = v94[v15--] & 0xC0;
      while (v16 == 128);
      uint64_t v14 = v15 - 1;
    }
    uint64_t v93 = a1;
    unsigned int v17 = _decodeScalar(_:startingAt:)((uint64_t)v95, a2, v14);
    if (v14 <= a2)
    {
      uint64_t v19 = v14;
      goto LABEL_18;
    }
    unsigned int v18 = v17;
    while (1)
    {
      unsigned int v21 = v18;
      uint64_t v19 = v14;
      uint64_t v22 = v14 - 1;
      unsigned int v18 = *((unsigned __int8 *)v95 + --v14);
      if ((v18 & 0xC0) == 0x80)
      {
        uint64_t v23 = v19;
        do
          unsigned int v18 = v94[v23--];
        while ((v18 & 0xC0) == 0x80);
        uint64_t v14 = v23 - 1;
      }
      if ((v18 & 0x80) != 0)
      {
        switch(__clz(v18 ^ 0xFF))
        {
          case 0x1Au:
            unsigned int v18 = *((unsigned char *)v95 + v14 + 1) & 0x3F | ((v18 & 0x1F) << 6);
            break;
          case 0x1Bu:
            char v24 = *((unsigned char *)v95 + v14 + 2);
            int v25 = ((v18 & 0xF) << 12) | ((*((unsigned char *)v95 + v14 + 1) & 0x3F) << 6);
            goto LABEL_31;
          case 0x1Cu:
            char v24 = *((unsigned char *)v95 + v14 + 3);
            int v25 = ((v18 & 0xF) << 18) | ((*((unsigned char *)v95 + v14 + 1) & 0x3F) << 12) | ((*((unsigned char *)v95 + v14 + 2) & 0x3F) << 6);
LABEL_31:
            unsigned int v18 = v25 & 0xFFFFFFC0 | v24 & 0x3F;
            break;
          default:
            break;
        }
      }
      if (v18 == 13 && v21 == 10) {
        goto LABEL_21;
      }
      int32x4_t v27 = vdupq_n_s32(v18);
      if (((vmaxv_u8((uint8x8_t)vmovn_s16(vuzp1q_s16((int16x8_t)vcgtq_u32((uint32x4_t)xmmword_18162AE60, (uint32x4_t)vaddq_s32(v27, (int32x4_t)xmmword_18162AE40)), (int16x8_t)vcgtq_u32((uint32x4_t)xmmword_18162AE70, (uint32x4_t)vaddq_s32(v27, (int32x4_t)xmmword_18162AE50))))) & 1) != 0|| (v18 - 13312) >> 4 < 0x70D|| v18 <= 0x2FF)&& ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vcgtq_u32((uint32x4_t)xmmword_18162AE90, (uint32x4_t)vaddq_s32(vdupq_n_s32(v21), (int32x4_t)xmmword_18162AE80)))) & 1) != 0|| v21 - 8208 < 0x1A|| v21 - 12288 < 0x2A|| v21 - 65281 < 0x9D|| v21 - 12439 > 0xFFFFFFA9|| v21 < 0x300
         || v21 - 42192 > 0xFFFF8F2F))
      {
        goto LABEL_18;
      }
      unsigned __int8 v28 = Unicode._GraphemeBreakProperty.init(from:)(v18);
      unsigned __int8 v29 = Unicode._GraphemeBreakProperty.init(from:)(v21);
      if (v28)
      {
        if (v28 == 1) {
          goto LABEL_18;
        }
        switch(v29)
        {
          case 1u:
            goto LABEL_18;
          case 2u:
          case 9u:
          case 0xCu:
            break;
          case 4u:
            switch(v28)
            {
              case 4u:
              case 7u:
                goto LABEL_21;
              case 8u:
                goto LABEL_191;
              case 0xCu:
                goto LABEL_74;
              default:
                goto LABEL_88;
            }
          case 5u:
            switch(v28)
            {
              case 4u:
              case 7u:
                goto LABEL_21;
              case 8u:
                goto LABEL_191;
              case 0xCu:
                goto LABEL_74;
              default:
                goto LABEL_88;
            }
          case 6u:
            switch(v28)
            {
              case 4u:
              case 7u:
                goto LABEL_21;
              case 8u:
                goto LABEL_191;
              case 0xCu:
                goto LABEL_74;
              default:
                goto LABEL_88;
            }
          case 0xAu:
            int v37 = v28;
            if (v28 > 0xCu) {
              goto LABEL_88;
            }
            if (((1 << v28) & 0xCE0) == 0) {
              goto LABEL_73;
            }
            break;
          case 0xBu:
            int v37 = v28;
            if (v28 > 0xCu) {
              goto LABEL_88;
            }
            if (((1 << v28) & 0x8B0) != 0) {
              break;
            }
LABEL_73:
            if (v37 == 12) {
              goto LABEL_74;
            }
            if (v37 != 8) {
              goto LABEL_88;
            }
            goto LABEL_191;
          default:
            if (v28 == 7) {
              break;
            }
            if (v28 == 8)
            {
              if (v29 != 8) {
                goto LABEL_191;
              }
              if ((*((unsigned char *)v95 + v22) & 0xC0) == 0x80)
              {
                uint64_t v39 = v19;
                do
                  int v40 = v94[v39--] & 0xC0;
                while (v40 == 128);
                uint64_t v22 = v39 - 1;
              }
              _decodeScalar(_:startingAt:)((uint64_t)v95, v30, v22);
              uint64_t v41 = 0;
              while (1)
              {
                unsigned int v42 = specialized closure #1 in closure #1 in _StringGuts._opaqueCharacterStride(endingAt:in:)(v22, a2, (uint64_t)v95);
                if (v44) {
                  break;
                }
                uint64_t v22 = v43;
                if (Unicode._GraphemeBreakProperty.init(from:)(v42) != 8) {
                  break;
                }
                BOOL v45 = __OFADD__(v41++, 1);
                if (v45)
                {
                  __break(1u);
LABEL_199:
                  __break(1u);
                  JUMPOUT(0x1813D5FC4);
                }
              }
              if (v41) {
                goto LABEL_18;
              }
            }
            else
            {
              if (v28 == 12)
              {
                if (v29 == 3)
                {
                  if ((*((unsigned char *)v95 + v22) & 0xC0) == 0x80)
                  {
                    uint64_t v31 = v19;
                    do
                      int v32 = v94[v31--] & 0xC0;
                    while (v32 == 128);
                    uint64_t v22 = v31 - 1;
                  }
                  _decodeScalar(_:startingAt:)((uint64_t)v95, v30, v22);
                  do
                  {
                    unsigned int v33 = specialized closure #1 in closure #1 in _StringGuts._opaqueCharacterStride(endingAt:in:)(v22, a2, (uint64_t)v95);
                    if (v35) {
                      goto LABEL_18;
                    }
                    uint64_t v22 = v34;
                    int v36 = Unicode._GraphemeBreakProperty.init(from:)(v33);
                  }
                  while (v36 == 2);
                  if (v36 != 3) {
                    goto LABEL_18;
                  }
                  break;
                }
LABEL_74:
                if (!_swift_stdlib_isLinkingConsonant(v21)) {
                  goto LABEL_18;
                }
              }
              else
              {
LABEL_88:
                BOOL isLinkingConsonant = _swift_stdlib_isLinkingConsonant(v21);
                if (v28 != 12)
                {
                  if (v28 != 2) {
                    goto LABEL_18;
                  }
                  BOOL v47 = v18 > 0x2FF && isLinkingConsonant;
                  if (!v47
                    || !(_swift_stdlib_getNormData(v18) >> 3)
                    || (specialized _StringGuts.checkIfInIndicSequence(at:with:)(v19, a2, (uint64_t)v95) & 1) == 0)
                  {
                    goto LABEL_18;
                  }
                  break;
                }
                if (!isLinkingConsonant) {
                  goto LABEL_18;
                }
              }
              if ((*((unsigned char *)v95 + v22) & 0xC0) == 0x80)
              {
                uint64_t v48 = v19;
                do
                  int v49 = v94[v48--] & 0xC0;
                while (v49 == 128);
                uint64_t v22 = v48 - 1;
              }
              HIDWORD(v5_assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0, 0xE000000000000000, "Swift/StringRangeReplaceableCollection.swift", 44, 2, 0x168uLL, 0) = _decodeScalar(_:startingAt:)((uint64_t)v95, v38, v22) - 2381;
              LODWORD(v5_assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0, 0xE000000000000000, "Swift/StringRangeReplaceableCollection.swift", 44, 2, 0x168uLL, 0) = HIDWORD(v50);
              unsigned int v51 = ((v50 >> 7) < 9) & (0x15Bu >> (v50 >> 7));
              while (1)
              {
                unsigned int v52 = specialized closure #1 in closure #1 in _StringGuts._opaqueCharacterStride(endingAt:in:)(v22, a2, (uint64_t)v95);
                if (v54) {
                  goto LABEL_18;
                }
                unsigned int v55 = v52;
                uint64_t v22 = v53;
                char v56 = Unicode._GraphemeBreakProperty.init(from:)(v52);
                if (_swift_stdlib_isLinkingConsonant(v55)) {
                  break;
                }
                if (v56 != 12)
                {
                  if (v56 != 2 || v55 < 0x300 || !(_swift_stdlib_getNormData(v55) >> 3)) {
                    goto LABEL_18;
                  }
                  HIDWORD(v58) = v55 - 2381;
                  LODWORD(v58) = v55 - 2381;
                  unsigned int v57 = v58 >> 7;
                  if (v57 <= 8) {
                    v51 |= 0x15Bu >> v57;
                  }
                }
              }
              if ((v51 & 1) == 0) {
                goto LABEL_18;
              }
            }
            break;
        }
      }
      else
      {
        if (v29 > 0xCu) {
          goto LABEL_191;
        }
        if (((1 << v29) & 0x1204) == 0)
        {
          if (((1 << v29) & 3) == 0) {
LABEL_191:
          }
            _swift_stdlib_isLinkingConsonant(v21);
LABEL_18:
          uint64_t v6 = v93;
          return v6 - v19;
        }
      }
LABEL_21:
      uint64_t v19 = v14;
      if (v14 <= a2) {
        goto LABEL_18;
      }
    }
  }
  if ((a4 & 0x1000000000000000) != 0)
  {
    unint64_t v7 = (unsigned char *)((a5 & 0xFFFFFFFFFFFFFFFLL) + 32);
    if (a2 < a1) {
      goto LABEL_5;
    }
LABEL_198:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/StringGraphemeBreaking.swift", 34, 2, 0x2A1uLL, 0);
  }
  unint64_t v7 = _StringObject.sharedUTF8.getter(a4, a5);
  if (a2 >= v6) {
    goto LABEL_198;
  }
LABEL_5:
  Swift::UInt64 v8 = v7 - 1;
  uint64_t v9 = v6;
  do
    int v10 = v8[v9--] & 0xC0;
  while (v10 == 128);
  unsigned int v11 = _decodeScalar(_:startingAt:)((uint64_t)v7, a2, v9);
  if (v9 <= a2)
  {
    uint64_t v19 = v9;
    return v6 - v19;
  }
  unsigned int v13 = v11;
  while (1)
  {
    unsigned int v59 = v13;
    uint64_t v19 = v9--;
    if ((v7[v9] & 0xC0) == 0x80)
    {
      uint64_t v60 = v19;
      do
        int v61 = v7[v60-- - 2] & 0xC0;
      while (v61 == 128);
      uint64_t v9 = v60 - 1;
    }
    unsigned int v62 = _decodeScalar(_:startingAt:)((uint64_t)v7, v12, v9);
    unsigned int v13 = v62;
    if (v62 == 13 && v59 == 10) {
      goto LABEL_114;
    }
    int32x4_t v63 = vdupq_n_s32(v62);
    if (((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vcgtq_u32((uint32x4_t)xmmword_18162AEE0, (uint32x4_t)vaddq_s32(v63, (int32x4_t)xmmword_18162AED0)))) & 1) != 0|| v62 - 65281 < 0x9D|| (vaddvq_s32((int32x4_t)vandq_s8((int8x16_t)vcgtq_u32((uint32x4_t)vaddq_s32(v63, (int32x4_t)xmmword_18162AEA0), (uint32x4_t)xmmword_18162AEB0), (int8x16_t)xmmword_18162AEC0)) & 0xF) != 0|| v62 <= 0x2FF)&& ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vcgtq_u32((uint32x4_t)xmmword_18162AE90, (uint32x4_t)vaddq_s32(vdupq_n_s32(v59), (int32x4_t)xmmword_18162AE80)))) & 1) != 0|| v59 - 8208 < 0x1A|| v59 - 12288 < 0x2A|| v59 - 65281 < 0x9D|| v59 - 12439 > 0xFFFFFFA9|| v59 < 0x300
       || v59 - 42192 > 0xFFFF8F2F))
    {
      return v6 - v19;
    }
    unsigned __int8 v64 = Unicode._GraphemeBreakProperty.init(from:)(v62);
    unsigned __int8 v65 = Unicode._GraphemeBreakProperty.init(from:)(v59);
    if (!v64) {
      break;
    }
    if (v64 == 1) {
      return v6 - v19;
    }
    switch(v65)
    {
      case 1u:
        return v6 - v19;
      case 2u:
      case 9u:
      case 0xCu:
        break;
      case 4u:
        switch(v64)
        {
          case 4u:
          case 7u:
            goto LABEL_114;
          case 8u:
            goto LABEL_193;
          case 0xCu:
            goto LABEL_157;
          default:
            goto LABEL_168;
        }
      case 5u:
        switch(v64)
        {
          case 4u:
          case 7u:
            goto LABEL_114;
          case 8u:
            goto LABEL_193;
          case 0xCu:
            goto LABEL_157;
          default:
            goto LABEL_168;
        }
      case 6u:
        switch(v64)
        {
          case 4u:
          case 7u:
            goto LABEL_114;
          case 8u:
            goto LABEL_193;
          case 0xCu:
            goto LABEL_157;
          default:
            goto LABEL_168;
        }
      case 0xAu:
        int v72 = v64;
        if (v64 > 0xCu) {
          goto LABEL_168;
        }
        if (((1 << v64) & 0xCE0) == 0) {
          goto LABEL_156;
        }
        break;
      case 0xBu:
        int v72 = v64;
        if (v64 > 0xCu) {
          goto LABEL_168;
        }
        if (((1 << v64) & 0x8B0) != 0) {
          break;
        }
LABEL_156:
        if (v72 == 12) {
          goto LABEL_157;
        }
        if (v72 != 8) {
          goto LABEL_168;
        }
        goto LABEL_193;
      default:
        if (v64 == 7) {
          break;
        }
        if (v64 == 8)
        {
          uint64_t v73 = v19;
          if (v65 != 8) {
            goto LABEL_193;
          }
          do
            int v74 = v8[v73--] & 0xC0;
          while (v74 == 128);
          _decodeScalar(_:startingAt:)((uint64_t)v7, v12, v73);
          uint64_t v75 = 0;
          while (1)
          {
            unsigned int v76 = specialized closure #1 in closure #1 in _StringGuts._opaqueCharacterStride(endingAt:in:)(v73, a2, (uint64_t)v7);
            if (v77) {
              break;
            }
            uint64_t v73 = v12;
            if (Unicode._GraphemeBreakProperty.init(from:)(v76) != 8) {
              break;
            }
            BOOL v45 = __OFADD__(v75++, 1);
            if (v45) {
              goto LABEL_199;
            }
          }
          if (v75) {
            return v6 - v19;
          }
        }
        else
        {
          if (v64 == 12)
          {
            uint64_t v66 = v19;
            if (v65 == 3)
            {
              do
                int v67 = v8[v66--] & 0xC0;
              while (v67 == 128);
              _decodeScalar(_:startingAt:)((uint64_t)v7, v12, v66);
              do
              {
                unsigned int v68 = specialized closure #1 in closure #1 in _StringGuts._opaqueCharacterStride(endingAt:in:)(v66, a2, (uint64_t)v7);
                if (v70) {
                  return v6 - v19;
                }
                uint64_t v66 = v69;
                int v71 = Unicode._GraphemeBreakProperty.init(from:)(v68);
              }
              while (v71 == 2);
              if (v71 != 3) {
                return v6 - v19;
              }
              break;
            }
LABEL_157:
            if (!_swift_stdlib_isLinkingConsonant(v59)) {
              return v6 - v19;
            }
          }
          else
          {
LABEL_168:
            BOOL v78 = _swift_stdlib_isLinkingConsonant(v59);
            if (v64 != 12)
            {
              if (v64 != 2) {
                return v6 - v19;
              }
              BOOL v79 = v13 > 0x2FF && v78;
              if (!v79
                || !(_swift_stdlib_getNormData(v13) >> 3)
                || (specialized _StringGuts.checkIfInIndicSequence(at:with:)(v19, a2, (uint64_t)v7) & 1) == 0)
              {
                return v6 - v19;
              }
              break;
            }
            if (!v78) {
              return v6 - v19;
            }
          }
          int v80 = specialized closure #1 in closure #1 in _StringGuts._opaqueCharacterStride(endingAt:in:)(v19, a2, (uint64_t)v7);
          if (v82) {
            return v6 - v19;
          }
          uint64_t v83 = v81;
          uint64_t v93 = v6;
          HIDWORD(v84) = v80 - 2381;
          LODWORD(v84) = v80 - 2381;
          unsigned int v92 = ((v84 >> 7) < 9) & (0x15Bu >> (v84 >> 7));
          while (1)
          {
            unsigned int v85 = specialized closure #1 in closure #1 in _StringGuts._opaqueCharacterStride(endingAt:in:)(v83, a2, (uint64_t)v7);
            if (v87) {
              goto LABEL_18;
            }
            unsigned int v88 = v85;
            uint64_t v83 = v86;
            char v89 = Unicode._GraphemeBreakProperty.init(from:)(v85);
            if (_swift_stdlib_isLinkingConsonant(v88)) {
              break;
            }
            if (v89 != 12)
            {
              if (v89 != 2) {
                goto LABEL_18;
              }
              uint64_t v6 = v93;
              if (v88 < 0x300) {
                return v6 - v19;
              }
              if (!(_swift_stdlib_getNormData(v88) >> 3)) {
                goto LABEL_18;
              }
              HIDWORD(v91) = v88 - 2381;
              LODWORD(v91) = v88 - 2381;
              unsigned int v90 = v91 >> 7;
              if (v90 <= 8) {
                v92 |= 0x15Bu >> v90;
              }
            }
          }
          uint64_t v6 = v93;
          if ((v92 & 1) == 0) {
            return v6 - v19;
          }
        }
        break;
    }
LABEL_114:
    uint64_t v19 = v9;
    if (v9 <= a2) {
      return v6 - v19;
    }
  }
  if (v65 > 0xCu) {
    goto LABEL_193;
  }
  if (((1 << v65) & 0x1204) != 0) {
    goto LABEL_114;
  }
  if (((1 << v65) & 3) == 0) {
LABEL_193:
  }
    _swift_stdlib_isLinkingConsonant(v59);
  return v6 - v19;
}

uint64_t Substring.customMirror.getter@<X0>(Swift::String::Index a1@<X0>, Swift::String::Index a2@<X1>, unint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X8>)
{
  unint64_t v5 = a4;
  unint64_t v6 = a3;
  uint64_t v8 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000) == 0) {
    uint64_t v8 = a3 & 0xFFFFFFFFFFFFLL;
  }
  if (a1._rawBits >> 16 || a2._rawBits >> 16 != v8)
  {
    unint64_t v6 = specialized static String._copying(_:)(a1, a2, a3, a4);
    unint64_t v5 = v9;
  }
  else
  {
    swift_bridgeObjectRetain(a4);
  }

  return specialized Mirror.init<A, B>(_:unlabeledChildren:displayStyle:ancestorRepresentation:)(v6, v5, 8, 0, 0, a5);
}

uint64_t protocol witness for CustomReflectable.customMirror.getter in conformance Substring@<X0>(uint64_t a1@<X8>)
{
  return Substring.customMirror.getter((Swift::String::Index)v1->_rawBits, v1[1], v1[2]._rawBits, v1[3]._rawBits, a1);
}

uint64_t Substring.description.getter(Swift::String::Index a1, Swift::String::Index a2, unint64_t a3, unint64_t a4)
{
  unint64_t v4 = a3;
  uint64_t v5 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000) == 0) {
    uint64_t v5 = a3 & 0xFFFFFFFFFFFFLL;
  }
  if (a1._rawBits >> 16 || a2._rawBits >> 16 != v5) {
    return specialized static String._copying(_:)(a1, a2, a3, a4);
  }
  swift_bridgeObjectRetain(a4);
  return v4;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Substring()
{
  v1._Swift::UInt64 rawBits = *v0;
  v2._Swift::UInt64 rawBits = v0[1];
  return specialized String.init(_:)(v1, v2, v0[2], v0[3]);
}

void protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Substring()
{
}

uint64_t protocol witness for LosslessStringConvertible.init(_:) in conformance Substring@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = specialized Substring.init<A>(_:)();
  *a1 = result;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  return result;
}

uint64_t (*Substring.UTF8View._slice.modify())()
{
  return EnumeratedSequence._base.modify;
}

uint64_t Substring.UTF8View.subscript.getter(Swift::UInt64 rawBits, unint64_t a2, unint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v9 = (a4 >> 59) & 1;
  if ((a5 & 0x1000000000000000) == 0) {
    LOBYTE(v9) = 1;
  }
  if ((rawBits & 0xC) == 4 << v9) {
    Swift::UInt64 rawBits = _StringGuts._slowEnsureMatchingEncoding(_:)((Swift::String::Index)rawBits)._rawBits;
  }
  if (rawBits >> 14 < a2 >> 14 || rawBits >> 14 >= a3 >> 14) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index is out of bounds", 29, 2, "Swift/Substring.swift", 21, 2, 0x29BuLL, 0);
  }
  if ((a5 & 0x1000000000000000) != 0)
  {
    return String.UTF8View._foreignSubscript(position:)((Swift::String::Index)rawBits);
  }
  else if ((a5 & 0x2000000000000000) != 0)
  {
    v13[0] = a4;
    v13[1] = a5 & 0xFFFFFFFFFFFFFFLL;
    return *((unsigned __int8 *)v13 + (rawBits >> 16));
  }
  else
  {
    if ((a4 & 0x1000000000000000) != 0)
    {
      int v10 = (unsigned __int8 *)((a5 & 0xFFFFFFFFFFFFFFFLL) + 32);
    }
    else
    {
      Swift::UInt64 v12 = rawBits;
      int v10 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(a4, a5);
      Swift::UInt64 rawBits = v12;
    }
    return v10[rawBits >> 16];
  }
}

Swift::String::Index __swiftcall Substring.UTF8View.index(after:)(Swift::String::Index after)
{
  unint64_t v3 = v2;
  unint64_t v4 = v1;
  uint64_t v5 = (v1 >> 59) & 1;
  if ((v2 & 0x1000000000000000) == 0) {
    LOBYTE(v5) = 1;
  }
  if ((after._rawBits & 0xC) == 4 << v5)
  {
    after._Swift::UInt64 rawBits = _StringGuts._slowEnsureMatchingEncoding(_:)(after)._rawBits;
    if ((v3 & 0x1000000000000000) == 0) {
      return (Swift::String::Index)((after._rawBits & 0xFFFFFFFFFFFF0000) + 65540);
    }
  }
  else if ((v2 & 0x1000000000000000) == 0)
  {
    return (Swift::String::Index)((after._rawBits & 0xFFFFFFFFFFFF0000) + 65540);
  }
  Swift::UInt64 v7 = HIBYTE(v3) & 0xF;
  if ((v3 & 0x2000000000000000) == 0) {
    Swift::UInt64 v7 = v4 & 0xFFFFFFFFFFFFLL;
  }
  if (v7 <= after._rawBits >> 16) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index is out of bounds", 29, 2, "Swift/StringUTF8View.swift", 26, 2, 0x90uLL, 0);
  }

  return String.UTF8View._foreignIndex(after:)(after);
}

Swift::Void __swiftcall Substring.UTF8View.formIndex(after:)(Swift::String::Index *after)
{
  unint64_t v3 = v2;
  unint64_t v4 = v1;
  Swift::UInt64 rawBits = after->_rawBits;
  uint64_t v7 = (v1 >> 59) & 1;
  if ((v2 & 0x1000000000000000) == 0) {
    LOBYTE(v7) = 1;
  }
  if ((rawBits & 0xC) == 4 << v7)
  {
    Swift::UInt64 rawBits = _StringGuts._slowEnsureMatchingEncoding(_:)((Swift::String::Index)rawBits)._rawBits;
    if ((v3 & 0x1000000000000000) == 0) {
      goto LABEL_5;
    }
  }
  else if ((v2 & 0x1000000000000000) == 0)
  {
LABEL_5:
    unint64_t v8 = (rawBits & 0xFFFFFFFFFFFF0000) + 65540;
    goto LABEL_6;
  }
  unint64_t v9 = HIBYTE(v3) & 0xF;
  if ((v3 & 0x2000000000000000) == 0) {
    unint64_t v9 = v4 & 0xFFFFFFFFFFFFLL;
  }
  if (v9 <= rawBits >> 16) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index is out of bounds", 29, 2, "Swift/StringUTF8View.swift", 26, 2, 0x90uLL, 0);
  }
  unint64_t v8 = String.UTF8View._foreignIndex(after:)((Swift::String::Index)rawBits)._rawBits;
LABEL_6:
  after->_Swift::UInt64 rawBits = v8;
}