uint64_t min<A>(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  char v9;
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  uint64_t vars8;

  v9 = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 16))(a2, a1);
  v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a3 - 8) + 16);
  if (v9) {
    v11 = a2;
  }
  else {
    v11 = a1;
  }

  return v10(a5, v11, a3);
}

Swift::Int min<A>(_:_:_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, Swift::Int a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X4>, uint64_t a6@<X5>, char *a7@<X8>)
{
  Swift::Int v58 = a3;
  uint64_t v61 = a2;
  v64 = a7;
  uint64_t v11 = *(a5 - 1);
  uint64_t v12 = MEMORY[0x1F4188790](a1);
  v14 = (char *)&v53 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = MEMORY[0x1F4188790](v12);
  v17 = (char *)&v53 - v16;
  uint64_t v18 = MEMORY[0x1F4188790](v15);
  v63 = (char *)&v53 - v19;
  uint64_t v54 = v20;
  MEMORY[0x1F4188790](v18);
  v22 = (char *)&v53 - v21;
  uint64_t v25 = v23 + 16;
  v24 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v23 + 16);
  char v28 = v24(v26, a1, v27, v23);
  v29 = *(void (**)(char *, uint64_t, uint64_t *))(v11 + 16);
  if (v28) {
    uint64_t v30 = v61;
  }
  else {
    uint64_t v30 = a1;
  }
  v65 = *(void (**)(char *, unint64_t, uint64_t *))(v11 + 16);
  v29(v22, v30, a5);
  uint64_t v60 = v25;
  uint64_t v61 = a6;
  v59 = (uint64_t (*)(char *, uint64_t, uint64_t *, uint64_t))v24;
  char v31 = v24(v58, (uint64_t)v22, (uint64_t)a5, a6);
  v32 = v64;
  uint64_t v62 = v11 + 16;
  if (v31)
  {
    (*(void (**)(char *, uint64_t *))(v11 + 8))(v22, a5);
    v33 = v65;
    v65(v32, v58, a5);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t *))(v11 + 32))(v64, v22, a5);
    v33 = v65;
  }
  Swift::Int result = Array._getCount()();
  v35 = v63;
  Swift::Int v58 = result;
  if (result)
  {
    unint64_t v36 = 0;
    v56 = v14;
    unint64_t v57 = a4 & 0xC000000000000001;
    v37 = (void **)(v11 + 32);
    v55 = (void (**)(uint64_t, uint64_t *))(v11 + 8);
    do
    {
      BOOL v39 = v57 == 0;
      char v40 = v39 | ~_swift_isClassOrObjCExistentialType((uint64_t)a5, a5);
      Array._checkSubscript(_:wasNativeTypeChecked:)(v36, v40 & 1);
      if (v40)
      {
        v41 = v33;
        uint64_t v42 = a4;
        v41(v17, a4+ ((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80))+ *(void *)(v11 + 72) * v36, a5);
      }
      else
      {
        id v52 = _ArrayBuffer._getElementSlowPath(_:)(v36, a4, a5);
        v43 = v52;
        if (v54 != 8) {
          goto LABEL_20;
        }
        uint64_t v42 = a4;
        id v66 = v52;
        v65(v17, (unint64_t)&v66, a5);
        swift_unknownObjectRelease(v43);
      }
      v43 = *v37;
      ((void (*)(char *, char *, uint64_t *))*v37)(v35, v17, a5);
      unint64_t v44 = v36 + 1;
      if (__OFADD__(v36, 1))
      {
        __break(1u);
LABEL_20:
        swift_unknownObjectRelease(v43);
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't unsafeBitCast between types of different sizes", 52, 2, "Swift/Builtin.swift", 19, 2, 0x5FuLL, 0);
      }
      v45 = v35;
      v46 = v14;
      v47 = v17;
      uint64_t v48 = v11;
      ((void (*)(char *, char *, uint64_t *))v43)(v46, v45, a5);
      v49 = v64;
      char v50 = v59(v46, (uint64_t)v64, a5, v61);
      v51 = *v55;
      if (v50)
      {
        v51((uint64_t)v49, a5);
        Swift::Int result = ((uint64_t (*)(char *, char *, uint64_t *))v43)(v49, v46, a5);
      }
      else
      {
        Swift::Int result = ((uint64_t (*)(char *, uint64_t *))v51)(v46, a5);
      }
      uint64_t v11 = v48;
      ++v36;
      BOOL v38 = v44 == v58;
      a4 = v42;
      v17 = v47;
      v14 = v56;
      v35 = v63;
      v33 = v65;
    }
    while (!v38);
  }
  return result;
}

uint64_t Collection<>.makeIterator()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (int **)a2, a1, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  uint64_t v8 = *((void *)AssociatedTypeWitness - 1);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  v10 = (char *)&v15 - v9;
  uint64_t v11 = *(void *)(a1 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16))(a3, v3, a1);
  (*(void (**)(uint64_t, uint64_t))(a2 + 64))(a1, a2);
  (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v3, a1);
  uint64_t v13 = type metadata accessor for IndexingIterator(0, a1, a2, v12);
  return (*(uint64_t (**)(uint64_t, char *, const char *))(v8 + 32))(a3 + *((int *)v13 + 9), v10, AssociatedTypeWitness);
}

uint64_t IndexingIterator.next()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v4 = a1;
  uint64_t v32 = a2;
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v31 = *(void *)(v5 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](a1);
  uint64_t v30 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *(void *)(v6 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (int **)v8, v5, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  uint64_t v10 = *((void *)AssociatedTypeWitness - 1);
  uint64_t v11 = MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v13 = (char *)&v29 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11);
  uint64_t v15 = (char *)&v29 - v14;
  uint64_t v16 = v3 + *(int *)(v4 + 36);
  (*(void (**)(char *, uint64_t, const char *))(v10 + 16))((char *)&v29 - v14, v16, AssociatedTypeWitness);
  (*(void (**)(uint64_t, uint64_t))(v8 + 72))(v5, v8);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v8, v5, (uint64_t)AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Collection, associated conformance descriptor for Collection.Collection.Index: Comparable);
  LOBYTE(v4) = (*(uint64_t (**)(char *, char *, const char *))(*(void *)(AssociatedConformanceWitness + 8)
                                                                       + 8))(v15, v13, AssociatedTypeWitness);
  uint64_t v18 = *(void (**)(char *, const char *))(v10 + 8);
  v18(v13, AssociatedTypeWitness);
  v18(v15, AssociatedTypeWitness);
  if (v4)
  {
    uint64_t v19 = swift_getAssociatedTypeWitness(0, *(int ***)(v8 + 8), v5, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, const char *))(*((void *)v19 - 1) + 56))(v32, 1, 1, v19);
  }
  else
  {
    uint64_t v21 = (void (*)(unsigned char *, void))(*(uint64_t (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v8 + 80))(v33, v16, v5, v8);
    uint64_t v23 = v22;
    v24 = swift_getAssociatedTypeWitness(0, *(int ***)(v8 + 8), v5, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
    uint64_t v25 = *((void *)v24 - 1);
    uint64_t v26 = v32;
    (*(void (**)(uint64_t, uint64_t, const char *))(v25 + 16))(v32, v23, v24);
    v21(v33, 0);
    char v28 = v30;
    uint64_t v27 = v31;
    (*(void (**)(char *, uint64_t, uint64_t))(v31 + 16))(v30, v3, v5);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 192))(v16, v5, v8);
    (*(void (**)(char *, uint64_t))(v27 + 8))(v28, v5);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, const char *))(v25 + 56))(v26, 0, 1, v24);
  }
}

uint64_t max<A>(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  char v9 = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 32))(a2, a1);
  uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a3 - 8) + 16);
  if (v9) {
    uint64_t v11 = a2;
  }
  else {
    uint64_t v11 = a1;
  }

  return v10(a5, v11, a3);
}

Swift::Int max<A>(_:_:_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, Swift::Int a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X4>, uint64_t a6@<X5>, char *a7@<X8>)
{
  Swift::Int v58 = a3;
  uint64_t v61 = a2;
  v64 = a7;
  uint64_t v11 = *(a5 - 1);
  uint64_t v12 = MEMORY[0x1F4188790](a1);
  uint64_t v14 = (char *)&v53 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = MEMORY[0x1F4188790](v12);
  v17 = (char *)&v53 - v16;
  uint64_t v18 = MEMORY[0x1F4188790](v15);
  v63 = (char *)&v53 - v19;
  uint64_t v54 = v20;
  MEMORY[0x1F4188790](v18);
  uint64_t v22 = (char *)&v53 - v21;
  uint64_t v25 = v23 + 32;
  v24 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v23 + 32);
  char v28 = v24(v26, a1, v27, v23);
  uint64_t v29 = *(void (**)(char *, uint64_t, uint64_t *))(v11 + 16);
  if (v28) {
    uint64_t v30 = v61;
  }
  else {
    uint64_t v30 = a1;
  }
  v65 = *(void (**)(char *, unint64_t, uint64_t *))(v11 + 16);
  v29(v22, v30, a5);
  uint64_t v60 = v25;
  uint64_t v61 = a6;
  v59 = (uint64_t (*)(char *, uint64_t, uint64_t *, uint64_t))v24;
  char v31 = v24(v58, (uint64_t)v22, (uint64_t)a5, a6);
  uint64_t v32 = v64;
  uint64_t v62 = v11 + 16;
  if (v31)
  {
    (*(void (**)(char *, uint64_t *))(v11 + 8))(v22, a5);
    v33 = v65;
    v65(v32, v58, a5);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t *))(v11 + 32))(v64, v22, a5);
    v33 = v65;
  }
  Swift::Int result = Array._getCount()();
  v35 = v63;
  Swift::Int v58 = result;
  if (result)
  {
    unint64_t v36 = 0;
    v56 = v14;
    unint64_t v57 = a4 & 0xC000000000000001;
    v37 = (void **)(v11 + 32);
    v55 = (void (**)(uint64_t, uint64_t *))(v11 + 8);
    do
    {
      BOOL v39 = v57 == 0;
      char v40 = v39 | ~_swift_isClassOrObjCExistentialType((uint64_t)a5, a5);
      Array._checkSubscript(_:wasNativeTypeChecked:)(v36, v40 & 1);
      if (v40)
      {
        v41 = v33;
        uint64_t v42 = a4;
        v41(v17, a4+ ((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80))+ *(void *)(v11 + 72) * v36, a5);
      }
      else
      {
        id v52 = _ArrayBuffer._getElementSlowPath(_:)(v36, a4, a5);
        v43 = v52;
        if (v54 != 8) {
          goto LABEL_20;
        }
        uint64_t v42 = a4;
        id v66 = v52;
        v65(v17, (unint64_t)&v66, a5);
        swift_unknownObjectRelease(v43);
      }
      v43 = *v37;
      ((void (*)(char *, char *, uint64_t *))*v37)(v35, v17, a5);
      unint64_t v44 = v36 + 1;
      if (__OFADD__(v36, 1))
      {
        __break(1u);
LABEL_20:
        swift_unknownObjectRelease(v43);
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't unsafeBitCast between types of different sizes", 52, 2, "Swift/Builtin.swift", 19, 2, 0x5FuLL, 0);
      }
      v45 = v35;
      v46 = v14;
      v47 = v17;
      uint64_t v48 = v11;
      ((void (*)(char *, char *, uint64_t *))v43)(v46, v45, a5);
      v49 = v64;
      char v50 = v59(v46, (uint64_t)v64, a5, v61);
      v51 = *v55;
      if (v50)
      {
        v51((uint64_t)v49, a5);
        Swift::Int result = ((uint64_t (*)(char *, char *, uint64_t *))v43)(v49, v46, a5);
      }
      else
      {
        Swift::Int result = ((uint64_t (*)(char *, uint64_t *))v51)(v46, a5);
      }
      uint64_t v11 = v48;
      ++v36;
      BOOL v38 = v44 == v58;
      a4 = v42;
      v17 = v47;
      uint64_t v14 = v56;
      v35 = v63;
      v33 = v65;
    }
    while (!v38);
  }
  return result;
}

uint64_t (*EnumeratedSequence._base.modify())()
{
  return EnumeratedSequence._base.modify;
}

uint64_t EnumeratedSequence.Iterator._base.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return LazyFilterSequence.Iterator.base.getter(a1, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Iterator, a2);
}

uint64_t EnumeratedSequence.Iterator._base.setter(uint64_t a1, uint64_t a2)
{
  return EnumeratedSequence.Iterator._base.setter(a1, a2, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Iterator);
}

uint64_t (*EnumeratedSequence.Iterator._base.modify())()
{
  return EnumeratedSequence._base.modify;
}

uint64_t (*EnumeratedSequence.Iterator._count.modify())()
{
  return EnumeratedSequence._base.modify;
}

Class *EnumeratedSequence.Iterator.init(_base:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int **a3@<X2>, uint64_t a4@<X8>)
{
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, a3, a2, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Iterator);
  (*(void (**)(uint64_t, uint64_t, const char *))(*((void *)AssociatedTypeWitness - 1) + 32))(a4, a1, AssociatedTypeWitness);
  Swift::Int result = type metadata accessor for EnumeratedSequence.Iterator(0, a2, (uint64_t)a3, v9);
  *(void *)(a4 + *((int *)result + 9)) = 0;
  return result;
}

uint64_t Int.init(_builtinIntegerLiteral:)(uint64_t a1, unint64_t a2)
{
  if (a2 >> 8 <= 0x40) {
    return *(void *)a1;
  }
  else {
    return 0;
  }
}

uint64_t EnumeratedSequence.Iterator.next()@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v32 = a2;
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v3 = *(int ***)(a1 + 24);
  uint64_t v30 = a1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v3, v4, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0, (uint64_t)&type metadata for Int, (uint64_t)AssociatedTypeWitness, "offset element ", 0);
  uint64_t v31 = *(TupleTypeMetadata2 - 1);
  MEMORY[0x1F4188790](TupleTypeMetadata2);
  uint64_t v29 = (char *)&v28 - v6;
  char v28 = type metadata accessor for Optional(0, (uint64_t)AssociatedTypeWitness, v7, v8);
  uint64_t v9 = (uint64_t)*(v28 - 1);
  uint64_t v10 = MEMORY[0x1F4188790](v28);
  uint64_t v12 = (char *)&v28 - v11;
  uint64_t v13 = *((void *)AssociatedTypeWitness - 1);
  MEMORY[0x1F4188790](v10);
  uint64_t v15 = (char *)&v28 - v14;
  uint64_t v16 = swift_getAssociatedTypeWitness(255, v3, v4, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Iterator);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness((uint64_t)v3, v4, (uint64_t)v16, (uint64_t)&protocol requirements base descriptor for Sequence, associated conformance descriptor for Sequence.Sequence.Iterator: IteratorProtocol);
  uint64_t v18 = *(void (**)(uint64_t *, uint64_t))(AssociatedConformanceWitness + 16);
  uint64_t v19 = swift_checkMetadataState(0, (uint64_t)v16);
  v18(v19, AssociatedConformanceWitness);
  if ((*(unsigned int (**)(char *, uint64_t, const char *))(v13 + 48))(v12, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, Class *))(v9 + 8))(v12, v28);
    return (*(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t *))(v31 + 56))(v32, 1, 1, TupleTypeMetadata2);
  }
  else
  {
    uint64_t v21 = v32;
    uint64_t v22 = *(void (**)(char *, char *, const char *))(v13 + 32);
    v22(v15, v12, AssociatedTypeWitness);
    uint64_t v23 = TupleTypeMetadata2;
    v24 = &v29[*((int *)TupleTypeMetadata2 + 12)];
    uint64_t v25 = *(int *)(v30 + 36);
    uint64_t v26 = *(void *)(v2 + v25);
    uint64_t result = ((uint64_t (*)(char *, char *, const char *))v22)(v24, v15, AssociatedTypeWitness);
    if (__OFADD__(v26, 1))
    {
      __break(1u);
    }
    else
    {
      *(void *)(v2 + v25) = v26 + 1;
      uint64_t v27 = (char *)v21 + *((int *)v23 + 12);
      *uint64_t v21 = v26;
      v22(v27, v24, AssociatedTypeWitness);
      return (*(uint64_t (**)(void *, void, uint64_t, uint64_t *))(v31 + 56))(v21, 0, 1, v23);
    }
  }
  return result;
}

void *static Int.+= infix(_:_:)(void *result, uint64_t a2)
{
  if (__OFADD__(*result, a2)) {
    __break(1u);
  }
  else {
    *result += a2;
  }
  return result;
}

uint64_t Sequence<>.makeIterator()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a1 - 8) + 32))(a2, v2, a1);
}

uint64_t protocol witness for Sequence.underestimatedCount.getter in conformance EnumeratedSequence<A>.Iterator()
{
  return 0;
}

uint64_t Sequence.underestimatedCount.getter()
{
  return 0;
}

uint64_t protocol witness for Sequence._customContainsEquatableElement(_:) in conformance EnumeratedSequence<A>.Iterator()
{
  return 2;
}

uint64_t Sequence._customContainsEquatableElement(_:)()
{
  return 2;
}

uint64_t Sequence._copyToContiguousArray()(uint64_t a1, uint64_t a2)
{
  return Sequence._copyToContiguousArray()(a1, a2, specialized Sequence._copyToContiguousArray());
}

{
  uint64_t v2;
  uint64_t v4;

  uint64_t v4 = specialized Sequence._copyToContiguousArray()(v2, a1, a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a1 - 8) + 8))(v2, a1);
  return v4;
}

uint64_t protocol witness for Sequence.withContiguousStorageIfAvailable<A>(_:) in conformance EnumeratedSequence<A>.Iterator@<X0>(uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  return Sequence.withContiguousStorageIfAvailable<A>(_:)(a1, a2);
}

uint64_t _sSTsE32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lySuqd__Isgyrzo_s4Int8V5WordsVABsAG_pAKRszr__lIetMgyrzo_Tpq5Tm@<X0>(uint64_t a1@<X3>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a1 - 8) + 56))(a2, 1, 1);
}

uint64_t _sSTsE32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lySuqd__Isgyrzo_s7UInt128V5WordsVABsAG_pAKRszr__lIetMgyrzo_Tpq5@<X0>(uint64_t a1@<X4>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a1 - 8) + 56))(a2, 1, 1, a1);
}

uint64_t _sSTsE32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lys7UnicodeO6ScalarVqd__Isgyrzo_Ss0hI4ViewVABsAG_pAMRszr__lIetMggrzo_Tpq5Tm@<X0>(uint64_t a1@<X6>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a1 - 8) + 56))(a2, 1, 1, a1);
}

uint64_t Sequence.withContiguousStorageIfAvailable<A>(_:)@<X0>(uint64_t a1@<X3>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a1 - 8) + 56))(a2, 1, 1);
}

Class *EnumeratedSequence.makeIterator()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *(void *)(a1 + 16);
  MEMORY[0x1F4188790](a1);
  (*(void (**)(char *))(v6 + 32))((char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v7 = *(void *)(a1 + 24);
  (*(void (**)(uint64_t, uint64_t))(v7 + 32))(v4, v7);
  uint64_t result = type metadata accessor for EnumeratedSequence.Iterator(0, v4, v7, v8);
  *(void *)(a2 + *((int *)result + 9)) = 0;
  return result;
}

uint64_t _ArrayBody._storage.setter(uint64_t result, uint64_t a2)
{
  *uint64_t v2 = result;
  v2[1] = a2;
  return result;
}

uint64_t (*_ArrayBody._storage.modify())()
{
  return EnumeratedSequence._base.modify;
}

Swift::Bool __swiftcall Bool.init(_builtinBooleanLiteral:)(Builtin::Int1 _builtinBooleanLiteral)
{
  return _builtinBooleanLiteral;
}

Swift::_ArrayBody __swiftcall _ArrayBody.init(count:capacity:elementTypeIsBridgedVerbatim:)(Swift::Int count, Swift::Int capacity, Swift::Bool elementTypeIsBridgedVerbatim)
{
  Swift::UInt v3 = elementTypeIsBridgedVerbatim | (unint64_t)(2 * capacity);
  result._storage._capacityAndFlags = v3;
  result._storage.count = count;
  return result;
}

BOOL static Int.>= infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return a1 >= a2;
}

uint64_t UInt.init(_builtinIntegerLiteral:)(uint64_t a1, unint64_t a2)
{
  if (a2 >> 9 <= 0x20 && (a2 & 1) == 0) {
    return *(void *)a1;
  }
  else {
    return 0;
  }
}

uint64_t FixedWidthInteger.init<A>(truncatingIfNeeded:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  if ((*(uint64_t (**)(uint64_t, uint64_t))(a4 + 56))(a2, a4) <= 64)
  {
    uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t))(a5 + 120))(a3, a5);
    (*(void (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 8))(a1, a3);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a4 + 136))(v14, a2, a4);
  }
  else
  {
    static FixedWidthInteger._truncatingInit<A>(_:)(a1, a2, a3, a4, a5, a6);
    uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 8);
    return v12(a1, a3);
  }
}

uint64_t static UInt.| infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return a2 | a1;
}

Swift::_ArrayBody __swiftcall _ArrayBody.init()()
{
  Swift::Int v0 = 0;
  Swift::UInt v1 = 0;
  result._storage._capacityAndFlags = v1;
  result._storage.count = v0;
  return result;
}

void *key path getter for _ArrayBody.count : _ArrayBody@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *result;
  return result;
}

void *key path setter for _ArrayBody.count : _ArrayBody(void *result, void *a2)
{
  *a2 = *result;
  return result;
}

uint64_t _ArrayBody.count.setter(uint64_t result)
{
  *Swift::UInt v1 = result;
  return result;
}

uint64_t (*_ArrayBody.count.modify(void *a1))(uint64_t result)
{
  *a1 = *v1;
  a1[1] = v1;
  return _ArrayBody.count.modify;
}

uint64_t _ArrayBody.count.modify(uint64_t result)
{
  **(void **)(result + 8) = *(void *)result;
  return result;
}

unint64_t _ArrayBody.capacity.getter(uint64_t a1, unint64_t a2)
{
  return a2 >> 1;
}

uint64_t _ArrayBody._capacityAndFlags.getter(uint64_t a1, uint64_t a2)
{
  return a2;
}

unint64_t static UInt.&>> infix(_:_:)(unint64_t a1, char a2)
{
  return a1 >> a2;
}

uint64_t SignedInteger<>.init<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X5>, uint64_t a6@<X8>)
{
  uint64_t v179 = a6;
  uint64_t v185 = *(void *)(a4 + 8);
  v170 = *(int ***)(*(void *)(v185 + 24) + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v170, a2, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, associated type descriptor for ExpressibleByIntegerLiteral.IntegerLiteralType);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  v168 = (char *)v157 - v11;
  v167 = *(int ***)(a5[3] + 16);
  v166 = swift_getAssociatedTypeWitness(0, v167, a3, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, associated type descriptor for ExpressibleByIntegerLiteral.IntegerLiteralType);
  uint64_t v12 = MEMORY[0x1F4188790](v166);
  v165 = (char *)v157 - v13;
  uint64_t v174 = *(void *)(a2 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  v171 = (char *)v157 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = MEMORY[0x1F4188790](v14);
  v163 = (char *)v157 - v17;
  uint64_t v18 = MEMORY[0x1F4188790](v16);
  v175 = (char *)v157 - v19;
  uint64_t v20 = MEMORY[0x1F4188790](v18);
  v159 = (char *)v157 - v21;
  uint64_t v22 = MEMORY[0x1F4188790](v20);
  v164 = (char *)v157 - v23;
  uint64_t v24 = MEMORY[0x1F4188790](v22);
  v173 = (char *)v157 - v25;
  uint64_t v26 = MEMORY[0x1F4188790](v24);
  v177 = (char *)v157 - v27;
  uint64_t v28 = *(void *)(a3 - 8);
  uint64_t v29 = MEMORY[0x1F4188790](v26);
  v161 = (char *)v157 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = MEMORY[0x1F4188790](v29);
  v162 = (char *)v157 - v32;
  uint64_t v33 = MEMORY[0x1F4188790](v31);
  v35 = (char *)v157 - v34;
  uint64_t v36 = MEMORY[0x1F4188790](v33);
  v181 = (char *)v157 - v37;
  uint64_t v38 = MEMORY[0x1F4188790](v36);
  v160 = (char *)v157 - v39;
  uint64_t v40 = MEMORY[0x1F4188790](v38);
  v158 = (char *)v157 - v41;
  uint64_t v42 = MEMORY[0x1F4188790](v40);
  v178 = (char *)v157 - v43;
  uint64_t v44 = MEMORY[0x1F4188790](v42);
  v172 = (char *)v157 - v45;
  MEMORY[0x1F4188790](v44);
  v47 = (char *)v157 - v46;
  v183 = (uint64_t (*)(uint64_t, void *))a5[8];
  v184 = a5 + 8;
  char v48 = v183(a3, a5);
  v49 = *(void (**)(char *, uint64_t, uint64_t))(v28 + 16);
  uint64_t v192 = v28 + 16;
  uint64_t v193 = a1;
  v191 = v49;
  v49(v47, a1, a3);
  uint64_t v187 = a4;
  uint64_t v188 = v28;
  v176 = v35;
  uint64_t v182 = a2;
  if ((v48 & 1) == 0)
  {
    v190 = *(void (**)(char *, uint64_t))(v28 + 8);
    v190(v47, a3);
    Swift::Int v58 = (uint64_t (*)(uint64_t, void *))a5[16];
    uint64_t v65 = (unint64_t)(a5 + 16) & 0xFFFFFFFFFFFFLL | 0x47B5000000000000;
    id v52 = a5;
    goto LABEL_22;
  }
  char v50 = (uint64_t (*)(uint64_t, void *))a5[16];
  uint64_t v186 = (unint64_t)(a5 + 16) & 0xFFFFFFFFFFFFLL | 0x47B5000000000000;
  v189 = v50;
  uint64_t v51 = v50(a3, a5);
  v190 = *(void (**)(char *, uint64_t))(v28 + 8);
  v157[1] = v28 + 8;
  v190(v47, a3);
  id v52 = a5;
  if ((*(uint64_t (**)(uint64_t, uint64_t))(a4 + 56))(a2, a4) < v51)
  {
    uint64_t v53 = v172;
    v191(v172, v193, a3);
    (*(void (**)(uint64_t, uint64_t))(a4 + 72))(a2, a4);
    uint64_t v54 = v183;
    int v55 = v183(a3, v52);
    uint64_t v56 = v185;
    if ((v55 ^ (*(unsigned int (**)(uint64_t, uint64_t))(v185 + 64))(a2, v185)))
    {
      char v57 = v54(a3, v52);
      Swift::Int v58 = v189;
      uint64_t v59 = v189(a3, v52);
      uint64_t v60 = v177;
      uint64_t v61 = (*(uint64_t (**)(uint64_t, uint64_t))(v56 + 128))(a2, v56);
      if (v57)
      {
        if (v61 < v59)
        {
          uint64_t v62 = v178;
          ((void (*)(char *, uint64_t, uint64_t, uint64_t, void *))v52[12])(v60, a2, v185, a3, v52);
          v63 = v172;
          char v64 = (*(uint64_t (**)(char *, char *, uint64_t))(*(void *)(v52[4] + 8) + 16))(v172, v62, a3);
          goto LABEL_15;
        }
        v78 = v167;
        v79 = v166;
        uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness((uint64_t)v167, a3, (uint64_t)v166, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
        v81 = v165;
        (*(void (**)(void *, uint64_t, const char *, uint64_t))(AssociatedConformanceWitness + 8))(&unk_18162B0B8, 256, v79, AssociatedConformanceWitness);
        v82 = v178;
        ((void (*)(char *, uint64_t, int **))v78[3])(v81, a3, v78);
        v63 = v172;
        LOBYTE(v79) = (*(uint64_t (**)(char *, char *, uint64_t))(*(void *)(v52[4] + 8) + 16))(v172, v82, a3);
        v190(v82, a3);
        v83 = v158;
        v191(v158, (uint64_t)v63, a3);
        uint64_t v84 = v174;
        (*(void (**)(char *, char *, uint64_t))(v174 + 32))(v164, v60, a2);
        uint64_t v85 = v185;
        if (v79)
        {
          (*(void (**)(char *, uint64_t))(v84 + 8))(v164, a2);
          v190(v83, a3);
          goto LABEL_49;
        }
        v86 = v173;
        (*(void (**)(char *, uint64_t, void *, uint64_t, uint64_t))(v185 + 96))(v83, a3, v52, a2, v185);
        char v72 = (*(uint64_t (**)(char *, char *, uint64_t))(*(void *)(*(void *)(v85 + 32) + 8) + 16))(v86, v164, a2);
        v73 = *(void (**)(char *, uint64_t))(v84 + 8);
        v73(v86, a2);
        v74 = v164;
LABEL_19:
        v73(v74, a2);
        Swift::Int v58 = v189;
        v77 = v190;
        if (v72) {
          goto LABEL_49;
        }
LABEL_20:
        v77(v63, a3);
        goto LABEL_21;
      }
      if (v59 >= v61)
      {
        v143 = v170;
        v144 = AssociatedTypeWitness;
        uint64_t v145 = swift_getAssociatedConformanceWitness((uint64_t)v170, a2, (uint64_t)AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
        v146 = v168;
        (*(void (**)(void *, uint64_t, const char *, uint64_t))(v145 + 8))(&unk_18162B0B8, 256, v144, v145);
        v147 = v173;
        ((void (*)(char *, uint64_t, int **))v143[3])(v146, a2, v143);
        uint64_t v148 = v185;
        LODWORD(v164) = (*(uint64_t (**)(char *, char *, uint64_t))(*(void *)(*(void *)(v185 + 32) + 8)
                                                                           + 40))(v60, v147, a2);
        uint64_t v149 = v174;
        v150 = *(void (**)(char *, uint64_t))(v174 + 8);
        v150(v147, a2);
        v63 = v172;
        v191(v160, (uint64_t)v172, a3);
        v151 = v159;
        (*(void (**)(char *, char *, uint64_t))(v149 + 32))(v159, v60, a2);
        if ((v164 & 1) == 0)
        {
          v150(v151, a2);
          v156 = v190;
          v190(v160, a3);
          Swift::Int v58 = v189;
          v156(v63, a3);
          goto LABEL_21;
        }
        v152 = v178;
        ((void (*)(char *, uint64_t, uint64_t, uint64_t, void *))v52[12])(v151, a2, v148, a3, v52);
        v153 = v160;
        char v154 = (*(uint64_t (**)(char *, char *, uint64_t))(*(void *)(v52[4] + 8) + 16))(v160, v152, a3);
        v155 = v152;
        v77 = v190;
        v190(v155, a3);
        v77(v153, a3);
        Swift::Int v58 = v189;
        if (v154) {
          goto LABEL_49;
        }
        goto LABEL_20;
      }
      v70 = v178;
      v63 = v172;
      v191(v178, (uint64_t)v172, a3);
      uint64_t v71 = v185;
      v68 = v173;
      (*(void (**)(char *, uint64_t, void *, uint64_t, uint64_t))(v185 + 96))(v70, a3, v52, a2, v185);
      char v69 = (*(uint64_t (**)(char *, char *, uint64_t))(*(void *)(*(void *)(v71 + 32) + 8) + 16))(v68, v60, a2);
    }
    else
    {
      Swift::Int v58 = v189;
      uint64_t v66 = v189(a3, v52);
      v63 = v53;
      if (v66 >= (*(uint64_t (**)(uint64_t, uint64_t))(v56 + 128))(a2, v56))
      {
        uint64_t v62 = v178;
        ((void (*)(char *, uint64_t, uint64_t, uint64_t, void *))v52[12])(v177, a2, v56, a3, v52);
        char v64 = (*(uint64_t (**)(char *, char *, uint64_t))(*(void *)(v52[4] + 8) + 16))(v53, v62, a3);
LABEL_15:
        char v75 = v64;
        v76 = v62;
        v77 = v190;
        v190(v76, a3);
        if (v75) {
LABEL_49:
        }
          _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Not enough bits to represent a signed value", 43, 2, "Swift/Integers.swift", 20, 2, 0xE61uLL, 0);
        goto LABEL_20;
      }
      v67 = v178;
      v191(v178, (uint64_t)v53, a3);
      v68 = v173;
      (*(void (**)(char *, uint64_t, void *, uint64_t, uint64_t))(v56 + 96))(v67, a3, v52, a2, v56);
      uint64_t v60 = v177;
      char v69 = (*(uint64_t (**)(char *, char *, uint64_t))(*(void *)(*(void *)(v56 + 32) + 8) + 16))(v68, v177, a2);
    }
    char v72 = v69;
    v73 = *(void (**)(char *, uint64_t))(v174 + 8);
    v73(v68, a2);
    v74 = v60;
    goto LABEL_19;
  }
  Swift::Int v58 = v189;
LABEL_21:
  uint64_t v65 = v186;
LABEL_22:
  v180 = v52;
  uint64_t v87 = v193;
  uint64_t v88 = v58(a3, v52);
  uint64_t v89 = v187;
  uint64_t v90 = v182;
  v177 = *(char **)(v187 + 56);
  uint64_t v91 = ((uint64_t (*)(uint64_t, uint64_t))v177)(v182, v187);
  v92 = v181;
  v191(v181, v87, a3);
  v189 = v58;
  uint64_t v186 = v65;
  if (v91 < v88)
  {
    v190(v92, a3);
    v93 = v180;
    uint64_t v94 = v185;
    goto LABEL_24;
  }
  v108 = v180;
  uint64_t v109 = v58(a3, v180);
  v190(v92, a3);
  uint64_t v110 = ((uint64_t (*)(uint64_t, uint64_t))v177)(v90, v89);
  v93 = v108;
  uint64_t v94 = v185;
  if (v109 == v110 && (v183(a3, v108) & 1) == 0)
  {
LABEL_24:
    v95 = v176;
    v191(v176, v193, a3);
    v96 = v175;
    (*(void (**)(uint64_t))(v187 + 64))(v90);
    v97 = *(uint64_t (**)(uint64_t, uint64_t))(v94 + 64);
    int v98 = v97(v90, v94);
    if ((v98 ^ v183(a3, v93)))
    {
      char v99 = v97(v90, v94);
      uint64_t v100 = (*(uint64_t (**)(uint64_t, uint64_t))(v94 + 128))(v90, v94);
      uint64_t v101 = v189(a3, v93);
      if (v99)
      {
        if (v101 < v100)
        {
          v102 = v178;
          v191(v178, (uint64_t)v95, a3);
          v103 = v96;
          v104 = v173;
          (*(void (**)(char *, uint64_t, void *, uint64_t, uint64_t))(v94 + 96))(v102, a3, v93, v90, v94);
          char v105 = (*(uint64_t (**)(char *, char *, uint64_t))(*(void *)(*(void *)(v94 + 32) + 8) + 16))(v103, v104, v90);
          v106 = *(void (**)(char *, uint64_t))(v174 + 8);
          v106(v104, v90);
          v107 = v103;
LABEL_33:
          v106(v107, v90);
          v114 = v190;
          goto LABEL_34;
        }
        v117 = v170;
        v118 = AssociatedTypeWitness;
        uint64_t v119 = swift_getAssociatedConformanceWitness((uint64_t)v170, v90, (uint64_t)AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
        v120 = v168;
        (*(void (**)(void *, uint64_t, const char *, uint64_t))(v119 + 8))(&unk_18162B0B8, 256, v118, v119);
        v121 = v173;
        ((void (*)(char *, uint64_t, int **))v117[3])(v120, v90, v117);
        LODWORD(v189) = (*(uint64_t (**)(char *, char *, uint64_t))(*(void *)(*(void *)(v94 + 32) + 8)
                                                                           + 16))(v96, v121, v90);
        uint64_t v122 = v174;
        v123 = v121;
        v124 = *(void (**)(char *, uint64_t))(v174 + 8);
        v124(v123, v90);
        v125 = v163;
        (*(void (**)(char *, char *, uint64_t))(v122 + 32))(v163, v96, v90);
        v126 = v162;
        v191(v162, (uint64_t)v95, a3);
        if (v189)
        {
          v190(v126, a3);
          v124(v125, v90);
          goto LABEL_41;
        }
        v127 = v178;
        ((void (*)(char *, uint64_t, uint64_t, uint64_t, void *))v93[12])(v125, v90, v94, a3, v93);
        char v128 = (*(uint64_t (**)(char *, char *, uint64_t))(*(void *)(v93[4] + 8) + 16))(v127, v126, a3);
        v129 = v127;
        v114 = v190;
        v190(v129, a3);
        v114(v126, a3);
        if (v128) {
          goto LABEL_41;
        }
LABEL_45:
        v114(v95, a3);
        return (*(uint64_t (**)(uint64_t, uint64_t, void *, uint64_t, uint64_t))(v94 + 96))(v193, a3, v93, v90, v94);
      }
      if (v100 >= v101)
      {
        v130 = v167;
        v131 = v166;
        uint64_t v132 = swift_getAssociatedConformanceWitness((uint64_t)v167, a3, (uint64_t)v166, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
        v133 = v165;
        (*(void (**)(void *, uint64_t, const char *, uint64_t))(v132 + 8))(&unk_18162B0B8, 256, v131, v132);
        v134 = v178;
        ((void (*)(char *, uint64_t, int **))v130[3])(v133, a3, v130);
        LODWORD(v189) = (*(uint64_t (**)(char *, char *, uint64_t))(*(void *)(v93[4] + 8) + 40))(v95, v134, a3);
        v114 = v190;
        v190(v134, a3);
        v135 = v96;
        uint64_t v136 = v174;
        v137 = v171;
        (*(void (**)(char *, char *, uint64_t))(v174 + 32))(v171, v135, v90);
        v138 = v161;
        v191(v161, (uint64_t)v95, a3);
        if (v189)
        {
          v139 = v137;
          v140 = v173;
          (*(void (**)(char *, uint64_t, void *, uint64_t, uint64_t))(v94 + 96))(v138, a3, v93, v90, v94);
          char v105 = (*(uint64_t (**)(char *, char *, uint64_t))(*(void *)(*(void *)(v94 + 32) + 8) + 16))(v139, v140, v90);
          v141 = *(void (**)(char *, uint64_t))(v136 + 8);
          v141(v140, v90);
          v141(v171, v90);
LABEL_34:
          if (v105) {
            goto LABEL_41;
          }
          goto LABEL_45;
        }
        v114(v138, a3);
        (*(void (**)(char *, uint64_t))(v136 + 8))(v137, v90);
        goto LABEL_45;
      }
    }
    else
    {
      uint64_t v111 = (*(uint64_t (**)(uint64_t, uint64_t))(v94 + 128))(v90, v94);
      if (v111 >= v189(a3, v93))
      {
        v112 = v178;
        v191(v178, (uint64_t)v95, a3);
        v113 = v173;
        (*(void (**)(char *, uint64_t, void *, uint64_t, uint64_t))(v94 + 96))(v112, a3, v93, v90, v94);
        char v105 = (*(uint64_t (**)(char *, char *, uint64_t))(*(void *)(*(void *)(v94 + 32) + 8) + 16))(v96, v113, v90);
        v106 = *(void (**)(char *, uint64_t))(v174 + 8);
        v106(v113, v90);
        v107 = v96;
        goto LABEL_33;
      }
    }
    v115 = v178;
    ((void (*)(char *, uint64_t, uint64_t, uint64_t, void *))v93[12])(v96, v90, v94, a3, v93);
    char v116 = (*(uint64_t (**)(char *, char *, uint64_t))(*(void *)(v93[4] + 8) + 16))(v115, v95, a3);
    v114 = v190;
    v190(v115, a3);
    if (v116) {
LABEL_41:
    }
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Not enough bits to represent the passed value", 45, 2, "Swift/Integers.swift", 20, 2, 0xE67uLL, 0);
    goto LABEL_45;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, void *, uint64_t, uint64_t))(v94 + 96))(v193, a3, v93, v90, v94);
}

uint64_t _ArrayBody.elementTypeIsBridgedVerbatim.getter(uint64_t a1, char a2)
{
  return a2 & 1;
}

uint64_t key path getter for _ArrayBody.elementTypeIsBridgedVerbatim : _ArrayBody@<X0>(uint64_t result@<X0>, unsigned char *a2@<X8>)
{
  *a2 = *(unsigned char *)(result + 8) & 1;
  return result;
}

unsigned __int8 *key path setter for _ArrayBody.elementTypeIsBridgedVerbatim : _ArrayBody(unsigned __int8 *result, uint64_t a2)
{
  *(void *)(a2 + 8) = *(void *)(a2 + 8) & 0xFFFFFFFFFFFFFFFELL | *result;
  return result;
}

uint64_t _ArrayBody.elementTypeIsBridgedVerbatim.setter(uint64_t result)
{
  *(void *)(v1 + 8) = *(void *)(v1 + 8) & 0xFFFFFFFFFFFFFFFELL | result & 1;
  return result;
}

uint64_t static UInt.& infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return a2 & a1;
}

uint64_t static FixedWidthInteger.~ prefix(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v26 = a3;
  uint64_t v23 = a1;
  uint64_t v24 = a4;
  uint64_t v5 = *(void *)(*(void *)(*(void *)(a3 + 8) + 24) + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (int **)v5, a2, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, associated type descriptor for ExpressibleByIntegerLiteral.IntegerLiteralType);
  uint64_t v7 = MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v9 = (char *)&v18 - v8;
  uint64_t v27 = *(void *)(a2 - 8);
  uint64_t v10 = MEMORY[0x1F4188790](v7);
  uint64_t v12 = (char *)&v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10);
  uint64_t v25 = (char *)&v18 - v13;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v5, a2, (uint64_t)AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
  uint64_t v22 = *(void (**)(void *, uint64_t, const char *, uint64_t))(AssociatedConformanceWitness + 8);
  v22(&unk_18162B0B8, 256, AssociatedTypeWitness, AssociatedConformanceWitness);
  uint64_t v21 = v5;
  uint64_t v20 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 24);
  v20(v9, a2, v5);
  uint64_t v19 = *(void (**)(char *, uint64_t, uint64_t))(v26 + 88);
  v19(v25, v23, a2);
  uint64_t v15 = *(void (**)(char *, uint64_t))(v27 + 8);
  v27 += 8;
  v15(v12, a2);
  v22(&qword_18162B0C0, 512, AssociatedTypeWitness, AssociatedConformanceWitness);
  v20(v9, a2, v21);
  uint64_t v16 = v25;
  ((void (*)(uint64_t, char *, uint64_t, uint64_t))v19)(v24, v12, a2, v26);
  v15(v12, a2);
  return ((uint64_t (*)(char *, uint64_t))v15)(v16, a2);
}

uint64_t _ArrayBody._capacityAndFlags.setter(uint64_t result)
{
  *(void *)(v1 + 8) = result;
  return result;
}

unsigned __int8 *(*_ArrayBody.elementTypeIsBridgedVerbatim.modify(uint64_t a1))(unsigned __int8 *result)
{
  *(void *)a1 = v1;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(v1 + 8) & 1;
  return _ArrayBody.elementTypeIsBridgedVerbatim.modify;
}

unsigned __int8 *_ArrayBody.elementTypeIsBridgedVerbatim.modify(unsigned __int8 *result)
{
  *(void *)(*(void *)result + 8) = *(void *)(*(void *)result + 8) & 0xFFFFFFFFFFFFFFFELL | result[8];
  return result;
}

uint64_t key path getter for _ArrayBody._capacityAndFlags : _ArrayBody@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = *(void *)(result + 8);
  return result;
}

void *key path setter for _ArrayBody._capacityAndFlags : _ArrayBody(void *result, uint64_t a2)
{
  *(void *)(a2 + 8) = *result;
  return result;
}

void *(*_ArrayBody._capacityAndFlags.modify(void *a1))(void *result)
{
  *a1 = *(void *)(v1 + 8);
  a1[1] = v1;
  return _ArrayBody._capacityAndFlags.modify;
}

void *_ArrayBody._capacityAndFlags.modify(void *result)
{
  *(void *)(result[1] + 8) = *result;
  return result;
}

uint64_t (*_ArrayBuffer._storage.modify())()
{
  return EnumeratedSequence._base.modify;
}

__objc2_class **_emptyArrayStorage.getter()
{
  return &_swiftEmptyArrayStorage;
}

uint64_t _ArrayBuffer.init(nsArray:)(unint64_t a1)
{
  return ~(a1 >> 1) & 0x4000000000000000 | a1;
}

uint64_t _BridgeStorage.init(objC:)(unint64_t a1)
{
  return ~(a1 >> 1) & 0x4000000000000000 | a1;
}

uint64_t _ArrayBuffer.cast<A>(toBufferOf:)(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t _ArrayBuffer.downcast<A>(toBufferWithDeferredTypeCheckOf:)(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  BOOL isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType((uint64_t)a3, a3);
  uint64_t v5 = a2 & 0xFFFFFFFFFFFFFF8;
  if (!isClassOrObjCExistentialType) {
    uint64_t v5 = a2;
  }
  return v5 | 1;
}

uint64_t _ArrayBuffer._native.getter(unint64_t a1, uint64_t *a2)
{
  if (_swift_isClassOrObjCExistentialType((uint64_t)a2, a2)) {
    uint64_t v3 = a1 & 0xFFFFFFFFFFFFFF8;
  }
  else {
    uint64_t v3 = a1;
  }
  swift_bridgeObjectRetain(a1);
  return v3;
}

unint64_t _BridgeStorage.init(native:isFlagged:)(unint64_t a1, char a2)
{
  return a2 & 1 | a1;
}

BOOL _ArrayBuffer.needsElementTypeCheck.getter(uint64_t a1, uint64_t *a2)
{
  BOOL isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType((uint64_t)a2, a2);
  BOOL result = 0;
  if (isClassOrObjCExistentialType && (a1 & 0xC000000000000001) != 0) {
    return swift_dynamicCastMetatype((uint64_t *)qword_1ECA06328, a2) == 0;
  }
  return result;
}

uint64_t _ArrayBuffer._isNativeTypeChecked.getter(uint64_t a1, uint64_t *a2)
{
  return ((a1 & 0xC000000000000001) == 0) | !_swift_isClassOrObjCExistentialType((uint64_t)a2, a2);
}

BOOL static Bool.! prefix(_:)(char a1)
{
  return (a1 & 1) == 0;
}

uint64_t static Bool.&& infix(_:_:)(char a1, uint64_t (*a2)(void))
{
  if (a1) {
    return a2() & 1;
  }
  else {
    return 0;
  }
}

void protocol witness for _ArrayBufferProtocol.init() in conformance _ArrayBuffer<A>(void *a1@<X8>)
{
  *a1 = &_swiftEmptyArrayStorage;
}

uint64_t protocol witness for _ArrayBufferProtocol.init(_buffer:shiftedToStartIndex:) in conformance _ArrayBuffer<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  uint64_t result = EnumeratedSequence._base.modify(a1, *(void *)(a2 + 16));
  *a3 = result;
  return result;
}

uint64_t _ArrayBuffer.init(_buffer:shiftedToStartIndex:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return EnumeratedSequence._base.modify(a1, a3);
}

uint64_t protocol witness for _ArrayBufferProtocol.init(copying:) in conformance _ArrayBuffer<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return _ArrayBufferProtocol.init(copying:)(a1, a2, a3, a4);
}

uint64_t _ArrayBufferProtocol.init(copying:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v32 = (char *)&v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *(void *)(*(void *)(v10 + 8) + 8);
  uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t))(v11 + 112);
  uint64_t v14 = v12(v13, v11);
  uint64_t v15 = v12(a2, v11);
  if (v15 <= v14) {
    uint64_t v16 = v14;
  }
  else {
    uint64_t v16 = v15;
  }
  if (v16)
  {
    uint64_t v31 = a4;
    AssociatedTypeWitness = (uint64_t *)swift_getAssociatedTypeWitness(0, *(int ***)(v11 + 8), a2, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
    uint64_t v18 = getContiguousArrayStorageType<A>(for:)((uint64_t)AssociatedTypeWitness, AssociatedTypeWitness);
    uint64_t v19 = *(void *)(*(AssociatedTypeWitness - 1) + 72);
    uint64_t v20 = *(unsigned __int8 *)(*(AssociatedTypeWitness - 1) + 80);
    uint64_t v21 = (__objc2_class **)swift_allocObject((unint64_t *)v18, ((v20 + *((unsigned int *)v18 + 12)) & ~v20) + v19 * v16, v20 | *((unsigned __int16 *)v18 + 26));
    size_t v22 = _swift_stdlib_malloc_size(v21);
    if (!v19) {
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Division by zero", 16, 2, "Swift/IntegerTypes.swift", 24, 2, 0x3829uLL, 0);
    }
    int64_t v23 = v22 - ((v20 + 32) & ~v20);
    if (v23 == 0x8000000000000000 && v19 == -1) {
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Division results in an overflow", 31, 2, "Swift/IntegerTypes.swift", 24, 2, 0x3830uLL, 0);
    }
    uint64_t v25 = v23 / v19;
    swift_retain((atomic_ullong *)v21);
    BOOL isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType((uint64_t)AssociatedTypeWitness, AssociatedTypeWitness);
    v21[2] = (__objc2_class *)v14;
    v21[3] = (__objc2_class *)(isClassOrObjCExistentialType | (unint64_t)(2 * v25));
    swift_release((uint64_t)v21);
  }
  else
  {
    uint64_t v21 = &_swiftEmptyArrayStorage;
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v32, a1, a2);
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v11 + 96))(v33, a2, v11);
  uint64_t v27 = v33[0];
  uint64_t v28 = v33[1];
  uint64_t v29 = *((void *)swift_getAssociatedTypeWitness(0, *(int ***)(v11 + 8), a2, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element)- 1);
  (*(void (**)(uint64_t, uint64_t, unint64_t, uint64_t, uint64_t))(a3 + 48))(v27, v28, (unint64_t)v21+ ((*(unsigned __int8 *)(v29 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v29 + 80)), a2, a3);
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v11 + 64))(v33, a2, v11);
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(a1, a2);
  return (*(uint64_t (**)(__objc2_class **, void, uint64_t, uint64_t))(a3 + 32))(v21, v33[0], a2, a3);
}

void **protocol witness for _ArrayBufferProtocol._copyContents(subRange:initializing:) in conformance _ArrayBuffer<A>(Swift::Int a1, Swift::Int a2, char *a3, uint64_t a4)
{
  return _ArrayBuffer._copyContents(subRange:initializing:)(a1, a2, a3, *v4, *(uint64_t **)(a4 + 16));
}

void **specialized _ArrayBuffer._copyContents(subRange:initializing:)(void **result, uint64_t a2, void **a3, uint64_t a4)
{
  uint64_t v4 = a4;
  if ((unint64_t)a4 >> 62)
  {
    if (a4 >= 0) {
      a4 &= 0xFFFFFFFFFFFFFF8uLL;
    }
    uint64_t v7 = specialized _CocoaArrayWrapper._copyContents(subRange:initializing:)(result, a2, a3, (id)a4);
    swift_bridgeObjectRelease(v4);
    return v7;
  }
  else
  {
    uint64_t v6 = a2 - (void)result;
    if (__OFSUB__(a2, result))
    {
      __break(1u);
    }
    else
    {
      specialized UnsafeMutablePointer.initialize(from:count:)((char *)((a4 & 0xFFFFFFFFFFFFFF8) + 8 * (void)result + 32), v6, (char *)a3);
      swift_bridgeObjectRelease(v4);
      return &a3[v6];
    }
  }
  return result;
}

void **_ArrayBuffer._copyContents(subRange:initializing:)(Swift::Int a1, Swift::Int a2, char *a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v8 = a2;
  _ArrayBuffer._typeCheck(_:)(a1, a2, a4, a5);
  if (!_swift_isClassOrObjCExistentialType((uint64_t)a5, a5)
    || (a4 & 0x8000000000000000) == 0 && (a4 & 0x4000000000000000) == 0)
  {
    BOOL isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType((uint64_t)a5, a5);
    BOOL v11 = __OFSUB__(v8, a1);
    v8 -= a1;
    if (!v11)
    {
      if (isClassOrObjCExistentialType) {
        uint64_t v12 = a4 & 0xFFFFFFFFFFFFFF8;
      }
      else {
        uint64_t v12 = a4;
      }
      uint64_t v13 = *(void *)(*(a5 - 1) + 72);
      UnsafeMutablePointer.initialize(from:count:)((char *)(v12+ ((*(unsigned __int8 *)(*(a5 - 1) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(a5 - 1) + 80))+ v13 * a1), v8, a3, (unint64_t *)a5);
      swift_bridgeObjectRelease(a4);
      return (void **)&a3[v13 * v8];
    }
    __break(1u);
  }
  if (a4 < 0) {
    uint64_t v15 = (void *)a4;
  }
  else {
    uint64_t v15 = (void *)(a4 & 0xFFFFFFFFFFFFFF8);
  }
  swift_unknownObjectRetain(v15);
  swift_bridgeObjectRelease(a4);
  uint64_t v16 = specialized _CocoaArrayWrapper._copyContents(subRange:initializing:)((void **)a1, v8, (void **)a3, v15);
  swift_unknownObjectRelease(v15);
  return v16;
}

uint64_t _ArrayBuffer.requestUniqueMutableBackingBuffer(minimumCapacity:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(uint64_t **)(a2 + 16);
  BOOL isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType((uint64_t)v4, v4);
  uint64_t v6 = *v2;
  if (isClassOrObjCExistentialType)
  {
    uint64_t v7 = 0;
    if (v6 < 0 || (v6 & 0x4000000000000000) != 0) {
      return v7;
    }
    if ((swift_isUniquelyReferenced_nonNull_bridgeObject(v6) & 1) == 0) {
      return 0;
    }
  }
  else if (!swift_isUniquelyReferenced_nonNull_native(v6))
  {
    return 0;
  }
  unint64_t v8 = *v2;
  if (_swift_isClassOrObjCExistentialType((uint64_t)v4, v4)) {
    uint64_t v7 = v8 & 0xFFFFFFFFFFFFFF8;
  }
  else {
    uint64_t v7 = v8;
  }
  if (a1 > *(void *)(v7 + 24) >> 1) {
    return 0;
  }
  swift_bridgeObjectRetain(v8);
  return v7;
}

BOOL specialized _ArrayBuffer.isMutableAndUniquelyReferenced()()
{
  return swift_isUniquelyReferenced_nonNull_native(*v0);
}

Swift::Bool __swiftcall _ArrayBuffer.isMutableAndUniquelyReferenced()()
{
  BOOL isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType(*(void *)(v0 + 16), *(uint64_t **)(v0 + 16));
  uint64_t v3 = *v1;
  if (!isClassOrObjCExistentialType) {
    return swift_isUniquelyReferenced_nonNull_native(*v1);
  }
  Swift::Bool result = 0;
  if ((v3 & 0x8000000000000000) == 0 && (v3 & 0x4000000000000000) == 0) {
    return swift_isUniquelyReferenced_nonNull_bridgeObject(*v1);
  }
  return result;
}

uint64_t protocol witness for _ArrayBufferProtocol.requestNativeBuffer() in conformance _ArrayBuffer<A>(uint64_t a1)
{
  return _ArrayBuffer.requestNativeBuffer()(*v1, *(uint64_t **)(a1 + 16));
}

uint64_t _ArrayBuffer.requestNativeBuffer()(unint64_t a1, uint64_t *a2)
{
  if (_swift_isClassOrObjCExistentialType((uint64_t)a2, a2))
  {
    uint64_t v4 = 0;
    if ((a1 & 0x8000000000000000) == 0 && (a1 & 0x4000000000000000) == 0)
    {
      swift_bridgeObjectRetain(a1);
      if (_swift_isClassOrObjCExistentialType((uint64_t)a2, a2)) {
        return a1 & 0xFFFFFFFFFFFFFF8;
      }
      else {
        return a1;
      }
    }
  }
  else
  {
    if (_swift_isClassOrObjCExistentialType((uint64_t)a2, a2)) {
      uint64_t v4 = a1 & 0xFFFFFFFFFFFFFF8;
    }
    else {
      uint64_t v4 = a1;
    }
    swift_bridgeObjectRetain(a1);
  }
  return v4;
}

void protocol witness for _ArrayBufferProtocol.replaceSubrange<A>(_:with:elementsOf:) in conformance _ArrayBuffer<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int **a6, uint64_t a7, uint64_t a8)
{
}

void _ArrayBufferProtocol.replaceSubrange<A>(_:with:elementsOf:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int **a8)
{
  uint64_t v9 = v8;
  uint64_t v80 = a4;
  uint64_t v78 = a3;
  v76 = *(int **)(*(void *)(a7 + 8) + 8);
  AssociatedTypeWitness = (unint64_t *)swift_getAssociatedTypeWitness(0, *((int ***)v76 + 1), a5, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
  uint64_t v66 = *(AssociatedTypeWitness - 1);
  uint64_t v16 = v66;
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  v67 = (char *)&v65 - v17;
  v79 = a8;
  uint64_t v71 = a6;
  uint64_t v18 = swift_getAssociatedTypeWitness(0, a8, a6, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  uint64_t v69 = *((void *)v18 - 1);
  v70 = v18;
  uint64_t v19 = MEMORY[0x1F4188790](v18);
  v68 = (char *)&v65 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = MEMORY[0x1F4188790](v19);
  int64_t v23 = (char *)&v65 - v22;
  uint64_t v24 = *(void *)(a5 - 8);
  MEMORY[0x1F4188790](v21);
  uint64_t v26 = (char *)&v65 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = *(void (**)(char *, void *, uint64_t))(v24 + 16);
  v77 = v9;
  v27(v26, v9, a5);
  uint64_t v28 = a7;
  uint64_t v29 = (*(uint64_t (**)(uint64_t, uint64_t))(a7 + 144))(a5, a7);
  (*(void (**)(char *, uint64_t))(v24 + 8))(v26, a5);
  uint64_t v30 = a1;
  uint64_t v31 = *(void *)(v16 + 72);
  uint64_t v32 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
LABEL_18:
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeMutablePointer.deinitialize with negative count", 53, 2, "Swift/UnsafePointer.swift", 25, 2, 0x493uLL, 0);
  }
  if (v32 < 0) {
    goto LABEL_18;
  }
  uint64_t v33 = a2;
  unint64_t v34 = v29 + v31 * v30;
  swift_arrayDestroy(v34, v32, AssociatedTypeWitness);
  uint64_t v36 = v78;
  uint64_t v37 = v78 - v32;
  if (__OFSUB__(v78, v32))
  {
    __break(1u);
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  uint64_t v75 = v31 * v78;
  uint64_t v38 = (char *)(v34 + v31 * v78);
  if (!v37) {
    goto LABEL_8;
  }
  v74 = (int *)v23;
  uint64_t v39 = (char *)(v34 + v31 * v78);
  uint64_t v40 = (*((uint64_t (**)(uint64_t))v76 + 14))(a5);
  if (__OFSUB__(v40, v33)) {
    goto LABEL_20;
  }
  UnsafeMutablePointer.moveInitialize(from:count:)((char *)(v29 + v31 * v33), v40 - v33, v39, AssociatedTypeWitness);
  uint64_t v41 = (uint64_t (*)(void *, void))(*(uint64_t (**)(void *, uint64_t, uint64_t))(v28 + 120))(v81, a5, v28);
  if (__OFADD__(*v42, v37))
  {
LABEL_21:
    __break(1u);
    return;
  }
  *v42 += v37;
  uint64_t v35 = v41(v81, 0);
  uint64_t v36 = v78;
  uint64_t v38 = v39;
  int64_t v23 = (char *)v74;
LABEL_8:
  if (v36 < 1)
  {
    (*(void (**)(uint64_t))(*(void *)(v71 - 8) + 8))(v80);
  }
  else
  {
    uint64_t v65 = v38;
    MEMORY[0x1F4188790](v35);
    uint64_t v43 = v71;
    *(&v65 - 6) = (char *)a5;
    *(&v65 - 5) = (char *)v43;
    uint64_t v45 = v79;
    uint64_t v44 = v80;
    uint64_t v61 = v28;
    uint64_t v62 = v79;
    uint64_t v63 = v46;
    unint64_t v64 = v34;
    (*((void (**)(void *__return_ptr, char *(*)(char *, uint64_t)))v79[1] + 9))(v81, partial apply for closure #1 in _ArrayBufferProtocol.replaceSubrange<A>(_:with:elementsOf:));
    if (v81[0])
    {
      ((void (*)(uint64_t, int **))v45[8])(v43, v45);
      uint64_t v47 = v43;
      char v48 = v23;
      v49 = AssociatedTypeWitness;
      uint64_t v78 = v31;
      char v50 = v67;
      unint64_t v51 = (unint64_t)v65;
      if (v75 >= 1)
      {
        v76 = v79[10];
        v77 = v79 + 10;
        v74 = v79[24];
        uint64_t v75 = (uint64_t)(v79 + 24);
        v73 = (void (**)(char *))(v66 + 16);
        id v52 = (void (**)(unint64_t, char *, unint64_t *))(v66 + 32);
        uint64_t v53 = v79;
        do
        {
          uint64_t v54 = v47;
          int v55 = (void (*)(void *, void))((uint64_t (*)(void *, char *, uint64_t, int **))v76)(v81, v48, v47, v53);
          (*v73)(v50);
          v55(v81, 0);
          uint64_t v47 = v54;
          (*v52)(v34, v50, v49);
          v34 += v78;
          ((void (*)(char *, uint64_t, int **))v74)(v48, v54, v53);
        }
        while (v34 < v51);
      }
      uint64_t v57 = (uint64_t)v68;
      uint64_t v56 = v69;
      Swift::Int v58 = v70;
      (*(void (**)(char *, char *, const char *))(v69 + 32))(v68, v48, v70);
      uint64_t v59 = v47;
      uint64_t v60 = v80;
      _expectEnd<A>(of:is:)(v80, v57, v59, (uint64_t)v79);
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v59 - 8) + 8))(v60, v59);
      (*(void (**)(uint64_t, const char *))(v56 + 8))(v57, v58);
    }
    else
    {
      (*(void (**)(uint64_t))(*(void *)(v43 - 8) + 8))(v44);
    }
  }
}

uint64_t protocol witness for _ArrayBufferProtocol.subscript.getter in conformance _ArrayBuffer<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _ArrayBuffer.subscript.getter(a1, a2, *v3, *(uint64_t **)(a3 + 16));
}

uint64_t _ArrayBuffer.subscript.getter(uint64_t a1, uint64_t a2, int64_t a3, uint64_t *a4)
{
  if (_swift_isClassOrObjCExistentialType((uint64_t)a4, a4)
    && _swift_isClassOrObjCExistentialType((uint64_t)a4, a4)
    && (a3 & 0xC000000000000001) != 0
    && !swift_dynamicCastMetatype((uint64_t *)qword_1ECA06328, a4))
  {
    if (a2 < a1) {
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
    }
    if (a1 != a2)
    {
      Swift::Int v11 = a1;
      do
      {
        if (a2 == v11) {
          _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Index out of range", 18, 2, "Swift/Range.swift", 17, 2, 0x131uLL, 0);
        }
        Swift::Int v12 = v11 + 1;
        _ArrayBuffer._typeCheckSlowPath(_:)(v11);
        Swift::Int v11 = v12;
      }
      while (a2 != v12);
    }
  }
  if (_swift_isClassOrObjCExistentialType((uint64_t)a4, a4) && (a3 < 0 || (a3 & 0x4000000000000000) != 0))
  {
    if (a3 >= 0) {
      a3 &= 0xFFFFFFFFFFFFFF8uLL;
    }
    swift_unknownObjectRetain((id)a3);
    uint64_t v9 = _CocoaArrayWrapper.subscript.getter(a1, a2, (void *)a3);
    swift_unknownObjectRelease((id)a3);
  }
  else
  {
    BOOL isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType((uint64_t)a4, a4);
    if (a2 < 0) {
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, 2, 0xD7BuLL, 0);
    }
    if (isClassOrObjCExistentialType) {
      uint64_t v9 = a3 & 0xFFFFFFFFFFFFFF8;
    }
    else {
      uint64_t v9 = a3;
    }
    swift_bridgeObjectRetain(a3);
  }
  return v9;
}

uint64_t protocol witness for _ArrayBufferProtocol.withUnsafeBufferPointer<A>(_:) in conformance _ArrayBuffer<A>(uint64_t (*a1)(uint64_t, unint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _ArrayBuffer.withUnsafeBufferPointer<A>(_:)(a1, a2, *v4, *(uint64_t **)(a4 + 16));
}

void *_ss12_ArrayBufferV010withUnsafeB7Pointeryqd__qd__SRyxGKXEKlFADq_s5Error_pRi_zRi0_zRi__Ri0__r0_lyxSSSgIsgyrzo_AByxGAFsAE_pAFRsd__r__lIetMggozo_Tp5(void *(*a1)(uint64_t *__return_ptr, unint64_t, unint64_t), uint64_t a2, int64_t a3, uint64_t *a4)
{
  if (_swift_isClassOrObjCExistentialType((uint64_t)a4, a4) && (a3 < 0 || (a3 & 0x4000000000000000) != 0))
  {
    uint64_t v17 = (unint64_t *)type metadata accessor for _ArrayBuffer(0, (uint64_t)a4, v9, v10);
    swift_bridgeObjectRetain(a3);
    uint64_t WitnessTable = swift_getWitnessTable(protocol conformance descriptor for _ArrayBuffer<A>, v17, v18);
    uint64_t v20 = (*(uint64_t (**)(unint64_t *, uint64_t))(WitnessTable + 56))(v17, WitnessTable);
    uint64_t v15 = _ss15ContiguousArrayV23withUnsafeBufferPointeryqd__qd__SRyxGKXEKlFADq_s5Error_pRi_zRi0_zRi__Ri0__r0_lyxSSSgIsgyrzo_AByxGAFsAE_pAFRsd__r__lIetMggozo_Tp5(a1, a2, v20, (uint64_t)a4);
    swift_release(v20);
  }
  else
  {
    if (_swift_isClassOrObjCExistentialType((uint64_t)a4, a4)) {
      uint64_t v11 = a3 & 0xFFFFFFFFFFFFFF8;
    }
    else {
      uint64_t v11 = a3;
    }
    uint64_t v12 = *(unsigned __int8 *)(*(a4 - 1) + 80);
    if (_swift_isClassOrObjCExistentialType((uint64_t)a4, a4) && (a3 < 0 || (a3 & 0x4000000000000000) != 0))
    {
      if (a3 < 0) {
        uint64_t v21 = (void *)a3;
      }
      else {
        uint64_t v21 = (void *)(a3 & 0xFFFFFFFFFFFFFF8);
      }
      unint64_t v22 = (unint64_t)[v21 count];
      if ((v22 & 0x8000000000000000) != 0) {
        _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeBufferPointer with negative count", 39, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x53FuLL, 0);
      }
      unint64_t v14 = v22;
    }
    else
    {
      if (_swift_isClassOrObjCExistentialType((uint64_t)a4, a4)) {
        uint64_t v13 = a3 & 0xFFFFFFFFFFFFFF8;
      }
      else {
        uint64_t v13 = a3;
      }
      unint64_t v14 = *(void *)(v13 + 16);
    }
    uint64_t v15 = (void *)a2;
    a1(&v23, v11 + ((v12 + 32) & ~v12), v14);
    if (!v4) {
      return (void *)v23;
    }
  }
  return v15;
}

uint64_t _ArrayBuffer.withUnsafeBufferPointer<A>(_:)(uint64_t (*a1)(uint64_t, unint64_t), uint64_t a2, int64_t a3, uint64_t *a4)
{
  if (_swift_isClassOrObjCExistentialType((uint64_t)a4, a4) && (a3 < 0 || (a3 & 0x4000000000000000) != 0))
  {
    unint64_t v14 = (unint64_t *)type metadata accessor for _ArrayBuffer(0, (uint64_t)a4, v7, v8);
    swift_bridgeObjectRetain(a3);
    uint64_t WitnessTable = swift_getWitnessTable(protocol conformance descriptor for _ArrayBuffer<A>, v14, v15);
    uint64_t v17 = (*(uint64_t (**)(unint64_t *, uint64_t))(WitnessTable + 56))(v14, WitnessTable);
    a1(v17 + ((*(unsigned __int8 *)(*(a4 - 1) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(a4 - 1) + 80)), *(void *)(v17 + 16));
    return swift_release(v17);
  }
  else
  {
    if (_swift_isClassOrObjCExistentialType((uint64_t)a4, a4)) {
      uint64_t v9 = a3 & 0xFFFFFFFFFFFFFF8;
    }
    else {
      uint64_t v9 = a3;
    }
    uint64_t v10 = *(unsigned __int8 *)(*(a4 - 1) + 80);
    if (_swift_isClassOrObjCExistentialType((uint64_t)a4, a4) && (a3 < 0 || (a3 & 0x4000000000000000) != 0))
    {
      if (a3 < 0) {
        uint64_t v18 = (void *)a3;
      }
      else {
        uint64_t v18 = (void *)(a3 & 0xFFFFFFFFFFFFFF8);
      }
      unint64_t v19 = (unint64_t)[v18 count];
      if ((v19 & 0x8000000000000000) != 0) {
        _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeBufferPointer with negative count", 39, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x53FuLL, 0);
      }
      unint64_t v12 = v19;
    }
    else
    {
      if (_swift_isClassOrObjCExistentialType((uint64_t)a4, a4)) {
        uint64_t v11 = a3 & 0xFFFFFFFFFFFFFF8;
      }
      else {
        uint64_t v11 = a3;
      }
      unint64_t v12 = *(void *)(v11 + 16);
    }
    return a1(v9 + ((v10 + 32) & ~v10), v12);
  }
}

uint64_t protocol witness for _ArrayBufferProtocol.withUnsafeMutableBufferPointer<A>(_:) in conformance _ArrayBuffer<A>(uint64_t (*a1)(unint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _ArrayBuffer.withUnsafeMutableBufferPointer<A>(_:)(a1, a2, a4);
}

uint64_t _ArrayBuffer.withUnsafeMutableBufferPointer<A>(_:)(uint64_t (*a1)(unint64_t), uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *v3;
  uint64_t v6 = *(uint64_t **)(a3 + 16);
  unint64_t v7 = _ArrayBuffer.firstElementAddressIfContiguous.getter(*v3, v6);
  if (_swift_isClassOrObjCExistentialType((uint64_t)v6, v6) && (v5 < 0 || (v5 & 0x4000000000000000) != 0))
  {
    if (v5 < 0) {
      uint64_t v13 = (void *)v5;
    }
    else {
      uint64_t v13 = (void *)(v5 & 0xFFFFFFFFFFFFFF8);
    }
    unint64_t v14 = (unint64_t)[v13 count];
    if ((v14 & 0x8000000000000000) != 0) {
      _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeMutableBufferPointer with negative count", 46, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x47uLL, 0);
    }
    unint64_t v10 = v14;
  }
  else
  {
    BOOL isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType((uint64_t)v6, v6);
    uint64_t v9 = v5 & 0xFFFFFFFFFFFFFF8;
    if (!isClassOrObjCExistentialType) {
      uint64_t v9 = v5;
    }
    unint64_t v10 = *(void *)(v9 + 16);
  }
  if (v10) {
    BOOL v11 = v7 == 0;
  }
  else {
    BOOL v11 = 0;
  }
  if (v11) {
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeMutableBufferPointer has a nil start and nonzero count", 60, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x49uLL, 0);
  }
  return a1(v7);
}

BOOL _ArrayBuffer.count.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *v2;
  BOOL result = _swift_isClassOrObjCExistentialType(*(void *)(a2 + 16), *(uint64_t **)(a2 + 16));
  uint64_t v6 = v4 & 0xFFFFFFFFFFFFFF8;
  if (!result) {
    uint64_t v6 = v4;
  }
  *(void *)(v6 + 16) = a1;
  return result;
}

BOOL (*protocol witness for _ArrayBufferProtocol.count.modify in conformance _ArrayBuffer<A>(void *a1, uint64_t a2))(uint64_t *a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *(uint64_t **)(a2 + 16);
  a1[1] = v2;
  a1[2] = v5;
  if (_swift_isClassOrObjCExistentialType((uint64_t)v5, v5) && (v4 < 0 || (v4 & 0x4000000000000000) != 0))
  {
    id v10 = _ArrayBuffer._nonNative.getter(v4);
    id v8 = [v10 count];
    swift_unknownObjectRelease(v10);
  }
  else
  {
    BOOL isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType((uint64_t)v5, v5);
    uint64_t v7 = v4 & 0xFFFFFFFFFFFFFF8;
    if (!isClassOrObjCExistentialType) {
      uint64_t v7 = v4;
    }
    id v8 = *(id *)(v7 + 16);
  }
  *a1 = v8;
  return protocol witness for _ArrayBufferProtocol.count.modify in conformance _ArrayBuffer<A>;
}

BOOL protocol witness for _ArrayBufferProtocol.count.modify in conformance _ArrayBuffer<A>(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = *(void *)a1[1];
  BOOL result = _swift_isClassOrObjCExistentialType(a1[2], (uint64_t *)a1[2]);
  uint64_t v4 = v2 & 0xFFFFFFFFFFFFFF8;
  if (!result) {
    uint64_t v4 = v2;
  }
  *(void *)(v4 + 16) = v1;
  return result;
}

BOOL (*_ArrayBuffer.count.modify(void *a1, uint64_t a2))(uint64_t *a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *(uint64_t **)(a2 + 16);
  a1[1] = v2;
  a1[2] = v5;
  if (_swift_isClassOrObjCExistentialType((uint64_t)v5, v5) && (v4 < 0 || (v4 & 0x4000000000000000) != 0))
  {
    if (v4 < 0) {
      id v10 = (void *)v4;
    }
    else {
      id v10 = (void *)(v4 & 0xFFFFFFFFFFFFFF8);
    }
    id v8 = [v10 count];
  }
  else
  {
    BOOL isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType((uint64_t)v5, v5);
    uint64_t v7 = v4 & 0xFFFFFFFFFFFFFF8;
    if (!isClassOrObjCExistentialType) {
      uint64_t v7 = v4;
    }
    id v8 = *(id *)(v7 + 16);
  }
  *a1 = v8;
  return protocol witness for _ArrayBufferProtocol.count.modify in conformance _ArrayBuffer<A>;
}

id protocol witness for _ArrayBufferProtocol.capacity.getter in conformance _ArrayBuffer<A>(uint64_t a1)
{
  return _ArrayBuffer.capacity.getter(*v1, *(uint64_t **)(a1 + 16));
}

id _ArrayBuffer.capacity.getter(uint64_t a1, uint64_t *a2)
{
  if (_swift_isClassOrObjCExistentialType((uint64_t)a2, a2) && (a1 < 0 || (a1 & 0x4000000000000000) != 0))
  {
    if (a1 < 0) {
      uint64_t v7 = (void *)a1;
    }
    else {
      uint64_t v7 = (void *)(a1 & 0xFFFFFFFFFFFFFF8);
    }
    return [v7 count];
  }
  else
  {
    BOOL isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType((uint64_t)a2, a2);
    uint64_t v5 = a1 & 0xFFFFFFFFFFFFFF8;
    if (!isClassOrObjCExistentialType) {
      uint64_t v5 = a1;
    }
    return (id)(*(void *)(v5 + 24) >> 1);
  }
}

id protocol witness for _ArrayBufferProtocol.owner.getter in conformance _ArrayBuffer<A>(uint64_t a1)
{
  uint64_t v2 = (void *)specialized _ArrayBuffer.owner.getter(*v1, *(uint64_t **)(a1 + 16));

  return swift_unknownObjectRetain(v2);
}

id _ArrayBuffer.owner.getter(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = (void *)specialized _ArrayBuffer.owner.getter(a1, a2);

  return swift_unknownObjectRetain(v2);
}

uint64_t protocol witness for _ArrayBufferProtocol.firstElementAddress.getter in conformance _ArrayBuffer<A>(uint64_t a1)
{
  return _ArrayBuffer.firstElementAddress.getter(*v1, *(void *)(a1 + 16));
}

uint64_t specialized _ArrayBuffer.firstElementAddress.getter(uint64_t a1)
{
  return a1 + 32;
}

unint64_t protocol witness for _ArrayBufferProtocol.firstElementAddressIfContiguous.getter in conformance _ArrayBuffer<A>(uint64_t a1)
{
  return _ArrayBuffer.firstElementAddressIfContiguous.getter(*v1, *(uint64_t **)(a1 + 16));
}

unint64_t _ArrayBuffer.firstElementAddressIfContiguous.getter(uint64_t a1, uint64_t *a2)
{
  if (!_swift_isClassOrObjCExistentialType((uint64_t)a2, a2)
    || (unint64_t result = 0, (a1 & 0x8000000000000000) == 0) && (a1 & 0x4000000000000000) == 0)
  {
    BOOL isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType((uint64_t)a2, a2);
    uint64_t v6 = a1 & 0xFFFFFFFFFFFFFF8;
    if (!isClassOrObjCExistentialType) {
      uint64_t v6 = a1;
    }
    return v6
         + ((*(unsigned __int8 *)(*(a2 - 1) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(a2 - 1) + 80));
  }
  return result;
}

uint64_t _ArrayBufferProtocol.subscriptBaseAddress.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 144))();
}

uint64_t protocol witness for _ArrayBufferProtocol.identity.getter in conformance _ArrayBuffer<A>(uint64_t a1)
{
  return _ArrayBuffer.identity.getter(*v1, *(uint64_t **)(a1 + 16));
}

uint64_t _ArrayBuffer.identity.getter(uint64_t a1, uint64_t *a2)
{
  if (_swift_isClassOrObjCExistentialType((uint64_t)a2, a2) && (unint64_t)a1 >> 62)
  {
    if (a1 < 0) {
      return a1;
    }
    else {
      return a1 & 0xFFFFFFFFFFFFFF8;
    }
  }
  else
  {
    BOOL isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType((uint64_t)a2, a2);
    uint64_t v6 = a1 & 0xFFFFFFFFFFFFFF8;
    if (!isClassOrObjCExistentialType) {
      uint64_t v6 = a1;
    }
    return v6
         + ((*(unsigned __int8 *)(*(a2 - 1) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(a2 - 1) + 80));
  }
}

void protocol witness for MutableCollection.subscript.setter in conformance _ArrayBuffer<A>(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _ArrayBuffer.subscript.setter(a1, *a2, *v3, *(uint64_t **)(a3 + 16));
}

void _ArrayBuffer.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  id v8 = (unint64_t *)type metadata accessor for CollectionOfOne(0, (uint64_t)a4, a3, (uint64_t)a4);
  uint64_t v9 = MEMORY[0x1F4188790](v8);
  BOOL v11 = (char *)&v24 - v10;
  uint64_t v12 = *(a4 - 1);
  MEMORY[0x1F4188790](v9);
  unint64_t v14 = (char *)&v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (_swift_isClassOrObjCExistentialType((uint64_t)a4, a4) && (a3 < 0 || (a3 & 0x4000000000000000) != 0))
  {
    uint64_t v25 = a3;
    if (__OFADD__(a2, 1))
    {
      __break(1u);
    }
    else if (a2 + 1 >= a2)
    {
      (*(void (**)(char *, uint64_t, uint64_t *))(v12 + 32))(v11, a1, a4);
      unint64_t v19 = (unint64_t *)type metadata accessor for _ArrayBuffer(0, (uint64_t)a4, v17, v18);
      swift_bridgeObjectRetain(a3);
      uint64_t WitnessTable = swift_getWitnessTable(protocol conformance descriptor for _ArrayBuffer<A>, v19, v20);
      uint64_t v23 = (int **)swift_getWitnessTable(protocol conformance descriptor for CollectionOfOne<A>, v8, v22);
      _ArrayBufferProtocol.replaceSubrange<A>(_:with:elementsOf:)(a2, a2 + 1, 1, (uint64_t)v11, (uint64_t)v19, (uint64_t)v8, WitnessTable, v23);
      swift_bridgeObjectRelease(v25);
      return;
    }
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
  }
  if (_swift_isClassOrObjCExistentialType((uint64_t)a4, a4)) {
    uint64_t v15 = a3 & 0xFFFFFFFFFFFFFF8;
  }
  else {
    uint64_t v15 = a3;
  }
  (*(void (**)(char *, uint64_t, uint64_t *))(v12 + 32))(v14, a1, a4);
  unint64_t v16 = v15
      + ((*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80))
      + *(void *)(v12 + 72) * a2;
  (*(void (**)(uint64_t, unint64_t, uint64_t *))(v12 + 16))(a1, v16, a4);
  (*(void (**)(uint64_t, uint64_t *))(v12 + 8))(a1, a4);
  (*(void (**)(unint64_t, char *, uint64_t *))(v12 + 40))(v16, v14, a4);
}

void (*protocol witness for MutableCollection.subscript.modify in conformance _ArrayBuffer<A>(void *a1, unint64_t *a2, uint64_t a3))(uint64_t ***a1, char a2)
{
  uint64_t v7 = malloc(0x30uLL);
  *a1 = v7;
  id v8 = *(uint64_t **)(a3 + 16);
  *uint64_t v7 = v8;
  uint64_t v9 = *(v8 - 1);
  v7[1] = v9;
  size_t v10 = *(void *)(v9 + 64);
  v7[2] = malloc(v10);
  BOOL v11 = malloc(v10);
  unint64_t v12 = *a2;
  v7[3] = v11;
  v7[4] = v12;
  uint64_t v13 = *v3;
  v7[5] = *v3;
  _ArrayBuffer.subscript.getter(v12, v13, v8, (uint64_t)v11);
  return protocol witness for MutableCollection.subscript.modify in conformance _ArrayBuffer<A>;
}

void protocol witness for MutableCollection.subscript.modify in conformance _ArrayBuffer<A>(uint64_t ***a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v4 = (uint64_t)(*a1)[4];
  uint64_t v3 = (uint64_t)(*a1)[5];
  uint64_t v5 = (*a1)[2];
  uint64_t v6 = (*a1)[3];
  if (a2)
  {
    uint64_t v7 = *v2;
    id v8 = v2[1];
    ((void (*)(uint64_t *, uint64_t *, uint64_t *))v8[2])((*a1)[2], v6, *v2);
    _ArrayBuffer.subscript.setter((uint64_t)v5, v4, v3, v7);
    ((void (*)(uint64_t *, uint64_t *))v8[1])(v6, v7);
  }
  else
  {
    _ArrayBuffer.subscript.setter((uint64_t)(*a1)[3], v4, v3, *v2);
  }
  free(v6);
  free(v5);

  free(v2);
}

void (*_ArrayBuffer.subscript.modify(void *a1, unint64_t a2, uint64_t a3, uint64_t *a4))(uint64_t *a1, char a2)
{
  id v8 = malloc(0x30uLL);
  *a1 = v8;
  v8[1] = a3;
  v8[2] = a4;
  *id v8 = a2;
  uint64_t v9 = *(a4 - 1);
  v8[3] = v9;
  size_t v10 = *(void *)(v9 + 64);
  v8[4] = malloc(v10);
  BOOL v11 = malloc(v10);
  v8[5] = v11;
  _ArrayBuffer.subscript.getter(a2, a3, a4, (uint64_t)v11);
  return _ArrayBuffer.subscript.modify;
}

void _ArrayBuffer.subscript.modify(uint64_t *a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *(void **)(*a1 + 32);
  uint64_t v4 = *(void **)(*a1 + 40);
  if (a2)
  {
    uint64_t v5 = *(uint64_t **)(v2 + 16);
    uint64_t v6 = *(void *)(v2 + 24);
    uint64_t v8 = *(void *)v2;
    uint64_t v7 = *(void *)(v2 + 8);
    (*(void (**)(void, void *, uint64_t *))(v6 + 16))(*(void *)(*a1 + 32), v4, v5);
    _ArrayBuffer.subscript.setter((uint64_t)v3, v8, v7, v5);
    (*(void (**)(void *, uint64_t *))(v6 + 8))(v4, v5);
  }
  else
  {
    _ArrayBuffer.subscript.setter(*(void *)(*a1 + 40), *(void *)v2, *(void *)(v2 + 8), *(uint64_t **)(v2 + 16));
  }
  free(v4);
  free(v3);

  free((void *)v2);
}

void protocol witness for MutableCollection.subscript.setter in conformance _ArrayBuffer<A>()
{
}

void _ArrayBuffer.subscript.setter()
{
}

void (*protocol witness for MutableCollection.subscript.modify in conformance _ArrayBuffer<A>(uint64_t *a1, uint64_t *a2, uint64_t a3))(id *a1, char a2)
{
  *a1 = _ArrayBuffer.subscript.getter(*a2, a2[1], *v3, *(uint64_t **)(a3 + 16));
  a1[1] = v5;
  a1[2] = v6;
  a1[3] = v7;
  return protocol witness for MutableCollection.subscript.modify in conformance _ArrayBuffer<A>;
}

void protocol witness for MutableCollection.subscript.modify in conformance _ArrayBuffer<A>(id *a1, char a2)
{
}

void (*_ArrayBuffer.subscript.modify(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4))(id *a1, char a2)
{
  *a1 = _ArrayBuffer.subscript.getter(a2, a3, *v4, *(uint64_t **)(a4 + 16));
  a1[1] = v6;
  a1[2] = v7;
  a1[3] = v8;
  return _ArrayBuffer.subscript.modify;
}

void _ArrayBuffer.subscript.modify(id *a1, char a2)
{
}

void *protocol witness for MutableCollection.partition(by:) in conformance _ArrayBuffer<A>@<X0>(uint64_t (*a1)(char *)@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t WitnessTable = swift_getWitnessTable(protocol conformance descriptor for _ArrayBuffer<A>, a3, (uint64_t)a3);
  return MutableCollection<>.partition(by:)(a1, a2, (uint64_t)a3, WitnessTable, a4, a5);
}

void *MutableCollection<>.partition(by:)@<X0>(uint64_t (*a1)(char *)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v21 = a6;
  BOOL v11 = *(int ***)(a4 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v11, a3, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  uint64_t v19 = *((void *)AssociatedTypeWitness - 1);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  unint64_t v14 = (char *)&v19 - v13;
  uint64_t v24 = a3;
  uint64_t v25 = a4;
  uint64_t v26 = a5;
  uint64_t v27 = a1;
  uint64_t v20 = a2;
  uint64_t v28 = a2;
  uint64_t v15 = v22;
  unint64_t result = (*(void *(**)(uint64_t *__return_ptr, uint64_t (*)@<X0>(void *@<X8>), unsigned char *, ValueMetadata *, uint64_t, uint64_t))(a5 + 80))(&v29, partial apply for closure #1 in MutableCollection<>.partition(by:), v23, &type metadata for Int, a3, a5);
  if (!v15)
  {
    if (v30)
    {
      return (void *)MutableCollection<>._partitionImpl(by:)(a1, v20, a3, a4, a5, v21);
    }
    else
    {
      uint64_t v17 = v11;
      uint64_t v18 = v29;
      ((void (*)(uint64_t, int **))v17[8])(a3, v17);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(a4 + 48))(v14, v18, a3, a4);
      return (void *)(*(uint64_t (**)(char *, const char *))(v19 + 8))(v14, AssociatedTypeWitness);
    }
  }
  return result;
}

uint64_t specialized MutableCollection.swapAt(_:_:)(uint64_t result, uint64_t a2)
{
  if (result != a2)
  {
    unint64_t v3 = *v2;
    unint64_t v4 = v2[1];
    char v5 = 8 * (result & 7);
    if (result >= 8) {
      unint64_t v6 = v2[1];
    }
    else {
      unint64_t v6 = *v2;
    }
    unint64_t v7 = v6 >> v5;
    if (a2 >= 8) {
      unint64_t v8 = v2[1];
    }
    else {
      unint64_t v8 = *v2;
    }
    char v9 = 8 * (a2 & 7);
    unint64_t v10 = v8 >> v9;
    uint64_t v11 = (-255 << v5) - 1;
    unint64_t v12 = (unint64_t)v10 << v5;
    if (result > 7)
    {
      unint64_t v4 = v12 | v4 & v11;
      v2[1] = v4;
    }
    else
    {
      unint64_t v3 = v12 | v3 & v11;
      *uint64_t v2 = v3;
    }
    unint64_t v13 = (unint64_t)v7 << v9;
    if (a2 >= 8) {
      unint64_t v3 = v4;
    }
    v2[a2 > 7] = v3 & ((-255 << v9) - 1) | v13;
  }
  return result;
}

uint64_t MutableCollection.swapAt(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *(void *)(a4 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (int **)v8, a3, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  uint64_t v10 = *((void *)AssociatedTypeWitness - 1);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  unint64_t v12 = (char *)&v26 - v11;
  uint64_t v32 = swift_getAssociatedTypeWitness(0, *(int ***)(v8 + 8), a3, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
  uint64_t v30 = *((void *)v32 - 1);
  uint64_t v13 = MEMORY[0x1F4188790](v32);
  uint64_t v31 = (char *)&v26 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v13);
  unint64_t v34 = (char *)&v26 - v15;
  unint64_t v16 = *(uint64_t (**)(uint64_t, uint64_t, const char *))(*(void *)(swift_getAssociatedConformanceWitness(v8, a3, (uint64_t)AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Collection, associated conformance descriptor for Collection.Collection.Index: Comparable)+ 8)+ 8);
  uint64_t v33 = a2;
  uint64_t result = v16(a1, a2, AssociatedTypeWitness);
  if ((result & 1) == 0)
  {
    uint64_t v29 = a4;
    uint64_t v28 = *(uint64_t (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v8 + 80);
    uint64_t v18 = v28(v35, a1, a3, v8);
    uint64_t v19 = *(void (**)(char *))(v30 + 16);
    uint64_t v26 = (void (*)(unsigned char *, void))v18;
    uint64_t v27 = v19;
    v19(v34);
    v26(v35, 0);
    uint64_t v30 = *(void *)(v10 + 16);
    ((void (*)(char *, uint64_t, const char *))v30)(v12, a1, AssociatedTypeWitness);
    uint64_t v20 = v33;
    uint64_t v21 = (void (*)(unsigned char *, void))v28(v35, v33, a3, v8);
    uint64_t v22 = v31;
    v27(v31);
    v21(v35, 0);
    uint64_t v23 = *(void (**)(char *, char *, uint64_t))(v29 + 24);
    uint64_t v24 = v22;
    uint64_t v25 = v29;
    v23(v24, v12, a3);
    ((void (*)(char *, uint64_t, const char *))v30)(v12, v20, AssociatedTypeWitness);
    return ((uint64_t (*)(char *, char *, uint64_t, uint64_t))v23)(v34, v12, a3, v25);
  }
  return result;
}

uint64_t protocol witness for MutableCollection._withUnsafeMutableBufferPointerIfSupported<A>(_:) in conformance _ArrayBuffer<A>@<X0>(uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  return MutableCollection.withContiguousMutableStorageIfAvailable<A>(_:)(a1, a2);
}

uint64_t MutableCollection._withUnsafeMutableBufferPointerIfSupported<A>(_:)@<X0>(uint64_t a1@<X3>, uint64_t a2@<X8>)
{
  return _sSTsE32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lySuqd__Isgyrzo_s4Int8V5WordsVABsAG_pAKRszr__lIetMgyrzo_Tpq5Tm(a1, a2);
}

uint64_t _sSMsE42_withUnsafeMutableBufferPointerIfSupportedyqd__Sgqd__Sry7ElementQzGzKXEKlFSryxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lys5UInt8Vqd__Isglrzo_s12_SmallStringVABsAG_pAKRszr__lIetMglrzo_Tpq5Tm@<X0>(uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a1 - 8) + 56))(a2, 1, 1, a1);
}

uint64_t MutableCollection.withContiguousMutableStorageIfAvailable<A>(_:)@<X0>(uint64_t a1@<X3>, uint64_t a2@<X8>)
{
  return _sSTsE32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lySuqd__Isgyrzo_s4Int8V5WordsVABsAG_pAKRszr__lIetMgyrzo_Tpq5Tm(a1, a2);
}

uint64_t protocol witness for RandomAccessCollection.index(_:offsetBy:) in conformance _ArrayBuffer<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return RandomAccessCollection<>.index(_:offsetBy:)(a1, a2, a3, a4, (uint64_t)&protocol witness table for Int, a5);
}

unint64_t specialized RandomAccessCollection<>.index(_:offsetBy:)(uint64_t a1, uint64_t a2, unsigned int a3)
{
  BOOL v3 = __OFADD__(a1, a2);
  unint64_t result = a1 + a2;
  if (v3)
  {
    __break(1u);
    return result;
  }
  if (a3 >= 0x10000)
  {
    if (result <= 2) {
      return result;
    }
LABEL_6:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Index out of bounds", 19, 2, "Swift/Collection.swift", 22, 2, 0x2D2uLL, 0);
  }
  if (result >= 2) {
    goto LABEL_6;
  }
  return result;
}

{
  BOOL v3;
  unint64_t result;
  unint64_t v5;

  BOOL v3 = __OFADD__(a1, a2);
  unint64_t result = a1 + a2;
  if (v3)
  {
    __break(1u);
    return result;
  }
  if (a3 >= 0x80)
  {
    if (a3 >= 0x800)
    {
      if (HIWORD(a3))
      {
        if (result <= 4) {
          return result;
        }
      }
      else if (result <= 3)
      {
        return result;
      }
LABEL_7:
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Index out of bounds", 19, 2, "Swift/Collection.swift", 22, 2, 0x2D2uLL, 0);
    }
    char v5 = 2;
  }
  else
  {
    char v5 = 1;
  }
  if (result > v5) {
    goto LABEL_7;
  }
  return result;
}

uint64_t specialized RandomAccessCollection<>.index(_:offsetBy:)(uint64_t a1, uint64_t a2, id a3)
{
  uint64_t v3 = a1 + a2;
  if (__OFADD__(a1, a2))
  {
    __break(1u);
LABEL_8:
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "ClosedRange requires lowerBound <= upperBound", 45, 2, "Swift/ClosedRange.swift", 23, 2, 0x59uLL, 0);
  }
  uint64_t v4 = (uint64_t)[a3 count];
  if (v4 < 0) {
    goto LABEL_8;
  }
  if (v3 < 0 || v4 < v3) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Index out of bounds", 19, 2, "Swift/Collection.swift", 22, 2, 0x2D2uLL, 0);
  }
  return v3;
}

unint64_t specialized RandomAccessCollection<>.index(_:offsetBy:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  BOOL v4 = __OFADD__(a1, a2);
  unint64_t result = a1 + a2;
  if (v4)
  {
    __break(1u);
  }
  else if (result > (HIBYTE(a4) & 0xF))
  {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Index out of bounds", 19, 2, "Swift/Collection.swift", 22, 2, 0x2D2uLL, 0);
  }
  return result;
}

uint64_t specialized RandomAccessCollection<>.index(_:offsetBy:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  BOOL v4 = __OFADD__(a1, a2);
  uint64_t result = a1 + a2;
  if (v4)
  {
    __break(1u);
    return result;
  }
  if (!a3)
  {
    if (!result) {
      return result;
    }
LABEL_7:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Index out of bounds", 19, 2, "Swift/Collection.swift", 22, 2, 0x2D2uLL, 0);
  }
  if (result < 0 || a4 - a3 < result) {
    goto LABEL_7;
  }
  return result;
}

uint64_t RandomAccessCollection<>.index(_:offsetBy:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v24 = a1;
  uint64_t v10 = *(void *)(*(void *)(a4 + 8) + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (int **)v10, a3, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  uint64_t v12 = MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v14 = (char *)&v22 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  unint64_t v16 = (char *)&v22 - v15;
  uint64_t v23 = *(void *)(a5 + 8);
  uint64_t v25 = type metadata accessor for ClosedRange(0, (uint64_t)AssociatedTypeWitness, v23, v17);
  uint64_t v18 = (uint64_t)*(v25 - 1);
  MEMORY[0x1F4188790](v25);
  uint64_t v20 = (char *)&v22 - v19;
  uint64_t v26 = a2;
  (*(void (**)(uint64_t *, const char *, uint64_t))(a5 + 48))(&v26, AssociatedTypeWitness, a5);
  (*(void (**)(uint64_t, uint64_t))(v10 + 64))(a3, v10);
  (*(void (**)(uint64_t, uint64_t))(v10 + 72))(a3, v10);
  ClosedRange.init(uncheckedBounds:)((uint64_t)v16, (uint64_t)v14, (uint64_t)AssociatedTypeWitness, v23, (uint64_t)v20);
  (*(void (**)(uint64_t, char *, uint64_t, uint64_t))(v10 + 168))(a6, v20, a3, v10);
  return (*(uint64_t (**)(char *, Class *))(v18 + 8))(v20, v25);
}

unint64_t specialized RandomAccessCollection.index(_:offsetBy:limitedBy:)(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int a4)
{
  unsigned int v7 = a1;
  if (a1)
  {
    int v19 = a1;
    MEMORY[0x1F4188790](a1);
    uint64_t v18 = &v19;
    a1 = specialized Sequence.contains(where:)((unsigned int (*)(int *))closure #1 in Sequence<>.contains(_:)specialized partial apply, (uint64_t)v17, a4 | ((unint64_t)a4 << 32), 0);
    if ((a1 & 1) == 0) {
      goto LABEL_21;
    }
  }
  if (a3)
  {
    int v19 = a3;
    MEMORY[0x1F4188790](a1);
    uint64_t v18 = &v19;
    a1 = specialized Sequence.contains(where:)((unsigned int (*)(int *))closure #1 in Sequence<>.contains(_:)specialized partial apply, (uint64_t)v17, a4 | ((unint64_t)a4 << 32), 0);
    if ((a1 & 1) == 0) {
      goto LABEL_22;
    }
  }
  uint64_t v8 = __clz(v7);
  uint64_t v9 = v8 - __clz(a3);
  uint64_t v10 = v9 >> 3;
  if (a2 < 1)
  {
    if (v9 > 7 || v10 <= a2)
    {
LABEL_12:
      if (!a4
        || (int v19 = a4,
            MEMORY[0x1F4188790](a1),
            uint64_t v18 = &v19,
            a1 = specialized Sequence.contains(where:)((unsigned int (*)(int *))closure #1 in Sequence<>.contains(_:)specialized partial apply, (uint64_t)v17, a4 | ((unint64_t)a4 << 32), 0), (a1 & 1) != 0))
      {
        if (!v7
          || (int v19 = v7,
              MEMORY[0x1F4188790](a1),
              uint64_t v18 = &v19,
              (specialized Sequence.contains(where:)((unsigned int (*)(int *))closure #1 in Sequence<>.contains(_:)specialized partial apply, (uint64_t)v17, a4 | ((unint64_t)a4 << 32), 0) & 1) != 0))
        {
          unint64_t v13 = __clz(a4);
          unint64_t v14 = a2 + ((uint64_t)(v13 - v8) >> 3);
          if (__OFADD__(a2, (uint64_t)(v13 - v8) >> 3))
          {
            __break(1u);
          }
          else if ((v14 & 0x8000000000000000) == 0)
          {
            if (4 - (v13 >> 3) >= v14)
            {
              unsigned __int8 v12 = 0;
              uint64_t v11 = a4 >> (4 * (v14 & 7)) >> (4 * (v14 & 7));
              goto LABEL_20;
            }
            LODWORD(v18) = 0;
            unint64_t v16 = 143;
LABEL_26:
            _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/ValidUTF8Buffer.swift", 27, 2, v16, (int)v18);
          }
          LODWORD(v18) = 0;
          unint64_t v16 = 142;
          goto LABEL_26;
        }
LABEL_22:
        LODWORD(v18) = 0;
        unint64_t v16 = 131;
        goto LABEL_26;
      }
LABEL_21:
      LODWORD(v18) = 0;
      unint64_t v16 = 130;
      goto LABEL_26;
    }
  }
  else if (v9 < 0 || v10 >= a2)
  {
    goto LABEL_12;
  }
  uint64_t v11 = 0;
  unsigned __int8 v12 = 1;
LABEL_20:
  LOBYTE(v19) = v12;
  return v11 | ((unint64_t)v12 << 32);
}

uint64_t RandomAccessCollection.index(_:offsetBy:limitedBy:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a5 + 48))(a1, a3, a4, a5);
  if (a2 < 1)
  {
    if (v11 <= 0 && v11 > a2) {
      goto LABEL_4;
    }
  }
  else if ((v11 & 0x8000000000000000) == 0 && v11 < (unint64_t)a2)
  {
LABEL_4:
    AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, *(int ***)(*(void *)(a5 + 8) + 8), a4, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
    unint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, const char *))(*((void *)AssociatedTypeWitness - 1)
                                                                            + 56);
    unint64_t v14 = AssociatedTypeWitness;
    uint64_t v15 = a6;
    uint64_t v16 = 1;
    goto LABEL_11;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a5 + 32))(a1, a2, a4, a5);
  uint64_t v18 = swift_getAssociatedTypeWitness(0, *(int ***)(*(void *)(a5 + 8) + 8), a4, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  unint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, const char *))(*((void *)v18 - 1) + 56);
  unint64_t v14 = v18;
  uint64_t v15 = a6;
  uint64_t v16 = 0;
LABEL_11:

  return v13(v15, v16, 1, v14);
}

uint64_t protocol witness for RandomAccessCollection.distance(from:to:) in conformance _ArrayBuffer<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return RandomAccessCollection<>.distance(from:to:)(a1, a2, a3, a4, (uint64_t)&protocol witness table for Int);
}

unint64_t specialized RandomAccessCollection<>.distance(from:to:)(unint64_t a1, unint64_t a2, unsigned int a3)
{
  if (a3 < 0x80)
  {
    if (a1 <= 1 && a2 <= 1) {
      return a2 - a1;
    }
LABEL_15:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Index out of bounds", 19, 2, "Swift/Collection.swift", 22, 2, 0x2D2uLL, 0);
  }
  if (a3 >= 0x800)
  {
    if (a3 >= 0x10000)
    {
      if (a1 >= 5 || a2 > 4) {
        goto LABEL_15;
      }
    }
    else if (a1 > 3 || a2 > 3)
    {
      goto LABEL_15;
    }
  }
  else if (a1 > 2 || a2 >= 3)
  {
    goto LABEL_15;
  }
  return a2 - a1;
}

unint64_t specialized RandomAccessCollection<>.distance(from:to:)(uint64_t a1, unint64_t a2, unsigned int a3)
{
  uint64_t v3 = 1;
  if (HIWORD(a3)) {
    uint64_t v3 = 2;
  }
  if (a1 < 0 || v3 < a1) {
    goto LABEL_9;
  }
  if (!HIWORD(a3))
  {
    if (a2 <= 1) {
      return a2 - a1;
    }
LABEL_9:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Index out of bounds", 19, 2, "Swift/Collection.swift", 22, 2, 0x2D2uLL, 0);
  }
  if (a2 >= 3) {
    goto LABEL_9;
  }
  return a2 - a1;
}

uint64_t specialized RandomAccessCollection<>.distance(from:to:)(uint64_t a1, uint64_t a2, id a3)
{
  uint64_t v6 = (uint64_t)[a3 count];
  if (v6 < 0) {
    goto LABEL_9;
  }
  if (a1 < 0 || v6 < a1) {
LABEL_8:
  }
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Index out of bounds", 19, 2, "Swift/Collection.swift", 22, 2, 0x2D2uLL, 0);
  uint64_t v7 = (uint64_t)[a3 sel_count];
  if (v7 < 0) {
LABEL_9:
  }
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "ClosedRange requires lowerBound <= upperBound", 45, 2, "Swift/ClosedRange.swift", 23, 2, 0x59uLL, 0);
  if (a2 < 0 || v7 < a2) {
    goto LABEL_8;
  }
  return a2 - a1;
}

unint64_t specialized RandomAccessCollection<>.distance(from:to:)(unint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4 = HIBYTE(a4) & 0xF;
  if (v4 < a1 || v4 < a2) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Index out of bounds", 19, 2, "Swift/Collection.swift", 22, 2, 0x2D2uLL, 0);
  }
  return a2 - a1;
}

uint64_t specialized RandomAccessCollection<>.distance(from:to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a3) {
    uint64_t v4 = a4 - a3;
  }
  else {
    uint64_t v4 = 0;
  }
  if (a1 < 0 || v4 < a1) {
    goto LABEL_11;
  }
  if (!a3)
  {
    if (!a2) {
      return a2 - a1;
    }
LABEL_11:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Index out of bounds", 19, 2, "Swift/Collection.swift", 22, 2, 0x2D2uLL, 0);
  }
  if (a2 < 0 || a4 - a3 < a2) {
    goto LABEL_11;
  }
  return a2 - a1;
}

uint64_t RandomAccessCollection<>.distance(from:to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v28 = a5;
  uint64_t v29 = a2;
  uint64_t v31 = a1;
  uint64_t v7 = *(void *)(*(void *)(a4 + 8) + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (int **)v7, a3, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  uint64_t v8 = MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8);
  unsigned __int8 v12 = (char *)&v22 - v11;
  uint64_t v13 = *(void *)(a5 + 8);
  uint64_t v25 = v13;
  uint64_t v32 = type metadata accessor for ClosedRange(0, v14, v13, v15);
  uint64_t v27 = (uint64_t)*(v32 - 1);
  MEMORY[0x1F4188790](v32);
  uint64_t v17 = (char *)&v22 - v16;
  uint64_t v26 = *(void (**)(uint64_t, uint64_t))(v7 + 64);
  v26(a3, v7);
  uint64_t v24 = *(void (**)(uint64_t, uint64_t))(v7 + 72);
  v24(a3, v7);
  ClosedRange.init(uncheckedBounds:)((uint64_t)v12, (uint64_t)v10, (uint64_t)AssociatedTypeWitness, v13, (uint64_t)v17);
  uint64_t v23 = *(void (**)(uint64_t, char *, uint64_t, uint64_t))(v7 + 168);
  v23(v31, v17, a3, v7);
  uint64_t v27 = *(void *)(v27 + 8);
  ((void (*)(char *, Class *))v27)(v17, v32);
  v26(a3, v7);
  v24(a3, v7);
  uint64_t v18 = (uint64_t)v10;
  int v19 = AssociatedTypeWitness;
  ClosedRange.init(uncheckedBounds:)((uint64_t)v12, v18, (uint64_t)AssociatedTypeWitness, v25, (uint64_t)v17);
  uint64_t v20 = v29;
  v23(v29, v17, a3, v7);
  ((void (*)(char *, Class *))v27)(v17, v32);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, const char *))(v28 + 40))(&v33, v20, v19);
  return v33;
}

void protocol witness for Collection.startIndex.getter in conformance _ArrayBuffer<A>(void *a1@<X8>)
{
  *a1 = 0;
}

uint64_t _ArrayBuffer.startIndex.getter()
{
  return 0;
}

Swift::Int protocol witness for Collection.endIndex.getter in conformance _ArrayBuffer<A>@<X0>(Swift::Int *a1@<X8>)
{
  Swift::Int result = Array._getCount()();
  *a1 = result;
  return result;
}

uint64_t (*protocol witness for Collection.subscript.read in conformance _ArrayBuffer<A>(uint64_t ***a1, unint64_t *a2, uint64_t a3))()
{
  uint64_t v7 = (uint64_t **)malloc(0x28uLL);
  *a1 = v7;
  v7[4] = (uint64_t *)_ArrayBuffer.subscript.read(v7, *a2, *v3, *(uint64_t **)(a3 + 16));
  return protocol witness for Collection.subscript.read in conformance _ArrayBuffer<A>;
}

void (*specialized _ArrayBuffer.subscript.read(void *a1, unint64_t a2, uint64_t a3))(id *a1)
{
  if ((a3 & 0xC000000000000001) != 0) {
    id v4 = specialized _ArrayBuffer._getElementSlowPath(_:)(a2, a3);
  }
  else {
    id v4 = swift_unknownObjectRetain(*(id *)(a3 + 8 * a2 + 32));
  }
  *a1 = v4;
  return _ArrayBuffer.subscript.readspecialized ;
}

void _ArrayBuffer.subscript.readspecialized (id *a1)
{
}

uint64_t (*_ArrayBuffer.subscript.read(uint64_t **a1, unint64_t a2, uint64_t a3, uint64_t *a4))()
{
  uint64_t v8 = *(a4 - 1);
  *a1 = a4;
  a1[1] = (uint64_t *)v8;
  uint64_t v9 = (uint64_t *)malloc(*(void *)(v8 + 64));
  a1[2] = v9;
  _ArrayBuffer.subscript.getter(a2, a3, a4, (uint64_t)v9);
  return _ArrayBuffer.subscript.read;
}

uint64_t protocol witness for Collection.subscript.getter in conformance _ArrayBuffer<A>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result = _ArrayBuffer.subscript.getter(*a1, a1[1], *v3, *(uint64_t **)(a2 + 16));
  *a3 = result;
  a3[1] = v6;
  a3[2] = v7;
  a3[3] = v8;
  return result;
}

uint64_t protocol witness for Collection.indices.getter in conformance _ArrayBuffer<A>@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X2>, char *a3@<X8>)
{
  uint64_t WitnessTable = swift_getWitnessTable(protocol conformance descriptor for _ArrayBuffer<A>, a1, a2);

  return RandomAccessCollection<>.indices.getter((uint64_t)a1, WitnessTable, (uint64_t)&protocol witness table for Int, a3);
}

uint64_t specialized RandomAccessCollection<>.indices.getter()
{
  return 0;
}

uint64_t RandomAccessCollection<>.indices.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char *a4@<X8>)
{
  uint64_t v46 = a3;
  uint64_t v43 = a4;
  uint64_t v5 = *(void *)(*(void *)(a2 + 8) + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, (int **)v5, a1, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0, (uint64_t)AssociatedTypeWitness, (uint64_t)AssociatedTypeWitness, "lower upper ", 0);
  uint64_t v7 = MEMORY[0x1F4188790](TupleTypeMetadata2);
  uint64_t v45 = (char *)&v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = MEMORY[0x1F4188790](v7);
  uint64_t v11 = (char *)&v40 - v10;
  unsigned __int8 v12 = (void *)*((void *)AssociatedTypeWitness - 1);
  uint64_t v13 = MEMORY[0x1F4188790](v9);
  uint64_t v15 = (char *)&v40 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = MEMORY[0x1F4188790](v13);
  uint64_t v18 = (char *)&v40 - v17;
  uint64_t v19 = MEMORY[0x1F4188790](v16);
  uint64_t v21 = (char *)&v40 - v20;
  MEMORY[0x1F4188790](v19);
  uint64_t v23 = (char *)&v40 - v22;
  (*(void (**)(uint64_t, uint64_t))(v5 + 64))(a1, v5);
  (*(void (**)(uint64_t, uint64_t))(v5 + 72))(a1, v5);
  uint64_t v24 = (void (*)(char *, char *, const char *))v12[2];
  v24(v18, v23, AssociatedTypeWitness);
  uint64_t v44 = v21;
  uint64_t v42 = v24;
  v24(v15, v21, AssociatedTypeWitness);
  uint64_t v25 = *(void *)(v46 + 8);
  if (((*(uint64_t (**)(char *, char *, const char *, uint64_t))(v25 + 24))(v18, v15, AssociatedTypeWitness, v25) & 1) == 0)_assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0); {
  uint64_t v26 = (uint64_t (*)(char *, const char *))v12[1];
  }
  uint64_t v41 = v26;
  v26(v15, AssociatedTypeWitness);
  v26(v18, AssociatedTypeWitness);
  uint64_t v46 = v25;
  uint64_t v27 = TupleTypeMetadata2;
  uint64_t v28 = &v11[*((int *)TupleTypeMetadata2 + 12)];
  uint64_t v29 = (void (*)(char *, char *, const char *))v12[4];
  v29(v11, v23, AssociatedTypeWitness);
  uint64_t v30 = v28;
  v29(v28, v44, AssociatedTypeWitness);
  uint64_t v31 = v45;
  uint64_t v32 = &v45[*((int *)v27 + 12)];
  uint64_t v33 = v42;
  v42(v45, v11, AssociatedTypeWitness);
  v33(v32, v30, AssociatedTypeWitness);
  unint64_t v34 = v43;
  v29(v43, v31, AssociatedTypeWitness);
  uint64_t v35 = v41;
  v41(v32, AssociatedTypeWitness);
  uint64_t v36 = &v31[*((int *)TupleTypeMetadata2 + 12)];
  v29(v31, v11, AssociatedTypeWitness);
  v29(v36, v30, AssociatedTypeWitness);
  uint64_t v38 = type metadata accessor for Range(0, (uint64_t)AssociatedTypeWitness, v46, v37);
  v29(&v34[*((int *)v38 + 9)], v36, AssociatedTypeWitness);
  return v35(v31, AssociatedTypeWitness);
}

BOOL specialized Collection.isEmpty.getter(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0) {
    uint64_t v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  return v2 == 0;
}

uint64_t Collection.isEmpty.getter(uint64_t a1, uint64_t a2)
{
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (int **)a2, a1, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  uint64_t v5 = *((void *)AssociatedTypeWitness - 1);
  uint64_t v6 = MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)&v15 - v9;
  (*(void (**)(uint64_t, uint64_t))(a2 + 64))(a1, a2);
  (*(void (**)(uint64_t, uint64_t))(a2 + 72))(a1, a2);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(a2, a1, (uint64_t)AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Collection, associated conformance descriptor for Collection.Collection.Index: Comparable);
  char v12 = (*(uint64_t (**)(char *, char *, const char *))(*(void *)(AssociatedConformanceWitness + 8) + 8))(v10, v8, AssociatedTypeWitness);
  uint64_t v13 = *(void (**)(char *, const char *))(v5 + 8);
  v13(v8, AssociatedTypeWitness);
  v13(v10, AssociatedTypeWitness);
  return v12 & 1;
}

id protocol witness for Collection.count.getter in conformance _ArrayBuffer<A>(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(uint64_t **)(a1 + 16);
  if (_swift_isClassOrObjCExistentialType((uint64_t)v3, v3) && (v2 < 0 || (v2 & 0x4000000000000000) != 0))
  {
    id v7 = _ArrayBuffer._nonNative.getter(v2);
    id v8 = [v7 count];
    swift_unknownObjectRelease(v7);
    return v8;
  }
  else
  {
    BOOL isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType((uint64_t)v3, v3);
    uint64_t v5 = v2 & 0xFFFFFFFFFFFFFF8;
    if (!isClassOrObjCExistentialType) {
      uint64_t v5 = v2;
    }
    return *(id *)(v5 + 16);
  }
}

id _ArrayBuffer.count.getter(uint64_t a1, uint64_t *a2)
{
  if (_swift_isClassOrObjCExistentialType((uint64_t)a2, a2) && (a1 < 0 || (a1 & 0x4000000000000000) != 0))
  {
    if (a1 < 0) {
      id v7 = (void *)a1;
    }
    else {
      id v7 = (void *)(a1 & 0xFFFFFFFFFFFFFF8);
    }
    return [v7 count];
  }
  else
  {
    BOOL isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType((uint64_t)a2, a2);
    uint64_t v5 = a1 & 0xFFFFFFFFFFFFFF8;
    if (!isClassOrObjCExistentialType) {
      uint64_t v5 = a1;
    }
    return *(id *)(v5 + 16);
  }
}

uint64_t Collection._customIndexOfEquatableElement(_:)@<X0>(uint64_t a1@<X1>, int **a2@<X2>, uint64_t a3@<X8>)
{
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, a2, a1, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  id v7 = type metadata accessor for Optional(0, (uint64_t)AssociatedTypeWitness, v5, v6);
  id v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, Class *))*((void *)*(v7 - 1) + 7);

  return v8(a3, 1, 1, v7);
}

{
  const char *AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  Class *v7;
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t, Class *);
  uint64_t vars8;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, a2, a1, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  id v7 = type metadata accessor for Optional(0, (uint64_t)AssociatedTypeWitness, v5, v6);
  id v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, Class *))*((void *)*(v7 - 1) + 7);

  return v8(a3, 1, 1, v7);
}

uint64_t protocol witness for Collection._failEarlyRangeCheck(_:bounds:) in conformance _ArrayBuffer<A>()
{
  return Collection._failEarlyRangeCheck(_:bounds:)();
}

{
  return Collection._failEarlyRangeCheck(_:bounds:)();
}

{
  return Collection._failEarlyRangeCheck(_:bounds:)();
}

uint64_t protocol witness for Collection.index(after:) in conformance _ArrayBuffer<A>@<X0>(uint64_t a1@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t WitnessTable = swift_getWitnessTable(protocol conformance descriptor for _ArrayBuffer<A>, a2, a3);

  return RandomAccessCollection<>.index(after:)(a1, (uint64_t)a2, WitnessTable, (uint64_t)&protocol witness table for Int, a4);
}

unint64_t specialized RandomAccessCollection<>.index(after:)(unint64_t a1, unsigned int a2)
{
  if (a2 >= 0x80)
  {
    if (a2 >= 0x800)
    {
      if (HIWORD(a2))
      {
        if (a1 < 4) {
          goto LABEL_11;
        }
      }
      else if (a1 < 3)
      {
        goto LABEL_11;
      }
LABEL_6:
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Index out of bounds", 19, 2, "Swift/Collection.swift", 22, 2, 0x2CAuLL, 0);
    }
    unint64_t v2 = 2;
  }
  else
  {
    unint64_t v2 = 1;
  }
  if (v2 <= a1) {
    goto LABEL_6;
  }
LABEL_11:
  BOOL v3 = __OFADD__(a1, 1);
  unint64_t result = a1 + 1;
  if (v3) {
    __break(1u);
  }
  return result;
}

{
  if (a2 < 0x10000)
  {
    if (a1) {
LABEL_3:
    }
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Index out of bounds", 19, 2, "Swift/Collection.swift", 22, 2, 0x2CAuLL, 0);
  }
  else if (a1 >= 2)
  {
    goto LABEL_3;
  }
  return a1 + 1;
}

uint64_t specialized RandomAccessCollection<>.index(after:)(uint64_t a1, id a2)
{
  uint64_t v3 = (uint64_t)[a2 count];
  if (v3 < 0) {
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0xB2uLL, 0);
  }
  if (a1 < 0 || v3 <= a1) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Index out of bounds", 19, 2, "Swift/Collection.swift", 22, 2, 0x2CAuLL, 0);
  }
  return a1 + 1;
}

unint64_t specialized RandomAccessCollection<>.index(after:)(unint64_t a1, uint64_t a2, unint64_t a3)
{
  if ((HIBYTE(a3) & 0xF) <= a1) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Index out of bounds", 19, 2, "Swift/Collection.swift", 22, 2, 0x2CAuLL, 0);
  }
  return a1 + 1;
}

uint64_t specialized RandomAccessCollection<>.index(after:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!a2 || a1 < 0 || a3 - a2 <= a1) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Index out of bounds", 19, 2, "Swift/Collection.swift", 22, 2, 0x2CAuLL, 0);
  }
  return a1 + 1;
}

uint64_t specialized RandomAccessCollection<>.index(after:)(uint64_t a1, uint64_t a2)
{
  if ((unint64_t)a2 >> 62)
  {
    if (a2 < 0) {
      uint64_t v5 = (void *)a2;
    }
    else {
      uint64_t v5 = (void *)(a2 & 0xFFFFFFFFFFFFFF8);
    }
    uint64_t v3 = (uint64_t)[v5 sel_count];
    if (v3 < 0) {
      _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0xB2uLL, 0);
    }
  }
  else
  {
    uint64_t v3 = *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if (a1 < 0 || v3 <= a1) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Index out of bounds", 19, 2, "Swift/Collection.swift", 22, 2, 0x2CAuLL, 0);
  }
  return a1 + 1;
}

uint64_t RandomAccessCollection<>.index(after:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v21 = a4;
  uint64_t v22 = a1;
  uint64_t v23 = a5;
  uint64_t v7 = *(void *)(*(void *)(a3 + 8) + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (int **)v7, a2, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  uint64_t v9 = MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v11 = (char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  uint64_t v13 = (char *)&v21 - v12;
  uint64_t v14 = *(void *)(a4 + 8);
  uint64_t v16 = type metadata accessor for Range(0, (uint64_t)AssociatedTypeWitness, v14, v15);
  uint64_t v17 = (uint64_t)*(v16 - 1);
  MEMORY[0x1F4188790](v16);
  uint64_t v19 = (char *)&v21 - v18;
  (*(void (**)(uint64_t, uint64_t))(v7 + 64))(a2, v7);
  (*(void (**)(uint64_t, uint64_t))(v7 + 72))(a2, v7);
  Range.init(uncheckedBounds:)((uint64_t)v13, (uint64_t)v11, (uint64_t)AssociatedTypeWitness, v14, (uint64_t)v19);
  (*(void (**)(uint64_t, char *, uint64_t, uint64_t))(v7 + 160))(v22, v19, a2, v7);
  (*(void (**)(char *, Class *))(v17 + 8))(v19, v16);
  uint64_t v24 = 1;
  return (*(uint64_t (**)(uint64_t *, const char *))(v21 + 48))(&v24, AssociatedTypeWitness);
}

void *protocol witness for Collection.formIndex(after:) in conformance _ArrayBuffer<A>(void *a1, unint64_t *a2, uint64_t a3)
{
  return protocol witness for Collection.formIndex(after:) in conformance _ArrayBuffer<A>(a1, a2, a3, protocol conformance descriptor for _ArrayBuffer<A>, (void *(*)(uint64_t *__return_ptr, void *, unint64_t *, uint64_t, _UNKNOWN **))RandomAccessCollection<>.index(after:));
}

uint64_t Collection.formIndex(after:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (int **)a3, a2, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  uint64_t v7 = *((void *)AssociatedTypeWitness - 1);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v9 = (char *)&v11 - v8;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(a3 + 184))(a1, a2, a3);
  (*(void (**)(uint64_t, const char *))(v7 + 8))(a1, AssociatedTypeWitness);
  return (*(uint64_t (**)(uint64_t, char *, const char *))(v7 + 32))(a1, v9, AssociatedTypeWitness);
}

{
  const char *AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v11;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (int **)a3, a2, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  uint64_t v7 = *((void *)AssociatedTypeWitness - 1);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v9 = (char *)&v11 - v8;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(a3 + 184))(a1, a2, a3);
  (*(void (**)(uint64_t, const char *))(v7 + 8))(a1, AssociatedTypeWitness);
  return (*(uint64_t (**)(uint64_t, char *, const char *))(v7 + 32))(a1, v9, AssociatedTypeWitness);
}

uint64_t protocol witness for BidirectionalCollection.index(before:) in conformance _ArrayBuffer<A>@<X0>(uint64_t a1@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t WitnessTable = swift_getWitnessTable(protocol conformance descriptor for _ArrayBuffer<A>, a2, a3);

  return RandomAccessCollection<>.index(before:)(a1, (uint64_t)a2, WitnessTable, (uint64_t)&protocol witness table for Int, a4);
}

unint64_t specialized RandomAccessCollection<>.index(before:)(uint64_t a1, unsigned int a2)
{
  BOOL v2 = __OFSUB__(a1, 1);
  unint64_t result = a1 - 1;
  if (v2)
  {
    __break(1u);
  }
  else if (a2 < 0x10000)
  {
    if (result) {
LABEL_4:
    }
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Index out of bounds", 19, 2, "Swift/Collection.swift", 22, 2, 0x2CAuLL, 0);
  }
  else if (result >= 2)
  {
    goto LABEL_4;
  }
  return result;
}

{
  BOOL v2;
  unint64_t result;
  unint64_t v4;

  BOOL v2 = __OFSUB__(a1, 1);
  unint64_t result = a1 - 1;
  if (v2)
  {
    __break(1u);
    return result;
  }
  if (a2 >= 0x80)
  {
    if (a2 >= 0x800)
    {
      if (HIWORD(a2))
      {
        if (result < 4) {
          return result;
        }
      }
      else if (result < 3)
      {
        return result;
      }
LABEL_7:
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Index out of bounds", 19, 2, "Swift/Collection.swift", 22, 2, 0x2CAuLL, 0);
    }
    id v4 = 2;
  }
  else
  {
    id v4 = 1;
  }
  if (result >= v4) {
    goto LABEL_7;
  }
  return result;
}

uint64_t specialized RandomAccessCollection<>.index(before:)(uint64_t a1, id a2)
{
  uint64_t v2 = a1 - 1;
  if (__OFSUB__(a1, 1))
  {
    __break(1u);
LABEL_8:
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0xB2uLL, 0);
  }
  uint64_t v3 = (uint64_t)[a2 count];
  if (v3 < 0) {
    goto LABEL_8;
  }
  if (v2 < 0 || v2 >= v3) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Index out of bounds", 19, 2, "Swift/Collection.swift", 22, 2, 0x2CAuLL, 0);
  }
  return v2;
}

unint64_t specialized RandomAccessCollection<>.index(before:)(uint64_t a1, uint64_t a2, unint64_t a3)
{
  BOOL v3 = __OFSUB__(a1, 1);
  unint64_t result = a1 - 1;
  if (v3)
  {
    __break(1u);
  }
  else if (result >= (HIBYTE(a3) & 0xF))
  {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Index out of bounds", 19, 2, "Swift/Collection.swift", 22, 2, 0x2CAuLL, 0);
  }
  return result;
}

uint64_t specialized RandomAccessCollection<>.index(before:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  BOOL v3 = __OFSUB__(a1, 1);
  uint64_t result = a1 - 1;
  if (v3)
  {
    __break(1u);
  }
  else if (!a2 || result < 0 || result >= a3 - a2)
  {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Index out of bounds", 19, 2, "Swift/Collection.swift", 22, 2, 0x2CAuLL, 0);
  }
  return result;
}

uint64_t RandomAccessCollection<>.index(before:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v22 = a1;
  uint64_t v8 = *(void *)(*(void *)(a3 + 8) + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (int **)v8, a2, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  uint64_t v10 = MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v12 = (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10);
  uint64_t v14 = (char *)&v20 - v13;
  uint64_t v21 = *(void *)(a4 + 8);
  uint64_t v23 = type metadata accessor for Range(0, (uint64_t)AssociatedTypeWitness, v21, v15);
  uint64_t v16 = (uint64_t)*(v23 - 1);
  MEMORY[0x1F4188790](v23);
  uint64_t v18 = (char *)&v20 - v17;
  uint64_t v24 = -1;
  (*(void (**)(uint64_t *, const char *, uint64_t))(a4 + 48))(&v24, AssociatedTypeWitness, a4);
  (*(void (**)(uint64_t, uint64_t))(v8 + 64))(a2, v8);
  (*(void (**)(uint64_t, uint64_t))(v8 + 72))(a2, v8);
  Range.init(uncheckedBounds:)((uint64_t)v14, (uint64_t)v12, (uint64_t)AssociatedTypeWitness, v21, (uint64_t)v18);
  (*(void (**)(uint64_t, char *, uint64_t, uint64_t))(v8 + 160))(a5, v18, a2, v8);
  return (*(uint64_t (**)(char *, Class *))(v16 + 8))(v18, v23);
}

void *protocol witness for BidirectionalCollection.formIndex(before:) in conformance _ArrayBuffer<A>(void *a1, unint64_t *a2, uint64_t a3)
{
  return protocol witness for Collection.formIndex(after:) in conformance _ArrayBuffer<A>(a1, a2, a3, protocol conformance descriptor for _ArrayBuffer<A>, (void *(*)(uint64_t *__return_ptr, void *, unint64_t *, uint64_t, _UNKNOWN **))RandomAccessCollection<>.index(before:));
}

uint64_t BidirectionalCollection.formIndex(before:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, *(int ***)(a3 + 8), a2, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  uint64_t v7 = *((void *)AssociatedTypeWitness - 1);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v9 = (char *)&v11 - v8;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(a3 + 32))(a1, a2, a3);
  (*(void (**)(uint64_t, const char *))(v7 + 8))(a1, AssociatedTypeWitness);
  return (*(uint64_t (**)(uint64_t, char *, const char *))(v7 + 32))(a1, v9, AssociatedTypeWitness);
}

{
  const char *AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v11;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, *(int ***)(a3 + 8), a2, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  uint64_t v7 = *((void *)AssociatedTypeWitness - 1);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v9 = (char *)&v11 - v8;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(a3 + 32))(a1, a2, a3);
  (*(void (**)(uint64_t, const char *))(v7 + 8))(a1, AssociatedTypeWitness);
  return (*(uint64_t (**)(uint64_t, char *, const char *))(v7 + 32))(a1, v9, AssociatedTypeWitness);
}

uint64_t protocol witness for BidirectionalCollection.index(_:offsetBy:) in conformance _ArrayBuffer<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t WitnessTable = swift_getWitnessTable(protocol conformance descriptor for _ArrayBuffer<A>, a3, (uint64_t)a3);

  return RandomAccessCollection<>.index(_:offsetBy:)(a1, a2, (uint64_t)a3, WitnessTable, (uint64_t)&protocol witness table for Int, a4);
}

uint64_t protocol witness for BidirectionalCollection.index(_:offsetBy:limitedBy:) in conformance _ArrayBuffer<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t WitnessTable = swift_getWitnessTable(protocol conformance descriptor for _ArrayBuffer<A>, a4, a3);

  return RandomAccessCollection.index(_:offsetBy:limitedBy:)(a1, a2, a3, (uint64_t)a4, WitnessTable, a5);
}

uint64_t protocol witness for BidirectionalCollection.distance(from:to:) in conformance _ArrayBuffer<A>(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  uint64_t WitnessTable = swift_getWitnessTable(protocol conformance descriptor for _ArrayBuffer<A>, a3, (uint64_t)a3);

  return RandomAccessCollection<>.distance(from:to:)(a1, a2, (uint64_t)a3, WitnessTable, (uint64_t)&protocol witness table for Int);
}

void protocol witness for Sequence.makeIterator() in conformance _ArrayBuffer<A>(void *a1@<X8>)
{
  *a1 = *v1;
  a1[1] = 0;
}

uint64_t protocol witness for Sequence.underestimatedCount.getter in conformance _ArrayBuffer<A>(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable(protocol conformance descriptor for _ArrayBuffer<A>, a1, a3);

  return Collection.underestimatedCount.getter((uint64_t)a1, WitnessTable);
}

Swift::Int specialized Collection.underestimatedCount.getter(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x1000000000000000) != 0) {
    return String.UTF16View._foreignCount()();
  }
  uint64_t v2 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0) {
    uint64_t v2 = a1;
  }
  return String.UTF16View._nativeGetOffset(for:)((Swift::String::Index)((v2 << 16) | 7));
}

uint64_t Collection.underestimatedCount.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 112))();
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance _ArrayBuffer<A>(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable(protocol conformance descriptor for _ArrayBuffer<A>, a1, a3);

  return Collection._copyToContiguousArray()((uint64_t)a1, WitnessTable);
}

uint64_t Collection._copyToContiguousArray()(uint64_t a1, uint64_t a2)
{
  return Sequence._copyToContiguousArray()(a1, a2, (uint64_t (*)(uint64_t, uint64_t, uint64_t))specialized Collection._copyToContiguousArray());
}

uint64_t Sequence._copyToContiguousArray()(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v5 = a3(v3, a1, a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a1 - 8) + 8))(v3, a1);
  return v5;
}

uint64_t protocol witness for Sequence._copyContents(initializing:) in conformance _ArrayBuffer<A>(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return protocol witness for Sequence._copyContents(initializing:) in conformance _ArrayBuffer<A>(a1, a2, a3, a4, a5, (uint64_t (*)(uint64_t, uint64_t, void, void))_ArrayBuffer._copyContents(initializing:));
}

uint64_t specialized _ArrayBuffer._copyContents(initializing:)(void **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a2;
  if ((unint64_t)a3 >> 62)
  {
    if (a2 >= 1)
    {
      if (!a1) {
        _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeMutableBufferPointer has a nil start and nonzero count", 60, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x49uLL, 0);
      }
      if (a3 < 0) {
        uint64_t v7 = (void *)a3;
      }
      else {
        uint64_t v7 = (void *)(a3 & 0xFFFFFFFFFFFFFF8);
      }
      swift_bridgeObjectRetain(a3);
      id v8 = _CocoaArrayWrapper._copyContents(initializing:)(a1, v4, v7);
      swift_unknownObjectRelease(v8);
    }
  }
  else if (a2 >= 1)
  {
    if (!a1) {
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/ContiguousArrayBuffer.swift", 33, 2, 0x2ECuLL, 0);
    }
    if (*(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10) < a2) {
      uint64_t v4 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    uint64_t v6 = (char *)((a3 & 0xFFFFFFFFFFFFFF8) + 32);
    swift_bridgeObjectRetain(a3);
    specialized UnsafeMutablePointer.initialize(from:count:)(v6, v4, (char *)a1);
    swift_bridgeObjectRelease(a3);
  }
  return a3;
}

uint64_t _ArrayBuffer._copyContents(initializing:)(void **a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  if (_swift_isClassOrObjCExistentialType((uint64_t)a4, a4) && (a3 < 0 || (a3 & 0x4000000000000000) != 0))
  {
    if (a2 >= 1)
    {
      if (!a1) {
        _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeMutableBufferPointer has a nil start and nonzero count", 60, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x49uLL, 0);
      }
      if (a3 < 0) {
        uint64_t v11 = (void *)a3;
      }
      else {
        uint64_t v11 = (void *)(a3 & 0xFFFFFFFFFFFFFF8);
      }
      swift_unknownObjectRetain(v11);
      id v12 = _CocoaArrayWrapper._copyContents(initializing:)(a1, a2, v11);
      swift_unknownObjectRelease(v12);
    }
  }
  else
  {
    BOOL isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType((uint64_t)a4, a4);
    uint64_t v9 = a3 & 0xFFFFFFFFFFFFFF8;
    if (!isClassOrObjCExistentialType) {
      uint64_t v9 = a3;
    }
    if (a2 > 0)
    {
      if (!a1) {
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/ContiguousArrayBuffer.swift", 33, 2, 0x2ECuLL, 0);
      }
      if (*(void *)(v9 + 16) < a2) {
        a2 = *(void *)(v9 + 16);
      }
      uint64_t v10 = (char *)(v9
                   + ((*(unsigned __int8 *)(*(a4 - 1) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(a4 - 1) + 80)));
      swift_bridgeObjectRetain(a3);
      UnsafeMutablePointer.initialize(from:count:)(v10, a2, (char *)a1, (unint64_t *)a4);
      swift_bridgeObjectRelease(a3);
    }
  }
  return a3;
}

BOOL static Int.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return a1 == a2;
}

uint64_t _ArrayBuffer.arrayPropertyIsNativeTypeChecked.getter(uint64_t a1, uint64_t *a2)
{
  return ((a1 & 0xC000000000000001) == 0) | !_swift_isClassOrObjCExistentialType((uint64_t)a2, a2);
}

Swift::Bool __swiftcall _ArrayBuffer.isUniquelyReferenced()()
{
  BOOL isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType(*(void *)(v0 + 16), *(uint64_t **)(v0 + 16));
  uint64_t v3 = *v1;
  if (!isClassOrObjCExistentialType) {
    return swift_isUniquelyReferenced_nonNull_native(*v1);
  }
  Swift::Bool result = 0;
  if ((v3 & 0x8000000000000000) == 0 && (v3 & 0x4000000000000000) == 0) {
    return swift_isUniquelyReferenced_nonNull_bridgeObject(*v1);
  }
  return result;
}

Swift::Bool __swiftcall _BridgeStorage.isUniquelyReferencedUnflaggedNative()()
{
  return swift_isUniquelyReferenced_nonNull_native(*v0);
}

Swift::Bool __swiftcall _BridgeStorage.isUniquelyReferencedNative()()
{
  Swift::Bool result = 0;
  if ((*v0 & 0x8000000000000000) == 0 && (*v0 & 0x4000000000000000) == 0) {
    return swift_isUniquelyReferenced_nonNull_bridgeObject(*v0);
  }
  return result;
}

BOOL specialized _ArrayBuffer.beginCOWMutation()()
{
  uint64_t v1 = *v0;
  BOOL result = swift_isUniquelyReferenced_nonNull_native(*v0);
  *uint64_t v0 = v1;
  return result;
}

Swift::Bool __swiftcall _ArrayBuffer.beginCOWMutation()()
{
  uint64_t v2 = *(uint64_t **)(v0 + 16);
  BOOL isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType((uint64_t)v2, v2);
  uint64_t v4 = *v1;
  if (isClassOrObjCExistentialType)
  {
    int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(*v1);
    *uint64_t v1 = v4;
    if (isUniquelyReferenced_nonNull_bridgeObject)
    {
      BOOL v6 = _swift_isClassOrObjCExistentialType((uint64_t)v2, v2);
      BOOL v8 = (v4 & 0x4000000000000000) == 0 && v4 >= 0;
      LOBYTE(isUniquelyReferenced_nonNull_bridgeObject) = !v6 || v8;
    }
  }
  else
  {
    LOBYTE(isUniquelyReferenced_nonNull_bridgeObject) = swift_isUniquelyReferenced_nonNull_native(*v1);
    *uint64_t v1 = v4;
  }
  return isUniquelyReferenced_nonNull_bridgeObject;
}

uint64_t _ArrayBuffer._isNative.getter(uint64_t a1, uint64_t *a2)
{
  BOOL isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType((uint64_t)a2, a2);
  BOOL v5 = (a1 & 0x4000000000000000) == 0 && a1 >= 0;
  return !isClassOrObjCExistentialType || v5;
}

__objc2_class **_ArrayBuffer._asCocoaArray()(int64_t a1, uint64_t *a2)
{
  if (_swift_isClassOrObjCExistentialType((uint64_t)a2, a2) && (a1 < 0 || (a1 & 0x4000000000000000) != 0))
  {
    if (a1 < 0) {
      uint64_t v7 = (void *)a1;
    }
    else {
      uint64_t v7 = (void *)(a1 & 0xFFFFFFFFFFFFFF8);
    }
    return (__objc2_class **)swift_unknownObjectRetain(v7);
  }
  else
  {
    if (_swift_isClassOrObjCExistentialType((uint64_t)a2, a2)) {
      uint64_t v4 = (atomic_ullong *)(a1 & 0xFFFFFFFFFFFFFF8);
    }
    else {
      uint64_t v4 = (atomic_ullong *)a1;
    }
    swift_bridgeObjectRetain(a1);
    return _ContiguousArrayBuffer._asCocoaArray()(v4, a2, v5);
  }
}

Swift::Bool __swiftcall _fastPath(_:)(Swift::Bool a1)
{
  return a1;
}

__objc2_class **_ContiguousArrayBuffer._asCocoaArray()(atomic_ullong *a1, uint64_t *a2, void *a3)
{
  if (one-time initialization token for _bridgeInitializedSuccessfully != -1) {
    swift_once(&one-time initialization token for _bridgeInitializedSuccessfully, (dispatch_function_t)one-time initialization function for _bridgeInitializedSuccessfully, a3);
  }
  if (!_bridgeInitializedSuccessfully) {
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/BridgeObjectiveC.swift", 28, 2, 0x82uLL, 0);
  }
  _orphanedFoundationSubclassesReparented = 1;
  if (a1[2])
  {
    if (_swift_isClassOrObjCExistentialType((uint64_t)a2, a2))
    {
      uint64_t v7 = type metadata accessor for _ContiguousArrayStorage(0, (uint64_t)a2, v5, v6);
      swift_retain(a1);
      _swift_setClassMetadata((uint64_t)v7, a1);
      swift_release((uint64_t)a1);
    }
    else
    {
      uint64_t v8 = type metadata accessor for __StaticArrayStorage();
      if (swift_dynamicCastClass((uint64_t)a1, v8)) {
        uint64_t v11 = (unint64_t *)type metadata accessor for __SwiftDeferredStaticNSArray(0, (uint64_t)a2, v9, v10);
      }
      else {
        uint64_t v11 = (unint64_t *)type metadata accessor for __SwiftDeferredNSArray();
      }
      id v12 = swift_allocObject(v11, 0x20uLL, 7uLL);
      v12[2] = 0;
      v12[3] = a1;
      return (__objc2_class **)v12;
    }
  }
  else
  {
    swift_release((uint64_t)a1);
    return &_swiftEmptyArrayStorage;
  }
  return (__objc2_class **)a1;
}

id _ArrayBuffer._nonNative.getter(uint64_t a1)
{
  uint64_t v1 = (void *)specialized _ArrayBuffer._nonNative.getter(a1);

  return swift_unknownObjectRetain(v1);
}

__objc2_class **specialized _ArrayBuffer._consumeAndCreateNew()(uint64_t a1)
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(a1 + 16), 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(a1 + 16), 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(a1 + 16), 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(a1 + 16), 0, a1);
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew()(uint64_t a1)
{
  uint64_t v1 = a1;
  if ((unint64_t)a1 >> 62)
  {
    if (a1 >= 0) {
      a1 &= 0xFFFFFFFFFFFFFF8uLL;
    }
    id v2 = [a1 count];
  }
  else
  {
    id v2 = *(id *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, (uint64_t)v2, 0, v1);
}

uint64_t _ArrayBuffer._consumeAndCreateNew()(uint64_t a1, uint64_t *a2)
{
  if (_swift_isClassOrObjCExistentialType((uint64_t)a2, a2) && (a1 < 0 || (a1 & 0x4000000000000000) != 0))
  {
    if (a1 < 0) {
      uint64_t v8 = (void *)a1;
    }
    else {
      uint64_t v8 = (void *)(a1 & 0xFFFFFFFFFFFFFF8);
    }
    id v6 = [v8 count];
  }
  else
  {
    BOOL isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType((uint64_t)a2, a2);
    uint64_t v5 = a1 & 0xFFFFFFFFFFFFFF8;
    if (!isClassOrObjCExistentialType) {
      uint64_t v5 = a1;
    }
    id v6 = *(id *)(v5 + 16);
  }

  return _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, (uint64_t)v6, 0, a1, a2);
}

__objc2_class **specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(__objc2_class **result, int64_t a2, char a3, uint64_t a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    uint64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        uint64_t v7 = a2;
      }
    }
  }
  else
  {
    uint64_t v7 = a2;
  }
  size_t v8 = *(void *)(a4 + 16);
  uint64_t v9 = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(v8, v7);
  uint64_t v10 = (char *)(v9 + 4);
  if (v5)
  {
    specialized UnsafeMutablePointer.moveInitialize(from:count:)((char *)(a4 + 32), v8, v10, "UnsafeMutablePointer.moveInitialize with negative count", 55, 0x416uLL);
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, v10, a4);
  }
  swift_bridgeObjectRelease(a4);
  return v9;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __objc2_class **v9;
  char *v10;

  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    uint64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        uint64_t v7 = a2;
      }
    }
  }
  else
  {
    uint64_t v7 = a2;
  }
  size_t v8 = *(void *)(a4 + 16);
  uint64_t v9 = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(v8, v7);
  uint64_t v10 = (char *)(v9 + 4);
  if (v5)
  {
    specialized UnsafeMutablePointer.moveInitialize(from:count:)((char *)(a4 + 32), v8, v10);
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, v10, a4);
  }
  swift_bridgeObjectRelease(a4);
  return v9;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  __objc2_class **v11;
  int64_t v12;
  uint64_t v13;
  char *v14;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = *(void *)(a4 + 24);
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    size_t v8 = *(void *)(a4 + 16);
    if (v7 <= v8) {
      uint64_t v9 = *(void *)(a4 + 16);
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      uint64_t v10 = (unint64_t *)canonical specialized generic type metadata accessor for _ContiguousArrayStorage<String.Index>();
      uint64_t v11 = (__objc2_class **)swift_allocObject(v10, 8 * v9 + 32, 7uLL);
      id v12 = _swift_stdlib_malloc_size(v11);
      uint64_t v13 = v12 - 32;
      if (v12 < 32) {
        uint64_t v13 = v12 - 25;
      }
      v11[2] = (__objc2_class *)v8;
      v11[3] = (__objc2_class *)(2 * (v13 >> 3));
      uint64_t v14 = (char *)(v11 + 4);
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v11 = &_swiftEmptyArrayStorage;
      uint64_t v14 = (char *)&_swiftEmptySetSingleton;
      if (result)
      {
LABEL_15:
        specialized UnsafeMutablePointer.moveInitialize(from:count:)((char *)(a4 + 32), v8, v14);
        *(void *)(a4 + 16) = 0;
LABEL_18:
        swift_bridgeObjectRelease(a4);
        return v11;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, v14, a4);
    goto LABEL_18;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  unint64_t *v10;
  __objc2_class **v11;
  size_t v12;
  char *v13;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = *(void *)(a4 + 24);
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    size_t v8 = *(void *)(a4 + 16);
    if (v7 <= v8) {
      uint64_t v9 = *(void *)(a4 + 16);
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      uint64_t v10 = (unint64_t *)canonical specialized generic type metadata accessor for _ContiguousArrayStorage<Bool>();
      uint64_t v11 = (__objc2_class **)swift_allocObject(v10, v9 + 32, 7uLL);
      id v12 = _swift_stdlib_malloc_size(v11);
      v11[2] = (__objc2_class *)v8;
      v11[3] = (__objc2_class *)(2 * v12 - 64);
      uint64_t v13 = (char *)(v11 + 4);
      if (v5)
      {
LABEL_13:
        specialized UnsafeMutablePointer.moveInitialize(from:count:)((char *)(a4 + 32), v8, v13);
        *(void *)(a4 + 16) = 0;
LABEL_16:
        swift_bridgeObjectRelease(a4);
        return v11;
      }
    }
    else
    {
      uint64_t v11 = &_swiftEmptyArrayStorage;
      uint64_t v13 = (char *)&_swiftEmptySetSingleton;
      if (result) {
        goto LABEL_13;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, v13, a4);
    goto LABEL_16;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  __objc2_class **v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;

  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    uint64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        uint64_t v7 = a2;
      }
    }
  }
  else
  {
    uint64_t v7 = a2;
  }
  size_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    uint64_t v9 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = (unint64_t *)canonical specialized generic type metadata accessor for _ContiguousArrayStorage<String>();
    uint64_t v11 = (__objc2_class **)swift_allocObject(v10, 16 * v9 + 32, 7uLL);
    id v12 = _swift_stdlib_malloc_size(v11);
    uint64_t v13 = v12 - 32;
    if (v12 < 32) {
      uint64_t v13 = v12 - 17;
    }
    v11[2] = (__objc2_class *)v8;
    v11[3] = (__objc2_class *)(2 * (v13 >> 4));
  }
  else
  {
    uint64_t v11 = &_swiftEmptyArrayStorage;
  }
  uint64_t v14 = (char *)(v11 + 4);
  uint64_t v15 = (char *)(a4 + 32);
  if (v5)
  {
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(v15, v8, v14);
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    specialized UnsafeMutablePointer.initialize(from:count:)(v15, v8, v14);
  }
  swift_bridgeObjectRelease(a4);
  return v11;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  __objc2_class **v11;
  int64_t v12;
  uint64_t v13;
  char *v14;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = *(void *)(a4 + 24);
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    size_t v8 = *(void *)(a4 + 16);
    if (v7 <= v8) {
      uint64_t v9 = *(void *)(a4 + 16);
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      uint64_t v10 = (unint64_t *)canonical specialized generic type metadata accessor for _ContiguousArrayStorage<Any>();
      uint64_t v11 = (__objc2_class **)swift_allocObject(v10, 32 * v9 + 32, 7uLL);
      id v12 = _swift_stdlib_malloc_size(v11);
      uint64_t v13 = v12 - 32;
      if (v12 < 32) {
        uint64_t v13 = v12 - 1;
      }
      v11[2] = (__objc2_class *)v8;
      v11[3] = (__objc2_class *)(2 * (v13 >> 5));
      uint64_t v14 = (char *)(v11 + 4);
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v11 = &_swiftEmptyArrayStorage;
      uint64_t v14 = (char *)&_swiftEmptySetSingleton;
      if (result)
      {
LABEL_15:
        specialized UnsafeMutablePointer.moveInitialize(from:count:)((char *)(a4 + 32), v8, v14);
        *(void *)(a4 + 16) = 0;
LABEL_18:
        swift_bridgeObjectRelease(a4);
        return v11;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, v14, a4);
    goto LABEL_18;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  __objc2_class **v11;
  int64_t v12;
  uint64_t v13;
  char *v14;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = *(void *)(a4 + 24);
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    size_t v8 = *(void *)(a4 + 16);
    if (v7 <= v8) {
      uint64_t v9 = *(void *)(a4 + 16);
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      uint64_t v10 = (unint64_t *)canonical specialized generic type metadata accessor for _ContiguousArrayStorage<Range<Int>>();
      uint64_t v11 = (__objc2_class **)swift_allocObject(v10, 16 * v9 + 32, 7uLL);
      id v12 = _swift_stdlib_malloc_size(v11);
      uint64_t v13 = v12 - 32;
      if (v12 < 32) {
        uint64_t v13 = v12 - 17;
      }
      v11[2] = (__objc2_class *)v8;
      v11[3] = (__objc2_class *)(2 * (v13 >> 4));
      uint64_t v14 = (char *)(v11 + 4);
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v11 = &_swiftEmptyArrayStorage;
      uint64_t v14 = (char *)&_swiftEmptySetSingleton;
      if (result)
      {
LABEL_15:
        specialized UnsafeMutablePointer.moveInitialize(from:count:)((char *)(a4 + 32), v8, v14);
        *(void *)(a4 + 16) = 0;
LABEL_18:
        swift_bridgeObjectRelease(a4);
        return v11;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, v14, a4);
    goto LABEL_18;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  unint64_t *v10;
  __objc2_class **v11;
  size_t v12;
  char *v13;
  char *v14;

  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    uint64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        uint64_t v7 = a2;
      }
    }
  }
  else
  {
    uint64_t v7 = a2;
  }
  size_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    uint64_t v9 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = (unint64_t *)canonical specialized generic type metadata accessor for _ContiguousArrayStorage<UInt8>();
    uint64_t v11 = (__objc2_class **)swift_allocObject(v10, v9 + 32, 7uLL);
    id v12 = _swift_stdlib_malloc_size(v11);
    v11[2] = (__objc2_class *)v8;
    v11[3] = (__objc2_class *)(2 * v12 - 64);
  }
  else
  {
    uint64_t v11 = &_swiftEmptyArrayStorage;
  }
  uint64_t v13 = (char *)(v11 + 4);
  uint64_t v14 = (char *)(a4 + 32);
  if (v5)
  {
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(v14, v8, v13, "UnsafeMutablePointer.moveInitialize with negative count", 55, 0x416uLL);
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    specialized UnsafeMutablePointer.initialize(from:count:)(v14, v8, v13);
  }
  swift_bridgeObjectRelease(a4);
  return v11;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  __objc2_class **v11;
  int64_t v12;
  uint64_t v13;
  char *v14;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = *(void *)(a4 + 24);
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    size_t v8 = *(void *)(a4 + 16);
    if (v7 <= v8) {
      uint64_t v9 = *(void *)(a4 + 16);
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      uint64_t v10 = (unint64_t *)canonical specialized generic type metadata accessor for _ContiguousArrayStorage<Int>();
      uint64_t v11 = (__objc2_class **)swift_allocObject(v10, 8 * v9 + 32, 7uLL);
      id v12 = _swift_stdlib_malloc_size(v11);
      uint64_t v13 = v12 - 32;
      if (v12 < 32) {
        uint64_t v13 = v12 - 25;
      }
      v11[2] = (__objc2_class *)v8;
      v11[3] = (__objc2_class *)(2 * (v13 >> 3));
      uint64_t v14 = (char *)(v11 + 4);
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v11 = &_swiftEmptyArrayStorage;
      uint64_t v14 = (char *)&_swiftEmptySetSingleton;
      if (result)
      {
LABEL_15:
        specialized UnsafeMutablePointer.moveInitialize(from:count:)((char *)(a4 + 32), v8, v14);
        *(void *)(a4 + 16) = 0;
LABEL_18:
        swift_bridgeObjectRelease(a4);
        return v11;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, v14, a4);
    goto LABEL_18;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  __objc2_class **v11;
  int64_t v12;
  uint64_t v13;
  char *v14;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = *(void *)(a4 + 24);
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    size_t v8 = *(void *)(a4 + 16);
    if (v7 <= v8) {
      uint64_t v9 = *(void *)(a4 + 16);
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      uint64_t v10 = (unint64_t *)canonical specialized generic type metadata accessor for _ContiguousArrayStorage<_V>();
      uint64_t v11 = (__objc2_class **)swift_allocObject(v10, 8 * v9 + 32, 7uLL);
      id v12 = _swift_stdlib_malloc_size(v11);
      uint64_t v13 = v12 - 32;
      if (v12 < 32) {
        uint64_t v13 = v12 - 25;
      }
      v11[2] = (__objc2_class *)v8;
      v11[3] = (__objc2_class *)(2 * (v13 >> 3));
      uint64_t v14 = (char *)(v11 + 4);
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v11 = &_swiftEmptyArrayStorage;
      uint64_t v14 = (char *)&_swiftEmptySetSingleton;
      if (result)
      {
LABEL_15:
        specialized UnsafeMutablePointer.moveInitialize(from:count:)((char *)(a4 + 32), v8, v14);
        *(void *)(a4 + 16) = 0;
LABEL_18:
        swift_bridgeObjectRelease(a4);
        return v11;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, v14, a4);
    goto LABEL_18;
  }
  __break(1u);
  return result;
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, uint64_t a2, char a3, uint64_t a4)
{
  unint64_t v8 = (unint64_t)a4 >> 62;
  if ((unint64_t)a4 >> 62)
  {
    if (a4 < 0) {
      uint64_t v18 = (void *)a4;
    }
    else {
      uint64_t v18 = (void *)(a4 & 0xFFFFFFFFFFFFFF8);
    }
    uint64_t result = (uint64_t)[v18 count];
    if ((a3 & 1) == 0) {
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t result = *(void *)((a4 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1;
    if ((a3 & 1) == 0) {
      goto LABEL_9;
    }
  }
  if (result >= a2)
  {
    a2 = result;
    goto LABEL_9;
  }
  if (result + 0x4000000000000000 >= 0)
  {
    if (2 * result > a2) {
      a2 = 2 * result;
    }
LABEL_9:
    if (v8)
    {
      if (a4 < 0) {
        uint64_t v11 = (void *)a4;
      }
      else {
        uint64_t v11 = (void *)(a4 & 0xFFFFFFFFFFFFFF8);
      }
      uint64_t v10 = (uint64_t)[v11 count];
    }
    else
    {
      uint64_t v10 = *(void *)((a4 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    if (a2 <= v10) {
      a2 = v10;
    }
    if (a2)
    {
      id v12 = (unint64_t *)canonical specialized generic type metadata accessor for _ContiguousArrayStorage<Swift.AnyObject>();
      uint64_t v13 = (__objc2_class **)swift_allocObject(v12, 8 * a2 + 32, 7uLL);
      int64_t v14 = _swift_stdlib_malloc_size(v13);
      uint64_t v15 = v14 - 32;
      if (v14 < 32) {
        uint64_t v15 = v14 - 25;
      }
      v13[2] = (__objc2_class *)v10;
      v13[3] = (__objc2_class *)((2 * (v15 >> 3)) | 1);
      if (a1) {
        goto LABEL_21;
      }
    }
    else
    {
      uint64_t v13 = &_swiftEmptyArrayStorage;
      if (a1)
      {
LABEL_21:
        specialized UnsafeMutablePointer.moveInitialize(from:count:)((char *)((a4 & 0xFFFFFFFFFFFFFF8) + 32), v10, (char *)v13 + 32);
        *(void *)((a4 & 0xFFFFFFFFFFFFFF8) + 0x10) = 0;
LABEL_30:
        swift_bridgeObjectRelease(a4);
        return (uint64_t)v13;
      }
    }
    if (v10 < 0) {
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
    }
    uint64_t v16 = (void **)(v13 + 4);
    if (v8)
    {
      if (a4 < 0) {
        uint64_t v17 = (void *)a4;
      }
      else {
        uint64_t v17 = (void *)(a4 & 0xFFFFFFFFFFFFFF8);
      }
      specialized _CocoaArrayWrapper._copyContents(subRange:initializing:)(0, v10, v16, v17);
    }
    else
    {
      specialized UnsafeMutablePointer.initialize(from:count:)((char *)((a4 & 0xFFFFFFFFFFFFFF8) + 32), v10, (char *)v16);
    }
    goto LABEL_30;
  }
  __break(1u);
  return result;
}

__objc2_class **specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(__objc2_class **result, int64_t a2, char a3, uint64_t a4, uint64_t *a5, uint64_t *a6)
{
  char v8 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v10 = a2;
    goto LABEL_8;
  }
  unint64_t v9 = *(void *)(a4 + 24);
  uint64_t v10 = v9 >> 1;
  if ((uint64_t)(v9 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v10 + 0x4000000000000000 >= 0)
  {
    uint64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v10 = a2;
    }
LABEL_8:
    uint64_t v11 = *(void *)(a4 + 16);
    if (v10 <= v11) {
      uint64_t v12 = *(void *)(a4 + 16);
    }
    else {
      uint64_t v12 = v10;
    }
    if (v12)
    {
      uint64_t v13 = (unint64_t *)__swift_instantiateConcreteTypeFromMangledName(a5);
      int64_t v14 = (__objc2_class **)swift_allocObject(v13, 40 * v12 + 32, 7uLL);
      size_t v15 = _swift_stdlib_malloc_size(v14);
      v14[2] = (__objc2_class *)v11;
      v14[3] = (__objc2_class *)(2 * ((uint64_t)(v15 - 32) / 40));
      uint64_t v16 = (char *)(v14 + 4);
      if (v8)
      {
LABEL_13:
        specialized UnsafeMutablePointer.moveInitialize(from:count:)((char *)(a4 + 32), v11, v16);
        *(void *)(a4 + 16) = 0;
LABEL_16:
        swift_bridgeObjectRelease(a4);
        return v14;
      }
    }
    else
    {
      int64_t v14 = &_swiftEmptyArrayStorage;
      uint64_t v16 = (char *)&_swiftEmptySetSingleton;
      if (result) {
        goto LABEL_13;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v11, v16, a4, a6);
    goto LABEL_16;
  }
  __break(1u);
  return result;
}

uint64_t _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, uint64_t a2, char a3, uint64_t a4, uint64_t *a5)
{
  uint64_t result = (uint64_t)_ArrayBuffer.capacity.getter(a4, a5);
  if ((a3 & 1) == 0)
  {
    uint64_t v11 = a2;
    goto LABEL_8;
  }
  uint64_t v11 = result;
  if (result >= a2)
  {
LABEL_8:
    if (_swift_isClassOrObjCExistentialType((uint64_t)a5, a5) && (a4 < 0 || (a4 & 0x4000000000000000) != 0))
    {
      if (a4 < 0) {
        uint64_t v27 = (void *)a4;
      }
      else {
        uint64_t v27 = (void *)(a4 & 0xFFFFFFFFFFFFFF8);
      }
      uint64_t v14 = (uint64_t)[v27 count];
    }
    else
    {
      BOOL isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType((uint64_t)a5, a5);
      uint64_t v13 = a4 & 0xFFFFFFFFFFFFFF8;
      if (!isClassOrObjCExistentialType) {
        uint64_t v13 = a4;
      }
      uint64_t v14 = *(void *)(v13 + 16);
    }
    if (v11 <= v14) {
      uint64_t v11 = v14;
    }
    if (v11)
    {
      size_t v15 = getContiguousArrayStorageType<A>(for:)((uint64_t)a5, a5);
      uint64_t v16 = *(void *)(*(a5 - 1) + 72);
      uint64_t v17 = *(unsigned __int8 *)(*(a5 - 1) + 80);
      uint64_t v18 = (__objc2_class **)swift_allocObject((unint64_t *)v15, ((v17 + *((unsigned int *)v15 + 12)) & ~v17) + v16 * v11, v17 | *((unsigned __int16 *)v15 + 26));
      size_t v19 = _swift_stdlib_malloc_size(v18);
      if (!v16) {
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Division by zero", 16, 2, "Swift/IntegerTypes.swift", 24, 2, 0x3829uLL, 0);
      }
      int64_t v20 = v19 - ((v17 + 32) & ~v17);
      if (v20 == 0x8000000000000000 && v16 == -1) {
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Division results in an overflow", 31, 2, "Swift/IntegerTypes.swift", 24, 2, 0x3830uLL, 0);
      }
      uint64_t v22 = v20 / v16;
      swift_retain((atomic_ullong *)v18);
      BOOL v23 = _swift_isClassOrObjCExistentialType((uint64_t)a5, a5);
      v18[2] = (__objc2_class *)v14;
      v18[3] = (__objc2_class *)(v23 | (unint64_t)(2 * v22));
      swift_release((uint64_t)v18);
      if (a1) {
        goto LABEL_23;
      }
    }
    else
    {
      uint64_t v18 = &_swiftEmptyArrayStorage;
      if (a1)
      {
LABEL_23:
        unint64_t v24 = (*(unsigned __int8 *)(*(a5 - 1) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(a5 - 1) + 80);
        if (_swift_isClassOrObjCExistentialType((uint64_t)a5, a5)) {
          uint64_t v25 = a4 & 0xFFFFFFFFFFFFFF8;
        }
        else {
          uint64_t v25 = a4;
        }
        UnsafeMutablePointer.moveInitialize(from:count:)((char *)(v25 + v24), v14, (char *)v18 + v24, (unint64_t *)a5);
        if (_swift_isClassOrObjCExistentialType((uint64_t)a5, a5)) {
          uint64_t v26 = a4 & 0xFFFFFFFFFFFFFF8;
        }
        else {
          uint64_t v26 = a4;
        }
        *(void *)(v26 + 16) = 0;
        swift_bridgeObjectRelease(a4);
        return (uint64_t)v18;
      }
    }
    if (v14 < 0) {
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
    }
    _ArrayBuffer._copyContents(subRange:initializing:)(0, v14, (char *)v18+ ((*(unsigned __int8 *)(*(a5 - 1) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(a5 - 1) + 80)), a4, a5);
    return (uint64_t)v18;
  }
  if (result + 0x4000000000000000 >= 0)
  {
    if (2 * result <= a2) {
      uint64_t v11 = a2;
    }
    else {
      uint64_t v11 = 2 * result;
    }
    goto LABEL_8;
  }
  __break(1u);
  return result;
}

__objc2_class **specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(uint64_t a1, uint64_t a2)
{
  if (a2 <= a1) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = a2;
  }
  if (!v2) {
    return &_swiftEmptyArrayStorage;
  }
  uint64_t v4 = (unint64_t *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(scalar: Unicode.Scalar, normData: Unicode._NormData)>);
  char v5 = swift_allocObject(v4, 8 * v2 + 32, 7uLL);
  int64_t v6 = _swift_stdlib_malloc_size(v5);
  uint64_t v7 = v6 - 32;
  if (v6 < 32) {
    uint64_t v7 = v6 - 25;
  }
  v5[2] = a1;
  v5[3] = 2 * (v7 >> 3);
  return (__objc2_class **)v5;
}

{
  uint64_t v2;
  unint64_t *v4;
  void *v5;
  size_t v6;

  if (a2 <= a1) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = a2;
  }
  if (!v2) {
    return &_swiftEmptyArrayStorage;
  }
  uint64_t v4 = (unint64_t *)canonical specialized generic type metadata accessor for _ContiguousArrayStorage<UInt8>();
  char v5 = swift_allocObject(v4, v2 + 32, 7uLL);
  int64_t v6 = _swift_stdlib_malloc_size(v5);
  v5[2] = a1;
  v5[3] = 2 * v6 - 64;
  return (__objc2_class **)v5;
}

{
  uint64_t v2;
  unint64_t *v4;
  void *v5;
  int64_t v6;
  int64_t v7;

  if (a2 <= a1) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = a2;
  }
  if (!v2) {
    return &_swiftEmptyArrayStorage;
  }
  uint64_t v4 = (unint64_t *)canonical specialized generic type metadata accessor for _ContiguousArrayStorage<UInt16>();
  char v5 = swift_allocObject(v4, 2 * v2 + 32, 7uLL);
  int64_t v6 = _swift_stdlib_malloc_size(v5);
  uint64_t v7 = v6 - 32;
  if (v6 < 32) {
    uint64_t v7 = v6 - 31;
  }
  v5[2] = a1;
  v5[3] = v7 & 0xFFFFFFFFFFFFFFFELL;
  return (__objc2_class **)v5;
}

{
  uint64_t v2;
  unint64_t *v4;
  void *v5;
  int64_t v6;
  uint64_t v7;

  if (a2 <= a1) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = a2;
  }
  if (!v2) {
    return &_swiftEmptyArrayStorage;
  }
  uint64_t v4 = (unint64_t *)canonical specialized generic type metadata accessor for _ContiguousArrayStorage<Int>();
  char v5 = swift_allocObject(v4, 8 * v2 + 32, 7uLL);
  int64_t v6 = _swift_stdlib_malloc_size(v5);
  uint64_t v7 = v6 - 32;
  if (v6 < 32) {
    uint64_t v7 = v6 - 25;
  }
  v5[2] = a1;
  v5[3] = 2 * (v7 >> 3);
  return (__objc2_class **)v5;
}

{
  uint64_t v2;
  unint64_t *v4;
  void *v5;
  int64_t v6;
  uint64_t v7;

  if (a2 <= a1) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = a2;
  }
  if (!v2) {
    return &_swiftEmptyArrayStorage;
  }
  uint64_t v4 = (unint64_t *)canonical specialized generic type metadata accessor for _ContiguousArrayStorage<Swift.AnyObject>();
  char v5 = swift_allocObject(v4, 8 * v2 + 32, 7uLL);
  int64_t v6 = _swift_stdlib_malloc_size(v5);
  uint64_t v7 = v6 - 32;
  if (v6 < 32) {
    uint64_t v7 = v6 - 25;
  }
  v5[2] = a1;
  v5[3] = (2 * (v7 >> 3)) | 1;
  return (__objc2_class **)v5;
}

__objc2_class **specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  if (a2 <= a1) {
    uint64_t v3 = a1;
  }
  else {
    uint64_t v3 = a2;
  }
  if (!v3) {
    return &_swiftEmptyArrayStorage;
  }
  char v5 = (unint64_t *)a3(0);
  int64_t v6 = swift_allocObject(v5, 16 * v3 + 32, 7uLL);
  int64_t v7 = _swift_stdlib_malloc_size(v6);
  uint64_t v8 = v7 - 32;
  if (v7 < 32) {
    uint64_t v8 = v7 - 17;
  }
  v6[2] = a1;
  v6[3] = 2 * (v8 >> 4);
  return (__objc2_class **)v6;
}

{
  uint64_t v3;
  unint64_t *v5;
  void *v6;
  int64_t v7;
  uint64_t v8;

  if (a2 <= a1) {
    uint64_t v3 = a1;
  }
  else {
    uint64_t v3 = a2;
  }
  if (!v3) {
    return &_swiftEmptyArrayStorage;
  }
  char v5 = (unint64_t *)a3(0);
  int64_t v6 = swift_allocObject(v5, 4 * v3 + 32, 7uLL);
  int64_t v7 = _swift_stdlib_malloc_size(v6);
  uint64_t v8 = v7 - 32;
  if (v7 < 32) {
    uint64_t v8 = v7 - 29;
  }
  v6[2] = a1;
  v6[3] = 2 * (v8 >> 2);
  return (__objc2_class **)v6;
}

__objc2_class **_ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  if (a2 <= a1) {
    uint64_t v3 = a1;
  }
  else {
    uint64_t v3 = a2;
  }
  if (!v3) {
    return &_swiftEmptyArrayStorage;
  }
  int64_t v6 = getContiguousArrayStorageType<A>(for:)((uint64_t)a3, a3);
  uint64_t v7 = *(void *)(*(a3 - 1) + 72);
  uint64_t v8 = *(unsigned __int8 *)(*(a3 - 1) + 80);
  unint64_t v9 = swift_allocObject((unint64_t *)v6, ((v8 + *((unsigned int *)v6 + 12)) & ~v8) + v7 * v3, v8 | *((unsigned __int16 *)v6 + 26));
  size_t v10 = _swift_stdlib_malloc_size(v9);
  if (!v7) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Division by zero", 16, 2, "Swift/IntegerTypes.swift", 24, 2, 0x3829uLL, 0);
  }
  int64_t v11 = v10 - ((v8 + 32) & ~v8);
  if (v11 == 0x8000000000000000 && v7 == -1) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Division results in an overflow", 31, 2, "Swift/IntegerTypes.swift", 24, 2, 0x3830uLL, 0);
  }
  uint64_t v13 = v11 / v7;
  swift_retain(v9);
  BOOL isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType((uint64_t)a3, a3);
  v9[2] = a1;
  v9[3] = isClassOrObjCExistentialType | (unint64_t)(2 * v13);
  swift_release((uint64_t)v9);
  return (__objc2_class **)v9;
}

uint64_t _ContiguousArrayBuffer.firstElementAddress.getter(uint64_t a1, uint64_t a2)
{
  return a1
       + ((*(unsigned __int8 *)(*(void *)(a2 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(a2 - 8) + 80));
}

unint64_t _ArrayBuffer.firstElementAddress.getter(uint64_t a1, uint64_t *a2)
{
  BOOL isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType((uint64_t)a2, a2);
  uint64_t v5 = a1 & 0xFFFFFFFFFFFFFF8;
  if (!isClassOrObjCExistentialType) {
    uint64_t v5 = a1;
  }
  return v5 + ((*(unsigned __int8 *)(*(a2 - 1) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(a2 - 1) + 80));
}

char *specialized UnsafeMutablePointer.moveInitialize(from:count:)(char *__src, uint64_t a2, char *__dst)
{
  if (a2 < 0) {
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 0x416uLL, 0);
  }
  if (__dst != __src || &__src[16 * a2] <= __dst)
  {
    return (char *)memmove(__dst, __src, 16 * a2);
  }
  return __src;
}

{
  uint64_t v3;

  if (a2 < 0) {
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 0x416uLL, 0);
  }
  if (__dst != __src || &__src[4 * a2] <= __dst)
  {
    return (char *)memmove(__dst, __src, 4 * a2);
  }
  return __src;
}

{
  uint64_t v3;
  size_t v4;

  if (a2 < 0) {
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 0x416uLL, 0);
  }
  uint64_t v4 = 8 * a2;
  if (__dst != __src || &__src[v4] <= __dst)
  {
    return (char *)memmove(__dst, __src, v4);
  }
  return __src;
}

{
  uint64_t v3;

  if (a2 < 0) {
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 0x416uLL, 0);
  }
  if (__dst != __src || &__src[8 * a2] <= __dst)
  {
    return (char *)memmove(__dst, __src, 8 * a2);
  }
  return __src;
}

{
  uint64_t v3;
  size_t v4;

  if (a2 < 0) {
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 0x416uLL, 0);
  }
  uint64_t v4 = 32 * a2;
  if (__dst != __src || &__src[v4] <= __dst)
  {
    return (char *)memmove(__dst, __src, v4);
  }
  return __src;
}

{
  uint64_t v3;

  if (a2 < 0) {
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 0x416uLL, 0);
  }
  if (__dst != __src || &__src[32 * a2] <= __dst)
  {
    return (char *)memmove(__dst, __src, 32 * a2);
  }
  return __src;
}

{
  uint64_t v3;

  if (a2 < 0) {
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 0x416uLL, 0);
  }
  if (__dst != __src || &__src[40 * a2] <= __dst)
  {
    return (char *)memmove(__dst, __src, 40 * a2);
  }
  return __src;
}

char *specialized UnsafeMutablePointer.moveInitialize(from:count:)(char *__src, size_t __len, char *__dst)
{
  if ((__len & 0x8000000000000000) != 0) {
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 0x416uLL, 0);
  }
  if (__dst != __src || &__src[__len] <= __dst)
  {
    return (char *)memmove(__dst, __src, __len);
  }
  return __src;
}

char *UnsafeMutablePointer.moveInitialize(from:count:)(char *__src, uint64_t a2, char *__dst, unint64_t *a4)
{
  if (a2 < 0) {
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 0x416uLL, 0);
  }
  if (__dst < __src || &__src[*(void *)(*(a4 - 1) + 72) * a2] <= __dst)
  {
    return swift_arrayInitWithTakeFrontToBack(__dst, __src, a2, a4);
  }
  else if (__dst != __src)
  {
    return swift_arrayInitWithTakeBackToFront(__dst, __src, a2, (uint64_t)a4);
  }
  return __src;
}

uint64_t static Comparable...< infix(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return static Comparable...< infix(_:_:)(a1, a2, a3, a4, "Swift/Range.swift", (uint64_t (*)(char *, uint64_t))0x11, 0x2F2uLL, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for Range, a5);
}

BOOL _BridgeStorage.isNative.getter(uint64_t a1)
{
  return (a1 & 0x4000000000000000) == 0 && a1 >= 0;
}

Swift::Void __swiftcall _ArrayBuffer._typeCheckSlowPath(_:)(Swift::Int a1)
{
  uint64_t v3 = v2;
  uint64_t v4 = v1;
  uint64_t v6 = *((void *)v2 - 1);
  uint64_t v7 = MEMORY[0x1F4188790](a1);
  unint64_t v9 = (char *)&v104 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  int64_t v11 = (char *)&v104 - v10;
  if (_swift_isClassOrObjCExistentialType((uint64_t)v12, v12) && (v4 < 0 || (v4 & 0x4000000000000000) != 0))
  {
    if (v4 < 0) {
      uint64_t v14 = (void *)v4;
    }
    else {
      uint64_t v14 = (void *)(v4 & 0xFFFFFFFFFFFFFF8);
    }
    id v15 = [v14 objectAtIndex:a1];
    v104._uint64_t countAndFlagsBits = (uint64_t)v15;
    swift_unknownObjectRetain(v15);
    if (swift_dynamicCast(v9, (unint64_t *)&v104, qword_1ECA06328, v3, 6uLL))
    {
      swift_unknownObjectRelease(v15);
      (*(void (**)(char *, char *))(v6 + 8))(v9, v3);
      return;
    }
    v104._uint64_t countAndFlagsBits = specialized static String._createEmpty(withInitialCapacity:)(85);
    v104._uint64_t object = v79;
    v80._uint64_t countAndFlagsBits = 0xD000000000000046;
    v80._uint64_t object = (void *)(0x80000001816DC730 | 0x8000000000000000);
    String.append(_:)(v80);
    swift_bridgeObjectRelease(0x80000001816DC730 | 0x8000000000000000);
    TypeName = (uint64_t *)swift_getTypeName((Class *)v3, 0);
    if ((v82 & 0x8000000000000000) == 0)
    {
      v83 = (uint8x16_t *)TypeName;
      int64_t v84 = v82;
      int64_t v85 = validateUTF8(_:)(TypeName, v82);
      uint64_t v88 = (v87 & 1) != 0
          ? repairUTF8(_:firstKnownBrokenRange:)(v83->i8, v84, v85, v86)
          : specialized static String._uncheckedFromUTF8(_:isASCII:)(v83, v84, v85 & 1);
      uint64_t v90 = v89;
      String.append(_:)(*(Swift::String *)&v88);
      swift_bridgeObjectRelease(v90);
      Swift::String v91 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(" but found ", 0xBuLL, 1);
      uint64_t object = (uint64_t)v91._object;
      String.append(_:)(v91);
      swift_bridgeObjectRelease(object);
      ObjectType = (Class *)swift_getObjectType((unint64_t)v15);
      uint64_t v94 = (uint64_t *)swift_getTypeName(ObjectType, 0);
      if ((v95 & 0x8000000000000000) == 0)
      {
        v96 = (uint8x16_t *)v94;
        int64_t v97 = v95;
        int64_t v98 = validateUTF8(_:)(v94, v95);
        if (v100) {
          uint64_t v101 = repairUTF8(_:firstKnownBrokenRange:)(v96->i8, v97, v98, v99);
        }
        else {
          uint64_t v101 = specialized static String._uncheckedFromUTF8(_:isASCII:)(v96, v97, v98 & 1);
        }
        uint64_t v103 = v102;
        String.append(_:)(*(Swift::String *)&v101);
        swift_bridgeObjectRelease(v103);
        _assertionFailure(_:_:flags:)("Fatal error", 11, 2, v104._countAndFlagsBits, (unint64_t)v104._object, 0);
      }
    }
    goto LABEL_92;
  }
  uint64_t v13 = *(void **)((v4 & 0xFFFFFFFFFFFFFF8) + 8 * a1 + 0x20);
  v104._uint64_t countAndFlagsBits = (uint64_t)v13;
  swift_unknownObjectRetain_n((uint64_t)v13, 2);
  if (!swift_dynamicCast(v11, (unint64_t *)&v104, qword_1ECA06328, v3, 6uLL))
  {
    uint64_t v16 = specialized static String._createEmpty(withInitialCapacity:)(82);
    uint64_t v18 = v17;
    v104._uint64_t countAndFlagsBits = v16;
    v104._uint64_t object = (void *)v17;
    uint64_t v19 = HIBYTE(v17) & 0xF;
    if ((v17 & 0x2000000000000000) == 0) {
      uint64_t v19 = v16 & 0xFFFFFFFFFFFFLL;
    }
    if (v19 || (v16 & ~v17 & 0x2000000000000000) != 0)
    {
      if ((v17 & 0x2000000000000000) != 0
        && (0x80000001816DC6E0 & 0x2000000000000000) != 0
        && (unint64_t v20 = specialized _SmallString.init(_:appending:)(v16, v17, 0xD000000000000043, 0x80000001816DC6E0 | 0x8000000000000000), (v22 & 1) == 0))
      {
        uint64_t v23 = v20;
        unint64_t v24 = v21;
        swift_bridgeObjectRelease(v18);
        swift_bridgeObjectRelease(0x80000001816DC6E0 | 0x8000000000000000);
        v104._uint64_t countAndFlagsBits = v23;
        v104._uint64_t object = v24;
      }
      else
      {
        if ((0x80000001816DC6E0 & 0x2000000000000000) != 0) {
          unint64_t v25 = (0x80000001816DC6E0 >> 56) & 0xF;
        }
        else {
          unint64_t v25 = 67;
        }
        _StringGuts.append(_:)(0xD000000000000043, 0x80000001816DC6E0 | 0x8000000000000000, 0, v25);
        swift_bridgeObjectRelease(0x80000001816DC6E0 | 0x8000000000000000);
      }
    }
    else
    {
      swift_bridgeObjectRelease(v17);
      v104._uint64_t countAndFlagsBits = 0xD000000000000043;
      v104._uint64_t object = (void *)(0x80000001816DC6E0 | 0x8000000000000000);
    }
    uint64_t v26 = (uint64_t *)swift_getTypeName((Class *)v3, 0);
    if (v27 < 0) {
      goto LABEL_92;
    }
    uint64_t v28 = (uint8x16_t *)v26;
    int64_t v29 = v27;
    int64_t v30 = validateUTF8(_:)(v26, v27);
    if (v32) {
      unint64_t v33 = repairUTF8(_:firstKnownBrokenRange:)(v28->i8, v29, v30, v31);
    }
    else {
      unint64_t v33 = specialized static String._uncheckedFromUTF8(_:isASCII:)(v28, v29, v30 & 1);
    }
    uint64_t countAndFlagsBits = v33;
    unint64_t v36 = v34;
    uint64_t v37 = v104._object;
    unint64_t v38 = ((unint64_t)v104._object >> 56) & 0xF;
    if (((uint64_t)v104._object & 0x2000000000000000) == 0) {
      unint64_t v38 = v104._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
    }
    if (!v38 && (v104._countAndFlagsBits & ~(uint64_t)v104._object & 0x2000000000000000) == 0)
    {
      swift_bridgeObjectRelease((uint64_t)v104._object);
      v104._uint64_t countAndFlagsBits = countAndFlagsBits;
      v104._uint64_t object = (void *)v36;
      goto LABEL_43;
    }
    if (((uint64_t)v104._object & 0x2000000000000000) != 0)
    {
      if ((v34 & 0x2000000000000000) != 0)
      {
        unint64_t v40 = specialized _SmallString.init(_:appending:)(v104._countAndFlagsBits, (unint64_t)v104._object, v33, v34);
        if ((v42 & 1) == 0)
        {
          uint64_t v43 = v40;
          uint64_t v44 = v41;
          swift_bridgeObjectRelease((uint64_t)v37);
          swift_bridgeObjectRelease(v36);
          v104._uint64_t countAndFlagsBits = v43;
          v104._uint64_t object = v44;
          unint64_t v36 = (unint64_t)v44;
          uint64_t countAndFlagsBits = v43;
          goto LABEL_43;
        }
        goto LABEL_41;
      }
    }
    else if ((v34 & 0x2000000000000000) != 0)
    {
LABEL_41:
      uint64_t v39 = HIBYTE(v36) & 0xF;
      goto LABEL_42;
    }
    uint64_t v39 = v33 & 0xFFFFFFFFFFFFLL;
LABEL_42:
    _StringGuts.append(_:)(countAndFlagsBits, v36, 0, v39);
    swift_bridgeObjectRelease(v36);
    uint64_t countAndFlagsBits = v104._countAndFlagsBits;
    unint64_t v36 = (unint64_t)v104._object;
LABEL_43:
    Swift::String v45 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(" but found ", 0xBuLL, 1);
    uint64_t v46 = HIBYTE(v36) & 0xF;
    if ((v36 & 0x2000000000000000) == 0) {
      uint64_t v46 = countAndFlagsBits & 0xFFFFFFFFFFFFLL;
    }
    if (!v46 && (countAndFlagsBits & ~v36 & 0x2000000000000000) == 0)
    {
      swift_bridgeObjectRelease(v36);
      Swift::String v104 = v45;
      goto LABEL_57;
    }
    if ((v36 & 0x2000000000000000) != 0)
    {
      if (((uint64_t)v45._object & 0x2000000000000000) != 0)
      {
        unint64_t v48 = specialized _SmallString.init(_:appending:)(countAndFlagsBits, v36, v45._countAndFlagsBits, (unint64_t)v45._object);
        if ((v50 & 1) == 0)
        {
          uint64_t v51 = v48;
          id v52 = v49;
          swift_bridgeObjectRelease(v36);
          swift_bridgeObjectRelease((uint64_t)v45._object);
          v104._uint64_t countAndFlagsBits = v51;
          v104._uint64_t object = v52;
          goto LABEL_57;
        }
        goto LABEL_55;
      }
    }
    else if (((uint64_t)v45._object & 0x2000000000000000) != 0)
    {
LABEL_55:
      uint64_t v47 = ((unint64_t)v45._object >> 56) & 0xF;
      goto LABEL_56;
    }
    uint64_t v47 = v45._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
LABEL_56:
    _StringGuts.append(_:)(v45._countAndFlagsBits, (unint64_t)v45._object, 0, v47);
    swift_bridgeObjectRelease((uint64_t)v45._object);
LABEL_57:
    uint64_t v53 = (Class *)swift_getObjectType((unint64_t)v13);
    uint64_t v54 = (uint64_t *)swift_getTypeName(v53, 0);
    if ((v55 & 0x8000000000000000) == 0)
    {
      uint64_t v56 = (uint8x16_t *)v54;
      int64_t v57 = v55;
      int64_t v58 = validateUTF8(_:)(v54, v55);
      if (v60) {
        unint64_t v61 = repairUTF8(_:firstKnownBrokenRange:)(v56->i8, v57, v58, v59);
      }
      else {
        unint64_t v61 = specialized static String._uncheckedFromUTF8(_:isASCII:)(v56, v57, v58 & 1);
      }
      uint64_t v63 = v61;
      unint64_t v64 = v62;
      uint64_t v65 = v104._object;
      unint64_t v66 = ((unint64_t)v104._object >> 56) & 0xF;
      if (((uint64_t)v104._object & 0x2000000000000000) == 0) {
        unint64_t v66 = v104._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
      }
      if (!v66 && (v104._countAndFlagsBits & ~(uint64_t)v104._object & 0x2000000000000000) == 0)
      {
        swift_bridgeObjectRelease((uint64_t)v104._object);
        v104._uint64_t countAndFlagsBits = v63;
        v104._uint64_t object = (void *)v64;
        goto LABEL_75;
      }
      if (((uint64_t)v104._object & 0x2000000000000000) != 0)
      {
        if ((v62 & 0x2000000000000000) != 0)
        {
          unint64_t v68 = specialized _SmallString.init(_:appending:)(v104._countAndFlagsBits, (unint64_t)v104._object, v61, v62);
          if ((v70 & 1) == 0)
          {
            uint64_t v71 = v68;
            char v72 = v69;
            swift_bridgeObjectRelease((uint64_t)v65);
            swift_bridgeObjectRelease(v64);
            v104._uint64_t countAndFlagsBits = v71;
            v104._uint64_t object = v72;
            unint64_t v64 = (unint64_t)v72;
            uint64_t v63 = v71;
            goto LABEL_75;
          }
          goto LABEL_73;
        }
      }
      else if ((v62 & 0x2000000000000000) != 0)
      {
LABEL_73:
        uint64_t v67 = HIBYTE(v64) & 0xF;
        goto LABEL_74;
      }
      uint64_t v67 = v61 & 0xFFFFFFFFFFFFLL;
LABEL_74:
      _StringGuts.append(_:)(v63, v64, 0, v67);
      swift_bridgeObjectRelease(v64);
      uint64_t v63 = v104._countAndFlagsBits;
      unint64_t v64 = (unint64_t)v104._object;
LABEL_75:
      uint64_t v73 = HIBYTE(v64) & 0xF;
      if ((v64 & 0x2000000000000000) == 0) {
        uint64_t v73 = v63 & 0xFFFFFFFFFFFFLL;
      }
      if (v73 || (v63 & ~v64 & 0x2000000000000000) != 0)
      {
        if ((v64 & 0x2000000000000000) == 0
          || (unint64_t v76 = specialized _SmallString.init(_:appending:)(v63, v64, 0, 0xE000000000000000), (v78 & 1) != 0))
        {
          _StringGuts.append(_:)(0, 0xE000000000000000, 0, 0);
          swift_bridgeObjectRelease(0xE000000000000000);
          uint64_t v74 = v104._countAndFlagsBits;
          uint64_t v75 = v104._object;
        }
        else
        {
          uint64_t v74 = v76;
          uint64_t v75 = v77;
          swift_bridgeObjectRelease(v64);
          swift_bridgeObjectRelease(0xE000000000000000);
        }
      }
      else
      {
        swift_bridgeObjectRelease(v64);
        uint64_t v74 = 0;
        uint64_t v75 = (void *)0xE000000000000000;
      }
      _assertionFailure(_:_:flags:)("Fatal error", 11, 2, v74, (unint64_t)v75, 0);
    }
LABEL_92:
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeBufferPointer with negative count", 39, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x53FuLL, 0);
  }
  swift_unknownObjectRelease(v13);
  (*(void (**)(char *, char *))(v6 + 8))(v11, v3);
}

uint64_t _ContiguousArrayBuffer.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return (*(uint64_t (**)(uint64_t, unint64_t))(*(void *)(a3 - 8) + 16))(a4, a2+ ((*(unsigned __int8 *)(*(void *)(a3 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(a3 - 8) + 80))+ *(void *)(*(void *)(a3 - 8) + 72) * a1);
}

Swift::DefaultStringInterpolation __swiftcall DefaultStringInterpolation.init(literalCapacity:interpolationCount:)(Swift::Int literalCapacity, Swift::Int interpolationCount)
{
  if (interpolationCount + 0x4000000000000000 < 0)
  {
    __break(1u);
    goto LABEL_5;
  }
  BOOL v2 = __OFADD__(literalCapacity, 2 * interpolationCount);
  literalCapacity += 2 * interpolationCount;
  if (v2)
  {
LABEL_5:
    __break(1u);
    goto _$ss26DefaultStringInterpolationV15literalCapacity18interpolationCountABSi_SitcfC;
  }
  literalCapacity = static String._createEmpty(withInitialCapacity:)(literalCapacity);
_$ss26DefaultStringInterpolationV15literalCapacity18interpolationCountABSi_SitcfC:
  result._storage._uint64_t object = (void *)interpolationCount;
  result._storage._uint64_t countAndFlagsBits = literalCapacity;
  return result;
}

Swift::String __swiftcall String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(Builtin::RawPointer _builtinStringLiteral, Builtin::Word utf8CodeUnitCount, Builtin::Int1 isASCII)
{
  if ((utf8CodeUnitCount & 0x8000000000000000) != 0) {
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeBufferPointer with negative count", 39, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x53FuLL, 0);
  }
  if (utf8CodeUnitCount)
  {
    if (utf8CodeUnitCount <= 0xF)
    {
      int64_t v7 = utf8CodeUnitCount - 8;
      Builtin::Word v8 = 8;
      if ((uint64_t)utf8CodeUnitCount < 8) {
        Builtin::Word v8 = utf8CodeUnitCount;
      }
      uint64_t v5 = *(unsigned __int8 *)_builtinStringLiteral;
      if (v8 != 1)
      {
        v5 |= (unint64_t)*((unsigned __int8 *)_builtinStringLiteral + 1) << 8;
        if (v8 != 2)
        {
          v5 |= (unint64_t)*((unsigned __int8 *)_builtinStringLiteral + 2) << 16;
          if (v8 != 3)
          {
            v5 |= (unint64_t)*((unsigned __int8 *)_builtinStringLiteral + 3) << 24;
            if (v8 != 4)
            {
              v5 |= (unint64_t)*((unsigned __int8 *)_builtinStringLiteral + 4) << 32;
              if (v8 != 5)
              {
                v5 |= (unint64_t)*((unsigned __int8 *)_builtinStringLiteral + 5) << 40;
                if (v8 != 6)
                {
                  v5 |= (unint64_t)*((unsigned __int8 *)_builtinStringLiteral + 6) << 48;
                  if (v8 != 7) {
                    v5 |= (unint64_t)*((unsigned __int8 *)_builtinStringLiteral + 7) << 56;
                  }
                }
              }
            }
          }
        }
      }
      uint64_t v9 = 0;
      if (utf8CodeUnitCount >= 9)
      {
        uint64_t v10 = 0;
        int64_t v11 = (unsigned __int8 *)_builtinStringLiteral + 8;
        unint64_t v12 = v7 & ~(v7 >> 63);
        do
        {
          if (v12 <= utf8CodeUnitCount - 9) {
            _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Index out of range", 18, 2, "Swift/Range.swift", 17, 2, 0x131uLL, 0);
          }
          unsigned int v13 = *v11++;
          v9 |= (unint64_t)v13 << v10;
          v10 += 8;
          --v7;
        }
        while (v7);
      }
      unint64_t v14 = 0xA000000000000000;
      if (((v9 | v5) & 0x8080808080808080) == 0) {
        unint64_t v14 = 0xE000000000000000;
      }
      uint64_t v6 = (void *)(v14 | (utf8CodeUnitCount << 56) | v9);
    }
    else
    {
      Builtin::Word v4 = utf8CodeUnitCount | 0xC000000000000000;
      if (!isASCII) {
        Builtin::Word v4 = utf8CodeUnitCount;
      }
      uint64_t v5 = v4 | 0x1000000000000000;
      uint64_t v6 = (void *)(((unint64_t)_builtinStringLiteral + 0x7FFFFFFFFFFFFFE0) | 0x8000000000000000);
    }
  }
  else
  {
    uint64_t v5 = 0;
    uint64_t v6 = (void *)0xE000000000000000;
  }
  result._uint64_t object = v6;
  result._uint64_t countAndFlagsBits = v5;
  return result;
}

Swift::Void __swiftcall DefaultStringInterpolation.appendLiteral(_:)(Swift::String a1)
{
  uint64_t object = a1._object;
  uint64_t countAndFlagsBits = a1._countAndFlagsBits;
  unint64_t v4 = v1[1];
  uint64_t v5 = HIBYTE(v4) & 0xF;
  if ((v4 & 0x2000000000000000) == 0) {
    uint64_t v5 = *v1 & 0xFFFFFFFFFFFFLL;
  }
  if (v5 || (*v1 & ~v4 & 0x2000000000000000) != 0)
  {
    _StringGuts.append(_:)(a1._countAndFlagsBits, (unint64_t)a1._object);
  }
  else
  {
    swift_bridgeObjectRetain((unint64_t)a1._object);
    swift_bridgeObjectRelease(v4);
    *uint64_t v1 = countAndFlagsBits;
    v1[1] = (uint64_t)object;
  }
}

void DefaultStringInterpolation.appendInterpolation(_:)(Class *a1)
{
  TypeName = (uint64_t *)swift_getTypeName(a1, 0);
  if (v2 < 0) {
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeBufferPointer with negative count", 39, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x53FuLL, 0);
  }
  uint64_t v3 = (uint8x16_t *)TypeName;
  int64_t v4 = v2;
  int64_t v5 = validateUTF8(_:)(TypeName, v2);
  if (v7) {
    uint64_t v8 = repairUTF8(_:firstKnownBrokenRange:)(v3->i8, v4, v5, v6);
  }
  else {
    uint64_t v8 = specialized static String._uncheckedFromUTF8(_:isASCII:)(v3, v4, v5 & 1);
  }
  uint64_t v10 = v9;
  String.append(_:)(*(Swift::String *)&v8);

  swift_bridgeObjectRelease(v10);
}

Swift::UInt32 __swiftcall _fatalErrorFlags()()
{
  return 0;
}

void _assertionFailure(_:_:flags:)(const char *a1, uint64_t a2, char a3, uint64_t a4, unint64_t a5, int a6)
{
  if (a3)
  {
    if ((unint64_t)a1 >> 32) {
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Not enough bits to represent the passed value", 45, 2, "Swift/Integers.swift", 20, 2, 0xD7FuLL, 0);
    }
    if (WORD1(a1) > 0x10u || (a1 & 0xFFFFF800) == 0xD800) {
      goto LABEL_14;
    }
    _ss7UnicodeO6ScalarV17withUTF8CodeUnitsyxxSRys5UInt8VGKXEKlFyt_Tg5024_ss12StaticStringV14withd14BufferyxxSRys5G20VGXElFxAFXEfU_yt_Tg5AHxRi_zRi0_zlyytIsgyr_Tf1ncn_n(a1, (uint64_t (*)(uint64_t *))partial apply for closure #1 in _assertionFailure(_:_:flags:));
    __break(1u);
  }
  else if (!a1)
  {
    unint64_t v7 = 136;
    goto LABEL_15;
  }
  uint64_t v8 = a2;
  if (a2 < 0) {
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeBufferPointer with negative count", 39, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x53FuLL, 0);
  }
  int v9 = a6;
  unint64_t v10 = a5;
  uint64_t v11 = a4;
  swift_bridgeObjectRetain(a5);
  if ((v10 & 0x1000000000000000) != 0)
  {
    uint64_t v11 = specialized static String._copying(_:)(v11, v10);
    unint64_t v15 = v14;
    swift_bridgeObjectRelease(v10);
    unint64_t v10 = v15;
    if ((v15 & 0x2000000000000000) == 0)
    {
LABEL_11:
      if ((v11 & 0x1000000000000000) != 0)
      {
        unint64_t v12 = (const char *)((v10 & 0xFFFFFFFFFFFFFFFLL) + 32);
        uint64_t v13 = v11 & 0xFFFFFFFFFFFFLL;
LABEL_13:
        closure #1 in closure #1 in _assertionFailure(_:_:flags:)(v12, v13, a1, v8, v9);
        swift_bridgeObjectRelease(v10);
        __break(1u);
LABEL_14:
        unint64_t v7 = 148;
LABEL_15:
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/StaticString.swift", 24, 2, v7, 0);
      }
LABEL_20:
      unint64_t v12 = (const char *)_StringObject.sharedUTF8.getter(v11, v10);
      goto LABEL_13;
    }
  }
  else if ((v10 & 0x2000000000000000) == 0)
  {
    goto LABEL_11;
  }
  v16[0] = v11;
  v16[1] = v10 & 0xFFFFFFFFFFFFFFLL;
  closure #1 in closure #1 in _assertionFailure(_:_:flags:)((const char *)v16, HIBYTE(v10) & 0xF, a1, v8, v9);
  swift_bridgeObjectRelease(v10);
  __break(1u);
  goto LABEL_20;
}

id _CocoaArrayWrapper.subscript.getter(uint64_t a1, id a2)
{
  id v2 = [a2 objectAtIndex:a1];

  return v2;
}

void _ArrayBuffer._typeCheck(_:)(Swift::Int a1, Swift::Int a2, uint64_t a3, uint64_t *a4)
{
  if (_swift_isClassOrObjCExistentialType((uint64_t)a4, a4)
    && _swift_isClassOrObjCExistentialType((uint64_t)a4, a4)
    && (a3 & 0xC000000000000001) != 0
    && !swift_dynamicCastMetatype((uint64_t *)qword_1ECA06328, a4))
  {
    if (a2 < a1) {
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
    }
    for (; a2 != a1; ++a1)
    {
      if (a2 == a1) {
        _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Index out of range", 18, 2, "Swift/Range.swift", 17, 2, 0x131uLL, 0);
      }
      _ArrayBuffer._typeCheckSlowPath(_:)(a1);
    }
  }
}

Swift::Bool __swiftcall _slowPath(_:)(Swift::Bool a1)
{
  return a1;
}

char *_ContiguousArrayBuffer._copyContents(subRange:initializing:)(uint64_t a1, uint64_t a2, char *a3, uint64_t a4, unint64_t *a5)
{
  int64_t v6 = specialized _ContiguousArrayBuffer._copyContents(subRange:initializing:)(a1, a2, a3, a4, a5);
  swift_release(a4);
  return v6;
}

uint64_t UnsafeMutableRawPointer.assumingMemoryBound<A>(to:)(uint64_t a1, uint64_t a2)
{
  return a2;
}

void **_CocoaArrayWrapper._copyContents(subRange:initializing:)(void **a1, uint64_t a2, void **a3, void *a4)
{
  int64_t v5 = specialized _CocoaArrayWrapper._copyContents(subRange:initializing:)(a1, a2, a3, a4);
  swift_unknownObjectRelease(a4);
  return v5;
}

atomic_ullong *_ContiguousArrayBuffer._copyContents(initializing:)(char *a1, uint64_t a2, atomic_ullong *a3, unint64_t *a4)
{
  if (a2 >= 1)
  {
    if (a3[2] >= a2) {
      uint64_t v6 = a2;
    }
    else {
      uint64_t v6 = a3[2];
    }
    if (!a1) {
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/ContiguousArrayBuffer.swift", 33, 2, 0x2ECuLL, 0);
    }
    uint64_t v8 = (char *)a3
       + ((*(unsigned __int8 *)(*(a4 - 1) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(a4 - 1) + 80));
    uint64_t v9 = *(void *)(*(a4 - 1) + 72) * v6;
    unint64_t v10 = &a1[v9];
    uint64_t v11 = &v8[v9];
    swift_retain(a3);
    if (v8 < v10 && v11 > a1) {
      _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 0x444uLL, 0);
    }
    swift_arrayInitWithCopy(a1, v8, v6, a4);
    swift_release((uint64_t)a3);
  }
  return a3;
}

uint64_t IndexingIterator.init(_elements:_position:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int **a4@<X3>, uint64_t a5@<X8>)
{
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 32))(a5, a1);
  uint64_t v10 = a5 + *((int *)type metadata accessor for IndexingIterator(0, a3, (uint64_t)a4, v9) + 9);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, a4, a3, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  unint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, const char *))(*((void *)AssociatedTypeWitness - 1) + 32);

  return v12(v10, a2, AssociatedTypeWitness);
}

BOOL static Int.> infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return a2 < a1;
}

uint64_t UnsafeMutableBufferPointer.init(start:count:)(uint64_t result, uint64_t a2)
{
  if (a2 < 0) {
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeMutableBufferPointer with negative count", 46, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x47uLL, 0);
  }
  if (a2)
  {
    if (!result) {
      _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeMutableBufferPointer has a nil start and nonzero count", 60, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x49uLL, 0);
    }
  }
  return result;
}

id _CocoaArrayWrapper._copyContents(initializing:)(void **a1, uint64_t a2, id a3)
{
  if (a2 >= 1)
  {
    if (!a1) {
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/CocoaArray.swift", 22, 2, 0x9DuLL, 0);
    }
    uint64_t v5 = a2;
    uint64_t v6 = specialized RandomAccessCollection<>.distance(from:to:)(0, (uint64_t)[a3 count], a3);
    if (v6 < v5) {
      uint64_t v5 = v6;
    }
    if (v5 < 0) {
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
    }
    swift_unknownObjectRetain(a3);
    specialized _CocoaArrayWrapper._copyContents(subRange:initializing:)(0, v5, a1, a3);
    swift_unknownObjectRelease(a3);
  }
  return a3;
}

uint64_t key path getter for _ArrayBuffer.subscript(_:) : <A>_ArrayBuffer<A>A@<X0>(int64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t result = _ArrayBuffer.subscript.getter(*a2, a2[1], *a1, *(uint64_t **)((char *)a2 + a3 - 8));
  *a4 = result;
  a4[1] = v6;
  a4[2] = v7;
  a4[3] = v8;
  return result;
}

uint64_t key path setter for _ArrayBuffer.subscript(_:) : <A>_ArrayBuffer<A>A(void **a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for _ArrayBuffer.subscript(_:) : <A>_ArrayBuffer<A>A(a1, a2, a3, a4, (uint64_t (*)(void, void))type metadata accessor for _ArrayBuffer, (uint64_t (*)(uint64_t))specialized _ArrayBuffer.subscript.setter);
}

id _ContiguousArrayBuffer.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _ContiguousArrayBuffer.subscript.getter(a1, a2, a3, a4, (uint64_t (*)(void))specialized _ContiguousArrayBuffer.subscript.getter);
}

uint64_t _CocoaArrayWrapper.subscript.getter(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = a2 - a1;
  if (__OFSUB__(a2, a1)) {
    goto LABEL_16;
  }
  if (!v3)
  {
    uint64_t v8 = &_swiftEmptyArrayStorage;
    return specialized _SliceBuffer.init(_buffer:shiftedToStartIndex:)((uint64_t)v8, a1);
  }
  uint64_t v5 = a3;
  uint64_t v7 = (uint64_t)[swift_unknownObjectRetain(a3) count];
  if (v7 < 0) {
    goto LABEL_17;
  }
  if (_CocoaArrayWrapper.contiguousStorage(_:)(0, v7, v5))
  {
    if (a2 < 0) {
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, 2, 0xD7BuLL, 0);
    }
    return (uint64_t)v5;
  }
  swift_unknownObjectRelease(v5);
  uint64_t v9 = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(v3, 0);
  if (v3 < 0) {
LABEL_17:
  }
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
  uint64_t v10 = (uint64_t)v9;
  swift_retain((atomic_ullong *)v9);
  for (uint64_t i = 0; i != v3; ++i)
  {
    if (__OFADD__(i, a1))
    {
      __break(1u);
LABEL_16:
      __break(1u);
      goto LABEL_17;
    }
    *(void *)(v10 + 8 * i + 32) = [v5 objectAtIndex:i + a1];
  }
  swift_release(v10);
  uint64_t v8 = (__objc2_class **)v10;
  return specialized _SliceBuffer.init(_buffer:shiftedToStartIndex:)((uint64_t)v8, a1);
}

id _SliceBuffer.unsafeCastElements<A>(to:)(uint64_t a1, void *a2)
{
  return swift_unknownObjectRetain(a2);
}

void fatalError(_:file:line:)(uint64_t (*a1)(void), uint64_t a2, const char *a3, uint64_t a4, char a5, unint64_t a6)
{
  uint64_t v10 = a1();
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v10, v11, a3, a4, a5, a6, 0);
}

void key path getter for _ArrayBuffer.count : <A>_ArrayBuffer<A>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v5 = *(uint64_t **)(a3 + a2 - 8);
  uint64_t v6 = *a1;
  if (_swift_isClassOrObjCExistentialType((uint64_t)v5, v5) && (v6 < 0 || (v6 & 0x4000000000000000) != 0))
  {
    id v10 = _ArrayBuffer._nonNative.getter(v6);
    id v9 = [v10 count];
    swift_unknownObjectRelease(v10);
  }
  else
  {
    BOOL isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType((uint64_t)v5, v5);
    uint64_t v8 = v6 & 0xFFFFFFFFFFFFFF8;
    if (!isClassOrObjCExistentialType) {
      uint64_t v8 = v6;
    }
    id v9 = *(id *)(v8 + 16);
  }
  *a4 = v9;
}

BOOL key path setter for _ArrayBuffer.count : <A>_ArrayBuffer<A>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *a1;
  uint64_t v5 = type metadata accessor for _ArrayBuffer(0, *(void *)(a4 + a3 - 8), a3, a4);
  return _ArrayBuffer.count.setter(v4, (uint64_t)v5);
}

uint64_t _ContiguousArrayBuffer.count.getter(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

id _CocoaArrayWrapper.endIndex.getter(void *a1)
{
  return [a1 sel_count];
}

uint64_t _ContiguousArrayBuffer.count.setter(uint64_t result, uint64_t a2)
{
  *(void *)(a2 + 16) = result;
  return result;
}

uint64_t specialized _ArrayBuffer.immutableCount.getter(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

uint64_t _ArrayBuffer.mutableCount.getter(uint64_t a1, uint64_t *a2)
{
  BOOL isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType((uint64_t)a2, a2);
  uint64_t v4 = a1 & 0xFFFFFFFFFFFFFF8;
  if (!isClassOrObjCExistentialType) {
    uint64_t v4 = a1;
  }
  return *(void *)(v4 + 16);
}

BOOL key path getter for _ArrayBuffer.mutableCount : <A>_ArrayBuffer<A>@<W0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v5 = *a1;
  BOOL result = _swift_isClassOrObjCExistentialType(*(void *)(a3 + a2 - 8), *(uint64_t **)(a3 + a2 - 8));
  uint64_t v7 = v5 & 0xFFFFFFFFFFFFFF8;
  if (!result) {
    uint64_t v7 = v5;
  }
  *a4 = *(void *)(v7 + 16);
  return result;
}

BOOL key path setter for _ArrayBuffer.mutableCount : <A>_ArrayBuffer<A>(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *a1;
  uint64_t v5 = *a2;
  BOOL result = _swift_isClassOrObjCExistentialType(*(void *)(a4 + a3 - 8), *(uint64_t **)(a4 + a3 - 8));
  uint64_t v7 = v5 & 0xFFFFFFFFFFFFFF8;
  if (!result) {
    uint64_t v7 = v5;
  }
  *(void *)(v7 + 16) = v4;
  return result;
}

uint64_t _ContiguousArrayBuffer.mutableCount.getter(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

Swift::Void __swiftcall _ArrayBuffer._checkInoutAndNativeBounds(_:wasNative:)(Swift::Int _, Swift::Bool wasNative)
{
  uint64_t v4 = v3;
  uint64_t v5 = v2;
  if (_swift_isClassOrObjCExistentialType((uint64_t)v3, v3))
  {
    BOOL v9 = (v5 & 0x4000000000000000) == 0 && v5 >= 0;
    if (v9 == wasNative)
    {
      if (!wasNative) {
        return;
      }
      goto LABEL_12;
    }
LABEL_17:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "inout rules were violated: the array was overwritten", 52, 2, "Swift/ArrayBuffer.swift", 23, 2, 0x1AEuLL, 0);
  }
  if (!wasNative) {
    goto LABEL_17;
  }
LABEL_12:
  BOOL isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType((uint64_t)v4, v4);
  if (_ < 0) {
    goto LABEL_18;
  }
  uint64_t v11 = v5 & 0xFFFFFFFFFFFFFF8;
  if (!isClassOrObjCExistentialType) {
    uint64_t v11 = v5;
  }
  if (*(void *)(v11 + 16) <= (unint64_t)_) {
LABEL_18:
  }
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Index out of range", 18, 2, "Swift/ContiguousArrayBuffer.swift", 33, 2, 0x2A3uLL, 0);
}

BOOL static Bool.== infix(_:_:)(int a1, int a2)
{
  return ((a1 ^ a2) & 1) == 0;
}

uint64_t _precondition(_:_:file:line:)(uint64_t (*a1)(void), uint64_t a2, const char *a3, uint64_t a4, char a5, const char *a6, uint64_t a7, char a8, unint64_t a9)
{
  uint64_t result = a1();
  if ((result & 1) == 0) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, a3, a4, a5, a6, a7, a8, a9, 0);
  }
  return result;
}

Swift::Void __swiftcall _ContiguousArrayBuffer._checkValidSubscript(_:)(Swift::Int a1)
{
  if (a1 < 0 || *(void *)(v1 + 16) <= (unint64_t)a1) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Index out of range", 18, 2, "Swift/ContiguousArrayBuffer.swift", 33, 2, 0x2A3uLL, 0);
  }
}

Swift::Void __swiftcall _ArrayBuffer._checkInoutAndNativeTypeCheckedBounds(_:wasNativeTypeChecked:)(Swift::Int _, Swift::Bool wasNativeTypeChecked)
{
  uint64_t v4 = v3;
  uint64_t v5 = v2;
  BOOL v6 = wasNativeTypeChecked;
  if (_swift_isClassOrObjCExistentialType((uint64_t)v3, v3))
  {
    if ((((v5 & 0xC000000000000001) != 0) ^ v6))
    {
      if (!v6) {
        return;
      }
      goto LABEL_6;
    }
LABEL_11:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "inout rules were violated: the array was overwritten", 52, 2, "Swift/ArrayBuffer.swift", 23, 2, 0x1C4uLL, 0);
  }
  if (!v6) {
    goto LABEL_11;
  }
LABEL_6:
  BOOL isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType((uint64_t)v4, v4);
  if (_ < 0) {
    goto LABEL_12;
  }
  uint64_t v9 = v5 & 0xFFFFFFFFFFFFFF8;
  if (!isClassOrObjCExistentialType) {
    uint64_t v9 = v5;
  }
  if (*(void *)(v9 + 16) <= (unint64_t)_) {
LABEL_12:
  }
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Index out of range", 18, 2, "Swift/ContiguousArrayBuffer.swift", 33, 2, 0x2A3uLL, 0);
}

uint64_t _ContiguousArrayBuffer.capacity.getter(uint64_t a1)
{
  return *(void *)(a1 + 24) >> 1;
}

Swift::String::Index specialized Collection.count.getter(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0) {
    uint64_t v4 = a1;
  }
  uint64_t v5 = 7;
  if (((a2 >> 60) & ((a1 & 0x800000000000000) == 0)) != 0) {
    uint64_t v5 = 11;
  }
  v6._rawBits = v5 | (v4 << 16);
  v7._rawBits = _StringGuts.validateInclusiveScalarIndex(_:)((Swift::String::Index)15)._rawBits;
  result._rawBits = _StringGuts.validateInclusiveScalarIndex(_:)(v6)._rawBits;
  Swift::UInt64 v9 = result._rawBits >> 14;
  if (v7._rawBits >> 14 < result._rawBits >> 14)
  {
    for (uint64_t i = 0; ; ++i)
    {
      uint64_t v11 = i + 1;
      if (__OFADD__(i, 1)) {
        break;
      }
      if ((a2 & 0x1000000000000000) != 0)
      {
        result._rawBits = String.UnicodeScalarView._foreignIndex(after:)(v7)._rawBits;
        v7._rawBits = result._rawBits;
      }
      else
      {
        Swift::UInt64 v12 = v7._rawBits >> 16;
        if ((a2 & 0x2000000000000000) != 0)
        {
          uint64_t v22 = a1;
          uint64_t v23 = a2 & 0xFFFFFFFFFFFFFFLL;
          int v13 = *((unsigned __int8 *)&v22 + v12);
        }
        else
        {
          result._rawBits = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
          if ((a1 & 0x1000000000000000) == 0) {
            result._rawBits = (Swift::UInt64)_StringObject.sharedUTF8.getter(a1, a2);
          }
          int v13 = *(unsigned __int8 *)(result._rawBits + v12);
        }
        int v14 = (char)v13;
        unsigned int v15 = __clz(v13 ^ 0xFF) - 24;
        if (v14 >= 0) {
          LOBYTE(v15) = 1;
        }
        v7._rawBits = ((v12 + v15) << 16) | 5;
      }
      if (v9 <= v7._rawBits >> 14) {
        return (Swift::String::Index)v11;
      }
    }
    __break(1u);
LABEL_40:
    __break(1u);
    return result;
  }
  if (v9 < v7._rawBits >> 14)
  {
    uint64_t v11 = 0;
    while (!__OFSUB__(v11--, 1))
    {
      if ((a2 & 0x1000000000000000) != 0)
      {
        result._rawBits = String.UnicodeScalarView._foreignIndex(before:)(v7)._rawBits;
        v7._rawBits = result._rawBits;
      }
      else
      {
        if ((a2 & 0x2000000000000000) != 0)
        {
          uint64_t v22 = a1;
          uint64_t v23 = a2 & 0xFFFFFFFFFFFFFFLL;
          if ((*((unsigned char *)&v22 + (v7._rawBits >> 16) - 1) & 0xC0) == 0x80)
          {
            uint64_t v20 = 0;
            do
              int v21 = *((unsigned char *)&v22 + (v7._rawBits >> 16) + v20-- - 2) & 0xC0;
            while (v21 == 128);
            uint64_t v19 = 1 - v20;
          }
          else
          {
            uint64_t v19 = 1;
          }
        }
        else
        {
          result._rawBits = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
          if ((a1 & 0x1000000000000000) == 0) {
            result._rawBits = (Swift::UInt64)_StringObject.sharedUTF8.getter(a1, a2);
          }
          uint64_t v17 = 0;
          do
            int v18 = *(unsigned char *)(result._rawBits + (v7._rawBits >> 16) - 1 + v17--) & 0xC0;
          while (v18 == 128);
          uint64_t v19 = -v17;
        }
        v7._rawBits = (v7._rawBits - (v19 << 16)) & 0xFFFFFFFFFFFF0000 | 5;
      }
      if (v9 >= v7._rawBits >> 14) {
        return (Swift::String::Index)v11;
      }
    }
    goto LABEL_40;
  }
  return 0;
}

Swift::String::Index specialized Collection.count.getter(Swift::String::Index a1, Swift::String::Index a2, uint64_t a3, uint64_t a4)
{
  v7._rawBits = _StringGuts.validateInclusiveScalarIndex(_:)(a1)._rawBits;
  result._rawBits = _StringGuts.validateInclusiveScalarIndex(_:)(a2)._rawBits;
  Swift::UInt64 v9 = result._rawBits >> 14;
  if (v7._rawBits >> 14 < result._rawBits >> 14)
  {
    for (uint64_t i = 0; ; ++i)
    {
      uint64_t v11 = i + 1;
      if (__OFADD__(i, 1)) {
        break;
      }
      if ((a4 & 0x1000000000000000) != 0)
      {
        result._rawBits = String.UnicodeScalarView._foreignIndex(after:)(v7)._rawBits;
        v7._rawBits = result._rawBits;
      }
      else
      {
        Swift::UInt64 v12 = v7._rawBits >> 16;
        if ((a4 & 0x2000000000000000) != 0)
        {
          uint64_t v22 = a3;
          uint64_t v23 = a4 & 0xFFFFFFFFFFFFFFLL;
          int v13 = *((unsigned __int8 *)&v22 + v12);
        }
        else
        {
          result._rawBits = (a4 & 0xFFFFFFFFFFFFFFFLL) + 32;
          if ((a3 & 0x1000000000000000) == 0) {
            result._rawBits = (Swift::UInt64)_StringObject.sharedUTF8.getter(a3, a4);
          }
          int v13 = *(unsigned __int8 *)(result._rawBits + v12);
        }
        int v14 = (char)v13;
        unsigned int v15 = __clz(v13 ^ 0xFF) - 24;
        if (v14 >= 0) {
          LOBYTE(v15) = 1;
        }
        v7._rawBits = ((v12 + v15) << 16) | 5;
      }
      if (v9 <= v7._rawBits >> 14) {
        return (Swift::String::Index)v11;
      }
    }
    __break(1u);
LABEL_36:
    __break(1u);
    return result;
  }
  if (v9 < v7._rawBits >> 14)
  {
    uint64_t v11 = 0;
    while (!__OFSUB__(v11--, 1))
    {
      if ((a4 & 0x1000000000000000) != 0)
      {
        result._rawBits = String.UnicodeScalarView._foreignIndex(before:)(v7)._rawBits;
        v7._rawBits = result._rawBits;
      }
      else
      {
        if ((a4 & 0x2000000000000000) != 0)
        {
          uint64_t v22 = a3;
          uint64_t v23 = a4 & 0xFFFFFFFFFFFFFFLL;
          if ((*((unsigned char *)&v22 + (v7._rawBits >> 16) - 1) & 0xC0) == 0x80)
          {
            uint64_t v20 = 0;
            do
              int v21 = *((unsigned char *)&v22 + (v7._rawBits >> 16) + v20-- - 2) & 0xC0;
            while (v21 == 128);
            uint64_t v19 = 1 - v20;
          }
          else
          {
            uint64_t v19 = 1;
          }
        }
        else
        {
          result._rawBits = (a4 & 0xFFFFFFFFFFFFFFFLL) + 32;
          if ((a3 & 0x1000000000000000) == 0) {
            result._rawBits = (Swift::UInt64)_StringObject.sharedUTF8.getter(a3, a4);
          }
          uint64_t v17 = 0;
          do
            int v18 = *(unsigned char *)(result._rawBits + (v7._rawBits >> 16) - 1 + v17--) & 0xC0;
          while (v18 == 128);
          uint64_t v19 = -v17;
        }
        v7._rawBits = (v7._rawBits - (v19 << 16)) & 0xFFFFFFFFFFFF0000 | 5;
      }
      if (v9 >= v7._rawBits >> 14) {
        return (Swift::String::Index)v11;
      }
    }
    goto LABEL_36;
  }
  return 0;
}

Swift::Int specialized Collection.count.getter(Swift::String::Index from, Swift::String::Index to, unint64_t a3, unint64_t a4)
{
  Swift::UInt64 rawBits = from._rawBits;
  uint64_t v8 = (a3 >> 59) & 1;
  if ((a4 & 0x1000000000000000) == 0) {
    LOBYTE(v8) = 1;
  }
  uint64_t v9 = 4 << v8;
  if ((from._rawBits & 0xC) == 4 << v8) {
    Swift::UInt64 rawBits = _StringGuts._slowEnsureMatchingEncoding(_:)(from)._rawBits;
  }
  if ((to._rawBits & 0xC) == v9)
  {
    to._Swift::UInt64 rawBits = _StringGuts._slowEnsureMatchingEncoding(_:)(to)._rawBits;
    if ((a4 & 0x1000000000000000) == 0) {
      return (to._rawBits >> 16) - (rawBits >> 16);
    }
  }
  else if ((a4 & 0x1000000000000000) == 0)
  {
    return (to._rawBits >> 16) - (rawBits >> 16);
  }
  unint64_t v11 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000) == 0) {
    unint64_t v11 = a3 & 0xFFFFFFFFFFFFLL;
  }
  if (v11 < rawBits >> 16 || v11 < to._rawBits >> 16) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index is out of bounds", 29, 2, "Swift/StringUTF8View.swift", 26, 2, 0xCFuLL, 0);
  }

  return String.UTF8View._foreignDistance(from:to:)((Swift::String::Index)rawBits, to);
}

Swift::UInt64 specialized Collection.count.getter(uint64_t a1, unint64_t a2, void (*a3)(unint64_t *__return_ptr, uint64_t *), atomic_ullong *a4)
{
  v13[0] = a1;
  v13[1] = a2;
  swift_bridgeObjectRetain(a2);
  a3((unint64_t *)&v14, v13);
  swift_bridgeObjectRelease(a2);
  uint64_t v9 = v14;
  unint64_t v8 = v15;
  swift_bridgeObjectRelease(v15);
  uint64_t v10 = HIBYTE(v8) & 0xF;
  if ((v8 & 0x2000000000000000) == 0) {
    uint64_t v10 = v9 & 0xFFFFFFFFFFFFLL;
  }
  if (v10) {
    unint64_t v11 = 15;
  }
  else {
    unint64_t v11 = 0;
  }
  return specialized FlattenSequence<>.distance(from:to:)(v10 == 0, v11, v10 == 0, 1, 0, 1, a1, a2, a3, a4);
}

uint64_t Collection.count.getter(uint64_t a1, uint64_t a2)
{
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (int **)a2, a1, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  uint64_t v5 = *((void *)AssociatedTypeWitness - 1);
  uint64_t v6 = MEMORY[0x1F4188790](AssociatedTypeWitness);
  unint64_t v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)&v14 - v9;
  (*(void (**)(uint64_t, uint64_t))(a2 + 64))(a1, a2);
  (*(void (**)(uint64_t, uint64_t))(a2 + 72))(a1, a2);
  uint64_t v11 = (*(uint64_t (**)(char *, char *, uint64_t, uint64_t))(a2 + 152))(v10, v8, a1, a2);
  Swift::UInt64 v12 = *(void (**)(char *, const char *))(v5 + 8);
  v12(v8, AssociatedTypeWitness);
  v12(v10, AssociatedTypeWitness);
  return v11;
}

void _ArrayBuffer.getElement(_:wasNativeTypeChecked:)(unint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X8>)
{
  if (a2)
  {
    uint64_t v7 = *(a4 - 1);
    unint64_t v8 = *(void (**)(uint64_t, unint64_t, uint64_t *))(v7 + 16);
    unint64_t v9 = a3
       + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))
       + *(void *)(v7 + 72) * a1;
    v8(a5, v9, a4);
  }
  else
  {
    id v10 = _ArrayBuffer._getElementSlowPath(_:)(a1, a3, a4);
    uint64_t v11 = v10;
    uint64_t v12 = *(a4 - 1);
    if (*(void *)(v12 + 64) != 8)
    {
      swift_unknownObjectRelease(v10);
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't unsafeBitCast between types of different sizes", 52, 2, "Swift/Builtin.swift", 19, 2, 0x5FuLL, 0);
    }
    id v13 = v10;
    (*(void (**)(uint64_t, id *, uint64_t *))(v12 + 16))(a5, &v13, a4);
    swift_unknownObjectRelease(v11);
  }
}

id specialized _ArrayBuffer._getElementSlowPath(_:)(unint64_t a1, uint64_t a2)
{
  if ((unint64_t)a2 >> 62)
  {
    if (a2 < 0) {
      uint64_t v5 = (void *)a2;
    }
    else {
      uint64_t v5 = (void *)(a2 & 0xFFFFFFFFFFFFFF8);
    }
    id v6 = [v5 objectAtIndex:a1];
    return v6;
  }
  else
  {
    if ((a1 & 0x8000000000000000) != 0 || *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10) <= a1) {
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Index out of range", 18, 2, "Swift/ContiguousArrayBuffer.swift", 33, 2, 0x2A3uLL, 0);
    }
    uint64_t v3 = *(void **)((a2 & 0xFFFFFFFFFFFFFF8) + 8 * a1 + 0x20);
    return swift_unknownObjectRetain(v3);
  }
}

id _ArrayBuffer._getElementSlowPath(_:)(unint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6 = *(a3 - 1);
  uint64_t v7 = MEMORY[0x1F4188790](a1);
  unint64_t v9 = (char *)&v124 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  uint64_t v11 = (char *)&v124 - v10;
  if (!_swift_isClassOrObjCExistentialType((uint64_t)v12, v12) || !((unint64_t)a2 >> 62))
  {
    BOOL isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType((uint64_t)a3, a3);
    if ((a1 & 0x8000000000000000) != 0
      || (!isClassOrObjCExistentialType ? (uint64_t v16 = a2) : (uint64_t v16 = a2 & 0xFFFFFFFFFFFFFF8), *(void *)(v16 + 16) <= a1))
    {
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Index out of range", 18, 2, "Swift/ContiguousArrayBuffer.swift", 33, 2, 0x2A3uLL, 0);
    }
    id v14 = *(id *)((a2 & 0xFFFFFFFFFFFFFF8) + 8 * a1 + 0x20);
    v124._uint64_t countAndFlagsBits = (uint64_t)v14;
    swift_unknownObjectRetain_n((uint64_t)v14, 2);
    if (swift_dynamicCast(v11, (unint64_t *)&v124, qword_1ECA06328, (const char *)a3, 6uLL))
    {
      (*(void (**)(char *, uint64_t *))(v6 + 8))(v11, a3);
      return v14;
    }
    uint64_t v22 = specialized static String._createEmpty(withInitialCapacity:)(82);
    uint64_t v24 = v23;
    v124._uint64_t countAndFlagsBits = v22;
    v124._uint64_t object = (void *)v23;
    uint64_t v25 = HIBYTE(v23) & 0xF;
    if ((v23 & 0x2000000000000000) == 0) {
      uint64_t v25 = v22 & 0xFFFFFFFFFFFFLL;
    }
    if (v25 || (v22 & ~v23 & 0x2000000000000000) != 0)
    {
      if ((v23 & 0x2000000000000000) != 0
        && ((unint64_t)"ize with negative count" & 0x2000000000000000) != 0
        && (unint64_t v31 = specialized _SmallString.init(_:appending:)(v22, v23, 0xD000000000000043, 0x80000001816DC6E0),
            (v33 & 1) == 0))
      {
        uint64_t v34 = v31;
        uint64_t v35 = v32;
        swift_bridgeObjectRelease(v24);
        v124._uint64_t countAndFlagsBits = v34;
        v124._uint64_t object = v35;
      }
      else
      {
        if (((unint64_t)"ize with negative count" & 0x2000000000000000) != 0) {
          unint64_t v46 = (0x80000001816DC6E0 >> 56) & 0xF;
        }
        else {
          unint64_t v46 = 67;
        }
        _StringGuts.append(_:)(0xD000000000000043, 0x80000001816DC6E0, 0, v46);
      }
    }
    else
    {
      swift_bridgeObjectRelease(v23);
      v124._uint64_t countAndFlagsBits = 0xD000000000000043;
      v124._uint64_t object = (void *)0x80000001816DC6E0;
    }
    TypeName = (uint64_t *)swift_getTypeName((Class *)a3, 0);
    if (v48 < 0) {
      goto LABEL_135;
    }
    v49 = (uint8x16_t *)TypeName;
    int64_t v50 = v48;
    int64_t v51 = validateUTF8(_:)(TypeName, v48);
    if (v53) {
      unint64_t v54 = repairUTF8(_:firstKnownBrokenRange:)(v49->i8, v50, v51, v52);
    }
    else {
      unint64_t v54 = specialized static String._uncheckedFromUTF8(_:isASCII:)(v49, v50, v51 & 1);
    }
    uint64_t countAndFlagsBits = v54;
    unint64_t v61 = v55;
    uint64_t object = v124._object;
    unint64_t v63 = ((unint64_t)v124._object >> 56) & 0xF;
    if (((uint64_t)v124._object & 0x2000000000000000) == 0) {
      unint64_t v63 = v124._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
    }
    if (!v63 && (v124._countAndFlagsBits & ~(uint64_t)v124._object & 0x2000000000000000) == 0)
    {
      swift_bridgeObjectRelease((uint64_t)v124._object);
      v124._uint64_t countAndFlagsBits = countAndFlagsBits;
      v124._uint64_t object = (void *)v61;
      goto LABEL_102;
    }
    if (((uint64_t)v124._object & 0x2000000000000000) != 0)
    {
      if ((v55 & 0x2000000000000000) != 0)
      {
        unint64_t v94 = specialized _SmallString.init(_:appending:)(v124._countAndFlagsBits, (unint64_t)v124._object, v54, v55);
        if ((v96 & 1) == 0)
        {
          uint64_t v97 = v94;
          int64_t v98 = v95;
          swift_bridgeObjectRelease(v61);
          swift_bridgeObjectRelease((uint64_t)object);
          v124._uint64_t countAndFlagsBits = v97;
          v124._uint64_t object = v98;
          unint64_t v61 = (unint64_t)v98;
          uint64_t countAndFlagsBits = v97;
          goto LABEL_102;
        }
        goto LABEL_100;
      }
    }
    else if ((v55 & 0x2000000000000000) != 0)
    {
LABEL_100:
      uint64_t v65 = HIBYTE(v61) & 0xF;
      goto LABEL_101;
    }
    uint64_t v65 = v54 & 0xFFFFFFFFFFFFLL;
LABEL_101:
    _StringGuts.append(_:)(countAndFlagsBits, v61, 0, v65);
    swift_bridgeObjectRelease(v61);
    uint64_t countAndFlagsBits = v124._countAndFlagsBits;
    unint64_t v61 = (unint64_t)v124._object;
LABEL_102:
    Swift::String v99 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(" but found ", 0xBuLL, 1);
    uint64_t v100 = HIBYTE(v61) & 0xF;
    if ((v61 & 0x2000000000000000) == 0) {
      uint64_t v100 = countAndFlagsBits & 0xFFFFFFFFFFFFLL;
    }
    if (!v100 && (countAndFlagsBits & ~v61 & 0x2000000000000000) == 0)
    {
      swift_bridgeObjectRelease(v61);
      Swift::String v124 = v99;
      goto LABEL_116;
    }
    if ((v61 & 0x2000000000000000) != 0)
    {
      if (((uint64_t)v99._object & 0x2000000000000000) != 0)
      {
        unint64_t v102 = specialized _SmallString.init(_:appending:)(countAndFlagsBits, v61, v99._countAndFlagsBits, (unint64_t)v99._object);
        if ((v104 & 1) == 0)
        {
          uint64_t v105 = v102;
          v106 = v103;
          swift_bridgeObjectRelease((uint64_t)v99._object);
          swift_bridgeObjectRelease(v61);
          v124._uint64_t countAndFlagsBits = v105;
          v124._uint64_t object = v106;
          goto LABEL_116;
        }
        goto LABEL_114;
      }
    }
    else if (((uint64_t)v99._object & 0x2000000000000000) != 0)
    {
LABEL_114:
      uint64_t v101 = ((unint64_t)v99._object >> 56) & 0xF;
      goto LABEL_115;
    }
    uint64_t v101 = v99._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
LABEL_115:
    _StringGuts.append(_:)(v99._countAndFlagsBits, (unint64_t)v99._object, 0, v101);
    swift_bridgeObjectRelease((uint64_t)v99._object);
LABEL_116:
    ObjectType = (Class *)swift_getObjectType((unint64_t)v14);
    swift_unknownObjectRelease(v14);
    v108 = (uint64_t *)swift_getTypeName(ObjectType, 0);
    if ((v109 & 0x8000000000000000) == 0)
    {
      uint64_t v110 = (uint8x16_t *)v108;
      int64_t v111 = v109;
      int64_t v112 = validateUTF8(_:)(v108, v109);
      if (v114) {
        uint64_t v115 = repairUTF8(_:firstKnownBrokenRange:)(v110->i8, v111, v112, v113);
      }
      else {
        uint64_t v115 = specialized static String._uncheckedFromUTF8(_:isASCII:)(v110, v111, v112 & 1);
      }
      uint64_t v89 = v115;
      unint64_t v90 = v116;
      unint64_t v91 = v124._countAndFlagsBits;
      unint64_t v92 = (unint64_t)v124._object;
      unint64_t v117 = ((unint64_t)v124._object >> 56) & 0xF;
      if (((uint64_t)v124._object & 0x2000000000000000) == 0) {
        unint64_t v117 = v124._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
      }
      if (v117 || (v124._countAndFlagsBits & ~(uint64_t)v124._object & 0x2000000000000000) != 0)
      {
LABEL_125:
        if ((v92 & 0x2000000000000000) != 0)
        {
          if ((v90 & 0x2000000000000000) != 0)
          {
            unint64_t v119 = specialized _SmallString.init(_:appending:)(v91, v92, v89, v90);
            if ((v121 & 1) == 0)
            {
              unint64_t v122 = v119;
              unint64_t v123 = v120;
              swift_bridgeObjectRelease(v90);
              swift_bridgeObjectRelease(v92);
              unint64_t v90 = v123;
              uint64_t v89 = v122;
              goto LABEL_134;
            }
            uint64_t v118 = HIBYTE(v90) & 0xF;
LABEL_133:
            _StringGuts.append(_:)(v89, v90, 0, v118);
            swift_bridgeObjectRelease(v90);
            uint64_t v89 = v124._countAndFlagsBits;
            unint64_t v90 = (unint64_t)v124._object;
LABEL_134:
            _assertionFailure(_:_:flags:)("Fatal error", 11, 2, v89, v90, 0);
          }
        }
        else if ((v90 & 0x2000000000000000) != 0)
        {
          uint64_t v118 = HIBYTE(v90) & 0xF;
          goto LABEL_133;
        }
        uint64_t v118 = v89 & 0xFFFFFFFFFFFFLL;
        goto LABEL_133;
      }
LABEL_124:
      swift_bridgeObjectRelease(v92);
      goto LABEL_134;
    }
LABEL_135:
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeBufferPointer with negative count", 39, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x53FuLL, 0);
  }
  if (a2 < 0) {
    id v13 = (void *)a2;
  }
  else {
    id v13 = (void *)(a2 & 0xFFFFFFFFFFFFFF8);
  }
  id v14 = [v13 objectAtIndex:a1];
  v124._uint64_t countAndFlagsBits = (uint64_t)v14;
  swift_unknownObjectRetain(v14);
  if (!swift_dynamicCast(v9, (unint64_t *)&v124, qword_1ECA06328, (const char *)a3, 6uLL))
  {
    uint64_t v18 = specialized static String._createEmpty(withInitialCapacity:)(85);
    uint64_t v20 = v19;
    v124._uint64_t countAndFlagsBits = v18;
    v124._uint64_t object = (void *)v19;
    uint64_t v21 = HIBYTE(v19) & 0xF;
    if ((v19 & 0x2000000000000000) == 0) {
      uint64_t v21 = v18 & 0xFFFFFFFFFFFFLL;
    }
    if (v21 || (v18 & ~v19 & 0x2000000000000000) != 0)
    {
      if ((v19 & 0x2000000000000000) != 0
        && (0x80000001816DC730 & 0x2000000000000000) != 0
        && (unint64_t v26 = specialized _SmallString.init(_:appending:)(v18, v19, 0xD000000000000046, 0x80000001816DC730 | 0x8000000000000000), (v28 & 1) == 0))
      {
        uint64_t v29 = v26;
        int64_t v30 = v27;
        swift_bridgeObjectRelease(0x80000001816DC730 | 0x8000000000000000);
        swift_bridgeObjectRelease(v20);
        v124._uint64_t countAndFlagsBits = v29;
        v124._uint64_t object = v30;
      }
      else
      {
        if ((0x80000001816DC730 & 0x2000000000000000) != 0) {
          unint64_t v36 = (0x80000001816DC730 >> 56) & 0xF;
        }
        else {
          unint64_t v36 = 70;
        }
        _StringGuts.append(_:)(0xD000000000000046, 0x80000001816DC730 | 0x8000000000000000, 0, v36);
        swift_bridgeObjectRelease(0x80000001816DC730 | 0x8000000000000000);
      }
    }
    else
    {
      swift_bridgeObjectRelease(v19);
      v124._uint64_t countAndFlagsBits = 0xD000000000000046;
      v124._uint64_t object = (void *)(0x80000001816DC730 | 0x8000000000000000);
    }
    uint64_t v37 = (uint64_t *)swift_getTypeName((Class *)a3, 0);
    if (v38 < 0) {
      goto LABEL_135;
    }
    uint64_t v39 = (uint8x16_t *)v37;
    int64_t v40 = v38;
    int64_t v41 = validateUTF8(_:)(v37, v38);
    if (v43) {
      unint64_t v44 = repairUTF8(_:firstKnownBrokenRange:)(v39->i8, v40, v41, v42);
    }
    else {
      unint64_t v44 = specialized static String._uncheckedFromUTF8(_:isASCII:)(v39, v40, v41 & 1);
    }
    uint64_t v56 = v44;
    unint64_t v57 = v45;
    int64_t v58 = v124._object;
    unint64_t v59 = ((unint64_t)v124._object >> 56) & 0xF;
    if (((uint64_t)v124._object & 0x2000000000000000) == 0) {
      unint64_t v59 = v124._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
    }
    if (!v59 && (v124._countAndFlagsBits & ~(uint64_t)v124._object & 0x2000000000000000) == 0)
    {
      swift_bridgeObjectRelease((uint64_t)v124._object);
      v124._uint64_t countAndFlagsBits = v56;
      v124._uint64_t object = (void *)v57;
      goto LABEL_75;
    }
    if (((uint64_t)v124._object & 0x2000000000000000) != 0)
    {
      if ((v45 & 0x2000000000000000) != 0)
      {
        unint64_t v66 = specialized _SmallString.init(_:appending:)(v124._countAndFlagsBits, (unint64_t)v124._object, v44, v45);
        if ((v68 & 1) == 0)
        {
          uint64_t v69 = v66;
          char v70 = v67;
          swift_bridgeObjectRelease(v57);
          swift_bridgeObjectRelease((uint64_t)v58);
          v124._uint64_t countAndFlagsBits = v69;
          v124._uint64_t object = v70;
          unint64_t v57 = (unint64_t)v70;
          uint64_t v56 = v69;
          goto LABEL_75;
        }
        goto LABEL_73;
      }
    }
    else if ((v45 & 0x2000000000000000) != 0)
    {
LABEL_73:
      uint64_t v64 = HIBYTE(v57) & 0xF;
      goto LABEL_74;
    }
    uint64_t v64 = v44 & 0xFFFFFFFFFFFFLL;
LABEL_74:
    _StringGuts.append(_:)(v56, v57, 0, v64);
    swift_bridgeObjectRelease(v57);
    uint64_t v56 = v124._countAndFlagsBits;
    unint64_t v57 = (unint64_t)v124._object;
LABEL_75:
    Swift::String v71 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(" but found ", 0xBuLL, 1);
    uint64_t v72 = HIBYTE(v57) & 0xF;
    if ((v57 & 0x2000000000000000) == 0) {
      uint64_t v72 = v56 & 0xFFFFFFFFFFFFLL;
    }
    if (!v72 && (v56 & ~v57 & 0x2000000000000000) == 0)
    {
      swift_bridgeObjectRelease(v57);
      Swift::String v124 = v71;
      goto LABEL_89;
    }
    if ((v57 & 0x2000000000000000) != 0)
    {
      if (((uint64_t)v71._object & 0x2000000000000000) != 0)
      {
        unint64_t v74 = specialized _SmallString.init(_:appending:)(v56, v57, v71._countAndFlagsBits, (unint64_t)v71._object);
        if ((v76 & 1) == 0)
        {
          uint64_t v77 = v74;
          char v78 = v75;
          swift_bridgeObjectRelease((uint64_t)v71._object);
          swift_bridgeObjectRelease(v57);
          v124._uint64_t countAndFlagsBits = v77;
          v124._uint64_t object = v78;
          goto LABEL_89;
        }
        goto LABEL_87;
      }
    }
    else if (((uint64_t)v71._object & 0x2000000000000000) != 0)
    {
LABEL_87:
      uint64_t v73 = ((unint64_t)v71._object >> 56) & 0xF;
      goto LABEL_88;
    }
    uint64_t v73 = v71._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
LABEL_88:
    _StringGuts.append(_:)(v71._countAndFlagsBits, (unint64_t)v71._object, 0, v73);
    swift_bridgeObjectRelease((uint64_t)v71._object);
LABEL_89:
    v79 = (Class *)swift_getObjectType((unint64_t)v14);
    swift_unknownObjectRelease(v14);
    Swift::String v80 = (uint64_t *)swift_getTypeName(v79, 0);
    if ((v81 & 0x8000000000000000) == 0)
    {
      uint64_t v82 = (uint8x16_t *)v80;
      int64_t v83 = v81;
      int64_t v84 = validateUTF8(_:)(v80, v81);
      if (v86) {
        uint64_t v87 = repairUTF8(_:firstKnownBrokenRange:)(v82->i8, v83, v84, v85);
      }
      else {
        uint64_t v87 = specialized static String._uncheckedFromUTF8(_:isASCII:)(v82, v83, v84 & 1);
      }
      uint64_t v89 = v87;
      unint64_t v90 = v88;
      unint64_t v91 = v124._countAndFlagsBits;
      unint64_t v92 = (unint64_t)v124._object;
      unint64_t v93 = ((unint64_t)v124._object >> 56) & 0xF;
      if (((uint64_t)v124._object & 0x2000000000000000) == 0) {
        unint64_t v93 = v124._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
      }
      if (v93 || (v124._countAndFlagsBits & ~(uint64_t)v124._object & 0x2000000000000000) != 0) {
        goto LABEL_125;
      }
      goto LABEL_124;
    }
    goto LABEL_135;
  }
  (*(void (**)(char *, uint64_t *))(v6 + 8))(v9, a3);
  return v14;
}

uint64_t unsafeBitCast<A, B>(_:to:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  if (*(void *)(*(void *)(a2 - 8) + 64) != *(void *)(*(void *)(a3 - 8) + 64)) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't unsafeBitCast between types of different sizes", 52, 2, "Swift/Builtin.swift", 19, 2, 0x5FuLL, 0);
  }
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a3 - 8) + 16);

  return v4(a4, a1, a3);
}

void _ArrayBuffer.subscript.getter(unint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  if (_swift_isClassOrObjCExistentialType((uint64_t)a3, a3) && (a2 & 0xC000000000000001) != 0)
  {
    id v11 = _ArrayBuffer._getElementSlowPath(_:)(a1, a2, a3);
    uint64_t v12 = v11;
    uint64_t v13 = *(a3 - 1);
    if (*(void *)(v13 + 64) != 8)
    {
      swift_unknownObjectRelease(v11);
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't unsafeBitCast between types of different sizes", 52, 2, "Swift/Builtin.swift", 19, 2, 0x5FuLL, 0);
    }
    id v14 = v11;
    (*(void (**)(uint64_t, id *, uint64_t *))(v13 + 16))(a4, &v14, a3);
    swift_unknownObjectRelease(v12);
  }
  else
  {
    uint64_t v8 = *(a3 - 1);
    unint64_t v9 = *(void (**)(uint64_t, unint64_t, uint64_t *))(v8 + 16);
    unint64_t v10 = a2
        + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))
        + *(void *)(v8 + 72) * a1;
    v9(a4, v10, a3);
  }
}

void key path getter for _ArrayBuffer.subscript(_:) : <A>_ArrayBuffer<A>A(uint64_t *a1@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
}

void key path setter for _ArrayBuffer.subscript(_:) : <A>_ArrayBuffer<A>A(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = *(uint64_t **)(a4 + a3 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v7 = (char *)&v11 - v6;
  uint64_t v9 = *v8;
  (*(void (**)(char *))(v10 + 16))((char *)&v11 - v6);
  _ArrayBuffer.subscript.setter((uint64_t)v7, v9, *a2, v5);
}

uint64_t _ContiguousArrayBuffer.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *(void *)(a4 - 8);
  MEMORY[0x1F4188790]();
  uint64_t v10 = (char *)&v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 32))(v10, a1, v11);
  unint64_t v12 = a3
      + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))
      + *(void *)(v8 + 72) * a2;
  (*(void (**)(uint64_t, unint64_t, uint64_t))(v8 + 16))(a1, v12, a4);
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(a1, a4);
  return (*(uint64_t (**)(unint64_t, char *, uint64_t))(v8 + 40))(v12, v10, a4);
}

uint64_t static Int.+ infix(_:_:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = __OFADD__(a1, a2);
  uint64_t result = a1 + a2;
  if (v2) {
    __break(1u);
  }
  return result;
}

uint64_t CollectionOfOne.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 32))(a3, a1, a2);
}

uint64_t _convertPointerToPointerArgument<A, B>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 48))(a2, a4);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a5 + 56))(v7, a3, a5);
}

uint64_t UnsafeBufferPointer.init(start:count:)(uint64_t result, uint64_t a2)
{
  if (a2 < 0) {
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeBufferPointer with negative count", 39, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x53FuLL, 0);
  }
  if (a2)
  {
    if (!result) {
      _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeBufferPointer has a nil start and nonzero count", 53, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x541uLL, 0);
    }
  }
  return result;
}

void *_ss15ContiguousArrayV23withUnsafeBufferPointeryqd__qd__SRyxGKXEKlFADq_s5Error_pRi_zRi0_zRi__Ri0__r0_lyxSSSgIsgyrzo_AByxGAFsAE_pAFRsd__r__lIetMggozo_Tp5(void *(*a1)(uint64_t *__return_ptr, unint64_t, void), uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = a1(&v6, a3+ ((*(unsigned __int8 *)(*(void *)(a4 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(a4 - 8) + 80)), *(void *)(a3 + 16));
  if (!v4) {
    return (void *)v6;
  }
  return result;
}

void *_ss15ContiguousArrayV23withUnsafeBufferPointeryqd__qd__SRyxGKXEKlFADq_s5Error_pRi_zRi0_zRi__Ri0__r0_lyxSS6result_Sb11repairsMadetIsgyrzo_AByxGSSAF_SbAGtsAE_pSSAF_SbAGtRsd__r__lIetMggozo_Tpq5(void *(*a1)(uint64_t *__return_ptr, unint64_t, void), uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = a1(&v6, a3+ ((*(unsigned __int8 *)(*(void *)(a4 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(a4 - 8) + 80)), *(void *)(a3 + 16));
  if (!v4) {
    return (void *)v6;
  }
  return result;
}

uint64_t ContiguousArray.withUnsafeBufferPointer<A>(_:)(uint64_t (*a1)(unint64_t, void), uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a1(a3+ ((*(unsigned __int8 *)(*(void *)(a4 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(a4 - 8) + 80)), *(void *)(a3 + 16));
}

uint64_t static Bool.|| infix(_:_:)(char a1, uint64_t (*a2)(void))
{
  if (a1) {
    return 1;
  }
  else {
    return a2() & 1;
  }
}

uint64_t _ArrayBuffer.nativeOwner.getter(unint64_t a1, uint64_t *a2)
{
  if (_swift_isClassOrObjCExistentialType((uint64_t)a2, a2)) {
    uint64_t v3 = a1 & 0xFFFFFFFFFFFFFF8;
  }
  else {
    uint64_t v3 = a1;
  }
  swift_bridgeObjectRetain(a1);
  return v3;
}

BOOL _BridgeStorage.isUnflaggedNative.getter(uint64_t a1)
{
  return (a1 & 0xC000000000000001) == 0;
}

uint64_t _BridgeStorage.objCInstance.getter(int64_t a1)
{
  if (a1 < 0) {
    uint64_t v1 = a1;
  }
  else {
    uint64_t v1 = a1 & 0xFFFFFFFFFFFFFF8;
  }
  swift_bridgeObjectRetain(a1);
  return v1;
}

uint64_t static Strideable<>.+ infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a4 + 32) + 48))(a2, a3);
}

{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a4 + 32) + 48))(a1, a3);
}

Swift::UnsafeMutableRawPointer __swiftcall UnsafeMutablePointer.deinitialize(count:)(Swift::Int count)
{
  if (count < 0) {
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeMutablePointer.deinitialize with negative count", 53, 2, "Swift/UnsafePointer.swift", 25, 2, 0x493uLL, 0);
  }
  v3._rawValue = (Builtin::RawPointer)v1;
  swift_arrayDestroy(v1, count, v2);
  return v3;
}

uint64_t static Int.- infix(_:_:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = __OFSUB__(a1, a2);
  uint64_t result = a1 - a2;
  if (v2) {
    __break(1u);
  }
  return result;
}

char *specialized closure #1 in _ArrayBufferProtocol.replaceSubrange<A>(_:with:elementsOf:)(char *__src, uint64_t a2, uint64_t a3, char *__dst)
{
  if (a2 != a3) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "invalid Collection: count differed in successive traversals", 59, 2, "Swift/ArrayBufferProtocol.swift", 31, 2, 0xAFuLL, 0);
  }
  if (!__src) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/ArrayBufferProtocol.swift", 31, 2, 0xB3uLL, 0);
  }
  if (a2 < 0) {
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 0x442uLL, 0);
  }
  if (&__dst[8 * a2] > __src && &__src[8 * a2] > __dst) {
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 0x444uLL, 0);
  }
  return swift_arrayInitWithCopy(__dst, __src, a2, (unint64_t *)qword_1ECA06328);
}

char *closure #1 in _ArrayBufferProtocol.replaceSubrange<A>(_:with:elementsOf:)(char *a1, uint64_t a2, uint64_t a3, char *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (a2 != a3) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "invalid Collection: count differed in successive traversals", 59, 2, "Swift/ArrayBufferProtocol.swift", 31, 2, 0xAFuLL, 0);
  }
  if (!a1) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/ArrayBufferProtocol.swift", 31, 2, 0xB3uLL, 0);
  }
  if (a2 < 0) {
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 0x442uLL, 0);
  }
  uint64_t v11 = *(int ***)(*(void *)(*(void *)(a7 + 8) + 8) + 8);
  uint64_t v12 = *(void *)(*((void *)swift_getAssociatedTypeWitness(255, v11, a5, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element)- 1)+ 72)* a2;
  uint64_t v13 = &a4[v12];
  uint64_t v14 = &a1[v12];
  if (v13 > a1 && v14 > a4) {
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 0x444uLL, 0);
  }
  AssociatedTypeWitness = (unint64_t *)swift_getAssociatedTypeWitness(0, v11, a5, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
  return swift_arrayInitWithCopy(a4, a1, a2, AssociatedTypeWitness);
}

Swift::Void __swiftcall _diagnoseUnexpectedNilOptional(_filenameStart:_filenameLength:_filenameIsASCII:_line:_isImplicitUnwrap:)(Builtin::RawPointer _filenameStart, Builtin::Word _filenameLength, Builtin::Int1 _filenameIsASCII, Builtin::Word _line, Builtin::Int1 _isImplicitUnwrap)
{
  if (_filenameIsASCII) {
    char v5 = 2;
  }
  else {
    char v5 = 0;
  }
  if (_isImplicitUnwrap) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while implicitly unwrapping an Optional value", 68, 2, (const char *)_filenameStart, _filenameLength, v5, _line, 0);
  }
  _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, (const char *)_filenameStart, _filenameLength, v5, _line, 0);
}

char *specialized UnsafeMutablePointer.initialize(from:count:)(char *__src, uint64_t a2, char *__dst)
{
  if (a2 < 0) {
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 0x442uLL, 0);
  }
  if (&__dst[16 * a2] > __src && &__src[16 * a2] > __dst) {
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 0x444uLL, 0);
  }

  return swift_arrayInitWithCopy(__dst, __src, a2, (unint64_t *)&type metadata for String);
}

{
  uint64_t vars8;

  if (a2 < 0) {
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 0x442uLL, 0);
  }
  if (&__dst[8 * a2] > __src && &__src[8 * a2] > __dst) {
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 0x444uLL, 0);
  }

  return swift_arrayInitWithCopy(__dst, __src, a2, (unint64_t *)qword_1ECA06328);
}

{
  uint64_t vars8;

  if (a2 < 0) {
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 0x442uLL, 0);
  }
  if (&__dst[32 * a2] > __src && &__src[32 * a2] > __dst) {
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 0x444uLL, 0);
  }

  return swift_arrayInitWithCopy(__dst, __src, a2, (unint64_t *)&type metadata for _DictionaryCodingKey);
}

{
  uint64_t vars8;

  if (a2 < 0) {
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 0x442uLL, 0);
  }
  if (&__dst[32 * a2] > __src && &__src[32 * a2] > __dst) {
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 0x444uLL, 0);
  }

  return swift_arrayInitWithCopy(__dst, __src, a2, (unint64_t *)&unk_1ECA06310);
}

{
  uint64_t vars8;

  if (a2 < 0) {
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 0x442uLL, 0);
  }
  if (&__dst[16 * a2] > __src && &__src[16 * a2] > __dst) {
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 0x444uLL, 0);
  }

  return swift_arrayInitWithCopy(__dst, __src, a2, (unint64_t *)&type metadata for Character);
}

void *specialized UnsafeMutablePointer.initialize(from:count:)(char *__src, uint64_t a2, char *__dst)
{
  if (a2 < 0) {
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 0x442uLL, 0);
  }
  if (&__dst[8 * a2] > __src && &__src[8 * a2] > __dst) {
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 0x444uLL, 0);
  }

  return memcpy(__dst, __src, 8 * a2);
}

void *specialized UnsafeMutablePointer.initialize(from:count:)(char *__src, size_t __n, char *__dst)
{
  if ((__n & 0x8000000000000000) != 0) {
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 0x442uLL, 0);
  }
  if (&__dst[__n] > __src && &__src[__n] > __dst) {
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 0x444uLL, 0);
  }

  return memcpy(__dst, __src, __n);
}

char *specialized UnsafeMutablePointer.initialize(from:count:)(char *a1, uint64_t a2, char *a3, uint64_t *a4)
{
  if (a2 < 0) {
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 0x442uLL, 0);
  }
  if (&a3[40 * a2] > a1 && &a1[40 * a2] > a3) {
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 0x444uLL, 0);
  }
  uint64_t v8 = (unint64_t *)__swift_instantiateConcreteTypeFromMangledName(a4);

  return swift_arrayInitWithCopy(a3, a1, a2, v8);
}

char *UnsafeMutablePointer.initialize(from:count:)(char *__src, uint64_t a2, char *__dst, unint64_t *a4)
{
  if (a2 < 0) {
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 0x442uLL, 0);
  }
  uint64_t v4 = *(void *)(*(a4 - 1) + 72) * a2;
  char v5 = &__dst[v4];
  uint64_t v6 = &__src[v4];
  if (v5 > __src && v6 > __dst) {
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 0x444uLL, 0);
  }

  return swift_arrayInitWithCopy(__dst, __src, a2, a4);
}

BOOL static _Pointer.< infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(a4 + 48);
  unint64_t v7 = v6(a3, a4);
  return v7 < v6(a3, a4);
}

void *static Strideable<>.+= infix(_:_:)(void *a1, uint64_t a2, uint64_t a3)
{
  size_t v4 = *(void *)(*(void *)(a3 - 8) + 64);
  MEMORY[0x1F4188790](a1);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 + 32) + 48))(v6, v7);
  return memcpy(a1, (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
}

uint64_t _expectEnd<A>(of:is:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v23 = a1;
  uint64_t v7 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v11, v10, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  uint64_t v13 = *((void *)AssociatedTypeWitness - 1);
  uint64_t v14 = MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v16 = (char *)&v22 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v18 = (char *)&v22 - v17;
  (*(void (**)(char *, uint64_t, const char *))(v13 + 16))((char *)&v22 - v17, a2, AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v23, a3);
  (*(void (**)(uint64_t, uint64_t))(a4 + 72))(a3, a4);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(a4, a3, (uint64_t)AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Collection, associated conformance descriptor for Collection.Collection.Index: Comparable);
  LOBYTE(a2) = (*(uint64_t (**)(char *, char *, const char *))(*(void *)(AssociatedConformanceWitness + 8)
                                                                       + 8))(v18, v16, AssociatedTypeWitness);
  uint64_t v20 = *(void (**)(char *, const char *))(v13 + 8);
  v20(v16, AssociatedTypeWitness);
  if ((a2 & 1) == 0) {
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "invalid Collection: count differed in successive traversals", 59, 2, "Swift/ArrayShared.swift", 23, 2, 0xAAuLL, 0);
  }
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, a3);
  return ((uint64_t (*)(char *, const char *))v20)(v18, AssociatedTypeWitness);
}

void _swift_arrayDownCastIndirect(unint64_t *a1, __objc2_class ***a2, uint64_t *a3)
{
  uint64_t v5 = *a1;
  unint64_t v6 = swift_bridgeObjectRetain(*a1);
  uint64_t v7 = _arrayForceCast<A, B>(_:)(v6, a3);
  swift_bridgeObjectRelease(v5);
  *a2 = v7;
}

__objc2_class **specialized _arrayForceCast<A, B>(_:)(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  BOOL v2 = &_swiftEmptyArrayStorage;
  if (v1)
  {
    uint64_t v18 = &_swiftEmptyArrayStorage;
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
    uint64_t v4 = a1 + 32;
    do
    {
      outlined init with copy of MirrorPath(v4, (uint64_t)v15);
      outlined init with take of MirrorPath(v15, (uint64_t)v14);
      uint64_t v5 = (Class *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodingKey);
      swift_dynamicCast((char *)v16, v14, v5, (const char *)&type metadata for _DictionaryCodingKey, 7uLL);
      unint64_t v6 = (__objc2_class *)v16[0];
      uint64_t v7 = (__objc2_class *)v16[1];
      uint64_t v8 = (__objc2_class *)v16[2];
      char v9 = v17;
      BOOL v2 = v18;
      if (!swift_isUniquelyReferenced_nonNull_native((uint64_t)v18))
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, (int64_t)&v2[2]->isa + 1, 1);
        BOOL v2 = v18;
      }
      unint64_t v11 = (unint64_t)v2[2];
      unint64_t v10 = (unint64_t)v2[3];
      if (v11 >= v10 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((__objc2_class **)(v10 > 1), v11 + 1, 1);
        BOOL v2 = v18;
      }
      v2[2] = (__objc2_class *)(v11 + 1);
      uint64_t v12 = &v2[4 * v11];
      v12[4] = v6;
      v12[5] = v7;
      v12[6] = v8;
      *((unsigned char *)v12 + 56) = v9;
      v4 += 40;
      --v1;
    }
    while (v1);
  }
  return v2;
}

__objc2_class **specialized _arrayForceCast<A, B>(_:)(uint64_t a1, char *a2)
{
  uint64_t v4 = MEMORY[0x1F4188790](a1);
  uint64_t v8 = (char *)&v15[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  Swift::Int v9 = *(void *)(v4 + 16);
  if (v9)
  {
    char v17 = &_swiftEmptyArrayStorage;
    unint64_t v10 = type metadata accessor for ContiguousArray(0, (uint64_t)a2, v5, v6);
    ContiguousArray.reserveCapacity(_:)(v9);
    uint64_t v11 = a1 + 32;
    do
    {
      outlined init with copy of MirrorPath(v11, (uint64_t)v16);
      outlined init with take of MirrorPath(v16, (uint64_t)v15);
      uint64_t v12 = (Class *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodingKey);
      swift_dynamicCast(v8, v15, v12, a2, 7uLL);
      ContiguousArray.append(_:)((uint64_t)v8, (uint64_t)v10);
      v11 += 40;
      --v9;
    }
    while (v9);
    return v17;
  }
  else
  {
    _swift_isClassOrObjCExistentialType((uint64_t)a2, (uint64_t *)a2);
    return &_swiftEmptyArrayStorage;
  }
}

__objc2_class **_arrayForceCast<A, B>(_:)(unint64_t a1, uint64_t *a2)
{
  unint64_t v3 = a1;
  uint64_t v4 = *(a2 - 1);
  uint64_t v5 = *(void *)(v4 + 64);
  uint64_t v6 = MEMORY[0x1F4188790](a1);
  int64_t v50 = (char *)&v43 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = MEMORY[0x1F4188790](v6);
  Swift::Int v9 = (char *)&v43 - v8;
  uint64_t v10 = MEMORY[0x1F4188790](v7);
  uint64_t v12 = (char *)&v43 - v11;
  int64_t v51 = v13;
  MEMORY[0x1F4188790](v10);
  uint64_t v15 = (char *)&v43 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (_swift_isClassOrObjCExistentialType((uint64_t)v16, v16) && _swift_isClassOrObjCExistentialType((uint64_t)v51, v51))
  {
    unint64_t v17 = swift_bridgeObjectRetain(v3);
    uint64_t v18 = (void *)_ArrayBuffer.requestNativeBuffer()(v17, a2);
    if (v18)
    {
      uint64_t v19 = (uint64_t)v18;
      char v20 = _ContiguousArrayBuffer.storesOnlyElementsOfType<A>(_:)((uint64_t)v18, v18, (uint64_t)a2, v51);
      swift_release(v19);
      if ((v20 & 1) == 0)
      {
        BOOL isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType((uint64_t)a2, a2);
        uint64_t v22 = v3 & 0xFFFFFFFFFFFFFF8;
        if (!isClassOrObjCExistentialType) {
          uint64_t v22 = v3;
        }
        return (__objc2_class **)(v22 | 1);
      }
    }
    else
    {
      swift_bridgeObjectRelease(v3);
      int64_t v41 = _ArrayBuffer._asCocoaArray()(v3, a2);
      return (__objc2_class **)(~((unint64_t)v41 >> 1) & 0x4000000000000000 | (unint64_t)v41);
    }
  }
  else
  {
    v49 = v12;
    unint64_t v54 = v3;
    Swift::Int v23 = Array._getCount()();
    if (v23)
    {
      Swift::Int v26 = v23;
      char v53 = &_swiftEmptyArrayStorage;
      uint64_t v48 = type metadata accessor for ContiguousArray(0, (uint64_t)v51, v24, v25);
      ContiguousArray.reserveCapacity(_:)(v26);
      if (v26 < 0) {
        goto LABEL_22;
      }
      uint64_t v45 = v5;
      Swift::Int v29 = 0;
      uint64_t v47 = (void (**)(char *, unint64_t, uint64_t *))(v4 + 16);
      unint64_t v46 = (v4 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
      while (v26 != v29)
      {
        unint64_t v30 = v54;
        char v31 = _swift_isClassOrObjCExistentialType((uint64_t)a2, a2);
        char v32 = ((v30 & 0xC000000000000001) == 0) | ~v31;
        Array._checkSubscript(_:wasNativeTypeChecked:)(v29, (v30 & 0xC000000000000001) == 0 || (v31 & 1) == 0);
        if (v32)
        {
          unint64_t v33 = v30
              + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))
              + *(void *)(v4 + 72) * v29;
          uint64_t v34 = *(void (**)(char *, unint64_t, uint64_t *))(v4 + 16);
          uint64_t v35 = v49;
          v34(v49, v33, a2);
        }
        else
        {
          uint64_t v37 = (void *)_ArrayBuffer._getElementSlowPath(_:)(v29, v30, a2);
          if (v45 != 8)
          {
            swift_unknownObjectRelease(v37);
            _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't unsafeBitCast between types of different sizes", 52, 2, "Swift/Builtin.swift", 19, 2, 0x5FuLL, 0);
          }
          Swift::Int v52 = (Swift::Int)v37;
          uint64_t v34 = *v47;
          uint64_t v35 = v49;
          id v44 = v37;
          v34(v49, (unint64_t)&v52, a2);
          swift_unknownObjectRelease(v44);
        }
        ++v29;
        (*(void (**)(char *, char *, uint64_t *))(v4 + 32))(v9, v35, a2);
        unint64_t v36 = v50;
        v34(v50, (unint64_t)v9, a2);
        swift_dynamicCast(v15, v36, a2, v51, 7);
        (*(void (**)(char *, uint64_t *))(v4 + 8))(v9, a2);
        ContiguousArray.append(_:)((uint64_t)v15, (uint64_t)v48);
        if (v29 == 0x8000000000000000)
        {
          __break(1u);
LABEL_22:
          _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
        }
      }
      Swift::Int v52 = v26;
      uint64_t v38 = (unint64_t *)type metadata accessor for Array(0, (uint64_t)a2, v27, v28);
      uint64_t WitnessTable = swift_getWitnessTable(protocol conformance descriptor for [A], v38, v39);
      _expectEnd<A>(of:is:)((uint64_t)&v54, (uint64_t)&v52, (uint64_t)v38, WitnessTable);
      return v53;
    }
    else
    {
      _swift_isClassOrObjCExistentialType((uint64_t)v51, v51);
      return &_swiftEmptyArrayStorage;
    }
  }
  return (__objc2_class **)v3;
}

uint64_t _ContiguousArrayBuffer.storesOnlyElementsOfType<A>(_:)(uint64_t a1, void *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v7 = *(a4 - 1);
  uint64_t v8 = MEMORY[0x1F4188790](a1);
  uint64_t v10 = (char *)&v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v14 = (char *)&v34 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v17 = type metadata accessor for Optional(0, v15, v15, v16);
  uint64_t v18 = MEMORY[0x1F4188790](v17 - 1);
  char v20 = (char *)&v34 - v19;
  uint64_t v21 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*a2 + 136))(v18);
  if (swift_dynamicCastMetatype(v21, a4)) {
    return 1;
  }
  int64_t v41 = v10;
  unint64_t v24 = a2[2];
  if (v24)
  {
    unint64_t v25 = 0;
    uint64_t v28 = *(void (**)(void, void, void))(v12 + 16);
    uint64_t v27 = v12 + 16;
    Swift::Int v26 = v28;
    uint64_t v29 = v7;
    unint64_t v30 = (char *)a2 + ((*(unsigned __int8 *)(v27 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v27 + 64));
    uint64_t v38 = *(void *)(v27 + 56);
    uint64_t v39 = (void (**)(char *, char *, uint64_t))(v27 + 16);
    int64_t v40 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v27 + 40);
    unint64_t v36 = (v27 + 40) & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
    uint64_t v37 = (void (**)(char *, uint64_t *))(v29 + 8);
    while (1)
    {
      char v31 = v26;
      v26(v20, v30, a3);
      if (v25 >= v24) {
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Index out of bounds", 19, 2, "Swift/Collection.swift", 22, 2, 0x2CAuLL, 0);
      }
      uint64_t v35 = *v40;
      v35(v20, 0, 1, a3);
      (*v39)(v14, v20, a3);
      char v32 = v41;
      if ((swift_dynamicCast(v41, v14, a3, a4, 6) & 1) == 0) {
        return 0;
      }
      ++v25;
      (*v37)(v32, a4);
      unint64_t v24 = a2[2];
      v30 += v38;
      Swift::Int v26 = v31;
      if (v25 == v24)
      {
        unint64_t v33 = v35;
        goto LABEL_12;
      }
    }
  }
  else
  {
    unint64_t v33 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v12 + 56);
LABEL_12:
    uint64_t v22 = 1;
    v33(v20, 1, 1, a3);
  }
  return v22;
}

uint64_t Array.init(_immutableCocoaArray:)(unint64_t a1)
{
  return ~(a1 >> 1) & 0x4000000000000000 | a1;
}

uint64_t specialized closure #1 in _arrayForceCast<A, B>(_:)@<X0>(uint64_t a1@<X0>, Class *a2@<X1>, char *a3@<X8>)
{
  MEMORY[0x1F4188790](a1);
  uint64_t v6 = (unint64_t *)((char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(unint64_t *))(v7 + 16))(v6);
  uint64_t v8 = (const char *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodingKey);
  return swift_dynamicCast(a3, v6, a2, v8, 7uLL);
}

__objc2_class **_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSnySiG_SSs5NeverOTg549_ss11CommandLineO10_argumentsSaySSGvpZfiSSSiXEfU_Tf1cn_n(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_22;
  }
  if (!v2) {
    return &_swiftEmptyArrayStorage;
  }
  uint64_t v4 = a1;
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2 & ~(v2 >> 63), 0);
  if (v2 < 0) {
LABEL_22:
  }
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
  if (a2 <= v4) {
    uint64_t v6 = v4;
  }
  else {
    uint64_t v6 = a2;
  }
  do
  {
    if (v6 == v4) {
      _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Index out of range", 18, 2, "Swift/Range.swift", 17, 2, 0x131uLL, 0);
    }
    if (one-time initialization token for _unsafeArgv != -1) {
      swift_once(&one-time initialization token for _unsafeArgv, (dispatch_function_t)one-time initialization function for _unsafeArgv, v5);
    }
    uint64_t v7 = *(uint8x16_t **)(static CommandLine._unsafeArgv + 8 * v4);
    if (!v7) {
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/CommandLine.swift", 23, 2, 0x4EuLL, 0);
    }
    size_t v8 = _swift_stdlib_strlen(*(const char **)(static CommandLine._unsafeArgv + 8 * v4));
    if ((v8 & 0x8000000000000000) != 0) {
      _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeBufferPointer with negative count", 39, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x53FuLL, 0);
    }
    int64_t v9 = v8;
    int64_t v10 = validateUTF8(_:)(v7->i64, v8);
    uint64_t v20 = v6;
    if (v12) {
      uint64_t v13 = repairUTF8(_:firstKnownBrokenRange:)(v7->i8, v9, v10, v11);
    }
    else {
      uint64_t v13 = specialized static String._uncheckedFromUTF8(_:isASCII:)(v7, v9, v10 & 1);
    }
    uint64_t v15 = (__objc2_class *)v13;
    uint64_t v16 = v14;
    uint64_t v17 = qword_1EC07DB60;
    if (qword_1EC07DB60 >= (unint64_t)qword_1EC07DB68 >> 1) {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((unint64_t)qword_1EC07DB68 > 1, qword_1EC07DB60 + 1, 1);
    }
    qword_1EC07DB60 = v17 + 1;
    uint64_t v18 = &_swiftEmptyArrayStorage + 2 * v17;
    v18[4] = v15;
    v18[5] = v16;
    ++v4;
    uint64_t v6 = v20;
  }
  while (a2 != v4);
  return &_swiftEmptyArrayStorage;
}

__objc2_class **_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSnySiG_SSs5NeverOTg5(void (*a1)(void *__return_ptr, uint64_t *), uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a4 - a3;
  if (__OFSUB__(a4, a3))
  {
    __break(1u);
    goto LABEL_17;
  }
  uint64_t v6 = v4;
  uint64_t v7 = &_swiftEmptyArrayStorage;
  if (!v5) {
    return v7;
  }
  uint64_t v9 = a3;
  Swift::Int v23 = &_swiftEmptyArrayStorage;
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5 & ~(v5 >> 63), 0);
  if (v5 < 0) {
LABEL_17:
  }
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
  uint64_t v7 = v23;
  if (a4 <= v9) {
    uint64_t v12 = v9;
  }
  else {
    uint64_t v12 = a4;
  }
  while (1)
  {
    if (v12 == v9) {
      _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Index out of range", 18, 2, "Swift/Range.swift", 17, 2, 0x131uLL, 0);
    }
    uint64_t v21 = v9;
    a1(v22, &v21);
    if (v6) {
      break;
    }
    uint64_t v6 = 0;
    uint64_t v19 = v12;
    uint64_t v20 = a2;
    uint64_t v13 = (__objc2_class *)v22[0];
    uint64_t v14 = (__objc2_class *)v22[1];
    Swift::Int v23 = v7;
    unint64_t v16 = (unint64_t)v7[2];
    unint64_t v15 = (unint64_t)v7[3];
    if (v16 >= v15 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v15 > 1, v16 + 1, 1);
      uint64_t v7 = v23;
    }
    v7[2] = (__objc2_class *)(v16 + 1);
    uint64_t v17 = &v7[2 * v16];
    v17[4] = v13;
    v17[5] = v14;
    ++v9;
    a2 = v20;
    uint64_t v12 = v19;
    if (a4 == v9) {
      return v7;
    }
  }
  swift_release((uint64_t)v7);
  return v7;
}

__objc2_class **_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFxq0_q_Ri_zRi0_zRi__Ri0__Ri_0_Ri0_0_r1_lyADs5NeverOqd__Isgnrzr_xAbGSlRzAGRsd_0_r_0_lIetMgnozo_Tpq5xq0_q_Ri_zRi0_zRi__Ri0__Ri_0_Ri0_0_r1_lyAdGs9CodingKey_pIsgnrzr_xSaysAH_pGAGSlRzsAH_pRsd__AGRsd_0_r_0_lIetMgnozo_Tp5(void (*a1)(long long *__return_ptr, char *), uint64_t a2, uint64_t a3, uint64_t a4)
{
  void (*v43)(long long *__return_ptr, char *);
  uint64_t v44;
  char *v45;
  unsigned char v46[32];
  long long v47[3];
  __objc2_class **v48;

  uint64_t v6 = v5;
  uint64_t v8 = a3;
  uint64_t v43 = a1;
  id v44 = a2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, *(int ***)(a4 + 8), a3, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
  uint64_t v41 = *((void *)AssociatedTypeWitness - 1);
  int64_t v42 = AssociatedTypeWitness;
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  int64_t v11 = (char *)&v32 - v10;
  uint64_t v12 = swift_getAssociatedTypeWitness(0, (int **)a4, v8, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  uint64_t v35 = *((void *)v12 - 1);
  uint64_t v13 = MEMORY[0x1F4188790](v12);
  uint64_t v34 = (char *)&v32 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v13);
  unint64_t v16 = (char *)&v32 - v15;
  uint64_t v17 = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 112))(v8, a4);
  uint64_t result = &_swiftEmptyArrayStorage;
  if (v17)
  {
    uint64_t v48 = &_swiftEmptyArrayStorage;
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v17 & ~(v17 >> 63), 0);
    uint64_t v19 = *(void (**)(uint64_t, uint64_t))(a4 + 64);
    uint64_t v45 = v16;
    v19(v8, a4);
    if (v17 < 0) {
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
    }
    unint64_t v33 = v12;
    uint64_t v20 = *(uint64_t (**)(unsigned char *, char *, uint64_t, uint64_t))(a4 + 80);
    uint64_t v21 = (void (**)(char *))(v41 + 16);
    uint64_t v39 = (void (**)(char *, const char *))(v41 + 8);
    int64_t v40 = v20;
    uint64_t v41 = a4 + 80;
    uint64_t v36 = a4 + 192;
    uint64_t v37 = v4;
    uint64_t v38 = v8;
    uint64_t v22 = v45;
    while (1)
    {
      Swift::Int v23 = (void (*)(unsigned char *, void))v40(v46, v22, v8, a4);
      unint64_t v24 = v42;
      (*v21)(v11);
      v23(v46, 0);
      v43(v47, v11);
      if (v6) {
        break;
      }
      uint64_t v6 = 0;
      (*v39)(v11, v24);
      unint64_t v25 = v48;
      if (!swift_isUniquelyReferenced_nonNull_native((uint64_t)v48))
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, (int64_t)&v25[2]->isa + 1, 1);
        unint64_t v25 = v48;
      }
      unint64_t v27 = (unint64_t)v25[2];
      unint64_t v26 = (unint64_t)v25[3];
      if (v27 >= v26 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((__objc2_class **)(v26 > 1), v27 + 1, 1);
        unint64_t v25 = v48;
      }
      v25[2] = (__objc2_class *)(v27 + 1);
      outlined init with take of MirrorPath(v47, (uint64_t)&v25[5 * v27 + 4]);
      uint64_t v22 = v45;
      uint64_t v28 = v37;
      uint64_t v8 = v38;
      (*(void (**)(char *, uint64_t, uint64_t))(a4 + 192))(v45, v38, a4);
      if (!--v17)
      {
        uint64_t v30 = (uint64_t)v34;
        uint64_t v29 = v35;
        char v31 = v33;
        (*(void (**)(char *, char *, const char *))(v35 + 32))(v34, v22, v33);
        _expectEnd<A>(of:is:)(v28, v30, v8, a4);
        (*(void (**)(uint64_t, const char *))(v29 + 8))(v30, v31);
        return v48;
      }
    }
    (*v39)(v11, v24);
    (*(void (**)(char *, const char *))(v35 + 8))(v45, v33);
    return (__objc2_class **)swift_release((uint64_t)v48);
  }
  return result;
}

__objc2_class **_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFxq0_q_Ri_zRi0_zRi__Ri0__Ri_0_Ri0_0_r1_lyADsAE_pqd__Isgnrzr_xABsAE_pSlRzsAE_pRsd_0_r_0_lIetMgnozo_Tp5Tm(void (*a1)(char *, void *), uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v45 = a1;
  uint64_t v46 = a2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, *(int ***)(a5 + 8), a3, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
  uint64_t v44 = *((void *)AssociatedTypeWitness - 1);
  uint64_t v10 = MEMORY[0x1F4188790](AssociatedTypeWitness);
  int64_t v40 = (char *)&v36 - v11;
  uint64_t v12 = a4;
  MEMORY[0x1F4188790](v10);
  uint64_t v39 = (char *)&v36 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = swift_getAssociatedTypeWitness(0, (int **)a5, a3, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  uint64_t v38 = *((void *)v14 - 1);
  uint64_t v15 = MEMORY[0x1F4188790](v14);
  uint64_t v37 = (char *)&v36 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v15);
  uint64_t v18 = (char *)&v36 - v17;
  uint64_t v19 = *(uint64_t (**)(uint64_t, uint64_t))(a5 + 112);
  uint64_t v49 = a5;
  uint64_t v20 = v19(a3, a5);
  if (v20)
  {
    Swift::Int v23 = v20;
    int64_t v51 = &_swiftEmptyArrayStorage;
    int64_t v42 = type metadata accessor for ContiguousArray(0, (uint64_t)v12, v21, v22);
    ContiguousArray.reserveCapacity(_:)(v23);
    (*(void (**)(uint64_t))(v49 + 64))(a3);
    if (v23 < 0) {
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
    }
    uint64_t v36 = v14;
    unint64_t v24 = *(uint64_t (**)(void *, char *, uint64_t, uint64_t))(v49 + 80);
    uint64_t v47 = a3;
    unint64_t v25 = (void (**)(char *))(v44 + 16);
    uint64_t v26 = v5;
    unint64_t v27 = (void (**)(char *, const char *))(v44 + 8);
    uint64_t v43 = v24;
    uint64_t v44 = v49 + 80;
    uint64_t v41 = v49 + 192;
    uint64_t v29 = (uint64_t)v39;
    uint64_t v28 = v40;
    while (1)
    {
      uint64_t v30 = (void (*)(void *, void))v43(v50, v18, v47, v49);
      (*v25)(v28);
      v30(v50, 0);
      uint64_t v31 = v48;
      v45(v28, v50);
      if (v31) {
        break;
      }
      uint64_t v48 = 0;
      (*v27)(v28, AssociatedTypeWitness);
      ContiguousArray.append(_:)(v29, (uint64_t)v42);
      (*(void (**)(char *, uint64_t))(v49 + 192))(v18, v47);
      if (!--v23)
      {
        uint64_t v32 = (uint64_t)v37;
        uint64_t v33 = v38;
        uint64_t v34 = v36;
        (*(void (**)(char *, char *, const char *))(v38 + 32))(v37, v18, v36);
        _expectEnd<A>(of:is:)(v26, v32, v47, v49);
        (*(void (**)(uint64_t, const char *))(v33 + 8))(v32, v34);
        return v51;
      }
    }
    (*v27)(v28, AssociatedTypeWitness);
    (*(void (**)(char *, const char *))(v38 + 8))(v18, v36);
    return (__objc2_class **)swift_release((uint64_t)v51);
  }
  else
  {
    _swift_isClassOrObjCExistentialType((uint64_t)v12, v12);
    return &_swiftEmptyArrayStorage;
  }
}

__objc2_class **_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFxq0_q_Ri_zRi0_zRi__Ri0__Ri_0_Ri0_0_r1_lyADs5NeverOqd__Isgnrzr_xAbGSlRzAGRsd_0_r_0_lIetMgnozo_Tp5(void (*a1)(char *), uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v45 = a1;
  uint64_t v46 = a2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, *(int ***)(a5 + 8), a3, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
  uint64_t v44 = *((void *)AssociatedTypeWitness - 1);
  uint64_t v10 = MEMORY[0x1F4188790](AssociatedTypeWitness);
  int64_t v40 = (char *)&v36 - v11;
  uint64_t v12 = a4;
  MEMORY[0x1F4188790](v10);
  uint64_t v39 = (char *)&v36 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = swift_getAssociatedTypeWitness(0, (int **)a5, a3, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  uint64_t v38 = *((void *)v14 - 1);
  uint64_t v15 = MEMORY[0x1F4188790](v14);
  uint64_t v37 = (char *)&v36 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v15);
  uint64_t v18 = (char *)&v36 - v17;
  uint64_t v19 = *(uint64_t (**)(uint64_t, uint64_t))(a5 + 112);
  uint64_t v49 = a5;
  uint64_t v20 = v19(a3, a5);
  if (v20)
  {
    Swift::Int v23 = v20;
    int64_t v51 = &_swiftEmptyArrayStorage;
    int64_t v42 = type metadata accessor for ContiguousArray(0, (uint64_t)v12, v21, v22);
    ContiguousArray.reserveCapacity(_:)(v23);
    (*(void (**)(uint64_t))(v49 + 64))(a3);
    if (v23 < 0) {
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
    }
    uint64_t v36 = v14;
    unint64_t v24 = *(uint64_t (**)(unsigned char *, char *, uint64_t, uint64_t))(v49 + 80);
    uint64_t v47 = a3;
    unint64_t v25 = (void (**)(char *))(v44 + 16);
    uint64_t v26 = v5;
    unint64_t v27 = (void (**)(char *, const char *))(v44 + 8);
    uint64_t v43 = v24;
    uint64_t v44 = v49 + 80;
    uint64_t v41 = v49 + 192;
    uint64_t v29 = (uint64_t)v39;
    uint64_t v28 = v40;
    while (1)
    {
      uint64_t v30 = (void (*)(unsigned char *, void))v43(v50, v18, v47, v49);
      (*v25)(v28);
      v30(v50, 0);
      uint64_t v31 = v48;
      v45(v28);
      if (v31) {
        break;
      }
      uint64_t v48 = 0;
      (*v27)(v28, AssociatedTypeWitness);
      ContiguousArray.append(_:)(v29, (uint64_t)v42);
      (*(void (**)(char *, uint64_t))(v49 + 192))(v18, v47);
      if (!--v23)
      {
        uint64_t v32 = (uint64_t)v37;
        uint64_t v33 = v38;
        uint64_t v34 = v36;
        (*(void (**)(char *, char *, const char *))(v38 + 32))(v37, v18, v36);
        _expectEnd<A>(of:is:)(v26, v32, v47, v49);
        (*(void (**)(uint64_t, const char *))(v33 + 8))(v32, v34);
        return v51;
      }
    }
    (*v27)(v28, AssociatedTypeWitness);
    (*(void (**)(char *, const char *))(v38 + 8))(v18, v36);
    return (__objc2_class **)swift_release((uint64_t)v51);
  }
  else
  {
    _swift_isClassOrObjCExistentialType((uint64_t)v12, v12);
    return &_swiftEmptyArrayStorage;
  }
}

BOOL _swift_arrayDownCastConditionalIndirect(unint64_t *a1, __objc2_class ***a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v7 = *a1;
  unint64_t v8 = swift_bridgeObjectRetain(*a1);
  uint64_t v10 = _arrayConditionalCast<A, B>(_:)(v8, a3, a4, v9);
  swift_bridgeObjectRelease(v7);
  if (v10) {
    *a2 = v10;
  }
  return v10 != 0;
}

__objc2_class **_arrayConditionalCast<A, B>(_:)(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = type metadata accessor for Optional(0, a3, a3, a4);
  uint64_t v50 = (uint64_t)*(v7 - 1);
  int64_t v51 = v7;
  uint64_t v8 = MEMORY[0x1F4188790](v7);
  unint64_t v61 = (char *)&v49 - v9;
  uint64_t v10 = *(void *)(a3 - 8);
  uint64_t v11 = MEMORY[0x1F4188790](v8);
  unint64_t v59 = (char *)&v49 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = MEMORY[0x1F4188790](v11);
  int64_t v58 = (char *)&v49 - v14;
  uint64_t v62 = *(a2 - 1);
  uint64_t v15 = MEMORY[0x1F4188790](v13);
  char v60 = (char *)&v49 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = MEMORY[0x1F4188790](v15);
  uint64_t v19 = (char *)&v49 - v18;
  uint64_t v49 = v20;
  MEMORY[0x1F4188790](v17);
  uint64_t v22 = (char *)&v49 - v21;
  unint64_t v66 = &_swiftEmptyArrayStorage;
  Swift::Int v23 = Array._getCount()();
  unint64_t v57 = type metadata accessor for ContiguousArray(0, a3, v24, v25);
  ContiguousArray.reserveCapacity(_:)(v23);
  Swift::Int v56 = Array._getCount()();
  if (!v56) {
    return v66;
  }
  Swift::Int v26 = 0;
  unint64_t v54 = (void (**)(char *, uint64_t *, uint64_t *))(v62 + 16);
  unint64_t v55 = a1 & 0xC000000000000001;
  unint64_t v27 = (void **)(v62 + 32);
  uint64_t v28 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56);
  Swift::Int v52 = (void (**)(char *, char *, uint64_t))(v10 + 32);
  uint64_t v53 = a1;
  while (1)
  {
    BOOL v29 = v55 == 0;
    char v30 = v29 | ~_swift_isClassOrObjCExistentialType((uint64_t)a2, a2);
    Array._checkSubscript(_:wasNativeTypeChecked:)(v26, v30 & 1);
    if (v30)
    {
      (*(void (**)(char *, unint64_t, uint64_t *))(v62 + 16))(v19, a1+ ((*(unsigned __int8 *)(v62 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v62 + 80))+ *(void *)(v62 + 72) * v26, a2);
    }
    else
    {
      uint64_t v47 = _ArrayBuffer._getElementSlowPath(_:)(v26, a1, a2);
      uint64_t v31 = (void *)v47;
      if (v49 != 8) {
        goto LABEL_15;
      }
      uint64_t v65 = v47;
      (*v54)(v19, &v65, a2);
      swift_unknownObjectRelease(v31);
    }
    uint64_t v31 = *v27;
    ((void (*)(char *, char *, uint64_t *))*v27)(v22, v19, a2);
    if (__OFADD__(v26, 1))
    {
      __break(1u);
LABEL_15:
      swift_unknownObjectRelease(v31);
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't unsafeBitCast between types of different sizes", 52, 2, "Swift/Builtin.swift", 19, 2, 0x5FuLL, 0);
    }
    uint64_t v32 = v60;
    ((void (*)(char *, char *, uint64_t *))v31)(v60, v22, a2);
    uint64_t v33 = v61;
    char v34 = swift_dynamicCast(v61, v32, a2, a3, 6);
    uint64_t v35 = *v28;
    if ((v34 & 1) == 0) {
      break;
    }
    v35(v33, 0, 1, a3);
    uint64_t v36 = v33;
    Swift::Int v63 = v26 + 1;
    Swift::Int v64 = v26;
    uint64_t v37 = *v52;
    uint64_t v38 = a2;
    uint64_t v39 = v27;
    int64_t v40 = v28;
    uint64_t v41 = v22;
    int64_t v42 = v19;
    uint64_t v43 = v58;
    (*v52)(v58, v36, a3);
    uint64_t v44 = (uint64_t)v59;
    uint64_t v45 = v43;
    uint64_t v19 = v42;
    uint64_t v22 = v41;
    uint64_t v28 = v40;
    unint64_t v27 = v39;
    a2 = v38;
    Swift::Int v46 = v64;
    v37(v59, v45, a3);
    ContiguousArray.append(_:)(v44, (uint64_t)v57);
    Swift::Int v26 = v46 + 1;
    a1 = v53;
    if (v63 == v56) {
      return v66;
    }
  }
  v35(v33, 1, 1, a3);
  swift_release((uint64_t)v66);
  (*(void (**)(char *, Class *))(v50 + 8))(v33, v51);
  return 0;
}

__objc2_class **specialized ContiguousArray.reserveCapacity(_:)(int64_t a1)
{
  uint64_t v3 = *v1;
  uint64_t result = (__objc2_class **)swift_isUniquelyReferenced_nonNull_native(*v1);
  *int64_t v1 = v3;
  if (!result || a1 > *(void *)(v3 + 24) >> 1)
  {
    if (*(void *)(v3 + 16) <= a1) {
      int64_t v5 = a1;
    }
    else {
      int64_t v5 = *(void *)(v3 + 16);
    }
    return specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(result, v5, 0);
  }
  return result;
}

Swift::Void __swiftcall ContiguousArray.reserveCapacity(_:)(Swift::Int a1)
{
  uint64_t v3 = *v1;
  BOOL isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v1);
  *int64_t v1 = v3;
  if (!isUniquelyReferenced_nonNull_native || a1 > *(void *)(v3 + 24) >> 1)
  {
    if (*(void *)(v3 + 16) <= a1) {
      Swift::Int v5 = a1;
    }
    else {
      Swift::Int v5 = *(void *)(v3 + 16);
    }
    ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v5, 0);
  }
}

uint64_t specialized ContiguousArray.append(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *v2;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native(*v2);
  *uint64_t v2 = v5;
  if ((result & 1) == 0)
  {
    uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v5 + 16) + 1, 1);
    uint64_t v5 = *v2;
  }
  unint64_t v8 = *(void *)(v5 + 16);
  unint64_t v7 = *(void *)(v5 + 24);
  if (v8 >= v7 >> 1)
  {
    uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v7 > 1, v8 + 1, 1);
    uint64_t v5 = *v2;
  }
  *(void *)(v5 + 16) = v8 + 1;
  uint64_t v9 = v5 + 16 * v8;
  *(void *)(v9 + 32) = a1;
  *(void *)(v9 + 40) = a2;
  *uint64_t v2 = v5;
  return result;
}

_OWORD *specialized ContiguousArray.append(_:)(_OWORD *a1)
{
  uint64_t v3 = *v1;
  BOOL isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v1);
  *int64_t v1 = v3;
  if (!isUniquelyReferenced_nonNull_native)
  {
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v3 + 16) + 1, 1);
    uint64_t v3 = *v1;
  }
  unint64_t v6 = *(void *)(v3 + 16);
  unint64_t v5 = *(void *)(v3 + 24);
  if (v6 >= v5 >> 1)
  {
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((__objc2_class **)(v5 > 1), v6 + 1, 1);
    uint64_t v3 = *v1;
  }
  *(void *)(v3 + 16) = v6 + 1;
  uint64_t result = outlined init with take of Any(a1, (_OWORD *)(v3 + 32 * v6 + 32));
  *int64_t v1 = v3;
  return result;
}

uint64_t ContiguousArray.append(_:)(uint64_t a1, uint64_t a2)
{
  ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
  uint64_t v5 = *v2;
  unint64_t v7 = *(void *)(*v2 + 16);
  unint64_t v6 = *(void *)(*v2 + 24);
  if (v7 >= v6 >> 1)
  {
    ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v6 > 1, v7 + 1, 1);
    uint64_t v5 = *v2;
  }
  *(void *)(v5 + 16) = v7 + 1;
  uint64_t v8 = *(void *)(*(void *)(a2 + 16) - 8);
  uint64_t v9 = *(uint64_t (**)(unint64_t, uint64_t))(v8 + 32);
  unint64_t v10 = v5
      + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))
      + *(void *)(v8 + 72) * v7;

  return v9(v10, a1);
}

uint64_t Array.init<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 56))(a3, a4);
}

uint64_t (*Array._buffer.modify())(void, void)
{
  return EnumeratedSequence._base.modify;
}

Swift::Bool __swiftcall Array._hoistableIsNativeTypeChecked()()
{
  return ((v0 & 0xC000000000000001) == 0) | !_swift_isClassOrObjCExistentialType((uint64_t)v1, v1);
}

id _ArrayBuffer.endIndex.getter(uint64_t a1, uint64_t *a2)
{
  if (_swift_isClassOrObjCExistentialType((uint64_t)a2, a2) && (a1 < 0 || (a1 & 0x4000000000000000) != 0))
  {
    if (a1 < 0) {
      unint64_t v7 = (void *)a1;
    }
    else {
      unint64_t v7 = (void *)(a1 & 0xFFFFFFFFFFFFFF8);
    }
    return [v7 count];
  }
  else
  {
    BOOL isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType((uint64_t)a2, a2);
    uint64_t v5 = a1 & 0xFFFFFFFFFFFFFF8;
    if (!isClassOrObjCExistentialType) {
      uint64_t v5 = a1;
    }
    return *(id *)(v5 + 16);
  }
}

Swift::Int __swiftcall Array._getCapacity()()
{
  uint64_t v2 = v1;
  uint64_t v3 = v0;
  if (_swift_isClassOrObjCExistentialType((uint64_t)v1, v1) && (v3 < 0 || (v3 & 0x4000000000000000) != 0))
  {
    if (v3 >= 0) {
      v3 &= 0xFFFFFFFFFFFFFF8uLL;
    }
    id v7 = [swift_unknownObjectRetain((id)v3) count];
    Swift::Int v8 = specialized RandomAccessCollection<>.distance(from:to:)(0, (uint64_t)v7, (id)v3);
    swift_unknownObjectRelease((id)v3);
    return v8;
  }
  else
  {
    BOOL isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType((uint64_t)v2, v2);
    uint64_t v5 = v3 & 0xFFFFFFFFFFFFFF8;
    if (!isClassOrObjCExistentialType) {
      uint64_t v5 = v3;
    }
    return *(void *)(v5 + 24) >> 1;
  }
}

Swift::Void __swiftcall Array._makeMutableAndUnique()()
{
  uint64_t v2 = *(uint64_t **)(v0 + 16);
  BOOL isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType((uint64_t)v2, v2);
  uint64_t v4 = *v1;
  if (isClassOrObjCExistentialType)
  {
    char isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(*v1);
    *int64_t v1 = v4;
    if ((isUniquelyReferenced_nonNull_bridgeObject & 1) == 0
      || _swift_isClassOrObjCExistentialType((uint64_t)v2, v2) && (v4 < 0 || (v4 & 0x4000000000000000) != 0))
    {
      goto LABEL_6;
    }
  }
  else
  {
    BOOL isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v1);
    *int64_t v1 = v4;
    if (!isUniquelyReferenced_nonNull_native) {
LABEL_6:
    }
      *int64_t v1 = _ArrayBuffer._consumeAndCreateNew()(v4, v2);
  }
}

Swift::Void __swiftcall Array._checkSubscript_native(_:)(Swift::Int a1)
{
}

unint64_t specialized Array._checkSubscript(_:wasNativeTypeChecked:)(unint64_t result, char a2, uint64_t a3)
{
  if ((a2 & 1) != 0 && ((result & 0x8000000000000000) != 0 || *(void *)(a3 + 16) <= result)) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Index out of range", 18, 2, "Swift/ContiguousArrayBuffer.swift", 33, 2, 0x2A3uLL, 0);
  }
  return result;
}

{
  if ((a2 & 1) != 0
    && ((result & 0x8000000000000000) != 0 || *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10) <= result))
  {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Index out of range", 18, 2, "Swift/ContiguousArrayBuffer.swift", 33, 2, 0x2A3uLL, 0);
  }
  return result;
}

void __swiftcall Array._checkSubscript(_:wasNativeTypeChecked:)(Swift::Int _, Swift::Bool wasNativeTypeChecked)
{
  if (wasNativeTypeChecked)
  {
    uint64_t v4 = v2;
    BOOL isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType((uint64_t)v3, v3);
    if (_ < 0) {
      goto LABEL_7;
    }
    uint64_t v7 = v4 & 0xFFFFFFFFFFFFFF8;
    if (!isClassOrObjCExistentialType) {
      uint64_t v7 = v4;
    }
    if (*(void *)(v7 + 16) <= (unint64_t)_) {
LABEL_7:
    }
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Index out of range", 18, 2, "Swift/ContiguousArrayBuffer.swift", 33, 2, 0x2A3uLL, 0);
  }
}

unint64_t specialized Array._checkSubscript_mutating(_:)(unint64_t result, uint64_t a2)
{
  if ((result & 0x8000000000000000) != 0 || *(void *)(a2 + 16) <= result) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Index out of range", 18, 2, "Swift/ContiguousArrayBuffer.swift", 33, 2, 0x2B0uLL, 0);
  }
  return result;
}

{
  if ((result & 0x8000000000000000) != 0 || *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10) <= result) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Index out of range", 18, 2, "Swift/ContiguousArrayBuffer.swift", 33, 2, 0x2B0uLL, 0);
  }
  return result;
}

Swift::Void __swiftcall Array._checkSubscript_mutating(_:)(Swift::Int a1)
{
  uint64_t v3 = v1;
  BOOL isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType((uint64_t)v2, v2);
  if (a1 < 0) {
    goto LABEL_5;
  }
  uint64_t v6 = v3 & 0xFFFFFFFFFFFFFF8;
  if (!isClassOrObjCExistentialType) {
    uint64_t v6 = v3;
  }
  if (*(void *)(v6 + 16) <= (unint64_t)a1) {
LABEL_5:
  }
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Index out of range", 18, 2, "Swift/ContiguousArrayBuffer.swift", 33, 2, 0x2B0uLL, 0);
}

id specialized Array._checkIndex(_:)(uint64_t a1, uint64_t a2)
{
  if (!((unint64_t)a2 >> 62))
  {
    id result = *(id *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if ((uint64_t)result >= a1) {
      goto LABEL_3;
    }
LABEL_9:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Array index is out of range", 27, 2, "Swift/Array.swift", 17, 2, 0x1A3uLL, 0);
  }
  if (a2 < 0) {
    uint64_t v4 = (void *)a2;
  }
  else {
    uint64_t v4 = (void *)(a2 & 0xFFFFFFFFFFFFFF8);
  }
  id result = [v4 count];
  if ((uint64_t)result < a1) {
    goto LABEL_9;
  }
LABEL_3:
  if (a1 < 0) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Negative Array index is out of range", 36, 2, "Swift/Array.swift", 17, 2, 0x1A4uLL, 0);
  }
  return result;
}

Swift::Void __swiftcall Array._checkIndex(_:)(Swift::Int a1)
{
  if (Array._getCount()() < a1) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Array index is out of range", 27, 2, "Swift/Array.swift", 17, 2, 0x1A3uLL, 0);
  }
  if (a1 < 0) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Negative Array index is out of range", 36, 2, "Swift/Array.swift", 17, 2, 0x1A4uLL, 0);
  }
}

BOOL static Int.<= infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return a2 >= a1;
}

uint64_t Array.startIndex.getter()
{
  return 0;
}

void Array._getElement(_:wasNativeTypeChecked:matchingSubscriptCheck:)(unint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X8>)
{
  if (a2)
  {
    uint64_t v7 = *(a4 - 1);
    Swift::Int v8 = *(void (**)(uint64_t, unint64_t, uint64_t *))(v7 + 16);
    unint64_t v9 = a3
       + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))
       + *(void *)(v7 + 72) * a1;
    v8(a5, v9, a4);
  }
  else
  {
    id v10 = _ArrayBuffer._getElementSlowPath(_:)(a1, a3, a4);
    uint64_t v11 = v10;
    uint64_t v12 = *(a4 - 1);
    if (*(void *)(v12 + 64) != 8)
    {
      swift_unknownObjectRelease(v10);
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't unsafeBitCast between types of different sizes", 52, 2, "Swift/Builtin.swift", 19, 2, 0x5FuLL, 0);
    }
    id v13 = v10;
    (*(void (**)(uint64_t, id *, uint64_t *))(v12 + 16))(a5, &v13, a4);
    swift_unknownObjectRelease(v11);
  }
}

unint64_t Array._getElementAddress(_:)(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  BOOL isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType((uint64_t)a3, a3);
  uint64_t v7 = a2 & 0xFFFFFFFFFFFFFF8;
  if (!isClassOrObjCExistentialType) {
    uint64_t v7 = a2;
  }
  return v7
       + ((*(unsigned __int8 *)(*(a3 - 1) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(a3 - 1) + 80))
       + *(void *)(*(a3 - 1) + 72) * a1;
}

void *Array._owner.getter(int64_t a1, uint64_t *a2)
{
  if (_swift_isClassOrObjCExistentialType((uint64_t)a2, a2) && (a1 < 0 || (a1 & 0x4000000000000000) != 0))
  {
    if (a1 < 0) {
      uint64_t v4 = (void *)a1;
    }
    else {
      uint64_t v4 = (void *)(a1 & 0xFFFFFFFFFFFFFF8);
    }
    swift_unknownObjectRetain(v4);
  }
  else
  {
    if (_swift_isClassOrObjCExistentialType((uint64_t)a2, a2)) {
      uint64_t v4 = (void *)(a1 & 0xFFFFFFFFFFFFFF8);
    }
    else {
      uint64_t v4 = (void *)a1;
    }
    swift_bridgeObjectRetain(a1);
  }
  return v4;
}

unint64_t Array._baseAddressIfContiguous.getter(uint64_t a1, uint64_t *a2)
{
  if (!_swift_isClassOrObjCExistentialType((uint64_t)a2, a2)
    || (unint64_t result = 0, (a1 & 0x8000000000000000) == 0) && (a1 & 0x4000000000000000) == 0)
  {
    BOOL isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType((uint64_t)a2, a2);
    uint64_t v6 = a1 & 0xFFFFFFFFFFFFFF8;
    if (!isClassOrObjCExistentialType) {
      uint64_t v6 = a1;
    }
    return v6
         + ((*(unsigned __int8 *)(*(a2 - 1) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(a2 - 1) + 80));
  }
  return result;
}

Swift::Int protocol witness for _ArrayProtocol.capacity.getter in conformance [A]()
{
  return Array.capacity.getter();
}

id protocol witness for _ArrayProtocol._owner.getter in conformance [A](uint64_t a1)
{
  unint64_t v2 = *v1;
  uint64_t v3 = *(uint64_t **)(a1 + 16);
  if (_swift_isClassOrObjCExistentialType((uint64_t)v3, v3)
    && ((v2 & 0x8000000000000000) != 0 || (v2 & 0x4000000000000000) != 0))
  {
    return _ArrayBuffer._nonNative.getter(v2);
  }
  if (_swift_isClassOrObjCExistentialType((uint64_t)v3, v3)) {
    uint64_t v4 = v2 & 0xFFFFFFFFFFFFFF8;
  }
  else {
    uint64_t v4 = v2;
  }
  swift_bridgeObjectRetain(v2);
  return (id)v4;
}

unint64_t protocol witness for _ArrayProtocol._baseAddressIfContiguous.getter in conformance [A](uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(uint64_t **)(a1 + 16);
  if (!_swift_isClassOrObjCExistentialType((uint64_t)v3, v3)
    || (unint64_t result = 0, (v2 & 0x8000000000000000) == 0) && (v2 & 0x4000000000000000) == 0)
  {
    BOOL isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType((uint64_t)v3, v3);
    uint64_t v6 = v2 & 0xFFFFFFFFFFFFFF8;
    if (!isClassOrObjCExistentialType) {
      uint64_t v6 = v2;
    }
    return v6
         + ((*(unsigned __int8 *)(*(v3 - 1) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(v3 - 1) + 80));
  }
  return result;
}

uint64_t protocol witness for _ArrayProtocol.init(_:) in conformance [A]@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v7 = (unint64_t *)type metadata accessor for _ArrayBuffer(0, *(void *)(a2 + 16), a3, a4);
  uint64_t WitnessTable = swift_getWitnessTable(protocol conformance descriptor for _ArrayBuffer<A>, v7, v8);
  uint64_t result = Array.init<A>(_:)(a1, v10, (uint64_t)v7, WitnessTable);
  *a5 = result;
  return result;
}

unint64_t protocol witness for _ArrayProtocol._buffer.getter in conformance [A]@<X0>(unint64_t *a1@<X8>)
{
  unint64_t v2 = *v1;
  *a1 = *v1;
  return swift_bridgeObjectRetain(v2);
}

Swift::Int __swiftcall Array.index(after:)(Swift::Int after)
{
  BOOL v1 = __OFADD__(after, 1);
  Swift::Int result = after + 1;
  if (v1) {
    __break(1u);
  }
  return result;
}

Swift::Int __swiftcall Array.index(before:)(Swift::Int before)
{
  BOOL v1 = __OFSUB__(before, 1);
  Swift::Int result = before - 1;
  if (v1) {
    __break(1u);
  }
  return result;
}

void *static Int.-= infix(_:_:)(void *result, uint64_t a2)
{
  if (__OFSUB__(*result, a2)) {
    __break(1u);
  }
  else {
    *result -= a2;
  }
  return result;
}

Swift::Int_optional __swiftcall Array.index(_:offsetBy:limitedBy:)(Swift::Int _, Swift::Int offsetBy, Swift::Int limitedBy)
{
  Swift::Int v3 = specialized Array.index(_:offsetBy:limitedBy:)(_, offsetBy, limitedBy);
  Swift::Bool v5 = v4 & 1;
  result.value = v3;
  result.is_nil = v5;
  return result;
}

BOOL static Int.< infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return a1 < a2;
}

void Array.subscript.getter(unint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  char isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType((uint64_t)a3, a3);
  char v9 = ((a2 & 0xC000000000000001) == 0) | ~isClassOrObjCExistentialType;
  Array._checkSubscript(_:wasNativeTypeChecked:)(a1, (a2 & 0xC000000000000001) == 0 || (isClassOrObjCExistentialType & 1) == 0);
  if (v9)
  {
    uint64_t v10 = *(a3 - 1);
    uint64_t v11 = *(void (**)(uint64_t, unint64_t, uint64_t *))(v10 + 16);
    unint64_t v12 = a2
        + ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80))
        + *(void *)(v10 + 72) * a1;
    v11(a4, v12, a3);
  }
  else
  {
    id v13 = _ArrayBuffer._getElementSlowPath(_:)(a1, a2, a3);
    uint64_t v14 = v13;
    uint64_t v15 = *(a3 - 1);
    if (*(void *)(v15 + 64) != 8)
    {
      swift_unknownObjectRelease(v13);
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't unsafeBitCast between types of different sizes", 52, 2, "Swift/Builtin.swift", 19, 2, 0x5FuLL, 0);
    }
    id v16 = v13;
    (*(void (**)(uint64_t, id *, uint64_t *))(v15 + 16))(a4, &v16, a3);
    swift_unknownObjectRelease(v14);
  }
}

void key path getter for Array.subscript(_:) : <A>[A]A(uint64_t *a1@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
}

uint64_t key path setter for Array.subscript(_:) : <A>[A]A(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  return key path setter for Array.subscript(_:) : <A>[A]A(a1, a2, a3, a4, (uint64_t (*)(void, uint64_t))type metadata accessor for Array, (uint64_t (*)(unsigned char *, uint64_t, uint64_t))Array.subscript.modify);
}

{
  return key path setter for Array.subscript(_:) : <A>[A]A(a1, a2, a3, a4, (uint64_t (*)(void, void))type metadata accessor for Array, (uint64_t (*)(id, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))Array.subscript.setter);
}

uint64_t (*Array.subscript.modify(uint64_t a1, Swift::Int a2, uint64_t a3))()
{
  Array._makeMutableAndUnique()();
  Swift::Bool v5 = *(uint64_t **)(a3 + 16);
  Array._checkSubscript_mutating(_:)(a2);
  _swift_isClassOrObjCExistentialType((uint64_t)v5, v5);
  return EnumeratedSequence._base.modify;
}

uint64_t Array.subscript.setter(uint64_t a1, Swift::Int a2, uint64_t a3)
{
  Array._makeMutableAndUnique()();
  uint64_t v7 = *v3;
  uint64_t v8 = *(uint64_t **)(a3 + 16);
  Array._checkSubscript_mutating(_:)(a2);
  BOOL isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType((uint64_t)v8, v8);
  uint64_t v10 = v7 & 0xFFFFFFFFFFFFFF8;
  if (!isClassOrObjCExistentialType) {
    uint64_t v10 = v7;
  }
  uint64_t v11 = *(v8 - 1);
  unint64_t v12 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t *))(v11 + 40);
  unint64_t v13 = v10
      + ((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80))
      + *(void *)(v11 + 72) * a2;

  return v12(v13, a1, v8);
}

uint64_t Array.subscript.getter(Swift::Int a1, Swift::Int a2, int64_t a3, uint64_t *a4)
{
  Array._checkIndex(_:)(a1);
  Array._checkIndex(_:)(a2);

  return _ArrayBuffer.subscript.getter(a1, a2, a3, a4);
}

uint64_t key path getter for Array.subscript(_:) : <A>[A]A@<X0>(int64_t *a1@<X0>, Swift::Int *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t result = Array.subscript.getter(*a2, a2[1], *a1, *(uint64_t **)((char *)a2 + a3 - 8));
  *a4 = result;
  a4[1] = v6;
  a4[2] = v7;
  a4[3] = v8;
  return result;
}

void Array.subscript.setter(void *a1, uint64_t a2, uint64_t a3, unint64_t a4, Swift::Int a5, Swift::Int a6, uint64_t a7)
{
  int64_t v14 = *v7;
  uint64_t v15 = *(uint64_t **)(a7 + 16);
  Array._checkIndex(_:)(a5);
  Array._checkIndex(_:)(a6);
  id v16 = (void *)_ArrayBuffer.subscript.getter(a5, a6, v14, v15);
  uint64_t v18 = v17;
  uint64_t v20 = v19;
  swift_unknownObjectRelease(v16);
  if (v18 + *(void *)(*(v15 - 1) + 72) * v20 != a2 + *(void *)(*(v15 - 1) + 72) * a3) {
    goto LABEL_2;
  }
  if ((uint64_t)(a4 >> 1) < a3) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
  }
  if (a5 == a3 && a4 >> 1 == a6)
  {
    swift_unknownObjectRelease(a1);
  }
  else
  {
LABEL_2:
    v26[0] = a1;
    v26[1] = a2;
    v26[2] = a3;
    v26[3] = a4;
    Swift::Int v23 = (unint64_t *)type metadata accessor for ArraySlice(0, (uint64_t)v15, v21, v22);
    swift_getWitnessTable(protocol conformance descriptor for ArraySlice<A>, v23, v24);
    Array.replaceSubrange<A>(_:with:)(a5, a6, (uint64_t)v26, a7);
  }
}

BOOL static Equatable.!= infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return ((*(uint64_t (**)(void))(a4 + 8))() & 1) == 0;
}

uint64_t ArraySlice.startIndex.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a3;
}

unint64_t ArraySlice.endIndex.getter(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  return a4 >> 1;
}

void specialized Array.replaceSubrange<A>(_:with:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 < 0) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Array replace: subrange start is negative", 41, 2, "Swift/Array.swift", 17, 2, 0x6D4uLL, 0);
  }
  uint64_t v9 = a1;
  uint64_t v10 = *v3;
  if (!((unint64_t)*v3 >> 62))
  {
    uint64_t v11 = v10 & 0xFFFFFFFFFFFFFF8;
    if (*(void *)(v11 + 16) >= a2) {
      goto LABEL_4;
    }
LABEL_31:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Array replace: subrange extends past the end", 44, 2, "Swift/Array.swift", 17, 2, 0x6D7uLL, 0);
  }
  if (v10 < 0) {
    Swift::Int v23 = (void *)*v3;
  }
  else {
    Swift::Int v23 = (void *)(v10 & 0xFFFFFFFFFFFFFF8);
  }
  if ((uint64_t)objc_msgSend(v23, sel_count) < a2) {
    goto LABEL_31;
  }
LABEL_4:
  uint64_t v12 = a2 - v9;
  if (__OFSUB__(a2, v9))
  {
    __break(1u);
    goto LABEL_33;
  }
  uint64_t v11 = 1;
  uint64_t v6 = 1 - v12;
  if (__OFSUB__(1, v12))
  {
LABEL_33:
    __break(1u);
LABEL_34:
    if (v4 < 0) {
      uint64_t v24 = (void *)v4;
    }
    else {
      uint64_t v24 = (void *)v11;
    }
    uint64_t v25 = (char *)[v24 sel_count];
    int64_t v14 = (char **)&v25[v6];
    if (!__OFADD__(v25, v6)) {
      goto LABEL_8;
    }
LABEL_39:
    __break(1u);
LABEL_40:
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeMutablePointer.deinitialize with negative count", 53, 2, "Swift/UnsafePointer.swift", 25, 2, 0x493uLL, 0);
  }
  uint64_t v4 = *v3;
  uint64_t v11 = *v3 & 0xFFFFFFFFFFFFFF8;
  unint64_t v5 = (unint64_t)*v3 >> 62;
  if (v5) {
    goto LABEL_34;
  }
  uint64_t v13 = *(void *)((*v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  int64_t v14 = (char **)(v13 + v6);
  if (__OFADD__(v13, v6)) {
    goto LABEL_39;
  }
LABEL_8:
  uint64_t v30 = a3;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(v4);
  *Swift::Int v3 = v4;
  if (v5) {
    LODWORD(v16) = 0;
  }
  else {
    LODWORD(v16) = isUniquelyReferenced_nonNull_bridgeObject;
  }
  if (v16 == 1)
  {
    uint64_t v17 = v4 & 0xFFFFFFFFFFFFFF8;
    if ((uint64_t)v14 <= *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      goto LABEL_19;
    }
  }
  uint64_t v18 = v4 & 0xFFFFFFFFFFFFFF8;
  if (v5) {
    goto LABEL_50;
  }
  for (uint64_t i = *(char ***)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10); ; uint64_t i = (char **)[v29 count])
  {
    if ((uint64_t)i <= (uint64_t)v14) {
      uint64_t v20 = (uint64_t)v14;
    }
    else {
      uint64_t v20 = (uint64_t)i;
    }
    uint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char)v16, v20, 1, v4);
    *Swift::Int v3 = v4;
    uint64_t v17 = v4 & 0xFFFFFFFFFFFFFF8;
LABEL_19:
    if (v12 < 0) {
      goto LABEL_40;
    }
    int64_t v14 = (char **)(v17 + 32);
    uint64_t v9 = v17 + 32 + 8 * v9;
    swift_arrayDestroy(v9, v12, (unint64_t *)qword_1ECA06328);
    if (!v6) {
      goto LABEL_25;
    }
    uint64_t v12 = v9 + 8;
    id v16 = (char *)&v14[a2];
    if ((unint64_t)v4 >> 62) {
      break;
    }
    uint64_t v18 = *(void *)(v17 + 16);
    if (__OFSUB__(v18, a2)) {
      goto LABEL_48;
    }
    specialized UnsafeMutablePointer.moveInitialize(from:count:)((char *)&v14[a2], v18 - a2, (char *)(v9 + 8));
    uint64_t v21 = *(void *)(v17 + 16);
    BOOL v22 = __OFADD__(v21, v6);
    uint64_t v18 = v21 + v6;
    if (!v22) {
      goto LABEL_24;
    }
LABEL_49:
    __break(1u);
LABEL_50:
    if (v4 < 0) {
      BOOL v29 = (void *)v4;
    }
    else {
      BOOL v29 = (void *)v18;
    }
  }
  if (v4 >= 0) {
    Swift::Int v26 = (void *)v17;
  }
  else {
    Swift::Int v26 = (void *)v4;
  }
  int64_t v14 = &selRef_autorelease;
  id v27 = [v26 count];
  if (__OFSUB__(v27, a2))
  {
LABEL_48:
    __break(1u);
    goto LABEL_49;
  }
  specialized UnsafeMutablePointer.moveInitialize(from:count:)(v16, (uint64_t)v27 - a2, (char *)(v9 + 8));
  id v28 = [v26 count];
  uint64_t v18 = (uint64_t)v28 + v6;
  if (__OFADD__(v28, v6))
  {
    __break(1u);
    goto LABEL_48;
  }
LABEL_24:
  *(void *)(v17 + 16) = v18;
LABEL_25:
  *(void *)uint64_t v9 = v30;
  *Swift::Int v3 = v4;
}

void specialized Array.replaceSubrange<A>(_:with:)(char *a1, uint64_t a2, uint64_t a3)
{
  if (((unint64_t)a1 & 0x8000000000000000) != 0) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Array replace: subrange start is negative", 41, 2, "Swift/Array.swift", 17, 2, 0x6D4uLL, 0);
  }
  uint64_t v9 = a1;
  uint64_t v10 = *v4;
  if (!((unint64_t)*v4 >> 62))
  {
    uint64_t v11 = v10 & 0xFFFFFFFFFFFFFF8;
    if (*(void *)(v11 + 16) >= a2) {
      goto LABEL_4;
    }
LABEL_40:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Array replace: subrange extends past the end", 44, 2, "Swift/Array.swift", 17, 2, 0x6D7uLL, 0);
  }
  if (v10 < 0) {
    id v28 = (void *)*v4;
  }
  else {
    id v28 = (void *)(v10 & 0xFFFFFFFFFFFFFF8);
  }
  if ((uint64_t)objc_msgSend(v28, sel_count) < a2) {
    goto LABEL_40;
  }
LABEL_4:
  uint64_t v12 = a2 - (void)v9;
  if (__OFSUB__(a2, v9))
  {
    __break(1u);
  }
  else
  {
    uint64_t v11 = a3 & 0xFFFFFFFFFFFFFF8;
    unint64_t v6 = (unint64_t)a3 >> 62;
    if (!((unint64_t)a3 >> 62))
    {
      uint64_t v13 = *(char **)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
      goto LABEL_7;
    }
  }
  if (a3 < 0) {
    BOOL v29 = (void *)a3;
  }
  else {
    BOOL v29 = (void *)v11;
  }
  uint64_t v13 = (char *)[v29 sel_count];
LABEL_7:
  uint64_t v35 = (uint64_t)v13;
  int64_t v14 = &v13[-v12];
  if (__OFSUB__(v13, v12))
  {
    __break(1u);
    goto LABEL_47;
  }
  uint64_t v5 = *v4;
  uint64_t v11 = *v4 & 0xFFFFFFFFFFFFFF8;
  unint64_t v3 = (unint64_t)*v4 >> 62;
  if (v3)
  {
LABEL_47:
    if (v5 < 0) {
      uint64_t v30 = (void *)v5;
    }
    else {
      uint64_t v30 = (void *)v11;
    }
    id v15 = [v30 count];
    goto LABEL_10;
  }
  id v15 = *(id *)((*v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
LABEL_10:
  id v16 = v14;
  BOOL v17 = __OFADD__(v15, v14);
  uint64_t v18 = &v14[(void)v15];
  if (v17)
  {
    __break(1u);
LABEL_52:
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeMutablePointer.deinitialize with negative count", 53, 2, "Swift/UnsafePointer.swift", 25, 2, 0x493uLL, 0);
  }
  unint64_t v33 = v6;
  uint64_t v34 = a3;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(v5);
  *uint64_t v4 = v5;
  if (v3) {
    LODWORD(v20) = 0;
  }
  else {
    LODWORD(v20) = isUniquelyReferenced_nonNull_bridgeObject;
  }
  if (v20 == 1)
  {
    uint64_t v21 = v5 & 0xFFFFFFFFFFFFFF8;
    if ((uint64_t)v18 <= *(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      goto LABEL_22;
    }
  }
  uint64_t v22 = v5 & 0xFFFFFFFFFFFFFF8;
  if (v3) {
    goto LABEL_62;
  }
  for (uint64_t i = *(char **)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10); ; uint64_t i = (char *)[v32 count])
  {
    if ((uint64_t)i <= (uint64_t)v18) {
      uint64_t v24 = (uint64_t)v18;
    }
    else {
      uint64_t v24 = (uint64_t)i;
    }
    uint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char)v20, v24, 1, v5);
    *uint64_t v4 = v5;
    uint64_t v21 = v5 & 0xFFFFFFFFFFFFFF8;
LABEL_22:
    uint64_t v18 = (char *)v35;
    if (v12 < 0) {
      goto LABEL_52;
    }
    uint64_t v20 = (char *)(v21 + 32 + 8 * (void)v9);
    swift_arrayDestroy((uint64_t)v20, v12, (unint64_t *)qword_1ECA06328);
    if (!v16) {
      goto LABEL_28;
    }
    uint64_t v9 = &v20[8 * v35];
    uint64_t v12 = v21 + 32 + 8 * a2;
    if ((unint64_t)v5 >> 62) {
      break;
    }
    uint64_t v22 = *(void *)(v21 + 16);
    if (__OFSUB__(v22, a2)) {
      goto LABEL_60;
    }
    uint64_t v25 = specialized UnsafeMutablePointer.moveInitialize(from:count:)((char *)(v21 + 32 + 8 * a2), v22 - a2, &v20[8 * v35]);
    uint64_t v26 = *(void *)(v21 + 16);
    BOOL v17 = __OFADD__(v26, v16);
    uint64_t v22 = (uint64_t)&v16[v26];
    if (!v17) {
      goto LABEL_27;
    }
LABEL_61:
    __break(1u);
LABEL_62:
    if (v5 < 0) {
      uint64_t v32 = (void *)v5;
    }
    else {
      uint64_t v32 = (void *)v22;
    }
  }
  if (v5 >= 0) {
    uint64_t v4 = (uint64_t *)v21;
  }
  else {
    uint64_t v4 = (uint64_t *)v5;
  }
  id v31 = [v4 count];
  if (__OFSUB__(v31, a2))
  {
LABEL_60:
    __break(1u);
    goto LABEL_61;
  }
  specialized UnsafeMutablePointer.moveInitialize(from:count:)((char *)(v21 + 32 + 8 * a2), (uint64_t)v31 - a2, &v20[8 * v35]);
  uint64_t v25 = (char *)[v4 sel_count];
  uint64_t v22 = (uint64_t)&v16[(void)v25];
  if (__OFADD__(v25, v16))
  {
    __break(1u);
    goto LABEL_60;
  }
LABEL_27:
  *(void *)(v21 + 16) = v22;
LABEL_28:
  if (v35 < 1)
  {
  }
  else
  {
    MEMORY[0x1F4188790](v25);
    if (v33)
    {
      id v27 = specialized _copyCollectionToContiguousArray<A>(_:)(v34);
      partial apply for specialized closure #1 in _ArrayBufferProtocol.replaceSubrange<A>(_:with:elementsOf:)((char *)v27 + 32, (uint64_t)v27[2]);
      swift_release((uint64_t)v27);
    }
    else
    {
      specialized closure #1 in _ArrayBufferProtocol.replaceSubrange<A>(_:with:elementsOf:)((char *)((v34 & 0xFFFFFFFFFFFFFF8) + 32), *(void *)((v34 & 0xFFFFFFFFFFFFFF8) + 0x10), v35, v20);
    }
  }
  swift_bridgeObjectRelease(v34);
}

void specialized Array.replaceSubrange<A>(_:with:)(uint64_t a1, uint64_t a2, char *a3, uint64_t a4)
{
  if (a1 < 0) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Array replace: subrange start is negative", 41, 2, "Swift/Array.swift", 17, 2, 0x6D4uLL, 0);
  }
  uint64_t v11 = a1;
  uint64_t v12 = *v4;
  if (!((unint64_t)*v4 >> 62))
  {
    uint64_t v13 = v12 & 0xFFFFFFFFFFFFFF8;
    if (*(void *)(v13 + 16) >= a2) {
      goto LABEL_4;
    }
LABEL_33:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Array replace: subrange extends past the end", 44, 2, "Swift/Array.swift", 17, 2, 0x6D7uLL, 0);
  }
  if (v12 < 0) {
    uint64_t v26 = (void *)*v4;
  }
  else {
    uint64_t v26 = (void *)(v12 & 0xFFFFFFFFFFFFFF8);
  }
  if ((uint64_t)objc_msgSend(v26, sel_count) < a2) {
    goto LABEL_33;
  }
LABEL_4:
  uint64_t v14 = a2 - v11;
  if (__OFSUB__(a2, v11))
  {
    __break(1u);
    goto LABEL_35;
  }
  uint64_t v7 = a4 - v14;
  if (__OFSUB__(a4, v14))
  {
LABEL_35:
    __break(1u);
LABEL_36:
    if (v6 < 0) {
      id v27 = (void *)v6;
    }
    else {
      id v27 = (void *)v13;
    }
    id v28 = (char *)[v27 count];
    id v16 = &v28[v7];
    if (!__OFADD__(v28, v7)) {
      goto LABEL_8;
    }
LABEL_41:
    __break(1u);
LABEL_42:
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeMutablePointer.deinitialize with negative count", 53, 2, "Swift/UnsafePointer.swift", 25, 2, 0x493uLL, 0);
  }
  uint64_t v6 = *v4;
  unint64_t v5 = (unint64_t)*v4 >> 62;
  uint64_t v35 = a4;
  uint64_t v13 = *v4 & 0xFFFFFFFFFFFFFF8;
  if (v5) {
    goto LABEL_36;
  }
  uint64_t v15 = *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10);
  id v16 = (char *)(v15 + v7);
  if (__OFADD__(v15, v7)) {
    goto LABEL_41;
  }
LABEL_8:
  uint64_t v17 = v7;
  __src = a3;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(v6);
  *uint64_t v4 = v6;
  if (v5) {
    int v19 = 0;
  }
  else {
    int v19 = isUniquelyReferenced_nonNull_bridgeObject;
  }
  if (v19 == 1)
  {
    uint64_t v20 = v6 & 0xFFFFFFFFFFFFFF8;
    if ((uint64_t)v16 <= *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      goto LABEL_19;
    }
  }
  uint64_t v21 = v6 & 0xFFFFFFFFFFFFFF8;
  if (v5) {
    goto LABEL_52;
  }
  for (uint64_t i = *(char **)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10); ; uint64_t i = (char *)[v33 count])
  {
    if ((uint64_t)i <= (uint64_t)v16) {
      uint64_t v23 = (uint64_t)v16;
    }
    else {
      uint64_t v23 = (uint64_t)i;
    }
    uint64_t v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v19, v23, 1, v6);
    *uint64_t v4 = v6;
    uint64_t v20 = v6 & 0xFFFFFFFFFFFFFF8;
LABEL_19:
    id v16 = (char *)v35;
    if (v14 < 0) {
      goto LABEL_42;
    }
    uint64_t v11 = v20 + 32 + 8 * v11;
    swift_arrayDestroy(v11, v14, (unint64_t *)qword_1ECA06328);
    if (!v17) {
      goto LABEL_25;
    }
    uint64_t v14 = v11 + 8 * v35;
    LOBYTE(v19) = v20 + 32 + 8 * a2;
    if ((unint64_t)v6 >> 62) {
      break;
    }
    uint64_t v21 = *(void *)(v20 + 16);
    if (__OFSUB__(v21, a2)) {
      goto LABEL_50;
    }
    specialized UnsafeMutablePointer.moveInitialize(from:count:)((char *)(v20 + 32 + 8 * a2), v21 - a2, (char *)(v11 + 8 * v35));
    uint64_t v24 = *(void *)(v20 + 16);
    BOOL v25 = __OFADD__(v24, v17);
    uint64_t v21 = v24 + v17;
    if (!v25) {
      goto LABEL_24;
    }
LABEL_51:
    __break(1u);
LABEL_52:
    if (v6 < 0) {
      unint64_t v33 = (void *)v6;
    }
    else {
      unint64_t v33 = (void *)v21;
    }
  }
  if (v6 >= 0) {
    BOOL v29 = (void *)v20;
  }
  else {
    BOOL v29 = (void *)v6;
  }
  uint64_t v30 = v29;
  id v31 = [v29 count];
  if (__OFSUB__(v31, a2))
  {
LABEL_50:
    __break(1u);
    goto LABEL_51;
  }
  specialized UnsafeMutablePointer.moveInitialize(from:count:)((char *)(v20 + 32 + 8 * a2), (uint64_t)v31 - a2, (char *)(v11 + 8 * v35));
  id v32 = [v30 count];
  uint64_t v21 = (uint64_t)v32 + v17;
  if (__OFADD__(v32, v17))
  {
    __break(1u);
    goto LABEL_50;
  }
LABEL_24:
  *(void *)(v20 + 16) = v21;
LABEL_25:
  if (v35 >= 1) {
    specialized closure #1 in _ArrayBufferProtocol.replaceSubrange<A>(_:with:elementsOf:)(__src, v35, v35, (char *)v11);
  }
  *uint64_t v4 = v6;
}

uint64_t Array.replaceSubrange<A>(_:with:)(uint64_t a1, Swift::Int a2, uint64_t a3, uint64_t a4)
{
  unint64_t v5 = v4;
  uint64_t v9 = *(uint64_t **)(a4 + 16);
  uint64_t v86 = *(v9 - 1);
  MEMORY[0x1F4188790](a1);
  uint64_t v11 = (char *)&v79 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = v12;
  uint64_t v15 = v14;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v12, v14, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  uint64_t v17 = MEMORY[0x1F4188790](AssociatedTypeWitness);
  unint64_t v19 = (unint64_t)&v79 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v17);
  uint64_t v92 = a1;
  if (a1 < 0)
  {
    LODWORD(v77) = 0;
    unint64_t v76 = 1748;
    LOBYTE(v75) = 2;
    uint64_t v69 = "Array replace: subrange start is negative";
    uint64_t v70 = 41;
    goto LABEL_58;
  }
  uint64_t v22 = v21;
  int64_t v84 = (char *)&v79 - v20;
  if (Array._getCount()() < a2)
  {
    LODWORD(v77) = 0;
    unint64_t v76 = 1751;
    LOBYTE(v75) = 2;
    uint64_t v69 = "Array replace: subrange extends past the end";
    uint64_t v70 = 44;
LABEL_58:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, v69, v70, 2, "Swift/Array.swift", 17, v75, v76, (int)v77);
  }
  if (__OFSUB__(a2, v92))
  {
    __break(1u);
    goto LABEL_60;
  }
  Swift::Int v90 = a2;
  int64_t v83 = AssociatedTypeWitness;
  uint64_t v23 = v13[14];
  uint64_t v94 = a3;
  uint64_t v85 = v15;
  Swift::Int v24 = a2 - v92;
  uint64_t v91 = ((uint64_t (*)(uint64_t, int **))v23)(v15, v13);
  uint64_t v25 = v91 - v24;
  if (__OFSUB__(v91, v24))
  {
LABEL_60:
    __break(1u);
    goto LABEL_61;
  }
  uint64_t v82 = v11;
  Swift::Int v26 = Array._getCount()();
  BOOL v29 = (char *)(v26 + v25);
  if (__OFADD__(v26, v25))
  {
LABEL_61:
    __break(1u);
LABEL_62:
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeMutablePointer.deinitialize with negative count", 53, 2, "Swift/UnsafePointer.swift", 25, 2, 0x493uLL, 0);
  }
  unint64_t v93 = v13;
  unint64_t v80 = v19;
  uint64_t v81 = v22;
  uint64_t v89 = type metadata accessor for _ArrayBuffer(0, (uint64_t)v9, v27, v28);
  LOBYTE(v19) = _ArrayBuffer.beginCOWMutation()();
  if ((v19 & 1) == 0
    || ((uint64_t v30 = *v5, v31 = *v5 & 0xFFFFFFFFFFFFFF8, !_swift_isClassOrObjCExistentialType((uint64_t)v9, v9))
      ? (uint64_t v32 = v30)
      : (uint64_t v32 = v30 & 0xFFFFFFFFFFFFFF8),
        (uint64_t)v29 > *(void *)(v32 + 24) >> 1))
  {
    uint64_t v30 = *v5;
    if (!_swift_isClassOrObjCExistentialType((uint64_t)v9, v9)
      || (v30 & 0x8000000000000000) == 0 && (v30 & 0x4000000000000000) == 0)
    {
      BOOL isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType((uint64_t)v9, v9);
      uint64_t v34 = v30 & 0xFFFFFFFFFFFFFF8;
      if (!isClassOrObjCExistentialType) {
        uint64_t v34 = v30;
      }
      uint64_t v35 = *(char **)(v34 + 16);
      goto LABEL_17;
    }
    goto LABEL_75;
  }
  while (2)
  {
    if (_swift_isClassOrObjCExistentialType((uint64_t)v9, v9)) {
      uint64_t v37 = v31;
    }
    else {
      uint64_t v37 = v30;
    }
    unint64_t v5 = (uint64_t *)v91;
    if (v24 < 0) {
      goto LABEL_62;
    }
    uint64_t v38 = v24;
    BOOL v29 = (char *)(v37 + ((*(unsigned __int8 *)(v86 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v86 + 80)));
    Swift::Int v24 = *(void *)(v86 + 72);
    unint64_t v19 = (unint64_t)&v29[v24 * v92];
    uint64_t v92 = v24 * v91;
    uint64_t v39 = (char *)(v19 + v24 * v91);
    swift_arrayDestroy(v19, v38, (unint64_t *)v9);
    if (!v25) {
      goto LABEL_45;
    }
    if (!_swift_isClassOrObjCExistentialType((uint64_t)v9, v9)
      || (v30 & 0x8000000000000000) == 0 && (v30 & 0x4000000000000000) == 0)
    {
      if (_swift_isClassOrObjCExistentialType((uint64_t)v9, v9)) {
        uint64_t v41 = v31;
      }
      else {
        uint64_t v41 = v30;
      }
      int64_t v42 = *(unsigned char **)(v41 + 16);
      goto LABEL_33;
    }
    while (1)
    {
      if (v30 < 0) {
        Swift::String v71 = (void *)v30;
      }
      else {
        Swift::String v71 = (void *)v31;
      }
      int64_t v42 = [v71 count];
LABEL_33:
      uint64_t v43 = (uint64_t)&v42[-v90];
      if (__OFSUB__(v42, v90))
      {
        __break(1u);
        goto LABEL_64;
      }
      uint64_t v44 = &v29[v24 * v90];
      BOOL v29 = v39;
      UnsafeMutablePointer.moveInitialize(from:count:)(v44, v43, v39, (unint64_t *)v9);
      if (_swift_isClassOrObjCExistentialType((uint64_t)v9, v9) && (v30 < 0 || (v30 & 0x4000000000000000) != 0)) {
        break;
      }
      if (_swift_isClassOrObjCExistentialType((uint64_t)v9, v9)) {
        uint64_t v45 = v31;
      }
      else {
        uint64_t v45 = v30;
      }
      uint64_t v46 = *(void *)(v45 + 16);
      uint64_t v39 = (char *)(v46 + v25);
      if (!__OFADD__(v46, v25)) {
        goto LABEL_41;
      }
LABEL_64:
      __break(1u);
    }
    if (v30 < 0) {
      uint64_t v72 = (void *)v30;
    }
    else {
      uint64_t v72 = (void *)v31;
    }
    uint64_t v73 = (char *)[v72 count];
    uint64_t v39 = &v73[v25];
    if (__OFADD__(v73, v25))
    {
      __break(1u);
LABEL_75:
      if (v30 < 0) {
        unint64_t v74 = (void *)v30;
      }
      else {
        unint64_t v74 = (void *)(v30 & 0xFFFFFFFFFFFFFF8);
      }
      uint64_t v35 = (char *)[v74 sel_count];
LABEL_17:
      if ((uint64_t)v35 <= (uint64_t)v29) {
        uint64_t v36 = (uint64_t)v29;
      }
      else {
        uint64_t v36 = (uint64_t)v35;
      }
      uint64_t v30 = _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v19 & 1, v36, 1, v30, v9);
      *unint64_t v5 = v30;
      uint64_t v31 = v30 & 0xFFFFFFFFFFFFFF8;
      continue;
    }
    break;
  }
LABEL_41:
  BOOL v40 = _swift_isClassOrObjCExistentialType((uint64_t)v9, v9);
  if (v40) {
    uint64_t v47 = v31;
  }
  else {
    uint64_t v47 = v30;
  }
  *(void *)(v47 + 16) = v39;
  uint64_t v39 = v29;
LABEL_45:
  if ((uint64_t)v5 <= 0)
  {
    uint64_t v67 = *(uint64_t (**)(uint64_t))(*(void *)(v85 - 8) + 8);
    uint64_t v68 = v94;
    return v67(v68);
  }
  else
  {
    v79 = v39;
    MEMORY[0x1F4188790](v40);
    uint64_t v48 = (unint64_t *)v89;
    uint64_t v49 = v85;
    *(&v79 - 6) = (char *)v89;
    *(&v79 - 5) = (char *)v49;
    uint64_t WitnessTable = swift_getWitnessTable(protocol conformance descriptor for _ArrayBuffer<A>, v48, v50);
    Swift::Int v52 = v93;
    uint64_t v75 = WitnessTable;
    unint64_t v76 = (unint64_t)v93;
    uint64_t v77 = v5;
    unint64_t v78 = v19;
    uint64_t v53 = v94;
    (*((void (**)(void *__return_ptr, char *(*)(char *, uint64_t), char **, void *, uint64_t))v93[1]
     + 9))(v95, partial apply for closure #1 in _ArrayBufferProtocol.replaceSubrange<A>(_:with:elementsOf:), &v79 - 8, &unk_1ECA06270, v49);
    if (v95[0])
    {
      unint64_t v54 = v84;
      ((void (*)(uint64_t, int **))v52[8])(v49, v52);
      uint64_t v55 = v92;
      uint64_t v92 = v24;
      Swift::Int v56 = v82;
      unint64_t v57 = (unint64_t)v79;
      if (v55 >= 1)
      {
        Swift::Int v90 = (Swift::Int)v93[10];
        uint64_t v91 = (uint64_t)(v93 + 10);
        unint64_t v88 = v93[24];
        uint64_t v89 = (Class *)(v93 + 24);
        uint64_t v87 = (void (**)(char *))(v86 + 16);
        int64_t v58 = (void (**)(unint64_t, char *, uint64_t *))(v86 + 32);
        unint64_t v59 = v93;
        do
        {
          uint64_t v60 = v49;
          unint64_t v61 = (void (*)(void *, void))((uint64_t (*)(void *, char *, uint64_t, int **))v90)(v95, v54, v49, v59);
          (*v87)(v56);
          v61(v95, 0);
          uint64_t v49 = v60;
          (*v58)(v19, v56, v9);
          v19 += v92;
          ((void (*)(char *, uint64_t, int **))v88)(v54, v60, v59);
        }
        while (v19 < v57);
      }
      uint64_t v63 = v80;
      uint64_t v62 = v81;
      Swift::Int v64 = v83;
      (*(void (**)(unint64_t, char *, const char *))(v81 + 32))(v80, v54, v83);
      uint64_t v65 = v94;
      _expectEnd<A>(of:is:)(v94, v63, v49, (uint64_t)v93);
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v49 - 8) + 8))(v65, v49);
      return (*(uint64_t (**)(uint64_t, const char *))(v62 + 8))(v63, v64);
    }
    else
    {
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v49 - 8) + 8))(v53, v49);
    }
  }
}

void (*Array.subscript.modify(void *a1, Swift::Int a2, Swift::Int a3, uint64_t a4))(void ***a1, char a2)
{
  uint64_t v9 = malloc(0x40uLL);
  *a1 = v9;
  v9[6] = a4;
  v9[7] = v4;
  v9[4] = a2;
  v9[5] = a3;
  int64_t v10 = *v4;
  uint64_t v11 = *(uint64_t **)(a4 + 16);
  Array._checkIndex(_:)(a2);
  Array._checkIndex(_:)(a3);
  *uint64_t v9 = _ArrayBuffer.subscript.getter(a2, a3, v10, v11);
  v9[1] = v12;
  v9[2] = v13;
  v9[3] = v14;
  return Array.subscript.modify;
}

void Array.subscript.modify(void ***a1, char a2)
{
}

uint64_t protocol witness for RandomAccessCollection.index(_:offsetBy:limitedBy:) in conformance [A]@<X0>(void *a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  return protocol witness for RandomAccessCollection.index(_:offsetBy:limitedBy:) in conformance [A](a1, a2, a3, specialized Array.index(_:offsetBy:limitedBy:), a4);
}

uint64_t protocol witness for MutableCollection.subscript.setter in conformance [A](uint64_t a1, Swift::Int *a2, uint64_t a3)
{
  unint64_t v5 = Array.subscript.modify((uint64_t)v8, *a2, a3);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a3 + 16) - 8) + 40))(v6, a1);
  return ((uint64_t (*)(unsigned char *, void))v5)(v8, 0);
}

uint64_t (*protocol witness for MutableCollection.subscript.modify in conformance [A](void *a1, Swift::Int *a2, uint64_t a3))()
{
  uint64_t v6 = malloc(0x28uLL);
  *a1 = v6;
  v6[4] = Array.subscript.modify((uint64_t)v6, *a2, a3);
  return protocol witness for MutableCollection.subscript.modify in conformance [A];
}

uint64_t protocol witness for MutableCollection.subscript.setter in conformance [A](void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for MutableCollection.subscript.setter in conformance [A](a1, a2, a3, a4, (uint64_t (*)(void, void, void, void, void, void, uint64_t))Array.subscript.setter);
}

void (*protocol witness for MutableCollection.subscript.modify in conformance [A](void *a1, Swift::Int *a2, uint64_t a3))(void ***a1, char a2)
{
  uint64_t v7 = malloc(0x40uLL);
  *a1 = v7;
  v7[4] = v3;
  v7[5] = a3;
  Swift::Int v9 = *a2;
  Swift::Int v8 = a2[1];
  v7[6] = v9;
  v7[7] = v8;
  int64_t v10 = *v3;
  uint64_t v11 = *(uint64_t **)(a3 + 16);
  Array._checkIndex(_:)(v9);
  Array._checkIndex(_:)(v8);
  *uint64_t v7 = _ArrayBuffer.subscript.getter(v9, v8, v10, v11);
  v7[1] = v12;
  v7[2] = v13;
  v7[3] = v14;
  return protocol witness for MutableCollection.subscript.modify in conformance [A];
}

void protocol witness for MutableCollection.subscript.modify in conformance [A](void ***a1, char a2)
{
}

void *protocol witness for MutableCollection.partition(by:) in conformance [A]@<X0>(uint64_t (*a1)(char *)@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t WitnessTable = swift_getWitnessTable(protocol conformance descriptor for [A], a3, (uint64_t)a3);
  return MutableCollection<>.partition(by:)(a1, a2, (uint64_t)a3, WitnessTable, a4, a5);
}

void *protocol witness for MutableCollection._withUnsafeMutableBufferPointerIfSupported<A>(_:) in conformance [A]@<X0>(void (*a1)(void *)@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  return Array.withContiguousMutableStorageIfAvailable<A>(_:)(a1, a3, a2, a4);
}

void *Array._withUnsafeMutableBufferPointerIfSupported<A>(_:)@<X0>(void (*a1)(void *)@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  return Array._withUnsafeMutableBufferPointerIfSupported<A>(_:)(a1, a2, a3, a4);
}

{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  void v17[2];
  uint64_t v18;

  uint64_t v18 = a3;
  Array._makeMutableAndUnique()();
  Swift::Int v9 = *v4;
  int64_t v10 = *(uint64_t **)(a2 + 16);
  if (_swift_isClassOrObjCExistentialType((uint64_t)v10, v10)) {
    uint64_t v11 = v9 & 0xFFFFFFFFFFFFFF8;
  }
  else {
    uint64_t v11 = v9;
  }
  uint64_t v12 = *(void *)(v11 + 16);
  if (_swift_isClassOrObjCExistentialType((uint64_t)v10, v10)) {
    uint64_t v13 = v9 & 0xFFFFFFFFFFFFFF8;
  }
  else {
    uint64_t v13 = v9;
  }
  v17[0] = v13
         + ((*(unsigned __int8 *)(*(v10 - 1) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(v10 - 1) + 80));
  uint64_t v14 = v17[0];
  v17[1] = v12;
  a1(v17);
  if (v5) {
    return $defer #1 <A><A1>() in Array.withUnsafeMutableBufferPointer<A>(_:)(v17, v14, v12);
  }
  id v16 = v18;
  $defer #1 <A><A1>() in Array.withUnsafeMutableBufferPointer<A>(_:)(v17, v14, v12);
  return (void *)(*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(a4, 0, 1, v16);
}

void *Array.withContiguousMutableStorageIfAvailable<A>(_:)@<X0>(void (*a1)(void *)@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  return Array._withUnsafeMutableBufferPointerIfSupported<A>(_:)(a1, a2, a3, a4);
}

void *protocol witness for BidirectionalCollection.index(before:) in conformance [A]@<X0>(void *result@<X0>, void *a2@<X8>)
{
  if (__OFSUB__(*result, 1)) {
    __break(1u);
  }
  else {
    *a2 = *result - 1;
  }
  return result;
}

uint64_t protocol witness for RandomAccessCollection.index(_:offsetBy:limitedBy:) in conformance [A]@<X0>(void *a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t (*a4)(void, uint64_t, void)@<X5>, uint64_t a5@<X8>)
{
  uint64_t result = a4(*a1, a2, *a3);
  *(void *)a5 = result;
  *(unsigned char *)(a5 + 8) = v7 & 1;
  return result;
}

uint64_t protocol witness for BidirectionalCollection.distance(from:to:) in conformance [A](void *a1, void *a2)
{
  BOOL v2 = __OFSUB__(*a2, *a1);
  uint64_t result = *a2 - *a1;
  if (v2) {
    __break(1u);
  }
  return result;
}

Swift::Int protocol witness for Collection.endIndex.getter in conformance [A]@<X0>(Swift::Int *a1@<X8>)
{
  Swift::Int result = Array.count.getter();
  *a1 = result;
  return result;
}

uint64_t (*protocol witness for Collection.subscript.read in conformance [A](void *a1, unint64_t *a2, uint64_t a3))()
{
  char v7 = malloc(0x28uLL);
  *a1 = v7;
  v7[4] = Array.subscript.read(v7, *a2, *v3, *(uint64_t **)(a3 + 16));
  return protocol witness for Collection.subscript.read in conformance _ArrayBuffer<A>;
}

void (*Array.subscript.read(void *a1, unint64_t a2, uint64_t a3, uint64_t *a4))(void *a1)
{
  uint64_t v8 = *(a4 - 1);
  uint64_t v9 = v8;
  a1[1] = a4;
  a1[2] = v8;
  size_t v10 = *(void *)(v8 + 64);
  uint64_t v11 = malloc(v10);
  a1[3] = v11;
  char isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType((uint64_t)a4, a4);
  char v13 = ((a3 & 0xC000000000000001) == 0) | ~isClassOrObjCExistentialType;
  Array._checkSubscript(_:wasNativeTypeChecked:)(a2, (a3 & 0xC000000000000001) == 0 || (isClassOrObjCExistentialType & 1) == 0);
  if (v13)
  {
    (*(void (**)(void *, unint64_t, uint64_t *))(v9 + 16))(v11, a3+ ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80))+ *(void *)(v9 + 72) * a2, a4);
  }
  else
  {
    id v15 = _ArrayBuffer._getElementSlowPath(_:)(a2, a3, a4);
    id v16 = v15;
    if (v10 != 8)
    {
      swift_unknownObjectRelease(v15);
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't unsafeBitCast between types of different sizes", 52, 2, "Swift/Builtin.swift", 19, 2, 0x5FuLL, 0);
    }
    *a1 = v15;
    (*(void (**)(void *, void *, uint64_t *))(v9 + 16))(v11, a1, a4);
    swift_unknownObjectRelease(v16);
  }
  return Array.subscript.read;
}

void Array.subscript.read(void *a1)
{
  BOOL v1 = (void *)a1[3];
  (*(void (**)(void *, void))(a1[2] + 8))(v1, a1[1]);

  free(v1);
}

uint64_t protocol witness for Collection.subscript.getter in conformance [A]@<X0>(Swift::Int *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result = Array.subscript.getter(*a1, a1[1], *v3, *(uint64_t **)(a2 + 16));
  *a3 = result;
  a3[1] = v6;
  a3[2] = v7;
  a3[3] = v8;
  return result;
}

uint64_t protocol witness for Collection.indices.getter in conformance [A]@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X2>, char *a3@<X8>)
{
  uint64_t WitnessTable = swift_getWitnessTable(protocol conformance descriptor for [A], a1, a2);

  return RandomAccessCollection<>.indices.getter((uint64_t)a1, WitnessTable, (uint64_t)&protocol witness table for Int, a3);
}

Swift::Int protocol witness for Collection.count.getter in conformance [A]()
{
  return Array.count.getter();
}

void protocol witness for Collection._customIndexOfEquatableElement(_:) in conformance [A](uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(_WORD *)(a1 + 8) = 256;
}

void *protocol witness for Collection.index(after:) in conformance [A]@<X0>(void *result@<X0>, void *a2@<X8>)
{
  if (__OFADD__(*result, 1)) {
    __break(1u);
  }
  else {
    *a2 = *result + 1;
  }
  return result;
}

uint64_t protocol witness for Sequence.underestimatedCount.getter in conformance [A](unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable(protocol conformance descriptor for [A], a1, a3);

  return Collection.underestimatedCount.getter((uint64_t)a1, WitnessTable);
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance [A](uint64_t a1)
{
  return Array._copyToContiguousArray()(*v1, *(uint64_t **)(a1 + 16));
}

uint64_t Array._copyToContiguousArray()(unint64_t a1, uint64_t *a2)
{
  if (_swift_isClassOrObjCExistentialType((uint64_t)a2, a2))
  {
    if ((a1 & 0x8000000000000000) != 0 || (a1 & 0x4000000000000000) != 0)
    {
      unint64_t v12 = a1;
      uint64_t v9 = (unint64_t *)type metadata accessor for Array(0, (uint64_t)a2, v4, v5);
      uint64_t WitnessTable = swift_getWitnessTable(protocol conformance descriptor for [A], v9, v10);
      uint64_t v7 = _copyCollectionToContiguousArray<A>(_:)((uint64_t)&v12, (uint64_t)v9, WitnessTable);
      swift_bridgeObjectRelease(a1);
    }
    else
    {
      swift_bridgeObjectRetain(a1);
      BOOL isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType((uint64_t)a2, a2);
      swift_bridgeObjectRelease(a1);
      if (isClassOrObjCExistentialType) {
        return a1 & 0xFFFFFFFFFFFFFF8;
      }
      else {
        return a1;
      }
    }
  }
  else if (_swift_isClassOrObjCExistentialType((uint64_t)a2, a2))
  {
    return a1 & 0xFFFFFFFFFFFFFF8;
  }
  else
  {
    return a1;
  }
  return (uint64_t)v7;
}

uint64_t protocol witness for Sequence._copyContents(initializing:) in conformance [A](void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return protocol witness for Sequence._copyContents(initializing:) in conformance _ArrayBuffer<A>(a1, a2, a3, a4, a5, (uint64_t (*)(uint64_t, uint64_t, void, void))Array._copyContents(initializing:));
}

unint64_t Array._copyContents(initializing:)(char *a1, Swift::Int a2, unint64_t a3, uint64_t *a4)
{
  uint64_t v7 = a1;
  uint64_t v8 = *(a4 - 1);
  MEMORY[0x1F4188790](a1);
  uint64_t v10 = (char *)v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (Array._getCount()())
  {
    if (v7)
    {
      if (Array._getCount()() > a2) {
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Insufficient space allocated to copy array contents", 51, 2, "Swift/Array.swift", 17, 2, 0x694uLL, 0);
      }
      swift_bridgeObjectRetain(a3);
      if (!_swift_isClassOrObjCExistentialType((uint64_t)a4, a4)
        || (a3 & 0x8000000000000000) == 0 && (a3 & 0x4000000000000000) == 0)
      {
        BOOL isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType((uint64_t)a4, a4);
        uint64_t v12 = a3 & 0xFFFFFFFFFFFFFF8;
        if (!isClassOrObjCExistentialType) {
          uint64_t v12 = a3;
        }
        char v13 = (char *)(v12 + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80)));
        Swift::Int v14 = Array._getCount()();
        UnsafeMutablePointer.initialize(from:count:)(v13, v14, v7, (unint64_t *)a4);
        if (!_swift_isClassOrObjCExistentialType((uint64_t)a4, a4)
          || (a3 & 0x8000000000000000) == 0 && (a3 & 0x4000000000000000) == 0)
        {
          _swift_isClassOrObjCExistentialType((uint64_t)a4, a4);
        }
        goto LABEL_13;
      }
      swift_bridgeObjectRelease(a3);
      v23[0] = 0;
      v23[1] = a3;
      swift_bridgeObjectRetain(a3);
      if (!Array._getCount()())
      {
LABEL_13:
        swift_bridgeObjectRelease(a3);
        swift_bridgeObjectRetain(a3);
        Array._getCount()();
        swift_bridgeObjectRelease(a3);
        return a3;
      }
      unint64_t v19 = (unint64_t *)type metadata accessor for Array(0, (uint64_t)a4, v16, v17);
      while (1)
      {
        swift_getWitnessTable(protocol conformance descriptor for [A], v19, v18);
        uint64_t v20 = protocol witness for Collection.subscript.read in conformance [A](v22, v23, (uint64_t)v19);
        (*(void (**)(char *))(v8 + 16))(v10);
        ((void (*)(void *, void))v20)(v22, 0);
        unint64_t v21 = v23[0] + 1;
        if (__OFADD__(v23[0], 1)) {
          break;
        }
        ++v23[0];
        (*(void (**)(char *, char *, uint64_t *))(v8 + 32))(v7, v10, a4);
        v7 += *(void *)(v8 + 72);
        if (v21 == Array._getCount()()) {
          goto LABEL_13;
        }
      }
      __break(1u);
    }
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Attempt to copy contents into nil buffer pointer", 48, 2, "Swift/Array.swift", 17, 2, 0x693uLL, 0);
  }
  return a3;
}

uint64_t protocol witness for Sequence.withContiguousStorageIfAvailable<A>(_:) in conformance [A]@<X0>(uint64_t (*a1)(uint64_t, unint64_t)@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  return Array.withContiguousStorageIfAvailable<A>(_:)(a1, *v4, *(uint64_t **)(a3 + 16), a2, a4);
}

uint64_t Array.withContiguousStorageIfAvailable<A>(_:)@<X0>(uint64_t (*a1)(uint64_t, unint64_t)@<X0>, int64_t a2@<X2>, uint64_t *a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  if (_swift_isClassOrObjCExistentialType((uint64_t)a3, a3) && (a2 < 0 || (a2 & 0x4000000000000000) != 0))
  {
    uint64_t v17 = (unint64_t *)type metadata accessor for _ArrayBuffer(0, (uint64_t)a3, v10, v11);
    swift_bridgeObjectRetain(a2);
    uint64_t WitnessTable = swift_getWitnessTable(protocol conformance descriptor for _ArrayBuffer<A>, v17, v18);
    uint64_t v20 = (*(uint64_t (**)(unint64_t *, uint64_t))(WitnessTable + 56))(v17, WitnessTable);
    partial apply for closure #1 in Array.withContiguousStorageIfAvailable<A>(_:)();
    uint64_t result = swift_release(v20);
    if (!v5) {
      return (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)(a4 - 8) + 56))(a5, 0, 1);
    }
  }
  else
  {
    if (_swift_isClassOrObjCExistentialType((uint64_t)a3, a3)) {
      uint64_t v12 = a2 & 0xFFFFFFFFFFFFFF8;
    }
    else {
      uint64_t v12 = a2;
    }
    uint64_t v13 = *(unsigned __int8 *)(*(a3 - 1) + 80);
    if (_swift_isClassOrObjCExistentialType((uint64_t)a3, a3) && (a2 < 0 || (a2 & 0x4000000000000000) != 0))
    {
      if (a2 < 0) {
        unint64_t v21 = (void *)a2;
      }
      else {
        unint64_t v21 = (void *)(a2 & 0xFFFFFFFFFFFFFF8);
      }
      unint64_t v22 = (unint64_t)[v21 count];
      if ((v22 & 0x8000000000000000) != 0) {
        _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeBufferPointer with negative count", 39, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x53FuLL, 0);
      }
      unint64_t v15 = v22;
    }
    else
    {
      if (_swift_isClassOrObjCExistentialType((uint64_t)a3, a3)) {
        uint64_t v14 = a2 & 0xFFFFFFFFFFFFFF8;
      }
      else {
        uint64_t v14 = a2;
      }
      unint64_t v15 = *(void *)(v14 + 16);
    }
    uint64_t result = a1(v12 + ((v13 + 32) & ~v13), v15);
    if (!v5) {
      return (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)(a4 - 8) + 56))(a5, 0, 1);
    }
  }
  return result;
}

uint64_t protocol witness for ExpressibleByArrayLiteral.init(arrayLiteral:) in conformance [A]@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = result;
  return result;
}

__objc2_class **Array.init()()
{
  return &_swiftEmptyArrayStorage;
}

__objc2_class **specialized Array.init(repeating:count:)(unint64_t a1, __objc2_class *a2)
{
  uint64_t result = specialized static Array._allocateUninitialized(_:)(a2, (uint64_t (*)(__objc2_class *))specialized static Array._allocateBufferUninitialized(minimumCapacity:));
  if (((unint64_t)a2 & 0x8000000000000000) != 0) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
  }
  if (a2)
  {
    if ((unint64_t)a2 < 4)
    {
      unint64_t v6 = 0;
      uint64_t v7 = (unint64_t *)v5;
LABEL_8:
      uint64_t v11 = (char *)a2 - v6;
      do
      {
        *v7++ = a1;
        --v11;
      }
      while (v11);
      return result;
    }
    unint64_t v6 = (unint64_t)a2 & 0xFFFFFFFFFFFFFFFCLL;
    uint64_t v7 = (unint64_t *)v5 + ((unint64_t)a2 & 0xFFFFFFFFFFFFFFFCLL);
    int64x2_t v8 = vdupq_n_s64(a1);
    uint64_t v9 = v5 + 1;
    unint64_t v10 = (unint64_t)a2 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v9[-1] = v8;
      *uint64_t v9 = v8;
      v9 += 2;
      v10 -= 4;
    }
    while (v10);
    if ((__objc2_class *)v6 != a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t Array.init(repeating:count:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Array.init(repeating:count:)(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t))static Array._allocateUninitialized(_:));
}

__objc2_class **specialized static Array._allocateUninitialized(_:)(uint64_t a1)
{
  if (a1 < 0) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't construct Array with count < 0", 36, 2, "Swift/Array.swift", 17, 2, 0x3A8uLL, 0);
  }
  if (!a1) {
    return &_swiftEmptyArrayStorage;
  }
  uint64_t result = specialized static Array._allocateBufferUninitialized(minimumCapacity:)(a1);
  *(void *)(((unint64_t)result & 0xFFFFFFFFFFFFFF8) + 0x10) = a1;
  return result;
}

__objc2_class **specialized static Array._allocateUninitialized(_:)(__objc2_class *a1, uint64_t (*a2)(__objc2_class *))
{
  if (((unint64_t)a1 & 0x8000000000000000) != 0) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't construct Array with count < 0", 36, 2, "Swift/Array.swift", 17, 2, 0x3A8uLL, 0);
  }
  if (!a1) {
    return &_swiftEmptyArrayStorage;
  }
  uint64_t result = (__objc2_class **)a2(a1);
  result[2] = a1;
  return result;
}

uint64_t static Array._allocateUninitialized(_:)(uint64_t a1, uint64_t *a2)
{
  if (a1 < 0) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't construct Array with count < 0", 36, 2, "Swift/Array.swift", 17, 2, 0x3A8uLL, 0);
  }
  if (a1)
  {
    uint64_t v4 = (uint64_t)static Array._allocateBufferUninitialized(minimumCapacity:)(a1, a2);
    BOOL isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType((uint64_t)a2, a2);
    uint64_t v6 = v4 & 0xFFFFFFFFFFFFFF8;
    if (!isClassOrObjCExistentialType) {
      uint64_t v6 = v4;
    }
    *(void *)(v6 + 16) = a1;
  }
  else
  {
    uint64_t v4 = (uint64_t)&_swiftEmptyArrayStorage;
  }
  _swift_isClassOrObjCExistentialType((uint64_t)a2, a2);
  return v4;
}

__objc2_class **specialized static Array._allocateBufferUninitialized(minimumCapacity:)(uint64_t a1)
{
  if (a1 < 1) {
    return &_swiftEmptyArrayStorage;
  }
  BOOL v2 = (unint64_t *)canonical specialized generic type metadata accessor for _ContiguousArrayStorage<Int8>();
  unint64_t v3 = swift_allocObject(v2, a1 + 32, 7uLL);
  size_t v4 = _swift_stdlib_malloc_size(v3);
  v3[2] = 0;
  v3[3] = 2 * v4 - 64;
  return (__objc2_class **)v3;
}

{
  unint64_t *v2;
  void *v3;
  int64_t v4;
  uint64_t v5;

  if (a1 < 1) {
    return &_swiftEmptyArrayStorage;
  }
  BOOL v2 = (unint64_t *)canonical specialized generic type metadata accessor for _ContiguousArrayStorage<Swift.AnyObject>();
  unint64_t v3 = swift_allocObject(v2, 8 * a1 + 32, 7uLL);
  size_t v4 = _swift_stdlib_malloc_size(v3);
  uint64_t v5 = v4 - 32;
  if (v4 < 32) {
    uint64_t v5 = v4 - 25;
  }
  v3[2] = 0;
  v3[3] = (2 * (v5 >> 3)) | 1;
  return (__objc2_class **)v3;
}

{
  unint64_t *v2;
  void *v3;
  int64_t v4;
  uint64_t v5;

  if (a1 < 1) {
    return &_swiftEmptyArrayStorage;
  }
  BOOL v2 = (unint64_t *)canonical specialized generic type metadata accessor for _ContiguousArrayStorage<Int>();
  unint64_t v3 = swift_allocObject(v2, 8 * a1 + 32, 7uLL);
  size_t v4 = _swift_stdlib_malloc_size(v3);
  uint64_t v5 = v4 - 32;
  if (v4 < 32) {
    uint64_t v5 = v4 - 25;
  }
  v3[2] = 0;
  v3[3] = 2 * (v5 >> 3);
  return (__objc2_class **)v3;
}

__objc2_class **static Array._allocateBufferUninitialized(minimumCapacity:)(uint64_t a1, uint64_t *a2)
{
  return _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(0, a1, a2);
}

__objc2_class **Array.init(_uninitializedCount:)(uint64_t a1, uint64_t *a2)
{
  if (a1 < 0) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't construct Array with count < 0", 36, 2, "Swift/Array.swift", 17, 2, 0x3A8uLL, 0);
  }
  if (!a1) {
    return &_swiftEmptyArrayStorage;
  }
  uint64_t v4 = (uint64_t)static Array._allocateBufferUninitialized(minimumCapacity:)(a1, a2);
  BOOL isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType((uint64_t)a2, a2);
  uint64_t v6 = v4 & 0xFFFFFFFFFFFFFF8;
  if (!isClassOrObjCExistentialType) {
    uint64_t v6 = v4;
  }
  *(void *)(v6 + 16) = a1;
  return (__objc2_class **)v4;
}

uint64_t specialized static Array._adoptStorage(_:count:)(uint64_t result, uint64_t a2)
{
  *(void *)(result + 16) = a2;
  *(void *)(result + 24) = 2 * a2;
  return result;
}

void *static Array._adoptStorage(_:count:)(void *a1, uint64_t a2)
{
  BOOL isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType(*(void *)(*a1 + 144), *(uint64_t **)(*a1 + 144));
  a1[2] = a2;
  a1[3] = isClassOrObjCExistentialType | (unint64_t)(2 * a2);
  return a1;
}

void *_ContiguousArrayBuffer.init(count:storage:)(uint64_t a1, void *a2)
{
  BOOL isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType(*(void *)(*a2 + 144), *(uint64_t **)(*a2 + 144));
  a2[2] = a1;
  a2[3] = isClassOrObjCExistentialType | (unint64_t)(2 * a1);
  return a2;
}

Swift::Void __swiftcall Array._deallocateUninitialized()()
{
  uint64_t v2 = *v1;
  BOOL isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType(*(void *)(v0 + 16), *(uint64_t **)(v0 + 16));
  uint64_t v4 = v2 & 0xFFFFFFFFFFFFFF8;
  if (!isClassOrObjCExistentialType) {
    uint64_t v4 = v2;
  }
  *(void *)(v4 + 16) = 0;
}

Swift::Void __swiftcall Array.reserveCapacity(_:)(Swift::Int a1)
{
}

uint64_t specialized Array._reserveCapacityImpl(minimumCapacity:growForAppend:)(uint64_t a1, uint64_t a2)
{
  return specialized Array._reserveCapacityImpl(minimumCapacity:growForAppend:)(a1, a2, (uint64_t (*)(void))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
}

{
  return specialized Array._reserveCapacityImpl(minimumCapacity:growForAppend:)(a1, a2, (uint64_t (*)(void))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
}

uint64_t specialized Array._reserveCapacityImpl(minimumCapacity:growForAppend:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v6 = *v3;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native(*v3);
  *unint64_t v3 = v6;
  if (!result || a1 > *(void *)(v6 + 24) >> 1)
  {
    uint64_t result = a3();
    *unint64_t v3 = result;
  }
  return result;
}

Swift::Void __swiftcall Array._reserveCapacityImpl(minimumCapacity:growForAppend:)(Swift::Int minimumCapacity, Swift::Bool growForAppend)
{
  uint64_t v6 = *(uint64_t **)(v2 + 16);
  BOOL isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType((uint64_t)v6, v6);
  uint64_t v8 = *v3;
  if (!isClassOrObjCExistentialType)
  {
    BOOL isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    *unint64_t v3 = v8;
    if (isUniquelyReferenced_nonNull_native) {
      goto LABEL_8;
    }
LABEL_12:
    char v10 = 0;
LABEL_13:
    if (_swift_isClassOrObjCExistentialType((uint64_t)v6, v6) && (v8 < 0 || (v8 & 0x4000000000000000) != 0))
    {
      if (v8 < 0) {
        uint64_t v18 = (void *)v8;
      }
      else {
        uint64_t v18 = (void *)(v8 & 0xFFFFFFFFFFFFFF8);
      }
      id v16 = [v18 count];
    }
    else
    {
      BOOL v14 = _swift_isClassOrObjCExistentialType((uint64_t)v6, v6);
      uint64_t v15 = v8 & 0xFFFFFFFFFFFFFF8;
      if (!v14) {
        uint64_t v15 = v8;
      }
      id v16 = *(id *)(v15 + 16);
    }
    if ((uint64_t)v16 <= minimumCapacity) {
      Swift::Int v17 = minimumCapacity;
    }
    else {
      Swift::Int v17 = (Swift::Int)v16;
    }
    *unint64_t v3 = _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v10, v17, growForAppend, v8, v6);
    return;
  }
  char isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(*v3);
  *unint64_t v3 = v8;
  if ((isUniquelyReferenced_nonNull_bridgeObject & 1) == 0) {
    goto LABEL_12;
  }
  if (_swift_isClassOrObjCExistentialType((uint64_t)v6, v6))
  {
    char v10 = 0;
    if (v8 < 0 || (v8 & 0x4000000000000000) != 0) {
      goto LABEL_13;
    }
  }
LABEL_8:
  BOOL v12 = _swift_isClassOrObjCExistentialType((uint64_t)v6, v6);
  uint64_t v13 = v8 & 0xFFFFFFFFFFFFFF8;
  if (!v12) {
    uint64_t v13 = v8;
  }
  if (minimumCapacity > *(void *)(v13 + 24) >> 1)
  {
    char v10 = 1;
    goto LABEL_13;
  }
}

__objc2_class **specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(__objc2_class **a1, int64_t a2, char a3)
{
  uint64_t result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *unint64_t v3 = (uint64_t)result;
  return result;
}

{
  uint64_t *v3;
  __objc2_class **result;

  uint64_t result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *unint64_t v3 = (uint64_t)result;
  return result;
}

uint64_t specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, uint64_t a2, char a3)
{
  uint64_t result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *unint64_t v3 = result;
  return result;
}

Swift::Void __swiftcall Array._copyToNewBuffer(oldCount:)(Swift::Int oldCount)
{
  uint64_t v6 = oldCount + 1;
  BOOL v14 = *v4;
  uint64_t v7 = (unint64_t *)type metadata accessor for _ArrayBuffer(0, *(void *)(v1 + 16), v2, v3);
  uint64_t WitnessTable = swift_getWitnessTable(protocol conformance descriptor for _ArrayBuffer<A>, v7, v8);
  char v10 = _ArrayBufferProtocol._forceCreateUniqueMutableBuffer(countForNewBuffer:minNewCapacity:)(oldCount, v6, (uint64_t)v7, WitnessTable);
  BOOL v14 = (atomic_ullong *)v10;
  uint64_t v11 = default argument 3 of _ArrayBufferProtocol._arrayOutOfPlaceUpdate(_:_:_:_:)((uint64_t)v7, WitnessTable);
  uint64_t v13 = v12;
  _ArrayBufferProtocol._arrayOutOfPlaceUpdate(_:_:_:_:)(&v14, oldCount, 0, (void (*)(char *, uint64_t))v11, v12, (uint64_t)v7, WitnessTable);
  swift_release(v13);
  swift_release((uint64_t)v10);
}

uint64_t static FixedWidthInteger.&+ infix(_:_:)@<X0>(uint64_t a1@<X3>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t))(a1 + 80))(a2);
}

__objc2_class **_ArrayBufferProtocol._forceCreateUniqueMutableBuffer(countForNewBuffer:minNewCapacity:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t))(a4 + 128);
  uint64_t v9 = v8(a3, a4);
  uint64_t v10 = v8(a3, a4);
  if (v9 < a2)
  {
    if (v10 + 0x4000000000000000 < 0)
    {
      __break(1u);
      goto LABEL_21;
    }
    v10 *= 2;
  }
  if (v10 <= a2) {
    uint64_t v11 = a2;
  }
  else {
    uint64_t v11 = v10;
  }
  if (v11 <= a1) {
    uint64_t v12 = a1;
  }
  else {
    uint64_t v12 = v11;
  }
  if (!v12) {
    return &_swiftEmptyArrayStorage;
  }
  AssociatedTypeWitness = (uint64_t *)swift_getAssociatedTypeWitness(0, *(int ***)(*(void *)(*(void *)(a4 + 8) + 8) + 8), a3, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
  BOOL v14 = getContiguousArrayStorageType<A>(for:)((uint64_t)AssociatedTypeWitness, AssociatedTypeWitness);
  uint64_t v15 = *(void *)(*(AssociatedTypeWitness - 1) + 72);
  uint64_t v16 = *(unsigned __int8 *)(*(AssociatedTypeWitness - 1) + 80);
  Swift::Int v17 = swift_allocObject((unint64_t *)v14, ((v16 + *((unsigned int *)v14 + 12)) & ~v16) + v15 * v12, v16 | *((unsigned __int16 *)v14 + 26));
  size_t v18 = _swift_stdlib_malloc_size(v17);
  if (!v15) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Division by zero", 16, 2, "Swift/IntegerTypes.swift", 24, 2, 0x3829uLL, 0);
  }
  int64_t v19 = v18 - ((v16 + 32) & ~v16);
  if (v19 == 0x8000000000000000 && v15 == -1) {
LABEL_21:
  }
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Division results in an overflow", 31, 2, "Swift/IntegerTypes.swift", 24, 2, 0x3830uLL, 0);
  uint64_t v21 = v19 / v15;
  swift_retain(v17);
  BOOL isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType((uint64_t)AssociatedTypeWitness, AssociatedTypeWitness);
  v17[2] = a1;
  v17[3] = isClassOrObjCExistentialType | (unint64_t)(2 * v21);
  swift_release((uint64_t)v17);
  return (__objc2_class **)v17;
}

uint64_t (*default argument 3 of _ArrayBufferProtocol._arrayOutOfPlaceUpdate(_:_:_:_:)(uint64_t a1, uint64_t a2))()
{
  uint64_t v4 = swift_allocObject(qword_1ECA027C8, 0x20uLL, 7uLL);
  v4[2] = a1;
  v4[3] = a2;
  return EnumeratedSequence._base.modify;
}

void *_ArrayBufferProtocol._arrayOutOfPlaceUpdate(_:_:_:_:)(atomic_ullong **a1, uint64_t a2, uint64_t a3, void (*a4)(char *, uint64_t), uint64_t a5, uint64_t a6, uint64_t a7)
{
  void (*v59)(uint64_t *__return_ptr, uint64_t, uint64_t);
  void *result;
  uint64_t v61;
  uint64_t v62;
  void (*v63)(char *, uint64_t, uint64_t);
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  atomic_ullong *v70;
  uint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  atomic_ullong *v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  void (*v80)(char *, uint64_t);
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;

  uint64_t v85 = *(void *)(a6 - 8);
  uint64_t v15 = MEMORY[0x1F4188790](a1);
  uint64_t v72 = (char *)&v72 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v15);
  uint64_t v73 = (char *)&v72 - v17;
  uint64_t v19 = *(void *)(*(void *)(v18 + 8) + 8);
  uint64_t v20 = *(uint64_t (**)(uint64_t, uint64_t))(v19 + 112);
  uint64_t v86 = v7;
  uint64_t v22 = v20(v21, v19);
  uint64_t v23 = *a1;
  atomic_ullong v24 = (*a1)[2];
  BOOL v25 = __OFSUB__(v24, a2);
  atomic_ullong v26 = v24 - a2;
  if (v25)
  {
    __break(1u);
    goto LABEL_27;
  }
  uint64_t v27 = v26 - a3;
  if (__OFSUB__(v26, a3))
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  uint64_t v28 = v22;
  uint64_t v29 = v22 - a2;
  if (__OFSUB__(v22, a2))
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  BOOL v25 = __OFSUB__(v29, v27);
  uint64_t v30 = v29 - v27;
  if (v25)
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  unint64_t v74 = v27;
  uint64_t v82 = v30;
  v79 = a5;
  unint64_t v80 = a4;
  uint64_t v31 = v19;
  AssociatedTypeWitness = (unint64_t *)swift_getAssociatedTypeWitness(0, *(int ***)(v19 + 8), a6, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
  uint64_t v33 = *(AssociatedTypeWitness - 1);
  unint64_t v34 = (*(unsigned __int8 *)(v33 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v33 + 80);
  unint64_t v76 = v23;
  uint64_t v35 = (char *)v23 + v34;
  uint64_t v36 = *(void *)(v33 + 72);
  uint64_t v37 = v36 * a2;
  uint64_t v38 = a3;
  uint64_t v81 = v35;
  uint64_t v39 = &v35[v36 * a2];
  unint64_t v78 = v38;
  uint64_t v77 = &v39[v36 * v38];
  BOOL v40 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a7 + 56);
  uint64_t v75 = v28;
  uint64_t v41 = v28;
  uint64_t v42 = v86;
  uint64_t v43 = v40(v41, a6, a7);
  uint64_t v44 = a7;
  int64_t v83 = v31;
  int64_t v84 = a7;
  if (v43)
  {
    uint64_t v45 = v43;
    uint64_t v46 = (*(uint64_t (**)(uint64_t))(v44 + 144))(a6);
    if (!v36) {
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Division by zero", 16, 2, "Swift/IntegerTypes.swift", 24, 2, 0x3829uLL, 0);
    }
    uint64_t v47 = (char *)v46;
    uint64_t v48 = v45 + v34;
    uint64_t v49 = v46 - v48;
    if (v46 - v48 != 0x8000000000000000 || v36 != -1)
    {
      if (v49 / v36 < 0) {
        goto LABEL_25;
      }
      swift_arrayDestroy(v48, v49 / v36, AssociatedTypeWitness);
      UnsafeMutablePointer.moveInitialize(from:count:)(v47, a2, v81, AssociatedTypeWitness);
      if (v82 < 0) {
        goto LABEL_25;
      }
      int64_t v51 = &v47[v37];
      uint64_t v52 = (uint64_t)&v47[v37];
      uint64_t v53 = v82;
      swift_arrayDestroy(v52, v82, AssociatedTypeWitness);
      v80(v39, v78);
      UnsafeMutablePointer.moveInitialize(from:count:)(&v51[v36 * v53], v74, v77, AssociatedTypeWitness);
      uint64_t v54 = (uint64_t)&v47[v36 * v75];
      uint64_t v55 = v48 + *(void *)(v45 + 16) * v36 - v54;
      if (v55 != 0x8000000000000000 || v36 != -1)
      {
        if (((v55 / v36) & 0x8000000000000000) == 0)
        {
          swift_arrayDestroy(v54, v55 / v36, AssociatedTypeWitness);
          *(void *)(v45 + 16) = 0;
          swift_release(v45);
          uint64_t v58 = v83;
          uint64_t v57 = v84;
          unint64_t v59 = *(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v83 + 64);
LABEL_24:
          uint64_t v70 = v76;
          swift_retain(v76);
          Swift::String v71 = v86;
          v59(&v87, a6, v58);
          (*(void (**)(uint64_t, uint64_t))(v85 + 8))(v71, a6);
          return (void *)(*(uint64_t (**)(atomic_ullong *, uint64_t, uint64_t, uint64_t))(v57 + 32))(v70, v87, a6, v57);
        }
LABEL_25:
        _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeMutablePointer.deinitialize with negative count", 53, 2, "Swift/UnsafePointer.swift", 25, 2, 0x493uLL, 0);
      }
    }
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Division results in an overflow", 31, 2, "Swift/IntegerTypes.swift", 24, 2, 0x3830uLL, 0);
  }
  unint64_t v59 = *(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v31 + 64);
  uint64_t result = ((void *(*)(uint64_t *__return_ptr, uint64_t, uint64_t))v59)(&v87, a6, v31);
  unint64_t v61 = v87;
  BOOL v25 = __OFADD__(v87, a2);
  uint64_t v62 = v87 + a2;
  if (v25)
  {
    __break(1u);
  }
  else
  {
    uint64_t v63 = *(void (**)(char *, uint64_t, uint64_t))(v85 + 16);
    v63(v73, v42, a6);
    if (v62 < v61) {
      goto LABEL_30;
    }
    Swift::Int v64 = v81;
    uint64_t v81 = *(char **)(v84 + 48);
    uint64_t v65 = ((uint64_t (*)(uint64_t, uint64_t, char *, uint64_t))v81)(v61, v62, v64, a6);
    uint64_t result = (void *)((uint64_t (*)(uint64_t, uint64_t))v80)(v65, v78);
    unint64_t v66 = v62 + v82;
    if (!__OFADD__(v62, v82))
    {
      uint64_t v67 = v86;
      (*(void (**)(uint64_t *__return_ptr, uint64_t))(v83 + 72))(&v87, a6);
      uint64_t v68 = v87;
      v63(v72, v67, a6);
      if (v68 >= v66)
      {
        uint64_t v69 = v66;
        uint64_t v57 = v84;
        ((void (*)(uint64_t, uint64_t, char *, uint64_t, uint64_t))v81)(v69, v68, v77, a6, v84);
        uint64_t v58 = v83;
        goto LABEL_24;
      }
LABEL_30:
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
    }
  }
  __break(1u);
  return result;
}

__objc2_class **specialized Array._makeUniqueAndReserveCapacityIfNotUnique()()
{
  uint64_t v1 = *v0;
  uint64_t result = (__objc2_class **)swift_isUniquelyReferenced_nonNull_native(*v0);
  *uint64_t v0 = v1;
  if ((result & 1) == 0)
  {
    uint64_t result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v1 + 16) + 1, 1, v1);
    *uint64_t v0 = (uint64_t)result;
  }
  return result;
}

uint64_t specialized Array._makeUniqueAndReserveCapacityIfNotUnique()()
{
  return specialized Array._makeUniqueAndReserveCapacityIfNotUnique()((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
}

{
  return specialized Array._makeUniqueAndReserveCapacityIfNotUnique()((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t result;
  id v3;
  void *v4;

  uint64_t v1 = *v0;
  uint64_t result = swift_isUniquelyReferenced_nonNull_bridgeObject(*v0);
  *uint64_t v0 = v1;
  if ((result & 1) == 0 || v1 < 0 || (v1 & 0x4000000000000000) != 0)
  {
    if ((unint64_t)v1 >> 62)
    {
      if (v1 < 0) {
        uint64_t v4 = (void *)v1;
      }
      else {
        uint64_t v4 = (void *)(v1 & 0xFFFFFFFFFFFFFF8);
      }
      uint64_t v3 = [v4 sel_count];
    }
    else
    {
      uint64_t v3 = *(id *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    uint64_t result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, (uint64_t)v3 + 1, 1, v1);
    *uint64_t v0 = result;
  }
  return result;
}

uint64_t specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(uint64_t (*a1)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v3 = *v1;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native(*v1);
  *uint64_t v1 = v3;
  if (!result)
  {
    uint64_t result = a1(result, *(void *)(v3 + 16) + 1, 1, v3);
    *uint64_t v1 = result;
  }
  return result;
}

Swift::Void __swiftcall Array._makeUniqueAndReserveCapacityIfNotUnique()()
{
  uint64_t v2 = *(uint64_t **)(v0 + 16);
  BOOL isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType((uint64_t)v2, v2);
  uint64_t v4 = *v1;
  if (isClassOrObjCExistentialType)
  {
    char isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(*v1);
    *uint64_t v1 = v4;
    if ((isUniquelyReferenced_nonNull_bridgeObject & 1) == 0
      || _swift_isClassOrObjCExistentialType((uint64_t)v2, v2) && (v4 < 0 || (v4 & 0x4000000000000000) != 0))
    {
      goto LABEL_6;
    }
  }
  else
  {
    BOOL isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v1);
    *uint64_t v1 = v4;
    if (!isUniquelyReferenced_nonNull_native)
    {
LABEL_6:
      Swift::Int v6 = Array._getCount()();
      *uint64_t v1 = _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6 + 1, 1, v4, v2);
    }
  }
}

Swift::Void __swiftcall Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(Swift::Int oldCount)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *(uint64_t **)(v1 + 16);
  BOOL isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType((uint64_t)v5, v5);
  uint64_t v7 = v4 & 0xFFFFFFFFFFFFFF8;
  if (!isClassOrObjCExistentialType) {
    uint64_t v7 = v4;
  }
  unint64_t v8 = *(void *)(v7 + 24);
  if (oldCount + 1 > (uint64_t)(v8 >> 1)) {
    *uint64_t v2 = _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v8 > 1, oldCount + 1, 1, *v2, v5);
  }
}

uint64_t specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *v3;
  *(void *)(v4 + 16) = result + 1;
  uint64_t v5 = v4 + 16 * result;
  *(void *)(v5 + 32) = a2;
  *(void *)(v5 + 40) = a3;
  return result;
}

_OWORD *specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(uint64_t a1, _OWORD *a2)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 16) = a1 + 1;
  return outlined init with take of Any(a2, (_OWORD *)(v3 + 32 * a1 + 32));
}

uint64_t specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(uint64_t result, uint64_t a2)
{
  uint64_t v3 = *v2 & 0xFFFFFFFFFFFFFF8;
  *(void *)(v3 + 16) = result + 1;
  *(void *)(v3 + 8 * result + 32) = a2;
  return result;
}

uint64_t Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = a1 + 1;
  uint64_t v7 = *v3;
  unint64_t v8 = *(uint64_t **)(a3 + 16);
  if (_swift_isClassOrObjCExistentialType((uint64_t)v8, v8))
  {
    uint64_t v9 = v7 & 0xFFFFFFFFFFFFFF8;
    *(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10) = v6;
  }
  else
  {
    *(void *)(v7 + 16) = v6;
    uint64_t v9 = v7 & 0xFFFFFFFFFFFFFF8;
  }
  if (_swift_isClassOrObjCExistentialType((uint64_t)v8, v8)) {
    uint64_t v10 = v9;
  }
  else {
    uint64_t v10 = v7;
  }
  uint64_t v11 = *(v8 - 1);
  uint64_t v12 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t *))(v11 + 32);
  unint64_t v13 = v10
      + ((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80))
      + *(void *)(v11 + 72) * a1;

  return v12(v13, a2, v8);
}

__objc2_class **specialized Array.append(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *v2;
  uint64_t result = (__objc2_class **)swift_isUniquelyReferenced_nonNull_native(*v2);
  *uint64_t v2 = v5;
  if ((result & 1) == 0)
  {
    uint64_t result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v5 + 16) + 1, 1, v5);
    uint64_t v5 = (uint64_t)result;
    *uint64_t v2 = (uint64_t)result;
  }
  unint64_t v8 = *(void *)(v5 + 16);
  unint64_t v7 = *(void *)(v5 + 24);
  if (v8 >= v7 >> 1)
  {
    uint64_t result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((__objc2_class **)(v7 > 1), v8 + 1, 1, v5);
    uint64_t v5 = (uint64_t)result;
  }
  *(void *)(v5 + 16) = v8 + 1;
  uint64_t v9 = v5 + 16 * v8;
  *(void *)(v9 + 32) = a1;
  *(void *)(v9 + 40) = a2;
  *uint64_t v2 = v5;
  return result;
}

_OWORD *specialized Array.append(_:)(_OWORD *a1)
{
  uint64_t v3 = *v1;
  BOOL isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v1);
  *uint64_t v1 = v3;
  if (!isUniquelyReferenced_nonNull_native)
  {
    uint64_t v3 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v3 + 16) + 1, 1, v3);
    *uint64_t v1 = v3;
  }
  unint64_t v6 = *(void *)(v3 + 16);
  unint64_t v5 = *(void *)(v3 + 24);
  if (v6 >= v5 >> 1)
  {
    uint64_t v3 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((__objc2_class **)(v5 > 1), v6 + 1, 1, v3);
    *uint64_t v1 = v3;
  }
  *(void *)(v3 + 16) = v6 + 1;
  uint64_t result = outlined init with take of Any(a1, (_OWORD *)(v3 + 32 * v6 + 32));
  *uint64_t v1 = v3;
  return result;
}

uint64_t Array.append(_:)(uint64_t a1, uint64_t a2)
{
  Array._makeUniqueAndReserveCapacityIfNotUnique()();
  uint64_t v5 = *v2;
  BOOL isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType(*(void *)(a2 + 16), *(uint64_t **)(a2 + 16));
  uint64_t v7 = v5 & 0xFFFFFFFFFFFFFF8;
  if (!isClassOrObjCExistentialType) {
    uint64_t v7 = v5;
  }
  Swift::Int v8 = *(void *)(v7 + 16);
  Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(v8);

  return Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v8, a1, a2);
}

int64_t specialized Array.append<A>(contentsOf:)(uint64_t a1)
{
  int64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = (__objc2_class **)*v1;
  int64_t v5 = *(void *)(*v1 + 16);
  int64_t v6 = v5 + v3;
  if (__OFADD__(v5, v3))
  {
    __break(1u);
    goto LABEL_17;
  }
  BOOL isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v1);
  *uint64_t v1 = (uint64_t)v4;
  if (!isUniquelyReferenced_nonNull_native || (int64_t v9 = (unint64_t)v4[3] >> 1, v9 < v6))
  {
    if (v5 <= v6) {
      int64_t v10 = v5 + v3;
    }
    else {
      int64_t v10 = v5;
    }
    uint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((__objc2_class **)isUniquelyReferenced_nonNull_native, v10, 1, (uint64_t)v4);
    *uint64_t v1 = (uint64_t)v4;
    int64_t v9 = (unint64_t)v4[3] >> 1;
  }
  uint64_t v11 = v4[2];
  uint64_t v12 = v9 - (void)v11;
  if (v9 - (uint64_t)v11 < 0) {
LABEL_17:
  }
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeMutableBufferPointer with negative count", 46, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x47uLL, 0);
  int64_t result = specialized Sequence._copySequenceContents(initializing:)(v40, &v4[2 * (void)v11 + 4], v12, a1);
  if (result < v3) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "newElements.underestimatedCount was an overestimate", 51, 2, "Swift/Array.swift", 17, 2, 0x4DEuLL, 0);
  }
  if (result)
  {
    uint64_t v15 = v4[2];
    BOOL v16 = __OFADD__(v15, result);
    uint64_t v17 = (__objc2_class *)((char *)v15 + result);
    if (v16)
    {
      __break(1u);
      goto LABEL_49;
    }
    v4[2] = v17;
  }
  if (result != v12)
  {
    uint64_t v18 = v40[0];
LABEL_15:
    int64_t result = outlined consume of [A : B].Iterator._Variant<A, B>(v18);
    *uint64_t v1 = (uint64_t)v4;
    return result;
  }
  uint64_t v2 = (uint64_t)v4[2];
  int64_t v3 = v40[0];
  uint64_t v39 = v40[1];
  uint64_t v14 = v41;
  int64_t v6 = v42;
  if (v43)
  {
    unint64_t v19 = (v43 - 1) & v43;
    unint64_t v20 = __clz(__rbit64(v43)) | (v42 << 6);
    int64_t v38 = (unint64_t)(v41 + 64) >> 6;
    goto LABEL_21;
  }
LABEL_49:
  int64_t v34 = v6 + 1;
  if (__OFADD__(v6, 1)) {
    goto LABEL_65;
  }
  int64_t v38 = (unint64_t)(v14 + 64) >> 6;
  if (v34 >= v38)
  {
    uint64_t v18 = v3;
    goto LABEL_15;
  }
  unint64_t v35 = *(void *)(v39 + 8 * v34);
  int64_t v36 = v6 + 1;
  if (v35) {
    goto LABEL_52;
  }
  int64_t v36 = v6 + 2;
  if (v6 + 2 >= v38) {
    goto LABEL_46;
  }
  unint64_t v35 = *(void *)(v39 + 8 * v36);
  if (!v35)
  {
    int64_t v36 = v6 + 3;
    if (v6 + 3 >= v38) {
      goto LABEL_46;
    }
    unint64_t v35 = *(void *)(v39 + 8 * v36);
    if (!v35)
    {
      int64_t v36 = v6 + 4;
      if (v6 + 4 < v38)
      {
        unint64_t v35 = *(void *)(v39 + 8 * v36);
        if (!v35)
        {
          int64_t v37 = v6 + 5;
          do
          {
            if (v38 == v37) {
              goto LABEL_46;
            }
            unint64_t v35 = *(void *)(v39 + 8 * v37++);
          }
          while (!v35);
          int64_t v36 = v37 - 1;
        }
        goto LABEL_52;
      }
LABEL_46:
      uint64_t v18 = v3;
      goto LABEL_15;
    }
  }
LABEL_52:
  unint64_t v19 = (v35 - 1) & v35;
  unint64_t v20 = __clz(__rbit64(v35)) + (v36 << 6);
  int64_t v6 = v36;
LABEL_21:
  uint64_t v21 = (__objc2_class **)(*(void *)(v3 + 48) + 16 * v20);
  uint64_t v23 = *v21;
  unint64_t v22 = (unint64_t)v21[1];
  int64_t v42 = v6;
  unint64_t v43 = v19;
  int64_t result = swift_bridgeObjectRetain(v22);
  while (1)
  {
    unint64_t v24 = (unint64_t)v4[3];
    int64_t v25 = v24 >> 1;
    if ((uint64_t)(v24 >> 1) < v2 + 1) {
      break;
    }
    if (v2 < v25) {
      goto LABEL_28;
    }
LABEL_22:
    v4[2] = (__objc2_class *)v2;
  }
  int64_t result = (int64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((__objc2_class **)(v24 > 1), v2 + 1, 1, (uint64_t)v4);
  uint64_t v4 = (__objc2_class **)result;
  *uint64_t v1 = result;
  int64_t v25 = *(void *)(result + 24) >> 1;
  if (v2 >= v25) {
    goto LABEL_22;
  }
  while (1)
  {
LABEL_28:
    uint64_t v29 = &v4[2 * v2 + 4];
    *uint64_t v29 = v23;
    v29[1] = (__objc2_class *)v22;
    ++v2;
    if (v19)
    {
      unint64_t v26 = __clz(__rbit64(v19));
      v19 &= v19 - 1;
      unint64_t v27 = v26 | (v6 << 6);
      goto LABEL_27;
    }
    int64_t v30 = v6 + 1;
    if (__OFADD__(v6, 1)) {
      break;
    }
    if (v30 >= v38) {
      goto LABEL_45;
    }
    unint64_t v31 = *(void *)(v39 + 8 * v30);
    int64_t v32 = v6 + 1;
    if (!v31)
    {
      int64_t v32 = v6 + 2;
      if (v6 + 2 >= v38) {
        goto LABEL_45;
      }
      unint64_t v31 = *(void *)(v39 + 8 * v32);
      if (!v31)
      {
        int64_t v32 = v6 + 3;
        if (v6 + 3 >= v38) {
          goto LABEL_45;
        }
        unint64_t v31 = *(void *)(v39 + 8 * v32);
        if (!v31)
        {
          int64_t v32 = v6 + 4;
          if (v6 + 4 >= v38) {
            goto LABEL_45;
          }
          unint64_t v31 = *(void *)(v39 + 8 * v32);
          if (!v31)
          {
            int64_t v33 = v6 + 5;
            while (v38 != v33)
            {
              unint64_t v31 = *(void *)(v39 + 8 * v33++);
              if (v31)
              {
                int64_t v32 = v33 - 1;
                goto LABEL_42;
              }
            }
LABEL_45:
            v4[2] = (__objc2_class *)v2;
            goto LABEL_46;
          }
        }
      }
    }
LABEL_42:
    unint64_t v19 = (v31 - 1) & v31;
    unint64_t v27 = __clz(__rbit64(v31)) + (v32 << 6);
    int64_t v6 = v32;
LABEL_27:
    uint64_t v28 = (__objc2_class **)(*(void *)(v3 + 48) + 16 * v27);
    uint64_t v23 = *v28;
    unint64_t v22 = (unint64_t)v28[1];
    int64_t result = swift_bridgeObjectRetain(v22);
    if (v2 >= v25) {
      goto LABEL_22;
    }
  }
  __break(1u);
LABEL_65:
  __break(1u);
  return result;
}

void specialized Array.append<A>(contentsOf:)(unint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 16);
  int64_t v3 = (__objc2_class **)*v1;
  int64_t v4 = *(void *)(*v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
    goto LABEL_17;
  }
  BOOL isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v1);
  *uint64_t v1 = (uint64_t)v3;
  if (!isUniquelyReferenced_nonNull_native || (int64_t v8 = (unint64_t)v3[3] >> 1, v8 < v5))
  {
    if (v4 <= v5) {
      int64_t v9 = v4 + v2;
    }
    else {
      int64_t v9 = v4;
    }
    int64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((__objc2_class **)isUniquelyReferenced_nonNull_native, v9, 1, (uint64_t)v3);
    *uint64_t v1 = (uint64_t)v3;
    int64_t v8 = (unint64_t)v3[3] >> 1;
  }
  int64_t v10 = v3[2];
  uint64_t v11 = v8 - (void)v10;
  if (v11 < 0) {
LABEL_17:
  }
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeMutableBufferPointer with negative count", 46, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x47uLL, 0);
  unint64_t v12 = *(void *)(a1 + 16);
  if (!v12)
  {
    swift_bridgeObjectRelease(a1);
    if (!v2) {
      goto LABEL_15;
    }
LABEL_18:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "newElements.underestimatedCount was an overestimate", 51, 2, "Swift/Array.swift", 17, 2, 0x4DEuLL, 0);
  }
  if (v11 < v12) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Insufficient space allocated to copy array contents", 51, 2, "Swift/Array.swift", 17, 2, 0x694uLL, 0);
  }
  unint64_t v13 = (char *)&v3[4 * (void)v10 + 4];
  swift_bridgeObjectRetain(a1);
  specialized UnsafeMutablePointer.initialize(from:count:)((char *)(a1 + 32), v12, v13);
  swift_bridgeObjectRelease_n(a1, 2);
  if (v12 < v2) {
    goto LABEL_18;
  }
  uint64_t v14 = v3[2];
  BOOL v15 = __OFADD__(v14, v12);
  BOOL v16 = (__objc2_class *)((char *)v14 + v12);
  if (!v15)
  {
    v3[2] = v16;
LABEL_15:
    *uint64_t v1 = (uint64_t)v3;
    return;
  }
  __break(1u);
}

{
  uint64_t *v1;
  unint64_t v2;
  __objc2_class **v3;
  int64_t v4;
  int64_t v5;
  BOOL isUniquelyReferenced_nonNull_native;
  int64_t v8;
  int64_t v9;
  __objc2_class *v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  __objc2_class *v14;
  BOOL v15;
  __objc2_class *v16;

  unint64_t v2 = *(void *)(a1 + 16);
  int64_t v3 = (__objc2_class **)*v1;
  int64_t v4 = *(void *)(*v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
    goto LABEL_17;
  }
  BOOL isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v1);
  *uint64_t v1 = (uint64_t)v3;
  if (!isUniquelyReferenced_nonNull_native || (int64_t v8 = (unint64_t)v3[3] >> 1, v8 < v5))
  {
    if (v4 <= v5) {
      int64_t v9 = v4 + v2;
    }
    else {
      int64_t v9 = v4;
    }
    int64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((__objc2_class **)isUniquelyReferenced_nonNull_native, v9, 1, (uint64_t)v3);
    *uint64_t v1 = (uint64_t)v3;
    int64_t v8 = (unint64_t)v3[3] >> 1;
  }
  int64_t v10 = v3[2];
  uint64_t v11 = v8 - (void)v10;
  if (v11 < 0) {
LABEL_17:
  }
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeMutableBufferPointer with negative count", 46, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x47uLL, 0);
  unint64_t v12 = *(void *)(a1 + 16);
  if (!v12)
  {
    swift_bridgeObjectRelease(a1);
    if (!v2) {
      goto LABEL_15;
    }
LABEL_18:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "newElements.underestimatedCount was an overestimate", 51, 2, "Swift/Array.swift", 17, 2, 0x4DEuLL, 0);
  }
  if (v11 < v12) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Insufficient space allocated to copy array contents", 51, 2, "Swift/Array.swift", 17, 2, 0x694uLL, 0);
  }
  unint64_t v13 = (char *)&v3[2 * (void)v10 + 4];
  swift_bridgeObjectRetain(a1);
  specialized UnsafeMutablePointer.initialize(from:count:)((char *)(a1 + 32), v12, v13);
  swift_bridgeObjectRelease_n(a1, 2);
  if (v12 < v2) {
    goto LABEL_18;
  }
  uint64_t v14 = v3[2];
  BOOL v15 = __OFADD__(v14, v12);
  BOOL v16 = (__objc2_class *)((char *)v14 + v12);
  if (!v15)
  {
    v3[2] = v16;
LABEL_15:
    *uint64_t v1 = (uint64_t)v3;
    return;
  }
  __break(1u);
}

void specialized Array.append<A>(contentsOf:)(unint64_t a1, uint64_t *a2, uint64_t *a3)
{
  unint64_t v4 = *(void *)(a1 + 16);
  int64_t v5 = (__objc2_class **)*v3;
  int64_t v6 = *(void *)(*v3 + 16);
  int64_t v7 = v6 + v4;
  if (__OFADD__(v6, v4))
  {
    __break(1u);
    goto LABEL_17;
  }
  BOOL isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
  *int64_t v3 = (uint64_t)v5;
  if (!isUniquelyReferenced_nonNull_native || (int64_t v12 = (unint64_t)v5[3] >> 1, v12 < v7))
  {
    if (v6 <= v7) {
      int64_t v13 = v6 + v4;
    }
    else {
      int64_t v13 = v6;
    }
    int64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((__objc2_class **)isUniquelyReferenced_nonNull_native, v13, 1, (uint64_t)v5, a2, a3);
    *int64_t v3 = (uint64_t)v5;
    int64_t v12 = (unint64_t)v5[3] >> 1;
  }
  uint64_t v14 = v5[2];
  uint64_t v15 = v12 - (void)v14;
  if (v15 < 0) {
LABEL_17:
  }
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeMutableBufferPointer with negative count", 46, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x47uLL, 0);
  unint64_t v16 = *(void *)(a1 + 16);
  if (!v16)
  {
    swift_bridgeObjectRelease(a1);
    if (!v4) {
      goto LABEL_15;
    }
LABEL_18:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "newElements.underestimatedCount was an overestimate", 51, 2, "Swift/Array.swift", 17, 2, 0x4DEuLL, 0);
  }
  if (v15 < v16) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Insufficient space allocated to copy array contents", 51, 2, "Swift/Array.swift", 17, 2, 0x694uLL, 0);
  }
  uint64_t v17 = (char *)&v5[5 * (void)v14 + 4];
  swift_bridgeObjectRetain(a1);
  specialized UnsafeMutablePointer.initialize(from:count:)((char *)(a1 + 32), v16, v17, a3);
  swift_bridgeObjectRelease_n(a1, 2);
  if (v16 < v4) {
    goto LABEL_18;
  }
  uint64_t v18 = v5[2];
  BOOL v19 = __OFADD__(v18, v16);
  unint64_t v20 = (__objc2_class *)((char *)v18 + v16);
  if (!v19)
  {
    v5[2] = v20;
LABEL_15:
    *int64_t v3 = (uint64_t)v5;
    return;
  }
  __break(1u);
}

uint64_t Array.append<A>(contentsOf:)(void (*a1)(void, void), uint64_t a2, uint64_t a3, uint64_t a4)
{
  int64_t v5 = v4;
  uint64_t v107 = a2;
  int64_t v9 = *(uint64_t **)(a2 + 16);
  uint64_t v118 = *(v9 - 1);
  uint64_t v10 = MEMORY[0x1F4188790](a1);
  v108 = (char *)v100 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10);
  uint64_t v105 = (char *)v100 - v12;
  uint64_t v15 = type metadata accessor for Optional(0, (uint64_t)v9, v13, v14);
  uint64_t v16 = (uint64_t)*(v15 - 1);
  uint64_t v110 = v15;
  uint64_t v111 = v16;
  uint64_t v17 = MEMORY[0x1F4188790](v15);
  int64_t v112 = (char *)v100 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = MEMORY[0x1F4188790](v17);
  uint64_t v21 = (char *)v100 - v20;
  uint64_t v22 = MEMORY[0x1F4188790](v19);
  unint64_t v24 = (char *)v100 - v23;
  uint64_t v25 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](v22);
  uint64_t v115 = (char *)v100 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (int **)a4, a3, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Iterator);
  uint64_t v27 = *((void *)AssociatedTypeWitness - 1);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v29 = (char *)v100 - v28;
  int64_t v30 = *(uint64_t (**)(uint64_t, uint64_t))(a4 + 40);
  unint64_t v116 = a1;
  unint64_t v117 = (uint64_t *)a4;
  uint64_t v31 = v30(a3, a4);
  Swift::Int v32 = Array._getCount()();
  uint64_t v35 = v32 + v31;
  if (__OFADD__(v32, v31))
  {
    __break(1u);
    goto LABEL_40;
  }
  uint64_t v114 = v31;
  char v121 = v29;
  v106 = v21;
  type metadata accessor for _ArrayBuffer(0, (uint64_t)v9, v33, v34);
  Swift::Bool v36 = _ArrayBuffer.beginCOWMutation()();
  uint64_t v109 = v24;
  unint64_t v119 = v5;
  uint64_t v113 = v27;
  if (!v36
    || ((v37 = *v5, uint64_t v38 = *v5 & 0xFFFFFFFFFFFFFF8, !_swift_isClassOrObjCExistentialType((uint64_t)v9, v9))
      ? (uint64_t v39 = v37)
      : (uint64_t v39 = v37 & 0xFFFFFFFFFFFFFF8),
        v35 > *(void *)(v39 + 24) >> 1))
  {
    uint64_t v40 = *v5;
    if (_swift_isClassOrObjCExistentialType((uint64_t)v9, v9) && (v40 < 0 || (v40 & 0x4000000000000000) != 0))
    {
      if (v40 < 0) {
        Swift::String v99 = (void *)v40;
      }
      else {
        Swift::String v99 = (void *)(v40 & 0xFFFFFFFFFFFFFF8);
      }
      id v43 = [v99 count];
    }
    else
    {
      BOOL isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType((uint64_t)v9, v9);
      uint64_t v42 = v40 & 0xFFFFFFFFFFFFFF8;
      if (!isClassOrObjCExistentialType) {
        uint64_t v42 = v40;
      }
      id v43 = *(id *)(v42 + 16);
    }
    if ((uint64_t)v43 <= v35) {
      uint64_t v44 = v35;
    }
    else {
      uint64_t v44 = (uint64_t)v43;
    }
    uint64_t v37 = _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v36, v44, 1, v40, v9);
    *int64_t v5 = v37;
    uint64_t v38 = v37 & 0xFFFFFFFFFFFFFF8;
  }
  if (_swift_isClassOrObjCExistentialType((uint64_t)v9, v9)) {
    uint64_t v45 = v38;
  }
  else {
    uint64_t v45 = v37;
  }
  uint64_t v46 = *(void *)(v45 + 16);
  BOOL v47 = _swift_isClassOrObjCExistentialType((uint64_t)v9, v9);
  uint64_t v48 = *(unsigned __int8 *)(v118 + 80);
  Swift::Int v49 = *(void *)(v118 + 72);
  if (_swift_isClassOrObjCExistentialType((uint64_t)v9, v9)) {
    uint64_t v50 = v38;
  }
  else {
    uint64_t v50 = v37;
  }
  int64_t v51 = (char *)((*(void *)(v50 + 24) >> 1) - v46);
  if ((uint64_t)v51 < 0) {
LABEL_40:
  }
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeMutableBufferPointer with negative count", 46, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x47uLL, 0);
  if (v47) {
    uint64_t v52 = v38;
  }
  else {
    uint64_t v52 = v37;
  }
  uint64_t v53 = v52 + ((v48 + 32) & ~v48) + v49 * v46;
  uint64_t v54 = v116;
  (*(void (**)(char *, void (*)(void, void), uint64_t))(v25 + 16))(v115, v116, a3);
  uint64_t v55 = v121;
  uint64_t v56 = ((uint64_t (*)(char *, uint64_t, char *, uint64_t))v117[8])(v121, v53, v51, a3);
  if (v56 < v114) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "newElements.underestimatedCount was an overestimate", 51, 2, "Swift/Array.swift", 17, 2, 0x4DEuLL, 0);
  }
  uint64_t v57 = v56;
  Swift::Int v58 = v49;
  (*(void (**)(void, uint64_t))(v25 + 8))(v54, a3);
  unint64_t v59 = v119;
  if (v57 >= 1)
  {
    uint64_t v60 = *v119;
    uint64_t v61 = *v119 & 0xFFFFFFFFFFFFFF8;
    if (_swift_isClassOrObjCExistentialType((uint64_t)v9, v9)) {
      uint64_t v62 = v60 & 0xFFFFFFFFFFFFFF8;
    }
    else {
      uint64_t v62 = v60;
    }
    uint64_t v63 = *(void *)(v62 + 16);
    Swift::Int v64 = (Class *)(v63 + v57);
    if (__OFADD__(v63, v57))
    {
      __break(1u);
LABEL_48:
      unint64_t v117 = (uint64_t *)(v118 + 32);
      v100[0] = v118 + 8;
      uint64_t v115 = v51;
      v100[1] = v60;
      do
      {
        v116(v61, v64);
        Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(v58);
        uint64_t v80 = *(void *)v57;
        BOOL v81 = _swift_isClassOrObjCExistentialType((uint64_t)v9, v9);
        uint64_t v82 = v80 & 0xFFFFFFFFFFFFFF8;
        if (!v81) {
          uint64_t v82 = v80;
        }
        unint64_t v83 = *(void *)(v82 + 24);
        unint64_t v84 = _ArrayBuffer.firstElementAddress.getter(v80, v9);
        uint64_t v85 = v64;
        uint64_t v86 = v112;
        ((void (*)(char *, char *, Class *))v59)(v112, v55, v85);
        if (((unsigned int (*)(char *, uint64_t, uint64_t *))v51)(v86, 1, v9) == 1)
        {
          uint64_t v87 = v112;
LABEL_63:
          Swift::Int v64 = v110;
          v116(v87, v110);
          Swift::Int v88 = v58;
        }
        else
        {
          uint64_t v118 = *v117;
          if (v58 <= (uint64_t)(v83 >> 1)) {
            Swift::Int v88 = v83 >> 1;
          }
          else {
            Swift::Int v88 = v58;
          }
          unint64_t v89 = v84 + v114 * v58;
          Swift::Int v90 = v105;
          uint64_t v87 = v112;
          Swift::Int v104 = v88;
          while (1)
          {
            ((void (*)(char *, char *, uint64_t *))v118)(v90, v87, v9);
            if (v88 == v58) {
              break;
            }
            uint64_t v91 = v59;
            uint64_t v92 = a3;
            unint64_t v93 = v109;
            uint64_t v94 = v110;
            v116(v109, v110);
            uint64_t v95 = v108;
            char v96 = (void (*)(unint64_t, char *, uint64_t *))v118;
            ((void (*)(char *, char *, uint64_t *))v118)(v108, v90, v9);
            v96(v89, v95, v9);
            ++v58;
            v101(AssociatedTypeWitness, v103);
            uint64_t v87 = v112;
            uint64_t v97 = v93;
            a3 = v92;
            unint64_t v59 = v91;
            Swift::Int v88 = v104;
            ((void (*)(char *, char *, Class *))v59)(v112, v97, v94);
            int v98 = ((uint64_t (*)(char *, uint64_t, uint64_t *))v115)(v87, 1, v9);
            v89 += v114;
            if (v98 == 1) {
              goto LABEL_63;
            }
          }
          (*(void (**)(char *, uint64_t *))v100[0])(v90, v9);
          Swift::Int v58 = v88;
          Swift::Int v64 = v110;
        }
        uint64_t v57 = (uint64_t)v119;
        uint64_t v77 = *v119;
        BOOL v78 = _swift_isClassOrObjCExistentialType((uint64_t)v9, v9);
        uint64_t v79 = v77 & 0xFFFFFFFFFFFFFF8;
        if (!v78) {
          uint64_t v79 = v77;
        }
        *(void *)(v79 + 16) = v88;
        uint64_t v61 = (uint64_t)v106;
        uint64_t v55 = v109;
        ((void (*)(char *, char *, Class *))v59)(v106, v109, v64);
        int64_t v51 = v115;
      }
      while (((unsigned int (*)(uint64_t, uint64_t, uint64_t *))v115)(v61, 1, v9) != 1);
      goto LABEL_46;
    }
    if (_swift_isClassOrObjCExistentialType((uint64_t)v9, v9)) {
      uint64_t v65 = v60 & 0xFFFFFFFFFFFFFF8;
    }
    else {
      uint64_t v65 = v60;
    }
    *(void *)(v65 + 16) = v64;
  }
  if ((char *)v57 != v51 || a3 == v107) {
    return (*(uint64_t (**)(char *, const char *))(v113 + 8))(v55, AssociatedTypeWitness);
  }
  uint64_t v114 = v58;
  uint64_t v67 = *v59;
  BOOL v68 = _swift_isClassOrObjCExistentialType((uint64_t)v9, v9);
  uint64_t v69 = v67 & 0xFFFFFFFFFFFFFF8;
  if (!v68) {
    uint64_t v69 = v67;
  }
  Swift::Int v58 = *(void *)(v69 + 16);
  uint64_t v70 = AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness((uint64_t)v117, a3, (uint64_t)AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Sequence, associated conformance descriptor for Sequence.Sequence.Iterator: IteratorProtocol);
  uint64_t v72 = *(void (**)(const char *, uint64_t))(AssociatedConformanceWitness + 16);
  uint64_t v55 = v109;
  uint64_t v102 = AssociatedConformanceWitness + 16;
  uint64_t v103 = AssociatedConformanceWitness;
  uint64_t v101 = v72;
  ((void (*)(const char *))v72)(v70);
  uint64_t v57 = (uint64_t)v59;
  uint64_t v73 = v111;
  a3 = v111 + 16;
  unint64_t v59 = *(uint64_t **)(v111 + 16);
  uint64_t v61 = (uint64_t)v106;
  ((void (*)(char *, char *, Class *))v59)(v106, v55, v110);
  uint64_t v74 = v118 + 48;
  int64_t v51 = *(char **)(v118 + 48);
  unsigned int v75 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t *))v51)(v61, 1, v9);
  unint64_t v116 = *(void (**)(void, void))(v73 + 8);
  uint64_t v111 = v73 + 8;
  uint64_t v60 = v74;
  Swift::Int v64 = v110;
  if (v75 != 1) {
    goto LABEL_48;
  }
LABEL_46:
  unint64_t v76 = (uint64_t (*)(uint64_t, Class *))v116;
  v116(v55, v64);
  (*(void (**)(char *, const char *))(v113 + 8))(v121, AssociatedTypeWitness);
  return v76(v61, v64);
}

uint64_t UnsafeMutableBufferPointer.initialize<A>(from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  MEMORY[0x1F4188790]();
  (*(void (**)(char *))(v13 + 16))((char *)&v15 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a7 + 64))(a1, a3, a4, a6, a7);
}

uint64_t UnsafeMutableBufferPointer.startIndex.getter()
{
  return 0;
}

Swift::Int __swiftcall UnsafeMutableBufferPointer.distance(from:to:)(Swift::Int from, Swift::Int to)
{
  return UnsafeMutableBufferPointer.distance(from:to:)(from, to, v2, v3, v4, 0x129uLL);
}

BOOL == infix(_:_:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == a2;
  if (!a2) {
    BOOL v2 = a1 == 0;
  }
  if (a1) {
    return v2;
  }
  else {
    return a2 == 0;
  }
}

{
  return a1 == a2;
}

{
  return a1 == a2;
}

Swift::Void __swiftcall Array.reserveCapacityForAppend(newElementsCount:)(Swift::Int newElementsCount)
{
  Swift::Int v2 = Array._getCount()();
  BOOL v3 = __OFADD__(v2, newElementsCount);
  Swift::Int v4 = v2 + newElementsCount;
  if (v3)
  {
    __break(1u);
  }
  else
  {
    Array._reserveCapacityImpl(minimumCapacity:growForAppend:)(v4, 1);
  }
}

uint64_t specialized Array._customRemoveLast()()
{
  uint64_t v1 = *v0;
  BOOL isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v0);
  *uint64_t v0 = v1;
  if (!isUniquelyReferenced_nonNull_native)
  {
    uint64_t v1 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v1);
    *uint64_t v0 = v1;
    uint64_t v3 = *(void *)(v1 + 16);
    if (v3) {
      goto LABEL_3;
    }
LABEL_5:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't removeLast from an empty Array", 36, 2, "Swift/Array.swift", 17, 2, 0x51CuLL, 0);
  }
  uint64_t v3 = *(void *)(v1 + 16);
  if (!v3) {
    goto LABEL_5;
  }
LABEL_3:
  uint64_t v4 = v3 - 1;
  uint64_t v5 = v1 + 8 * v4;
  uint64_t v6 = *(unsigned int *)(v5 + 32);
  uint64_t v7 = *(unsigned __int16 *)(v5 + 36);
  *(void *)(v1 + 16) = v4;
  *uint64_t v0 = v1;
  return v6 | (v7 << 32);
}

{
  uint64_t *v0;
  uint64_t v1;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  uint64_t v1 = *v0;
  char isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(*v0);
  *uint64_t v0 = v1;
  if (!isUniquelyReferenced_nonNull_bridgeObject || v1 < 0 || (v1 & 0x4000000000000000) != 0)
  {
    uint64_t v1 = specialized _ArrayBuffer._consumeAndCreateNew()(v1);
    *uint64_t v0 = v1;
  }
  uint64_t v3 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v3) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't removeLast from an empty Array", 36, 2, "Swift/Array.swift", 17, 2, 0x51CuLL, 0);
  }
  uint64_t v4 = v3 - 1;
  int64_t result = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 8 * v4 + 0x20);
  *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10) = v4;
  *uint64_t v0 = v1;
  return result;
}

uint64_t Array._customRemoveLast()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  Array._makeMutableAndUnique()();
  uint64_t v5 = *v2;
  uint64_t v6 = *(uint64_t **)(a1 + 16);
  if (_swift_isClassOrObjCExistentialType((uint64_t)v6, v6)) {
    uint64_t v7 = v5 & 0xFFFFFFFFFFFFFF8;
  }
  else {
    uint64_t v7 = v5;
  }
  uint64_t v8 = *(void *)(v7 + 16);
  if (!v8) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't removeLast from an empty Array", 36, 2, "Swift/Array.swift", 17, 2, 0x51CuLL, 0);
  }
  uint64_t v9 = v8 - 1;
  if (_swift_isClassOrObjCExistentialType((uint64_t)v6, v6)) {
    uint64_t v10 = v5 & 0xFFFFFFFFFFFFFF8;
  }
  else {
    uint64_t v10 = v5;
  }
  uint64_t v14 = *(v6 - 1);
  (*(void (**)(uint64_t, unint64_t, uint64_t *))(v14 + 32))(a2, v10+ ((*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80))+ *(void *)(v14 + 72) * v9, v6);
  if (_swift_isClassOrObjCExistentialType((uint64_t)v6, v6)) {
    uint64_t v11 = v5 & 0xFFFFFFFFFFFFFF8;
  }
  else {
    uint64_t v11 = v5;
  }
  *(void *)(v11 + 16) = v9;
  uint64_t v12 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t *))(v14 + 56);

  return v12(a2, 0, 1, v6);
}

uint64_t UnsafeMutablePointer.move()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 32))(a3, a1, a2);
}

unint64_t specialized Array.remove(at:)(uint64_t a1)
{
  uint64_t v3 = *v1;
  BOOL isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v1);
  *uint64_t v1 = v3;
  if (!isUniquelyReferenced_nonNull_native)
  {
    uint64_t v3 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v3);
    *uint64_t v1 = v3;
  }
  uint64_t v5 = *(void *)(v3 + 16);
  if (v5 <= a1)
  {
    unint64_t v11 = 1339;
    goto LABEL_8;
  }
  if (a1 < 0)
  {
    unint64_t v11 = 1340;
LABEL_8:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Index out of range", 18, 2, "Swift/Array.swift", 17, 2, v11, 0);
  }
  uint64_t v6 = v5 - 1;
  uint64_t v7 = v3 + 8 * a1;
  unsigned int v8 = *(_DWORD *)(v7 + 32);
  v7 += 32;
  uint64_t v9 = *(unsigned __int16 *)(v7 + 4);
  specialized UnsafeMutablePointer.moveInitialize(from:count:)((char *)(v7 + 8), v5 - 1 - a1, (char *)v7);
  *(void *)(v3 + 16) = v6;
  *uint64_t v1 = v3;
  return v8 | (unint64_t)(v9 << 32);
}

uint64_t specialized Array.remove(at:)(uint64_t a1)
{
  uint64_t v3 = *v1;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(*v1);
  *uint64_t v1 = v3;
  if (!isUniquelyReferenced_nonNull_bridgeObject || v3 < 0 || (v3 & 0x4000000000000000) != 0)
  {
    uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew()(v3);
    *uint64_t v1 = v3;
  }
  uint64_t v5 = *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v5 <= a1)
  {
    unint64_t v11 = 1339;
    goto LABEL_10;
  }
  if (a1 < 0)
  {
    unint64_t v11 = 1340;
LABEL_10:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Index out of range", 18, 2, "Swift/Array.swift", 17, 2, v11, 0);
  }
  uint64_t v6 = v5 - 1;
  uint64_t v7 = v5 - 1 - a1;
  uint64_t v8 = (v3 & 0xFFFFFFFFFFFFFF8) + 8 * a1;
  uint64_t v9 = *(void *)(v8 + 0x20);
  specialized UnsafeMutablePointer.moveInitialize(from:count:)((char *)(v8 + 40), v7, (char *)(v8 + 32));
  *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10) = v6;
  *uint64_t v1 = v3;
  return v9;
}

BOOL Array.remove(at:)@<W0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  Array._makeMutableAndUnique()();
  uint64_t v7 = *v3;
  uint64_t v8 = *(uint64_t **)(a2 + 16);
  if (_swift_isClassOrObjCExistentialType((uint64_t)v8, v8)) {
    uint64_t v9 = v7 & 0xFFFFFFFFFFFFFF8;
  }
  else {
    uint64_t v9 = v7;
  }
  uint64_t v10 = *(void *)(v9 + 16);
  if (v10 <= a1)
  {
    unint64_t v17 = 1339;
    goto LABEL_15;
  }
  if (a1 < 0)
  {
    unint64_t v17 = 1340;
LABEL_15:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Index out of range", 18, 2, "Swift/Array.swift", 17, 2, v17, 0);
  }
  if (_swift_isClassOrObjCExistentialType((uint64_t)v8, v8)) {
    uint64_t v11 = v7 & 0xFFFFFFFFFFFFFF8;
  }
  else {
    uint64_t v11 = v7;
  }
  uint64_t v12 = *(v8 - 1);
  uint64_t v13 = *(void *)(v12 + 72);
  uint64_t v14 = (char *)(v11
               + ((*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80))
               + v13 * a1);
  (*(void (**)(uint64_t, char *, uint64_t *))(v12 + 32))(a3, v14, v8);
  UnsafeMutablePointer.moveInitialize(from:count:)(&v14[v13], v10 - 1 - a1, v14, (unint64_t *)v8);
  BOOL result = _swift_isClassOrObjCExistentialType((uint64_t)v8, v8);
  if (result) {
    uint64_t v16 = v7 & 0xFFFFFFFFFFFFFF8;
  }
  else {
    uint64_t v16 = v7;
  }
  *(void *)(v16 + 16) = v10 - 1;
  return result;
}

uint64_t Array.insert(_:at:)(uint64_t a1, Swift::Int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(a3 + 16);
  uint64_t v8 = (unint64_t *)type metadata accessor for CollectionOfOne(0, v7, a3, a4);
  MEMORY[0x1F4188790](v8);
  uint64_t v10 = (char *)&v13 - v9;
  Array._checkIndex(_:)(a2);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32))(v10, a1, v7);
  swift_getWitnessTable(protocol conformance descriptor for CollectionOfOne<A>, v8, v11);
  return Array.replaceSubrange<A>(_:with:)(a2, a2, (uint64_t)v10, a3);
}

Swift::Void __swiftcall Array.removeAll(keepingCapacity:)(Swift::Bool keepingCapacity)
{
  if (!keepingCapacity)
  {
    uint64_t v11 = *v2;
    *Swift::Int v2 = (uint64_t)&_swiftEmptyArrayStorage;
    goto LABEL_8;
  }
  uint64_t v3 = (unint64_t *)v1;
  uint64_t v4 = *(uint64_t **)(v1 + 16);
  BOOL isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType((uint64_t)v4, v4);
  uint64_t v6 = *v2;
  if (isClassOrObjCExistentialType)
  {
    if (v6 < 0 || (v6 & 0x4000000000000000) != 0 || (swift_isUniquelyReferenced_nonNull_bridgeObject(v6) & 1) == 0) {
      goto LABEL_6;
    }
LABEL_12:
    uint64_t WitnessTable = swift_getWitnessTable(protocol conformance descriptor for [A], v3, v7);
    RandomAccessCollection<>.indices.getter((uint64_t)v3, WitnessTable, (uint64_t)&protocol witness table for Int, (char *)v20);
    uint64_t v13 = v20[0];
    Swift::Int v14 = v20[1];
    unint64_t v17 = (unint64_t *)type metadata accessor for EmptyCollection(0, (uint64_t)v4, v15, v16);
    swift_getWitnessTable(protocol conformance descriptor for EmptyCollection<A>, v17, v18);
    Array.replaceSubrange<A>(_:with:)(v13, v14, v19, (uint64_t)v3);
    return;
  }
  if (swift_isUniquelyReferenced_nonNull_native(v6)) {
    goto LABEL_12;
  }
LABEL_6:
  Swift::Int v8 = Array._getCapacity()();
  uint64_t v9 = _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(0, v8, v4);
  uint64_t v10 = *v2;
  *Swift::Int v2 = (uint64_t)v9;
  uint64_t v11 = v10;
LABEL_8:

  swift_bridgeObjectRelease(v11);
}

void *Array.withUnsafeMutableBufferPointer<A>(_:)(void (*a1)(void *), uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[3] = a4;
  Array._makeMutableAndUnique()();
  uint64_t v7 = *v4;
  Swift::Int v8 = *(uint64_t **)(a3 + 16);
  if (_swift_isClassOrObjCExistentialType((uint64_t)v8, v8)) {
    uint64_t v9 = v7 & 0xFFFFFFFFFFFFFF8;
  }
  else {
    uint64_t v9 = v7;
  }
  uint64_t v10 = *(void *)(v9 + 16);
  if (_swift_isClassOrObjCExistentialType((uint64_t)v8, v8)) {
    uint64_t v11 = v7 & 0xFFFFFFFFFFFFFF8;
  }
  else {
    uint64_t v11 = v7;
  }
  v14[0] = v11
         + ((*(unsigned __int8 *)(*(v8 - 1) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(v8 - 1) + 80));
  uint64_t v12 = v14[0];
  v14[1] = v10;
  a1(v14);
  return $defer #1 <A><A1>() in Array.withUnsafeMutableBufferPointer<A>(_:)(v14, v12, v10);
}

char *specialized closure #1 in Array.withContiguousStorageIfAvailable<A>(_:)(char *result, uint64_t a2, uint64_t a3, uint64_t a4, void *__dst)
{
  if (a3 < 0 || a2 < a3)
  {
    unint64_t v6 = 188;
    goto LABEL_15;
  }
  uint64_t v5 = a3 + a4;
  if (__OFADD__(a3, a4))
  {
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeMutableRawPointer.copyMemory with negative count", 54, 2, "Swift/UnsafeRawPointer.swift", 28, 2, 0x60DuLL, 0);
  }
  if (v5 < 0 || v5 > a2)
  {
    unint64_t v6 = 192;
LABEL_15:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Array index out of range", 24, 2, "Swift/SwiftNativeNSArray.swift", 30, 2, v6, 0);
  }
  if (!a2) {
    return result;
  }
  if (!result) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/SwiftNativeNSArray.swift", 30, 2, 0xCBuLL, 0);
  }
  if ((unint64_t)(a4 - 0x1000000000000000) >> 61 != 7) {
    goto LABEL_18;
  }
  if (8 * a4 < 0) {
    goto LABEL_19;
  }

  return (char *)memmove(__dst, &result[8 * a3], 8 * a4);
}

uint64_t Array.withUnsafeBufferPointer<A>(_:)(uint64_t (*a1)(uint64_t, unint64_t), uint64_t a2, int64_t a3, uint64_t *a4)
{
  return _ArrayBuffer.withUnsafeBufferPointer<A>(_:)(a1, a2, a3, a4);
}

__objc2_class **specialized _copyCollectionToContiguousArray<A>(_:)(Swift::String::Index a1, Swift::String::Index a2, unint64_t a3, unint64_t a4)
{
  Swift::Int v8 = specialized Collection.count.getter(a1, a2, a3, a4);
  if (!v8) {
    return &_swiftEmptyArrayStorage;
  }
  uint64_t v9 = v8;
  uint64_t v10 = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(v8, 0);
  if (v9 < 0) {
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeMutableBufferPointer with negative count", 46, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x47uLL, 0);
  }
  uint64_t v11 = v10;
  uint64_t v12 = (uint64_t)(v10 + 4);
  swift_bridgeObjectRetain(a4);
  v13._Swift::UInt64 rawBits = a1._rawBits;
  uint64_t v14 = specialized Sequence._copySequenceContents(initializing:)(&v22, v12, v9, v13, a2._rawBits, a3, a4);
  if ((v23 ^ v26) >= 0x4000)
  {
    unint64_t v16 = v24;
    unint64_t v17 = v25;
    v18._Swift::UInt64 rawBits = v26;
    Substring.UTF8View.subscript.getter(v26, v22._rawBits, v23, v24, v25);
    uint64_t v19 = (v16 >> 59) & 1;
    if ((v17 & 0x1000000000000000) == 0) {
      LOBYTE(v19) = 1;
    }
    Swift::UInt64 rawBits = v18._rawBits;
    if ((v18._rawBits & 0xC) == 4 << v19)
    {
      Swift::UInt64 rawBits = _StringGuts._slowEnsureMatchingEncoding(_:)(v18)._rawBits;
      if ((v17 & 0x1000000000000000) == 0) {
        goto LABEL_14;
      }
    }
    else if ((v17 & 0x1000000000000000) == 0)
    {
      goto LABEL_14;
    }
    unint64_t v21 = HIBYTE(v17) & 0xF;
    if ((v17 & 0x2000000000000000) == 0) {
      unint64_t v21 = v16 & 0xFFFFFFFFFFFFLL;
    }
    if (v21 <= rawBits >> 16) {
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index is out of bounds", 29, 2, "Swift/StringUTF8View.swift", 26, 2, 0x90uLL, 0);
    }
    String.UTF8View._foreignIndex(after:)((Swift::String::Index)rawBits);
LABEL_14:
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "invalid Collection: more than 'count' elements in collection", 60, 2, "Swift/ContiguousArrayBuffer.swift", 33, 2, 0x45DuLL, 0);
  }
  if (v14 != v9) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "invalid Collection: less than 'count' elements in collection", 60, 2, "Swift/ContiguousArrayBuffer.swift", 33, 2, 0x462uLL, 0);
  }
  swift_bridgeObjectRelease(v25);
  return v11;
}

{
  Swift::String::Index v8;
  Swift::UInt64 rawBits;
  __objc2_class **v10;
  __objc2_class **v11;
  uint64_t v12;
  Swift::String::Index v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  Swift::String::Index v18;
  Swift::String::Index v19;
  Swift::String::Index v20;
  Swift::UInt64 v21;
  id v22;
  Swift::String::Index v23;
  Swift::String::Index v24;
  void v25[2];
  Swift::UInt64 v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  Swift::UInt64 v30;

  v8._Swift::UInt64 rawBits = specialized Collection.count.getter(a1, a2, a3, a4)._rawBits;
  if (v8._rawBits)
  {
    Swift::UInt64 rawBits = v8._rawBits;
    uint64_t v10 = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(v8._rawBits, 0, (uint64_t (*)(void))canonical specialized generic type metadata accessor for _ContiguousArrayStorage<Unicode.Scalar>);
    if ((rawBits & 0x8000000000000000) != 0) {
      _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeMutableBufferPointer with negative count", 46, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x47uLL, 0);
    }
    uint64_t v11 = v10;
    uint64_t v12 = (uint64_t)(v10 + 4);
    swift_bridgeObjectRetain(a4);
    v13._Swift::UInt64 rawBits = a1._rawBits;
    uint64_t v14 = specialized Sequence._copySequenceContents(initializing:)(&v26, v12, rawBits, v13, a2._rawBits, a3, a4);
    if ((v27 ^ v30) >= 0x4000)
    {
      unint64_t v17 = v28;
      unint64_t v16 = v29;
      v24._Swift::UInt64 rawBits = v30;
      v18._Swift::UInt64 rawBits = v30;
      v19._Swift::UInt64 rawBits = _StringGuts.validateScalarIndex(_:in:)(v18, v26, v27, v28, v29)._rawBits;
      if ((v16 & 0x1000000000000000) != 0)
      {
        _StringGuts.foreignErrorCorrectedScalar(startingAt:)((Swift::String::Index)(v19._rawBits & 0xFFFFFFFFFFFF0000));
        v23._Swift::UInt64 rawBits = _StringGuts.validateScalarIndex(_:)(v24)._rawBits;
        String.UnicodeScalarView._foreignIndex(after:)(v23);
      }
      else
      {
        unint64_t v21 = v19._rawBits >> 16;
        if ((v16 & 0x2000000000000000) != 0)
        {
          v25[0] = v17;
          v25[1] = v16 & 0xFFFFFFFFFFFFFFLL;
          _decodeScalar(_:startingAt:)((uint64_t)v25, v20._rawBits, v21);
          _StringGuts.validateScalarIndex(_:)(v24);
        }
        else
        {
          if ((v17 & 0x1000000000000000) != 0) {
            Swift::String::Index v22 = (id)((v16 & 0xFFFFFFFFFFFFFFFLL) + 32);
          }
          else {
            Swift::String::Index v22 = _StringObject.sharedUTF8.getter(v17, v16);
          }
          _decodeScalar(_:startingAt:)((uint64_t)v22, v20._rawBits, v21);
          _StringGuts.validateScalarIndex(_:)(v24);
          if ((v17 & 0x1000000000000000) == 0) {
            _StringObject.sharedUTF8.getter(v17, v16);
          }
        }
      }
      _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "invalid Collection: more than 'count' elements in collection", 60, 2, "Swift/ContiguousArrayBuffer.swift", 33, 2, 0x45DuLL, 0);
    }
    if (v14 != rawBits) {
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "invalid Collection: less than 'count' elements in collection", 60, 2, "Swift/ContiguousArrayBuffer.swift", 33, 2, 0x462uLL, 0);
    }
    swift_bridgeObjectRelease(v29);
  }
  else
  {
    return &_swiftEmptyArrayStorage;
  }
  return v11;
}

void *specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (unint64_t *)canonical specialized generic type metadata accessor for _ContiguousArrayStorage<UInt>();
  uint64_t v5 = swift_allocObject(v4, 0x30uLL, 7uLL);
  int64_t v6 = _swift_stdlib_malloc_size(v5);
  uint64_t v7 = v6 - 32;
  if (v6 < 32) {
    uint64_t v7 = v6 - 25;
  }
  v5[2] = 2;
  v5[3] = 2 * (v7 >> 3);
  v5[4] = a1;
  v5[5] = a2;
  return v5;
}

__objc2_class **specialized _copyCollectionToContiguousArray<A>(_:)(unsigned int a1)
{
  if (HIWORD(a1)) {
    unint64_t v2 = 2;
  }
  else {
    unint64_t v2 = 1;
  }
  unint64_t v3 = specialized RandomAccessCollection<>.distance(from:to:)(0, v2, a1);
  if (!v3) {
    return &_swiftEmptyArrayStorage;
  }
  uint64_t v4 = v3;
  uint64_t v5 = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(v3, 0);
  if (v4 < 0) {
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeMutableBufferPointer with negative count", 46, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x47uLL, 0);
  }
  int64_t v6 = v5;
  uint64_t v7 = specialized Sequence._copySequenceContents(initializing:)((uint64_t)&v10, (_WORD *)v5 + 16, v4, a1);
  unint64_t v8 = v11;
  if (HIWORD(v10))
  {
    if (v11 != 2)
    {
      Unicode.Scalar.UTF16View.subscript.getter(v11, v10);
      if (v8 >= 2) {
        goto LABEL_9;
      }
      goto LABEL_17;
    }
  }
  else if (v11 != 1)
  {
    Unicode.Scalar.UTF16View.subscript.getter(v11, v10);
    if (v8) {
LABEL_9:
    }
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Index out of bounds", 19, 2, "Swift/Collection.swift", 22, 2, 0x2CAuLL, 0);
LABEL_17:
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "invalid Collection: more than 'count' elements in collection", 60, 2, "Swift/ContiguousArrayBuffer.swift", 33, 2, 0x45DuLL, 0);
  }
  if (v7 != v4) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "invalid Collection: less than 'count' elements in collection", 60, 2, "Swift/ContiguousArrayBuffer.swift", 33, 2, 0x462uLL, 0);
  }
  return v6;
}

{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  __objc2_class **v7;
  __objc2_class **v8;
  uint64_t v9;
  unint64_t v10;
  unsigned int v12;
  unsigned int v13;
  unint64_t v14;

  unint64_t v2 = 2;
  unint64_t v3 = 3;
  if (a1 >= 0x10000) {
    unint64_t v3 = 4;
  }
  if (a1 > 0x7FF) {
    unint64_t v2 = v3;
  }
  if (a1 >= 0x80) {
    uint64_t v4 = v2;
  }
  else {
    uint64_t v4 = 1;
  }
  uint64_t v5 = specialized RandomAccessCollection<>.distance(from:to:)(0, v4, a1);
  if (!v5) {
    return &_swiftEmptyArrayStorage;
  }
  int64_t v6 = v5;
  uint64_t v7 = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(v5, 0);
  if (v6 < 0) {
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeMutableBufferPointer with negative count", 46, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x47uLL, 0);
  }
  unint64_t v8 = v7;
  uint64_t v9 = specialized Sequence._copySequenceContents(initializing:)((uint64_t)&v13, (unsigned char *)v7 + 32, v6, a1);
  unsigned int v10 = v14;
  if (v13 < 0x80)
  {
    if (v14 == 1) {
      goto LABEL_12;
    }
LABEL_18:
    uint64_t v12 = v13;
    Unicode.Scalar.UTF8View.subscript.getter(v14, v13);
    specialized RandomAccessCollection<>.index(after:)(v10, v12);
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "invalid Collection: more than 'count' elements in collection", 60, 2, "Swift/ContiguousArrayBuffer.swift", 33, 2, 0x45DuLL, 0);
  }
  if (v13 >= 0x800)
  {
    if (v13 >= 0x10000)
    {
      if (v14 != 4) {
        goto LABEL_18;
      }
    }
    else if (v14 != 3)
    {
      goto LABEL_18;
    }
  }
  else if (v14 != 2)
  {
    goto LABEL_18;
  }
LABEL_12:
  if (v9 != v6) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "invalid Collection: less than 'count' elements in collection", 60, 2, "Swift/ContiguousArrayBuffer.swift", 33, 2, 0x462uLL, 0);
  }
  return v8;
}

{
  uint64_t v1;
  __objc2_class **v2;
  uint64_t v4;
  uint64_t v5;
  unsigned int v7;

  uint64_t v1 = __clz(a1) >> 3;
  if (v1 == 4) {
    return &_swiftEmptyArrayStorage;
  }
  uint64_t v4 = 4 - v1;
  unint64_t v2 = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(4 - v1, 0);
  uint64_t v5 = specialized Sequence._copySequenceContents(initializing:)(&v7, (uint64_t)(v2 + 4), v4, a1);
  if (v7) {
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "invalid Collection: more than 'count' elements in collection", 60, 2, "Swift/ContiguousArrayBuffer.swift", 33, 2, 0x45DuLL, 0);
  }
  if (v5 != v4) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "invalid Collection: less than 'count' elements in collection", 60, 2, "Swift/ContiguousArrayBuffer.swift", 33, 2, 0x462uLL, 0);
  }
  return v2;
}

void *specialized _copyCollectionToContiguousArray<A>(_:)(unsigned int a1)
{
  unint64_t v2 = (unint64_t *)canonical specialized generic type metadata accessor for _ContiguousArrayStorage<UInt>();
  unint64_t v3 = swift_allocObject(v2, 0x28uLL, 7uLL);
  int64_t v4 = _swift_stdlib_malloc_size(v3);
  uint64_t v5 = v4 - 32;
  if (v4 < 32) {
    uint64_t v5 = v4 - 25;
  }
  v3[2] = 1;
  v3[3] = 2 * (v5 >> 3);
  v3[4] = a1;
  return v3;
}

void *specialized _copyCollectionToContiguousArray<A>(_:)(unsigned __int16 a1)
{
  unint64_t v2 = (unint64_t *)canonical specialized generic type metadata accessor for _ContiguousArrayStorage<UInt>();
  unint64_t v3 = swift_allocObject(v2, 0x28uLL, 7uLL);
  int64_t v4 = _swift_stdlib_malloc_size(v3);
  uint64_t v5 = v4 - 32;
  if (v4 < 32) {
    uint64_t v5 = v4 - 25;
  }
  v3[2] = 1;
  v3[3] = 2 * (v5 >> 3);
  v3[4] = a1;
  return v3;
}

void *specialized _copyCollectionToContiguousArray<A>(_:)(unsigned __int8 a1)
{
  unint64_t v2 = (unint64_t *)canonical specialized generic type metadata accessor for _ContiguousArrayStorage<UInt>();
  unint64_t v3 = swift_allocObject(v2, 0x28uLL, 7uLL);
  int64_t v4 = _swift_stdlib_malloc_size(v3);
  uint64_t v5 = v4 - 32;
  if (v4 < 32) {
    uint64_t v5 = v4 - 25;
  }
  v3[2] = 1;
  v3[3] = 2 * (v5 >> 3);
  v3[4] = a1;
  return v3;
}

void *specialized _copyCollectionToContiguousArray<A>(_:)(int a1)
{
  unint64_t v2 = (unint64_t *)canonical specialized generic type metadata accessor for _ContiguousArrayStorage<UInt>();
  unint64_t v3 = swift_allocObject(v2, 0x28uLL, 7uLL);
  int64_t v4 = _swift_stdlib_malloc_size(v3);
  uint64_t v5 = v4 - 32;
  if (v4 < 32) {
    uint64_t v5 = v4 - 25;
  }
  v3[2] = 1;
  v3[3] = 2 * (v5 >> 3);
  v3[4] = a1;
  return v3;
}

void *specialized _copyCollectionToContiguousArray<A>(_:)(__int16 a1)
{
  unint64_t v2 = (unint64_t *)canonical specialized generic type metadata accessor for _ContiguousArrayStorage<UInt>();
  unint64_t v3 = swift_allocObject(v2, 0x28uLL, 7uLL);
  int64_t v4 = _swift_stdlib_malloc_size(v3);
  uint64_t v5 = v4 - 32;
  if (v4 < 32) {
    uint64_t v5 = v4 - 25;
  }
  v3[2] = 1;
  v3[3] = 2 * (v5 >> 3);
  v3[4] = a1;
  return v3;
}

void *specialized _copyCollectionToContiguousArray<A>(_:)(char a1)
{
  unint64_t v2 = (unint64_t *)canonical specialized generic type metadata accessor for _ContiguousArrayStorage<UInt>();
  unint64_t v3 = swift_allocObject(v2, 0x28uLL, 7uLL);
  int64_t v4 = _swift_stdlib_malloc_size(v3);
  uint64_t v5 = v4 - 32;
  if (v4 < 32) {
    uint64_t v5 = v4 - 25;
  }
  v3[2] = 1;
  v3[3] = 2 * (v5 >> 3);
  v3[4] = a1;
  return v3;
}

__objc2_class **specialized _copyCollectionToContiguousArray<A>(_:)(void *a1)
{
  uint64_t v2 = specialized RandomAccessCollection<>.distance(from:to:)(0, (uint64_t)[a1 count], a1);
  if (!v2) {
    return &_swiftEmptyArrayStorage;
  }
  uint64_t v3 = v2;
  int64_t v4 = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(v2, 0);
  if (v3 < 0) {
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeMutableBufferPointer with negative count", 46, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x47uLL, 0);
  }
  uint64_t v5 = v4;
  uint64_t v6 = specialized RandomAccessCollection<>.distance(from:to:)(0, (uint64_t)[a1 count], a1);
  if (v3 >= v6) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = v3;
  }
  if (v7 < 0) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
  }
  uint64_t v8 = v6;
  swift_unknownObjectRetain(a1);
  specialized _CocoaArrayWrapper._copyContents(subRange:initializing:)(0, v7, (void **)v5 + 4, a1);
  swift_unknownObjectRelease(a1);
  if ((id)v7 != objc_msgSend(a1, sel_count))
  {
    id v10 = [a1 objectAtIndex:v7];
    specialized RandomAccessCollection<>.index(after:)(v7, a1);
    swift_unknownObjectRelease(v10);
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "invalid Collection: more than 'count' elements in collection", 60, 2, "Swift/ContiguousArrayBuffer.swift", 33, 2, 0x45DuLL, 0);
  }
  if (v3 > v8) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "invalid Collection: less than 'count' elements in collection", 60, 2, "Swift/ContiguousArrayBuffer.swift", 33, 2, 0x462uLL, 0);
  }
  return v5;
}

__objc2_class **specialized _copyCollectionToContiguousArray<A>(_:)(unint64_t a1, unint64_t a2)
{
  uint64_t v2 = HIBYTE(a2) & 0xF;
  if (!v2) {
    return &_swiftEmptyArrayStorage;
  }
  uint64_t v5 = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(HIBYTE(a2) & 0xF, 0);
  uint64_t v6 = specialized Sequence._copySequenceContents(initializing:)(&v9, (uint64_t)(v5 + 4), v2, a1, a2);
  unint64_t v7 = v10 & 0xF;
  if (v11 != v7)
  {
    if (v11 < v7) {
      _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "invalid Collection: more than 'count' elements in collection", 60, 2, "Swift/ContiguousArrayBuffer.swift", 33, 2, 0x45DuLL, 0);
    }
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Index out of bounds", 19, 2, "Swift/Collection.swift", 22, 2, 0x2CAuLL, 0);
  }
  if (v6 != v2) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "invalid Collection: less than 'count' elements in collection", 60, 2, "Swift/ContiguousArrayBuffer.swift", 33, 2, 0x462uLL, 0);
  }
  return v5;
}

{
  uint64_t v4;
  __objc2_class **v5;
  __objc2_class **v6;
  uint64_t v7;
  char v8;

  if ((a2 & 0x1000000000000000) == 0)
  {
    if ((a2 & 0x2000000000000000) != 0) {
      int64_t v4 = HIBYTE(a2) & 0xF;
    }
    else {
      int64_t v4 = a1 & 0xFFFFFFFFFFFFLL;
    }
    if (v4) {
      goto LABEL_6;
    }
    return &_swiftEmptyArrayStorage;
  }
  int64_t v4 = String.UTF8View._foreignCount()();
  if (!v4) {
    return &_swiftEmptyArrayStorage;
  }
LABEL_6:
  uint64_t v5 = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(v4, 0);
  if (v4 < 0) {
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeMutableBufferPointer with negative count", 46, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x47uLL, 0);
  }
  uint64_t v6 = v5;
  unint64_t v7 = _StringGuts.copyUTF8(into:)((char *)v5 + 32, v4, a1, a2);
  if (v8) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Insufficient space allocated to copy string contents", 52, 2, "Swift/StringUTF8View.swift", 26, 2, 0x1AEuLL, 0);
  }
  if (v7 != v4) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "invalid Collection: less than 'count' elements in collection", 60, 2, "Swift/ContiguousArrayBuffer.swift", 33, 2, 0x462uLL, 0);
  }
  return v6;
}

__objc2_class **specialized _copyCollectionToContiguousArray<A>(_:)(unint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  Swift::Int v8 = Substring.distance(from:to:)((Swift::String::Index)a1, (Swift::String::Index)a2);
  if (!v8) {
    return &_swiftEmptyArrayStorage;
  }
  uint64_t v9 = v8;
  char v10 = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(v8, 0, (uint64_t (*)(void))canonical specialized generic type metadata accessor for _ContiguousArrayStorage<Character>);
  if (v9 < 0) {
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeMutableBufferPointer with negative count", 46, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x47uLL, 0);
  }
  unint64_t v11 = v10;
  uint64_t v12 = (uint64_t *)(v10 + 4);
  swift_bridgeObjectRetain(a4);
  uint64_t v13 = specialized Sequence._copySequenceContents(initializing:)(&v18, v12, v9, a1, a2, a3, a4);
  v14._Swift::UInt64 rawBits = v22;
  if ((v19 ^ v22) >= 0x4000)
  {
    Substring.subscript.getter(v22, v18, v19, v20, v21);
    uint64_t v17 = v16;
    Substring.index(after:)(v14);
    swift_bridgeObjectRelease(v17);
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "invalid Collection: more than 'count' elements in collection", 60, 2, "Swift/ContiguousArrayBuffer.swift", 33, 2, 0x45DuLL, 0);
  }
  if (v13 != v9) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "invalid Collection: less than 'count' elements in collection", 60, 2, "Swift/ContiguousArrayBuffer.swift", 33, 2, 0x462uLL, 0);
  }
  swift_bridgeObjectRelease(v21);
  return v11;
}

__objc2_class **specialized _copyCollectionToContiguousArray<A>(_:)(Swift::String::Index a1, Swift::String::Index a2, uint64_t a3, unint64_t a4)
{
  Swift::Int v8 = String.UTF16View.distance(from:to:)(a1, a2);
  if (!v8) {
    return &_swiftEmptyArrayStorage;
  }
  Swift::Int v9 = v8;
  char v10 = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(v8, 0);
  if (v9 < 0) {
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeMutableBufferPointer with negative count", 46, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x47uLL, 0);
  }
  unint64_t v11 = v10;
  uint64_t v12 = v10 + 4;
  swift_bridgeObjectRetain(a4);
  uint64_t v13 = ((uint64_t (*)(unint64_t *, __objc2_class **, Swift::Int, Swift::UInt64, Swift::UInt64, uint64_t, unint64_t))specialized Sequence._copySequenceContents(initializing:))(&v23, v12, v9, a1._rawBits, a2._rawBits, a3, a4);
  if ((v24 ^ v27._rawBits) >= 0x4000)
  {
    uint64_t v15 = v25;
    unint64_t v16 = v26;
    Swift::UInt64 rawBits = v27._rawBits;
    v18._Swift::UInt64 rawBits = v27._rawBits;
    Substring.UTF16View.subscript.getter(v18, v23, v24, v25, v26);
    uint64_t v19 = ((unint64_t)v15 >> 59) & 1;
    if ((v16 & 0x1000000000000000) == 0) {
      LOBYTE(v19) = 1;
    }
    Swift::UInt64 v20 = rawBits;
    if ((rawBits & 0xC) == 4 << v19) {
      Swift::UInt64 v20 = _StringGuts._slowEnsureMatchingEncoding(_:)((Swift::String::Index)rawBits)._rawBits;
    }
    unint64_t v21 = HIBYTE(v16) & 0xF;
    if ((v16 & 0x2000000000000000) == 0) {
      unint64_t v21 = v15 & 0xFFFFFFFFFFFFLL;
    }
    if (v21 > v20 >> 16)
    {
      if ((v16 & 0x1000000000000000) != 0)
      {
        specialized String.UTF16View._foreignIndex(after:)(v20);
      }
      else
      {
        uint64_t v22 = (v16 >> 62) & 1;
        if ((v16 & 0x2000000000000000) == 0) {
          LOBYTE(v22) = v15 < 0;
        }
        if ((v22 & 1) == 0)
        {
          if ((v20 & 0xC001) == 0) {
            _StringGuts.scalarAlignSlow(_:)((Swift::String::Index)v20);
          }
          if (!(v16 & 0x2000000000000000 | v15 & 0x1000000000000000)) {
            _StringObject.sharedUTF8.getter(v15, v16);
          }
        }
      }
      _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "invalid Collection: more than 'count' elements in collection", 60, 2, "Swift/ContiguousArrayBuffer.swift", 33, 2, 0x45DuLL, 0);
    }
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index is out of bounds", 29, 2, "Swift/StringUTF16View.swift", 27, 2, 0x93uLL, 0);
  }
  if (v13 != v9) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "invalid Collection: less than 'count' elements in collection", 60, 2, "Swift/ContiguousArrayBuffer.swift", 33, 2, 0x462uLL, 0);
  }
  swift_bridgeObjectRelease(v26);
  return v11;
}

void *specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1)
{
  uint64_t v2 = (unint64_t *)canonical specialized generic type metadata accessor for _ContiguousArrayStorage<UInt>();
  uint64_t v3 = swift_allocObject(v2, 0x28uLL, 7uLL);
  int64_t v4 = _swift_stdlib_malloc_size(v3);
  uint64_t v5 = v4 - 32;
  if (v4 < 32) {
    uint64_t v5 = v4 - 25;
  }
  v3[2] = 1;
  v3[3] = 2 * (v5 >> 3);
  v3[4] = a1;
  return v3;
}

__objc2_class **specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1, uint64_t a2, void (*a3)(__objc2_class **, uint64_t, uint64_t, uint64_t))
{
  if (!a1) {
    return &_swiftEmptyArrayStorage;
  }
  uint64_t v5 = a2 - a1;
  if (a2 == a1) {
    return &_swiftEmptyArrayStorage;
  }
  uint64_t v6 = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(a2 - a1, 0);
  a3(v6 + 4, v5, a1, a2);
  uint64_t v9 = v8;
  if ((*(_WORD *)&UnsafeRawBufferPointer.Iterator.next()() & 0x100) == 0) {
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "invalid Collection: more than 'count' elements in collection", 60, 2, "Swift/ContiguousArrayBuffer.swift", 33, 2, 0x45DuLL, 0);
  }
  if (v9 != v5) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "invalid Collection: less than 'count' elements in collection", 60, 2, "Swift/ContiguousArrayBuffer.swift", 33, 2, 0x462uLL, 0);
  }
  return v6;
}

__objc2_class **specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0) {
    uint64_t v4 = a1;
  }
  uint64_t v5 = 7;
  if (((a2 >> 60) & ((a1 & 0x800000000000000) == 0)) != 0) {
    uint64_t v5 = 11;
  }
  Swift::Int v6 = String.distance(from:to:)((Swift::String::Index)15, (Swift::String::Index)(v5 | (v4 << 16)));
  if (!v6) {
    return &_swiftEmptyArrayStorage;
  }
  uint64_t v7 = v6;
  uint64_t v8 = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(v6, 0, (uint64_t (*)(void))canonical specialized generic type metadata accessor for _ContiguousArrayStorage<Character>);
  if (v7 < 0) {
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeMutableBufferPointer with negative count", 46, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x47uLL, 0);
  }
  uint64_t v9 = v8;
  char v10 = (Swift::String_optional *)(v8 + 4);
  swift_bridgeObjectRetain(a2);
  uint64_t v11 = specialized Sequence._copySequenceContents(initializing:)(v14, v10, v7, a1, a2);
  Swift::String_optional v12 = String.Iterator.next()();
  if (v12.value._object)
  {
    swift_bridgeObjectRelease((uint64_t)v12.value._object);
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "invalid Collection: more than 'count' elements in collection", 60, 2, "Swift/ContiguousArrayBuffer.swift", 33, 2, 0x45DuLL, 0);
  }
  if (v11 != v7) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "invalid Collection: less than 'count' elements in collection", 60, 2, "Swift/ContiguousArrayBuffer.swift", 33, 2, 0x462uLL, 0);
  }
  swift_bridgeObjectRelease(v14[1]);
  return v9;
}

{
  uint64_t v4;
  Swift::Int v5;
  __objc2_class **v6;
  __objc2_class **v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unsigned char v12[8];
  uint64_t v13;

  if ((a2 & 0x1000000000000000) == 0)
  {
    uint64_t v4 = HIBYTE(a2) & 0xF;
    if ((a2 & 0x2000000000000000) == 0) {
      uint64_t v4 = a1;
    }
    uint64_t v5 = String.UTF16View._nativeGetOffset(for:)((Swift::String::Index)((v4 << 16) | 7));
    if (v5) {
      goto LABEL_5;
    }
    return &_swiftEmptyArrayStorage;
  }
  uint64_t v5 = String.UTF16View._foreignCount()();
  if (!v5) {
    return &_swiftEmptyArrayStorage;
  }
LABEL_5:
  Swift::Int v6 = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(v5, 0);
  if (v5 < 0) {
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeMutableBufferPointer with negative count", 46, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x47uLL, 0);
  }
  uint64_t v7 = v6;
  uint64_t v8 = (uint64_t)(v6 + 4);
  swift_bridgeObjectRetain(a2);
  uint64_t v9 = specialized Sequence._copySequenceContents(initializing:)((uint64_t)v12, v8, v5, a1, a2);
  *(Swift::UInt16_optional *)&char v10 = String.UTF16View.Iterator.next()();
  if ((v10 & 0x10000) == 0) {
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "invalid Collection: more than 'count' elements in collection", 60, 2, "Swift/ContiguousArrayBuffer.swift", 33, 2, 0x45DuLL, 0);
  }
  if (v9 != v5) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "invalid Collection: less than 'count' elements in collection", 60, 2, "Swift/ContiguousArrayBuffer.swift", 33, 2, 0x462uLL, 0);
  }
  swift_bridgeObjectRelease(v13);
  return v7;
}

{
  Swift::String::Index v4;
  Swift::UInt64 rawBits;
  __objc2_class **v6;
  __objc2_class **v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void v14[2];
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v4._Swift::UInt64 rawBits = specialized Collection.count.getter(a1, a2)._rawBits;
  if (v4._rawBits)
  {
    Swift::UInt64 rawBits = v4._rawBits;
    Swift::Int v6 = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(v4._rawBits, 0, (uint64_t (*)(void))canonical specialized generic type metadata accessor for _ContiguousArrayStorage<Unicode.Scalar>);
    if ((rawBits & 0x8000000000000000) != 0) {
      _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeMutableBufferPointer with negative count", 46, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x47uLL, 0);
    }
    uint64_t v7 = v6;
    uint64_t v8 = (uint64_t)(v6 + 4);
    swift_bridgeObjectRetain(a2);
    uint64_t v9 = specialized Sequence._copySequenceContents(initializing:)(&v15, v8, rawBits, a1, a2);
    char v10 = v17;
    if (v17 < v18)
    {
      uint64_t v11 = v15;
      if ((v16 & 0x1000000000000000) != 0)
      {
        _StringGuts.foreignErrorCorrectedScalar(startingAt:)((Swift::String::Index)(v17 << 16));
      }
      else
      {
        if ((v16 & 0x2000000000000000) != 0)
        {
          v14[0] = v15;
          v14[1] = v16 & 0xFFFFFFFFFFFFFFLL;
          Swift::String_optional v12 = v14;
        }
        else if ((v15 & 0x1000000000000000) != 0)
        {
          Swift::String_optional v12 = (void *)((v16 & 0xFFFFFFFFFFFFFFFLL) + 32);
        }
        else
        {
          Swift::String_optional v12 = _StringObject.sharedUTF8.getter(v15, v16);
        }
        _decodeScalar(_:startingAt:)((uint64_t)v12, v11, v10);
      }
      _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "invalid Collection: more than 'count' elements in collection", 60, 2, "Swift/ContiguousArrayBuffer.swift", 33, 2, 0x45DuLL, 0);
    }
    if (v9 != rawBits) {
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "invalid Collection: less than 'count' elements in collection", 60, 2, "Swift/ContiguousArrayBuffer.swift", 33, 2, 0x462uLL, 0);
    }
    swift_bridgeObjectRelease(v16);
  }
  else
  {
    return &_swiftEmptyArrayStorage;
  }
  return v7;
}

__objc2_class **specialized _copyCollectionToContiguousArray<A>(_:)(char *a1, uint64_t a2)
{
  if (!a2) {
    return &_swiftEmptyArrayStorage;
  }
  if (a2 <= 0) {
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeMutableBufferPointer with negative count", 46, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x47uLL, 0);
  }
  uint64_t v4 = (unint64_t *)canonical specialized generic type metadata accessor for _ContiguousArrayStorage<Swift.AnyObject>();
  uint64_t v5 = (char *)swift_allocObject(v4, 8 * a2 + 32, 7uLL);
  int64_t v6 = _swift_stdlib_malloc_size(v5);
  uint64_t v7 = v6 - 32;
  if (v6 < 32) {
    uint64_t v7 = v6 - 25;
  }
  *((void *)v5 + 2) = a2;
  *((void *)v5 + 3) = (2 * (v7 >> 3)) | 1;
  specialized UnsafeMutablePointer.initialize(from:count:)(a1, a2, v5 + 32);
  return (__objc2_class **)v5;
}

__objc2_class **specialized _copyCollectionToContiguousArray<A>(_:)(unint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return &_swiftEmptyArrayStorage;
  }
  uint64_t v3 = (unint64_t *)canonical specialized generic type metadata accessor for _ContiguousArrayStorage<String>();
  uint64_t v4 = swift_allocObject(v3, 16 * v1 + 32, 7uLL);
  int64_t v5 = _swift_stdlib_malloc_size(v4);
  uint64_t v6 = v5 - 32;
  if (v5 < 32) {
    uint64_t v6 = v5 - 17;
  }
  v4[2] = v1;
  v4[3] = 2 * (v6 >> 4);
  swift_bridgeObjectRetain(a1);
  uint64_t v7 = specialized Sequence._copySequenceContents(initializing:)(&v14, v4 + 4, v1, a1);
  if (v18) {
    goto LABEL_17;
  }
  int64_t v8 = v17 + 1;
  if (__OFADD__(v17, 1))
  {
    __break(1u);
LABEL_23:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "invalid Collection: less than 'count' elements in collection", 60, 2, "Swift/ContiguousArrayBuffer.swift", 33, 2, 0x462uLL, 0);
  }
  int64_t v9 = (unint64_t)(v16 + 64) >> 6;
  if (v8 < v9)
  {
    if (!*(void *)(v15 + 8 * v8))
    {
      if (v17 + 2 >= v9) {
        goto LABEL_18;
      }
      if (!*(void *)(v15 + 8 * (v17 + 2)))
      {
        if (v17 + 3 >= v9) {
          goto LABEL_18;
        }
        if (!*(void *)(v15 + 8 * (v17 + 3)))
        {
          if (v17 + 4 >= v9) {
            goto LABEL_18;
          }
          if (!*(void *)(v15 + 8 * (v17 + 4)))
          {
            uint64_t v10 = v9 - v17 - 5;
            uint64_t v11 = (uint64_t *)(v15 + 8 * v17 + 40);
            while (v10)
            {
              uint64_t v12 = *v11++;
              --v10;
              if (v12) {
                goto LABEL_17;
              }
            }
            goto LABEL_18;
          }
        }
      }
    }
LABEL_17:
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "invalid Collection: more than 'count' elements in collection", 60, 2, "Swift/ContiguousArrayBuffer.swift", 33, 2, 0x45DuLL, 0);
  }
LABEL_18:
  if (v7 != v1) {
    goto LABEL_23;
  }
  outlined consume of [A : B].Iterator._Variant<A, B>(v14);
  return (__objc2_class **)v4;
}

{
  uint64_t v1;
  unint64_t *v3;
  char *v4;
  int64_t v5;
  uint64_t v6;

  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return &_swiftEmptyArrayStorage;
  }
  uint64_t v3 = (unint64_t *)canonical specialized generic type metadata accessor for _ContiguousArrayStorage<String>();
  uint64_t v4 = (char *)swift_allocObject(v3, 16 * v1 + 32, 7uLL);
  int64_t v5 = _swift_stdlib_malloc_size(v4);
  uint64_t v6 = v5 - 32;
  if (v5 < 32) {
    uint64_t v6 = v5 - 17;
  }
  *((void *)v4 + 2) = v1;
  *((void *)v4 + 3) = 2 * (v6 >> 4);
  swift_bridgeObjectRetain(a1);
  specialized UnsafeMutablePointer.initialize(from:count:)((char *)(a1 + 32), v1, v4 + 32);
  swift_bridgeObjectRelease(a1);
  return (__objc2_class **)v4;
}

__objc2_class **specialized _copyCollectionToContiguousArray<A>(_:)(char *a1, int64_t a2)
{
  if (!a2) {
    return &_swiftEmptyArrayStorage;
  }
  if (a2 <= 0) {
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeMutableBufferPointer with negative count", 46, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x47uLL, 0);
  }
  uint64_t v4 = (unint64_t *)canonical specialized generic type metadata accessor for _ContiguousArrayStorage<Int8>();
  int64_t v5 = (char *)swift_allocObject(v4, a2 + 32, 7uLL);
  size_t v6 = _swift_stdlib_malloc_size(v5);
  *((void *)v5 + 2) = a2;
  *((void *)v5 + 3) = 2 * v6 - 64;
  specialized UnsafeMutablePointer.initialize(from:count:)(a1, a2, v5 + 32);
  return (__objc2_class **)v5;
}

__objc2_class **specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1)
{
  unint64_t v1 = a1;
  if (!((unint64_t)a1 >> 62))
  {
    uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v2) {
      goto LABEL_3;
    }
    return &_swiftEmptyArrayStorage;
  }
  if (a1 >= 0) {
    a1 &= 0xFFFFFFFFFFFFFF8uLL;
  }
  uint64_t v2 = (uint64_t)[a1 sel_count];
  if (!v2) {
    return &_swiftEmptyArrayStorage;
  }
LABEL_3:
  if (v2 <= 0) {
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeMutableBufferPointer with negative count", 46, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x47uLL, 0);
  }
  uint64_t v3 = (unint64_t *)canonical specialized generic type metadata accessor for _ContiguousArrayStorage<Swift.AnyObject>();
  uint64_t v4 = (void **)swift_allocObject(v3, 8 * v2 + 32, 7uLL);
  int64_t v5 = _swift_stdlib_malloc_size(v4);
  uint64_t v6 = v5 - 32;
  if (v5 < 32) {
    uint64_t v6 = v5 - 25;
  }
  v4[2] = (void *)v2;
  v4[3] = (void *)((2 * (v6 >> 3)) | 1);
  swift_bridgeObjectRetain(v1);
  uint64_t v7 = specialized _ArrayBuffer._copyContents(initializing:)(v4 + 4, v2, v1);
  uint64_t v9 = v7;
  unint64_t v10 = (unint64_t)v8;
  uint64_t v12 = v11;
  if ((unint64_t)v7 >> 62)
  {
    if (v7 >= 0) {
      v7 &= 0xFFFFFFFFFFFFFF8uLL;
    }
    if (v8 == objc_msgSend((id)v7, sel_count)) {
      goto LABEL_8;
    }
LABEL_18:
    uint64_t v14 = specialized _ArrayBuffer.subscript.read(v17, v10, v9);
    id v16 = *v15;
    swift_unknownObjectRetain(*v15);
    ((void (*)(void *, void))v14)(v17, 0);
    specialized RandomAccessCollection<>.index(after:)(v10, v9);
    swift_unknownObjectRelease(v16);
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "invalid Collection: more than 'count' elements in collection", 60, 2, "Swift/ContiguousArrayBuffer.swift", 33, 2, 0x45DuLL, 0);
  }
  if (v8 != *(id *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
    goto LABEL_18;
  }
LABEL_8:
  if (v12 != v2) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "invalid Collection: less than 'count' elements in collection", 60, 2, "Swift/ContiguousArrayBuffer.swift", 33, 2, 0x462uLL, 0);
  }
  swift_bridgeObjectRelease(v9);
  return (__objc2_class **)v4;
}

__objc2_class **_copyCollectionToContiguousArray<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a3 + 8);
  AssociatedTypeWitness = (uint64_t *)swift_getAssociatedTypeWitness(255, (int **)v6, a2, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
  unint64_t v10 = type metadata accessor for Optional(0, (uint64_t)AssociatedTypeWitness, v8, v9);
  uint64_t v11 = (uint64_t)*(v10 - 1);
  uint64_t v12 = MEMORY[0x1F4188790](v10);
  uint64_t v44 = (char *)&v37 - v13;
  uint64_t v41 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](v12);
  uint64_t v15 = (char *)&v37 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v43 = swift_getAssociatedTypeWitness(0, (int **)v6, a2, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Iterator);
  uint64_t v40 = *((void *)v43 - 1);
  MEMORY[0x1F4188790](v43);
  uint64_t v17 = (char *)&v37 - v16;
  uint64_t v18 = *(uint64_t (**)(uint64_t, uint64_t))(a3 + 112);
  uint64_t v42 = a1;
  uint64_t v19 = v18(a2, a3);
  if (!v19) {
    return &_swiftEmptyArrayStorage;
  }
  uint64_t v20 = v19;
  uint64_t v38 = v11;
  uint64_t v39 = v10;
  if (v19 < 1) {
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeMutableBufferPointer with negative count", 46, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x47uLL, 0);
  }
  unint64_t v21 = getContiguousArrayStorageType<A>(for:)((uint64_t)AssociatedTypeWitness, AssociatedTypeWitness);
  uint64_t v22 = *(AssociatedTypeWitness - 1);
  uint64_t v23 = *(void *)(v22 + 72);
  uint64_t v24 = *(unsigned __int8 *)(v22 + 80);
  unint64_t v25 = swift_allocObject((unint64_t *)v21, ((v24 + *((unsigned int *)v21 + 12)) & ~v24) + v23 * v20, v24 | *((unsigned __int16 *)v21 + 26));
  size_t v26 = _swift_stdlib_malloc_size(v25);
  if (!v23) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Division by zero", 16, 2, "Swift/IntegerTypes.swift", 24, 2, 0x3829uLL, 0);
  }
  uint64_t v27 = (v24 + 32) & ~v24;
  if (v26 - v27 == 0x8000000000000000 && v23 == -1) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Division results in an overflow", 31, 2, "Swift/IntegerTypes.swift", 24, 2, 0x3830uLL, 0);
  }
  uint64_t v29 = (uint64_t)(v26 - v27) / v23;
  swift_retain(v25);
  BOOL isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType((uint64_t)AssociatedTypeWitness, AssociatedTypeWitness);
  v25[2] = v20;
  v25[3] = isClassOrObjCExistentialType | (unint64_t)(2 * v29);
  swift_release((uint64_t)v25);
  (*(void (**)(char *, uint64_t, uint64_t))(v41 + 16))(v15, v42, a2);
  uint64_t v31 = (*(uint64_t (**)(char *, char *, uint64_t, uint64_t, uint64_t))(v6 + 64))(v17, (char *)v25 + v27, v20, a2, v6);
  uint64_t v32 = v6;
  uint64_t v33 = v43;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v32, a2, (uint64_t)v43, (uint64_t)&protocol requirements base descriptor for Sequence, associated conformance descriptor for Sequence.Sequence.Iterator: IteratorProtocol);
  uint64_t v35 = v44;
  (*(void (**)(const char *, uint64_t))(AssociatedConformanceWitness + 16))(v33, AssociatedConformanceWitness);
  LODWORD(v29) = (*(uint64_t (**)(char *, uint64_t, uint64_t *))(v22 + 48))(v35, 1, AssociatedTypeWitness);
  (*(void (**)(char *, Class *))(v38 + 8))(v35, v39);
  if (v29 != 1) {
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "invalid Collection: more than 'count' elements in collection", 60, 2, "Swift/ContiguousArrayBuffer.swift", 33, 2, 0x45DuLL, 0);
  }
  if (v31 != v20) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "invalid Collection: less than 'count' elements in collection", 60, 2, "Swift/ContiguousArrayBuffer.swift", 33, 2, 0x462uLL, 0);
  }
  (*(void (**)(char *, const char *))(v40 + 8))(v17, v33);
  return (__objc2_class **)v25;
}

uint64_t protocol witness for RangeReplaceableCollection.replaceSubrange<A>(_:with:) in conformance [A](uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return Array.replaceSubrange<A>(_:with:)(*a1, a1[1], a2, a5);
}

uint64_t protocol witness for RangeReplaceableCollection.init(repeating:count:) in conformance [A]@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v6 = *(void *)(a3 + 16);
  uint64_t v7 = specialized Array.init(repeating:count:)(a1, a2, v6, (uint64_t (*)(uint64_t, uint64_t))static Array._allocateUninitialized(_:));
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(a1, v6);
  *a4 = v7;
  return result;
}

uint64_t protocol witness for RangeReplaceableCollection.init<A>(_:) in conformance [A]@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t result = Array.init<A>(_:)(a1, a2, a2, a3);
  *a4 = result;
  return result;
}

uint64_t protocol witness for RangeReplaceableCollection.append<A>(contentsOf:) in conformance [A](void (*a1)(void, void), uint64_t a2, uint64_t a3, uint64_t a4)
{
  return Array.append<A>(contentsOf:)(a1, a4, a2, a3);
}

uint64_t protocol witness for RangeReplaceableCollection.insert(_:at:) in conformance [A](uint64_t a1, Swift::Int *a2, uint64_t a3, uint64_t a4)
{
  return Array.insert(_:at:)(a1, *a2, a3, a4);
}

uint64_t protocol witness for RangeReplaceableCollection.insert<A>(contentsOf:at:) in conformance [A](uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return RangeReplaceableCollection.insert<A>(contentsOf:at:)(a1, a2, a5, a3, a6, a4);
}

uint64_t specialized RangeReplaceableCollection.insert<A>(contentsOf:at:)(uint64_t a1, unsigned int a2, uint64_t a3)
{
  void (*v22)(uint64_t *__return_ptr, const char *, uint64_t);
  char v23;
  uint64_t result;
  unsigned int v25;
  BOOL v26;
  unsigned int v27;
  const char *v28;
  unint64_t v29;
  char v30[8];
  unint64_t v31;
  uint64_t *v32;
  unsigned int *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  uint64_t v4 = v3;
  uint64_t v35 = *(void *)(a3 - 8);
  Swift::Bool v36 = a1;
  MEMORY[0x1F4188790](a1);
  uint64_t v8 = (char *)&v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *(void *)(v9 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (int **)v10, v11, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Iterator);
  uint64_t v34 = *((void *)AssociatedTypeWitness - 1);
  uint64_t v13 = MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v15 = (char *)&v33 - v14;
  unsigned int v16 = *v4;
  if (a2)
  {
    uint64_t v33 = v4;
    LODWORD(v37) = a2;
    MEMORY[0x1F4188790](v13);
    uint64_t v32 = &v37;
    unint64_t v18 = v17 | (v17 << 32);
    uint64_t v19 = specialized Sequence.contains(where:)((unsigned int (*)(int *))closure #1 in Sequence<>.contains(_:)specialized partial apply, (uint64_t)v30, v18, 0);
    if ((v19 & 1) == 0)
    {
      LODWORD(v32) = 0;
      uint64_t v29 = 193;
      goto LABEL_27;
    }
    LODWORD(v37) = a2;
    MEMORY[0x1F4188790](v19);
    uint64_t v32 = &v37;
    if ((specialized Sequence.contains(where:)((unsigned int (*)(int *))closure #1 in Sequence<>.contains(_:)specialized partial apply, (uint64_t)v30, v18, 0) & 1) == 0)
    {
      LODWORD(v32) = 0;
      uint64_t v29 = 194;
      goto LABEL_27;
    }
    uint64_t v4 = v33;
    unsigned int v16 = *v33;
    if (*v33 < a2) {
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
    }
  }
  if (v16 != a2)
  {
    unsigned int v20 = 0;
    uint64_t v27 = v16;
    while (v16 >= v27 && v27 > a2)
    {
      if (HIBYTE(v20)) {
        goto LABEL_26;
      }
      v20 |= v27 << (-(__clz(v20) & 0x18) & 0x18);
      v27 >>= 8;
      if (v27 == a2) {
        goto LABEL_7;
      }
    }
    goto LABEL_24;
  }
  unsigned int v20 = 0;
LABEL_7:
  (*(void (**)(char *, uint64_t, uint64_t))(v35 + 16))(v8, v36, a3);
  (*(void (**)(uint64_t, uint64_t))(v10 + 32))(a3, v10);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v10, a3, (uint64_t)AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Sequence, associated conformance descriptor for Sequence.Sequence.Iterator: IteratorProtocol);
  uint64_t v22 = *(void (**)(uint64_t *__return_ptr, const char *, uint64_t))(AssociatedConformanceWitness + 16);
  v22(&v37, AssociatedTypeWitness, AssociatedConformanceWitness);
  if ((v37 & 0x100) == 0)
  {
    uint64_t v23 = v37;
    while (!HIBYTE(v20))
    {
      v20 |= (v23 + 1) << (-(__clz(v20) & 0x18) & 0x18);
      v22(&v37, AssociatedTypeWitness, AssociatedConformanceWitness);
      uint64_t v23 = v37;
      if ((v37 & 0x100) != 0) {
        goto LABEL_11;
      }
    }
LABEL_26:
    LODWORD(v32) = 0;
    uint64_t v29 = 167;
LABEL_27:
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/ValidUTF8Buffer.swift", 27, 2, v29, (int)v32);
  }
LABEL_11:
  (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v36, a3);
  uint64_t result = (*(uint64_t (**)(char *, const char *))(v34 + 8))(v15, AssociatedTypeWitness);
  if (*v4 < a2)
  {
    LODWORD(v32) = 0;
    uint64_t v31 = 730;
    v30[0] = 2;
    uint64_t v28 = "Range out of bounds";
LABEL_25:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, v28, 19, 2, "Swift/Collection.swift", 22, v30[0], v31, (int)v32);
  }
  if (a2)
  {
    unint64_t v25 = a2;
    while (v25 <= a2)
    {
      if (HIBYTE(v20)) {
        goto LABEL_26;
      }
      v20 |= v25 << (-(__clz(v20) & 0x18) & 0x18);
      size_t v26 = v25 >= 0x100;
      v25 >>= 8;
      if (!v26) {
        goto LABEL_17;
      }
    }
LABEL_24:
    LODWORD(v32) = 0;
    uint64_t v31 = 714;
    v30[0] = 2;
    uint64_t v28 = "Index out of bounds";
    goto LABEL_25;
  }
LABEL_17:
  *uint64_t v4 = v20;
  return result;
}

uint64_t RangeReplaceableCollection.insert<A>(contentsOf:at:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v53 = a6;
  uint64_t v50 = a1;
  uint64_t v51 = a4;
  uint64_t v54 = a5;
  uint64_t v8 = *(int ***)(a5 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v8, a3, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0, (uint64_t)AssociatedTypeWitness, (uint64_t)AssociatedTypeWitness, "lower upper ", 0);
  uint64_t v10 = MEMORY[0x1F4188790](TupleTypeMetadata2);
  BOOL v47 = (char *)&v42 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = MEMORY[0x1F4188790](v10);
  uint64_t v14 = (char *)&v42 - v13;
  uint64_t v15 = (void *)*((void *)AssociatedTypeWitness - 1);
  uint64_t v16 = MEMORY[0x1F4188790](v12);
  unint64_t v18 = (char *)&v42 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v16);
  unsigned int v20 = (char *)&v42 - v19;
  uint64_t v52 = a3;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness((uint64_t)v8, a3, (uint64_t)AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Collection, associated conformance descriptor for Collection.Collection.Index: Comparable);
  uint64_t v23 = type metadata accessor for Range(0, (uint64_t)AssociatedTypeWitness, AssociatedConformanceWitness, v22);
  uint64_t v48 = (uint64_t)*(v23 - 1);
  uint64_t v24 = MEMORY[0x1F4188790](v23);
  uint64_t v45 = (char *)&v42 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v24);
  uint64_t v46 = (char *)&v42 - v26;
  uint64_t v27 = (void (*)(char *, uint64_t, const char *))v15[2];
  v27(v20, a2, AssociatedTypeWitness);
  v27(v18, a2, AssociatedTypeWitness);
  if (((*(uint64_t (**)(char *, char *, const char *, uint64_t))(AssociatedConformanceWitness + 24))(v20, v18, AssociatedTypeWitness, AssociatedConformanceWitness) & 1) == 0)_assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0); {
  uint64_t v44 = v23;
  }
  uint64_t v28 = (void (*)(char *, const char *))v15[1];
  id v43 = v28;
  v28(v18, AssociatedTypeWitness);
  v28(v20, AssociatedTypeWitness);
  uint64_t v29 = a2;
  int64_t v30 = TupleTypeMetadata2;
  uint64_t v31 = &v14[*((int *)TupleTypeMetadata2 + 12)];
  v27(v14, v29, AssociatedTypeWitness);
  uint64_t v42 = v31;
  v27(v31, v29, AssociatedTypeWitness);
  uint64_t v32 = v47;
  uint64_t v33 = &v47[*((int *)v30 + 12)];
  v27(v47, (uint64_t)v14, AssociatedTypeWitness);
  v27(v33, (uint64_t)v31, AssociatedTypeWitness);
  uint64_t v34 = (void (*)(char *, char *, const char *))v15[4];
  uint64_t v35 = v45;
  v34(v45, v32, AssociatedTypeWitness);
  Swift::Bool v36 = v43;
  v43(v33, AssociatedTypeWitness);
  uint64_t v37 = &v32[*((int *)v30 + 12)];
  v34(v32, v14, AssociatedTypeWitness);
  v34(v37, v42, AssociatedTypeWitness);
  uint64_t v38 = v44;
  v34(&v35[*((int *)v44 + 9)], v37, AssociatedTypeWitness);
  v36(v32, AssociatedTypeWitness);
  uint64_t v39 = v48;
  uint64_t v40 = v46;
  (*(void (**)(char *, char *, Class *))(v48 + 32))(v46, v35, v38);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t, uint64_t))(v54 + 32))(v40, v50, v51, v53, v52);
  return (*(uint64_t (**)(char *, Class *))(v39 + 8))(v40, v38);
}

BOOL protocol witness for RangeReplaceableCollection.remove(at:) in conformance [A]@<W0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return Array.remove(at:)(*a1, a2, a3);
}

uint64_t specialized RangeReplaceableCollection.removeSubrange(_:)(uint64_t result)
{
  unint64_t v2 = result;
  unint64_t v3 = *v1 | ((unint64_t)*v1 << 32);
  if (result)
  {
    int v14 = result;
    MEMORY[0x1F4188790](result);
    uint64_t v13 = &v14;
    uint64_t result = specialized Sequence.contains(where:)((unsigned int (*)(int *))closure #1 in Sequence<>.contains(_:)specialized partial apply, (uint64_t)v11, v3, 0);
    if ((result & 1) == 0)
    {
      LODWORD(v13) = 0;
      unint64_t v10 = 193;
      goto LABEL_26;
    }
  }
  if (HIDWORD(v2))
  {
    int v14 = HIDWORD(v2);
    MEMORY[0x1F4188790](result);
    uint64_t v13 = &v14;
    uint64_t result = specialized Sequence.contains(where:)((unsigned int (*)(int *))closure #1 in Sequence<>.contains(_:)specialized partial apply, (uint64_t)v11, v3, 0);
    if ((result & 1) == 0)
    {
      LODWORD(v13) = 0;
      unint64_t v10 = 194;
      goto LABEL_26;
    }
  }
  unsigned int v4 = *v1;
  if (*v1 < v2) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
  }
  unsigned int v5 = 0;
  if (v4 != v2)
  {
    unsigned int v8 = *v1;
    while (1)
    {
      if (v4 < v8 || v8 <= v2) {
        goto LABEL_20;
      }
      if (HIBYTE(v5)) {
        break;
      }
      v5 |= v8 << (-(__clz(v5) & 0x18) & 0x18);
      v8 >>= 8;
      if (v8 == v2) {
        goto LABEL_8;
      }
    }
LABEL_23:
    LODWORD(v13) = 0;
    unint64_t v10 = 167;
LABEL_26:
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/ValidUTF8Buffer.swift", 27, 2, v10, (int)v13);
  }
LABEL_8:
  if (v4 < HIDWORD(v2))
  {
    LODWORD(v13) = 0;
    unint64_t v12 = 730;
    v11[0] = 2;
    uint64_t v9 = "Range out of bounds";
    goto LABEL_21;
  }
  if (HIDWORD(v2))
  {
    unint64_t v6 = HIDWORD(v2);
    while (v6 <= HIDWORD(v2))
    {
      if (HIBYTE(v5)) {
        goto LABEL_23;
      }
      v5 |= v6 << (-(__clz(v5) & 0x18) & 0x18);
      BOOL v7 = v6 >= 0x100;
      LODWORD(v6) = v6 >> 8;
      if (!v7) {
        goto LABEL_14;
      }
    }
LABEL_20:
    LODWORD(v13) = 0;
    unint64_t v12 = 714;
    v11[0] = 2;
    uint64_t v9 = "Index out of bounds";
LABEL_21:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, v9, 19, 2, "Swift/Collection.swift", 22, v11[0], v12, (int)v13);
  }
LABEL_14:
  *unint64_t v1 = v5;
  return result;
}

uint64_t RangeReplaceableCollection.removeSubrange(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v10 = *(uint64_t (**)(uint64_t))(a3 + 32);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, *(int ***)(*(void *)(a3 + 8) + 8), a2, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
  BOOL v7 = (unint64_t *)type metadata accessor for EmptyCollection(0, (uint64_t)AssociatedTypeWitness, v5, v6);
  swift_getWitnessTable(protocol conformance descriptor for EmptyCollection<A>, v7, v8);

  return v10(a1);
}

uint64_t protocol witness for RangeReplaceableCollection._customRemoveLast(_:) in conformance [A]()
{
  return protocol witness for Collection.isEmpty.getter in conformance <> ClosedRange<A>();
}

Swift::Bool __swiftcall RangeReplaceableCollection._customRemoveLast(_:)(Swift::Int a1)
{
  return protocol witness for Collection.isEmpty.getter in conformance <> ClosedRange<A>();
}

uint64_t specialized RangeReplaceableCollection.removeFirst()()
{
  unint64_t v1 = v0[1];
  uint64_t v2 = HIBYTE(v1) & 0xF;
  if ((v1 & 0x2000000000000000) == 0) {
    uint64_t v2 = *v0 & 0xFFFFFFFFFFFFLL;
  }
  if (!v2) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't remove first element from an empty collection", 51, 2, "Swift/RangeReplaceableCollection.swift", 38, 2, 0x26CuLL, 0);
  }
  uint64_t v3 = specialized Collection.first.getter(*v0, v1);
  if (!v4) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/RangeReplaceableCollection.swift", 38, 2, 0x26EuLL, 0);
  }
  uint64_t v5 = v3;
  specialized RangeReplaceableCollection.removeFirst(_:)(1);
  return v5;
}

unint64_t specialized RangeReplaceableCollection.removeFirst()()
{
  unint64_t v1 = *v0;
  unint64_t v2 = v0[1];
  if ((v2 & 0x2000000000000000) != 0) {
    uint64_t v3 = HIBYTE(v2) & 0xF;
  }
  else {
    uint64_t v3 = *v0 & 0xFFFFFFFFFFFFLL;
  }
  if (!v3) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't remove first element from an empty collection", 51, 2, "Swift/RangeReplaceableCollection.swift", 38, 2, 0x26CuLL, 0);
  }
  unint64_t v4 = specialized Collection.first.getter(*v0, v0[1]);
  if ((v4 & 0x100000000) != 0) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/RangeReplaceableCollection.swift", 38, 2, 0x26EuLL, 0);
  }
  unint64_t v5 = v4;
  uint64_t v6 = 7;
  if (((v2 >> 60) & ((v1 & 0x800000000000000) == 0)) != 0) {
    uint64_t v6 = 11;
  }
  Swift::String::Index_optional v13 = String.UnicodeScalarView.index(_:offsetBy:limitedBy:)((Swift::String::Index)15, 1, (Swift::String::Index)(v6 | (v3 << 16)));
  if (v13.is_nil) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't remove more items from a collection than it has", 53, 2, "Swift/RangeReplaceableCollection.swift", 38, 2, 0x254uLL, 0);
  }
  Swift::UInt64 rawBits = v13.value._rawBits;
  v8._Swift::UInt64 rawBits = 15;
  v9._Swift::UInt64 rawBits = rawBits;
  Swift::UInt64 v10 = _StringGuts.validateScalarRange_5_7(_:)(v8, v9, v1, v2);
  specialized _StringGuts.replaceSubrange<A>(_:with:)(v10, v11);
  return v5;
}

uint64_t RangeReplaceableCollection.removeFirst()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = *(void *)(a2 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, *(int ***)(v6 + 8), a1, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
  Swift::UInt64 v10 = type metadata accessor for Optional(0, (uint64_t)AssociatedTypeWitness, v8, v9);
  MEMORY[0x1F4188790](v10 - 1);
  unint64_t v12 = (char *)&v15 - v11;
  if ((*(uint64_t (**)(uint64_t, uint64_t))(v6 + 104))(a1, v6)) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't remove first element from an empty collection", 51, 2, "Swift/RangeReplaceableCollection.swift", 38, 2, 0x26CuLL, 0);
  }
  Collection.first.getter(a1, v6, (uint64_t)v12);
  uint64_t v13 = *((void *)AssociatedTypeWitness - 1);
  if ((*(unsigned int (**)(char *, uint64_t, const char *))(v13 + 48))(v12, 1, AssociatedTypeWitness) == 1) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/RangeReplaceableCollection.swift", 38, 2, 0x26EuLL, 0);
  }
  (*(void (**)(uint64_t, char *, const char *))(v13 + 32))(a3, v12, AssociatedTypeWitness);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a2 + 136))(1, a1, a2);
}

Swift::Int specialized RangeReplaceableCollection.removeFirst(_:)(Swift::Int offsetBy)
{
  if (offsetBy)
  {
    if (offsetBy < 0) {
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Number of elements to remove should be non-negative", 51, 2, "Swift/RangeReplaceableCollection.swift", 38, 2, 0x252uLL, 0);
    }
    unint64_t v2 = *v1;
    unint64_t v3 = v1[1];
    uint64_t v4 = HIBYTE(v3) & 0xF;
    if ((v3 & 0x2000000000000000) == 0) {
      uint64_t v4 = *v1;
    }
    uint64_t v5 = 7;
    if (((v3 >> 60) & ((v2 & 0x800000000000000) == 0)) != 0) {
      uint64_t v5 = 11;
    }
    Swift::String::Index_optional v12 = String.UnicodeScalarView.index(_:offsetBy:limitedBy:)((Swift::String::Index)15, offsetBy, (Swift::String::Index)(v5 | (v4 << 16)));
    if (v12.is_nil) {
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't remove more items from a collection than it has", 53, 2, "Swift/RangeReplaceableCollection.swift", 38, 2, 0x254uLL, 0);
    }
    Swift::UInt64 rawBits = v12.value._rawBits;
    v7._Swift::UInt64 rawBits = 15;
    v8._Swift::UInt64 rawBits = rawBits;
    Swift::UInt64 v9 = _StringGuts.validateScalarRange_5_7(_:)(v7, v8, v2, v3);
    return specialized _StringGuts.replaceSubrange<A>(_:with:)(v9, v10);
  }
  return offsetBy;
}

void specialized RangeReplaceableCollection.removeFirst(_:)(Swift::Int offsetBy)
{
  if (offsetBy)
  {
    if (offsetBy < 0) {
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Number of elements to remove should be non-negative", 51, 2, "Swift/RangeReplaceableCollection.swift", 38, 2, 0x252uLL, 0);
    }
    unint64_t v2 = *v1;
    unint64_t v3 = v1[1];
    uint64_t v4 = HIBYTE(v3) & 0xF;
    if ((v3 & 0x2000000000000000) == 0) {
      uint64_t v4 = *v1;
    }
    uint64_t v5 = 7;
    if (((v3 >> 60) & ((v2 & 0x800000000000000) == 0)) != 0) {
      uint64_t v5 = 11;
    }
    Swift::String::Index_optional v12 = String.index(_:offsetBy:limitedBy:)((Swift::String::Index)15, offsetBy, (Swift::String::Index)(v5 | (v4 << 16)));
    if (v12.is_nil) {
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't remove more items from a collection than it has", 53, 2, "Swift/RangeReplaceableCollection.swift", 38, 2, 0x254uLL, 0);
    }
    Swift::UInt64 rawBits = v12.value._rawBits;
    v7._Swift::UInt64 rawBits = 15;
    v8._Swift::UInt64 rawBits = rawBits;
    Swift::UInt64 v9 = _StringGuts.validateScalarRange(_:)(v7, v8, v2, v3);
    _StringGuts.remove(from:to:)((Swift::String::Index)v9, v10);
  }
}

uint64_t specialized RangeReplaceableCollection.removeFirst(_:)(uint64_t result)
{
  if (result)
  {
    if (result < 0) {
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Number of elements to remove should be non-negative", 51, 2, "Swift/RangeReplaceableCollection.swift", 38, 2, 0x252uLL, 0);
    }
    uint64_t v2 = *v1;
    unint64_t v3 = specialized RandomAccessCollection.index(_:offsetBy:limitedBy:)(v2, result, 0, *v1);
    if ((v3 & 0x100000000) != 0) {
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't remove more items from a collection than it has", 53, 2, "Swift/RangeReplaceableCollection.swift", 38, 2, 0x254uLL, 0);
    }
    if (v2 < v3) {
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
    }
    uint64_t v4 = v2 | (v3 << 32);
    return specialized RangeReplaceableCollection.removeSubrange(_:)(v4);
  }
  return result;
}

Swift::Void __swiftcall RangeReplaceableCollection.removeFirst(_:)(Swift::Int a1)
{
  uint64_t v4 = v2;
  uint64_t v5 = v1;
  uint64_t v7 = *(void *)(v2 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, (int **)v7, v1, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0, (uint64_t)AssociatedTypeWitness, (uint64_t)AssociatedTypeWitness, "lower upper ", 0);
  uint64_t v9 = MEMORY[0x1F4188790](TupleTypeMetadata2);
  BOOL v78 = (char *)&v65 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  uint64_t v72 = (char *)&v65 - v11;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v7, v5, (uint64_t)AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Collection, associated conformance descriptor for Collection.Collection.Index: Comparable);
  uint64_t v13 = type metadata accessor for Range(0, (uint64_t)AssociatedTypeWitness, AssociatedConformanceWitness, v12);
  uint64_t v76 = (uint64_t)*(v13 - 1);
  uint64_t v77 = v13;
  uint64_t v14 = MEMORY[0x1F4188790](v13);
  uint64_t v73 = (char *)&v65 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v74 = (char *)&v65 - v16;
  uint64_t v19 = type metadata accessor for Optional(0, (uint64_t)AssociatedTypeWitness, v17, v18);
  uint64_t v20 = MEMORY[0x1F4188790](v19);
  uint64_t v22 = (char *)&v65 - v21;
  uint64_t v82 = (char *)*((void *)AssociatedTypeWitness - 1);
  uint64_t v23 = MEMORY[0x1F4188790](v20);
  uint64_t v80 = (char *)&v65 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = MEMORY[0x1F4188790](v23);
  uint64_t v79 = (char *)&v65 - v26;
  uint64_t v27 = MEMORY[0x1F4188790](v25);
  uint64_t v29 = (char *)&v65 - v28;
  uint64_t v30 = MEMORY[0x1F4188790](v27);
  uint64_t v32 = (char *)&v65 - v31;
  uint64_t v33 = MEMORY[0x1F4188790](v30);
  uint64_t v35 = (char *)&v65 - v34;
  uint64_t v36 = MEMORY[0x1F4188790](v33);
  if (a1)
  {
    if (a1 < 0) {
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Number of elements to remove should be non-negative", 51, 2, "Swift/RangeReplaceableCollection.swift", 38, 2, 0x252uLL, 0);
    }
    uint64_t v66 = v38;
    uint64_t v67 = v36;
    uint64_t v70 = v29;
    Swift::String v71 = (char *)&v65 - v37;
    uint64_t v39 = *(void (**)(uint64_t, uint64_t))(v7 + 64);
    uint64_t v68 = v4;
    uint64_t v69 = v39;
    v39(v5, v7);
    (*(void (**)(uint64_t, uint64_t))(v7 + 72))(v5, v7);
    (*(void (**)(char *, Swift::Int, char *, uint64_t, uint64_t))(v7 + 144))(v35, a1, v32, v5, v7);
    uint64_t v84 = v5;
    uint64_t v40 = v82;
    uint64_t v42 = v82 + 8;
    uint64_t v41 = (void (*)(char *, const char *))*((void *)v82 + 1);
    v41(v32, AssociatedTypeWitness);
    uint64_t v85 = v42;
    unint64_t v83 = v41;
    v41(v35, AssociatedTypeWitness);
    id v43 = v22;
    if ((*((unsigned int (**)(char *, uint64_t, const char *))v40 + 6))(v22, 1, AssociatedTypeWitness) == 1)
    {
      (*(void (**)(char *, uint64_t))(v66 + 8))(v22, v67);
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't remove more items from a collection than it has", 53, 2, "Swift/RangeReplaceableCollection.swift", 38, 2, 0x254uLL, 0);
    }
    uint64_t v44 = (void (*)(char *, char *, const char *))*((void *)v40 + 4);
    uint64_t v45 = v71;
    v44(v71, v43, AssociatedTypeWitness);
    uint64_t v46 = v70;
    uint64_t v67 = v3;
    v69(v84, v7);
    BOOL v47 = v45;
    uint64_t v48 = (void (*)(char *, char *, const char *))*((void *)v40 + 2);
    Swift::Int v49 = v79;
    v48(v79, v46, AssociatedTypeWitness);
    uint64_t v50 = v80;
    v48(v80, v47, AssociatedTypeWitness);
    if (((*(uint64_t (**)(char *, char *, const char *))(AssociatedConformanceWitness + 24))(v49, v50, AssociatedTypeWitness) & 1) == 0)_assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0); {
    uint64_t v51 = v50;
    }
    uint64_t v52 = v46;
    uint64_t v53 = v83;
    v83(v51, AssociatedTypeWitness);
    v53(v49, AssociatedTypeWitness);
    uint64_t v54 = TupleTypeMetadata2;
    uint64_t v55 = v72;
    uint64_t v56 = &v72[*((int *)TupleTypeMetadata2 + 12)];
    v44(v72, v52, AssociatedTypeWitness);
    uint64_t v82 = v56;
    v44(v56, v47, AssociatedTypeWitness);
    uint64_t v57 = v78;
    Swift::Int v58 = &v78[*((int *)v54 + 12)];
    v48(v78, v55, AssociatedTypeWitness);
    v48(v58, v56, AssociatedTypeWitness);
    unint64_t v59 = v73;
    v44(v73, v57, AssociatedTypeWitness);
    uint64_t v60 = v83;
    v83(v58, AssociatedTypeWitness);
    uint64_t v61 = &v57[*((int *)v54 + 12)];
    v44(v57, v55, AssociatedTypeWitness);
    v44(v61, v82, AssociatedTypeWitness);
    uint64_t v62 = v77;
    v44(&v59[*((int *)v77 + 9)], v61, AssociatedTypeWitness);
    v60(v57, AssociatedTypeWitness);
    uint64_t v63 = v76;
    Swift::Int v64 = v74;
    (*(void (**)(char *, char *, Class *))(v76 + 32))(v74, v59, v62);
    (*(void (**)(char *, uint64_t))(v68 + 104))(v64, v84);
    (*(void (**)(char *, Class *))(v63 + 8))(v64, v62);
  }
}

uint64_t protocol witness for RangeReplaceableCollection.removeAll(where:) in conformance [A](uint64_t (*a1)(char *), void (*a2)(char *, const char *), unint64_t *a3, uint64_t a4)
{
  uint64_t WitnessTable = swift_getWitnessTable(protocol conformance descriptor for [A], a3, (uint64_t)a3);
  return RangeReplaceableCollection<>.removeAll(where:)(a1, a2, (uint64_t (*)(char *))a3, WitnessTable, a4);
}

uint64_t RangeReplaceableCollection<>.removeAll(where:)(uint64_t (*a1)(char *), void (*a2)(char *, const char *), uint64_t (*a3)(char *), uint64_t a4, uint64_t a5)
{
  uint64_t v84 = a2;
  uint64_t v76 = a5;
  uint64_t v82 = (char *)a4;
  unint64_t v83 = a1;
  uint64_t v6 = *(int ***)(a4 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v6, (uint64_t)a3, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0, (uint64_t)AssociatedTypeWitness, (uint64_t)AssociatedTypeWitness, "lower upper ", 0);
  uint64_t v8 = MEMORY[0x1F4188790](TupleTypeMetadata2);
  unsigned int v75 = (char *)v64 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8);
  Swift::String v71 = (char *)v64 - v10;
  uint64_t v77 = v6;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness((uint64_t)v6, (uint64_t)a3, (uint64_t)AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Collection, associated conformance descriptor for Collection.Collection.Index: Comparable);
  uint64_t v13 = type metadata accessor for Range(0, (uint64_t)AssociatedTypeWitness, AssociatedConformanceWitness, v12);
  uint64_t v73 = (uint64_t)*(v13 - 1);
  uint64_t v74 = v13;
  uint64_t v14 = MEMORY[0x1F4188790](v13);
  uint64_t v68 = (char *)v64 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v72 = (char *)v64 - v16;
  uint64_t v78 = AssociatedConformanceWitness;
  uint64_t v18 = type metadata accessor for PartialRangeFrom(0, (uint64_t)AssociatedTypeWitness, AssociatedConformanceWitness, v17);
  uint64_t v69 = (uint64_t)*(v18 - 1);
  uint64_t v70 = v18;
  uint64_t v19 = MEMORY[0x1F4188790](v18);
  BOOL v81 = (char *)v64 - v20;
  uint64_t v79 = (char *)*((void *)AssociatedTypeWitness - 1);
  uint64_t v21 = MEMORY[0x1F4188790](v19);
  uint64_t v23 = (char *)v64 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = MEMORY[0x1F4188790](v21);
  uint64_t v26 = (char *)v64 - v25;
  uint64_t v27 = MEMORY[0x1F4188790](v24);
  uint64_t v29 = (char *)v64 - v28;
  uint64_t v30 = MEMORY[0x1F4188790](v27);
  uint64_t v32 = (char *)v64 - v31;
  uint64_t v33 = MEMORY[0x1F4188790](v30);
  uint64_t v35 = (char *)v64 - v34;
  MEMORY[0x1F4188790](v33);
  uint64_t v37 = (char *)v64 - v36;
  uint64_t v38 = v85;
  uint64_t result = MutableCollection._halfStablePartition(isSuffixElement:)(v83, (uint64_t)v84, (uint64_t)a3, (uint64_t)v82, (uint64_t)v64 - v36);
  if (!v38)
  {
    uint64_t v65 = v26;
    uint64_t v66 = v32;
    uint64_t v82 = v23;
    uint64_t v67 = v29;
    uint64_t v40 = v81;
    v64[1] = 0;
    unint64_t v83 = a3;
    uint64_t v41 = v79;
    uint64_t v42 = v79 + 16;
    id v43 = (void (*)(char *, char *, const char *))*((void *)v79 + 2);
    v43(v35, v37, AssociatedTypeWitness);
    uint64_t v44 = v78;
    if (((*(uint64_t (**)(char *, char *, const char *))(*(void *)(v78 + 8) + 8))(v35, v35, AssociatedTypeWitness) & 1) == 0)_assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range cannot have an unordered lower bound.", 43, 2, "Swift/Range.swift", 17, 2, 0x34FuLL, 0); {
    uint64_t v84 = (void (*)(char *, const char *))*((void *)v41 + 1);
    }
    uint64_t v85 = v41 + 8;
    v84(v35, AssociatedTypeWitness);
    v64[0] = *((void *)v41 + 4);
    ((void (*)(char *, char *, const char *))v64[0])(v40, v37, AssociatedTypeWitness);
    uint64_t v45 = v66;
    v43(v66, v40, AssociatedTypeWitness);
    uint64_t v46 = v44;
    BOOL v47 = v67;
    ((void (*)(uint64_t (*)(char *)))v77[9])(v83);
    uint64_t v48 = v65;
    v43(v65, v45, AssociatedTypeWitness);
    uint64_t v49 = (uint64_t)v82;
    uint64_t v79 = (char *)v43;
    v43(v82, v47, AssociatedTypeWitness);
    if (((*(uint64_t (**)(char *, uint64_t, const char *, uint64_t))(v46 + 24))(v48, v49, AssociatedTypeWitness, v46) & 1) == 0)_assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0); {
    uint64_t v50 = v84;
    }
    v84((char *)v49, AssociatedTypeWitness);
    v50(v48, AssociatedTypeWitness);
    (*(void (**)(char *, Class *))(v69 + 8))(v81, v70);
    uint64_t v51 = *((int *)TupleTypeMetadata2 + 12);
    uint64_t v52 = TupleTypeMetadata2;
    uint64_t v53 = v71;
    BOOL v81 = v42;
    uint64_t v54 = (uint64_t)&v71[v51];
    uint64_t v55 = (void (*)(uint64_t, char *, const char *))v64[0];
    ((void (*)(char *, char *, const char *))v64[0])(v71, v66, AssociatedTypeWitness);
    uint64_t v82 = (char *)v54;
    v55(v54, v67, AssociatedTypeWitness);
    uint64_t v56 = v75;
    uint64_t v57 = &v75[*((int *)v52 + 12)];
    Swift::Int v58 = (void (*)(char *, uint64_t, const char *))v79;
    ((void (*)(char *, char *, const char *))v79)(v75, v53, AssociatedTypeWitness);
    v58(v57, v54, AssociatedTypeWitness);
    unint64_t v59 = v68;
    v55((uint64_t)v68, v56, AssociatedTypeWitness);
    v84(v57, AssociatedTypeWitness);
    uint64_t v60 = &v56[*((int *)TupleTypeMetadata2 + 12)];
    v55((uint64_t)v56, v53, AssociatedTypeWitness);
    v55((uint64_t)v60, v82, AssociatedTypeWitness);
    uint64_t v61 = v74;
    v55((uint64_t)&v59[*((int *)v74 + 9)], v60, AssociatedTypeWitness);
    v84(v56, AssociatedTypeWitness);
    uint64_t v63 = v72;
    uint64_t v62 = v73;
    (*(void (**)(char *, char *, Class *))(v73 + 32))(v72, v59, v61);
    (*(void (**)(char *, uint64_t (*)(char *)))(v76 + 104))(v63, v83);
    return (*(uint64_t (**)(char *, Class *))(v62 + 8))(v63, v61);
  }
  return result;
}

unint64_t static Array.+ infix(_:_:)(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v10 = a2;
  unint64_t v11 = a1;
  uint64_t v6 = (unint64_t *)type metadata accessor for Array(0, a3, a3, a4);
  swift_bridgeObjectRetain(a1);
  swift_bridgeObjectRetain(a2);
  uint64_t WitnessTable = swift_getWitnessTable(protocol conformance descriptor for [A], v6, v7);
  Array.append<A>(contentsOf:)((void (*)(void, void))&v10, (uint64_t)v6, (uint64_t)v6, WitnessTable);
  return v11;
}

uint64_t static Array.+= infix(_:_:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v9 = a2;
  uint64_t v5 = (unint64_t *)type metadata accessor for Array(0, a3, a3, a4);
  swift_bridgeObjectRetain(a2);
  uint64_t WitnessTable = swift_getWitnessTable(protocol conformance descriptor for [A], v5, v6);
  return Array.append<A>(contentsOf:)((void (*)(void, void))&v9, (uint64_t)v5, (uint64_t)v5, WitnessTable);
}

uint64_t Array.customMirror.getter@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  unint64_t v32 = a1;
  uint64_t v7 = type metadata accessor for Array(0, a2, a3, a4);
  v29[0] = 0;
  v29[1] = 0;
  swift_bridgeObjectRetain(a1);
  uint64_t v8 = static Mirror._superclassIterator<A>(_:_:)((uint64_t)&v32, (uint64_t)v29, (swift *)v7);
  uint64_t v10 = v9;
  unint64_t v11 = swift_allocObject(qword_1EC9F2848, 0x28uLL, 7uLL);
  v11[2] = v7;
  v11[3] = v7;
  uint64_t WitnessTable = swift_getWitnessTable(protocol conformance descriptor for [A], (unint64_t *)v7, v12);
  v11[4] = WitnessTable;
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for (label: String?, value: Any));
  uint64_t v16 = swift_getWitnessTable(protocol conformance descriptor for [A], (unint64_t *)v7, v15);
  uint64_t v17 = (unint64_t *)type metadata accessor for LazyMapSequence(255, (uint64_t)v7, v14, v16);
  uint64_t v31 = WitnessTable;
  uint64_t v18 = swift_getWitnessTable(protocol conformance descriptor for <> LazyMapSequence<A, B>, v17, (uint64_t)&v31);
  uint64_t v20 = (unint64_t *)type metadata accessor for _CollectionBox(0, (uint64_t)v17, v18, v19);
  uint64_t v21 = swift_allocObject(v20, 0x48uLL, 7uLL);
  v21[6] = a1;
  v21[7] = partial apply for closure #1 in Mirror.init<A, B>(_:unlabeledChildren:displayStyle:ancestorRepresentation:);
  v21[8] = v11;
  uint64_t v22 = (unint64_t *)canonical specialized generic type metadata accessor for _IndexBox<Int>();
  uint64_t v23 = swift_allocObject(v22, 0x18uLL, 7uLL);
  unint64_t v23[2] = 0;
  swift_bridgeObjectRetain(a1);
  Swift::Int v24 = Array._getCount()();
  uint64_t v25 = swift_allocObject(v22, 0x18uLL, 7uLL);
  v25[2] = v24;
  v21[2] = v23;
  v21[3] = &protocol witness table for _IndexBox<A>;
  v21[4] = v25;
  v21[5] = &protocol witness table for _IndexBox<A>;
  unint64_t v30 = v32;
  uint64_t v26 = (const char *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CustomLeafReflectable);
  uint64_t result = swift_dynamicCast((char *)v29, &v30, v7, v26, 6uLL);
  char v28 = result;
  if (result) {
    uint64_t result = __swift_destroy_boxed_opaque_existential_1Tm(v29);
  }
  *(void *)a5 = v7;
  *(void *)(a5 + 8) = v21;
  *(unsigned char *)(a5 + 16) = 5;
  *(void *)(a5 + 24) = v8;
  *(void *)(a5 + 32) = v10;
  *(unsigned char *)(a5 + 40) = v28;
  return result;
}

uint64_t specialized Mirror.init<A, B>(_:unlabeledChildren:displayStyle:ancestorRepresentation:)@<X0>(int a1@<W0>, char a2@<W1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  HIDWORD(v22) = a1;
  v21[0] = a3;
  v21[1] = a4;
  uint64_t v10 = static Mirror._superclassIterator<A>(_:_:)((uint64_t)&v22 + 4, (uint64_t)v21, (swift *)&type metadata for Unicode.Scalar);
  uint64_t v12 = v11;
  outlined consume of Mirror.AncestorRepresentation(a3, a4);
  uint64_t v13 = (unint64_t *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _CollectionBox<LazyMapSequence<EmptyCollection<()>, (label: String?, value: Any)>>);
  uint64_t v14 = swift_allocObject(v13, 0x40uLL, 7uLL);
  v14[6] = specialized closure #1 in Mirror.init<A, B>(_:unlabeledChildren:displayStyle:ancestorRepresentation:);
  v14[7] = 0;
  uint64_t v15 = (unint64_t *)canonical specialized generic type metadata accessor for _IndexBox<Int>();
  uint64_t v16 = swift_allocObject(v15, 0x18uLL, 7uLL);
  long long v16[2] = 0;
  uint64_t v17 = swift_allocObject(v15, 0x18uLL, 7uLL);
  v17[2] = 0;
  v14[2] = v16;
  v14[3] = &protocol witness table for _IndexBox<A>;
  void v14[4] = v17;
  unint64_t v14[5] = &protocol witness table for _IndexBox<A>;
  LODWORD(v22) = a1;
  uint64_t v18 = (const char *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CustomLeafReflectable);
  uint64_t result = swift_dynamicCast((char *)v21, &v22, (Class *)&type metadata for Unicode.Scalar, v18, 6uLL);
  char v20 = result;
  if (result) {
    uint64_t result = __swift_destroy_boxed_opaque_existential_1Tm(v21);
  }
  *(void *)a5 = &type metadata for Unicode.Scalar;
  *(void *)(a5 + 8) = v14;
  *(unsigned char *)(a5 + 16) = a2;
  *(void *)(a5 + 24) = v10;
  *(void *)(a5 + 32) = v12;
  *(unsigned char *)(a5 + 40) = v20;
  return result;
}

{
  double (*v10)@<D0>(uint64_t@<X8>);
  uint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  void *v14;
  unint64_t *v15;
  void *v16;
  void *v17;
  const char *v18;
  uint64_t result;
  char v20;
  uint64_t v21[5];
  unint64_t v22;

  HIDWORD(v22) = a1;
  v21[0] = a3;
  v21[1] = a4;
  uint64_t v10 = static Mirror._superclassIterator<A>(_:_:)((uint64_t)&v22 + 4, (uint64_t)v21, (swift *)&type metadata for UInt32);
  uint64_t v12 = v11;
  outlined consume of Mirror.AncestorRepresentation(a3, a4);
  uint64_t v13 = (unint64_t *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _CollectionBox<LazyMapSequence<EmptyCollection<()>, (label: String?, value: Any)>>);
  uint64_t v14 = swift_allocObject(v13, 0x40uLL, 7uLL);
  v14[6] = specialized closure #1 in Mirror.init<A, B>(_:unlabeledChildren:displayStyle:ancestorRepresentation:);
  v14[7] = 0;
  uint64_t v15 = (unint64_t *)canonical specialized generic type metadata accessor for _IndexBox<Int>();
  uint64_t v16 = swift_allocObject(v15, 0x18uLL, 7uLL);
  long long v16[2] = 0;
  uint64_t v17 = swift_allocObject(v15, 0x18uLL, 7uLL);
  v17[2] = 0;
  v14[2] = v16;
  v14[3] = &protocol witness table for _IndexBox<A>;
  void v14[4] = v17;
  unint64_t v14[5] = &protocol witness table for _IndexBox<A>;
  LODWORD(v22) = a1;
  uint64_t v18 = (const char *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CustomLeafReflectable);
  uint64_t result = swift_dynamicCast((char *)v21, &v22, (Class *)&type metadata for UInt32, v18, 6uLL);
  char v20 = result;
  if (result) {
    uint64_t result = __swift_destroy_boxed_opaque_existential_1Tm(v21);
  }
  *(void *)a5 = &type metadata for UInt32;
  *(void *)(a5 + 8) = v14;
  *(unsigned char *)(a5 + 16) = a2;
  *(void *)(a5 + 24) = v10;
  *(void *)(a5 + 32) = v12;
  *(unsigned char *)(a5 + 40) = v20;
  return result;
}

{
  double (*v10)@<D0>(uint64_t@<X8>);
  uint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  void *v14;
  unint64_t *v15;
  void *v16;
  void *v17;
  const char *v18;
  uint64_t result;
  char v20;
  uint64_t v21[5];
  unint64_t v22;

  HIDWORD(v22) = a1;
  v21[0] = a3;
  v21[1] = a4;
  uint64_t v10 = static Mirror._superclassIterator<A>(_:_:)((uint64_t)&v22 + 4, (uint64_t)v21, (swift *)&type metadata for Int32);
  uint64_t v12 = v11;
  outlined consume of Mirror.AncestorRepresentation(a3, a4);
  uint64_t v13 = (unint64_t *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _CollectionBox<LazyMapSequence<EmptyCollection<()>, (label: String?, value: Any)>>);
  uint64_t v14 = swift_allocObject(v13, 0x40uLL, 7uLL);
  v14[6] = specialized closure #1 in Mirror.init<A, B>(_:unlabeledChildren:displayStyle:ancestorRepresentation:);
  v14[7] = 0;
  uint64_t v15 = (unint64_t *)canonical specialized generic type metadata accessor for _IndexBox<Int>();
  uint64_t v16 = swift_allocObject(v15, 0x18uLL, 7uLL);
  long long v16[2] = 0;
  uint64_t v17 = swift_allocObject(v15, 0x18uLL, 7uLL);
  v17[2] = 0;
  v14[2] = v16;
  v14[3] = &protocol witness table for _IndexBox<A>;
  void v14[4] = v17;
  unint64_t v14[5] = &protocol witness table for _IndexBox<A>;
  LODWORD(v22) = a1;
  uint64_t v18 = (const char *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CustomLeafReflectable);
  uint64_t result = swift_dynamicCast((char *)v21, &v22, (Class *)&type metadata for Int32, v18, 6uLL);
  char v20 = result;
  if (result) {
    uint64_t result = __swift_destroy_boxed_opaque_existential_1Tm(v21);
  }
  *(void *)a5 = &type metadata for Int32;
  *(void *)(a5 + 8) = v14;
  *(unsigned char *)(a5 + 16) = a2;
  *(void *)(a5 + 24) = v10;
  *(void *)(a5 + 32) = v12;
  *(unsigned char *)(a5 + 40) = v20;
  return result;
}

uint64_t specialized Mirror.init<A, B>(_:unlabeledChildren:displayStyle:ancestorRepresentation:)@<X0>(unint64_t a1@<X0>, unint64_t a2@<X1>, char a3@<W2>, unint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  v25[0] = a1;
  v25[1] = a2;
  v23[0] = a4;
  v23[1] = a5;
  uint64_t v12 = static Mirror._superclassIterator<A>(_:_:)((uint64_t)v25, (uint64_t)v23, (swift *)&type metadata for UInt128);
  uint64_t v14 = v13;
  outlined consume of Mirror.AncestorRepresentation(a4, a5);
  uint64_t v15 = (unint64_t *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _CollectionBox<LazyMapSequence<EmptyCollection<()>, (label: String?, value: Any)>>);
  uint64_t v16 = swift_allocObject(v15, 0x40uLL, 7uLL);
  v16[6] = specialized closure #1 in Mirror.init<A, B>(_:unlabeledChildren:displayStyle:ancestorRepresentation:);
  v16[7] = 0;
  uint64_t v17 = (unint64_t *)canonical specialized generic type metadata accessor for _IndexBox<Int>();
  uint64_t v18 = swift_allocObject(v17, 0x18uLL, 7uLL);
  v18[2] = 0;
  uint64_t v19 = swift_allocObject(v17, 0x18uLL, 7uLL);
  v19[2] = 0;
  long long v16[2] = v18;
  void v16[3] = &protocol witness table for _IndexBox<A>;
  v16[4] = v19;
  v16[5] = &protocol witness table for _IndexBox<A>;
  v24[0] = a1;
  v24[1] = a2;
  char v20 = (const char *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CustomLeafReflectable);
  uint64_t result = swift_dynamicCast((char *)v23, v24, (Class *)&type metadata for UInt128, v20, 6uLL);
  char v22 = result;
  if (result) {
    uint64_t result = __swift_destroy_boxed_opaque_existential_1Tm(v23);
  }
  *(void *)a6 = &type metadata for UInt128;
  *(void *)(a6 + 8) = v16;
  *(unsigned char *)(a6 + 16) = a3;
  *(void *)(a6 + 24) = v12;
  *(void *)(a6 + 32) = v14;
  *(unsigned char *)(a6 + 40) = v22;
  return result;
}

{
  double (*v12)@<D0>(uint64_t@<X8>);
  uint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  void *v16;
  unint64_t *v17;
  void *v18;
  void *v19;
  const char *v20;
  uint64_t result;
  char v22;
  uint64_t v23[5];
  unint64_t v24[2];
  void v25[2];

  v25[0] = a1;
  v25[1] = a2;
  v23[0] = a4;
  v23[1] = a5;
  uint64_t v12 = static Mirror._superclassIterator<A>(_:_:)((uint64_t)v25, (uint64_t)v23, (swift *)&type metadata for Int128);
  uint64_t v14 = v13;
  outlined consume of Mirror.AncestorRepresentation(a4, a5);
  uint64_t v15 = (unint64_t *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _CollectionBox<LazyMapSequence<EmptyCollection<()>, (label: String?, value: Any)>>);
  uint64_t v16 = swift_allocObject(v15, 0x40uLL, 7uLL);
  v16[6] = specialized closure #1 in Mirror.init<A, B>(_:unlabeledChildren:displayStyle:ancestorRepresentation:);
  v16[7] = 0;
  uint64_t v17 = (unint64_t *)canonical specialized generic type metadata accessor for _IndexBox<Int>();
  uint64_t v18 = swift_allocObject(v17, 0x18uLL, 7uLL);
  v18[2] = 0;
  uint64_t v19 = swift_allocObject(v17, 0x18uLL, 7uLL);
  v19[2] = 0;
  long long v16[2] = v18;
  void v16[3] = &protocol witness table for _IndexBox<A>;
  v16[4] = v19;
  v16[5] = &protocol witness table for _IndexBox<A>;
  v24[0] = a1;
  v24[1] = a2;
  char v20 = (const char *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CustomLeafReflectable);
  uint64_t result = swift_dynamicCast((char *)v23, v24, (Class *)&type metadata for Int128, v20, 6uLL);
  char v22 = result;
  if (result) {
    uint64_t result = __swift_destroy_boxed_opaque_existential_1Tm(v23);
  }
  *(void *)a6 = &type metadata for Int128;
  *(void *)(a6 + 8) = v16;
  *(unsigned char *)(a6 + 16) = a3;
  *(void *)(a6 + 24) = v12;
  *(void *)(a6 + 32) = v14;
  *(unsigned char *)(a6 + 40) = v22;
  return result;
}

{
  double (*v12)@<D0>(uint64_t@<X8>);
  uint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  void *v16;
  unint64_t *v17;
  void *v18;
  void *v19;
  const char *v20;
  uint64_t result;
  char v22;
  uint64_t v23[5];
  unint64_t v24[2];
  void v25[2];

  v25[0] = a1;
  v25[1] = a2;
  v23[0] = a4;
  v23[1] = a5;
  uint64_t v12 = static Mirror._superclassIterator<A>(_:_:)((uint64_t)v25, (uint64_t)v23, (swift *)&type metadata for StaticBigInt);
  uint64_t v14 = v13;
  outlined consume of Mirror.AncestorRepresentation(a4, a5);
  uint64_t v15 = (unint64_t *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _CollectionBox<LazyMapSequence<EmptyCollection<()>, (label: String?, value: Any)>>);
  uint64_t v16 = swift_allocObject(v15, 0x40uLL, 7uLL);
  v16[6] = specialized closure #1 in Mirror.init<A, B>(_:unlabeledChildren:displayStyle:ancestorRepresentation:);
  v16[7] = 0;
  uint64_t v17 = (unint64_t *)canonical specialized generic type metadata accessor for _IndexBox<Int>();
  uint64_t v18 = swift_allocObject(v17, 0x18uLL, 7uLL);
  v18[2] = 0;
  uint64_t v19 = swift_allocObject(v17, 0x18uLL, 7uLL);
  v19[2] = 0;
  long long v16[2] = v18;
  void v16[3] = &protocol witness table for _IndexBox<A>;
  v16[4] = v19;
  v16[5] = &protocol witness table for _IndexBox<A>;
  v24[0] = a1;
  v24[1] = a2;
  char v20 = (const char *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CustomLeafReflectable);
  uint64_t result = swift_dynamicCast((char *)v23, v24, (Class *)&type metadata for StaticBigInt, v20, 6uLL);
  char v22 = result;
  if (result) {
    uint64_t result = __swift_destroy_boxed_opaque_existential_1Tm(v23);
  }
  *(void *)a6 = &type metadata for StaticBigInt;
  *(void *)(a6 + 8) = v16;
  *(unsigned char *)(a6 + 16) = a3;
  *(void *)(a6 + 24) = v12;
  *(void *)(a6 + 32) = v14;
  *(unsigned char *)(a6 + 40) = v22;
  return result;
}

{
  double (*v12)@<D0>(uint64_t@<X8>);
  uint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  void *v16;
  unint64_t *v17;
  void *v18;
  void *v19;
  const char *v20;
  uint64_t result;
  char v22;
  uint64_t v23[5];
  unint64_t v24[2];
  void v25[2];

  v25[0] = a1;
  v25[1] = a2;
  v23[0] = a4;
  v23[1] = a5;
  uint64_t v12 = static Mirror._superclassIterator<A>(_:_:)((uint64_t)v25, (uint64_t)v23, (swift *)&type metadata for String);
  uint64_t v14 = v13;
  outlined consume of Mirror.AncestorRepresentation(a4, a5);
  uint64_t v15 = (unint64_t *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _CollectionBox<LazyMapSequence<EmptyCollection<()>, (label: String?, value: Any)>>);
  uint64_t v16 = swift_allocObject(v15, 0x40uLL, 7uLL);
  v16[6] = specialized closure #1 in Mirror.init<A, B>(_:unlabeledChildren:displayStyle:ancestorRepresentation:);
  v16[7] = 0;
  uint64_t v17 = (unint64_t *)canonical specialized generic type metadata accessor for _IndexBox<Int>();
  uint64_t v18 = swift_allocObject(v17, 0x18uLL, 7uLL);
  v18[2] = 0;
  uint64_t v19 = swift_allocObject(v17, 0x18uLL, 7uLL);
  v19[2] = 0;
  long long v16[2] = v18;
  void v16[3] = &protocol witness table for _IndexBox<A>;
  v16[4] = v19;
  v16[5] = &protocol witness table for _IndexBox<A>;
  v24[0] = a1;
  v24[1] = a2;
  char v20 = (const char *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CustomLeafReflectable);
  uint64_t result = swift_dynamicCast((char *)v23, v24, (Class *)&type metadata for String, v20, 6uLL);
  char v22 = result;
  if (result) {
    uint64_t result = __swift_destroy_boxed_opaque_existential_1Tm(v23);
  }
  *(void *)a6 = &type metadata for String;
  *(void *)(a6 + 8) = v16;
  *(unsigned char *)(a6 + 16) = a3;
  *(void *)(a6 + 24) = v12;
  *(void *)(a6 + 32) = v14;
  *(unsigned char *)(a6 + 40) = v22;
  return result;
}

{
  double (*v12)@<D0>(uint64_t@<X8>);
  uint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  void *v16;
  unint64_t *v17;
  void *v18;
  void *v19;
  const char *v20;
  uint64_t result;
  char v22;
  uint64_t v23[5];
  unint64_t v24[2];
  void v25[2];

  v25[0] = a1;
  v25[1] = a2;
  v23[0] = a4;
  v23[1] = a5;
  uint64_t v12 = static Mirror._superclassIterator<A>(_:_:)((uint64_t)v25, (uint64_t)v23, (swift *)&type metadata for Character);
  uint64_t v14 = v13;
  outlined consume of Mirror.AncestorRepresentation(a4, a5);
  uint64_t v15 = (unint64_t *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _CollectionBox<LazyMapSequence<EmptyCollection<()>, (label: String?, value: Any)>>);
  uint64_t v16 = swift_allocObject(v15, 0x40uLL, 7uLL);
  v16[6] = specialized closure #1 in Mirror.init<A, B>(_:unlabeledChildren:displayStyle:ancestorRepresentation:);
  v16[7] = 0;
  uint64_t v17 = (unint64_t *)canonical specialized generic type metadata accessor for _IndexBox<Int>();
  uint64_t v18 = swift_allocObject(v17, 0x18uLL, 7uLL);
  v18[2] = 0;
  uint64_t v19 = swift_allocObject(v17, 0x18uLL, 7uLL);
  v19[2] = 0;
  long long v16[2] = v18;
  void v16[3] = &protocol witness table for _IndexBox<A>;
  v16[4] = v19;
  v16[5] = &protocol witness table for _IndexBox<A>;
  v24[0] = a1;
  v24[1] = a2;
  char v20 = (const char *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CustomLeafReflectable);
  uint64_t result = swift_dynamicCast((char *)v23, v24, (Class *)&type metadata for Character, v20, 6uLL);
  char v22 = result;
  if (result) {
    uint64_t result = __swift_destroy_boxed_opaque_existential_1Tm(v23);
  }
  *(void *)a6 = &type metadata for Character;
  *(void *)(a6 + 8) = v16;
  *(unsigned char *)(a6 + 16) = a3;
  *(void *)(a6 + 24) = v12;
  *(void *)(a6 + 32) = v14;
  *(unsigned char *)(a6 + 40) = v22;
  return result;
}

uint64_t specialized Mirror.init<A, B>(_:unlabeledChildren:displayStyle:ancestorRepresentation:)@<X0>(unint64_t a1@<X0>, char a2@<W1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  unint64_t v23 = a1;
  v21[0] = a3;
  v21[1] = a4;
  uint64_t v10 = static Mirror._superclassIterator<A>(_:_:)((uint64_t)&v23, (uint64_t)v21, (swift *)&type metadata for UInt64);
  uint64_t v12 = v11;
  outlined consume of Mirror.AncestorRepresentation(a3, a4);
  uint64_t v13 = (unint64_t *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _CollectionBox<LazyMapSequence<EmptyCollection<()>, (label: String?, value: Any)>>);
  uint64_t v14 = swift_allocObject(v13, 0x40uLL, 7uLL);
  v14[6] = specialized closure #1 in Mirror.init<A, B>(_:unlabeledChildren:displayStyle:ancestorRepresentation:);
  v14[7] = 0;
  uint64_t v15 = (unint64_t *)canonical specialized generic type metadata accessor for _IndexBox<Int>();
  uint64_t v16 = swift_allocObject(v15, 0x18uLL, 7uLL);
  long long v16[2] = 0;
  uint64_t v17 = swift_allocObject(v15, 0x18uLL, 7uLL);
  v17[2] = 0;
  v14[2] = v16;
  v14[3] = &protocol witness table for _IndexBox<A>;
  void v14[4] = v17;
  unint64_t v14[5] = &protocol witness table for _IndexBox<A>;
  unint64_t v22 = a1;
  uint64_t v18 = (const char *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CustomLeafReflectable);
  uint64_t result = swift_dynamicCast((char *)v21, &v22, (Class *)&type metadata for UInt64, v18, 6uLL);
  char v20 = result;
  if (result) {
    uint64_t result = __swift_destroy_boxed_opaque_existential_1Tm(v21);
  }
  *(void *)a5 = &type metadata for UInt64;
  *(void *)(a5 + 8) = v14;
  *(unsigned char *)(a5 + 16) = a2;
  *(void *)(a5 + 24) = v10;
  *(void *)(a5 + 32) = v12;
  *(unsigned char *)(a5 + 40) = v20;
  return result;
}

{
  double (*v10)@<D0>(uint64_t@<X8>);
  uint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  void *v14;
  unint64_t *v15;
  void *v16;
  void *v17;
  const char *v18;
  uint64_t result;
  char v20;
  uint64_t v21[5];
  unint64_t v22;
  unint64_t v23;

  unint64_t v23 = a1;
  v21[0] = a3;
  v21[1] = a4;
  uint64_t v10 = static Mirror._superclassIterator<A>(_:_:)((uint64_t)&v23, (uint64_t)v21, (swift *)&type metadata for Int64);
  uint64_t v12 = v11;
  outlined consume of Mirror.AncestorRepresentation(a3, a4);
  uint64_t v13 = (unint64_t *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _CollectionBox<LazyMapSequence<EmptyCollection<()>, (label: String?, value: Any)>>);
  uint64_t v14 = swift_allocObject(v13, 0x40uLL, 7uLL);
  v14[6] = specialized closure #1 in Mirror.init<A, B>(_:unlabeledChildren:displayStyle:ancestorRepresentation:);
  v14[7] = 0;
  uint64_t v15 = (unint64_t *)canonical specialized generic type metadata accessor for _IndexBox<Int>();
  uint64_t v16 = swift_allocObject(v15, 0x18uLL, 7uLL);
  long long v16[2] = 0;
  uint64_t v17 = swift_allocObject(v15, 0x18uLL, 7uLL);
  v17[2] = 0;
  v14[2] = v16;
  v14[3] = &protocol witness table for _IndexBox<A>;
  void v14[4] = v17;
  unint64_t v14[5] = &protocol witness table for _IndexBox<A>;
  unint64_t v22 = a1;
  uint64_t v18 = (const char *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CustomLeafReflectable);
  uint64_t result = swift_dynamicCast((char *)v21, &v22, (Class *)&type metadata for Int64, v18, 6uLL);
  char v20 = result;
  if (result) {
    uint64_t result = __swift_destroy_boxed_opaque_existential_1Tm(v21);
  }
  *(void *)a5 = &type metadata for Int64;
  *(void *)(a5 + 8) = v14;
  *(unsigned char *)(a5 + 16) = a2;
  *(void *)(a5 + 24) = v10;
  *(void *)(a5 + 32) = v12;
  *(unsigned char *)(a5 + 40) = v20;
  return result;
}

{
  double (*v10)@<D0>(uint64_t@<X8>);
  uint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  void *v14;
  unint64_t *v15;
  void *v16;
  void *v17;
  const char *v18;
  uint64_t result;
  char v20;
  uint64_t v21[5];
  unint64_t v22;
  unint64_t v23;

  unint64_t v23 = a1;
  v21[0] = a3;
  v21[1] = a4;
  uint64_t v10 = static Mirror._superclassIterator<A>(_:_:)((uint64_t)&v23, (uint64_t)v21, (swift *)&type metadata for UInt);
  uint64_t v12 = v11;
  outlined consume of Mirror.AncestorRepresentation(a3, a4);
  uint64_t v13 = (unint64_t *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _CollectionBox<LazyMapSequence<EmptyCollection<()>, (label: String?, value: Any)>>);
  uint64_t v14 = swift_allocObject(v13, 0x40uLL, 7uLL);
  v14[6] = specialized closure #1 in Mirror.init<A, B>(_:unlabeledChildren:displayStyle:ancestorRepresentation:);
  v14[7] = 0;
  uint64_t v15 = (unint64_t *)canonical specialized generic type metadata accessor for _IndexBox<Int>();
  uint64_t v16 = swift_allocObject(v15, 0x18uLL, 7uLL);
  long long v16[2] = 0;
  uint64_t v17 = swift_allocObject(v15, 0x18uLL, 7uLL);
  v17[2] = 0;
  v14[2] = v16;
  v14[3] = &protocol witness table for _IndexBox<A>;
  void v14[4] = v17;
  unint64_t v14[5] = &protocol witness table for _IndexBox<A>;
  unint64_t v22 = a1;
  uint64_t v18 = (const char *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CustomLeafReflectable);
  uint64_t result = swift_dynamicCast((char *)v21, &v22, (Class *)&type metadata for UInt, v18, 6uLL);
  char v20 = result;
  if (result) {
    uint64_t result = __swift_destroy_boxed_opaque_existential_1Tm(v21);
  }
  *(void *)a5 = &type metadata for UInt;
  *(void *)(a5 + 8) = v14;
  *(unsigned char *)(a5 + 16) = a2;
  *(void *)(a5 + 24) = v10;
  *(void *)(a5 + 32) = v12;
  *(unsigned char *)(a5 + 40) = v20;
  return result;
}

{
  double (*v10)@<D0>(uint64_t@<X8>);
  uint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  void *v14;
  unint64_t *v15;
  void *v16;
  void *v17;
  const char *v18;
  uint64_t result;
  char v20;
  uint64_t v21[5];
  unint64_t v22;
  unint64_t v23;

  unint64_t v23 = a1;
  v21[0] = a3;
  v21[1] = a4;
  uint64_t v10 = static Mirror._superclassIterator<A>(_:_:)((uint64_t)&v23, (uint64_t)v21, (swift *)&type metadata for Int);
  uint64_t v12 = v11;
  outlined consume of Mirror.AncestorRepresentation(a3, a4);
  uint64_t v13 = (unint64_t *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _CollectionBox<LazyMapSequence<EmptyCollection<()>, (label: String?, value: Any)>>);
  uint64_t v14 = swift_allocObject(v13, 0x40uLL, 7uLL);
  v14[6] = specialized closure #1 in Mirror.init<A, B>(_:unlabeledChildren:displayStyle:ancestorRepresentation:);
  v14[7] = 0;
  uint64_t v15 = (unint64_t *)canonical specialized generic type metadata accessor for _IndexBox<Int>();
  uint64_t v16 = swift_allocObject(v15, 0x18uLL, 7uLL);
  long long v16[2] = 0;
  uint64_t v17 = swift_allocObject(v15, 0x18uLL, 7uLL);
  v17[2] = 0;
  v14[2] = v16;
  v14[3] = &protocol witness table for _IndexBox<A>;
  void v14[4] = v17;
  unint64_t v14[5] = &protocol witness table for _IndexBox<A>;
  unint64_t v22 = a1;
  uint64_t v18 = (const char *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CustomLeafReflectable);
  uint64_t result = swift_dynamicCast((char *)v21, &v22, (Class *)&type metadata for Int, v18, 6uLL);
  char v20 = result;
  if (result) {
    uint64_t result = __swift_destroy_boxed_opaque_existential_1Tm(v21);
  }
  *(void *)a5 = &type metadata for Int;
  *(void *)(a5 + 8) = v14;
  *(unsigned char *)(a5 + 16) = a2;
  *(void *)(a5 + 24) = v10;
  *(void *)(a5 + 32) = v12;
  *(unsigned char *)(a5 + 40) = v20;
  return result;
}

uint64_t specialized Mirror.init<A, B>(_:unlabeledChildren:displayStyle:ancestorRepresentation:)@<X0>(__int16 a1@<W0>, char a2@<W1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  WORD1(v22) = a1;
  v21[0] = a3;
  v21[1] = a4;
  uint64_t v10 = static Mirror._superclassIterator<A>(_:_:)((uint64_t)&v22 + 2, (uint64_t)v21, (swift *)&type metadata for UInt16);
  uint64_t v12 = v11;
  outlined consume of Mirror.AncestorRepresentation(a3, a4);
  uint64_t v13 = (unint64_t *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _CollectionBox<LazyMapSequence<EmptyCollection<()>, (label: String?, value: Any)>>);
  uint64_t v14 = swift_allocObject(v13, 0x40uLL, 7uLL);
  v14[6] = specialized closure #1 in Mirror.init<A, B>(_:unlabeledChildren:displayStyle:ancestorRepresentation:);
  v14[7] = 0;
  uint64_t v15 = (unint64_t *)canonical specialized generic type metadata accessor for _IndexBox<Int>();
  uint64_t v16 = swift_allocObject(v15, 0x18uLL, 7uLL);
  long long v16[2] = 0;
  uint64_t v17 = swift_allocObject(v15, 0x18uLL, 7uLL);
  v17[2] = 0;
  v14[2] = v16;
  v14[3] = &protocol witness table for _IndexBox<A>;
  void v14[4] = v17;
  unint64_t v14[5] = &protocol witness table for _IndexBox<A>;
  LOWORD(v22) = a1;
  uint64_t v18 = (const char *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CustomLeafReflectable);
  uint64_t result = swift_dynamicCast((char *)v21, &v22, (Class *)&type metadata for UInt16, v18, 6uLL);
  char v20 = result;
  if (result) {
    uint64_t result = __swift_destroy_boxed_opaque_existential_1Tm(v21);
  }
  *(void *)a5 = &type metadata for UInt16;
  *(void *)(a5 + 8) = v14;
  *(unsigned char *)(a5 + 16) = a2;
  *(void *)(a5 + 24) = v10;
  *(void *)(a5 + 32) = v12;
  *(unsigned char *)(a5 + 40) = v20;
  return result;
}

{
  double (*v10)@<D0>(uint64_t@<X8>);
  uint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  void *v14;
  unint64_t *v15;
  void *v16;
  void *v17;
  const char *v18;
  uint64_t result;
  char v20;
  uint64_t v21[5];
  unint64_t v22;

  WORD1(v22) = a1;
  v21[0] = a3;
  v21[1] = a4;
  uint64_t v10 = static Mirror._superclassIterator<A>(_:_:)((uint64_t)&v22 + 2, (uint64_t)v21, (swift *)&type metadata for Int16);
  uint64_t v12 = v11;
  outlined consume of Mirror.AncestorRepresentation(a3, a4);
  uint64_t v13 = (unint64_t *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _CollectionBox<LazyMapSequence<EmptyCollection<()>, (label: String?, value: Any)>>);
  uint64_t v14 = swift_allocObject(v13, 0x40uLL, 7uLL);
  v14[6] = specialized closure #1 in Mirror.init<A, B>(_:unlabeledChildren:displayStyle:ancestorRepresentation:);
  v14[7] = 0;
  uint64_t v15 = (unint64_t *)canonical specialized generic type metadata accessor for _IndexBox<Int>();
  uint64_t v16 = swift_allocObject(v15, 0x18uLL, 7uLL);
  long long v16[2] = 0;
  uint64_t v17 = swift_allocObject(v15, 0x18uLL, 7uLL);
  v17[2] = 0;
  v14[2] = v16;
  v14[3] = &protocol witness table for _IndexBox<A>;
  void v14[4] = v17;
  unint64_t v14[5] = &protocol witness table for _IndexBox<A>;
  LOWORD(v22) = a1;
  uint64_t v18 = (const char *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CustomLeafReflectable);
  uint64_t result = swift_dynamicCast((char *)v21, &v22, (Class *)&type metadata for Int16, v18, 6uLL);
  char v20 = result;
  if (result) {
    uint64_t result = __swift_destroy_boxed_opaque_existential_1Tm(v21);
  }
  *(void *)a5 = &type metadata for Int16;
  *(void *)(a5 + 8) = v14;
  *(unsigned char *)(a5 + 16) = a2;
  *(void *)(a5 + 24) = v10;
  *(void *)(a5 + 32) = v12;
  *(unsigned char *)(a5 + 40) = v20;
  return result;
}

uint64_t specialized Mirror.init<A, B>(_:unlabeledChildren:displayStyle:ancestorRepresentation:)@<X0>(char a1@<W0>, char a2@<W1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  BYTE1(v22) = a1;
  v21[0] = a3;
  v21[1] = a4;
  uint64_t v10 = static Mirror._superclassIterator<A>(_:_:)((uint64_t)&v22 + 1, (uint64_t)v21, (swift *)&type metadata for UInt8);
  uint64_t v12 = v11;
  outlined consume of Mirror.AncestorRepresentation(a3, a4);
  uint64_t v13 = (unint64_t *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _CollectionBox<LazyMapSequence<EmptyCollection<()>, (label: String?, value: Any)>>);
  uint64_t v14 = swift_allocObject(v13, 0x40uLL, 7uLL);
  v14[6] = specialized closure #1 in Mirror.init<A, B>(_:unlabeledChildren:displayStyle:ancestorRepresentation:);
  v14[7] = 0;
  uint64_t v15 = (unint64_t *)canonical specialized generic type metadata accessor for _IndexBox<Int>();
  uint64_t v16 = swift_allocObject(v15, 0x18uLL, 7uLL);
  long long v16[2] = 0;
  uint64_t v17 = swift_allocObject(v15, 0x18uLL, 7uLL);
  v17[2] = 0;
  v14[2] = v16;
  v14[3] = &protocol witness table for _IndexBox<A>;
  void v14[4] = v17;
  unint64_t v14[5] = &protocol witness table for _IndexBox<A>;
  LOBYTE(v22) = a1;
  uint64_t v18 = (const char *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CustomLeafReflectable);
  uint64_t result = swift_dynamicCast((char *)v21, &v22, (Class *)&type metadata for UInt8, v18, 6uLL);
  char v20 = result;
  if (result) {
    uint64_t result = __swift_destroy_boxed_opaque_existential_1Tm(v21);
  }
  *(void *)a5 = &type metadata for UInt8;
  *(void *)(a5 + 8) = v14;
  *(unsigned char *)(a5 + 16) = a2;
  *(void *)(a5 + 24) = v10;
  *(void *)(a5 + 32) = v12;
  *(unsigned char *)(a5 + 40) = v20;
  return result;
}

{
  double (*v10)@<D0>(uint64_t@<X8>);
  uint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  void *v14;
  unint64_t *v15;
  void *v16;
  void *v17;
  const char *v18;
  uint64_t result;
  char v20;
  uint64_t v21[5];
  unint64_t v22;

  BYTE1(v22) = a1;
  v21[0] = a3;
  v21[1] = a4;
  uint64_t v10 = static Mirror._superclassIterator<A>(_:_:)((uint64_t)&v22 + 1, (uint64_t)v21, (swift *)&type metadata for Int8);
  uint64_t v12 = v11;
  outlined consume of Mirror.AncestorRepresentation(a3, a4);
  uint64_t v13 = (unint64_t *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _CollectionBox<LazyMapSequence<EmptyCollection<()>, (label: String?, value: Any)>>);
  uint64_t v14 = swift_allocObject(v13, 0x40uLL, 7uLL);
  v14[6] = specialized closure #1 in Mirror.init<A, B>(_:unlabeledChildren:displayStyle:ancestorRepresentation:);
  v14[7] = 0;
  uint64_t v15 = (unint64_t *)canonical specialized generic type metadata accessor for _IndexBox<Int>();
  uint64_t v16 = swift_allocObject(v15, 0x18uLL, 7uLL);
  long long v16[2] = 0;
  uint64_t v17 = swift_allocObject(v15, 0x18uLL, 7uLL);
  v17[2] = 0;
  v14[2] = v16;
  v14[3] = &protocol witness table for _IndexBox<A>;
  void v14[4] = v17;
  unint64_t v14[5] = &protocol witness table for _IndexBox<A>;
  LOBYTE(v22) = a1;
  uint64_t v18 = (const char *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CustomLeafReflectable);
  uint64_t result = swift_dynamicCast((char *)v21, &v22, (Class *)&type metadata for Int8, v18, 6uLL);
  char v20 = result;
  if (result) {
    uint64_t result = __swift_destroy_boxed_opaque_existential_1Tm(v21);
  }
  *(void *)a5 = &type metadata for Int8;
  *(void *)(a5 + 8) = v14;
  *(unsigned char *)(a5 + 16) = a2;
  *(void *)(a5 + 24) = v10;
  *(void *)(a5 + 32) = v12;
  *(unsigned char *)(a5 + 40) = v20;
  return result;
}

{
  double (*v10)@<D0>(uint64_t@<X8>);
  uint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  void *v14;
  unint64_t *v15;
  void *v16;
  void *v17;
  const char *v18;
  uint64_t result;
  char v20;
  uint64_t v21[5];
  unint64_t v22;

  BYTE1(v22) = a1;
  v21[0] = a3;
  v21[1] = a4;
  uint64_t v10 = static Mirror._superclassIterator<A>(_:_:)((uint64_t)&v22 + 1, (uint64_t)v21, (swift *)&type metadata for Bool);
  uint64_t v12 = v11;
  outlined consume of Mirror.AncestorRepresentation(a3, a4);
  uint64_t v13 = (unint64_t *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _CollectionBox<LazyMapSequence<EmptyCollection<()>, (label: String?, value: Any)>>);
  uint64_t v14 = swift_allocObject(v13, 0x40uLL, 7uLL);
  v14[6] = specialized closure #1 in Mirror.init<A, B>(_:unlabeledChildren:displayStyle:ancestorRepresentation:);
  v14[7] = 0;
  uint64_t v15 = (unint64_t *)canonical specialized generic type metadata accessor for _IndexBox<Int>();
  uint64_t v16 = swift_allocObject(v15, 0x18uLL, 7uLL);
  long long v16[2] = 0;
  uint64_t v17 = swift_allocObject(v15, 0x18uLL, 7uLL);
  v17[2] = 0;
  v14[2] = v16;
  v14[3] = &protocol witness table for _IndexBox<A>;
  void v14[4] = v17;
  unint64_t v14[5] = &protocol witness table for _IndexBox<A>;
  LOBYTE(v22) = a1;
  uint64_t v18 = (const char *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CustomLeafReflectable);
  uint64_t result = swift_dynamicCast((char *)v21, &v22, (Class *)&type metadata for Bool, v18, 6uLL);
  char v20 = result;
  if (result) {
    uint64_t result = __swift_destroy_boxed_opaque_existential_1Tm(v21);
  }
  *(void *)a5 = &type metadata for Bool;
  *(void *)(a5 + 8) = v14;
  *(unsigned char *)(a5 + 16) = a2;
  *(void *)(a5 + 24) = v10;
  *(void *)(a5 + 32) = v12;
  *(unsigned char *)(a5 + 40) = v20;
  return result;
}

uint64_t specialized Mirror.init<A, B>(_:unlabeledChildren:displayStyle:ancestorRepresentation:)@<X0>(char a1@<W0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>, float a5@<S0>)
{
  *((float *)&v22 + 1) = a5;
  v21[0] = a2;
  v21[1] = a3;
  uint64_t v10 = static Mirror._superclassIterator<A>(_:_:)((uint64_t)&v22 + 4, (uint64_t)v21, (swift *)&type metadata for Float);
  uint64_t v12 = v11;
  outlined consume of Mirror.AncestorRepresentation(a2, a3);
  uint64_t v13 = (unint64_t *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _CollectionBox<LazyMapSequence<EmptyCollection<()>, (label: String?, value: Any)>>);
  uint64_t v14 = swift_allocObject(v13, 0x40uLL, 7uLL);
  v14[6] = specialized closure #1 in Mirror.init<A, B>(_:unlabeledChildren:displayStyle:ancestorRepresentation:);
  v14[7] = 0;
  uint64_t v15 = (unint64_t *)canonical specialized generic type metadata accessor for _IndexBox<Int>();
  uint64_t v16 = swift_allocObject(v15, 0x18uLL, 7uLL);
  long long v16[2] = 0;
  uint64_t v17 = swift_allocObject(v15, 0x18uLL, 7uLL);
  v17[2] = 0;
  v14[2] = v16;
  v14[3] = &protocol witness table for _IndexBox<A>;
  void v14[4] = v17;
  unint64_t v14[5] = &protocol witness table for _IndexBox<A>;
  *(float *)&unint64_t v22 = a5;
  uint64_t v18 = (const char *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CustomLeafReflectable);
  uint64_t result = swift_dynamicCast((char *)v21, &v22, (Class *)&type metadata for Float, v18, 6uLL);
  char v20 = result;
  if (result) {
    uint64_t result = __swift_destroy_boxed_opaque_existential_1Tm(v21);
  }
  *(void *)a4 = &type metadata for Float;
  *(void *)(a4 + 8) = v14;
  *(unsigned char *)(a4 + 16) = a1;
  *(void *)(a4 + 24) = v10;
  *(void *)(a4 + 32) = v12;
  *(unsigned char *)(a4 + 40) = v20;
  return result;
}

uint64_t specialized Mirror.init<A, B>(_:unlabeledChildren:displayStyle:ancestorRepresentation:)@<X0>(char a1@<W0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>, double a5@<D0>)
{
  double v23 = a5;
  v21[0] = a2;
  v21[1] = a3;
  uint64_t v10 = static Mirror._superclassIterator<A>(_:_:)((uint64_t)&v23, (uint64_t)v21, (swift *)&type metadata for Double);
  uint64_t v12 = v11;
  outlined consume of Mirror.AncestorRepresentation(a2, a3);
  uint64_t v13 = (unint64_t *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _CollectionBox<LazyMapSequence<EmptyCollection<()>, (label: String?, value: Any)>>);
  uint64_t v14 = swift_allocObject(v13, 0x40uLL, 7uLL);
  v14[6] = specialized closure #1 in Mirror.init<A, B>(_:unlabeledChildren:displayStyle:ancestorRepresentation:);
  v14[7] = 0;
  uint64_t v15 = (unint64_t *)canonical specialized generic type metadata accessor for _IndexBox<Int>();
  uint64_t v16 = swift_allocObject(v15, 0x18uLL, 7uLL);
  long long v16[2] = 0;
  uint64_t v17 = swift_allocObject(v15, 0x18uLL, 7uLL);
  v17[2] = 0;
  v14[2] = v16;
  v14[3] = &protocol witness table for _IndexBox<A>;
  void v14[4] = v17;
  unint64_t v14[5] = &protocol witness table for _IndexBox<A>;
  double v22 = a5;
  uint64_t v18 = (const char *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CustomLeafReflectable);
  uint64_t result = swift_dynamicCast((char *)v21, (unint64_t *)&v22, (Class *)&type metadata for Double, v18, 6uLL);
  char v20 = result;
  if (result) {
    uint64_t result = __swift_destroy_boxed_opaque_existential_1Tm(v21);
  }
  *(void *)a4 = &type metadata for Double;
  *(void *)(a4 + 8) = v14;
  *(unsigned char *)(a4 + 16) = a1;
  *(void *)(a4 + 24) = v10;
  *(void *)(a4 + 32) = v12;
  *(unsigned char *)(a4 + 40) = v20;
  return result;
}

uint64_t specialized Mirror.init<A, B>(_:unlabeledChildren:displayStyle:ancestorRepresentation:)@<X0>(unint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, char a5@<W4>, unint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  v32[0] = a1;
  v32[1] = a2;
  v30[0] = a6;
  v30[1] = a7;
  char v28 = static Mirror._superclassIterator<A>(_:_:)((uint64_t)v32, (uint64_t)v30, (swift *)&type metadata for String.UTF16View);
  uint64_t v16 = v15;
  outlined consume of Mirror.AncestorRepresentation(a6, a7);
  uint64_t v17 = (unint64_t *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _CollectionBox<LazyMapSequence<String.UTF16View, (label: String?, value: Any)>>);
  uint64_t v18 = swift_allocObject(v17, 0x50uLL, 7uLL);
  v18[6] = a3;
  v18[7] = a4;
  v18[8] = specialized closure #1 in Mirror.init<A, B>(_:unlabeledChildren:displayStyle:ancestorRepresentation:);
  v18[9] = 0;
  uint64_t v19 = (unint64_t *)canonical specialized generic type metadata accessor for _IndexBox<String.Index>();
  char v20 = swift_allocObject(v19, 0x18uLL, 7uLL);
  void v20[2] = 15;
  uint64_t v21 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000) == 0) {
    uint64_t v21 = a3;
  }
  uint64_t v22 = 11;
  if (((a4 >> 60) & ((a3 & 0x800000000000000) == 0)) == 0) {
    uint64_t v22 = 7;
  }
  uint64_t v23 = v22 | (v21 << 16);
  Swift::Int v24 = swift_allocObject(v19, 0x18uLL, 7uLL);
  unint64_t v24[2] = v23;
  v18[2] = v20;
  v18[3] = &protocol witness table for _IndexBox<A>;
  v18[4] = v24;
  v18[5] = &protocol witness table for _IndexBox<A>;
  v31[0] = a1;
  v31[1] = a2;
  uint64_t v25 = (const char *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CustomLeafReflectable);
  uint64_t result = swift_dynamicCast((char *)v30, v31, (Class *)&type metadata for String.UTF16View, v25, 6uLL);
  char v27 = result;
  if (result) {
    uint64_t result = __swift_destroy_boxed_opaque_existential_1Tm(v30);
  }
  *(void *)a8 = &type metadata for String.UTF16View;
  *(void *)(a8 + 8) = v18;
  *(unsigned char *)(a8 + 16) = a5;
  *(void *)(a8 + 24) = v28;
  *(void *)(a8 + 32) = v16;
  *(unsigned char *)(a8 + 40) = v27;
  return result;
}

{
  uint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  void *v18;
  unint64_t *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  const char *v25;
  uint64_t result;
  char v27;
  double (*v28)@<D0>(uint64_t@<X8>);
  uint64_t v30[5];
  unint64_t v31[2];
  void v32[2];

  v32[0] = a1;
  v32[1] = a2;
  v30[0] = a6;
  v30[1] = a7;
  char v28 = static Mirror._superclassIterator<A>(_:_:)((uint64_t)v32, (uint64_t)v30, (swift *)&type metadata for String.UTF8View);
  uint64_t v16 = v15;
  outlined consume of Mirror.AncestorRepresentation(a6, a7);
  uint64_t v17 = (unint64_t *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _CollectionBox<LazyMapSequence<String.UTF8View, (label: String?, value: Any)>>);
  uint64_t v18 = swift_allocObject(v17, 0x50uLL, 7uLL);
  v18[6] = a3;
  v18[7] = a4;
  v18[8] = specialized closure #1 in Mirror.init<A, B>(_:unlabeledChildren:displayStyle:ancestorRepresentation:);
  v18[9] = 0;
  uint64_t v19 = (unint64_t *)canonical specialized generic type metadata accessor for _IndexBox<String.Index>();
  char v20 = swift_allocObject(v19, 0x18uLL, 7uLL);
  void v20[2] = 15;
  uint64_t v21 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000) == 0) {
    uint64_t v21 = a3;
  }
  uint64_t v22 = 11;
  if (((a4 >> 60) & ((a3 & 0x800000000000000) == 0)) == 0) {
    uint64_t v22 = 7;
  }
  uint64_t v23 = v22 | (v21 << 16);
  Swift::Int v24 = swift_allocObject(v19, 0x18uLL, 7uLL);
  unint64_t v24[2] = v23;
  v18[2] = v20;
  v18[3] = &protocol witness table for _IndexBox<A>;
  v18[4] = v24;
  v18[5] = &protocol witness table for _IndexBox<A>;
  v31[0] = a1;
  v31[1] = a2;
  uint64_t v25 = (const char *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CustomLeafReflectable);
  uint64_t result = swift_dynamicCast((char *)v30, v31, (Class *)&type metadata for String.UTF8View, v25, 6uLL);
  char v27 = result;
  if (result) {
    uint64_t result = __swift_destroy_boxed_opaque_existential_1Tm(v30);
  }
  *(void *)a8 = &type metadata for String.UTF8View;
  *(void *)(a8 + 8) = v18;
  *(unsigned char *)(a8 + 16) = a5;
  *(void *)(a8 + 24) = v28;
  *(void *)(a8 + 32) = v16;
  *(unsigned char *)(a8 + 40) = v27;
  return result;
}

{
  uint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  void *v18;
  unint64_t *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  const char *v25;
  uint64_t result;
  char v27;
  double (*v28)@<D0>(uint64_t@<X8>);
  uint64_t v30[5];
  unint64_t v31[2];
  void v32[2];

  v32[0] = a1;
  v32[1] = a2;
  v30[0] = a6;
  v30[1] = a7;
  char v28 = static Mirror._superclassIterator<A>(_:_:)((uint64_t)v32, (uint64_t)v30, (swift *)&type metadata for String.UnicodeScalarView);
  uint64_t v16 = v15;
  outlined consume of Mirror.AncestorRepresentation(a6, a7);
  uint64_t v17 = (unint64_t *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _CollectionBox<LazyMapSequence<String.UnicodeScalarView, (label: String?, value: Any)>>);
  uint64_t v18 = swift_allocObject(v17, 0x50uLL, 7uLL);
  v18[6] = a3;
  v18[7] = a4;
  v18[8] = specialized closure #1 in Mirror.init<A, B>(_:unlabeledChildren:displayStyle:ancestorRepresentation:);
  v18[9] = 0;
  uint64_t v19 = (unint64_t *)canonical specialized generic type metadata accessor for _IndexBox<String.Index>();
  char v20 = swift_allocObject(v19, 0x18uLL, 7uLL);
  void v20[2] = 15;
  uint64_t v21 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000) == 0) {
    uint64_t v21 = a3;
  }
  uint64_t v22 = 11;
  if (((a4 >> 60) & ((a3 & 0x800000000000000) == 0)) == 0) {
    uint64_t v22 = 7;
  }
  uint64_t v23 = v22 | (v21 << 16);
  Swift::Int v24 = swift_allocObject(v19, 0x18uLL, 7uLL);
  unint64_t v24[2] = v23;
  v18[2] = v20;
  v18[3] = &protocol witness table for _IndexBox<A>;
  v18[4] = v24;
  v18[5] = &protocol witness table for _IndexBox<A>;
  v31[0] = a1;
  v31[1] = a2;
  uint64_t v25 = (const char *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CustomLeafReflectable);
  uint64_t result = swift_dynamicCast((char *)v30, v31, (Class *)&type metadata for String.UnicodeScalarView, v25, 6uLL);
  char v27 = result;
  if (result) {
    uint64_t result = __swift_destroy_boxed_opaque_existential_1Tm(v30);
  }
  *(void *)a8 = &type metadata for String.UnicodeScalarView;
  *(void *)(a8 + 8) = v18;
  *(unsigned char *)(a8 + 16) = a5;
  *(void *)(a8 + 24) = v28;
  *(void *)(a8 + 32) = v16;
  *(unsigned char *)(a8 + 40) = v27;
  return result;
}

uint64_t Mirror.init<A, B>(_:unlabeledChildren:displayStyle:ancestorRepresentation:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned __int8 *a3@<X2>, unint64_t *a4@<X3>, swift *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, Class **a8@<X8>)
{
  uint64_t v59 = a2;
  uint64_t v64 = a1;
  uint64_t v70 = a8;
  uint64_t v69 = *((void *)a5 - 1);
  MEMORY[0x1F4188790](a1);
  uint64_t v68 = (unint64_t *)((char *)&v56 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v16, v15, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  uint64_t v18 = *((void *)AssociatedTypeWitness - 1);
  uint64_t v62 = AssociatedTypeWitness;
  uint64_t v63 = v18;
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v61 = (char *)&v56 - v19;
  uint64_t v20 = *(void *)(a7 + 8);
  uint64_t v22 = type metadata accessor for LazySequence(0, a6, v20, v21);
  MEMORY[0x1F4188790](v22 - 1);
  Swift::Int v24 = (char *)&v56 - v23;
  uint64_t v25 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for (label: String?, value: Any));
  uint64_t v26 = type metadata accessor for LazyMapSequence(0, a6, v25, v20);
  uint64_t v58 = (uint64_t)*(v26 - 1);
  uint64_t v27 = v58;
  MEMORY[0x1F4188790](v26);
  uint64_t v29 = (char *)&v56 - v28;
  int v67 = *a3;
  unint64_t v30 = *a4;
  uint64_t v31 = a4[1];
  v71[0] = v30;
  v71[1] = v31;
  uint64_t v60 = (Class *)a5;
  unint64_t v32 = static Mirror._superclassIterator<A>(_:_:)(a1, (uint64_t)v71, a5);
  uint64_t v65 = v33;
  uint64_t v66 = v32;
  outlined consume of Mirror.AncestorRepresentation(v30, v31);
  uint64_t v34 = *(void (**)(char *, uint64_t, uint64_t))(*(void *)(a6 - 8) + 32);
  v34(v24, v59, a6);
  uint64_t v35 = swift_allocObject(qword_1EC9F2870, 0x28uLL, 7uLL);
  v35[2] = a5;
  v35[3] = a6;
  v35[4] = a7;
  v34(v29, (uint64_t)v24, a6);
  uint64_t v36 = &v29[*((int *)v26 + 11)];
  *(void *)uint64_t v36 = closure #1 in Mirror.init<A, B>(_:unlabeledChildren:displayStyle:ancestorRepresentation:)partial apply;
  *((void *)v36 + 1) = v35;
  uint64_t v72 = a7;
  uint64_t WitnessTable = swift_getWitnessTable(protocol conformance descriptor for <> LazyMapSequence<A, B>, (unint64_t *)v26, (uint64_t)&v72);
  uint64_t v57 = v26;
  uint64_t v39 = type metadata accessor for _CollectionBox(0, (uint64_t)v26, WitnessTable, v38);
  uint64_t v40 = (char *)swift_allocObject((unint64_t *)v39, *((unsigned int *)v39 + 12), *((unsigned __int16 *)v39 + 26));
  (*(void (**)(char *, char *, Class *))(v27 + 16))(&v40[*(void *)(*(void *)v40 + 360)], v29, v26);
  uint64_t v41 = v61;
  (*(void (**)(uint64_t, uint64_t))(a7 + 64))(a6, a7);
  uint64_t v42 = (uint64_t)v62;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(a7, a6, (uint64_t)v62, (uint64_t)&protocol requirements base descriptor for Collection, associated conformance descriptor for Collection.Collection.Index: Comparable);
  uint64_t v45 = type metadata accessor for _IndexBox(0, v42, AssociatedConformanceWitness, v44);
  uint64_t v46 = (char *)swift_allocObject((unint64_t *)v45, *((unsigned int *)v45 + 12), *((unsigned __int16 *)v45 + 26));
  BOOL v47 = *(void (**)(char *, char *, uint64_t))(v63 + 32);
  v47(&v46[*(void *)(*(void *)v46 + 96)], v41, v42);
  (*(void (**)(uint64_t, uint64_t))(a7 + 72))(a6, a7);
  (*(void (**)(char *, Class *))(v58 + 8))(v29, v57);
  uint64_t v48 = (char *)swift_allocObject((unint64_t *)v45, *((unsigned int *)v45 + 12), *((unsigned __int16 *)v45 + 26));
  v47(&v48[*(void *)(*(void *)v48 + 96)], v41, v42);
  *((void *)v40 + 2) = v46;
  *((void *)v40 + 3) = &protocol witness table for _IndexBox<A>;
  *((void *)v40 + 4) = v48;
  *((void *)v40 + 5) = &protocol witness table for _IndexBox<A>;
  uint64_t v49 = v60;
  uint64_t v50 = v68;
  (*(void (**)(unint64_t *, uint64_t, Class *))(v69 + 32))(v68, v64, v60);
  uint64_t v51 = (const char *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CustomLeafReflectable);
  uint64_t result = swift_dynamicCast((char *)v71, v50, v49, v51, 6uLL);
  char v53 = result;
  if (result) {
    uint64_t result = __swift_destroy_boxed_opaque_existential_1Tm(v71);
  }
  uint64_t v54 = v70;
  Class *v70 = v49;
  v54[1] = (Class *)v40;
  *((unsigned char *)v54 + 16) = v67;
  uint64_t v55 = v65;
  v54[3] = (Class *)v66;
  v54[4] = v55;
  *((unsigned char *)v54 + 40) = v53;
  return result;
}

uint64_t protocol witness for CustomReflectable.customMirror.getter in conformance [A]@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  return Array.customMirror.getter(*v4, *(void *)(a1 + 16), a2, a3, a4);
}

Swift::String __swiftcall Collection._makeCollectionDescription(withTypeName:)(Swift::String_optional withTypeName)
{
  uint64_t v4 = v3;
  uint64_t v5 = v1;
  unint64_t object = (unint64_t)withTypeName.value._object;
  uint64_t countAndFlagsBits = withTypeName.value._countAndFlagsBits;
  uint64_t v7 = *(void *)(v2 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (int **)v7, v1, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
  uint64_t v9 = *((void *)AssociatedTypeWitness - 1);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v77 = (char *)&v74 - v10;
  uint64_t v13 = type metadata accessor for Optional(0, (uint64_t)AssociatedTypeWitness, v11, v12);
  uint64_t v14 = MEMORY[0x1F4188790](v13 - 1);
  uint64_t v16 = (char *)&v74 - v15;
  uint64_t v17 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v14);
  uint64_t v19 = (char *)&v74 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v84 = swift_getAssociatedTypeWitness(0, (int **)v7, v5, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Iterator);
  MEMORY[0x1F4188790](v84);
  unint64_t v83 = (char *)&v74 - v20;
  unint64_t v76 = object;
  uint64_t v75 = v21;
  uint64_t v82 = v19;
  if (!object)
  {
    unint64_t v32 = 0xE100000000000000;
    uint64_t v33 = 91;
    goto LABEL_34;
  }
  uint64_t v80 = v3;
  uint64_t v22 = v9;
  unint64_t v23 = specialized static String._createEmpty(withInitialCapacity:)(4);
  uint64_t v25 = v24;
  unint64_t v86 = v23;
  unint64_t v87 = v24;
  uint64_t v26 = HIBYTE(v24) & 0xF;
  if ((v24 & 0x2000000000000000) == 0) {
    uint64_t v26 = v23 & 0xFFFFFFFFFFFFLL;
  }
  if (!v26 && (v23 & ~v24 & 0x2000000000000000) == 0)
  {
    swift_bridgeObjectRelease(v24);
    unint64_t v30 = 0;
    unint64_t v31 = 0xE000000000000000;
    unint64_t v86 = 0;
    goto LABEL_12;
  }
  if ((v24 & 0x2000000000000000) != 0)
  {
    unint64_t v27 = specialized _SmallString.init(_:appending:)(v23, v24, 0, 0xE000000000000000);
    if ((v29 & 1) == 0)
    {
      unint64_t v30 = v27;
      unint64_t v31 = v28;
      swift_bridgeObjectRelease(v25);
      swift_bridgeObjectRelease(0xE000000000000000);
      unint64_t v86 = v30;
LABEL_12:
      unint64_t v87 = v31;
      goto LABEL_13;
    }
  }
  _StringGuts.append(_:)(0, 0xE000000000000000, 0, 0);
  swift_bridgeObjectRelease(0xE000000000000000);
  unint64_t v30 = v86;
  unint64_t v31 = v87;
LABEL_13:
  uint64_t v34 = HIBYTE(v31) & 0xF;
  if ((v31 & 0x2000000000000000) == 0) {
    uint64_t v34 = v30 & 0xFFFFFFFFFFFFLL;
  }
  if (v34 || (v30 & ~v31 & 0x2000000000000000) != 0)
  {
    if ((v31 & 0x2000000000000000) != 0
      && (object & 0x2000000000000000) != 0
      && (unint64_t v35 = specialized _SmallString.init(_:appending:)(v30, v31, countAndFlagsBits, object), (v37 & 1) == 0))
    {
      unint64_t v38 = v35;
      unint64_t v39 = v36;
      swift_bridgeObjectRelease(v31);
      unint64_t v86 = v38;
      unint64_t v87 = v39;
      unint64_t v40 = v38;
    }
    else
    {
      if ((object & 0x2000000000000000) != 0) {
        uint64_t v41 = HIBYTE(object) & 0xF;
      }
      else {
        uint64_t v41 = countAndFlagsBits & 0xFFFFFFFFFFFFLL;
      }
      _StringGuts.append(_:)(countAndFlagsBits, object, 0, v41);
      unint64_t v40 = v86;
      unint64_t v39 = v87;
    }
  }
  else
  {
    swift_bridgeObjectRetain(object);
    swift_bridgeObjectRelease(v31);
    unint64_t v40 = countAndFlagsBits;
    unint64_t v86 = countAndFlagsBits;
    unint64_t v87 = object;
    unint64_t v39 = object;
  }
  uint64_t v42 = HIBYTE(v39) & 0xF;
  if ((v39 & 0x2000000000000000) == 0) {
    uint64_t v42 = v40 & 0xFFFFFFFFFFFFLL;
  }
  if (v42 || (v40 & ~v39 & 0x2000000000000000) != 0)
  {
    if ((v39 & 0x2000000000000000) == 0
      || (unint64_t v43 = specialized _SmallString.init(_:appending:)(v40, v39, 0x5B28uLL, 0xE200000000000000), (v45 & 1) != 0))
    {
      _StringGuts.append(_:)(23336, 0xE200000000000000, 0, 2);
      swift_bridgeObjectRelease(0xE200000000000000);
      uint64_t v33 = v86;
      unint64_t v32 = v87;
    }
    else
    {
      uint64_t v33 = v43;
      unint64_t v32 = v44;
      swift_bridgeObjectRelease(v39);
      swift_bridgeObjectRelease(0xE200000000000000);
    }
  }
  else
  {
    swift_bridgeObjectRelease(v39);
    unint64_t v32 = 0xE200000000000000;
    uint64_t v33 = 23336;
  }
  uint64_t v9 = v22;
  uint64_t v4 = v80;
LABEL_34:
  swift_bridgeObjectRelease(0xE000000000000000);
  unint64_t v86 = v33;
  unint64_t v87 = v32;
  (*(void (**)(char *, void (*)(void, void), uint64_t))(v17 + 16))(v82, v4, v5);
  (*(void (**)(uint64_t, uint64_t))(v7 + 32))(v5, v7);
  uint64_t v46 = v84;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v7, v5, (uint64_t)v84, (uint64_t)&protocol requirements base descriptor for Sequence, associated conformance descriptor for Sequence.Sequence.Iterator: IteratorProtocol);
  uint64_t v48 = *(void (**)(void))(AssociatedConformanceWitness + 16);
  uint64_t countAndFlagsBits = AssociatedConformanceWitness + 16;
  uint64_t v82 = (char *)AssociatedConformanceWitness;
  uint64_t v80 = (void (*)(void, void))v48;
  v48(v46);
  uint64_t v79 = *(uint64_t (**)(char *, uint64_t, const char *))(v9 + 48);
  int v49 = v79(v16, 1, AssociatedTypeWitness);
  uint64_t v50 = v77;
  if (v49 != 1)
  {
    uint64_t v62 = *(void (**)(char *, char *, const char *))(v9 + 32);
    v62(v77, v16, AssociatedTypeWitness);
    uint64_t v63 = canonical specialized generic type metadata accessor for _ContiguousArrayStorage<Any>();
    long long v78 = xmmword_18162AC80;
    while (1)
    {
      inited = swift_initStackObject(v63, v85);
      *((_OWORD *)inited + 1) = v78;
      inited[7] = AssociatedTypeWitness;
      boxed_opaque_existential_0Tm = (char *)__swift_allocate_boxed_opaque_existential_0Tm(inited + 4);
      v62(boxed_opaque_existential_0Tm, v50, AssociatedTypeWitness);
      specialized _debugPrint<A>(_:separator:terminator:to:)((uint64_t)inited, 0x20uLL, 0xE100000000000000, 0, 0xE000000000000000, (uint64_t *)&v86);
      swift_bridgeObjectRelease(0xE000000000000000);
      swift_bridgeObjectRelease(0xE100000000000000);
      swift_setDeallocating((uint64_t)inited);
      swift_arrayDestroy((uint64_t)(inited + 4), 1, (unint64_t *)qword_1ECA06310);
      v80(v84, v82);
      if (v79(v16, 1, AssociatedTypeWitness) == 1) {
        break;
      }
      v62(v50, v16, AssociatedTypeWitness);
      uint64_t v66 = v87;
      unint64_t v67 = HIBYTE(v87) & 0xF;
      if ((v87 & 0x2000000000000000) == 0) {
        unint64_t v67 = v86 & 0xFFFFFFFFFFFFLL;
      }
      if (v67 || (v86 & ~v87 & 0x2000000000000000) != 0)
      {
        if ((v87 & 0x2000000000000000) == 0
          || (unint64_t v68 = specialized _SmallString.init(_:appending:)(v86, v87, 0x202CuLL, 0xE200000000000000),
              (v70 & 1) != 0))
        {
          _StringGuts.append(_:)(8236, 0xE200000000000000, 0, 2);
          swift_bridgeObjectRelease(0xE200000000000000);
        }
        else
        {
          unint64_t v71 = v68;
          unint64_t v72 = v69;
          swift_bridgeObjectRelease(v66);
          swift_bridgeObjectRelease(0xE200000000000000);
          unint64_t v86 = v71;
          unint64_t v87 = v72;
        }
        uint64_t v50 = v77;
      }
      else
      {
        swift_bridgeObjectRelease(v87);
        unint64_t v86 = 8236;
        unint64_t v87 = 0xE200000000000000;
      }
    }
  }
  (*(void (**)(char *, const char *))(v75 + 8))(v83, v84);
  if (v76) {
    unint64_t v51 = 10589;
  }
  else {
    unint64_t v51 = 93;
  }
  if (v76) {
    unint64_t v52 = 0xE200000000000000;
  }
  else {
    unint64_t v52 = 0xE100000000000000;
  }
  uint64_t v53 = v87;
  unint64_t v54 = HIBYTE(v87) & 0xF;
  if ((v87 & 0x2000000000000000) == 0) {
    unint64_t v54 = v86 & 0xFFFFFFFFFFFFLL;
  }
  if (v54 || (v86 & ~v87 & 0x2000000000000000) != 0)
  {
    if ((v87 & 0x2000000000000000) == 0
      || (unint64_t v55 = specialized _SmallString.init(_:appending:)(v86, v87, v51, v52), (v57 & 1) != 0))
    {
      _StringGuts.append(_:)(v51, v52, 0, HIBYTE(v52) & 3);
      swift_bridgeObjectRelease(v52);
      unint64_t v51 = v86;
      unint64_t v52 = v87;
    }
    else
    {
      unint64_t v58 = v55;
      unint64_t v59 = v56;
      swift_bridgeObjectRelease(v53);
      swift_bridgeObjectRelease(v52);
      unint64_t v52 = v59;
      unint64_t v51 = v58;
    }
  }
  else
  {
    swift_bridgeObjectRelease(v87);
  }
  uint64_t v60 = v51;
  uint64_t v61 = (void *)v52;
  result._unint64_t object = v61;
  result._uint64_t countAndFlagsBits = v60;
  return result;
}

uint64_t Array.description.getter(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = a2;
  uint64_t v3 = a1;
  uint64_t v4 = *(void *)(a2 - 8);
  uint64_t v5 = *(void *)(v4 + 64);
  uint64_t v6 = MEMORY[0x1F4188790](a1);
  uint64_t v7 = (char *)&v106 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)&v106 - v9;
  MEMORY[0x1F4188790](v8);
  uint64_t v118 = (char *)&v106 - v11;
  swift_bridgeObjectRelease(0xE000000000000000);
  uint64_t v12 = 91;
  unint64_t v13 = 0xE100000000000000;
  uint64_t v121 = 91;
  unint64_t v122 = 0xE100000000000000;
  Swift::Int v117 = Array._getCount()();
  if (!v117) {
    goto LABEL_53;
  }
  uint64_t v106 = v5;
  uint64_t v12 = 0;
  uint64_t v115 = (void (**)(char *, long long *, unint64_t))(v4 + 16);
  unint64_t v116 = v3 & 0xC000000000000001;
  uint64_t v14 = (void (**)(char *, char *, unint64_t))(v4 + 32);
  char v15 = 1;
  long long v113 = xmmword_18162AC80;
  long long v108 = xmmword_18162AC90;
  Swift::UInt64 v107 = 131073;
  uint64_t v112 = v3;
  uint64_t v111 = v7;
  uint64_t v114 = v4;
  while (1)
  {
    BOOL v22 = v116 == 0;
    char v23 = v22 | ~_swift_isClassOrObjCExistentialType(v2, (uint64_t *)v2);
    Array._checkSubscript(_:wasNativeTypeChecked:)(v12, v23 & 1);
    if (v23)
    {
      (*(void (**)(char *, unint64_t, unint64_t))(v4 + 16))(v10, v3+ ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))+ *(void *)(v4 + 72) * v12, v2);
    }
    else
    {
      id v61 = _ArrayBuffer._getElementSlowPath(_:)(v12, v3, (uint64_t *)v2);
      unint64_t v13 = (unint64_t)v61;
      if (v106 != 8) {
        goto LABEL_124;
      }
      *(void *)&long long v119 = v61;
      (*v115)(v10, &v119, v2);
      swift_unknownObjectRelease((id)v13);
    }
    unint64_t v24 = *v14;
    unint64_t v13 = (unint64_t)v118;
    unint64_t v25 = (unint64_t)v10;
    (*v14)(v118, v10, v2);
    uint64_t v26 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
LABEL_112:
      Swift::Int v97 = String.UTF8View._foreignCount()();
      Swift::Int v64 = v97 + 1;
      if (!__OFADD__(v97, 1)) {
        goto LABEL_65;
      }
      goto LABEL_114;
    }
    v24(v7, (char *)v13, v2);
    if (v15) {
      goto LABEL_5;
    }
    uint64_t v28 = v121;
    uint64_t v27 = v122;
    unint64_t v29 = HIBYTE(v122) & 0xF;
    if ((v122 & 0x2000000000000000) != 0) {
      unint64_t v30 = HIBYTE(v122) & 0xF;
    }
    else {
      unint64_t v30 = v121 & 0xFFFFFFFFFFFFLL;
    }
    if (!v30 && (v121 & ~v122 & 0x2000000000000000) == 0)
    {
      swift_bridgeObjectRelease(v122);
      uint64_t v121 = 8236;
      unint64_t v59 = 0xE200000000000000;
LABEL_46:
      unint64_t v122 = v59;
      goto LABEL_4;
    }
    if ((v122 & 0x2000000000000000) != 0 && v29 <= 0xD)
    {
      unint64_t v31 = 8 * (HIBYTE(v122) & 7);
      uint64_t v32 = (-255 << v31) - 1;
      uint64_t v33 = 44 << v31;
      char v34 = v29 + 1;
      if (v29 >= 8)
      {
        uint64_t v35 = v33 | v32 & v122;
LABEL_40:
        uint64_t v58 = (32 << (8 * (v34 & 7u))) | ((-255 << (8 * (v34 & 7u))) - 1) & v35;
      }
      else
      {
        uint64_t v28 = v33 | v32 & v121;
        if (v29 == 7)
        {
          char v34 = 8;
          uint64_t v35 = v122;
          goto LABEL_40;
        }
        uint64_t v28 = (32 << (8 * (v34 & 7u))) | ((-255 << (8 * (v34 & 7u))) - 1) & v28;
        uint64_t v58 = v122;
      }
      swift_bridgeObjectRelease(v122);
      swift_bridgeObjectRelease(0xE200000000000000);
      unint64_t v60 = 0xE000000000000000;
      if (v28 & 0x8080808080808080 | v58 & 0x80808080808080) {
        unint64_t v60 = 0xA000000000000000;
      }
      unint64_t v59 = (v60 & 0xFF00000000000000 | (v29 << 56) | v58 & 0xFFFFFFFFFFFFFFLL) + 0x200000000000000;
      uint64_t v121 = v28;
      goto LABEL_46;
    }
    swift_bridgeObjectRetain_n(0xE200000000000000, 6);
    if ((v27 & 0x1000000000000000) == 0)
    {
      BOOL v36 = __OFADD__(v30, 2);
      int64_t v37 = v30 + 2;
      if (v36) {
        break;
      }
      goto LABEL_22;
    }
    Swift::Int v62 = String.UTF8View._foreignCount()();
    int64_t v37 = v62 + 2;
    if (__OFADD__(v62, 2)) {
      break;
    }
LABEL_22:
    if ((v28 & ~v27 & 0x2000000000000000) != 0
      && swift_isUniquelyReferenced_nonNull_native(v27 & 0xFFFFFFFFFFFFFFFLL))
    {
      int64_t v38 = _StringGuts.nativeUnusedCapacity.getter(v28, v27);
      if (v39) {
        goto LABEL_126;
      }
      BOOL v41 = (v27 & 0x2000000000000000) == 0 && v38 > 1;
      if (v37 <= 15 && !v41)
      {
LABEL_35:
        swift_bridgeObjectRelease_n(0xE200000000000000, 5);
        swift_bridgeObjectRetain(v27);
        unint64_t v110 = _StringGuts._convertedToSmall()(v28, v27);
        unint64_t v109 = v42;
        swift_bridgeObjectRelease(v27);
        v43._Swift::UInt64 rawBits = 1;
        v44._Swift::UInt64 rawBits = v107;
        v45._Swift::UInt64 rawBits = _StringGuts.validateScalarRange(_:)(v43, v44, 0x202CuLL, 0xE200000000000000);
        if (v45._rawBits < 0x10000) {
          v45._rawBits |= 3;
        }
        unint64_t v47 = specialized String.init(_:)(v45, v46, 0x202CuLL, 0xE200000000000000);
        unint64_t v49 = v48;
        swift_bridgeObjectRelease(0xE200000000000000);
        unint64_t v50 = _StringGuts._convertedToSmall()(v47, v49);
        unint64_t v52 = v51;
        swift_bridgeObjectRelease(v49);
        unint64_t v53 = specialized _SmallString.init(_:appending:)(v110, v109, v50, v52);
        if (v55) {
          goto LABEL_125;
        }
        uint64_t v56 = v53;
        unint64_t v57 = v54;
        swift_bridgeObjectRelease(v27);
        swift_bridgeObjectRelease(0xE200000000000000);
        uint64_t v121 = v56;
        unint64_t v122 = v57;
        goto LABEL_4;
      }
    }
    else if (v37 <= 15)
    {
      goto LABEL_35;
    }
    _StringGuts.prepareForAppendInPlace(totalCount:otherUTF8Count:)(v37, 2);
    swift_bridgeObjectRelease_n(0xE200000000000000, 6);
    long long v119 = v108;
    uint64_t v16 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, 2, (uint64_t)&v119, 2);
    _StringGuts.appendInPlace(_:isASCII:)(v16, v17, 1);
    swift_bridgeObjectRelease(0xE200000000000000);
LABEL_4:
    uint64_t v3 = v112;
    uint64_t v7 = v111;
LABEL_5:
    uint64_t v18 = canonical specialized generic type metadata accessor for _ContiguousArrayStorage<Any>();
    inited = swift_initStackObject(v18, v120);
    *((_OWORD *)inited + 1) = v113;
    inited[7] = v2;
    boxed_opaque_existential_0Tm = (char *)__swift_allocate_boxed_opaque_existential_0Tm(inited + 4);
    v24(boxed_opaque_existential_0Tm, v7, v2);
    specialized _debugPrint<A>(_:separator:terminator:to:)((uint64_t)inited, 0x20uLL, 0xE100000000000000, 0, 0xE000000000000000, &v121);
    swift_bridgeObjectRelease((uint64_t)inited);
    swift_bridgeObjectRelease(0xE000000000000000);
    swift_bridgeObjectRelease(0xE100000000000000);
    char v15 = 0;
    ++v12;
    BOOL v21 = v26 == v117;
    uint64_t v10 = (char *)v25;
    uint64_t v4 = v114;
    if (v21) {
      goto LABEL_52;
    }
  }
  __break(1u);
LABEL_52:
  uint64_t v12 = v121;
  unint64_t v13 = v122;
LABEL_53:
  unint64_t v25 = HIBYTE(v13) & 0xF;
  unint64_t v2 = v12 & 0xFFFFFFFFFFFFLL;
  if ((v13 & 0x2000000000000000) != 0) {
    uint64_t v63 = HIBYTE(v13) & 0xF;
  }
  else {
    uint64_t v63 = v12 & 0xFFFFFFFFFFFFLL;
  }
  if (!v63 && (v12 & ~v13 & 0x2000000000000000) == 0)
  {
    swift_bridgeObjectRelease(v13);
    return 93;
  }
  if ((v13 & 0x2000000000000000) != 0 && v25 != 15)
  {
    if (v25 < 8) {
      uint64_t v12 = (93 << (8 * (HIBYTE(v13) & 7u))) | ((-255 << (8 * (HIBYTE(v13) & 7u))) - 1) & v12;
    }
    goto LABEL_62;
  }
  swift_bridgeObjectRetain_n(0xE100000000000000, 6);
  if ((v13 & 0x1000000000000000) != 0) {
    goto LABEL_112;
  }
  BOOL v36 = __OFADD__(v63, 1);
  Swift::Int v64 = v63 + 1;
  if (v36)
  {
LABEL_114:
    __break(1u);
    goto LABEL_115;
  }
LABEL_65:
  unint64_t v65 = v12 & ~v13;
  if ((v65 & 0x2000000000000000) == 0 || !swift_isUniquelyReferenced_nonNull_native(v13 & 0xFFFFFFFFFFFFFFFLL))
  {
    if (v64 <= 15) {
      goto LABEL_82;
    }
LABEL_71:
    int64_t v68 = _StringGuts.nativeUnusedCapacity.getter(v12, v13);
    BOOL v71 = (v69 & 1) == 0 && v68 > 0;
    if ((v65 & 0x2000000000000000) != 0 && swift_isUniquelyReferenced_nonNull_native(v13 & 0xFFFFFFFFFFFFFFFLL))
    {
      if (v71) {
        goto LABEL_107;
      }
    }
    else if (v71)
    {
LABEL_106:
      _StringGuts.grow(_:)(v64);
LABEL_107:
      swift_bridgeObjectRelease_n(0xE100000000000000, 6);
      long long v119 = xmmword_18162ACA0;
      uint64_t v94 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, 1, (uint64_t)&v119, 1);
      _StringGuts.appendInPlace(_:isASCII:)(v94, v95, 1);
      swift_bridgeObjectRelease(0xE100000000000000);
      return v121;
    }
    uint64_t v90 = _StringGuts.nativeCapacity.getter(v12, v13);
    if (v91) {
      uint64_t v92 = 0;
    }
    else {
      uint64_t v92 = v90;
    }
    if (v92 + 0x4000000000000000 < 0)
    {
      __break(1u);
LABEL_124:
      swift_unknownObjectRelease((id)v13);
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't unsafeBitCast between types of different sizes", 52, 2, "Swift/Builtin.swift", 19, 2, 0x5FuLL, 0);
    }
    uint64_t v93 = 2 * v92;
    if (v93 > v64) {
      Swift::Int v64 = v93;
    }
    goto LABEL_106;
  }
  int64_t v66 = _StringGuts.nativeUnusedCapacity.getter(v12, v13);
  if (v67)
  {
LABEL_126:
    unint64_t v101 = 258;
LABEL_127:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/StringGutsRangeReplaceable.swift", 38, 2, v101, 0);
  }
  if (v64 > 15) {
    goto LABEL_71;
  }
  if ((v13 & 0x2000000000000000) != 0)
  {
    swift_bridgeObjectRelease_n(0xE100000000000000, 5);
    goto LABEL_83;
  }
  if (v66 > 0) {
    goto LABEL_71;
  }
LABEL_82:
  swift_bridgeObjectRelease_n(0xE100000000000000, 5);
  if ((v13 & 0x2000000000000000) != 0)
  {
LABEL_83:
    unint64_t v2 = v13;
  }
  else if ((v13 & 0x1000000000000000) != 0)
  {
    uint64_t v12 = _StringGuts._foreignConvertedToSmall()(v12, v13);
    unint64_t v2 = v104;
  }
  else
  {
    if ((v12 & 0x1000000000000000) != 0)
    {
      uint64_t v100 = (unsigned __int8 *)((v13 & 0xFFFFFFFFFFFFFFFLL) + 32);
    }
    else
    {
      uint64_t v100 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v12, v13);
      unint64_t v2 = v105;
    }
    swift_bridgeObjectRetain(v13);
    closure #1 in _StringGuts._convertedToSmall()(v100, v2, &v119);
    swift_bridgeObjectRelease(v13);
    unint64_t v2 = *((void *)&v119 + 1);
    uint64_t v12 = v119;
  }
  v72._Swift::UInt64 rawBits = 1;
  v73._Swift::UInt64 rawBits = 65537;
  v74._Swift::UInt64 rawBits = _StringGuts.validateScalarRange(_:)(v72, v73, 0x5DuLL, 0xE100000000000000);
  if (v74._rawBits < 0x10000) {
    v74._rawBits |= 3;
  }
  unint64_t v25 = specialized String.init(_:)(v74, v75, 0x5DuLL, 0xE100000000000000);
  Swift::Int v64 = v76;
  swift_bridgeObjectRelease(0xE100000000000000);
  if ((v64 & 0x2000000000000000) != 0)
  {
    swift_bridgeObjectRelease(v64);
    goto LABEL_88;
  }
LABEL_115:
  if ((v64 & 0x1000000000000000) != 0)
  {
    unint64_t v25 = _StringGuts._foreignConvertedToSmall()(v25, v64);
    Swift::Int v103 = v102;
    swift_bridgeObjectRelease(v64);
    Swift::Int v64 = v103;
  }
  else
  {
    if ((v25 & 0x1000000000000000) != 0)
    {
      int v98 = (unsigned __int8 *)((v64 & 0xFFFFFFFFFFFFFFFLL) + 32);
      uint64_t v99 = v25 & 0xFFFFFFFFFFFFLL;
    }
    else
    {
      int v98 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v25, v64);
    }
    closure #1 in _StringGuts._convertedToSmall()(v98, v99, &v119);
    swift_bridgeObjectRelease(v64);
    Swift::Int v64 = *((void *)&v119 + 1);
    unint64_t v25 = v119;
  }
LABEL_88:
  uint64_t v77 = HIBYTE(v2) & 0xF;
  uint64_t v78 = HIBYTE(v64) & 0xF;
  if ((unint64_t)(v78 + v77) > 0xF)
  {
LABEL_125:
    unint64_t v101 = 266;
    goto LABEL_127;
  }
  if (v78)
  {
    char v79 = 0;
    unint64_t v80 = 0;
    do
    {
      unint64_t v81 = v77 + v80;
      unint64_t v82 = v80 + 1;
      if (v80 >= 8) {
        unint64_t v83 = v64;
      }
      else {
        unint64_t v83 = v25;
      }
      unint64_t v84 = v83 >> (v79 & 0x38);
      char v85 = (8 * v77 + v79) & 0x38;
      uint64_t v86 = (-255 << v85) - 1;
      unint64_t v87 = (unint64_t)v84 << v85;
      unint64_t v88 = v87 | v86 & v2;
      unint64_t v89 = v87 | v86 & v12;
      if (v81 < 8) {
        uint64_t v12 = v89;
      }
      else {
        unint64_t v2 = v88;
      }
      v79 += 8;
      unint64_t v80 = v82;
    }
    while (v78 != v82);
  }
LABEL_62:
  swift_bridgeObjectRelease(v13);
  swift_bridgeObjectRelease(0xE100000000000000);
  return v12;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance [A](uint64_t a1)
{
  return Array.description.getter(*v1, *(void *)(a1 + 16));
}

uint64_t Array._cPointerArgs()(uint64_t a1, uint64_t *a2)
{
  swift_bridgeObjectRetain(a1);
  if (_swift_isClassOrObjCExistentialType((uint64_t)a2, a2) && (a1 < 0 || (a1 & 0x4000000000000000) != 0))
  {
    if (Array._getCount()())
    {
      uint64_t v8 = (unint64_t *)type metadata accessor for _ArrayBuffer(0, (uint64_t)a2, v6, v7);
      uint64_t WitnessTable = swift_getWitnessTable(protocol conformance descriptor for _ArrayBuffer<A>, v8, v9);
      return (*(uint64_t (**)(unint64_t *, uint64_t))(WitnessTable + 56))(v8, WitnessTable);
    }
    swift_bridgeObjectRelease(a1);
  }
  else
  {
    swift_bridgeObjectRelease(a1);
    _swift_isClassOrObjCExistentialType((uint64_t)a2, a2);
  }
  if (_swift_isClassOrObjCExistentialType((uint64_t)a2, a2) && (a1 < 0 || (a1 & 0x4000000000000000) != 0))
  {
    if (a1 < 0) {
      uint64_t v4 = (void *)a1;
    }
    else {
      uint64_t v4 = (void *)(a1 & 0xFFFFFFFFFFFFFF8);
    }
    swift_unknownObjectRetain(v4);
  }
  else
  {
    if (_swift_isClassOrObjCExistentialType((uint64_t)a2, a2)) {
      uint64_t v4 = (void *)(a1 & 0xFFFFFFFFFFFFFF8);
    }
    else {
      uint64_t v4 = (void *)a1;
    }
    swift_bridgeObjectRetain(a1);
  }
  return (uint64_t)v4;
}

id _ContiguousArrayBuffer.owner.getter()
{
  uint64_t v0 = (void *)EnumeratedSequence._base.modify();

  return swift_unknownObjectRetain(v0);
}

void Array.init(_unsafeUninitializedCapacity:initializingWith:)(uint64_t a1, void (*a2)(void *, uint64_t *), uint64_t a3, uint64_t *a4)
{
  uint64_t v12 = static Array._allocateUninitialized(_:)(a1, a4);
  uint64_t v10 = 0;
  uint64_t v11 = v8;
  if (a1 < 0) {
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeMutableBufferPointer with negative count", 46, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x47uLL, 0);
  }
  v9[0] = v8;
  v9[1] = a1;
  a2(v9, &v10);
  if (v4)
  {
    $defer #1 <A>() in Array.init(_unsafeUninitializedCapacity:initializingWith:)(&v10, a1, v9, &v11, &v12, a4);
    swift_bridgeObjectRelease(v12);
  }
  else
  {
    $defer #1 <A>() in Array.init(_unsafeUninitializedCapacity:initializingWith:)(&v10, a1, v9, &v11, &v12, a4);
  }
}

void *specialized $defer #1 <A>() in Array.init(_unsafeUninitializedCapacity:initializingWith:)(void *result, uint64_t a2, void *a3, void *a4, uint64_t *a5)
{
  if (*result > a2) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Initialized count set to greater than specified capacity.", 57, 2, "Swift/Array.swift", 17, 2, 0x5EFuLL, 0);
  }
  if (*a3) {
    BOOL v5 = *a4 == *a3;
  }
  else {
    BOOL v5 = 0;
  }
  if (!v5) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't reassign buffer in Array(unsafeUninitializedCapacity:initializingWith:)", 77, 2, "Swift/Array.swift", 17, 2, 0x5F3uLL, 0);
  }
  uint64_t v6 = *a5;
  *(void *)(v6 + 16) = *result;
  *a5 = v6;
  return result;
}

BOOL $defer #1 <A>() in Array.init(_unsafeUninitializedCapacity:initializingWith:)(uint64_t *a1, uint64_t a2, void *a3, void *a4, uint64_t *a5, uint64_t *a6)
{
  uint64_t v6 = *a1;
  if (*a1 > a2) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Initialized count set to greater than specified capacity.", 57, 2, "Swift/Array.swift", 17, 2, 0x5EFuLL, 0);
  }
  if (*a3) {
    BOOL v7 = *a4 == *a3;
  }
  else {
    BOOL v7 = 0;
  }
  if (!v7) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't reassign buffer in Array(unsafeUninitializedCapacity:initializingWith:)", 77, 2, "Swift/Array.swift", 17, 2, 0x5F3uLL, 0);
  }
  uint64_t v8 = *a5;
  BOOL result = _swift_isClassOrObjCExistentialType((uint64_t)a6, a6);
  uint64_t v10 = v8 & 0xFFFFFFFFFFFFFF8;
  if (!result) {
    uint64_t v10 = v8;
  }
  *(void *)(v10 + 16) = v6;
  return result;
}

void *$defer #1 <A><A1>() in Array.withUnsafeMutableBufferPointer<A>(_:)(void *result, uint64_t a2, uint64_t a3)
{
  if (*result) {
    BOOL v3 = *result == a2;
  }
  else {
    BOOL v3 = 0;
  }
  if (!v3 || result[1] != a3) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Array withUnsafeMutableBufferPointer: replacing the buffer is not allowed", 73, 2, "Swift/Array.swift", 17, 2, 0x67DuLL, 0);
  }
  return result;
}

void _preconditionFailure(_:file:line:)(const char *a1, uint64_t a2, char a3, const char *a4, uint64_t a5, char a6, unint64_t a7)
{
}

uint64_t IndexingIterator.init(_elements:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (int **)a3, a2, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  uint64_t v9 = *((void *)AssociatedTypeWitness - 1);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v11 = (char *)&v16 - v10;
  uint64_t v12 = *(void *)(a2 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 16))(a4, a1, a2);
  (*(void (**)(uint64_t, uint64_t))(a3 + 64))(a2, a3);
  (*(void (**)(uint64_t, uint64_t))(v12 + 8))(a1, a2);
  uint64_t v14 = type metadata accessor for IndexingIterator(0, a2, a3, v13);
  return (*(uint64_t (**)(uint64_t, char *, const char *))(v9 + 32))(a4 + *((int *)v14 + 9), v11, AssociatedTypeWitness);
}

Swift::Int __swiftcall UnsafeMutableBufferPointer.index(_:offsetBy:)(Swift::Int _, Swift::Int offsetBy)
{
  return UnsafeMutableBufferPointer.index(_:offsetBy:)(_, offsetBy, v2, v3, v4, 0x101uLL);
}

uint64_t static Array<A>.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v43 = a4;
  uint64_t v6 = a1;
  uint64_t v7 = *(a3 - 1);
  uint64_t v8 = *(void *)(v7 + 64);
  uint64_t v9 = MEMORY[0x1F4188790](a1);
  unint64_t v42 = (char *)&v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  uint64_t v11 = (char *)&v33 - v10;
  Swift::Int v12 = Array._getCount()();
  if (v12 != Array._getCount()()) {
    return 0;
  }
  if (!v12) {
    return 1;
  }
  uint64_t v13 = _ArrayBuffer.identity.getter(v6, a3);
  if (v13 == _ArrayBuffer.identity.getter(a2, a3)) {
    return 1;
  }
  uint64_t v35 = v8;
  Swift::Int v41 = v12;
  if (v12 < 0) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
  }
  unint64_t v14 = 0;
  uint64_t v39 = a2;
  unint64_t v40 = v6 & 0xC000000000000001;
  char v15 = (void (**)(char *, id *, uint64_t *))(v7 + 16);
  uint64_t v37 = v6;
  unint64_t v38 = a2 & 0xC000000000000001;
  uint64_t v36 = v43 + 8;
  uint64_t v16 = (void (**)(char *, uint64_t *))(v7 + 8);
  do
  {
    BOOL v17 = v41 == v14;
    if (v41 == v14) {
      break;
    }
    BOOL v18 = v40 == 0;
    char v19 = v18 | ~_swift_isClassOrObjCExistentialType((uint64_t)a3, a3);
    Array._checkSubscript(_:wasNativeTypeChecked:)(v14, v19 & 1);
    if (v19)
    {
      uint64_t v20 = *(void (**)(char *, id *, uint64_t *))(v7 + 16);
      BOOL v21 = v15;
      v20(v11, (id *)(v6+ ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))+ *(void *)(v7 + 72) * v14), a3);
    }
    else
    {
      id v30 = _ArrayBuffer._getElementSlowPath(_:)(v14, v6, a3);
      if (v35 != 8) {
        goto LABEL_21;
      }
      id v44 = v30;
      uint64_t v20 = *v15;
      unint64_t v31 = v30;
      BOOL v21 = v15;
      (*v15)(v11, &v44, a3);
      swift_unknownObjectRelease(v31);
    }
    BOOL v22 = v38 == 0;
    char v23 = v22 | ~_swift_isClassOrObjCExistentialType((uint64_t)a3, a3);
    uint64_t v24 = v39;
    Array._checkSubscript(_:wasNativeTypeChecked:)(v14, v23 & 1);
    if (v23)
    {
      unint64_t v25 = v24
          + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))
          + *(void *)(v7 + 72) * v14;
      uint64_t v26 = v42;
      char v15 = v21;
      v20(v42, (id *)v25, a3);
    }
    else
    {
      id v30 = _ArrayBuffer._getElementSlowPath(_:)(v14, v24, a3);
      if (v35 != 8)
      {
LABEL_21:
        swift_unknownObjectRelease(v30);
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't unsafeBitCast between types of different sizes", 52, 2, "Swift/Builtin.swift", 19, 2, 0x5FuLL, 0);
      }
      id v44 = v30;
      uint64_t v26 = v42;
      id v34 = v30;
      char v15 = v21;
      v20(v42, &v44, a3);
      swift_unknownObjectRelease(v34);
    }
    char v27 = (*(uint64_t (**)(char *, char *, uint64_t *))(v43 + 8))(v11, v26, a3);
    uint64_t v28 = v26;
    unint64_t v29 = *v16;
    (*v16)(v28, a3);
    v29(v11, a3);
    ++v14;
    uint64_t v6 = v37;
  }
  while ((v27 & 1) != 0);
  return v17;
}

BOOL static _Pointer.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(a4 + 48);
  uint64_t v7 = v6(a3, a4);
  return v7 == v6(a3, a4);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance <A> [A](uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return static Array<A>.== infix(_:_:)(*a1, *a2, *(uint64_t **)(a3 + 16), *(void *)(a4 - 8));
}

void Array<A>.hash(into:)(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v34 = a4;
  uint64_t v7 = *(a3 - 1);
  uint64_t v8 = MEMORY[0x1F4188790](a1);
  uint64_t v10 = (char *)&v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = MEMORY[0x1F4188790](v8);
  uint64_t v35 = (char *)&v27 - v12;
  uint64_t v28 = v13;
  MEMORY[0x1F4188790](v11);
  char v15 = (char *)&v27 - v14;
  Swift::UInt v16 = Array._getCount()();
  uint64_t v33 = a1;
  Hasher._combine(_:)(v16);
  Swift::Int v32 = Array._getCount()();
  if (v32)
  {
    unint64_t v17 = 0;
    id v30 = (void (**)(char *, id *, uint64_t *))(v7 + 16);
    unint64_t v31 = a2 & 0xC000000000000001;
    BOOL v18 = (void (**)(char *, char *, uint64_t *))(v7 + 32);
    uint64_t v29 = v34 + 24;
    do
    {
      BOOL v19 = v31 == 0;
      char v20 = v19 | ~_swift_isClassOrObjCExistentialType((uint64_t)a3, a3);
      Array._checkSubscript(_:wasNativeTypeChecked:)(v17, v20 & 1);
      if (v20)
      {
        uint64_t v21 = a2;
        (*(void (**)(char *, unint64_t, uint64_t *))(v7 + 16))(v35, a2+ ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))+ *(void *)(v7 + 72) * v17, a3);
        unint64_t v22 = v17 + 1;
        if (__OFADD__(v17, 1)) {
          goto LABEL_11;
        }
      }
      else
      {
        id v25 = _ArrayBuffer._getElementSlowPath(_:)(v17, a2, a3);
        uint64_t v26 = v25;
        if (v28 != 8)
        {
          swift_unknownObjectRelease(v25);
          _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't unsafeBitCast between types of different sizes", 52, 2, "Swift/Builtin.swift", 19, 2, 0x5FuLL, 0);
        }
        uint64_t v21 = a2;
        id v36 = v25;
        (*v30)(v35, &v36, a3);
        swift_unknownObjectRelease(v26);
        unint64_t v22 = v17 + 1;
        if (__OFADD__(v17, 1))
        {
LABEL_11:
          __break(1u);
          return;
        }
      }
      char v23 = *v18;
      (*v18)(v15, v35, a3);
      v23(v10, v15, a3);
      (*(void (**)(uint64_t, uint64_t *))(v34 + 24))(v33, a3);
      (*(void (**)(char *, uint64_t *))(v7 + 8))(v10, a3);
      ++v17;
      BOOL v24 = v22 == v32;
      a2 = v21;
    }
    while (!v24);
  }
}

uint64_t Hasher.combine<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t))(a3 + 24))(v3);
}

Swift::Int Array<A>.hashValue.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Array<A>.hashValue.getter(a1, a2, a3, (void (*)(void *, uint64_t, uint64_t, uint64_t))Array<A>.hash(into:));
}

uint64_t _hashValue<A>(for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))(0);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance <A> [A](uint64_t a1, uint64_t a2)
{
  return Array<A>.hashValue.getter(*v2, *(void *)(a1 + 16), *(void *)(a2 - 8));
}

void protocol witness for Hashable.hash(into:) in conformance <A> [A](uint64_t a1, uint64_t a2, uint64_t a3)
{
  Array<A>.hash(into:)(a1, *v3, *(uint64_t **)(a2 + 16), *(void *)(a3 - 8));
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance <A> [A](uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance <A> [A](a1, a2, a3, (void (*)(void *, void, void, uint64_t))Array<A>.hash(into:));
}

Swift::Int __swiftcall Hashable._rawHashValue(seed:)(Swift::Int seed)
{
  v3[0] = 0;
  v3[1] = _swift_stdlib_Hashing_parameters ^ seed ^ 0x736F6D6570736575;
  v3[2] = unk_1EB208F00 ^ 0x646F72616E646F6DLL;
  v3[3] = _swift_stdlib_Hashing_parameters ^ seed ^ 0x6C7967656E657261;
  v3[4] = unk_1EB208F00 ^ 0x7465646279746573;
  long long v4 = 0u;
  long long v5 = 0u;
  (*(void (**)(void *))(v1 + 24))(v3);
  return Hasher._finalize()();
}

{
  uint64_t v1;
  void v3[5];
  long long v4;
  long long v5;

  v3[0] = 0;
  v3[1] = _swift_stdlib_Hashing_parameters ^ seed ^ 0x736F6D6570736575;
  v3[2] = unk_1EB208F00 ^ 0x646F72616E646F6DLL;
  v3[3] = _swift_stdlib_Hashing_parameters ^ seed ^ 0x6C7967656E657261;
  v3[4] = unk_1EB208F00 ^ 0x7465646279746573;
  long long v4 = 0u;
  long long v5 = 0u;
  (*(void (**)(void *))(v1 + 24))(v3);
  return Hasher._finalize()();
}

void *Array.withUnsafeMutableBytes<A>(_:)(void (*a1)(uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  v17[3] = a4;
  Array._makeMutableAndUnique()();
  uint64_t v7 = *v4;
  uint64_t v8 = *(uint64_t **)(a3 + 16);
  if (_swift_isClassOrObjCExistentialType((uint64_t)v8, v8)) {
    uint64_t v9 = v7 & 0xFFFFFFFFFFFFFF8;
  }
  else {
    uint64_t v9 = v7;
  }
  uint64_t v10 = *(void *)(v9 + 16);
  if (_swift_isClassOrObjCExistentialType((uint64_t)v8, v8)) {
    uint64_t v11 = v7 & 0xFFFFFFFFFFFFFF8;
  }
  else {
    uint64_t v11 = v7;
  }
  uint64_t v12 = *(v8 - 1);
  uint64_t v13 = v11 + ((*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80));
  v17[0] = v13;
  v17[1] = v10;
  uint64_t v14 = *(void *)(v12 + 72);
  uint64_t v15 = v10 * v14;
  if ((unsigned __int128)(v10 * (__int128)v14) >> 64 != (v10 * v14) >> 63)
  {
    __break(1u);
LABEL_11:
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeMutableRawBufferPointer with negative count", 49, 2, "Swift/UnsafeRawBufferPointer.swift", 34, 2, 0x68uLL, 0);
  }
  if (v15 < 0) {
    goto LABEL_11;
  }
  a1(v13, v13 + v15);
  return $defer #1 <A><A1>() in Array.withUnsafeMutableBufferPointer<A>(_:)(v17, v13, v10);
}

uint64_t specialized UnsafeMutableRawBufferPointer.init<A>(_:)(uint64_t result, uint64_t a2)
{
  if (a2 < 0) {
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeMutableRawBufferPointer with negative count", 49, 2, "Swift/UnsafeRawBufferPointer.swift", 34, 2, 0x68uLL, 0);
  }
  if (a2)
  {
    if (!result) {
      _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeMutableRawBufferPointer has a nil start and nonzero count", 63, 2, "Swift/UnsafeRawBufferPointer.swift", 34, 2, 0x69uLL, 0);
    }
  }
  return result;
}

uint64_t UnsafeMutableRawBufferPointer.init<A>(_:)(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(*(void *)(a3 - 8) + 72);
  uint64_t v4 = a2 * v3;
  if ((unsigned __int128)(a2 * (__int128)v3) >> 64 != (a2 * v3) >> 63)
  {
    __break(1u);
LABEL_8:
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeMutableRawBufferPointer with negative count", 49, 2, "Swift/UnsafeRawBufferPointer.swift", 34, 2, 0x68uLL, 0);
  }
  if (v4 < 0) {
    goto LABEL_8;
  }
  if (v4)
  {
    if (!result) {
      _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeMutableRawBufferPointer has a nil start and nonzero count", 63, 2, "Swift/UnsafeRawBufferPointer.swift", 34, 2, 0x69uLL, 0);
    }
  }
  return result;
}

uint64_t Array.withUnsafeBytes<A>(_:)(uint64_t (*a1)(uint64_t, uint64_t), uint64_t a2, int64_t a3, uint64_t *a4)
{
  if (!_swift_isClassOrObjCExistentialType((uint64_t)a4, a4)
    || (a3 & 0x8000000000000000) == 0 && (a3 & 0x4000000000000000) == 0)
  {
    if (_swift_isClassOrObjCExistentialType((uint64_t)a4, a4)) {
      uint64_t v9 = a3 & 0xFFFFFFFFFFFFFF8;
    }
    else {
      uint64_t v9 = a3;
    }
    uint64_t v10 = *(a4 - 1);
    uint64_t v11 = *(unsigned __int8 *)(v10 + 80);
    if (_swift_isClassOrObjCExistentialType((uint64_t)a4, a4) && (a3 < 0 || (a3 & 0x4000000000000000) != 0))
    {
      if (a3 < 0) {
        uint64_t v21 = (void *)a3;
      }
      else {
        uint64_t v21 = (void *)(a3 & 0xFFFFFFFFFFFFFF8);
      }
      uint64_t v13 = (uint64_t)[v21 count];
      if (v13 < 0) {
        _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeBufferPointer with negative count", 39, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x53FuLL, 0);
      }
    }
    else
    {
      if (_swift_isClassOrObjCExistentialType((uint64_t)a4, a4)) {
        uint64_t v12 = a3 & 0xFFFFFFFFFFFFFF8;
      }
      else {
        uint64_t v12 = a3;
      }
      uint64_t v13 = *(void *)(v12 + 16);
    }
    uint64_t v14 = *(void *)(v10 + 72);
    uint64_t v15 = v13 * v14;
    if ((unsigned __int128)(v13 * (__int128)v14) >> 64 == (v13 * v14) >> 63)
    {
      if ((v15 & 0x8000000000000000) == 0) {
        return a1(v9 + ((v11 + 32) & ~v11), v9 + ((v11 + 32) & ~v11) + v15);
      }
    }
    else
    {
      __break(1u);
    }
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeRawBufferPointer with negative count", 42, 2, "Swift/UnsafeRawBufferPointer.swift", 34, 2, 0x485uLL, 0);
  }
  unint64_t v17 = (unint64_t *)type metadata accessor for _ArrayBuffer(0, (uint64_t)a4, v7, v8);
  swift_bridgeObjectRetain(a3);
  uint64_t WitnessTable = swift_getWitnessTable(protocol conformance descriptor for _ArrayBuffer<A>, v17, v18);
  uint64_t v20 = (*(uint64_t (**)(unint64_t *, uint64_t))(WitnessTable + 56))(v17, WitnessTable);
  partial apply for closure #1 in Array.withUnsafeBytes<A>(_:)(v20 + ((*(unsigned __int8 *)(*(a4 - 1) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(a4 - 1) + 80)), *(void *)(v20 + 16));
  return swift_release(v20);
}

uint64_t specialized UnsafeRawBufferPointer.init<A>(_:)(uint64_t result, uint64_t a2)
{
  if (a2 < 0) {
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeRawBufferPointer with negative count", 42, 2, "Swift/UnsafeRawBufferPointer.swift", 34, 2, 0x485uLL, 0);
  }
  if (a2)
  {
    if (!result) {
      _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeRawBufferPointer has a nil start and nonzero count", 56, 2, "Swift/UnsafeRawBufferPointer.swift", 34, 2, 0x486uLL, 0);
    }
  }
  return result;
}

uint64_t UnsafeRawBufferPointer.init<A>(_:)(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(*(void *)(a3 - 8) + 72);
  uint64_t v4 = a2 * v3;
  if ((unsigned __int128)(a2 * (__int128)v3) >> 64 != (a2 * v3) >> 63)
  {
    __break(1u);
LABEL_8:
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeRawBufferPointer with negative count", 42, 2, "Swift/UnsafeRawBufferPointer.swift", 34, 2, 0x485uLL, 0);
  }
  if (v4 < 0) {
    goto LABEL_8;
  }
  if (v4)
  {
    if (!result) {
      _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeRawBufferPointer has a nil start and nonzero count", 56, 2, "Swift/UnsafeRawBufferPointer.swift", 34, 2, 0x486uLL, 0);
    }
  }
  return result;
}

unint64_t _bridgeCocoaArray<A>(_:)(unint64_t a1)
{
  unint64_t v1 = specialized _bridgeCocoaArray<A>(_:)(a1);

  return swift_bridgeObjectRetain(v1);
}

__objc2_class **Array._bridgeToObjectiveCImpl()(int64_t a1, uint64_t *a2)
{
  if (_swift_isClassOrObjCExistentialType((uint64_t)a2, a2) && (a1 < 0 || (a1 & 0x4000000000000000) != 0))
  {
    if (a1 < 0) {
      uint64_t v7 = (void *)a1;
    }
    else {
      uint64_t v7 = (void *)(a1 & 0xFFFFFFFFFFFFFF8);
    }
    return (__objc2_class **)swift_unknownObjectRetain(v7);
  }
  else
  {
    if (_swift_isClassOrObjCExistentialType((uint64_t)a2, a2)) {
      uint64_t v4 = (atomic_ullong *)(a1 & 0xFFFFFFFFFFFFFF8);
    }
    else {
      uint64_t v4 = (atomic_ullong *)a1;
    }
    swift_bridgeObjectRetain(a1);
    return _ContiguousArrayBuffer._asCocoaArray()(v4, a2, v5);
  }
}

uint64_t static Array._bridgeFromObjectiveCAdoptingNativeStorageOf(_:)(atomic_ullong *a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for __SwiftDeferredNSArray();
  id v5 = swift_unknownObjectRetain(a1);
  uint64_t v6 = swift_dynamicCastClass((uint64_t)v5, v4);
  if (v6)
  {
    uint64_t v9 = *(atomic_ullong **)(v6 + 24);
    swift_retain(v9);
    swift_unknownObjectRelease(a1);
    a1 = v9;
  }
  uint64_t v10 = type metadata accessor for _ContiguousArrayStorage(0, a2, v7, v8);
  uint64_t result = swift_dynamicCastClass((uint64_t)a1, (uint64_t)v10);
  if (!result)
  {
    swift_unknownObjectRelease(a1);
    return 0;
  }
  return result;
}

uint64_t _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lFxq0_q_Ri_zRi0_zRi__Ri0__Ri_0_Ri0_0_r1_lyxs5NeverOqd_0_Isgnrzr_xSgAb2ERsd__Ri_d_0_r_0_lIetMgnrzo_Tpq5@<X0>(void (*a1)(char *)@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  BOOL v19 = a1;
  uint64_t v7 = *(void *)(a2 + 16);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = ((uint64_t (*)(void))MEMORY[0x1F4188790])();
  uint64_t v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  uint64_t v13 = (char *)&v18 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v14 + 16))(v13, v15);
  uint64_t v16 = 1;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v13, 1, v7) != 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v11, v13, v7);
    v19(v11);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v11, v7);
    if (v4) {
      return result;
    }
    uint64_t v16 = 0;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a3 - 8) + 56))(a4, v16, 1, a3);
}

Class *Array<A>._toCustomAnyHashable()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  uint64_t result = type metadata accessor for _ArrayAnyHashableBox(0, a2, a3, a4);
  a5[3] = result;
  a5[4] = &protocol witness table for _ArrayAnyHashableBox<A>;
  *a5 = a1;
  return result;
}

Class *protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance <A> [A]@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, void *a4@<X8>)
{
  return Array<A>._toCustomAnyHashable()(*v4, *(void *)(a1 + 16), *(void *)(a2 - 8), a3, a4);
}

unint64_t _ArrayAnyHashableBox._base.getter@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t *a5@<X8>)
{
  a5[3] = (unint64_t)type metadata accessor for Array(0, a2, a3, a4);
  *a5 = a1;

  return swift_bridgeObjectRetain(a1);
}

uint64_t _ArrayAnyHashableBox.subscript.getter@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, ValueMetadata *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  Description = a3[-1].Description;
  uint64_t v11 = Description[8];
  uint64_t v12 = MEMORY[0x1F4188790](a1);
  uint64_t v13 = (unint64_t *)((char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1F4188790](v12);
  uint64_t v15 = (swift **)((char *)&v32 - v14);
  char isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType((uint64_t)v16, v16);
  char v18 = ((a2 & 0xC000000000000001) == 0) | ~isClassOrObjCExistentialType;
  Array._checkSubscript(_:wasNativeTypeChecked:)(a1, (a2 & 0xC000000000000001) == 0 || (isClassOrObjCExistentialType & 1) == 0);
  if (v18)
  {
    BOOL v19 = (void (*)(swift **, unint64_t, ValueMetadata *))Description[2];
    v19(v15, a2+ ((*((unsigned __int8 *)Description + 80) + 32) & ~(unint64_t)*((unsigned __int8 *)Description + 80))+ Description[9] * a1, a3);
  }
  else
  {
    id v30 = _ArrayBuffer._getElementSlowPath(_:)(a1, a2, &a3->Kind);
    unint64_t v31 = v30;
    if (v11 != 8)
    {
      swift_unknownObjectRelease(v30);
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't unsafeBitCast between types of different sizes", 52, 2, "Swift/Builtin.swift", 19, 2, 0x5FuLL, 0);
    }
    *(void *)&long long v35 = v30;
    BOOL v19 = (void (*)(swift **, unint64_t, ValueMetadata *))Description[2];
    v19(v15, (unint64_t)&v35, a3);
    swift_unknownObjectRelease(v31);
  }
  if (a3 == &type metadata for String)
  {
    *((void *)&v36 + 1) = type metadata accessor for _ConcreteHashableBox(0, (uint64_t)&type metadata for String, a4, v20);
    uint64_t v37 = &protocol witness table for _ConcreteHashableBox<A>;
    uint64_t v28 = (swift **)__swift_allocate_boxed_opaque_existential_0Tm(&v35);
    v19(v28, (unint64_t)v15, &type metadata for String);
    uint64_t result = ((uint64_t (*)(swift **, ValueMetadata *))Description[1])(v15, &type metadata for String);
    goto LABEL_8;
  }
  v19((swift **)v13, (unint64_t)v15, a3);
  uint64_t v21 = (const char *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _HasCustomAnyHashableRepresentation);
  if (swift_dynamicCast((char *)&v32, v13, (Class *)a3, v21, 6uLL))
  {
    uint64_t v22 = *((void *)&v33 + 1);
    uint64_t v23 = v34;
    BOOL v24 = __swift_project_boxed_opaque_existential_0Tm(&v32, *((uint64_t *)&v33 + 1));
    MEMORY[0x1F4188790](v24);
    (*(void (**)(char *))(v26 + 16))((char *)&v32 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(long long *__return_ptr, uint64_t, uint64_t))(v23 + 8))(&v35, v22, v23);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t *)&v32);
    if (*((void *)&v36 + 1))
    {
      uint64_t result = ((uint64_t (*)(swift **, ValueMetadata *))Description[1])(v15, a3);
LABEL_8:
      long long v29 = v36;
      *(_OWORD *)a5 = v35;
      *(_OWORD *)(a5 + 16) = v29;
      *(void *)(a5 + 32) = v37;
      return result;
    }
  }
  else
  {
    uint64_t v34 = 0;
    long long v32 = 0u;
    long long v33 = 0u;
    outlined destroy of _HasContiguousBytes?((uint64_t)&v32, &demangling cache variable for type metadata for _HasCustomAnyHashableRepresentation?);
    long long v35 = 0u;
    long long v36 = 0u;
    uint64_t v37 = 0;
  }
  outlined destroy of AnyHashable?((uint64_t *)&v35);
  *(void *)(a5 + 24) = &unk_1ECA01B10;
  *(void *)(a5 + 32) = &protocol witness table for _ConcreteHashableBox<A>;
  *(unsigned char *)a5 = 0;
  _swift_makeAnyHashableUpcastingToHashableBaseType(v15, (objc_object *)a5, &a3->Kind, a4);
  return ((uint64_t (*)(swift **, ValueMetadata *))Description[1])(v15, a3);
}

double _convertToAnyHashable<A>(_:)@<D0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  MEMORY[0x1F4188790](a1);
  uint64_t v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v9 + 16))(v8);
  return AnyHashable.init<A>(_:)((uint64_t)v8, a2, a3, a4);
}

uint64_t _ArrayAnyHashableBox._isEqual(to:)(uint64_t a1, uint64_t a2, ValueMetadata *a3, uint64_t a4)
{
  uint64_t v51 = a4;
  Description = (char *)a3[-1].Description;
  uint64_t v7 = *((void *)Description + 8);
  uint64_t v8 = MEMORY[0x1F4188790](a1);
  Swift::String::Index v45 = (unint64_t *)((char *)&v43 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v9 = MEMORY[0x1F4188790](v8);
  uint64_t v11 = (swift **)((char *)&v43 - v10);
  outlined init with copy of MirrorPath(v9, (uint64_t)&v59);
  uint64_t v12 = (Class *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _AnyHashableBox);
  uint64_t v13 = (const char *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ArrayAnyHashableProtocol);
  if (!swift_dynamicCast((char *)&v56, (unint64_t *)&v59, v12, v13, 6uLL))
  {
    uint64_t v58 = 0;
    long long v56 = 0u;
    long long v57 = 0u;
    outlined destroy of _HasContiguousBytes?((uint64_t)&v56, &demangling cache variable for type metadata for _ArrayAnyHashableProtocol?);
    return 2;
  }
  uint64_t v44 = v7;
  outlined init with take of MirrorPath(&v56, (uint64_t)v62);
  Swift::Int v14 = Array._getCount()();
  uint64_t v15 = v63;
  uint64_t v16 = v64;
  __swift_project_boxed_opaque_existential_0Tm(v62, v63);
  if (v14 != (*(uint64_t (**)(uint64_t, uint64_t))(v16 + 16))(v15, v16)) {
    goto LABEL_23;
  }
  if (v14 < 0) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
  }
  unint64_t v17 = 0;
  unint64_t v50 = a2 & 0xC000000000000001;
  char v18 = (void (**)(swift **, long long *, ValueMetadata *))(Description + 16);
  unint64_t v49 = (void (**)(swift **, ValueMetadata *))(Description + 8);
  uint64_t v48 = a2;
  Swift::Int v47 = v14;
  Swift::String::Index v46 = (void (**)(swift **, long long *, ValueMetadata *))(Description + 16);
  while (1)
  {
    if (v14 == v17)
    {
      __swift_destroy_boxed_opaque_existential_1Tm(v62);
      return 1;
    }
    BOOL v19 = v50 == 0;
    char v20 = v19 | ~_swift_isClassOrObjCExistentialType((uint64_t)a3, &a3->Kind);
    Array._checkSubscript(_:wasNativeTypeChecked:)(v17, v20 & 1);
    if (v20)
    {
      uint64_t v21 = (void (*)(swift **, long long *, ValueMetadata *))*((void *)Description + 2);
      v21(v11, (long long *)(a2+ ((Description[80] + 32) & ~(unint64_t)Description[80])+ *((void *)Description + 9) * v17), a3);
      if (a3 == &type metadata for String) {
        goto LABEL_15;
      }
    }
    else
    {
      id v30 = _ArrayBuffer._getElementSlowPath(_:)(v17, a2, &a3->Kind);
      unint64_t v31 = v30;
      if (v44 != 8)
      {
        swift_unknownObjectRelease(v30);
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't unsafeBitCast between types of different sizes", 52, 2, "Swift/Builtin.swift", 19, 2, 0x5FuLL, 0);
      }
      *(void *)&long long v56 = v30;
      uint64_t v21 = *v18;
      (*v18)(v11, &v56, a3);
      swift_unknownObjectRelease(v31);
      if (a3 == &type metadata for String)
      {
LABEL_15:
        *((void *)&v54 + 1) = type metadata accessor for _ConcreteHashableBox(0, (uint64_t)&type metadata for String, v51, v22);
        char v55 = &protocol witness table for _ConcreteHashableBox<A>;
        long long v32 = (swift **)__swift_allocate_boxed_opaque_existential_0Tm(&v53);
        v21(v32, (long long *)v11, &type metadata for String);
        (*v49)(v11, &type metadata for String);
        goto LABEL_16;
      }
    }
    uint64_t v23 = v45;
    v21((swift **)v45, (long long *)v11, a3);
    BOOL v24 = (const char *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _HasCustomAnyHashableRepresentation);
    if ((swift_dynamicCast((char *)&v56, v23, (Class *)a3, v24, 6uLL) & 1) == 0)
    {
      uint64_t v58 = 0;
      long long v56 = 0u;
      long long v57 = 0u;
      outlined destroy of _HasContiguousBytes?((uint64_t)&v56, &demangling cache variable for type metadata for _HasCustomAnyHashableRepresentation?);
      long long v53 = 0u;
      long long v54 = 0u;
      char v55 = 0;
LABEL_12:
      outlined destroy of AnyHashable?((uint64_t *)&v53);
      *((void *)&v57 + 1) = &unk_1ECA01B10;
      uint64_t v58 = &protocol witness table for _ConcreteHashableBox<A>;
      LOBYTE(v56) = 0;
      _swift_makeAnyHashableUpcastingToHashableBaseType(v11, (objc_object *)&v56, &a3->Kind, v51);
      (*v49)(v11, a3);
      goto LABEL_17;
    }
    uint64_t v25 = *((void *)&v57 + 1);
    uint64_t v26 = v58;
    uint64_t v27 = __swift_project_boxed_opaque_existential_0Tm(&v56, *((uint64_t *)&v57 + 1));
    MEMORY[0x1F4188790](v27);
    (*(void (**)(char *))(v29 + 16))((char *)&v43 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0));
    ((void (*)(long long *__return_ptr, uint64_t, _UNKNOWN **))v26[1])(&v53, v25, v26);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t *)&v56);
    if (!*((void *)&v54 + 1)) {
      goto LABEL_12;
    }
    (*v49)(v11, a3);
LABEL_16:
    long long v56 = v53;
    long long v57 = v54;
    uint64_t v58 = v55;
LABEL_17:
    long long v59 = v56;
    long long v60 = v57;
    id v61 = v58;
    uint64_t v33 = v63;
    uint64_t v34 = v64;
    __swift_project_boxed_opaque_existential_0Tm(v62, v63);
    (*(void (**)(long long *__return_ptr, unint64_t, uint64_t, uint64_t))(v34 + 24))(&v56, v17, v33, v34);
    uint64_t v35 = *((void *)&v60 + 1);
    long long v36 = v61;
    __swift_project_boxed_opaque_existential_0Tm(&v59, *((uint64_t *)&v60 + 1));
    ((void (*)(long long *__return_ptr, uint64_t, _UNKNOWN **))v36[1])(&v53, v35, v36);
    uint64_t v37 = *((void *)&v54 + 1);
    unint64_t v38 = v55;
    __swift_project_boxed_opaque_existential_0Tm(&v53, *((uint64_t *)&v54 + 1));
    uint64_t v40 = *((void *)&v57 + 1);
    uint64_t v39 = v58;
    __swift_project_boxed_opaque_existential_0Tm(&v56, *((uint64_t *)&v57 + 1));
    ((void (*)(uint64_t *__return_ptr, uint64_t, _UNKNOWN **))v39[1])(v52, v40, v39);
    char v41 = ((uint64_t (*)(uint64_t *, uint64_t, _UNKNOWN **))v38[2])(v52, v37, v38);
    __swift_destroy_boxed_opaque_existential_1Tm(v52);
    if (v41 == 2) {
      break;
    }
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t *)&v53);
    outlined destroy of AnyHashable((uint64_t *)&v56);
    outlined destroy of AnyHashable((uint64_t *)&v59);
    ++v17;
    a2 = v48;
    Swift::Int v14 = v47;
    char v18 = v46;
    if ((v41 & 1) == 0) {
      goto LABEL_23;
    }
  }
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t *)&v53);
  outlined destroy of AnyHashable((uint64_t *)&v56);
  outlined destroy of AnyHashable((uint64_t *)&v59);
LABEL_23:
  __swift_destroy_boxed_opaque_existential_1Tm(v62);
  return 0;
}

Swift::Int _ArrayAnyHashableBox._hashValue.getter(uint64_t a1, ValueMetadata *a2, uint64_t a3)
{
  v4[0] = 0;
  v4[1] = _swift_stdlib_Hashing_parameters ^ 0x736F6D6570736575;
  v4[2] = unk_1EB208F00 ^ 0x646F72616E646F6DLL;
  v4[3] = _swift_stdlib_Hashing_parameters ^ 0x6C7967656E657261;
  v4[4] = unk_1EB208F00 ^ 0x7465646279746573;
  long long v5 = 0u;
  long long v6 = 0u;
  _ArrayAnyHashableBox._hash(into:)((uint64_t)v4, a1, a2, a3);
  return Hasher.finalize()();
}

double Hasher.init()@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1 = unk_1EB208F00 ^ 0x7465646279746573;
  uint64_t v2 = _swift_stdlib_Hashing_parameters ^ 0x6C7967656E657261;
  uint64_t v3 = unk_1EB208F00 ^ 0x646F72616E646F6DLL;
  uint64_t v4 = _swift_stdlib_Hashing_parameters ^ 0x736F6D6570736575;
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v3;
  *(void *)(a1 + 24) = v2;
  *(void *)(a1 + 32) = v1;
  double result = 0.0;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  return result;
}

void _ArrayAnyHashableBox._hash(into:)(uint64_t a1, uint64_t a2, ValueMetadata *a3, uint64_t a4)
{
  Swift::UInt v8 = Array._getCount()();
  Hasher._combine(_:)(v8);
  if ((v8 & 0x8000000000000000) != 0) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
  }
  if (v8)
  {
    unint64_t v9 = 0;
    do
    {
      unint64_t v10 = v9 + 1;
      _ArrayAnyHashableBox.subscript.getter(v9, a2, a3, a4, (uint64_t)v18);
      uint64_t v11 = v19;
      uint64_t v12 = v20;
      __swift_project_boxed_opaque_existential_0Tm(v18, v19);
      (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v12 + 8))(v15, v11, v12);
      uint64_t v13 = v16;
      uint64_t v14 = v17;
      __swift_project_boxed_opaque_existential_0Tm(v15, v16);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 32))(a1, v13, v14);
      __swift_destroy_boxed_opaque_existential_1Tm(v15);
      outlined destroy of AnyHashable(v18);
      unint64_t v9 = v10;
    }
    while (v8 != v10);
  }
}

Swift::Int __swiftcall Hasher.finalize()()
{
  uint64_t v1 = v0[2];
  uint64_t v2 = v0[4] ^ *v0;
  uint64_t v3 = v1 + v0[1];
  uint64_t v4 = v3 ^ __ROR8__(v1, 51);
  uint64_t v5 = v2 + v0[3];
  uint64_t v6 = __ROR8__(v2, 48);
  uint64_t v7 = (v5 ^ v6) + __ROR8__(v3, 32);
  uint64_t v8 = v7 ^ __ROR8__(v5 ^ v6, 43);
  uint64_t v9 = v5 + v4;
  uint64_t v10 = v9 ^ __ROR8__(v4, 47);
  uint64_t v11 = (v7 ^ *v0) + v10;
  uint64_t v12 = v11 ^ __ROR8__(v10, 51);
  uint64_t v13 = (__ROR8__(v9, 32) ^ 0xFFLL) + v8;
  uint64_t v14 = __ROR8__(v8, 48);
  uint64_t v15 = __ROR8__(v11, 32) + (v13 ^ v14);
  uint64_t v16 = v15 ^ __ROR8__(v13 ^ v14, 43);
  uint64_t v17 = v12 + v13;
  uint64_t v18 = __ROR8__(v17, 32);
  uint64_t v19 = v17 ^ __ROR8__(v12, 47);
  uint64_t v20 = v15 + v19;
  uint64_t v21 = v20 ^ __ROR8__(v19, 51);
  uint64_t v22 = v18 + v16;
  uint64_t v23 = (v18 + v16) ^ __ROR8__(v16, 48);
  uint64_t v24 = __ROR8__(v20, 32) + v23;
  uint64_t v25 = v24 ^ __ROR8__(v23, 43);
  uint64_t v26 = v21 + v22;
  uint64_t v27 = v26 ^ __ROR8__(v21, 47);
  uint64_t v28 = __ROR8__(v26, 32) + v25;
  uint64_t v29 = (v24 + v27) ^ __ROR8__(v27, 51);
  return __ROR8__(v28 ^ __ROR8__(v25, 48), 43) ^ __ROR8__(v29 + v28, 32) ^ (v29 + v28) ^ __ROR8__(v29, 47);
}

Swift::Int __swiftcall _ArrayAnyHashableBox._rawHashValue(_seed:)(Swift::Int _seed)
{
  uint64_t v4 = v3;
  uint64_t v5 = v2;
  uint64_t v6 = v1;
  Description = (char *)v2[-1].Description;
  uint64_t v8 = MEMORY[0x1F4188790](_seed);
  uint64_t v10 = (unint64_t *)((char *)&v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v36 = v9;
  uint64_t v11 = MEMORY[0x1F4188790](v8);
  uint64_t v13 = (swift **)((char *)&v36 - v12);
  v48[0] = 0;
  v48[1] = _swift_stdlib_Hashing_parameters ^ v11 ^ 0x736F6D6570736575;
  v48[2] = unk_1EB208F00 ^ 0x646F72616E646F6DLL;
  v48[3] = _swift_stdlib_Hashing_parameters ^ v11 ^ 0x6C7967656E657261;
  v48[4] = unk_1EB208F00 ^ 0x7465646279746573;
  *(_OWORD *)(v14 + 40) = 0u;
  *(_OWORD *)(v14 + 56) = 0u;
  Swift::UInt v15 = Array._getCount()();
  Hasher._combine(_:)(v15);
  if ((v15 & 0x8000000000000000) != 0) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
  }
  if (v15)
  {
    unint64_t v16 = 0;
    unint64_t v41 = v6 & 0xC000000000000001;
    uint64_t v17 = (void (**)(swift **, long long *, ValueMetadata *))(Description + 16);
    unint64_t v38 = (void (**)(swift **, ValueMetadata *))(Description + 8);
    Swift::UInt v40 = v15;
    uint64_t v39 = (void (**)(swift **, long long *, ValueMetadata *))(Description + 16);
    uint64_t v37 = v13;
    do
    {
      BOOL v23 = v41 == 0;
      char v24 = v23 | ~_swift_isClassOrObjCExistentialType((uint64_t)v5, &v5->Kind);
      Array._checkSubscript(_:wasNativeTypeChecked:)(v16, v24 & 1);
      if (v24)
      {
        uint64_t v25 = (void (*)(swift **, long long *, ValueMetadata *))*((void *)Description + 2);
        v25(v13, (long long *)(v6+ ((Description[80] + 32) & ~(unint64_t)Description[80])+ *((void *)Description + 9) * v16), v5);
        if (v5 == &type metadata for String) {
          goto LABEL_4;
        }
      }
      else
      {
        id v33 = _ArrayBuffer._getElementSlowPath(_:)(v16, v6, &v5->Kind);
        uint64_t v34 = v33;
        if (v36 != 8)
        {
          swift_unknownObjectRelease(v33);
          _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't unsafeBitCast between types of different sizes", 52, 2, "Swift/Builtin.swift", 19, 2, 0x5FuLL, 0);
        }
        *(void *)&long long v45 = v33;
        uint64_t v25 = *v17;
        (*v17)(v13, &v45, v5);
        swift_unknownObjectRelease(v34);
        if (v5 == &type metadata for String)
        {
LABEL_4:
          *((void *)&v46 + 1) = type metadata accessor for _ConcreteHashableBox(0, (uint64_t)&type metadata for String, v4, v26);
          Swift::Int v47 = &protocol witness table for _ConcreteHashableBox<A>;
          uint64_t v18 = (swift **)__swift_allocate_boxed_opaque_existential_0Tm(&v45);
          v25(v18, (long long *)v13, &type metadata for String);
          (*v38)(v13, &type metadata for String);
          goto LABEL_5;
        }
      }
      v25((swift **)v10, (long long *)v13, v5);
      uint64_t v27 = (const char *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _HasCustomAnyHashableRepresentation);
      if ((swift_dynamicCast((char *)&v42, v10, (Class *)v5, v27, 6uLL) & 1) == 0)
      {
        uint64_t v44 = 0;
        long long v42 = 0u;
        long long v43 = 0u;
        outlined destroy of _HasContiguousBytes?((uint64_t)&v42, &demangling cache variable for type metadata for _HasCustomAnyHashableRepresentation?);
        long long v45 = 0u;
        long long v46 = 0u;
        Swift::Int v47 = 0;
LABEL_13:
        outlined destroy of AnyHashable?((uint64_t *)&v45);
        *((void *)&v43 + 1) = &unk_1ECA01B10;
        uint64_t v44 = &protocol witness table for _ConcreteHashableBox<A>;
        LOBYTE(v42) = 0;
        _swift_makeAnyHashableUpcastingToHashableBaseType(v13, (objc_object *)&v42, &v5->Kind, v4);
        (*v38)(v13, v5);
        goto LABEL_6;
      }
      uint64_t v28 = *((void *)&v43 + 1);
      uint64_t v29 = v44;
      id v30 = __swift_project_boxed_opaque_existential_0Tm(&v42, *((uint64_t *)&v43 + 1));
      MEMORY[0x1F4188790](v30);
      (*(void (**)(char *))(v32 + 16))((char *)&v36 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0));
      ((void (*)(long long *__return_ptr, uint64_t, _UNKNOWN **))v29[1])(&v45, v28, v29);
      uint64_t v13 = v37;
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t *)&v42);
      if (!*((void *)&v46 + 1)) {
        goto LABEL_13;
      }
      (*v38)(v13, v5);
LABEL_5:
      long long v42 = v45;
      long long v43 = v46;
      uint64_t v44 = v47;
LABEL_6:
      ++v16;
      long long v45 = v42;
      long long v46 = v43;
      uint64_t v19 = v44;
      Swift::Int v47 = v44;
      uint64_t v20 = *((void *)&v43 + 1);
      __swift_project_boxed_opaque_existential_0Tm(&v45, *((uint64_t *)&v43 + 1));
      ((void (*)(long long *__return_ptr, uint64_t, _UNKNOWN **))v19[1])(&v42, v20, v19);
      uint64_t v21 = *((void *)&v43 + 1);
      uint64_t v22 = v44;
      __swift_project_boxed_opaque_existential_0Tm(&v42, *((uint64_t *)&v43 + 1));
      ((void (*)(void *, uint64_t, _UNKNOWN **))v22[4])(v48, v21, v22);
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t *)&v42);
      outlined destroy of AnyHashable((uint64_t *)&v45);
      uint64_t v17 = v39;
    }
    while (v40 != v16);
  }
  return Hasher._finalize()();
}

double Hasher.init(_seed:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = unk_1EB208F00 ^ 0x7465646279746573;
  uint64_t v3 = _swift_stdlib_Hashing_parameters ^ a1 ^ 0x6C7967656E657261;
  uint64_t v4 = unk_1EB208F00 ^ 0x646F72616E646F6DLL;
  uint64_t v5 = _swift_stdlib_Hashing_parameters ^ a1 ^ 0x736F6D6570736575;
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = v5;
  *(void *)(a2 + 16) = v4;
  *(void *)(a2 + 24) = v3;
  *(void *)(a2 + 32) = v2;
  double result = 0.0;
  *(_OWORD *)(a2 + 40) = 0u;
  *(_OWORD *)(a2 + 56) = 0u;
  return result;
}

Swift::Int __swiftcall Hasher._finalize()()
{
  uint64_t v1 = v0[4] ^ *v0;
  uint64_t v2 = v0[2];
  uint64_t v3 = v2 + v0[1];
  uint64_t v4 = v3 ^ __ROR8__(v2, 51);
  uint64_t v5 = v0[3] + v1;
  uint64_t v6 = __ROR8__(v1, 48);
  uint64_t v7 = (v5 ^ v6) + __ROR8__(v3, 32);
  uint64_t v8 = v7 ^ __ROR8__(v5 ^ v6, 43);
  uint64_t v9 = v5 + v4;
  uint64_t v10 = v9 ^ __ROR8__(v4, 47);
  uint64_t v11 = (v7 ^ *v0) + v10;
  uint64_t v12 = v11 ^ __ROR8__(v10, 51);
  uint64_t v13 = (__ROR8__(v9, 32) ^ 0xFFLL) + v8;
  uint64_t v14 = __ROR8__(v8, 48);
  uint64_t v15 = __ROR8__(v11, 32) + (v13 ^ v14);
  uint64_t v16 = v15 ^ __ROR8__(v13 ^ v14, 43);
  uint64_t v17 = v12 + v13;
  uint64_t v18 = v17 ^ __ROR8__(v12, 47);
  uint64_t v19 = v15 + v18;
  uint64_t v20 = v19 ^ __ROR8__(v18, 51);
  uint64_t v21 = __ROR8__(v17, 32) + v16;
  uint64_t v22 = __ROR8__(v16, 48);
  uint64_t v23 = __ROR8__(v19, 32) + (v21 ^ v22);
  uint64_t v24 = v23 ^ __ROR8__(v21 ^ v22, 43);
  uint64_t v25 = v20 + v21;
  uint64_t v26 = v25 ^ __ROR8__(v20, 47);
  uint64_t v27 = v23 + v26;
  uint64_t v28 = v27 ^ __ROR8__(v26, 51);
  uint64_t v29 = __ROR8__(v25, 32) + v24;
  uint64_t v30 = __ROR8__(v24, 48);
  uint64_t v31 = __ROR8__(v27, 32) + (v29 ^ v30);
  uint64_t v32 = v31 ^ __ROR8__(v29 ^ v30, 43);
  uint64_t v33 = v28 + v29;
  uint64_t v34 = v33 ^ __ROR8__(v28, 47);
  uint64_t v35 = __ROR8__(v33, 32);
  v0[3] = v35;
  v0[4] = v32;
  v0[1] = v31;
  v0[2] = v34;
  return v35 ^ v34 ^ v32 ^ v31;
}

uint64_t _ArrayAnyHashableBox._unbox<A>()@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, const char *a3@<X2>, uint64_t a4@<X3>, char *a5@<X8>)
{
  unint64_t v11 = a1;
  uint64_t v8 = type metadata accessor for Array(0, a2, (uint64_t)a3, a4);
  swift_bridgeObjectRetain(a1);
  int v9 = swift_dynamicCast(a5, &v11, v8, a3, 6uLL);
  return (*(uint64_t (**)(char *, void, uint64_t, const char *))(*((void *)a3 - 1) + 56))(a5, v9 ^ 1u, 1, a3);
}

uint64_t _ArrayAnyHashableBox._downCastConditional<A>(into:)(char *a1, unint64_t a2, uint64_t a3, const char *a4)
{
  uint64_t v8 = type metadata accessor for Optional(0, (uint64_t)a4, a3, (uint64_t)a4);
  uint64_t v9 = (uint64_t)*(v8 - 1);
  uint64_t v10 = MEMORY[0x1F4188790](v8);
  uint64_t v12 = (char *)&v23 - v11;
  uint64_t v13 = *((void *)a4 - 1);
  MEMORY[0x1F4188790](v10);
  uint64_t v15 = (char *)&v23 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v24 = a2;
  uint64_t v18 = type metadata accessor for Array(0, a3, v16, v17);
  swift_bridgeObjectRetain(a2);
  uint64_t v19 = swift_dynamicCast(v12, &v24, v18, a4, 6uLL);
  uint64_t v20 = *(void (**)(char *, uint64_t, uint64_t, const char *))(v13 + 56);
  if (v19)
  {
    v20(v12, 0, 1, a4);
    uint64_t v21 = *(void (**)(char *, char *, const char *))(v13 + 32);
    v21(v15, v12, a4);
    v21(a1, v15, a4);
  }
  else
  {
    v20(v12, 1, 1, a4);
    (*(void (**)(char *, Class *))(v9 + 8))(v12, v8);
  }
  return v19;
}

Swift::Int protocol witness for _ArrayAnyHashableProtocol.count.getter in conformance _ArrayAnyHashableBox<A>()
{
  return _ArrayAnyHashableBox.count.getter();
}

uint64_t protocol witness for _ArrayAnyHashableProtocol.subscript.getter in conformance _ArrayAnyHashableBox<A>@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return _ArrayAnyHashableBox.subscript.getter(a1, *v3, *(ValueMetadata **)(a2 + 16), *(void *)(a2 + 24), a3);
}

uint64_t _AnyHashableBox._canonicalBox.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  a3[3] = a1;
  a3[4] = a2;
  boxed_opaque_existential_0Tm = __swift_allocate_boxed_opaque_existential_0Tm(a3);
  uint64_t v6 = *(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)(a1 - 8) + 16);

  return v6(boxed_opaque_existential_0Tm, v3, a1);
}

uint64_t protocol witness for _AnyHashableBox._isEqual(to:) in conformance _ArrayAnyHashableBox<A>(uint64_t a1, uint64_t a2)
{
  return _ArrayAnyHashableBox._isEqual(to:)(a1, *v2, *(ValueMetadata **)(a2 + 16), *(void *)(a2 + 24));
}

Swift::Int protocol witness for _AnyHashableBox._hashValue.getter in conformance _ArrayAnyHashableBox<A>(uint64_t a1)
{
  return _ArrayAnyHashableBox._hashValue.getter(*v1, *(ValueMetadata **)(a1 + 16), *(void *)(a1 + 24));
}

void protocol witness for _AnyHashableBox._hash(into:) in conformance _ArrayAnyHashableBox<A>(uint64_t a1, uint64_t a2)
{
  _ArrayAnyHashableBox._hash(into:)(a1, *v2, *(ValueMetadata **)(a2 + 16), *(void *)(a2 + 24));
}

Swift::Int protocol witness for _AnyHashableBox._rawHashValue(_seed:) in conformance _ArrayAnyHashableBox<A>(Swift::Int _seed)
{
  return _ArrayAnyHashableBox._rawHashValue(_seed:)(_seed);
}

unint64_t protocol witness for _AnyHashableBox._base.getter in conformance _ArrayAnyHashableBox<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, unint64_t *a4@<X8>)
{
  return _ArrayAnyHashableBox._base.getter(*v4, *(void *)(a1 + 16), a2, a3, a4);
}

uint64_t protocol witness for _AnyHashableBox._unbox<A>() in conformance _ArrayAnyHashableBox<A>@<X0>(const char *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, char *a4@<X8>)
{
  return _ArrayAnyHashableBox._unbox<A>()(*v4, *(void *)(a2 + 16), a1, a3, a4);
}

uint64_t protocol witness for _AnyHashableBox._downCastConditional<A>(into:) in conformance _ArrayAnyHashableBox<A>(char *a1, const char *a2, uint64_t a3)
{
  return _ArrayAnyHashableBox._downCastConditional<A>(into:)(a1, *v3, *(void *)(a3 + 16), a2);
}

void *_allocateUninitializedArray<A>(_:)(uint64_t a1, uint64_t *a2)
{
  if (a1 < 1)
  {
    return (void *)static Array._allocateUninitialized(_:)(a1, a2);
  }
  else
  {
    uint64_t v4 = getContiguousArrayStorageType<A>(for:)((uint64_t)a2, a2);
    uint64_t v5 = swift_allocObject((unint64_t *)v4, ((*(unsigned __int8 *)(*(a2 - 1) + 80) + (unint64_t)*((unsigned int *)v4 + 12)) & ~(unint64_t)*(unsigned __int8 *)(*(a2 - 1) + 80))+ *(void *)(*(a2 - 1) + 72) * a1, *(unsigned __int8 *)(*(a2 - 1) + 80) | (unint64_t)*((unsigned __int16 *)v4 + 26));
    return static Array._adoptStorage(_:count:)(v5, a1);
  }
}

Class *getContiguousArrayStorageType<A>(for:)(uint64_t a1, uint64_t *a2)
{
  if (swift_isClassType(a2)) {
    uint64_t v5 = a2;
  }
  else {
    uint64_t v5 = 0;
  }
  if (v5)
  {
    return (Class *)canonical specialized generic type metadata accessor for _ContiguousArrayStorage<Swift.AnyObject>();
  }
  else
  {
    return type metadata accessor for _ContiguousArrayStorage(0, (uint64_t)a2, v3, v4);
  }
}

void _deallocateUninitializedArray<A>(_:)(uint64_t a1, uint64_t *a2)
{
  specialized _deallocateUninitializedArray<A>(_:)(a1, a2);

  swift_bridgeObjectRelease(a1);
}

uint64_t DefaultStringInterpolation.appendInterpolation<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(uint64_t, ValueMetadata *, _UNKNOWN **, uint64_t))(a4 + 8))(v4, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation, a2);
}

void static String.+= infix(_:_:)(unint64_t *a1, unint64_t a2, unint64_t a3)
{
  unint64_t v6 = a1[1];
  uint64_t v7 = HIBYTE(v6) & 0xF;
  if ((v6 & 0x2000000000000000) == 0) {
    uint64_t v7 = *a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v7 || (*a1 & ~v6 & 0x2000000000000000) != 0)
  {
    _StringGuts.append(_:)(a2, a3);
  }
  else
  {
    swift_bridgeObjectRetain(a3);
    swift_bridgeObjectRelease(v6);
    *a1 = a2;
    a1[1] = a3;
  }
}

uint64_t debugPrint<A>(_:separator:terminator:to:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return _print<A>(_:separator:terminator:to:)(a1, a2, a3, a4, a5, a6, a7, a8, (void (*)(uint64_t *, uint64_t))_debugPrint_unlocked<A, B>(_:_:));
}

uint64_t _ArrayBufferProtocol._arrayOutOfPlaceReplace<A>(_:with:count:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  specialized _ArrayBufferProtocol._arrayOutOfPlaceReplace<A>(_:with:count:)(a1, a2, a3, a4, a5, a6, a7, a8);
  uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a6 - 8) + 8);

  return v10(a3, a6);
}

__objc2_class **_ArrayBufferProtocol._forceCreateUniqueMutableBuffer(newCount:requiredCapacity:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _ArrayBufferProtocol._forceCreateUniqueMutableBufferImpl(countForBuffer:minNewCapacity:requiredCapacity:)(a1, a1, a2, a3, a4);
}

uint64_t closure #1 in _ArrayBufferProtocol._arrayOutOfPlaceReplace<A>(_:with:count:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, *(int ***)(*(void *)(*(void *)(a6 + 8) + 8) + 8), a4, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
  uint64_t v13 = *((void *)AssociatedTypeWitness - 1);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v15 = (char *)&v23 - v14;
  uint64_t v16 = swift_getAssociatedTypeWitness(0, (int **)a7, a5, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  uint64_t v25 = *((void *)v16 - 1);
  MEMORY[0x1F4188790](v16);
  uint64_t v18 = (char *)&v23 - v17;
  (*(void (**)(uint64_t, uint64_t))(a7 + 64))(a5, a7);
  if (a2 < 0) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
  }
  unint64_t v24 = v16;
  if (a2)
  {
    uint64_t v19 = *(uint64_t (**)(unsigned char *, char *, uint64_t, uint64_t))(a7 + 80);
    uint64_t v28 = v13 + 16;
    uint64_t v29 = v19;
    uint64_t v30 = a7 + 80;
    uint64_t v26 = a7 + 192;
    uint64_t v27 = v13 + 32;
    do
    {
      uint64_t v20 = a5;
      uint64_t v21 = (void (*)(unsigned char *, void))v29(v31, v18, a5, a7);
      (*(void (**)(char *))(v13 + 16))(v15);
      v21(v31, 0);
      a5 = v20;
      (*(void (**)(uint64_t, char *, const char *))(v13 + 32))(a1, v15, AssociatedTypeWitness);
      (*(void (**)(char *, uint64_t, uint64_t))(a7 + 192))(v18, v20, a7);
      a1 += *(void *)(v13 + 72);
      --a2;
    }
    while (a2);
  }
  _expectEnd<A>(of:is:)(a3, (uint64_t)v18, a5, a7);
  return (*(uint64_t (**)(char *, const char *))(v25 + 8))(v18, v24);
}

uint64_t _debugPrecondition(_:_:file:line:)(uint64_t (*a1)(void), uint64_t a2, const char *a3, uint64_t a4, char a5, const char *a6, uint64_t a7, char a8, unint64_t a9)
{
  uint64_t result = a1();
  if ((result & 1) == 0) {
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, a3, a4, a5, a6, a7, a8, a9, 0);
  }
  return result;
}

Swift::Int __swiftcall _growArrayCapacity(_:)(Swift::Int result)
{
  if (result + 0x4000000000000000 < 0) {
    __break(1u);
  }
  else {
    result *= 2;
  }
  return result;
}

uint64_t static Int.* infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t result = a1 * a2;
  if ((unsigned __int128)(a1 * (__int128)a2) >> 64 != result >> 63) {
    __break(1u);
  }
  return result;
}

__objc2_class **_ArrayBufferProtocol._forceCreateUniqueMutableBufferImpl(countForBuffer:minNewCapacity:requiredCapacity:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t))(a5 + 128);
  uint64_t v11 = v10(a4, a5);
  uint64_t v12 = v10(a4, a5);
  if (v11 < a2)
  {
    if (v12 + 0x4000000000000000 < 0)
    {
      __break(1u);
      goto LABEL_21;
    }
    v12 *= 2;
  }
  if (v12 <= a3) {
    uint64_t v13 = a3;
  }
  else {
    uint64_t v13 = v12;
  }
  if (v13 <= a1) {
    uint64_t v14 = a1;
  }
  else {
    uint64_t v14 = v13;
  }
  if (!v14) {
    return &_swiftEmptyArrayStorage;
  }
  AssociatedTypeWitness = (uint64_t *)swift_getAssociatedTypeWitness(0, *(int ***)(*(void *)(*(void *)(a5 + 8) + 8) + 8), a4, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
  uint64_t v16 = getContiguousArrayStorageType<A>(for:)((uint64_t)AssociatedTypeWitness, AssociatedTypeWitness);
  uint64_t v17 = *(void *)(*(AssociatedTypeWitness - 1) + 72);
  uint64_t v18 = *(unsigned __int8 *)(*(AssociatedTypeWitness - 1) + 80);
  uint64_t v19 = swift_allocObject((unint64_t *)v16, ((v18 + *((unsigned int *)v16 + 12)) & ~v18) + v17 * v14, v18 | *((unsigned __int16 *)v16 + 26));
  size_t v20 = _swift_stdlib_malloc_size(v19);
  if (!v17) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Division by zero", 16, 2, "Swift/IntegerTypes.swift", 24, 2, 0x3829uLL, 0);
  }
  int64_t v21 = v20 - ((v18 + 32) & ~v18);
  if (v21 == 0x8000000000000000 && v17 == -1) {
LABEL_21:
  }
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Division results in an overflow", 31, 2, "Swift/IntegerTypes.swift", 24, 2, 0x3830uLL, 0);
  uint64_t v23 = v21 / v17;
  swift_retain(v19);
  BOOL isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType((uint64_t)AssociatedTypeWitness, AssociatedTypeWitness);
  v19[2] = a1;
  v19[3] = isClassOrObjCExistentialType | (unint64_t)(2 * v23);
  swift_release((uint64_t)v19);
  return (__objc2_class **)v19;
}

uint64_t static Strideable<>.- infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a4 + 32) + 40))(a1, a3);
}

{
  uint64_t v6;
  const char *AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t AssociatedConformanceWitness;
  uint64_t v13;

  unint64_t v6 = *(void *)(a4 + 32);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (int **)v6, a3, (uint64_t)&protocol requirements base descriptor for Strideable, associated type descriptor for Strideable.Stride);
  uint64_t v8 = *((void *)AssociatedTypeWitness - 1);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v10 = (char *)&v13 - v9;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v6, a3, (uint64_t)AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Strideable, associated conformance descriptor for Strideable.Strideable.Stride: SignedNumeric);
  (*(void (**)(uint64_t, const char *, uint64_t))(AssociatedConformanceWitness + 16))(a2, AssociatedTypeWitness, AssociatedConformanceWitness);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 48))(v10, a3, v6);
  return (*(uint64_t (**)(char *, const char *))(v8 + 8))(v10, AssociatedTypeWitness);
}

Swift::Void __swiftcall _ArrayBufferProtocol._outlinedMakeUniqueBuffer(bufferCount:)(Swift::Int bufferCount)
{
  uint64_t v3 = v2;
  uint64_t v4 = v1;
  uint64_t v6 = (*(uint64_t (**)(void))(v2 + 56))();
  if (!v6)
  {
    uint64_t v7 = _ArrayBufferProtocol._forceCreateUniqueMutableBuffer(newCount:requiredCapacity:)(bufferCount, bufferCount, v4, v3);
    uint64_t v11 = v7;
    uint64_t v8 = default argument 3 of _ArrayBufferProtocol._arrayOutOfPlaceUpdate(_:_:_:_:)(v4, v3);
    uint64_t v10 = v9;
    _ArrayBufferProtocol._arrayOutOfPlaceUpdate(_:_:_:_:)((atomic_ullong **)&v11, bufferCount, 0, (void (*)(char *, uint64_t))v8, v9, v4, v3);
    swift_release(v10);
    uint64_t v6 = (uint64_t)v7;
  }

  swift_release(v6);
}

uint64_t _ArrayBufferProtocol._arrayAppendSequence<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v59 = a4;
  uint64_t v60 = a2;
  uint64_t v73 = a1;
  uint64_t v8 = *(void *)(*(void *)(a4 + 8) + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, *(int ***)(v8 + 8), a2, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
  uint64_t v66 = *((void *)AssociatedTypeWitness - 1);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  unint64_t v52 = (char *)&v50 - v9;
  uint64_t v13 = type metadata accessor for Optional(0, v10, v11, v12);
  uint64_t v69 = (uint64_t)*(v13 - 1);
  uint64_t v14 = MEMORY[0x1F4188790](v13);
  uint64_t v16 = (char *)&v50 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = MEMORY[0x1F4188790](v14);
  uint64_t v19 = (char *)&v50 - v18;
  MEMORY[0x1F4188790](v17);
  Swift::String::Index v75 = (char *)&v50 - v20;
  int64_t v21 = swift_getAssociatedTypeWitness(0, (int **)a5, a3, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Iterator);
  uint64_t v50 = *((void *)v21 - 1);
  MEMORY[0x1F4188790](v21);
  uint64_t v23 = (char *)&v50 - v22;
  uint64_t v24 = v5;
  uint64_t v25 = (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 112))(v60, v8);
  (*(void (**)(uint64_t, uint64_t))(a5 + 32))(a3, a5);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(a5, a3, (uint64_t)v21, (uint64_t)&protocol requirements base descriptor for Sequence, associated conformance descriptor for Sequence.Sequence.Iterator: IteratorProtocol);
  uint64_t v27 = *(void (**)(const char *, uint64_t))(AssociatedConformanceWitness + 16);
  uint64_t v28 = v75;
  uint64_t v64 = v23;
  unint64_t v65 = v21;
  uint64_t v62 = AssociatedConformanceWitness + 16;
  uint64_t v63 = AssociatedConformanceWitness;
  id v61 = v27;
  ((void (*)(const char *))v27)(v21);
  uint64_t v29 = AssociatedTypeWitness;
  uint64_t v30 = v69;
  Swift::String::Index v72 = *(void (**)(char *, char *, Class *))(v69 + 16);
  uint64_t v73 = v69 + 16;
  v72(v19, v28, v13);
  char v70 = *(uint64_t (**)(char *, uint64_t, const char *))(v66 + 48);
  uint64_t v71 = v66 + 48;
  int v31 = v70(v19, 1, v29);
  int64_t v68 = *(uint64_t (**)(char *, Class *))(v30 + 8);
  uint64_t v69 = v30 + 8;
  if (v31 == 1)
  {
LABEL_2:
    uint64_t v32 = v68;
    v68(v75, v13);
    (*(void (**)(char *, const char *))(v50 + 8))(v64, v65);
    return v32(v19, v13);
  }
  else
  {
    uint64_t v57 = v59 + 144;
    uint64_t v58 = v59 + 128;
    uint64_t v34 = (void (**)(void, void, void))(v66 + 32);
    uint64_t v51 = (void (**)(char *, const char *))(v66 + 8);
    uint64_t v55 = v59 + 112;
    uint64_t v54 = v24;
    long long v53 = v19;
    long long v56 = v16;
    while (1)
    {
      uint64_t result = v68(v19, v13);
      if (__OFADD__(v25, 1)) {
        break;
      }
      uint64_t v35 = v34;
      uint64_t v36 = v60;
      uint64_t v37 = v13;
      uint64_t v38 = v59;
      uint64_t v39 = _ArrayBufferProtocol._forceCreateUniqueMutableBuffer(countForNewBuffer:minNewCapacity:)(v25, v25 + 1, v60, v59);
      Swift::Int v76 = v39;
      Swift::UInt v40 = default argument 3 of _ArrayBufferProtocol._arrayOutOfPlaceUpdate(_:_:_:_:)(v36, v38);
      uint64_t v42 = v41;
      _ArrayBufferProtocol._arrayOutOfPlaceUpdate(_:_:_:_:)((atomic_ullong **)&v76, v25, 0, (void (*)(char *, uint64_t))v40, v41, v36, v38);
      swift_release(v42);
      swift_release((uint64_t)v39);
      uint64_t v43 = (*(uint64_t (**)(uint64_t, uint64_t))(v38 + 128))(v36, v38);
      uint64_t v44 = (*(uint64_t (**)(uint64_t, uint64_t))(v38 + 144))(v36, v38);
      long long v45 = AssociatedTypeWitness;
      uint64_t v67 = v44;
      long long v46 = v37;
      v72(v16, v75, v37);
      if (v70(v16, 1, v45) == 1)
      {
        uint64_t v34 = v35;
        uint64_t v16 = v56;
LABEL_14:
        uint64_t v13 = v46;
        v68(v16, v46);
        uint64_t v43 = v25;
      }
      else
      {
        uint64_t v34 = v35;
        Swift::Int v47 = (void (*)(char *, char *, const char *))*v35;
        if (v43 <= v25) {
          uint64_t v43 = v25;
        }
        uint64_t v48 = v52;
        uint64_t v16 = v56;
        while (1)
        {
          v47(v48, v16, v45);
          if (v43 == v25) {
            break;
          }
          unint64_t v49 = v75;
          v68(v75, v46);
          v47((char *)(v67 + *(void *)(v66 + 72) * v25++), v48, v45);
          v61(v65, v63);
          long long v45 = AssociatedTypeWitness;
          uint64_t v34 = v35;
          v72(v16, v49, v46);
          if (v70(v16, 1, v45) == 1) {
            goto LABEL_14;
          }
        }
        (*v51)(v48, v45);
        uint64_t v25 = v43;
        uint64_t v13 = v46;
      }
      uint64_t v19 = v53;
      (*(void (**)(uint64_t, uint64_t))(v59 + 112))(v43, v60);
      v72(v19, v75, v13);
      if (v70(v19, 1, AssociatedTypeWitness) == 1) {
        goto LABEL_2;
      }
    }
    __break(1u);
  }
  return result;
}

id ArraySlice._buffer.getter(void *a1)
{
  return swift_unknownObjectRetain(a1);
}

void ArraySlice._buffer.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  swift_unknownObjectRelease(*(id *)v4);
  *(void *)uint64_t v4 = a1;
  *(void *)(v4 + 8) = a2;
  *(void *)(v4 + 16) = a3;
  *(void *)(v4 + 24) = a4;
}

uint64_t (*ArraySlice._buffer.modify())(void, void)
{
  return EnumeratedSequence._base.modify;
}

uint64_t specialized _SliceBuffer.init(_buffer:shiftedToStartIndex:)(uint64_t result, uint64_t a2)
{
  if (__OFSUB__(0, a2))
  {
    __break(1u);
    goto LABEL_7;
  }
  uint64_t v2 = *(void *)(result + 16);
  BOOL v3 = __OFADD__(a2, v2);
  uint64_t v4 = a2 + v2;
  if (v3)
  {
LABEL_7:
    __break(1u);
LABEL_8:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
  }
  if (v4 < a2) {
    goto LABEL_8;
  }
  if (v4 < 0) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, 2, 0xD7BuLL, 0);
  }
  return result;
}

uint64_t _SliceBuffer.init(_buffer:shiftedToStartIndex:)(uint64_t result, uint64_t a2)
{
  if (__OFSUB__(0, a2))
  {
    __break(1u);
    goto LABEL_7;
  }
  uint64_t v2 = *(void *)(result + 16);
  BOOL v3 = __OFADD__(a2, v2);
  uint64_t v4 = a2 + v2;
  if (v3)
  {
LABEL_7:
    __break(1u);
LABEL_8:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
  }
  if (v4 < a2) {
    goto LABEL_8;
  }
  if (v4 < 0) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, 2, 0xD7BuLL, 0);
  }
  return result;
}

Swift::Bool __swiftcall ArraySlice._hoistableIsNativeTypeChecked()()
{
  return v0 & 1;
}

uint64_t _SliceBuffer.arrayPropertyIsNativeTypeChecked.getter(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  return a4 & 1;
}

Swift::Int __swiftcall ArraySlice._getCount()()
{
  Swift::Int result = (v1 >> 1) - v0;
  if (__OFSUB__(v1 >> 1, v0)) {
    __break(1u);
  }
  return result;
}

uint64_t _SliceBuffer.count.getter(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t result = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3)) {
    __break(1u);
  }
  return result;
}

Swift::Int __swiftcall ArraySlice._getCapacity()()
{
  Swift::Int v5 = (v3 >> 1) - v2;
  if (__OFSUB__(v3 >> 1, v2))
  {
    __break(1u);
  }
  else
  {
    if ((v3 & 1) == 0) {
      return v5;
    }
    uint64_t v6 = v4;
    uint64_t v7 = v2;
    uint64_t v8 = v1;
    uint64_t v9 = (void *)result;
    uint64_t v10 = type metadata accessor for __ContiguousArrayStorageBase();
    id v11 = swift_unknownObjectRetain(v9);
    uint64_t v12 = (__objc2_class **)swift_dynamicCastClass((uint64_t)v11, v10);
    if (!v12)
    {
      swift_unknownObjectRelease(v9);
      uint64_t v12 = &_swiftEmptyArrayStorage;
    }
    uint64_t v13 = *(void *)(v6 - 8);
    uint64_t v14 = v12[2];
    if ((__objc2_class **)(v8 + *(void *)(v13 + 72) * v7 + *(void *)(v13 + 72) * v5) != (__objc2_class **)((char *)v12 + ((*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80)) + *(void *)(v13 + 72) * (void)v14))
    {
      swift_release((uint64_t)v12);
      return v5;
    }
    unint64_t v15 = (unint64_t)v12[3];
    Swift::Int result = swift_release((uint64_t)v12);
    unint64_t v16 = (v15 >> 1) - (void)v14;
    BOOL v17 = __OFADD__(v5, v16);
    v5 += v16;
    if (!v17) {
      return v5;
    }
  }
  __break(1u);
  return result;
}

uint64_t _SliceBuffer.capacity.getter(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v5 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3))
  {
    __break(1u);
  }
  else
  {
    if ((a4 & 1) == 0) {
      return v5;
    }
    uint64_t v9 = (void *)result;
    uint64_t v10 = type metadata accessor for __ContiguousArrayStorageBase();
    id v11 = swift_unknownObjectRetain(v9);
    uint64_t v12 = (__objc2_class **)swift_dynamicCastClass((uint64_t)v11, v10);
    if (!v12)
    {
      swift_unknownObjectRelease(v9);
      uint64_t v12 = &_swiftEmptyArrayStorage;
    }
    uint64_t v13 = *(void *)(a5 - 8);
    uint64_t v14 = v12[2];
    if ((__objc2_class **)(a2 + *(void *)(v13 + 72) * a3 + *(void *)(v13 + 72) * v5) != (__objc2_class **)((char *)v12 + ((*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80)) + *(void *)(v13 + 72) * (void)v14))
    {
      swift_release((uint64_t)v12);
      return v5;
    }
    unint64_t v15 = (unint64_t)v12[3];
    Swift::Int result = swift_release((uint64_t)v12);
    unint64_t v16 = (v15 >> 1) - (void)v14;
    BOOL v17 = __OFADD__(v5, v16);
    v5 += v16;
    if (!v17) {
      return v5;
    }
  }
  __break(1u);
  return result;
}

Swift::Void __swiftcall ArraySlice._makeMutableAndUnique()()
{
  uint64_t v4 = v0;
  unint64_t v5 = v3[3];
  unint64_t v6 = *v3;
  if (v5)
  {
    char isUniquelyReferenced_nonNull = swift_isUniquelyReferenced_nonNull(*v3);
    *unint64_t v3 = v6;
    if (isUniquelyReferenced_nonNull) {
      return;
    }
    unint64_t v5 = v3[3];
  }
  uint64_t v8 = (unint64_t *)type metadata accessor for _SliceBuffer(0, *(void *)(v4 + 16), v1, v2);
  unint64_t v9 = v3[1];
  unint64_t v10 = v3[2];
  v14[0] = v6;
  v14[1] = v9;
  v14[2] = v10;
  v14[3] = v5;
  uint64_t WitnessTable = swift_getWitnessTable(protocol conformance descriptor for _SliceBuffer<A>, v8, v11);
  _ArrayBufferProtocol.init(copying:)((uint64_t)v14, (uint64_t)v8, WitnessTable, (uint64_t)v15);
  long long v13 = v15[1];
  *(_OWORD *)unint64_t v3 = v15[0];
  *((_OWORD *)v3 + 1) = v13;
}

Swift::Void __swiftcall ArraySlice._checkSubscript_native(_:)(Swift::Int a1)
{
  if (a1 < v1 || (uint64_t)(v2 >> 1) <= a1) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Index out of bounds", 19, 2, "Swift/SliceBuffer.swift", 23, 2, 0x132uLL, 0);
  }
}

Swift::Void __swiftcall _SliceBuffer._checkValidSubscript(_:)(Swift::Int a1)
{
  if (a1 < v1 || (uint64_t)(v2 >> 1) <= a1) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Index out of bounds", 19, 2, "Swift/SliceBuffer.swift", 23, 2, 0x132uLL, 0);
  }
}

void __swiftcall ArraySlice._checkSubscript(_:wasNativeTypeChecked:)(Swift::Int _, Swift::Bool wasNativeTypeChecked)
{
  specialized ArraySlice._checkSubscript(_:wasNativeTypeChecked:)(_, v2, v3, v4, v5);
}

Swift::Void __swiftcall ArraySlice._checkIndex(_:)(Swift::Int a1)
{
  if (a1 > (uint64_t)(v2 >> 1)) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "ArraySlice index is out of range", 32, 2, "Swift/ArraySlice.swift", 22, 2, 0xCEuLL, 0);
  }
  if (a1 < v1) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "ArraySlice index is out of range (before startIndex)", 52, 2, "Swift/ArraySlice.swift", 22, 2, 0xCFuLL, 0);
  }
}

uint64_t ArraySlice._getElement(_:wasNativeTypeChecked:matchingSubscriptCheck:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X6>, uint64_t a4@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a3 - 8) + 16))(a4, a2 + *(void *)(*(void *)(a3 - 8) + 72) * a1, a3);
}

uint64_t _SliceBuffer.getElement(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X5>, uint64_t a4@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a3 - 8) + 16))(a4, a2 + *(void *)(*(void *)(a3 - 8) + 72) * a1, a3);
}

uint64_t ArraySlice._getElementAddress(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return a3 + *(void *)(*(void *)(a6 - 8) + 72) * a1;
}

id ArraySlice._owner.getter()
{
  uint64_t v0 = (void *)EnumeratedSequence._base.modify();

  return swift_unknownObjectRetain(v0);
}

uint64_t ArraySlice._baseAddressIfContiguous.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return a2 + *(void *)(*(void *)(a5 - 8) + 72) * a3;
}

uint64_t _SliceBuffer.firstElementAddressIfContiguous.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return a2 + *(void *)(*(void *)(a5 - 8) + 72) * a3;
}

uint64_t _SliceBuffer.identity.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return a2 + *(void *)(*(void *)(a5 - 8) + 72) * a3;
}

uint64_t _SliceBuffer.firstElementAddress.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return a2 + *(void *)(*(void *)(a5 - 8) + 72) * a3;
}

uint64_t protocol witness for _ArrayProtocol.capacity.getter in conformance ArraySlice<A>(uint64_t a1, uint64_t a2)
{
  return protocol witness for _ArrayProtocol.capacity.getter in conformance ArraySlice<A>(a1, a2, (uint64_t (*)(void, void, void, void, void))ArraySlice.capacity.getter);
}

id protocol witness for _ArrayProtocol._owner.getter in conformance ArraySlice<A>()
{
  uint64_t v0 = (void *)EnumeratedSequence._base.modify();

  return swift_unknownObjectRetain(v0);
}

uint64_t protocol witness for _ArrayProtocol._baseAddressIfContiguous.getter in conformance ArraySlice<A>(uint64_t a1)
{
  return *(void *)(v1 + 8) + *(void *)(*(void *)(*(void *)(a1 + 16) - 8) + 72) * *(void *)(v1 + 16);
}

uint64_t protocol witness for _ArrayProtocol.init(_:) in conformance ArraySlice<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v7 = *(void *)(a2 + 16);
  uint64_t v8 = (unint64_t *)type metadata accessor for _SliceBuffer(0, v7, a3, a4);
  uint64_t WitnessTable = swift_getWitnessTable(protocol conformance descriptor for _SliceBuffer<A>, v8, v9);
  uint64_t result = ArraySlice.init<A>(_:)(a1, v7, (uint64_t)v8, WitnessTable);
  *a5 = result;
  a5[1] = v12;
  a5[2] = 0;
  a5[3] = v13;
  return result;
}

uint64_t ArraySlice.init<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 56))(a3, a4);
}

id protocol witness for _ArrayProtocol._buffer.getter in conformance ArraySlice<A>@<X0>(long long *a1@<X8>)
{
  long long v2 = *v1;
  long long v3 = v1[1];
  *a1 = *v1;
  a1[1] = v3;
  return swift_unknownObjectRetain((id)v2);
}

unint64_t _SliceBuffer.endIndex.getter(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  return a4 >> 1;
}

Swift::Int __swiftcall ArraySlice.index(after:)(Swift::Int after)
{
  BOOL v1 = __OFADD__(after, 1);
  Swift::Int result = after + 1;
  if (v1) {
    __break(1u);
  }
  return result;
}

Swift::Void __swiftcall ArraySlice.formIndex(after:)(Swift::Int *after)
{
  if (__OFADD__(*after, 1)) {
    __break(1u);
  }
  else {
    ++*after;
  }
}

Swift::Int __swiftcall ArraySlice.index(before:)(Swift::Int before)
{
  BOOL v1 = __OFSUB__(before, 1);
  Swift::Int result = before - 1;
  if (v1) {
    __break(1u);
  }
  return result;
}

Swift::Void __swiftcall ArraySlice.formIndex(before:)(Swift::Int *before)
{
  if (__OFSUB__(*before, 1)) {
    __break(1u);
  }
  else {
    --*before;
  }
}

Swift::Int __swiftcall ArraySlice.index(_:offsetBy:)(Swift::Int _, Swift::Int offsetBy)
{
  BOOL v2 = __OFADD__(_, offsetBy);
  Swift::Int result = _ + offsetBy;
  if (v2) {
    __break(1u);
  }
  return result;
}

Swift::Int_optional __swiftcall ArraySlice.index(_:offsetBy:limitedBy:)(Swift::Int _, Swift::Int offsetBy, Swift::Int limitedBy)
{
  Swift::Int v3 = specialized Array.index(_:offsetBy:limitedBy:)(_, offsetBy, limitedBy);
  Swift::Bool v5 = v4 & 1;
  result.value = v3;
  result.is_nil = v5;
  return result;
}

Swift::Int __swiftcall ArraySlice.distance(from:to:)(Swift::Int from, Swift::Int to)
{
  BOOL v2 = __OFSUB__(to, from);
  Swift::Int result = to - from;
  if (v2) {
    __break(1u);
  }
  return result;
}

uint64_t ArraySlice.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, unint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  if (a1 < a3 || (uint64_t)(a4 >> 1) <= a1) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Index out of bounds", 19, 2, "Swift/SliceBuffer.swift", 23, 2, 0x132uLL, 0);
  }
  uint64_t v6 = *(void *)(a5 - 8);
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
  uint64_t v8 = a2 + *(void *)(v6 + 72) * a1;

  return v7(a6, v8, a5);
}

uint64_t key path getter for ArraySlice.subscript(_:) : <A>ArraySlice<A>A@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return ArraySlice.subscript.getter(*a2, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(uint64_t *)((char *)a2 + a3 - 8), a4);
}

uint64_t key path setter for ArraySlice.subscript(_:) : <A>ArraySlice<A>A(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v5 = *(uint64_t *)((char *)a3 + a4 - 8);
  uint64_t v6 = *a3;
  type metadata accessor for ArraySlice(0, v5, (uint64_t)a3, a4);
  uint64_t v7 = ArraySlice.subscript.modify((uint64_t)v10, v6);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 24))(v8, a1, v5);
  return ((uint64_t (*)(unsigned char *, void))v7)(v10, 0);
}

uint64_t (*ArraySlice.subscript.modify(uint64_t a1, uint64_t a2))()
{
  ArraySlice._makeMutableAndUnique()();
  if (*(void *)(v2 + 16) > a2 || *(void *)(v2 + 24) >> 1 <= a2) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Index out of bounds", 19, 2, "Swift/SliceBuffer.swift", 23, 2, 0x132uLL, 0);
  }
  return EnumeratedSequence._base.modify;
}

uint64_t ArraySlice.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  ArraySlice._makeMutableAndUnique()();
  if (v3[2] > a2 || v3[3] >> 1 <= a2) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Index out of bounds", 19, 2, "Swift/SliceBuffer.swift", 23, 2, 0x132uLL, 0);
  }
  uint64_t v8 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t))(v8 + 40);
  uint64_t v10 = v3[1] + *(void *)(v8 + 72) * a2;

  return v9(v10, a1);
}

void ArraySlice.subscript.getter(Swift::Int a1, Swift::Int a2, void *a3, uint64_t a4)
{
  ArraySlice._checkIndex(_:)(a1);
  ArraySlice._checkIndex(_:)(a2);
  id v8 = swift_unknownObjectRetain(a3);

  _SliceBuffer.init(owner:subscriptBaseAddress:indices:hasNativeBuffer:)((uint64_t)v8, a4, a1, a2);
}

void key path getter for ArraySlice.subscript(_:) : <A>ArraySlice<A>A(uint64_t a1@<X0>, Swift::Int *a2@<X1>, void *a3@<X8>)
{
  ArraySlice.subscript.getter(*a2, a2[1], *(void **)a1, *(void *)(a1 + 8));
  *a3 = v4;
  a3[1] = v5;
  a3[2] = v6;
  a3[3] = v7;
}

void key path setter for ArraySlice.subscript(_:) : <A>ArraySlice<A>A(uint64_t a1, uint64_t a2, Swift::Int *a3, uint64_t a4)
{
  Swift::Int v4 = *a3;
  Swift::Int v5 = a3[1];
  uint64_t v6 = *(void **)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v8 = *(void *)(a1 + 16);
  unint64_t v9 = *(void *)(a1 + 24);
  uint64_t v10 = (unint64_t *)type metadata accessor for ArraySlice(0, *(Swift::Int *)((char *)a3 + a4 - 8), (uint64_t)a3, a4);
  id v11 = swift_unknownObjectRetain(v6);
  ArraySlice.subscript.setter(v11, v7, v8, v9, v4, v5, v10);
}

void ArraySlice.subscript.setter(void *a1, uint64_t a2, uint64_t a3, unint64_t a4, Swift::Int a5, Swift::Int a6, unint64_t *a7)
{
  uint64_t v12 = *(void **)v7;
  uint64_t v13 = *(void *)(v7 + 8);
  unint64_t v14 = a7[2];
  ArraySlice._checkIndex(_:)(a5);
  ArraySlice._checkIndex(_:)(a6);
  id v15 = swift_unknownObjectRetain(v12);
  _SliceBuffer.init(owner:subscriptBaseAddress:indices:hasNativeBuffer:)((uint64_t)v15, v13, a5, a6);
  uint64_t v17 = v16;
  uint64_t v19 = v18;
  swift_unknownObjectRelease(v20);
  if (v17 + *(void *)(*(void *)(v14 - 8) + 72) * v19 != a2 + *(void *)(*(void *)(v14 - 8) + 72) * a3) {
    goto LABEL_2;
  }
  if ((uint64_t)(a4 >> 1) < a3) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
  }
  if (a5 == a3 && a4 >> 1 == a6)
  {
    swift_unknownObjectRelease(a1);
  }
  else
  {
LABEL_2:
    v26[0] = a1;
    v26[1] = a2;
    v26[2] = a3;
    v26[3] = a4;
    uint64_t WitnessTable = swift_getWitnessTable(protocol conformance descriptor for ArraySlice<A>, a7, v21);
    ArraySlice.replaceSubrange<A>(_:with:)(a5, a6, (uint64_t)v26, (uint64_t)a7, (uint64_t)a7, WitnessTable);
  }
}

id _SliceBuffer.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  Swift::Int v3 = (void *)specialized _SliceBuffer.subscript.getter(a1, a2, a3);
  return swift_unknownObjectRetain(v3);
}

uint64_t ArraySlice.replaceSubrange<A>(_:with:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7 = v6[2];
  if (v7 > result) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "ArraySlice replace: subrange start is before the startIndex", 59, 2, "Swift/ArraySlice.swift", 22, 2, 0x53FuLL, 0);
  }
  uint64_t v8 = v6;
  unint64_t v10 = v6[3];
  unint64_t v11 = v10 >> 1;
  if ((uint64_t)(v10 >> 1) < a2) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "ArraySlice replace: subrange extends past the end", 49, 2, "Swift/ArraySlice.swift", 22, 2, 0x542uLL, 0);
  }
  unint64_t v45 = v11 - v7;
  if (__OFSUB__(v11, v7))
  {
    __break(1u);
    goto LABEL_24;
  }
  uint64_t v12 = (void *)result;
  uint64_t v13 = a2 - result;
  if (__OFSUB__(a2, result))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  Swift::Int result = (*(uint64_t (**)(uint64_t, uint64_t))(a6 + 112))(a5, a6);
  BOOL v19 = __OFSUB__(result, v13);
  uint64_t v20 = result - v13;
  if (v19)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  uint64_t v21 = (char *)result;
  if ((v10 & 1) == 0
    || (uint64_t v22 = (void *)*v8,
        int isUniquelyReferenced_nonNull = swift_isUniquelyReferenced_nonNull(*v8),
        *uint64_t v8 = (unint64_t)v22,
        !isUniquelyReferenced_nonNull))
  {
LABEL_15:
    uint64_t v38 = (unint64_t *)type metadata accessor for _SliceBuffer(0, *(void *)(a4 + 16), v17, v18);
    uint64_t WitnessTable = swift_getWitnessTable(protocol conformance descriptor for _SliceBuffer<A>, v38, v39);
    specialized _ArrayBufferProtocol._arrayOutOfPlaceReplace<A>(_:with:count:)(v12, a2, a3, (uint64_t)v21, (uint64_t)v38, a5, WitnessTable, a6);
    uint64_t v41 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a5 - 8) + 8);
    return v41(a3, a5);
  }
  uint64_t v43 = v20;
  unint64_t v44 = v8[1];
  uint64_t v24 = type metadata accessor for __ContiguousArrayStorageBase();
  id v25 = swift_unknownObjectRetain(v22);
  uint64_t v26 = (__objc2_class **)swift_dynamicCastClass((uint64_t)v25, v24);
  if (!v26)
  {
    swift_unknownObjectRelease(v22);
    uint64_t v26 = &_swiftEmptyArrayStorage;
  }
  uint64_t v27 = *(void *)(a4 + 16);
  uint64_t v28 = *(void *)(v27 - 8);
  uint64_t v29 = (char *)v26 + ((*(unsigned __int8 *)(v28 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v28 + 80));
  uint64_t v30 = v26[2];
  uint64_t v31 = *(void *)(v28 + 72);
  unint64_t v32 = v44 + v31 * v7;
  unint64_t v33 = v45;
  if ((char *)(v32 + v31 * v45) == &v29[v31 * (void)v30])
  {
    unint64_t v35 = (unint64_t)v26[3];
    Swift::Int result = swift_release((uint64_t)v26);
    unint64_t v36 = v35 >> 1;
    unint64_t v33 = v45;
    unint64_t v37 = v36 - (void)v30;
    BOOL v19 = __OFADD__(v45, v37);
    uint64_t v34 = v45 + v37;
    if (v19)
    {
LABEL_27:
      __break(1u);
      return result;
    }
  }
  else
  {
    Swift::Int result = swift_release((uint64_t)v26);
    uint64_t v34 = v45;
  }
  if (__OFADD__(v33, v43))
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  if (v34 < (uint64_t)(v33 + v43)) {
    goto LABEL_15;
  }
  uint64_t v42 = type metadata accessor for _SliceBuffer(0, v27, v17, v18);

  return _SliceBuffer.replaceSubrange<A>(_:with:elementsOf:)((uint64_t)v12, a2, v21, a3, (uint64_t)v42, a5, a6);
}

void (*ArraySlice.subscript.modify(void *a1, Swift::Int a2, Swift::Int a3, uint64_t a4))(void ***a1, char a2)
{
  unint64_t v9 = malloc(0x40uLL);
  *a1 = v9;
  v9[6] = a4;
  v9[7] = v4;
  v9[4] = a2;
  v9[5] = a3;
  unint64_t v10 = *(void **)v4;
  uint64_t v11 = *(void *)(v4 + 8);
  ArraySlice._checkIndex(_:)(a2);
  ArraySlice._checkIndex(_:)(a3);
  id v12 = swift_unknownObjectRetain(v10);
  _SliceBuffer.init(owner:subscriptBaseAddress:indices:hasNativeBuffer:)((uint64_t)v12, v11, a2, a3);
  *unint64_t v9 = v13;
  v9[1] = v14;
  void v9[2] = v15;
  v9[3] = v16;
  return ArraySlice.subscript.modify;
}

void ArraySlice.subscript.modify(void ***a1, char a2)
{
  uint64_t v2 = *a1;
  Swift::Int v3 = **a1;
  uint64_t v4 = (uint64_t)v2[1];
  uint64_t v5 = (uint64_t)v2[2];
  unint64_t v6 = (unint64_t)v2[3];
  uint64_t v7 = (unint64_t *)v2[6];
  Swift::Int v9 = (Swift::Int)v2[4];
  Swift::Int v8 = (Swift::Int)v2[5];
  if (a2)
  {
    id v10 = swift_unknownObjectRetain(v3);
    ArraySlice.subscript.setter(v10, v4, v5, v6, v9, v8, v7);
    swift_unknownObjectRelease(*v2);
  }
  else
  {
    ArraySlice.subscript.setter(v3, (uint64_t)v2[1], (uint64_t)v2[2], (unint64_t)v2[3], (Swift::Int)v2[4], (Swift::Int)v2[5], (unint64_t *)v2[6]);
  }

  free(v2);
}

uint64_t ArraySlice.count.getter(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t result = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3)) {
    __break(1u);
  }
  return result;
}

uint64_t protocol witness for MutableCollection.subscript.setter in conformance ArraySlice<A>(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  ArraySlice._makeMutableAndUnique()();
  if (v6 < v3[2] || v6 >= v3[3] >> 1) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Index out of bounds", 19, 2, "Swift/SliceBuffer.swift", 23, 2, 0x132uLL, 0);
  }
  (*(void (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a3 + 16) - 8) + 40))(v3[1] + *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 72) * v6, a1);

  return EnumeratedSequence._base.modify();
}

uint64_t (*protocol witness for MutableCollection.subscript.modify in conformance ArraySlice<A>(void *a1, uint64_t *a2))()
{
  uint64_t v4 = malloc(0x28uLL);
  *a1 = v4;
  v4[4] = ArraySlice.subscript.modify((uint64_t)v4, *a2);
  return protocol witness for MutableCollection.subscript.modify in conformance [A];
}

void protocol witness for MutableCollection.subscript.setter in conformance ArraySlice<A>(uint64_t a1, Swift::Int *a2, unint64_t *a3)
{
}

void (*protocol witness for MutableCollection.subscript.modify in conformance ArraySlice<A>(void *a1, Swift::Int *a2, uint64_t a3))(void ***a1, char a2)
{
  uint64_t v7 = malloc(0x40uLL);
  *a1 = v7;
  v7[4] = v3;
  v7[5] = a3;
  Swift::Int v8 = *a2;
  Swift::Int v9 = a2[1];
  v7[6] = v8;
  v7[7] = v9;
  id v10 = *(void **)v3;
  uint64_t v11 = *(void *)(v3 + 8);
  ArraySlice._checkIndex(_:)(v8);
  ArraySlice._checkIndex(_:)(v9);
  id v12 = swift_unknownObjectRetain(v10);
  _SliceBuffer.init(owner:subscriptBaseAddress:indices:hasNativeBuffer:)((uint64_t)v12, v11, v8, v9);
  *uint64_t v7 = v13;
  v7[1] = v14;
  v7[2] = v15;
  v7[3] = v16;
  return protocol witness for MutableCollection.subscript.modify in conformance ArraySlice<A>;
}

void protocol witness for MutableCollection.subscript.modify in conformance ArraySlice<A>(void ***a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = **a1;
  uint64_t v4 = (uint64_t)v2[1];
  uint64_t v5 = (uint64_t)v2[2];
  unint64_t v6 = (unint64_t)v2[3];
  Swift::Int v8 = (Swift::Int)v2[6];
  Swift::Int v7 = (Swift::Int)v2[7];
  Swift::Int v9 = (unint64_t *)v2[5];
  if (a2)
  {
    id v10 = swift_unknownObjectRetain(v3);
    ArraySlice.subscript.setter(v10, v4, v5, v6, v8, v7, v9);
    swift_unknownObjectRelease(*v2);
  }
  else
  {
    ArraySlice.subscript.setter(v3, (uint64_t)v2[1], (uint64_t)v2[2], (unint64_t)v2[3], (Swift::Int)v2[6], (Swift::Int)v2[7], (unint64_t *)v2[5]);
  }

  free(v2);
}

void *protocol witness for MutableCollection.partition(by:) in conformance ArraySlice<A>@<X0>(uint64_t (*a1)(char *)@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t WitnessTable = swift_getWitnessTable(protocol conformance descriptor for ArraySlice<A>, a3, (uint64_t)a3);
  return MutableCollection<>.partition(by:)(a1, a2, (uint64_t)a3, WitnessTable, a4, a5);
}

void *protocol witness for MutableCollection._withUnsafeMutableBufferPointerIfSupported<A>(_:) in conformance ArraySlice<A>@<X0>(void (*a1)(void *)@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  return ArraySlice.withContiguousMutableStorageIfAvailable<A>(_:)(a1, a3, a2, a4);
}

void *ArraySlice._withUnsafeMutableBufferPointerIfSupported<A>(_:)@<X0>(void (*a1)(void *)@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  return ArraySlice._withUnsafeMutableBufferPointerIfSupported<A>(_:)(a1, a2, a3, a4);
}

{
  void *v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v12;
  uint64_t v13;
  void v15[2];

  Swift::Int v7 = v4[2];
  Swift::Int v8 = v4[3] >> 1;
  Swift::Int v9 = v8 - v7;
  if (__OFSUB__(v8, v7))
  {
    __break(1u);
LABEL_8:
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeMutableBufferPointer with negative count", 46, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x47uLL, 0);
  }
  id v12 = *(void *)(a2 + 16);
  ArraySlice._makeMutableAndUnique()();
  if (v9 < 0) {
    goto LABEL_8;
  }
  uint64_t v13 = v4[1] + *(void *)(*(void *)(v12 - 8) + 72) * v4[2];
  v15[0] = v13;
  v15[1] = v9;
  a1(v15);
  if (v5) {
    return $defer #1 <A><A1>() in ArraySlice.withUnsafeMutableBufferPointer<A>(_:)(v15, v13, v9);
  }
  $defer #1 <A><A1>() in ArraySlice.withUnsafeMutableBufferPointer<A>(_:)(v15, v13, v9);
  return (void *)(*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(a3 - 8) + 56))(a4, 0, 1, a3);
}

void *ArraySlice.withContiguousMutableStorageIfAvailable<A>(_:)@<X0>(void (*a1)(void *)@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  return ArraySlice._withUnsafeMutableBufferPointerIfSupported<A>(_:)(a1, a2, a3, a4);
}

void *protocol witness for BidirectionalCollection.formIndex(before:) in conformance ArraySlice<A>(void *result)
{
  if (__OFSUB__(*result, 1)) {
    __break(1u);
  }
  else {
    --*result;
  }
  return result;
}

uint64_t protocol witness for RandomAccessCollection.index(_:offsetBy:limitedBy:) in conformance ArraySlice<A>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result = specialized Array.index(_:offsetBy:limitedBy:)(*a1, a2, *a3);
  *(void *)a4 = result;
  *(unsigned char *)(a4 + 8) = v6 & 1;
  return result;
}

void protocol witness for Collection.startIndex.getter in conformance ArraySlice<A>(void *a1@<X8>)
{
  *a1 = *(void *)(v1 + 16);
}

unint64_t protocol witness for Collection.endIndex.getter in conformance ArraySlice<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t *a4@<X8>)
{
  unint64_t result = ArraySlice.endIndex.getter(a1, a2, a3, *(void *)(v4 + 24));
  *a4 = result;
  return result;
}

uint64_t (*protocol witness for Collection.subscript.read in conformance ArraySlice<A>(void *a1, uint64_t *a2, uint64_t a3))()
{
  Swift::Int v7 = malloc(0x28uLL);
  *a1 = v7;
  v7[4] = ArraySlice.subscript.read(v7, *a2, *(void *)v3, *(void *)(v3 + 8), *(void *)(v3 + 16), *(void *)(v3 + 24), *(void *)(a3 + 16));
  return protocol witness for Collection.subscript.read in conformance _ArrayBuffer<A>;
}

uint64_t (*ArraySlice.subscript.read(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7))()
{
  uint64_t v10 = *(void *)(a7 - 8);
  uint64_t v11 = v10;
  *a1 = a7;
  a1[1] = v10;
  a1[2] = malloc(*(void *)(v10 + 64));
  if (a2 < a5 || (uint64_t)(a6 >> 1) <= a2) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Index out of bounds", 19, 2, "Swift/SliceBuffer.swift", 23, 2, 0x132uLL, 0);
  }
  (*(void (**)(void))(v11 + 16))();
  return _ArrayBuffer.subscript.read;
}

void protocol witness for Collection.subscript.getter in conformance ArraySlice<A>(Swift::Int *a1@<X0>, void *a2@<X8>)
{
  ArraySlice.subscript.getter(*a1, a1[1], *(void **)v2, *(void *)(v2 + 8));
  *a2 = v4;
  a2[1] = v5;
  a2[2] = v6;
  a2[3] = v7;
}

uint64_t protocol witness for Collection.indices.getter in conformance ArraySlice<A>@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X2>, char *a3@<X8>)
{
  uint64_t WitnessTable = swift_getWitnessTable(protocol conformance descriptor for ArraySlice<A>, a1, a2);

  return RandomAccessCollection<>.indices.getter((uint64_t)a1, WitnessTable, (uint64_t)&protocol witness table for Int, a3);
}

uint64_t protocol witness for Collection.count.getter in conformance ArraySlice<A>(uint64_t a1, uint64_t a2)
{
  return ArraySlice.count.getter(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24));
}

void *protocol witness for RandomAccessCollection.index(_:offsetBy:) in conformance ArraySlice<A>@<X0>(void *result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  if (__OFADD__(*result, a2)) {
    __break(1u);
  }
  else {
    *a3 = *result + a2;
  }
  return result;
}

void *protocol witness for Collection.formIndex(after:) in conformance ArraySlice<A>(void *result)
{
  if (__OFADD__(*result, 1)) {
    __break(1u);
  }
  else {
    ++*result;
  }
  return result;
}

__n128 protocol witness for Sequence.makeIterator() in conformance ArraySlice<A>@<Q0>(uint64_t a1@<X8>)
{
  __n128 result = *(__n128 *)v1;
  long long v3 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)v1;
  *(_OWORD *)(a1 + 16) = v3;
  *(void *)(a1 + 32) = v3;
  return result;
}

uint64_t protocol witness for Sequence.underestimatedCount.getter in conformance ArraySlice<A>(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable(protocol conformance descriptor for ArraySlice<A>, a1, a3);

  return Collection.underestimatedCount.getter((uint64_t)a1, WitnessTable);
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance ArraySlice<A>(uint64_t a1, uint64_t a2)
{
  return protocol witness for _ArrayProtocol.capacity.getter in conformance ArraySlice<A>(a1, a2, (uint64_t (*)(void, void, void, void, void))ArraySlice._copyToContiguousArray());
}

__objc2_class **ArraySlice._copyToContiguousArray()(void *a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  if ((a4 & 1) == 0) {
    goto LABEL_2;
  }
  uint64_t v14 = type metadata accessor for __ContiguousArrayStorageBase();
  uint64_t v15 = swift_unknownObjectRetain_n((uint64_t)a1, 2);
  uint64_t v16 = (__objc2_class **)swift_dynamicCastClass(v15, v14);
  if (!v16)
  {
    swift_unknownObjectRelease(a1);
    uint64_t v16 = &_swiftEmptyArrayStorage;
  }
  uint64_t v17 = v16[2];
  uint64_t v18 = (void *)swift_release((uint64_t)v16);
  if (__OFSUB__(a4 >> 1, a3))
  {
    __break(1u);
    goto LABEL_11;
  }
  uint64_t v18 = a1;
  if (v17 != (__objc2_class *)((a4 >> 1) - a3))
  {
LABEL_11:
    swift_unknownObjectRelease(v18);
LABEL_2:
    v20[0] = a1;
    v20[1] = a2;
    void v20[2] = a3;
    v20[3] = a4;
    uint64_t v10 = (unint64_t *)type metadata accessor for ArraySlice(0, a5, a3, a4);
    uint64_t WitnessTable = swift_getWitnessTable(protocol conformance descriptor for ArraySlice<A>, v10, v11);
    uint64_t v13 = (uint64_t)_copyCollectionToContiguousArray<A>(_:)((uint64_t)v20, (uint64_t)v10, WitnessTable);
    swift_unknownObjectRelease(a1);
    return (__objc2_class **)v13;
  }
  uint64_t v13 = swift_dynamicCastClass((uint64_t)a1, v14);
  swift_unknownObjectRelease(a1);
  if (!v13)
  {
    swift_unknownObjectRelease(a1);
    return &_swiftEmptyArrayStorage;
  }
  return (__objc2_class **)v13;
}

__n128 protocol witness for Sequence._copyContents(initializing:) in conformance ArraySlice<A>(uint64_t a1, char *a2, uint64_t a3, uint64_t a4)
{
  ArraySlice._copyContents(initializing:)(a2, a3, *(void **)v4, *(void *)(v4 + 8), *(void *)(v4 + 16), *(void *)(v4 + 24), *(unint64_t **)(a4 + 16), v8);
  uint64_t v6 = v9;
  __n128 result = (__n128)v8[1];
  *(_OWORD *)a1 = v8[0];
  *(__n128 *)(a1 + 16) = result;
  *(void *)(a1 + 32) = v6;
  return result;
}

void ArraySlice._copyContents(initializing:)(char *a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, unint64_t a6@<X5>, unint64_t *a7@<X6>, void *a8@<X8>)
{
  unint64_t v13 = a6 >> 1;
  if (a6 >> 1 != a5)
  {
    if (!a1) {
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Attempt to copy contents into nil buffer pointer", 48, 2, "Swift/ArraySlice.swift", 22, 2, 0x500uLL, 0);
    }
    uint64_t v14 = v13 - a5;
    if (__OFSUB__(v13, a5))
    {
      __break(1u);
    }
    else if (v14 <= a2)
    {
      uint64_t v17 = (char *)(a4 + *(void *)(*(a7 - 1) + 72) * a5);
      swift_unknownObjectRetain(a3);
      UnsafeMutablePointer.initialize(from:count:)(v17, v13 - a5, a1, a7);
      swift_unknownObjectRelease(a3);
      goto LABEL_7;
    }
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Insufficient space allocated to copy array contents", 51, 2, "Swift/ArraySlice.swift", 22, 2, 0x501uLL, 0);
  }
  uint64_t v14 = 0;
  unint64_t v13 = a5;
LABEL_7:
  *a8 = a3;
  a8[1] = a4;
  a8[2] = a5;
  a8[3] = a6;
  a8[4] = v13;
  a8[5] = v14;
}

uint64_t protocol witness for Sequence.withContiguousStorageIfAvailable<A>(_:) in conformance ArraySlice<A>@<X0>(uint64_t (*a1)(uint64_t)@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  return ArraySlice.withContiguousStorageIfAvailable<A>(_:)(a1, *(void *)(v4 + 8), *(void *)(v4 + 16), *(void *)(v4 + 24), *(void *)(a3 + 16), a2, a4);
}

uint64_t ArraySlice.withContiguousStorageIfAvailable<A>(_:)@<X0>(uint64_t (*a1)(uint64_t)@<X0>, uint64_t a2@<X3>, uint64_t a3@<X4>, unint64_t a4@<X5>, uint64_t a5@<X6>, uint64_t a6@<X7>, uint64_t a7@<X8>)
{
  if (__OFSUB__(a4 >> 1, a3))
  {
    __break(1u);
LABEL_7:
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeBufferPointer with negative count", 39, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x53FuLL, 0);
  }
  if ((((a4 >> 1) - a3) & 0x8000000000000000) != 0) {
    goto LABEL_7;
  }
  uint64_t result = a1(a2 + *(void *)(*(void *)(a5 - 8) + 72) * a3);
  if (!v7) {
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(a6 - 8) + 56))(a7, 0, 1, a6);
  }
  return result;
}

uint64_t ArraySlice.init(arrayLiteral:)(unint64_t a1, uint64_t *a2)
{
  if (_swift_isClassOrObjCExistentialType((uint64_t)a2, a2))
  {
    if ((a1 & 0x8000000000000000) != 0 || (a1 & 0x4000000000000000) != 0)
    {
      unint64_t v12 = a1;
      uint64_t v9 = (unint64_t *)type metadata accessor for Array(0, (uint64_t)a2, v4, v5);
      uint64_t WitnessTable = swift_getWitnessTable(protocol conformance descriptor for [A], v9, v10);
      uint64_t v7 = _copyCollectionToContiguousArray<A>(_:)((uint64_t)&v12, (uint64_t)v9, WitnessTable);
      swift_bridgeObjectRelease(a1);
    }
    else
    {
      swift_bridgeObjectRetain(a1);
      BOOL isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType((uint64_t)a2, a2);
      swift_bridgeObjectRelease(a1);
      if (isClassOrObjCExistentialType) {
        return a1 & 0xFFFFFFFFFFFFFF8;
      }
      else {
        return a1;
      }
    }
  }
  else if (_swift_isClassOrObjCExistentialType((uint64_t)a2, a2))
  {
    return a1 & 0xFFFFFFFFFFFFFF8;
  }
  else
  {
    return a1;
  }
  return (uint64_t)v7;
}

uint64_t protocol witness for ExpressibleByArrayLiteral.init(arrayLiteral:) in conformance ArraySlice<A>@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result = ArraySlice.init(arrayLiteral:)(a1, *(uint64_t **)(a2 + 16));
  *a3 = result;
  a3[1] = v5;
  a3[2] = 0;
  a3[3] = v6;
  return result;
}

__objc2_class **ArraySlice.init()()
{
  return &_swiftEmptyArrayStorage;
}

__objc2_class **_SliceBuffer.init()()
{
  return &_swiftEmptyArrayStorage;
}

__objc2_class **ArraySlice.init(repeating:count:)(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  if (a2 < 0) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't construct ArraySlice with count < 0", 41, 2, "Swift/ArraySlice.swift", 22, 2, 0x2BEuLL, 0);
  }
  uint64_t v4 = a2;
  if (!a2)
  {
    (*(void (**)(uint64_t, uint64_t *))(*(a3 - 1) + 8))(a1, a3);
    return &_swiftEmptyArrayStorage;
  }
  uint64_t v6 = static ArraySlice._allocateBufferUninitialized(minimumCapacity:)(a2, a3);
  unint64_t v10 = v9 >> 1;
  uint64_t v11 = (v9 >> 1) - v8;
  if (__OFSUB__(v9 >> 1, v8))
  {
    __break(1u);
    goto LABEL_18;
  }
  uint64_t v12 = v4 - v11;
  if (__OFSUB__(v4, v11))
  {
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  unint64_t v13 = (void *)v6;
  uint64_t v14 = v7;
  uint64_t v15 = v8;
  if (!v12) {
    goto LABEL_11;
  }
  uint64_t v16 = type metadata accessor for __ContiguousArrayStorageBase();
  id v17 = swift_unknownObjectRetain(v13);
  uint64_t v18 = (__objc2_class **)swift_dynamicCastClass((uint64_t)v17, v16);
  if (!v18)
  {
    swift_unknownObjectRelease(v13);
    uint64_t v18 = &_swiftEmptyArrayStorage;
  }
  BOOL v19 = v18[2];
  BOOL v20 = __OFADD__(v19, v12);
  uint64_t v21 = (__objc2_class *)((char *)v19 + v12);
  if (v20) {
    goto LABEL_19;
  }
  v18[2] = v21;
  swift_release((uint64_t)v18);
  if (__OFADD__(v10, v12))
  {
LABEL_20:
    __break(1u);
LABEL_21:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, 2, 0xD7BuLL, 0);
  }
  if (((v10 + v12) & 0x8000000000000000) != 0) {
    goto LABEL_21;
  }
LABEL_11:
  uint64_t v22 = *(a3 - 1);
  uint64_t v23 = v22;
  uint64_t v24 = *(void *)(v22 + 72);
  uint64_t v25 = v14 + v24 * v15;
  uint64_t v26 = *(void (**)(uint64_t, uint64_t, uint64_t *))(v22 + 16);
  do
  {
    v26(v25, a1, a3);
    v25 += v24;
    --v4;
  }
  while (v4);
  (*(void (**)(uint64_t, uint64_t *))(v23 + 8))(a1, a3);
  return (__objc2_class **)v13;
}

uint64_t static ArraySlice._allocateBufferUninitialized(minimumCapacity:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(0, a1, a2);

  return _SliceBuffer.init(_buffer:shiftedToStartIndex:)((uint64_t)v2, 0);
}

__objc2_class **_SliceBuffer.count.setter(__objc2_class **result)
{
  uint64_t v2 = *(void *)(v1 + 16);
  uint64_t v3 = *(void *)(v1 + 24) >> 1;
  BOOL v4 = __OFSUB__(v3, v2);
  uint64_t v5 = v3 - v2;
  if (v4)
  {
    __break(1u);
    goto LABEL_13;
  }
  uint64_t v6 = (char *)result - v5;
  if (__OFSUB__(result, v5))
  {
LABEL_13:
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  if (!v6) {
    return result;
  }
  uint64_t v7 = *(void **)v1;
  uint64_t v8 = type metadata accessor for __ContiguousArrayStorageBase();
  id v9 = swift_unknownObjectRetain(v7);
  uint64_t result = (__objc2_class **)swift_dynamicCastClass((uint64_t)v9, v8);
  if (!result)
  {
    swift_unknownObjectRelease(v7);
    uint64_t result = &_swiftEmptyArrayStorage;
  }
  unint64_t v10 = result[2];
  BOOL v4 = __OFADD__(v10, v6);
  uint64_t v11 = (__objc2_class *)&v6[(void)v10];
  if (v4) {
    goto LABEL_14;
  }
  result[2] = v11;
  swift_release((uint64_t)result);
  uint64_t result = (__objc2_class **)&v6[v3];
  if (__OFADD__(v3, v6))
  {
LABEL_15:
    __break(1u);
    return result;
  }

  return (__objc2_class **)_SliceBuffer.endIndex.setter((uint64_t)result);
}

__objc2_class **ArraySlice.init(_uninitializedCount:)(uint64_t a1, uint64_t *a2)
{
  if (a1 < 0) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't construct ArraySlice with count < 0", 41, 2, "Swift/ArraySlice.swift", 22, 2, 0x2DBuLL, 0);
  }
  if (!a1) {
    return &_swiftEmptyArrayStorage;
  }
  uint64_t v3 = static ArraySlice._allocateBufferUninitialized(minimumCapacity:)(a1, a2);
  unint64_t v5 = v4 >> 1;
  uint64_t v7 = (v4 >> 1) - v6;
  if (__OFSUB__(v4 >> 1, v6))
  {
    __break(1u);
    goto LABEL_16;
  }
  uint64_t v8 = a1 - v7;
  if (__OFSUB__(a1, v7))
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  id v9 = (void *)v3;
  if (v8)
  {
    uint64_t v10 = type metadata accessor for __ContiguousArrayStorageBase();
    id v11 = swift_unknownObjectRetain(v9);
    uint64_t v12 = (__objc2_class **)swift_dynamicCastClass((uint64_t)v11, v10);
    if (!v12)
    {
      swift_unknownObjectRelease(v9);
      uint64_t v12 = &_swiftEmptyArrayStorage;
    }
    unint64_t v13 = v12[2];
    BOOL v14 = __OFADD__(v13, v8);
    uint64_t v15 = (__objc2_class *)((char *)v13 + v8);
    if (!v14)
    {
      v12[2] = v15;
      swift_release((uint64_t)v12);
      if (!__OFADD__(v5, v8))
      {
        if (((v5 + v8) & 0x8000000000000000) == 0) {
          return (__objc2_class **)v9;
        }
LABEL_19:
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, 2, 0xD7BuLL, 0);
      }
LABEL_18:
      __break(1u);
      goto LABEL_19;
    }
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  return (__objc2_class **)v9;
}

__objc2_class **static ArraySlice._allocateUninitialized(_:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, __objc2_class ***a3@<X8>)
{
  uint64_t result = ArraySlice.init(_uninitializedCount:)(a1, a2);
  uint64_t v6 = *(void *)(*(a2 - 1) + 72);
  *a3 = result;
  a3[1] = v7;
  a3[2] = v8;
  a3[3] = v9;
  a3[4] = (__objc2_class **)((char *)v7 + v6 * (void)v8);
  return result;
}

Swift::Void __swiftcall ArraySlice.reserveCapacity(_:)(Swift::Int a1)
{
  uint64_t v3 = v1;
  unint64_t v5 = v2[3];
  uint64_t v6 = (void *)*v2;
  int64_t v7 = v5 >> 1;
  if ((v5 & 1) == 0) {
    goto LABEL_11;
  }
  int isUniquelyReferenced_nonNull = swift_isUniquelyReferenced_nonNull(*v2);
  *uint64_t v2 = (unint64_t)v6;
  if (!isUniquelyReferenced_nonNull) {
    goto LABEL_11;
  }
  unint64_t v9 = v2[2];
  Swift::Int v10 = v7 - v9;
  if (__OFSUB__(v7, v9))
  {
    __break(1u);
    goto LABEL_39;
  }
  unint64_t v11 = v2[1];
  uint64_t v12 = type metadata accessor for __ContiguousArrayStorageBase();
  id v13 = swift_unknownObjectRetain(v6);
  BOOL v14 = (__objc2_class **)swift_dynamicCastClass((uint64_t)v13, v12);
  if (!v14)
  {
    swift_unknownObjectRelease(v6);
    BOOL v14 = &_swiftEmptyArrayStorage;
  }
  uint64_t v15 = *(void *)(*(void *)(v3 + 16) - 8);
  uint64_t v16 = v14[2];
  if ((__objc2_class **)(v11 + *(void *)(v15 + 72) * v9 + *(void *)(v15 + 72) * v10) == (__objc2_class **)((char *)v14 + ((*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80)) + *(void *)(v15 + 72) * (void)v16))
  {
    unint64_t v17 = (unint64_t)v14[3];
    swift_release((uint64_t)v14);
    unint64_t v18 = (v17 >> 1) - (void)v16;
    BOOL v19 = __OFADD__(v10, v18);
    v10 += v18;
    if (!v19) {
      goto LABEL_9;
    }
LABEL_39:
    __break(1u);
    return;
  }
  swift_release((uint64_t)v14);
LABEL_9:
  if (v10 >= a1) {
    return;
  }
  uint64_t v6 = (void *)*v2;
LABEL_11:
  int64_t v20 = v2[2];
  unint64_t v21 = v2[3] >> 1;
  Swift::Int v22 = v21 - v20;
  if (__OFSUB__(v21, v20))
  {
    __break(1u);
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  unint64_t v23 = v2[1];
  uint64_t v24 = *(uint64_t **)(v3 + 16);
  if (v22 > a1) {
    a1 = v21 - v20;
  }
  if (a1)
  {
    uint64_t v25 = getContiguousArrayStorageType<A>(for:)((uint64_t)v24, v24);
    uint64_t v26 = *(void *)(*(v24 - 1) + 72);
    uint64_t v27 = *(unsigned __int8 *)(*(v24 - 1) + 80);
    uint64_t v28 = (__objc2_class **)swift_allocObject((unint64_t *)v25, ((v27 + *((unsigned int *)v25 + 12)) & ~v27) + v26 * a1, v27 | *((unsigned __int16 *)v25 + 26));
    size_t v29 = _swift_stdlib_malloc_size(v28);
    if (!v26) {
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Division by zero", 16, 2, "Swift/IntegerTypes.swift", 24, 2, 0x3829uLL, 0);
    }
    int64_t v30 = v29 - ((v27 + 32) & ~v27);
    if (v30 == 0x8000000000000000 && v26 == -1) {
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Division results in an overflow", 31, 2, "Swift/IntegerTypes.swift", 24, 2, 0x3830uLL, 0);
    }
    uint64_t v32 = v30 / v26;
    swift_retain((atomic_ullong *)v28);
    BOOL isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType((uint64_t)v24, v24);
    v28[2] = (__objc2_class *)v22;
    v28[3] = (__objc2_class *)(isClassOrObjCExistentialType | (unint64_t)(2 * v32));
    swift_release((uint64_t)v28);
    if (v7 < v20) {
LABEL_30:
    }
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
  }
  else
  {
    uint64_t v28 = &_swiftEmptyArrayStorage;
    if (v7 < v20) {
      goto LABEL_30;
    }
  }
  uint64_t v34 = *(v24 - 1);
  BOOL v19 = __OFSUB__(v7, v20);
  uint64_t v35 = v7 - v20;
  if (v19) {
    goto LABEL_32;
  }
  unint64_t v36 = (char *)v28 + ((*(unsigned __int8 *)(v34 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v34 + 80));
  uint64_t v37 = *(void *)(v34 + 72);
  swift_retain((atomic_ullong *)v28);
  UnsafeMutablePointer.initialize(from:count:)((char *)(v23 + v37 * v20), v35, v36, (unint64_t *)v24);
  if (__OFSUB__(0, v20))
  {
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  uint64_t v38 = v28[2];
  swift_release((uint64_t)v28);
  BOOL v19 = __OFADD__(v20, v38);
  int64_t v39 = (int64_t)v38 + v20;
  if (v19)
  {
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v39 < v20) {
    goto LABEL_30;
  }
  if (v39 < 0) {
LABEL_35:
  }
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, 2, 0xD7BuLL, 0);
  swift_unknownObjectRelease(v6);
  *uint64_t v2 = (unint64_t)v28;
  v2[1] = (unint64_t)&v36[v37 * -v20];
  v2[2] = v20;
  v2[3] = (2 * v39) | 1;
}

char *_SliceBuffer._copyContents(subRange:initializing:)(uint64_t a1, uint64_t a2, char *a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, unint64_t *a8)
{
  swift_unknownObjectRelease(a4);
  uint64_t v13 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
LABEL_9:
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 0x442uLL, 0);
  }
  uint64_t v14 = *(void *)(*(a8 - 1) + 72);
  if (v13 < 0) {
    goto LABEL_9;
  }
  uint64_t v15 = (char *)(a5 + v14 * a1);
  uint64_t v16 = v14 * v13;
  unint64_t v17 = &a3[v16];
  unint64_t v18 = &v15[v16];
  if (v15 < v17 && v18 > a3) {
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 0x444uLL, 0);
  }
  swift_arrayInitWithCopy(a3, v15, v13, a8);
  return v17;
}

Swift::Void __swiftcall ArraySlice._copyToNewBuffer(oldCount:)(Swift::Int oldCount)
{
  uint64_t v6 = oldCount + 1;
  long long v7 = v4[1];
  v15[0] = *v4;
  v15[1] = v7;
  uint64_t v8 = (unint64_t *)type metadata accessor for _SliceBuffer(0, *(void *)(v1 + 16), v2, v3);
  uint64_t WitnessTable = swift_getWitnessTable(protocol conformance descriptor for _SliceBuffer<A>, v8, v9);
  unint64_t v11 = _ArrayBufferProtocol._forceCreateUniqueMutableBuffer(countForNewBuffer:minNewCapacity:)(oldCount, v6, (uint64_t)v8, WitnessTable);
  *(void *)&v15[0] = v11;
  uint64_t v12 = default argument 3 of _ArrayBufferProtocol._arrayOutOfPlaceUpdate(_:_:_:_:)((uint64_t)v8, WitnessTable);
  uint64_t v14 = v13;
  _ArrayBufferProtocol._arrayOutOfPlaceUpdate(_:_:_:_:)((atomic_ullong **)v15, oldCount, 0, (void (*)(char *, uint64_t))v12, v13, (uint64_t)v8, WitnessTable);
  swift_release(v14);
  swift_release((uint64_t)v11);
}

Swift::Void __swiftcall ArraySlice._makeUniqueAndReserveCapacityIfNotUnique()()
{
  unint64_t v1 = v0[3];
  if ((v1 & 1) == 0
    || (unint64_t v2 = *v0,
        char isUniquelyReferenced_nonNull = swift_isUniquelyReferenced_nonNull(*v0),
        *uint64_t v0 = v2,
        (isUniquelyReferenced_nonNull & 1) == 0))
  {
    unint64_t v4 = v0[2];
    if (__OFSUB__(v1 >> 1, v4))
    {
      __break(1u);
    }
    else
    {
      ArraySlice._copyToNewBuffer(oldCount:)((v1 >> 1) - v4);
    }
  }
}

Swift::Void __swiftcall ArraySlice._reserveCapacityAssumingUniqueBuffer(oldCount:)(Swift::Int oldCount)
{
  uint64_t v5 = *(void *)(v2 + 16);
  unint64_t v4 = *(void *)(v2 + 24);
  Swift::Int v6 = (v4 >> 1) - v5;
  if (__OFSUB__(v4 >> 1, v5))
  {
    __break(1u);
LABEL_11:
    ArraySlice._copyToNewBuffer(oldCount:)(v3);
    return;
  }
  uint64_t v7 = v1;
  Swift::Int v3 = oldCount;
  if (v4)
  {
    uint64_t v8 = *(void **)v2;
    uint64_t v9 = *(void *)(v2 + 8);
    uint64_t v10 = type metadata accessor for __ContiguousArrayStorageBase();
    id v11 = swift_unknownObjectRetain(v8);
    uint64_t v12 = (__objc2_class **)swift_dynamicCastClass((uint64_t)v11, v10);
    if (!v12)
    {
      swift_unknownObjectRelease(v8);
      uint64_t v12 = &_swiftEmptyArrayStorage;
    }
    uint64_t v13 = *(void *)(*(void *)(v7 + 16) - 8);
    uint64_t v14 = v12[2];
    if ((__objc2_class **)(v9 + *(void *)(v13 + 72) * v5 + *(void *)(v13 + 72) * v6) == (__objc2_class **)((char *)v12 + ((*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80)) + *(void *)(v13 + 72) * (void)v14))
    {
      unint64_t v15 = (unint64_t)v12[3];
      swift_release((uint64_t)v12);
      unint64_t v16 = (v15 >> 1) - (void)v14;
      BOOL v17 = __OFADD__(v6, v16);
      v6 += v16;
      if (v17)
      {
        __break(1u);
        return;
      }
    }
    else
    {
      swift_release((uint64_t)v12);
    }
  }
  if (v6 < v3 + 1) {
    goto LABEL_11;
  }
}

Swift::Bool __swiftcall _SliceBuffer.isMutableAndUniquelyReferenced()()
{
  if (*(unsigned char *)(v0 + 24)) {
    return swift_isUniquelyReferenced_nonNull(*(void *)v0);
  }
  else {
    return 0;
  }
}

__objc2_class **ArraySlice._appendElementAssumeUniqueAndCapacity(_:newElement:)(__objc2_class **result, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(v3 + 16);
  uint64_t v5 = *(void *)(v3 + 24) >> 1;
  uint64_t v6 = v5 - v4;
  if (__OFSUB__(v5, v4))
  {
    __break(1u);
    goto LABEL_14;
  }
  uint64_t v7 = result;
  uint64_t v8 = (char *)result - v6 + 1;
  if (__OFSUB__((char *)result + 1, v6))
  {
LABEL_14:
    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  if (!v8)
  {
    uint64_t v17 = *(void *)(a3 + 16);
    goto LABEL_10;
  }
  id v11 = *(void **)v3;
  uint64_t v12 = type metadata accessor for __ContiguousArrayStorageBase();
  id v13 = swift_unknownObjectRetain(v11);
  uint64_t result = (__objc2_class **)swift_dynamicCastClass((uint64_t)v13, v12);
  if (!result)
  {
    swift_unknownObjectRelease(v11);
    uint64_t result = &_swiftEmptyArrayStorage;
  }
  uint64_t v14 = result[2];
  BOOL v15 = __OFADD__(v14, v8);
  unint64_t v16 = (__objc2_class *)&v8[(void)v14];
  if (v15) {
    goto LABEL_15;
  }
  result[2] = v16;
  swift_release((uint64_t)result);
  uint64_t result = (__objc2_class **)&v8[v5];
  if (__OFADD__(v5, v8))
  {
LABEL_16:
    __break(1u);
    return result;
  }
  uint64_t v17 = *(void *)(a3 + 16);
  _SliceBuffer.endIndex.setter((uint64_t)result);
LABEL_10:
  uint64_t v18 = *(void *)(v17 - 8);
  BOOL v19 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v18 + 32);
  uint64_t v20 = *(void *)(v3 + 8) + *(void *)(v18 + 72) * v4 + *(void *)(v18 + 72) * (void)v7;

  return (__objc2_class **)v19(v20, a2, v17);
}

void ArraySlice.append(_:)(uint64_t a1, uint64_t a2)
{
  ArraySlice._makeUniqueAndReserveCapacityIfNotUnique()();
  uint64_t v5 = *(void *)(v2 + 16);
  uint64_t v6 = *(void *)(v2 + 24) >> 1;
  uint64_t v7 = (__objc2_class **)(v6 - v5);
  if (__OFSUB__(v6, v5))
  {
    __break(1u);
  }
  else
  {
    ArraySlice._reserveCapacityAssumingUniqueBuffer(oldCount:)(v6 - v5);
    ArraySlice._appendElementAssumeUniqueAndCapacity(_:newElement:)(v7, a1, a2);
  }
}

uint64_t ArraySlice.append<A>(contentsOf:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, (int **)a4, a3, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Iterator);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(a4, a3, (uint64_t)AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Sequence, associated conformance descriptor for Sequence.Sequence.Iterator: IteratorProtocol);
  id v13 = (unint64_t *)type metadata accessor for IteratorSequence(0, (uint64_t)AssociatedTypeWitness, AssociatedConformanceWitness, v12);
  uint64_t v14 = MEMORY[0x1F4188790](v13);
  uint64_t v54 = (char *)&v53 - v15;
  uint64_t v16 = *(void *)(a3 - 8);
  uint64_t v17 = MEMORY[0x1F4188790](v14);
  BOOL v19 = (char *)&v53 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  long long v56 = AssociatedTypeWitness;
  uint64_t v55 = *((void *)AssociatedTypeWitness - 1);
  MEMORY[0x1F4188790](v17);
  uint64_t v59 = (char *)&v53 - v20;
  uint64_t v60 = a1;
  Swift::Int v21 = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 40))(a3, a4);
  ArraySlice.reserveCapacityForAppend(newElementsCount:)(v21);
  uint64_t v22 = *(void *)(v4 + 16);
  uint64_t v23 = *(void *)(v5 + 24) >> 1;
  uint64_t v24 = v23 - v22;
  if (__OFSUB__(v23, v22))
  {
    __break(1u);
    goto LABEL_14;
  }
  long long v53 = v13;
  uint64_t v25 = *(void *)(a2 + 16);
  uint64_t v26 = *(void *)(v5 + 8);
  uint64_t v58 = v5;
  uint64_t v27 = *(void *)(*(void *)(v25 - 8) + 72);
  uint64_t v57 = v25;
  Swift::Int v28 = ArraySlice._getCapacity()();
  Swift::Int v29 = v28 - v24;
  if (__OFSUB__(v28, v24))
  {
LABEL_14:
    __break(1u);
LABEL_15:
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeMutableBufferPointer with negative count", 46, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x47uLL, 0);
  }
  if (v29 < 0) {
    goto LABEL_15;
  }
  uint64_t v30 = v26 + v27 * v22 + v27 * v24;
  uint64_t v31 = v60;
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v19, v60, a3);
  uint64_t v32 = v59;
  uint64_t v33 = (*(uint64_t (**)(char *, uint64_t, Swift::Int, uint64_t, uint64_t))(a4 + 64))(v59, v30, v29, a3, a4);
  if (v33 < v21) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "newElements.underestimatedCount was an overestimate", 51, 2, "Swift/ArraySlice.swift", 22, 2, 0x3C4uLL, 0);
  }
  uint64_t v34 = v33;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v16 + 8))(v31, a3);
  uint64_t v38 = v57;
  if (v34 < 1) {
    goto LABEL_9;
  }
  uint64_t v39 = *(void *)(v58 + 16);
  uint64_t v40 = *(void *)(v58 + 24) >> 1;
  BOOL v41 = __OFSUB__(v40, v39);
  uint64_t v42 = v40 - v39;
  if (v41)
  {
    __break(1u);
    goto LABEL_18;
  }
  uint64_t v43 = (__objc2_class **)(v42 + v34);
  if (__OFADD__(v42, v34))
  {
LABEL_18:
    __break(1u);
    return result;
  }
  type metadata accessor for _SliceBuffer(0, v57, v36, v37);
  _SliceBuffer.count.setter(v43);
LABEL_9:
  if (v34 != v29) {
    return (*(uint64_t (**)(char *, const char *))(v55 + 8))(v32, v56);
  }
  uint64_t v44 = (uint64_t)v54;
  (*(void (**)(char *, char *, const char *))(v55 + 32))(v54, v32, v56);
  Swift::Int v47 = (unint64_t *)type metadata accessor for _SliceBuffer(0, v38, v45, v46);
  uint64_t WitnessTable = swift_getWitnessTable(protocol conformance descriptor for _SliceBuffer<A>, v47, v48);
  uint64_t v50 = v53;
  uint64_t v52 = swift_getWitnessTable(protocol conformance descriptor for IteratorSequence<A>, v53, v51);
  return _ArrayBufferProtocol._arrayAppendSequence<A>(_:)(v44, (uint64_t)v47, (uint64_t)v50, WitnessTable, v52);
}

Swift::Void __swiftcall ArraySlice.reserveCapacityForAppend(newElementsCount:)(Swift::Int newElementsCount)
{
  uint64_t v2 = *(void *)(v1 + 16);
  uint64_t v3 = *(void *)(v1 + 24) >> 1;
  uint64_t v4 = v3 - v2;
  if (__OFSUB__(v3, v2))
  {
    __break(1u);
    goto LABEL_11;
  }
  Swift::Int v6 = ArraySlice._getCapacity()();
  Swift::Int v7 = v4 + newElementsCount;
  if (__OFADD__(v4, newElementsCount))
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  if (v6 < v7)
  {
    if (v6 + 0x4000000000000000 >= 0)
    {
      uint64_t v8 = 2 * v6;
      if (v8 > v7) {
        Swift::Int v7 = v8;
      }
      goto LABEL_7;
    }
LABEL_12:
    __break(1u);
    return;
  }
LABEL_7:

  ArraySlice.reserveCapacity(_:)(v7);
}

uint64_t ArraySlice._customRemoveLast()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = v2[2];
  unint64_t v10 = v2[3];
  uint64_t v11 = v10 >> 1;
  if (__OFSUB__(v10 >> 1, v9))
  {
    __break(1u);
LABEL_5:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't removeLast from an empty ArraySlice", 41, 2, "Swift/ArraySlice.swift", 22, 2, 0x3E6uLL, 0);
  }
  if ((uint64_t)((v10 >> 1) - v9) <= 0) {
    goto LABEL_5;
  }
  uint64_t v12 = v2[1];
  specialized ArraySlice._checkSubscript(_:wasNativeTypeChecked:)(v11 - 1, *v2, v12, v9, v10);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v12 + *(void *)(v6 + 72) * (v11 - 1), v5);
  uint64_t v15 = (unint64_t *)type metadata accessor for EmptyCollection(0, v5, v13, v14);
  uint64_t WitnessTable = swift_getWitnessTable(protocol conformance descriptor for EmptyCollection<A>, v15, v16);
  ArraySlice.replaceSubrange<A>(_:with:)(v11 - 1, v11, v18, a1, (uint64_t)v15, WitnessTable);
  (*(void (**)(uint64_t, char *, uint64_t))(v6 + 32))(a2, v8, v5);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v6 + 56))(a2, 0, 1, v5);
}

uint64_t static FixedWidthInteger.&- infix(_:_:)@<X0>(uint64_t a1@<X3>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t))(a1 + 88))(a2);
}

uint64_t ArraySlice.remove(at:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v7 = v3[1];
  uint64_t v8 = *(void *)(a2 + 16);
  specialized ArraySlice._checkSubscript(_:wasNativeTypeChecked:)(a1, *v3, v7, v3[2], v3[3]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 16))(a3, v7 + *(void *)(*(void *)(v8 - 8) + 72) * a1, v8);
  if (__OFADD__(a1, 1))
  {
    __break(1u);
LABEL_7:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
  }
  if (a1 + 1 < a1) {
    goto LABEL_7;
  }
  uint64_t v11 = (unint64_t *)type metadata accessor for EmptyCollection(0, v8, v9, v10);
  uint64_t WitnessTable = swift_getWitnessTable(protocol conformance descriptor for EmptyCollection<A>, v11, v12);

  return ArraySlice.replaceSubrange<A>(_:with:)(a1, a1 + 1, v13, a2, (uint64_t)v11, WitnessTable);
}

uint64_t ArraySlice.insert(_:at:)(uint64_t a1, Swift::Int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(a3 + 16);
  uint64_t v8 = (unint64_t *)type metadata accessor for CollectionOfOne(0, v7, a3, a4);
  MEMORY[0x1F4188790](v8);
  uint64_t v10 = (char *)&v14 - v9;
  ArraySlice._checkIndex(_:)(a2);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32))(v10, a1, v7);
  uint64_t WitnessTable = swift_getWitnessTable(protocol conformance descriptor for CollectionOfOne<A>, v8, v11);
  return ArraySlice.replaceSubrange<A>(_:with:)(a2, a2, (uint64_t)v10, a3, (uint64_t)v8, WitnessTable);
}

Swift::Void __swiftcall ArraySlice.removeAll(keepingCapacity:)(Swift::Bool keepingCapacity)
{
  uint64_t v3 = (void **)v2;
  uint64_t v4 = v1;
  if (keepingCapacity)
  {
    if ((v2[3] & 1) != 0 && swift_isUniquelyReferenced_nonNull(*v2))
    {
      uint64_t WitnessTable = swift_getWitnessTable(protocol conformance descriptor for ArraySlice<A>, (unint64_t *)v4, v5);
      RandomAccessCollection<>.indices.getter(v4, WitnessTable, (uint64_t)&protocol witness table for Int, (char *)v26);
      uint64_t v7 = v26[0];
      uint64_t v8 = v26[1];
      uint64_t v11 = (unint64_t *)type metadata accessor for EmptyCollection(0, *(void *)(v4 + 16), v9, v10);
      uint64_t v13 = swift_getWitnessTable(protocol conformance descriptor for EmptyCollection<A>, v11, v12);
      ArraySlice.replaceSubrange<A>(_:with:)(v7, v8, v14, v4, (uint64_t)v11, v13);
      return;
    }
    uint64_t v17 = v2[2];
    uint64_t v18 = *(uint64_t **)(v4 + 16);
    Swift::Int v19 = ArraySlice._getCapacity()();
    uint64_t v20 = _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(0, v19, v18);
    uint64_t v21 = _SliceBuffer.init(_buffer:shiftedToStartIndex:)((uint64_t)v20, v17);
    uint64_t v22 = *v3;
    *uint64_t v3 = (void *)v21;
    v3[1] = v23;
    v3[2] = v24;
    v3[3] = v25;
    uint64_t v16 = v22;
  }
  else
  {
    uint64_t v15 = (char *)&_swiftEmptyArrayStorage
        + ((*(unsigned __int8 *)(*(void *)(*(void *)(v1 + 16) - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(v1 + 16) - 8) + 80));
    uint64_t v16 = (void *)*v2;
    *uint64_t v2 = (unint64_t)&_swiftEmptyArrayStorage;
    v2[1] = (unint64_t)v15;
    *((_OWORD *)v2 + 1) = xmmword_18162ACB0;
  }

  swift_unknownObjectRelease(v16);
}

void *ArraySlice.withUnsafeMutableBufferPointer<A>(_:)(void (*a1)(void *), uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3[2];
  uint64_t v5 = v3[3] >> 1;
  uint64_t v6 = v5 - v4;
  if (__OFSUB__(v5, v4))
  {
    __break(1u);
LABEL_5:
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeMutableBufferPointer with negative count", 46, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x47uLL, 0);
  }
  uint64_t v8 = *(void *)(a3 + 16);
  ArraySlice._makeMutableAndUnique()();
  if (v6 < 0) {
    goto LABEL_5;
  }
  uint64_t v9 = v3[1] + *(void *)(*(void *)(v8 - 8) + 72) * v3[2];
  v11[0] = v9;
  v11[1] = v6;
  a1(v11);
  return $defer #1 <A><A1>() in ArraySlice.withUnsafeMutableBufferPointer<A>(_:)(v11, v9, v6);
}

uint64_t ArraySlice.withUnsafeBufferPointer<A>(_:)(uint64_t (*a1)(uint64_t), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7)
{
  if (__OFSUB__(a6 >> 1, a5))
  {
    __break(1u);
LABEL_5:
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeBufferPointer with negative count", 39, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x53FuLL, 0);
  }
  if ((((a6 >> 1) - a5) & 0x8000000000000000) != 0) {
    goto LABEL_5;
  }
  return a1(a4 + *(void *)(*(void *)(a7 - 8) + 72) * a5);
}

__objc2_class **_SliceBuffer.requestNativeBuffer()(void *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if ((a4 & 1) == 0) {
    return 0;
  }
  uint64_t v8 = type metadata accessor for __ContiguousArrayStorageBase();
  uint64_t v9 = swift_unknownObjectRetain_n((uint64_t)a1, 2);
  uint64_t v10 = (__objc2_class **)swift_dynamicCastClass(v9, v8);
  if (!v10)
  {
    swift_unknownObjectRelease(a1);
    uint64_t v10 = &_swiftEmptyArrayStorage;
  }
  uint64_t v11 = v10[2];
  swift_release((uint64_t)v10);
  if (__OFSUB__(a4 >> 1, a3))
  {
    __break(1u);
    goto LABEL_11;
  }
  if (v11 != (__objc2_class *)((a4 >> 1) - a3))
  {
LABEL_11:
    swift_unknownObjectRelease(a1);
    return 0;
  }
  uint64_t result = (__objc2_class **)swift_dynamicCastClass((uint64_t)a1, v8);
  if (!result)
  {
    swift_unknownObjectRelease(a1);
    return &_swiftEmptyArrayStorage;
  }
  return result;
}

double protocol witness for RangeReplaceableCollection.init() in conformance ArraySlice<A>@<D0>(uint64_t a1@<X8>)
{
  ArraySlice.init()();
  *(void *)a1 = &_swiftEmptyArrayStorage;
  *(void *)(a1 + 8) = v2;
  double result = 0.0;
  *(_OWORD *)(a1 + 16) = xmmword_18162ACB0;
  return result;
}

uint64_t protocol witness for RangeReplaceableCollection.replaceSubrange<A>(_:with:) in conformance ArraySlice<A>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return ArraySlice.replaceSubrange<A>(_:with:)(*a1, a1[1], a2, a5, a3, a4);
}

__objc2_class **protocol witness for RangeReplaceableCollection.init(repeating:count:) in conformance ArraySlice<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, __objc2_class ***a4@<X8>)
{
  double result = ArraySlice.init(repeating:count:)(a1, a2, *(uint64_t **)(a3 + 16));
  *a4 = result;
  a4[1] = v6;
  a4[2] = v7;
  a4[3] = v8;
  return result;
}

uint64_t protocol witness for RangeReplaceableCollection.init<A>(_:) in conformance ArraySlice<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t result = ArraySlice.init<A>(_:)(a1, *(void *)(a4 + 16), a2, a3);
  *a5 = result;
  a5[1] = v7;
  a5[2] = 0;
  a5[3] = v8;
  return result;
}

uint64_t protocol witness for RangeReplaceableCollection.append<A>(contentsOf:) in conformance ArraySlice<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return ArraySlice.append<A>(contentsOf:)(a1, a4, a2, a3);
}

uint64_t protocol witness for RangeReplaceableCollection.insert(_:at:) in conformance ArraySlice<A>(uint64_t a1, Swift::Int *a2, uint64_t a3, uint64_t a4)
{
  return ArraySlice.insert(_:at:)(a1, *a2, a3, a4);
}

uint64_t protocol witness for RangeReplaceableCollection.remove(at:) in conformance ArraySlice<A>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return ArraySlice.remove(at:)(*a1, a2, a3);
}

uint64_t protocol witness for RangeReplaceableCollection._customRemoveLast(_:) in conformance ArraySlice<A>(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable(protocol conformance descriptor for ArraySlice<A>, a2, a3);
  RangeReplaceableCollection<>._customRemoveLast(_:)(a1, (uint64_t)a2, WitnessTable);
  return 1;
}

uint64_t specialized RangeReplaceableCollection<>._customRemoveLast(_:)(uint64_t a1)
{
  if (__OFSUB__(0, a1))
  {
    __break(1u);
    goto LABEL_6;
  }
  Swift::UInt64 rawBits = v1->_rawBits;
  unint64_t v2 = v1[1]._rawBits;
  unint64_t v4 = v1[2]._rawBits;
  unint64_t v5 = v1[3]._rawBits;
  Swift::String::Index_optional v13 = String.UnicodeScalarView.index(_:offsetBy:limitedBy:)((Swift::String::Index)v2, -a1, (Swift::String::Index)v1->_rawBits);
  if (v13.is_nil) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't remove more items from a collection than it contains", 58, 2, "Swift/RangeReplaceableCollection.swift", 38, 2, 0x33AuLL, 0);
  }
  Swift::UInt64 v6 = v13.value._rawBits;
  if (v13.value._rawBits >> 14 < rawBits >> 14) {
LABEL_6:
  }
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
  swift_bridgeObjectRetain(v5);
  v7._Swift::UInt64 rawBits = rawBits;
  v8._Swift::UInt64 rawBits = v6;
  Swift::UInt64 v9 = _StringGuts.validateScalarRange(_:in:)(v7, v8, rawBits, v2, v4, v5);
  Swift::UInt64 v11 = v10;
  swift_bridgeObjectRelease(v5);
  v1->_Swift::UInt64 rawBits = v9;
  v1[1]._Swift::UInt64 rawBits = v11;
  v1[2]._Swift::UInt64 rawBits = v4;
  v1[3]._Swift::UInt64 rawBits = v5;
  return 1;
}

{
  Swift::String::Index *v1;
  unint64_t v2;
  Swift::UInt64 rawBits;
  uint64_t v4;
  unint64_t v5;
  Swift::UInt64 v6;
  Swift::String::Index v7;
  Swift::String::Index v8;
  Swift::UInt64 v9;
  Swift::UInt64 v10;
  Swift::UInt64 v11;
  Swift::UInt64 v12;
  Swift::UInt64 v13;
  unint64_t v14;
  Swift::UInt64 v15;
  Swift::String::Index_optional v17;

  if (__OFSUB__(0, a1))
  {
    __break(1u);
    goto LABEL_6;
  }
  Swift::UInt64 rawBits = v1->_rawBits;
  unint64_t v2 = v1[1]._rawBits;
  unint64_t v5 = v1[2]._rawBits;
  unint64_t v4 = v1[3]._rawBits;
  uint64_t v17 = Substring.index(_:offsetBy:limitedBy:)((Swift::String::Index)v2, -a1, (Swift::String::Index)v1->_rawBits);
  if (v17.is_nil) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't remove more items from a collection than it contains", 58, 2, "Swift/RangeReplaceableCollection.swift", 38, 2, 0x33AuLL, 0);
  }
  Swift::UInt64 v6 = v17.value._rawBits;
  if (v17.value._rawBits >> 14 < rawBits >> 14) {
LABEL_6:
  }
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
  v7._Swift::UInt64 rawBits = rawBits;
  v8._Swift::UInt64 rawBits = v6;
  Swift::UInt64 v9 = specialized Substring.subscript.getter(v7, v8, rawBits, v2, v5, v4);
  Swift::UInt64 v11 = v10;
  Swift::String::Index_optional v13 = v12;
  uint64_t v15 = v14;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRelease(v4);
  v1->_Swift::UInt64 rawBits = v9;
  v1[1]._Swift::UInt64 rawBits = v11;
  v1[2]._Swift::UInt64 rawBits = v13;
  v1[3]._Swift::UInt64 rawBits = v15;
  return 1;
}

uint64_t RangeReplaceableCollection<>._customRemoveLast(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v90 = a3;
  uint64_t v6 = *(void *)(a3 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, (int **)v6, a2, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0, (uint64_t)AssociatedTypeWitness, (uint64_t)AssociatedTypeWitness, "lower upper ", 0);
  uint64_t v8 = MEMORY[0x1F4188790](TupleTypeMetadata2);
  unint64_t v82 = (char *)&v71 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8);
  Swift::Int v76 = (char *)&v71 - v10;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v6, a2, (uint64_t)AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Collection, associated conformance descriptor for Collection.Collection.Index: Comparable);
  uint64_t v12 = type metadata accessor for Range(0, (uint64_t)AssociatedTypeWitness, AssociatedConformanceWitness, v11);
  uint64_t v80 = (uint64_t)*(v12 - 1);
  unint64_t v81 = v12;
  uint64_t v13 = MEMORY[0x1F4188790](v12);
  uint64_t v77 = (char *)&v71 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = MEMORY[0x1F4188790](v13);
  uint64_t v78 = (char *)&v71 - v16;
  uint64_t v91 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](v15);
  unint64_t v89 = (char *)&v71 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = type metadata accessor for Optional(0, (uint64_t)AssociatedTypeWitness, v18, v19);
  uint64_t v73 = (uint64_t)*(v20 - 1);
  Swift::String::Index v74 = v20;
  uint64_t v21 = MEMORY[0x1F4188790](v20);
  uint64_t v23 = (char *)&v71 - v22;
  uint64_t v24 = *((void *)AssociatedTypeWitness - 1);
  uint64_t v25 = MEMORY[0x1F4188790](v21);
  char v85 = (char *)&v71 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = MEMORY[0x1F4188790](v25);
  unint64_t v84 = (char *)&v71 - v28;
  uint64_t v29 = MEMORY[0x1F4188790](v27);
  unint64_t v83 = (char *)&v71 - v30;
  uint64_t v31 = MEMORY[0x1F4188790](v29);
  uint64_t v33 = (char *)&v71 - v32;
  uint64_t v34 = MEMORY[0x1F4188790](v31);
  uint64_t v36 = (char *)&v71 - v35;
  MEMORY[0x1F4188790](v34);
  uint64_t v38 = (char *)&v71 - v37;
  uint64_t v39 = *(void (**)(uint64_t, uint64_t))(v6 + 72);
  uint64_t v92 = v3;
  uint64_t v93 = v6;
  v39(a2, v6);
  BOOL v40 = __OFSUB__(0, a1);
  uint64_t v41 = -a1;
  if (v40)
  {
    __break(1u);
    goto LABEL_6;
  }
  Swift::String::Index v75 = *(void (**)(uint64_t))(v93 + 64);
  v75(a2);
  uint64_t v42 = *(void (**)(char *, uint64_t, char *, uint64_t))(v90 + 56);
  uint64_t v88 = a2;
  v42(v36, v41, v33, a2);
  uint64_t v43 = *(void (**)(char *, const char *))(v24 + 8);
  v43(v33, AssociatedTypeWitness);
  uint64_t v90 = v24 + 8;
  unint64_t v87 = v43;
  v43(v36, AssociatedTypeWitness);
  if ((*(unsigned int (**)(char *, uint64_t, const char *))(v24 + 48))(v23, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, Class *))(v73 + 8))(v23, v74);
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't remove more items from a collection than it contains", 58, 2, "Swift/RangeReplaceableCollection.swift", 38, 2, 0x33AuLL, 0);
  }
  uint64_t v73 = *(void *)(v24 + 32);
  ((void (*)(char *, char *, const char *))v73)(v38, v23, AssociatedTypeWitness);
  uint64_t v45 = v91;
  uint64_t v44 = v92;
  uint64_t v46 = v88;
  (*(void (**)(char *, uint64_t, uint64_t))(v91 + 16))(v89, v92, v88);
  Swift::Int v47 = v83;
  ((void (*)(uint64_t, uint64_t))v75)(v46, v93);
  unint64_t v49 = *(Class **)(v45 + 8);
  uint64_t v48 = v45 + 8;
  uint64_t v50 = v46;
  uint64_t v51 = v47;
  Swift::String::Index v74 = v49;
  ((void (*)(uint64_t, uint64_t))v49)(v44, v50);
  uint64_t v52 = *(void (**)(char *, char *, const char *))(v24 + 16);
  long long v53 = v84;
  v52(v84, v51, AssociatedTypeWitness);
  uint64_t v54 = v85;
  Swift::String::Index v72 = v38;
  Swift::String::Index v75 = (void (*)(uint64_t))(v24 + 16);
  v52(v85, v38, AssociatedTypeWitness);
  if (((*(uint64_t (**)(char *, char *, const char *))(AssociatedConformanceWitness + 24))(v53, v54, AssociatedTypeWitness) & 1) == 0)LABEL_6:_assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0); {
  uint64_t v55 = v87;
  }
  v87(v54, AssociatedTypeWitness);
  v55(v53, AssociatedTypeWitness);
  uint64_t v91 = v48;
  long long v56 = TupleTypeMetadata2;
  uint64_t v57 = v76;
  uint64_t v58 = &v76[*((int *)TupleTypeMetadata2 + 12)];
  uint64_t v59 = (void (*)(char *, char *, const char *))v73;
  ((void (*)(char *, char *, const char *))v73)(v76, v51, AssociatedTypeWitness);
  v59(v58, v72, AssociatedTypeWitness);
  uint64_t v60 = v82;
  id v61 = &v82[*((int *)v56 + 12)];
  v52(v82, v57, AssociatedTypeWitness);
  v52(v61, v58, AssociatedTypeWitness);
  uint64_t v62 = v77;
  v59(v77, v60, AssociatedTypeWitness);
  uint64_t v63 = v87;
  v87(v61, AssociatedTypeWitness);
  uint64_t v64 = &v60[*((int *)v56 + 12)];
  v59(v60, v57, AssociatedTypeWitness);
  v59(v64, v58, AssociatedTypeWitness);
  unint64_t v65 = v81;
  v59(&v62[*((int *)v81 + 9)], v64, AssociatedTypeWitness);
  v63(v60, AssociatedTypeWitness);
  uint64_t v66 = v80;
  uint64_t v67 = v78;
  (*(void (**)(char *, char *, Class *))(v80 + 32))(v78, v62, v65);
  uint64_t v68 = v88;
  uint64_t v69 = v89;
  (*(void (**)(char *, uint64_t))(v93 + 88))(v67, v88);
  (*(void (**)(char *, Class *))(v66 + 8))(v67, v65);
  ((void (*)(char *, uint64_t))v74)(v69, v68);
  return 1;
}

unint64_t specialized RangeReplaceableCollection<>.removeFirst()()
{
  unint64_t v1 = *v0;
  unint64_t v2 = v0[1];
  if (!((v2 ^ *v0) >> 14)) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't remove items from an empty collection", 43, 2, "Swift/RangeReplaceableCollection.swift", 38, 2, 0x2A5uLL, 0);
  }
  unint64_t v3 = v0[2];
  unint64_t v4 = v0[3];
  v5._Swift::UInt64 rawBits = *v0;
  unint64_t v6 = specialized Collection.first.getter(v5, v0[1], v3, v4);
  if ((v6 & 0x100000000) != 0) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/RangeReplaceableCollection.swift", 38, 2, 0x2A6uLL, 0);
  }
  unint64_t v7 = v6;
  swift_bridgeObjectRetain(v4);
  v8._Swift::UInt64 rawBits = _StringGuts.validateScalarIndex(_:)((Swift::String::Index)v1)._rawBits;
  if ((v4 & 0x1000000000000000) != 0)
  {
    Swift::UInt64 rawBits = String.UnicodeScalarView._foreignIndex(after:)(v8)._rawBits;
  }
  else
  {
    Swift::UInt64 v9 = v8._rawBits >> 16;
    if ((v4 & 0x2000000000000000) != 0)
    {
      v22[0] = v3;
      v22[1] = v4 & 0xFFFFFFFFFFFFFFLL;
      int v11 = *((unsigned __int8 *)v22 + v9);
    }
    else
    {
      if ((v3 & 0x1000000000000000) != 0) {
        uint64_t v10 = (unsigned __int8 *)((v4 & 0xFFFFFFFFFFFFFFFLL) + 32);
      }
      else {
        uint64_t v10 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v3, v4);
      }
      int v11 = v10[v9];
    }
    int v12 = (char)v11;
    unsigned int v13 = __clz(v11 ^ 0xFF) - 24;
    if (v12 >= 0) {
      LOBYTE(v13) = 1;
    }
    Swift::UInt64 rawBits = ((v9 + v13) << 16) | 5;
  }
  Swift::UInt64 v15 = v0[1];
  if (v15 >> 14 < rawBits >> 14) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
  }
  swift_bridgeObjectRelease(v0[3]);
  swift_bridgeObjectRetain(v4);
  v16._Swift::UInt64 rawBits = rawBits;
  v17._Swift::UInt64 rawBits = v15;
  Swift::UInt64 v18 = _StringGuts.validateScalarRange(_:in:)(v16, v17, v1, v2, v3, v4);
  unint64_t v20 = v19;
  swift_bridgeObjectRelease(v4);
  *uint64_t v0 = v18;
  v0[1] = v20;
  v0[2] = v3;
  v0[3] = v4;
  return v7;
}

uint64_t specialized RangeReplaceableCollection<>.removeFirst()()
{
  unint64_t v1 = *v0;
  Swift::UInt64 v2 = v0[1];
  if (v2 >> 14 == *v0 >> 14) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't remove items from an empty collection", 43, 2, "Swift/RangeReplaceableCollection.swift", 38, 2, 0x2A5uLL, 0);
  }
  unint64_t v4 = v0[2];
  unint64_t v3 = v0[3];
  uint64_t v5 = Substring.subscript.getter(*v0, *v0, v0[1], v4, v3);
  uint64_t v7 = v6;
  swift_bridgeObjectRetain(v3);
  v8._Swift::UInt64 rawBits = Substring.index(after:)((Swift::String::Index)v1)._rawBits;
  if (v2 >> 14 < v8._rawBits >> 14)
  {
    swift_bridgeObjectRelease(v7);
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
  }
  Swift::UInt64 rawBits = v8._rawBits;
  swift_bridgeObjectRelease(v3);
  v10._Swift::UInt64 rawBits = rawBits;
  v11._Swift::UInt64 rawBits = v2;
  Swift::UInt64 v12 = specialized Substring.subscript.getter(v10, v11, v1, v2, v4, v3);
  Swift::UInt64 v14 = v13;
  Swift::UInt64 v16 = v15;
  unint64_t v18 = v17;
  swift_bridgeObjectRetain(v17);
  swift_bridgeObjectRelease(v3);
  *uint64_t v0 = v12;
  v0[1] = v14;
  v0[2] = v16;
  v0[3] = v18;
  return v5;
}

uint64_t RangeReplaceableCollection<>.removeFirst()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v85 = a3;
  uint64_t v5 = *(void *)(a2 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, (int **)v5, a1, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0, (uint64_t)AssociatedTypeWitness, (uint64_t)AssociatedTypeWitness, "lower upper ", 0);
  uint64_t v7 = MEMORY[0x1F4188790](TupleTypeMetadata2);
  Swift::UInt64 v9 = (char *)&v69 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = MEMORY[0x1F4188790](v7);
  Swift::Int v76 = (char *)&v69 - v11;
  uint64_t v82 = *((void *)AssociatedTypeWitness - 1);
  uint64_t v12 = MEMORY[0x1F4188790](v10);
  uint64_t v80 = (void (**)(char *, uint64_t))((char *)&v69 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  char v79 = (char *)&v69 - v15;
  uint64_t v16 = MEMORY[0x1F4188790](v14);
  unint64_t v81 = (char *)&v69 - v17;
  uint64_t v18 = MEMORY[0x1F4188790](v16);
  unint64_t v20 = (char *)&v69 - v19;
  MEMORY[0x1F4188790](v18);
  uint64_t v78 = (char *)&v69 - v21;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v5, a1, (uint64_t)AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Collection, associated conformance descriptor for Collection.Collection.Index: Comparable);
  uint64_t v24 = type metadata accessor for Range(0, (uint64_t)AssociatedTypeWitness, AssociatedConformanceWitness, v23);
  uint64_t v74 = (uint64_t)*(v24 - 1);
  Swift::String::Index v75 = v24;
  uint64_t v25 = MEMORY[0x1F4188790](v24);
  Swift::String::Index v72 = (char *)&v69 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = MEMORY[0x1F4188790](v25);
  uint64_t v73 = (char *)&v69 - v28;
  uint64_t v86 = *(void *)(a1 - 8);
  MEMORY[0x1F4188790](v27);
  uint64_t v30 = (char *)&v69 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = swift_getAssociatedTypeWitness(255, *(int ***)(v5 + 8), a1, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
  uint64_t v34 = type metadata accessor for Optional(0, (uint64_t)v31, v32, v33);
  MEMORY[0x1F4188790](v34 - 1);
  uint64_t v36 = (char *)&v69 - v35;
  uint64_t v37 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 104);
  uint64_t v87 = v3;
  if (v37(a1, v5)) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't remove items from an empty collection", 43, 2, "Swift/RangeReplaceableCollection.swift", 38, 2, 0x2A5uLL, 0);
  }
  char v70 = v9;
  uint64_t v71 = (uint64_t (**)(char *, char *, const char *))AssociatedConformanceWitness;
  Collection.first.getter(a1, v5, (uint64_t)v36);
  uint64_t v38 = *((void *)v31 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, const char *))(v38 + 48))(v36, 1, v31) == 1) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/RangeReplaceableCollection.swift", 38, 2, 0x2A6uLL, 0);
  }
  (*(void (**)(uint64_t, char *, const char *))(v38 + 32))(v85, v36, v31);
  uint64_t v39 = *(void (**)(char *, uint64_t, uint64_t))(v86 + 16);
  uint64_t v69 = v30;
  v39(v30, v87, a1);
  (*(void (**)(uint64_t, uint64_t))(v5 + 64))(a1, v5);
  BOOL v40 = v78;
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 184))(v20, a1, v5);
  uint64_t v41 = v82;
  unint64_t v84 = *(void (**)(char *, const char *))(v82 + 8);
  uint64_t v85 = v82 + 8;
  v84(v20, AssociatedTypeWitness);
  uint64_t v42 = *(void (**)(uint64_t, uint64_t))(v5 + 72);
  uint64_t v83 = a1;
  uint64_t v43 = a1;
  uint64_t v44 = v81;
  v42(v43, v5);
  uint64_t v45 = *(void (**)(char *, char *, const char *))(v41 + 16);
  uint64_t v46 = v79;
  v45(v79, v40, AssociatedTypeWitness);
  Swift::Int v47 = (char *)v80;
  v45((char *)v80, v44, AssociatedTypeWitness);
  if ((v71[3](v46, v47, AssociatedTypeWitness) & 1) == 0) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
  }
  uint64_t v48 = *(uint64_t (***)(char *, char *, const char *))(v86 + 8);
  v86 += 8;
  uint64_t v71 = v48;
  ((void (*)(uint64_t, uint64_t))v48)(v87, v83);
  unint64_t v49 = v47;
  uint64_t v50 = v84;
  v84(v49, AssociatedTypeWitness);
  v50(v46, AssociatedTypeWitness);
  uint64_t v80 = (void (**)(char *, uint64_t))v5;
  uint64_t v51 = TupleTypeMetadata2;
  uint64_t v52 = v45;
  long long v53 = v44;
  uint64_t v54 = v76;
  uint64_t v55 = &v76[*((int *)TupleTypeMetadata2 + 12)];
  long long v56 = *(void (**)(char *, char *, const char *))(v41 + 32);
  v56(v76, v40, AssociatedTypeWitness);
  uint64_t v57 = v55;
  char v79 = v55;
  v56(v55, v53, AssociatedTypeWitness);
  uint64_t v58 = v70;
  uint64_t v59 = &v70[*((int *)v51 + 12)];
  v52(v70, v54, AssociatedTypeWitness);
  v52(v59, v57, AssociatedTypeWitness);
  uint64_t v60 = v72;
  v56(v72, v58, AssociatedTypeWitness);
  id v61 = v84;
  v84(v59, AssociatedTypeWitness);
  uint64_t v62 = &v58[*((int *)v51 + 12)];
  v56(v58, v54, AssociatedTypeWitness);
  v56(v62, v79, AssociatedTypeWitness);
  uint64_t v63 = v75;
  v56(&v60[*((int *)v75 + 9)], v62, AssociatedTypeWitness);
  v61(v58, AssociatedTypeWitness);
  unint64_t v65 = v73;
  uint64_t v64 = v74;
  (*(void (**)(char *, char *, Class *))(v74 + 32))(v73, v60, v63);
  uint64_t v66 = v69;
  uint64_t v67 = v83;
  v80[11](v65, v83);
  (*(void (**)(char *, Class *))(v64 + 8))(v65, v63);
  return ((uint64_t (*)(char *, uint64_t))v71)(v66, v67);
}

void specialized RangeReplaceableCollection<>.removeFirst(_:)(Swift::Int offsetBy)
{
  if (offsetBy)
  {
    if (offsetBy < 0) {
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Number of elements to remove should be non-negative", 51, 2, "Swift/RangeReplaceableCollection.swift", 38, 2, 0x2BFuLL, 0);
    }
    unint64_t rawBits = v1->_rawBits;
    Swift::UInt64 v3 = v1[1]._rawBits;
    unint64_t v4 = v1[2]._rawBits;
    unint64_t v5 = v1[3]._rawBits;
    Swift::String::Index_optional v12 = Substring.UnicodeScalarView.index(_:offsetBy:limitedBy:)((Swift::String::Index)v1->_rawBits, offsetBy, (Swift::String::Index)v3);
    if (v12.is_nil) {
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't remove more items from a collection than it contains", 58, 2, "Swift/RangeReplaceableCollection.swift", 38, 2, 0x2C1uLL, 0);
    }
    Swift::UInt64 v6 = v12.value._rawBits;
    if (v3 >> 14 < v12.value._rawBits >> 14) {
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
    }
    swift_bridgeObjectRetain(v5);
    v7._unint64_t rawBits = v6;
    v8._unint64_t rawBits = v3;
    Swift::UInt64 v9 = _StringGuts.validateScalarRange(_:in:)(v7, v8, rawBits, v3, v4, v5);
    Swift::UInt64 v11 = v10;
    swift_bridgeObjectRelease(v5);
    v1->_unint64_t rawBits = v9;
    v1[1]._unint64_t rawBits = v11;
    v1[2]._unint64_t rawBits = v4;
    v1[3]._unint64_t rawBits = v5;
  }
}

{
  Swift::String::Index *v1;
  unint64_t rawBits;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  long long v6;
  Swift::UInt64 v7;
  Swift::UInt64 v8;
  Swift::UInt64 v9;
  Swift::UInt64 v10;
  Swift::UInt64 v11;
  unint64_t v12;
  Swift::UInt64 v13;

  if (offsetBy)
  {
    if (offsetBy < 0) {
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Number of elements to remove should be non-negative", 51, 2, "Swift/RangeReplaceableCollection.swift", 38, 2, 0x2BFuLL, 0);
    }
    unint64_t rawBits = v1->_rawBits;
    Swift::UInt64 v3 = v1[1]._rawBits;
    unint64_t v5 = v1[2]._rawBits;
    unint64_t v4 = v1[3]._rawBits;
    *(Swift::String::Index_optional *)&Swift::UInt64 v6 = Substring.index(_:offsetBy:limitedBy:)((Swift::String::Index)v1->_rawBits, offsetBy, (Swift::String::Index)v3);
    if (BYTE8(v6)) {
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't remove more items from a collection than it contains", 58, 2, "Swift/RangeReplaceableCollection.swift", 38, 2, 0x2C1uLL, 0);
    }
    if (v3 >> 14 < (unint64_t)v6 >> 14) {
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
    }
    *((void *)&v6 + 1) = v3;
    Swift::String::Index v7 = specialized Substring.subscript.getter((Swift::String::Index)v6, *(Swift::String::Index *)((char *)&v6 + 8), rawBits, v3, v5, v4);
    Swift::UInt64 v9 = v8;
    Swift::UInt64 v11 = v10;
    uint64_t v13 = v12;
    swift_bridgeObjectRetain(v12);
    swift_bridgeObjectRelease(v4);
    v1->_unint64_t rawBits = v7;
    v1[1]._unint64_t rawBits = v9;
    v1[2]._unint64_t rawBits = v11;
    v1[3]._unint64_t rawBits = v13;
  }
}

uint64_t RangeReplaceableCollection<>.removeFirst(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a3 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, (int **)v6, a2, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0, (uint64_t)AssociatedTypeWitness, (uint64_t)AssociatedTypeWitness, "lower upper ", 0);
  uint64_t v8 = MEMORY[0x1F4188790](TupleTypeMetadata2);
  Swift::UInt64 v10 = (char *)&v73 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8);
  uint64_t v82 = (char *)&v73 - v11;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v6, a2, (uint64_t)AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Collection, associated conformance descriptor for Collection.Collection.Index: Comparable);
  uint64_t v13 = type metadata accessor for Range(0, (uint64_t)AssociatedTypeWitness, AssociatedConformanceWitness, v12);
  uint64_t v85 = (uint64_t)*(v13 - 1);
  uint64_t v14 = MEMORY[0x1F4188790](v13);
  unint64_t v81 = (char *)&v73 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = MEMORY[0x1F4188790](v14);
  uint64_t v83 = (char *)&v73 - v17;
  uint64_t v95 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](v16);
  uint64_t v94 = (char *)&v73 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = type metadata accessor for Optional(0, (uint64_t)AssociatedTypeWitness, v19, v20);
  uint64_t v22 = a1;
  uint64_t v23 = MEMORY[0x1F4188790](v21);
  uint64_t v25 = (char *)&v73 - v24;
  uint64_t v88 = (void (*)(uint64_t, char *, const char *))*((void *)AssociatedTypeWitness - 1);
  uint64_t v26 = MEMORY[0x1F4188790](v23);
  uint64_t v27 = MEMORY[0x1F4188790](v26);
  uint64_t v28 = MEMORY[0x1F4188790](v27);
  uint64_t v93 = (char *)&v73 - v29;
  uint64_t v30 = MEMORY[0x1F4188790](v28);
  uint64_t v32 = (char *)&v73 - v31;
  uint64_t v33 = MEMORY[0x1F4188790](v30);
  uint64_t v35 = (char *)&v73 - v34;
  uint64_t result = MEMORY[0x1F4188790](v33);
  uint64_t v86 = (char *)&v73 - v40;
  if (v22)
  {
    if (v22 < 0) {
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Number of elements to remove should be non-negative", 51, 2, "Swift/RangeReplaceableCollection.swift", 38, 2, 0x2BFuLL, 0);
    }
    uint64_t v74 = v39;
    Swift::String::Index v75 = (void (*)(char *, char *, const char *))result;
    Swift::Int v76 = v13;
    uint64_t v79 = v38;
    uint64_t v80 = v37;
    uint64_t v77 = v10;
    (*(void (**)(uint64_t, uint64_t))(v6 + 64))(a2, v6);
    uint64_t v41 = v3;
    uint64_t v78 = *(void (**)(uint64_t, uint64_t))(v6 + 72);
    v78(a2, v6);
    (*(void (**)(char *, uint64_t, char *, uint64_t, uint64_t))(v6 + 144))(v35, v22, v32, a2, v6);
    uint64_t v91 = a2;
    uint64_t v92 = v6;
    uint64_t v42 = v88;
    uint64_t v44 = (char *)v88 + 8;
    uint64_t v43 = (void (*)(char *, const char *))*((void *)v88 + 1);
    v43(v32, AssociatedTypeWitness);
    unint64_t v89 = (void (*)(uint64_t, const char *))v43;
    uint64_t v90 = v44;
    v43(v35, AssociatedTypeWitness);
    if ((*((unsigned int (**)(char *, uint64_t, const char *))v42 + 6))(v25, 1, AssociatedTypeWitness) == 1)
    {
      (*(void (**)(char *, void (*)(char *, char *, const char *)))(v74 + 8))(v25, v75);
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't remove more items from a collection than it contains", 58, 2, "Swift/RangeReplaceableCollection.swift", 38, 2, 0x2C1uLL, 0);
    }
    uint64_t v45 = v86;
    Swift::String::Index v75 = (void (*)(char *, char *, const char *))*((void *)v42 + 4);
    v75(v86, v25, AssociatedTypeWitness);
    uint64_t v46 = v95;
    uint64_t v47 = v91;
    (*(void (**)(char *, char *, uint64_t))(v95 + 16))(v94, v3, v91);
    uint64_t v48 = v93;
    v78(v47, v92);
    uint64_t v50 = *(void (**)(uint64_t, uint64_t))(v46 + 8);
    uint64_t v49 = v46 + 8;
    uint64_t v78 = v50;
    v50((uint64_t)v3, v47);
    uint64_t v51 = (void (*)(uint64_t, char *, const char *))*((void *)v42 + 2);
    uint64_t v52 = v79;
    v51(v79, v45, AssociatedTypeWitness);
    uint64_t v53 = v80;
    uint64_t v88 = v51;
    v51(v80, v48, AssociatedTypeWitness);
    if (((*(uint64_t (**)(uint64_t, uint64_t, const char *))(AssociatedConformanceWitness + 24))(v52, v53, AssociatedTypeWitness) & 1) == 0)_assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0); {
    uint64_t v54 = v53;
    }
    uint64_t v55 = v45;
    long long v56 = v89;
    v89(v54, AssociatedTypeWitness);
    v56(v52, AssociatedTypeWitness);
    uint64_t v95 = v49;
    uint64_t v57 = TupleTypeMetadata2;
    uint64_t v58 = v82;
    uint64_t v59 = (uint64_t)&v82[*((int *)TupleTypeMetadata2 + 12)];
    uint64_t v60 = (void (*)(uint64_t, char *, const char *))v75;
    v75(v82, v55, AssociatedTypeWitness);
    uint64_t AssociatedConformanceWitness = v59;
    v60(v59, v93, AssociatedTypeWitness);
    uint64_t v61 = *((int *)v57 + 12);
    uint64_t v93 = v41;
    uint64_t v62 = v77;
    uint64_t v63 = &v77[v61];
    uint64_t v64 = (void (*)(char *, uint64_t, const char *))v88;
    v88((uint64_t)v77, v58, AssociatedTypeWitness);
    v64(v63, v59, AssociatedTypeWitness);
    unint64_t v65 = v81;
    v60((uint64_t)v81, v62, AssociatedTypeWitness);
    uint64_t v66 = (void (*)(char *, const char *))v89;
    v89((uint64_t)v63, AssociatedTypeWitness);
    uint64_t v67 = &v62[*((int *)v57 + 12)];
    v60((uint64_t)v62, v58, AssociatedTypeWitness);
    v60((uint64_t)v67, (char *)AssociatedConformanceWitness, AssociatedTypeWitness);
    uint64_t v68 = v76;
    v60((uint64_t)&v65[*((int *)v76 + 9)], v67, AssociatedTypeWitness);
    v66(v62, AssociatedTypeWitness);
    uint64_t v69 = v85;
    char v70 = v83;
    (*(void (**)(char *, char *, Class *))(v85 + 32))(v83, v65, v68);
    uint64_t v71 = v94;
    uint64_t v72 = v91;
    (*(void (**)(char *, uint64_t))(v92 + 88))(v70, v91);
    (*(void (**)(char *, Class *))(v69 + 8))(v70, v68);
    return ((uint64_t (*)(char *, uint64_t))v78)(v71, v72);
  }
  return result;
}

uint64_t protocol witness for RangeReplaceableCollection.removeAll(where:) in conformance ArraySlice<A>(uint64_t (*a1)(char *), void (*a2)(char *, const char *), unint64_t *a3, uint64_t a4)
{
  uint64_t WitnessTable = swift_getWitnessTable(protocol conformance descriptor for ArraySlice<A>, a3, (uint64_t)a3);
  return RangeReplaceableCollection<>.removeAll(where:)(a1, a2, (uint64_t (*)(char *))a3, WitnessTable, a4);
}

uint64_t ArraySlice.customMirror.getter@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  *(void *)&long long v35 = a1;
  *((void *)&v35 + 1) = a2;
  *(void *)&long long v36 = a3;
  *((void *)&v36 + 1) = a4;
  uint64_t v11 = type metadata accessor for ArraySlice(0, a5, a3, a4);
  v32[0] = 0;
  v32[1] = 0;
  swift_unknownObjectRetain(a1);
  uint64_t v31 = static Mirror._superclassIterator<A>(_:_:)((uint64_t)&v35, (uint64_t)v32, (swift *)v11);
  uint64_t v13 = v12;
  uint64_t v14 = swift_allocObject(qword_1EC9F2898, 0x28uLL, 7uLL);
  v14[2] = v11;
  v14[3] = v11;
  uint64_t WitnessTable = swift_getWitnessTable(protocol conformance descriptor for ArraySlice<A>, (unint64_t *)v11, v15);
  void v14[4] = WitnessTable;
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for (label: String?, value: Any));
  uint64_t v19 = swift_getWitnessTable(protocol conformance descriptor for ArraySlice<A>, (unint64_t *)v11, v18);
  uint64_t v20 = (unint64_t *)type metadata accessor for LazyMapSequence(255, (uint64_t)v11, v17, v19);
  uint64_t v34 = WitnessTable;
  uint64_t v21 = swift_getWitnessTable(protocol conformance descriptor for <> LazyMapSequence<A, B>, v20, (uint64_t)&v34);
  uint64_t v23 = (unint64_t *)type metadata accessor for _CollectionBox(0, (uint64_t)v20, v21, v22);
  uint64_t v24 = swift_allocObject(v23, 0x60uLL, 7uLL);
  v24[6] = a1;
  v24[7] = a2;
  v24[8] = a3;
  v24[9] = a4;
  v24[10] = closure #1 in Mirror.init<A, B>(_:unlabeledChildren:displayStyle:ancestorRepresentation:)partial apply;
  v24[11] = v14;
  uint64_t v25 = (unint64_t *)canonical specialized generic type metadata accessor for _IndexBox<Int>();
  uint64_t v26 = swift_allocObject(v25, 0x18uLL, 7uLL);
  void v26[2] = a3;
  uint64_t v27 = swift_allocObject(v25, 0x18uLL, 7uLL);
  v27[2] = a4 >> 1;
  unint64_t v24[2] = v26;
  v24[3] = &protocol witness table for _IndexBox<A>;
  v24[4] = v27;
  v24[5] = &protocol witness table for _IndexBox<A>;
  v33[0] = v35;
  v33[1] = v36;
  swift_unknownObjectRetain(a1);
  uint64_t v28 = (const char *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CustomLeafReflectable);
  uint64_t result = swift_dynamicCast((char *)v32, (unint64_t *)v33, v11, v28, 6uLL);
  char v30 = result;
  if (result) {
    uint64_t result = __swift_destroy_boxed_opaque_existential_1Tm(v32);
  }
  *(void *)a6 = v11;
  *(void *)(a6 + 8) = v24;
  *(unsigned char *)(a6 + 16) = 5;
  *(void *)(a6 + 24) = v31;
  *(void *)(a6 + 32) = v13;
  *(unsigned char *)(a6 + 40) = v30;
  return result;
}

uint64_t protocol witness for CustomReflectable.customMirror.getter in conformance ArraySlice<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return ArraySlice.customMirror.getter(*(void **)v2, *(void *)(v2 + 8), *(void *)(v2 + 16), *(void *)(v2 + 24), *(void *)(a1 + 16), a2);
}

uint64_t ArraySlice.description.getter(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v100 = a1;
  uint64_t v101 = a2;
  uint64_t v8 = *(void *)(a5 - 8);
  uint64_t v9 = MEMORY[0x1F4188790](a1);
  uint64_t v11 = (char *)&v89 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  uint64_t v13 = (char *)&v89 - v12;
  swift_bridgeObjectRelease(0xE000000000000000);
  uint64_t v14 = 91;
  unint64_t v15 = 0xE100000000000000;
  uint64_t v105 = 91;
  unint64_t v106 = 0xE100000000000000;
  unint64_t v99 = a4 >> 1;
  if (a4 >> 1 == a3) {
    goto LABEL_48;
  }
  Swift::Int v102 = v11;
  uint64_t v98 = v8 + 16;
  uint64_t v16 = (void (**)(char *, char *, uint64_t))(v8 + 32);
  unint64_t v15 = 1;
  long long v96 = xmmword_18162AC80;
  long long v91 = xmmword_18162AC90;
  Swift::UInt64 v90 = 131073;
  uint64_t v14 = a3;
  unint64_t v94 = a4;
  uint64_t v93 = a3;
  uint64_t v95 = v8;
  Swift::Int v97 = v13;
  do
  {
    uint64_t v23 = v101;
    specialized ArraySlice._checkSubscript(_:wasNativeTypeChecked:)(v14, v100, v101, a3, a4);
    (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v13, v23 + *(void *)(v8 + 72) * v14, a5);
    uint64_t v24 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
      __break(1u);
LABEL_81:
      __break(1u);
      goto LABEL_82;
    }
    uint64_t v25 = v13;
    uint64_t v26 = *v16;
    uint64_t v19 = v102;
    (*v16)(v102, v25, a5);
    if ((v15 & 1) == 0)
    {
      uint64_t v27 = v105;
      unint64_t v15 = v106;
      unint64_t v28 = HIBYTE(v106) & 0xF;
      if ((v106 & 0x2000000000000000) != 0) {
        unint64_t v29 = HIBYTE(v106) & 0xF;
      }
      else {
        unint64_t v29 = v105 & 0xFFFFFFFFFFFFLL;
      }
      if (!v29 && (v105 & ~v106 & 0x2000000000000000) == 0)
      {
        swift_bridgeObjectRelease(v106);
        uint64_t v105 = 8236;
        unint64_t v59 = 0xE200000000000000;
LABEL_45:
        unint64_t v106 = v59;
LABEL_46:
        a4 = v94;
        a3 = v93;
        uint64_t v8 = v95;
        goto LABEL_4;
      }
      if ((v106 & 0x2000000000000000) != 0 && v28 <= 0xD)
      {
        unint64_t v30 = 8 * (HIBYTE(v106) & 7);
        uint64_t v31 = (-255 << v30) - 1;
        uint64_t v32 = 44 << v30;
        char v33 = v28 + 1;
        if (v28 >= 8)
        {
          uint64_t v34 = v32 | v31 & v106;
        }
        else
        {
          uint64_t v27 = v32 | v31 & v105;
          if (v28 != 7)
          {
            uint64_t v27 = (32 << (8 * (v33 & 7u))) | ((-255 << (8 * (v33 & 7u))) - 1) & v27;
            uint64_t v58 = v106;
            goto LABEL_42;
          }
          char v33 = 8;
          uint64_t v34 = v106;
        }
        uint64_t v58 = (32 << (8 * (v33 & 7u))) | ((-255 << (8 * (v33 & 7u))) - 1) & v34;
LABEL_42:
        swift_bridgeObjectRelease(v106);
        swift_bridgeObjectRelease(0xE200000000000000);
        unint64_t v60 = 0xE000000000000000;
        if (v27 & 0x8080808080808080 | v58 & 0x80808080808080) {
          unint64_t v60 = 0xA000000000000000;
        }
        unint64_t v59 = (v60 & 0xFF00000000000000 | (v28 << 56) | v58 & 0xFFFFFFFFFFFFFFLL) + 0x200000000000000;
        uint64_t v105 = v27;
        goto LABEL_45;
      }
      swift_bridgeObjectRetain_n(0xE200000000000000, 6);
      if ((v15 & 0x1000000000000000) != 0) {
        unint64_t v29 = String.UTF8View._foreignCount()();
      }
      BOOL v35 = __OFADD__(v29, 2);
      int64_t v36 = v29 + 2;
      uint64_t v8 = v95;
      if (v35) {
        goto LABEL_81;
      }
      if ((v27 & ~v15 & 0x2000000000000000) != 0
        && swift_isUniquelyReferenced_nonNull_native(v15 & 0xFFFFFFFFFFFFFFFLL))
      {
        int64_t v37 = _StringGuts.nativeUnusedCapacity.getter(v27, v15);
        if (v38) {
          goto LABEL_86;
        }
        BOOL v40 = (v15 & 0x2000000000000000) == 0 && v37 > 1;
        if (v36 > 15 || v40) {
          goto LABEL_3;
        }
      }
      else if (v36 > 15)
      {
LABEL_3:
        _StringGuts.prepareForAppendInPlace(totalCount:otherUTF8Count:)(v36, 2);
        swift_bridgeObjectRelease_n(0xE200000000000000, 6);
        long long v103 = v91;
        uint64_t v17 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, 2, (uint64_t)&v103, 2);
        _StringGuts.appendInPlace(_:isASCII:)(v17, v18, 1);
        swift_bridgeObjectRelease(0xE200000000000000);
        a4 = v94;
        a3 = v93;
LABEL_4:
        uint64_t v19 = v102;
        goto LABEL_5;
      }
      swift_bridgeObjectRelease_n(0xE200000000000000, 5);
      swift_bridgeObjectRetain(v15);
      unint64_t v41 = _StringGuts._convertedToSmall()(v27, v15);
      unint64_t v92 = v42;
      swift_bridgeObjectRelease(v15);
      v43._unint64_t rawBits = 1;
      v44._unint64_t rawBits = v90;
      v45._unint64_t rawBits = _StringGuts.validateScalarRange(_:)(v43, v44, 0x202CuLL, 0xE200000000000000);
      if (v45._rawBits < 0x10000) {
        v45._rawBits |= 3;
      }
      unint64_t v47 = specialized String.init(_:)(v45, v46, 0x202CuLL, 0xE200000000000000);
      unint64_t v49 = v48;
      swift_bridgeObjectRelease(0xE200000000000000);
      unint64_t v50 = _StringGuts._convertedToSmall()(v47, v49);
      unint64_t v52 = v51;
      swift_bridgeObjectRelease(v49);
      unint64_t v53 = specialized _SmallString.init(_:appending:)(v41, v92, v50, v52);
      if (v55) {
        goto LABEL_85;
      }
      uint64_t v56 = v53;
      unint64_t v57 = v54;
      swift_bridgeObjectRelease(v15);
      swift_bridgeObjectRelease(0xE200000000000000);
      uint64_t v105 = v56;
      unint64_t v106 = v57;
      goto LABEL_46;
    }
LABEL_5:
    uint64_t v20 = canonical specialized generic type metadata accessor for _ContiguousArrayStorage<Any>();
    inited = swift_initStackObject(v20, v104);
    *((_OWORD *)inited + 1) = v96;
    inited[7] = a5;
    boxed_opaque_existential_0Tm = (char *)__swift_allocate_boxed_opaque_existential_0Tm(inited + 4);
    v26(boxed_opaque_existential_0Tm, v19, a5);
    specialized _debugPrint<A>(_:separator:terminator:to:)((uint64_t)inited, 0x20uLL, 0xE100000000000000, 0, 0xE000000000000000, &v105);
    swift_bridgeObjectRelease((uint64_t)inited);
    swift_bridgeObjectRelease(0xE000000000000000);
    swift_bridgeObjectRelease(0xE100000000000000);
    unint64_t v15 = 0;
    ++v14;
    uint64_t v13 = v97;
  }
  while (v24 != v99);
  uint64_t v14 = v105;
  unint64_t v15 = v106;
LABEL_48:
  unint64_t v61 = HIBYTE(v15) & 0xF;
  if ((v15 & 0x2000000000000000) != 0) {
    uint64_t v62 = HIBYTE(v15) & 0xF;
  }
  else {
    uint64_t v62 = v14 & 0xFFFFFFFFFFFFLL;
  }
  if (!v62 && (v14 & ~v15 & 0x2000000000000000) == 0)
  {
    swift_bridgeObjectRelease(v15);
    return 93;
  }
  if ((v15 & 0x2000000000000000) == 0 || v61 == 15)
  {
    swift_bridgeObjectRetain_n(0xE100000000000000, 6);
    if ((v15 & 0x1000000000000000) == 0)
    {
      BOOL v35 = __OFADD__(v62, 1);
      int64_t v64 = v62 + 1;
      if (!v35)
      {
LABEL_61:
        if ((v14 & ~v15 & 0x2000000000000000) != 0
          && swift_isUniquelyReferenced_nonNull_native(v15 & 0xFFFFFFFFFFFFFFFLL))
        {
          int64_t v65 = _StringGuts.nativeUnusedCapacity.getter(v14, v15);
          if (v66)
          {
LABEL_86:
            unint64_t v88 = 258;
LABEL_87:
            _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/StringGutsRangeReplaceable.swift", 38, 2, v88, 0);
          }
          BOOL v68 = (v15 & 0x2000000000000000) == 0 && v65 > 0;
          if (v64 <= 15 && !v68) {
            goto LABEL_72;
          }
        }
        else if (v64 <= 15)
        {
LABEL_72:
          swift_bridgeObjectRelease_n(0xE100000000000000, 5);
          swift_bridgeObjectRetain(v15);
          unint64_t v69 = _StringGuts._convertedToSmall()(v14, v15);
          unint64_t v71 = v70;
          swift_bridgeObjectRelease(v15);
          v72._unint64_t rawBits = 1;
          v73._unint64_t rawBits = 65537;
          v74._unint64_t rawBits = _StringGuts.validateScalarRange(_:)(v72, v73, 0x5DuLL, 0xE100000000000000);
          if (v74._rawBits < 0x10000) {
            v74._rawBits |= 3;
          }
          unint64_t v76 = specialized String.init(_:)(v74, v75, 0x5DuLL, 0xE100000000000000);
          unint64_t v78 = v77;
          swift_bridgeObjectRelease(0xE100000000000000);
          unint64_t v79 = _StringGuts._convertedToSmall()(v76, v78);
          unint64_t v81 = v80;
          swift_bridgeObjectRelease(v78);
          unint64_t v82 = specialized _SmallString.init(_:appending:)(v69, v71, v79, v81);
          if ((v83 & 1) == 0)
          {
            uint64_t v63 = v82;
            swift_bridgeObjectRelease(v15);
            swift_bridgeObjectRelease(0xE100000000000000);
            return v63;
          }
          goto LABEL_85;
        }
        _StringGuts.prepareForAppendInPlace(totalCount:otherUTF8Count:)(v64, 1);
        swift_bridgeObjectRelease_n(0xE100000000000000, 6);
        long long v103 = xmmword_18162ACA0;
        unint64_t v84 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, 1, (uint64_t)&v103, 1);
        _StringGuts.appendInPlace(_:isASCII:)(v84, v85, 1);
        swift_bridgeObjectRelease(0xE100000000000000);
        return v105;
      }
LABEL_84:
      __break(1u);
LABEL_85:
      unint64_t v88 = 266;
      goto LABEL_87;
    }
LABEL_82:
    Swift::Int v87 = String.UTF8View._foreignCount()();
    int64_t v64 = v87 + 1;
    if (!__OFADD__(v87, 1)) {
      goto LABEL_61;
    }
    goto LABEL_84;
  }
  if (v61 >= 8) {
    uint64_t v63 = v14;
  }
  else {
    uint64_t v63 = (93 << (8 * (HIBYTE(v15) & 7u))) | ((-255 << (8 * (HIBYTE(v15) & 7u))) - 1) & v14;
  }
  swift_bridgeObjectRelease(v15);
  swift_bridgeObjectRelease(0xE100000000000000);
  return v63;
}

uint64_t ArraySlice.debugDescription.getter(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v5 = a5;
  unint64_t v164 = a4;
  unint64_t v167 = a3;
  uint64_t v171 = a1;
  uint64_t v172 = a2;
  uint64_t v173 = *(void *)(a5 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](a1);
  v166 = (char *)&v161 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  v165 = (char *)&v161 - v8;
  Swift::String v9 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("ArraySlice", 0xAuLL, 1);
  uint64_t countAndFlagsBits = v9._countAndFlagsBits;
  uint64_t object = (uint64_t)v9._object;
  unint64_t v178 = 0;
  unint64_t v179 = 0xE000000000000000;
  uint64_t v12 = specialized static String._createEmpty(withInitialCapacity:)(4);
  unint64_t v14 = v12;
  unint64_t v15 = v13;
  v177._uint64_t countAndFlagsBits = v12;
  v177._uint64_t object = (void *)v13;
  uint64_t v16 = HIBYTE(v13) & 0xF;
  int64_t v17 = v12 & 0xFFFFFFFFFFFFLL;
  if ((v13 & 0x2000000000000000) != 0) {
    uint64_t v18 = HIBYTE(v13) & 0xF;
  }
  else {
    uint64_t v18 = v12 & 0xFFFFFFFFFFFFLL;
  }
  if (!v18 && (v12 & ~v13 & 0x2000000000000000) == 0)
  {
    swift_bridgeObjectRelease(v13);
    unint64_t v14 = 0;
    unint64_t v37 = 0xE000000000000000;
    v177._uint64_t countAndFlagsBits = 0;
LABEL_21:
    v177._uint64_t object = (void *)v37;
    goto LABEL_25;
  }
  if ((v13 & 0x2000000000000000) != 0)
  {
    swift_bridgeObjectRelease(v13);
    swift_bridgeObjectRelease(0xE000000000000000);
    unint64_t v38 = 0xA000000000000000;
    if (!(v15 & 0x80808080808080 | v14 & 0x8080808080808080)) {
      unint64_t v38 = 0xE000000000000000;
    }
    unint64_t v37 = v38 & 0xFF00000000000000 | (v16 << 56) | v15 & 0xFFFFFFFFFFFFFFLL;
    v177._uint64_t countAndFlagsBits = v14;
    goto LABEL_21;
  }
  swift_bridgeObjectRetain_n(0xE000000000000000, 6);
  if ((v15 & 0x1000000000000000) != 0)
  {
    int64_t v17 = String.UTF8View._foreignCount()();
    if ((v14 & ~v15 & 0x2000000000000000) == 0) {
      goto LABEL_23;
    }
  }
  else if ((v14 & ~v15 & 0x2000000000000000) == 0)
  {
    goto LABEL_23;
  }
  if (swift_isUniquelyReferenced_nonNull_native(v15 & 0xFFFFFFFFFFFFFFFLL))
  {
    unint64_t v19 = _StringGuts.nativeUnusedCapacity.getter(v14, v15);
    if (v20) {
      goto LABEL_171;
    }
    if (v17 <= 15 && (v19 & 0x8000000000000000) != 0) {
      goto LABEL_13;
    }
    goto LABEL_24;
  }
LABEL_23:
  if (v17 <= 15)
  {
LABEL_13:
    swift_bridgeObjectRelease_n(0xE000000000000000, 5);
    swift_bridgeObjectRetain(v15);
    unint64_t v21 = _StringGuts._convertedToSmall()(v14, v15);
    unint64_t v23 = v22;
    swift_bridgeObjectRelease(v15);
    v24._unint64_t rawBits = 1;
    v25._unint64_t rawBits = 1;
    v26._unint64_t rawBits = _StringGuts.validateScalarRange(_:)(v24, v25, 0, 0xE000000000000000);
    if (v26._rawBits < 0x10000) {
      v26._rawBits |= 3;
    }
    unint64_t v28 = specialized String.init(_:)(v26, v27, 0, 0xE000000000000000);
    unint64_t v30 = v29;
    swift_bridgeObjectRelease(0xE000000000000000);
    unint64_t v31 = _StringGuts._convertedToSmall()(v28, v30);
    unint64_t v33 = v32;
    swift_bridgeObjectRelease(v30);
    unint64_t v34 = specialized _SmallString.init(_:appending:)(v21, v23, v31, v33);
    if (v36)
    {
LABEL_170:
      unint64_t v160 = 266;
      goto LABEL_172;
    }
    unint64_t v14 = v34;
    unint64_t v37 = v35;
    swift_bridgeObjectRelease(v15);
    swift_bridgeObjectRelease(0xE000000000000000);
    v177._uint64_t countAndFlagsBits = v14;
    goto LABEL_21;
  }
LABEL_24:
  _StringGuts.prepareForAppendInPlace(totalCount:otherUTF8Count:)(v17, 0);
  swift_bridgeObjectRelease_n(0xE000000000000000, 6);
  uint64_t v174 = 0;
  uint64_t v175 = 0;
  uint64_t v39 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, 0, (uint64_t)&v174, 0);
  _StringGuts.appendInPlace(_:isASCII:)(v39, v40, 1);
  swift_bridgeObjectRelease(0xE000000000000000);
  unint64_t v37 = (unint64_t)v177._object;
  unint64_t v14 = v177._countAndFlagsBits;
LABEL_25:
  uint64_t v41 = HIBYTE(v37) & 0xF;
  if ((v37 & 0x2000000000000000) != 0) {
    uint64_t v42 = HIBYTE(v37) & 0xF;
  }
  else {
    uint64_t v42 = v14 & 0xFFFFFFFFFFFFLL;
  }
  if (!v42 && (v14 & ~v37 & 0x2000000000000000) == 0)
  {
    swift_bridgeObjectRetain((unint64_t)v9._object);
    swift_bridgeObjectRelease(v37);
    Swift::String v177 = v9;
    goto LABEL_76;
  }
  uint64_t v43 = (uint64_t)v9._object & 0x2000000000000000;
  unint64_t v44 = ((unint64_t)v9._object >> 56) & 0xF;
  if ((v37 & 0x2000000000000000) == 0 || !v43)
  {
LABEL_34:
    uint64_t v170 = v9._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
    if (v43) {
      uint64_t v46 = ((unint64_t)v9._object >> 56) & 0xF;
    }
    else {
      uint64_t v46 = v9._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
    }
    swift_bridgeObjectRetain_n((uint64_t)v9._object, 2);
    if (((uint64_t)v9._object & 0x1000000000000000) != 0)
    {
LABEL_162:
      swift_bridgeObjectRetain_n(object, 5);
      v154._unint64_t rawBits = 1;
      v155._unint64_t rawBits = (v46 << 16) | 1;
      v156._unint64_t rawBits = _StringGuts.validateScalarRange(_:)(v154, v155, countAndFlagsBits, object);
      if (v156._rawBits < 0x10000) {
        v156._rawBits |= 3;
      }
      Swift::Int v47 = specialized Collection.count.getter(v156, v157, countAndFlagsBits, object);
      swift_bridgeObjectRelease(object);
      if ((v37 & 0x1000000000000000) == 0)
      {
LABEL_39:
        BOOL v48 = __OFADD__(v42, v47);
        int64_t v49 = v42 + v47;
        if (!v48) {
          goto LABEL_40;
        }
        goto LABEL_167;
      }
    }
    else
    {
      swift_bridgeObjectRetain_n((uint64_t)v9._object, 4);
      Swift::Int v47 = v46;
      if ((v37 & 0x1000000000000000) == 0) {
        goto LABEL_39;
      }
    }
    Swift::Int v158 = String.UTF8View._foreignCount()();
    int64_t v49 = v158 + v47;
    if (!__OFADD__(v158, v47))
    {
LABEL_40:
      if ((v14 & ~v37 & 0x2000000000000000) == 0
        || !swift_isUniquelyReferenced_nonNull_native(v37 & 0xFFFFFFFFFFFFFFFLL))
      {
        if (v49 <= 15)
        {
          unint64_t v50 = (unint64_t)v177._object;
          goto LABEL_52;
        }
LABEL_48:
        _StringGuts.prepareForAppendInPlace(totalCount:otherUTF8Count:)(v49, v47);
        swift_bridgeObjectRelease_n(object, 4);
        if ((object & 0x1000000000000000) != 0)
        {
          swift_bridgeObjectRelease(object);
          _StringGuts._foreignAppendInPlace(_:)(countAndFlagsBits, object, 0, v46);
LABEL_71:
          swift_bridgeObjectRelease(object);
          goto LABEL_76;
        }
        if (v43)
        {
          swift_bridgeObjectRelease_n(object, 2);
          uint64_t v174 = countAndFlagsBits;
          uint64_t v175 = object & 0xFFFFFFFFFFFFFFLL;
          unint64_t v53 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, v44, (uint64_t)&v174, v44);
          _StringGuts.appendInPlace(_:isASCII:)(v53, v54, (object & 0x4000000000000000) != 0);
          goto LABEL_76;
        }
        if ((countAndFlagsBits & 0x1000000000000000) != 0)
        {
          swift_bridgeObjectRelease(object);
          id v86 = (id)((object & 0xFFFFFFFFFFFFFFFLL) + 32);
          uint64_t v87 = v170;
          uint64_t v88 = v170;
LABEL_70:
          uint64_t v89 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, v87, (uint64_t)v86, v88);
          _StringGuts.appendInPlace(_:isASCII:)(v89, v90, countAndFlagsBits < 0);
          goto LABEL_71;
        }
LABEL_168:
        id v86 = _StringObject.sharedUTF8.getter(countAndFlagsBits, object);
        uint64_t v88 = v159;
        swift_bridgeObjectRelease(object);
        if (v88 < v170) {
          _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x745uLL, 0);
        }
        uint64_t v87 = v170;
        goto LABEL_70;
      }
      unint64_t v50 = (unint64_t)v177._object;
      int64_t v51 = _StringGuts.nativeUnusedCapacity.getter(v177._countAndFlagsBits, (uint64_t)v177._object);
      if ((v52 & 1) == 0)
      {
        if (v49 <= 15 && ((v50 & 0x2000000000000000) != 0 || v51 < v47))
        {
LABEL_52:
          swift_bridgeObjectRelease_n(object, 5);
          unint64_t v55 = v177._countAndFlagsBits;
          swift_bridgeObjectRetain(v50);
          unint64_t v56 = _StringGuts._convertedToSmall()(v55, v50);
          unint64_t v58 = v57;
          swift_bridgeObjectRelease(v50);
          v59._unint64_t rawBits = (v46 << 16) | 1;
          v60._unint64_t rawBits = 1;
          v61._unint64_t rawBits = _StringGuts.validateScalarRange(_:)(v60, v59, countAndFlagsBits, object);
          if (v61._rawBits < 0x10000) {
            v61._rawBits |= 3;
          }
          unint64_t v63 = specialized String.init(_:)(v61, v62, countAndFlagsBits, object);
          unint64_t v65 = v64;
          swift_bridgeObjectRelease(object);
          unint64_t v66 = _StringGuts._convertedToSmall()(v63, v65);
          unint64_t v68 = v67;
          swift_bridgeObjectRelease(v65);
          unint64_t v69 = specialized _SmallString.init(_:appending:)(v56, v58, v66, v68);
          if ((v71 & 1) == 0)
          {
            unint64_t v72 = v69;
            Swift::String::Index v73 = v70;
            swift_bridgeObjectRelease(v50);
            v177._uint64_t countAndFlagsBits = v72;
            v177._uint64_t object = v73;
            goto LABEL_76;
          }
          goto LABEL_170;
        }
        goto LABEL_48;
      }
LABEL_171:
      unint64_t v160 = 258;
LABEL_172:
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/StringGutsRangeReplaceable.swift", 38, 2, v160, 0);
    }
LABEL_167:
    __break(1u);
    goto LABEL_168;
  }
  unint64_t v45 = v41 + v44;
  if (v41 + v44 > 0xF)
  {
    uint64_t v43 = 1;
    goto LABEL_34;
  }
  if (v44)
  {
    char v74 = 0;
    unint64_t v75 = 0;
    unint64_t v76 = v37;
    do
    {
      unint64_t v77 = v41 + v75;
      unint64_t v78 = v75 + 1;
      if (v75 >= 8) {
        unint64_t v79 = (unint64_t)v9._object;
      }
      else {
        unint64_t v79 = v9._countAndFlagsBits;
      }
      unint64_t v80 = v79 >> (v74 & 0x38);
      char v81 = (8 * v41 + v74) & 0x38;
      uint64_t v82 = (-255 << v81) - 1;
      unint64_t v83 = (unint64_t)v80 << v81;
      unint64_t v84 = v83 | v82 & v76;
      unint64_t v85 = v83 | v82 & v14;
      if (v77 < 8) {
        unint64_t v14 = v85;
      }
      else {
        unint64_t v76 = v84;
      }
      v74 += 8;
      unint64_t v75 = v78;
    }
    while (v44 != v78);
  }
  else
  {
    unint64_t v76 = v37;
  }
  swift_bridgeObjectRelease(v37);
  unint64_t v91 = 0xA000000000000000;
  if (!(v14 & 0x8080808080808080 | v76 & 0x80808080808080)) {
    unint64_t v91 = 0xE000000000000000;
  }
  v177._uint64_t countAndFlagsBits = v14;
  v177._uint64_t object = (void *)(v91 & 0xFF00000000000000 | (v45 << 56) | v76 & 0xFFFFFFFFFFFFFFLL);
LABEL_76:
  uint64_t v92 = (uint64_t)v177._object;
  uint64_t v93 = ((unint64_t)v177._object >> 56) & 0xF;
  if (((uint64_t)v177._object & 0x2000000000000000) == 0) {
    uint64_t v93 = v177._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
  }
  if (v93 || (v177._countAndFlagsBits & ~(uint64_t)v177._object & 0x2000000000000000) != 0)
  {
    if (((uint64_t)v177._object & 0x2000000000000000) == 0
      || (unint64_t v94 = specialized _SmallString.init(_:appending:)(v177._countAndFlagsBits, (unint64_t)v177._object, 0x5B28uLL, 0xE200000000000000), (v96 & 1) != 0))
    {
      swift_bridgeObjectRetain(0xE200000000000000);
      _StringGuts.append(_:)(23336, 0xE200000000000000, 0, 2);
      swift_bridgeObjectRelease_n(0xE200000000000000, 2);
      unint64_t v98 = (unint64_t)v177._object;
      unint64_t v97 = v177._countAndFlagsBits;
    }
    else
    {
      unint64_t v97 = v94;
      unint64_t v98 = v95;
      swift_bridgeObjectRelease(v92);
      swift_bridgeObjectRelease(0xE200000000000000);
    }
  }
  else
  {
    swift_bridgeObjectRelease((uint64_t)v177._object);
    unint64_t v98 = 0xE200000000000000;
    unint64_t v97 = 23336;
  }
  uint64_t v99 = v179;
  unint64_t v100 = HIBYTE(v179) & 0xF;
  if ((v179 & 0x2000000000000000) == 0) {
    unint64_t v100 = v178 & 0xFFFFFFFFFFFFLL;
  }
  uint64_t v161 = object;
  if (v100 || (v178 & ~v179 & 0x2000000000000000) != 0)
  {
    if ((v179 & 0x2000000000000000) != 0)
    {
      if ((v98 & 0x2000000000000000) != 0)
      {
        unint64_t v102 = specialized _SmallString.init(_:appending:)(v178, v179, v97, v98);
        if ((v104 & 1) == 0)
        {
          unint64_t v105 = v102;
          unint64_t v106 = v103;
          swift_bridgeObjectRelease(v99);
          swift_bridgeObjectRelease(v98);
          unint64_t v178 = v105;
          unint64_t v179 = v106;
          goto LABEL_97;
        }
        goto LABEL_95;
      }
    }
    else if ((v98 & 0x2000000000000000) != 0)
    {
LABEL_95:
      uint64_t v101 = HIBYTE(v98) & 0xF;
      goto LABEL_96;
    }
    uint64_t v101 = v97 & 0xFFFFFFFFFFFFLL;
LABEL_96:
    swift_bridgeObjectRetain(v98);
    _StringGuts.append(_:)(v97, v98, 0, v101);
    swift_bridgeObjectRelease_n(v98, 2);
    goto LABEL_97;
  }
  swift_bridgeObjectRelease(v179);
  unint64_t v178 = v97;
  unint64_t v179 = v98;
LABEL_97:
  uint64_t object = v164;
  uint64_t v42 = v167;
  uint64_t v170 = v164 >> 1;
  Swift::UInt64 v107 = v166;
  unint64_t v44 = (unint64_t)v165;
  if (v164 >> 1 != v167)
  {
    uint64_t v169 = v173 + 16;
    uint64_t v46 = v173 + 32;
    unint64_t v14 = 1;
    long long v168 = xmmword_18162AC80;
    long long v163 = xmmword_18162AC90;
    unint64_t v37 = v167;
    uint64_t v162 = v5;
    while (1)
    {
      uint64_t v43 = v172;
      specialized ArraySlice._checkSubscript(_:wasNativeTypeChecked:)(v37, v171, v172, v42, object);
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v173 + 16))(v44, v43 + *(void *)(v173 + 72) * v37, v5);
      uint64_t countAndFlagsBits = v37 + 1;
      if (__OFADD__(v37, 1))
      {
        __break(1u);
        goto LABEL_162;
      }
      Swift::Int v117 = *(void (**)(void *, char *, uint64_t))v46;
      (*(void (**)(char *, unint64_t, uint64_t))v46)(v107, v44, v5);
      if ((v14 & 1) == 0) {
        break;
      }
LABEL_110:
      uint64_t v114 = canonical specialized generic type metadata accessor for _ContiguousArrayStorage<Any>();
      inited = swift_initStackObject(v114, v176);
      *((_OWORD *)inited + 1) = v168;
      inited[7] = v5;
      boxed_opaque_existential_0Tm = __swift_allocate_boxed_opaque_existential_0Tm(inited + 4);
      v117(boxed_opaque_existential_0Tm, v107, v5);
      specialized _debugPrint<A>(_:separator:terminator:to:)((uint64_t)inited, 0x20uLL, 0xE100000000000000, 0, 0xE000000000000000, (uint64_t *)&v178);
      swift_bridgeObjectRelease((uint64_t)inited);
      swift_bridgeObjectRelease(0xE000000000000000);
      swift_bridgeObjectRelease(0xE100000000000000);
      unint64_t v14 = 0;
      ++v37;
      if (countAndFlagsBits == v170) {
        goto LABEL_98;
      }
    }
    uint64_t v119 = v178;
    unint64_t v118 = v179;
    unint64_t v120 = HIBYTE(v179) & 0xF;
    if ((v179 & 0x2000000000000000) != 0) {
      unint64_t v121 = HIBYTE(v179) & 0xF;
    }
    else {
      unint64_t v121 = v178 & 0xFFFFFFFFFFFFLL;
    }
    if (!v121 && (v178 & ~v179 & 0x2000000000000000) == 0)
    {
      swift_bridgeObjectRelease(v179);
      unint64_t v178 = 8236;
      unint64_t v150 = 0xE200000000000000;
LABEL_149:
      unint64_t v179 = v150;
      goto LABEL_109;
    }
    if ((v179 & 0x2000000000000000) != 0 && v120 <= 0xD)
    {
      unint64_t v122 = 8 * (HIBYTE(v179) & 7);
      uint64_t v123 = (-255 << v122) - 1;
      uint64_t v124 = 44 << v122;
      char v125 = v120 + 1;
      if (v120 >= 8)
      {
        uint64_t v126 = v124 | v123 & v179;
      }
      else
      {
        uint64_t v119 = v124 | v123 & v178;
        if (v120 != 7)
        {
          uint64_t v119 = (32 << (8 * (v125 & 7u))) | ((-255 << (8 * (v125 & 7u))) - 1) & v119;
          uint64_t v149 = v179;
          goto LABEL_146;
        }
        char v125 = 8;
        uint64_t v126 = v179;
      }
      uint64_t v149 = (32 << (8 * (v125 & 7u))) | ((-255 << (8 * (v125 & 7u))) - 1) & v126;
LABEL_146:
      swift_bridgeObjectRelease(v179);
      swift_bridgeObjectRelease(0xE200000000000000);
      unint64_t v151 = 0xE000000000000000;
      if (v119 & 0x8080808080808080 | v149 & 0x80808080808080) {
        unint64_t v151 = 0xA000000000000000;
      }
      unint64_t v150 = (v151 & 0xFF00000000000000 | (v120 << 56) | v149 & 0xFFFFFFFFFFFFFFLL) + 0x200000000000000;
      unint64_t v178 = v119;
      goto LABEL_149;
    }
    swift_bridgeObjectRetain_n(0xE200000000000000, 6);
    if ((v118 & 0x1000000000000000) != 0)
    {
      Swift::Int v152 = String.UTF8View._foreignCount()();
      int64_t v111 = v152 + 2;
      if (__OFADD__(v152, 2))
      {
LABEL_152:
        __break(1u);
        goto LABEL_153;
      }
    }
    else
    {
      BOOL v48 = __OFADD__(v121, 2);
      int64_t v111 = v121 + 2;
      if (v48) {
        goto LABEL_152;
      }
    }
    if ((v119 & ~v118 & 0x2000000000000000) != 0
      && swift_isUniquelyReferenced_nonNull_native(v118 & 0xFFFFFFFFFFFFFFFLL))
    {
      int64_t v127 = _StringGuts.nativeUnusedCapacity.getter(v119, v118);
      if (v128) {
        goto LABEL_171;
      }
      BOOL v130 = (v118 & 0x2000000000000000) == 0 && v127 > 1;
      if (v111 > 15 || v130) {
        goto LABEL_108;
      }
    }
    else if (v111 > 15)
    {
LABEL_108:
      _StringGuts.prepareForAppendInPlace(totalCount:otherUTF8Count:)(v111, 2);
      swift_bridgeObjectRelease_n(0xE200000000000000, 6);
      Swift::String v177 = (Swift::String)v163;
      uint64_t v112 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, 2, (uint64_t)&v177, 2);
      _StringGuts.appendInPlace(_:isASCII:)(v112, v113, 1);
      swift_bridgeObjectRelease(0xE200000000000000);
LABEL_109:
      uint64_t v42 = v167;
      Swift::UInt64 v107 = v166;
      unint64_t v44 = (unint64_t)v165;
      goto LABEL_110;
    }
    swift_bridgeObjectRelease_n(0xE200000000000000, 5);
    swift_bridgeObjectRetain(v118);
    unint64_t v131 = _StringGuts._convertedToSmall()(v119, v118);
    unint64_t v133 = v132;
    swift_bridgeObjectRelease(v118);
    v134._unint64_t rawBits = 1;
    v135._unint64_t rawBits = 131073;
    v136._unint64_t rawBits = _StringGuts.validateScalarRange(_:)(v134, v135, 0x202CuLL, 0xE200000000000000);
    if (v136._rawBits < 0x10000) {
      v136._rawBits |= 3;
    }
    unint64_t v138 = specialized String.init(_:)(v136, v137, 0x202CuLL, 0xE200000000000000);
    unint64_t v140 = v139;
    swift_bridgeObjectRelease(0xE200000000000000);
    unint64_t v141 = _StringGuts._convertedToSmall()(v138, v140);
    unint64_t v143 = v142;
    swift_bridgeObjectRelease(v140);
    unint64_t v144 = specialized _SmallString.init(_:appending:)(v131, v133, v141, v143);
    if (v146) {
      goto LABEL_170;
    }
    unint64_t v147 = v144;
    unint64_t v148 = v145;
    swift_bridgeObjectRelease(v118);
    swift_bridgeObjectRelease(0xE200000000000000);
    unint64_t v178 = v147;
    unint64_t v179 = v148;
    uint64_t v5 = v162;
    uint64_t object = v164;
    goto LABEL_109;
  }
LABEL_98:
  uint64_t v108 = v178;
  unint64_t v109 = HIBYTE(v179) & 0xF;
  unint64_t v110 = v178 & 0xFFFFFFFFFFFFLL;
  if ((v179 & 0x2000000000000000) != 0) {
    unint64_t v110 = HIBYTE(v179) & 0xF;
  }
  if (v110 || (v178 & ~v179 & 0x2000000000000000) != 0)
  {
    int64_t v111 = v161;
    if ((v179 & 0x2000000000000000) != 0 && v109 <= 0xD)
    {
      if (v109 < 8)
      {
        uint64_t v108 = (93 << (8 * (HIBYTE(v179) & 7u))) | ((-255 << (8 * (HIBYTE(v179) & 7u))) - 1) & v178;
        if (v109 != 7) {
          uint64_t v108 = (41 << (8 * ((v109 + 1) & 7))) | ((-255 << (8 * ((v109 + 1) & 7))) - 1) & v108;
        }
      }
      swift_bridgeObjectRelease(v179);
      swift_bridgeObjectRelease(v111);
      swift_bridgeObjectRelease(0xE200000000000000);
    }
    else
    {
LABEL_153:
      _StringGuts.append(_:)(10589, 0xE200000000000000, 0, 2);
      swift_bridgeObjectRelease(0xE200000000000000);
      swift_bridgeObjectRelease(v111);
      return v178;
    }
  }
  else
  {
    swift_bridgeObjectRelease(v179);
    swift_bridgeObjectRelease(v161);
    return 10589;
  }
  return v108;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ArraySlice<A>(uint64_t a1, uint64_t a2)
{
  return protocol witness for CustomStringConvertible.description.getter in conformance ArraySlice<A>(a1, a2, ArraySlice.description.getter);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ArraySlice<A>(uint64_t a1, uint64_t a2)
{
  return protocol witness for CustomStringConvertible.description.getter in conformance ArraySlice<A>(a1, a2, ArraySlice.debugDescription.getter);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ArraySlice<A>(uint64_t a1, uint64_t a2, uint64_t (*a3)(void, void, void, void, void))
{
  return a3(*v3, v3[1], v3[2], v3[3], *(void *)(a1 + 16));
}

id ArraySlice._cPointerArgs()(void *a1)
{
  return swift_unknownObjectRetain(a1);
}

uint64_t _SliceBuffer.withUnsafeBufferPointer<A>(_:)(uint64_t (*a1)(uint64_t), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7)
{
  if (__OFSUB__(a6 >> 1, a5))
  {
    __break(1u);
LABEL_5:
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeBufferPointer with negative count", 39, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x53FuLL, 0);
  }
  if ((((a6 >> 1) - a5) & 0x8000000000000000) != 0) {
    goto LABEL_5;
  }
  return a1(a4 + *(void *)(*(void *)(a7 - 8) + 72) * a5);
}

void *$defer #1 <A><A1>() in ArraySlice.withUnsafeMutableBufferPointer<A>(_:)(void *result, uint64_t a2, uint64_t a3)
{
  if (*result) {
    BOOL v3 = *result == a2;
  }
  else {
    BOOL v3 = 0;
  }
  if (!v3 || result[1] != a3) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "ArraySlice withUnsafeMutableBufferPointer: replacing the buffer is not allowed", 78, 2, "Swift/ArraySlice.swift", 22, 2, 0x4EAuLL, 0);
  }
  return result;
}

uint64_t _SliceBuffer.replaceSubrange<A>(_:with:elementsOf:)(uint64_t a1, uint64_t a2, char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8 = v7;
  uint64_t v108 = a4;
  unint64_t v100 = *(unint64_t **)(a5 + 16);
  uint64_t v101 = *(v100 - 1);
  MEMORY[0x1F4188790](a1);
  unint64_t v15 = (char *)&v89 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v17, v16, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  uint64_t v19 = MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v20 = MEMORY[0x1F4188790](v19);
  Swift::UInt64 v107 = (char *)&v89 - v21;
  uint64_t v22 = *(void *)(a6 - 8);
  MEMORY[0x1F4188790](v20);
  Swift::String::Index v26 = (char *)&v89 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v104 = a2;
  uint64_t v27 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_36;
  }
  uint64_t v103 = (uint64_t)a3;
  unint64_t v28 = &a3[-v27];
  if (__OFSUB__(a3, v27))
  {
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  uint64_t v99 = a7;
  uint64_t v29 = *(void *)(v8 + 16);
  uint64_t v30 = *(void *)(v8 + 24) >> 1;
  BOOL v31 = __OFSUB__(v30, v29);
  uint64_t v32 = v30 - v29;
  if (v31)
  {
LABEL_37:
    __break(1u);
LABEL_38:
    LODWORD(v87) = 0;
    unint64_t v86 = 14377;
    LOBYTE(WitnessTable) = 2;
    unint64_t v83 = "Division by zero";
    uint64_t v84 = 16;
    goto LABEL_53;
  }
  uint64_t v33 = a1;
  uint64_t v34 = v24;
  uint64_t v106 = a6;
  uint64_t v97 = v32;
  unint64_t v98 = v28;
  uint64_t v93 = v23;
  unint64_t v94 = v15;
  unint64_t v35 = *(void **)v8;
  uint64_t v36 = type metadata accessor for __ContiguousArrayStorageBase();
  id v37 = swift_unknownObjectRetain(v35);
  unint64_t v38 = (__objc2_class **)swift_dynamicCastClass((uint64_t)v37, v36);
  if (!v38)
  {
    swift_unknownObjectRelease(v35);
    unint64_t v38 = &_swiftEmptyArrayStorage;
  }
  uint64_t v39 = v100;
  uint64_t v40 = *(void *)(v101 + 72);
  if (!v40) {
    goto LABEL_38;
  }
  uint64_t v41 = *(void *)(v8 + 8) + v40 * v29;
  unint64_t v105 = (char *)v38 + ((*(unsigned __int8 *)(v101 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v101 + 80));
  uint64_t v42 = v41 - (void)v105;
  if (v40 == -1 && v42 == 0x8000000000000000) {
    goto LABEL_52;
  }
  uint64_t v44 = v33 - v29;
  if (__OFSUB__(v33, v29))
  {
    __break(1u);
    goto LABEL_40;
  }
  uint64_t v92 = v34;
  uint64_t v45 = v42 / v40;
  uint64_t v46 = v44 + v45;
  if (__OFADD__(v44, v45))
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  uint64_t v47 = v104 - v29;
  if (__OFSUB__(v104, v29))
  {
LABEL_41:
    __break(1u);
    goto LABEL_42;
  }
  unint64_t v91 = AssociatedTypeWitness;
  uint64_t v48 = v47 + v45;
  if (__OFADD__(v47, v45))
  {
LABEL_42:
    __break(1u);
LABEL_43:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
  }
  if (v48 < v46) {
    goto LABEL_43;
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v22 + 16))(v26, v108, v106);
  uint64_t v49 = v48 - v46;
  if (__OFSUB__(v48, v46))
  {
    __break(1u);
LABEL_45:
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeMutablePointer.deinitialize with negative count", 53, 2, "Swift/UnsafePointer.swift", 25, 2, 0x493uLL, 0);
  }
  if (v49 < 0) {
    goto LABEL_45;
  }
  uint64_t v102 = v8;
  uint64_t v50 = v40;
  unint64_t v51 = (unint64_t)&v105[v46 * v40];
  unint64_t v95 = *(void (**)(uint64_t, uint64_t))(v22 + 8);
  uint64_t v96 = v22 + 8;
  v95(v108, v106);
  char v52 = v39;
  swift_arrayDestroy(v51, v48 - v46, v39);
  unint64_t v53 = (char *)(v103 - v49);
  if (__OFSUB__(v103, v49))
  {
    __break(1u);
LABEL_47:
    __break(1u);
    goto LABEL_48;
  }
  uint64_t v54 = v103;
  uint64_t v108 = v50;
  unint64_t v55 = (char *)(v51 + v50 * v103);
  size_t v90 = v55;
  uint64_t v104 = v50 * v103;
  if (!v53)
  {
    uint64_t v62 = swift_release((uint64_t)v38);
    uint64_t v57 = v99;
    uint64_t v59 = (uint64_t)v39;
    uint64_t v58 = v106;
    goto LABEL_24;
  }
  unint64_t v56 = v38[2];
  uint64_t v57 = v99;
  uint64_t v58 = v106;
  if (__OFSUB__(v56, v48))
  {
    __break(1u);
    goto LABEL_51;
  }
  uint64_t v59 = (uint64_t)v52;
  UnsafeMutablePointer.moveInitialize(from:count:)(&v105[v48 * v108], (uint64_t)v56 - v48, v55, v52);
  Swift::String::Index v60 = v38[2];
  BOOL v31 = __OFADD__(v60, v53);
  Swift::String::Index v61 = (__objc2_class *)&v53[(void)v60];
  if (v31)
  {
LABEL_51:
    __break(1u);
LABEL_52:
    LODWORD(v87) = 0;
    unint64_t v86 = 14384;
    LOBYTE(WitnessTable) = 2;
    unint64_t v83 = "Division results in an overflow";
    uint64_t v84 = 31;
LABEL_53:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, v83, v84, 2, "Swift/IntegerTypes.swift", 24, WitnessTable, v86, v87);
  }
  v38[2] = v61;
  uint64_t v62 = swift_release((uint64_t)v38);
LABEL_24:
  uint64_t v63 = v102;
  if (v54 <= 0) {
    goto LABEL_30;
  }
  MEMORY[0x1F4188790](v62);
  unint64_t v66 = (unint64_t *)type metadata accessor for _ContiguousArrayBuffer(0, v59, v64, v65);
  *(&v89 - 6) = (uint64_t)v66;
  *(&v89 - 5) = v58;
  uint64_t WitnessTable = swift_getWitnessTable(protocol conformance descriptor for _ContiguousArrayBuffer<A>, v66, v67);
  unint64_t v86 = v57;
  uint64_t v87 = v54;
  unint64_t v88 = v51;
  (*(void (**)(void *__return_ptr, char *(*)(char *, uint64_t), uint64_t *, void *, uint64_t))(*(void *)(v57 + 8) + 72))(v109, partial apply for closure #1 in _ArrayBufferProtocol.replaceSubrange<A>(_:with:elementsOf:), &v89 - 8, &unk_1ECA06270, v58);
  if (v109[0])
  {
    unint64_t v68 = v107;
    (*(void (**)(uint64_t, uint64_t))(v57 + 64))(v58, v57);
    unint64_t v69 = v94;
    unint64_t v70 = (unint64_t)v90;
    if (v104 >= 1)
    {
      uint64_t v71 = v59;
      unint64_t v105 = *(char **)(v57 + 80);
      uint64_t v106 = v57 + 80;
      uint64_t v103 = *(void *)(v57 + 192);
      uint64_t v104 = v57 + 192;
      unint64_t v72 = (void (**)(char *))(v101 + 16);
      Swift::String::Index v73 = (void (**)(unint64_t, char *, uint64_t))(v101 + 32);
      do
      {
        char v74 = (void (*)(void *, void))((uint64_t (*)(void *, char *, uint64_t, uint64_t))v105)(v109, v68, v58, v57);
        (*v72)(v69);
        v74(v109, 0);
        unint64_t v68 = v107;
        (*v73)(v51, v69, v71);
        v51 += v108;
        ((void (*)(char *, uint64_t, uint64_t))v103)(v68, v58, v57);
      }
      while (v51 < v70);
    }
    uint64_t v75 = v92;
    uint64_t v76 = v93;
    unint64_t v77 = v68;
    unint64_t v78 = v91;
    (*(void (**)(uint64_t, char *, const char *))(v92 + 32))(v93, v77, v91);
    _expectEnd<A>(of:is:)((uint64_t)v26, v76, v58, v57);
    (*(void (**)(uint64_t, const char *))(v75 + 8))(v76, v78);
    uint64_t result = ((uint64_t (*)(char *, uint64_t))v95)(v26, v58);
    uint64_t v63 = v102;
  }
  else
  {
LABEL_30:
    uint64_t result = ((uint64_t (*)(char *, uint64_t))v95)(v26, v58);
  }
  uint64_t v80 = *(void *)(v63 + 16);
  BOOL v31 = __OFADD__(v80, v97);
  uint64_t v81 = v80 + v97;
  if (v31) {
    goto LABEL_47;
  }
  BOOL v31 = __OFADD__(v81, v98);
  uint64_t v82 = &v98[v81];
  if (v31)
  {
LABEL_48:
    __break(1u);
LABEL_49:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, 2, 0xD7BuLL, 0);
  }
  if (((unint64_t)v82 & 0x8000000000000000) != 0) {
    goto LABEL_49;
  }
  *(void *)(v63 + 24) = *(void *)(v63 + 24) & 1 | (2 * (void)v82);
  return result;
}

uint64_t static ArraySlice<A>.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v93 = a6;
  uint64_t v94 = a2;
  uint64_t v14 = *(char **)(a9 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v92 = &v65[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v18 = type metadata accessor for Optional(255, a9, v16, v17);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0, (uint64_t)v18, (uint64_t)v18, 0, 0);
  uint64_t v20 = MEMORY[0x1F4188790](TupleTypeMetadata2);
  uint64_t v21 = (uint64_t)*(v18 - 1);
  uint64_t v22 = MEMORY[0x1F4188790](v20);
  uint64_t v23 = MEMORY[0x1F4188790](v22);
  uint64_t v24 = MEMORY[0x1F4188790](v23);
  Swift::String::Index v26 = &v65[-v25];
  uint64_t result = MEMORY[0x1F4188790](v24);
  uint64_t v34 = &v65[-v30];
  unint64_t v35 = (a4 >> 1) - v31;
  if (__OFSUB__(a4 >> 1, v31))
  {
    __break(1u);
    goto LABEL_36;
  }
  unint64_t v36 = a8 >> 1;
  if (__OFSUB__(a8 >> 1, a7))
  {
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  if (v35 != (a8 >> 1) - a7) {
    return 0;
  }
  if (!v35) {
    return 1;
  }
  uint64_t v87 = v14;
  uint64_t v37 = *((void *)v14 + 9);
  uint64_t v38 = v94 + v37 * v31;
  if (v38 == v93 + v37 * a7) {
    return 1;
  }
  unint64_t v77 = v28;
  uint64_t v78 = v37;
  uint64_t v86 = v36;
  unint64_t v88 = v33;
  uint64_t v89 = v29;
  uint64_t v72 = v32;
  int64_t v80 = a4 >> 1;
  uint64_t v81 = result;
  uint64_t v85 = a7;
  uint64_t v76 = v31;
  if (a4 >> 1 != v31)
  {
    uint64_t v42 = a1;
    uint64_t v43 = v31;
    specialized ArraySlice._checkSubscript(_:wasNativeTypeChecked:)(v31, v42, v94, v31, a4);
    uint64_t v39 = v14;
    uint64_t result = (*((uint64_t (**)(unsigned char *, uint64_t, uint64_t))v14 + 2))(v34, v38, a9);
    uint64_t v90 = v43 + 1;
    if (!__OFADD__(v43, 1))
    {
      uint64_t v40 = (void (*)(unsigned char *, void, uint64_t, uint64_t))*((void *)v14 + 7);
      v40(v34, 0, 1, a9);
      goto LABEL_10;
    }
LABEL_37:
    __break(1u);
    return result;
  }
  uint64_t v39 = v14;
  uint64_t v40 = (void (*)(unsigned char *, void, uint64_t, uint64_t))*((void *)v14 + 7);
  uint64_t v41 = v31;
  v40(&v65[-v30], 1, 1, a9);
  uint64_t v90 = v41;
LABEL_10:
  unint64_t v83 = *(void (**)(unsigned char *, unsigned char *, Class *))(v21 + 16);
  uint64_t v84 = v21 + 16;
  v83(v26, v34, v18);
  uint64_t v46 = (char *)*((void *)v39 + 6);
  uint64_t v45 = v39 + 48;
  uint64_t v44 = v46;
  unsigned int v47 = ((uint64_t (*)(unsigned char *, uint64_t, uint64_t))v46)(v26, 1, a9);
  uint64_t v48 = v21 + 8;
  unint64_t v91 = *(void (**)(unsigned char *, Class *))(v21 + 8);
  if (v47 == 1)
  {
LABEL_11:
    uint64_t v49 = v91;
    v91(v34, v18);
    v49(v26, v18);
    return 1;
  }
  uint64_t v71 = (void (**)(uint64_t, uint64_t, uint64_t))(v87 + 16);
  uint64_t v82 = v87 + 56;
  char v74 = (void (**)(uint64_t, uint64_t, Class *))(v21 + 32);
  unint64_t v68 = (void (**)(unsigned char *, uint64_t, uint64_t))(v87 + 32);
  uint64_t v69 = a10;
  uint64_t v67 = a10 + 8;
  unint64_t v70 = (void (**)(uint64_t, uint64_t))(v87 + 8);
  uint64_t v50 = v85;
  uint64_t v87 = v44;
  uint64_t v73 = v48;
  while (1)
  {
    v91(v26, v18);
    if (v50 == v86)
    {
      uint64_t v51 = 1;
      uint64_t v75 = v86;
      char v52 = v89;
    }
    else
    {
      if (v50 < v85 || v50 >= v86) {
LABEL_31:
      }
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Index out of bounds", 19, 2, "Swift/SliceBuffer.swift", 23, 2, 0x132uLL, 0);
      (*v71)((uint64_t)v89, v93 + v50 * v78, a9);
      char v52 = v89;
      uint64_t v51 = 0;
      uint64_t v75 = v50 + 1;
    }
    unint64_t v79 = v40;
    v40(v52, v51, 1, a9);
    unint64_t v53 = v88;
    uint64_t v54 = (uint64_t)&v88[*(int *)(v81 + 48)];
    unint64_t v55 = *v74;
    (*v74)((uint64_t)v88, (uint64_t)v34, v18);
    v55(v54, (uint64_t)v52, v18);
    unint64_t v56 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v87;
    if (((unsigned int (*)(unsigned char *, uint64_t, uint64_t))v87)(v53, 1, a9) == 1)
    {
      if (v56(v54, 1, a9) != 1) {
        goto LABEL_33;
      }
      v91(v88, v18);
      goto LABEL_24;
    }
    uint64_t v57 = v45;
    uint64_t v58 = v77;
    v83(v77, v53, v18);
    uint64_t v59 = v57;
    if (v56(v54, 1, a9) == 1) {
      break;
    }
    Swift::String::Index v60 = v92;
    (*v68)(v92, v54, a9);
    int v66 = (*(uint64_t (**)(unsigned char *, unsigned char *, uint64_t))(v69 + 8))(v58, v60, a9);
    Swift::String::Index v61 = *v70;
    (*v70)((uint64_t)v60, a9);
    v61((uint64_t)v58, a9);
    unint64_t v56 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v87;
    v91(v53, v18);
    uint64_t v45 = v59;
    if ((v66 & 1) == 0) {
      return 0;
    }
LABEL_24:
    if (v90 == v80)
    {
      int64_t v62 = v80;
      uint64_t v40 = v79;
      v79(v34, 1, 1, a9);
      uint64_t v90 = v62;
    }
    else
    {
      uint64_t v40 = v79;
      if (v90 < v76 || v90 >= v80) {
        goto LABEL_31;
      }
      uint64_t v63 = v90;
      (*v71)((uint64_t)v34, v94 + v90 * v78, a9);
      uint64_t v90 = v63 + 1;
      v40(v34, 0, 1, a9);
    }
    v83(v26, v34, v18);
    unsigned int v64 = v56((uint64_t)v26, 1, a9);
    uint64_t v50 = v75;
    if (v64 == 1) {
      goto LABEL_11;
    }
  }
  (*v70)((uint64_t)v58, a9);
LABEL_33:
  (*(void (**)(unsigned char *, uint64_t))(v72 + 8))(v88, v81);
  return 0;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance <A> ArraySlice<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return static ArraySlice<A>.== infix(_:_:)(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), a5, *(void *)(a2 + 8), *(void *)(a2 + 16), *(void *)(a2 + 24), *(void *)(a3 + 16), *(void *)(a4 - 8)) & 1;
}

void ArraySlice<A>.hash(into:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v24 = a3;
  uint64_t v11 = *(void *)(a6 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v15 = (char *)&v21 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v16 = v13 >> 1;
  if (__OFSUB__(v13 >> 1, v12))
  {
    __break(1u);
  }
  else
  {
    Hasher._combine(_:)((v13 >> 1) - v12);
    if (v16 != a4)
    {
      uint64_t v17 = v11 + 16;
      if (a4 <= v16) {
        uint64_t v18 = v16;
      }
      else {
        uint64_t v18 = a4;
      }
      do
      {
        if (v18 == a4) {
          _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Index out of bounds", 19, 2, "Swift/SliceBuffer.swift", 23, 2, 0x132uLL, 0);
        }
        uint64_t v22 = a4 + 1;
        uint64_t v23 = v18;
        uint64_t v19 = v24 + *(void *)(v11 + 72) * a4;
        uint64_t v20 = v17;
        (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v15, v19, a6);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(a7 + 24))(a1, a6, a7);
        (*(void (**)(char *, uint64_t))(v11 + 8))(v15, a6);
        uint64_t v18 = v23;
        uint64_t v17 = v20;
        a4 = v22;
      }
      while (v16 != v22);
    }
  }
}

Swift::UInt ArraySlice<A>.hashValue.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v23 = a2;
  uint64_t v9 = *(void *)(a5 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v11 = (char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24[0] = 0;
  v24[1] = _swift_stdlib_Hashing_parameters ^ 0x736F6D6570736575;
  unint64_t v24[2] = unk_1EB208F00 ^ 0x646F72616E646F6DLL;
  v24[3] = _swift_stdlib_Hashing_parameters ^ 0x6C7967656E657261;
  v24[4] = unk_1EB208F00 ^ 0x7465646279746573;
  int64_t v13 = v12 >> 1;
  long long v25 = 0u;
  long long v26 = 0u;
  Swift::UInt result = (v12 >> 1) - v14;
  if (__OFSUB__(v12 >> 1, v14))
  {
    __break(1u);
  }
  else
  {
    Hasher._combine(_:)(result);
    if (v13 != a3)
    {
      uint64_t v16 = v9 + 16;
      if (a3 <= v13) {
        uint64_t v17 = v13;
      }
      else {
        uint64_t v17 = a3;
      }
      do
      {
        if (v17 == a3) {
          _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Index out of bounds", 19, 2, "Swift/SliceBuffer.swift", 23, 2, 0x132uLL, 0);
        }
        uint64_t v18 = a3 + 1;
        uint64_t v22 = v17;
        uint64_t v19 = v23 + *(void *)(v9 + 72) * a3;
        uint64_t v20 = v16;
        (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, v19, a5);
        (*(void (**)(void *, uint64_t, uint64_t))(a6 + 24))(v24, a5, a6);
        (*(void (**)(char *, uint64_t))(v9 + 8))(v11, a5);
        uint64_t v17 = v22;
        uint64_t v16 = v20;
        a3 = v18;
      }
      while (v13 != v18);
    }
    return Hasher._finalize()();
  }
  return result;
}

Swift::UInt protocol witness for Hashable.hashValue.getter in conformance <A> ArraySlice<A>(uint64_t a1, uint64_t a2)
{
  return ArraySlice<A>.hashValue.getter(a1, v2[1], v2[2], v2[3], *(void *)(a1 + 16), *(void *)(a2 - 8));
}

void protocol witness for Hashable.hash(into:) in conformance <A> ArraySlice<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  ArraySlice<A>.hash(into:)(a1, a2, v3[1], v3[2], v3[3], *(void *)(a2 + 16), *(void *)(a3 - 8));
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance <A> ArraySlice<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 - 8);
  v6[0] = 0;
  v6[1] = _swift_stdlib_Hashing_parameters ^ a1 ^ 0x736F6D6570736575;
  v6[2] = unk_1EB208F00 ^ 0x646F72616E646F6DLL;
  v6[3] = _swift_stdlib_Hashing_parameters ^ a1 ^ 0x6C7967656E657261;
  v6[4] = unk_1EB208F00 ^ 0x7465646279746573;
  long long v7 = 0u;
  long long v8 = 0u;
  ArraySlice<A>.hash(into:)((uint64_t)v6, a2, v3[1], v3[2], v3[3], *(void *)(a2 + 16), v4);
  return Hasher._finalize()();
}

void *ArraySlice.withUnsafeMutableBytes<A>(_:)(void (*a1)(uint64_t, uint64_t), uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3[2];
  uint64_t v5 = v3[3] >> 1;
  uint64_t v6 = v5 - v4;
  if (__OFSUB__(v5, v4))
  {
    __break(1u);
LABEL_7:
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeMutableBufferPointer with negative count", 46, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x47uLL, 0);
  }
  uint64_t v8 = *(void *)(a3 + 16);
  ArraySlice._makeMutableAndUnique()();
  uint64_t v9 = *(void *)(*(void *)(v8 - 8) + 72);
  if (v6 < 0) {
    goto LABEL_7;
  }
  uint64_t v10 = v3[1] + v9 * v3[2];
  v13[0] = v10;
  v13[1] = v6;
  uint64_t v11 = v6 * v9;
  if ((unsigned __int128)(v6 * (__int128)v9) >> 64 != (v6 * v9) >> 63)
  {
    __break(1u);
LABEL_9:
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeMutableRawBufferPointer with negative count", 49, 2, "Swift/UnsafeRawBufferPointer.swift", 34, 2, 0x68uLL, 0);
  }
  if (v11 < 0) {
    goto LABEL_9;
  }
  a1(v10, v10 + v11);
  return $defer #1 <A><A1>() in ArraySlice.withUnsafeMutableBufferPointer<A>(_:)(v13, v10, v6);
}

uint64_t ArraySlice.withUnsafeBytes<A>(_:)(uint64_t (*a1)(uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7)
{
  uint64_t v7 = (a6 >> 1) - a5;
  if (__OFSUB__(a6 >> 1, a5))
  {
    __break(1u);
LABEL_7:
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeBufferPointer with negative count", 39, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x53FuLL, 0);
  }
  if (v7 < 0) {
    goto LABEL_7;
  }
  uint64_t v8 = *(void *)(*(void *)(a7 - 8) + 72);
  uint64_t v9 = v7 * v8;
  if ((unsigned __int128)(v7 * (__int128)v8) >> 64 != (v7 * v8) >> 63)
  {
    __break(1u);
LABEL_9:
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeRawBufferPointer with negative count", 42, 2, "Swift/UnsafeRawBufferPointer.swift", 34, 2, 0x485uLL, 0);
  }
  if (v9 < 0) {
    goto LABEL_9;
  }
  return a1(a4 + v8 * a5, a4 + v8 * a5 + v9);
}

uint64_t ArraySlice.init(_startIndex:)(uint64_t a1)
{
  return _SliceBuffer.init(_buffer:shiftedToStartIndex:)((uint64_t)&_swiftEmptyArrayStorage, a1);
}

uint64_t _ArrayProtocol.init(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (int **)a3, a2, (uint64_t)&protocol requirements base descriptor for _ArrayProtocol, associated type descriptor for _ArrayProtocol._Buffer);
  uint64_t v7 = *(void *)(a3 + 16);
  uint64_t v8 = *(void *)(*(void *)(*(void *)(swift_getAssociatedConformanceWitness(a3, a2, (uint64_t)AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for _ArrayProtocol, associated conformance descriptor for _ArrayProtocol._ArrayProtocol._Buffer: _ArrayBufferProtocol)+ 8)+ 8)+ 8);

  return RangeReplaceableCollection.init<A>(_:)(a1, a2, (uint64_t)AssociatedTypeWitness, v7, v8);
}

uint64_t specialized RangeReplaceableCollection.init<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void (*v10)(uint64_t *__return_ptr, const char *, uint64_t);
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (int **)a3, a2, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Iterator);
  uint64_t v6 = *((void *)AssociatedTypeWitness - 1);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v8 = (char *)&v13 - v7;
  (*(void (**)(uint64_t, uint64_t))(a3 + 32))(a2, a3);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(a3, a2, (uint64_t)AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Sequence, associated conformance descriptor for Sequence.Sequence.Iterator: IteratorProtocol);
  uint64_t v10 = *(void (**)(uint64_t *__return_ptr, const char *, uint64_t))(AssociatedConformanceWitness + 16);
  v10(&v14, AssociatedTypeWitness, AssociatedConformanceWitness);
  if ((v14 & 0x100) != 0)
  {
    uint64_t v11 = 0;
  }
  else
  {
    LODWORD(v11) = 0;
    do
    {
      if (BYTE3(v11)) {
        _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/ValidUTF8Buffer.swift", 27, 2, 0xA7uLL, 0);
      }
      uint64_t v11 = ((v14 + 1) << (-(__clz(v11) & 0x18) & 0x18)) | v11;
      v10(&v14, AssociatedTypeWitness, AssociatedConformanceWitness);
    }
    while ((v14 & 0x100) == 0);
  }
  (*(void (**)(char *, const char *))(v6 + 8))(v8, AssociatedTypeWitness);
  return v11;
}

{
  const char *AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t AssociatedConformanceWitness;
  void (*v10)(uint64_t *__return_ptr, const char *, uint64_t);
  Swift::String::Index v11;
  Swift::String::Index v12;
  uint64_t v14;
  uint64_t v15;
  long long v16;
  uint64_t v17;
  unint64_t v18;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (int **)a3, a2, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Iterator);
  uint64_t v6 = *((void *)AssociatedTypeWitness - 1);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v8 = (char *)&v14 - v7;
  uint64_t v16 = xmmword_18162ACC0;
  uint64_t v17 = 0;
  uint64_t v18 = 0xE000000000000000;
  (*(void (**)(uint64_t, uint64_t))(a3 + 32))(a2, a3);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(a3, a2, (uint64_t)AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Sequence, associated conformance descriptor for Sequence.Sequence.Iterator: IteratorProtocol);
  uint64_t v10 = *(void (**)(uint64_t *__return_ptr, const char *, uint64_t))(AssociatedConformanceWitness + 16);
  v10(&v15, AssociatedTypeWitness, AssociatedConformanceWitness);
  if ((v15 & 0x100000000) == 0)
  {
    do
    {
      v11._unint64_t rawBits = *((void *)&v16 + 1);
      v12._unint64_t rawBits = *((void *)&v16 + 1);
      specialized Substring.UnicodeScalarView.replaceSubrange<A>(_:with:)(v11, v12);
      v10(&v15, AssociatedTypeWitness, AssociatedConformanceWitness);
    }
    while (BYTE4(v15) != 1);
  }
  (*(void (**)(char *, const char *))(v6 + 8))(v8, AssociatedTypeWitness);
  return v16;
}

uint64_t RangeReplaceableCollection.init<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a4 + 72))(a1, a3, a5, a2, a4);
}

{
  return RangeReplaceableCollection.init<A>(_:)(a1, a4, a2, a5, a3);
}

__objc2_class **_ArrayProtocol.filter(_:)(uint64_t (*a1)(char *), uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v46 = a1;
  uint64_t v47 = a2;
  uint64_t v6 = *(void *)(*(void *)(*(void *)(a4 + 16) + 8) + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, (int **)v6, a3, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
  uint64_t v10 = type metadata accessor for Optional(0, (uint64_t)AssociatedTypeWitness, v8, v9);
  uint64_t v37 = (uint64_t)*(v10 - 1);
  uint64_t v38 = v10;
  uint64_t v11 = MEMORY[0x1F4188790](v10);
  int64_t v13 = (char *)&v36 - v12;
  uint64_t v49 = *((void *)AssociatedTypeWitness - 1);
  uint64_t v14 = MEMORY[0x1F4188790](v11);
  uint64_t v42 = (char *)&v36 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v17 = (char *)&v36 - v16;
  uint64_t v18 = swift_getAssociatedTypeWitness(0, (int **)v6, a3, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Iterator);
  uint64_t v39 = *((void *)v18 - 1);
  MEMORY[0x1F4188790](v18);
  uint64_t v20 = (char *)&v36 - v19;
  uint64_t v50 = &_swiftEmptyArrayStorage;
  (*(void (**)(uint64_t, uint64_t))(v6 + 32))(a3, v6);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v6, a3, (uint64_t)v18, (uint64_t)&protocol requirements base descriptor for Sequence, associated conformance descriptor for Sequence.Sequence.Iterator: IteratorProtocol);
  uint64_t v23 = AssociatedConformanceWitness + 16;
  uint64_t v22 = *(void (**)(const char *, uint64_t))(AssociatedConformanceWitness + 16);
  uint64_t v48 = v18;
  uint64_t v45 = v22;
  v22(v18, AssociatedConformanceWitness);
  uint64_t v24 = v49;
  uint64_t v25 = v49 + 48;
  uint64_t v44 = *(unsigned int (**)(char *, uint64_t, const char *))(v49 + 48);
  if (v44(v13, 1, AssociatedTypeWitness) == 1)
  {
LABEL_2:
    (*(void (**)(char *, const char *))(v39 + 8))(v20, v48);
    (*(void (**)(char *, Class *))(v37 + 8))(v13, v38);
    return v50;
  }
  else
  {
    uint64_t v43 = v25;
    uint64_t v49 = *(void *)(v24 + 32);
    uint64_t v40 = v13;
    uint64_t v41 = (void (**)(char *, const char *))(v24 + 8);
    while (1)
    {
      ((void (*)(char *, char *, const char *))v49)(v17, v13, AssociatedTypeWitness);
      char v27 = v46(v17);
      if (v4) {
        break;
      }
      if (v27)
      {
        uint64_t v28 = v23;
        uint64_t v29 = AssociatedConformanceWitness;
        uint64_t v30 = v20;
        uint64_t v31 = v42;
        ((void (*)(char *, char *, const char *))v49)(v42, v17, AssociatedTypeWitness);
        uint64_t v34 = type metadata accessor for ContiguousArray(0, (uint64_t)AssociatedTypeWitness, v32, v33);
        uint64_t v35 = (uint64_t)v31;
        uint64_t v20 = v30;
        uint64_t AssociatedConformanceWitness = v29;
        uint64_t v23 = v28;
        int64_t v13 = v40;
        ContiguousArray.append(_:)(v35, (uint64_t)v34);
      }
      else
      {
        (*v41)(v17, AssociatedTypeWitness);
      }
      v45(v48, AssociatedConformanceWitness);
      if (v44(v13, 1, AssociatedTypeWitness) == 1) {
        goto LABEL_2;
      }
    }
    (*v41)(v17, AssociatedTypeWitness);
    (*(void (**)(char *, const char *))(v39 + 8))(v20, v48);
    return (__objc2_class **)swift_release((uint64_t)v50);
  }
}

__objc2_class **Sequence._filter(_:)(uint64_t (*a1)(char *), uint64_t a2, uint64_t a3, int **a4)
{
  uint64_t v53 = a2;
  uint64_t v51 = a4;
  char v52 = a1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, a4, a3, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
  uint64_t v10 = type metadata accessor for Optional(0, (uint64_t)AssociatedTypeWitness, v8, v9);
  uint64_t v42 = (uint64_t)*(v10 - 1);
  uint64_t v43 = v10;
  uint64_t v11 = MEMORY[0x1F4188790](v10);
  int64_t v13 = (char *)&v41 - v12;
  uint64_t v46 = *((void *)AssociatedTypeWitness - 1);
  uint64_t v14 = MEMORY[0x1F4188790](v11);
  uint64_t v47 = (char *)&v41 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = MEMORY[0x1F4188790](v14);
  uint64_t v18 = (char *)&v41 - v17;
  uint64_t v19 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](v16);
  uint64_t v21 = (char *)&v41 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = swift_getAssociatedTypeWitness(0, a4, a3, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Iterator);
  uint64_t v44 = *((void *)v22 - 1);
  MEMORY[0x1F4188790](v22);
  uint64_t v24 = (char *)&v41 - v23;
  unint64_t v55 = &_swiftEmptyArrayStorage;
  (*(void (**)(char *, void, uint64_t))(v19 + 16))(v21, v54, a3);
  uint64_t v25 = (uint64_t)v51;
  ((void (*)(uint64_t, int **))v51[4])(a3, v51);
  uint64_t v26 = a3;
  char v27 = v22;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v25, v26, (uint64_t)v22, (uint64_t)&protocol requirements base descriptor for Sequence, associated conformance descriptor for Sequence.Sequence.Iterator: IteratorProtocol);
  uint64_t v50 = *(void (**)(const char *, uint64_t))(AssociatedConformanceWitness + 16);
  uint64_t v51 = (int **)(AssociatedConformanceWitness + 16);
  v50(v27, AssociatedConformanceWitness);
  uint64_t v29 = v46;
  uint64_t v30 = v46 + 48;
  uint64_t v49 = *(unsigned int (**)(char *, uint64_t, const char *))(v46 + 48);
  if (v49(v13, 1, AssociatedTypeWitness) == 1)
  {
LABEL_2:
    (*(void (**)(char *, const char *))(v44 + 8))(v24, v27);
    (*(void (**)(char *, Class *))(v42 + 8))(v13, v43);
    return v55;
  }
  else
  {
    uint64_t v48 = v30;
    uint64_t v54 = *(void (**)(char *, char *, const char *))(v29 + 32);
    uint64_t v45 = AssociatedConformanceWitness;
    uint64_t v46 = v29 + 8;
    while (1)
    {
      v54(v18, v13, AssociatedTypeWitness);
      char v32 = v52(v18);
      if (v4) {
        break;
      }
      if (v32)
      {
        uint64_t v33 = v13;
        uint64_t v34 = v24;
        uint64_t v35 = v27;
        uint64_t v36 = v47;
        v54(v47, v18, AssociatedTypeWitness);
        uint64_t v39 = type metadata accessor for ContiguousArray(0, (uint64_t)AssociatedTypeWitness, v37, v38);
        uint64_t v40 = (uint64_t)v36;
        char v27 = v35;
        uint64_t v24 = v34;
        int64_t v13 = v33;
        uint64_t AssociatedConformanceWitness = v45;
        ContiguousArray.append(_:)(v40, (uint64_t)v39);
      }
      else
      {
        (*(void (**)(char *, const char *))v46)(v18, AssociatedTypeWitness);
      }
      v50(v27, AssociatedConformanceWitness);
      if (v49(v13, 1, AssociatedTypeWitness) == 1) {
        goto LABEL_2;
      }
    }
    (*(void (**)(char *, const char *))v46)(v18, AssociatedTypeWitness);
    (*(void (**)(char *, const char *))(v44 + 8))(v24, v27);
    return (__objc2_class **)swift_release((uint64_t)v55);
  }
}

uint64_t static Unicode.ASCII.encodedReplacementCharacter.getter()
{
  return 26;
}

uint64_t UInt8.init(_builtinIntegerLiteral:)(unsigned __int8 *a1, unint64_t a2)
{
  uint64_t result = 0;
  if (a2 <= 0x9FF && (a2 & 1) == 0) {
    return *a1;
  }
  return result;
}

uint64_t static Unicode.ASCII._isScalar(_:)()
{
  return 1;
}

uint64_t static Unicode.ASCII.decode(_:)(uint64_t result)
{
  return result;
}

unint64_t specialized Collection.first.getter(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x2000000000000000) != 0) {
    uint64_t v2 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v2)
  {
    v5._unint64_t rawBits = _StringGuts.validateScalarIndex(_:)((Swift::String::Index)15)._rawBits;
    if ((a2 & 0x1000000000000000) != 0)
    {
      Swift::UInt32 value = _StringGuts.foreignErrorCorrectedScalar(startingAt:)((Swift::String::Index)(v5._rawBits & 0xFFFFFFFFFFFF0000))._0._value;
    }
    else
    {
      Swift::UInt64 v6 = v5._rawBits >> 16;
      if ((a2 & 0x2000000000000000) != 0)
      {
        v17[0] = a1;
        v17[1] = a2 & 0xFFFFFFFFFFFFFFLL;
        Swift::UInt32 value = *((unsigned __int8 *)v17 + v6);
        if (*((char *)v17 + v6) < 0)
        {
          switch(__clz(value ^ 0xFF))
          {
            case 0x1Au:
              uint64_t v7 = v17;
LABEL_15:
              Swift::UInt32 value = *((unsigned char *)v7 + v6 + 1) & 0x3F | ((value & 0x1F) << 6);
              break;
            case 0x1Bu:
              uint64_t v7 = v17;
LABEL_17:
              uint64_t v9 = (char *)v7 + v6;
              char v10 = v9[1];
              char v11 = v9[2];
              int v12 = ((value & 0xF) << 12) | ((v10 & 0x3F) << 6);
              goto LABEL_20;
            case 0x1Cu:
              uint64_t v7 = v17;
LABEL_19:
              int64_t v13 = (char *)v7 + v6;
              char v14 = v13[1];
              char v15 = v13[2];
              char v11 = v13[3];
              int v12 = ((value & 0xF) << 18) | ((v14 & 0x3F) << 12) | ((v15 & 0x3F) << 6);
LABEL_20:
              Swift::UInt32 value = v12 & 0xFFFFFFC0 | v11 & 0x3F;
              break;
            default:
              break;
          }
        }
      }
      else
      {
        if ((a1 & 0x1000000000000000) != 0) {
          uint64_t v7 = (void *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
        }
        else {
          uint64_t v7 = _StringObject.sharedUTF8.getter(a1, a2);
        }
        Swift::UInt32 value = *((unsigned __int8 *)v7 + v6);
        if (*((char *)v7 + v6) < 0)
        {
          switch(__clz(value ^ 0xFF))
          {
            case 0x1Au:
              goto LABEL_15;
            case 0x1Bu:
              goto LABEL_17;
            case 0x1Cu:
              goto LABEL_19;
            default:
              break;
          }
        }
      }
    }
  }
  else
  {
    Swift::UInt32 value = 0;
  }
  LOBYTE(v17[0]) = v2 == 0;
  return value | ((unint64_t)(v2 == 0) << 32);
}

{
  uint64_t v2;
  Swift::String::Index v5;
  Swift::String::Index v6;
  Swift::UInt64 v7;
  void *v8;
  unsigned int value;
  void v11[2];

  if ((a2 & 0x2000000000000000) != 0) {
    uint64_t v2 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v2)
  {
    v5._unint64_t rawBits = _StringGuts.validateScalarIndex(_:)((Swift::String::Index)15)._rawBits;
    if ((a2 & 0x1000000000000000) != 0)
    {
      Swift::UInt32 value = _StringGuts.foreignErrorCorrectedScalar(startingAt:)((Swift::String::Index)(v5._rawBits & 0xFFFFFFFFFFFF0000))._0._value;
    }
    else
    {
      uint64_t v7 = v5._rawBits >> 16;
      if ((a2 & 0x2000000000000000) != 0)
      {
        v11[0] = a1;
        v11[1] = a2 & 0xFFFFFFFFFFFFFFLL;
        uint64_t v8 = v11;
      }
      else if ((a1 & 0x1000000000000000) != 0)
      {
        uint64_t v8 = (void *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
      }
      else
      {
        uint64_t v8 = _StringObject.sharedUTF8.getter(a1, a2);
      }
      Swift::UInt32 value = _decodeScalar(_:startingAt:)((uint64_t)v8, v6._rawBits, v7);
    }
  }
  else
  {
    Swift::UInt32 value = 0;
  }
  LOBYTE(v11[0]) = v2 == 0;
  return value | ((unint64_t)(v2 == 0) << 32);
}

uint64_t specialized Collection.first.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a1 == a2)
  {
    int v4 = 0;
  }
  else
  {
    if (a1 >= a2) {
      _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x715uLL, 0);
    }
    if (a1 < 0) {
      _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x6F5uLL, 0);
    }
    if (a1 >= a4) {
      _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x6F6uLL, 0);
    }
    int v4 = *(unsigned __int8 *)(a3 + a1);
  }
  return v4 | ((a1 == a2) << 8);
}

uint64_t specialized Collection.first.getter(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0) {
    uint64_t v3 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (!v3) {
    return 0;
  }
  v5._unint64_t rawBits = 15;
  return String.subscript.getter(v5, a1, a2);
}

unint64_t specialized Collection.first.getter(Swift::String::Index a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  Swift::UInt64 v4 = a2 ^ a1._rawBits;
  if ((a2 ^ a1._rawBits) >= 0x4000)
  {
    v8._unint64_t rawBits = _StringGuts.validateScalarIndex(_:in:)(a1, a1._rawBits, a2, a3, a4)._rawBits;
    if ((a4 & 0x1000000000000000) != 0)
    {
      unsigned int value = _StringGuts.foreignErrorCorrectedScalar(startingAt:)((Swift::String::Index)(v8._rawBits & 0xFFFFFFFFFFFF0000))._0._value;
    }
    else
    {
      Swift::UInt64 v10 = v8._rawBits >> 16;
      if ((a4 & 0x2000000000000000) != 0)
      {
        v15[0] = a3;
        v15[1] = a4 & 0xFFFFFFFFFFFFFFLL;
        char v11 = v15;
      }
      else if ((a3 & 0x1000000000000000) != 0)
      {
        char v11 = (void *)((a4 & 0xFFFFFFFFFFFFFFFLL) + 32);
      }
      else
      {
        uint64_t v13 = a4;
        Swift::UInt64 v14 = v8._rawBits >> 16;
        char v11 = _StringObject.sharedUTF8.getter(a3, v13);
        Swift::UInt64 v10 = v14;
      }
      unsigned int value = _decodeScalar(_:startingAt:)((uint64_t)v11, v9._rawBits, v10);
    }
  }
  else
  {
    unsigned int value = 0;
  }
  LOBYTE(v15[0]) = v4 < 0x4000;
  return value | ((unint64_t)(v4 < 0x4000) << 32);
}

uint64_t Collection.first.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (int **)a2, a1, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  uint64_t v7 = *((void *)AssociatedTypeWitness - 1);
  uint64_t v8 = MEMORY[0x1F4188790](AssociatedTypeWitness);
  Swift::UInt64 v10 = &v23[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v8);
  int v12 = &v23[-v11];
  (*(void (**)(uint64_t, uint64_t))(a2 + 64))(a1, a2);
  (*(void (**)(uint64_t, uint64_t))(a2 + 72))(a1, a2);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(a2, a1, (uint64_t)AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Collection, associated conformance descriptor for Collection.Collection.Index: Comparable);
  char v14 = (*(uint64_t (**)(unsigned char *, unsigned char *, const char *))(*(void *)(AssociatedConformanceWitness + 8) + 8))(v12, v10, AssociatedTypeWitness);
  char v15 = *(void (**)(unsigned char *, const char *))(v7 + 8);
  v15(v10, AssociatedTypeWitness);
  if (v14)
  {
    v15(v12, AssociatedTypeWitness);
    uint64_t v16 = swift_getAssociatedTypeWitness(0, *(int ***)(a2 + 8), a1, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, const char *))(*((void *)v16 - 1) + 56))(a3, 1, 1, v16);
  }
  else
  {
    uint64_t v18 = (void (*)(unsigned char *, void))(*(uint64_t (**)(unsigned char *, unsigned char *, uint64_t, uint64_t))(a2 + 80))(v23, v12, a1, a2);
    uint64_t v20 = v19;
    uint64_t v21 = swift_getAssociatedTypeWitness(0, *(int ***)(a2 + 8), a1, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
    uint64_t v22 = *((void *)v21 - 1);
    (*(void (**)(uint64_t, uint64_t, const char *))(v22 + 16))(a3, v20, v21);
    v18(v23, 0);
    v15(v12, AssociatedTypeWitness);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, const char *))(v22 + 56))(a3, 0, 1, v21);
  }
}

uint64_t Optional._unsafelyUnwrappedUnchecked.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *(void *)(a1 - 8);
  MEMORY[0x1F4188790](a1);
  Swift::UInt64 v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v4 + 16))(v6);
  uint64_t v7 = *(void *)(a1 + 16);
  uint64_t v8 = *(void *)(v7 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) != 1) {
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v8 + 32))(a2, v6, v7);
  }
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, a1);
  __break(1u);
  return result;
}

uint64_t UnsignedInteger<>.init<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  uint64_t v114 = a6;
  uint64_t v9 = (void *)a2;
  uint64_t v119 = *(void *)(a4 + 8);
  uint64_t v102 = *(int ***)(*(void *)(v119 + 24) + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v102, a2, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, associated type descriptor for ExpressibleByIntegerLiteral.IntegerLiteralType);
  uint64_t v11 = MEMORY[0x1F4188790](AssociatedTypeWitness);
  unint64_t v100 = (char *)v97 - v12;
  uint64_t v107 = *(v9 - 1);
  uint64_t v13 = MEMORY[0x1F4188790](v11);
  char v15 = (char *)v97 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = MEMORY[0x1F4188790](v13);
  uint64_t v103 = (char *)v97 - v17;
  uint64_t v18 = MEMORY[0x1F4188790](v16);
  uint64_t v106 = (char *)v97 - v19;
  MEMORY[0x1F4188790](v18);
  Swift::Int v117 = (char *)v97 - v20;
  uint64_t v112 = *(int ***)(*(void *)(a5 + 24) + 16);
  int64_t v111 = swift_getAssociatedTypeWitness(0, v112, a3, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, associated type descriptor for ExpressibleByIntegerLiteral.IntegerLiteralType);
  uint64_t v21 = MEMORY[0x1F4188790](v111);
  unint64_t v110 = (char *)v97 - v22;
  uint64_t v23 = *(void *)(a3 - 8);
  uint64_t v24 = MEMORY[0x1F4188790](v21);
  unint64_t v98 = (char *)v97 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = MEMORY[0x1F4188790](v24);
  uint64_t v99 = (char *)v97 - v27;
  uint64_t v28 = MEMORY[0x1F4188790](v26);
  unint64_t v118 = (char *)v97 - v29;
  uint64_t v30 = MEMORY[0x1F4188790](v28);
  unint64_t v116 = (char *)v97 - v31;
  MEMORY[0x1F4188790](v30);
  uint64_t v33 = (char *)v97 - v32;
  unint64_t v109 = *(uint64_t (**)(uint64_t, uint64_t))(a5 + 64);
  char v34 = v109(a3, a5);
  uint64_t v115 = a1;
  uint64_t v104 = v15;
  if (v34)
  {
    uint64_t v108 = v9;
    (*(void (**)(char *, uint64_t, uint64_t))(v23 + 16))(v33, a1, a3);
    uint64_t v36 = v111;
    uint64_t v35 = v112;
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness((uint64_t)v112, a3, (uint64_t)v111, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
    uint64_t v38 = v110;
    (*(void (**)(void *, uint64_t, const char *, uint64_t))(AssociatedConformanceWitness + 8))(&unk_18162B0B8, 256, v36, AssociatedConformanceWitness);
    uint64_t v39 = v116;
    ((void (*)(char *, uint64_t, int **))v35[3])(v38, a3, v35);
    LOBYTE(v36) = (*(uint64_t (**)(char *, char *, uint64_t))(*(void *)(*(void *)(a5 + 32) + 8) + 32))(v33, v39, a3);
    uint64_t v40 = v23;
    uint64_t v41 = *(void (**)(char *, uint64_t))(v23 + 8);
    v41(v39, a3);
    if ((v36 & 1) == 0) {
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, 2, 0xD7BuLL, 0);
    }
    v41(v33, a3);
    uint64_t v9 = v108;
    a1 = v115;
    uint64_t v23 = v40;
  }
  uint64_t v113 = v23;
  uint64_t v108 = *(void **)(a5 + 128);
  uint64_t v42 = ((uint64_t (*)(uint64_t, uint64_t))v108)(a3, a5);
  BOOL v43 = v42 < (*(uint64_t (**)(void *, uint64_t))(a4 + 56))(v9, a4);
  uint64_t v44 = v119;
  if (!v43)
  {
    uint64_t v45 = *(void (**)(char *, uint64_t, uint64_t))(v113 + 16);
    v97[1] = v113 + 16;
    v97[0] = v45;
    v45(v118, a1, a3);
    (*(void (**)(void *, uint64_t))(a4 + 64))(v9, a4);
    uint64_t v46 = *(uint64_t (**)(void *, uint64_t))(v44 + 64);
    uint64_t v47 = v44;
    int v48 = v46(v9, v44);
    uint64_t v105 = a5;
    if ((v48 ^ v109(a3, a5)))
    {
      char v49 = v46(v9, v47);
      uint64_t v50 = (uint64_t)v9;
      uint64_t v51 = (*(uint64_t (**)(void *, uint64_t))(v47 + 128))(v9, v47);
      a5 = v105;
      uint64_t v52 = ((uint64_t (*)(uint64_t, uint64_t))v108)(a3, v105);
      if (v49)
      {
        uint64_t v53 = v113;
        uint64_t v54 = v107;
        if (v52 < v51)
        {
          unint64_t v55 = v116;
          unint64_t v56 = v118;
          ((void (*)(char *, char *, uint64_t))v97[0])(v116, v118, a3);
          uint64_t v44 = v119;
          uint64_t v57 = v106;
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t, uint64_t))(v119 + 96))(v55, a3, a5, v50, v119);
          uint64_t v58 = v117;
          LODWORD(v116) = (*(uint64_t (**)(char *, char *, uint64_t))(*(void *)(*(void *)(v44 + 32) + 8)
                                                                             + 16))(v117, v57, v50);
          uint64_t v59 = *(void (**)(char *, uint64_t))(v54 + 8);
          v59(v57, v50);
          v59(v58, v50);
          uint64_t v9 = (void *)v50;
          a1 = v115;
          if (v116) {
            goto LABEL_26;
          }
          goto LABEL_21;
        }
        uint64_t v72 = AssociatedTypeWitness;
        uint64_t v71 = v102;
        uint64_t v73 = v50;
        uint64_t v74 = swift_getAssociatedConformanceWitness((uint64_t)v102, v50, (uint64_t)AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
        uint64_t v75 = v100;
        (*(void (**)(void *, uint64_t, const char *, uint64_t))(v74 + 8))(&unk_18162B0B8, 256, v72, v74);
        uint64_t v76 = v106;
        ((void (*)(char *, uint64_t, int **))v71[3])(v75, v50, v71);
        unint64_t v77 = v117;
        LOBYTE(v72) = (*(uint64_t (**)(char *, char *, uint64_t))(*(void *)(*(void *)(v119 + 32) + 8)
                                                                         + 16))(v117, v76, v50);
        uint64_t v112 = *(int ***)(v54 + 8);
        ((void (*)(char *, uint64_t))v112)(v76, v50);
        uint64_t v78 = v103;
        (*(void (**)(char *, char *, uint64_t))(v54 + 32))(v103, v77, v73);
        unint64_t v79 = v99;
        unint64_t v56 = v118;
        ((void (*)(char *, char *, uint64_t))v97[0])(v99, v118, a3);
        if (v72)
        {
          (*(void (**)(char *, uint64_t))(v53 + 8))(v79, a3);
          ((void (*)(char *, uint64_t))v112)(v78, v73);
          goto LABEL_26;
        }
        uint64_t v80 = v105;
        uint64_t v81 = v116;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t, uint64_t))(v105 + 96))(v78, v73, v119, a3, v105);
        char v64 = (*(uint64_t (**)(char *, char *, uint64_t))(*(void *)(*(void *)(v80 + 32) + 8) + 16))(v81, v79, a3);
        uint64_t v82 = *(void (**)(char *, uint64_t))(v53 + 8);
        v82(v81, a3);
        v82(v79, a3);
        a5 = v80;
        uint64_t v9 = (void *)v73;
        uint64_t v44 = v119;
      }
      else
      {
        uint64_t v53 = v113;
        uint64_t v65 = v107;
        if (v51 >= v52)
        {
          uint64_t v84 = v111;
          unint64_t v83 = v112;
          uint64_t v85 = swift_getAssociatedConformanceWitness((uint64_t)v112, a3, (uint64_t)v111, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
          uint64_t v86 = v110;
          (*(void (**)(void *, uint64_t, const char *, uint64_t))(v85 + 8))(&unk_18162B0B8, 256, v84, v85);
          uint64_t v87 = v116;
          ((void (*)(char *, uint64_t, int **))v83[3])(v86, a3, v83);
          unint64_t v56 = v118;
          LOBYTE(v84) = (*(uint64_t (**)(char *, char *, uint64_t))(*(void *)(*(void *)(a5 + 32) + 8)
                                                                           + 40))(v118, v87, a3);
          unint64_t v88 = *(void (**)(char *, uint64_t))(v53 + 8);
          v88(v87, a3);
          uint64_t v89 = v104;
          uint64_t v90 = v50;
          (*(void (**)(char *, char *, uint64_t))(v65 + 32))(v104, v117, v50);
          unint64_t v91 = v98;
          ((void (*)(char *, char *, uint64_t))v97[0])(v98, v56, a3);
          uint64_t v92 = v91;
          if ((v84 & 1) == 0)
          {
            v88(v91, a3);
            (*(void (**)(char *, uint64_t))(v65 + 8))(v89, v90);
            a5 = v105;
            uint64_t v9 = (void *)v90;
            uint64_t v44 = v119;
            a1 = v115;
LABEL_21:
            (*(void (**)(char *, uint64_t))(v53 + 8))(v56, a3);
            return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void *, uint64_t))(v44 + 96))(a1, a3, a5, v9, v44);
          }
          uint64_t v93 = v119;
          uint64_t v94 = v106;
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t, uint64_t))(v119 + 96))(v92, a3, v105, v90, v119);
          char v64 = (*(uint64_t (**)(char *, char *, uint64_t))(*(void *)(*(void *)(v93 + 32) + 8) + 16))(v89, v94, v90);
          unint64_t v95 = *(void (**)(char *, uint64_t))(v65 + 8);
          v95(v94, v90);
          v95(v89, v90);
          a5 = v105;
          uint64_t v9 = (void *)v90;
          uint64_t v44 = v93;
        }
        else
        {
          int v66 = v116;
          uint64_t v44 = v119;
          (*(void (**)(char *, void *, uint64_t, uint64_t, uint64_t))(a5 + 96))(v117, v9, v119, a3, a5);
          unint64_t v56 = v118;
          char v64 = (*(uint64_t (**)(char *, char *, uint64_t))(*(void *)(*(void *)(a5 + 32) + 8) + 16))(v66, v118, a3);
          (*(void (**)(char *, uint64_t))(v53 + 8))(v66, a3);
        }
      }
    }
    else
    {
      Swift::String::Index v60 = v117;
      uint64_t v61 = (*(uint64_t (**)(void *, uint64_t))(v47 + 128))(v9, v47);
      unint64_t v56 = v118;
      uint64_t v62 = v105;
      uint64_t v44 = v47;
      if (v61 >= ((uint64_t (*)(uint64_t, uint64_t))v108)(a3, v105))
      {
        uint64_t v67 = v116;
        ((void (*)(char *, char *, uint64_t))v97[0])(v116, v56, a3);
        unint64_t v68 = *(void (**)(char *, uint64_t, uint64_t, void *, uint64_t))(v47 + 96);
        uint64_t v69 = v106;
        v68(v67, a3, v62, v9, v44);
        LOBYTE(v67) = (*(uint64_t (**)(char *, char *, void *))(*(void *)(*(void *)(v44 + 32) + 8)
                                                                          + 16))(v60, v69, v9);
        unint64_t v70 = *(void (**)(char *, void *))(v107 + 8);
        v70(v69, v9);
        v70(v60, v9);
        a5 = v62;
        a1 = v115;
        uint64_t v53 = v113;
        if (v67) {
LABEL_26:
        }
          _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Not enough bits to represent the passed value", 45, 2, "Swift/Integers.swift", 20, 2, 0xD7FuLL, 0);
        goto LABEL_21;
      }
      uint64_t v63 = v116;
      (*(void (**)(char *, void *, uint64_t, uint64_t, uint64_t))(v62 + 96))(v60, v9, v47, a3, v62);
      char v64 = (*(uint64_t (**)(char *, char *, uint64_t))(*(void *)(*(void *)(v62 + 32) + 8) + 16))(v63, v56, a3);
      uint64_t v53 = v113;
      (*(void (**)(char *, uint64_t))(v113 + 8))(v63, a3);
      a5 = v62;
    }
    a1 = v115;
    if (v64) {
      goto LABEL_26;
    }
    goto LABEL_21;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void *, uint64_t))(v44 + 96))(a1, a3, a5, v9, v44);
}

uint64_t static Unicode.ASCII.encode(_:)(unsigned int a1)
{
  int v1 = a1;
  if (a1 > 0x7F) {
    int v1 = 0;
  }
  return v1 | ((a1 > 0x7F) << 8);
}

uint64_t static Int.&<< infix(_:_:)(uint64_t a1, char a2)
{
  return a1 << a2;
}

uint64_t static BinaryInteger.< infix<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v87 = a1;
  uint64_t v88 = a2;
  uint64_t v82 = *(int ***)(*(void *)(a6 + 24) + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v82, a4, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, associated type descriptor for ExpressibleByIntegerLiteral.IntegerLiteralType);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v78 = (char *)&v73 - v10;
  unint64_t v77 = *(int ***)(*(void *)(a5 + 24) + 16);
  uint64_t v76 = swift_getAssociatedTypeWitness(0, v77, a3, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, associated type descriptor for ExpressibleByIntegerLiteral.IntegerLiteralType);
  uint64_t v11 = MEMORY[0x1F4188790](v76);
  uint64_t v75 = (char *)&v73 - v12;
  uint64_t v86 = *(void *)(a4 - 8);
  uint64_t v13 = MEMORY[0x1F4188790](v11);
  uint64_t v80 = (char *)&v73 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = MEMORY[0x1F4188790](v13);
  uint64_t v81 = (char *)&v73 - v16;
  uint64_t v17 = MEMORY[0x1F4188790](v15);
  uint64_t v84 = (char *)&v73 - v18;
  uint64_t v85 = *(void *)(a3 - 8);
  uint64_t v19 = MEMORY[0x1F4188790](v17);
  uint64_t v21 = (char *)&v73 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = MEMORY[0x1F4188790](v19);
  uint64_t v24 = (char *)&v73 - v23;
  MEMORY[0x1F4188790](v22);
  unint64_t v83 = (char *)&v73 - v25;
  uint64_t v26 = *(uint64_t (**)(uint64_t, uint64_t))(a5 + 64);
  int v27 = v26(a3, a5);
  if (((v27 ^ (*(unsigned int (**)(uint64_t, uint64_t))(a6 + 64))(a4, a6)) & 1) == 0)
  {
    uint64_t v39 = v87;
    uint64_t v40 = (*(uint64_t (**)(uint64_t, uint64_t))(a5 + 128))(a3, a5);
    uint64_t v41 = v88;
    BOOL v42 = v40 < (*(uint64_t (**)(uint64_t, uint64_t))(a6 + 128))(a4, a6);
    uint64_t v32 = v41;
    uint64_t v43 = v39;
    if (!v42)
    {
      uint64_t v46 = v84;
      (*(void (**)(char *, uint64_t, uint64_t))(v86 + 16))(v84, v32, a4);
      uint64_t v47 = v83;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t, uint64_t))(a5 + 96))(v46, a4, a6, a3, a5);
      char v36 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(void *)(*(void *)(a5 + 32) + 8) + 16))(v43, v47, a3);
      uint64_t v37 = *(void (**)(char *, uint64_t))(v85 + 8);
      uint64_t v38 = v47;
      goto LABEL_11;
    }
    uint64_t v44 = v83;
    (*(void (**)(char *, uint64_t, uint64_t))(v85 + 16))(v83, v39, a3);
    goto LABEL_10;
  }
  uint64_t v73 = v24;
  uint64_t v74 = v21;
  uint64_t v28 = v82;
  char v29 = v26(a3, a5);
  uint64_t v30 = v87;
  uint64_t v31 = (*(uint64_t (**)(uint64_t, uint64_t))(a5 + 128))(a3, a5);
  uint64_t v32 = v88;
  uint64_t v33 = (*(uint64_t (**)(uint64_t, uint64_t))(a6 + 128))(a4, a6);
  if ((v29 & 1) == 0)
  {
    if (v31 >= v33)
    {
      uint64_t v59 = AssociatedTypeWitness;
      uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness((uint64_t)v28, a4, (uint64_t)AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
      uint64_t v61 = v78;
      (*(void (**)(void *, uint64_t, const char *, uint64_t))(AssociatedConformanceWitness + 8))(&unk_18162B0B8, 256, v59, AssociatedConformanceWitness);
      uint64_t v62 = v84;
      ((void (*)(char *, uint64_t, int **))v28[3])(v61, a4, v28);
      LODWORD(v82) = (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(void *)(*(void *)(a6 + 32) + 8) + 40))(v32, v62, a4);
      uint64_t v63 = v30;
      uint64_t v64 = v86;
      uint64_t v65 = *(void (**)(char *, uint64_t))(v86 + 8);
      v65(v62, a4);
      uint64_t v66 = v85;
      uint64_t v67 = v74;
      (*(void (**)(char *, uint64_t, uint64_t))(v85 + 16))(v74, v63, a3);
      unint64_t v68 = v80;
      (*(void (**)(char *, uint64_t, uint64_t))(v64 + 16))(v80, v88, a4);
      if (v82)
      {
        uint64_t v69 = v83;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t, uint64_t))(a5 + 96))(v68, a4, a6, a3, a5);
        char v36 = (*(uint64_t (**)(char *, char *, uint64_t))(*(void *)(*(void *)(a5 + 32) + 8) + 16))(v67, v69, a3);
        unint64_t v70 = *(void (**)(char *, uint64_t))(v66 + 8);
        v70(v69, a3);
        v70(v67, a3);
      }
      else
      {
        v65(v68, a4);
        (*(void (**)(char *, uint64_t))(v66 + 8))(v67, a3);
        char v36 = 0;
      }
      return v36 & 1;
    }
    uint64_t v44 = v83;
    (*(void (**)(char *, uint64_t, uint64_t))(v85 + 16))(v83, v30, a3);
LABEL_10:
    uint64_t v45 = v84;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t, uint64_t))(a6 + 96))(v44, a3, a5, a4, a6);
    char v36 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(*(void *)(a6 + 32) + 8) + 16))(v45, v32, a4);
    (*(void (**)(char *, uint64_t))(v86 + 8))(v45, a4);
    return v36 & 1;
  }
  if (v33 < v31)
  {
    char v34 = v84;
    (*(void (**)(char *, uint64_t, uint64_t))(v86 + 16))(v84, v32, a4);
    uint64_t v35 = v83;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t, uint64_t))(a5 + 96))(v34, a4, a6, a3, a5);
    char v36 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(void *)(*(void *)(a5 + 32) + 8) + 16))(v30, v35, a3);
    uint64_t v37 = *(void (**)(char *, uint64_t))(v85 + 8);
    uint64_t v38 = v35;
LABEL_11:
    v37(v38, a3);
    return v36 & 1;
  }
  char v49 = v76;
  uint64_t v50 = v77;
  uint64_t v51 = swift_getAssociatedConformanceWitness((uint64_t)v77, a3, (uint64_t)v76, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
  uint64_t v52 = v75;
  (*(void (**)(void *, uint64_t, const char *, uint64_t))(v51 + 8))(&unk_18162B0B8, 256, v49, v51);
  uint64_t v53 = v83;
  ((void (*)(char *, uint64_t, int **))v50[3])(v52, a3, v50);
  LOBYTE(v49) = (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(void *)(*(void *)(a5 + 32) + 8) + 16))(v30, v53, a3);
  uint64_t v54 = v85;
  unint64_t v55 = *(void (**)(char *, uint64_t))(v85 + 8);
  v55(v53, a3);
  unint64_t v56 = v73;
  (*(void (**)(void))(v54 + 16))();
  uint64_t v57 = v86;
  uint64_t v58 = v81;
  (*(void (**)(char *, uint64_t, uint64_t))(v86 + 16))(v81, v88, a4);
  if (v49)
  {
    (*(void (**)(char *, uint64_t))(v57 + 8))(v58, a4);
    v55(v56, a3);
    char v36 = 1;
  }
  else
  {
    uint64_t v71 = v84;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t, uint64_t))(a6 + 96))(v56, a3, a5, a4, a6);
    char v36 = (*(uint64_t (**)(char *, char *, uint64_t))(*(void *)(*(void *)(a6 + 32) + 8) + 16))(v71, v58, a4);
    uint64_t v72 = *(void (**)(char *, uint64_t))(v57 + 8);
    v72(v71, a4);
    v72(v58, a4);
  }
  return v36 & 1;
}

uint64_t static Unicode.ASCII.transcode<A>(_:from:)(_DWORD *a1, uint64_t a2, ValueMetadata *a3, uint64_t a4)
{
  if (a3 == &type metadata for Unicode.UTF16)
  {
    Swift::UInt64 v6 = (const char *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _UIntBuffer<UInt16>);
    if (swift_getAssociatedTypeWitness(0, (int **)a4, (uint64_t)&type metadata for Unicode.UTF16, (uint64_t)&protocol requirements base descriptor for _UnicodeEncoding, associated type descriptor for _UnicodeEncoding.EncodedScalar) == v6)
    {
      if ((*a1 & 0xFF80) != 0) {
        LOBYTE(v7) = 0;
      }
      else {
        LOBYTE(v7) = *a1 & 0x7F;
      }
      int v8 = (*a1 & 0xFF80) != 0;
      return v7 | (v8 << 8);
    }
LABEL_12:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "_identityCast to wrong type", 27, 2, "Swift/Builtin.swift", 19, 2, 0x6CuLL, 0);
  }
  if (a3 != &type metadata for Unicode.UTF8)
  {
    unsigned int v11 = (*(uint64_t (**)(_DWORD *, ValueMetadata *, uint64_t))(a4 + 88))(a1, a3, a4);
    int v8 = v11 > 0x7F;
    if (v11 <= 0x7F) {
      LOBYTE(v7) = v11;
    }
    else {
      LOBYTE(v7) = 0;
    }
    return v7 | (v8 << 8);
  }
  if (swift_getAssociatedTypeWitness(0, (int **)a4, (uint64_t)&type metadata for Unicode.UTF8, (uint64_t)&protocol requirements base descriptor for _UnicodeEncoding, associated type descriptor for _UnicodeEncoding.EncodedScalar) != (const char *)&type metadata for _ValidUTF8Buffer)goto LABEL_12; {
  if (!*a1)
  }
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "unsafelyUnwrapped of nil optional", 33, 2, "Swift/Optional.swift", 20, 2, 0x163uLL, 0);
  int v10 = (char)(*a1 - 1);
  int v8 = v10 < 0;
  int v7 = v10 & ~(v10 >> 31);
  return v7 | (v8 << 8);
}

uint64_t _identityCast<A, B>(_:to:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  if (a3 != a2) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "_identityCast to wrong type", 27, 2, "Swift/Builtin.swift", 19, 2, 0x6CuLL, 0);
  }
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a4 - 8) + 16);

  return v5(a5, a1, a4);
}

uint64_t UInt32.init(_builtinIntegerLiteral:)(unsigned int *a1, unint64_t a2)
{
  if (a2 >> 9 <= 0x10 && (a2 & 1) == 0) {
    return *a1;
  }
  else {
    return 0;
  }
}

uint64_t static UInt32.& infix(_:_:)(unsigned int a1, int a2)
{
  return a2 & a1;
}

BOOL static UInt32.== infix(_:_:)(int a1, int a2)
{
  return a1 == a2;
}

uint64_t Optional.unsafelyUnwrapped.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *(void *)(a1 - 8);
  MEMORY[0x1F4188790](a1);
  Swift::UInt64 v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v4 + 16))(v6);
  uint64_t v7 = *(void *)(a1 + 16);
  uint64_t v8 = *(void *)(v7 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
  {
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, a1);
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "unsafelyUnwrapped of nil optional", 33, 2, "Swift/Optional.swift", 20, 2, 0x163uLL, 0);
  }
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v8 + 32))(a2, v6, v7);
}

BOOL static UInt8.< infix(_:_:)(unsigned __int8 a1, unsigned __int8 a2)
{
  return a1 < a2;
}

void protocol witness for static _UnicodeEncoding.encodedReplacementCharacter.getter in conformance Unicode.ASCII(unsigned char *a1@<X8>)
{
  *a1 = 26;
}

uint64_t protocol witness for static _UnicodeEncoding.decode(_:) in conformance Unicode.ASCII(unsigned __int8 *a1)
{
  return *a1;
}

uint64_t protocol witness for static _UnicodeEncoding.encode(_:) in conformance Unicode.ASCII@<X0>(uint64_t result@<X0>, unsigned char *a2@<X8>)
{
  if (result <= 0x7F) {
    char v2 = result;
  }
  else {
    char v2 = 0;
  }
  *a2 = v2;
  a2[1] = result > 0x7F;
  return result;
}

ValueMetadata *protocol witness for static _UnicodeEncoding.transcode<A>(_:from:) in conformance Unicode.ASCII@<X0>(_DWORD *a1@<X0>, ValueMetadata *a2@<X2>, uint64_t a3@<X3>, unsigned char *a4@<X8>)
{
  if (a2 == &type metadata for Unicode.UTF16)
  {
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _UIntBuffer<UInt16>);
    uint64_t result = (ValueMetadata *)swift_getAssociatedTypeWitness(0, (int **)a3, (uint64_t)&type metadata for Unicode.UTF16, (uint64_t)&protocol requirements base descriptor for _UnicodeEncoding, associated type descriptor for _UnicodeEncoding.EncodedScalar);
    if (result == (ValueMetadata *)v7)
    {
      if ((*a1 & 0xFF80) != 0) {
        LOBYTE(v9) = 0;
      }
      else {
        LOBYTE(v9) = *a1 & 0x7F;
      }
      BOOL v10 = (*a1 & 0xFF80) != 0;
      goto LABEL_7;
    }
LABEL_12:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "_identityCast to wrong type", 27, 2, "Swift/Builtin.swift", 19, 2, 0x6CuLL, 0);
  }
  if (a2 != &type metadata for Unicode.UTF8)
  {
    uint64_t result = (ValueMetadata *)(*(uint64_t (**)(_DWORD *, ValueMetadata *, uint64_t))(a3 + 88))(a1, a2, a3);
    BOOL v10 = result > 0x7F;
    if (result <= 0x7F) {
      LOBYTE(v9) = (_BYTE)result;
    }
    else {
      LOBYTE(v9) = 0;
    }
    goto LABEL_7;
  }
  uint64_t result = (ValueMetadata *)swift_getAssociatedTypeWitness(0, (int **)a3, (uint64_t)&type metadata for Unicode.UTF8, (uint64_t)&protocol requirements base descriptor for _UnicodeEncoding, associated type descriptor for _UnicodeEncoding.EncodedScalar);
  if (result != &type metadata for _ValidUTF8Buffer) {
    goto LABEL_12;
  }
  if (!*a1) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "unsafelyUnwrapped of nil optional", 33, 2, "Swift/Optional.swift", 20, 2, 0x163uLL, 0);
  }
  int v11 = (char)(*a1 - 1);
  BOOL v10 = v11 < 0;
  int v9 = v11 & ~(v11 >> 31);
LABEL_7:
  *a4 = v9;
  a4[1] = v10;
  return result;
}

uint64_t protocol witness for static _UnicodeEncoding._isScalar(_:) in conformance Unicode.ASCII()
{
  return 1;
}

uint64_t Unicode.ASCII.Parser.parseScalar<A>(from:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a3 + 16))(&v5, a2, a3);
  if ((v5 & 0x80u) != 0) {
    uint64_t v3 = 1;
  }
  else {
    uint64_t v3 = v5;
  }
  if (BYTE1(v5)) {
    return 0;
  }
  else {
    return v3;
  }
}

uint64_t Int8.init(_builtinIntegerLiteral:)(unsigned __int8 *a1, unint64_t a2)
{
  if (a2 <= 0x8FF) {
    return *a1;
  }
  else {
    return 0;
  }
}

BOOL static Int8.>= infix(_:_:)(char a1, char a2)
{
  return a1 >= a2;
}

uint64_t protocol witness for _UnicodeParser.parseScalar<A>(from:) in conformance Unicode.ASCII.Parser@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result = Unicode.ASCII.Parser.parseScalar<A>(from:)(a1, a2, a3);
  *(void *)a4 = result;
  *(unsigned char *)(a4 + 8) = v6;
  return result;
}

Swift::String __swiftcall String.init()()
{
  uint64_t v0 = 0;
  int v1 = (void *)0xE000000000000000;
  result._uint64_t object = v1;
  result._uint64_t countAndFlagsBits = v0;
  return result;
}

uint64_t assert(_:_:file:line:)(uint64_t (*a1)(void), uint64_t a2, uint64_t (*a3)(void), uint64_t a4, const char *a5, uint64_t a6, char a7, unint64_t a8)
{
  return assert(_:_:file:line:)(a1, a2, a3, a4, a5, a6, a7, a8, "Assertion failed", 16);
}

Swift::Bool __swiftcall _isDebugAssertConfiguration()()
{
  return 1;
}

void _assertionFailure(_:_:file:line:flags:)(const char *a1, uint64_t a2, char a3, uint64_t a4, unint64_t a5, const char *a6, uint64_t a7, char a8, unint64_t a9, int a10)
{
  int v11 = a10;
  if (a3)
  {
    if ((unint64_t)a1 >> 32) {
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Not enough bits to represent the passed value", 45, 2, "Swift/Integers.swift", 20, 2, 0xD7FuLL, 0);
    }
    if (WORD1(a1) > 0x10u || (a1 & 0xFFFFF800) == 0xD800) {
      goto LABEL_14;
    }
    _ss7UnicodeO6ScalarV17withUTF8CodeUnitsyxxSRys5UInt8VGKXEKlFyt_Tg5024_ss12StaticStringV14withd14BufferyxxSRys5G20VGXElFxAFXEfU_yt_Tg5AHxRi_zRi0_zlyytIsgyr_Tf1ncn_n(a1, (uint64_t (*)(uint64_t *))partial apply for closure #1 in _assertionFailure(_:_:file:line:flags:));
    __break(1u);
  }
  else if (!a1)
  {
    unint64_t v12 = 136;
    goto LABEL_15;
  }
  uint64_t v13 = a2;
  if (a2 < 0) {
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeBufferPointer with negative count", 39, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x53FuLL, 0);
  }
  char v14 = a8;
  uint64_t v15 = a7;
  uint64_t v16 = a6;
  unint64_t v17 = a5;
  uint64_t v18 = a4;
  swift_bridgeObjectRetain(a5);
  if ((v17 & 0x1000000000000000) != 0)
  {
    uint64_t v18 = specialized static String._copying(_:)(v18, v17);
    unint64_t v22 = v21;
    swift_bridgeObjectRelease(v17);
    unint64_t v17 = v22;
    int v11 = a10;
    if ((v17 & 0x2000000000000000) == 0)
    {
LABEL_11:
      if ((v18 & 0x1000000000000000) != 0)
      {
        uint64_t v19 = (const char *)((v17 & 0xFFFFFFFFFFFFFFFLL) + 32);
        uint64_t v20 = v18 & 0xFFFFFFFFFFFFLL;
LABEL_13:
        closure #1 in closure #1 in _assertionFailure(_:_:file:line:flags:)(v19, v20, v16, v15, v14, a1, v13, a9, v11);
        swift_bridgeObjectRelease(v17);
        __break(1u);
LABEL_14:
        unint64_t v12 = 148;
LABEL_15:
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/StaticString.swift", 24, 2, v12, 0);
      }
LABEL_20:
      uint64_t v19 = (const char *)_StringObject.sharedUTF8.getter(v18, v17);
      goto LABEL_13;
    }
  }
  else if ((v17 & 0x2000000000000000) == 0)
  {
    goto LABEL_11;
  }
  v24[0] = v18;
  v24[1] = v17 & 0xFFFFFFFFFFFFFFLL;
  char v23 = v14;
  char v14 = 0;
  closure #1 in closure #1 in _assertionFailure(_:_:file:line:flags:)((const char *)v24, HIBYTE(v17) & 0xF, v16, v15, v23, a1, v13, a9, v11);
  swift_bridgeObjectRelease(v17);
  __break(1u);
  goto LABEL_20;
}

uint64_t precondition(_:_:file:line:)(uint64_t (*a1)(void), uint64_t a2, uint64_t (*a3)(void), uint64_t a4, const char *a5, uint64_t a6, char a7, unint64_t a8)
{
  return assert(_:_:file:line:)(a1, a2, a3, a4, a5, a6, a7, a8, "Precondition failed", 19);
}

uint64_t assert(_:_:file:line:)(uint64_t (*a1)(void), uint64_t a2, uint64_t (*a3)(void), uint64_t a4, const char *a5, uint64_t a6, char a7, unint64_t a8, const char *a9, uint64_t a10)
{
  uint64_t result = a1();
  if ((result & 1) == 0)
  {
    uint64_t v16 = a3();
    _assertionFailure(_:_:file:line:flags:)(a9, a10, 2, v16, v17, a5, a6, a7, a8, 0);
  }
  return result;
}

Swift::Bool __swiftcall _isReleaseAssertConfiguration()()
{
  return 0;
}

void assertionFailure(_:file:line:)(uint64_t (*a1)(void), uint64_t a2, const char *a3, uint64_t a4, char a5, unint64_t a6)
{
  uint64_t v10 = a1();
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v10, v11, a3, a4, a5, a6, 0);
}

Swift::Bool __swiftcall _isFastAssertConfiguration()()
{
  return 0;
}

const char *StaticString.init()()
{
  return "";
}

void _assertionFailure(_:_:file:line:flags:)(unint64_t a1, uint64_t a2, char a3, const char *a4, uint64_t a5, char a6, const char *a7, uint64_t a8, char a9, unint64_t a10, int a11)
{
  int v11 = a11;
  unint64_t v12 = a10;
  char v13 = a9;
  if (a3)
  {
    if (HIDWORD(a1))
    {
LABEL_12:
      LOBYTE(v15) = 2;
      _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Not enough bits to represent the passed value", 45, 2, "Swift/Integers.swift", 20, v15, 3455, 0);
LABEL_13:
      LOBYTE(v15) = 2;
      _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeBufferPointer with negative count", 39, 2, "Swift/UnsafeBufferPointer.swift", 31, v15, 1343, 0);
    }
    if (WORD1(a1) > 0x10u || (a1 & 0xFFFFF800) == 0xD800) {
      goto LABEL_10;
    }
    a1 = _ss7UnicodeO6ScalarV17withUTF8CodeUnitsyxxSRys5UInt8VGKXEKlFyt_Tg5024_ss12StaticStringV14withd14BufferyxxSRys5G20VGXElFxAFXEfU_yt_Tg5AHxRi_zRi0_zlyytIsgyr_Tf1ncn_n(a1, (uint64_t (*)(uint64_t *))partial apply for closure #1 in _assertionFailure(_:_:file:line:flags:));
    __break(1u);
  }
  else if (!a1)
  {
    uint64_t v14 = 136;
LABEL_11:
    LOBYTE(v15) = 2;
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/StaticString.swift", 24, v15, v14, 0);
    goto LABEL_12;
  }
  if (a2 < 0) {
    goto LABEL_13;
  }
  closure #1 in _assertionFailure(_:_:file:line:flags:)((const char *)a1, a2, a4, a5, a6, a7, a8, v13, v12, v11);
  __break(1u);
LABEL_10:
  uint64_t v14 = 148;
  goto LABEL_11;
}

uint64_t _overflowChecked<A>(_:file:line:)@<X0>(unsigned char *a1@<X0>, char a2@<W1>, const char *a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, unint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  unint64_t v23 = a6;
  uint64_t v24 = a3;
  int v22 = a5;
  uint64_t v25 = a4;
  uint64_t v26 = a8;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0, a7, (uint64_t)&type metadata for Bool, 0, 0);
  uint64_t v12 = *(TupleTypeMetadata2 - 1);
  uint64_t v13 = MEMORY[0x1F4188790](TupleTypeMetadata2);
  int v15 = &v21[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v13);
  unint64_t v17 = &v21[-v16];
  uint64_t v18 = *(void *)(a7 - 8);
  uint64_t v19 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(v18 + 16);
  v19(&v21[-v16], a1, a7);
  v17[*((int *)TupleTypeMetadata2 + 12)] = a2;
  v19(v15, v17, a7);
  (*(void (**)(uint64_t, unsigned char *, uint64_t))(v18 + 32))(v26, v15, a7);
  if (a2) {
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Overflow/underflow", 18, 2, v24, v25, v22, v23, 0);
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t *))(v12 + 8))(v17, TupleTypeMetadata2);
}

void _fatalErrorMessage(_:_:file:line:flags:)(unint64_t a1, uint64_t a2, char a3, const char *a4, uint64_t a5, char a6, const char *a7, uint64_t a8, char a9, unint64_t a10, int a11)
{
}

void _debugPreconditionFailure(_:file:line:)(const char *a1, uint64_t a2, char a3, const char *a4, uint64_t a5, char a6, unint64_t a7)
{
}

uint64_t Int32.init(_builtinIntegerLiteral:)(unsigned int *a1, unint64_t a2)
{
  if (a2 >> 8 <= 0x20) {
    return *a1;
  }
  else {
    return 0;
  }
}

BOOL static Int32.== infix(_:_:)(int a1, int a2)
{
  return a1 == a2;
}

Swift::Bool __swiftcall _isStdlibInternalChecksEnabled()()
{
  return 0;
}

uint64_t closure #1 in _assertionFailure(_:_:file:line:flags:)(const char *a1, uint64_t a2, const char *a3, uint64_t a4, char a5, const char *a6, uint64_t a7, char a8, unint64_t a9, int a10)
{
  unint64_t v10 = a9;
  if ((a5 & 1) == 0)
  {
    if (a3)
    {
      if (a4 < 0) {
        _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeBufferPointer with negative count", 39, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 1343, 0);
      }
      LODWORD(a9) = a10;
      uint64_t v13 = a3;
      uint64_t v14 = a4;
      int v15 = a6;
      uint64_t v16 = a7;
      char v17 = a8;
      uint64_t v18 = a1;
      uint64_t v19 = a2;
      unint64_t v20 = v10;
      return closure #1 in closure #1 in _assertionFailure(_:_:file:line:flags:)(v13, v14, v15, v16, v17, v18, v19, v20, a9);
    }
    goto LABEL_13;
  }
  if ((unint64_t)a3 >> 32)
  {
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Not enough bits to represent the passed value", 45, 2, "Swift/Integers.swift", 20, 2, 3455, 0);
LABEL_13:
    uint64_t v22 = 136;
LABEL_15:
    LOBYTE(v23) = 2;
    uint64_t v13 = (const char *)_assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/StaticString.swift", 24, v23, v22, 0);
    return closure #1 in closure #1 in _assertionFailure(_:_:file:line:flags:)(v13, v14, v15, v16, v17, v18, v19, v20, a9);
  }
  if (WORD1(a3) > 0x10u || (a3 & 0xFFFFF800) == 0xD800)
  {
    uint64_t v22 = 148;
    goto LABEL_15;
  }
  return _ss7UnicodeO6ScalarV17withUTF8CodeUnitsyxxSRys5UInt8VGKXEKlFyt_Tg5024_ss12StaticStringV14withd14BufferyxxSRys5G20VGXElFxAFXEfU_yt_Tg5AHxRi_zRi0_zlyytIsgyr_Tf1ncn_n(a3, (uint64_t (*)(uint64_t *))partial apply for closure #1 in closure #1 in _assertionFailure(_:_:file:line:flags:));
}

uint64_t closure #1 in closure #1 in _assertionFailure(_:_:file:line:flags:)(const char *a1, uint64_t a2, const char *a3, uint64_t a4, char a5, const char *a6, uint64_t a7, unint64_t a8, int a9)
{
  int v9 = a3;
  int v10 = a9;
  if ((a5 & 1) == 0) {
    goto LABEL_7;
  }
  if ((unint64_t)a3 >> 32)
  {
    a1 = (const char *)_assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Not enough bits to represent the passed value", 45, 2, "Swift/Integers.swift", 20, 2, 3455, 0);
LABEL_7:
    if (v9) {
      goto LABEL_11;
    }
    uint64_t v12 = 136;
LABEL_10:
    LOBYTE(v13) = 2;
    a1 = (const char *)_assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/StaticString.swift", 24, v13, v12, 0);
LABEL_11:
    if ((a4 & 0x8000000000000000) == 0) {
      closure #1 in closure #1 in closure #1 in _assertionFailure(_:_:file:line:flags:)(v9, a4, a6, a7, a1, a2, a8, v10);
    }
    LOBYTE(v13) = 2;
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeBufferPointer with negative count", 39, 2, "Swift/UnsafeBufferPointer.swift", 31, v13, 1343, 0);
  }
  if (WORD1(a3) > 0x10u || (a3 & 0xFFFFF800) == 0xD800)
  {
    uint64_t v12 = 148;
    goto LABEL_10;
  }
  return _ss7UnicodeO6ScalarV17withUTF8CodeUnitsyxxSRys5UInt8VGKXEKlFyt_Tg5024_ss12StaticStringV14withd14BufferyxxSRys5G20VGXElFxAFXEfU_yt_Tg5AHxRi_zRi0_zlyytIsgyr_Tf1ncn_n(a3, (uint64_t (*)(uint64_t *))partial apply for closure #1 in closure #1 in closure #1 in _assertionFailure(_:_:file:line:flags:));
}

void closure #1 in closure #1 in closure #1 in _assertionFailure(_:_:file:line:flags:)(const char *a1, uint64_t a2, const char *a3, uint64_t a4, const char *a5, uint64_t a6, unint64_t a7, int a8)
{
  if (a3)
  {
    if (a4 < (uint64_t)0xFFFFFFFF80000000) {
      goto LABEL_16;
    }
    if (a4 >= 0x80000000)
    {
LABEL_17:
      uint64_t v10 = 3687;
      goto LABEL_18;
    }
    if (a5)
    {
      if (a6 < (uint64_t)0xFFFFFFFF80000000) {
        goto LABEL_16;
      }
      if (a6 >= 0x80000000) {
        goto LABEL_17;
      }
      int v9 = a1;
      if (a1) {
        goto LABEL_12;
      }
      uint64_t v8 = 107;
    }
    else
    {
      uint64_t v8 = 106;
    }
  }
  else
  {
    uint64_t v8 = 105;
  }
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/AssertCommon.swift", 24, 2, v8, 0);
LABEL_12:
  if (a2 < (uint64_t)0xFFFFFFFF80000000) {
    goto LABEL_16;
  }
  if (a2 < 0x80000000)
  {
    if (HIDWORD(a7)) {
      goto LABEL_19;
    }
    _swift_stdlib_reportFatalErrorInFile(a3, a4, a5, a6, v9, a2, a7, a8);
    __break(1u);
LABEL_16:
    LOBYTE(v11) = 2;
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Not enough bits to represent a signed value", 43, 2, "Swift/Integers.swift", 20, v11, 3681, 0);
    while (1)
    {
LABEL_19:
      uint64_t v10 = 3455;
LABEL_18:
      LOBYTE(v11) = 2;
      _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Not enough bits to represent the passed value", 45, 2, "Swift/Integers.swift", 20, v11, v10, 0);
    }
  }
  goto LABEL_17;
}

{
  unint64_t v8;
  unint64_t v9;
  uint64_t vars8;

  if (!a3)
  {
    int v9 = 139;
    goto LABEL_21;
  }
  if (a4 < (uint64_t)0xFFFFFFFF80000000) {
    goto LABEL_14;
  }
  if (a4 >= 0x80000000) {
    goto LABEL_15;
  }
  if (!a5)
  {
    int v9 = 140;
    goto LABEL_21;
  }
  if (a6 < (uint64_t)0xFFFFFFFF80000000) {
    goto LABEL_14;
  }
  if (a6 >= 0x80000000)
  {
LABEL_15:
    uint64_t v8 = 3687;
    goto LABEL_17;
  }
  if (!a1)
  {
    int v9 = 141;
LABEL_21:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/AssertCommon.swift", 24, 2, v9, 0);
  }
  if (a2 < (uint64_t)0xFFFFFFFF80000000) {
LABEL_14:
  }
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Not enough bits to represent a signed value", 43, 2, "Swift/Integers.swift", 20, 2, 0xE61uLL, 0);
  if (a2 >= 0x80000000) {
    goto LABEL_15;
  }
  if (HIDWORD(a7))
  {
    uint64_t v8 = 3455;
LABEL_17:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Not enough bits to represent the passed value", 45, 2, "Swift/Integers.swift", 20, 2, v8, 0);
  }

  _swift_stdlib_reportFatalErrorInFile(a3, a4, a5, a6, a1, a2, a7, a8);
}

uint64_t StaticString.withUTF8Buffer<A>(_:)(uint64_t (*a1)(unint64_t, uint64_t), uint64_t a2, unint64_t a3, uint64_t a4, char a5)
{
  if (a5)
  {
    if (HIDWORD(a3)) {
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Not enough bits to represent the passed value", 45, 2, "Swift/Integers.swift", 20, 2, 0xD7FuLL, 0);
    }
    if (WORD1(a3) <= 0x10u && (a3 & 0xFFFFF800) != 0xD800)
    {
      MEMORY[0x1F4188790](a1);
      void v11[2] = v7;
      v11[3] = v8;
      v11[4] = a2;
      return Unicode.Scalar.withUTF8CodeUnits<A>(_:)((uint64_t (*)(uint64_t *))partial apply for closure #1 in StaticString.withUTF8Buffer<A>(_:), (uint64_t)v11, v9);
    }
    unint64_t v10 = 148;
LABEL_14:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/StaticString.swift", 24, 2, v10, 0);
  }
  if (!a3)
  {
    unint64_t v10 = 136;
    goto LABEL_14;
  }
  if (a4 < 0) {
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeBufferPointer with negative count", 39, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x53FuLL, 0);
  }
  return a1(a3, a4);
}

void closure #1 in closure #1 in _assertionFailure(_:_:file:line:flags:)(const char *a1, uint64_t a2, const char *a3, uint64_t a4, char a5, const char *a6, uint64_t a7, unint64_t a8, int a9)
{
  if (a5)
  {
    if ((unint64_t)a3 >> 32) {
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Not enough bits to represent the passed value", 45, 2, "Swift/Integers.swift", 20, 2, 0xD7FuLL, 0);
    }
    if (WORD1(a3) <= 0x10u && (a3 & 0xFFFFF800) != 0xD800)
    {
      _ss7UnicodeO6ScalarV17withUTF8CodeUnitsyxxSRys5UInt8VGKXEKlFyt_Tg5024_ss12StaticStringV14withd14BufferyxxSRys5G20VGXElFxAFXEfU_yt_Tg5AHxRi_zRi0_zlyytIsgyr_Tf1ncn_n(a3, (uint64_t (*)(uint64_t *))partial apply for closure #1 in closure #1 in closure #1 in _assertionFailure(_:_:file:line:flags:));
      return;
    }
    unint64_t v9 = 148;
LABEL_14:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/StaticString.swift", 24, 2, v9, 0);
  }
  if (!a3)
  {
    unint64_t v9 = 136;
    goto LABEL_14;
  }
  if (a4 < 0) {
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeBufferPointer with negative count", 39, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x53FuLL, 0);
  }
  closure #1 in closure #1 in closure #1 in _assertionFailure(_:_:file:line:flags:)(a3, a4, a6, a7, a1, a2, a8, a9);
}

size_t specialized String.withUTF8<A>(_:)(unint64_t *a1)
{
  uint64_t v1 = *a1;
  unint64_t v2 = a1[1];
  if ((v2 & 0x1000000000000000) == 0)
  {
    if ((v2 & 0x2000000000000000) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    size_t v4 = HIBYTE(v2) & 0xF;
    v10[0] = v1;
    v10[1] = v2 & 0xFFFFFFFFFFFFFFLL;
    uint64_t v3 = v10;
    return _swift_stdlib_fwrite_stdout(v3, 1uLL, v4);
  }
  uint64_t v1 = specialized static String._copying(_:)(*a1, v2);
  unint64_t v7 = v6;
  swift_bridgeObjectRelease(v2);
  *a1 = v1;
  a1[1] = v7;
  unint64_t v2 = v7;
  if ((v7 & 0x2000000000000000) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v1 & 0x1000000000000000) != 0)
  {
    uint64_t v3 = (void *)((v2 & 0xFFFFFFFFFFFFFFFLL) + 32);
    size_t v4 = v1 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    uint64_t v3 = _StringObject.sharedUTF8.getter(v1, v2);
    if (!v3) {
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/OutputStream.swift", 24, 2, 0x239uLL, 0);
    }
    size_t v4 = v9;
  }
  return _swift_stdlib_fwrite_stdout(v3, 1uLL, v4);
}

uint64_t String.withUTF8<A>(_:)(uint64_t (*a1)(void *, uint64_t))
{
  uint64_t v3 = *v1;
  unint64_t v4 = v1[1];
  if ((v4 & 0x1000000000000000) == 0)
  {
    if ((v4 & 0x2000000000000000) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t v6 = HIBYTE(v4) & 0xF;
    v10[0] = v3;
    v10[1] = v4 & 0xFFFFFFFFFFFFFFLL;
    uint64_t v5 = v10;
    return a1(v5, v6);
  }
  uint64_t v3 = specialized static String._copying(_:)(*v1, v1[1]);
  unint64_t v8 = v7;
  swift_bridgeObjectRelease(v4);
  *uint64_t v1 = v3;
  v1[1] = v8;
  unint64_t v4 = v8;
  if ((v8 & 0x2000000000000000) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v3 & 0x1000000000000000) != 0)
  {
    uint64_t v5 = (void *)((v4 & 0xFFFFFFFFFFFFFFFLL) + 32);
    uint64_t v6 = v3 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    uint64_t v5 = _StringObject.sharedUTF8.getter(v3, v4);
  }
  return a1(v5, v6);
}

void closure #1 in closure #1 in _assertionFailure(_:_:flags:)(const char *a1, uint64_t a2, const char *a3, uint64_t a4, int a5)
{
  if (!a3)
  {
    unint64_t v5 = 169;
    goto LABEL_13;
  }
  if (a4 < (uint64_t)0xFFFFFFFF80000000) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Not enough bits to represent a signed value", 43, 2, "Swift/Integers.swift", 20, 2, 0xE61uLL, 0);
  }
  if (a4 >= 0x80000000) {
LABEL_9:
  }
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Not enough bits to represent the passed value", 45, 2, "Swift/Integers.swift", 20, 2, 0xE67uLL, 0);
  if (!a1)
  {
    unint64_t v5 = 170;
LABEL_13:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/AssertCommon.swift", 24, 2, v5, 0);
  }
  if (a2 >= 0x80000000) {
    goto LABEL_9;
  }

  _swift_stdlib_reportFatalError(a3, a4, a1, a2, a5);
}

void _unimplementedInitializer(className:initName:file:line:column:)(unint64_t a1, uint64_t a2, char a3, const char *a4, uint64_t a5, char a6, const char *a7, uint64_t a8, char a9, unint64_t a10, unint64_t a11)
{
  unint64_t v12 = a10;
  unint64_t v11 = a11;
  char v13 = a9;
  if (a3)
  {
    if (HIDWORD(a1)) {
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Not enough bits to represent the passed value", 45, 2, "Swift/Integers.swift", 20, 2, 0xD7FuLL, 0);
    }
    if (WORD1(a1) > 0x10u || (a1 & 0xFFFFF800) == 0xD800) {
      goto LABEL_10;
    }
    a1 = _ss7UnicodeO6ScalarV17withUTF8CodeUnitsyxxSRys5UInt8VGKXEKlFyt_Tg5024_ss12StaticStringV14withd14BufferyxxSRys5G20VGXElFxAFXEfU_yt_Tg5AHxRi_zRi0_zlyytIsgyr_Tf1ncn_n(a1, (uint64_t (*)(uint64_t *))partial apply for closure #1 in _unimplementedInitializer(className:initName:file:line:column:));
    __break(1u);
  }
  else if (!a1)
  {
    unint64_t v14 = 136;
    goto LABEL_11;
  }
  if (a2 < 0) {
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeBufferPointer with negative count", 39, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x53FuLL, 0);
  }
  closure #1 in _unimplementedInitializer(className:initName:file:line:column:)((const char *)a1, a2, a4, a5, a6, a7, a8, v13, v12, v11);
  __break(1u);
LABEL_10:
  unint64_t v14 = 148;
LABEL_11:
  _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/StaticString.swift", 24, 2, v14, 0);
}

void closure #1 in _unimplementedInitializer(className:initName:file:line:column:)(const char *a1, uint64_t a2, const char *a3, uint64_t a4, char a5, const char *a6, uint64_t a7, char a8, unint64_t a9, unint64_t a10)
{
  if (a5)
  {
    if ((unint64_t)a3 >> 32) {
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Not enough bits to represent the passed value", 45, 2, "Swift/Integers.swift", 20, 2, 0xD7FuLL, 0);
    }
    if (WORD1(a3) <= 0x10u && (a3 & 0xFFFFF800) != 0xD800)
    {
      _ss7UnicodeO6ScalarV17withUTF8CodeUnitsyxxSRys5UInt8VGKXEKlFyt_Tg5024_ss12StaticStringV14withd14BufferyxxSRys5G20VGXElFxAFXEfU_yt_Tg5AHxRi_zRi0_zlyytIsgyr_Tf1ncn_n(a3, (uint64_t (*)(uint64_t *))partial apply for closure #1 in closure #1 in _unimplementedInitializer(className:initName:file:line:column:));
      return;
    }
    unint64_t v10 = 148;
LABEL_15:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/StaticString.swift", 24, 2, v10, 0);
  }
  if (!a3)
  {
    unint64_t v10 = 136;
    goto LABEL_15;
  }
  if (a4 < 0) {
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeBufferPointer with negative count", 39, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x53FuLL, 0);
  }

  closure #1 in closure #1 in _unimplementedInitializer(className:initName:file:line:column:)(a3, a4, a6, a7, a8, a1, a2, a9, a10);
}

void closure #1 in closure #1 in _unimplementedInitializer(className:initName:file:line:column:)(const char *a1, uint64_t a2, const char *a3, uint64_t a4, char a5, const char *a6, uint64_t a7, unint64_t a8, unint64_t a9)
{
  if (a5)
  {
    if ((unint64_t)a3 >> 32) {
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Not enough bits to represent the passed value", 45, 2, "Swift/Integers.swift", 20, 2, 0xD7FuLL, 0);
    }
    if (WORD1(a3) <= 0x10u && (a3 & 0xFFFFF800) != 0xD800)
    {
      _ss7UnicodeO6ScalarV17withUTF8CodeUnitsyxxSRys5UInt8VGKXEKlFyt_Tg5024_ss12StaticStringV14withd14BufferyxxSRys5G20VGXElFxAFXEfU_yt_Tg5AHxRi_zRi0_zlyytIsgyr_Tf1ncn_n(a3, (uint64_t (*)(uint64_t *))partial apply for closure #1 in closure #1 in closure #1 in _unimplementedInitializer(className:initName:file:line:column:));
      return;
    }
    unint64_t v9 = 148;
LABEL_15:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/StaticString.swift", 24, 2, v9, 0);
  }
  if (!a3)
  {
    unint64_t v9 = 136;
    goto LABEL_15;
  }
  if (a4 < 0) {
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeBufferPointer with negative count", 39, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x53FuLL, 0);
  }

  closure #1 in closure #1 in closure #1 in _unimplementedInitializer(className:initName:file:line:column:)(a3, a4, a6, a7, a1, a2, a8, a9);
}

void closure #1 in closure #1 in closure #1 in _unimplementedInitializer(className:initName:file:line:column:)(const char *a1, uint64_t a2, const char *a3, uint64_t a4, const char *a5, uint64_t a6, unint64_t a7, unint64_t a8)
{
  if (!a3)
  {
    unint64_t v9 = 230;
    goto LABEL_20;
  }
  if (a4 < (uint64_t)0xFFFFFFFF80000000) {
    goto LABEL_13;
  }
  if (a4 >= 0x80000000) {
    goto LABEL_14;
  }
  if (!a5)
  {
    unint64_t v9 = 231;
    goto LABEL_20;
  }
  if (a6 < (uint64_t)0xFFFFFFFF80000000) {
    goto LABEL_13;
  }
  if (a6 >= 0x80000000)
  {
LABEL_14:
    unint64_t v8 = 3687;
    goto LABEL_16;
  }
  if (!a1)
  {
    unint64_t v9 = 232;
LABEL_20:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/AssertCommon.swift", 24, 2, v9, 0);
  }
  if (a2 < (uint64_t)0xFFFFFFFF80000000) {
LABEL_13:
  }
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Not enough bits to represent a signed value", 43, 2, "Swift/Integers.swift", 20, 2, 0xE61uLL, 0);
  if (a2 >= 0x80000000) {
    goto LABEL_14;
  }
  if (HIDWORD(a7) || HIDWORD(a8))
  {
    unint64_t v8 = 3455;
LABEL_16:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Not enough bits to represent the passed value", 45, 2, "Swift/Integers.swift", 20, 2, v8, 0);
  }
  _swift_stdlib_reportUnimplementedInitializerInFile(a3, a4, a5, a6, a1, a2, a7, a8, 0);
}

void _undefined<A>(_:file:line:)(uint64_t (*a1)(void), uint64_t a2, const char *a3, uint64_t a4, char a5, unint64_t a6)
{
  uint64_t v10 = a1();
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v10, v11, a3, a4, a5, a6, 0);
}

void _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)(Class *a1, uint64_t a2, uint64_t a3, Class *a4)
{
  uint64_t v7 = specialized static String._createEmpty(withInitialCapacity:)(39);
  uint64_t v9 = v8;
  v50._uint64_t countAndFlagsBits = v7;
  v50._unint64_t object = (void *)v8;
  uint64_t v10 = HIBYTE(v8) & 0xF;
  if ((v8 & 0x2000000000000000) == 0) {
    uint64_t v10 = v7 & 0xFFFFFFFFFFFFLL;
  }
  if (v10 || (v7 & ~v8 & 0x2000000000000000) != 0)
  {
    if ((v8 & 0x2000000000000000) != 0
      && (0x80000001816DD140 & 0x2000000000000000) != 0
      && (unint64_t v11 = specialized _SmallString.init(_:appending:)(v7, v8, 0xD000000000000016, 0x80000001816DD140 | 0x8000000000000000), (v13 & 1) == 0))
    {
      uint64_t v14 = v11;
      int v15 = v12;
      swift_bridgeObjectRelease(v9);
      swift_bridgeObjectRelease(0x80000001816DD140 | 0x8000000000000000);
      v50._uint64_t countAndFlagsBits = v14;
      v50._unint64_t object = v15;
    }
    else
    {
      if ((0x80000001816DD140 & 0x2000000000000000) != 0) {
        unint64_t v16 = (0x80000001816DD140 >> 56) & 0xF;
      }
      else {
        unint64_t v16 = 22;
      }
      _StringGuts.append(_:)(0xD000000000000016, 0x80000001816DD140 | 0x8000000000000000, 0, v16);
      swift_bridgeObjectRelease(0x80000001816DD140 | 0x8000000000000000);
    }
  }
  else
  {
    swift_bridgeObjectRelease(v8);
    v50._uint64_t countAndFlagsBits = 0xD000000000000016;
    v50._unint64_t object = (void *)(0x80000001816DD140 | 0x8000000000000000);
  }
  TypeName = (uint64_t *)swift_getTypeName(a1, 0);
  if (v18 < 0) {
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeBufferPointer with negative count", 39, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x53FuLL, 0);
  }
  uint64_t v19 = (uint8x16_t *)TypeName;
  int64_t v20 = v18;
  int64_t v21 = validateUTF8(_:)(TypeName, v18);
  if (v23) {
    unint64_t v24 = repairUTF8(_:firstKnownBrokenRange:)(v19->i8, v20, v21, v22);
  }
  else {
    unint64_t v24 = specialized static String._uncheckedFromUTF8(_:isASCII:)(v19, v20, v21 & 1);
  }
  uint64_t countAndFlagsBits = v24;
  unint64_t object = v25;
  unint64_t v28 = ((unint64_t)v50._object >> 56) & 0xF;
  if (((uint64_t)v50._object & 0x2000000000000000) == 0) {
    unint64_t v28 = v50._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
  }
  if (!v28 && (v50._countAndFlagsBits & ~(uint64_t)v50._object & 0x2000000000000000) == 0)
  {
    swift_bridgeObjectRelease((uint64_t)v50._object);
    v50._uint64_t countAndFlagsBits = countAndFlagsBits;
    v50._unint64_t object = (void *)object;
    goto LABEL_32;
  }
  if (((uint64_t)v50._object & 0x2000000000000000) != 0)
  {
    if ((v25 & 0x2000000000000000) != 0)
    {
      unint64_t v30 = specialized _SmallString.init(_:appending:)(v50._countAndFlagsBits, (unint64_t)v50._object, v24, v25);
      if ((v32 & 1) == 0)
      {
        uint64_t v33 = v30;
        char v34 = v31;
        swift_bridgeObjectRelease((uint64_t)v50._object);
        swift_bridgeObjectRelease(object);
        v50._uint64_t countAndFlagsBits = v33;
        v50._unint64_t object = v34;
        unint64_t object = (unint64_t)v34;
        uint64_t countAndFlagsBits = v33;
        goto LABEL_32;
      }
      goto LABEL_30;
    }
  }
  else if ((v25 & 0x2000000000000000) != 0)
  {
LABEL_30:
    uint64_t v29 = HIBYTE(object) & 0xF;
    goto LABEL_31;
  }
  uint64_t v29 = v24 & 0xFFFFFFFFFFFFLL;
LABEL_31:
  _StringGuts.append(_:)(countAndFlagsBits, object, 0, v29);
  swift_bridgeObjectRelease(object);
  uint64_t countAndFlagsBits = v50._countAndFlagsBits;
  unint64_t object = (unint64_t)v50._object;
LABEL_32:
  Swift::String v35 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("(rawValue: ", 0xBuLL, 1);
  uint64_t v36 = HIBYTE(object) & 0xF;
  if ((object & 0x2000000000000000) == 0) {
    uint64_t v36 = countAndFlagsBits & 0xFFFFFFFFFFFFLL;
  }
  if (!v36 && (countAndFlagsBits & ~object & 0x2000000000000000) == 0)
  {
    swift_bridgeObjectRelease(object);
    Swift::String v50 = v35;
    goto LABEL_46;
  }
  if ((object & 0x2000000000000000) != 0)
  {
    if (((uint64_t)v35._object & 0x2000000000000000) != 0)
    {
      unint64_t v38 = specialized _SmallString.init(_:appending:)(countAndFlagsBits, object, v35._countAndFlagsBits, (unint64_t)v35._object);
      if ((v40 & 1) == 0)
      {
        uint64_t v41 = v38;
        BOOL v42 = v39;
        swift_bridgeObjectRelease(object);
        swift_bridgeObjectRelease((uint64_t)v35._object);
        v50._uint64_t countAndFlagsBits = v41;
        v50._unint64_t object = v42;
        goto LABEL_46;
      }
      goto LABEL_44;
    }
  }
  else if (((uint64_t)v35._object & 0x2000000000000000) != 0)
  {
LABEL_44:
    uint64_t v37 = ((unint64_t)v35._object >> 56) & 0xF;
    goto LABEL_45;
  }
  uint64_t v37 = v35._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
LABEL_45:
  _StringGuts.append(_:)(v35._countAndFlagsBits, (unint64_t)v35._object, 0, v37);
  swift_bridgeObjectRelease((uint64_t)v35._object);
LABEL_46:
  _print_unlocked<A, B>(_:_:)(a2, (uint64_t)&v50, a4, (uint64_t)&type metadata for DefaultStringInterpolation, (uint64_t)&protocol witness table for DefaultStringInterpolation);
  uint64_t v43 = v50._object;
  unint64_t v44 = ((unint64_t)v50._object >> 56) & 0xF;
  if (((uint64_t)v50._object & 0x2000000000000000) == 0) {
    unint64_t v44 = v50._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
  }
  if (v44 || (v50._countAndFlagsBits & ~(uint64_t)v50._object & 0x2000000000000000) != 0)
  {
    if (((uint64_t)v50._object & 0x2000000000000000) == 0
      || (unint64_t v47 = specialized _SmallString.init(_:appending:)(v50._countAndFlagsBits, (unint64_t)v50._object, 0x2729uLL, 0xE200000000000000), (v49 & 1) != 0))
    {
      _StringGuts.append(_:)(10025, 0xE200000000000000, 0, 2);
      swift_bridgeObjectRelease(0xE200000000000000);
      uint64_t v46 = v50._countAndFlagsBits;
      uint64_t v45 = v50._object;
    }
    else
    {
      uint64_t v46 = v47;
      uint64_t v45 = v48;
      swift_bridgeObjectRelease((uint64_t)v43);
      swift_bridgeObjectRelease(0xE200000000000000);
    }
  }
  else
  {
    swift_bridgeObjectRelease((uint64_t)v50._object);
    uint64_t v45 = (void *)0xE200000000000000;
    uint64_t v46 = 10025;
  }
  _assertionFailure(_:_:flags:)("Fatal error", 11, 2, v46, (unint64_t)v45, 0);
}

void DefaultStringInterpolation.appendInterpolation<A>(_:)(uint64_t a1, Class *a2)
{
  _print_unlocked<A, B>(_:_:)(a1, v2, a2, (uint64_t)&type metadata for DefaultStringInterpolation, (uint64_t)&protocol witness table for DefaultStringInterpolation);
}

void _diagnoseUnexpectedEnumCase<A>(type:)(Class *a1)
{
  unint64_t v2 = specialized static String._createEmpty(withInitialCapacity:)(58);
  uint64_t v4 = v3;
  unint64_t v36 = v2;
  unint64_t v37 = v3;
  uint64_t v5 = HIBYTE(v3) & 0xF;
  if ((v3 & 0x2000000000000000) == 0) {
    uint64_t v5 = v2 & 0xFFFFFFFFFFFFLL;
  }
  if (v5 || (v2 & ~v3 & 0x2000000000000000) != 0)
  {
    if ((v3 & 0x2000000000000000) != 0
      && (0x80000001816DD170 & 0x2000000000000000) != 0
      && (unint64_t v6 = specialized _SmallString.init(_:appending:)(v2, v3, 0xD000000000000037, 0x80000001816DD170 | 0x8000000000000000), (v8 & 1) == 0))
    {
      unint64_t v9 = v6;
      unint64_t v10 = v7;
      swift_bridgeObjectRelease(v4);
      swift_bridgeObjectRelease(0x80000001816DD170 | 0x8000000000000000);
      unint64_t v36 = v9;
      unint64_t v37 = v10;
    }
    else
    {
      if ((0x80000001816DD170 & 0x2000000000000000) != 0) {
        unint64_t v11 = (0x80000001816DD170 >> 56) & 0xF;
      }
      else {
        unint64_t v11 = 55;
      }
      _StringGuts.append(_:)(0xD000000000000037, 0x80000001816DD170 | 0x8000000000000000, 0, v11);
      swift_bridgeObjectRelease(0x80000001816DD170 | 0x8000000000000000);
    }
  }
  else
  {
    swift_bridgeObjectRelease(v3);
    unint64_t v36 = 0xD000000000000037;
    unint64_t v37 = 0x80000001816DD170 | 0x8000000000000000;
  }
  TypeName = (uint64_t *)swift_getTypeName(a1, 0);
  if (v13 < 0) {
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeBufferPointer with negative count", 39, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x53FuLL, 0);
  }
  uint64_t v14 = (uint8x16_t *)TypeName;
  int64_t v15 = v13;
  int64_t v16 = validateUTF8(_:)(TypeName, v13);
  if (v18) {
    unint64_t v19 = repairUTF8(_:firstKnownBrokenRange:)(v14->i8, v15, v16, v17);
  }
  else {
    unint64_t v19 = specialized static String._uncheckedFromUTF8(_:isASCII:)(v14, v15, v16 & 1);
  }
  unint64_t v21 = v19;
  unint64_t v22 = v20;
  uint64_t v23 = HIBYTE(v37) & 0xF;
  if ((v37 & 0x2000000000000000) == 0) {
    uint64_t v23 = v36 & 0xFFFFFFFFFFFFLL;
  }
  if (!v23 && (v36 & ~v37 & 0x2000000000000000) == 0)
  {
    swift_bridgeObjectRelease(v37);
    unint64_t v36 = v21;
    unint64_t v37 = v22;
    goto LABEL_32;
  }
  if ((v37 & 0x2000000000000000) != 0)
  {
    if ((v20 & 0x2000000000000000) != 0)
    {
      unint64_t v25 = specialized _SmallString.init(_:appending:)(v36, v37, v19, v20);
      if ((v27 & 1) == 0)
      {
        unint64_t v28 = v25;
        unint64_t v29 = v26;
        swift_bridgeObjectRelease(v37);
        swift_bridgeObjectRelease(v22);
        unint64_t v36 = v28;
        unint64_t v37 = v29;
        unint64_t v22 = v29;
        unint64_t v21 = v28;
        goto LABEL_32;
      }
      goto LABEL_30;
    }
  }
  else if ((v20 & 0x2000000000000000) != 0)
  {
LABEL_30:
    uint64_t v24 = HIBYTE(v22) & 0xF;
    goto LABEL_31;
  }
  uint64_t v24 = v19 & 0xFFFFFFFFFFFFLL;
LABEL_31:
  _StringGuts.append(_:)(v21, v22, 0, v24);
  swift_bridgeObjectRelease(v22);
  unint64_t v21 = v36;
  unint64_t v22 = v37;
LABEL_32:
  uint64_t v30 = HIBYTE(v22) & 0xF;
  if ((v22 & 0x2000000000000000) == 0) {
    uint64_t v30 = v21 & 0xFFFFFFFFFFFFLL;
  }
  if (v30 || (v21 & ~v22 & 0x2000000000000000) != 0)
  {
    if ((v22 & 0x2000000000000000) == 0
      || (unint64_t v33 = specialized _SmallString.init(_:appending:)(v21, v22, 0x27uLL, 0xE100000000000000), (v35 & 1) != 0))
    {
      _StringGuts.append(_:)(39, 0xE100000000000000, 0, 1);
      swift_bridgeObjectRelease(0xE100000000000000);
      uint64_t v32 = v36;
      unint64_t v31 = v37;
    }
    else
    {
      uint64_t v32 = v33;
      unint64_t v31 = v34;
      swift_bridgeObjectRelease(v22);
      swift_bridgeObjectRelease(0xE100000000000000);
    }
  }
  else
  {
    swift_bridgeObjectRelease(v22);
    unint64_t v31 = 0xE100000000000000;
    uint64_t v32 = 39;
  }
  _assertionFailure(_:_:flags:)("Fatal error", 11, 2, v32, v31, 0);
}

void _diagnoseUnavailableCodeReached_aeic()()
{
}

Builtin::Int1 __swiftcall _stdlib_isOSVersionAtLeast(_:_:_:)(Builtin::Word a1, Builtin::Word a2, Builtin::Word a3)
{
  return __isPlatformVersionAtLeast(2, a1, a2, a3) != 0;
}

void _diagnoseUnavailableCodeReached()()
{
}

uint64_t BidirectionalCollection.index(_:offsetBy:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v23 = a5;
  uint64_t v9 = *(void *)(a4 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (int **)v9, a3, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  uint64_t v11 = *((void *)AssociatedTypeWitness - 1);
  uint64_t v12 = MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v14 = (char *)&v22 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  int64_t v16 = (char *)&v22 - v15;
  int64_t v17 = *(void (**)(char *, uint64_t, const char *))(v11 + 16);
  if (a2 < 0)
  {
    v17(v14, a1, AssociatedTypeWitness);
    uint64_t v19 = 0;
    unint64_t v20 = *(void (**)(char *, uint64_t, uint64_t))(a4 + 40);
    do
    {
      --v19;
      v20(v14, a3, a4);
    }
    while (v19 > a2);
    int64_t v16 = v14;
  }
  else
  {
    v17((char *)&v22 - v15, a1, AssociatedTypeWitness);
    if (a2)
    {
      char v18 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 192);
      do
      {
        v18(v16, a3, v9);
        --a2;
      }
      while (a2);
    }
  }
  return (*(uint64_t (**)(uint64_t, char *, const char *))(v11 + 32))(v23, v16, AssociatedTypeWitness);
}

uint64_t BidirectionalCollection.index(_:offsetBy:limitedBy:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v33 = a3;
  uint64_t v31 = a6;
  uint64_t v10 = *(void *)(a5 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (int **)v10, a4, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  uint64_t v12 = MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v14 = (char *)&v29 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  int64_t v16 = (char *)&v29 - v15;
  uint64_t v30 = v17;
  char v18 = *(void (**)(char *, uint64_t, const char *))(v17 + 16);
  if (a2 < 0)
  {
    v18(v14, a1, AssociatedTypeWitness);
    uint64_t v32 = a4;
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v10, a4, (uint64_t)AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Collection, associated conformance descriptor for Collection.Collection.Index: Comparable);
    uint64_t v24 = 0;
    uint64_t v25 = *(void *)(AssociatedConformanceWitness + 8);
    unint64_t v26 = *(uint64_t (**)(char *, uint64_t, const char *, uint64_t))(v25 + 8);
    while ((v26(v14, v33, AssociatedTypeWitness, v25) & 1) == 0)
    {
      --v24;
      (*(void (**)(char *, uint64_t, uint64_t))(a5 + 40))(v14, v32, a5);
      if (v24 <= a2)
      {
        uint64_t v22 = v30;
        uint64_t v21 = v31;
        (*(void (**)(uint64_t, char *, const char *))(v30 + 32))(v31, v14, AssociatedTypeWitness);
        goto LABEL_11;
      }
    }
    uint64_t v22 = v30;
    (*(void (**)(char *, const char *))(v30 + 8))(v14, AssociatedTypeWitness);
    goto LABEL_14;
  }
  v18((char *)&v29 - v15, a1, AssociatedTypeWitness);
  if (a2)
  {
    uint64_t v19 = *(void *)(swift_getAssociatedConformanceWitness(v10, a4, (uint64_t)AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Collection, associated conformance descriptor for Collection.Collection.Index: Comparable)+ 8);
    unint64_t v20 = *(uint64_t (**)(char *, uint64_t, const char *, uint64_t))(v19 + 8);
    while ((v20(v16, v33, AssociatedTypeWitness, v19) & 1) == 0)
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v10 + 192))(v16, a4, v10);
      if (!--a2) {
        goto LABEL_6;
      }
    }
    uint64_t v22 = v30;
    (*(void (**)(char *, const char *))(v30 + 8))(v16, AssociatedTypeWitness);
LABEL_14:
    uint64_t v27 = 1;
    uint64_t v21 = v31;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, const char *))(v22 + 56))(v21, v27, 1, AssociatedTypeWitness);
  }
LABEL_6:
  uint64_t v22 = v30;
  uint64_t v21 = v31;
  (*(void (**)(uint64_t, char *, const char *))(v30 + 32))(v31, v16, AssociatedTypeWitness);
LABEL_11:
  uint64_t v27 = 0;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, const char *))(v22 + 56))(v21, v27, 1, AssociatedTypeWitness);
}

Swift::UInt64 specialized BidirectionalCollection._index(_:offsetBy:)(Swift::String::Index a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v6 = a2;
  if (a2 < 0)
  {
    uint64_t v26 = 0;
    unint64_t v27 = HIBYTE(a4) & 0xF;
    if ((a4 & 0x2000000000000000) != 0) {
      uint64_t v28 = HIBYTE(a4) & 0xF;
    }
    else {
      uint64_t v28 = a3 & 0xFFFFFFFFFFFFLL;
    }
    if ((a4 & 0x2000000000000000) != 0) {
      uint64_t v29 = (a4 >> 62) & 1;
    }
    else {
      uint64_t v29 = a3 < 0;
    }
    uint64_t v30 = ((unint64_t)a3 >> 59) & 1;
    Swift::UInt64 v31 = 4 * v28;
    uint64_t v32 = a4 & 0xFFFFFFFFFFFFFFLL;
    uint64_t v33 = (a4 & 0xFFFFFFFFFFFFFFFLL) + 32;
    if ((a4 & 0x1000000000000000) == 0) {
      LOBYTE(v3_assertionFailure(_:_:flags:)("Fatal error", 11, 2, 0xD000000000000018, 0x80000001816E3220, 0) = 1;
    }
    uint64_t v34 = 4 << v30;
    while (1)
    {
      if ((a1._rawBits & 0xC) == v34)
      {
        Swift::UInt64 rawBits = a1._rawBits;
        uint64_t v40 = v29;
        uint64_t v41 = v32;
        uint64_t v56 = v33;
        v42._Swift::UInt64 rawBits = _StringGuts._slowEnsureMatchingEncoding(_:)((Swift::String::Index)rawBits)._rawBits;
        uint64_t v33 = v56;
        uint64_t v32 = v41;
        uint64_t v29 = v40;
        a1._Swift::UInt64 rawBits = v42._rawBits;
        if (v42._rawBits < 0x4000)
        {
LABEL_78:
          unint64_t v53 = 175;
          goto LABEL_79;
        }
      }
      else if (a1._rawBits < 0x4000)
      {
        goto LABEL_78;
      }
      if (v31 < a1._rawBits >> 14) {
        goto LABEL_78;
      }
      if ((a4 & 0x1000000000000000) != 0)
      {
        Swift::UInt64 v43 = a1._rawBits;
        uint64_t v44 = v29;
        uint64_t v45 = v32;
        uint64_t v56 = v33;
        Swift::UInt64 v46 = specialized String.UTF16View._foreignIndex(before:)(v43);
        uint64_t v33 = v56;
        uint64_t v32 = v45;
        uint64_t v29 = v44;
        a1._Swift::UInt64 rawBits = v46;
      }
      else if (v29)
      {
        a1._Swift::UInt64 rawBits = (a1._rawBits & 0xFFFFFFFFFFFF0000) - 65523;
      }
      else
      {
        if ((a1._rawBits & 0xC000) == 0)
        {
          if (a1._rawBits)
          {
            Swift::UInt64 v35 = a1._rawBits >> 16;
            if ((a4 & 0x2000000000000000) == 0) {
              goto LABEL_53;
            }
LABEL_64:
            uint64_t v57 = a3;
            uint64_t v58 = v32;
            if (a1._rawBits < 0x10000) {
              goto LABEL_76;
            }
            if (v35 > v27) {
LABEL_81:
            }
              _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x6F6uLL, 0);
            uint64_t v38 = 0;
            while ((*((unsigned char *)&v57 + v35 + v38 - 1) & 0xC0) == 0x80)
            {
              --v38;
              if (!(v35 + v38)) {
                goto LABEL_76;
              }
            }
          }
          else
          {
            Swift::UInt64 v47 = a1._rawBits;
            uint64_t v48 = v29;
            uint64_t v49 = v32;
            uint64_t v56 = v33;
            v50._Swift::UInt64 rawBits = _StringGuts.scalarAlignSlow(_:)((Swift::String::Index)v47)._rawBits;
            uint64_t v33 = v56;
            uint64_t v32 = v49;
            uint64_t v29 = v48;
            a1._Swift::UInt64 rawBits = v50._rawBits & 0xFFFFFFFFFFFFFFF2 | 1;
            Swift::UInt64 v35 = a1._rawBits >> 16;
            if ((a4 & 0x2000000000000000) != 0) {
              goto LABEL_64;
            }
LABEL_53:
            unint64_t v36 = (char *)v33;
            uint64_t v37 = a3 & 0xFFFFFFFFFFFFLL;
            if ((a3 & 0x1000000000000000) != 0)
            {
              if (a1._rawBits < 0x10000) {
                goto LABEL_76;
              }
            }
            else
            {
              unsigned int v55 = v29;
              uint64_t v54 = v32;
              uint64_t v56 = v33;
              unint64_t v36 = (char *)_StringObject.sharedUTF8.getter(a3, a4);
              uint64_t v33 = v56;
              uint64_t v32 = v54;
              uint64_t v29 = v55;
              if (a1._rawBits < 0x10000) {
LABEL_76:
              }
                _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x6F5uLL, 0);
            }
            if ((uint64_t)v35 > v37) {
              goto LABEL_81;
            }
            uint64_t v38 = 0;
            while ((v36[v35 - 1 + v38] & 0xC0) == 0x80)
            {
              if (-(uint64_t)v35 == --v38) {
                goto LABEL_76;
              }
            }
          }
          uint64_t v51 = 1 - v38;
          if (v51 == 4) {
            a1._Swift::UInt64 rawBits = (a1._rawBits & 0xFFFFFFFFFFFF0000) - 245756;
          }
          else {
            a1._Swift::UInt64 rawBits = ((v35 - v51) << 16) | 5;
          }
          goto LABEL_73;
        }
        a1._Swift::UInt64 rawBits = a1._rawBits & 0xFFFFFFFFFFFF0000 | 5;
      }
LABEL_73:
      if (--v26 <= v6) {
        return a1._rawBits;
      }
    }
  }
  if (a2)
  {
    if ((a4 & 0x2000000000000000) != 0) {
      Swift::UInt64 v8 = HIBYTE(a4) & 0xF;
    }
    else {
      Swift::UInt64 v8 = a3 & 0xFFFFFFFFFFFFLL;
    }
    if ((a4 & 0x2000000000000000) != 0) {
      BOOL v9 = (a4 & 0x4000000000000000) != 0;
    }
    else {
      BOOL v9 = a3 < 0;
    }
    uint64_t v10 = ((unint64_t)a3 >> 59) & 1;
    uint64_t v11 = a4 & 0xFFFFFFFFFFFFFFLL;
    if ((a4 & 0x1000000000000000) == 0) {
      LOBYTE(v1_assertionFailure(_:_:flags:)("Fatal error", 11, 2, 0xD000000000000018, 0x80000001816E3220, 0) = 1;
    }
    uint64_t v12 = 4 << v10;
    do
    {
      if ((a1._rawBits & 0xC) == v12)
      {
        Swift::UInt64 v17 = a1._rawBits;
        uint64_t v18 = v11;
        v19._Swift::UInt64 rawBits = _StringGuts._slowEnsureMatchingEncoding(_:)((Swift::String::Index)v17)._rawBits;
        uint64_t v11 = v18;
        a1._Swift::UInt64 rawBits = v19._rawBits;
      }
      Swift::UInt64 v13 = a1._rawBits >> 16;
      if (a1._rawBits >> 16 >= v8)
      {
        unint64_t v53 = 147;
LABEL_79:
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index is out of bounds", 29, 2, "Swift/StringUTF16View.swift", 27, 2, v53, 0);
      }
      if ((a4 & 0x1000000000000000) != 0)
      {
        Swift::UInt64 v20 = a1._rawBits;
        uint64_t v21 = v11;
        Swift::UInt64 v22 = specialized String.UTF16View._foreignIndex(after:)(v20);
        uint64_t v11 = v21;
        a1._Swift::UInt64 rawBits = v22;
        goto LABEL_13;
      }
      if (v9)
      {
        a1._Swift::UInt64 rawBits = (a1._rawBits & 0xFFFFFFFFFFFF0000) + 65549;
        goto LABEL_13;
      }
      if ((a1._rawBits & 0xC001) != 0)
      {
        if ((a4 & 0x2000000000000000) == 0) {
          goto LABEL_21;
        }
      }
      else
      {
        Swift::UInt64 v23 = a1._rawBits;
        uint64_t v24 = v11;
        v25._Swift::UInt64 rawBits = _StringGuts.scalarAlignSlow(_:)((Swift::String::Index)v23)._rawBits;
        uint64_t v11 = v24;
        a1._Swift::UInt64 rawBits = v25._rawBits & 0xFFFFFFFFFFFFFFF2 | 1;
        Swift::UInt64 v13 = v25._rawBits >> 16;
        if ((a4 & 0x2000000000000000) == 0)
        {
LABEL_21:
          uint64_t v14 = (unsigned __int8 *)((a4 & 0xFFFFFFFFFFFFFFFLL) + 32);
          if ((a3 & 0x1000000000000000) == 0)
          {
            uint64_t v56 = v11;
            uint64_t v14 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(a3, a4);
            uint64_t v11 = v56;
          }
          int v15 = v14[v13];
          if ((v15 & 0x80) == 0)
          {
LABEL_32:
            uint64_t v16 = 1;
            goto LABEL_33;
          }
          goto LABEL_24;
        }
      }
      uint64_t v57 = a3;
      uint64_t v58 = v11;
      int v15 = *((unsigned __int8 *)&v57 + v13);
      if ((v15 & 0x80) == 0) {
        goto LABEL_32;
      }
LABEL_24:
      LODWORD(v16) = __clz(v15 ^ 0xFF) - 24;
      if (v16 != 4)
      {
        uint64_t v16 = v16;
        goto LABEL_33;
      }
      if ((a1._rawBits & 0xC000) != 0)
      {
        uint64_t v16 = 4;
LABEL_33:
        a1._Swift::UInt64 rawBits = (a1._rawBits + (v16 << 16)) & 0xFFFFFFFFFFFF0000 | 5;
        goto LABEL_13;
      }
      a1._Swift::UInt64 rawBits = a1._rawBits & 0xFFFFFFFFFFFF0000 | 0x4004;
LABEL_13:
      --v6;
    }
    while (v6);
  }
  return a1._rawBits;
}

Swift::UInt64 specialized BidirectionalCollection._index(_:offsetBy:)(Swift::UInt64 result, uint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v5 = a2;
  if (a2 < 0)
  {
    uint64_t v9 = 0;
    uint64_t v10 = (a3 >> 59) & 1;
    if ((a4 & 0x1000000000000000) == 0) {
      LOBYTE(v1_assertionFailure(_:_:flags:)("Fatal error", 11, 2, 0xD000000000000018, 0x80000001816E3220, 0) = 1;
    }
    uint64_t v11 = 4 << v10;
    if ((a4 & 0x2000000000000000) != 0) {
      unint64_t v12 = HIBYTE(a4) & 0xF;
    }
    else {
      unint64_t v12 = a3 & 0xFFFFFFFFFFFFLL;
    }
    do
    {
      if ((result & 0xC) == v11)
      {
        uint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)((Swift::String::Index)result)._rawBits;
        if (!(result >> 14))
        {
LABEL_31:
          unint64_t v13 = 152;
          goto LABEL_32;
        }
      }
      else if (!(result >> 14))
      {
        goto LABEL_31;
      }
      if ((a4 & 0x1000000000000000) != 0)
      {
        if (v12 < result >> 16)
        {
          unint64_t v13 = 157;
LABEL_32:
          _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index is out of bounds", 29, 2, "Swift/StringUTF8View.swift", 26, 2, v13, 0);
        }
        uint64_t result = String.UTF8View._foreignIndex(before:)((Swift::String::Index)result)._rawBits;
      }
      else
      {
        uint64_t result = (result & 0xFFFFFFFFFFFF0000) - 65532;
      }
      --v9;
    }
    while (v9 > v5);
  }
  else if (a2)
  {
    uint64_t v6 = (a3 >> 59) & 1;
    if ((a4 & 0x1000000000000000) == 0) {
      LOBYTE(v6) = 1;
    }
    uint64_t v7 = 4 << v6;
    if ((a4 & 0x2000000000000000) != 0) {
      unint64_t v8 = HIBYTE(a4) & 0xF;
    }
    else {
      unint64_t v8 = a3 & 0xFFFFFFFFFFFFLL;
    }
    do
    {
      while ((result & 0xC) == v7)
      {
        uint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)((Swift::String::Index)result)._rawBits;
        if ((a4 & 0x1000000000000000) == 0) {
          goto LABEL_10;
        }
LABEL_13:
        if (v8 <= result >> 16)
        {
          unint64_t v13 = 144;
          goto LABEL_32;
        }
        uint64_t result = String.UTF8View._foreignIndex(after:)((Swift::String::Index)result)._rawBits;
        if (!--v5) {
          return result;
        }
      }
      if ((a4 & 0x1000000000000000) != 0) {
        goto LABEL_13;
      }
LABEL_10:
      uint64_t result = (result & 0xFFFFFFFFFFFF0000) + 65540;
      --v5;
    }
    while (v5);
  }
  return result;
}

uint64_t BidirectionalCollection._index(_:offsetBy:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v23 = a5;
  uint64_t v9 = *(void *)(a4 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (int **)v9, a3, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  uint64_t v11 = *((void *)AssociatedTypeWitness - 1);
  uint64_t v12 = MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v14 = (char *)&v22 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)&v22 - v15;
  Swift::UInt64 v17 = *(void (**)(char *, uint64_t, const char *))(v11 + 16);
  if (a2 < 0)
  {
    v17(v14, a1, AssociatedTypeWitness);
    uint64_t v19 = 0;
    Swift::UInt64 v20 = *(void (**)(char *, uint64_t, uint64_t))(a4 + 40);
    do
    {
      --v19;
      v20(v14, a3, a4);
    }
    while (v19 > a2);
    uint64_t v16 = v14;
  }
  else
  {
    v17((char *)&v22 - v15, a1, AssociatedTypeWitness);
    if (a2)
    {
      uint64_t v18 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 192);
      do
      {
        v18(v16, a3, v9);
        --a2;
      }
      while (a2);
    }
  }
  return (*(uint64_t (**)(uint64_t, char *, const char *))(v11 + 32))(v23, v16, AssociatedTypeWitness);
}

uint64_t Collection._advanceForward(_:by:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  if (a2 < 0) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Only BidirectionalCollections can be advanced by a negative amount", 66, 2, "Swift/Collection.swift", 22, 2, 0x3C3uLL, 0);
  }
  uint64_t v7 = a2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (int **)a4, a3, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, const char *))(*((void *)AssociatedTypeWitness - 1) + 16))(a5, a1, AssociatedTypeWitness);
  if (v7)
  {
    uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a4 + 192);
    do
    {
      uint64_t result = v12(a5, a3, a4);
      --v7;
    }
    while (v7);
  }
  return result;
}

uint64_t stride<A>(from:to:by:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int **a5@<X4>, uint64_t a6@<X8>)
{
  return stride<A>(from:to:by:)(a1, a2, a3, a4, a5, (uint64_t (*)(char *, char *, char *, uint64_t, int **))StrideTo.init(_start:end:stride:), a6);
}

uint64_t StrideTo.makeIterator()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v4 = v3;
  uint64_t v7 = *(void *)(a1 + 16);
  Swift::UInt64 v17 = *(int ***)(a1 + 24);
  unint64_t v8 = (int *)type metadata accessor for StrideToIterator(0, v7, (uint64_t)v17, a2);
  uint64_t v9 = a3 + v8[11];
  uint64_t v10 = v9 + *((int *)swift_getTupleTypeMetadata2(0, (uint64_t)&unk_1ECA01F50, v7, "index value ", 0) + 12);
  uint64_t v11 = *(void *)(v7 - 8);
  uint64_t v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 32);
  v12(v10, v4, v7);
  v12(a3 + v8[9], v4 + *(int *)(a1 + 36), v7);
  uint64_t v13 = v4 + *(int *)(a1 + 40);
  uint64_t v14 = a3 + v8[10];
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v17, v7, (uint64_t)&protocol requirements base descriptor for Strideable, associated type descriptor for Strideable.Stride);
  (*(void (**)(uint64_t, uint64_t, const char *))(*((void *)AssociatedTypeWitness - 1) + 32))(v14, v13, AssociatedTypeWitness);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 16))(a3, v10, v7);
  *(void *)uint64_t v9 = 0;
  *(unsigned char *)(v9 + 8) = 0;
  return result;
}

uint64_t StrideToIterator.next()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v58 = a2;
  uint64_t v2 = *(void *)(a1 + 16);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0, (uint64_t)&unk_1ECA01F50, v2, "index value ", 0);
  MEMORY[0x1F4188790](TupleTypeMetadata2);
  uint64_t v52 = (uint64_t *)((char *)&v46 - v5);
  unsigned int v55 = *(int ***)(a1 + 24);
  uint64_t v6 = v55;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v55, v2, (uint64_t)&protocol requirements base descriptor for Strideable, associated type descriptor for Strideable.Stride);
  uint64_t v56 = *((void *)AssociatedTypeWitness - 1);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v9 = (char *)&v46 - v8;
  uint64_t v10 = *(void *)(*(void *)(swift_getAssociatedConformanceWitness((uint64_t)v6, v2, (uint64_t)AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Strideable, associated conformance descriptor for Strideable.Strideable.Stride: SignedNumeric)+ 8)+ 16);
  uint64_t v11 = (uint64_t)swift_getAssociatedTypeWitness(0, (int **)v10, (uint64_t)AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, associated type descriptor for ExpressibleByIntegerLiteral.IntegerLiteralType);
  uint64_t v12 = MEMORY[0x1F4188790](v11);
  uint64_t v14 = (char *)&v46 - v13;
  uint64_t v15 = *(void *)(v2 - 8);
  uint64_t v16 = MEMORY[0x1F4188790](v12);
  uint64_t v51 = (char *)&v46 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v16);
  uint64_t v18 = a1;
  unint64_t v53 = TupleTypeMetadata2;
  uint64_t v54 = a1;
  uint64_t v19 = *(int *)(a1 + 44);
  uint64_t v20 = v59;
  uint64_t v21 = (uint64_t *)(v59 + v19);
  uint64_t v22 = v59 + v19 + *((int *)TupleTypeMetadata2 + 12);
  uint64_t v23 = *(void (**)(void))(v15 + 16);
  uint64_t v57 = (char *)&v46 - v24;
  uint64_t v49 = v21;
  uint64_t v50 = v22;
  Swift::UInt64 v47 = v23;
  v23();
  uint64_t v25 = v20 + *(int *)(v18 + 40);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v10, (uint64_t)AssociatedTypeWitness, v11, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
  (*(void (**)(void *, uint64_t, uint64_t, uint64_t))(AssociatedConformanceWitness + 8))(&unk_18162B0B8, 256, v11, AssociatedConformanceWitness);
  (*(void (**)(char *, const char *, uint64_t))(v10 + 24))(v14, AssociatedTypeWitness, v10);
  unint64_t v27 = v55;
  uint64_t v28 = swift_getAssociatedConformanceWitness((uint64_t)v55, v2, (uint64_t)AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Strideable, associated conformance descriptor for Strideable.Strideable.Stride: Comparable);
  uint64_t v29 = *(uint64_t (**)(uint64_t, char *, const char *, uint64_t))(v28 + 40);
  uint64_t v48 = v25;
  LOBYTE(v11) = v29(v25, v9, AssociatedTypeWitness, v28);
  (*(void (**)(char *, const char *))(v56 + 8))(v9, AssociatedTypeWitness);
  uint64_t v30 = v27;
  uint64_t v31 = v20 + *(int *)(v54 + 36);
  uint64_t v32 = v27[1];
  if ((v11 & 1) == 0)
  {
    uint64_t v33 = v57;
    if (((*((uint64_t (**)(char *, uint64_t, uint64_t))v32 + 3))(v57, v31, v2) & 1) == 0) {
      goto LABEL_3;
    }
LABEL_5:
    (*(void (**)(char *, uint64_t))(v15 + 8))(v33, v2);
    uint64_t v44 = 1;
    uint64_t v43 = v58;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v15 + 56))(v43, v44, 1, v2);
  }
  uint64_t v33 = v57;
  if ((*((uint64_t (**)(char *, uint64_t, uint64_t))v32 + 4))(v57, v31, v2)) {
    goto LABEL_5;
  }
LABEL_3:
  uint64_t v34 = v52;
  Swift::UInt64 v35 = (char *)v52 + *((int *)v53 + 12);
  unint64_t v36 = v49;
  uint64_t v37 = v50;
  uint64_t v38 = *v49;
  uint64_t v39 = *((unsigned __int8 *)v49 + 8);
  *uint64_t v52 = *v49;
  *((unsigned char *)v34 + 8) = v39;
  ((void (*)(char *, uint64_t, uint64_t))v47)(v35, v37, v2);
  uint64_t v40 = v51;
  uint64_t v41 = ((uint64_t (*)(char *, uint64_t, uint64_t, char *, uint64_t, uint64_t, uint64_t, int **))v30[7])(v51, v38, v39, v35, v59, v48, v2, v30);
  LOBYTE(v39) = v42;
  (*(void (**)(char *, uint64_t))(v15 + 8))(v35, v2);
  *unint64_t v36 = v41;
  *((unsigned char *)v36 + 8) = v39 & 1;
  (*(void (**)(uint64_t, char *, uint64_t))(v15 + 40))(v37, v40, v2);
  uint64_t v43 = v58;
  (*(void (**)(uint64_t, char *, uint64_t))(v15 + 32))(v58, v33, v2);
  uint64_t v44 = 0;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v15 + 56))(v43, v44, 1, v2);
}

Swift::UInt64 specialized BidirectionalCollection._index(_:offsetBy:limitedBy:)(Swift::String::Index a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v8 = a2;
  if (a2 < 0)
  {
    uint64_t v31 = 0;
    uint64_t v32 = ((unint64_t)a4 >> 59) & 1;
    if ((a5 & 0x1000000000000000) == 0) {
      LOBYTE(v32) = 1;
    }
    uint64_t v33 = 4 << v32;
    unint64_t v34 = HIBYTE(a5) & 0xF;
    uint64_t v35 = a4 & 0xFFFFFFFFFFFFLL;
    if ((a5 & 0x2000000000000000) != 0) {
      uint64_t v36 = HIBYTE(a5) & 0xF;
    }
    else {
      uint64_t v36 = a4 & 0xFFFFFFFFFFFFLL;
    }
    Swift::UInt64 v37 = 4 * v36;
    if ((a5 & 0x2000000000000000) != 0) {
      BOOL v38 = (a5 & 0x4000000000000000) != 0;
    }
    else {
      BOOL v38 = a4 < 0;
    }
    uint64_t v39 = a5 & 0xFFFFFFFFFFFFFFLL;
    uint64_t v40 = (a5 & 0xFFFFFFFFFFFFFFFLL) + 32;
    while ((a1._rawBits ^ a3) >= 0x4000)
    {
      if ((a1._rawBits & 0xC) == v33)
      {
        Swift::UInt64 rawBits = a1._rawBits;
        uint64_t v71 = v35;
        Swift::UInt64 v46 = v37;
        BOOL v67 = v38;
        uint64_t v47 = v39;
        uint64_t v62 = v40;
        v48._Swift::UInt64 rawBits = _StringGuts._slowEnsureMatchingEncoding(_:)((Swift::String::Index)rawBits)._rawBits;
        uint64_t v40 = v62;
        uint64_t v39 = v47;
        BOOL v38 = v67;
        Swift::UInt64 v37 = v46;
        uint64_t v35 = v71;
        a1._Swift::UInt64 rawBits = v48._rawBits;
        if (v48._rawBits < 0x4000)
        {
LABEL_80:
          unint64_t v58 = 175;
          goto LABEL_81;
        }
      }
      else if (a1._rawBits < 0x4000)
      {
        goto LABEL_80;
      }
      if (v37 < a1._rawBits >> 14) {
        goto LABEL_80;
      }
      if ((a5 & 0x1000000000000000) != 0)
      {
        Swift::UInt64 v49 = a1._rawBits;
        uint64_t v71 = v35;
        Swift::UInt64 v50 = v37;
        BOOL v68 = v38;
        uint64_t v51 = v39;
        uint64_t v63 = v40;
        Swift::UInt64 v52 = specialized String.UTF16View._foreignIndex(before:)(v49);
        uint64_t v40 = v63;
        uint64_t v39 = v51;
        BOOL v38 = v68;
        Swift::UInt64 v37 = v50;
        uint64_t v35 = v71;
        a1._Swift::UInt64 rawBits = v52;
      }
      else if (v38)
      {
        a1._Swift::UInt64 rawBits = (a1._rawBits & 0xFFFFFFFFFFFF0000) - 65523;
      }
      else if ((a1._rawBits & 0xC000) != 0)
      {
        a1._Swift::UInt64 rawBits = a1._rawBits & 0xFFFFFFFFFFFF0000 | 5;
      }
      else
      {
        if (a1._rawBits)
        {
          Swift::UInt64 v41 = a1._rawBits >> 16;
          if ((a5 & 0x2000000000000000) == 0) {
            goto LABEL_56;
          }
        }
        else
        {
          Swift::UInt64 v53 = a1._rawBits;
          uint64_t v71 = v35;
          Swift::UInt64 v54 = v37;
          BOOL v69 = v38;
          uint64_t v55 = v39;
          uint64_t v64 = v40;
          v56._Swift::UInt64 rawBits = _StringGuts.scalarAlignSlow(_:)((Swift::String::Index)v53)._rawBits;
          uint64_t v40 = v64;
          uint64_t v39 = v55;
          BOOL v38 = v69;
          Swift::UInt64 v37 = v54;
          uint64_t v35 = v71;
          a1._Swift::UInt64 rawBits = v56._rawBits & 0xFFFFFFFFFFFFFFF2 | 1;
          Swift::UInt64 v41 = a1._rawBits >> 16;
          if ((a5 & 0x2000000000000000) == 0)
          {
LABEL_56:
            char v42 = (char *)v40;
            uint64_t v43 = v35;
            if ((a4 & 0x1000000000000000) != 0)
            {
              if (a1._rawBits >= 0x10000) {
                goto LABEL_58;
              }
            }
            else
            {
              uint64_t v71 = v35;
              uint64_t v60 = v39;
              Swift::UInt64 v61 = v37;
              BOOL v70 = v38;
              uint64_t v65 = v40;
              char v42 = (char *)_StringObject.sharedUTF8.getter(a4, a5);
              Swift::UInt64 v37 = v61;
              uint64_t v40 = v65;
              uint64_t v39 = v60;
              BOOL v38 = v70;
              uint64_t v35 = v71;
              if (a1._rawBits >= 0x10000)
              {
LABEL_58:
                uint64_t v44 = 0;
                while ((uint64_t)v41 <= v43)
                {
                  if ((v42[v41 - 1 + v44] & 0xC0) != 0x80) {
                    goto LABEL_73;
                  }
                  if (-(uint64_t)v41 == --v44) {
                    goto LABEL_79;
                  }
                }
LABEL_86:
                _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x6F6uLL, 0);
              }
            }
LABEL_79:
            _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x6F5uLL, 0);
          }
        }
        uint64_t v72 = a4;
        uint64_t v73 = v39;
        if (a1._rawBits < 0x10000) {
          goto LABEL_79;
        }
        uint64_t v44 = 0;
        while (1)
        {
          if (v41 > v34) {
            goto LABEL_86;
          }
          if ((*((unsigned char *)&v72 + v41 + v44 - 1) & 0xC0) != 0x80) {
            break;
          }
          --v44;
          if (!(v41 + v44)) {
            goto LABEL_79;
          }
        }
LABEL_73:
        uint64_t v57 = 1 - v44;
        if (v57 == 4) {
          a1._Swift::UInt64 rawBits = (a1._rawBits & 0xFFFFFFFFFFFF0000) - 245756;
        }
        else {
          a1._Swift::UInt64 rawBits = ((v41 - v57) << 16) | 5;
        }
      }
      if (--v31 <= v8) {
        return a1._rawBits;
      }
    }
    return 0;
  }
  else if (a2)
  {
    uint64_t v10 = ((unint64_t)a4 >> 59) & 1;
    if ((a5 & 0x1000000000000000) == 0) {
      LOBYTE(v1_assertionFailure(_:_:flags:)("Fatal error", 11, 2, 0xD000000000000018, 0x80000001816E3220, 0) = 1;
    }
    uint64_t v11 = 4 << v10;
    if ((a5 & 0x2000000000000000) != 0) {
      Swift::UInt64 v12 = HIBYTE(a5) & 0xF;
    }
    else {
      Swift::UInt64 v12 = a4 & 0xFFFFFFFFFFFFLL;
    }
    if ((a5 & 0x2000000000000000) != 0) {
      BOOL v13 = (a5 & 0x4000000000000000) != 0;
    }
    else {
      BOOL v13 = a4 < 0;
    }
    uint64_t v14 = a5 & 0xFFFFFFFFFFFFFFLL;
    uint64_t v15 = (a5 & 0xFFFFFFFFFFFFFFFLL) + 32;
    do
    {
      if ((a1._rawBits ^ a3) < 0x4000) {
        return 0;
      }
      if ((a1._rawBits & 0xC) == v11)
      {
        Swift::UInt64 v18 = a1._rawBits;
        uint64_t v19 = v14;
        uint64_t v20 = v15;
        v21._Swift::UInt64 rawBits = _StringGuts._slowEnsureMatchingEncoding(_:)((Swift::String::Index)v18)._rawBits;
        uint64_t v15 = v20;
        uint64_t v14 = v19;
        a1._Swift::UInt64 rawBits = v21._rawBits;
      }
      Swift::UInt64 v16 = a1._rawBits >> 16;
      if (a1._rawBits >> 16 >= v12)
      {
        unint64_t v58 = 147;
LABEL_81:
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index is out of bounds", 29, 2, "Swift/StringUTF16View.swift", 27, 2, v58, 0);
      }
      if ((a5 & 0x1000000000000000) != 0)
      {
        Swift::UInt64 v22 = a1._rawBits;
        uint64_t v23 = v14;
        uint64_t v24 = v15;
        Swift::UInt64 v25 = specialized String.UTF16View._foreignIndex(after:)(v22);
        uint64_t v15 = v24;
        uint64_t v14 = v23;
        a1._Swift::UInt64 rawBits = v25;
        goto LABEL_13;
      }
      if (v13)
      {
        a1._Swift::UInt64 rawBits = (a1._rawBits & 0xFFFFFFFFFFFF0000) + 65549;
        goto LABEL_13;
      }
      if ((a1._rawBits & 0xC001) != 0)
      {
        if ((a5 & 0x2000000000000000) == 0) {
          goto LABEL_22;
        }
      }
      else
      {
        Swift::UInt64 v26 = a1._rawBits;
        uint64_t v27 = v14;
        uint64_t v28 = v15;
        v29._Swift::UInt64 rawBits = _StringGuts.scalarAlignSlow(_:)((Swift::String::Index)v26)._rawBits;
        uint64_t v15 = v28;
        uint64_t v14 = v27;
        a1._Swift::UInt64 rawBits = v29._rawBits & 0xFFFFFFFFFFFFFFF2 | 1;
        Swift::UInt64 v16 = v29._rawBits >> 16;
        if ((a5 & 0x2000000000000000) == 0)
        {
LABEL_22:
          if ((a4 & 0x1000000000000000) != 0)
          {
            LODWORD(v17) = *(unsigned __int8 *)(v15 + v16);
            if ((v17 & 0x80) == 0) {
              goto LABEL_32;
            }
          }
          else
          {
            uint64_t v66 = v15;
            uint64_t v71 = v14;
            uint64_t v30 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(a4, a5);
            uint64_t v15 = v66;
            uint64_t v14 = v71;
            LODWORD(v17) = v30[v16];
            if ((v17 & 0x80) == 0)
            {
LABEL_32:
              uint64_t v17 = 1;
              goto LABEL_33;
            }
          }
          goto LABEL_24;
        }
      }
      uint64_t v72 = a4;
      uint64_t v73 = v14;
      LODWORD(v17) = *((unsigned __int8 *)&v72 + v16);
      if ((v17 & 0x80) == 0) {
        goto LABEL_32;
      }
LABEL_24:
      LODWORD(v17) = __clz(v17 ^ 0xFF) - 24;
      if (v17 != 4)
      {
        uint64_t v17 = v17;
        goto LABEL_33;
      }
      if ((a1._rawBits & 0xC000) != 0)
      {
        uint64_t v17 = 4;
LABEL_33:
        a1._Swift::UInt64 rawBits = (a1._rawBits + (v17 << 16)) & 0xFFFFFFFFFFFF0000 | 5;
        goto LABEL_13;
      }
      a1._Swift::UInt64 rawBits = a1._rawBits & 0xFFFFFFFFFFFF0000 | 0x4004;
LABEL_13:
      --v8;
    }
    while (v8);
  }
  return a1._rawBits;
}

Swift::UInt64 specialized BidirectionalCollection._index(_:offsetBy:limitedBy:)(Swift::UInt64 result, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5)
{
  uint64_t v7 = a2;
  if (a2 < 0)
  {
    uint64_t v11 = 0;
    uint64_t v12 = (a4 >> 59) & 1;
    if ((a5 & 0x1000000000000000) == 0) {
      LOBYTE(v12) = 1;
    }
    uint64_t v13 = 4 << v12;
    if ((a5 & 0x2000000000000000) != 0) {
      unint64_t v14 = HIBYTE(a5) & 0xF;
    }
    else {
      unint64_t v14 = a4 & 0xFFFFFFFFFFFFLL;
    }
    while ((result ^ a3) >= 0x4000)
    {
      if ((result & 0xC) == v13)
      {
        uint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)((Swift::String::Index)result)._rawBits;
        if (!(result >> 14))
        {
LABEL_35:
          unint64_t v15 = 152;
          goto LABEL_36;
        }
      }
      else if (!(result >> 14))
      {
        goto LABEL_35;
      }
      if ((a5 & 0x1000000000000000) != 0)
      {
        if (v14 < result >> 16)
        {
          unint64_t v15 = 157;
LABEL_36:
          _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index is out of bounds", 29, 2, "Swift/StringUTF8View.swift", 26, 2, v15, 0);
        }
        uint64_t result = String.UTF8View._foreignIndex(before:)((Swift::String::Index)result)._rawBits;
      }
      else
      {
        uint64_t result = (result & 0xFFFFFFFFFFFF0000) - 65532;
      }
      if (--v11 <= v7) {
        return result;
      }
    }
    return 0;
  }
  else if (a2)
  {
    uint64_t v8 = (a4 >> 59) & 1;
    if ((a5 & 0x1000000000000000) == 0) {
      LOBYTE(v8) = 1;
    }
    uint64_t v9 = 4 << v8;
    if ((a5 & 0x2000000000000000) != 0) {
      unint64_t v10 = HIBYTE(a5) & 0xF;
    }
    else {
      unint64_t v10 = a4 & 0xFFFFFFFFFFFFLL;
    }
    do
    {
      while (1)
      {
        if ((result ^ a3) < 0x4000) {
          return 0;
        }
        if ((result & 0xC) != v9) {
          break;
        }
        uint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)((Swift::String::Index)result)._rawBits;
        if ((a5 & 0x1000000000000000) == 0) {
          goto LABEL_11;
        }
LABEL_14:
        if (v10 <= result >> 16)
        {
          unint64_t v15 = 144;
          goto LABEL_36;
        }
        uint64_t result = String.UTF8View._foreignIndex(after:)((Swift::String::Index)result)._rawBits;
        if (!--v7) {
          return result;
        }
      }
      if ((a5 & 0x1000000000000000) != 0) {
        goto LABEL_14;
      }
LABEL_11:
      uint64_t result = (result & 0xFFFFFFFFFFFF0000) + 65540;
      --v7;
    }
    while (v7);
  }
  return result;
}

uint64_t BidirectionalCollection._index(_:offsetBy:limitedBy:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v33 = a3;
  uint64_t v31 = a6;
  uint64_t v10 = *(void *)(a5 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (int **)v10, a4, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  uint64_t v12 = MEMORY[0x1F4188790](AssociatedTypeWitness);
  unint64_t v14 = (char *)&v29 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  Swift::UInt64 v16 = (char *)&v29 - v15;
  uint64_t v30 = v17;
  Swift::UInt64 v18 = *(void (**)(char *, uint64_t, const char *))(v17 + 16);
  if (a2 < 0)
  {
    v18(v14, a1, AssociatedTypeWitness);
    uint64_t v32 = a4;
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v10, a4, (uint64_t)AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Collection, associated conformance descriptor for Collection.Collection.Index: Comparable);
    uint64_t v24 = 0;
    uint64_t v25 = *(void *)(AssociatedConformanceWitness + 8);
    Swift::UInt64 v26 = *(uint64_t (**)(char *, uint64_t, const char *, uint64_t))(v25 + 8);
    while ((v26(v14, v33, AssociatedTypeWitness, v25) & 1) == 0)
    {
      --v24;
      (*(void (**)(char *, uint64_t, uint64_t))(a5 + 40))(v14, v32, a5);
      if (v24 <= a2)
      {
        uint64_t v22 = v30;
        uint64_t v21 = v31;
        (*(void (**)(uint64_t, char *, const char *))(v30 + 32))(v31, v14, AssociatedTypeWitness);
        goto LABEL_11;
      }
    }
    uint64_t v22 = v30;
    (*(void (**)(char *, const char *))(v30 + 8))(v14, AssociatedTypeWitness);
    goto LABEL_14;
  }
  v18((char *)&v29 - v15, a1, AssociatedTypeWitness);
  if (a2)
  {
    uint64_t v19 = *(void *)(swift_getAssociatedConformanceWitness(v10, a4, (uint64_t)AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Collection, associated conformance descriptor for Collection.Collection.Index: Comparable)+ 8);
    uint64_t v20 = *(uint64_t (**)(char *, uint64_t, const char *, uint64_t))(v19 + 8);
    while ((v20(v16, v33, AssociatedTypeWitness, v19) & 1) == 0)
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v10 + 192))(v16, a4, v10);
      if (!--a2) {
        goto LABEL_6;
      }
    }
    uint64_t v22 = v30;
    (*(void (**)(char *, const char *))(v30 + 8))(v16, AssociatedTypeWitness);
LABEL_14:
    uint64_t v27 = 1;
    uint64_t v21 = v31;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, const char *))(v22 + 56))(v21, v27, 1, AssociatedTypeWitness);
  }
LABEL_6:
  uint64_t v22 = v30;
  uint64_t v21 = v31;
  (*(void (**)(uint64_t, char *, const char *))(v30 + 32))(v31, v16, AssociatedTypeWitness);
LABEL_11:
  uint64_t v27 = 0;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, const char *))(v22 + 56))(v21, v27, 1, AssociatedTypeWitness);
}

uint64_t Collection._advanceForward(_:by:limitedBy:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v23 = a3;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (int **)a5, a4, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  unint64_t v14 = (char *)&v21 - v13;
  if (a2 < 0) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Only BidirectionalCollections can be advanced by a negative amount", 66, 2, "Swift/Collection.swift", 22, 2, 0x3D3uLL, 0);
  }
  uint64_t v21 = v12;
  uint64_t v22 = a6;
  (*(void (**)(char *, uint64_t, const char *))(v12 + 16))(v14, a1, AssociatedTypeWitness);
  if (a2)
  {
    uint64_t v15 = *(void *)(swift_getAssociatedConformanceWitness(a5, a4, (uint64_t)AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Collection, associated conformance descriptor for Collection.Collection.Index: Comparable)+ 8);
    Swift::UInt64 v16 = *(uint64_t (**)(char *, uint64_t, const char *, uint64_t))(v15 + 8);
    while ((v16(v14, v23, AssociatedTypeWitness, v15) & 1) == 0)
    {
      (*(void (**)(char *, uint64_t, uint64_t))(a5 + 192))(v14, a4, a5);
      if (!--a2) {
        goto LABEL_6;
      }
    }
    uint64_t v18 = v21;
    (*(void (**)(char *, const char *))(v21 + 8))(v14, AssociatedTypeWitness);
    uint64_t v19 = 1;
    uint64_t v17 = v22;
  }
  else
  {
LABEL_6:
    uint64_t v18 = v21;
    uint64_t v17 = v22;
    (*(void (**)(uint64_t, char *, const char *))(v21 + 32))(v22, v14, AssociatedTypeWitness);
    uint64_t v19 = 0;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, const char *))(v18 + 56))(v17, v19, 1, AssociatedTypeWitness);
}

uint64_t specialized BidirectionalCollection._distance(from:to:)(Swift::UInt64 rawBits, unint64_t a2, unint64_t a3, unint64_t a4)
{
  Swift::UInt64 v5 = a2 >> 14;
  if (rawBits >> 14 < a2 >> 14)
  {
    uint64_t v6 = 0;
    uint64_t v7 = (a3 >> 59) & 1;
    if ((a4 & 0x1000000000000000) == 0) {
      LOBYTE(v7) = 1;
    }
    uint64_t v8 = 4 << v7;
    if ((a4 & 0x2000000000000000) != 0) {
      unint64_t v9 = HIBYTE(a4) & 0xF;
    }
    else {
      unint64_t v9 = a3 & 0xFFFFFFFFFFFFLL;
    }
    while (1)
    {
      uint64_t v10 = v6 + 1;
      if (__OFADD__(v6, 1))
      {
        __break(1u);
LABEL_36:
        unint64_t v16 = 144;
LABEL_39:
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index is out of bounds", 29, 2, "Swift/StringUTF8View.swift", 26, 2, v16, 0);
      }
      if ((rawBits & 0xC) == v8)
      {
        Swift::UInt64 rawBits = _StringGuts._slowEnsureMatchingEncoding(_:)((Swift::String::Index)rawBits)._rawBits;
        if ((a4 & 0x1000000000000000) == 0)
        {
LABEL_7:
          Swift::UInt64 rawBits = (rawBits & 0xFFFFFFFFFFFF0000) + 65540;
          goto LABEL_8;
        }
      }
      else if ((a4 & 0x1000000000000000) == 0)
      {
        goto LABEL_7;
      }
      if (v9 <= rawBits >> 16) {
        goto LABEL_36;
      }
      Swift::UInt64 rawBits = String.UTF8View._foreignIndex(after:)((Swift::String::Index)rawBits)._rawBits;
LABEL_8:
      ++v6;
      if (v5 == rawBits >> 14) {
        return v10;
      }
    }
  }
  if (v5 >= rawBits >> 14) {
    return 0;
  }
  uint64_t v10 = 0;
  uint64_t v11 = (a3 >> 59) & 1;
  if ((a4 & 0x1000000000000000) == 0) {
    LOBYTE(v11) = 1;
  }
  uint64_t v12 = 4 << v11;
  if ((a4 & 0x2000000000000000) != 0) {
    unint64_t v13 = HIBYTE(a4) & 0xF;
  }
  else {
    unint64_t v13 = a3 & 0xFFFFFFFFFFFFLL;
  }
  do
  {
    if (__OFSUB__(v10--, 1))
    {
      __break(1u);
LABEL_38:
      unint64_t v16 = 152;
      goto LABEL_39;
    }
    if ((rawBits & 0xC) == v12)
    {
      Swift::UInt64 rawBits = _StringGuts._slowEnsureMatchingEncoding(_:)((Swift::String::Index)rawBits)._rawBits;
      if (!(rawBits >> 14)) {
        goto LABEL_38;
      }
    }
    else if (!(rawBits >> 14))
    {
      goto LABEL_38;
    }
    if ((a4 & 0x1000000000000000) != 0)
    {
      if (v13 < rawBits >> 16)
      {
        unint64_t v16 = 157;
        goto LABEL_39;
      }
      Swift::UInt64 rawBits = String.UTF8View._foreignIndex(before:)((Swift::String::Index)rawBits)._rawBits;
    }
    else
    {
      Swift::UInt64 rawBits = (rawBits & 0xFFFFFFFFFFFF0000) - 65532;
    }
  }
  while (v5 != rawBits >> 14);
  return v10;
}

uint64_t BidirectionalCollection._distance(from:to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v27 = a4;
  uint64_t v7 = *(int ***)(a4 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v7, a3, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  uint64_t v9 = *((void *)AssociatedTypeWitness - 1);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v11 = (char *)&v25 - v10;
  (*(void (**)(char *, uint64_t, const char *))(v9 + 16))((char *)&v25 - v10, a1, AssociatedTypeWitness);
  uint64_t v28 = v7;
  uint64_t v29 = a3;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness((uint64_t)v7, a3, (uint64_t)AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Collection, associated conformance descriptor for Collection.Collection.Index: Comparable);
  if ((*(uint64_t (**)(char *, uint64_t, const char *, uint64_t))(AssociatedConformanceWitness + 16))(v11, a2, AssociatedTypeWitness, AssociatedConformanceWitness))
  {
    unint64_t v13 = *(uint64_t (**)(char *, uint64_t, const char *, uint64_t))(*(void *)(AssociatedConformanceWitness + 8)
                                                                           + 8);
    uint64_t v27 = *(void *)(AssociatedConformanceWitness + 8);
    unint64_t v14 = v13;
    uint64_t result = ((uint64_t (*)(char *, uint64_t, const char *))v13)(v11, a2, AssociatedTypeWitness);
    if ((result & 1) == 0)
    {
      uint64_t v16 = a2;
      uint64_t v26 = v9;
      uint64_t v17 = 0;
      uint64_t v18 = v28[24];
      while (1)
      {
        uint64_t v19 = v17 + 1;
        if (__OFADD__(v17, 1)) {
          break;
        }
        ((void (*)(char *, uint64_t, int **))v18)(v11, v29, v28);
        uint64_t result = v14(v11, v16, AssociatedTypeWitness, v27);
        ++v17;
        if (result) {
          goto LABEL_13;
        }
      }
      __break(1u);
LABEL_16:
      __break(1u);
      return result;
    }
  }
  else if ((*(uint64_t (**)(char *, uint64_t, const char *, uint64_t))(AssociatedConformanceWitness + 40))(v11, a2, AssociatedTypeWitness, AssociatedConformanceWitness))
  {
    uint64_t v20 = *(void *)(AssociatedConformanceWitness + 8);
    uint64_t v21 = *(uint64_t (**)(char *, uint64_t, const char *, uint64_t))(v20 + 8);
    uint64_t result = v21(v11, a2, AssociatedTypeWitness, v20);
    if ((result & 1) == 0)
    {
      uint64_t v22 = a2;
      uint64_t v26 = v9;
      uint64_t v19 = 0;
      uint64_t v23 = *(void (**)(char *, uint64_t, uint64_t))(v27 + 40);
      while (!__OFSUB__(v19--, 1))
      {
        v23(v11, v29, v27);
        uint64_t result = v21(v11, v22, AssociatedTypeWitness, v20);
        if (result)
        {
LABEL_13:
          uint64_t v9 = v26;
          goto LABEL_14;
        }
      }
      goto LABEL_16;
    }
  }
  uint64_t v19 = 0;
LABEL_14:
  (*(void (**)(char *, const char *))(v9 + 8))(v11, AssociatedTypeWitness);
  return v19;
}

uint64_t BidirectionalCollection<>.popLast()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v98 = a3;
  uint64_t v99 = a2;
  uint64_t v5 = *(void *)(a2 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, (int **)v5, a1, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0, (uint64_t)AssociatedTypeWitness, (uint64_t)AssociatedTypeWitness, "lower upper ", 0);
  uint64_t v7 = MEMORY[0x1F4188790](TupleTypeMetadata2);
  uint64_t v9 = (char *)&v78 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = MEMORY[0x1F4188790](v7);
  uint64_t v88 = (char *)&v78 - v11;
  uint64_t v97 = *((void *)AssociatedTypeWitness - 1);
  uint64_t v12 = MEMORY[0x1F4188790](v10);
  uint64_t v92 = (char *)&v78 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  unint64_t v91 = (char *)&v78 - v15;
  uint64_t v16 = MEMORY[0x1F4188790](v14);
  uint64_t v89 = (char *)&v78 - v17;
  uint64_t v18 = MEMORY[0x1F4188790](v16);
  unint64_t v95 = (char *)&v78 - v19;
  MEMORY[0x1F4188790](v18);
  uint64_t v94 = (char *)&v78 - v20;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v5, a1, (uint64_t)AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Collection, associated conformance descriptor for Collection.Collection.Index: Comparable);
  uint64_t v22 = type metadata accessor for Range(0, (uint64_t)AssociatedTypeWitness, AssociatedConformanceWitness, v21);
  uint64_t v86 = (uint64_t)*(v22 - 1);
  uint64_t v87 = v22;
  uint64_t v23 = MEMORY[0x1F4188790](v22);
  uint64_t v84 = (char *)&v78 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = MEMORY[0x1F4188790](v23);
  uint64_t v85 = (char *)&v78 - v26;
  uint64_t v100 = *(void *)(a1 - 8);
  uint64_t v27 = MEMORY[0x1F4188790](v25);
  uint64_t v29 = (char *)&v78 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v27);
  uint64_t v96 = (char *)&v78 - v30;
  uint64_t v31 = swift_getAssociatedTypeWitness(255, *(int ***)(v5 + 8), a1, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
  unint64_t v34 = type metadata accessor for Optional(0, (uint64_t)v31, v32, v33);
  uint64_t v35 = MEMORY[0x1F4188790](v34 - 1);
  Swift::UInt64 v37 = (char *)&v78 - v36;
  uint64_t v102 = v31;
  uint64_t v101 = *((void *)v31 - 1);
  MEMORY[0x1F4188790](v35);
  uint64_t v39 = (char *)&v78 - v38;
  if ((*(uint64_t (**)(uint64_t, uint64_t))(v5 + 104))(a1, v5))
  {
    uint64_t v40 = v102;
    Swift::UInt64 v41 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, const char *))(v101 + 56);
    uint64_t v42 = v98;
    return v41(v42, 1, 1, v40);
  }
  else
  {
    uint64_t v82 = v9;
    uint64_t v83 = v3;
    BidirectionalCollection.last.getter(a1, v99, (uint64_t)v37);
    if ((*(unsigned int (**)(char *, uint64_t, const char *))(v101 + 48))(v37, 1, v102) == 1) {
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/BidirectionalCollection.swift", 35, 2, 0x13BuLL, 0);
    }
    uint64_t v44 = *(void (**)(uint64_t, char *, const char *))(v101 + 32);
    unint64_t v79 = v39;
    uint64_t v81 = v101 + 32;
    uint64_t v80 = v44;
    v44((uint64_t)v39, v37, v102);
    uint64_t v45 = v100;
    Swift::UInt64 v46 = *(void (**)(char *, uint64_t, uint64_t))(v100 + 16);
    uint64_t v47 = v83;
    v46(v96, v83, a1);
    Swift::String::Index v48 = v94;
    (*(void (**)(uint64_t, uint64_t))(v5 + 64))(a1, v5);
    Swift::UInt64 v49 = v29;
    v46(v29, v47, a1);
    Swift::UInt64 v50 = *(void (**)(uint64_t, uint64_t))(v5 + 72);
    uint64_t v51 = v89;
    uint64_t v78 = v5;
    v50(a1, v5);
    Swift::UInt64 v53 = *(void (**)(uint64_t, uint64_t))(v45 + 8);
    uint64_t v52 = v45 + 8;
    v53(v47, a1);
    Swift::UInt64 v54 = v95;
    (*(void (**)(char *, uint64_t))(v99 + 32))(v51, a1);
    uint64_t v55 = v97;
    uint64_t v99 = *(void *)(v97 + 8);
    ((void (*)(char *, const char *))v99)(v51, AssociatedTypeWitness);
    uint64_t v89 = (char *)v53;
    v53((uint64_t)v49, a1);
    Swift::String::Index v56 = *(void (**)(char *, char *, const char *))(v55 + 16);
    uint64_t v57 = v91;
    v56(v91, v48, AssociatedTypeWitness);
    unint64_t v58 = v92;
    v56(v92, v54, AssociatedTypeWitness);
    if (((*(uint64_t (**)(char *, char *, const char *))(AssociatedConformanceWitness + 24))(v57, v58, AssociatedTypeWitness) & 1) == 0)_assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0); {
    uint64_t v59 = v58;
    }
    uint64_t v60 = (void (*)(char *, const char *))v99;
    ((void (*)(char *, const char *))v99)(v59, AssociatedTypeWitness);
    v60(v57, AssociatedTypeWitness);
    uint64_t v100 = v52;
    Swift::UInt64 v61 = TupleTypeMetadata2;
    uint64_t v62 = v88;
    uint64_t v63 = &v88[*((int *)TupleTypeMetadata2 + 12)];
    uint64_t v92 = (char *)a1;
    uint64_t v64 = *(void (**)(char *, char *, const char *))(v97 + 32);
    v64(v88, v94, AssociatedTypeWitness);
    v64(v63, v95, AssociatedTypeWitness);
    uint64_t v65 = v56;
    uint64_t v66 = v82;
    BOOL v67 = &v82[*((int *)v61 + 12)];
    v65(v82, v62, AssociatedTypeWitness);
    v65(v67, v63, AssociatedTypeWitness);
    BOOL v68 = v84;
    v64(v84, v66, AssociatedTypeWitness);
    BOOL v69 = (void (*)(char *, const char *))v99;
    ((void (*)(char *, const char *))v99)(v67, AssociatedTypeWitness);
    BOOL v70 = &v66[*((int *)TupleTypeMetadata2 + 12)];
    v64(v66, v62, AssociatedTypeWitness);
    v64(v70, v63, AssociatedTypeWitness);
    uint64_t v71 = v87;
    v64(&v68[*((int *)v87 + 9)], v70, AssociatedTypeWitness);
    v69(v66, AssociatedTypeWitness);
    uint64_t v73 = v85;
    uint64_t v72 = v86;
    (*(void (**)(char *, char *, Class *))(v86 + 32))(v85, v68, v71);
    uint64_t v74 = v96;
    uint64_t v75 = v92;
    (*(void (**)(char *, char *))(v78 + 88))(v73, v92);
    (*(void (**)(char *, Class *))(v72 + 8))(v73, v71);
    ((void (*)(char *, char *))v89)(v74, v75);
    uint64_t v76 = v98;
    unint64_t v77 = v102;
    v80(v98, v79, v102);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, const char *))(v101 + 56))(v76, 0, 1, v77);
  }
}

unint64_t specialized BidirectionalCollection.last.getter(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x2000000000000000) != 0) {
    uint64_t v2 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v2)
  {
    uint64_t v5 = 7;
    if (((a2 >> 60) & ((a1 & 0x800000000000000) == 0)) != 0) {
      uint64_t v5 = 11;
    }
    v6._Swift::UInt64 rawBits = _StringGuts.validateInclusiveScalarIndex(_:)((Swift::String::Index)(v5 | (v2 << 16)))._rawBits;
    if (!(v6._rawBits >> 14)) {
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index is out of bounds", 29, 2, "Swift/StringUnicodeScalarView.swift", 35, 2, 0x84uLL, 0);
    }
    if ((a2 & 0x1000000000000000) != 0)
    {
      v27._Swift::UInt64 rawBits = String.UnicodeScalarView._foreignIndex(before:)(v6)._rawBits;
      v28._Swift::UInt64 rawBits = _StringGuts.validateScalarIndex(_:)(v27)._rawBits;
      Swift::UInt32 value = _StringGuts.foreignErrorCorrectedScalar(startingAt:)((Swift::String::Index)(v28._rawBits & 0xFFFFFFFFFFFF0000))._0._value;
    }
    else
    {
      if ((a2 & 0x2000000000000000) != 0)
      {
        uint64_t v33 = a1;
        uint64_t v34 = a2 & 0xFFFFFFFFFFFFFFLL;
        uint64_t v13 = (char *)&v33 + (v6._rawBits >> 16);
        if ((*(v13 - 1) & 0xC0) == 0x80)
        {
          uint64_t v14 = 0;
          uint64_t v15 = v13 - 2;
          do
            int v16 = v15[v14--] & 0xC0;
          while (v16 == 128);
          uint64_t v11 = 1 - v14;
        }
        else
        {
          uint64_t v11 = 1;
        }
      }
      else
      {
        if ((a1 & 0x1000000000000000) != 0)
        {
          id v7 = (id)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
        }
        else
        {
          Swift::UInt64 rawBits = v6._rawBits;
          id v7 = _StringObject.sharedUTF8.getter(a1, a2);
          v6._Swift::UInt64 rawBits = rawBits;
        }
        uint64_t v8 = 0;
        Swift::UInt64 v9 = (Swift::UInt64)v7 + (v6._rawBits >> 16) - 1;
        do
          int v10 = *(unsigned char *)(v9 + v8--) & 0xC0;
        while (v10 == 128);
        uint64_t v11 = -v8;
      }
      v17._Swift::UInt64 rawBits = _StringGuts.validateScalarIndex(_:)((Swift::String::Index)((v6._rawBits - (v11 << 16)) & 0xFFFFFFFFFFFF0000 | 5))._rawBits >> 16;
      if ((a2 & 0x2000000000000000) != 0)
      {
        uint64_t v33 = a1;
        uint64_t v34 = a2 & 0xFFFFFFFFFFFFFFLL;
        Swift::UInt32 value = *((unsigned __int8 *)&v33 + v17._rawBits);
        if (*((char *)&v33 + v17._rawBits) < 0)
        {
          switch(__clz(value ^ 0xFF))
          {
            case 0x1Au:
              uint64_t v18 = &v33;
LABEL_29:
              Swift::UInt32 value = *((unsigned char *)v18 + v17._rawBits + 1) & 0x3F | ((value & 0x1F) << 6);
              break;
            case 0x1Bu:
              uint64_t v18 = &v33;
LABEL_31:
              Swift::UInt64 v19 = (Swift::UInt64)v18 + v17._rawBits;
              char v20 = *(unsigned char *)(v19 + 1);
              char v21 = *(unsigned char *)(v19 + 2);
              int v22 = ((value & 0xF) << 12) | ((v20 & 0x3F) << 6);
              goto LABEL_34;
            case 0x1Cu:
              uint64_t v18 = &v33;
LABEL_33:
              uint64_t v23 = (char *)v18 + v17._rawBits;
              char v24 = v23[1];
              char v25 = v23[2];
              char v21 = v23[3];
              int v22 = ((value & 0xF) << 18) | ((v24 & 0x3F) << 12) | ((v25 & 0x3F) << 6);
LABEL_34:
              Swift::UInt32 value = v22 & 0xFFFFFFC0 | v21 & 0x3F;
              break;
            default:
              break;
          }
        }
      }
      else
      {
        if ((a1 & 0x1000000000000000) != 0)
        {
          uint64_t v18 = (uint64_t *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
        }
        else
        {
          uint64_t v29 = a2;
          Swift::UInt64 v30 = v17._rawBits;
          uint64_t v31 = (uint64_t *)_StringObject.sharedUTF8.getter(a1, v29);
          v17._Swift::UInt64 rawBits = v30;
          uint64_t v18 = v31;
        }
        Swift::UInt32 value = *((unsigned __int8 *)v18 + v17._rawBits);
        if (*((char *)v18 + v17._rawBits) < 0)
        {
          switch(__clz(value ^ 0xFF))
          {
            case 0x1Au:
              goto LABEL_29;
            case 0x1Bu:
              goto LABEL_31;
            case 0x1Cu:
              goto LABEL_33;
            default:
              break;
          }
        }
      }
    }
  }
  else
  {
    Swift::UInt32 value = 0;
  }
  LOBYTE(v33) = v2 == 0;
  return value | ((unint64_t)(v2 == 0) << 32);
}

unint64_t specialized BidirectionalCollection.last.getter(unint64_t a1, Swift::String::Index a2, uint64_t a3, uint64_t a4)
{
  Swift::UInt64 v4 = a1 >> 14;
  Swift::UInt64 v5 = a2._rawBits >> 14;
  if (a1 >> 14 == a2._rawBits >> 14)
  {
    Swift::UInt32 value = 0;
    goto LABEL_3;
  }
  v10._Swift::UInt64 rawBits = _StringGuts.validateInclusiveScalarIndex(_:)(a2)._rawBits;
  if (!(v10._rawBits >> 14)) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index is out of bounds", 29, 2, "Swift/StringUnicodeScalarView.swift", 35, 2, 0x84uLL, 0);
  }
  if ((a4 & 0x1000000000000000) != 0)
  {
    Swift::UInt64 rawBits = String.UnicodeScalarView._foreignIndex(before:)(v10)._rawBits;
  }
  else
  {
    if ((a4 & 0x2000000000000000) != 0)
    {
      uint64_t v38 = a3;
      uint64_t v39 = a4 & 0xFFFFFFFFFFFFFFLL;
      int v16 = (char *)&v38 + (v10._rawBits >> 16);
      if ((*(v16 - 1) & 0xC0) == 0x80)
      {
        uint64_t v17 = 0;
        uint64_t v18 = v16 - 2;
        do
          int v19 = v18[v17--] & 0xC0;
        while (v19 == 128);
        uint64_t v15 = 1 - v17;
      }
      else
      {
        uint64_t v15 = 1;
      }
    }
    else
    {
      if ((a3 & 0x1000000000000000) != 0)
      {
        id v11 = (id)((a4 & 0xFFFFFFFFFFFFFFFLL) + 32);
      }
      else
      {
        Swift::UInt64 v37 = v10._rawBits;
        id v11 = _StringObject.sharedUTF8.getter(a3, a4);
        v10._Swift::UInt64 rawBits = v37;
      }
      uint64_t v12 = 0;
      Swift::UInt64 v13 = (Swift::UInt64)v11 + (v10._rawBits >> 16) - 1;
      do
        int v14 = *(unsigned char *)(v13 + v12--) & 0xC0;
      while (v14 == 128);
      uint64_t v15 = -v12;
    }
    Swift::UInt64 rawBits = (v10._rawBits - (v15 << 16)) & 0xFFFFFFFFFFFF0000 | 5;
  }
  char v21 = (a4 & 0x1000000000000000) == 0 || (a3 & 0x800000000000000) != 0;
  uint64_t v22 = 4 << v21;
  if ((rawBits & 0xC) == v22 || (rawBits & 1) == 0)
  {
    if ((rawBits & 0xC) == v22) {
      Swift::UInt64 rawBits = _StringGuts._slowEnsureMatchingEncoding(_:)((Swift::String::Index)rawBits)._rawBits;
    }
    if (rawBits >> 14 >= v4 && rawBits >> 14 < v5)
    {
      if ((rawBits & 1) == 0) {
        Swift::UInt64 rawBits = _StringGuts.scalarAlignSlow(_:)((Swift::String::Index)rawBits)._rawBits & 0xFFFFFFFFFFFFFFF2 | 1;
      }
      goto LABEL_34;
    }
    unint64_t v26 = 43;
LABEL_42:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Substring index is out of bounds", 32, 2, "Swift/StringIndexValidation.swift", 33, 2, v26, 0);
  }
  if (rawBits >> 14 < v4 || rawBits >> 14 >= v5)
  {
    unint64_t v26 = 143;
    goto LABEL_42;
  }
LABEL_34:
  if ((a4 & 0x1000000000000000) != 0)
  {
    Swift::UInt32 value = _StringGuts.foreignErrorCorrectedScalar(startingAt:)((Swift::String::Index)(rawBits & 0xFFFFFFFFFFFF0000))._0._value;
  }
  else
  {
    Swift::UInt64 v24 = rawBits >> 16;
    if ((a4 & 0x2000000000000000) != 0)
    {
      uint64_t v38 = a3;
      uint64_t v39 = a4 & 0xFFFFFFFFFFFFFFLL;
      Swift::UInt32 value = *((unsigned __int8 *)&v38 + v24);
      if (*((char *)&v38 + v24) < 0)
      {
        switch(__clz(value ^ 0xFF))
        {
          case 0x1Au:
            char v25 = &v38;
LABEL_47:
            Swift::UInt32 value = *((unsigned char *)v25 + v24 + 1) & 0x3F | ((value & 0x1F) << 6);
            break;
          case 0x1Bu:
            char v25 = &v38;
LABEL_49:
            Swift::String::Index v27 = (char *)v25 + v24;
            char v28 = v27[1];
            char v29 = v27[2];
            int v30 = ((value & 0xF) << 12) | ((v28 & 0x3F) << 6);
            goto LABEL_52;
          case 0x1Cu:
            char v25 = &v38;
LABEL_51:
            uint64_t v31 = (char *)v25 + v24;
            char v32 = v31[1];
            char v33 = v31[2];
            char v29 = v31[3];
            int v30 = ((value & 0xF) << 18) | ((v32 & 0x3F) << 12) | ((v33 & 0x3F) << 6);
LABEL_52:
            Swift::UInt32 value = v30 & 0xFFFFFFC0 | v29 & 0x3F;
            break;
          default:
            break;
        }
      }
    }
    else
    {
      if ((a3 & 0x1000000000000000) != 0)
      {
        char v25 = (uint64_t *)((a4 & 0xFFFFFFFFFFFFFFFLL) + 32);
      }
      else
      {
        uint64_t v34 = a4;
        Swift::UInt64 v35 = rawBits >> 16;
        uint64_t v36 = (uint64_t *)_StringObject.sharedUTF8.getter(a3, v34);
        Swift::UInt64 v24 = v35;
        char v25 = v36;
      }
      Swift::UInt32 value = *((unsigned __int8 *)v25 + v24);
      if (*((char *)v25 + v24) < 0)
      {
        switch(__clz(value ^ 0xFF))
        {
          case 0x1Au:
            goto LABEL_47;
          case 0x1Bu:
            goto LABEL_49;
          case 0x1Cu:
            goto LABEL_51;
          default:
            break;
        }
      }
    }
  }
LABEL_3:
  LOBYTE(v38) = v4 == v5;
  return value | ((unint64_t)(v4 == v5) << 32);
}

uint64_t specialized BidirectionalCollection.last.getter(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0) {
    uint64_t v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (!v2) {
    return 0;
  }
  uint64_t v5 = 7;
  if (((a2 >> 60) & ((a1 & 0x800000000000000) == 0)) != 0) {
    uint64_t v5 = 11;
  }
  v6._Swift::UInt64 rawBits = String.index(before:)((Swift::String::Index)(v5 | (v2 << 16)))._rawBits;
  return String.subscript.getter(v6, a1, a2);
}

uint64_t BidirectionalCollection.last.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = *(void *)(a2 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (int **)v6, a1, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  uint64_t v8 = *((void *)AssociatedTypeWitness - 1);
  uint64_t v9 = MEMORY[0x1F4188790](AssociatedTypeWitness);
  id v11 = &v23[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v9);
  Swift::UInt64 v13 = &v23[-v12];
  if ((*(uint64_t (**)(uint64_t, uint64_t))(v6 + 104))(a1, v6))
  {
    int v14 = swift_getAssociatedTypeWitness(0, *(int ***)(v6 + 8), a1, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
    uint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, const char *))(*((void *)v14 - 1) + 56);
    return v15(a3, 1, 1, v14);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t))(v6 + 72))(a1, v6);
    (*(void (**)(unsigned char *, uint64_t, uint64_t))(a2 + 32))(v11, a1, a2);
    uint64_t v17 = *(void (**)(unsigned char *, const char *))(v8 + 8);
    v17(v11, AssociatedTypeWitness);
    uint64_t v18 = (void (*)(unsigned char *, void))(*(uint64_t (**)(unsigned char *, unsigned char *, uint64_t, uint64_t))(v6 + 80))(v23, v13, a1, v6);
    uint64_t v20 = v19;
    char v21 = swift_getAssociatedTypeWitness(0, *(int ***)(v6 + 8), a1, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
    uint64_t v22 = *((void *)v21 - 1);
    (*(void (**)(uint64_t, uint64_t, const char *))(v22 + 16))(a3, v20, v21);
    v18(v23, 0);
    v17(v13, AssociatedTypeWitness);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, const char *))(v22 + 56))(a3, 0, 1, v21);
  }
}

uint64_t BidirectionalCollection<>.removeLast()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(char *, char *)@<X8>)
{
  uint64_t v80 = a3;
  uint64_t v6 = *(void *)(a2 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, (int **)v6, a1, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0, (uint64_t)AssociatedTypeWitness, (uint64_t)AssociatedTypeWitness, "lower upper ", 0);
  uint64_t v8 = MEMORY[0x1F4188790](TupleTypeMetadata2);
  uint64_t v78 = (char *)&v72 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = MEMORY[0x1F4188790](v8);
  unint64_t v77 = (char *)&v72 - v11;
  uint64_t v87 = *((void *)AssociatedTypeWitness - 1);
  uint64_t v12 = MEMORY[0x1F4188790](v10);
  uint64_t v83 = (char *)&v72 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v81 = (char *)&v72 - v15;
  uint64_t v16 = MEMORY[0x1F4188790](v14);
  uint64_t v18 = (char *)&v72 - v17;
  uint64_t v19 = MEMORY[0x1F4188790](v16);
  uint64_t v82 = (char *)&v72 - v20;
  MEMORY[0x1F4188790](v19);
  uint64_t v86 = (char *)&v72 - v21;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v6, a1, (uint64_t)AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Collection, associated conformance descriptor for Collection.Collection.Index: Comparable);
  uint64_t v23 = type metadata accessor for Range(0, (uint64_t)AssociatedTypeWitness, AssociatedConformanceWitness, v22);
  uint64_t v75 = (uint64_t)*(v23 - 1);
  uint64_t v76 = v23;
  uint64_t v24 = MEMORY[0x1F4188790](v23);
  uint64_t v73 = (char *)&v72 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = MEMORY[0x1F4188790](v24);
  uint64_t v74 = (char *)&v72 - v27;
  uint64_t v28 = *(void *)(a1 - 8);
  uint64_t v29 = MEMORY[0x1F4188790](v26);
  uint64_t v31 = (char *)&v72 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v29);
  uint64_t v88 = (char *)&v72 - v32;
  uint64_t v90 = v6;
  char v33 = swift_getAssociatedTypeWitness(255, *(int ***)(v6 + 8), a1, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
  uint64_t v36 = type metadata accessor for Optional(0, (uint64_t)v33, v34, v35);
  MEMORY[0x1F4188790](v36 - 1);
  uint64_t v38 = (char *)&v72 - v37;
  uint64_t v84 = a2;
  uint64_t v89 = v3;
  BidirectionalCollection.last.getter(a1, a2, (uint64_t)&v72 - v37);
  uint64_t v39 = *((void *)v33 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, const char *))(v39 + 48))(v38, 1, v33) == 1) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/BidirectionalCollection.swift", 35, 2, 0x14BuLL, 0);
  }
  (*(void (**)(uint64_t (*)(char *, char *), char *, const char *))(v39 + 32))(v80, v38, v33);
  uint64_t v40 = v28;
  Swift::UInt64 v41 = *(void (**)(char *, uint64_t, uint64_t))(v28 + 16);
  uint64_t v42 = v89;
  v41(v88, v89, a1);
  uint64_t v43 = v90;
  uint64_t v44 = v86;
  (*(void (**)(uint64_t, uint64_t))(v90 + 64))(a1, v90);
  v41(v31, v42, a1);
  (*(void (**)(uint64_t, uint64_t))(v43 + 72))(a1, v43);
  uint64_t v45 = (char *)(v40 + 8);
  Swift::UInt64 v46 = *(void (**)(uint64_t, uint64_t))(v40 + 8);
  v46(v42, a1);
  uint64_t v47 = v82;
  (*(void (**)(char *, uint64_t))(v84 + 32))(v18, a1);
  uint64_t v48 = v87;
  uint64_t v49 = v87 + 8;
  uint64_t v84 = *(void *)(v87 + 8);
  ((void (*)(char *, const char *))v84)(v18, AssociatedTypeWitness);
  uint64_t v80 = (uint64_t (*)(char *, char *))v46;
  v46((uint64_t)v31, a1);
  Swift::UInt64 v50 = *(void (**)(char *, char *, const char *))(v48 + 16);
  uint64_t v51 = v81;
  v50(v81, v44, AssociatedTypeWitness);
  uint64_t v52 = v83;
  v50(v83, v47, AssociatedTypeWitness);
  if (((*(uint64_t (**)(char *, char *, const char *))(AssociatedConformanceWitness + 24))(v51, v52, AssociatedTypeWitness) & 1) == 0)_assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0); {
  Swift::UInt64 v53 = (void (*)(char *, const char *))v84;
  }
  ((void (*)(char *, const char *))v84)(v52, AssociatedTypeWitness);
  v53(v51, AssociatedTypeWitness);
  uint64_t v81 = (char *)a1;
  uint64_t v54 = *((int *)TupleTypeMetadata2 + 12);
  uint64_t v55 = TupleTypeMetadata2;
  uint64_t v83 = v45;
  Swift::String::Index v56 = v77;
  uint64_t v57 = &v77[v54];
  unint64_t v58 = *(void (**)(char *, char *, const char *))(v87 + 32);
  v58(v77, v86, AssociatedTypeWitness);
  v58(v57, v47, AssociatedTypeWitness);
  uint64_t v59 = *((int *)v55 + 12);
  uint64_t v60 = v78;
  uint64_t v72 = v49;
  Swift::UInt64 v61 = &v78[v59];
  v50(v78, v56, AssociatedTypeWitness);
  v50(v61, v57, AssociatedTypeWitness);
  uint64_t v62 = v73;
  v58(v73, v60, AssociatedTypeWitness);
  uint64_t v63 = v61;
  uint64_t v64 = (void (*)(char *, const char *))v84;
  ((void (*)(char *, const char *))v84)(v63, AssociatedTypeWitness);
  uint64_t v65 = &v60[*((int *)TupleTypeMetadata2 + 12)];
  v58(v60, v56, AssociatedTypeWitness);
  v58(v65, v57, AssociatedTypeWitness);
  uint64_t v66 = v76;
  v58(&v62[*((int *)v76 + 9)], v65, AssociatedTypeWitness);
  v64(v60, AssociatedTypeWitness);
  BOOL v68 = v74;
  uint64_t v67 = v75;
  (*(void (**)(char *, char *, Class *))(v75 + 32))(v74, v62, v66);
  BOOL v69 = v88;
  BOOL v70 = v81;
  (*(void (**)(char *, char *))(v90 + 88))(v68, v81);
  (*(void (**)(char *, Class *))(v67 + 8))(v68, v66);
  return v80(v69, v70);
}

uint64_t BidirectionalCollection<>.removeLast(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v89 = a3;
  uint64_t v5 = *(void *)(a3 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, (int **)v5, a2, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0, (uint64_t)AssociatedTypeWitness, (uint64_t)AssociatedTypeWitness, "lower upper ", 0);
  uint64_t v7 = MEMORY[0x1F4188790](TupleTypeMetadata2);
  uint64_t v9 = (char *)&v74 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  unint64_t v79 = (char *)&v74 - v10;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v5, a2, (uint64_t)AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Collection, associated conformance descriptor for Collection.Collection.Index: Comparable);
  uint64_t v12 = type metadata accessor for Range(0, (uint64_t)AssociatedTypeWitness, AssociatedConformanceWitness, v11);
  uint64_t v83 = (uint64_t)*(v12 - 1);
  uint64_t v84 = v12;
  uint64_t v13 = MEMORY[0x1F4188790](v12);
  uint64_t v80 = (char *)&v74 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = MEMORY[0x1F4188790](v13);
  uint64_t v81 = (char *)&v74 - v16;
  uint64_t v94 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](v15);
  uint64_t v93 = (char *)&v74 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = type metadata accessor for Optional(0, (uint64_t)AssociatedTypeWitness, v18, v19);
  uint64_t v21 = MEMORY[0x1F4188790](v20);
  uint64_t v23 = (char *)&v74 - v22;
  uint64_t v24 = *((void *)AssociatedTypeWitness - 1);
  uint64_t v25 = MEMORY[0x1F4188790](v21);
  uint64_t v86 = (char *)&v74 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = MEMORY[0x1F4188790](v25);
  uint64_t v85 = (char *)&v74 - v28;
  uint64_t v29 = MEMORY[0x1F4188790](v27);
  uint64_t v30 = MEMORY[0x1F4188790](v29);
  uint64_t v32 = (char *)&v74 - v31;
  uint64_t v33 = MEMORY[0x1F4188790](v30);
  uint64_t v35 = (char *)&v74 - v34;
  uint64_t result = MEMORY[0x1F4188790](v33);
  if (v38)
  {
    if (v38 < 0) {
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Number of elements to remove should be non-negative", 51, 2, "Swift/BidirectionalCollection.swift", 35, 2, 0x15CuLL, 0);
    }
    Swift::UInt64 v41 = (char *)&v74 - v37;
    uint64_t v75 = v40;
    uint64_t v76 = (uint64_t (*)(char *, void))result;
    uint64_t v90 = v39;
    unint64_t v77 = v9;
    uint64_t v42 = v38;
    (*(void (**)(uint64_t, uint64_t))(v5 + 72))(a2, v5);
    uint64_t v43 = *(void (**)(void))(v5 + 64);
    uint64_t v92 = v5;
    uint64_t v78 = (void (*)(void, uint64_t))v43;
    v43(a2);
    uint64_t v44 = *(void (**)(char *, uint64_t, char *, uint64_t))(v89 + 56);
    unint64_t v91 = v3;
    v44(v35, -v42, v32, a2);
    uint64_t v45 = (void (*)(void, uint64_t))a2;
    Swift::UInt64 v46 = *(void (**)(char *, const char *))(v24 + 8);
    v46(v32, AssociatedTypeWitness);
    uint64_t v88 = v46;
    uint64_t v89 = v24 + 8;
    v46(v35, AssociatedTypeWitness);
    if ((*(unsigned int (**)(char *, uint64_t, const char *))(v24 + 48))(v23, 1, AssociatedTypeWitness) == 1)
    {
      (*(void (**)(char *, uint64_t (*)(char *, void)))(v75 + 8))(v23, v76);
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't remove more items from a collection than it contains", 58, 2, "Swift/BidirectionalCollection.swift", 35, 2, 0x15FuLL, 0);
    }
    uint64_t v47 = v41;
    uint64_t v75 = *(void *)(v24 + 32);
    ((void (*)(char *, char *, const char *))v75)(v41, v23, AssociatedTypeWitness);
    uint64_t v48 = v94;
    uint64_t v49 = v91;
    (*(void (**)(char *, char *, uint64_t))(v94 + 16))(v93, v91, a2);
    uint64_t v50 = v90;
    v78(v45, v92);
    uint64_t v52 = *(uint64_t (**)(char *, void))(v48 + 8);
    uint64_t v51 = v48 + 8;
    uint64_t v78 = v45;
    uint64_t v76 = v52;
    v52(v49, v45);
    Swift::UInt64 v53 = *(void (**)(char *, uint64_t, const char *))(v24 + 16);
    uint64_t v54 = v85;
    v53(v85, v50, AssociatedTypeWitness);
    uint64_t v55 = v86;
    v53(v86, (uint64_t)v47, AssociatedTypeWitness);
    if (((*(uint64_t (**)(char *, char *, const char *))(AssociatedConformanceWitness + 24))(v54, v55, AssociatedTypeWitness) & 1) == 0)_assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0); {
    Swift::String::Index v56 = v55;
    }
    uint64_t v57 = v47;
    unint64_t v58 = v88;
    v88(v56, AssociatedTypeWitness);
    v58(v54, AssociatedTypeWitness);
    uint64_t v59 = TupleTypeMetadata2;
    uint64_t v60 = v79;
    uint64_t v61 = (uint64_t)&v79[*((int *)TupleTypeMetadata2 + 12)];
    uint64_t v62 = (void (*)(uint64_t, char *, const char *))v75;
    ((void (*)(char *, uint64_t, const char *))v75)(v79, v90, AssociatedTypeWitness);
    uint64_t AssociatedConformanceWitness = v61;
    v62(v61, v57, AssociatedTypeWitness);
    uint64_t v63 = *((int *)v59 + 12);
    uint64_t v64 = v77;
    uint64_t v94 = v51;
    uint64_t v65 = &v77[v63];
    v53(v77, (uint64_t)v60, AssociatedTypeWitness);
    v53(v65, v61, AssociatedTypeWitness);
    uint64_t v66 = v80;
    v62((uint64_t)v80, v64, AssociatedTypeWitness);
    uint64_t v67 = v88;
    v88(v65, AssociatedTypeWitness);
    BOOL v68 = &v64[*((int *)v59 + 12)];
    v62((uint64_t)v64, v60, AssociatedTypeWitness);
    v62((uint64_t)v68, (char *)AssociatedConformanceWitness, AssociatedTypeWitness);
    BOOL v69 = v84;
    v62((uint64_t)&v66[*((int *)v84 + 9)], v68, AssociatedTypeWitness);
    v67(v64, AssociatedTypeWitness);
    uint64_t v70 = v83;
    uint64_t v71 = v81;
    (*(void (**)(char *, char *, Class *))(v83 + 32))(v81, v66, v69);
    uint64_t v72 = v93;
    uint64_t v73 = v78;
    (*(void (**)(char *, void))(v92 + 88))(v71, v78);
    (*(void (**)(char *, Class *))(v70 + 8))(v71, v69);
    return v76(v72, v73);
  }
  return result;
}

uint64_t static SignedNumeric.- prefix(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 24))(a2, a3);
}

{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 16))(a4, a1, a2);
  return (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 24))(a2, a3);
}

uint64_t BidirectionalCollection.dropLast(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v87 = a4;
  uint64_t v100 = a3;
  uint64_t v6 = *(void *)(a3 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, (int **)v6, a2, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0, (uint64_t)AssociatedTypeWitness, (uint64_t)AssociatedTypeWitness, "lower upper ", 0);
  uint64_t v8 = MEMORY[0x1F4188790](TupleTypeMetadata2);
  uint64_t v10 = (char *)&v78 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8);
  uint64_t v84 = (char *)&v78 - v11;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v6, a2, (uint64_t)AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Collection, associated conformance descriptor for Collection.Collection.Index: Comparable);
  uint64_t v13 = type metadata accessor for Range(0, (uint64_t)AssociatedTypeWitness, AssociatedConformanceWitness, v12);
  uint64_t v14 = (uint64_t)*(v13 - 1);
  uint64_t v15 = MEMORY[0x1F4188790](v13);
  uint64_t v83 = (char *)&v78 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = MEMORY[0x1F4188790](v15);
  uint64_t v85 = (char *)&v78 - v18;
  uint64_t v102 = a2;
  uint64_t v19 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](v17);
  uint64_t v89 = (char *)&v78 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v88 = type metadata accessor for Optional(0, (uint64_t)AssociatedTypeWitness, v21, v22);
  uint64_t v94 = (uint64_t)*(v88 - 1);
  uint64_t v23 = MEMORY[0x1F4188790](v88);
  uint64_t v98 = (char *)&v78 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = MEMORY[0x1F4188790](v23);
  uint64_t v26 = MEMORY[0x1F4188790](v25);
  unint64_t v91 = (char *)&v78 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = MEMORY[0x1F4188790](v26);
  uint64_t v90 = (char *)&v78 - v29;
  uint64_t v30 = MEMORY[0x1F4188790](v28);
  uint64_t v92 = (char *)&v78 - v31;
  uint64_t v32 = MEMORY[0x1F4188790](v30);
  uint64_t v34 = (char *)&v78 - v33;
  uint64_t v35 = MEMORY[0x1F4188790](v32);
  uint64_t v37 = (char *)&v78 - v36;
  MEMORY[0x1F4188790](v35);
  if (a1 < 0) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't drop a negative number of elements from a collection", 58, 2, "Swift/BidirectionalCollection.swift", 35, 2, 0x17CuLL, 0);
  }
  uint64_t v101 = (char *)&v78 - v38;
  uint64_t v78 = v10;
  uint64_t v79 = v14;
  uint64_t v80 = v13;
  Swift::UInt64 v41 = *(void (**)(uint64_t, uint64_t))(v6 + 72);
  uint64_t v42 = v97;
  uint64_t v99 = v19;
  uint64_t v43 = v102;
  uint64_t v44 = v40;
  uint64_t v45 = v39;
  v41(v102, v6);
  Swift::UInt64 v46 = *(void (**)(uint64_t, uint64_t))(v6 + 64);
  uint64_t v96 = v6;
  uint64_t v82 = v46;
  uint64_t v81 = v6 + 64;
  v46(v43, v6);
  (*(void (**)(char *, uint64_t, char *, uint64_t))(v100 + 56))(v37, -a1, v34, v43);
  uint64_t v47 = *(void (**)(char *, const char *))(v45 + 8);
  v47(v34, AssociatedTypeWitness);
  uint64_t v100 = v45 + 8;
  unint64_t v95 = v47;
  v47(v37, AssociatedTypeWitness);
  uint64_t v48 = v99;
  uint64_t v49 = v89;
  (*(void (**)(char *, uint64_t, uint64_t))(v99 + 16))(v89, v42, v43);
  uint64_t v50 = v98;
  uint64_t v51 = v88;
  (*(void (**)(char *, uint64_t, Class *))(v94 + 32))(v98, v44, v88);
  uint64_t v52 = v45;
  if ((*(unsigned int (**)(char *, uint64_t, const char *))(v45 + 48))(v50, 1, AssociatedTypeWitness) == 1)
  {
    uint64_t v53 = v102;
    uint64_t v54 = v96;
    uint64_t v55 = v82;
    v82(v102, v96);
    uint64_t v89 = *(char **)(v99 + 8);
    ((void (*)(char *, uint64_t))v89)(v49, v53);
    (*(void (**)(char *, Class *))(v94 + 8))(v98, v51);
    uint64_t v56 = v54;
    uint64_t v57 = v90;
    unint64_t v58 = v55;
  }
  else
  {
    uint64_t v89 = *(char **)(v48 + 8);
    ((void (*)(char *, uint64_t))v89)(v49, v102);
    (*(void (**)(char *, char *, const char *))(v45 + 32))(v101, v98, AssociatedTypeWitness);
    uint64_t v56 = v96;
    uint64_t v57 = v90;
    unint64_t v58 = v82;
  }
  uint64_t v59 = v92;
  v58(v102, v56);
  uint64_t v60 = *(void (**)(char *, char *, const char *))(v52 + 16);
  v60(v57, v59, AssociatedTypeWitness);
  uint64_t v61 = v91;
  v60(v91, v101, AssociatedTypeWitness);
  if (((*(uint64_t (**)(char *, char *, const char *))(AssociatedConformanceWitness + 24))(v57, v61, AssociatedTypeWitness) & 1) == 0)_assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0); {
  uint64_t v62 = v95;
  }
  v95(v61, AssociatedTypeWitness);
  v62(v57, AssociatedTypeWitness);
  uint64_t v63 = TupleTypeMetadata2;
  uint64_t v64 = v84;
  uint64_t v65 = &v84[*((int *)TupleTypeMetadata2 + 12)];
  uint64_t v66 = *(void (**)(char *, char *, const char *))(v52 + 32);
  v66(v84, v59, AssociatedTypeWitness);
  uint64_t v98 = v65;
  v66(v65, v101, AssociatedTypeWitness);
  uint64_t v67 = v78;
  BOOL v68 = &v78[*((int *)v63 + 12)];
  v60(v78, v64, AssociatedTypeWitness);
  v60(v68, v65, AssociatedTypeWitness);
  BOOL v69 = v83;
  v66(v83, v67, AssociatedTypeWitness);
  uint64_t v70 = v95;
  v95(v68, AssociatedTypeWitness);
  uint64_t v71 = &v67[*((int *)v63 + 12)];
  v66(v67, v64, AssociatedTypeWitness);
  v66(v71, v98, AssociatedTypeWitness);
  uint64_t v72 = v80;
  v66(&v69[*((int *)v80 + 9)], v71, AssociatedTypeWitness);
  v70(v67, AssociatedTypeWitness);
  uint64_t v73 = v79;
  uint64_t v74 = v85;
  (*(void (**)(char *, char *, Class *))(v79 + 32))(v85, v69, v72);
  uint64_t v75 = v97;
  uint64_t v76 = v102;
  (*(void (**)(char *, uint64_t))(v96 + 88))(v74, v102);
  ((void (*)(uint64_t, uint64_t))v89)(v75, v76);
  return (*(uint64_t (**)(char *, Class *))(v73 + 8))(v74, v72);
}

uint64_t BidirectionalCollection.suffix(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v104 = a3;
  uint64_t v7 = *(void *)(a3 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, (int **)v7, a2, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0, (uint64_t)AssociatedTypeWitness, (uint64_t)AssociatedTypeWitness, "lower upper ", 0);
  uint64_t v9 = MEMORY[0x1F4188790](TupleTypeMetadata2);
  uint64_t v92 = (char *)&v80 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  uint64_t v89 = (char *)&v80 - v11;
  uint64_t v12 = a2;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v7, a2, (uint64_t)AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Collection, associated conformance descriptor for Collection.Collection.Index: Comparable);
  uint64_t v14 = type metadata accessor for Range(0, (uint64_t)AssociatedTypeWitness, AssociatedConformanceWitness, v13);
  uint64_t v15 = (uint64_t)*(v14 - 1);
  uint64_t v16 = MEMORY[0x1F4188790](v14);
  uint64_t v88 = (char *)&v80 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = MEMORY[0x1F4188790](v16);
  uint64_t v90 = (char *)&v80 - v19;
  uint64_t v100 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v18);
  uint64_t v93 = (char *)&v80 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = type metadata accessor for Optional(0, (uint64_t)AssociatedTypeWitness, v21, v22);
  uint64_t v97 = (uint64_t)*(v23 - 1);
  uint64_t v98 = v23;
  uint64_t v24 = MEMORY[0x1F4188790](v23);
  uint64_t v103 = (char *)&v80 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = MEMORY[0x1F4188790](v24);
  uint64_t v27 = MEMORY[0x1F4188790](v26);
  uint64_t v94 = (char *)&v80 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = MEMORY[0x1F4188790](v27);
  uint64_t v30 = MEMORY[0x1F4188790](v29);
  unint64_t v95 = (char *)&v80 - v31;
  uint64_t v32 = MEMORY[0x1F4188790](v30);
  uint64_t v34 = (char *)&v80 - v33;
  uint64_t v35 = MEMORY[0x1F4188790](v32);
  uint64_t v37 = (char *)&v80 - v36;
  MEMORY[0x1F4188790](v35);
  uint64_t v101 = (char *)&v80 - v41;
  if (a1 < 0) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't take a suffix of negative length from a collection", 56, 2, "Swift/BidirectionalCollection.swift", 35, 2, 0x19BuLL, 0);
  }
  uint64_t v87 = v38;
  uint64_t v81 = v15;
  uint64_t v82 = v14;
  uint64_t v83 = a4;
  uint64_t v42 = *(void (**)(uint64_t, char *))(v7 + 72);
  uint64_t v43 = v102;
  uint64_t v84 = v40;
  uint64_t v85 = v42;
  uint64_t v44 = v39;
  uint64_t v86 = v7 + 72;
  v42(v12, (char *)v7);
  uint64_t v80 = *(void (**)(uint64_t, uint64_t))(v7 + 64);
  v80(v12, v7);
  (*(void (**)(char *, uint64_t, char *, uint64_t))(v104 + 56))(v37, -a1, v34, v12);
  uint64_t v45 = v7;
  Swift::UInt64 v46 = *(void (**)(char *, const char *))(v44 + 8);
  v46(v34, AssociatedTypeWitness);
  uint64_t v104 = v44 + 8;
  uint64_t v99 = (void (*)(uint64_t, const char *))v46;
  v46(v37, AssociatedTypeWitness);
  uint64_t v47 = v100;
  uint64_t v48 = v93;
  (*(void (**)(char *, uint64_t, uint64_t))(v100 + 16))(v93, v43, v12);
  uint64_t v49 = v103;
  (*(void (**)(char *, uint64_t, Class *))(v97 + 32))(v103, v84, v98);
  int v50 = (*(uint64_t (**)(char *, uint64_t, const char *))(v44 + 48))(v49, 1, AssociatedTypeWitness);
  uint64_t v51 = v47;
  uint64_t v52 = v44;
  if (v50 == 1)
  {
    uint64_t v53 = v101;
    uint64_t v54 = v51;
    v80(v12, v45);
    uint64_t v55 = v53;
    uint64_t v93 = *(char **)(v54 + 8);
    ((void (*)(char *, uint64_t))v93)(v48, v12);
    (*(void (**)(char *, Class *))(v97 + 8))(v103, v98);
  }
  else
  {
    uint64_t v93 = *(char **)(v47 + 8);
    ((void (*)(char *, uint64_t))v93)(v48, v12);
    uint64_t v55 = v101;
    (*(void (**)(char *, char *, const char *))(v44 + 32))(v101, v103, AssociatedTypeWitness);
  }
  uint64_t v56 = (char *)v45;
  uint64_t v57 = v95;
  uint64_t v103 = v56;
  v85(v12, v56);
  unint64_t v58 = *(void (**)(uint64_t, char *, const char *))(v52 + 16);
  uint64_t v59 = v87;
  v58(v87, v55, AssociatedTypeWitness);
  uint64_t v60 = v94;
  v58((uint64_t)v94, v57, AssociatedTypeWitness);
  if (((*(uint64_t (**)(uint64_t, char *, const char *))(AssociatedConformanceWitness + 24))(v59, v60, AssociatedTypeWitness) & 1) == 0)_assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0); {
  uint64_t v61 = v60;
  }
  uint64_t v62 = v99;
  v99((uint64_t)v61, AssociatedTypeWitness);
  v62(v59, AssociatedTypeWitness);
  uint64_t v63 = TupleTypeMetadata2;
  uint64_t v64 = *((int *)TupleTypeMetadata2 + 12);
  uint64_t v98 = (Class *)v12;
  uint64_t v65 = v57;
  uint64_t v66 = v89;
  uint64_t v67 = &v89[v64];
  BOOL v68 = *(void (**)(char *, char *, const char *))(v52 + 32);
  v68(v89, v101, AssociatedTypeWitness);
  v68(v67, v65, AssociatedTypeWitness);
  BOOL v69 = v92;
  uint64_t v70 = &v92[*((int *)v63 + 12)];
  v58((uint64_t)v92, v66, AssociatedTypeWitness);
  v58((uint64_t)v70, v67, AssociatedTypeWitness);
  uint64_t v71 = v88;
  v68(v88, v69, AssociatedTypeWitness);
  uint64_t v72 = (void (*)(char *, const char *))v99;
  v99((uint64_t)v70, AssociatedTypeWitness);
  uint64_t v73 = &v69[*((int *)v63 + 12)];
  v68(v69, v66, AssociatedTypeWitness);
  v68(v73, v67, AssociatedTypeWitness);
  uint64_t v74 = v82;
  v68(&v71[*((int *)v82 + 9)], v73, AssociatedTypeWitness);
  v72(v69, AssociatedTypeWitness);
  uint64_t v75 = v81;
  uint64_t v76 = v90;
  (*(void (**)(char *, char *, Class *))(v81 + 32))(v90, v71, v74);
  uint64_t v77 = v102;
  uint64_t v78 = v98;
  (*((void (**)(char *, Class *))v103 + 11))(v76, v98);
  ((void (*)(uint64_t, Class *))v93)(v77, v78);
  return (*(uint64_t (**)(char *, Class *))(v75 + 8))(v76, v74);
}

uint64_t _UnsafeBitset.wordCount.getter(uint64_t a1, uint64_t a2)
{
  return a2;
}

unint64_t static _UnsafeBitset.word(for:)(unint64_t a1)
{
  return a1 >> 6;
}

uint64_t static _UnsafeBitset.Word.capacity.getter()
{
  return 64;
}

unint64_t static UInt./ infix(_:_:)(unint64_t a1, unint64_t a2)
{
  if (!a2) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Division by zero", 16, 2, "Swift/IntegerTypes.swift", 24, 2, 0x321DuLL, 0);
  }
  return a1 / a2;
}

uint64_t static _UnsafeBitset.bit(for:)(char a1)
{
  return a1 & 0x3F;
}

unint64_t static UInt.% infix(_:_:)(unint64_t a1, unint64_t a2)
{
  if (!a2) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Division by zero in remainder operation", 39, 2, "Swift/IntegerTypes.swift", 24, 2, 0x32F1uLL, 0);
  }
  return a1 % a2;
}

unint64_t static _UnsafeBitset.split(_:)(unint64_t a1)
{
  return a1 >> 6;
}

uint64_t static _UnsafeBitset.join(word:bit:)(uint64_t a1, uint64_t a2)
{
  return a2 + (a1 << 6);
}

uint64_t static FixedWidthInteger.&* infix(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 96))(a3, a1);
}

{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 96))(a3, a1);
}

unint64_t static _UnsafeBitset.wordCount(forCapacity:)(uint64_t a1)
{
  return (unint64_t)(a1 + 63) >> 6;
}

uint64_t _UnsafeBitset.capacity.getter(uint64_t a1, uint64_t a2)
{
  return a2 << 6;
}

Swift::Bool __swiftcall _UnsafeBitset.isValid(_:)(Swift::Int a1)
{
  return a1 >= 0 && a1 <= v1 << 6;
}

Swift::Bool __swiftcall _UnsafeBitset.uncheckedContains(_:)(Swift::Int a1)
{
  return (*(void *)(v1 + (((unint64_t)a1 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> a1) & 1;
}

Swift::Bool __swiftcall _UnsafeBitset.Word.uncheckedContains(_:)(Swift::Int a1)
{
  return (v1 >> a1) & 1;
}

Swift::Bool __swiftcall _UnsafeBitset.uncheckedInsert(_:)(Swift::Int a1)
{
  unint64_t v2 = ((unint64_t)a1 >> 3) & 0x1FFFFFFFFFFFFFF8;
  uint64_t v3 = 1 << a1;
  uint64_t v4 = *(void *)(v1 + v2);
  Swift::Bool result = (v4 & (1 << a1)) == 0;
  *(void *)(v1 + v2) = v4 | v3;
  return result;
}

Swift::Bool __swiftcall _UnsafeBitset.Word.uncheckedInsert(_:)(Swift::Int a1)
{
  uint64_t v2 = 1 << a1;
  Swift::Bool result = (*v1 & (1 << a1)) == 0;
  *v1 |= v2;
  return result;
}

Swift::Bool __swiftcall _UnsafeBitset.uncheckedRemove(_:)(Swift::Int a1)
{
  unint64_t v2 = ((unint64_t)a1 >> 3) & 0x1FFFFFFFFFFFFFF8;
  uint64_t v3 = 1 << a1;
  uint64_t v4 = *(void *)(v1 + v2);
  Swift::Bool result = (v4 & (1 << a1)) != 0;
  *(void *)(v1 + v2) = v4 & ~v3;
  return result;
}

Swift::Bool __swiftcall _UnsafeBitset.Word.uncheckedRemove(_:)(Swift::Int a1)
{
  uint64_t v2 = 1 << a1;
  Swift::Bool result = (*v1 & (1 << a1)) != 0;
  *v1 &= ~v2;
  return result;
}

Swift::Void __swiftcall _UnsafeBitset.clear()()
{
  specialized UnsafeMutablePointer.assign(repeating:count:)(0, v1, v0);
}

uint64_t static _UnsafeBitset.Word.empty.getter()
{
  return 0;
}

unint64_t specialized UnsafeMutablePointer.assign(repeating:count:)(unint64_t result, unint64_t a2, int64x2_t *a3)
{
  if ((a2 & 0x8000000000000000) != 0) {
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeMutablePointer.update(repeating:count:) with negative count", 65, 2, "Swift/UnsafePointer.swift", 25, 2, 0x3BCuLL, 0);
  }
  if (a2)
  {
    if (a2 < 4)
    {
      unint64_t v3 = 0;
LABEL_8:
      uint64_t v7 = (unint64_t *)a3 + v3;
      unint64_t v8 = a2 - v3;
      do
      {
        *v7++ = result;
        --v8;
      }
      while (v8);
      return result;
    }
    unint64_t v3 = a2 & 0xFFFFFFFFFFFFFFFCLL;
    int64x2_t v4 = vdupq_n_s64(result);
    uint64_t v5 = a3 + 1;
    unint64_t v6 = a2 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v5[-1] = v4;
      *uint64_t v5 = v4;
      v5 += 2;
      v6 -= 4;
    }
    while (v6);
    if (v3 != a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t UnsafeMutablePointer.assign(repeating:count:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 < 0) {
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeMutablePointer.update(repeating:count:) with negative count", 65, 2, "Swift/UnsafePointer.swift", 25, 2, 0x3BCuLL, 0);
  }
  uint64_t v4 = a2;
  if (a2)
  {
    uint64_t v7 = result;
    uint64_t v8 = *(void *)(a4 - 8);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 24);
    uint64_t v10 = *(void *)(v8 + 72);
    do
    {
      Swift::Bool result = v9(a3, v7, a4);
      a3 += v10;
      --v4;
    }
    while (v4);
  }
  return result;
}

uint64_t _UnsafeBitset.count.getter(int8x8_t *a1, uint64_t a2)
{
  if (a2 < 0) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
  }
  uint64_t v2 = 0;
  while (a2)
  {
    int8x8_t v3 = *a1++;
    uint8x8_t v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    --a2;
    BOOL v5 = __OFADD__(v2, v4.u32[0]);
    v2 += v4.u32[0];
    if (v5)
    {
      __break(1u);
      return v2;
    }
  }
  return v2;
}

uint64_t _UnsafeBitset.Word.count.getter(uint64_t a1)
{
  uint8x8_t v1 = (uint8x8_t)vcnt_s8((int8x8_t)a1);
  v1.i16[0] = vaddlv_u8(v1);
  return v1.u32[0];
}

uint64_t _UnsafeBitset.Iterator.index.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a3;
}

uint64_t (*_UnsafeBitset.Iterator.index.modify())(void, void)
{
  return EnumeratedSequence._base.modify;
}

uint64_t _UnsafeBitset.Iterator.word.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a4;
}

uint64_t (*_UnsafeBitset.Iterator.word.modify())(void, void)
{
  return EnumeratedSequence._base.modify;
}

Swift::Int_optional __swiftcall _UnsafeBitset.Iterator.next()()
{
  unint64_t v1 = v0[3];
  if (v1)
  {
    Swift::Bool v2 = 0;
    v0[3] = (v1 - 1) & v1;
    Swift::Int v3 = __clz(__rbit64(v1)) | (v0[2] << 6);
    goto LABEL_14;
  }
  uint64_t v4 = v0[2];
  BOOL v5 = __OFADD__(v4, 1);
  uint64_t v6 = v4 + 1;
  if (v5)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  uint64_t v7 = v0[1];
  if (v6 >= v7)
  {
LABEL_11:
    Swift::Int v3 = 0;
    Swift::Bool v2 = 1;
    goto LABEL_14;
  }
  v0[2] = v6;
  uint64_t v8 = *v0;
  unint64_t v9 = *(void *)(*v0 + 8 * v6);
  v0[3] = v9;
  if (!v9)
  {
    while (1)
    {
      uint64_t v10 = v6 + 1;
      if (__OFADD__(v6, 1)) {
        break;
      }
      if (v10 >= v7) {
        goto LABEL_11;
      }
      v0[2] = v10;
      unint64_t v9 = *(void *)(v8 + 8 * v10);
      v0[3] = v9;
      ++v6;
      if (v9) {
        goto LABEL_7;
      }
    }
    __break(1u);
    goto LABEL_13;
  }
  uint64_t v10 = v6;
LABEL_7:
  Swift::Bool v2 = 0;
  v0[3] = (v9 - 1) & v9;
  Swift::Int v3 = __clz(__rbit64(v9)) + (v10 << 6);
LABEL_14:
  result.Swift::UInt32 value = v3;
  result.is_nil = v2;
  return result;
}

Swift::Int_optional __swiftcall _UnsafeBitset.Word.next()()
{
  unint64_t v1 = *v0;
  if (*v0)
  {
    Swift::Int v2 = __clz(__rbit64(v1));
    *uint64_t v0 = (v1 - 1) & v1;
  }
  else
  {
    Swift::Int v2 = 0;
  }
  Swift::Bool v3 = v1 == 0;
  result.Swift::UInt32 value = v2;
  result.is_nil = v3;
  return result;
}

Swift::Int protocol witness for IteratorProtocol.next() in conformance _UnsafeBitset.Iterator@<X0>(uint64_t a1@<X8>)
{
  Swift::Int_optional v3 = _UnsafeBitset.Iterator.next()();
  *(void *)a1 = v3.value;
  *(unsigned char *)(a1 + 8) = v3.is_nil;
  return v3.value;
}

void protocol witness for Sequence.makeIterator() in conformance _UnsafeBitset(uint64_t **a1@<X8>)
{
  Swift::Int v2 = *(uint64_t **)v1;
  uint64_t v3 = *(void *)(v1 + 8);
  if (v3 < 1) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = (uint64_t *)*v2;
  }
  *a1 = v2;
  a1[1] = (uint64_t *)v3;
  a1[2] = 0;
  a1[3] = v4;
}

uint64_t protocol witness for Sequence.underestimatedCount.getter in conformance _UnsafeBitset()
{
  return _UnsafeBitset.count.getter(*(int8x8_t **)v0, *(void *)(v0 + 8));
}

__objc2_class **protocol witness for Sequence._copyToContiguousArray() in conformance _UnsafeBitset()
{
  return specialized _copySequenceToContiguousArray<A>(_:)(*(unint64_t **)v0, *(void *)(v0 + 8));
}

uint64_t protocol witness for Sequence._copyContents(initializing:) in conformance _UnsafeBitset(unint64_t **a1, unint64_t *a2, uint64_t a3)
{
  return specialized Sequence._copySequenceContents(initializing:)(a1, a2, a3, *(unint64_t **)v3, *(void *)(v3 + 8));
}

uint64_t _UnsafeBitset.Word.value.setter(uint64_t result)
{
  *uint64_t v1 = result;
  return result;
}

uint64_t (*_UnsafeBitset.Word.value.modify())(void, void)
{
  return EnumeratedSequence._base.modify;
}

uint64_t static UInt.bitWidth.getter()
{
  return 64;
}

uint64_t static FixedWidthInteger.&<< infix<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11 = MEMORY[0x1F4188790](a1);
  uint64_t v13 = (char *)&v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x1F4188790](v11);
  uint64_t v17 = (char *)&v20 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v18 + 16))(v13);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(a5 + 8) + 96))(v13, a4, a6, a3);
  (*(void (**)(uint64_t, char *, uint64_t, uint64_t))(a5 + 216))(a1, v17, a3, a5);
  return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v17, a3);
}

BOOL static UInt.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return a1 == a2;
}

unint64_t _UnsafeBitset.Word.minimum.getter(unint64_t a1)
{
  return __clz(__rbit64(a1)) & 0x3F;
}

unint64_t UInt.trailingZeroBitCount.getter(unint64_t a1)
{
  return __clz(__rbit64(a1));
}

unint64_t _UnsafeBitset.Word.maximum.getter(unint64_t a1)
{
  unint64_t v1 = __clz(a1) ^ 0x3F;
  if (a1) {
    return v1;
  }
  else {
    return 0;
  }
}

unint64_t UInt.leadingZeroBitCount.getter(unint64_t a1)
{
  return __clz(a1);
}

uint64_t _UnsafeBitset.Word.complement.getter(uint64_t a1)
{
  return ~a1;
}

Swift::_UnsafeBitset::Word __swiftcall _UnsafeBitset.Word.subtracting(elementsBelow:)(Swift::Int elementsBelow)
{
  return (Swift::_UnsafeBitset::Word)((-1 << elementsBelow) & v1);
}

uint64_t static UnsignedInteger<>.max.getter(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v4 = (char *)&v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *(void *)(v5 + 8);
  uint64_t v7 = *(void *)(*(void *)(v6 + 24) + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (int **)v7, a1, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, associated type descriptor for ExpressibleByIntegerLiteral.IntegerLiteralType);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v10 = (char *)&v13 - v9;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v7, a1, (uint64_t)AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
  (*(void (**)(void *, uint64_t, const char *, uint64_t))(AssociatedConformanceWitness + 8))(&unk_18162B0B8, 256, AssociatedTypeWitness, AssociatedConformanceWitness);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 24))(v10, a1, v7);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 184))(v4, a1, v6);
  return (*(uint64_t (**)(char *, uint64_t))(v2 + 8))(v4, a1);
}

Swift::_UnsafeBitset::Word __swiftcall _UnsafeBitset.Word.intersecting(elementsBelow:)(Swift::Int elementsBelow)
{
  return (Swift::_UnsafeBitset::Word)(v1 & ~(-1 << elementsBelow));
}

Swift::_UnsafeBitset::Word __swiftcall _UnsafeBitset.Word.intersecting(elementsAbove:)(Swift::Int elementsAbove)
{
  return (Swift::_UnsafeBitset::Word)((-2 << elementsAbove) & v1);
}

uint64_t static _UnsafeBitset.Word.allBits.getter()
{
  return -1;
}

uint64_t UInt.nonzeroBitCount.getter(uint64_t a1)
{
  uint8x8_t v1 = (uint8x8_t)vcnt_s8((int8x8_t)a1);
  v1.i16[0] = vaddlv_u8(v1);
  return v1.u32[0];
}

uint64_t _UnsafeBitset.Word.underestimatedCount.getter(uint64_t a1)
{
  uint8x8_t v1 = (uint8x8_t)vcnt_s8((int8x8_t)a1);
  v1.i16[0] = vaddlv_u8(v1);
  return v1.u32[0];
}

BOOL _UnsafeBitset.Word.isEmpty.getter(uint64_t a1)
{
  return a1 == 0;
}

__objc2_class **protocol witness for Sequence._copyToContiguousArray() in conformance _UnsafeBitset.Word()
{
  return specialized _copySequenceToContiguousArray<A>(_:)(*v0);
}

uint64_t protocol witness for Sequence._copyContents(initializing:) in conformance _UnsafeBitset.Word(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  return specialized Sequence._copySequenceContents(initializing:)(a1, a2, a3, *v3);
}

void protocol witness for IteratorProtocol.next() in conformance _UnsafeBitset.Word(uint64_t a1@<X8>)
{
  unint64_t v2 = *v1;
  if (*v1)
  {
    unint64_t v3 = __clz(__rbit64(v2));
    *uint8x8_t v1 = (v2 - 1) & v2;
  }
  else
  {
    unint64_t v3 = 0;
  }
  *(void *)a1 = v3;
  *(unsigned char *)(a1 + 8) = v2 == 0;
}

uint64_t Bool._value.getter(char a1)
{
  return a1 & 1;
}

uint64_t Bool._value.setter(uint64_t result)
{
  *uint8x8_t v1 = result;
  return result;
}

uint64_t (*Bool._value.modify())(void, void)
{
  return EnumeratedSequence._base.modify;
}

Swift::Bool __swiftcall Bool.init()()
{
  return 0;
}

Swift::Bool __swiftcall Bool.init(_:)(Builtin::Int1 a1)
{
  return a1;
}

Swift::Bool __swiftcall Bool.init(_:)(Swift::Bool a1)
{
  return a1;
}

BOOL static Bool.random<A>(using:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return ((*(uint64_t (**)(uint64_t, uint64_t))(a3 + 8))(a2, a3) & 0x20000) == 0;
}

uint64_t static FixedWidthInteger.>> infix<A>(_:_:)@<X0>(void (*a1)(char *, char *, uint64_t)@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, char *a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  uint64_t v6 = a5;
  uint64_t v8 = (void *)a3;
  v237 = a1;
  v214 = *(int ***)(*(void *)(a5 + 24) + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v214, a3, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, associated type descriptor for ExpressibleByIntegerLiteral.IntegerLiteralType);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  v212 = (char *)v209 - v11;
  uint64_t v229 = *((void *)a4 + 1);
  v227 = *(int ***)(*(void *)(v229 + 24) + 16);
  v226 = swift_getAssociatedTypeWitness(0, v227, a2, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, associated type descriptor for ExpressibleByIntegerLiteral.IntegerLiteralType);
  uint64_t v12 = MEMORY[0x1F4188790](v226);
  v224 = (char *)v209 - v13;
  uint64_t v238 = *(v8 - 1);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)v209 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = MEMORY[0x1F4188790](v14);
  uint64_t v19 = (char *)v209 - v18;
  uint64_t v20 = MEMORY[0x1F4188790](v17);
  v211 = (char *)v209 - v21;
  uint64_t v22 = MEMORY[0x1F4188790](v20);
  uint64_t v24 = (uint64_t)v209 - v23;
  uint64_t v25 = MEMORY[0x1F4188790](v22);
  v215 = (char *)v209 - v26;
  uint64_t v27 = MEMORY[0x1F4188790](v25);
  uint64_t v29 = (char *)v209 - v28;
  uint64_t v30 = MEMORY[0x1F4188790](v27);
  v210 = (char *)v209 - v31;
  uint64_t v32 = MEMORY[0x1F4188790](v30);
  v216 = (char *)v209 - v33;
  uint64_t v34 = MEMORY[0x1F4188790](v32);
  v218 = (char *)v209 - v35;
  uint64_t v36 = MEMORY[0x1F4188790](v34);
  v232 = (char *)v209 - v37;
  uint64_t v38 = MEMORY[0x1F4188790](v36);
  v225 = (char *)v209 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v40 = MEMORY[0x1F4188790](v38);
  v231 = (char *)v209 - v41;
  uint64_t v42 = MEMORY[0x1F4188790](v40);
  v234 = (char *)v209 - v43;
  uint64_t v44 = MEMORY[0x1F4188790](v42);
  v239 = (char *)v209 - v45;
  MEMORY[0x1F4188790](v44);
  uint64_t v235 = v46;
  uint64_t v47 = *(void (**)(void))(v46 + 16);
  v228 = (char *)v209 - v48;
  v47();
  uint64_t v49 = (uint64_t (*)(uint64_t, char *))*((void *)a4 + 7);
  v233 = a4;
  int v50 = a4;
  uint64_t v51 = a4 + 56;
  v240 = v49;
  uint64_t v52 = v49(a2, v50);
  if (__OFSUB__(0, v52))
  {
    __break(1u);
    goto LABEL_82;
  }
  uint64_t v220 = -v52;
  v217 = v29;
  v209[0] = v24;
  uint64_t v53 = v51;
  uint64_t v54 = *(uint64_t (**)(void *, uint64_t))(v6 + 64);
  char v55 = v54(v8, v6);
  uint64_t v223 = a6;
  v236 = v53;
  uint64_t v221 = v6 + 64;
  v219 = v54;
  if ((v55 & 1) == 0)
  {
    char v63 = v54(v8, v6);
    v222 = *(uint64_t (**)(void *, uint64_t))(v6 + 128);
    uint64_t v64 = v222(v8, v6);
    if (v63)
    {
      if (v64 <= 64)
      {
        uint64_t v75 = v214;
        uint64_t v76 = AssociatedTypeWitness;
        uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness((uint64_t)v214, (uint64_t)v8, (uint64_t)AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
        uint64_t v78 = v212;
        (*(void (**)(void *, uint64_t, const char *, uint64_t))(AssociatedConformanceWitness + 8))(&unk_18162B0B8, 256, v76, AssociatedConformanceWitness);
        uint64_t v79 = v232;
        ((void (*)(char *, void *, int **))v75[3])(v78, v8, v75);
        uint64_t v80 = v237;
        LOBYTE(v76) = (*(uint64_t (**)(void, char *, void *))(*(void *)(*(void *)(v6 + 32) + 8)
                                                                          + 16))(v237, v79, v8);
        uint64_t v16 = (char *)v238;
        uint64_t v81 = *(void (**)(char *, void *))(v238 + 8);
        v81(v79, v8);
        (*((void (**)(char *, uint64_t (*)(void, void, void), void *))v16 + 2))(v19, (uint64_t (*)(void, void, void))v80, v8);
        if (v76)
        {
          v81(v19, v8);
          uint64_t v19 = v233;
        }
        else
        {
          uint64_t v91 = (*(uint64_t (**)(void *, uint64_t))(v6 + 120))(v8, v6);
          v230 = v81;
          v81(v19, v8);
          uint64_t v19 = v233;
          uint64_t v54 = v219;
          uint64_t v62 = v237;
          if (v91 >= v220) {
            goto LABEL_26;
          }
        }
        goto LABEL_22;
      }
      int64_t v242 = v220;
      uint64_t v67 = *(void (**)(int64_t *, ValueMetadata *, unint64_t, void *, uint64_t))(v6 + 96);
      unint64_t v68 = lazy protocol witness table accessor for type Int and conformance Int(v64, v65, v66);
      uint64_t v16 = v232;
      v67(&v242, &type metadata for Int, v68, v8, v6);
      uint64_t v62 = v237;
      char v69 = (*(uint64_t (**)(void, char *, void *))(*(void *)(*(void *)(v6 + 32) + 8) + 16))(v237, v16, v8);
      v230 = *(void (**)(char *, void *))(v238 + 8);
      v230(v16, v8);
      uint64_t v19 = v233;
      uint64_t v54 = v219;
      if (v69) {
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v19 = v233;
      if (v64 < 64)
      {
        uint64_t v62 = v237;
        uint64_t v73 = v238;
        uint64_t v16 = v232;
        (*(void (**)(char *, uint64_t (*)(void, void, void), void *))(v238 + 16))(v232, (uint64_t (*)(void, void, void))v237, v8);
        uint64_t v74 = (*(uint64_t (**)(void *, uint64_t))(v6 + 120))(v8, v6);
        v230 = *(void (**)(char *, void *))(v73 + 8);
        v230(v16, v8);
        uint64_t v54 = v219;
        if (v74 < v220) {
          goto LABEL_22;
        }
      }
      else
      {
        uint64_t v82 = v238;
        uint64_t v83 = (*(uint64_t (**)(char *, void, void *))(v238 + 16))(v16, v237, v8);
        if (v220 <= 0) {
          goto LABEL_25;
        }
        int64_t v242 = v220;
        uint64_t v86 = *(void (**)(int64_t *, ValueMetadata *, unint64_t, void *, uint64_t))(v6 + 96);
        unint64_t v87 = lazy protocol witness table accessor for type Int and conformance Int(v83, v84, v85);
        uint64_t v88 = v232;
        v86(&v242, &type metadata for Int, v87, v8, v6);
        char v89 = (*(uint64_t (**)(char *, char *, void *))(*(void *)(*(void *)(v6 + 32) + 8) + 16))(v16, v88, v8);
        uint64_t v90 = *(void (**)(char *, void *))(v238 + 8);
        v90(v88, v8);
        v230 = v90;
        v90(v16, v8);
        uint64_t v54 = v219;
        uint64_t v62 = v237;
        if (v89) {
          goto LABEL_22;
        }
      }
    }
LABEL_26:
    uint64_t v94 = v240(a2, v19);
    char v95 = v54(v8, v6);
    v209[1] = v6 + 128;
    uint64_t v96 = v222(v8, v6);
    if (v95)
    {
      if (v96 > 64)
      {
        int64_t v242 = v94;
        uint64_t v99 = *(void (**)(int64_t *, ValueMetadata *, unint64_t, void *, uint64_t))(v6 + 96);
        unint64_t v100 = lazy protocol witness table accessor for type Int and conformance Int(v96, v97, v98);
        uint64_t v101 = v232;
        v99(&v242, &type metadata for Int, v100, v8, v6);
        char v102 = (*(uint64_t (**)(char *, void, void *))(*(void *)(*(void *)(v6 + 32) + 8) + 16))(v101, v62, v8);
        uint64_t v103 = v238;
        v230(v101, v8);
        uint64_t v104 = v217;
        if ((v102 & 1) == 0)
        {
          uint64_t v105 = v6;
          uint64_t v107 = *(void *)(v103 + 16);
          uint64_t v106 = v103 + 16;
          uint64_t v220 = v107;
          goto LABEL_38;
        }
        goto LABEL_46;
      }
      uint64_t v106 = v238 + 16;
      unint64_t v110 = v232;
      uint64_t v220 = *(void *)(v238 + 16);
      ((void (*)(char *, void, void *))v220)(v232, v62, v8);
      uint64_t v111 = (*(uint64_t (**)(void *, uint64_t))(v6 + 120))(v8, v6);
      v230(v110, v8);
      uint64_t v104 = v217;
      if (v94 < v111) {
        goto LABEL_46;
      }
    }
    else if (v96 > 63)
    {
      uint64_t v106 = v238 + 16;
      uint64_t v112 = v211;
      uint64_t v220 = *(void *)(v238 + 16);
      uint64_t v113 = ((uint64_t (*)(char *, void, void *))v220)(v211, v237, v8);
      if (v94 < 0)
      {
        v230(v112, v8);
        goto LABEL_46;
      }
      int64_t v242 = v94;
      unint64_t v116 = *(void (**)(int64_t *, ValueMetadata *, unint64_t, void *, uint64_t))(v6 + 96);
      unint64_t v117 = lazy protocol witness table accessor for type Int and conformance Int(v113, v114, v115);
      unint64_t v118 = v232;
      v116(&v242, &type metadata for Int, v117, v8, v6);
      char v119 = (*(uint64_t (**)(char *, char *, void *))(*(void *)(*(void *)(v6 + 32) + 8) + 16))(v118, v112, v8);
      unint64_t v120 = v230;
      v230(v118, v8);
      v120(v112, v8);
      uint64_t v104 = v217;
      if (v119)
      {
LABEL_46:
        uint64_t v19 = v233;
        uint64_t v93 = v240(a2, v233);
        goto LABEL_73;
      }
    }
    else
    {
      uint64_t v106 = v238 + 16;
      uint64_t v108 = v232;
      uint64_t v220 = *(void *)(v238 + 16);
      ((void (*)(char *, void, void *))v220)(v232, v237, v8);
      uint64_t v109 = (*(uint64_t (**)(void *, uint64_t))(v6 + 120))(v8, v6);
      v230(v108, v8);
      uint64_t v104 = v217;
      if (v94 < v109) {
        goto LABEL_46;
      }
    }
    uint64_t v105 = v6;
LABEL_38:
    v211 = (char *)(v106 & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000);
    unint64_t v121 = v218;
    unint64_t v122 = (void (*)(char *, char *, void *))v220;
    ((void (*)(char *, void, void *))v220)(v218, v237, v8);
    char v123 = v219(v8, v105);
    uint64_t v124 = v216;
    v122(v216, v121, v8);
    if ((v123 & 1) == 0)
    {
      char v125 = v222;
      v230(v124, v8);
      uint64_t v128 = v105;
      goto LABEL_60;
    }
    char v125 = v222;
    uint64_t v126 = v222(v8, v105);
    int64_t v127 = (void (*)(char *, char *, uint64_t))(v238 + 8);
    v230(v124, v8);
    uint64_t v128 = v105;
    if (v126 <= 64) {
      goto LABEL_60;
    }
    v129 = v210;
    ((void (*)(char *, char *, void *))v220)(v210, v218, v8);
    int64_t v242 = 0x8000000000000000;
    BOOL v130 = v219;
    if (v219(v8, v105))
    {
      char v125 = v222;
      uint64_t v131 = v222(v8, v105);
      uint64_t v128 = v105;
      if (v131 < 64)
      {
        Swift::String::Index v134 = v232;
        ((void (*)(char *, char *, void *))v220)(v232, v129, v8);
        uint64_t v135 = (*(uint64_t (**)(void *, uint64_t))(v128 + 120))(v8, v128);
        Swift::String::Index v136 = v129;
        Swift::String::Index v137 = (void (*)(uint64_t, void *))v230;
        v230(v134, v8);
        if (v135 < v242) {
          goto LABEL_90;
        }
        goto LABEL_59;
      }
      char v146 = *(void (**)(int64_t *, ValueMetadata *, unint64_t, void *, uint64_t))(v105 + 96);
      unint64_t v147 = lazy protocol witness table accessor for type Int and conformance Int(v131, v132, v133);
      unint64_t v148 = v232;
      v146(&v242, &type metadata for Int, v147, v8, v128);
      Swift::String::Index v136 = v210;
      char v149 = (*(uint64_t (**)(char *, char *, void *))(*(void *)(*(void *)(v128 + 32) + 8) + 16))(v210, v148, v8);
      Swift::String::Index v137 = (void (*)(uint64_t, void *))v230;
      v230(v148, v8);
      if (v149) {
LABEL_90:
      }
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Not enough bits to represent a signed value", 43, 2, "Swift/Integers.swift", 20, 2, 0xE61uLL, 0);
    }
    else
    {
      v237 = v127;
      char v138 = v130(v8, v105);
      uint64_t v139 = v222(v8, v105);
      uint64_t v128 = v105;
      if (v138)
      {
        if (v139 <= 64)
        {
          Swift::Int v152 = v129;
          v153 = v214;
          Swift::String::Index v154 = AssociatedTypeWitness;
          uint64_t v155 = swift_getAssociatedConformanceWitness((uint64_t)v214, (uint64_t)v8, (uint64_t)AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
          Swift::String::Index v156 = v212;
          (*(void (**)(void *, uint64_t, const char *, uint64_t))(v155 + 8))(&unk_18162B0B8, 256, v154, v155);
          Swift::String::Index v157 = v232;
          ((void (*)(char *, void *, int **))v153[3])(v156, v8, v153);
          LOBYTE(v154) = (*(uint64_t (**)(char *, char *, void *))(*(void *)(*(void *)(v105 + 32) + 8)
                                                                             + 16))(v152, v157, v8);
          Swift::String::Index v137 = (void (*)(uint64_t, void *))v230;
          v230(v157, v8);
          uint64_t v158 = v209[0];
          ((void (*)(void, char *, void *))v220)(v209[0], v152, v8);
          char v125 = v222;
          if (v154)
          {
            v137(v158, v8);
            goto LABEL_90;
          }
          int64_t v159 = v242;
          uint64_t v160 = (*(uint64_t (**)(void *, uint64_t))(v105 + 120))(v8, v105);
          v137(v158, v8);
          Swift::String::Index v136 = v210;
          if (v160 < v159) {
            goto LABEL_90;
          }
        }
        else
        {
          unint64_t v142 = *(void (**)(int64_t *, ValueMetadata *, unint64_t, void *, uint64_t))(v105 + 96);
          unint64_t v143 = lazy protocol witness table accessor for type Int and conformance Int(v139, v140, v141);
          unint64_t v144 = v232;
          v142(&v242, &type metadata for Int, v143, v8, v128);
          Swift::String::Index v136 = v210;
          char v145 = (*(uint64_t (**)(char *, char *, void *))(*(void *)(*(void *)(v128 + 32) + 8) + 16))(v210, v144, v8);
          Swift::String::Index v137 = (void (*)(uint64_t, void *))v230;
          v230(v144, v8);
          char v125 = v222;
          if (v145) {
            goto LABEL_90;
          }
        }
      }
      else if (v139 < 64)
      {
        unint64_t v150 = v232;
        ((void (*)(char *, char *, void *))v220)(v232, v129, v8);
        uint64_t v151 = (*(uint64_t (**)(void *, uint64_t))(v105 + 120))(v8, v105);
        Swift::String::Index v136 = v129;
        Swift::String::Index v137 = (void (*)(uint64_t, void *))v230;
        v230(v150, v8);
        char v125 = v222;
        if (v151 < v242) {
          goto LABEL_90;
        }
      }
      else
      {
        char v125 = v222;
        Swift::String::Index v136 = v129;
        Swift::String::Index v137 = (void (*)(uint64_t, void *))v230;
      }
    }
LABEL_59:
    v137((uint64_t)v136, v8);
    uint64_t v104 = v217;
LABEL_60:
    uint64_t v161 = v218;
    uint64_t v162 = v125(v8, v128);
    ((void (*)(char *, char *, void *))v220)(v104, v161, v8);
    if (v162 < 65)
    {
      uint64_t v165 = v125(v8, v128);
      v230(v104, v8);
      long long v163 = v215;
      if (v165 != 64) {
        goto LABEL_72;
      }
      unint64_t v164 = v219;
      if (v219(v8, v128)) {
        goto LABEL_72;
      }
    }
    else
    {
      v230(v104, v8);
      long long v163 = v215;
      unint64_t v164 = v219;
    }
    ((void (*)(char *, char *, void *))v220)(v163, v218, v8);
    int64_t v242 = 0x7FFFFFFFFFFFFFFFLL;
    char v166 = v164(v8, v128);
    uint64_t v167 = v222(v8, v128);
    if (v166)
    {
      if (v167 > 64)
      {
        uint64_t v170 = *(void (**)(int64_t *, ValueMetadata *, unint64_t, void *, uint64_t))(v128 + 96);
        unint64_t v171 = lazy protocol witness table accessor for type Int and conformance Int(v167, v168, v169);
        uint64_t v172 = &v242;
LABEL_70:
        uint64_t v175 = v232;
        v170(v172, &type metadata for Int, v171, v8, v128);
        char v176 = (*(uint64_t (**)(char *, char *, void *))(*(void *)(*(void *)(v128 + 32) + 8) + 16))(v175, v163, v8);
        Swift::String v177 = v230;
        v230(v175, v8);
        if (v176) {
          goto LABEL_88;
        }
        v177(v163, v8);
        goto LABEL_72;
      }
    }
    else if (v167 > 63)
    {
      uint64_t v241 = 0x7FFFFFFFFFFFFFFFLL;
      uint64_t v170 = *(void (**)(int64_t *, ValueMetadata *, unint64_t, void *, uint64_t))(v128 + 96);
      unint64_t v171 = lazy protocol witness table accessor for type Int and conformance Int(v167, v168, v169);
      uint64_t v172 = &v241;
      goto LABEL_70;
    }
    uint64_t v173 = v232;
    ((void (*)(char *, char *, void *))v220)(v232, v163, v8);
    (*(void (**)(void *, uint64_t))(v128 + 120))(v8, v128);
    uint64_t v174 = v230;
    v230(v173, v8);
    v174(v163, v8);
LABEL_72:
    unint64_t v178 = v218;
    uint64_t v93 = (*(uint64_t (**)(void *, uint64_t))(v128 + 120))(v8, v128);
    v230(v178, v8);
    uint64_t v19 = v233;
    goto LABEL_73;
  }
  uint64_t v56 = v237;
  v222 = *(uint64_t (**)(void *, uint64_t))(v6 + 128);
  uint64_t v57 = v222(v8, v6);
  if (v57 >= 64)
  {
    int64_t v242 = v220;
    uint64_t v70 = *(void (**)(int64_t *, ValueMetadata *, unint64_t, void *, uint64_t))(v6 + 96);
    unint64_t v71 = lazy protocol witness table accessor for type Int and conformance Int(v57, v58, v59);
    uint64_t v16 = v232;
    v70(&v242, &type metadata for Int, v71, v8, v6);
    char v72 = (*(uint64_t (**)(void, char *, void *))(*(void *)(*(void *)(v6 + 32) + 8) + 16))(v56, v16, v8);
    v230 = *(void (**)(char *, void *))(v238 + 8);
    v230(v16, v8);
    uint64_t v62 = v56;
    uint64_t v19 = v233;
    if (v72) {
      goto LABEL_22;
    }
    goto LABEL_26;
  }
  uint64_t v60 = v238;
  uint64_t v16 = v232;
  (*(void (**)(char *, uint64_t (*)(void, void, void), void *))(v238 + 16))(v232, (uint64_t (*)(void, void, void))v56, v8);
  uint64_t v61 = (*(uint64_t (**)(void *, uint64_t))(v6 + 120))(v8, v6);
  v230 = *(void (**)(char *, void *))(v60 + 8);
  v230(v16, v8);
  uint64_t v62 = v56;
  uint64_t v19 = v233;
  if (v61 >= v220) {
    goto LABEL_26;
  }
LABEL_22:
  uint64_t v82 = a2;
  uint64_t v92 = v240(a2, v19);
  uint64_t v93 = -v92;
  if (__OFSUB__(0, v92))
  {
    __break(1u);
LABEL_25:
    v230 = *(void (**)(char *, void *))(v82 + 8);
    v230(v16, v8);
    uint64_t v54 = v219;
    uint64_t v62 = v237;
    goto LABEL_26;
  }
LABEL_73:
  unint64_t v179 = *(void (**)(char *, char *, uint64_t))(v235 + 32);
  v179(v239, v228, a2);
  uint64_t v6 = v229;
  char v180 = (*(uint64_t (**)(uint64_t, uint64_t))(v229 + 64))(a2, v229);
  v237 = v179;
  uint64_t v238 = v93;
  if (v180)
  {
    uint64_t v181 = v240(a2, v19);
    if (!__OFSUB__(v181, 1))
    {
      int64_t v242 = v181 - 1;
      v184 = *(void (**)(int64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v6 + 96);
      unint64_t v185 = lazy protocol witness table accessor for type Int and conformance Int(v181, v182, v183);
      uint64_t v186 = v231;
      v184(&v242, &type metadata for Int, v185, a2, v6);
      uint64_t v19 = v233;
      (*((void (**)(char *, char *, uint64_t, char *))v233 + 25))(v239, v186, a2, v233);
      uint64_t v187 = v235;
      uint64_t v188 = v227;
      (*(void (**)(char *, uint64_t))(v235 + 8))(v186, a2);
      v189 = v226;
      uint64_t v190 = swift_getAssociatedConformanceWitness((uint64_t)v188, a2, (uint64_t)v226, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
      v191 = v224;
      goto LABEL_77;
    }
    __break(1u);
LABEL_88:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Not enough bits to represent the passed value", 45, 2, "Swift/Integers.swift", 20, 2, 0xE67uLL, 0);
  }
  uint64_t v192 = v226;
  uint64_t v188 = v227;
  uint64_t v190 = swift_getAssociatedConformanceWitness((uint64_t)v227, a2, (uint64_t)v226, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
  v191 = v224;
  (*(void (**)(void *, uint64_t, const char *, uint64_t))(v190 + 8))(&unk_18162B0B8, 256, v192, v190);
  ((void (*)(char *, uint64_t, int **))v188[3])(v191, a2, v188);
  v189 = v192;
  uint64_t v187 = v235;
LABEL_77:
  (*(void (**)(void *, uint64_t, const char *, uint64_t))(v190 + 8))(&unk_18162B0B8, 256, v189, v190);
  uint64_t v51 = v225;
  ((void (*)(char *, uint64_t, int **))v188[3])(v191, a2, v188);
  uint64_t v8 = *(void **)(v187 + 8);
  uint64_t v24 = v238;
  if ((v238 & 0x8000000000000000) == 0)
  {
    ((void (*)(char *, uint64_t))v8)(v51, a2);
    if (v24 < v240(a2, v19))
    {
      uint64_t v193 = ((uint64_t (*)(char *, uint64_t))v8)(v234, a2);
      int64_t v242 = v24;
      v194 = *(void (**)(int64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v6 + 96);
      unint64_t v197 = lazy protocol witness table accessor for type Int and conformance Int(v193, v195, v196);
      v198 = v231;
      v194(&v242, &type metadata for Int, v197, a2, v6);
      v199 = v239;
      (*((void (**)(char *, char *, uint64_t, char *))v19 + 25))(v239, v198, a2, v19);
LABEL_80:
      ((void (*)(char *, uint64_t))v8)(v198, a2);
      return ((uint64_t (*)(char *, uint64_t))v8)(v199, a2);
    }
    ((void (*)(char *, uint64_t))v8)(v239, a2);
    uint64_t v207 = v223;
    v208 = v234;
    return ((uint64_t (*)(uint64_t, char *, uint64_t))v237)(v207, v208, a2);
  }
LABEL_82:
  ((void (*)(char *, uint64_t))v8)(v234, a2);
  uint64_t v201 = v240(a2, v19);
  if (__OFSUB__(0, v201))
  {
    __break(1u);
  }
  else if (-v201 < v24)
  {
    uint64_t v202 = ((uint64_t (*)(char *, uint64_t))v8)(v51, a2);
    int64_t v242 = -v24;
    v203 = *(void (**)(int64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v6 + 96);
    unint64_t v206 = lazy protocol witness table accessor for type Int and conformance Int(v202, v204, v205);
    v198 = v231;
    v203(&v242, &type metadata for Int, v206, a2, v6);
    v199 = v239;
    (*((void (**)(char *, char *, uint64_t, char *))v19 + 27))(v239, v198, a2, v19);
    goto LABEL_80;
  }
  ((void (*)(char *, uint64_t))v8)(v239, a2);
  uint64_t v207 = v223;
  v208 = v51;
  return ((uint64_t (*)(uint64_t, char *, uint64_t))v237)(v207, v208, a2);
}

uint64_t static UInt64.& infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return a2 & a1;
}

BOOL static UInt64.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return a1 == a2;
}

BOOL static Bool.random()()
{
  uint64_t __buf = 0;
  swift_stdlib_random(&__buf, 8uLL);
  return (__buf & 0x20000) == 0;
}

Swift::Bool __swiftcall Bool.init(BOOLeanLiteral:)(Swift::Bool BOOLeanLiteral)
{
  return BOOLeanLiteral;
}

uint64_t protocol witness for _ExpressibleByBuiltinBooleanLiteral.init(_builtinBooleanLiteral:) in conformance Bool@<X0>(uint64_t result@<X0>, unsigned char *a2@<X8>)
{
  *a2 = result;
  return result;
}

unsigned char *protocol witness for ExpressibleByBooleanLiteral.init(BOOLeanLiteral:) in conformance Bool@<X0>(unsigned char *result@<X0>, unsigned char *a2@<X8>)
{
  *a2 = *result;
  return result;
}

uint64_t Bool.description.getter(char a1)
{
  if (a1) {
    return 1702195828;
  }
  else {
    return 0x65736C6166;
  }
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Bool()
{
  if (*v0) {
    return 1702195828;
  }
  else {
    return 0x65736C6166;
  }
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance Bool(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

void Bool.hash(into:)(uint64_t a1, char a2)
{
}

Swift::Int Bool.hashValue.getter(char a1)
{
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Bool()
{
  Hasher._combine(_:)(*v0);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance Bool()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Bool()
{
  Hasher._combine(_:)(*v0);
  return Hasher._finalize()();
}

Swift::Bool_optional __swiftcall Bool.init(_:)(Swift::String a1)
{
  unint64_t object = a1._object;
  if (a1._countAndFlagsBits == 1702195828 && a1._object == (void *)0xE400000000000000) {
    goto LABEL_10;
  }
  uint64_t countAndFlagsBits = a1._countAndFlagsBits;
  if ((~(uint64_t)a1._object & 0x6000000000000000) == 0)
  {
    if (a1._countAndFlagsBits == 1702195828)
    {
      if (a1._object == (void *)0xE400000000000000) {
        goto LABEL_10;
      }
LABEL_14:
      swift_bridgeObjectRelease((uint64_t)a1._object);
      return (Swift::Bool_optional)2;
    }
    if (a1._countAndFlagsBits != 0x65736C6166 || a1._object != (void *)0xE500000000000000) {
      goto LABEL_14;
    }
LABEL_17:
    swift_bridgeObjectRelease((uint64_t)object);
    return 0;
  }
  if (_stringCompareInternal(_:_:expecting:)(a1._countAndFlagsBits, (unint64_t)a1._object, 1702195828, 0xE400000000000000, 0))
  {
LABEL_10:
    swift_bridgeObjectRelease((uint64_t)object);
    return (Swift::Bool_optional)1;
  }
  if (countAndFlagsBits == 0x65736C6166 && object == (void *)0xE500000000000000) {
    goto LABEL_17;
  }
  char v5 = _stringCompareInternal(_:_:expecting:)(countAndFlagsBits, (unint64_t)object, 0x65736C6166, 0xE500000000000000, 0);
  swift_bridgeObjectRelease((uint64_t)object);
  result.Swift::UInt32 value = 0;
  if ((v5 & 1) == 0) {
    return (Swift::Bool_optional)2;
  }
  return result;
}

uint64_t static String.== infix(_:_:)(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a1 == a3 && a2 == a4) {
    return 1;
  }
  if ((~a2 & 0x6000000000000000) == 0 && (a4 & 0x2000000000000000) != 0 && (a4 & 0x4000000000000000) != 0) {
    return 0;
  }
  return _stringCompareInternal(_:_:expecting:)(a1, a2, a3, a4, 0);
}

void protocol witness for LosslessStringConvertible.init(_:) in conformance Bool(uint64_t a1@<X0>, unint64_t a2@<X1>, char *a3@<X8>)
{
  if (a1 == 1702195828 && a2 == 0xE400000000000000) {
    goto LABEL_10;
  }
  if ((~a2 & 0x6000000000000000) == 0)
  {
    if (a1 == 1702195828)
    {
      if (a2 == 0xE400000000000000) {
        goto LABEL_10;
      }
LABEL_14:
      swift_bridgeObjectRelease(a2);
      char v7 = 2;
      goto LABEL_11;
    }
    if (a1 != 0x65736C6166 || a2 != 0xE500000000000000) {
      goto LABEL_14;
    }
LABEL_17:
    swift_bridgeObjectRelease(a2);
    char v7 = 0;
    goto LABEL_11;
  }
  if (_stringCompareInternal(_:_:expecting:)(a1, a2, 1702195828, 0xE400000000000000, 0))
  {
LABEL_10:
    swift_bridgeObjectRelease(a2);
    char v7 = 1;
    goto LABEL_11;
  }
  if (a1 == 0x65736C6166 && a2 == 0xE500000000000000) {
    goto LABEL_17;
  }
  char v8 = _stringCompareInternal(_:_:expecting:)(a1, a2, 0x65736C6166, 0xE500000000000000, 0);
  swift_bridgeObjectRelease(a2);
  char v7 = 0;
  if ((v8 & 1) == 0) {
    char v7 = 2;
  }
LABEL_11:
  *a3 = v7;
}

Swift::Void __swiftcall Bool.toggle()()
{
  *uint64_t v0 = !*v0;
}

__objc2_class **_SwiftCreateBridgedArray_DoNotCall(values:numValues:)(char *a1, uint64_t a2)
{
  if (a2 < 0) {
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeBufferPointer with negative count", 39, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x53FuLL, 0);
  }
  unint64_t v2 = specialized _copyCollectionToContiguousArray<A>(_:)(a1, a2);
  uint64_t v4 = (atomic_ullong *)v2;
  if (((unint64_t)v2 & 0x8000000000000000) == 0 && ((unint64_t)v2 & 0x4000000000000000) == 0)
  {
    if (one-time initialization token for _bridgeInitializedSuccessfully != -1) {
      swift_once(&one-time initialization token for _bridgeInitializedSuccessfully, (dispatch_function_t)one-time initialization function for _bridgeInitializedSuccessfully, v3);
    }
    if (!_bridgeInitializedSuccessfully) {
      _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/BridgeObjectiveC.swift", 28, 2, 0x82uLL, 0);
    }
    _orphanedFoundationSubclassesReparented = 1;
    if (v4[2])
    {
      uint64_t v5 = canonical specialized generic type metadata accessor for _ContiguousArrayStorage<Swift.AnyObject>();
      swift_retain(v4);
      _swift_setClassMetadata(v5, v4);
      uint64_t v6 = (__objc2_class **)v4;
    }
    else
    {
      uint64_t v6 = &_swiftEmptyArrayStorage;
    }
    swift_release((uint64_t)v4);
    return v6;
  }
  return (__objc2_class **)v4;
}

void *_SwiftCreateBridgedMutableArray(char *a1, uint64_t a2)
{
  if (a2 < 0) {
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeBufferPointer with negative count", 39, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x53FuLL, 0);
  }
  unint64_t v2 = specialized _copyCollectionToContiguousArray<A>(_:)(a1, a2);
  unint64_t v3 = (unint64_t *)type metadata accessor for _SwiftNSMutableArray();
  Swift::Bool_optional result = swift_allocObject(v3, 0x18uLL, 7uLL);
  result[2] = v2;
  return result;
}

void *_SwiftCreateBridgedMutableArray_DoNotCall(values:numValues:)(char *a1, uint64_t a2)
{
  if (a2 < 0) {
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeBufferPointer with negative count", 39, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x53FuLL, 0);
  }
  unint64_t v2 = specialized _copyCollectionToContiguousArray<A>(_:)(a1, a2);
  unint64_t v3 = (unint64_t *)type metadata accessor for _SwiftNSMutableArray();
  Swift::Bool_optional result = swift_allocObject(v3, 0x18uLL, 7uLL);
  result[2] = v2;
  return result;
}

objc_class *one-time initialization function for _bridgeInitializedSuccessfully()
{
  Swift::Bool_optional result = swift_stdlib_connectNSBaseClasses();
  _bridgeInitializedSuccessfully = result & 1;
  return result;
}

void *_BridgeableMetatype._bridgeToObjectiveC()()
{
  return swift_getObjCClassFromMetadata(*v0);
}

uint64_t static _BridgeableMetatype._forceBridgeFromObjectiveC(_:result:)(void *a1, void *a2)
{
  uint64_t v6 = a1;
  swift_unknownObjectRetain(a1);
  unint64_t v3 = (const char *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Swift.AnyObject.Type);
  uint64_t result = swift_dynamicCast((char *)&v5, (unint64_t *)&v6, qword_1ECA06328, v3, 7uLL);
  *a2 = v5;
  return result;
}

uint64_t static _BridgeableMetatype._conditionallyBridgeFromObjectiveC(_:result:)(void *a1, void *a2)
{
  char v7 = a1;
  swift_unknownObjectRetain(a1);
  unint64_t v3 = (const char *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Swift.AnyObject.Type);
  uint64_t result = swift_dynamicCast((char *)&v6, (unint64_t *)&v7, qword_1ECA06328, v3, 6uLL);
  if (result) {
    uint64_t v5 = v6;
  }
  else {
    uint64_t v5 = 0;
  }
  *a2 = v5;
  return result;
}

uint64_t static _BridgeableMetatype._unconditionallyBridgeFromObjectiveC(_:)@<X0>(void *a1@<X0>, char *a2@<X8>)
{
  if (!a1) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/BridgeObjectiveC.swift", 28, 2, 0xB4uLL, 0);
  }
  uint64_t v5 = a1;
  swift_unknownObjectRetain(a1);
  unint64_t v3 = (const char *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Swift.AnyObject.Type);
  return swift_dynamicCast(a2, (unint64_t *)&v5, qword_1ECA06328, v3, 7uLL);
}

void *protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance _BridgeableMetatype()
{
  return swift_getObjCClassFromMetadata(*v0);
}

uint64_t protocol witness for static _ObjectiveCBridgeable._forceBridgeFromObjectiveC(_:result:) in conformance _BridgeableMetatype(void *a1, void *a2)
{
  uint64_t v6 = a1;
  swift_unknownObjectRetain(a1);
  unint64_t v3 = (const char *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Swift.AnyObject.Type);
  uint64_t result = swift_dynamicCast((char *)&v5, (unint64_t *)&v6, qword_1ECA06328, v3, 7uLL);
  *a2 = v5;
  return result;
}

uint64_t protocol witness for static _ObjectiveCBridgeable._conditionallyBridgeFromObjectiveC(_:result:) in conformance _BridgeableMetatype(void *a1, void *a2)
{
  char v7 = a1;
  swift_unknownObjectRetain(a1);
  unint64_t v3 = (const char *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Swift.AnyObject.Type);
  uint64_t result = swift_dynamicCast((char *)&v6, (unint64_t *)&v7, qword_1ECA06328, v3, 6uLL);
  if (result) {
    uint64_t v5 = v6;
  }
  else {
    uint64_t v5 = 0;
  }
  *a2 = v5;
  return result;
}

atomic_ullong *_bridgeAnythingToObjectiveC<A>(_:)(id *a1, uint64_t *a2)
{
  uint64_t v4 = *(a2 - 1);
  uint64_t v5 = *(void *)(v4 + 64);
  MEMORY[0x1F4188790](a1);
  if (_swift_isClassOrObjCExistentialType((uint64_t)v6, v6))
  {
    if (v5 != 8) {
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't unsafeBitCast between types of different sizes", 52, 2, "Swift/Builtin.swift", 19, 2, 0x5FuLL, 0);
    }
    return (atomic_ullong *)swift_unknownObjectRetain(*a1);
  }
  else
  {
    (*(void (**)(char *, id *, uint64_t *))(v4 + 16))((char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), a1, a2);
    return _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)((id *)((char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0)), a2);
  }
}

id _bridgeAnyObjectToAny(_:)@<X0>(id a1@<X0>, void *a2@<X8>)
{
  if (a1)
  {
    ObjectType = (void *)swift_getObjectType((unint64_t)a1);
    id v5 = a1;
  }
  else
  {
    id v5 = 0;
    ObjectType = &unk_1ECA01EB0;
  }
  a2[3] = ObjectType;
  *a2 = v5;

  return swift_unknownObjectRetain(a1);
}

uint64_t _forceBridgeFromObjectiveC<A>(_:_:)@<X0>(void *a1@<X0>, char *a2@<X2>, uint64_t a3@<X3>, char *a4@<X8>)
{
  char v7 = type metadata accessor for Optional(0, (uint64_t)a2, (uint64_t)a2, a3);
  uint64_t v8 = (uint64_t)*(v7 - 1);
  uint64_t v9 = MEMORY[0x1F4188790](v7);
  uint64_t v11 = (char *)&v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  uint64_t v13 = (uint64_t *)((char *)&v16 - v12);
  if (_swift_isClassOrObjCExistentialType((uint64_t)a2, (uint64_t *)a2))
  {
    uint64_t v17 = a1;
    swift_unknownObjectRetain(a1);
    return swift_dynamicCast(a4, (unint64_t *)&v17, qword_1ECA06328, a2, 7uLL);
  }
  else
  {
    uint64_t v15 = *((void *)a2 - 1);
    (*(void (**)(void *, uint64_t, uint64_t, char *))(v15 + 56))(v13, 1, 1, a2);
    _bridgeNonVerbatimFromObjectiveC<A>(_:_:_:)((swift *)a1, (uint64_t)a2, v13);
    (*(void (**)(char *, void *, Class *))(v8 + 16))(v11, v13, v7);
    if ((*(unsigned int (**)(char *, uint64_t, char *))(v15 + 48))(v11, 1, a2) == 1) {
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/BridgeObjectiveC.swift", 28, 2, 0xFCuLL, 0);
    }
    (*(void (**)(void *, Class *))(v8 + 8))(v13, v7);
    return (*(uint64_t (**)(char *, char *, char *))(v15 + 32))(a4, v11, a2);
  }
}

uint64_t _forceBridgeFromObjectiveC_bridgeable<A>(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v8 = type metadata accessor for Optional(0, a2, a2, a3);
  uint64_t v9 = (uint64_t)*(v8 - 1);
  uint64_t v10 = MEMORY[0x1F4188790](v8);
  uint64_t v12 = (char *)&v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10);
  uint64_t v14 = (char *)&v17 - v13;
  uint64_t v15 = *(void *)(a2 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v15 + 56))((char *)&v17 - v13, 1, 1, a2);
  (*(void (**)(uint64_t, char *, uint64_t, uint64_t))(a3 + 24))(a1, v14, a2, a3);
  (*(void (**)(char *, char *, Class *))(v9 + 16))(v12, v14, v8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v12, 1, a2) == 1) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/BridgeObjectiveC.swift", 28, 2, 0x109uLL, 0);
  }
  (*(void (**)(char *, Class *))(v9 + 8))(v14, v8);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v15 + 32))(a4, v12, a2);
}

uint64_t _conditionallyBridgeFromObjectiveC<A>(_:_:)@<X0>(void *a1@<X0>, char *a2@<X2>, uint64_t a3@<X3>, char *a4@<X8>)
{
  char v7 = type metadata accessor for Optional(0, (uint64_t)a2, (uint64_t)a2, a3);
  uint64_t v8 = (uint64_t)*(v7 - 1);
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = (uint64_t *)((char *)&v13 - v9);
  if (_swift_isClassOrObjCExistentialType((uint64_t)a2, (uint64_t *)a2))
  {
    uint64_t v14 = a1;
    swift_unknownObjectRetain(a1);
    int v11 = swift_dynamicCast(a4, (unint64_t *)&v14, qword_1ECA06328, a2, 6uLL);
    return (*(uint64_t (**)(char *, void, uint64_t, char *))(*((void *)a2 - 1) + 56))(a4, v11 ^ 1u, 1, a2);
  }
  else
  {
    (*(void (**)(void *, uint64_t, uint64_t, char *))(*((void *)a2 - 1) + 56))(v10, 1, 1, a2);
    _bridgeNonVerbatimFromObjectiveCConditional<A>(_:_:_:)((swift *)a1, (uint64_t)a2, v10);
    return (*(uint64_t (**)(char *, void *, Class *))(v8 + 32))(a4, v10, v7);
  }
}

uint64_t _conditionallyBridgeFromObjectiveC_bridgeable<A>(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a3 + 32))(a1, a4, a2, a3);
}

id _bridgeNonVerbatimFromObjectiveCToAny(void *a1, void *a2)
{
  outlined destroy of Any?((uint64_t)a2);
  a2[3] = swift_getObjectType((unint64_t)a1);
  *a2 = a1;

  return swift_unknownObjectRetain(a1);
}

uint64_t _bridgeNonVerbatimBoxedValue(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char v7 = type metadata accessor for Optional(0, a3, a3, a4);
  (*((void (**)(uint64_t, Class *))*(v7 - 1) + 1))(a2, v7);
  uint64_t v10 = *(void *)(a3 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16))(a2, a1, a3);
  uint64_t v8 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v10 + 56);

  return v8(a2, 0, 1, a3);
}

BOOL _isBridgedToObjectiveC<A>(_:)(uint64_t a1, uint64_t *a2)
{
  if (_swift_isClassOrObjCExistentialType((uint64_t)a2, a2)) {
    return 1;
  }

  return _isBridgedNonVerbatimToObjectiveC<A>(_:)((uint64_t)a2, (uint64_t)a2);
}

BOOL _isBridgedVerbatimToObjectiveC<A>(_:)(uint64_t a1, uint64_t *a2)
{
  return _swift_isClassOrObjCExistentialType((uint64_t)a2, a2);
}

int **_getBridgedObjectiveCType<A>(_:)(uint64_t a1, uint64_t *a2)
{
  if (_swift_isClassOrObjCExistentialType((uint64_t)a2, a2)) {
    return (int **)a2;
  }

  return _getBridgedNonVerbatimObjectiveCType<A>(_:)((uint64_t)a2, (uint64_t)a2);
}

uint64_t AutoreleasingUnsafeMutablePointer.pointee.getter@<X0>(id *a1@<X0>, const char *a2@<X1>, char *a3@<X8>)
{
  id v5 = *a1;
  if (v5) {
    id v5 = swift_unknownObjectRetain(v5);
  }
  id v7 = v5;
  return swift_dynamicCast(a3, (unint64_t *)&v7, qword_1ECA01EB0, a2, 7uLL);
}

uint64_t key path getter for AutoreleasingUnsafeMutablePointer.pointee : <A>AutoreleasingUnsafeMutablePointer<A>@<X0>(id **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char *a4@<X8>)
{
  id v5 = *(const char **)(a3 + a2 - 8);
  id v6 = **a1;
  if (v6) {
    id v6 = swift_unknownObjectRetain(v6);
  }
  id v8 = v6;
  return swift_dynamicCast(a4, (unint64_t *)&v8, qword_1ECA01EB0, v5, 7uLL);
}

id key path setter for AutoreleasingUnsafeMutablePointer.pointee : <A>AutoreleasingUnsafeMutablePointer<A>(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
  id v5 = *(Class **)(a4 + a3 - 8);
  MEMORY[0x1F4188790](a1);
  id v7 = (unint64_t *)((char *)&v12 - v6);
  (*(void (**)(char *))(v8 + 16))((char *)&v12 - v6);
  uint64_t v9 = *a2;
  swift_dynamicCast((char *)&v13, v7, v5, (const char *)qword_1ECA01EB0, 7uLL);
  id v10 = v13;
  id result = v13;
  *uint64_t v9 = v10;
  return result;
}

id AutoreleasingUnsafeMutablePointer.pointee.setter(unint64_t *a1, void *a2, Class *a3)
{
  swift_dynamicCast((char *)&v6, a1, a3, (const char *)qword_1ECA01EB0, 7uLL);
  id v4 = v6;
  id result = v6;
  *a2 = v4;
  return result;
}

uint64_t _unsafeReferenceCast<A, B>(_:to:)@<X0>(uint64_t a1@<X0>, Class *a2@<X2>, const char *a3@<X3>, char *a4@<X8>)
{
  MEMORY[0x1F4188790](a1);
  uint64_t v8 = (unint64_t *)((char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(unint64_t *))(v9 + 16))(v8);
  return swift_dynamicCast(a4, v8, a2, a3, 7uLL);
}

void (*AutoreleasingUnsafeMutablePointer.pointee.modify(unint64_t **a1, id *a2, const char *a3))(uint64_t *a1, char a2)
{
  id v6 = (unint64_t *)malloc(0x40uLL);
  *a1 = v6;
  v6[3] = (unint64_t)a2;
  v6[4] = (unint64_t)a3;
  unint64_t v7 = *((void *)a3 - 1);
  unint64_t v8 = v7;
  void v6[5] = v7;
  size_t v9 = *(void *)(v7 + 64);
  id v10 = (char *)malloc(v9);
  v6[6] = (unint64_t)v10;
  uint64_t v11 = malloc(v9);
  v6[7] = (unint64_t)v11;
  id v12 = *a2;
  if (*a2) {
    id v12 = swift_unknownObjectRetain(v12);
  }
  *id v6 = (unint64_t)v12;
  swift_dynamicCast(v10, v6, qword_1ECA01EB0, a3, 7uLL);
  (*(void (**)(void *, char *, const char *))(v8 + 32))(v11, v10, a3);
  return AutoreleasingUnsafeMutablePointer.pointee.modify;
}

void AutoreleasingUnsafeMutablePointer.pointee.modify(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *(void *)(*a1 + 40);
  (*(void (**)(void, void, void))(*(void *)(v3 + 40) + 16))(*(void *)(*a1 + 48), *(void *)(v3 + 56), *(void *)(v3 + 32));
  id v6 = *(void **)(v3 + 48);
  id v5 = *(void **)(v3 + 56);
  unint64_t v8 = *(void **)(v3 + 24);
  uint64_t v7 = *(void *)(v3 + 32);
  BOOL v9 = (a2 & 1) == 0;
  if (a2) {
    uint64_t v10 = 8;
  }
  else {
    uint64_t v10 = 16;
  }
  if (v9) {
    uint64_t v11 = (char *)(v3 + 16);
  }
  else {
    uint64_t v11 = (char *)(v3 + 8);
  }
  swift_dynamicCast(v11, *(unint64_t **)(v3 + 48), *(Class **)(v3 + 32), (const char *)qword_1ECA01EB0, 7uLL);
  id v12 = *(void **)(v3 + v10);
  id v13 = v12;
  *unint64_t v8 = v12;
  (*(void (**)(void *, uint64_t))(v4 + 8))(v5, v7);
  free(v5);
  free(v6);

  free((void *)v3);
}

uint64_t AutoreleasingUnsafeMutablePointer.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, const char *a3@<X2>, char *a4@<X8>)
{
  id v6 = *(id *)(a2 + *(void *)(*((void *)a3 - 1) + 72) * a1);
  if (v6) {
    id v6 = swift_unknownObjectRetain(v6);
  }
  id v8 = v6;
  return swift_dynamicCast(a4, (unint64_t *)&v8, qword_1ECA01EB0, a3, 7uLL);
}

uint64_t _Pointer.advanced(by:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 48))(a2, a3);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (int **)a3, a2, (uint64_t)&protocol requirements base descriptor for _Pointer, associated type descriptor for _Pointer.Pointee);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a3 + 56))(v6 + *(void *)(*((void *)AssociatedTypeWitness - 1) + 72) * a1, a2, a3);
}

Swift::Int AutoreleasingUnsafeMutablePointer.hashValue.getter(uint64_t a1, uint64_t a2)
{
  return AutoreleasingUnsafeMutablePointer.hashValue.getter(a1, a2, (uint64_t (*)(void))type metadata accessor for AutoreleasingUnsafeMutablePointer, protocol conformance descriptor for AutoreleasingUnsafeMutablePointer<A>);
}

uint64_t protocol witness for _Pointer._rawValue.getter in conformance AutoreleasingUnsafeMutablePointer<A>()
{
  return *(void *)v0;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AutoreleasingUnsafeMutablePointer<A>(uint64_t a1)
{
  return AutoreleasingUnsafeMutablePointer.hashValue.getter(*v1, *(void *)(a1 + 16));
}

void protocol witness for Hashable.hash(into:) in conformance AutoreleasingUnsafeMutablePointer<A>(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable(protocol conformance descriptor for AutoreleasingUnsafeMutablePointer<A>, a2, a3);

  _Pointer.hash(into:)(a1, (uint64_t)a2, WitnessTable);
}

void _Pointer.hash(into:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  v20[1] = a1;
  uint64_t v7 = *(void *)(a2 - 8);
  size_t v8 = *(void *)(v7 + 64);
  MEMORY[0x1F4188790](a1);
  id v12 = type metadata accessor for Optional(0, v9, v10, v11);
  uint64_t v13 = (uint64_t)*(v12 - 1);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)v20 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v18 = (char *)v20 - v17;
  memcpy((char *)v20 - v17, v4, v8);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(v18, 0, 1, a2);
  (*(void (**)(char *, char *, Class *))(v13 + 32))(v16, v18, v12);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v16, 1, a2) == 1)
  {
    (*(void (**)(char *, Class *))(v13 + 8))(v16, v12);
    Swift::UInt v19 = 0;
  }
  else
  {
    memcpy((char *)v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v16, v8);
    Swift::UInt v19 = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 48))(a2, a3);
  }
  Hasher._combine(_:)(v19);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AutoreleasingUnsafeMutablePointer<A>(Swift::Int a1, unint64_t *a2, uint64_t a3)
{
  swift_getWitnessTable(protocol conformance descriptor for AutoreleasingUnsafeMutablePointer<A>, a2, a3);

  return _Pointer._rawHashValue(seed:)(a1);
}

Swift::Int __swiftcall _Pointer._rawHashValue(seed:)(Swift::Int seed)
{
  uint64_t v4 = v3;
  uint64_t v5 = v2;
  uint64_t v6 = v1;
  Swift::Int v22 = seed;
  uint64_t v7 = *(void *)(v1 - 8);
  size_t v8 = *(void *)(v7 + 64);
  MEMORY[0x1F4188790](seed);
  id v12 = type metadata accessor for Optional(0, v9, v10, v11);
  uint64_t v13 = (uint64_t)*(v12 - 1);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)&v21 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v18 = (char *)&v21 - v17;
  memcpy((char *)&v21 - v17, v4, v8);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(v18, 0, 1, v6);
  (*(void (**)(char *, char *, Class *))(v13 + 32))(v16, v18, v12);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v16, 1, v6) == 1)
  {
    (*(void (**)(char *, Class *))(v13 + 8))(v16, v12);
    uint64_t v19 = 0;
  }
  else
  {
    memcpy((char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v16, v8);
    uint64_t v19 = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 48))(v6, v5);
  }
  return specialized static Hasher._hash(seed:_:)(v22, v19);
}

void *protocol witness for Strideable.distance(to:) in conformance AutoreleasingUnsafeMutablePointer<A>@<X0>(void *result@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4 = *(void *)(*(void *)(*(void *)(a2 + 16) - 8) + 72);
  if (!v4) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Division by zero", 16, 2, "Swift/IntegerTypes.swift", 24, 2, 0x3829uLL, 0);
  }
  uint64_t v5 = *result - *v3;
  if (v4 == -1 && v5 == 0x8000000000000000) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Division results in an overflow", 31, 2, "Swift/IntegerTypes.swift", 24, 2, 0x3830uLL, 0);
  }
  *a3 = v5 / v4;
  return result;
}

uint64_t _Pointer.distance(to:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))(a3 + 48);
  uint64_t v6 = v5(a2, a3);
  uint64_t v7 = v5(a2, a3);
  uint64_t v8 = *(void *)(*((void *)swift_getAssociatedTypeWitness(0, (int **)a3, a2, (uint64_t)&protocol requirements base descriptor for _Pointer, associated type descriptor for _Pointer.Pointee)- 1)+ 72);
  if (!v8) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Division by zero", 16, 2, "Swift/IntegerTypes.swift", 24, 2, 0x3829uLL, 0);
  }
  if (v6 - v7 == 0x8000000000000000 && v8 == -1) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Division results in an overflow", 31, 2, "Swift/IntegerTypes.swift", 24, 2, 0x3830uLL, 0);
  }
  return (v6 - v7) / v8;
}

uint64_t protocol witness for static Strideable._step(after:from:by:) in conformance AutoreleasingUnsafeMutablePointer<A>(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return 0;
}

uint64_t static Strideable._step(after:from:by:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0, (uint64_t)&unk_1ECA01F50, a7, "index value ", 0);
  uint64_t v15 = *(TupleTypeMetadata2 - 1);
  uint64_t v16 = MEMORY[0x1F4188790](TupleTypeMetadata2);
  uint64_t v18 = (char *)&v20 - v17;
  *(void *)uint64_t v18 = a2;
  v18[8] = a3 & 1;
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(a7 - 8) + 16))((char *)&v20 + *(int *)(v16 + 48) - v17, a4, a7);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(a8 + 48))(a6, a7, a8);
  (*(void (**)(char *, uint64_t *))(v15 + 8))(v18, TupleTypeMetadata2);
  return 0;
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AutoreleasingUnsafeMutablePointer<A>(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable(protocol conformance descriptor for AutoreleasingUnsafeMutablePointer<A>, a1, a3);

  return _Pointer.debugDescription.getter((uint64_t)a1, WitnessTable);
}

uint64_t _Pointer.debugDescription.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (void *)(*(uint64_t (**)(void))(a2 + 48))();

  return _rawPointerToString(_:)(v2)._countAndFlagsBits;
}

uint64_t protocol witness for CustomReflectable.customMirror.getter in conformance AutoreleasingUnsafeMutablePointer<A>@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  swift_getWitnessTable(protocol conformance descriptor for AutoreleasingUnsafeMutablePointer<A>, a1, a2);

  return _Pointer.customMirror.getter((Class *)a1, a3);
}

uint64_t specialized _Pointer.customMirror.getter@<X0>(unint64_t a1@<X0>, swift *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = (unint64_t *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  uint64_t v7 = swift_allocObject(v6, 0x50uLL, 7uLL);
  *((_OWORD *)v7 + 1) = xmmword_18162AC80;
  strcpy((char *)v7 + 32, "pointerValue");
  *((unsigned char *)v7 + 45) = 0;
  *((_WORD *)v7 + 23) = -5120;
  v7[9] = &type metadata for UInt64;
  v7[6] = a1;
  return specialized Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)(a1, (uint64_t)v7, 8, 0, 0, a2, a3);
}

uint64_t _Pointer.customMirror.getter@<X0>(Class *a1@<X0>, uint64_t a2@<X8>)
{
  size_t v5 = *((void *)*(a1 - 1) + 8);
  uint64_t v6 = MEMORY[0x1F4188790](a1);
  uint64_t v8 = (*(uint64_t (**)(uint64_t))(v7 + 48))(v6);
  memcpy((char *)v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v2, v5);
  uint64_t v9 = (unint64_t *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  uint64_t v10 = swift_allocObject(v9, 0x50uLL, 7uLL);
  *((_OWORD *)v10 + 1) = xmmword_18162AC80;
  strcpy((char *)v10 + 32, "pointerValue");
  *((unsigned char *)v10 + 45) = 0;
  *((_WORD *)v10 + 23) = -5120;
  v10[9] = &type metadata for UInt64;
  v10[6] = v8;
  char v13 = 8;
  v12[1] = 0;
  v12[2] = 0;
  return Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)((uint64_t)v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t)v10, a1, a2);
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance AutoreleasingUnsafeMutablePointer<A>(void *a1, void *a2)
{
  return *a1 == *a2;
}

BOOL protocol witness for static Comparable.< infix(_:_:) in conformance AutoreleasingUnsafeMutablePointer<A>(void *a1, void *a2)
{
  return *a1 < *a2;
}

BOOL protocol witness for static Comparable.<= infix(_:_:) in conformance AutoreleasingUnsafeMutablePointer<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return static Comparable.<= infix(_:_:)(a1, a2, a3, a4);
}

uint64_t specialized static Comparable.<= infix(_:_:)(unint64_t a1, uint64_t a2, char a3, unint64_t a4, uint64_t a5, char a6)
{
  if (a4 >> 14 != a1 >> 14) {
    return a4 >> 14 >= a1 >> 14;
  }
  if ((a6 & 1) == 0)
  {
    if ((a3 & 1) == 0) {
      return a5 >= a2;
    }
LABEL_8:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/Flatten.swift", 19, 2, 0xC8uLL, 0);
  }
  if ((a3 & 1) == 0) {
    goto LABEL_8;
  }
  return 1;
}

uint64_t specialized static Comparable.<= infix(_:_:)(unint64_t a1, unint64_t a2, char a3, unint64_t a4, unint64_t a5, char a6)
{
  BOOL v6 = a4 >> 14 >= a1 >> 14;
  if (a4 >> 14 == a1 >> 14)
  {
    if (a6)
    {
      if (a3) {
        return 1;
      }
    }
    else if ((a3 & 1) == 0)
    {
      BOOL v6 = a5 >> 14 >= a2 >> 14;
      goto LABEL_5;
    }
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/Flatten.swift", 19, 2, 0xC8uLL, 0);
  }
LABEL_5:
  int v7 = !v6;
  return v7 ^ 1u;
}

uint64_t specialized static Comparable.<= infix(_:_:)(uint64_t a1, unint64_t a2, char a3, uint64_t a4, unint64_t a5, char a6)
{
  if (a4 != a1) {
    return a4 >= a1;
  }
  if ((a6 & 1) == 0)
  {
    if ((a3 & 1) == 0) {
      return a5 >> 14 >= a2 >> 14;
    }
LABEL_8:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/Flatten.swift", 19, 2, 0xC8uLL, 0);
  }
  if ((a3 & 1) == 0) {
    goto LABEL_8;
  }
  return 1;
}

BOOL static Comparable.<= infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return ((*(uint64_t (**)(uint64_t, uint64_t))(a4 + 16))(a2, a1) & 1) == 0;
}

BOOL protocol witness for static Comparable.>= infix(_:_:) in conformance AutoreleasingUnsafeMutablePointer<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return static Comparable.>= infix(_:_:)(a1, a2, a3, a4);
}

BOOL static Comparable.>= infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return ((*(uint64_t (**)(void))(a4 + 16))() & 1) == 0;
}

uint64_t protocol witness for static Comparable.> infix(_:_:) in conformance AutoreleasingUnsafeMutablePointer<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return static Comparable.> infix(_:_:)(a1, a2, a3, a4) & 1;
}

uint64_t specialized static Comparable.> infix(_:_:)(unint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  unint64_t ObjectType = swift_getObjectType(a3);
  uint64_t v9 = (*(uint64_t (**)(unint64_t, uint64_t))(a4 + 8))(ObjectType, a4);
  unint64_t v10 = swift_getObjectType(a1);
  if (v9 != (*(uint64_t (**)(unint64_t, uint64_t))(a2 + 8))(v10, a2)) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Base index types differ", 23, 2, "Swift/ExistentialCollection.swift", 33, 2, 0x755uLL, 0);
  }
  unint64_t v11 = swift_getObjectType(a3);
  return (*(uint64_t (**)(unint64_t, uint64_t, unint64_t, uint64_t))(a4 + 32))(a1, a2, v11, a4) & 1;
}

uint64_t static Comparable.> infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 16))(a2, a1) & 1;
}

uint64_t _Pointer.init(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 48))(a2, a3);
  BOOL v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a3 + 56);

  return v6(v5, a2, a3);
}

{
  return (*(uint64_t (**)(void))(a3 + 56))();
}

uint64_t static MemoryLayout.size(ofValue:)(uint64_t a1, uint64_t a2)
{
  return *(void *)(*(void *)(a2 - 8) + 64);
}

uint64_t static MemoryLayout.size.getter(uint64_t a1)
{
  return *(void *)(*(void *)(a1 - 8) + 64);
}

const char *_getObjCTypeEncoding<A>(_:)()
{
  return "@";
}

uint64_t (*_BridgeStorage.rawValue.modify())(void, void)
{
  return EnumeratedSequence._base.modify;
}

uint64_t _objectPointerLowSpareBitShift.getter()
{
  return 0;
}

uint64_t static FixedWidthInteger.<< infix<A>(_:_:)@<X0>(void (*a1)(char *, char *, uint64_t)@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, char *a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  uint64_t v6 = a5;
  uint64_t v8 = (void *)a3;
  v237 = a1;
  v214 = *(int ***)(*(void *)(a5 + 24) + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v214, a3, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, associated type descriptor for ExpressibleByIntegerLiteral.IntegerLiteralType);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  v212 = (char *)v209 - v11;
  uint64_t v229 = *((void *)a4 + 1);
  v227 = *(int ***)(*(void *)(v229 + 24) + 16);
  v226 = swift_getAssociatedTypeWitness(0, v227, a2, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, associated type descriptor for ExpressibleByIntegerLiteral.IntegerLiteralType);
  uint64_t v12 = MEMORY[0x1F4188790](v226);
  v224 = (char *)v209 - v13;
  uint64_t v238 = *(v8 - 1);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)v209 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = MEMORY[0x1F4188790](v14);
  uint64_t v19 = (char *)v209 - v18;
  uint64_t v20 = MEMORY[0x1F4188790](v17);
  v211 = (char *)v209 - v21;
  uint64_t v22 = MEMORY[0x1F4188790](v20);
  uint64_t v24 = (uint64_t)v209 - v23;
  uint64_t v25 = MEMORY[0x1F4188790](v22);
  v215 = (char *)v209 - v26;
  uint64_t v27 = MEMORY[0x1F4188790](v25);
  uint64_t v29 = (char *)v209 - v28;
  uint64_t v30 = MEMORY[0x1F4188790](v27);
  v210 = (char *)v209 - v31;
  uint64_t v32 = MEMORY[0x1F4188790](v30);
  v216 = (char *)v209 - v33;
  uint64_t v34 = MEMORY[0x1F4188790](v32);
  v218 = (char *)v209 - v35;
  uint64_t v36 = MEMORY[0x1F4188790](v34);
  v232 = (char *)v209 - v37;
  uint64_t v38 = MEMORY[0x1F4188790](v36);
  v225 = (char *)v209 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v40 = MEMORY[0x1F4188790](v38);
  v231 = (char *)v209 - v41;
  uint64_t v42 = MEMORY[0x1F4188790](v40);
  v234 = (char *)v209 - v43;
  uint64_t v44 = MEMORY[0x1F4188790](v42);
  v239 = (char *)v209 - v45;
  MEMORY[0x1F4188790](v44);
  uint64_t v235 = v46;
  uint64_t v47 = *(void (**)(void))(v46 + 16);
  v228 = (char *)v209 - v48;
  v47();
  uint64_t v49 = (uint64_t (*)(uint64_t, char *))*((void *)a4 + 7);
  v233 = a4;
  int v50 = a4;
  uint64_t v51 = a4 + 56;
  v240 = v49;
  uint64_t v52 = v49(a2, v50);
  if (__OFSUB__(0, v52))
  {
    __break(1u);
    goto LABEL_82;
  }
  uint64_t v220 = -v52;
  v217 = v29;
  v209[0] = v24;
  uint64_t v53 = v51;
  uint64_t v54 = *(uint64_t (**)(void *, uint64_t))(v6 + 64);
  char v55 = v54(v8, v6);
  uint64_t v223 = a6;
  v236 = v53;
  uint64_t v221 = v6 + 64;
  v219 = v54;
  if ((v55 & 1) == 0)
  {
    char v63 = v54(v8, v6);
    v222 = *(uint64_t (**)(void *, uint64_t))(v6 + 128);
    uint64_t v64 = v222(v8, v6);
    if (v63)
    {
      if (v64 <= 64)
      {
        uint64_t v75 = v214;
        uint64_t v76 = AssociatedTypeWitness;
        uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness((uint64_t)v214, (uint64_t)v8, (uint64_t)AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
        uint64_t v78 = v212;
        (*(void (**)(void *, uint64_t, const char *, uint64_t))(AssociatedConformanceWitness + 8))(&unk_18162B0B8, 256, v76, AssociatedConformanceWitness);
        uint64_t v79 = v232;
        ((void (*)(char *, void *, int **))v75[3])(v78, v8, v75);
        uint64_t v80 = v237;
        LOBYTE(v76) = (*(uint64_t (**)(void, char *, void *))(*(void *)(*(void *)(v6 + 32) + 8)
                                                                          + 16))(v237, v79, v8);
        uint64_t v16 = (char *)v238;
        uint64_t v81 = *(void (**)(char *, void *))(v238 + 8);
        v81(v79, v8);
        (*((void (**)(char *, uint64_t (*)(void, void, void), void *))v16 + 2))(v19, (uint64_t (*)(void, void, void))v80, v8);
        if (v76)
        {
          v81(v19, v8);
          uint64_t v19 = v233;
        }
        else
        {
          uint64_t v91 = (*(uint64_t (**)(void *, uint64_t))(v6 + 120))(v8, v6);
          v230 = v81;
          v81(v19, v8);
          uint64_t v19 = v233;
          uint64_t v54 = v219;
          uint64_t v62 = v237;
          if (v91 >= v220) {
            goto LABEL_26;
          }
        }
        goto LABEL_22;
      }
      int64_t v242 = v220;
      uint64_t v67 = *(void (**)(int64_t *, ValueMetadata *, unint64_t, void *, uint64_t))(v6 + 96);
      unint64_t v68 = lazy protocol witness table accessor for type Int and conformance Int(v64, v65, v66);
      uint64_t v16 = v232;
      v67(&v242, &type metadata for Int, v68, v8, v6);
      uint64_t v62 = v237;
      char v69 = (*(uint64_t (**)(void, char *, void *))(*(void *)(*(void *)(v6 + 32) + 8) + 16))(v237, v16, v8);
      v230 = *(void (**)(char *, void *))(v238 + 8);
      v230(v16, v8);
      uint64_t v19 = v233;
      uint64_t v54 = v219;
      if (v69) {
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v19 = v233;
      if (v64 < 64)
      {
        uint64_t v62 = v237;
        uint64_t v73 = v238;
        uint64_t v16 = v232;
        (*(void (**)(char *, uint64_t (*)(void, void, void), void *))(v238 + 16))(v232, (uint64_t (*)(void, void, void))v237, v8);
        uint64_t v74 = (*(uint64_t (**)(void *, uint64_t))(v6 + 120))(v8, v6);
        v230 = *(void (**)(char *, void *))(v73 + 8);
        v230(v16, v8);
        uint64_t v54 = v219;
        if (v74 < v220) {
          goto LABEL_22;
        }
      }
      else
      {
        uint64_t v82 = v238;
        uint64_t v83 = (*(uint64_t (**)(char *, void, void *))(v238 + 16))(v16, v237, v8);
        if (v220 <= 0) {
          goto LABEL_25;
        }
        int64_t v242 = v220;
        uint64_t v86 = *(void (**)(int64_t *, ValueMetadata *, unint64_t, void *, uint64_t))(v6 + 96);
        unint64_t v87 = lazy protocol witness table accessor for type Int and conformance Int(v83, v84, v85);
        uint64_t v88 = v232;
        v86(&v242, &type metadata for Int, v87, v8, v6);
        char v89 = (*(uint64_t (**)(char *, char *, void *))(*(void *)(*(void *)(v6 + 32) + 8) + 16))(v16, v88, v8);
        uint64_t v90 = *(void (**)(char *, void *))(v238 + 8);
        v90(v88, v8);
        v230 = v90;
        v90(v16, v8);
        uint64_t v54 = v219;
        uint64_t v62 = v237;
        if (v89) {
          goto LABEL_22;
        }
      }
    }
LABEL_26:
    uint64_t v94 = v240(a2, v19);
    char v95 = v54(v8, v6);
    v209[1] = v6 + 128;
    uint64_t v96 = v222(v8, v6);
    if (v95)
    {
      if (v96 > 64)
      {
        int64_t v242 = v94;
        uint64_t v99 = *(void (**)(int64_t *, ValueMetadata *, unint64_t, void *, uint64_t))(v6 + 96);
        unint64_t v100 = lazy protocol witness table accessor for type Int and conformance Int(v96, v97, v98);
        uint64_t v101 = v232;
        v99(&v242, &type metadata for Int, v100, v8, v6);
        char v102 = (*(uint64_t (**)(char *, void, void *))(*(void *)(*(void *)(v6 + 32) + 8) + 16))(v101, v62, v8);
        uint64_t v103 = v238;
        v230(v101, v8);
        uint64_t v104 = v217;
        if ((v102 & 1) == 0)
        {
          uint64_t v105 = v6;
          uint64_t v107 = *(void *)(v103 + 16);
          uint64_t v106 = v103 + 16;
          uint64_t v220 = v107;
          goto LABEL_38;
        }
        goto LABEL_46;
      }
      uint64_t v106 = v238 + 16;
      unint64_t v110 = v232;
      uint64_t v220 = *(void *)(v238 + 16);
      ((void (*)(char *, void, void *))v220)(v232, v62, v8);
      uint64_t v111 = (*(uint64_t (**)(void *, uint64_t))(v6 + 120))(v8, v6);
      v230(v110, v8);
      uint64_t v104 = v217;
      if (v94 < v111) {
        goto LABEL_46;
      }
    }
    else if (v96 > 63)
    {
      uint64_t v106 = v238 + 16;
      uint64_t v112 = v211;
      uint64_t v220 = *(void *)(v238 + 16);
      uint64_t v113 = ((uint64_t (*)(char *, void, void *))v220)(v211, v237, v8);
      if (v94 < 0)
      {
        v230(v112, v8);
        goto LABEL_46;
      }
      int64_t v242 = v94;
      unint64_t v116 = *(void (**)(int64_t *, ValueMetadata *, unint64_t, void *, uint64_t))(v6 + 96);
      unint64_t v117 = lazy protocol witness table accessor for type Int and conformance Int(v113, v114, v115);
      unint64_t v118 = v232;
      v116(&v242, &type metadata for Int, v117, v8, v6);
      char v119 = (*(uint64_t (**)(char *, char *, void *))(*(void *)(*(void *)(v6 + 32) + 8) + 16))(v118, v112, v8);
      unint64_t v120 = v230;
      v230(v118, v8);
      v120(v112, v8);
      uint64_t v104 = v217;
      if (v119)
      {
LABEL_46:
        uint64_t v19 = v233;
        uint64_t v93 = v240(a2, v233);
        goto LABEL_73;
      }
    }
    else
    {
      uint64_t v106 = v238 + 16;
      uint64_t v108 = v232;
      uint64_t v220 = *(void *)(v238 + 16);
      ((void (*)(char *, void, void *))v220)(v232, v237, v8);
      uint64_t v109 = (*(uint64_t (**)(void *, uint64_t))(v6 + 120))(v8, v6);
      v230(v108, v8);
      uint64_t v104 = v217;
      if (v94 < v109) {
        goto LABEL_46;
      }
    }
    uint64_t v105 = v6;
LABEL_38:
    v211 = (char *)(v106 & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000);
    unint64_t v121 = v218;
    unint64_t v122 = (void (*)(char *, char *, void *))v220;
    ((void (*)(char *, void, void *))v220)(v218, v237, v8);
    char v123 = v219(v8, v105);
    uint64_t v124 = v216;
    v122(v216, v121, v8);
    if ((v123 & 1) == 0)
    {
      char v125 = v222;
      v230(v124, v8);
      uint64_t v128 = v105;
      goto LABEL_60;
    }
    char v125 = v222;
    uint64_t v126 = v222(v8, v105);
    int64_t v127 = (void (*)(char *, char *, uint64_t))(v238 + 8);
    v230(v124, v8);
    uint64_t v128 = v105;
    if (v126 <= 64) {
      goto LABEL_60;
    }
    v129 = v210;
    ((void (*)(char *, char *, void *))v220)(v210, v218, v8);
    int64_t v242 = 0x8000000000000000;
    BOOL v130 = v219;
    if (v219(v8, v105))
    {
      char v125 = v222;
      uint64_t v131 = v222(v8, v105);
      uint64_t v128 = v105;
      if (v131 < 64)
      {
        Swift::String::Index v134 = v232;
        ((void (*)(char *, char *, void *))v220)(v232, v129, v8);
        uint64_t v135 = (*(uint64_t (**)(void *, uint64_t))(v128 + 120))(v8, v128);
        Swift::String::Index v136 = v129;
        Swift::String::Index v137 = (void (*)(uint64_t, void *))v230;
        v230(v134, v8);
        if (v135 < v242) {
          goto LABEL_90;
        }
        goto LABEL_59;
      }
      char v146 = *(void (**)(int64_t *, ValueMetadata *, unint64_t, void *, uint64_t))(v105 + 96);
      unint64_t v147 = lazy protocol witness table accessor for type Int and conformance Int(v131, v132, v133);
      unint64_t v148 = v232;
      v146(&v242, &type metadata for Int, v147, v8, v128);
      Swift::String::Index v136 = v210;
      char v149 = (*(uint64_t (**)(char *, char *, void *))(*(void *)(*(void *)(v128 + 32) + 8) + 16))(v210, v148, v8);
      Swift::String::Index v137 = (void (*)(uint64_t, void *))v230;
      v230(v148, v8);
      if (v149) {
LABEL_90:
      }
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Not enough bits to represent a signed value", 43, 2, "Swift/Integers.swift", 20, 2, 0xE61uLL, 0);
    }
    else
    {
      v237 = v127;
      char v138 = v130(v8, v105);
      uint64_t v139 = v222(v8, v105);
      uint64_t v128 = v105;
      if (v138)
      {
        if (v139 <= 64)
        {
          Swift::Int v152 = v129;
          v153 = v214;
          Swift::String::Index v154 = AssociatedTypeWitness;
          uint64_t v155 = swift_getAssociatedConformanceWitness((uint64_t)v214, (uint64_t)v8, (uint64_t)AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
          Swift::String::Index v156 = v212;
          (*(void (**)(void *, uint64_t, const char *, uint64_t))(v155 + 8))(&unk_18162B0B8, 256, v154, v155);
          Swift::String::Index v157 = v232;
          ((void (*)(char *, void *, int **))v153[3])(v156, v8, v153);
          LOBYTE(v154) = (*(uint64_t (**)(char *, char *, void *))(*(void *)(*(void *)(v105 + 32) + 8)
                                                                             + 16))(v152, v157, v8);
          Swift::String::Index v137 = (void (*)(uint64_t, void *))v230;
          v230(v157, v8);
          uint64_t v158 = v209[0];
          ((void (*)(void, char *, void *))v220)(v209[0], v152, v8);
          char v125 = v222;
          if (v154)
          {
            v137(v158, v8);
            goto LABEL_90;
          }
          int64_t v159 = v242;
          uint64_t v160 = (*(uint64_t (**)(void *, uint64_t))(v105 + 120))(v8, v105);
          v137(v158, v8);
          Swift::String::Index v136 = v210;
          if (v160 < v159) {
            goto LABEL_90;
          }
        }
        else
        {
          unint64_t v142 = *(void (**)(int64_t *, ValueMetadata *, unint64_t, void *, uint64_t))(v105 + 96);
          unint64_t v143 = lazy protocol witness table accessor for type Int and conformance Int(v139, v140, v141);
          unint64_t v144 = v232;
          v142(&v242, &type metadata for Int, v143, v8, v128);
          Swift::String::Index v136 = v210;
          char v145 = (*(uint64_t (**)(char *, char *, void *))(*(void *)(*(void *)(v128 + 32) + 8) + 16))(v210, v144, v8);
          Swift::String::Index v137 = (void (*)(uint64_t, void *))v230;
          v230(v144, v8);
          char v125 = v222;
          if (v145) {
            goto LABEL_90;
          }
        }
      }
      else if (v139 < 64)
      {
        unint64_t v150 = v232;
        ((void (*)(char *, char *, void *))v220)(v232, v129, v8);
        uint64_t v151 = (*(uint64_t (**)(void *, uint64_t))(v105 + 120))(v8, v105);
        Swift::String::Index v136 = v129;
        Swift::String::Index v137 = (void (*)(uint64_t, void *))v230;
        v230(v150, v8);
        char v125 = v222;
        if (v151 < v242) {
          goto LABEL_90;
        }
      }
      else
      {
        char v125 = v222;
        Swift::String::Index v136 = v129;
        Swift::String::Index v137 = (void (*)(uint64_t, void *))v230;
      }
    }
LABEL_59:
    v137((uint64_t)v136, v8);
    uint64_t v104 = v217;
LABEL_60:
    uint64_t v161 = v218;
    uint64_t v162 = v125(v8, v128);
    ((void (*)(char *, char *, void *))v220)(v104, v161, v8);
    if (v162 < 65)
    {
      uint64_t v165 = v125(v8, v128);
      v230(v104, v8);
      long long v163 = v215;
      if (v165 != 64) {
        goto LABEL_72;
      }
      unint64_t v164 = v219;
      if (v219(v8, v128)) {
        goto LABEL_72;
      }
    }
    else
    {
      v230(v104, v8);
      long long v163 = v215;
      unint64_t v164 = v219;
    }
    ((void (*)(char *, char *, void *))v220)(v163, v218, v8);
    int64_t v242 = 0x7FFFFFFFFFFFFFFFLL;
    char v166 = v164(v8, v128);
    uint64_t v167 = v222(v8, v128);
    if (v166)
    {
      if (v167 > 64)
      {
        uint64_t v170 = *(void (**)(int64_t *, ValueMetadata *, unint64_t, void *, uint64_t))(v128 + 96);
        unint64_t v171 = lazy protocol witness table accessor for type Int and conformance Int(v167, v168, v169);
        uint64_t v172 = &v242;
LABEL_70:
        uint64_t v175 = v232;
        v170(v172, &type metadata for Int, v171, v8, v128);
        char v176 = (*(uint64_t (**)(char *, char *, void *))(*(void *)(*(void *)(v128 + 32) + 8) + 16))(v175, v163, v8);
        Swift::String v177 = v230;
        v230(v175, v8);
        if (v176) {
          goto LABEL_88;
        }
        v177(v163, v8);
        goto LABEL_72;
      }
    }
    else if (v167 > 63)
    {
      uint64_t v241 = 0x7FFFFFFFFFFFFFFFLL;
      uint64_t v170 = *(void (**)(int64_t *, ValueMetadata *, unint64_t, void *, uint64_t))(v128 + 96);
      unint64_t v171 = lazy protocol witness table accessor for type Int and conformance Int(v167, v168, v169);
      uint64_t v172 = &v241;
      goto LABEL_70;
    }
    uint64_t v173 = v232;
    ((void (*)(char *, char *, void *))v220)(v232, v163, v8);
    (*(void (**)(void *, uint64_t))(v128 + 120))(v8, v128);
    uint64_t v174 = v230;
    v230(v173, v8);
    v174(v163, v8);
LABEL_72:
    unint64_t v178 = v218;
    uint64_t v93 = (*(uint64_t (**)(void *, uint64_t))(v128 + 120))(v8, v128);
    v230(v178, v8);
    uint64_t v19 = v233;
    goto LABEL_73;
  }
  uint64_t v56 = v237;
  v222 = *(uint64_t (**)(void *, uint64_t))(v6 + 128);
  uint64_t v57 = v222(v8, v6);
  if (v57 >= 64)
  {
    int64_t v242 = v220;
    uint64_t v70 = *(void (**)(int64_t *, ValueMetadata *, unint64_t, void *, uint64_t))(v6 + 96);
    unint64_t v71 = lazy protocol witness table accessor for type Int and conformance Int(v57, v58, v59);
    uint64_t v16 = v232;
    v70(&v242, &type metadata for Int, v71, v8, v6);
    char v72 = (*(uint64_t (**)(void, char *, void *))(*(void *)(*(void *)(v6 + 32) + 8) + 16))(v56, v16, v8);
    v230 = *(void (**)(char *, void *))(v238 + 8);
    v230(v16, v8);
    uint64_t v62 = v56;
    uint64_t v19 = v233;
    if (v72) {
      goto LABEL_22;
    }
    goto LABEL_26;
  }
  uint64_t v60 = v238;
  uint64_t v16 = v232;
  (*(void (**)(char *, uint64_t (*)(void, void, void), void *))(v238 + 16))(v232, (uint64_t (*)(void, void, void))v56, v8);
  uint64_t v61 = (*(uint64_t (**)(void *, uint64_t))(v6 + 120))(v8, v6);
  v230 = *(void (**)(char *, void *))(v60 + 8);
  v230(v16, v8);
  uint64_t v62 = v56;
  uint64_t v19 = v233;
  if (v61 >= v220) {
    goto LABEL_26;
  }
LABEL_22:
  uint64_t v82 = a2;
  uint64_t v92 = v240(a2, v19);
  uint64_t v93 = -v92;
  if (__OFSUB__(0, v92))
  {
    __break(1u);
LABEL_25:
    v230 = *(void (**)(char *, void *))(v82 + 8);
    v230(v16, v8);
    uint64_t v54 = v219;
    uint64_t v62 = v237;
    goto LABEL_26;
  }
LABEL_73:
  unint64_t v179 = *(void (**)(char *, char *, uint64_t))(v235 + 32);
  v179(v239, v228, a2);
  uint64_t v6 = v229;
  char v180 = (*(uint64_t (**)(uint64_t, uint64_t))(v229 + 64))(a2, v229);
  v237 = v179;
  uint64_t v238 = v93;
  if (v180)
  {
    uint64_t v181 = v240(a2, v19);
    if (!__OFSUB__(v181, 1))
    {
      int64_t v242 = v181 - 1;
      v184 = *(void (**)(int64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v6 + 96);
      unint64_t v185 = lazy protocol witness table accessor for type Int and conformance Int(v181, v182, v183);
      uint64_t v186 = v231;
      v184(&v242, &type metadata for Int, v185, a2, v6);
      uint64_t v19 = v233;
      (*((void (**)(char *, char *, uint64_t, char *))v233 + 25))(v239, v186, a2, v233);
      uint64_t v187 = v235;
      uint64_t v188 = v227;
      (*(void (**)(char *, uint64_t))(v235 + 8))(v186, a2);
      v189 = v226;
      uint64_t v190 = swift_getAssociatedConformanceWitness((uint64_t)v188, a2, (uint64_t)v226, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
      v191 = v224;
      goto LABEL_77;
    }
    __break(1u);
LABEL_88:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Not enough bits to represent the passed value", 45, 2, "Swift/Integers.swift", 20, 2, 0xE67uLL, 0);
  }
  uint64_t v192 = v226;
  uint64_t v188 = v227;
  uint64_t v190 = swift_getAssociatedConformanceWitness((uint64_t)v227, a2, (uint64_t)v226, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
  v191 = v224;
  (*(void (**)(void *, uint64_t, const char *, uint64_t))(v190 + 8))(&unk_18162B0B8, 256, v192, v190);
  ((void (*)(char *, uint64_t, int **))v188[3])(v191, a2, v188);
  v189 = v192;
  uint64_t v187 = v235;
LABEL_77:
  (*(void (**)(void *, uint64_t, const char *, uint64_t))(v190 + 8))(&unk_18162B0B8, 256, v189, v190);
  uint64_t v51 = v225;
  ((void (*)(char *, uint64_t, int **))v188[3])(v191, a2, v188);
  uint64_t v8 = *(void **)(v187 + 8);
  uint64_t v24 = v238;
  if ((v238 & 0x8000000000000000) == 0)
  {
    ((void (*)(char *, uint64_t))v8)(v234, a2);
    if (v24 < v240(a2, v19))
    {
      uint64_t v193 = ((uint64_t (*)(char *, uint64_t))v8)(v51, a2);
      int64_t v242 = v24;
      v194 = *(void (**)(int64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v6 + 96);
      unint64_t v197 = lazy protocol witness table accessor for type Int and conformance Int(v193, v195, v196);
      v198 = v231;
      v194(&v242, &type metadata for Int, v197, a2, v6);
      v199 = v239;
      (*((void (**)(char *, char *, uint64_t, char *))v19 + 27))(v239, v198, a2, v19);
LABEL_80:
      ((void (*)(char *, uint64_t))v8)(v198, a2);
      return ((uint64_t (*)(char *, uint64_t))v8)(v199, a2);
    }
    ((void (*)(char *, uint64_t))v8)(v239, a2);
    uint64_t v207 = v223;
    v208 = v51;
    return ((uint64_t (*)(uint64_t, char *, uint64_t))v237)(v207, v208, a2);
  }
LABEL_82:
  ((void (*)(char *, uint64_t))v8)(v51, a2);
  uint64_t v201 = v240(a2, v19);
  if (__OFSUB__(0, v201))
  {
    __break(1u);
  }
  else if (-v201 < v24)
  {
    uint64_t v202 = ((uint64_t (*)(char *, uint64_t))v8)(v234, a2);
    int64_t v242 = -v24;
    v203 = *(void (**)(int64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v6 + 96);
    unint64_t v206 = lazy protocol witness table accessor for type Int and conformance Int(v202, v204, v205);
    v198 = v231;
    v203(&v242, &type metadata for Int, v206, a2, v6);
    v199 = v239;
    (*((void (**)(char *, char *, uint64_t, char *))v19 + 25))(v239, v198, a2, v19);
    goto LABEL_80;
  }
  ((void (*)(char *, uint64_t))v8)(v239, a2);
  uint64_t v207 = v223;
  v208 = v234;
  return ((uint64_t (*)(uint64_t, char *, uint64_t))v237)(v207, v208, a2);
}

unint64_t _makeNativeBridgeObject(_:_:)(unint64_t a1, uint64_t a2)
{
  unint64_t v2 = a1 | a2;
  swift_unknownObjectRetain((id)a1);
  return v2;
}

uint64_t _makeObjCBridgeObject(_:)(unint64_t a1)
{
  uint64_t v1 = ~(a1 >> 1) & 0x4000000000000000 | a1;
  swift_unknownObjectRetain((id)a1);
  return v1;
}

unint64_t _BridgeStorage.init(taggedPayload:)(uint64_t a1)
{
  return a1 | 0x8000000000000000;
}

unint64_t _bridgeObject(taggingPayload:)(uint64_t a1)
{
  return a1 | 0x8000000000000000;
}

uint64_t static _BridgeStorage.flagMask.getter()
{
  return 1;
}

unint64_t _bridgeObjectTaggedPointerBits.getter()
{
  return 0x8000000000000000;
}

unint64_t _objCTaggedPointerBits.getter()
{
  return 0x8000000000000000;
}

uint64_t _objectPointerIsObjCBit.getter()
{
  return 0x4000000000000000;
}

uint64_t _BridgeStorage.isObjC.getter(uint64_t a1)
{
  if (a1 < 0) {
    return 1;
  }
  else {
    return ((unint64_t)a1 >> 62) & 1;
  }
}

uint64_t _nonPointerBits(_:)(uint64_t a1)
{
  return a1 & 0x7000000000000007;
}

BOOL _isUnique_native<A>(_:)(uint64_t *a1)
{
  return swift_isUniquelyReferenced_nonNull_native(*a1);
}

unint64_t *ManagedBufferPointer.init(_uncheckedBufferClass:minimumCapacity:)(unint64_t *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(a3 - 8);
  uint64_t v5 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = (v5 + 16) & ~v5;
  uint64_t v7 = *(void *)(v4 + 64);
  BOOL v8 = __OFADD__(v6, v7);
  uint64_t v9 = v6 + v7;
  if (v8)
  {
    __break(1u);
    goto LABEL_11;
  }
  uint64_t v10 = *(void *)(a4 - 8);
  unint64_t v11 = *(unsigned __int8 *)(v10 + 80) + 1;
  BOOL v12 = __CFADD__(v9, v11);
  uint64_t v13 = v9 + v11;
  if (v12)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  uint64_t v14 = *(void *)(v10 + 72);
  uint64_t v15 = a2 * v14;
  if ((unsigned __int128)(a2 * (__int128)v14) >> 64 != (a2 * v14) >> 63)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  uint64_t v16 = (v13 - 1) & -(uint64_t)v11;
  if (__OFADD__(v16, v15))
  {
LABEL_13:
    __break(1u);
    return result;
  }
  unint64_t v17 = v5 + 1;
  if (v11 > v17) {
    unint64_t v17 = *(unsigned __int8 *)(v10 + 80) + 1;
  }
  if (v17 <= 8) {
    unint64_t v17 = 8;
  }
  return swift_bufferAllocate(result, v16 + v15, v17 - 1);
}

uint64_t (*ManagedBufferPointer.header.read())(void, void)
{
  return EnumeratedSequence._base.modify;
}

uint64_t (*ManagedBufferPointer.header.modify())(void, void)
{
  return EnumeratedSequence._base.modify;
}

Swift::UInt __swiftcall _roundUpImpl(_:toAlignment:)(Swift::UInt _, Swift::Int toAlignment)
{
  if (!__CFADD__(_, toAlignment)) {
    return (_ + toAlignment - 1) & -toAlignment;
  }
  __break(1u);
  return _;
}

Swift::Bool __swiftcall _isPowerOf2(_:)(Swift::Int a1)
{
  return a1 >= 1 && (a1 & (a1 - 1)) == 0;
}

uint64_t static UInt.+ infix(_:_:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = __CFADD__(a1, a2);
  uint64_t result = a1 + a2;
  if (v2) {
    __break(1u);
  }
  return result;
}

Swift::UInt __swiftcall _roundUp(_:toAlignment:)(Swift::UInt _, Swift::Int toAlignment)
{
  if (!__CFADD__(_, toAlignment)) {
    return (_ + toAlignment - 1) & -toAlignment;
  }
  __break(1u);
  return _;
}

Swift::Int __swiftcall _roundUp(_:toAlignment:)(Swift::Int _, Swift::Int toAlignment)
{
  if (!__CFADD__(_, toAlignment)) {
    return (_ + toAlignment - 1) & -toAlignment;
  }
  __break(1u);
  return _;
}

uint64_t _canBeClass<A>(_:)()
{
  return 2;
}

id _reinterpretCastToAnyObject<A>(_:)(void **a1, uint64_t a2)
{
  if (*(void *)(*(void *)(a2 - 8) + 64) != 8) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't unsafeBitCast between types of different sizes", 52, 2, "Swift/Builtin.swift", 19, 2, 0x5FuLL, 0);
  }
  BOOL v2 = *a1;

  return swift_unknownObjectRetain(v2);
}

BOOL != infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return a1 != a2;
}

{
  return a1 != a2;
}

{
  BOOL v2;
  BOOL v3;

  BOOL v2 = (a1 | a2) == 0;
  uint64_t v3 = a1 == a2;
  if (!a2) {
    uint64_t v3 = a1 == 0;
  }
  if (a1) {
    BOOL v2 = v3;
  }
  return !v2;
}

uint64_t ~= infix<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 8))() & 1;
}

id unsafeDowncast<A>(_:to:)(void *a1, uint64_t a2, const char *a3)
{
  uint64_t v7 = a1;
  swift_unknownObjectRetain(a1);
  if (!swift_dynamicCast((char *)&v6, (unint64_t *)&v7, qword_1ECA06328, a3, 6uLL)) {
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "invalid unsafeDowncast", 22, 2, "Swift/Builtin.swift", 19, 2, 0x10DuLL, 0);
  }
  swift_unknownObjectRelease(v6);
  return swift_unknownObjectRetain(a1);
}

uint64_t _getUnsafePointerToStoredProperties(_:)(uint64_t a1)
{
  return a1 + 16;
}

uint64_t static MemoryLayout.alignment.getter(uint64_t a1)
{
  return *(unsigned __int8 *)(*(void *)(a1 - 8) + 80) + 1;
}

Swift::Int __swiftcall _minAllocationAlignment()()
{
  return 16;
}

uint64_t _class_getInstancePositiveExtentSize(_:)(uint64_t a1)
{
  _swift_getObjCClassInstanceExtents(a1);
  if (v1 < 0) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Not enough bits to represent the passed value", 45, 2, "Swift/Integers.swift", 20, 2, 0xE67uLL, 0);
  }
  return v1;
}

Swift::Bool __swiftcall _isValidAddress(_:)(Swift::UInt a1)
{
  return HIDWORD(a1) != 0;
}

BOOL static BinaryInteger.>= infix<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v87 = a1;
  uint64_t v88 = a2;
  uint64_t v82 = *(int ***)(*(void *)(a6 + 24) + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v82, a4, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, associated type descriptor for ExpressibleByIntegerLiteral.IntegerLiteralType);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v78 = (char *)&v73 - v10;
  uint64_t v77 = *(int ***)(*(void *)(a5 + 24) + 16);
  uint64_t v76 = swift_getAssociatedTypeWitness(0, v77, a3, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, associated type descriptor for ExpressibleByIntegerLiteral.IntegerLiteralType);
  uint64_t v11 = MEMORY[0x1F4188790](v76);
  uint64_t v75 = (char *)&v73 - v12;
  uint64_t v86 = *(void *)(a4 - 8);
  uint64_t v13 = MEMORY[0x1F4188790](v11);
  uint64_t v80 = (char *)&v73 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = MEMORY[0x1F4188790](v13);
  uint64_t v81 = (char *)&v73 - v16;
  uint64_t v17 = MEMORY[0x1F4188790](v15);
  uint64_t v84 = (char *)&v73 - v18;
  uint64_t v85 = *(void *)(a3 - 8);
  uint64_t v19 = MEMORY[0x1F4188790](v17);
  uint64_t v21 = (char *)&v73 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = MEMORY[0x1F4188790](v19);
  uint64_t v24 = (char *)&v73 - v23;
  MEMORY[0x1F4188790](v22);
  uint64_t v83 = (char *)&v73 - v25;
  uint64_t v26 = *(uint64_t (**)(uint64_t, uint64_t))(a5 + 64);
  int v27 = v26(a3, a5);
  if (((v27 ^ (*(unsigned int (**)(uint64_t, uint64_t))(a6 + 64))(a4, a6)) & 1) == 0)
  {
    uint64_t v39 = v87;
    uint64_t v40 = (*(uint64_t (**)(uint64_t, uint64_t))(a5 + 128))(a3, a5);
    uint64_t v41 = v88;
    BOOL v42 = v40 < (*(uint64_t (**)(uint64_t, uint64_t))(a6 + 128))(a4, a6);
    uint64_t v32 = v41;
    uint64_t v43 = v39;
    if (!v42)
    {
      uint64_t v46 = v84;
      (*(void (**)(char *, uint64_t, uint64_t))(v86 + 16))(v84, v32, a4);
      uint64_t v47 = v83;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t, uint64_t))(a5 + 96))(v46, a4, a6, a3, a5);
      char v36 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(void *)(*(void *)(a5 + 32) + 8) + 16))(v43, v47, a3);
      uint64_t v37 = *(void (**)(char *, uint64_t))(v85 + 8);
      uint64_t v38 = v47;
      goto LABEL_11;
    }
    uint64_t v44 = v83;
    (*(void (**)(char *, uint64_t, uint64_t))(v85 + 16))(v83, v39, a3);
    goto LABEL_10;
  }
  uint64_t v73 = v24;
  uint64_t v74 = v21;
  uint64_t v28 = v82;
  char v29 = v26(a3, a5);
  uint64_t v30 = v87;
  uint64_t v31 = (*(uint64_t (**)(uint64_t, uint64_t))(a5 + 128))(a3, a5);
  uint64_t v32 = v88;
  uint64_t v33 = (*(uint64_t (**)(uint64_t, uint64_t))(a6 + 128))(a4, a6);
  if ((v29 & 1) == 0)
  {
    if (v31 >= v33)
    {
      uint64_t v59 = AssociatedTypeWitness;
      uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness((uint64_t)v28, a4, (uint64_t)AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
      uint64_t v61 = v78;
      (*(void (**)(void *, uint64_t, const char *, uint64_t))(AssociatedConformanceWitness + 8))(&unk_18162B0B8, 256, v59, AssociatedConformanceWitness);
      uint64_t v62 = v84;
      ((void (*)(char *, uint64_t, int **))v28[3])(v61, a4, v28);
      LODWORD(v82) = (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(void *)(*(void *)(a6 + 32) + 8) + 40))(v32, v62, a4);
      uint64_t v63 = v30;
      uint64_t v64 = v86;
      uint64_t v65 = *(void (**)(char *, uint64_t))(v86 + 8);
      v65(v62, a4);
      uint64_t v66 = v85;
      uint64_t v67 = v74;
      (*(void (**)(char *, uint64_t, uint64_t))(v85 + 16))(v74, v63, a3);
      unint64_t v68 = v80;
      (*(void (**)(char *, uint64_t, uint64_t))(v64 + 16))(v80, v88, a4);
      if (v82)
      {
        char v69 = v83;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t, uint64_t))(a5 + 96))(v68, a4, a6, a3, a5);
        char v36 = (*(uint64_t (**)(char *, char *, uint64_t))(*(void *)(*(void *)(a5 + 32) + 8) + 16))(v67, v69, a3);
        uint64_t v70 = *(void (**)(char *, uint64_t))(v66 + 8);
        v70(v69, a3);
        v70(v67, a3);
      }
      else
      {
        v65(v68, a4);
        (*(void (**)(char *, uint64_t))(v66 + 8))(v67, a3);
        char v36 = 0;
      }
      return (v36 & 1) == 0;
    }
    uint64_t v44 = v83;
    (*(void (**)(char *, uint64_t, uint64_t))(v85 + 16))(v83, v30, a3);
LABEL_10:
    uint64_t v45 = v84;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t, uint64_t))(a6 + 96))(v44, a3, a5, a4, a6);
    char v36 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(*(void *)(a6 + 32) + 8) + 16))(v45, v32, a4);
    (*(void (**)(char *, uint64_t))(v86 + 8))(v45, a4);
    return (v36 & 1) == 0;
  }
  if (v33 < v31)
  {
    uint64_t v34 = v84;
    (*(void (**)(char *, uint64_t, uint64_t))(v86 + 16))(v84, v32, a4);
    uint64_t v35 = v83;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t, uint64_t))(a5 + 96))(v34, a4, a6, a3, a5);
    char v36 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(void *)(*(void *)(a5 + 32) + 8) + 16))(v30, v35, a3);
    uint64_t v37 = *(void (**)(char *, uint64_t))(v85 + 8);
    uint64_t v38 = v35;
LABEL_11:
    v37(v38, a3);
    return (v36 & 1) == 0;
  }
  uint64_t v49 = v76;
  int v50 = v77;
  uint64_t v51 = swift_getAssociatedConformanceWitness((uint64_t)v77, a3, (uint64_t)v76, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
  uint64_t v52 = v75;
  (*(void (**)(void *, uint64_t, const char *, uint64_t))(v51 + 8))(&unk_18162B0B8, 256, v49, v51);
  uint64_t v53 = v83;
  ((void (*)(char *, uint64_t, int **))v50[3])(v52, a3, v50);
  LOBYTE(v49) = (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(void *)(*(void *)(a5 + 32) + 8) + 16))(v30, v53, a3);
  uint64_t v54 = v85;
  char v55 = *(void (**)(char *, uint64_t))(v85 + 8);
  v55(v53, a3);
  uint64_t v56 = v73;
  (*(void (**)(void))(v54 + 16))();
  uint64_t v57 = v86;
  uint64_t v58 = v81;
  (*(void (**)(char *, uint64_t, uint64_t))(v86 + 16))(v81, v88, a4);
  if (v49)
  {
    (*(void (**)(char *, uint64_t))(v57 + 8))(v58, a4);
    v55(v56, a3);
    char v36 = 1;
  }
  else
  {
    unint64_t v71 = v84;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t, uint64_t))(a6 + 96))(v56, a3, a5, a4, a6);
    char v36 = (*(uint64_t (**)(char *, char *, uint64_t))(*(void *)(*(void *)(a6 + 32) + 8) + 16))(v71, v58, a4);
    char v72 = *(void (**)(char *, uint64_t))(v57 + 8);
    v72(v71, a4);
    v72(v58, a4);
  }
  return (v36 & 1) == 0;
}

uint64_t _objectPointerSpareBits.getter()
{
  return 0x7000000000000007;
}

BOOL static Int32.< infix(_:_:)(int a1, int a2)
{
  return a1 < a2;
}

unint64_t _isTaggedObject(_:)(unint64_t a1)
{
  return a1 >> 63;
}

BOOL _isNativePointer(_:)(unint64_t a1)
{
  return a1 >> 62 == 0;
}

BOOL _isNonTaggedObjCPointer(_:)(uint64_t a1)
{
  return a1 >= 0 && (unint64_t)a1 >> 62 != 0;
}

uint64_t _getNonTagBits(_:)(uint64_t a1)
{
  return a1 & 0x7FFFFFFFFFFFFFFFLL;
}

uint64_t _bridgeObject(fromNonTaggedObjC:)(unint64_t a1)
{
  uint64_t v1 = ~(a1 >> 1) & 0x4000000000000000 | a1;
  swift_unknownObjectRetain((id)a1);
  return v1;
}

id _bridgeObject(toNonTaggedObjC:)(uint64_t a1)
{
  if (a1 >= 0) {
    a1 &= 0xFFFFFFFFFFFFFF8uLL;
  }
  return swift_unknownObjectRetain((id)a1);
}

uint64_t _bridgeObject(toTagPayload:)(uint64_t a1)
{
  return a1 & 0x7FFFFFFFFFFFFFFFLL;
}

uint64_t _nativeObject(fromBridge:)(int64_t a1)
{
  if (a1 < 0) {
    uint64_t v1 = a1;
  }
  else {
    uint64_t v1 = a1 & 0xFFFFFFFFFFFFFF8;
  }
  swift_bridgeObjectRetain(a1);
  return v1;
}

unint64_t _makeBridgeObject(_:_:)(unint64_t a1, uint64_t a2)
{
  unint64_t v2 = a1 | a2;
  swift_unknownObjectRetain((id)a1);
  return v2;
}

swift *_getSuperclass(_:)(uint64_t *a1)
{
  if (swift_isClassType(a1)) {
    uint64_t result = (swift *)a1;
  }
  else {
    uint64_t result = 0;
  }
  if (result)
  {
    return (swift *)_swift_class_getSuperclass(result);
  }
  return result;
}

BOOL _isPOD<A>(_:)(uint64_t a1, uint64_t a2)
{
  return (*(unsigned char *)(*(void *)(a2 - 8) + 82) & 1) == 0;
}

BOOL _isBitwiseTakable<A>(_:)(uint64_t a1, uint64_t a2)
{
  return (*(unsigned char *)(*(void *)(a2 - 8) + 82) & 0x10) == 0;
}

BOOL _isOptional<A>(_:)(void *a1)
{
  return swift_isOptionalType(a1);
}

atomic_ullong *_unsafeDowncastToAnyObject(fromAny:)(void *a1)
{
  uint64_t v1 = (uint64_t *)a1[3];
  unint64_t v2 = (id *)__swift_project_boxed_opaque_existential_0Tm(a1, (uint64_t)v1);
  BOOL isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType((uint64_t)v1, v1);
  if (isClassOrObjCExistentialType)
  {
    if (*(void *)(*(v1 - 1) + 64) != 8) {
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't unsafeBitCast between types of different sizes", 52, 2, "Swift/Builtin.swift", 19, 2, 0x5FuLL, 0);
    }
    return (atomic_ullong *)swift_unknownObjectRetain(*v2);
  }
  else
  {
    MEMORY[0x1F4188790](isClassOrObjCExistentialType);
    id v6 = (id *)((char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(id *, id *, uint64_t *))(v7 + 16))(v6, v2, v1);
    return _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(v6, v1);
  }
}

Builtin::Int1 __swiftcall _trueAfterDiagnostics()()
{
  return 1;
}

uint64_t StaticString.utf8Start.getter(uint64_t result, uint64_t a2, char a3)
{
  if (a3) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "StaticString should have pointer representation", 47, 2, "Swift/StaticString.swift", 24, 2, 0x85uLL, 0);
  }
  if (!result) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/StaticString.swift", 24, 2, 0x88uLL, 0);
  }
  return result;
}

Swift::Float __swiftcall _nearbyint(_:)(Swift::Float a1)
{
  return nearbyintf(a1);
}

Swift::Float __swiftcall _rint(_:)(Swift::Float a1)
{
  return rintf(a1);
}

Swift::Double __swiftcall _nearbyint(_:)(Swift::Double a1)
{
  return nearbyint(a1);
}

Swift::Double __swiftcall _rint(_:)(Swift::Double a1)
{
  return rint(a1);
}

uint64_t Character._str.getter(uint64_t a1, unint64_t a2)
{
  return a1;
}

void Character._str.setter(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease(v2[1]);
  *unint64_t v2 = a1;
  v2[1] = a2;
}

uint64_t (*Character._str.modify())(void, void)
{
  return EnumeratedSequence._base.modify;
}

Swift::String __swiftcall Character.init(_:)(Swift::Unicode::Scalar a1)
{
  uint64_t v1 = specialized Unicode.Scalar.withUTF8CodeUnits<A>(_:)(a1._value);
  result._unint64_t object = v2;
  result._uint64_t countAndFlagsBits = v1;
  return result;
}

Swift::String __swiftcall String.init(_:)(Swift::Unicode::Scalar a1)
{
  uint64_t v1 = specialized Unicode.Scalar.withUTF8CodeUnits<A>(_:)(a1._value);
  result._unint64_t object = v2;
  result._uint64_t countAndFlagsBits = v1;
  return result;
}

uint64_t Character.init(_builtinUnicodeScalarLiteral:)(unsigned int a1)
{
  return specialized Unicode.Scalar.withUTF8CodeUnits<A>(_:)(a1);
}

Swift::String __swiftcall Character.init(_builtinExtendedGraphemeClusterLiteral:utf8CodeUnitCount:isASCII:)(Builtin::RawPointer _builtinExtendedGraphemeClusterLiteral, Builtin::Word utf8CodeUnitCount, Builtin::Int1 isASCII)
{
  if ((utf8CodeUnitCount & 0x8000000000000000) != 0) {
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeBufferPointer with negative count", 39, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x53FuLL, 0);
  }
  if (utf8CodeUnitCount)
  {
    if (utf8CodeUnitCount <= 0xF)
    {
      int64_t v7 = utf8CodeUnitCount - 8;
      Builtin::Word v8 = 8;
      if ((uint64_t)utf8CodeUnitCount < 8) {
        Builtin::Word v8 = utf8CodeUnitCount;
      }
      uint64_t v5 = *(unsigned __int8 *)_builtinExtendedGraphemeClusterLiteral;
      if (v8 != 1)
      {
        v5 |= (unint64_t)*((unsigned __int8 *)_builtinExtendedGraphemeClusterLiteral + 1) << 8;
        if (v8 != 2)
        {
          v5 |= (unint64_t)*((unsigned __int8 *)_builtinExtendedGraphemeClusterLiteral + 2) << 16;
          if (v8 != 3)
          {
            v5 |= (unint64_t)*((unsigned __int8 *)_builtinExtendedGraphemeClusterLiteral + 3) << 24;
            if (v8 != 4)
            {
              v5 |= (unint64_t)*((unsigned __int8 *)_builtinExtendedGraphemeClusterLiteral + 4) << 32;
              if (v8 != 5)
              {
                v5 |= (unint64_t)*((unsigned __int8 *)_builtinExtendedGraphemeClusterLiteral + 5) << 40;
                if (v8 != 6)
                {
                  v5 |= (unint64_t)*((unsigned __int8 *)_builtinExtendedGraphemeClusterLiteral + 6) << 48;
                  if (v8 != 7) {
                    v5 |= (unint64_t)*((unsigned __int8 *)_builtinExtendedGraphemeClusterLiteral + 7) << 56;
                  }
                }
              }
            }
          }
        }
      }
      uint64_t v9 = 0;
      if (utf8CodeUnitCount >= 9)
      {
        uint64_t v10 = 0;
        uint64_t v11 = (unsigned __int8 *)_builtinExtendedGraphemeClusterLiteral + 8;
        unint64_t v12 = v7 & ~(v7 >> 63);
        do
        {
          if (v12 <= utf8CodeUnitCount - 9) {
            _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Index out of range", 18, 2, "Swift/Range.swift", 17, 2, 0x131uLL, 0);
          }
          unsigned int v13 = *v11++;
          v9 |= (unint64_t)v13 << v10;
          v10 += 8;
          --v7;
        }
        while (v7);
      }
      unint64_t v14 = 0xA000000000000000;
      if (((v9 | v5) & 0x8080808080808080) == 0) {
        unint64_t v14 = 0xE000000000000000;
      }
      id v6 = (void *)(v14 | (utf8CodeUnitCount << 56) | v9);
    }
    else
    {
      Builtin::Word v4 = utf8CodeUnitCount | 0xC000000000000000;
      if (!isASCII) {
        Builtin::Word v4 = utf8CodeUnitCount;
      }
      uint64_t v5 = v4 | 0x1000000000000000;
      id v6 = (void *)(((unint64_t)_builtinExtendedGraphemeClusterLiteral + 0x7FFFFFFFFFFFFFE0) | 0x8000000000000000);
    }
  }
  else
  {
    uint64_t v5 = 0;
    id v6 = (void *)0xE000000000000000;
  }
  result._unint64_t object = v6;
  result._uint64_t countAndFlagsBits = v5;
  return result;
}

Swift::String __swiftcall String.init(_builtinExtendedGraphemeClusterLiteral:utf8CodeUnitCount:isASCII:)(Builtin::RawPointer _builtinExtendedGraphemeClusterLiteral, Builtin::Word utf8CodeUnitCount, Builtin::Int1 isASCII)
{
  if ((utf8CodeUnitCount & 0x8000000000000000) != 0) {
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeBufferPointer with negative count", 39, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x53FuLL, 0);
  }
  if (utf8CodeUnitCount)
  {
    if (utf8CodeUnitCount <= 0xF)
    {
      int64_t v7 = utf8CodeUnitCount - 8;
      Builtin::Word v8 = 8;
      if ((uint64_t)utf8CodeUnitCount < 8) {
        Builtin::Word v8 = utf8CodeUnitCount;
      }
      uint64_t v5 = *(unsigned __int8 *)_builtinExtendedGraphemeClusterLiteral;
      if (v8 != 1)
      {
        v5 |= (unint64_t)*((unsigned __int8 *)_builtinExtendedGraphemeClusterLiteral + 1) << 8;
        if (v8 != 2)
        {
          v5 |= (unint64_t)*((unsigned __int8 *)_builtinExtendedGraphemeClusterLiteral + 2) << 16;
          if (v8 != 3)
          {
            v5 |= (unint64_t)*((unsigned __int8 *)_builtinExtendedGraphemeClusterLiteral + 3) << 24;
            if (v8 != 4)
            {
              v5 |= (unint64_t)*((unsigned __int8 *)_builtinExtendedGraphemeClusterLiteral + 4) << 32;
              if (v8 != 5)
              {
                v5 |= (unint64_t)*((unsigned __int8 *)_builtinExtendedGraphemeClusterLiteral + 5) << 40;
                if (v8 != 6)
                {
                  v5 |= (unint64_t)*((unsigned __int8 *)_builtinExtendedGraphemeClusterLiteral + 6) << 48;
                  if (v8 != 7) {
                    v5 |= (unint64_t)*((unsigned __int8 *)_builtinExtendedGraphemeClusterLiteral + 7) << 56;
                  }
                }
              }
            }
          }
        }
      }
      uint64_t v9 = 0;
      if (utf8CodeUnitCount >= 9)
      {
        uint64_t v10 = 0;
        uint64_t v11 = (unsigned __int8 *)_builtinExtendedGraphemeClusterLiteral + 8;
        unint64_t v12 = v7 & ~(v7 >> 63);
        do
        {
          if (v12 <= utf8CodeUnitCount - 9) {
            _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Index out of range", 18, 2, "Swift/Range.swift", 17, 2, 0x131uLL, 0);
          }
          unsigned int v13 = *v11++;
          v9 |= (unint64_t)v13 << v10;
          v10 += 8;
          --v7;
        }
        while (v7);
      }
      unint64_t v14 = 0xA000000000000000;
      if (((v9 | v5) & 0x8080808080808080) == 0) {
        unint64_t v14 = 0xE000000000000000;
      }
      id v6 = (void *)(v14 | (utf8CodeUnitCount << 56) | v9);
    }
    else
    {
      Builtin::Word v4 = utf8CodeUnitCount | 0xC000000000000000;
      if (!isASCII) {
        Builtin::Word v4 = utf8CodeUnitCount;
      }
      uint64_t v5 = v4 | 0x1000000000000000;
      id v6 = (void *)(((unint64_t)_builtinExtendedGraphemeClusterLiteral + 0x7FFFFFFFFFFFFFE0) | 0x8000000000000000);
    }
  }
  else
  {
    uint64_t v5 = 0;
    id v6 = (void *)0xE000000000000000;
  }
  result._unint64_t object = v6;
  result._uint64_t countAndFlagsBits = v5;
  return result;
}

Swift::String __swiftcall Character.init(_:)(Swift::String a1)
{
  if (((uint64_t)a1._object & 0x2000000000000000) != 0) {
    uint64_t v1 = HIBYTE(a1._object) & 0xF;
  }
  else {
    uint64_t v1 = a1._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
  }
  if (!v1) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't form a Character from an empty String", 43, 2, "Swift/Character.swift", 21, 2, 0xAFuLL, 0);
  }
  unint64_t object = (unint64_t)a1._object;
  unint64_t countAndFlagsBits = a1._countAndFlagsBits;
  v4._Swift::UInt64 rawBits = _StringGuts.validateCharacterIndex(_:)((Swift::String::Index)15)._rawBits;
  if (String._uncheckedIndex(after:)(v4)._rawBits >> 14 != 4 * v1) {
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't form a Character from a String containing more than one extended grapheme cluster", 87, 2, "Swift/Character.swift", 21, 2, 0xB1uLL, 0);
  }
  if (!(object & 0x2000000000000000 | countAndFlagsBits & 0x1000000000000000))
  {
    unint64_t countAndFlagsBits = specialized static String._copying(_:)(countAndFlagsBits, object);
    unint64_t v8 = v7;
    swift_bridgeObjectRelease(object);
    unint64_t object = v8;
  }
  uint64_t v5 = countAndFlagsBits;
  id v6 = (void *)object;
  result._unint64_t object = v6;
  result._unint64_t countAndFlagsBits = v5;
  return result;
}

BOOL String.isEmpty.getter(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0) {
    uint64_t v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  return v2 == 0;
}

uint64_t String.startIndex.getter()
{
  return 15;
}

Swift::String::Index __swiftcall String.index(after:)(Swift::String::Index after)
{
  v1._Swift::UInt64 rawBits = _StringGuts.validateCharacterIndex(_:)(after)._rawBits;

  return String._uncheckedIndex(after:)(v1);
}

BOOL static String.Index.== infix(_:_:)(unint64_t a1, uint64_t a2)
{
  return (a2 ^ a1) < 0x4000;
}

unsigned __int8 *protocol witness for _ExpressibleByBuiltinExtendedGraphemeClusterLiteral.init(_builtinExtendedGraphemeClusterLiteral:utf8CodeUnitCount:isASCII:) in conformance Character@<X0>(unsigned __int8 *result@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t *a4@<X8>)
{
  if (a2 < 0) {
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeBufferPointer with negative count", 39, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x53FuLL, 0);
  }
  if (a2)
  {
    if ((unint64_t)a2 <= 0xF)
    {
      uint64_t v7 = a2 - 8;
      if (a2 >= 8) {
        uint64_t v8 = 8;
      }
      else {
        uint64_t v8 = a2;
      }
      uint64_t v5 = *result;
      if (v8 != 1)
      {
        v5 |= (unint64_t)result[1] << 8;
        if (v8 != 2)
        {
          v5 |= (unint64_t)result[2] << 16;
          if (v8 != 3)
          {
            v5 |= (unint64_t)result[3] << 24;
            if (v8 != 4)
            {
              v5 |= (unint64_t)result[4] << 32;
              if (v8 != 5)
              {
                v5 |= (unint64_t)result[5] << 40;
                if (v8 != 6)
                {
                  v5 |= (unint64_t)result[6] << 48;
                  if (v8 != 7) {
                    v5 |= (unint64_t)result[7] << 56;
                  }
                }
              }
            }
          }
        }
      }
      uint64_t v9 = 0;
      if ((unint64_t)a2 >= 9)
      {
        uint64_t v10 = 0;
        uint64_t v11 = result + 8;
        unint64_t v12 = v7 & ~(v7 >> 63);
        do
        {
          if (v12 <= a2 - 9) {
            _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Index out of range", 18, 2, "Swift/Range.swift", 17, 2, 0x131uLL, 0);
          }
          unsigned int v13 = *v11++;
          v9 |= (unint64_t)v13 << v10;
          v10 += 8;
          --v7;
        }
        while (v7);
      }
      unint64_t v14 = 0xA000000000000000;
      if (((v9 | v5) & 0x8080808080808080) == 0) {
        unint64_t v14 = 0xE000000000000000;
      }
      unint64_t v6 = v14 | (a2 << 56) | v9;
    }
    else
    {
      unint64_t v4 = a2 | 0xC000000000000000;
      if ((a3 & 1) == 0) {
        unint64_t v4 = a2;
      }
      uint64_t v5 = v4 | 0x1000000000000000;
      unint64_t v6 = (unint64_t)(result + 0x7FFFFFFFFFFFFFE0) | 0x8000000000000000;
    }
  }
  else
  {
    uint64_t v5 = 0;
    unint64_t v6 = 0xE000000000000000;
  }
  *a4 = v5;
  a4[1] = v6;
  return result;
}

uint64_t protocol witness for _ExpressibleByBuiltinUnicodeScalarLiteral.init(_builtinUnicodeScalarLiteral:) in conformance Character@<X0>(unsigned int a1@<W0>, uint64_t *a2@<X8>)
{
  uint64_t result = specialized Unicode.Scalar.withUTF8CodeUnits<A>(_:)(a1);
  *a2 = result;
  a2[1] = v4;
  return result;
}

void *protocol witness for ExpressibleByUnicodeScalarLiteral.init(unicodeScalarLiteral:) in conformance Character@<X0>(void *result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = result[1];
  *a2 = *result;
  a2[1] = v2;
  return result;
}

uint64_t ExpressibleByExtendedGraphemeClusterLiteral<>.init(unicodeScalarLiteral:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

uint64_t Character.description.getter(uint64_t a1, unint64_t a2)
{
  return a1;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Character()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain(v0[1]);
  return v1;
}

void protocol witness for LosslessStringConvertible.init(_:) in conformance Character(unint64_t a1@<X0>, unint64_t a2@<X1>, unint64_t *a3@<X8>)
{
  if ((a2 & 0x2000000000000000) != 0) {
    uint64_t v4 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v4 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (!v4) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't form a Character from an empty String", 43, 2, "Swift/Character.swift", 21, 2, 0xAFuLL, 0);
  }
  unint64_t v5 = a2;
  unint64_t v6 = a1;
  swift_bridgeObjectRetain(a2);
  v7._Swift::UInt64 rawBits = _StringGuts.validateCharacterIndex(_:)((Swift::String::Index)15)._rawBits;
  Swift::UInt64 rawBits = String._uncheckedIndex(after:)(v7)._rawBits;
  swift_bridgeObjectRelease(v5);
  if (rawBits >> 14 != 4 * v4) {
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't form a Character from a String containing more than one extended grapheme cluster", 87, 2, "Swift/Character.swift", 21, 2, 0xB1uLL, 0);
  }
  if (!(v5 & 0x2000000000000000 | v6 & 0x1000000000000000))
  {
    unint64_t v6 = specialized static String._copying(_:)(v6, v5);
    unint64_t v10 = v9;
    swift_bridgeObjectRelease(v5);
    unint64_t v5 = v10;
  }
  *a3 = v6;
  a3[1] = v5;
}

uint64_t String.debugDescription.getter(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = 34;
  uint64_t v4 = 0xE100000000000000;
  uint64_t v234 = 34;
  unint64_t v235 = 0xE100000000000000;
  uint64_t v5 = HIBYTE(a2) & 0xF;
  uint64_t v227 = a1;
  uint64_t v6 = a1 & 0xFFFFFFFFFFFFLL;
  if ((a2 & 0x2000000000000000) == 0) {
    uint64_t v5 = v6;
  }
  uint64_t v226 = v5;
  if (!v5)
  {
    unint64_t v167 = 0xE100000000000000;
LABEL_230:
    uint64_t v232 = 34;
    uint64_t v233 = 0xE100000000000000;
    uint64_t v188 = HIBYTE(v167) & 0xF;
    if ((v167 & 0x2000000000000000) == 0) {
      uint64_t v188 = v3 & 0xFFFFFFFFFFFFLL;
    }
    if (!v188)
    {
LABEL_263:
      swift_bridgeObjectRelease(v4);
      return v3;
    }
    while (1)
    {
      uint64_t v194 = v232;
      uint64_t v195 = v233;
      swift_bridgeObjectRetain(v233);
      unint64_t v196 = specialized Collection.first.getter(v194, v195);
      swift_bridgeObjectRelease(v195);
      if ((v196 & 0x100000000) != 0) {
        break;
      }
      uint64_t v230 = v3;
      unint64_t v231 = v167;
      uint64_t v234 = 0;
      unint64_t v235 = 0xE000000000000000;
      unint64_t v197 = specialized Unicode.Scalar.withUTF8CodeUnits<A>(_:)(v196);
      uint64_t v199 = v198;
      _StringGuts.append(_:)(v197, v198);
      swift_bridgeObjectRelease(v199);
      uint64_t v17 = v230;
      unint64_t v22 = v231;
      swift_bridgeObjectRetain_n(v231, 2);
      swift_bridgeObjectRelease(0xE000000000000000);
      uint64_t v200 = HIBYTE(v22) & 0xF;
      if ((v22 & 0x2000000000000000) == 0) {
        uint64_t v200 = v17;
      }
      if (((v22 >> 60) & ((v17 & 0x800000000000000) == 0)) != 0) {
        uint64_t v201 = 11;
      }
      else {
        uint64_t v201 = 7;
      }
      v202._Swift::UInt64 rawBits = v201 | (v200 << 16);
      swift_bridgeObjectRetain(v22);
      v203._Swift::UInt64 rawBits = String.index(before:)(v202)._rawBits;
      swift_bridgeObjectRelease(v22);
      v204._Swift::UInt64 rawBits = _StringGuts.validateInclusiveScalarIndex(_:)(v202)._rawBits;
      if (!(v204._rawBits >> 14)) {
        goto LABEL_268;
      }
      Swift::UInt64 rawBits = v204._rawBits;
      swift_bridgeObjectRelease(v22);
      if ((v22 & 0x1000000000000000) != 0)
      {
        Swift::UInt64 v210 = String.UnicodeScalarView._foreignIndex(before:)((Swift::String::Index)rawBits)._rawBits;
        swift_bridgeObjectRelease(v22);
      }
      else
      {
        if ((v22 & 0x2000000000000000) != 0)
        {
          uint64_t v207 = 0;
          uint64_t v230 = v17;
          unint64_t v231 = v22 & 0xFFFFFFFFFFFFFFLL;
          do
            int v209 = *(&v229 + (rawBits >> 16) + v207--) & 0xC0;
          while (v209 == 128);
        }
        else
        {
          if ((v17 & 0x1000000000000000) != 0) {
            unint64_t v206 = (char *)((v22 & 0xFFFFFFFFFFFFFFFLL) + 32);
          }
          else {
            unint64_t v206 = (char *)_StringObject.sharedUTF8.getter(v17, v22);
          }
          uint64_t v207 = 0;
          do
            int v208 = v206[(rawBits >> 16) - 1 + v207--] & 0xC0;
          while (v208 == 128);
        }
        swift_bridgeObjectRelease(v22);
        Swift::UInt64 v210 = (rawBits - -65536 * v207) & 0xFFFFFFFFFFFF0000 | 5;
      }
      if (v203._rawBits >> 14 >= v210 >> 14) {
        goto LABEL_261;
      }
      uint64_t v230 = v17;
      unint64_t v231 = v22;
      specialized RangeReplaceableCollection<>.removeLast()();
      swift_bridgeObjectRelease(0xE000000000000000);
      unsigned int v211 = specialized RangeReplaceableCollection<>.removeLast()();
      swift_bridgeObjectRelease(0xE000000000000000);
      uint64_t v234 = v230;
      unint64_t v235 = v231;
      Swift::String_optional v212 = Unicode.Scalar._escaped(asASCII:)(1);
      unint64_t object = v212.value._object;
      if (v212.value._object) {
        uint64_t countAndFlagsBits = v212.value._countAndFlagsBits;
      }
      else {
        uint64_t countAndFlagsBits = specialized Unicode.Scalar.withUTF8CodeUnits<A>(_:)(v211);
      }
      unint64_t v213 = (unint64_t)object;
      v191._Swift::UInt64 rawBits = 15;
      v192._Swift::UInt64 rawBits = 15;
      specialized String.UnicodeScalarView.replaceSubrange<A>(_:with:)(v191, v192, countAndFlagsBits, v213);
      swift_bridgeObjectRelease(v213);
      uint64_t v3 = v234;
      unint64_t v167 = v235;
      unint64_t v193 = HIBYTE(v235) & 0xF;
      if ((v235 & 0x2000000000000000) == 0) {
        unint64_t v193 = v234 & 0xFFFFFFFFFFFFLL;
      }
      if (!v193)
      {
        uint64_t v4 = v233;
        goto LABEL_263;
      }
    }
    unint64_t v221 = 839;
LABEL_274:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/String.swift", 18, 2, v221, 0);
  }
  uint64_t v7 = a2;
  uint64_t v8 = 0;
  uint64_t v223 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
  uint64_t v224 = a2 & 0xFFFFFFFFFFFFFFLL;
  char v9 = 1;
  while (1)
  {
    while (1)
    {
      if ((v7 & 0x1000000000000000) != 0)
      {
        Swift::tuple_Unicode_Scalar_scalarLength_Int v14 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)((Swift::String::Index)(v8 << 16));
        Swift::Int scalarLength = v14.scalarLength;
        unsigned int value = v14._0._value;
        goto LABEL_17;
      }
      if ((v7 & 0x2000000000000000) == 0)
      {
        unint64_t v10 = (unsigned __int8 *)v223;
        if ((v227 & 0x1000000000000000) == 0) {
          unint64_t v10 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v227, v7);
        }
        unsigned int value = v10[v8];
        if ((char)v10[v8] < 0)
        {
          switch(__clz(value ^ 0xFF))
          {
            case 0x1Au:
              unint64_t v12 = &v10[v8];
              goto LABEL_62;
            case 0x1Bu:
              unint64_t v117 = &v10[v8];
              goto LABEL_141;
            case 0x1Cu:
              unint64_t v118 = &v10[v8];
              goto LABEL_144;
            default:
              break;
          }
        }
LABEL_16:
        Swift::Int scalarLength = 1;
        goto LABEL_17;
      }
      uint64_t v232 = v227;
      uint64_t v233 = v224;
      unsigned int value = *((unsigned __int8 *)&v232 + v8);
      if ((*((char *)&v232 + v8) & 0x80000000) == 0) {
        goto LABEL_16;
      }
      switch(__clz(value ^ 0xFF))
      {
        case 0x1Au:
          unint64_t v12 = (unsigned __int8 *)&v232 + v8;
LABEL_62:
          unsigned int value = v12[1] & 0x3F | ((value & 0x1F) << 6);
          Swift::Int scalarLength = 2;
          break;
        case 0x1Bu:
          unint64_t v117 = (unsigned __int8 *)&v232 + v8;
LABEL_141:
          unsigned int value = ((value & 0xF) << 12) | ((v117[1] & 0x3F) << 6) | v117[2] & 0x3F;
          Swift::Int scalarLength = 3;
          break;
        case 0x1Cu:
          unint64_t v118 = (unsigned __int8 *)&v232 + v8;
LABEL_144:
          unsigned int value = ((value & 0xF) << 18) | ((v118[1] & 0x3F) << 12) | ((v118[2] & 0x3F) << 6) | v118[3] & 0x3F;
          Swift::Int scalarLength = 4;
          break;
        default:
          goto LABEL_16;
      }
LABEL_17:
      v8 += scalarLength;
      switch(value)
      {
        case '""':
          unint64_t v15 = 0xE200000000000000;
          uint64_t v16 = 8796;
          goto LABEL_23;
        case '\\':
          unint64_t v15 = 0xE200000000000000;
          uint64_t v16 = 23644;
          goto LABEL_23;
        case '\'':
          unint64_t v15 = 0xE200000000000000;
          uint64_t v16 = 10076;
          goto LABEL_23;
      }
      if (value - 127 <= 0xFFFFFFA0) {
        break;
      }
LABEL_87:
      uint64_t v228 = v8;
      uint64_t v83 = v234;
      unint64_t v84 = v235;
      if (v9)
      {
        LODWORD(v232) = 0;
        swift_bridgeObjectRetain(v235);
        unint64_t v85 = specialized BidirectionalCollection.last.getter(v83, v84);
        swift_bridgeObjectRelease(v84);
        if ((v85 & 0x100000000) != 0)
        {
          unint64_t v221 = 816;
          goto LABEL_274;
        }
        if (!_GraphemeBreakingState.shouldBreak(between:and:)((Swift::Unicode::Scalar)v85, (Swift::Unicode::Scalar)value))
        {
          Swift::String_optional v107 = Unicode.Scalar._escaped(asASCII:)(1);
          unint64_t v106 = (unint64_t)v107.value._object;
          if (v107.value._object) {
            uint64_t v108 = v107.value._countAndFlagsBits;
          }
          else {
            uint64_t v108 = specialized Unicode.Scalar.withUTF8CodeUnits<A>(_:)(value);
          }
          unint64_t v109 = v106;
          uint64_t v131 = HIBYTE(v84) & 0xF;
          if ((v84 & 0x2000000000000000) == 0) {
            uint64_t v131 = v83 & 0xFFFFFFFFFFFFLL;
          }
          if (!v131 && (v83 & ~v84 & 0x2000000000000000) == 0)
          {
            swift_bridgeObjectRelease(v84);
            uint64_t v234 = v108;
            unint64_t v235 = v109;
            goto LABEL_59;
          }
          if ((v84 & 0x2000000000000000) != 0)
          {
            if ((v106 & 0x2000000000000000) != 0)
            {
              unint64_t v138 = specialized _SmallString.init(_:appending:)(v83, v84, v108, v106);
              if (v140) {
                goto LABEL_171;
              }
              uint64_t v141 = v138;
              unint64_t v142 = v139;
              swift_bridgeObjectRelease(v84);
              swift_bridgeObjectRelease(v109);
              uint64_t v234 = v141;
              unint64_t v235 = v142;
              goto LABEL_59;
            }
          }
          else if ((v106 & 0x2000000000000000) != 0)
          {
LABEL_171:
            uint64_t v132 = HIBYTE(v109) & 0xF;
LABEL_172:
            swift_bridgeObjectRetain(v109);
            _StringGuts.append(_:)(v108, v109, 0, v132);
            swift_bridgeObjectRelease_n(v109, 2);
LABEL_59:
            uint64_t v8 = v228;
            goto LABEL_6;
          }
          uint64_t v132 = v108 & 0xFFFFFFFFFFFFLL;
          goto LABEL_172;
        }
      }
      uint64_t v232 = v83;
      uint64_t v233 = v84;
      uint64_t v234 = 0;
      unint64_t v235 = 0xE000000000000000;
      uint64_t v87 = specialized Unicode.Scalar.withUTF8CodeUnits<A>(_:)(value);
      unint64_t v88 = v86;
      uint64_t v89 = v86 & 0x2000000000000000;
      uint64_t v90 = HIBYTE(v86) & 0xF;
      uint64_t v91 = HIBYTE(v84) & 0xF;
      if ((v84 & 0x2000000000000000) != 0 && v89)
      {
        if ((unint64_t)(v90 + v91) <= 0xF)
        {
          swift_bridgeObjectRelease(v86);
          if (v90)
          {
            char v119 = 0;
            unint64_t v120 = 0;
            unint64_t v121 = v84;
            do
            {
              unint64_t v122 = v91 + v120;
              unint64_t v123 = v120 + 1;
              if (v120 >= 8) {
                unint64_t v124 = v88;
              }
              else {
                unint64_t v124 = v87;
              }
              unint64_t v125 = v124 >> (v119 & 0x38);
              char v126 = (8 * v91 + v119) & 0x38;
              uint64_t v127 = (-255 << v126) - 1;
              unint64_t v128 = (unint64_t)v125 << v126;
              unint64_t v129 = v128 | v127 & v121;
              unint64_t v130 = v128 | v127 & v83;
              if (v122 < 8) {
                uint64_t v83 = v130;
              }
              else {
                unint64_t v121 = v129;
              }
              v119 += 8;
              unint64_t v120 = v123;
            }
            while (v90 != v123);
          }
          else
          {
            unint64_t v121 = v84;
          }
          swift_bridgeObjectRelease(v84);
          unint64_t v166 = 0xA000000000000000;
          if (!(v83 & 0x8080808080808080 | v121 & 0x80808080808080)) {
            unint64_t v166 = 0xE000000000000000;
          }
          uint64_t v232 = v83;
          uint64_t v233 = v166 & 0xFF00000000000000 | ((v90 + v91) << 56) | v121 & 0xFFFFFFFFFFFFFFLL;
          goto LABEL_196;
        }
        uint64_t v89 = 1;
      }
      if (v89) {
        uint64_t v92 = HIBYTE(v86) & 0xF;
      }
      else {
        uint64_t v92 = v87 & 0xFFFFFFFFFFFFLL;
      }
      swift_bridgeObjectRetain(v86);
      if ((v88 & 0x1000000000000000) != 0)
      {
        swift_bridgeObjectRetain_n(v88, 5);
        v173._Swift::UInt64 rawBits = 1;
        v174._Swift::UInt64 rawBits = (v92 << 16) | 1;
        v175._Swift::UInt64 rawBits = _StringGuts.validateScalarRange(_:)(v173, v174, v87, v88);
        if (v175._rawBits < 0x10000) {
          v175._rawBits |= 3;
        }
        Swift::Int v93 = specialized Collection.count.getter(v175, v176, v87, v88);
        swift_bridgeObjectRelease(v88);
        uint64_t v222 = v92;
        if ((v84 & 0x1000000000000000) != 0)
        {
LABEL_209:
          Swift::Int v177 = String.UTF8View._foreignCount()();
          Swift::Int v95 = v177 + v93;
          if (__OFADD__(v177, v93)) {
            goto LABEL_265;
          }
          goto LABEL_103;
        }
      }
      else
      {
        swift_bridgeObjectRetain_n(v88, 4);
        Swift::Int v93 = v92;
        uint64_t v222 = v92;
        if ((v84 & 0x1000000000000000) != 0) {
          goto LABEL_209;
        }
      }
      if ((v84 & 0x2000000000000000) != 0) {
        uint64_t v94 = HIBYTE(v84) & 0xF;
      }
      else {
        uint64_t v94 = v83 & 0xFFFFFFFFFFFFLL;
      }
      Swift::Int v95 = v94 + v93;
      if (__OFADD__(v94, v93))
      {
LABEL_265:
        __break(1u);
LABEL_266:
        _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x745uLL, 0);
      }
LABEL_103:
      if ((v83 & ~v84 & 0x2000000000000000) != 0
        && swift_isUniquelyReferenced_nonNull_native(v84 & 0xFFFFFFFFFFFFFFFLL))
      {
        uint64_t v96 = v87 & 0xFFFFFFFFFFFFLL;
        uint64_t v98 = v232;
        uint64_t v97 = v233;
        int64_t v99 = _StringGuts.nativeUnusedCapacity.getter(v232, v233);
        if (v100)
        {
LABEL_271:
          unint64_t v220 = 258;
LABEL_272:
          _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/StringGutsRangeReplaceable.swift", 38, 2, v220, 0);
        }
        if (v95 > 15) {
          goto LABEL_112;
        }
        if ((v97 & 0x2000000000000000) != 0)
        {
          int v116 = 0;
          unint64_t v101 = v97;
          goto LABEL_174;
        }
        unint64_t v101 = v97;
        if (v99 >= v93) {
          goto LABEL_112;
        }
        goto LABEL_137;
      }
      if (v95 >= 16)
      {
        uint64_t v96 = v87 & 0xFFFFFFFFFFFFLL;
        uint64_t v98 = v232;
        uint64_t v97 = v233;
LABEL_112:
        int64_t v102 = _StringGuts.nativeUnusedCapacity.getter(v98, v97);
        BOOL v105 = (v103 & 1) == 0 && v102 >= v93;
        if ((v98 & ~v97 & 0x2000000000000000) != 0
          && swift_isUniquelyReferenced_nonNull_native(v97 & 0xFFFFFFFFFFFFFFFLL))
        {
          if (v105)
          {
LABEL_132:
            swift_bridgeObjectRelease_n(v88, 4);
            if ((v88 & 0x1000000000000000) == 0)
            {
              uint64_t v8 = v228;
              if (v89)
              {
                swift_bridgeObjectRelease_n(v88, 2);
                uint64_t v230 = v87;
                unint64_t v231 = v88 & 0xFFFFFFFFFFFFFFLL;
                uint64_t v114 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, v90, (uint64_t)&v230, v90);
                _StringGuts.appendInPlace(_:isASCII:)(v114, v115, (v88 & 0x4000000000000000) != 0);
                uint64_t v7 = a2;
              }
              else
              {
                if ((v87 & 0x1000000000000000) != 0)
                {
                  swift_bridgeObjectRelease(v88);
                  id v133 = (id)((v88 & 0xFFFFFFFFFFFFFFFLL) + 32);
                  uint64_t v134 = v96;
                  uint64_t v135 = v96;
                }
                else
                {
                  id v133 = _StringObject.sharedUTF8.getter(v87, v88);
                  uint64_t v135 = v183;
                  swift_bridgeObjectRelease(v88);
                  if (v135 < v96) {
                    goto LABEL_266;
                  }
                  uint64_t v134 = v96;
                }
                uint64_t v7 = a2;
                Swift::String::Index v136 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, v134, (uint64_t)v133, v135);
                _StringGuts.appendInPlace(_:isASCII:)(v136, v137, v87 < 0);
                swift_bridgeObjectRelease(v88);
              }
              goto LABEL_197;
            }
            swift_bridgeObjectRelease(v88);
            _StringGuts._foreignAppendInPlace(_:)(v87, v88, 0, v222);
            swift_bridgeObjectRelease(v88);
LABEL_196:
            uint64_t v7 = a2;
            uint64_t v8 = v228;
            goto LABEL_197;
          }
LABEL_125:
          uint64_t v110 = _StringGuts.nativeCapacity.getter(v98, v97);
          if (v111) {
            uint64_t v112 = 0;
          }
          else {
            uint64_t v112 = v110;
          }
          if (v112 + 0x4000000000000000 < 0)
          {
            __break(1u);
LABEL_268:
            _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index is out of bounds", 29, 2, "Swift/StringUnicodeScalarView.swift", 35, 2, 0x84uLL, 0);
          }
          uint64_t v113 = 2 * v112;
          if (v113 > v95) {
            Swift::Int v95 = v113;
          }
        }
        else if (!v105)
        {
          goto LABEL_125;
        }
        _StringGuts.grow(_:)(v95);
        goto LABEL_132;
      }
      unint64_t v101 = v233;
      if ((v233 & 0x2000000000000000) != 0)
      {
        int v116 = 0;
        uint64_t v97 = v233;
        goto LABEL_174;
      }
      uint64_t v97 = v233;
LABEL_137:
      int v116 = 1;
LABEL_174:
      uint64_t v7 = a2;
      uint64_t v8 = v228;
      swift_bridgeObjectRelease_n(v88, 5);
      unint64_t v143 = v232;
      if (v116)
      {
        if ((v101 & 0x1000000000000000) != 0)
        {
          unint64_t v143 = _StringGuts._foreignConvertedToSmall()(v232, v97);
          unint64_t v101 = v184;
        }
        else
        {
          if ((v232 & 0x1000000000000000) != 0)
          {
            unint64_t v179 = (unsigned __int8 *)((v101 & 0xFFFFFFFFFFFFFFFLL) + 32);
            uint64_t v180 = v232 & 0xFFFFFFFFFFFFLL;
          }
          else
          {
            unint64_t v179 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v232, v97);
            uint64_t v180 = v187;
          }
          swift_bridgeObjectRetain(v97);
          closure #1 in _StringGuts._convertedToSmall()(v179, v180, &v230);
          swift_bridgeObjectRelease(v97);
          unint64_t v143 = v230;
          unint64_t v101 = v231;
        }
      }
      v144._Swift::UInt64 rawBits = (v222 << 16) | 1;
      v145._Swift::UInt64 rawBits = 1;
      v146._Swift::UInt64 rawBits = _StringGuts.validateScalarRange(_:)(v145, v144, v87, v88);
      if (v146._rawBits < 0x10000) {
        v146._rawBits |= 3;
      }
      unint64_t v148 = specialized String.init(_:)(v146, v147, v87, v88);
      unint64_t v150 = v149;
      swift_bridgeObjectRelease(v88);
      if ((v150 & 0x2000000000000000) != 0)
      {
        swift_bridgeObjectRelease(v150);
      }
      else if ((v150 & 0x1000000000000000) != 0)
      {
        unint64_t v148 = _StringGuts._foreignConvertedToSmall()(v148, v150);
        unint64_t v186 = v185;
        swift_bridgeObjectRelease(v150);
        unint64_t v150 = v186;
      }
      else
      {
        if ((v148 & 0x1000000000000000) != 0)
        {
          uint64_t v181 = (unsigned __int8 *)((v150 & 0xFFFFFFFFFFFFFFFLL) + 32);
          uint64_t v182 = v148 & 0xFFFFFFFFFFFFLL;
        }
        else
        {
          uint64_t v181 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v148, v150);
        }
        closure #1 in _StringGuts._convertedToSmall()(v181, v182, &v230);
        swift_bridgeObjectRelease(v150);
        unint64_t v148 = v230;
        unint64_t v150 = v231;
      }
      uint64_t v151 = HIBYTE(v101) & 0xF;
      uint64_t v152 = HIBYTE(v150) & 0xF;
      uint64_t v153 = v152 + v151;
      if ((unint64_t)(v152 + v151) > 0xF)
      {
LABEL_270:
        unint64_t v220 = 266;
        goto LABEL_272;
      }
      if (v152)
      {
        char v154 = 0;
        unint64_t v155 = 0;
        do
        {
          unint64_t v156 = v151 + v155;
          unint64_t v157 = v155 + 1;
          if (v155 >= 8) {
            unint64_t v158 = v150;
          }
          else {
            unint64_t v158 = v148;
          }
          unint64_t v159 = v158 >> (v154 & 0x38);
          char v160 = (8 * v151 + v154) & 0x38;
          uint64_t v161 = (-255 << v160) - 1;
          unint64_t v162 = (unint64_t)v159 << v160;
          unint64_t v163 = v162 | v161 & v101;
          unint64_t v164 = v162 | v161 & v143;
          if (v156 < 8) {
            unint64_t v143 = v164;
          }
          else {
            unint64_t v101 = v163;
          }
          v154 += 8;
          unint64_t v155 = v157;
        }
        while (v152 != v157);
      }
      swift_bridgeObjectRelease(v97);
      unint64_t v165 = 0xA000000000000000;
      if (!(v143 & 0x8080808080808080 | v101 & 0x80808080808080)) {
        unint64_t v165 = 0xE000000000000000;
      }
      uint64_t v232 = v143;
      uint64_t v233 = v165 & 0xFF00000000000000 | (v153 << 56) | v101 & 0xFFFFFFFFFFFFFFLL;
LABEL_197:
      uint64_t v3 = v232;
      unint64_t v167 = v233;
      swift_bridgeObjectRelease(v235);
      char v9 = 0;
      uint64_t v234 = v3;
      unint64_t v235 = v167;
      if (v8 >= v226) {
        goto LABEL_229;
      }
    }
    unint64_t v15 = 0xE200000000000000;
    uint64_t v16 = 29788;
    switch(value)
    {
      case 0u:
        uint64_t v16 = 12380;
        break;
      case 9u:
        break;
      case 0xAu:
        uint64_t v16 = 28252;
        break;
      case 0xDu:
        uint64_t v16 = 29276;
        break;
      default:
        if (value > 0x7F) {
          goto LABEL_87;
        }
        unint64_t v69 = specialized Unicode.Scalar.withUTF8CodeUnits<A>(_:)((value >> 4) | 0x30);
        uint64_t v71 = v70;
        unint64_t v72 = specialized static String.+ infix(_:_:)(0x7B755CuLL, 0xE300000000000000, v69, v70);
        unint64_t v74 = v73;
        swift_bridgeObjectRelease(0xE300000000000000);
        swift_bridgeObjectRelease(v71);
        if ((value & 0xF) >= 0xA) {
          unsigned int v75 = (value & 0xF) + 55;
        }
        else {
          unsigned int v75 = value & 0xF | 0x30;
        }
        unint64_t v76 = specialized Unicode.Scalar.withUTF8CodeUnits<A>(_:)(v75);
        uint64_t v78 = v77;
        unint64_t v79 = specialized static String.+ infix(_:_:)(v72, v74, v76, v77);
        unint64_t v81 = v80;
        swift_bridgeObjectRelease(v74);
        swift_bridgeObjectRelease(v78);
        uint64_t v16 = specialized static String.+ infix(_:_:)(v79, v81, 0x7DuLL, 0xE100000000000000);
        unint64_t v15 = v82;
        swift_bridgeObjectRelease(v81);
        swift_bridgeObjectRelease(0xE100000000000000);
        break;
    }
LABEL_23:
    uint64_t v17 = v234;
    unint64_t v18 = v235;
    unint64_t v19 = HIBYTE(v235) & 0xF;
    unint64_t v20 = (v235 & 0x2000000000000000) != 0 ? HIBYTE(v235) & 0xF : v234 & 0xFFFFFFFFFFFFLL;
    if (v20 || (v234 & ~v235 & 0x2000000000000000) != 0) {
      break;
    }
    swift_bridgeObjectRelease(v235);
    uint64_t v234 = v16;
    unint64_t v235 = v15;
LABEL_6:
    char v9 = 1;
    if (v8 >= v226)
    {
      uint64_t v3 = v234;
      unint64_t v167 = v235;
LABEL_229:
      uint64_t v4 = 0xE100000000000000;
      goto LABEL_230;
    }
  }
  uint64_t v21 = v15 & 0x2000000000000000;
  unint64_t v22 = HIBYTE(v15) & 0xF;
  if ((v235 & 0x2000000000000000) != 0 && v21)
  {
    unint64_t v23 = v19 + v22;
    if (v19 + v22 <= 0xF)
    {
      if (v22)
      {
        uint64_t v52 = 0;
        unint64_t v53 = 0;
        unint64_t v54 = v235;
        do
        {
          unint64_t v55 = v19 + v53;
          unint64_t v56 = v53 + 1;
          if (v53 >= 8) {
            unint64_t v57 = v15;
          }
          else {
            unint64_t v57 = v16;
          }
          unint64_t v58 = v57 >> (v52 & 0x38);
          char v59 = (8 * v19 + v52) & 0x38;
          uint64_t v60 = (-255 << v59) - 1;
          unint64_t v61 = (unint64_t)v58 << v59;
          unint64_t v62 = v61 | v60 & v54;
          unint64_t v63 = v61 | v60 & v17;
          if (v55 < 8) {
            uint64_t v17 = v63;
          }
          else {
            unint64_t v54 = v62;
          }
          v52 += 8;
          unint64_t v53 = v56;
        }
        while (v22 != v56);
      }
      else
      {
        unint64_t v54 = v235;
      }
      swift_bridgeObjectRelease(v235);
      swift_bridgeObjectRelease(v15);
      unint64_t v68 = 0xA000000000000000;
      if (!(v17 & 0x8080808080808080 | v54 & 0x80808080808080)) {
        unint64_t v68 = 0xE000000000000000;
      }
      uint64_t v234 = v17;
      unint64_t v235 = v68 & 0xFF00000000000000 | (v23 << 56) | v54 & 0xFFFFFFFFFFFFFFLL;
      goto LABEL_6;
    }
    uint64_t v21 = 1;
  }
  uint64_t v228 = v8;
  if (v21) {
    uint64_t v24 = HIBYTE(v15) & 0xF;
  }
  else {
    uint64_t v24 = v16 & 0xFFFFFFFFFFFFLL;
  }
  swift_bridgeObjectRetain_n(v15, 2);
  if ((v15 & 0x1000000000000000) != 0)
  {
    swift_bridgeObjectRetain_n(v15, 5);
    v168._Swift::UInt64 rawBits = 1;
    v169._Swift::UInt64 rawBits = (v24 << 16) | 1;
    v170._Swift::UInt64 rawBits = _StringGuts.validateScalarRange(_:)(v168, v169, v16, v15);
    if (v170._rawBits < 0x10000) {
      v170._rawBits |= 3;
    }
    Swift::Int v25 = specialized Collection.count.getter(v170, v171, v16, v15);
    swift_bridgeObjectRelease(v15);
    if ((v18 & 0x1000000000000000) == 0) {
      goto LABEL_37;
    }
  }
  else
  {
    swift_bridgeObjectRetain_n(v15, 4);
    Swift::Int v25 = v24;
    if ((v18 & 0x1000000000000000) == 0)
    {
LABEL_37:
      BOOL v26 = __OFADD__(v20, v25);
      int64_t v27 = v20 + v25;
      if (v26) {
        goto LABEL_260;
      }
LABEL_38:
      if ((v17 & ~v18 & 0x2000000000000000) != 0
        && swift_isUniquelyReferenced_nonNull_native(v18 & 0xFFFFFFFFFFFFFFFLL))
      {
        unint64_t v28 = v235;
        int64_t v29 = _StringGuts.nativeUnusedCapacity.getter(v234, v235);
        if (v30) {
          goto LABEL_271;
        }
        if (v27 <= 15 && ((v28 & 0x2000000000000000) != 0 || v29 < v25))
        {
LABEL_53:
          swift_bridgeObjectRelease_n(v15, 5);
          unint64_t v33 = v234;
          swift_bridgeObjectRetain(v28);
          unint64_t v34 = _StringGuts._convertedToSmall()(v33, v28);
          unint64_t v36 = v35;
          swift_bridgeObjectRelease(v28);
          v37._Swift::UInt64 rawBits = (v24 << 16) | 1;
          v38._Swift::UInt64 rawBits = 1;
          v39._Swift::UInt64 rawBits = _StringGuts.validateScalarRange(_:)(v38, v37, v16, v15);
          if (v39._rawBits < 0x10000) {
            v39._rawBits |= 3;
          }
          unint64_t v41 = specialized String.init(_:)(v39, v40, v16, v15);
          unint64_t v43 = v42;
          swift_bridgeObjectRelease(v15);
          unint64_t v44 = _StringGuts._convertedToSmall()(v41, v43);
          unint64_t v46 = v45;
          swift_bridgeObjectRelease(v43);
          unint64_t v47 = specialized _SmallString.init(_:appending:)(v34, v36, v44, v46);
          uint64_t v8 = v228;
          if (v49) {
            goto LABEL_270;
          }
          uint64_t v50 = v47;
          unint64_t v51 = v48;
          swift_bridgeObjectRelease(v28);
          swift_bridgeObjectRelease(v15);
          uint64_t v234 = v50;
          unint64_t v235 = v51;
LABEL_57:
          uint64_t v7 = a2;
          goto LABEL_6;
        }
      }
      else if (v27 <= 15)
      {
        unint64_t v28 = v235;
        goto LABEL_53;
      }
      _StringGuts.prepareForAppendInPlace(totalCount:otherUTF8Count:)(v27, v25);
      swift_bridgeObjectRelease_n(v15, 4);
      if ((v15 & 0x1000000000000000) != 0)
      {
        swift_bridgeObjectRelease(v15);
        _StringGuts._foreignAppendInPlace(_:)(v16, v15, 0, v24);
        swift_bridgeObjectRelease_n(v15, 2);
        uint64_t v7 = a2;
        goto LABEL_59;
      }
      uint64_t v8 = v228;
      if (!v21)
      {
        if ((v16 & 0x1000000000000000) != 0)
        {
          swift_bridgeObjectRelease(v15);
          id v64 = (id)((v15 & 0xFFFFFFFFFFFFFFFLL) + 32);
          uint64_t v65 = v16 & 0xFFFFFFFFFFFFLL;
        }
        else
        {
          id v64 = _StringObject.sharedUTF8.getter(v16, v15);
          uint64_t v65 = v178;
          swift_bridgeObjectRelease(v15);
          if (v65 < (v16 & 0xFFFFFFFFFFFFLL)) {
            goto LABEL_266;
          }
        }
        uint64_t v7 = a2;
        uint64_t v66 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, v16 & 0xFFFFFFFFFFFFLL, (uint64_t)v64, v65);
        _StringGuts.appendInPlace(_:isASCII:)(v66, v67, v16 < 0);
        swift_bridgeObjectRelease_n(v15, 2);
        goto LABEL_6;
      }
      swift_bridgeObjectRelease_n(v15, 2);
      uint64_t v232 = v16;
      uint64_t v233 = v15 & 0xFFFFFFFFFFFFFFLL;
      uint64_t v31 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, HIBYTE(v15) & 0xF, (uint64_t)&v232, HIBYTE(v15) & 0xF);
      _StringGuts.appendInPlace(_:isASCII:)(v31, v32, (v15 & 0x4000000000000000) != 0);
      swift_bridgeObjectRelease(v15);
      goto LABEL_57;
    }
  }
  Swift::Int v172 = String.UTF8View._foreignCount()();
  int64_t v27 = v172 + v25;
  if (!__OFADD__(v172, v25)) {
    goto LABEL_38;
  }
LABEL_260:
  __break(1u);
LABEL_261:
  Swift::UInt64 v214 = specialized Collection.dropFirst(_:)(1, v232, v233);
  uint64_t v216 = v215;
  uint64_t v230 = v17;
  unint64_t v231 = v22;
  uint64_t v234 = 0;
  unint64_t v235 = 0xE000000000000000;
  specialized String.UnicodeScalarView.append<A>(contentsOf:)(v214, v217, v218, v215);
  swift_bridgeObjectRelease(0xE000000000000000);
  swift_bridgeObjectRelease(v216);
  return v230;
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Character()
{
  return String.debugDescription.getter(*(void *)v0, *(void *)(v0 + 8));
}

uint64_t static Character.== infix(_:_:)(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a1 == a3 && a2 == a4) {
    return 1;
  }
  if ((~a2 & 0x6000000000000000) == 0 && (a4 & 0x2000000000000000) != 0 && (a4 & 0x4000000000000000) != 0) {
    return 0;
  }
  return _stringCompareInternal(_:_:expecting:)(a1, a2, a3, a4, 0);
}

uint64_t static Character.< infix(_:_:)(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  if (a1 == a3 && a2 == a4) {
    return 0;
  }
  if ((~a2 & 0x6000000000000000) != 0 || (a4 & 0x2000000000000000) == 0 || (a4 & 0x4000000000000000) == 0) {
    return _stringCompareInternal(_:_:expecting:)(a1, a2, a3, a4, 1);
  }
  BOOL v5 = bswap64(a1) < bswap64(a3);
  BOOL v6 = bswap64(a2) < bswap64(a4);
  if (a1 == a3) {
    return v6;
  }
  else {
    return v5;
  }
}

uint64_t static String.< infix(_:_:)(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  if (a1 == a3 && a2 == a4) {
    return 0;
  }
  if ((~a2 & 0x6000000000000000) != 0 || (a4 & 0x2000000000000000) == 0 || (a4 & 0x4000000000000000) == 0) {
    return _stringCompareInternal(_:_:expecting:)(a1, a2, a3, a4, 1);
  }
  BOOL v5 = bswap64(a1) < bswap64(a3);
  BOOL v6 = bswap64(a2) < bswap64(a4);
  if (a1 == a3) {
    return v6;
  }
  else {
    return v5;
  }
}

void String.hash(into:)(unint64_t *a1, unint64_t a2, unint64_t a3)
{
  if ((a3 & 0x2000000000000000) != 0) {
    unint64_t v3 = a3;
  }
  else {
    unint64_t v3 = a2;
  }
  if ((a3 & 0x1000000000000000) != 0 || (v3 & 0x4000000000000000) == 0)
  {
    if ((a3 & 0x2000000000000000) != 0) {
      uint64_t v8 = HIBYTE(a3) & 0xF;
    }
    else {
      uint64_t v8 = a2 & 0xFFFFFFFFFFFFLL;
    }
    _StringGutsSlice._normalizedHash(into:)(a1, a2, a3, 0, v8);
  }
  else
  {
    if ((a3 & 0x2000000000000000) != 0)
    {
      v9[0] = a2;
      v9[1] = a3 & 0xFFFFFFFFFFFFFFLL;
      uint64_t v7 = (char *)v9 + (HIBYTE(a3) & 0xF);
      BOOL v6 = v9;
    }
    else
    {
      if ((a2 & 0x1000000000000000) != 0)
      {
        id v4 = (id)((a3 & 0xFFFFFFFFFFFFFFFLL) + 32);
        uint64_t v5 = a2 & 0xFFFFFFFFFFFFLL;
      }
      else
      {
        id v4 = _StringObject.sharedUTF8.getter(a2, a3);
      }
      BOOL v6 = (void *)specialized UnsafeRawBufferPointer.init<A>(_:)((uint64_t)v4, v5);
    }
    Hasher.combine(bytes:)(*(Swift::UnsafeRawBufferPointer *)&v6);
    Hasher._combine(_:)(0xFFu);
  }
}

Swift::Int Character.hashValue.getter(unint64_t a1, unint64_t a2)
{
  v3[0] = 0;
  v3[1] = _swift_stdlib_Hashing_parameters ^ 0x736F6D6570736575;
  v3[2] = unk_1EB208F00 ^ 0x646F72616E646F6DLL;
  v3[3] = _swift_stdlib_Hashing_parameters ^ 0x6C7967656E657261;
  v3[4] = unk_1EB208F00 ^ 0x7465646279746573;
  long long v4 = 0u;
  long long v5 = 0u;
  String.hash(into:)(v3, a1, a2);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Character()
{
  unint64_t v1 = *v0;
  unint64_t v2 = v0[1];
  v4[0] = 0;
  v4[1] = _swift_stdlib_Hashing_parameters ^ 0x736F6D6570736575;
  v4[2] = unk_1EB208F00 ^ 0x646F72616E646F6DLL;
  v4[3] = _swift_stdlib_Hashing_parameters ^ 0x6C7967656E657261;
  v4[4] = unk_1EB208F00 ^ 0x7465646279746573;
  long long v5 = 0u;
  long long v6 = 0u;
  String.hash(into:)(v4, v1, v2);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance Character(unint64_t *a1)
{
  String.hash(into:)(a1, *v1, v1[1]);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Character(uint64_t a1)
{
  unint64_t v2 = *v1;
  unint64_t v3 = v1[1];
  v5[0] = 0;
  v5[1] = _swift_stdlib_Hashing_parameters ^ a1 ^ 0x736F6D6570736575;
  v5[2] = unk_1EB208F00 ^ 0x646F72616E646F6DLL;
  v5[3] = _swift_stdlib_Hashing_parameters ^ a1 ^ 0x6C7967656E657261;
  v5[4] = unk_1EB208F00 ^ 0x7465646279746573;
  long long v6 = 0u;
  long long v7 = 0u;
  String.hash(into:)(v5, v2, v3);
  return Hasher._finalize()();
}

uint64_t Character._isSmall.getter(uint64_t a1, unint64_t a2)
{
  return (a2 >> 61) & 1;
}

uint64_t _StringGuts.isSmall.getter(uint64_t a1, unint64_t a2)
{
  return (a2 >> 61) & 1;
}

void _CocoaArrayWrapper.buffer.setter(void *a1)
{
  swift_unknownObjectRelease(*v1);
  *unint64_t v1 = a1;
}

uint64_t (*_CocoaArrayWrapper.buffer.modify())(void, void)
{
  return EnumeratedSequence._base.modify;
}

uint64_t _CocoaArrayWrapper.startIndex.getter()
{
  return 0;
}

uint64_t _CocoaArrayWrapper.contiguousStorage(_:)(uint64_t a1, uint64_t a2, id a3)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  memset(v7, 0, sizeof(v7));
  id v5 = [a3 countByEnumeratingWithState:v7 objects:0 count:0];
  uint64_t result = 0;
  if ((uint64_t)v5 >= a2)
  {
    if (!*((void *)&v7[0] + 1)) {
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/CocoaArray.swift", 22, 2, 0x7BuLL, 0);
    }
    return *((void *)&v7[0] + 1) + 8 * a1;
  }
  return result;
}

void _SliceBuffer.init(owner:subscriptBaseAddress:indices:hasNativeBuffer:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4 < 0) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, 2, 0xD7BuLL, 0);
  }
}

uint64_t Range.isEmpty.getter(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 24) + 8) + 8))(v1, v1 + *(int *)(a1 + 36)) & 1;
}

double _makeSwiftNSFastEnumerationState()@<D0>(_OWORD *a1@<X8>)
{
  double result = 0.0;
  a1[2] = 0u;
  a1[3] = 0u;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

uint64_t protocol witness for BidirectionalCollection.index(before:) in conformance _CocoaArrayWrapper@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = specialized RandomAccessCollection<>.index(before:)(*a1, *v2);
  *a2 = result;
  return result;
}

uint64_t protocol witness for BidirectionalCollection.formIndex(before:) in conformance _CocoaArrayWrapper(uint64_t *a1)
{
  uint64_t result = specialized RandomAccessCollection<>.index(before:)(*a1, *v1);
  *a1 = result;
  return result;
}

uint64_t protocol witness for BidirectionalCollection.index(_:offsetBy:) in conformance _CocoaArrayWrapper@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result = specialized RandomAccessCollection<>.index(_:offsetBy:)(*a1, a2, *v3);
  *a3 = result;
  return result;
}

uint64_t protocol witness for BidirectionalCollection.distance(from:to:) in conformance _CocoaArrayWrapper(uint64_t *a1, uint64_t *a2)
{
  return specialized RandomAccessCollection<>.distance(from:to:)(*a1, *a2, *v2);
}

id protocol witness for Collection.endIndex.getter in conformance _CocoaArrayWrapper@<X0>(void *a1@<X8>)
{
  id result = [*v1 sel_count];
  *a1 = result;
  return result;
}

void (*protocol witness for Collection.subscript.read in conformance _CocoaArrayWrapper(void *a1, void *a2))(uint64_t a1)
{
  id v4 = [*v2 objectAtIndex:*a2];
  *a1 = v4;
  a1[1] = v4;
  return protocol witness for Collection.subscript.read in conformance _CocoaArrayWrapper;
}

void protocol witness for Collection.subscript.read in conformance _CocoaArrayWrapper(uint64_t a1)
{
}

uint64_t protocol witness for Collection.subscript.getter in conformance _CocoaArrayWrapper@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = _CocoaArrayWrapper.subscript.getter(*a1, a1[1], *v2);
  *a2 = result;
  a2[1] = v5;
  a2[2] = v6;
  a2[3] = v7;
  return result;
}

unint64_t protocol witness for Collection.indices.getter in conformance _CocoaArrayWrapper@<X0>(void *a1@<X8>)
{
  unint64_t result = (unint64_t)[*v1 sel_count];
  if ((result & 0x8000000000000000) != 0) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
  }
  *a1 = 0;
  a1[1] = result;
  return result;
}

BOOL protocol witness for Collection.isEmpty.getter in conformance _CocoaArrayWrapper()
{
  return [*v0 sel_count] == 0;
}

uint64_t protocol witness for Collection.count.getter in conformance _CocoaArrayWrapper()
{
  id v1 = *v0;
  id v2 = [*v0 sel_count];

  return specialized RandomAccessCollection<>.distance(from:to:)(0, (uint64_t)v2, v1);
}

uint64_t protocol witness for RandomAccessCollection.index(_:offsetBy:limitedBy:) in conformance _CocoaArrayWrapper@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = *a1;
  id v8 = *v4;
  uint64_t v9 = specialized RandomAccessCollection<>.distance(from:to:)(*a1, *a3, *v4);
  if (a2 < 1)
  {
    if (v9 <= 0 && v9 > a2) {
      goto LABEL_4;
    }
LABEL_10:
    uint64_t result = specialized RandomAccessCollection<>.index(_:offsetBy:)(v7, a2, v8);
    char v11 = 0;
    goto LABEL_11;
  }
  if (v9 < 0 || v9 >= (unint64_t)a2) {
    goto LABEL_10;
  }
LABEL_4:
  uint64_t result = 0;
  char v11 = 1;
LABEL_11:
  *(void *)a4 = result;
  *(unsigned char *)(a4 + 8) = v11;
  return result;
}

uint64_t protocol witness for Collection.index(after:) in conformance _CocoaArrayWrapper@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = specialized RandomAccessCollection<>.index(after:)(*a1, *v2);
  *a2 = result;
  return result;
}

uint64_t protocol witness for Collection.formIndex(after:) in conformance _CocoaArrayWrapper(uint64_t *a1)
{
  uint64_t result = specialized RandomAccessCollection<>.index(after:)(*a1, *v1);
  *a1 = result;
  return result;
}

__objc2_class **protocol witness for Sequence._copyToContiguousArray() in conformance _CocoaArrayWrapper()
{
  id v1 = *v0;
  id v2 = specialized _copyCollectionToContiguousArray<A>(_:)(*v0);
  swift_unknownObjectRelease(v1);
  return v2;
}

uint64_t protocol witness for Sequence._copyContents(initializing:) in conformance _CocoaArrayWrapper(id *a1, void **a2, uint64_t a3)
{
  *a1 = _CocoaArrayWrapper._copyContents(initializing:)(a2, a3, *v3);
  a1[1] = v5;
  return v6;
}

uint64_t specialized CodingKey.description.getter(unint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
  if (a4)
  {
    unint64_t v7 = 0xE300000000000000;
    uint64_t v343 = 7104878;
  }
  else
  {
    uint64_t v343 = _int64ToString(_:radix:uppercase:)(a3, 10, 0, (uint64_t (*)(long long *, uint64_t, uint64_t, uint64_t, void))swift_int64ToString);
    unint64_t v7 = v6;
  }
  uint64_t v8 = specialized static String._createEmpty(withInitialCapacity:)(35);
  unint64_t v10 = v8;
  unint64_t v11 = v9;
  v346._uint64_t countAndFlagsBits = v8;
  v346._unint64_t object = (void *)v9;
  uint64_t v12 = HIBYTE(v9) & 0xF;
  int64_t v13 = v8 & 0xFFFFFFFFFFFFLL;
  if ((v9 & 0x2000000000000000) != 0) {
    uint64_t v14 = HIBYTE(v9) & 0xF;
  }
  else {
    uint64_t v14 = v8 & 0xFFFFFFFFFFFFLL;
  }
  unint64_t v342 = a2;
  if (!v14 && (v8 & ~v9 & 0x2000000000000000) == 0)
  {
    v346._uint64_t countAndFlagsBits = 0;
    v346._unint64_t object = (void *)0xE000000000000000;
LABEL_24:
    uint64_t v36 = v11;
LABEL_28:
    swift_bridgeObjectRelease(v36);
    goto LABEL_29;
  }
  if ((v9 & 0x2000000000000000) == 0)
  {
    swift_bridgeObjectRetain_n(0xE000000000000000, 6);
    if ((v11 & 0x1000000000000000) != 0)
    {
      int64_t v13 = String.UTF8View._foreignCount()();
      if ((v10 & ~v11 & 0x2000000000000000) == 0) {
        goto LABEL_26;
      }
    }
    else if ((v10 & ~v11 & 0x2000000000000000) == 0)
    {
      goto LABEL_26;
    }
    if (swift_isUniquelyReferenced_nonNull_native(v11 & 0xFFFFFFFFFFFFFFFLL))
    {
      unint64_t v15 = _StringGuts.nativeUnusedCapacity.getter(v10, v11);
      if (v16) {
        goto LABEL_346;
      }
      if (v13 <= 15 && (v15 & 0x8000000000000000) != 0) {
        goto LABEL_16;
      }
      goto LABEL_27;
    }
LABEL_26:
    if (v13 <= 15)
    {
LABEL_16:
      swift_bridgeObjectRelease_n(0xE000000000000000, 5);
      swift_bridgeObjectRetain(v11);
      unint64_t v17 = _StringGuts._convertedToSmall()(v10, v11);
      unint64_t v19 = v18;
      swift_bridgeObjectRelease(v11);
      v20._Swift::UInt64 rawBits = 1;
      v21._Swift::UInt64 rawBits = 1;
      v22._Swift::UInt64 rawBits = _StringGuts.validateScalarRange(_:)(v20, v21, 0, 0xE000000000000000);
      if (v22._rawBits < 0x10000) {
        v22._rawBits |= 3;
      }
      unint64_t v24 = specialized String.init(_:)(v22, v23, 0, 0xE000000000000000);
      unint64_t v26 = v25;
      swift_bridgeObjectRelease(0xE000000000000000);
      unint64_t v27 = _StringGuts._convertedToSmall()(v24, v26);
      unint64_t v29 = v28;
      swift_bridgeObjectRelease(v26);
      unint64_t v30 = specialized _SmallString.init(_:appending:)(v17, v19, v27, v29);
      if (v32) {
        goto LABEL_345;
      }
      uint64_t v33 = v30;
      unint64_t v34 = v31;
      swift_bridgeObjectRelease(0xE000000000000000);
      v346._uint64_t countAndFlagsBits = v33;
      v346._unint64_t object = v34;
      goto LABEL_24;
    }
LABEL_27:
    _StringGuts.prepareForAppendInPlace(totalCount:otherUTF8Count:)(v13, 0);
    swift_bridgeObjectRelease_n(0xE000000000000000, 6);
    uint64_t v344 = 0;
    unint64_t v345 = 0;
    Swift::String::Index v37 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, 0, (uint64_t)&v344, 0);
    _StringGuts.appendInPlace(_:isASCII:)(v37, v38, 1);
    uint64_t v36 = 0xE000000000000000;
    goto LABEL_28;
  }
  swift_bridgeObjectRelease(v9);
  swift_bridgeObjectRelease(0xE000000000000000);
  unint64_t v35 = 0xA000000000000000;
  if (!(v11 & 0x80808080808080 | v10 & 0x8080808080808080)) {
    unint64_t v35 = 0xE000000000000000;
  }
  v346._uint64_t countAndFlagsBits = v10;
  v346._unint64_t object = (void *)(v35 & 0xFF00000000000000 | (v12 << 56) | v11 & 0xFFFFFFFFFFFFFFLL);
LABEL_29:
  TypeName = (uint64_t *)swift_getTypeName((Class *)&type metadata for _DictionaryCodingKey, 0);
  if (v40 < 0) {
    goto LABEL_318;
  }
  unint64_t v41 = (uint8x16_t *)TypeName;
  uint64_t v42 = v40;
  unint64_t v340 = v7;
  unint64_t v341 = a1;
  if (_allASCII(_:)(TypeName, v40))
  {
    char v43 = 1;
LABEL_32:
    if (!v42)
    {
      uint64_t v45 = 0;
      unint64_t v44 = 0xE000000000000000;
      goto LABEL_121;
    }
    if (v42 > 15)
    {
      unint64_t v44 = specialized static __StringStorage.create(initializingFrom:codeUnitCapacity:isASCII:)(v41->i8, v42, v42, v43 & 1);
      uint64_t v45 = *(void *)(v44 + 24);
      goto LABEL_121;
    }
    uint64_t v84 = v42 - 8;
    unint64_t v85 = 8;
    if (v42 < 8) {
      unint64_t v85 = v42;
    }
    if ((v85 & 0x8000000000000000) == 0)
    {
      if (v85 >= 8)
      {
        if (v85 >= 0x10)
        {
          unint64_t v86 = v85 & 0xFFFFFFFFFFFFFFF0;
          uint16x8_t v111 = vmovl_high_u8(*v41);
          int8x16_t v112 = (int8x16_t)vmovl_u16(*(uint16x4_t *)v111.i8);
          uint16x8_t v113 = vmovl_u8(*(uint8x8_t *)v41->i8);
          int8x16_t v114 = (int8x16_t)vmovl_u16(*(uint16x4_t *)v113.i8);
          int8x16_t v115 = (int8x16_t)vmovl_high_u16(v111);
          int8x8_t v116 = (int8x8_t)vextq_s8(v115, v115, 8uLL).u64[0];
          int8x16_t v117 = (int8x16_t)vmovl_high_u16(v113);
          int8x8_t v118 = (int8x8_t)vextq_s8(v117, v117, 8uLL).u64[0];
          *(int8x8_t *)v117.i8 = vorr_s8(*(int8x8_t *)v117.i8, *(int8x8_t *)v115.i8);
          v119.i64[0] = v117.u32[0];
          v119.i64[1] = v117.u32[1];
          int8x16_t v120 = (int8x16_t)vshlq_u64(v119, (uint64x2_t)xmmword_18162AD00);
          *(int8x8_t *)v115.i8 = vorr_s8(*(int8x8_t *)v114.i8, *(int8x8_t *)v112.i8);
          v119.i64[0] = v115.u32[0];
          v119.i64[1] = v115.u32[1];
          int8x16_t v121 = vorrq_s8((int8x16_t)vshlq_u64(v119, (uint64x2_t)xmmword_18162ACF0), v120);
          *(int8x8_t *)v115.i8 = vorr_s8(v118, v116);
          v119.i64[0] = v115.u32[0];
          v119.i64[1] = v115.u32[1];
          int8x16_t v122 = (int8x16_t)vshlq_u64(v119, (uint64x2_t)xmmword_18162ACE0);
          *(int8x8_t *)v112.i8 = vorr_s8((int8x8_t)*(_OWORD *)&vextq_s8(v114, v114, 8uLL), (int8x8_t)*(_OWORD *)&vextq_s8(v112, v112, 8uLL));
          v119.i64[0] = v112.u32[0];
          v119.i64[1] = v112.u32[1];
          int8x16_t v123 = vorrq_s8(v121, vorrq_s8((int8x16_t)vshlq_u64(v119, (uint64x2_t)xmmword_18162ACD0), v122));
          uint64_t v45 = (uint64_t)vorr_s8(*(int8x8_t *)v123.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v123, v123, 8uLL));
          if (v85 == (v85 & 0xFFFFFFFFFFFFFFF0)) {
            goto LABEL_113;
          }
          unint64_t v87 = 8 * v86;
          if ((v85 & 8) == 0) {
            goto LABEL_111;
          }
        }
        else
        {
          uint64_t v45 = 0;
          unint64_t v87 = 0;
          unint64_t v86 = 0;
        }
        unint64_t v88 = v86;
        int64x2_t v89 = vdupq_n_s64(v87);
        unint64_t v86 = v85 & 0xFFFFFFFFFFFFFFF8;
        unint64_t v87 = 8 * (v85 & 0xFFFFFFFFFFFFFFF8);
        int8x16_t v90 = 0uLL;
        int8x16_t v91 = (int8x16_t)(unint64_t)v45;
        int64x2_t v92 = vaddq_s64(v89, (int64x2_t)xmmword_18162ACE0);
        int64x2_t v93 = vaddq_s64(v89, (int64x2_t)xmmword_18162AD00);
        int64x2_t v94 = vaddq_s64(v89, (int64x2_t)xmmword_18162ACD0);
        int64x2_t v95 = vaddq_s64(v89, (int64x2_t)xmmword_18162ACF0);
        uint64_t v96 = (uint8x8_t *)&v41->i8[v88];
        int8x16_t v97 = (int8x16_t)vdupq_n_s64(0x38uLL);
        unint64_t v98 = v88 - (v85 & 0xFFFFFFFFFFFFFFF8);
        int64x2_t v99 = vdupq_n_s64(0x40uLL);
        int8x16_t v100 = 0uLL;
        int8x16_t v101 = 0uLL;
        do
        {
          uint8x8_t v102 = *v96++;
          uint16x8_t v103 = vmovl_u8(v102);
          uint32x4_t v104 = vmovl_high_u16(v103);
          v105.i64[0] = v104.u32[2];
          v105.i64[1] = v104.u32[3];
          uint64x2_t v106 = v105;
          v105.i64[0] = v104.u32[0];
          v105.i64[1] = v104.u32[1];
          uint64x2_t v107 = v105;
          uint32x4_t v108 = vmovl_u16(*(uint16x4_t *)v103.i8);
          v105.i64[0] = v108.u32[2];
          v105.i64[1] = v108.u32[3];
          uint64x2_t v109 = v105;
          v105.i64[0] = v108.u32[0];
          v105.i64[1] = v108.u32[1];
          int8x16_t v101 = vorrq_s8((int8x16_t)vshlq_u64(v106, (uint64x2_t)vandq_s8((int8x16_t)v92, v97)), v101);
          int8x16_t v100 = vorrq_s8((int8x16_t)vshlq_u64(v107, (uint64x2_t)vandq_s8((int8x16_t)v93, v97)), v100);
          int8x16_t v90 = vorrq_s8((int8x16_t)vshlq_u64(v109, (uint64x2_t)vandq_s8((int8x16_t)v94, v97)), v90);
          int8x16_t v91 = vorrq_s8((int8x16_t)vshlq_u64(v105, (uint64x2_t)vandq_s8((int8x16_t)v95, v97)), v91);
          int64x2_t v93 = vaddq_s64(v93, v99);
          int64x2_t v94 = vaddq_s64(v94, v99);
          int64x2_t v95 = vaddq_s64(v95, v99);
          int64x2_t v92 = vaddq_s64(v92, v99);
          v98 += 8;
        }
        while (v98);
        int8x16_t v110 = vorrq_s8(vorrq_s8(v91, v100), vorrq_s8(v90, v101));
        uint64_t v45 = (uint64_t)vorr_s8(*(int8x8_t *)v110.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v110, v110, 8uLL));
        if (v85 == v86)
        {
LABEL_113:
          if (v42 < 9)
          {
            uint64_t v127 = 0;
          }
          else
          {
            uint64_t v127 = 0;
            uint64_t v128 = 0;
            unint64_t v129 = &v41->u8[8];
            do
            {
              unsigned int v130 = *v129++;
              v127 |= (unint64_t)v130 << v128;
              v128 += 8;
              --v84;
            }
            while (v84);
          }
          unint64_t v131 = 0xA000000000000000;
          if (((v127 | v45) & 0x8080808080808080) == 0) {
            unint64_t v131 = 0xE000000000000000;
          }
          unint64_t v44 = v131 | (v42 << 56) | v127;
          goto LABEL_121;
        }
      }
      else
      {
        unint64_t v86 = 0;
        uint64_t v45 = 0;
        unint64_t v87 = 0;
      }
LABEL_111:
      unint64_t v124 = &v41->u8[v86];
      unint64_t v125 = v85 - v86;
      do
      {
        unsigned int v126 = *v124++;
        v45 |= (unint64_t)v126 << (v87 & 0x38);
        v87 += 8;
        --v125;
      }
      while (v125);
      goto LABEL_113;
    }
LABEL_338:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
  }
  uint64_t v46 = 0;
  unint64_t v47 = &v41->u8[v42];
  if (!v41) {
    unint64_t v47 = 0;
  }
  char v43 = 1;
  for (uint64_t i = v41; ; uint64_t i = (uint8x16_t *)((char *)i + 3))
  {
    while (1)
    {
      while (1)
      {
        while (1)
        {
          if (!i || i == (uint8x16_t *)v47) {
            goto LABEL_32;
          }
          unsigned int v50 = i->u8[0];
          uint64_t i = (uint8x16_t *)((char *)i + 1);
          unsigned int v49 = v50;
          if ((v49 & 0x80) != 0) {
            break;
          }
          ++v46;
        }
        if ((v49 + 62) > 0x32u) {
          goto LABEL_86;
        }
        if (v49 > 0xDF) {
          break;
        }
        if (!i || i == (uint8x16_t *)v47 || (i->i8[0] & 0xC0) != 0x80) {
          goto LABEL_86;
        }
        char v43 = 0;
        uint64_t i = (uint8x16_t *)((char *)i + 1);
        v46 += 2;
      }
      if (v49 != 224) {
        break;
      }
      if (!i) {
        goto LABEL_86;
      }
      if (i == (uint8x16_t *)v47) {
        goto LABEL_86;
      }
      unint64_t v51 = &i->u8[1];
      if ((i->i8[0] & 0xE0) != 0xA0) {
        goto LABEL_86;
      }
LABEL_64:
      if (v51 == v47 || (*v51 & 0xC0) != 0x80) {
        goto LABEL_86;
      }
      char v43 = 0;
      uint64_t i = (uint8x16_t *)((char *)i + 2);
      v46 += 3;
    }
    if (v49 <= 0xEC)
    {
LABEL_56:
      if (!i || i == (uint8x16_t *)v47) {
        goto LABEL_86;
      }
      unint64_t v51 = &i->u8[1];
      LOBYTE(v52) = i->i8[0];
LABEL_63:
      if ((v52 & 0xC0) != 0x80) {
        goto LABEL_86;
      }
      goto LABEL_64;
    }
    if (v49 == 237)
    {
      if (!i) {
        goto LABEL_86;
      }
      if (i == (uint8x16_t *)v47) {
        goto LABEL_86;
      }
      unint64_t v51 = &i->u8[1];
      unsigned int v52 = i->u8[0];
      if (v52 > 0x9F) {
        goto LABEL_86;
      }
      goto LABEL_63;
    }
    if (v49 <= 0xEF) {
      goto LABEL_56;
    }
    if (v49 != 240) {
      break;
    }
    if (!i) {
      goto LABEL_86;
    }
    if (i == (uint8x16_t *)v47) {
      goto LABEL_86;
    }
    unint64_t v53 = &i->u8[1];
    if ((i->i8[0] + 64) < 0xD0u) {
      goto LABEL_86;
    }
LABEL_81:
    if (v53 == v47 || (i->i8[1] & 0xC0) != 0x80 || &i->i16[1] == (__int16 *)v47 || (i->i8[2] & 0xC0) != 0x80) {
      goto LABEL_86;
    }
    char v43 = 0;
    v46 += 4;
  }
  if ((v49 + 15) <= 2u)
  {
    if (!i || i == (uint8x16_t *)v47) {
      goto LABEL_86;
    }
    unint64_t v53 = &i->u8[1];
    LOBYTE(v54) = i->i8[0];
    goto LABEL_80;
  }
  if (i)
  {
    if (i != (uint8x16_t *)v47)
    {
      unint64_t v53 = &i->u8[1];
      unsigned int v54 = i->u8[0];
      if (v54 <= 0x8F)
      {
LABEL_80:
        if ((v54 & 0xC0) != 0x80) {
          goto LABEL_86;
        }
        goto LABEL_81;
      }
    }
  }
LABEL_86:
  unint64_t v55 = swift_allocError((uint64_t)&unk_1EC9FFB80, (uint64_t)&protocol witness table for UTF8ValidationError, 0, 0);
  swift_willThrow();
  swift_errorRelease(v55);
  uint64_t v56 = specialized Collection.subscript.getter(v46, (uint64_t)v41, v42);
  uint64_t v61 = findInvalidRange #1 (_:) in validateUTF8(_:)(v56, v57, v58, v59);
  uint64_t v344 = 0;
  unint64_t v345 = 0xE000000000000000;
  if (__OFADD__(v42, 15))
  {
    __break(1u);
    goto LABEL_338;
  }
  uint64_t v62 = v60;
  _StringGuts.reserveCapacity(_:)(v42 + 15);
  while (2)
  {
    uint64_t v63 = specialized Collection.subscript.getter(v61, (uint64_t)v41, v42);
    uint64_t v67 = v344 & 0xFFFFFFFFFFFFLL;
    if ((v345 & 0x2000000000000000) != 0) {
      uint64_t v67 = HIBYTE(v345) & 0xF;
    }
    BOOL v68 = __OFADD__(v67, v42);
    uint64_t v69 = v67 + v42;
    if (v68)
    {
      __break(1u);
LABEL_317:
      __break(1u);
LABEL_318:
      _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeBufferPointer with negative count", 39, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x53FuLL, 0);
    }
    uint64_t v70 = v63;
    if (__OFADD__(v69, 3)) {
      goto LABEL_317;
    }
    uint64_t v71 = v64;
    uint64_t v72 = v65;
    uint64_t v73 = v66;
    _StringGuts.reserveCapacity(_:)(v69 + 3);
    unint64_t v74 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(v70, v71, v72, v73);
    _StringGuts.appendInPlace(_:isASCII:)(v74, v75, 0);
    size_t v347 = 3;
    uint64_t v348 = 12435439;
    specialized closure #1 in Unicode.Scalar.withUTF8CodeUnits<A>(_:)((char *)&v348, &v347, &v344);
    uint64_t v76 = specialized Collection.subscript.getter(v62, (uint64_t)v41, v42);
    unint64_t v41 = (uint8x16_t *)specialized UnsafeBufferPointer.init(rebasing:)(v76, v77, v78, v79);
    uint64_t v42 = v80;
    uint64_t v81 = validateUTF8(_:)(v41->i64, v80);
    if (v83)
    {
      uint64_t v61 = v81;
      uint64_t v62 = v82;
      if (!v42) {
        goto LABEL_102;
      }
      continue;
    }
    break;
  }
  _StringGuts.appendInPlace(_:isASCII:)(v41->i8, v42, 0);
LABEL_102:
  uint64_t v45 = v344;
  unint64_t v44 = v345;
LABEL_121:
  uint64_t countAndFlagsBits = v346._countAndFlagsBits;
  unint64_t object = (unint64_t)v346._object;
  unint64_t v134 = ((unint64_t)v346._object >> 56) & 0xF;
  unint64_t v135 = v346._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
  if (((uint64_t)v346._object & 0x2000000000000000) != 0) {
    unint64_t v135 = ((unint64_t)v346._object >> 56) & 0xF;
  }
  if (!v135 && (v346._countAndFlagsBits & ~(uint64_t)v346._object & 0x2000000000000000) == 0)
  {
    v346._uint64_t countAndFlagsBits = v45;
    v346._unint64_t object = (void *)v44;
    uint64_t v167 = object;
LABEL_154:
    swift_bridgeObjectRelease(v167);
    goto LABEL_155;
  }
  unint64_t v7 = v44 & 0x2000000000000000;
  uint64_t v136 = HIBYTE(v44) & 0xF;
  if (((uint64_t)v346._object & 0x2000000000000000) == 0 || !v7) {
    goto LABEL_129;
  }
  unint64_t v137 = v134 + v136;
  if (v134 + v136 <= 0xF)
  {
    if (v136)
    {
      char v211 = 0;
      unint64_t v212 = 0;
      unint64_t v7 = v340;
      do
      {
        unint64_t v213 = v134 + v212;
        unint64_t v214 = v212 + 1;
        if (v212 >= 8) {
          unint64_t v215 = v44;
        }
        else {
          unint64_t v215 = v45;
        }
        unint64_t v216 = v215 >> (v211 & 0x38);
        char v217 = (8 * v134 + v211) & 0x38;
        uint64_t v218 = (-255 << v217) - 1;
        unint64_t v219 = (unint64_t)v216 << v217;
        unint64_t v220 = v219 | v218 & object;
        unint64_t v221 = v219 | v218 & countAndFlagsBits;
        if (v213 < 8) {
          uint64_t countAndFlagsBits = v221;
        }
        else {
          unint64_t object = v220;
        }
        v211 += 8;
        unint64_t v212 = v214;
      }
      while (v136 != v214);
    }
    else
    {
      unint64_t v7 = v340;
    }
    swift_bridgeObjectRelease(v44);
    unint64_t v244 = 0xA000000000000000;
    if (!(countAndFlagsBits & 0x8080808080808080 | object & 0x80808080808080)) {
      unint64_t v244 = 0xE000000000000000;
    }
    v245 = (void *)(v244 & 0xFF00000000000000 | (v137 << 56) | object & 0xFFFFFFFFFFFFFFLL);
    swift_bridgeObjectRelease((uint64_t)v346._object);
    v346._uint64_t countAndFlagsBits = countAndFlagsBits;
    v346._unint64_t object = v245;
    goto LABEL_155;
  }
  unint64_t v7 = 1;
LABEL_129:
  if (v7) {
    uint64_t v138 = HIBYTE(v44) & 0xF;
  }
  else {
    uint64_t v138 = v45 & 0xFFFFFFFFFFFFLL;
  }
  swift_bridgeObjectRetain_n(v44, 2);
  if ((v44 & 0x1000000000000000) == 0)
  {
    swift_bridgeObjectRetain_n(v44, 4);
    Swift::Int v139 = v138;
    if ((object & 0x1000000000000000) == 0) {
      goto LABEL_134;
    }
LABEL_322:
    Swift::Int v323 = String.UTF8View._foreignCount()();
    int64_t v141 = v323 + v139;
    if (!__OFADD__(v323, v139)) {
      goto LABEL_138;
    }
LABEL_324:
    __break(1u);
LABEL_325:
    swift_bridgeObjectRetain_n(object, 5);
    v324._Swift::UInt64 rawBits = 1;
    v325._Swift::UInt64 rawBits = (v45 << 16) | 1;
    v326._Swift::UInt64 rawBits = _StringGuts.validateScalarRange(_:)(v324, v325, v341, object);
    if (v326._rawBits < 0x10000) {
      v326._rawBits |= 3;
    }
    Swift::Int v328 = specialized Collection.count.getter(v326, v327, v341, object);
    uint64_t v329 = object;
    int64_t v182 = v328;
    swift_bridgeObjectRelease(v329);
    uint64_t v177 = v346._countAndFlagsBits;
    unint64_t v178 = (unint64_t)v346._object;
    if (((uint64_t)v346._object & 0x1000000000000000) != 0) {
      goto LABEL_328;
    }
LABEL_182:
    if ((v178 & 0x2000000000000000) != 0) {
      goto LABEL_186;
    }
    int64_t v183 = (v177 & 0xFFFFFFFFFFFFLL) + v182;
    if (!__OFADD__(v177 & 0xFFFFFFFFFFFFLL, v182)) {
      goto LABEL_187;
    }
    do
    {
LABEL_185:
      __break(1u);
LABEL_186:
      uint64_t v184 = HIBYTE(v178) & 0xF;
      int64_t v183 = v184 + v182;
    }
    while (__OFADD__(v184, v182));
    goto LABEL_187;
  }
  swift_bridgeObjectRetain_n(v44, 5);
  v319._Swift::UInt64 rawBits = 1;
  v320._Swift::UInt64 rawBits = (v138 << 16) | 1;
  v321._Swift::UInt64 rawBits = _StringGuts.validateScalarRange(_:)(v319, v320, v45, v44);
  if (v321._rawBits < 0x10000) {
    v321._rawBits |= 3;
  }
  Swift::Int v139 = specialized Collection.count.getter(v321, v322, v45, v44);
  swift_bridgeObjectRelease(v44);
  uint64_t countAndFlagsBits = v346._countAndFlagsBits;
  unint64_t object = (unint64_t)v346._object;
  if (((uint64_t)v346._object & 0x1000000000000000) != 0) {
    goto LABEL_322;
  }
LABEL_134:
  if ((object & 0x2000000000000000) != 0) {
    uint64_t v140 = HIBYTE(object) & 0xF;
  }
  else {
    uint64_t v140 = countAndFlagsBits & 0xFFFFFFFFFFFFLL;
  }
  int64_t v141 = v140 + v139;
  if (__OFADD__(v140, v139)) {
    goto LABEL_324;
  }
LABEL_138:
  if ((countAndFlagsBits & ~object & 0x2000000000000000) == 0
    || !swift_isUniquelyReferenced_nonNull_native(object & 0xFFFFFFFFFFFFFFFLL))
  {
    if (v141 > 15) {
      goto LABEL_144;
    }
LABEL_148:
    swift_bridgeObjectRelease_n(v44, 5);
    unint64_t v147 = v346._countAndFlagsBits;
    unint64_t v148 = v346._object;
    swift_bridgeObjectRetain((unint64_t)v346._object);
    unint64_t v149 = _StringGuts._convertedToSmall()(v147, (unint64_t)v148);
    unint64_t v151 = v150;
    swift_bridgeObjectRelease((uint64_t)v148);
    v152._Swift::UInt64 rawBits = (v138 << 16) | 1;
    v153._Swift::UInt64 rawBits = 1;
    v154._Swift::UInt64 rawBits = _StringGuts.validateScalarRange(_:)(v153, v152, v45, v44);
    if (v154._rawBits < 0x10000) {
      v154._rawBits |= 3;
    }
    unint64_t v156 = specialized String.init(_:)(v154, v155, v45, v44);
    unint64_t v158 = v157;
    swift_bridgeObjectRelease(v44);
    unint64_t v159 = _StringGuts._convertedToSmall()(v156, v158);
    unint64_t v161 = v160;
    swift_bridgeObjectRelease(v158);
    unint64_t v162 = specialized _SmallString.init(_:appending:)(v149, v151, v159, v161);
    unint64_t v7 = v340;
    if (v164) {
      goto LABEL_345;
    }
    uint64_t v165 = v162;
    unint64_t v166 = v163;
    swift_bridgeObjectRelease(v44);
    uint64_t v167 = (uint64_t)v346._object;
    v346._uint64_t countAndFlagsBits = v165;
    v346._unint64_t object = v166;
    goto LABEL_154;
  }
  unint64_t v142 = (unint64_t)v346._object;
  int64_t v143 = _StringGuts.nativeUnusedCapacity.getter(v346._countAndFlagsBits, (uint64_t)v346._object);
  if (v144) {
    goto LABEL_346;
  }
  if (v141 <= 15 && ((v142 & 0x2000000000000000) != 0 || v143 < v139)) {
    goto LABEL_148;
  }
LABEL_144:
  _StringGuts.prepareForAppendInPlace(totalCount:otherUTF8Count:)(v141, v139);
  swift_bridgeObjectRelease_n(v44, 4);
  if ((v44 & 0x1000000000000000) != 0)
  {
    swift_bridgeObjectRelease(v44);
    _StringGuts._foreignAppendInPlace(_:)(v45, v44, 0, v138);
    swift_bridgeObjectRelease_n(v44, 2);
    unint64_t v7 = v340;
LABEL_155:
    unint64_t object = v342;
    goto LABEL_156;
  }
  unint64_t object = v342;
  if (v7)
  {
    swift_bridgeObjectRelease_n(v44, 2);
    uint64_t v344 = v45;
    unint64_t v345 = v44 & 0xFFFFFFFFFFFFFFLL;
    Swift::String::Index v145 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, HIBYTE(v44) & 0xF, (uint64_t)&v344, HIBYTE(v44) & 0xF);
    _StringGuts.appendInPlace(_:isASCII:)(v145, v146, (v44 & 0x4000000000000000) != 0);
    unint64_t v7 = v340;
    swift_bridgeObjectRelease(v44);
    goto LABEL_156;
  }
  if ((v45 & 0x1000000000000000) != 0)
  {
    swift_bridgeObjectRelease(v44);
    id v234 = (id)((v44 & 0xFFFFFFFFFFFFFFFLL) + 32);
    uint64_t v235 = v45 & 0xFFFFFFFFFFFFLL;
    unint64_t v7 = v340;
    uint64_t v236 = v45 & 0xFFFFFFFFFFFFLL;
    goto LABEL_228;
  }
  id v234 = _StringObject.sharedUTF8.getter(v45, v44);
  uint64_t v236 = v336;
  swift_bridgeObjectRelease(v44);
  if (v236 < (v45 & 0xFFFFFFFFFFFFLL)) {
    goto LABEL_344;
  }
  uint64_t v235 = v45 & 0xFFFFFFFFFFFFLL;
  unint64_t v7 = v340;
  unint64_t object = v342;
LABEL_228:
  v237 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, v235, (uint64_t)v234, v236);
  _StringGuts.appendInPlace(_:isASCII:)(v237, v238, v45 < 0);
  swift_bridgeObjectRelease_n(v44, 2);
LABEL_156:
  Swift::String v168 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("(stringValue: \"", 0xFuLL, 1);
  Swift::String::Index v169 = v346._object;
  unint64_t v170 = ((unint64_t)v346._object >> 56) & 0xF;
  if (((uint64_t)v346._object & 0x2000000000000000) == 0) {
    unint64_t v170 = v346._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
  }
  if (!v170 && (v346._countAndFlagsBits & ~(uint64_t)v346._object & 0x2000000000000000) == 0)
  {
    Swift::String v346 = v168;
    swift_bridgeObjectRelease((uint64_t)v169);
    goto LABEL_169;
  }
  if (((uint64_t)v346._object & 0x2000000000000000) != 0)
  {
    if (((uint64_t)v168._object & 0x2000000000000000) != 0)
    {
      unint64_t v172 = specialized _SmallString.init(_:appending:)(v346._countAndFlagsBits, (unint64_t)v346._object, v168._countAndFlagsBits, (unint64_t)v168._object);
      if (v174) {
        goto LABEL_167;
      }
      uint64_t v175 = v172;
      Swift::String::Index v176 = v173;
      swift_bridgeObjectRelease((uint64_t)v168._object);
      swift_bridgeObjectRelease((uint64_t)v346._object);
      v346._uint64_t countAndFlagsBits = v175;
      v346._unint64_t object = v176;
      goto LABEL_169;
    }
LABEL_164:
    uint64_t v171 = v168._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
    goto LABEL_168;
  }
  if (((uint64_t)v168._object & 0x2000000000000000) == 0) {
    goto LABEL_164;
  }
LABEL_167:
  uint64_t v171 = ((unint64_t)v168._object >> 56) & 0xF;
LABEL_168:
  swift_bridgeObjectRetain((unint64_t)v168._object);
  _StringGuts.append(_:)(v168._countAndFlagsBits, (unint64_t)v168._object, 0, v171);
  swift_bridgeObjectRelease_n((uint64_t)v168._object, 2);
LABEL_169:
  uint64_t v177 = v346._countAndFlagsBits;
  unint64_t v178 = (unint64_t)v346._object;
  unint64_t v179 = ((unint64_t)v346._object >> 56) & 0xF;
  unint64_t v180 = v346._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
  if (((uint64_t)v346._object & 0x2000000000000000) != 0) {
    unint64_t v180 = ((unint64_t)v346._object >> 56) & 0xF;
  }
  if (!v180 && (v346._countAndFlagsBits & ~(uint64_t)v346._object & 0x2000000000000000) == 0)
  {
    v346._uint64_t countAndFlagsBits = v341;
    v346._unint64_t object = (void *)object;
    swift_bridgeObjectRetain(object);
LABEL_204:
    uint64_t v210 = v178;
    goto LABEL_205;
  }
  int64_t v141 = object & 0x2000000000000000;
  unint64_t v44 = HIBYTE(object) & 0xF;
  if (((uint64_t)v346._object & 0x2000000000000000) == 0 || !v141) {
    goto LABEL_177;
  }
  unint64_t v181 = v179 + v44;
  if (v179 + v44 <= 0xF)
  {
    if (v44)
    {
      char v222 = 0;
      unint64_t v223 = 0;
      unint64_t v224 = (unint64_t)v346._object;
      do
      {
        unint64_t v225 = v179 + v223;
        unint64_t v226 = v223 + 1;
        if (v223 >= 8) {
          unint64_t v227 = object;
        }
        else {
          unint64_t v227 = v341;
        }
        unint64_t v228 = v227 >> (v222 & 0x38);
        char v229 = (8 * v179 + v222) & 0x38;
        uint64_t v230 = (-255 << v229) - 1;
        unint64_t v231 = (unint64_t)v228 << v229;
        unint64_t v232 = v231 | v230 & v224;
        unint64_t v233 = v231 | v230 & v177;
        if (v225 < 8) {
          uint64_t v177 = v233;
        }
        else {
          unint64_t v224 = v232;
        }
        v222 += 8;
        unint64_t v223 = v226;
      }
      while (v44 != v226);
    }
    else
    {
      unint64_t v224 = (unint64_t)v346._object;
    }
    swift_bridgeObjectRelease((uint64_t)v346._object);
    unint64_t v246 = 0xA000000000000000;
    if (!(v177 & 0x8080808080808080 | v224 & 0x80808080808080)) {
      unint64_t v246 = 0xE000000000000000;
    }
    v346._uint64_t countAndFlagsBits = v177;
    v346._unint64_t object = (void *)(v246 & 0xFF00000000000000 | (v181 << 56) | v224 & 0xFFFFFFFFFFFFFFLL);
    goto LABEL_241;
  }
  int64_t v141 = 1;
LABEL_177:
  uint64_t v136 = v341 & 0xFFFFFFFFFFFFLL;
  if (v141) {
    uint64_t v45 = HIBYTE(object) & 0xF;
  }
  else {
    uint64_t v45 = v341 & 0xFFFFFFFFFFFFLL;
  }
  swift_bridgeObjectRetain_n(object, 3);
  if ((object & 0x1000000000000000) != 0) {
    goto LABEL_325;
  }
  swift_bridgeObjectRetain_n(object, 4);
  int64_t v182 = v45;
  if ((v178 & 0x1000000000000000) == 0) {
    goto LABEL_182;
  }
LABEL_328:
  Swift::Int v330 = String.UTF8View._foreignCount()();
  int64_t v183 = v330 + v182;
  if (__OFADD__(v330, v182)) {
    goto LABEL_185;
  }
LABEL_187:
  if ((v177 & ~v178 & 0x2000000000000000) == 0
    || !swift_isUniquelyReferenced_nonNull_native(v178 & 0xFFFFFFFFFFFFFFFLL))
  {
    if (v183 > 15) {
      goto LABEL_193;
    }
    goto LABEL_197;
  }
  unint64_t v185 = (unint64_t)v346._object;
  int64_t v186 = _StringGuts.nativeUnusedCapacity.getter(v346._countAndFlagsBits, (uint64_t)v346._object);
  if (v187) {
    goto LABEL_346;
  }
  if (v183 <= 15 && ((v185 & 0x2000000000000000) != 0 || v186 < v182))
  {
LABEL_197:
    swift_bridgeObjectRelease_n(v342, 5);
    unint64_t v190 = v346._countAndFlagsBits;
    Swift::String::Index v191 = v346._object;
    swift_bridgeObjectRetain((unint64_t)v346._object);
    unint64_t v192 = _StringGuts._convertedToSmall()(v190, (unint64_t)v191);
    unint64_t v194 = v193;
    swift_bridgeObjectRelease((uint64_t)v191);
    v195._Swift::UInt64 rawBits = (v45 << 16) | 1;
    v196._Swift::UInt64 rawBits = 1;
    v197._Swift::UInt64 rawBits = _StringGuts.validateScalarRange(_:)(v196, v195, v341, v342);
    if (v197._rawBits < 0x10000) {
      v197._rawBits |= 3;
    }
    unint64_t v199 = specialized String.init(_:)(v197, v198, v341, v342);
    unint64_t v201 = v200;
    swift_bridgeObjectRelease(v342);
    unint64_t v202 = _StringGuts._convertedToSmall()(v199, v201);
    unint64_t v204 = v203;
    swift_bridgeObjectRelease(v201);
    unint64_t v205 = specialized _SmallString.init(_:appending:)(v192, v194, v202, v204);
    if ((v207 & 1) == 0)
    {
      uint64_t v208 = v205;
      int v209 = v206;
      swift_bridgeObjectRelease(v342);
      uint64_t v210 = (uint64_t)v346._object;
      v346._uint64_t countAndFlagsBits = v208;
      v346._unint64_t object = v209;
LABEL_205:
      swift_bridgeObjectRelease(v210);
      goto LABEL_241;
    }
LABEL_345:
    unint64_t v339 = 266;
    goto LABEL_347;
  }
LABEL_193:
  _StringGuts.prepareForAppendInPlace(totalCount:otherUTF8Count:)(v183, v182);
  unint64_t v178 = v342;
  swift_bridgeObjectRelease_n(v342, 4);
  if ((v342 & 0x1000000000000000) != 0)
  {
    swift_bridgeObjectRelease(v342);
    _StringGuts._foreignAppendInPlace(_:)(v341, v342, 0, v45);
    goto LABEL_232;
  }
  if (v141)
  {
    swift_bridgeObjectRelease_n(v342, 2);
    uint64_t v344 = v341;
    unint64_t v345 = v342 & 0xFFFFFFFFFFFFFFLL;
    uint64_t v188 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, v44, (uint64_t)&v344, v44);
    _StringGuts.appendInPlace(_:isASCII:)(v188, v189, (v342 & 0x4000000000000000) != 0);
    goto LABEL_204;
  }
  uint64_t v239 = v341;
  if ((v341 & 0x1000000000000000) != 0)
  {
    swift_bridgeObjectRelease(v342);
    id v240 = (id)((v342 & 0xFFFFFFFFFFFFFFFLL) + 32);
    uint64_t v241 = v136;
    goto LABEL_231;
  }
  id v240 = _StringObject.sharedUTF8.getter(v341, v342);
  uint64_t v241 = v337;
  swift_bridgeObjectRelease(v342);
  if (v241 < v136) {
    goto LABEL_344;
  }
  unint64_t v7 = v340;
  uint64_t v239 = v341;
  unint64_t v178 = v342;
LABEL_231:
  int64_t v242 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, v136, (uint64_t)v240, v241);
  _StringGuts.appendInPlace(_:isASCII:)(v242, v243, v239 < 0);
LABEL_232:
  swift_bridgeObjectRelease_n(v178, 2);
LABEL_241:
  Swift::String v247 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("\", intValue: ", 0xDuLL, 1);
  v248 = v346._object;
  unint64_t v249 = ((unint64_t)v346._object >> 56) & 0xF;
  if (((uint64_t)v346._object & 0x2000000000000000) == 0) {
    unint64_t v249 = v346._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
  }
  if (!v249 && (v346._countAndFlagsBits & ~(uint64_t)v346._object & 0x2000000000000000) == 0)
  {
    Swift::String v346 = v247;
    swift_bridgeObjectRelease((uint64_t)v248);
    goto LABEL_254;
  }
  if (((uint64_t)v346._object & 0x2000000000000000) != 0)
  {
    if (((uint64_t)v247._object & 0x2000000000000000) != 0)
    {
      unint64_t v251 = specialized _SmallString.init(_:appending:)(v346._countAndFlagsBits, (unint64_t)v346._object, v247._countAndFlagsBits, (unint64_t)v247._object);
      if (v253) {
        goto LABEL_252;
      }
      uint64_t v254 = v251;
      v255 = v252;
      swift_bridgeObjectRelease((uint64_t)v247._object);
      swift_bridgeObjectRelease((uint64_t)v346._object);
      v346._uint64_t countAndFlagsBits = v254;
      v346._unint64_t object = v255;
      goto LABEL_254;
    }
LABEL_249:
    uint64_t v250 = v247._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
    goto LABEL_253;
  }
  if (((uint64_t)v247._object & 0x2000000000000000) == 0) {
    goto LABEL_249;
  }
LABEL_252:
  uint64_t v250 = ((unint64_t)v247._object >> 56) & 0xF;
LABEL_253:
  swift_bridgeObjectRetain((unint64_t)v247._object);
  _StringGuts.append(_:)(v247._countAndFlagsBits, (unint64_t)v247._object, 0, v250);
  swift_bridgeObjectRelease_n((uint64_t)v247._object, 2);
LABEL_254:
  uint64_t v256 = v346._countAndFlagsBits;
  unint64_t v257 = (unint64_t)v346._object;
  unint64_t v258 = ((unint64_t)v346._object >> 56) & 0xF;
  unint64_t v259 = v346._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
  if (((uint64_t)v346._object & 0x2000000000000000) != 0) {
    unint64_t v259 = ((unint64_t)v346._object >> 56) & 0xF;
  }
  if (!v259 && (v346._countAndFlagsBits & ~(uint64_t)v346._object & 0x2000000000000000) == 0)
  {
    v346._uint64_t countAndFlagsBits = v343;
    v346._unint64_t object = (void *)v7;
    uint64_t v273 = v257;
    goto LABEL_289;
  }
  uint64_t v260 = v7 & 0x2000000000000000;
  uint64_t v261 = HIBYTE(v7) & 0xF;
  if (((uint64_t)v346._object & 0x2000000000000000) == 0 || !v260) {
    goto LABEL_262;
  }
  unint64_t v262 = v258 + v261;
  if (v258 + v261 <= 0xF)
  {
    if (v261)
    {
      char v294 = 0;
      unint64_t v295 = 0;
      do
      {
        unint64_t v296 = v258 + v295;
        unint64_t v297 = v295 + 1;
        if (v295 >= 8) {
          unint64_t v298 = v7;
        }
        else {
          unint64_t v298 = v343;
        }
        unint64_t v299 = v298 >> (v294 & 0x38);
        char v300 = (8 * v258 + v294) & 0x38;
        uint64_t v301 = (-255 << v300) - 1;
        unint64_t v302 = (unint64_t)v299 << v300;
        unint64_t v303 = v302 | v301 & v257;
        unint64_t v304 = v302 | v301 & v256;
        if (v296 < 8) {
          uint64_t v256 = v304;
        }
        else {
          unint64_t v257 = v303;
        }
        v294 += 8;
        unint64_t v295 = v297;
      }
      while (v261 != v297);
    }
    swift_bridgeObjectRelease(v7);
    unint64_t v305 = 0xA000000000000000;
    if (!(v256 & 0x8080808080808080 | v257 & 0x80808080808080)) {
      unint64_t v305 = 0xE000000000000000;
    }
    v306 = (void *)(v305 & 0xFF00000000000000 | (v262 << 56) | v257 & 0xFFFFFFFFFFFFFFLL);
    swift_bridgeObjectRelease((uint64_t)v346._object);
    v346._uint64_t countAndFlagsBits = v256;
    v346._unint64_t object = v306;
    goto LABEL_306;
  }
  uint64_t v260 = 1;
LABEL_262:
  uint64_t v263 = v343 & 0xFFFFFFFFFFFFLL;
  if (v260) {
    uint64_t v264 = HIBYTE(v7) & 0xF;
  }
  else {
    uint64_t v264 = v343 & 0xFFFFFFFFFFFFLL;
  }
  swift_bridgeObjectRetain_n(v7, 2);
  if ((v7 & 0x1000000000000000) == 0)
  {
    swift_bridgeObjectRetain_n(v7, 4);
    Swift::Int v265 = v264;
    if ((v257 & 0x1000000000000000) == 0) {
      goto LABEL_267;
    }
LABEL_334:
    Swift::Int v335 = String.UTF8View._foreignCount()();
    int64_t v266 = v335 + v265;
    if (!__OFADD__(v335, v265)) {
      goto LABEL_272;
    }
    do
    {
LABEL_270:
      __break(1u);
LABEL_271:
      uint64_t v267 = HIBYTE(v257) & 0xF;
      int64_t v266 = v267 + v265;
    }
    while (__OFADD__(v267, v265));
    goto LABEL_272;
  }
  swift_bridgeObjectRetain_n(v7, 5);
  v331._Swift::UInt64 rawBits = 1;
  v332._Swift::UInt64 rawBits = (v264 << 16) | 1;
  v333._Swift::UInt64 rawBits = _StringGuts.validateScalarRange(_:)(v331, v332, v343, v7);
  if (v333._rawBits < 0x10000) {
    v333._rawBits |= 3;
  }
  Swift::Int v265 = specialized Collection.count.getter(v333, v334, v343, v7);
  swift_bridgeObjectRelease(v7);
  uint64_t v256 = v346._countAndFlagsBits;
  unint64_t v257 = (unint64_t)v346._object;
  if (((uint64_t)v346._object & 0x1000000000000000) != 0) {
    goto LABEL_334;
  }
LABEL_267:
  if ((v257 & 0x2000000000000000) != 0) {
    goto LABEL_271;
  }
  int64_t v266 = (v256 & 0xFFFFFFFFFFFFLL) + v265;
  if (__OFADD__(v256 & 0xFFFFFFFFFFFFLL, v265)) {
    goto LABEL_270;
  }
LABEL_272:
  if ((v256 & ~v257 & 0x2000000000000000) == 0
    || !swift_isUniquelyReferenced_nonNull_native(v257 & 0xFFFFFFFFFFFFFFFLL))
  {
    if (v266 > 15) {
      goto LABEL_278;
    }
LABEL_282:
    swift_bridgeObjectRelease_n(v7, 5);
    unint64_t v274 = v346._countAndFlagsBits;
    v275 = v346._object;
    swift_bridgeObjectRetain((unint64_t)v346._object);
    unint64_t v276 = _StringGuts._convertedToSmall()(v274, (unint64_t)v275);
    unint64_t v278 = v277;
    swift_bridgeObjectRelease((uint64_t)v275);
    v279._Swift::UInt64 rawBits = (v264 << 16) | 1;
    v280._Swift::UInt64 rawBits = 1;
    v281._Swift::UInt64 rawBits = _StringGuts.validateScalarRange(_:)(v280, v279, v343, v7);
    if (v281._rawBits < 0x10000) {
      v281._rawBits |= 3;
    }
    unint64_t v283 = specialized String.init(_:)(v281, v282, v343, v7);
    unint64_t v285 = v284;
    swift_bridgeObjectRelease(v7);
    unint64_t v286 = _StringGuts._convertedToSmall()(v283, v285);
    unint64_t v288 = v287;
    swift_bridgeObjectRelease(v285);
    unint64_t v289 = specialized _SmallString.init(_:appending:)(v276, v278, v286, v288);
    if ((v291 & 1) == 0)
    {
      uint64_t v292 = v289;
      v293 = v290;
      swift_bridgeObjectRelease(v7);
      uint64_t v273 = (uint64_t)v346._object;
      v346._uint64_t countAndFlagsBits = v292;
      v346._unint64_t object = v293;
LABEL_289:
      swift_bridgeObjectRelease(v273);
      goto LABEL_306;
    }
    goto LABEL_345;
  }
  unint64_t v268 = (unint64_t)v346._object;
  int64_t v269 = _StringGuts.nativeUnusedCapacity.getter(v346._countAndFlagsBits, (uint64_t)v346._object);
  if (v270)
  {
LABEL_346:
    unint64_t v339 = 258;
LABEL_347:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/StringGutsRangeReplaceable.swift", 38, 2, v339, 0);
  }
  if (v266 <= 15 && ((v268 & 0x2000000000000000) != 0 || v269 < v265)) {
    goto LABEL_282;
  }
LABEL_278:
  _StringGuts.prepareForAppendInPlace(totalCount:otherUTF8Count:)(v266, v265);
  swift_bridgeObjectRelease_n(v7, 4);
  if ((v7 & 0x1000000000000000) != 0)
  {
    swift_bridgeObjectRelease(v7);
    _StringGuts._foreignAppendInPlace(_:)(v343, v7, 0, v264);
  }
  else
  {
    if (v260)
    {
      swift_bridgeObjectRelease_n(v7, 2);
      uint64_t v344 = v343;
      unint64_t v345 = v7 & 0xFFFFFFFFFFFFFFLL;
      v271 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, HIBYTE(v7) & 0xF, (uint64_t)&v344, HIBYTE(v7) & 0xF);
      _StringGuts.appendInPlace(_:isASCII:)(v271, v272, (v7 & 0x4000000000000000) != 0);
      uint64_t v273 = v7;
      goto LABEL_289;
    }
    if ((v343 & 0x1000000000000000) != 0)
    {
      swift_bridgeObjectRelease(v7);
      id v307 = (id)((v7 & 0xFFFFFFFFFFFFFFFLL) + 32);
      uint64_t v308 = v343 & 0xFFFFFFFFFFFFLL;
      goto LABEL_304;
    }
    id v307 = _StringObject.sharedUTF8.getter(v343, v7);
    uint64_t v308 = v338;
    swift_bridgeObjectRelease(v7);
    if (v308 < v263) {
LABEL_344:
    }
      _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x745uLL, 0);
    unint64_t v7 = v340;
LABEL_304:
    v309 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, v263, (uint64_t)v307, v308);
    _StringGuts.appendInPlace(_:isASCII:)(v309, v310, v343 < 0);
  }
  swift_bridgeObjectRelease_n(v7, 2);
LABEL_306:
  v311 = v346._object;
  unint64_t v312 = ((unint64_t)v346._object >> 56) & 0xF;
  if (((uint64_t)v346._object & 0x2000000000000000) == 0) {
    unint64_t v312 = v346._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
  }
  if (v312 || (v346._countAndFlagsBits & ~(uint64_t)v346._object & 0x2000000000000000) != 0)
  {
    if (((uint64_t)v346._object & 0x2000000000000000) == 0
      || (unint64_t v313 = specialized _SmallString.init(_:appending:)(v346._countAndFlagsBits, (unint64_t)v346._object, 0x29uLL, 0xE100000000000000), (v315 & 1) != 0))
    {
      swift_bridgeObjectRetain(0xE100000000000000);
      _StringGuts.append(_:)(41, 0xE100000000000000, 0, 1);
      swift_bridgeObjectRelease_n(0xE100000000000000, 2);
    }
    else
    {
      uint64_t v316 = v313;
      v317 = v314;
      swift_bridgeObjectRelease(0xE100000000000000);
      swift_bridgeObjectRelease((uint64_t)v346._object);
      v346._uint64_t countAndFlagsBits = v316;
      v346._unint64_t object = v317;
    }
  }
  else
  {
    v346._uint64_t countAndFlagsBits = 41;
    v346._unint64_t object = (void *)0xE100000000000000;
    swift_bridgeObjectRelease((uint64_t)v311);
  }
  return v346._countAndFlagsBits;
}

uint64_t specialized CodingKey.description.getter(uint64_t a1, void *a2, uint64_t a3, char a4)
{
  v337._unint64_t object = a2;
  if (a4)
  {
    unint64_t v7 = 0xE300000000000000;
    unint64_t v5 = 7104878;
  }
  else
  {
    unint64_t v5 = _int64ToString(_:radix:uppercase:)(a3, 10, 0, (uint64_t (*)(long long *, uint64_t, uint64_t, uint64_t, void))swift_int64ToString);
    unint64_t v7 = v6;
  }
  unint64_t v336 = v5;
  uint64_t v8 = specialized static String._createEmpty(withInitialCapacity:)(35);
  unint64_t v10 = v8;
  unint64_t v11 = v9;
  v340._uint64_t countAndFlagsBits = v8;
  v340._unint64_t object = (void *)v9;
  uint64_t v12 = HIBYTE(v9) & 0xF;
  int64_t v13 = v8 & 0xFFFFFFFFFFFFLL;
  if ((v9 & 0x2000000000000000) != 0) {
    uint64_t v14 = HIBYTE(v9) & 0xF;
  }
  else {
    uint64_t v14 = v8 & 0xFFFFFFFFFFFFLL;
  }
  if (!v14 && (v8 & ~v9 & 0x2000000000000000) == 0)
  {
    v340._uint64_t countAndFlagsBits = 0;
    v340._unint64_t object = (void *)0xE000000000000000;
LABEL_24:
    uint64_t v36 = v11;
LABEL_28:
    swift_bridgeObjectRelease(v36);
    goto LABEL_29;
  }
  if ((v9 & 0x2000000000000000) == 0)
  {
    swift_bridgeObjectRetain_n(0xE000000000000000, 6);
    if ((v11 & 0x1000000000000000) != 0)
    {
      int64_t v13 = String.UTF8View._foreignCount()();
      if ((v10 & ~v11 & 0x2000000000000000) == 0) {
        goto LABEL_26;
      }
    }
    else if ((v10 & ~v11 & 0x2000000000000000) == 0)
    {
      goto LABEL_26;
    }
    if (swift_isUniquelyReferenced_nonNull_native(v11 & 0xFFFFFFFFFFFFFFFLL))
    {
      unint64_t v15 = _StringGuts.nativeUnusedCapacity.getter(v10, v11);
      if (v16) {
        goto LABEL_344;
      }
      if (v13 <= 15 && (v15 & 0x8000000000000000) != 0) {
        goto LABEL_16;
      }
      goto LABEL_27;
    }
LABEL_26:
    if (v13 <= 15)
    {
LABEL_16:
      swift_bridgeObjectRelease_n(0xE000000000000000, 5);
      swift_bridgeObjectRetain(v11);
      unint64_t v17 = _StringGuts._convertedToSmall()(v10, v11);
      unint64_t v19 = v18;
      swift_bridgeObjectRelease(v11);
      v20._Swift::UInt64 rawBits = 1;
      v21._Swift::UInt64 rawBits = 1;
      v22._Swift::UInt64 rawBits = _StringGuts.validateScalarRange(_:)(v20, v21, 0, 0xE000000000000000);
      if (v22._rawBits < 0x10000) {
        v22._rawBits |= 3;
      }
      unint64_t v24 = specialized String.init(_:)(v22, v23, 0, 0xE000000000000000);
      unint64_t v26 = v25;
      swift_bridgeObjectRelease(0xE000000000000000);
      unint64_t v27 = _StringGuts._convertedToSmall()(v24, v26);
      unint64_t v29 = v28;
      swift_bridgeObjectRelease(v26);
      unint64_t v30 = specialized _SmallString.init(_:appending:)(v17, v19, v27, v29);
      if (v32) {
        goto LABEL_343;
      }
      uint64_t v33 = v30;
      unint64_t v34 = v31;
      swift_bridgeObjectRelease(0xE000000000000000);
      v340._uint64_t countAndFlagsBits = v33;
      v340._unint64_t object = v34;
      goto LABEL_24;
    }
LABEL_27:
    _StringGuts.prepareForAppendInPlace(totalCount:otherUTF8Count:)(v13, 0);
    swift_bridgeObjectRelease_n(0xE000000000000000, 6);
    uint64_t v338 = 0;
    unint64_t v339 = 0;
    Swift::String::Index v37 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, 0, (uint64_t)&v338, 0);
    _StringGuts.appendInPlace(_:isASCII:)(v37, v38, 1);
    uint64_t v36 = 0xE000000000000000;
    goto LABEL_28;
  }
  swift_bridgeObjectRelease(v9);
  swift_bridgeObjectRelease(0xE000000000000000);
  unint64_t v35 = 0xA000000000000000;
  if (!(v11 & 0x80808080808080 | v10 & 0x8080808080808080)) {
    unint64_t v35 = 0xE000000000000000;
  }
  v340._uint64_t countAndFlagsBits = v10;
  v340._unint64_t object = (void *)(v35 & 0xFF00000000000000 | (v12 << 56) | v11 & 0xFFFFFFFFFFFFFFLL);
LABEL_29:
  TypeName = (uint64_t *)swift_getTypeName((Class *)&type metadata for _GenericIndexKey, 0);
  if (v40 < 0) {
    goto LABEL_316;
  }
  unint64_t v41 = (uint8x16_t *)TypeName;
  uint64_t v42 = v40;
  unint64_t v335 = v7;
  v337._uint64_t countAndFlagsBits = a1;
  if (_allASCII(_:)(TypeName, v40))
  {
    char v43 = 1;
LABEL_32:
    if (!v42)
    {
      uint64_t v45 = 0;
      unint64_t v44 = 0xE000000000000000;
      goto LABEL_121;
    }
    if (v42 > 15)
    {
      unint64_t v44 = specialized static __StringStorage.create(initializingFrom:codeUnitCapacity:isASCII:)(v41->i8, v42, v42, v43 & 1);
      uint64_t v45 = *(void *)(v44 + 24);
      goto LABEL_121;
    }
    uint64_t v84 = v42 - 8;
    unint64_t v85 = 8;
    if (v42 < 8) {
      unint64_t v85 = v42;
    }
    if ((v85 & 0x8000000000000000) == 0)
    {
      if (v85 >= 8)
      {
        if (v85 >= 0x10)
        {
          unint64_t v86 = v85 & 0xFFFFFFFFFFFFFFF0;
          uint16x8_t v111 = vmovl_high_u8(*v41);
          int8x16_t v112 = (int8x16_t)vmovl_u16(*(uint16x4_t *)v111.i8);
          uint16x8_t v113 = vmovl_u8(*(uint8x8_t *)v41->i8);
          int8x16_t v114 = (int8x16_t)vmovl_u16(*(uint16x4_t *)v113.i8);
          int8x16_t v115 = (int8x16_t)vmovl_high_u16(v111);
          int8x8_t v116 = (int8x8_t)vextq_s8(v115, v115, 8uLL).u64[0];
          int8x16_t v117 = (int8x16_t)vmovl_high_u16(v113);
          int8x8_t v118 = (int8x8_t)vextq_s8(v117, v117, 8uLL).u64[0];
          *(int8x8_t *)v117.i8 = vorr_s8(*(int8x8_t *)v117.i8, *(int8x8_t *)v115.i8);
          v119.i64[0] = v117.u32[0];
          v119.i64[1] = v117.u32[1];
          int8x16_t v120 = (int8x16_t)vshlq_u64(v119, (uint64x2_t)xmmword_18162AD00);
          *(int8x8_t *)v115.i8 = vorr_s8(*(int8x8_t *)v114.i8, *(int8x8_t *)v112.i8);
          v119.i64[0] = v115.u32[0];
          v119.i64[1] = v115.u32[1];
          int8x16_t v121 = vorrq_s8((int8x16_t)vshlq_u64(v119, (uint64x2_t)xmmword_18162ACF0), v120);
          *(int8x8_t *)v115.i8 = vorr_s8(v118, v116);
          v119.i64[0] = v115.u32[0];
          v119.i64[1] = v115.u32[1];
          int8x16_t v122 = (int8x16_t)vshlq_u64(v119, (uint64x2_t)xmmword_18162ACE0);
          *(int8x8_t *)v112.i8 = vorr_s8((int8x8_t)*(_OWORD *)&vextq_s8(v114, v114, 8uLL), (int8x8_t)*(_OWORD *)&vextq_s8(v112, v112, 8uLL));
          v119.i64[0] = v112.u32[0];
          v119.i64[1] = v112.u32[1];
          int8x16_t v123 = vorrq_s8(v121, vorrq_s8((int8x16_t)vshlq_u64(v119, (uint64x2_t)xmmword_18162ACD0), v122));
          uint64_t v45 = (uint64_t)vorr_s8(*(int8x8_t *)v123.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v123, v123, 8uLL));
          if (v85 == (v85 & 0xFFFFFFFFFFFFFFF0)) {
            goto LABEL_113;
          }
          unint64_t v87 = 8 * v86;
          if ((v85 & 8) == 0) {
            goto LABEL_111;
          }
        }
        else
        {
          uint64_t v45 = 0;
          unint64_t v87 = 0;
          unint64_t v86 = 0;
        }
        unint64_t v88 = v86;
        int64x2_t v89 = vdupq_n_s64(v87);
        unint64_t v86 = v85 & 0xFFFFFFFFFFFFFFF8;
        unint64_t v87 = 8 * (v85 & 0xFFFFFFFFFFFFFFF8);
        int8x16_t v90 = 0uLL;
        int8x16_t v91 = (int8x16_t)(unint64_t)v45;
        int64x2_t v92 = vaddq_s64(v89, (int64x2_t)xmmword_18162ACE0);
        int64x2_t v93 = vaddq_s64(v89, (int64x2_t)xmmword_18162AD00);
        int64x2_t v94 = vaddq_s64(v89, (int64x2_t)xmmword_18162ACD0);
        int64x2_t v95 = vaddq_s64(v89, (int64x2_t)xmmword_18162ACF0);
        uint64_t v96 = (uint8x8_t *)&v41->i8[v88];
        int8x16_t v97 = (int8x16_t)vdupq_n_s64(0x38uLL);
        unint64_t v98 = v88 - (v85 & 0xFFFFFFFFFFFFFFF8);
        int64x2_t v99 = vdupq_n_s64(0x40uLL);
        int8x16_t v100 = 0uLL;
        int8x16_t v101 = 0uLL;
        do
        {
          uint8x8_t v102 = *v96++;
          uint16x8_t v103 = vmovl_u8(v102);
          uint32x4_t v104 = vmovl_high_u16(v103);
          v105.i64[0] = v104.u32[2];
          v105.i64[1] = v104.u32[3];
          uint64x2_t v106 = v105;
          v105.i64[0] = v104.u32[0];
          v105.i64[1] = v104.u32[1];
          uint64x2_t v107 = v105;
          uint32x4_t v108 = vmovl_u16(*(uint16x4_t *)v103.i8);
          v105.i64[0] = v108.u32[2];
          v105.i64[1] = v108.u32[3];
          uint64x2_t v109 = v105;
          v105.i64[0] = v108.u32[0];
          v105.i64[1] = v108.u32[1];
          int8x16_t v101 = vorrq_s8((int8x16_t)vshlq_u64(v106, (uint64x2_t)vandq_s8((int8x16_t)v92, v97)), v101);
          int8x16_t v100 = vorrq_s8((int8x16_t)vshlq_u64(v107, (uint64x2_t)vandq_s8((int8x16_t)v93, v97)), v100);
          int8x16_t v90 = vorrq_s8((int8x16_t)vshlq_u64(v109, (uint64x2_t)vandq_s8((int8x16_t)v94, v97)), v90);
          int8x16_t v91 = vorrq_s8((int8x16_t)vshlq_u64(v105, (uint64x2_t)vandq_s8((int8x16_t)v95, v97)), v91);
          int64x2_t v93 = vaddq_s64(v93, v99);
          int64x2_t v94 = vaddq_s64(v94, v99);
          int64x2_t v95 = vaddq_s64(v95, v99);
          int64x2_t v92 = vaddq_s64(v92, v99);
          v98 += 8;
        }
        while (v98);
        int8x16_t v110 = vorrq_s8(vorrq_s8(v91, v100), vorrq_s8(v90, v101));
        uint64_t v45 = (uint64_t)vorr_s8(*(int8x8_t *)v110.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v110, v110, 8uLL));
        if (v85 == v86)
        {
LABEL_113:
          if (v42 < 9)
          {
            uint64_t v127 = 0;
          }
          else
          {
            uint64_t v127 = 0;
            uint64_t v128 = 0;
            unint64_t v129 = &v41->u8[8];
            do
            {
              unsigned int v130 = *v129++;
              v127 |= (unint64_t)v130 << v128;
              v128 += 8;
              --v84;
            }
            while (v84);
          }
          unint64_t v131 = 0xA000000000000000;
          if (((v127 | v45) & 0x8080808080808080) == 0) {
            unint64_t v131 = 0xE000000000000000;
          }
          unint64_t v44 = v131 | (v42 << 56) | v127;
          goto LABEL_121;
        }
      }
      else
      {
        unint64_t v86 = 0;
        uint64_t v45 = 0;
        unint64_t v87 = 0;
      }
LABEL_111:
      unint64_t v124 = &v41->u8[v86];
      unint64_t v125 = v85 - v86;
      do
      {
        unsigned int v126 = *v124++;
        v45 |= (unint64_t)v126 << (v87 & 0x38);
        v87 += 8;
        --v125;
      }
      while (v125);
      goto LABEL_113;
    }
LABEL_336:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
  }
  uint64_t v46 = 0;
  unint64_t v47 = &v41->u8[v42];
  if (!v41) {
    unint64_t v47 = 0;
  }
  char v43 = 1;
  for (uint64_t i = v41; ; uint64_t i = (uint8x16_t *)((char *)i + 3))
  {
    while (1)
    {
      while (1)
      {
        while (1)
        {
          if (!i || i == (uint8x16_t *)v47) {
            goto LABEL_32;
          }
          unsigned int v50 = i->u8[0];
          uint64_t i = (uint8x16_t *)((char *)i + 1);
          unsigned int v49 = v50;
          if ((v49 & 0x80) != 0) {
            break;
          }
          ++v46;
        }
        if ((v49 + 62) > 0x32u) {
          goto LABEL_86;
        }
        if (v49 > 0xDF) {
          break;
        }
        if (!i || i == (uint8x16_t *)v47 || (i->i8[0] & 0xC0) != 0x80) {
          goto LABEL_86;
        }
        char v43 = 0;
        uint64_t i = (uint8x16_t *)((char *)i + 1);
        v46 += 2;
      }
      if (v49 != 224) {
        break;
      }
      if (!i) {
        goto LABEL_86;
      }
      if (i == (uint8x16_t *)v47) {
        goto LABEL_86;
      }
      unint64_t v51 = &i->u8[1];
      if ((i->i8[0] & 0xE0) != 0xA0) {
        goto LABEL_86;
      }
LABEL_64:
      if (v51 == v47 || (*v51 & 0xC0) != 0x80) {
        goto LABEL_86;
      }
      char v43 = 0;
      uint64_t i = (uint8x16_t *)((char *)i + 2);
      v46 += 3;
    }
    if (v49 < 0xED)
    {
LABEL_56:
      if (!i || i == (uint8x16_t *)v47) {
        goto LABEL_86;
      }
      unint64_t v51 = &i->u8[1];
      LOBYTE(v52) = i->i8[0];
LABEL_63:
      if ((v52 & 0xC0) != 0x80) {
        goto LABEL_86;
      }
      goto LABEL_64;
    }
    if (v49 == 237)
    {
      if (!i) {
        goto LABEL_86;
      }
      if (i == (uint8x16_t *)v47) {
        goto LABEL_86;
      }
      unint64_t v51 = &i->u8[1];
      unsigned int v52 = i->u8[0];
      if (v52 > 0x9F) {
        goto LABEL_86;
      }
      goto LABEL_63;
    }
    if (v49 < 0xF0) {
      goto LABEL_56;
    }
    if (v49 != 240) {
      break;
    }
    if (!i) {
      goto LABEL_86;
    }
    if (i == (uint8x16_t *)v47) {
      goto LABEL_86;
    }
    unint64_t v53 = &i->u8[1];
    if ((i->i8[0] + 64) < 0xD0u) {
      goto LABEL_86;
    }
LABEL_81:
    if (v53 == v47 || (i->i8[1] & 0xC0) != 0x80 || &i->i16[1] == (__int16 *)v47 || (i->i8[2] & 0xC0) != 0x80) {
      goto LABEL_86;
    }
    char v43 = 0;
    v46 += 4;
  }
  if ((v49 + 15) < 3u)
  {
    if (!i || i == (uint8x16_t *)v47) {
      goto LABEL_86;
    }
    unint64_t v53 = &i->u8[1];
    LOBYTE(v54) = i->i8[0];
    goto LABEL_80;
  }
  if (i)
  {
    if (i != (uint8x16_t *)v47)
    {
      unint64_t v53 = &i->u8[1];
      unsigned int v54 = i->u8[0];
      if (v54 <= 0x8F)
      {
LABEL_80:
        if ((v54 & 0xC0) != 0x80) {
          goto LABEL_86;
        }
        goto LABEL_81;
      }
    }
  }
LABEL_86:
  unint64_t v55 = swift_allocError((uint64_t)&unk_1EC9FFB80, (uint64_t)&protocol witness table for UTF8ValidationError, 0, 0);
  swift_willThrow();
  swift_errorRelease(v55);
  uint64_t v56 = specialized Collection.subscript.getter(v46, (uint64_t)v41, v42);
  uint64_t v61 = findInvalidRange #1 (_:) in validateUTF8(_:)(v56, v57, v58, v59);
  uint64_t v338 = 0;
  unint64_t v339 = 0xE000000000000000;
  if (__OFADD__(v42, 15))
  {
    __break(1u);
    goto LABEL_336;
  }
  uint64_t v62 = v60;
  _StringGuts.reserveCapacity(_:)(v42 + 15);
  while (2)
  {
    uint64_t v63 = specialized Collection.subscript.getter(v61, (uint64_t)v41, v42);
    uint64_t v67 = v338 & 0xFFFFFFFFFFFFLL;
    if ((v339 & 0x2000000000000000) != 0) {
      uint64_t v67 = HIBYTE(v339) & 0xF;
    }
    BOOL v68 = __OFADD__(v67, v42);
    uint64_t v69 = v67 + v42;
    if (v68)
    {
      __break(1u);
LABEL_315:
      __break(1u);
LABEL_316:
      _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeBufferPointer with negative count", 39, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x53FuLL, 0);
    }
    uint64_t v70 = v63;
    if (__OFADD__(v69, 3)) {
      goto LABEL_315;
    }
    uint64_t v71 = v64;
    uint64_t v72 = v65;
    uint64_t v73 = v66;
    _StringGuts.reserveCapacity(_:)(v69 + 3);
    unint64_t v74 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(v70, v71, v72, v73);
    _StringGuts.appendInPlace(_:isASCII:)(v74, v75, 0);
    size_t v341 = 3;
    uint64_t v342 = 12435439;
    specialized closure #1 in Unicode.Scalar.withUTF8CodeUnits<A>(_:)((char *)&v342, &v341, &v338);
    uint64_t v76 = specialized Collection.subscript.getter(v62, (uint64_t)v41, v42);
    unint64_t v41 = (uint8x16_t *)specialized UnsafeBufferPointer.init(rebasing:)(v76, v77, v78, v79);
    uint64_t v42 = v80;
    uint64_t v81 = validateUTF8(_:)(v41->i64, v80);
    if (v83)
    {
      uint64_t v61 = v81;
      uint64_t v62 = v82;
      if (!v42) {
        goto LABEL_102;
      }
      continue;
    }
    break;
  }
  _StringGuts.appendInPlace(_:isASCII:)(v41->i8, v42, 0);
LABEL_102:
  uint64_t v45 = v338;
  unint64_t v44 = v339;
LABEL_121:
  uint64_t countAndFlagsBits = v340._countAndFlagsBits;
  unint64_t object = (unint64_t)v340._object;
  unint64_t v134 = ((unint64_t)v340._object >> 56) & 0xF;
  unint64_t v135 = v340._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
  if (((uint64_t)v340._object & 0x2000000000000000) != 0) {
    unint64_t v135 = ((unint64_t)v340._object >> 56) & 0xF;
  }
  if (!v135 && (v340._countAndFlagsBits & ~(uint64_t)v340._object & 0x2000000000000000) == 0)
  {
    v340._uint64_t countAndFlagsBits = v45;
    v340._unint64_t object = (void *)v44;
    uint64_t v147 = object;
    goto LABEL_154;
  }
  unint64_t v7 = v44 & 0x2000000000000000;
  uint64_t v136 = HIBYTE(v44) & 0xF;
  if (((uint64_t)v340._object & 0x2000000000000000) == 0 || !v7) {
    goto LABEL_129;
  }
  unint64_t v137 = v134 + v136;
  if (v134 + v136 <= 0xF)
  {
    if (v136)
    {
      uint64_t v259 = 0;
      unint64_t v260 = 0;
      unint64_t v7 = v335;
      do
      {
        unint64_t v261 = v134 + v260;
        BOOL v262 = v260++ >= 8;
        if (v262) {
          unint64_t v263 = v44;
        }
        else {
          unint64_t v263 = v45;
        }
        char v264 = (8 * v134 + v259) & 0x38;
        uint64_t v265 = (-255 << v264) - 1;
        unint64_t v266 = (unint64_t)(v263 >> (v259 & 0x38)) << v264;
        unint64_t v267 = v266 | v265 & object;
        unint64_t v268 = v266 | v265 & countAndFlagsBits;
        if (v261 < 8) {
          uint64_t countAndFlagsBits = v268;
        }
        else {
          unint64_t object = v267;
        }
        v259 += 8;
      }
      while (8 * v136 != v259);
    }
    else
    {
      unint64_t v7 = v335;
    }
    swift_bridgeObjectRelease(v44);
    unint64_t v313 = 0xA000000000000000;
    if (!(countAndFlagsBits & 0x8080808080808080 | object & 0x80808080808080)) {
      unint64_t v313 = 0xE000000000000000;
    }
    v314 = (void *)(v313 & 0xFF00000000000000 | (v137 << 56) | object & 0xFFFFFFFFFFFFFFLL);
    swift_bridgeObjectRelease((uint64_t)v340._object);
    v340._uint64_t countAndFlagsBits = countAndFlagsBits;
    v340._unint64_t object = v314;
    goto LABEL_155;
  }
  unint64_t v7 = 1;
LABEL_129:
  if (v7) {
    uint64_t v138 = HIBYTE(v44) & 0xF;
  }
  else {
    uint64_t v138 = v45 & 0xFFFFFFFFFFFFLL;
  }
  swift_bridgeObjectRetain_n(v44, 2);
  if ((v44 & 0x1000000000000000) == 0)
  {
    swift_bridgeObjectRetain_n(v44, 4);
    Swift::Int v139 = v138;
    if ((object & 0x1000000000000000) == 0) {
      goto LABEL_134;
    }
LABEL_320:
    Swift::Int v140 = String.UTF8View._foreignCount()();
    int64_t v141 = v140 + v139;
    if (!__OFADD__(v140, v139)) {
      goto LABEL_138;
    }
LABEL_322:
    __break(1u);
LABEL_323:
    unint64_t v320 = v140;
    swift_bridgeObjectRetain_n(v140, 5);
    v321._Swift::UInt64 rawBits = 1;
    v322._Swift::UInt64 rawBits = (v45 << 16) | 1;
    v323._Swift::UInt64 rawBits = _StringGuts.validateScalarRange(_:)(v321, v322, v337._countAndFlagsBits, v320);
    if (v323._rawBits < 0x10000) {
      v323._rawBits |= 3;
    }
    Swift::Int v182 = specialized Collection.count.getter(v323, v324, v337._countAndFlagsBits, v320);
    swift_bridgeObjectRelease(v320);
    uint64_t v177 = v340._countAndFlagsBits;
    unint64_t v178 = (unint64_t)v340._object;
    if (((uint64_t)v340._object & 0x1000000000000000) != 0) {
      goto LABEL_326;
    }
LABEL_181:
    if ((v178 & 0x2000000000000000) != 0) {
      goto LABEL_185;
    }
    int64_t v183 = (v177 & 0xFFFFFFFFFFFFLL) + v182;
    if (!__OFADD__(v177 & 0xFFFFFFFFFFFFLL, v182)) {
      goto LABEL_186;
    }
    do
    {
LABEL_184:
      __break(1u);
LABEL_185:
      uint64_t v184 = HIBYTE(v178) & 0xF;
      int64_t v183 = v184 + v182;
    }
    while (__OFADD__(v184, v182));
    goto LABEL_186;
  }
  swift_bridgeObjectRetain_n(v44, 5);
  v316._Swift::UInt64 rawBits = 1;
  v317._Swift::UInt64 rawBits = (v138 << 16) | 1;
  v318._Swift::UInt64 rawBits = _StringGuts.validateScalarRange(_:)(v316, v317, v45, v44);
  if (v318._rawBits < 0x10000) {
    v318._rawBits |= 3;
  }
  Swift::Int v139 = specialized Collection.count.getter(v318, v319, v45, v44);
  swift_bridgeObjectRelease(v44);
  uint64_t countAndFlagsBits = v340._countAndFlagsBits;
  unint64_t object = (unint64_t)v340._object;
  if (((uint64_t)v340._object & 0x1000000000000000) != 0) {
    goto LABEL_320;
  }
LABEL_134:
  if ((object & 0x2000000000000000) != 0) {
    Swift::Int v140 = HIBYTE(object) & 0xF;
  }
  else {
    Swift::Int v140 = countAndFlagsBits & 0xFFFFFFFFFFFFLL;
  }
  int64_t v141 = v140 + v139;
  if (__OFADD__(v140, v139)) {
    goto LABEL_322;
  }
LABEL_138:
  if ((countAndFlagsBits & ~object & 0x2000000000000000) == 0
    || !swift_isUniquelyReferenced_nonNull_native(object & 0xFFFFFFFFFFFFFFFLL))
  {
    if (v141 > 15) {
      goto LABEL_144;
    }
    goto LABEL_148;
  }
  unint64_t v142 = (unint64_t)v340._object;
  int64_t v143 = _StringGuts.nativeUnusedCapacity.getter(v340._countAndFlagsBits, (uint64_t)v340._object);
  if (v144) {
    goto LABEL_344;
  }
  if (v141 < 16 && ((v142 & 0x2000000000000000) != 0 || v143 < v139))
  {
LABEL_148:
    swift_bridgeObjectRelease_n(v44, 5);
    unint64_t v148 = v340._countAndFlagsBits;
    unint64_t v149 = v340._object;
    swift_bridgeObjectRetain((unint64_t)v340._object);
    unint64_t v150 = _StringGuts._convertedToSmall()(v148, (unint64_t)v149);
    unint64_t v152 = v151;
    swift_bridgeObjectRelease((uint64_t)v149);
    v153._Swift::UInt64 rawBits = (v138 << 16) | 1;
    v154._Swift::UInt64 rawBits = 1;
    v155._Swift::UInt64 rawBits = _StringGuts.validateScalarRange(_:)(v154, v153, v45, v44);
    if (v155._rawBits < 0x10000) {
      v155._rawBits |= 3;
    }
    unint64_t v157 = specialized String.init(_:)(v155, v156, v45, v44);
    unint64_t v159 = v158;
    swift_bridgeObjectRelease(v44);
    unint64_t v160 = _StringGuts._convertedToSmall()(v157, v159);
    unint64_t v162 = v161;
    swift_bridgeObjectRelease(v159);
    unint64_t v163 = specialized _SmallString.init(_:appending:)(v150, v152, v160, v162);
    unint64_t v7 = v335;
    if ((v165 & 1) == 0)
    {
      uint64_t v166 = v163;
      uint64_t v167 = v164;
      swift_bridgeObjectRelease(v44);
      uint64_t v147 = (uint64_t)v340._object;
      v340._uint64_t countAndFlagsBits = v166;
      v340._unint64_t object = v167;
LABEL_154:
      swift_bridgeObjectRelease(v147);
      goto LABEL_155;
    }
LABEL_343:
    unint64_t v334 = 266;
    goto LABEL_345;
  }
LABEL_144:
  _StringGuts.prepareForAppendInPlace(totalCount:otherUTF8Count:)(v141, v139);
  swift_bridgeObjectRelease_n(v44, 4);
  if ((v44 & 0x1000000000000000) != 0)
  {
    swift_bridgeObjectRelease(v44);
    _StringGuts._foreignAppendInPlace(_:)(v45, v44, 0, v138);
    swift_bridgeObjectRelease_n(v44, 2);
    unint64_t v7 = v335;
    goto LABEL_155;
  }
  if (v7)
  {
    swift_bridgeObjectRelease_n(v44, 2);
    uint64_t v338 = v45;
    unint64_t v339 = v44 & 0xFFFFFFFFFFFFFFLL;
    Swift::String::Index v145 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, HIBYTE(v44) & 0xF, (uint64_t)&v338, HIBYTE(v44) & 0xF);
    _StringGuts.appendInPlace(_:isASCII:)(v145, v146, (v44 & 0x4000000000000000) != 0);
    unint64_t v7 = v335;
    uint64_t v147 = v44;
    goto LABEL_154;
  }
  if ((v45 & 0x1000000000000000) != 0)
  {
    swift_bridgeObjectRelease(v44);
    id v290 = (id)((v44 & 0xFFFFFFFFFFFFFFFLL) + 32);
    uint64_t v291 = v45 & 0xFFFFFFFFFFFFLL;
    unint64_t v7 = v335;
    uint64_t v292 = v45 & 0xFFFFFFFFFFFFLL;
    goto LABEL_288;
  }
  id v290 = _StringObject.sharedUTF8.getter(v45, v44);
  uint64_t v292 = v331;
  swift_bridgeObjectRelease(v44);
  if (v292 < (v45 & 0xFFFFFFFFFFFFLL)) {
    goto LABEL_342;
  }
  uint64_t v291 = v45 & 0xFFFFFFFFFFFFLL;
  unint64_t v7 = v335;
LABEL_288:
  v293 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, v291, (uint64_t)v290, v292);
  _StringGuts.appendInPlace(_:isASCII:)(v293, v294, v45 < 0);
  swift_bridgeObjectRelease_n(v44, 2);
LABEL_155:
  Swift::String v168 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("(stringValue: \"", 0xFuLL, 1);
  Swift::String::Index v169 = v340._object;
  unint64_t v170 = ((unint64_t)v340._object >> 56) & 0xF;
  if (((uint64_t)v340._object & 0x2000000000000000) == 0) {
    unint64_t v170 = v340._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
  }
  if (!v170 && (v340._countAndFlagsBits & ~(uint64_t)v340._object & 0x2000000000000000) == 0)
  {
    Swift::String v340 = v168;
    swift_bridgeObjectRelease((uint64_t)v169);
    goto LABEL_168;
  }
  if (((uint64_t)v340._object & 0x2000000000000000) != 0)
  {
    if (((uint64_t)v168._object & 0x2000000000000000) != 0)
    {
      unint64_t v172 = specialized _SmallString.init(_:appending:)(v340._countAndFlagsBits, (unint64_t)v340._object, v168._countAndFlagsBits, (unint64_t)v168._object);
      if (v174) {
        goto LABEL_166;
      }
      uint64_t v175 = v172;
      Swift::String::Index v176 = v173;
      swift_bridgeObjectRelease((uint64_t)v168._object);
      swift_bridgeObjectRelease((uint64_t)v340._object);
      v340._uint64_t countAndFlagsBits = v175;
      v340._unint64_t object = v176;
      goto LABEL_168;
    }
LABEL_163:
    uint64_t v171 = v168._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
    goto LABEL_167;
  }
  if (((uint64_t)v168._object & 0x2000000000000000) == 0) {
    goto LABEL_163;
  }
LABEL_166:
  uint64_t v171 = ((unint64_t)v168._object >> 56) & 0xF;
LABEL_167:
  swift_bridgeObjectRetain((unint64_t)v168._object);
  _StringGuts.append(_:)(v168._countAndFlagsBits, (unint64_t)v168._object, 0, v171);
  swift_bridgeObjectRelease_n((uint64_t)v168._object, 2);
LABEL_168:
  uint64_t v177 = v340._countAndFlagsBits;
  unint64_t v178 = (unint64_t)v340._object;
  unint64_t v179 = ((unint64_t)v340._object >> 56) & 0xF;
  unint64_t v180 = v340._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
  if (((uint64_t)v340._object & 0x2000000000000000) != 0) {
    unint64_t v180 = ((unint64_t)v340._object >> 56) & 0xF;
  }
  if (!v180 && (v340._countAndFlagsBits & ~(uint64_t)v340._object & 0x2000000000000000) == 0)
  {
    Swift::String v340 = v337;
    swift_bridgeObjectRetain((unint64_t)v337._object);
LABEL_203:
    swift_bridgeObjectRelease(v178);
    goto LABEL_204;
  }
  int64_t v141 = (uint64_t)v337._object & 0x2000000000000000;
  unint64_t v44 = ((unint64_t)v337._object >> 56) & 0xF;
  if (((uint64_t)v340._object & 0x2000000000000000) == 0 || !v141) {
    goto LABEL_176;
  }
  unint64_t v181 = v179 + v44;
  if (v179 + v44 <= 0xF)
  {
    if (v44)
    {
      uint64_t v269 = 0;
      unint64_t v270 = 0;
      unint64_t v271 = (unint64_t)v340._object;
      uint64_t v207 = v336;
      do
      {
        unint64_t v272 = v179 + v270;
        BOOL v262 = v270++ >= 8;
        if (v262) {
          unint64_t v273 = (unint64_t)v337._object;
        }
        else {
          unint64_t v273 = v337._countAndFlagsBits;
        }
        char v274 = (8 * v179 + v269) & 0x38;
        uint64_t v275 = (-255 << v274) - 1;
        unint64_t v276 = (unint64_t)(v273 >> (v269 & 0x38)) << v274;
        unint64_t v277 = v276 | v275 & v271;
        unint64_t v278 = v276 | v275 & v177;
        if (v272 < 8) {
          uint64_t v177 = v278;
        }
        else {
          unint64_t v271 = v277;
        }
        v269 += 8;
      }
      while (8 * v44 != v269);
    }
    else
    {
      unint64_t v271 = (unint64_t)v340._object;
      uint64_t v207 = v336;
    }
    swift_bridgeObjectRelease((uint64_t)v340._object);
    unint64_t v315 = 0xA000000000000000;
    if (!(v177 & 0x8080808080808080 | v271 & 0x80808080808080)) {
      unint64_t v315 = 0xE000000000000000;
    }
    v340._uint64_t countAndFlagsBits = v177;
    v340._unint64_t object = (void *)(v315 & 0xFF00000000000000 | (v181 << 56) | v271 & 0xFFFFFFFFFFFFFFLL);
    goto LABEL_205;
  }
  int64_t v141 = 1;
LABEL_176:
  uint64_t v136 = v337._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
  if (v141) {
    uint64_t v45 = ((unint64_t)v337._object >> 56) & 0xF;
  }
  else {
    uint64_t v45 = v337._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
  }
  swift_bridgeObjectRetain_n((uint64_t)v337._object, 3);
  Swift::Int v140 = (Swift::Int)v337._object;
  if (((uint64_t)v337._object & 0x1000000000000000) != 0) {
    goto LABEL_323;
  }
  swift_bridgeObjectRetain_n((uint64_t)v337._object, 4);
  Swift::Int v182 = v45;
  if ((v178 & 0x1000000000000000) == 0) {
    goto LABEL_181;
  }
LABEL_326:
  Swift::Int v325 = String.UTF8View._foreignCount()();
  int64_t v183 = v325 + v182;
  if (__OFADD__(v325, v182)) {
    goto LABEL_184;
  }
LABEL_186:
  if ((v177 & ~v178 & 0x2000000000000000) == 0
    || !swift_isUniquelyReferenced_nonNull_native(v178 & 0xFFFFFFFFFFFFFFFLL))
  {
    if (v183 > 15) {
      goto LABEL_192;
    }
LABEL_196:
    swift_bridgeObjectRelease_n((uint64_t)v337._object, 5);
    unint64_t v190 = v340._countAndFlagsBits;
    Swift::String::Index v191 = v340._object;
    swift_bridgeObjectRetain((unint64_t)v340._object);
    unint64_t v192 = _StringGuts._convertedToSmall()(v190, (unint64_t)v191);
    unint64_t v194 = v193;
    swift_bridgeObjectRelease((uint64_t)v191);
    v195._Swift::UInt64 rawBits = (v45 << 16) | 1;
    v196._Swift::UInt64 rawBits = 1;
    v197._Swift::UInt64 rawBits = _StringGuts.validateScalarRange(_:)(v196, v195, v337._countAndFlagsBits, (unint64_t)v337._object);
    if (v197._rawBits < 0x10000) {
      v197._rawBits |= 3;
    }
    unint64_t v199 = specialized String.init(_:)(v197, v198, v337._countAndFlagsBits, (unint64_t)v337._object);
    unint64_t v201 = v200;
    swift_bridgeObjectRelease((uint64_t)v337._object);
    unint64_t v202 = _StringGuts._convertedToSmall()(v199, v201);
    unint64_t v204 = v203;
    swift_bridgeObjectRelease(v201);
    unint64_t v205 = specialized _SmallString.init(_:appending:)(v192, v194, v202, v204);
    uint64_t v207 = v336;
    if ((v208 & 1) == 0)
    {
      uint64_t v209 = v205;
      uint64_t v210 = v206;
      swift_bridgeObjectRelease((uint64_t)v337._object);
      char v211 = v340._object;
      v340._uint64_t countAndFlagsBits = v209;
      v340._unint64_t object = v210;
      swift_bridgeObjectRelease((uint64_t)v211);
      goto LABEL_205;
    }
    goto LABEL_343;
  }
  unint64_t v185 = (unint64_t)v340._object;
  int64_t v186 = _StringGuts.nativeUnusedCapacity.getter(v340._countAndFlagsBits, (uint64_t)v340._object);
  if (v187) {
    goto LABEL_344;
  }
  if (v183 < 16 && ((v185 & 0x2000000000000000) != 0 || v186 < v182)) {
    goto LABEL_196;
  }
LABEL_192:
  _StringGuts.prepareForAppendInPlace(totalCount:otherUTF8Count:)(v183, v182);
  unint64_t v178 = (unint64_t)v337._object;
  swift_bridgeObjectRelease_n((uint64_t)v337._object, 4);
  if (((uint64_t)v337._object & 0x1000000000000000) != 0)
  {
    swift_bridgeObjectRelease((uint64_t)v337._object);
    _StringGuts._foreignAppendInPlace(_:)(v337._countAndFlagsBits, (unint64_t)v337._object, 0, v45);
    swift_bridgeObjectRelease_n((uint64_t)v337._object, 2);
LABEL_204:
    uint64_t v207 = v336;
    goto LABEL_205;
  }
  if (v141)
  {
    swift_bridgeObjectRelease_n((uint64_t)v337._object, 2);
    uint64_t v338 = v337._countAndFlagsBits;
    unint64_t v339 = (uint64_t)v337._object & 0xFFFFFFFFFFFFFFLL;
    uint64_t v188 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, v44, (uint64_t)&v338, v44);
    _StringGuts.appendInPlace(_:isASCII:)(v188, v189, ((uint64_t)v337._object & 0x4000000000000000) != 0);
    goto LABEL_203;
  }
  uint64_t v295 = v337._countAndFlagsBits;
  if ((v337._countAndFlagsBits & 0x1000000000000000) != 0)
  {
    swift_bridgeObjectRelease((uint64_t)v337._object);
    id v296 = (id)(((uint64_t)v337._object & 0xFFFFFFFFFFFFFFFLL) + 32);
    uint64_t v297 = v136;
    uint64_t v207 = v336;
    goto LABEL_291;
  }
  id v296 = _StringObject.sharedUTF8.getter(v337._countAndFlagsBits, (uint64_t)v337._object);
  uint64_t v297 = v332;
  swift_bridgeObjectRelease((uint64_t)v337._object);
  if (v297 < v136) {
    goto LABEL_342;
  }
  unint64_t v7 = v335;
  uint64_t v207 = v336;
  uint64_t v295 = v337._countAndFlagsBits;
LABEL_291:
  unint64_t v298 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, v136, (uint64_t)v296, v297);
  _StringGuts.appendInPlace(_:isASCII:)(v298, v299, v295 < 0);
  swift_bridgeObjectRelease_n((uint64_t)v337._object, 2);
LABEL_205:
  Swift::String v212 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("\", intValue: ", 0xDuLL, 1);
  unint64_t v213 = v340._object;
  unint64_t v214 = ((unint64_t)v340._object >> 56) & 0xF;
  if (((uint64_t)v340._object & 0x2000000000000000) == 0) {
    unint64_t v214 = v340._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
  }
  if (!v214 && (v340._countAndFlagsBits & ~(uint64_t)v340._object & 0x2000000000000000) == 0)
  {
    Swift::String v340 = v212;
    swift_bridgeObjectRelease((uint64_t)v213);
    goto LABEL_218;
  }
  if (((uint64_t)v340._object & 0x2000000000000000) != 0)
  {
    if (((uint64_t)v212._object & 0x2000000000000000) != 0)
    {
      unint64_t v216 = specialized _SmallString.init(_:appending:)(v340._countAndFlagsBits, (unint64_t)v340._object, v212._countAndFlagsBits, (unint64_t)v212._object);
      if (v218) {
        goto LABEL_216;
      }
      uint64_t v219 = v216;
      unint64_t v220 = v217;
      swift_bridgeObjectRelease((uint64_t)v212._object);
      swift_bridgeObjectRelease((uint64_t)v340._object);
      v340._uint64_t countAndFlagsBits = v219;
      v340._unint64_t object = v220;
      goto LABEL_218;
    }
LABEL_213:
    uint64_t v215 = v212._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
    goto LABEL_217;
  }
  if (((uint64_t)v212._object & 0x2000000000000000) == 0) {
    goto LABEL_213;
  }
LABEL_216:
  uint64_t v215 = ((unint64_t)v212._object >> 56) & 0xF;
LABEL_217:
  swift_bridgeObjectRetain((unint64_t)v212._object);
  _StringGuts.append(_:)(v212._countAndFlagsBits, (unint64_t)v212._object, 0, v215);
  swift_bridgeObjectRelease_n((uint64_t)v212._object, 2);
LABEL_218:
  uint64_t v221 = v340._countAndFlagsBits;
  unint64_t v222 = (unint64_t)v340._object;
  unint64_t v223 = ((unint64_t)v340._object >> 56) & 0xF;
  unint64_t v224 = v340._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
  if (((uint64_t)v340._object & 0x2000000000000000) != 0) {
    unint64_t v224 = ((unint64_t)v340._object >> 56) & 0xF;
  }
  if (!v224 && (v340._countAndFlagsBits & ~(uint64_t)v340._object & 0x2000000000000000) == 0)
  {
    v340._uint64_t countAndFlagsBits = v207;
    v340._unint64_t object = (void *)v7;
    uint64_t v238 = v222;
    goto LABEL_253;
  }
  uint64_t v225 = v7 & 0x2000000000000000;
  uint64_t v226 = HIBYTE(v7) & 0xF;
  if (((uint64_t)v340._object & 0x2000000000000000) == 0 || !v225) {
    goto LABEL_226;
  }
  unint64_t v227 = v223 + v226;
  if (v223 + v226 <= 0xF)
  {
    if (v226)
    {
      uint64_t v279 = 0;
      unint64_t v280 = 0;
      do
      {
        unint64_t v281 = v223 + v280;
        BOOL v262 = v280++ >= 8;
        if (v262) {
          unint64_t v282 = v7;
        }
        else {
          unint64_t v282 = v207;
        }
        char v283 = (8 * v223 + v279) & 0x38;
        uint64_t v284 = (-255 << v283) - 1;
        unint64_t v285 = (unint64_t)(v282 >> (v279 & 0x38)) << v283;
        unint64_t v286 = v285 | v284 & v222;
        unint64_t v287 = v285 | v284 & v221;
        if (v281 < 8) {
          uint64_t v221 = v287;
        }
        else {
          unint64_t v222 = v286;
        }
        v279 += 8;
      }
      while (8 * v226 != v279);
    }
    swift_bridgeObjectRelease(v7);
    unint64_t v288 = 0xA000000000000000;
    if (!(v221 & 0x8080808080808080 | v222 & 0x80808080808080)) {
      unint64_t v288 = 0xE000000000000000;
    }
    unint64_t v289 = (void *)(v288 & 0xFF00000000000000 | (v227 << 56) | v222 & 0xFFFFFFFFFFFFFFLL);
    swift_bridgeObjectRelease((uint64_t)v340._object);
    v340._uint64_t countAndFlagsBits = v221;
    v340._unint64_t object = v289;
    goto LABEL_296;
  }
  uint64_t v225 = 1;
LABEL_226:
  uint64_t v228 = v207 & 0xFFFFFFFFFFFFLL;
  if (v225) {
    uint64_t v229 = HIBYTE(v7) & 0xF;
  }
  else {
    uint64_t v229 = v228;
  }
  swift_bridgeObjectRetain_n(v7, 2);
  if ((v7 & 0x1000000000000000) == 0)
  {
    swift_bridgeObjectRetain_n(v7, 4);
    Swift::Int v230 = v229;
    if ((v222 & 0x1000000000000000) == 0) {
      goto LABEL_231;
    }
LABEL_332:
    Swift::Int v330 = String.UTF8View._foreignCount()();
    int64_t v231 = v330 + v230;
    if (!__OFADD__(v330, v230)) {
      goto LABEL_236;
    }
    do
    {
LABEL_234:
      __break(1u);
LABEL_235:
      uint64_t v232 = HIBYTE(v222) & 0xF;
      int64_t v231 = v232 + v230;
    }
    while (__OFADD__(v232, v230));
    goto LABEL_236;
  }
  swift_bridgeObjectRetain_n(v7, 5);
  v326._Swift::UInt64 rawBits = 1;
  v327._Swift::UInt64 rawBits = (v229 << 16) | 1;
  v328._Swift::UInt64 rawBits = _StringGuts.validateScalarRange(_:)(v326, v327, v336, v7);
  if (v328._rawBits < 0x10000) {
    v328._rawBits |= 3;
  }
  Swift::Int v230 = specialized Collection.count.getter(v328, v329, v336, v7);
  swift_bridgeObjectRelease(v7);
  uint64_t v221 = v340._countAndFlagsBits;
  unint64_t v222 = (unint64_t)v340._object;
  if (((uint64_t)v340._object & 0x1000000000000000) != 0) {
    goto LABEL_332;
  }
LABEL_231:
  if ((v222 & 0x2000000000000000) != 0) {
    goto LABEL_235;
  }
  int64_t v231 = (v221 & 0xFFFFFFFFFFFFLL) + v230;
  if (__OFADD__(v221 & 0xFFFFFFFFFFFFLL, v230)) {
    goto LABEL_234;
  }
LABEL_236:
  if ((v221 & ~v222 & 0x2000000000000000) == 0
    || !swift_isUniquelyReferenced_nonNull_native(v222 & 0xFFFFFFFFFFFFFFFLL))
  {
    if (v231 > 15) {
      goto LABEL_242;
    }
LABEL_246:
    swift_bridgeObjectRelease_n(v7, 5);
    unint64_t v239 = v340._countAndFlagsBits;
    id v240 = v340._object;
    swift_bridgeObjectRetain((unint64_t)v340._object);
    unint64_t v241 = _StringGuts._convertedToSmall()(v239, (unint64_t)v240);
    unint64_t v243 = v242;
    swift_bridgeObjectRelease((uint64_t)v240);
    v244._Swift::UInt64 rawBits = (v229 << 16) | 1;
    v245._Swift::UInt64 rawBits = 1;
    v246._Swift::UInt64 rawBits = _StringGuts.validateScalarRange(_:)(v245, v244, v336, v7);
    if (v246._rawBits < 0x10000) {
      v246._rawBits |= 3;
    }
    unint64_t v248 = specialized String.init(_:)(v246, v247, v336, v7);
    unint64_t v250 = v249;
    swift_bridgeObjectRelease(v7);
    unint64_t v251 = _StringGuts._convertedToSmall()(v248, v250);
    unint64_t v253 = v252;
    swift_bridgeObjectRelease(v250);
    unint64_t v254 = specialized _SmallString.init(_:appending:)(v241, v243, v251, v253);
    if ((v256 & 1) == 0)
    {
      uint64_t v257 = v254;
      unint64_t v258 = v255;
      swift_bridgeObjectRelease(v7);
      uint64_t v238 = (uint64_t)v340._object;
      v340._uint64_t countAndFlagsBits = v257;
      v340._unint64_t object = v258;
LABEL_253:
      swift_bridgeObjectRelease(v238);
      goto LABEL_296;
    }
    goto LABEL_343;
  }
  unint64_t v233 = (unint64_t)v340._object;
  int64_t v234 = _StringGuts.nativeUnusedCapacity.getter(v340._countAndFlagsBits, (uint64_t)v340._object);
  if (v235)
  {
LABEL_344:
    unint64_t v334 = 258;
LABEL_345:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/StringGutsRangeReplaceable.swift", 38, 2, v334, 0);
  }
  if (v231 < 16 && ((v233 & 0x2000000000000000) != 0 || v234 < v230)) {
    goto LABEL_246;
  }
LABEL_242:
  _StringGuts.prepareForAppendInPlace(totalCount:otherUTF8Count:)(v231, v230);
  swift_bridgeObjectRelease_n(v7, 4);
  if ((v7 & 0x1000000000000000) != 0)
  {
    swift_bridgeObjectRelease(v7);
    _StringGuts._foreignAppendInPlace(_:)(v336, v7, 0, v229);
  }
  else
  {
    if (v225)
    {
      swift_bridgeObjectRelease_n(v7, 2);
      uint64_t v338 = v336;
      unint64_t v339 = v7 & 0xFFFFFFFFFFFFFFLL;
      uint64_t v236 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, HIBYTE(v7) & 0xF, (uint64_t)&v338, HIBYTE(v7) & 0xF);
      _StringGuts.appendInPlace(_:isASCII:)(v236, v237, (v7 & 0x4000000000000000) != 0);
      uint64_t v238 = v7;
      goto LABEL_253;
    }
    uint64_t v300 = v336;
    if ((v336 & 0x1000000000000000) != 0)
    {
      swift_bridgeObjectRelease(v7);
      id v301 = (id)((v7 & 0xFFFFFFFFFFFFFFFLL) + 32);
      uint64_t v302 = v228;
      goto LABEL_294;
    }
    id v301 = _StringObject.sharedUTF8.getter(v336, v7);
    uint64_t v302 = v333;
    swift_bridgeObjectRelease(v7);
    if (v302 < v228) {
LABEL_342:
    }
      _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x745uLL, 0);
    unint64_t v7 = v335;
    uint64_t v300 = v336;
LABEL_294:
    unint64_t v303 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, v228, (uint64_t)v301, v302);
    _StringGuts.appendInPlace(_:isASCII:)(v303, v304, v300 < 0);
  }
  swift_bridgeObjectRelease_n(v7, 2);
LABEL_296:
  unint64_t v305 = v340._object;
  unint64_t v306 = ((unint64_t)v340._object >> 56) & 0xF;
  if (((uint64_t)v340._object & 0x2000000000000000) == 0) {
    unint64_t v306 = v340._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
  }
  if (v306 || (v340._countAndFlagsBits & ~(uint64_t)v340._object & 0x2000000000000000) != 0)
  {
    if (((uint64_t)v340._object & 0x2000000000000000) == 0
      || (unint64_t v307 = specialized _SmallString.init(_:appending:)(v340._countAndFlagsBits, (unint64_t)v340._object, 0x29uLL, 0xE100000000000000), (v309 & 1) != 0))
    {
      swift_bridgeObjectRetain(0xE100000000000000);
      _StringGuts.append(_:)(41, 0xE100000000000000, 0, 1);
      swift_bridgeObjectRelease_n(0xE100000000000000, 2);
    }
    else
    {
      uint64_t v310 = v307;
      v311 = v308;
      swift_bridgeObjectRelease(0xE100000000000000);
      swift_bridgeObjectRelease((uint64_t)v340._object);
      v340._uint64_t countAndFlagsBits = v310;
      v340._unint64_t object = v311;
    }
  }
  else
  {
    v340._uint64_t countAndFlagsBits = 41;
    v340._unint64_t object = (void *)0xE100000000000000;
    swift_bridgeObjectRelease((uint64_t)v305);
  }
  return v340._countAndFlagsBits;
}

uint64_t CodingKey.description.getter(uint64_t *a1, uint64_t a2)
{
  unint64_t v3 = v2;
  uint64_t v6 = (*(uint64_t (**)(void))(a2 + 40))();
  if (v7)
  {
    unint64_t v9 = 0xE300000000000000;
    uint64_t v349 = 7104878;
  }
  else
  {
    uint64_t v349 = _int64ToString(_:radix:uppercase:)(v6, 10, 0, (uint64_t (*)(long long *, uint64_t, uint64_t, uint64_t, void))swift_int64ToString);
    unint64_t v9 = v8;
  }
  uint64_t v10 = specialized static String._createEmpty(withInitialCapacity:)(35);
  unint64_t v12 = v10;
  unint64_t v13 = v11;
  v352._uint64_t countAndFlagsBits = v10;
  v352._unint64_t object = (void *)v11;
  uint64_t v14 = HIBYTE(v11) & 0xF;
  int64_t v15 = v10 & 0xFFFFFFFFFFFFLL;
  if ((v11 & 0x2000000000000000) != 0) {
    uint64_t v16 = HIBYTE(v11) & 0xF;
  }
  else {
    uint64_t v16 = v10 & 0xFFFFFFFFFFFFLL;
  }
  uint64_t v347 = (uint64_t)a1;
  if (!v16 && (v10 & ~v11 & 0x2000000000000000) == 0)
  {
    v352._uint64_t countAndFlagsBits = 0;
    v352._unint64_t object = (void *)0xE000000000000000;
    uint64_t v38 = v11;
LABEL_27:
    swift_bridgeObjectRelease(v38);
    goto LABEL_28;
  }
  if ((v11 & 0x2000000000000000) != 0)
  {
    swift_bridgeObjectRelease(v11);
    swift_bridgeObjectRelease(0xE000000000000000);
    unint64_t v37 = 0xA000000000000000;
    if (!(v13 & 0x80808080808080 | v12 & 0x8080808080808080)) {
      unint64_t v37 = 0xE000000000000000;
    }
    v352._uint64_t countAndFlagsBits = v12;
    v352._unint64_t object = (void *)(v37 & 0xFF00000000000000 | (v14 << 56) | v13 & 0xFFFFFFFFFFFFFFLL);
    goto LABEL_28;
  }
  swift_bridgeObjectRetain_n(0xE000000000000000, 6);
  if ((v13 & 0x1000000000000000) != 0)
  {
    int64_t v15 = String.UTF8View._foreignCount()();
    if ((v12 & ~v13 & 0x2000000000000000) == 0) {
      goto LABEL_25;
    }
  }
  else if ((v12 & ~v13 & 0x2000000000000000) == 0)
  {
    goto LABEL_25;
  }
  if (swift_isUniquelyReferenced_nonNull_native(v13 & 0xFFFFFFFFFFFFFFFLL))
  {
    unint64_t v17 = _StringGuts.nativeUnusedCapacity.getter(v12, v13);
    if (v18) {
      goto LABEL_339;
    }
    if (v15 <= 15 && (v17 & 0x8000000000000000) != 0) {
      goto LABEL_16;
    }
    goto LABEL_26;
  }
LABEL_25:
  if (v15 > 15)
  {
LABEL_26:
    _StringGuts.prepareForAppendInPlace(totalCount:otherUTF8Count:)(v15, 0);
    swift_bridgeObjectRelease_n(0xE000000000000000, 6);
    uint64_t v350 = 0;
    unint64_t v351 = 0;
    Swift::String::Index v39 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, 0, (uint64_t)&v350, 0);
    _StringGuts.appendInPlace(_:isASCII:)(v39, v40, 1);
    uint64_t v38 = 0xE000000000000000;
    goto LABEL_27;
  }
LABEL_16:
  swift_bridgeObjectRelease_n(0xE000000000000000, 5);
  swift_bridgeObjectRetain(v13);
  unint64_t v19 = _StringGuts._convertedToSmall()(v12, v13);
  unint64_t v21 = v20;
  swift_bridgeObjectRelease(v13);
  v22._Swift::UInt64 rawBits = 1;
  v23._Swift::UInt64 rawBits = 1;
  v24._Swift::UInt64 rawBits = _StringGuts.validateScalarRange(_:)(v22, v23, 0, 0xE000000000000000);
  if (v24._rawBits < 0x10000) {
    v24._rawBits |= 3;
  }
  unint64_t v26 = specialized String.init(_:)(v24, v25, 0, 0xE000000000000000);
  unint64_t v28 = v27;
  swift_bridgeObjectRelease(0xE000000000000000);
  unint64_t v29 = _StringGuts._convertedToSmall()(v26, v28);
  unint64_t v31 = v30;
  swift_bridgeObjectRelease(v28);
  unint64_t v32 = specialized _SmallString.init(_:appending:)(v19, v21, v29, v31);
  if (v34) {
    goto LABEL_338;
  }
  uint64_t v35 = v32;
  uint64_t v36 = v33;
  swift_bridgeObjectRelease(0xE000000000000000);
  v352._uint64_t countAndFlagsBits = v35;
  v352._unint64_t object = v36;
  swift_bridgeObjectRelease(v13);
  a1 = (uint64_t *)v347;
LABEL_28:
  DynamicType = (Class *)swift_getDynamicType(v3, a1, 0);
  TypeName = (uint64_t *)swift_getTypeName(DynamicType, 0);
  if (v43 < 0) {
    goto LABEL_311;
  }
  unint64_t v44 = (uint8x16_t *)TypeName;
  uint64_t v45 = v43;
  unint64_t v348 = v9;
  uint64_t v346 = a2;
  if (_allASCII(_:)(TypeName, v43))
  {
    char v46 = 1;
LABEL_31:
    if (!v45)
    {
      uint64_t v48 = 0;
      unint64_t v47 = 0xE000000000000000;
      goto LABEL_120;
    }
    if (v45 > 15)
    {
      unint64_t v47 = specialized static __StringStorage.create(initializingFrom:codeUnitCapacity:isASCII:)(v44->i8, v45, v45, v46 & 1);
      uint64_t v48 = *(void *)(v47 + 24);
      goto LABEL_120;
    }
    uint64_t v87 = v45 - 8;
    unint64_t v88 = 8;
    if (v45 < 8) {
      unint64_t v88 = v45;
    }
    if ((v88 & 0x8000000000000000) == 0)
    {
      if (v88 >= 8)
      {
        if (v88 >= 0x10)
        {
          unint64_t v89 = v88 & 0xFFFFFFFFFFFFFFF0;
          uint16x8_t v114 = vmovl_high_u8(*v44);
          int8x16_t v115 = (int8x16_t)vmovl_u16(*(uint16x4_t *)v114.i8);
          uint16x8_t v116 = vmovl_u8(*(uint8x8_t *)v44->i8);
          int8x16_t v117 = (int8x16_t)vmovl_u16(*(uint16x4_t *)v116.i8);
          int8x16_t v118 = (int8x16_t)vmovl_high_u16(v114);
          int8x8_t v119 = (int8x8_t)vextq_s8(v118, v118, 8uLL).u64[0];
          int8x16_t v120 = (int8x16_t)vmovl_high_u16(v116);
          int8x8_t v121 = (int8x8_t)vextq_s8(v120, v120, 8uLL).u64[0];
          *(int8x8_t *)v120.i8 = vorr_s8(*(int8x8_t *)v120.i8, *(int8x8_t *)v118.i8);
          v122.i64[0] = v120.u32[0];
          v122.i64[1] = v120.u32[1];
          int8x16_t v123 = (int8x16_t)vshlq_u64(v122, (uint64x2_t)xmmword_18162AD00);
          *(int8x8_t *)v118.i8 = vorr_s8(*(int8x8_t *)v117.i8, *(int8x8_t *)v115.i8);
          v122.i64[0] = v118.u32[0];
          v122.i64[1] = v118.u32[1];
          int8x16_t v124 = vorrq_s8((int8x16_t)vshlq_u64(v122, (uint64x2_t)xmmword_18162ACF0), v123);
          *(int8x8_t *)v118.i8 = vorr_s8(v121, v119);
          v122.i64[0] = v118.u32[0];
          v122.i64[1] = v118.u32[1];
          int8x16_t v125 = (int8x16_t)vshlq_u64(v122, (uint64x2_t)xmmword_18162ACE0);
          *(int8x8_t *)v115.i8 = vorr_s8((int8x8_t)*(_OWORD *)&vextq_s8(v117, v117, 8uLL), (int8x8_t)*(_OWORD *)&vextq_s8(v115, v115, 8uLL));
          v122.i64[0] = v115.u32[0];
          v122.i64[1] = v115.u32[1];
          int8x16_t v126 = vorrq_s8(v124, vorrq_s8((int8x16_t)vshlq_u64(v122, (uint64x2_t)xmmword_18162ACD0), v125));
          uint64_t v48 = (uint64_t)vorr_s8(*(int8x8_t *)v126.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v126, v126, 8uLL));
          if (v88 == (v88 & 0xFFFFFFFFFFFFFFF0)) {
            goto LABEL_112;
          }
          unint64_t v90 = 8 * v89;
          if ((v88 & 8) == 0) {
            goto LABEL_110;
          }
        }
        else
        {
          uint64_t v48 = 0;
          unint64_t v90 = 0;
          unint64_t v89 = 0;
        }
        unint64_t v91 = v89;
        int64x2_t v92 = vdupq_n_s64(v90);
        unint64_t v89 = v88 & 0xFFFFFFFFFFFFFFF8;
        unint64_t v90 = 8 * (v88 & 0xFFFFFFFFFFFFFFF8);
        int8x16_t v93 = 0uLL;
        int8x16_t v94 = (int8x16_t)(unint64_t)v48;
        int64x2_t v95 = vaddq_s64(v92, (int64x2_t)xmmword_18162ACE0);
        int64x2_t v96 = vaddq_s64(v92, (int64x2_t)xmmword_18162AD00);
        int64x2_t v97 = vaddq_s64(v92, (int64x2_t)xmmword_18162ACD0);
        int64x2_t v98 = vaddq_s64(v92, (int64x2_t)xmmword_18162ACF0);
        int64x2_t v99 = (uint8x8_t *)&v44->i8[v91];
        int8x16_t v100 = (int8x16_t)vdupq_n_s64(0x38uLL);
        unint64_t v101 = v91 - (v88 & 0xFFFFFFFFFFFFFFF8);
        int64x2_t v102 = vdupq_n_s64(0x40uLL);
        int8x16_t v103 = 0uLL;
        int8x16_t v104 = 0uLL;
        do
        {
          uint8x8_t v105 = *v99++;
          uint16x8_t v106 = vmovl_u8(v105);
          uint32x4_t v107 = vmovl_high_u16(v106);
          v108.i64[0] = v107.u32[2];
          v108.i64[1] = v107.u32[3];
          uint64x2_t v109 = v108;
          v108.i64[0] = v107.u32[0];
          v108.i64[1] = v107.u32[1];
          uint64x2_t v110 = v108;
          uint32x4_t v111 = vmovl_u16(*(uint16x4_t *)v106.i8);
          v108.i64[0] = v111.u32[2];
          v108.i64[1] = v111.u32[3];
          uint64x2_t v112 = v108;
          v108.i64[0] = v111.u32[0];
          v108.i64[1] = v111.u32[1];
          int8x16_t v104 = vorrq_s8((int8x16_t)vshlq_u64(v109, (uint64x2_t)vandq_s8((int8x16_t)v95, v100)), v104);
          int8x16_t v103 = vorrq_s8((int8x16_t)vshlq_u64(v110, (uint64x2_t)vandq_s8((int8x16_t)v96, v100)), v103);
          int8x16_t v93 = vorrq_s8((int8x16_t)vshlq_u64(v112, (uint64x2_t)vandq_s8((int8x16_t)v97, v100)), v93);
          int8x16_t v94 = vorrq_s8((int8x16_t)vshlq_u64(v108, (uint64x2_t)vandq_s8((int8x16_t)v98, v100)), v94);
          int64x2_t v96 = vaddq_s64(v96, v102);
          int64x2_t v97 = vaddq_s64(v97, v102);
          int64x2_t v98 = vaddq_s64(v98, v102);
          int64x2_t v95 = vaddq_s64(v95, v102);
          v101 += 8;
        }
        while (v101);
        int8x16_t v113 = vorrq_s8(vorrq_s8(v94, v103), vorrq_s8(v93, v104));
        uint64_t v48 = (uint64_t)vorr_s8(*(int8x8_t *)v113.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v113, v113, 8uLL));
        if (v88 == v89)
        {
LABEL_112:
          if (v45 < 9)
          {
            uint64_t v130 = 0;
          }
          else
          {
            uint64_t v130 = 0;
            uint64_t v131 = 0;
            uint64_t v132 = &v44->u8[8];
            do
            {
              unsigned int v133 = *v132++;
              v130 |= (unint64_t)v133 << v131;
              v131 += 8;
              --v87;
            }
            while (v87);
          }
          unint64_t v134 = 0xA000000000000000;
          if (((v130 | v48) & 0x8080808080808080) == 0) {
            unint64_t v134 = 0xE000000000000000;
          }
          unint64_t v47 = v134 | (v45 << 56) | v130;
          goto LABEL_120;
        }
      }
      else
      {
        unint64_t v89 = 0;
        uint64_t v48 = 0;
        unint64_t v90 = 0;
      }
LABEL_110:
      uint64_t v127 = &v44->u8[v89];
      unint64_t v128 = v88 - v89;
      do
      {
        unsigned int v129 = *v127++;
        v48 |= (unint64_t)v129 << (v90 & 0x38);
        v90 += 8;
        --v128;
      }
      while (v128);
      goto LABEL_112;
    }
LABEL_331:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
  }
  uint64_t v49 = 0;
  unsigned int v50 = &v44->u8[v45];
  if (!v44) {
    unsigned int v50 = 0;
  }
  char v46 = 1;
  for (uint64_t i = v44; ; uint64_t i = (uint8x16_t *)((char *)i + 3))
  {
    while (1)
    {
      while (1)
      {
        while (1)
        {
          if (!i || i == (uint8x16_t *)v50) {
            goto LABEL_31;
          }
          unsigned int v53 = i->u8[0];
          uint64_t i = (uint8x16_t *)((char *)i + 1);
          unsigned int v52 = v53;
          if ((v52 & 0x80) != 0) {
            break;
          }
          ++v49;
        }
        if ((v52 + 62) > 0x32u) {
          goto LABEL_85;
        }
        if (v52 > 0xDF) {
          break;
        }
        if (!i || i == (uint8x16_t *)v50 || (i->i8[0] & 0xC0) != 0x80) {
          goto LABEL_85;
        }
        char v46 = 0;
        uint64_t i = (uint8x16_t *)((char *)i + 1);
        v49 += 2;
      }
      if (v52 != 224) {
        break;
      }
      if (!i) {
        goto LABEL_85;
      }
      if (i == (uint8x16_t *)v50) {
        goto LABEL_85;
      }
      unsigned int v54 = &i->u8[1];
      if ((i->i8[0] & 0xE0) != 0xA0) {
        goto LABEL_85;
      }
LABEL_63:
      if (v54 == v50 || (*v54 & 0xC0) != 0x80) {
        goto LABEL_85;
      }
      char v46 = 0;
      uint64_t i = (uint8x16_t *)((char *)i + 2);
      v49 += 3;
    }
    if (v52 <= 0xEC)
    {
LABEL_55:
      if (!i || i == (uint8x16_t *)v50) {
        goto LABEL_85;
      }
      unsigned int v54 = &i->u8[1];
      LOBYTE(v55) = i->i8[0];
LABEL_62:
      if ((v55 & 0xC0) != 0x80) {
        goto LABEL_85;
      }
      goto LABEL_63;
    }
    if (v52 == 237)
    {
      if (!i) {
        goto LABEL_85;
      }
      if (i == (uint8x16_t *)v50) {
        goto LABEL_85;
      }
      unsigned int v54 = &i->u8[1];
      unsigned int v55 = i->u8[0];
      if (v55 > 0x9F) {
        goto LABEL_85;
      }
      goto LABEL_62;
    }
    if (v52 <= 0xEF) {
      goto LABEL_55;
    }
    if (v52 != 240) {
      break;
    }
    if (!i) {
      goto LABEL_85;
    }
    if (i == (uint8x16_t *)v50) {
      goto LABEL_85;
    }
    uint64_t v56 = &i->u8[1];
    if ((i->i8[0] + 64) < 0xD0u) {
      goto LABEL_85;
    }
LABEL_80:
    if (v56 == v50 || (i->i8[1] & 0xC0) != 0x80 || &i->i16[1] == (__int16 *)v50 || (i->i8[2] & 0xC0) != 0x80) {
      goto LABEL_85;
    }
    char v46 = 0;
    v49 += 4;
  }
  if ((v52 + 15) <= 2u)
  {
    if (!i || i == (uint8x16_t *)v50) {
      goto LABEL_85;
    }
    uint64_t v56 = &i->u8[1];
    LOBYTE(v57) = i->i8[0];
    goto LABEL_79;
  }
  if (i)
  {
    if (i != (uint8x16_t *)v50)
    {
      uint64_t v56 = &i->u8[1];
      unsigned int v57 = i->u8[0];
      if (v57 <= 0x8F)
      {
LABEL_79:
        if ((v57 & 0xC0) != 0x80) {
          goto LABEL_85;
        }
        goto LABEL_80;
      }
    }
  }
LABEL_85:
  uint64_t v58 = swift_allocError((uint64_t)&unk_1EC9FFB80, (uint64_t)&protocol witness table for UTF8ValidationError, 0, 0);
  swift_willThrow();
  swift_errorRelease(v58);
  uint64_t v59 = specialized Collection.subscript.getter(v49, (uint64_t)v44, v45);
  uint64_t v64 = findInvalidRange #1 (_:) in validateUTF8(_:)(v59, v60, v61, v62);
  uint64_t v350 = 0;
  unint64_t v351 = 0xE000000000000000;
  if (__OFADD__(v45, 15))
  {
    __break(1u);
    goto LABEL_331;
  }
  uint64_t v65 = v63;
  _StringGuts.reserveCapacity(_:)(v45 + 15);
  while (2)
  {
    uint64_t v66 = specialized Collection.subscript.getter(v64, (uint64_t)v44, v45);
    uint64_t v70 = v350 & 0xFFFFFFFFFFFFLL;
    if ((v351 & 0x2000000000000000) != 0) {
      uint64_t v70 = HIBYTE(v351) & 0xF;
    }
    BOOL v71 = __OFADD__(v70, v45);
    uint64_t v72 = v70 + v45;
    if (v71)
    {
      __break(1u);
LABEL_310:
      __break(1u);
LABEL_311:
      _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeBufferPointer with negative count", 39, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x53FuLL, 0);
    }
    uint64_t v73 = v66;
    if (__OFADD__(v72, 3)) {
      goto LABEL_310;
    }
    uint64_t v74 = v67;
    uint64_t v75 = v68;
    uint64_t v76 = v69;
    _StringGuts.reserveCapacity(_:)(v72 + 3);
    uint64_t v77 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(v73, v74, v75, v76);
    _StringGuts.appendInPlace(_:isASCII:)(v77, v78, 0);
    size_t v353 = 3;
    uint64_t v354 = 12435439;
    specialized closure #1 in Unicode.Scalar.withUTF8CodeUnits<A>(_:)((char *)&v354, &v353, &v350);
    uint64_t v79 = specialized Collection.subscript.getter(v65, (uint64_t)v44, v45);
    unint64_t v44 = (uint8x16_t *)specialized UnsafeBufferPointer.init(rebasing:)(v79, v80, v81, v82);
    uint64_t v45 = v83;
    uint64_t v84 = validateUTF8(_:)(v44->i64, v83);
    if (v86)
    {
      uint64_t v64 = v84;
      uint64_t v65 = v85;
      if (!v45) {
        goto LABEL_101;
      }
      continue;
    }
    break;
  }
  _StringGuts.appendInPlace(_:isASCII:)(v44->i8, v45, 0);
LABEL_101:
  uint64_t v48 = v350;
  unint64_t v47 = v351;
LABEL_120:
  uint64_t countAndFlagsBits = v352._countAndFlagsBits;
  unint64_t object = (unint64_t)v352._object;
  unint64_t v137 = ((unint64_t)v352._object >> 56) & 0xF;
  unint64_t v138 = v352._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
  if (((uint64_t)v352._object & 0x2000000000000000) != 0) {
    unint64_t v138 = ((unint64_t)v352._object >> 56) & 0xF;
  }
  if (!v138 && (v352._countAndFlagsBits & ~(uint64_t)v352._object & 0x2000000000000000) == 0)
  {
    v352._uint64_t countAndFlagsBits = v48;
    v352._unint64_t object = (void *)v47;
    uint64_t v151 = object;
    goto LABEL_153;
  }
  uint64_t v139 = v47 & 0x2000000000000000;
  uint64_t v140 = HIBYTE(v47) & 0xF;
  if (((uint64_t)v352._object & 0x2000000000000000) == 0 || !v139) {
    goto LABEL_128;
  }
  unint64_t v141 = v137 + v140;
  if (v137 + v140 <= 0xF)
  {
    if (v140)
    {
      char v172 = 0;
      unint64_t v173 = 0;
      do
      {
        unint64_t v174 = v137 + v173;
        unint64_t v175 = v173 + 1;
        if (v173 >= 8) {
          unint64_t v176 = v47;
        }
        else {
          unint64_t v176 = v48;
        }
        unint64_t v177 = v176 >> (v172 & 0x38);
        char v178 = (8 * v137 + v172) & 0x38;
        uint64_t v179 = (-255 << v178) - 1;
        unint64_t v180 = (unint64_t)v177 << v178;
        unint64_t v181 = v180 | v179 & object;
        unint64_t v182 = v180 | v179 & countAndFlagsBits;
        if (v174 < 8) {
          uint64_t countAndFlagsBits = v182;
        }
        else {
          unint64_t object = v181;
        }
        v172 += 8;
        unint64_t v173 = v175;
      }
      while (v140 != v175);
    }
    swift_bridgeObjectRelease(v47);
    unint64_t v183 = 0xA000000000000000;
    if (!(countAndFlagsBits & 0x8080808080808080 | object & 0x80808080808080)) {
      unint64_t v183 = 0xE000000000000000;
    }
    uint64_t v184 = (void *)(v183 & 0xFF00000000000000 | (v141 << 56) | object & 0xFFFFFFFFFFFFFFLL);
    swift_bridgeObjectRelease((uint64_t)v352._object);
    v352._uint64_t countAndFlagsBits = countAndFlagsBits;
    v352._unint64_t object = v184;
    goto LABEL_170;
  }
  uint64_t v139 = 1;
LABEL_128:
  if (v139) {
    uint64_t v142 = HIBYTE(v47) & 0xF;
  }
  else {
    uint64_t v142 = v48 & 0xFFFFFFFFFFFFLL;
  }
  swift_bridgeObjectRetain_n(v47, 2);
  if ((v47 & 0x1000000000000000) == 0)
  {
    swift_bridgeObjectRetain_n(v47, 4);
    Swift::Int v143 = v142;
    if ((object & 0x1000000000000000) == 0) {
      goto LABEL_133;
    }
LABEL_315:
    Swift::Int v331 = String.UTF8View._foreignCount()();
    int64_t v145 = v331 + v143;
    if (!__OFADD__(v331, v143)) {
      goto LABEL_137;
    }
LABEL_317:
    __break(1u);
LABEL_318:
    swift_bridgeObjectRetain_n(v142, 5);
    v332._Swift::UInt64 rawBits = 1;
    v333._Swift::UInt64 rawBits = (v139 << 16) | 1;
    v334._Swift::UInt64 rawBits = _StringGuts.validateScalarRange(_:)(v332, v333, v143, v142);
    if (v334._rawBits < 0x10000) {
      v334._rawBits |= 3;
    }
    Swift::Int v207 = specialized Collection.count.getter(v334, v335, v143, v142);
    swift_bridgeObjectRelease(v142);
    uint64_t v202 = v352._countAndFlagsBits;
    unint64_t v203 = (unint64_t)v352._object;
    if (((uint64_t)v352._object & 0x1000000000000000) != 0) {
      goto LABEL_321;
    }
LABEL_196:
    if ((v203 & 0x2000000000000000) != 0) {
      goto LABEL_200;
    }
    int64_t v208 = (v202 & 0xFFFFFFFFFFFFLL) + v207;
    if (!__OFADD__(v202 & 0xFFFFFFFFFFFFLL, v207)) {
      goto LABEL_201;
    }
    do
    {
LABEL_199:
      __break(1u);
LABEL_200:
      uint64_t v209 = HIBYTE(v203) & 0xF;
      int64_t v208 = v209 + v207;
    }
    while (__OFADD__(v209, v207));
    goto LABEL_201;
  }
  swift_bridgeObjectRetain_n(v47, 5);
  v327._Swift::UInt64 rawBits = 1;
  v328._Swift::UInt64 rawBits = (v142 << 16) | 1;
  v329._Swift::UInt64 rawBits = _StringGuts.validateScalarRange(_:)(v327, v328, v48, v47);
  if (v329._rawBits < 0x10000) {
    v329._rawBits |= 3;
  }
  Swift::Int v143 = specialized Collection.count.getter(v329, v330, v48, v47);
  swift_bridgeObjectRelease(v47);
  uint64_t countAndFlagsBits = v352._countAndFlagsBits;
  unint64_t object = (unint64_t)v352._object;
  if (((uint64_t)v352._object & 0x1000000000000000) != 0) {
    goto LABEL_315;
  }
LABEL_133:
  if ((object & 0x2000000000000000) != 0) {
    uint64_t v144 = HIBYTE(object) & 0xF;
  }
  else {
    uint64_t v144 = countAndFlagsBits & 0xFFFFFFFFFFFFLL;
  }
  int64_t v145 = v144 + v143;
  if (__OFADD__(v144, v143)) {
    goto LABEL_317;
  }
LABEL_137:
  if ((countAndFlagsBits & ~object & 0x2000000000000000) == 0
    || !swift_isUniquelyReferenced_nonNull_native(object & 0xFFFFFFFFFFFFFFFLL))
  {
    if (v145 > 15) {
      goto LABEL_143;
    }
LABEL_147:
    swift_bridgeObjectRelease_n(v47, 5);
    unint64_t v152 = v352._countAndFlagsBits;
    Swift::String::Index v153 = v352._object;
    swift_bridgeObjectRetain((unint64_t)v352._object);
    unint64_t v154 = _StringGuts._convertedToSmall()(v152, (unint64_t)v153);
    unint64_t v156 = v155;
    swift_bridgeObjectRelease((uint64_t)v153);
    v157._Swift::UInt64 rawBits = (v142 << 16) | 1;
    v158._Swift::UInt64 rawBits = 1;
    v159._Swift::UInt64 rawBits = _StringGuts.validateScalarRange(_:)(v158, v157, v48, v47);
    if (v159._rawBits < 0x10000) {
      v159._rawBits |= 3;
    }
    unint64_t v161 = specialized String.init(_:)(v159, v160, v48, v47);
    unint64_t v163 = v162;
    swift_bridgeObjectRelease(v47);
    unint64_t v164 = _StringGuts._convertedToSmall()(v161, v163);
    unint64_t v166 = v165;
    swift_bridgeObjectRelease(v163);
    unint64_t v167 = specialized _SmallString.init(_:appending:)(v154, v156, v164, v166);
    if (v169) {
      goto LABEL_338;
    }
    uint64_t v170 = v167;
    uint64_t v171 = v168;
    swift_bridgeObjectRelease(v47);
    uint64_t v151 = (uint64_t)v352._object;
    v352._uint64_t countAndFlagsBits = v170;
    v352._unint64_t object = v171;
LABEL_153:
    swift_bridgeObjectRelease(v151);
    goto LABEL_170;
  }
  unint64_t v146 = (unint64_t)v352._object;
  int64_t v147 = _StringGuts.nativeUnusedCapacity.getter(v352._countAndFlagsBits, (uint64_t)v352._object);
  if (v148) {
    goto LABEL_339;
  }
  if (v145 <= 15 && ((v146 & 0x2000000000000000) != 0 || v147 < v143)) {
    goto LABEL_147;
  }
LABEL_143:
  _StringGuts.prepareForAppendInPlace(totalCount:otherUTF8Count:)(v145, v143);
  swift_bridgeObjectRelease_n(v47, 4);
  if ((v47 & 0x1000000000000000) != 0)
  {
    swift_bridgeObjectRelease(v47);
    _StringGuts._foreignAppendInPlace(_:)(v48, v47, 0, v142);
    goto LABEL_169;
  }
  if (v139)
  {
    swift_bridgeObjectRelease_n(v47, 2);
    uint64_t v350 = v48;
    unint64_t v351 = v47 & 0xFFFFFFFFFFFFFFLL;
    unint64_t v149 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, HIBYTE(v47) & 0xF, (uint64_t)&v350, HIBYTE(v47) & 0xF);
    _StringGuts.appendInPlace(_:isASCII:)(v149, v150, (v47 & 0x4000000000000000) != 0);
    uint64_t v151 = v47;
    goto LABEL_153;
  }
  if ((v48 & 0x1000000000000000) != 0)
  {
    swift_bridgeObjectRelease(v47);
    id v185 = (id)((v47 & 0xFFFFFFFFFFFFFFFLL) + 32);
    uint64_t v186 = v48 & 0xFFFFFFFFFFFFLL;
    uint64_t v187 = v48 & 0xFFFFFFFFFFFFLL;
    goto LABEL_168;
  }
  id v185 = _StringObject.sharedUTF8.getter(v48, v47);
  uint64_t v187 = v342;
  swift_bridgeObjectRelease(v47);
  if (v187 < (v48 & 0xFFFFFFFFFFFFLL)) {
    goto LABEL_337;
  }
  uint64_t v186 = v48 & 0xFFFFFFFFFFFFLL;
LABEL_168:
  uint64_t v188 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, v186, (uint64_t)v185, v187);
  _StringGuts.appendInPlace(_:isASCII:)(v188, v189, v48 < 0);
LABEL_169:
  swift_bridgeObjectRelease_n(v47, 2);
LABEL_170:
  unint64_t v190 = v348;
  Swift::String v191 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("(stringValue: \"", 0xFuLL, 1);
  unint64_t v192 = v352._object;
  unint64_t v193 = ((unint64_t)v352._object >> 56) & 0xF;
  if (((uint64_t)v352._object & 0x2000000000000000) == 0) {
    unint64_t v193 = v352._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
  }
  if (!v193 && (v352._countAndFlagsBits & ~(uint64_t)v352._object & 0x2000000000000000) == 0)
  {
    Swift::String v352 = v191;
    swift_bridgeObjectRelease((uint64_t)v192);
    goto LABEL_183;
  }
  if (((uint64_t)v352._object & 0x2000000000000000) != 0)
  {
    if (((uint64_t)v191._object & 0x2000000000000000) != 0)
    {
      unint64_t v195 = specialized _SmallString.init(_:appending:)(v352._countAndFlagsBits, (unint64_t)v352._object, v191._countAndFlagsBits, (unint64_t)v191._object);
      if (v197) {
        goto LABEL_181;
      }
      uint64_t v198 = v195;
      unint64_t v199 = v196;
      swift_bridgeObjectRelease((uint64_t)v191._object);
      swift_bridgeObjectRelease((uint64_t)v352._object);
      v352._uint64_t countAndFlagsBits = v198;
      v352._unint64_t object = v199;
      goto LABEL_183;
    }
LABEL_178:
    uint64_t v194 = v191._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
    goto LABEL_182;
  }
  if (((uint64_t)v191._object & 0x2000000000000000) == 0) {
    goto LABEL_178;
  }
LABEL_181:
  uint64_t v194 = ((unint64_t)v191._object >> 56) & 0xF;
LABEL_182:
  swift_bridgeObjectRetain((unint64_t)v191._object);
  _StringGuts.append(_:)(v191._countAndFlagsBits, (unint64_t)v191._object, 0, v194);
  swift_bridgeObjectRelease_n((uint64_t)v191._object, 2);
LABEL_183:
  uint64_t v200 = (*(uint64_t (**)(uint64_t))(v346 + 24))(v347);
  Swift::Int v143 = v200;
  uint64_t v142 = v201;
  uint64_t v202 = v352._countAndFlagsBits;
  unint64_t v203 = (unint64_t)v352._object;
  unint64_t v204 = ((unint64_t)v352._object >> 56) & 0xF;
  unint64_t v205 = v352._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
  if (((uint64_t)v352._object & 0x2000000000000000) != 0) {
    unint64_t v205 = ((unint64_t)v352._object >> 56) & 0xF;
  }
  if (!v205 && (v352._countAndFlagsBits & ~(uint64_t)v352._object & 0x2000000000000000) == 0)
  {
    v352._uint64_t countAndFlagsBits = v200;
    v352._unint64_t object = (void *)v201;
    uint64_t v215 = v203;
    goto LABEL_218;
  }
  unint64_t v47 = v201 & 0x2000000000000000;
  unint64_t object = HIBYTE(v201) & 0xF;
  if (((uint64_t)v352._object & 0x2000000000000000) == 0 || !v47) {
    goto LABEL_191;
  }
  unint64_t v206 = v204 + object;
  if (v204 + object <= 0xF)
  {
    if (object)
    {
      char v283 = 0;
      unint64_t v284 = 0;
      do
      {
        unint64_t v285 = v204 + v284;
        unint64_t v286 = v284 + 1;
        if (v284 >= 8) {
          unint64_t v287 = v201;
        }
        else {
          unint64_t v287 = v200;
        }
        unint64_t v288 = v287 >> (v283 & 0x38);
        char v289 = (8 * v204 + v283) & 0x38;
        uint64_t v290 = (-255 << v289) - 1;
        unint64_t v291 = (unint64_t)v288 << v289;
        unint64_t v292 = v291 | v290 & v203;
        unint64_t v293 = v291 | v290 & v202;
        if (v285 < 8) {
          uint64_t v202 = v293;
        }
        else {
          unint64_t v203 = v292;
        }
        v283 += 8;
        unint64_t v284 = v286;
      }
      while (object != v286);
    }
    swift_bridgeObjectRelease(v201);
    unint64_t v294 = 0xA000000000000000;
    if (!(v202 & 0x8080808080808080 | v203 & 0x80808080808080)) {
      unint64_t v294 = 0xE000000000000000;
    }
    uint64_t v295 = (void *)(v294 & 0xFF00000000000000 | (v206 << 56) | v203 & 0xFFFFFFFFFFFFFFLL);
    swift_bridgeObjectRelease((uint64_t)v352._object);
    v352._uint64_t countAndFlagsBits = v202;
    v352._unint64_t object = v295;
    goto LABEL_219;
  }
  unint64_t v47 = 1;
LABEL_191:
  uint64_t v347 = v200 & 0xFFFFFFFFFFFFLL;
  if (v47) {
    uint64_t v139 = HIBYTE(v201) & 0xF;
  }
  else {
    uint64_t v139 = v200 & 0xFFFFFFFFFFFFLL;
  }
  swift_bridgeObjectRetain_n(v201, 2);
  if ((v142 & 0x1000000000000000) != 0) {
    goto LABEL_318;
  }
  swift_bridgeObjectRetain_n(v142, 4);
  Swift::Int v207 = v139;
  if ((v203 & 0x1000000000000000) == 0) {
    goto LABEL_196;
  }
LABEL_321:
  Swift::Int v336 = String.UTF8View._foreignCount()();
  int64_t v208 = v336 + v207;
  if (__OFADD__(v336, v207)) {
    goto LABEL_199;
  }
LABEL_201:
  if ((v202 & ~v203 & 0x2000000000000000) == 0
    || !swift_isUniquelyReferenced_nonNull_native(v203 & 0xFFFFFFFFFFFFFFFLL))
  {
    if (v208 > 15) {
      goto LABEL_207;
    }
    goto LABEL_211;
  }
  unint64_t v210 = (unint64_t)v352._object;
  int64_t v211 = _StringGuts.nativeUnusedCapacity.getter(v352._countAndFlagsBits, (uint64_t)v352._object);
  if (v212) {
    goto LABEL_339;
  }
  if (v208 <= 15 && ((v210 & 0x2000000000000000) != 0 || v211 < v207))
  {
LABEL_211:
    swift_bridgeObjectRelease_n(v142, 5);
    unint64_t v216 = v352._countAndFlagsBits;
    char v217 = v352._object;
    swift_bridgeObjectRetain((unint64_t)v352._object);
    unint64_t v218 = _StringGuts._convertedToSmall()(v216, (unint64_t)v217);
    unint64_t v220 = v219;
    swift_bridgeObjectRelease((uint64_t)v217);
    v221._Swift::UInt64 rawBits = (v139 << 16) | 1;
    v222._Swift::UInt64 rawBits = 1;
    v223._Swift::UInt64 rawBits = _StringGuts.validateScalarRange(_:)(v222, v221, v143, v142);
    if (v223._rawBits < 0x10000) {
      v223._rawBits |= 3;
    }
    unint64_t v225 = specialized String.init(_:)(v223, v224, v143, v142);
    unint64_t v227 = v226;
    swift_bridgeObjectRelease(v142);
    unint64_t v228 = _StringGuts._convertedToSmall()(v225, v227);
    unint64_t v230 = v229;
    swift_bridgeObjectRelease(v227);
    unint64_t v231 = specialized _SmallString.init(_:appending:)(v218, v220, v228, v230);
    unint64_t v190 = v348;
    if ((v233 & 1) == 0)
    {
      uint64_t v234 = v231;
      char v235 = v232;
      swift_bridgeObjectRelease(v142);
      uint64_t v215 = (uint64_t)v352._object;
      v352._uint64_t countAndFlagsBits = v234;
      v352._unint64_t object = v235;
LABEL_218:
      swift_bridgeObjectRelease(v215);
      goto LABEL_219;
    }
LABEL_338:
    unint64_t v345 = 266;
    goto LABEL_340;
  }
LABEL_207:
  _StringGuts.prepareForAppendInPlace(totalCount:otherUTF8Count:)(v208, v207);
  swift_bridgeObjectRelease_n(v142, 4);
  if ((v142 & 0x1000000000000000) != 0)
  {
    swift_bridgeObjectRelease(v142);
    _StringGuts._foreignAppendInPlace(_:)(v143, v142, 0, v139);
    swift_bridgeObjectRelease_n(v142, 2);
    unint64_t v190 = v348;
    goto LABEL_219;
  }
  unint64_t v190 = v348;
  if (v47)
  {
    swift_bridgeObjectRelease_n(v142, 2);
    uint64_t v350 = v143;
    unint64_t v351 = v142 & 0xFFFFFFFFFFFFFFLL;
    unint64_t v213 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, object, (uint64_t)&v350, object);
    _StringGuts.appendInPlace(_:isASCII:)(v213, v214, (v142 & 0x4000000000000000) != 0);
    uint64_t v215 = v142;
    goto LABEL_218;
  }
  if ((v143 & 0x1000000000000000) != 0)
  {
    swift_bridgeObjectRelease(v142);
    id v309 = (id)((v142 & 0xFFFFFFFFFFFFFFFLL) + 32);
    uint64_t v310 = v347;
    uint64_t v311 = v347;
    goto LABEL_294;
  }
  id v309 = _StringObject.sharedUTF8.getter(v143, v142);
  uint64_t v311 = v343;
  swift_bridgeObjectRelease(v142);
  if (v311 < v347) {
    goto LABEL_337;
  }
  uint64_t v310 = v347;
  unint64_t v190 = v348;
LABEL_294:
  unint64_t v312 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, v310, (uint64_t)v309, v311);
  _StringGuts.appendInPlace(_:isASCII:)(v312, v313, v143 < 0);
  swift_bridgeObjectRelease_n(v142, 2);
LABEL_219:
  Swift::String v236 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("\", intValue: ", 0xDuLL, 1);
  size_t v237 = v352._object;
  unint64_t v238 = ((unint64_t)v352._object >> 56) & 0xF;
  if (((uint64_t)v352._object & 0x2000000000000000) == 0) {
    unint64_t v238 = v352._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
  }
  if (!v238 && (v352._countAndFlagsBits & ~(uint64_t)v352._object & 0x2000000000000000) == 0)
  {
    Swift::String v352 = v236;
    swift_bridgeObjectRelease((uint64_t)v237);
    goto LABEL_232;
  }
  if (((uint64_t)v352._object & 0x2000000000000000) != 0)
  {
    if (((uint64_t)v236._object & 0x2000000000000000) != 0)
    {
      unint64_t v240 = specialized _SmallString.init(_:appending:)(v352._countAndFlagsBits, (unint64_t)v352._object, v236._countAndFlagsBits, (unint64_t)v236._object);
      if (v242) {
        goto LABEL_230;
      }
      uint64_t v243 = v240;
      Swift::String::Index v244 = v241;
      swift_bridgeObjectRelease((uint64_t)v236._object);
      swift_bridgeObjectRelease((uint64_t)v352._object);
      v352._uint64_t countAndFlagsBits = v243;
      v352._unint64_t object = v244;
      goto LABEL_232;
    }
LABEL_227:
    uint64_t v239 = v236._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
    goto LABEL_231;
  }
  if (((uint64_t)v236._object & 0x2000000000000000) == 0) {
    goto LABEL_227;
  }
LABEL_230:
  uint64_t v239 = ((unint64_t)v236._object >> 56) & 0xF;
LABEL_231:
  swift_bridgeObjectRetain((unint64_t)v236._object);
  _StringGuts.append(_:)(v236._countAndFlagsBits, (unint64_t)v236._object, 0, v239);
  swift_bridgeObjectRelease_n((uint64_t)v236._object, 2);
LABEL_232:
  uint64_t v245 = v352._countAndFlagsBits;
  unint64_t v246 = (unint64_t)v352._object;
  unint64_t v247 = ((unint64_t)v352._object >> 56) & 0xF;
  unint64_t v248 = v352._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
  if (((uint64_t)v352._object & 0x2000000000000000) != 0) {
    unint64_t v248 = ((unint64_t)v352._object >> 56) & 0xF;
  }
  if (!v248 && (v352._countAndFlagsBits & ~(uint64_t)v352._object & 0x2000000000000000) == 0)
  {
    v352._uint64_t countAndFlagsBits = v349;
    v352._unint64_t object = (void *)v190;
    uint64_t v262 = v246;
    goto LABEL_267;
  }
  uint64_t v249 = v190 & 0x2000000000000000;
  uint64_t v250 = HIBYTE(v190) & 0xF;
  if (((uint64_t)v352._object & 0x2000000000000000) == 0 || !v249) {
    goto LABEL_240;
  }
  unint64_t v251 = v247 + v250;
  if (v247 + v250 <= 0xF)
  {
    if (v250)
    {
      char v296 = 0;
      unint64_t v297 = 0;
      do
      {
        unint64_t v298 = v247 + v297;
        unint64_t v299 = v297 + 1;
        if (v297 >= 8) {
          unint64_t v300 = v190;
        }
        else {
          unint64_t v300 = v349;
        }
        unint64_t v301 = v300 >> (v296 & 0x38);
        char v302 = (8 * v247 + v296) & 0x38;
        uint64_t v303 = (-255 << v302) - 1;
        unint64_t v304 = (unint64_t)v301 << v302;
        unint64_t v305 = v304 | v303 & v246;
        unint64_t v306 = v304 | v303 & v245;
        if (v298 < 8) {
          uint64_t v245 = v306;
        }
        else {
          unint64_t v246 = v305;
        }
        v296 += 8;
        unint64_t v297 = v299;
      }
      while (v250 != v299);
    }
    swift_bridgeObjectRelease(v190);
    unint64_t v307 = 0xA000000000000000;
    if (!(v245 & 0x8080808080808080 | v246 & 0x80808080808080)) {
      unint64_t v307 = 0xE000000000000000;
    }
    uint64_t v308 = (void *)(v307 & 0xFF00000000000000 | (v251 << 56) | v246 & 0xFFFFFFFFFFFFFFLL);
    swift_bridgeObjectRelease((uint64_t)v352._object);
    v352._uint64_t countAndFlagsBits = v245;
    v352._unint64_t object = v308;
    goto LABEL_299;
  }
  uint64_t v249 = 1;
LABEL_240:
  uint64_t v252 = v349 & 0xFFFFFFFFFFFFLL;
  if (v249) {
    uint64_t v253 = HIBYTE(v190) & 0xF;
  }
  else {
    uint64_t v253 = v349 & 0xFFFFFFFFFFFFLL;
  }
  swift_bridgeObjectRetain_n(v190, 2);
  if ((v190 & 0x1000000000000000) == 0)
  {
    swift_bridgeObjectRetain_n(v190, 4);
    Swift::Int v254 = v253;
    if ((v246 & 0x1000000000000000) == 0) {
      goto LABEL_245;
    }
LABEL_327:
    Swift::Int v341 = String.UTF8View._foreignCount()();
    int64_t v255 = v341 + v254;
    if (!__OFADD__(v341, v254)) {
      goto LABEL_250;
    }
    do
    {
LABEL_248:
      __break(1u);
LABEL_249:
      uint64_t v256 = HIBYTE(v246) & 0xF;
      int64_t v255 = v256 + v254;
    }
    while (__OFADD__(v256, v254));
    goto LABEL_250;
  }
  swift_bridgeObjectRetain_n(v190, 5);
  v337._Swift::UInt64 rawBits = 1;
  v338._Swift::UInt64 rawBits = (v253 << 16) | 1;
  v339._Swift::UInt64 rawBits = _StringGuts.validateScalarRange(_:)(v337, v338, v349, v190);
  if (v339._rawBits < 0x10000) {
    v339._rawBits |= 3;
  }
  Swift::Int v254 = specialized Collection.count.getter(v339, v340, v349, v190);
  swift_bridgeObjectRelease(v190);
  uint64_t v245 = v352._countAndFlagsBits;
  unint64_t v246 = (unint64_t)v352._object;
  if (((uint64_t)v352._object & 0x1000000000000000) != 0) {
    goto LABEL_327;
  }
LABEL_245:
  if ((v246 & 0x2000000000000000) != 0) {
    goto LABEL_249;
  }
  int64_t v255 = (v245 & 0xFFFFFFFFFFFFLL) + v254;
  if (__OFADD__(v245 & 0xFFFFFFFFFFFFLL, v254)) {
    goto LABEL_248;
  }
LABEL_250:
  if ((v245 & ~v246 & 0x2000000000000000) == 0
    || !swift_isUniquelyReferenced_nonNull_native(v246 & 0xFFFFFFFFFFFFFFFLL))
  {
    if (v255 > 15) {
      goto LABEL_256;
    }
LABEL_260:
    swift_bridgeObjectRelease_n(v190, 5);
    unint64_t v263 = v352._countAndFlagsBits;
    char v264 = v352._object;
    swift_bridgeObjectRetain((unint64_t)v352._object);
    unint64_t v265 = _StringGuts._convertedToSmall()(v263, (unint64_t)v264);
    unint64_t v267 = v266;
    swift_bridgeObjectRelease((uint64_t)v264);
    v268._Swift::UInt64 rawBits = (v253 << 16) | 1;
    v269._Swift::UInt64 rawBits = 1;
    v270._Swift::UInt64 rawBits = _StringGuts.validateScalarRange(_:)(v269, v268, v349, v190);
    if (v270._rawBits < 0x10000) {
      v270._rawBits |= 3;
    }
    unint64_t v272 = specialized String.init(_:)(v270, v271, v349, v190);
    unint64_t v274 = v273;
    swift_bridgeObjectRelease(v190);
    unint64_t v275 = _StringGuts._convertedToSmall()(v272, v274);
    unint64_t v277 = v276;
    swift_bridgeObjectRelease(v274);
    unint64_t v278 = specialized _SmallString.init(_:appending:)(v265, v267, v275, v277);
    if ((v280 & 1) == 0)
    {
      uint64_t v281 = v278;
      unint64_t v282 = v279;
      swift_bridgeObjectRelease(v190);
      uint64_t v262 = (uint64_t)v352._object;
      v352._uint64_t countAndFlagsBits = v281;
      v352._unint64_t object = v282;
LABEL_267:
      swift_bridgeObjectRelease(v262);
      goto LABEL_299;
    }
    goto LABEL_338;
  }
  unint64_t v257 = (unint64_t)v352._object;
  int64_t v258 = _StringGuts.nativeUnusedCapacity.getter(v352._countAndFlagsBits, (uint64_t)v352._object);
  if (v259)
  {
LABEL_339:
    unint64_t v345 = 258;
LABEL_340:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/StringGutsRangeReplaceable.swift", 38, 2, v345, 0);
  }
  if (v255 <= 15 && ((v257 & 0x2000000000000000) != 0 || v258 < v254)) {
    goto LABEL_260;
  }
LABEL_256:
  _StringGuts.prepareForAppendInPlace(totalCount:otherUTF8Count:)(v255, v254);
  swift_bridgeObjectRelease_n(v190, 4);
  if ((v190 & 0x1000000000000000) != 0)
  {
    swift_bridgeObjectRelease(v190);
    _StringGuts._foreignAppendInPlace(_:)(v349, v190, 0, v253);
  }
  else
  {
    if (v249)
    {
      swift_bridgeObjectRelease_n(v190, 2);
      uint64_t v350 = v349;
      unint64_t v351 = v190 & 0xFFFFFFFFFFFFFFLL;
      unint64_t v260 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, HIBYTE(v190) & 0xF, (uint64_t)&v350, HIBYTE(v190) & 0xF);
      _StringGuts.appendInPlace(_:isASCII:)(v260, v261, (v190 & 0x4000000000000000) != 0);
      uint64_t v262 = v190;
      goto LABEL_267;
    }
    uint64_t v314 = v349;
    if ((v349 & 0x1000000000000000) != 0)
    {
      swift_bridgeObjectRelease(v190);
      id v315 = (id)((v190 & 0xFFFFFFFFFFFFFFFLL) + 32);
      uint64_t v316 = v349 & 0xFFFFFFFFFFFFLL;
      goto LABEL_297;
    }
    id v315 = _StringObject.sharedUTF8.getter(v349, v190);
    uint64_t v316 = v344;
    swift_bridgeObjectRelease(v190);
    if (v316 < v252) {
LABEL_337:
    }
      _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x745uLL, 0);
    unint64_t v190 = v348;
    uint64_t v314 = v349;
LABEL_297:
    Swift::String::Index v317 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, v252, (uint64_t)v315, v316);
    _StringGuts.appendInPlace(_:isASCII:)(v317, v318, v314 < 0);
  }
  swift_bridgeObjectRelease_n(v190, 2);
LABEL_299:
  Swift::String::Index v319 = v352._object;
  unint64_t v320 = ((unint64_t)v352._object >> 56) & 0xF;
  if (((uint64_t)v352._object & 0x2000000000000000) == 0) {
    unint64_t v320 = v352._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
  }
  if (v320 || (v352._countAndFlagsBits & ~(uint64_t)v352._object & 0x2000000000000000) != 0)
  {
    if (((uint64_t)v352._object & 0x2000000000000000) == 0
      || (unint64_t v321 = specialized _SmallString.init(_:appending:)(v352._countAndFlagsBits, (unint64_t)v352._object, 0x29uLL, 0xE100000000000000), (v323 & 1) != 0))
    {
      swift_bridgeObjectRetain(0xE100000000000000);
      _StringGuts.append(_:)(41, 0xE100000000000000, 0, 1);
      swift_bridgeObjectRelease_n(0xE100000000000000, 2);
    }
    else
    {
      uint64_t v324 = v321;
      Swift::Int v325 = v322;
      swift_bridgeObjectRelease(0xE100000000000000);
      swift_bridgeObjectRelease((uint64_t)v352._object);
      v352._uint64_t countAndFlagsBits = v324;
      v352._unint64_t object = v325;
    }
  }
  else
  {
    v352._uint64_t countAndFlagsBits = 41;
    v352._unint64_t object = (void *)0xE100000000000000;
    swift_bridgeObjectRelease((uint64_t)v319);
  }
  return v352._countAndFlagsBits;
}

uint64_t BinaryInteger.description.getter()
{
  return BinaryInteger._description(radix:uppercase:)(10, 0)._countAndFlagsBits;
}

uint64_t CodingKey.debugDescription.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(void *)(a2 + 16) + 8))();
}

uint64_t KeyedEncodingContainerProtocol.encode(_:forKey:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return KeyedEncodingContainerProtocol.encode(_:forKey:)(a1, a2, a3, a4, a5);
}

{
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  void *inited;
  const char *AssociatedTypeWitness;
  void *boxed_opaque_existential_0Tm;
  void v19[9];
  uint64_t v20;

  swift_allocError((uint64_t)&type metadata for EncodingError, (uint64_t)&protocol witness table for EncodingError, 0, 0);
  uint64_t v10 = v9;
  v9[3] = &type metadata for Int128;
  unint64_t v11 = swift_allocObject(qword_1EC9F28C0, 0x20uLL, 0xFuLL);
  unsigned __int8 *v10 = v11;
  void v11[2] = a1;
  v11[3] = a2;
  unint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t))(a5 + 24))(a4, a5);
  unint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
  inited = swift_initStackObject(v13, v19);
  *((_OWORD *)inited + 1) = xmmword_18162AC80;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (int **)a5, a4, (uint64_t)&protocol requirements base descriptor for KeyedEncodingContainerProtocol, associated type descriptor for KeyedEncodingContainerProtocol.Key);
  inited[7] = AssociatedTypeWitness;
  inited[8] = swift_getAssociatedConformanceWitness(a5, a4, (uint64_t)AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for KeyedEncodingContainerProtocol, associated conformance descriptor for KeyedEncodingContainerProtocol.KeyedEncodingContainerProtocol.Key: CodingKey);
  boxed_opaque_existential_0Tm = __swift_allocate_boxed_opaque_existential_0Tm(inited + 4);
  (*(void (**)(void *, uint64_t, const char *))(*((void *)AssociatedTypeWitness - 1) + 16))(boxed_opaque_existential_0Tm, a3, AssociatedTypeWitness);
  unint64_t v20 = v12;
  specialized Array.append<A>(contentsOf:)((unint64_t)inited, &demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>, &demangling cache variable for type metadata for CodingKey);
  v10[4] = v20;
  v10[5] = 0xD00000000000002ELL;
  v10[6] = 0x80000001816DD4E0;
  v10[7] = 0;
  return swift_willThrow();
}

{
  return KeyedEncodingContainerProtocol.encode(_:forKey:)(a1, a2, a3, a4, a5);
}

{
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  void *inited;
  const char *AssociatedTypeWitness;
  void *boxed_opaque_existential_0Tm;
  void v19[9];
  uint64_t v20;

  swift_allocError((uint64_t)&type metadata for EncodingError, (uint64_t)&protocol witness table for EncodingError, 0, 0);
  uint64_t v10 = v9;
  v9[3] = &type metadata for UInt128;
  unint64_t v11 = swift_allocObject(qword_1EC9F28C0, 0x20uLL, 0xFuLL);
  unsigned __int8 *v10 = v11;
  void v11[2] = a1;
  v11[3] = a2;
  unint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t))(a5 + 24))(a4, a5);
  unint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
  inited = swift_initStackObject(v13, v19);
  *((_OWORD *)inited + 1) = xmmword_18162AC80;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (int **)a5, a4, (uint64_t)&protocol requirements base descriptor for KeyedEncodingContainerProtocol, associated type descriptor for KeyedEncodingContainerProtocol.Key);
  inited[7] = AssociatedTypeWitness;
  inited[8] = swift_getAssociatedConformanceWitness(a5, a4, (uint64_t)AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for KeyedEncodingContainerProtocol, associated conformance descriptor for KeyedEncodingContainerProtocol.KeyedEncodingContainerProtocol.Key: CodingKey);
  boxed_opaque_existential_0Tm = __swift_allocate_boxed_opaque_existential_0Tm(inited + 4);
  (*(void (**)(void *, uint64_t, const char *))(*((void *)AssociatedTypeWitness - 1) + 16))(boxed_opaque_existential_0Tm, a3, AssociatedTypeWitness);
  unint64_t v20 = v12;
  specialized Array.append<A>(contentsOf:)((unint64_t)inited, &demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>, &demangling cache variable for type metadata for CodingKey);
  v10[4] = v20;
  v10[5] = 0xD00000000000002FLL;
  v10[6] = 0x80000001816DD510;
  v10[7] = 0;
  return swift_willThrow();
}

uint64_t KeyedEncodingContainerProtocol.encodeConditional<A>(_:forKey:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return KeyedEncodingContainerProtocol.encodeConditional<A>(_:forKey:)(a1, a2, a5, a3, a6, a4);
}

{
  uint64_t v7;

  char v7 = a1;
  return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a5 + 168))(&v7, a2, a4, a6, a3, a5);
}

uint64_t KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:)(a1, a2, a3, a4);
}

uint64_t KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (result != 2) {
    return (*(uint64_t (**)(uint64_t))(a4 + 40))(result & 1);
  }
  return result;
}

{
  if ((result & 0x100000000) == 0) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, float))(a4 + 64))(a2, a3, a4, *(float *)&result);
  }
  return result;
}

{
  if ((result & 0x100) == 0) {
    return (*(uint64_t (**)(void))(a4 + 80))();
  }
  return result;
}

{
  if ((result & 0x10000) == 0) {
    return (*(uint64_t (**)(void))(a4 + 88))();
  }
  return result;
}

{
  if ((result & 0x100000000) == 0) {
    return (*(uint64_t (**)(void))(a4 + 96))();
  }
  return result;
}

{
  if ((result & 0x100) == 0) {
    return (*(uint64_t (**)(void))(a4 + 128))();
  }
  return result;
}

{
  if ((result & 0x10000) == 0) {
    return (*(uint64_t (**)(void))(a4 + 136))();
  }
  return result;
}

{
  if ((result & 0x100000000) == 0) {
    return (*(uint64_t (**)(void))(a4 + 144))();
  }
  return result;
}

uint64_t KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:)(a1, a2, a3, a4, a5);
}

{
  uint64_t result;

  if (a2) {
    return (*(uint64_t (**)(void))(a5 + 48))();
  }
  return result;
}

uint64_t KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:)(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:)(a1, a2 & 1, a3, a4, a5);
}

{
  return KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:)(a1, a2 & 1, a3, a4, a5);
}

{
  return KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:)(a1, a2 & 1, a3, a4, a5);
}

{
  return KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:)(a1, a2 & 1, a3, a4, a5);
}

{
  return KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:)(a1, a2 & 1, a3, a4, a5);
}

uint64_t KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:)(uint64_t result, char a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if ((a2 & 1) == 0) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, double))(a5 + 56))(a3, a4, a5, *(double *)&result);
  }
  return result;
}

{
  if ((a2 & 1) == 0) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a5 + 72))(result, a3, a4, a5);
  }
  return result;
}

{
  if ((a2 & 1) == 0) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a5 + 104))(result, a3, a4, a5);
  }
  return result;
}

{
  if ((a2 & 1) == 0) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a5 + 120))(result, a3, a4, a5);
  }
  return result;
}

{
  if ((a2 & 1) == 0) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a5 + 152))(result, a3, a4, a5);
  }
  return result;
}

uint64_t KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:)(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:)(a1, a2, a3, a4, (uint64_t (*)(uint64_t))KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:));
}

{
  return KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:)(a1, a2, a3, a4, (uint64_t (*)(uint64_t))KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:));
}

{
  return KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:)(a1, a2, a3, a4, (uint64_t (*)(uint64_t))KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:));
}

uint64_t KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:)(__int16 a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:)(a1, a2, a3, a4, (uint64_t (*)(void))KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:));
}

{
  return KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:)(a1, a2, a3, a4, (uint64_t (*)(void))KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:));
}

uint64_t KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:)(int a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:)(a1, a2, a3, a4, (uint64_t (*)(void))KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:));
}

{
  return KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:)(a1, a2, a3, a4, (uint64_t (*)(void))KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:));
}

uint64_t KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:)(a1, a2, a3 & 1, a4, a5, a6);
}

{
  return KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:)(a1, a2, a3 & 1, a4, a5, a6);
}

uint64_t KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:)(uint64_t result, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if ((a3 & 1) == 0) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a6 + 112))(result, a2, a4, a5, a6);
  }
  return result;
}

{
  if ((a3 & 1) == 0) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a6 + 160))(result, a2, a4, a5, a6);
  }
  return result;
}

uint64_t KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:)(__int16 a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  return a5(a1 & 0x1FF);
}

uint64_t KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:)(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  return a5(a1 & 0x1FFFF);
}

uint64_t KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:)(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t))
{
  return a5(a1 | ((HIDWORD(a1) & 1) << 32));
}

uint64_t KeyedEncodingContainerProtocol.encodeIfPresent<A>(_:forKey:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return KeyedEncodingContainerProtocol.encodeIfPresent<A>(_:forKey:)(a1, a2, a5, a3, a6, a4);
}

{
  Class *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  unint64_t v20 = a6;
  unint64_t v21 = a3;
  unint64_t v19 = a2;
  unint64_t v9 = type metadata accessor for Optional(0, a4, a3, a4);
  uint64_t v10 = (uint64_t)*(v9 - 1);
  unint64_t v11 = MEMORY[0x1F4188790](v9);
  unint64_t v13 = (char *)&v18 - v12;
  uint64_t v14 = *(void *)(a4 - 8);
  MEMORY[0x1F4188790](v11);
  uint64_t v16 = (char *)&v18 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, Class *))(v10 + 16))(v13, a1, v9);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v13, 1, a4) == 1) {
    return (*(uint64_t (**)(char *, Class *))(v10 + 8))(v13, v9);
  }
  (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v16, v13, a4);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a5 + 168))(v16, v19, a4, v20, v21, a5);
  return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v16, a4);
}

uint64_t KeyedEncodingContainer.init<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, char **a4@<X8>)
{
  char v7 = type metadata accessor for _KeyedEncodingContainerBox(0, a2, a3, a3);
  unint64_t v8 = (char *)swift_allocObject((unint64_t *)v7, *((unsigned int *)v7 + 12), *((unsigned __int16 *)v7 + 26));
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(a2 - 8) + 32))(&v8[*(void *)(*(void *)v8 + 432)], a1, a2);
  *a4 = v8;
  return result;
}

uint64_t KeyedEncodingContainer.codingPath.getter()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 88))();
}

uint64_t KeyedEncodingContainer.encodeNil(forKey:)(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void, void))(**(void **)v2 + 96))(a1, *(void *)(a2 + 16), *(void *)(a2 + 24));
}

uint64_t KeyedEncodingContainer.encode(_:forKey:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, void, void))(**(void **)v3 + 104))(a1, a2, *(void *)(a3 + 16), *(void *)(a3 + 24));
}

{
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, void, void))(**(void **)v3 + 136))(a1, a2, *(void *)(a3 + 16), *(void *)(a3 + 24));
}

{
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, void, void))(**(void **)v3 + 144))(a1, a2, *(void *)(a3 + 16), *(void *)(a3 + 24));
}

{
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, void, void))(**(void **)v3 + 152))(a1, a2, *(void *)(a3 + 16), *(void *)(a3 + 24));
}

{
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, void, void))(**(void **)v3 + 160))(a1, a2, *(void *)(a3 + 16), *(void *)(a3 + 24));
}

{
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, void, void))(**(void **)v3 + 168))(a1, a2, *(void *)(a3 + 16), *(void *)(a3 + 24));
}

{
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, void, void))(**(void **)v3 + 184))(a1, a2, *(void *)(a3 + 16), *(void *)(a3 + 24));
}

{
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, void, void))(**(void **)v3 + 192))(a1, a2, *(void *)(a3 + 16), *(void *)(a3 + 24));
}

{
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, void, void))(**(void **)v3 + 200))(a1, a2, *(void *)(a3 + 16), *(void *)(a3 + 24));
}

{
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, void, void))(**(void **)v3 + 208))(a1, a2, *(void *)(a3 + 16), *(void *)(a3 + 24));
}

{
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, void, void))(**(void **)v3 + 216))(a1, a2, *(void *)(a3 + 16), *(void *)(a3 + 24));
}

uint64_t KeyedEncodingContainer.encode(_:forKey:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, void))(**(void **)v4 + 112))(a1, a2, a3, *(void *)(a4 + 16), *(void *)(a4 + 24));
}

{
  uint64_t v4;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, void))(**(void **)v4 + 176))(a1, a2, a3, *(void *)(a4 + 16), *(void *)(a4 + 24));
}

{
  uint64_t v4;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, void))(**(void **)v4 + 224))(a1, a2, a3, *(void *)(a4 + 16), *(void *)(a4 + 24));
}

uint64_t KeyedEncodingContainer.encode(_:forKey:)(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void, void))(**(void **)v2 + 120))(a1, *(void *)(a2 + 16), *(void *)(a2 + 24));
}

{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, void, void))(**(void **)v2 + 128))(a1, *(void *)(a2 + 16), *(void *)(a2 + 24));
}

uint64_t KeyedEncodingContainer.encode<A>(_:forKey:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, uint64_t, void))(**(void **)v5 + 232))(a1, a2, a4, *(void *)(a3 + 16), a5, *(void *)(a3 + 24));
}

uint64_t KeyedEncodingContainer.encodeConditional<A>(_:forKey:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, uint64_t, void))(**(void **)v5 + 240))(a1, a2, a4, *(void *)(a3 + 16), a5, *(void *)(a3 + 24));
}

uint64_t KeyedEncodingContainer.encodeIfPresent(_:forKey:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, void, void))(**(void **)v3 + 248))(a1, a2, *(void *)(a3 + 16), *(void *)(a3 + 24));
}

uint64_t KeyedEncodingContainer.encodeIfPresent(_:forKey:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, void))(**(void **)v4 + 256))(a1, a2, a3, *(void *)(a4 + 16), *(void *)(a4 + 24));
}

uint64_t KeyedEncodingContainer.encodeIfPresent(_:forKey:)(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(uint64_t, void, uint64_t, void, void))(**(void **)v4 + 264))(a1, a2 & 1, a3, *(void *)(a4 + 16), *(void *)(a4 + 24));
}

{
  uint64_t v4;

  return (*(uint64_t (**)(uint64_t, void, uint64_t, void, void))(**(void **)v4 + 280))(a1, a2 & 1, a3, *(void *)(a4 + 16), *(void *)(a4 + 24));
}

{
  uint64_t v4;

  return (*(uint64_t (**)(uint64_t, void, uint64_t, void, void))(**(void **)v4 + 312))(a1, a2 & 1, a3, *(void *)(a4 + 16), *(void *)(a4 + 24));
}

{
  uint64_t v4;

  return (*(uint64_t (**)(uint64_t, void, uint64_t, void, void))(**(void **)v4 + 328))(a1, a2 & 1, a3, *(void *)(a4 + 16), *(void *)(a4 + 24));
}

{
  uint64_t v4;

  return (*(uint64_t (**)(uint64_t, void, uint64_t, void, void))(**(void **)v4 + 360))(a1, a2 & 1, a3, *(void *)(a4 + 16), *(void *)(a4 + 24));
}

uint64_t KeyedEncodingContainer.encodeIfPresent(_:forKey:)(unint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(unint64_t, uint64_t, void, void))(**(void **)v3 + 272))(a1 | ((HIDWORD(a1) & 1) << 32), a2, *(void *)(a3 + 16), *(void *)(a3 + 24));
}

{
  uint64_t v3;

  return (*(uint64_t (**)(unint64_t, uint64_t, void, void))(**(void **)v3 + 304))(a1 | ((HIDWORD(a1) & 1) << 32), a2, *(void *)(a3 + 16), *(void *)(a3 + 24));
}

{
  uint64_t v3;

  return (*(uint64_t (**)(unint64_t, uint64_t, void, void))(**(void **)v3 + 352))(a1 | ((HIDWORD(a1) & 1) << 32), a2, *(void *)(a3 + 16), *(void *)(a3 + 24));
}

uint64_t KeyedEncodingContainer.encodeIfPresent(_:forKey:)(__int16 a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void, uint64_t, void, void))(**(void **)v3 + 288))(a1 & 0x1FF, a2, *(void *)(a3 + 16), *(void *)(a3 + 24));
}

{
  uint64_t v3;

  return (*(uint64_t (**)(void, uint64_t, void, void))(**(void **)v3 + 336))(a1 & 0x1FF, a2, *(void *)(a3 + 16), *(void *)(a3 + 24));
}

uint64_t KeyedEncodingContainer.encodeIfPresent(_:forKey:)(int a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void, uint64_t, void, void))(**(void **)v3 + 296))(a1 & 0x1FFFF, a2, *(void *)(a3 + 16), *(void *)(a3 + 24));
}

{
  uint64_t v3;

  return (*(uint64_t (**)(void, uint64_t, void, void))(**(void **)v3 + 344))(a1 & 0x1FFFF, a2, *(void *)(a3 + 16), *(void *)(a3 + 24));
}

uint64_t KeyedEncodingContainer.encodeIfPresent(_:forKey:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, void, void))(**(void **)v5 + 320))(a1, a2, a3 & 1, a4, *(void *)(a5 + 16), *(void *)(a5 + 24));
}

{
  uint64_t v5;

  return (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, void, void))(**(void **)v5 + 368))(a1, a2, a3 & 1, a4, *(void *)(a5 + 16), *(void *)(a5 + 24));
}

uint64_t KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, uint64_t, void))(**(void **)v5 + 376))(a1, a2, a4, *(void *)(a3 + 16), a5, *(void *)(a3 + 24));
}

uint64_t KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, uint64_t, void))(**(void **)v5 + 384))(a4, a2, a4, *(void *)(a3 + 16), a5, *(void *)(a3 + 24));
}

uint64_t KeyedEncodingContainer.nestedUnkeyedContainer(forKey:)(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void, void))(**(void **)v2 + 392))(a1, *(void *)(a2 + 16), *(void *)(a2 + 24));
}

uint64_t KeyedEncodingContainer.superEncoder()()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 400))();
}

uint64_t KeyedEncodingContainer.superEncoder(forKey:)(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void, void))(**(void **)v2 + 408))(a1, *(void *)(a2 + 16), *(void *)(a2 + 24));
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encodeNil(forKey:) in conformance KeyedEncodingContainer<A>(uint64_t a1, uint64_t a2)
{
  return KeyedEncodingContainer.encodeNil(forKey:)(a1, a2);
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encode(_:forKey:) in conformance KeyedEncodingContainer<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return KeyedEncodingContainer.encode(_:forKey:)(a1, a2, a3);
}

{
  return KeyedEncodingContainer.encode(_:forKey:)(a1, a2, a3);
}

{
  return KeyedEncodingContainer.encode(_:forKey:)(a1, a2, a3);
}

{
  return KeyedEncodingContainer.encode(_:forKey:)(a1, a2, a3);
}

{
  return KeyedEncodingContainer.encode(_:forKey:)(a1, a2, a3);
}

{
  return KeyedEncodingContainer.encode(_:forKey:)(a1, a2, a3);
}

{
  return KeyedEncodingContainer.encode(_:forKey:)(a1, a2, a3);
}

{
  return KeyedEncodingContainer.encode(_:forKey:)(a1, a2, a3);
}

{
  return KeyedEncodingContainer.encode(_:forKey:)(a1, a2, a3);
}

{
  return KeyedEncodingContainer.encode(_:forKey:)(a1, a2, a3);
}

{
  return KeyedEncodingContainer.encode(_:forKey:)(a1, a2, a3);
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encode(_:forKey:) in conformance KeyedEncodingContainer<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return KeyedEncodingContainer.encode(_:forKey:)(a1, a2, a3, a4);
}

{
  return KeyedEncodingContainer.encode(_:forKey:)(a1, a2, a3, a4);
}

{
  return KeyedEncodingContainer.encode(_:forKey:)(a1, a2, a3, a4);
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encode(_:forKey:) in conformance KeyedEncodingContainer<A>(uint64_t a1, uint64_t a2)
{
  return KeyedEncodingContainer.encode(_:forKey:)(a1, a2);
}

{
  return KeyedEncodingContainer.encode(_:forKey:)(a1, a2);
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encode<A>(_:forKey:) in conformance KeyedEncodingContainer<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return KeyedEncodingContainer.encode<A>(_:forKey:)(a1, a2, a5, a3, a4);
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encodeConditional<A>(_:forKey:) in conformance KeyedEncodingContainer<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return KeyedEncodingContainer.encodeConditional<A>(_:forKey:)(a1, a2, a5, a3, a4);
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:) in conformance KeyedEncodingContainer<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return KeyedEncodingContainer.encodeIfPresent(_:forKey:)(a1, a2, a3);
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:) in conformance KeyedEncodingContainer<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return KeyedEncodingContainer.encodeIfPresent(_:forKey:)(a1, a2, a3, a4);
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:) in conformance KeyedEncodingContainer<A>(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  return KeyedEncodingContainer.encodeIfPresent(_:forKey:)(a1, a2 & 1, a3, a4);
}

{
  return KeyedEncodingContainer.encodeIfPresent(_:forKey:)(a1, a2 & 1, a3, a4);
}

{
  return KeyedEncodingContainer.encodeIfPresent(_:forKey:)(a1, a2 & 1, a3, a4);
}

{
  return KeyedEncodingContainer.encodeIfPresent(_:forKey:)(a1, a2 & 1, a3, a4);
}

{
  return KeyedEncodingContainer.encodeIfPresent(_:forKey:)(a1, a2 & 1, a3, a4);
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:) in conformance KeyedEncodingContainer<A>(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:) in conformance KeyedEncodingContainer<A>(a1, a2, a3, a4, (uint64_t (*)(uint64_t))KeyedEncodingContainer.encodeIfPresent(_:forKey:));
}

{
  return protocol witness for KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:) in conformance KeyedEncodingContainer<A>(a1, a2, a3, a4, (uint64_t (*)(uint64_t))KeyedEncodingContainer.encodeIfPresent(_:forKey:));
}

{
  return protocol witness for KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:) in conformance KeyedEncodingContainer<A>(a1, a2, a3, a4, (uint64_t (*)(uint64_t))KeyedEncodingContainer.encodeIfPresent(_:forKey:));
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:) in conformance KeyedEncodingContainer<A>(__int16 a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:) in conformance KeyedEncodingContainer<A>(a1, a2, a3, a4, (uint64_t (*)(void))KeyedEncodingContainer.encodeIfPresent(_:forKey:));
}

{
  return protocol witness for KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:) in conformance KeyedEncodingContainer<A>(a1, a2, a3, a4, (uint64_t (*)(void))KeyedEncodingContainer.encodeIfPresent(_:forKey:));
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:) in conformance KeyedEncodingContainer<A>(int a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:) in conformance KeyedEncodingContainer<A>(a1, a2, a3, a4, (uint64_t (*)(void))KeyedEncodingContainer.encodeIfPresent(_:forKey:));
}

{
  return protocol witness for KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:) in conformance KeyedEncodingContainer<A>(a1, a2, a3, a4, (uint64_t (*)(void))KeyedEncodingContainer.encodeIfPresent(_:forKey:));
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:) in conformance KeyedEncodingContainer<A>(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  return KeyedEncodingContainer.encodeIfPresent(_:forKey:)(a1, a2, a3 & 1, a4, a5);
}

{
  return KeyedEncodingContainer.encodeIfPresent(_:forKey:)(a1, a2, a3 & 1, a4, a5);
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:) in conformance KeyedEncodingContainer<A>(__int16 a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  return a5(a1 & 0x1FF);
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:) in conformance KeyedEncodingContainer<A>(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  return a5(a1 & 0x1FFFF);
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:) in conformance KeyedEncodingContainer<A>(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t))
{
  return a5(a1 | ((HIDWORD(a1) & 1) << 32));
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encodeIfPresent<A>(_:forKey:) in conformance KeyedEncodingContainer<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(a1, a2, a5, a3, a4);
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.nestedContainer<A>(keyedBy:forKey:) in conformance KeyedEncodingContainer<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)(a1, a2, a5, a3, a4);
}

uint64_t KeyedDecodingContainerProtocol.decode(_:forKey:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return KeyedDecodingContainerProtocol.decode(_:forKey:)(a1, a2, a3);
}

{
  return KeyedDecodingContainerProtocol.decode(_:forKey:)(a1, a2, a3, (uint64_t)&type metadata for Int128, 0xD00000000000002ELL, 0x80000001816DD540);
}

{
  return KeyedDecodingContainerProtocol.decode(_:forKey:)(a1, a2, a3);
}

{
  return KeyedDecodingContainerProtocol.decode(_:forKey:)(a1, a2, a3, (uint64_t)&type metadata for UInt128, 0xD00000000000002FLL, 0x80000001816DD570);
}

uint64_t KeyedDecodingContainerProtocol.decode(_:forKey:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  swift_allocError((uint64_t)&type metadata for DecodingError, (uint64_t)&protocol witness table for DecodingError, 0, 0);
  uint64_t v9 = v8;
  uint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 24))(a2, a3);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
  inited = swift_initStackObject(v11, v21);
  *((_OWORD *)inited + 1) = xmmword_18162AC80;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (int **)a3, a2, (uint64_t)&protocol requirements base descriptor for KeyedDecodingContainerProtocol, associated type descriptor for KeyedDecodingContainerProtocol.Key);
  inited[7] = AssociatedTypeWitness;
  inited[8] = swift_getAssociatedConformanceWitness(a3, a2, (uint64_t)AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for KeyedDecodingContainerProtocol, associated conformance descriptor for KeyedDecodingContainerProtocol.KeyedDecodingContainerProtocol.Key: CodingKey);
  boxed_opaque_existential_0Tm = __swift_allocate_boxed_opaque_existential_0Tm(inited + 4);
  (*(void (**)(void *, uint64_t, const char *))(*((void *)AssociatedTypeWitness - 1) + 16))(boxed_opaque_existential_0Tm, a1, AssociatedTypeWitness);
  uint64_t v22 = v10;
  specialized Array.append<A>(contentsOf:)((unint64_t)inited, &demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>, &demangling cache variable for type metadata for CodingKey);
  uint64_t v15 = v22;
  *(void *)uint64_t v9 = a4;
  *(void *)(v9 + 8) = v15;
  *(void *)(v9 + 16) = a5;
  *(void *)(v9 + 24) = a6;
  *(void *)(v9 + 32) = 0;
  *(unsigned char *)(v9 + 72) = 0;
  return swift_willThrow();
}

uint64_t KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:)(a1, a2, a3);
}

{
  uint64_t v3;
  uint64_t v4;
  const char *AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char v15;
  void (*v16)(char *, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t result;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  uint64_t v4 = v3;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (int **)a3, a2, (uint64_t)&protocol requirements base descriptor for KeyedDecodingContainerProtocol, associated type descriptor for KeyedDecodingContainerProtocol.Key);
  Swift::String::Index v25 = *((void *)AssociatedTypeWitness - 1);
  uint64_t v9 = MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v11 = (char *)&v24 - v10;
  unint64_t v12 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v14 = (char *)&v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a3 + 40))(a1, a2, a3);
  uint64_t v16 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
  Swift::String::Index v24 = v4;
  unint64_t v17 = v4;
  char v18 = v25;
  v16(v14, v17, a2);
  (*(void (**)(char *, uint64_t, const char *))(v18 + 16))(v11, a1, AssociatedTypeWitness);
  if ((v15 & 1) == 0)
  {
    (*(void (**)(char *, const char *))(v18 + 8))(v11, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, a2);
    return 2;
  }
  unint64_t v19 = v26;
  unint64_t v20 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(a3 + 48))(v11, a2, a3);
  unint64_t v26 = v19;
  if (v19)
  {
    (*(void (**)(char *, const char *))(v18 + 8))(v11, AssociatedTypeWitness);
    return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, a2);
  }
  uint64_t v22 = v20;
  (*(void (**)(char *, const char *))(v18 + 8))(v11, AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, a2);
  if (v22) {
    return 2;
  }
  Swift::String::Index v23 = v26;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a3 + 56))(a1, a2, a3);
  if (!v23) {
    return result & 1;
  }
  return result;
}

{
  return KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:)(a1, a2, a3);
}

{
  uint64_t v3;
  uint64_t v4;
  const char *AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char v15;
  void (*v16)(char *, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  uint64_t v4 = v3;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (int **)a3, a2, (uint64_t)&protocol requirements base descriptor for KeyedDecodingContainerProtocol, associated type descriptor for KeyedDecodingContainerProtocol.Key);
  Swift::String::Index v24 = *((void *)AssociatedTypeWitness - 1);
  uint64_t v9 = MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v11 = (char *)&v23 - v10;
  unint64_t v12 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v14 = (char *)&v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a3 + 40))(a1, a2, a3);
  uint64_t v16 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
  Swift::String::Index v23 = v4;
  unint64_t v17 = v4;
  char v18 = v24;
  v16(v14, v17, a2);
  (*(void (**)(char *, uint64_t, const char *))(v18 + 16))(v11, a1, AssociatedTypeWitness);
  if (v15)
  {
    unint64_t v19 = v25;
    unint64_t v20 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(a3 + 48))(v11, a2, a3);
    Swift::String::Index v25 = v19;
    if (v19)
    {
      (*(void (**)(char *, const char *))(v18 + 8))(v11, AssociatedTypeWitness);
      return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, a2);
    }
    uint64_t v22 = v20;
    (*(void (**)(char *, const char *))(v18 + 8))(v11, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, a2);
    if ((v22 & 1) == 0) {
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a3 + 64))(a1, a2, a3);
    }
  }
  else
  {
    (*(void (**)(char *, const char *))(v18 + 8))(v11, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, a2);
  }
  return 0;
}

{
  return KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:)(a1, a2, a3, (uint64_t (*)(void))KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:));
}

{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;

  uint64_t result = KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:)(a1, a2, a3);
  if (v3) {
    return v5;
  }
  return result;
}

{
  uint64_t v3;
  uint64_t v4;
  const char *AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char v15;
  void (*v16)(char *, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  uint64_t v4 = v3;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (int **)a3, a2, (uint64_t)&protocol requirements base descriptor for KeyedDecodingContainerProtocol, associated type descriptor for KeyedDecodingContainerProtocol.Key);
  Swift::String::Index v24 = *((void *)AssociatedTypeWitness - 1);
  uint64_t v9 = MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v11 = (char *)&v23 - v10;
  unint64_t v12 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v14 = (char *)&v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a3 + 40))(a1, a2, a3);
  uint64_t v16 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
  Swift::String::Index v23 = v4;
  unint64_t v17 = v4;
  char v18 = v24;
  v16(v14, v17, a2);
  (*(void (**)(char *, uint64_t, const char *))(v18 + 16))(v11, a1, AssociatedTypeWitness);
  if (v15)
  {
    unint64_t v19 = v25;
    unint64_t v20 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(a3 + 48))(v11, a2, a3);
    Swift::String::Index v25 = v19;
    if (v19)
    {
      (*(void (**)(char *, const char *))(v18 + 8))(v11, AssociatedTypeWitness);
      return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, a2);
    }
    uint64_t v22 = v20;
    (*(void (**)(char *, const char *))(v18 + 8))(v11, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, a2);
    if ((v22 & 1) == 0) {
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a3 + 88))(a1, a2, a3);
    }
  }
  else
  {
    (*(void (**)(char *, const char *))(v18 + 8))(v11, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, a2);
  }
  return 0;
}

{
  return KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:)(a1, a2, a3, (uint64_t (*)(void))KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:));
}

{
  uint64_t v3;
  uint64_t v4;
  const char *AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char v15;
  void (*v16)(char *, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t result;
  int v22;
  char v23;
  uint64_t v24;
  void v25[2];
  uint64_t v26;
  uint64_t v27;

  uint64_t v4 = v3;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (int **)a3, a2, (uint64_t)&protocol requirements base descriptor for KeyedDecodingContainerProtocol, associated type descriptor for KeyedDecodingContainerProtocol.Key);
  unint64_t v26 = *((void *)AssociatedTypeWitness - 1);
  uint64_t v9 = MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v11 = (char *)v25 - v10;
  unint64_t v12 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v14 = (char *)v25 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a3 + 40))(a1, a2, a3);
  uint64_t v16 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
  v25[1] = v4;
  unint64_t v17 = v4;
  char v18 = v26;
  v16(v14, v17, a2);
  (*(void (**)(char *, uint64_t, const char *))(v18 + 16))(v11, a1, AssociatedTypeWitness);
  if ((v15 & 1) == 0)
  {
    (*(void (**)(char *, const char *))(v18 + 8))(v11, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, a2);
LABEL_6:
    LOBYTE(result) = 0;
    uint64_t v22 = 1;
    return result | (v22 << 8);
  }
  unint64_t v19 = v27;
  unint64_t v20 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(a3 + 48))(v11, a2, a3);
  unint64_t v27 = v19;
  if (v19)
  {
    (*(void (**)(char *, const char *))(v18 + 8))(v11, AssociatedTypeWitness);
    return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, a2);
  }
  Swift::String::Index v23 = v20;
  (*(void (**)(char *, const char *))(v18 + 8))(v11, AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, a2);
  if (v23) {
    goto LABEL_6;
  }
  Swift::String::Index v24 = v27;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a3 + 96))(a1, a2, a3);
  if (v24) {
    return result;
  }
  uint64_t v22 = 0;
  return result | (v22 << 8);
}

{
  return KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:)(a1, a2, a3, (uint64_t (*)(void))KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:));
}

{
  uint64_t v3;
  uint64_t v4;
  const char *AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char v15;
  void (*v16)(char *, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t result;
  int v22;
  char v23;
  uint64_t v24;
  void v25[2];
  uint64_t v26;
  uint64_t v27;

  uint64_t v4 = v3;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (int **)a3, a2, (uint64_t)&protocol requirements base descriptor for KeyedDecodingContainerProtocol, associated type descriptor for KeyedDecodingContainerProtocol.Key);
  unint64_t v26 = *((void *)AssociatedTypeWitness - 1);
  uint64_t v9 = MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v11 = (char *)v25 - v10;
  unint64_t v12 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v14 = (char *)v25 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a3 + 40))(a1, a2, a3);
  uint64_t v16 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
  v25[1] = v4;
  unint64_t v17 = v4;
  char v18 = v26;
  v16(v14, v17, a2);
  (*(void (**)(char *, uint64_t, const char *))(v18 + 16))(v11, a1, AssociatedTypeWitness);
  if ((v15 & 1) == 0)
  {
    (*(void (**)(char *, const char *))(v18 + 8))(v11, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, a2);
LABEL_6:
    LOWORD(result) = 0;
    uint64_t v22 = 1;
    return (unsigned __int16)result | (v22 << 16);
  }
  unint64_t v19 = v27;
  unint64_t v20 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(a3 + 48))(v11, a2, a3);
  unint64_t v27 = v19;
  if (v19)
  {
    (*(void (**)(char *, const char *))(v18 + 8))(v11, AssociatedTypeWitness);
    return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, a2);
  }
  Swift::String::Index v23 = v20;
  (*(void (**)(char *, const char *))(v18 + 8))(v11, AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, a2);
  if (v23) {
    goto LABEL_6;
  }
  Swift::String::Index v24 = v27;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a3 + 104))(a1, a2, a3);
  if (v24) {
    return result;
  }
  uint64_t v22 = 0;
  return (unsigned __int16)result | (v22 << 16);
}

{
  return KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:)(a1, a2, a3, (uint64_t (*)(void))KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:));
}

{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;

  uint64_t result = KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:)(a1, a2, a3);
  if (v3) {
    return v5;
  }
  return result;
}

{
  uint64_t v3;
  uint64_t v4;
  const char *AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char v15;
  void (*v16)(char *, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  uint64_t v4 = v3;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (int **)a3, a2, (uint64_t)&protocol requirements base descriptor for KeyedDecodingContainerProtocol, associated type descriptor for KeyedDecodingContainerProtocol.Key);
  Swift::String::Index v24 = *((void *)AssociatedTypeWitness - 1);
  uint64_t v9 = MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v11 = (char *)&v23 - v10;
  unint64_t v12 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v14 = (char *)&v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a3 + 40))(a1, a2, a3);
  uint64_t v16 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
  Swift::String::Index v23 = v4;
  unint64_t v17 = v4;
  char v18 = v24;
  v16(v14, v17, a2);
  (*(void (**)(char *, uint64_t, const char *))(v18 + 16))(v11, a1, AssociatedTypeWitness);
  if (v15)
  {
    unint64_t v19 = v25;
    unint64_t v20 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(a3 + 48))(v11, a2, a3);
    Swift::String::Index v25 = v19;
    if (v19)
    {
      (*(void (**)(char *, const char *))(v18 + 8))(v11, AssociatedTypeWitness);
      return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, a2);
    }
    uint64_t v22 = v20;
    (*(void (**)(char *, const char *))(v18 + 8))(v11, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, a2);
    if ((v22 & 1) == 0) {
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a3 + 120))(a1, a2, a3);
    }
  }
  else
  {
    (*(void (**)(char *, const char *))(v18 + 8))(v11, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, a2);
  }
  return 0;
}

{
  return KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:)(a1, a2, a3, (uint64_t (*)(void))KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:));
}

{
  uint64_t v3;
  uint64_t v4;
  const char *AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char v15;
  void (*v16)(char *, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  uint64_t v4 = v3;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (int **)a3, a2, (uint64_t)&protocol requirements base descriptor for KeyedDecodingContainerProtocol, associated type descriptor for KeyedDecodingContainerProtocol.Key);
  Swift::String::Index v24 = *((void *)AssociatedTypeWitness - 1);
  uint64_t v9 = MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v11 = (char *)&v23 - v10;
  unint64_t v12 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v14 = (char *)&v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a3 + 40))(a1, a2, a3);
  uint64_t v16 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
  Swift::String::Index v23 = v4;
  unint64_t v17 = v4;
  char v18 = v24;
  v16(v14, v17, a2);
  (*(void (**)(char *, uint64_t, const char *))(v18 + 16))(v11, a1, AssociatedTypeWitness);
  if (v15)
  {
    unint64_t v19 = v25;
    unint64_t v20 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(a3 + 48))(v11, a2, a3);
    Swift::String::Index v25 = v19;
    if (v19)
    {
      (*(void (**)(char *, const char *))(v18 + 8))(v11, AssociatedTypeWitness);
      return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, a2);
    }
    uint64_t v22 = v20;
    (*(void (**)(char *, const char *))(v18 + 8))(v11, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, a2);
    if ((v22 & 1) == 0) {
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a3 + 128))(a1, a2, a3);
    }
  }
  else
  {
    (*(void (**)(char *, const char *))(v18 + 8))(v11, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, a2);
  }
  return 0;
}

{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;

  uint64_t result = KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:)(a1, a2, a3);
  if (v3) {
    return v5;
  }
  return result;
}

{
  uint64_t v3;
  uint64_t v4;
  const char *AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char v15;
  void (*v16)(char *, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  uint64_t v4 = v3;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (int **)a3, a2, (uint64_t)&protocol requirements base descriptor for KeyedDecodingContainerProtocol, associated type descriptor for KeyedDecodingContainerProtocol.Key);
  Swift::String::Index v24 = *((void *)AssociatedTypeWitness - 1);
  uint64_t v9 = MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v11 = (char *)&v23 - v10;
  unint64_t v12 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v14 = (char *)&v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a3 + 40))(a1, a2, a3);
  uint64_t v16 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
  Swift::String::Index v23 = v4;
  unint64_t v17 = v4;
  char v18 = v24;
  v16(v14, v17, a2);
  (*(void (**)(char *, uint64_t, const char *))(v18 + 16))(v11, a1, AssociatedTypeWitness);
  if (v15)
  {
    unint64_t v19 = v25;
    unint64_t v20 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(a3 + 48))(v11, a2, a3);
    Swift::String::Index v25 = v19;
    if (v19)
    {
      (*(void (**)(char *, const char *))(v18 + 8))(v11, AssociatedTypeWitness);
      return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, a2);
    }
    uint64_t v22 = v20;
    (*(void (**)(char *, const char *))(v18 + 8))(v11, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, a2);
    if ((v22 & 1) == 0) {
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a3 + 136))(a1, a2, a3);
    }
  }
  else
  {
    (*(void (**)(char *, const char *))(v18 + 8))(v11, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, a2);
  }
  return 0;
}

{
  return KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:)(a1, a2, a3, (uint64_t (*)(void))KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:));
}

{
  uint64_t v3;
  uint64_t v4;
  const char *AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char v15;
  void (*v16)(char *, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t result;
  int v22;
  char v23;
  uint64_t v24;
  void v25[2];
  uint64_t v26;
  uint64_t v27;

  uint64_t v4 = v3;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (int **)a3, a2, (uint64_t)&protocol requirements base descriptor for KeyedDecodingContainerProtocol, associated type descriptor for KeyedDecodingContainerProtocol.Key);
  unint64_t v26 = *((void *)AssociatedTypeWitness - 1);
  uint64_t v9 = MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v11 = (char *)v25 - v10;
  unint64_t v12 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v14 = (char *)v25 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a3 + 40))(a1, a2, a3);
  uint64_t v16 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
  v25[1] = v4;
  unint64_t v17 = v4;
  char v18 = v26;
  v16(v14, v17, a2);
  (*(void (**)(char *, uint64_t, const char *))(v18 + 16))(v11, a1, AssociatedTypeWitness);
  if ((v15 & 1) == 0)
  {
    (*(void (**)(char *, const char *))(v18 + 8))(v11, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, a2);
LABEL_6:
    LOBYTE(result) = 0;
    uint64_t v22 = 1;
    return result | (v22 << 8);
  }
  unint64_t v19 = v27;
  unint64_t v20 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(a3 + 48))(v11, a2, a3);
  unint64_t v27 = v19;
  if (v19)
  {
    (*(void (**)(char *, const char *))(v18 + 8))(v11, AssociatedTypeWitness);
    return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, a2);
  }
  Swift::String::Index v23 = v20;
  (*(void (**)(char *, const char *))(v18 + 8))(v11, AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, a2);
  if (v23) {
    goto LABEL_6;
  }
  Swift::String::Index v24 = v27;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a3 + 144))(a1, a2, a3);
  if (v24) {
    return result;
  }
  uint64_t v22 = 0;
  return result | (v22 << 8);
}

{
  return KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:)(a1, a2, a3, (uint64_t (*)(void))KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:));
}

{
  uint64_t v3;
  uint64_t v4;
  const char *AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char v15;
  void (*v16)(char *, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t result;
  int v22;
  char v23;
  uint64_t v24;
  void v25[2];
  uint64_t v26;
  uint64_t v27;

  uint64_t v4 = v3;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (int **)a3, a2, (uint64_t)&protocol requirements base descriptor for KeyedDecodingContainerProtocol, associated type descriptor for KeyedDecodingContainerProtocol.Key);
  unint64_t v26 = *((void *)AssociatedTypeWitness - 1);
  uint64_t v9 = MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v11 = (char *)v25 - v10;
  unint64_t v12 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v14 = (char *)v25 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a3 + 40))(a1, a2, a3);
  uint64_t v16 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
  v25[1] = v4;
  unint64_t v17 = v4;
  char v18 = v26;
  v16(v14, v17, a2);
  (*(void (**)(char *, uint64_t, const char *))(v18 + 16))(v11, a1, AssociatedTypeWitness);
  if ((v15 & 1) == 0)
  {
    (*(void (**)(char *, const char *))(v18 + 8))(v11, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, a2);
LABEL_6:
    LOWORD(result) = 0;
    uint64_t v22 = 1;
    return (unsigned __int16)result | (v22 << 16);
  }
  unint64_t v19 = v27;
  unint64_t v20 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(a3 + 48))(v11, a2, a3);
  unint64_t v27 = v19;
  if (v19)
  {
    (*(void (**)(char *, const char *))(v18 + 8))(v11, AssociatedTypeWitness);
    return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, a2);
  }
  Swift::String::Index v23 = v20;
  (*(void (**)(char *, const char *))(v18 + 8))(v11, AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, a2);
  if (v23) {
    goto LABEL_6;
  }
  Swift::String::Index v24 = v27;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a3 + 152))(a1, a2, a3);
  if (v24) {
    return result;
  }
  uint64_t v22 = 0;
  return (unsigned __int16)result | (v22 << 16);
}

{
  return KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:)(a1, a2, a3, (uint64_t (*)(void))KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:));
}

{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;

  uint64_t result = KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:)(a1, a2, a3);
  if (v3) {
    return v5;
  }
  return result;
}

{
  uint64_t v3;
  uint64_t v4;
  const char *AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char v15;
  void (*v16)(char *, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  uint64_t v4 = v3;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (int **)a3, a2, (uint64_t)&protocol requirements base descriptor for KeyedDecodingContainerProtocol, associated type descriptor for KeyedDecodingContainerProtocol.Key);
  Swift::String::Index v24 = *((void *)AssociatedTypeWitness - 1);
  uint64_t v9 = MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v11 = (char *)&v23 - v10;
  unint64_t v12 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v14 = (char *)&v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a3 + 40))(a1, a2, a3);
  uint64_t v16 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
  Swift::String::Index v23 = v4;
  unint64_t v17 = v4;
  char v18 = v24;
  v16(v14, v17, a2);
  (*(void (**)(char *, uint64_t, const char *))(v18 + 16))(v11, a1, AssociatedTypeWitness);
  if (v15)
  {
    unint64_t v19 = v25;
    unint64_t v20 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(a3 + 48))(v11, a2, a3);
    Swift::String::Index v25 = v19;
    if (v19)
    {
      (*(void (**)(char *, const char *))(v18 + 8))(v11, AssociatedTypeWitness);
      return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, a2);
    }
    uint64_t v22 = v20;
    (*(void (**)(char *, const char *))(v18 + 8))(v11, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, a2);
    if ((v22 & 1) == 0) {
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a3 + 168))(a1, a2, a3);
    }
  }
  else
  {
    (*(void (**)(char *, const char *))(v18 + 8))(v11, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, a2);
  }
  return 0;
}

{
  return KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:)(a1, a2, a3, (uint64_t (*)(void))KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:));
}

{
  uint64_t v3;
  uint64_t v4;
  const char *AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char v15;
  void (*v16)(char *, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  uint64_t v4 = v3;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (int **)a3, a2, (uint64_t)&protocol requirements base descriptor for KeyedDecodingContainerProtocol, associated type descriptor for KeyedDecodingContainerProtocol.Key);
  Swift::String::Index v24 = *((void *)AssociatedTypeWitness - 1);
  uint64_t v9 = MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v11 = (char *)&v23 - v10;
  unint64_t v12 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v14 = (char *)&v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a3 + 40))(a1, a2, a3);
  uint64_t v16 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
  Swift::String::Index v23 = v4;
  unint64_t v17 = v4;
  char v18 = v24;
  v16(v14, v17, a2);
  (*(void (**)(char *, uint64_t, const char *))(v18 + 16))(v11, a1, AssociatedTypeWitness);
  if (v15)
  {
    unint64_t v19 = v25;
    unint64_t v20 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(a3 + 48))(v11, a2, a3);
    Swift::String::Index v25 = v19;
    if (v19)
    {
      (*(void (**)(char *, const char *))(v18 + 8))(v11, AssociatedTypeWitness);
      return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, a2);
    }
    uint64_t v22 = v20;
    (*(void (**)(char *, const char *))(v18 + 8))(v11, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, a2);
    if ((v22 & 1) == 0) {
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a3 + 176))(a1, a2, a3);
    }
  }
  else
  {
    (*(void (**)(char *, const char *))(v18 + 8))(v11, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, a2);
  }
  return 0;
}

void KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

double KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (int **)a3, a2, (uint64_t)&protocol requirements base descriptor for KeyedDecodingContainerProtocol, associated type descriptor for KeyedDecodingContainerProtocol.Key);
  uint64_t v24 = *((void *)AssociatedTypeWitness - 1);
  uint64_t v9 = MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v11 = (char *)&v23 - v10;
  uint64_t v12 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v14 = (char *)&v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v15 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a3 + 40))(a1, a2, a3);
  uint64_t v16 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
  uint64_t v23 = v4;
  uint64_t v17 = v4;
  uint64_t v18 = v24;
  v16(v14, v17, a2);
  (*(void (**)(char *, uint64_t, const char *))(v18 + 16))(v11, a1, AssociatedTypeWitness);
  if (v15)
  {
    uint64_t v19 = v25;
    char v20 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(a3 + 48))(v11, a2, a3);
    uint64_t v25 = v19;
    if (v19)
    {
      (*(void (**)(char *, const char *))(v18 + 8))(v11, AssociatedTypeWitness);
      (*(void (**)(char *, uint64_t))(v12 + 8))(v14, a2);
    }
    else
    {
      char v22 = v20;
      (*(void (**)(char *, const char *))(v18 + 8))(v11, AssociatedTypeWitness);
      (*(void (**)(char *, uint64_t))(v12 + 8))(v14, a2);
      if ((v22 & 1) == 0) {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(a3 + 72))(a1, a2, a3);
      }
    }
  }
  else
  {
    (*(void (**)(char *, const char *))(v18 + 8))(v11, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, a2);
  }
  return result;
}

unint64_t KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (int **)a3, a2, (uint64_t)&protocol requirements base descriptor for KeyedDecodingContainerProtocol, associated type descriptor for KeyedDecodingContainerProtocol.Key);
  uint64_t v28 = *((void *)AssociatedTypeWitness - 1);
  uint64_t v9 = MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v11 = (char *)v27 - v10;
  uint64_t v12 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v14 = (char *)v27 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v15 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a3 + 40))(a1, a2, a3);
  uint64_t v16 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
  v27[1] = v4;
  uint64_t v17 = v4;
  uint64_t v18 = v28;
  v16(v14, v17, a2);
  (*(void (**)(char *, uint64_t, const char *))(v18 + 16))(v11, a1, AssociatedTypeWitness);
  if ((v15 & 1) == 0)
  {
    (*(void (**)(char *, const char *))(v18 + 8))(v11, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, a2);
LABEL_6:
    uint64_t v22 = 0;
    unsigned __int8 v23 = 1;
    goto LABEL_7;
  }
  uint64_t v19 = v29;
  char v20 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(a3 + 48))(v11, a2, a3);
  uint64_t v29 = v19;
  if (v19)
  {
    (*(void (**)(char *, const char *))(v18 + 8))(v11, AssociatedTypeWitness);
    return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, a2);
  }
  char v24 = v20;
  (*(void (**)(char *, const char *))(v18 + 8))(v11, AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, a2);
  if (v24) {
    goto LABEL_6;
  }
  uint64_t v25 = v29;
  unint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a3 + 80))(a1, a2, a3);
  if (v25) {
    return result;
  }
  unsigned __int8 v23 = 0;
  uint64_t v22 = v26;
LABEL_7:
  unsigned __int8 v30 = v23;
  return v22 | ((unint64_t)v23 << 32);
}

{
  uint64_t v3;
  uint64_t v4;
  const char *AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char v15;
  void (*v16)(char *, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  unint64_t result;
  unsigned __int8 v22;
  char v23;
  uint64_t v24;
  void v25[2];
  uint64_t v26;
  uint64_t v27;
  unsigned __int8 v28;

  uint64_t v4 = v3;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (int **)a3, a2, (uint64_t)&protocol requirements base descriptor for KeyedDecodingContainerProtocol, associated type descriptor for KeyedDecodingContainerProtocol.Key);
  unsigned int v26 = *((void *)AssociatedTypeWitness - 1);
  uint64_t v9 = MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v11 = (char *)v25 - v10;
  uint64_t v12 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v14 = (char *)v25 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v15 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a3 + 40))(a1, a2, a3);
  uint64_t v16 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
  v25[1] = v4;
  uint64_t v17 = v4;
  uint64_t v18 = v26;
  v16(v14, v17, a2);
  (*(void (**)(char *, uint64_t, const char *))(v18 + 16))(v11, a1, AssociatedTypeWitness);
  if ((v15 & 1) == 0)
  {
    (*(void (**)(char *, const char *))(v18 + 8))(v11, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, a2);
LABEL_6:
    LODWORD(result) = 0;
    uint64_t v22 = 1;
    goto LABEL_7;
  }
  uint64_t v19 = v27;
  char v20 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(a3 + 48))(v11, a2, a3);
  unint64_t v27 = v19;
  if (v19)
  {
    (*(void (**)(char *, const char *))(v18 + 8))(v11, AssociatedTypeWitness);
    return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, a2);
  }
  unsigned __int8 v23 = v20;
  (*(void (**)(char *, const char *))(v18 + 8))(v11, AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, a2);
  if (v23) {
    goto LABEL_6;
  }
  char v24 = v27;
  unint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a3 + 112))(a1, a2, a3);
  if (v24) {
    return result;
  }
  uint64_t v22 = 0;
LABEL_7:
  uint64_t v28 = v22;
  return result | ((unint64_t)v22 << 32);
}

{
  uint64_t v3;
  uint64_t v4;
  const char *AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char v15;
  void (*v16)(char *, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  unint64_t result;
  unsigned __int8 v22;
  char v23;
  uint64_t v24;
  void v25[2];
  uint64_t v26;
  uint64_t v27;
  unsigned __int8 v28;

  uint64_t v4 = v3;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (int **)a3, a2, (uint64_t)&protocol requirements base descriptor for KeyedDecodingContainerProtocol, associated type descriptor for KeyedDecodingContainerProtocol.Key);
  unsigned int v26 = *((void *)AssociatedTypeWitness - 1);
  uint64_t v9 = MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v11 = (char *)v25 - v10;
  uint64_t v12 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v14 = (char *)v25 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v15 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a3 + 40))(a1, a2, a3);
  uint64_t v16 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
  v25[1] = v4;
  uint64_t v17 = v4;
  uint64_t v18 = v26;
  v16(v14, v17, a2);
  (*(void (**)(char *, uint64_t, const char *))(v18 + 16))(v11, a1, AssociatedTypeWitness);
  if ((v15 & 1) == 0)
  {
    (*(void (**)(char *, const char *))(v18 + 8))(v11, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, a2);
LABEL_6:
    LODWORD(result) = 0;
    uint64_t v22 = 1;
    goto LABEL_7;
  }
  uint64_t v19 = v27;
  char v20 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(a3 + 48))(v11, a2, a3);
  unint64_t v27 = v19;
  if (v19)
  {
    (*(void (**)(char *, const char *))(v18 + 8))(v11, AssociatedTypeWitness);
    return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, a2);
  }
  unsigned __int8 v23 = v20;
  (*(void (**)(char *, const char *))(v18 + 8))(v11, AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, a2);
  if (v23) {
    goto LABEL_6;
  }
  char v24 = v27;
  unint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a3 + 160))(a1, a2, a3);
  if (v24) {
    return result;
  }
  uint64_t v22 = 0;
LABEL_7:
  uint64_t v28 = v22;
  return result | ((unint64_t)v22 << 32);
}

uint64_t KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  return a4() & 0x1FF;
}

{
  return a4() & 0x1FFFF;
}

{
  unint64_t v4;

  uint64_t v4 = a4();
  return v4 | ((HIDWORD(v4) & 1) << 32);
}

{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  unint64_t result = a4();
  if (v4) {
    return v6;
  }
  return result;
}

uint64_t KeyedDecodingContainerProtocol.decodeIfPresent<A>(_:forKey:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  return KeyedDecodingContainerProtocol.decodeIfPresent<A>(_:forKey:)(a1, a4, a2, a5, a3, a6);
}

{
  uint64_t v6;
  uint64_t v7;
  const char *AssociatedTypeWitness;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char v18;
  void (*v19)(char *, uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t result;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  void v30[2];
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  char v7 = v6;
  unint64_t v31 = a5;
  unint64_t v32 = a6;
  uint64_t v33 = a3;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (int **)a4, a2, (uint64_t)&protocol requirements base descriptor for KeyedDecodingContainerProtocol, associated type descriptor for KeyedDecodingContainerProtocol.Key);
  char v34 = *((void *)AssociatedTypeWitness - 1);
  uint64_t v12 = MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v14 = (char *)v30 - v13;
  char v15 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](v12);
  uint64_t v17 = (char *)v30 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a4 + 40))(a1, a2, a4);
  uint64_t v19 = *(void (**)(char *, uint64_t, uint64_t))(v15 + 16);
  v30[1] = v7;
  char v20 = v7;
  unint64_t v21 = v34;
  v19(v17, v20, a2);
  (*(void (**)(char *, uint64_t, const char *))(v21 + 16))(v14, a1, AssociatedTypeWitness);
  if ((v18 & 1) == 0)
  {
    (*(void (**)(char *, const char *))(v21 + 8))(v14, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t))(v15 + 8))(v17, a2);
LABEL_5:
    uint64_t v25 = 1;
    unint64_t v27 = v32;
    unsigned int v26 = v33;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 56))(v27, v25, 1, v26);
  }
  uint64_t v22 = v35;
  unsigned __int8 v23 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(a4 + 48))(v14, a2, a4);
  uint64_t v35 = v22;
  if (v22)
  {
    (*(void (**)(char *, const char *))(v21 + 8))(v14, AssociatedTypeWitness);
    return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v17, a2);
  }
  uint64_t v28 = v23;
  (*(void (**)(char *, const char *))(v21 + 8))(v14, AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t))(v15 + 8))(v17, a2);
  if (v28) {
    goto LABEL_5;
  }
  unint64_t v27 = v32;
  unsigned int v26 = v33;
  uint64_t v29 = v35;
  unint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a4 + 184))(v33, a1, v33, v31, a2, a4);
  if (!v29)
  {
    uint64_t v25 = 0;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 56))(v27, v25, 1, v26);
  }
  return result;
}

uint64_t KeyedDecodingContainer.init<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, char **a4@<X8>)
{
  char v7 = type metadata accessor for _KeyedDecodingContainerBox(0, a2, a3, a3);
  uint64_t v8 = (char *)swift_allocObject((unint64_t *)v7, *((unsigned int *)v7 + 12), *((unsigned __int16 *)v7 + 26));
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(a2 - 8) + 32))(&v8[*(void *)(*(void *)v8 + 440)], a1, a2);
  *a4 = v8;
  return result;
}

uint64_t KeyedDecodingContainer.codingPath.getter()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 88))();
}

__objc2_class **KeyedDecodingContainer.allKeys.getter(uint64_t a1)
{
  uint64_t v3 = (*(uint64_t (**)(void))(**(void **)v1 + 96))();
  uint64_t v4 = specialized _arrayForceCast<A, B>(_:)(v3, *(char **)(a1 + 16));
  swift_bridgeObjectRelease(v3);
  return v4;
}

uint64_t KeyedDecodingContainer.contains(_:)(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void, void))(**(void **)v2 + 104))(a1, *(void *)(a2 + 16), *(void *)(a2 + 24)) & 1;
}

uint64_t KeyedDecodingContainer.decodeNil(forKey:)(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void, void))(**(void **)v2 + 112))(a1, *(void *)(a2 + 16), *(void *)(a2 + 24)) & 1;
}

uint64_t KeyedDecodingContainer.decode(_:forKey:)(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void, void))(**(void **)v2 + 120))(a1, *(void *)(a2 + 16), *(void *)(a2 + 24)) & 1;
}

{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, void, void))(**(void **)v2 + 128))(a1, *(void *)(a2 + 16), *(void *)(a2 + 24));
}

{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, void, void))(**(void **)v2 + 136))(a1, *(void *)(a2 + 16), *(void *)(a2 + 24));
}

{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, void, void))(**(void **)v2 + 144))(a1, *(void *)(a2 + 16), *(void *)(a2 + 24));
}

{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, void, void))(**(void **)v2 + 152))(a1, *(void *)(a2 + 16), *(void *)(a2 + 24));
}

{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, void, void))(**(void **)v2 + 160))(a1, *(void *)(a2 + 16), *(void *)(a2 + 24));
}

{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, void, void))(**(void **)v2 + 168))(a1, *(void *)(a2 + 16), *(void *)(a2 + 24));
}

{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, void, void))(**(void **)v2 + 176))(a1, *(void *)(a2 + 16), *(void *)(a2 + 24));
}

{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, void, void))(**(void **)v2 + 184))(a1, *(void *)(a2 + 16), *(void *)(a2 + 24));
}

{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, void, void))(**(void **)v2 + 192))(a1, *(void *)(a2 + 16), *(void *)(a2 + 24));
}

{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, void, void))(**(void **)v2 + 200))(a1, *(void *)(a2 + 16), *(void *)(a2 + 24));
}

{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, void, void))(**(void **)v2 + 208))(a1, *(void *)(a2 + 16), *(void *)(a2 + 24));
}

{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, void, void))(**(void **)v2 + 216))(a1, *(void *)(a2 + 16), *(void *)(a2 + 24));
}

{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, void, void))(**(void **)v2 + 224))(a1, *(void *)(a2 + 16), *(void *)(a2 + 24));
}

{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, void, void))(**(void **)v2 + 232))(a1, *(void *)(a2 + 16), *(void *)(a2 + 24));
}

{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, void, void))(**(void **)v2 + 240))(a1, *(void *)(a2 + 16), *(void *)(a2 + 24));
}

uint64_t KeyedDecodingContainer.decode<A>(_:forKey:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, uint64_t, void))(**(void **)v5 + 248))(a4, a2, a4, *(void *)(a3 + 16), a5, *(void *)(a3 + 24));
}

uint64_t KeyedDecodingContainer.decodeIfPresent(_:forKey:)(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void, void))(**(void **)v2 + 256))(a1, *(void *)(a2 + 16), *(void *)(a2 + 24));
}

{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, void, void))(**(void **)v2 + 264))(a1, *(void *)(a2 + 16), *(void *)(a2 + 24));
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;

  uint64_t result = (*(uint64_t (**)(uint64_t, void, void))(**(void **)v2 + 272))(a1, *(void *)(a2 + 16), *(void *)(a2 + 24));
  if (v3) {
    return v5;
  }
  return result;
}

{
  uint64_t v2;
  unint64_t v3;

  uint64_t v3 = (*(uint64_t (**)(uint64_t, void, void))(**(void **)v2 + 280))(a1, *(void *)(a2 + 16), *(void *)(a2 + 24));
  return v3 | ((HIDWORD(v3) & 1) << 32);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;

  uint64_t result = (*(uint64_t (**)(uint64_t, void, void))(**(void **)v2 + 288))(a1, *(void *)(a2 + 16), *(void *)(a2 + 24));
  if (v3) {
    return v5;
  }
  return result;
}

{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, void, void))(**(void **)v2 + 296))(a1, *(void *)(a2 + 16), *(void *)(a2 + 24)) & 0x1FF;
}

{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, void, void))(**(void **)v2 + 304))(a1, *(void *)(a2 + 16), *(void *)(a2 + 24)) & 0x1FFFF;
}

{
  uint64_t v2;
  unint64_t v3;

  uint64_t v3 = (*(uint64_t (**)(uint64_t, void, void))(**(void **)v2 + 312))(a1, *(void *)(a2 + 16), *(void *)(a2 + 24));
  return v3 | ((HIDWORD(v3) & 1) << 32);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;

  uint64_t result = (*(uint64_t (**)(uint64_t, void, void))(**(void **)v2 + 320))(a1, *(void *)(a2 + 16), *(void *)(a2 + 24));
  if (v3) {
    return v5;
  }
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;

  uint64_t result = (*(uint64_t (**)(uint64_t, void, void))(**(void **)v2 + 328))(a1, *(void *)(a2 + 16), *(void *)(a2 + 24));
  if (v3) {
    return v5;
  }
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;

  uint64_t result = (*(uint64_t (**)(uint64_t, void, void))(**(void **)v2 + 336))(a1, *(void *)(a2 + 16), *(void *)(a2 + 24));
  if (v3) {
    return v5;
  }
  return result;
}

{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, void, void))(**(void **)v2 + 344))(a1, *(void *)(a2 + 16), *(void *)(a2 + 24)) & 0x1FF;
}

{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, void, void))(**(void **)v2 + 352))(a1, *(void *)(a2 + 16), *(void *)(a2 + 24)) & 0x1FFFF;
}

{
  uint64_t v2;
  unint64_t v3;

  uint64_t v3 = (*(uint64_t (**)(uint64_t, void, void))(**(void **)v2 + 360))(a1, *(void *)(a2 + 16), *(void *)(a2 + 24));
  return v3 | ((HIDWORD(v3) & 1) << 32);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;

  uint64_t result = (*(uint64_t (**)(uint64_t, void, void))(**(void **)v2 + 368))(a1, *(void *)(a2 + 16), *(void *)(a2 + 24));
  if (v3) {
    return v5;
  }
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;

  uint64_t result = (*(uint64_t (**)(uint64_t, void, void))(**(void **)v2 + 376))(a1, *(void *)(a2 + 16), *(void *)(a2 + 24));
  if (v3) {
    return v5;
  }
  return result;
}

uint64_t KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, uint64_t, void))(**(void **)v5 + 384))(a4, a2, a4, *(void *)(a3 + 16), a5, *(void *)(a3 + 24));
}

uint64_t KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, uint64_t, void))(**(void **)v5 + 392))(a4, a2, a4, *(void *)(a3 + 16), a5, *(void *)(a3 + 24));
}

uint64_t KeyedDecodingContainer.nestedUnkeyedContainer(forKey:)(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void, void))(**(void **)v2 + 400))(a1, *(void *)(a2 + 16), *(void *)(a2 + 24));
}

uint64_t KeyedDecodingContainer.superDecoder()()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 408))();
}

uint64_t KeyedDecodingContainer.superDecoder(forKey:)(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void, void))(**(void **)v2 + 416))(a1, *(void *)(a2 + 16), *(void *)(a2 + 24));
}

uint64_t protocol witness for KeyedDecodingContainerProtocol.decodeNil(forKey:) in conformance KeyedDecodingContainer<A>(uint64_t a1, uint64_t a2)
{
  return KeyedDecodingContainer.decodeNil(forKey:)(a1, a2) & 1;
}

uint64_t protocol witness for KeyedDecodingContainerProtocol.decode(_:forKey:) in conformance KeyedDecodingContainer<A>(uint64_t a1, uint64_t a2)
{
  return KeyedDecodingContainer.decode(_:forKey:)(a1, a2) & 1;
}

{
  return KeyedDecodingContainer.decode(_:forKey:)(a1, a2);
}

{
  return KeyedDecodingContainer.decode(_:forKey:)(a1, a2);
}

{
  return KeyedDecodingContainer.decode(_:forKey:)(a1, a2);
}

{
  return KeyedDecodingContainer.decode(_:forKey:)(a1, a2);
}

{
  return KeyedDecodingContainer.decode(_:forKey:)(a1, a2);
}

{
  return KeyedDecodingContainer.decode(_:forKey:)(a1, a2);
}

{
  return KeyedDecodingContainer.decode(_:forKey:)(a1, a2);
}

{
  return KeyedDecodingContainer.decode(_:forKey:)(a1, a2);
}

{
  return KeyedDecodingContainer.decode(_:forKey:)(a1, a2);
}

{
  return KeyedDecodingContainer.decode(_:forKey:)(a1, a2);
}

{
  return KeyedDecodingContainer.decode(_:forKey:)(a1, a2);
}

{
  return KeyedDecodingContainer.decode(_:forKey:)(a1, a2);
}

{
  return KeyedDecodingContainer.decode(_:forKey:)(a1, a2);
}

{
  return KeyedDecodingContainer.decode(_:forKey:)(a1, a2);
}

{
  return KeyedDecodingContainer.decode(_:forKey:)(a1, a2);
}

uint64_t protocol witness for KeyedDecodingContainerProtocol.decode<A>(_:forKey:) in conformance KeyedDecodingContainer<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return KeyedDecodingContainer.decode<A>(_:forKey:)(a1, a2, a5, a3, a4);
}

uint64_t protocol witness for KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:) in conformance KeyedDecodingContainer<A>(uint64_t a1, uint64_t a2)
{
  return KeyedDecodingContainer.decodeIfPresent(_:forKey:)(a1, a2);
}

{
  return KeyedDecodingContainer.decodeIfPresent(_:forKey:)(a1, a2);
}

{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;

  uint64_t result = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(a1, a2);
  if (v2) {
    return v4;
  }
  return result;
}

{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;

  uint64_t result = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(a1, a2);
  if (v2) {
    return v4;
  }
  return result;
}

{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;

  uint64_t result = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(a1, a2);
  if (v2) {
    return v4;
  }
  return result;
}

{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;

  uint64_t result = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(a1, a2);
  if (v2) {
    return v4;
  }
  return result;
}

{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;

  uint64_t result = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(a1, a2);
  if (v2) {
    return v4;
  }
  return result;
}

uint64_t protocol witness for KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:) in conformance KeyedDecodingContainer<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:) in conformance KeyedDecodingContainer<A>(a1, a2, a3, (uint64_t (*)(void))KeyedDecodingContainer.decodeIfPresent(_:forKey:));
}

{
  return protocol witness for KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:) in conformance KeyedDecodingContainer<A>(a1, a2, a3, (uint64_t (*)(void))KeyedDecodingContainer.decodeIfPresent(_:forKey:));
}

{
  return protocol witness for KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:) in conformance KeyedDecodingContainer<A>(a1, a2, a3, (uint64_t (*)(void))KeyedDecodingContainer.decodeIfPresent(_:forKey:));
}

{
  return protocol witness for KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:) in conformance KeyedDecodingContainer<A>(a1, a2, a3, (uint64_t (*)(void))KeyedDecodingContainer.decodeIfPresent(_:forKey:));
}

{
  return protocol witness for KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:) in conformance KeyedDecodingContainer<A>(a1, a2, a3, (uint64_t (*)(void))KeyedDecodingContainer.decodeIfPresent(_:forKey:));
}

{
  return protocol witness for KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:) in conformance KeyedDecodingContainer<A>(a1, a2, a3, (uint64_t (*)(void))KeyedDecodingContainer.decodeIfPresent(_:forKey:));
}

{
  return protocol witness for KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:) in conformance KeyedDecodingContainer<A>(a1, a2, a3, (uint64_t (*)(void))KeyedDecodingContainer.decodeIfPresent(_:forKey:));
}

{
  return protocol witness for KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:) in conformance KeyedDecodingContainer<A>(a1, a2, a3, (uint64_t (*)(void))KeyedDecodingContainer.decodeIfPresent(_:forKey:));
}

{
  return protocol witness for KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:) in conformance KeyedDecodingContainer<A>(a1, a2, a3, (uint64_t (*)(void))KeyedDecodingContainer.decodeIfPresent(_:forKey:));
}

uint64_t protocol witness for KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:) in conformance KeyedDecodingContainer<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  return a4() & 0x1FF;
}

{
  return a4() & 0x1FFFF;
}

{
  unint64_t v4;

  uint64_t v4 = a4();
  return v4 | ((HIDWORD(v4) & 1) << 32);
}

{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  uint64_t result = a4();
  if (v4) {
    return v6;
  }
  return result;
}

uint64_t protocol witness for KeyedDecodingContainerProtocol.decodeIfPresent<A>(_:forKey:) in conformance KeyedDecodingContainer<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(a1, a2, a5, a3, a4);
}

uint64_t protocol witness for KeyedDecodingContainerProtocol.nestedContainer<A>(keyedBy:forKey:) in conformance KeyedDecodingContainer<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)(a1, a2, a5, a3, a4);
}

uint64_t protocol witness for KeyedDecodingContainerProtocol.nestedUnkeyedContainer(forKey:) in conformance KeyedDecodingContainer<A>(uint64_t a1, uint64_t a2)
{
  return KeyedDecodingContainer.nestedUnkeyedContainer(forKey:)(a1, a2);
}

uint64_t protocol witness for KeyedDecodingContainerProtocol.superDecoder() in conformance KeyedDecodingContainer<A>()
{
  return KeyedDecodingContainer.superDecoder()();
}

uint64_t protocol witness for KeyedDecodingContainerProtocol.superDecoder(forKey:) in conformance KeyedDecodingContainer<A>(uint64_t a1, uint64_t a2)
{
  return KeyedDecodingContainer.superDecoder(forKey:)(a1, a2);
}

uint64_t UnkeyedEncodingContainer.encode(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return UnkeyedEncodingContainer.encode(_:)(a1, a2, a3, a4);
}

{
  void *v8;
  void *v9;
  void *v10;

  swift_allocError((uint64_t)&type metadata for EncodingError, (uint64_t)&protocol witness table for EncodingError, 0, 0);
  uint64_t v9 = v8;
  v8[3] = &type metadata for Int128;
  uint64_t v10 = swift_allocObject(qword_1EC9F28C0, 0x20uLL, 0xFuLL);
  *uint64_t v9 = v10;
  void v10[2] = a1;
  v10[3] = a2;
  v9[4] = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 8))(a3, a4);
  v9[5] = 0xD00000000000002ELL;
  v9[6] = 0x80000001816DD4E0;
  v9[7] = 0;
  return swift_willThrow();
}

{
  return UnkeyedEncodingContainer.encode(_:)(a1, a2, a3, a4);
}

{
  void *v8;
  void *v9;
  void *v10;

  swift_allocError((uint64_t)&type metadata for EncodingError, (uint64_t)&protocol witness table for EncodingError, 0, 0);
  uint64_t v9 = v8;
  v8[3] = &type metadata for UInt128;
  uint64_t v10 = swift_allocObject(qword_1EC9F28C0, 0x20uLL, 0xFuLL);
  *uint64_t v9 = v10;
  void v10[2] = a1;
  v10[3] = a2;
  v9[4] = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 8))(a3, a4);
  v9[5] = 0xD00000000000002FLL;
  v9[6] = 0x80000001816DD510;
  v9[7] = 0;
  return swift_willThrow();
}

uint64_t UnkeyedEncodingContainer.encodeConditional<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return UnkeyedEncodingContainer.encodeConditional<A>(_:)(a1, a4, a2, a5, a3);
}

{
  uint64_t v6;

  uint64_t v6 = a1;
  return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t))(a4 + 160))(&v6, a3, a5, a2, a4);
}

uint64_t UnkeyedEncodingContainer.encode<A>(contentsOf:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return UnkeyedEncodingContainer.encode<A>(contentsOf:)(a1, a4, a2, a5, a3);
}

{
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  const char *AssociatedTypeWitness;
  uint64_t v15;
  char *v16;
  uint64_t AssociatedConformanceWitness;
  void (*v18)(uint64_t *__return_ptr, const char *, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  uint64_t v22 = a2;
  uint64_t v10 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v12 = (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (int **)a5, v13, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Iterator);
  unint64_t v21 = *((void *)AssociatedTypeWitness - 1);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v16 = (char *)&v20 - v15;
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, a1, a3);
  (*(void (**)(uint64_t, uint64_t))(a5 + 32))(a3, a5);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(a5, a3, (uint64_t)AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Sequence, associated conformance descriptor for Sequence.Sequence.Iterator: IteratorProtocol);
  uint64_t v18 = *(void (**)(uint64_t *__return_ptr, const char *, uint64_t))(AssociatedConformanceWitness + 16);
  do
  {
    v18(&v23, AssociatedTypeWitness, AssociatedConformanceWitness);
    if (v23 == 2) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t))(a4 + 32))(v23 & 1, v22, a4);
  }
  while (!v5);
  return (*(uint64_t (**)(char *, const char *))(v21 + 8))(v16, AssociatedTypeWitness);
}

{
  return UnkeyedEncodingContainer.encode<A>(contentsOf:)(a1, a4, a2, a5, a3);
}

{
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  const char *AssociatedTypeWitness;
  uint64_t v15;
  char *v16;
  uint64_t AssociatedConformanceWitness;
  void (*v18)(double *__return_ptr, const char *, uint64_t);
  uint64_t v20;
  uint64_t v21;
  double v22;
  char v23;

  unint64_t v21 = a2;
  uint64_t v10 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v12 = (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (int **)a5, v13, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Iterator);
  char v20 = *((void *)AssociatedTypeWitness - 1);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v16 = (char *)&v20 - v15;
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, a1, a3);
  (*(void (**)(uint64_t, uint64_t))(a5 + 32))(a3, a5);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(a5, a3, (uint64_t)AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Sequence, associated conformance descriptor for Sequence.Sequence.Iterator: IteratorProtocol);
  uint64_t v18 = *(void (**)(double *__return_ptr, const char *, uint64_t))(AssociatedConformanceWitness + 16);
  do
  {
    v18(&v22, AssociatedTypeWitness, AssociatedConformanceWitness);
    if (v23) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t, double))(a4 + 48))(v21, a4, v22);
  }
  while (!v5);
  return (*(uint64_t (**)(char *, const char *))(v20 + 8))(v16, AssociatedTypeWitness);
}

{
  return UnkeyedEncodingContainer.encode<A>(contentsOf:)(a1, a4, a2, a5, a3);
}

{
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  const char *AssociatedTypeWitness;
  uint64_t v15;
  char *v16;
  uint64_t AssociatedConformanceWitness;
  void (*v18)(uint64_t *__return_ptr, const char *, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  uint64_t v22 = a2;
  uint64_t v10 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v12 = (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (int **)a5, v13, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Iterator);
  unint64_t v21 = *((void *)AssociatedTypeWitness - 1);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v16 = (char *)&v20 - v15;
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, a1, a3);
  (*(void (**)(uint64_t, uint64_t))(a5 + 32))(a3, a5);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(a5, a3, (uint64_t)AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Sequence, associated conformance descriptor for Sequence.Sequence.Iterator: IteratorProtocol);
  uint64_t v18 = *(void (**)(uint64_t *__return_ptr, const char *, uint64_t))(AssociatedConformanceWitness + 16);
  do
  {
    v18(&v23, AssociatedTypeWitness, AssociatedConformanceWitness);
    if ((v23 & 0x100000000) != 0) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t, float))(a4 + 56))(v22, a4, *(float *)&v23);
  }
  while (!v5);
  return (*(uint64_t (**)(char *, const char *))(v21 + 8))(v16, AssociatedTypeWitness);
}

{
  return UnkeyedEncodingContainer.encode<A>(contentsOf:)(a1, a4, a2, a5, a3);
}

{
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  const char *AssociatedTypeWitness;
  uint64_t v15;
  char *v16;
  uint64_t AssociatedConformanceWitness;
  void (*v18)(uint64_t *__return_ptr, const char *, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;

  unint64_t v21 = a2;
  uint64_t v10 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v12 = (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (int **)a5, v13, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Iterator);
  char v20 = *((void *)AssociatedTypeWitness - 1);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v16 = (char *)&v20 - v15;
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, a1, a3);
  (*(void (**)(uint64_t, uint64_t))(a5 + 32))(a3, a5);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(a5, a3, (uint64_t)AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Sequence, associated conformance descriptor for Sequence.Sequence.Iterator: IteratorProtocol);
  uint64_t v18 = *(void (**)(uint64_t *__return_ptr, const char *, uint64_t))(AssociatedConformanceWitness + 16);
  do
  {
    v18(&v22, AssociatedTypeWitness, AssociatedConformanceWitness);
    if (v23) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t))(a4 + 64))(v22, v21, a4);
  }
  while (!v5);
  return (*(uint64_t (**)(char *, const char *))(v20 + 8))(v16, AssociatedTypeWitness);
}

{
  return UnkeyedEncodingContainer.encode<A>(contentsOf:)(a1, a4, a2, a5, a3);
}

{
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  const char *AssociatedTypeWitness;
  uint64_t v15;
  char *v16;
  uint64_t AssociatedConformanceWitness;
  void (*v18)(uint64_t *__return_ptr, const char *, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  uint64_t v22 = a2;
  uint64_t v10 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v12 = (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (int **)a5, v13, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Iterator);
  unint64_t v21 = *((void *)AssociatedTypeWitness - 1);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v16 = (char *)&v20 - v15;
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, a1, a3);
  (*(void (**)(uint64_t, uint64_t))(a5 + 32))(a3, a5);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(a5, a3, (uint64_t)AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Sequence, associated conformance descriptor for Sequence.Sequence.Iterator: IteratorProtocol);
  uint64_t v18 = *(void (**)(uint64_t *__return_ptr, const char *, uint64_t))(AssociatedConformanceWitness + 16);
  do
  {
    v18(&v23, AssociatedTypeWitness, AssociatedConformanceWitness);
    if ((v23 & 0x100) != 0) {
      break;
    }
    (*(void (**)(void, uint64_t, uint64_t))(a4 + 72))(v23, v22, a4);
  }
  while (!v5);
  return (*(uint64_t (**)(char *, const char *))(v21 + 8))(v16, AssociatedTypeWitness);
}

{
  return UnkeyedEncodingContainer.encode<A>(contentsOf:)(a1, a4, a2, a5, a3);
}

{
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  const char *AssociatedTypeWitness;
  uint64_t v15;
  char *v16;
  uint64_t AssociatedConformanceWitness;
  void (*v18)(uint64_t *__return_ptr, const char *, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  uint64_t v22 = a2;
  uint64_t v10 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v12 = (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (int **)a5, v13, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Iterator);
  unint64_t v21 = *((void *)AssociatedTypeWitness - 1);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v16 = (char *)&v20 - v15;
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, a1, a3);
  (*(void (**)(uint64_t, uint64_t))(a5 + 32))(a3, a5);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(a5, a3, (uint64_t)AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Sequence, associated conformance descriptor for Sequence.Sequence.Iterator: IteratorProtocol);
  uint64_t v18 = *(void (**)(uint64_t *__return_ptr, const char *, uint64_t))(AssociatedConformanceWitness + 16);
  do
  {
    v18(&v23, AssociatedTypeWitness, AssociatedConformanceWitness);
    if ((v23 & 0x10000) != 0) {
      break;
    }
    (*(void (**)(void, uint64_t, uint64_t))(a4 + 80))((unsigned __int16)v23, v22, a4);
  }
  while (!v5);
  return (*(uint64_t (**)(char *, const char *))(v21 + 8))(v16, AssociatedTypeWitness);
}

{
  return UnkeyedEncodingContainer.encode<A>(contentsOf:)(a1, a4, a2, a5, a3);
}

{
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  const char *AssociatedTypeWitness;
  uint64_t v15;
  char *v16;
  uint64_t AssociatedConformanceWitness;
  void (*v18)(uint64_t *__return_ptr, const char *, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  uint64_t v22 = a2;
  uint64_t v10 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v12 = (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (int **)a5, v13, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Iterator);
  unint64_t v21 = *((void *)AssociatedTypeWitness - 1);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v16 = (char *)&v20 - v15;
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, a1, a3);
  (*(void (**)(uint64_t, uint64_t))(a5 + 32))(a3, a5);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(a5, a3, (uint64_t)AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Sequence, associated conformance descriptor for Sequence.Sequence.Iterator: IteratorProtocol);
  uint64_t v18 = *(void (**)(uint64_t *__return_ptr, const char *, uint64_t))(AssociatedConformanceWitness + 16);
  do
  {
    v18(&v23, AssociatedTypeWitness, AssociatedConformanceWitness);
    if ((v23 & 0x100000000) != 0) {
      break;
    }
    (*(void (**)(void, uint64_t, uint64_t))(a4 + 88))(v23, v22, a4);
  }
  while (!v5);
  return (*(uint64_t (**)(char *, const char *))(v21 + 8))(v16, AssociatedTypeWitness);
}

{
  return UnkeyedEncodingContainer.encode<A>(contentsOf:)(a1, a4, a2, a5, a3);
}

{
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  const char *AssociatedTypeWitness;
  uint64_t v15;
  char *v16;
  uint64_t AssociatedConformanceWitness;
  void (*v18)(uint64_t *__return_ptr, const char *, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;

  unint64_t v21 = a2;
  uint64_t v10 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v12 = (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (int **)a5, v13, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Iterator);
  char v20 = *((void *)AssociatedTypeWitness - 1);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v16 = (char *)&v20 - v15;
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, a1, a3);
  (*(void (**)(uint64_t, uint64_t))(a5 + 32))(a3, a5);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(a5, a3, (uint64_t)AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Sequence, associated conformance descriptor for Sequence.Sequence.Iterator: IteratorProtocol);
  uint64_t v18 = *(void (**)(uint64_t *__return_ptr, const char *, uint64_t))(AssociatedConformanceWitness + 16);
  do
  {
    v18(&v22, AssociatedTypeWitness, AssociatedConformanceWitness);
    if (v23) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t))(a4 + 96))(v22, v21, a4);
  }
  while (!v5);
  return (*(uint64_t (**)(char *, const char *))(v20 + 8))(v16, AssociatedTypeWitness);
}

{
  return UnkeyedEncodingContainer.encode<A>(contentsOf:)(a1, a4, a2, a5, a3);
}

{
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  const char *AssociatedTypeWitness;
  uint64_t v15;
  char *v16;
  uint64_t AssociatedConformanceWitness;
  void (*v18)(void *__return_ptr, const char *, uint64_t);
  uint64_t v20;
  uint64_t v21;
  void v22[2];
  char v23;

  unint64_t v21 = a2;
  uint64_t v10 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v12 = (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (int **)a5, v13, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Iterator);
  char v20 = *((void *)AssociatedTypeWitness - 1);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v16 = (char *)&v20 - v15;
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, a1, a3);
  (*(void (**)(uint64_t, uint64_t))(a5 + 32))(a3, a5);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(a5, a3, (uint64_t)AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Sequence, associated conformance descriptor for Sequence.Sequence.Iterator: IteratorProtocol);
  uint64_t v18 = *(void (**)(void *__return_ptr, const char *, uint64_t))(AssociatedConformanceWitness + 16);
  do
  {
    v18(v22, AssociatedTypeWitness, AssociatedConformanceWitness);
    if (v23) {
      break;
    }
    (*(void (**)(void, void, uint64_t, uint64_t))(a4 + 104))(v22[0], v22[1], v21, a4);
  }
  while (!v5);
  return (*(uint64_t (**)(char *, const char *))(v20 + 8))(v16, AssociatedTypeWitness);
}

{
  return UnkeyedEncodingContainer.encode<A>(contentsOf:)(a1, a4, a2, a5, a3);
}

{
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  const char *AssociatedTypeWitness;
  uint64_t v15;
  char *v16;
  uint64_t AssociatedConformanceWitness;
  void (*v18)(uint64_t *__return_ptr, const char *, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;

  unint64_t v21 = a2;
  uint64_t v10 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v12 = (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (int **)a5, v13, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Iterator);
  char v20 = *((void *)AssociatedTypeWitness - 1);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v16 = (char *)&v20 - v15;
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, a1, a3);
  (*(void (**)(uint64_t, uint64_t))(a5 + 32))(a3, a5);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(a5, a3, (uint64_t)AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Sequence, associated conformance descriptor for Sequence.Sequence.Iterator: IteratorProtocol);
  uint64_t v18 = *(void (**)(uint64_t *__return_ptr, const char *, uint64_t))(AssociatedConformanceWitness + 16);
  do
  {
    v18(&v22, AssociatedTypeWitness, AssociatedConformanceWitness);
    if (v23) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t))(a4 + 112))(v22, v21, a4);
  }
  while (!v5);
  return (*(uint64_t (**)(char *, const char *))(v20 + 8))(v16, AssociatedTypeWitness);
}

{
  return UnkeyedEncodingContainer.encode<A>(contentsOf:)(a1, a4, a2, a5, a3);
}

{
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  const char *AssociatedTypeWitness;
  uint64_t v15;
  char *v16;
  uint64_t AssociatedConformanceWitness;
  void (*v18)(uint64_t *__return_ptr, const char *, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  uint64_t v22 = a2;
  uint64_t v10 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v12 = (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (int **)a5, v13, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Iterator);
  unint64_t v21 = *((void *)AssociatedTypeWitness - 1);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v16 = (char *)&v20 - v15;
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, a1, a3);
  (*(void (**)(uint64_t, uint64_t))(a5 + 32))(a3, a5);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(a5, a3, (uint64_t)AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Sequence, associated conformance descriptor for Sequence.Sequence.Iterator: IteratorProtocol);
  uint64_t v18 = *(void (**)(uint64_t *__return_ptr, const char *, uint64_t))(AssociatedConformanceWitness + 16);
  do
  {
    v18(&v23, AssociatedTypeWitness, AssociatedConformanceWitness);
    if ((v23 & 0x100) != 0) {
      break;
    }
    (*(void (**)(void, uint64_t, uint64_t))(a4 + 120))(v23, v22, a4);
  }
  while (!v5);
  return (*(uint64_t (**)(char *, const char *))(v21 + 8))(v16, AssociatedTypeWitness);
}

{
  return UnkeyedEncodingContainer.encode<A>(contentsOf:)(a1, a4, a2, a5, a3);
}

{
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  const char *AssociatedTypeWitness;
  uint64_t v15;
  char *v16;
  uint64_t AssociatedConformanceWitness;
  void (*v18)(uint64_t *__return_ptr, const char *, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  uint64_t v22 = a2;
  uint64_t v10 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v12 = (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (int **)a5, v13, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Iterator);
  unint64_t v21 = *((void *)AssociatedTypeWitness - 1);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v16 = (char *)&v20 - v15;
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, a1, a3);
  (*(void (**)(uint64_t, uint64_t))(a5 + 32))(a3, a5);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(a5, a3, (uint64_t)AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Sequence, associated conformance descriptor for Sequence.Sequence.Iterator: IteratorProtocol);
  uint64_t v18 = *(void (**)(uint64_t *__return_ptr, const char *, uint64_t))(AssociatedConformanceWitness + 16);
  do
  {
    v18(&v23, AssociatedTypeWitness, AssociatedConformanceWitness);
    if ((v23 & 0x10000) != 0) {
      break;
    }
    (*(void (**)(void, uint64_t, uint64_t))(a4 + 128))((unsigned __int16)v23, v22, a4);
  }
  while (!v5);
  return (*(uint64_t (**)(char *, const char *))(v21 + 8))(v16, AssociatedTypeWitness);
}

{
  return UnkeyedEncodingContainer.encode<A>(contentsOf:)(a1, a4, a2, a5, a3);
}

{
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  const char *AssociatedTypeWitness;
  uint64_t v15;
  char *v16;
  uint64_t AssociatedConformanceWitness;
  void (*v18)(uint64_t *__return_ptr, const char *, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  uint64_t v22 = a2;
  uint64_t v10 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v12 = (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (int **)a5, v13, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Iterator);
  unint64_t v21 = *((void *)AssociatedTypeWitness - 1);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v16 = (char *)&v20 - v15;
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, a1, a3);
  (*(void (**)(uint64_t, uint64_t))(a5 + 32))(a3, a5);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(a5, a3, (uint64_t)AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Sequence, associated conformance descriptor for Sequence.Sequence.Iterator: IteratorProtocol);
  uint64_t v18 = *(void (**)(uint64_t *__return_ptr, const char *, uint64_t))(AssociatedConformanceWitness + 16);
  do
  {
    v18(&v23, AssociatedTypeWitness, AssociatedConformanceWitness);
    if ((v23 & 0x100000000) != 0) {
      break;
    }
    (*(void (**)(void, uint64_t, uint64_t))(a4 + 136))(v23, v22, a4);
  }
  while (!v5);
  return (*(uint64_t (**)(char *, const char *))(v21 + 8))(v16, AssociatedTypeWitness);
}

{
  return UnkeyedEncodingContainer.encode<A>(contentsOf:)(a1, a4, a2, a5, a3);
}

{
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  const char *AssociatedTypeWitness;
  uint64_t v15;
  char *v16;
  uint64_t AssociatedConformanceWitness;
  void (*v18)(uint64_t *__return_ptr, const char *, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;

  unint64_t v21 = a2;
  uint64_t v10 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v12 = (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (int **)a5, v13, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Iterator);
  char v20 = *((void *)AssociatedTypeWitness - 1);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v16 = (char *)&v20 - v15;
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, a1, a3);
  (*(void (**)(uint64_t, uint64_t))(a5 + 32))(a3, a5);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(a5, a3, (uint64_t)AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Sequence, associated conformance descriptor for Sequence.Sequence.Iterator: IteratorProtocol);
  uint64_t v18 = *(void (**)(uint64_t *__return_ptr, const char *, uint64_t))(AssociatedConformanceWitness + 16);
  do
  {
    v18(&v22, AssociatedTypeWitness, AssociatedConformanceWitness);
    if (v23) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t))(a4 + 144))(v22, v21, a4);
  }
  while (!v5);
  return (*(uint64_t (**)(char *, const char *))(v20 + 8))(v16, AssociatedTypeWitness);
}

{
  return UnkeyedEncodingContainer.encode<A>(contentsOf:)(a1, a4, a2, a5, a3);
}

{
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  const char *AssociatedTypeWitness;
  uint64_t v15;
  char *v16;
  uint64_t AssociatedConformanceWitness;
  void (*v18)(void *__return_ptr, const char *, uint64_t);
  uint64_t v20;
  uint64_t v21;
  void v22[2];
  char v23;

  unint64_t v21 = a2;
  uint64_t v10 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v12 = (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (int **)a5, v13, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Iterator);
  char v20 = *((void *)AssociatedTypeWitness - 1);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v16 = (char *)&v20 - v15;
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, a1, a3);
  (*(void (**)(uint64_t, uint64_t))(a5 + 32))(a3, a5);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(a5, a3, (uint64_t)AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Sequence, associated conformance descriptor for Sequence.Sequence.Iterator: IteratorProtocol);
  uint64_t v18 = *(void (**)(void *__return_ptr, const char *, uint64_t))(AssociatedConformanceWitness + 16);
  do
  {
    v18(v22, AssociatedTypeWitness, AssociatedConformanceWitness);
    if (v23) {
      break;
    }
    (*(void (**)(void, void, uint64_t, uint64_t))(a4 + 152))(v22[0], v22[1], v21, a4);
  }
  while (!v5);
  return (*(uint64_t (**)(char *, const char *))(v20 + 8))(v16, AssociatedTypeWitness);
}

void UnkeyedEncodingContainer.encode<A>(contentsOf:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
}

{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  const char *AssociatedTypeWitness;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t AssociatedConformanceWitness;
  void (*v18)(uint64_t *__return_ptr, const char *, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  const char *v30;

  unsigned int v26 = a2;
  char v24 = a4;
  uint64_t v9 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v11 = (char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (int **)a5, v12, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Iterator);
  uint64_t v14 = *((void *)AssociatedTypeWitness - 1);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v16 = (char *)&v23 - v15;
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a1, a3);
  (*(void (**)(uint64_t, uint64_t))(a5 + 32))(a3, a5);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(a5, a3, (uint64_t)AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Sequence, associated conformance descriptor for Sequence.Sequence.Iterator: IteratorProtocol);
  uint64_t v18 = *(void (**)(uint64_t *__return_ptr, const char *, uint64_t))(AssociatedConformanceWitness + 16);
  unint64_t v27 = v16;
  unsigned __int8 v30 = AssociatedTypeWitness;
  v18(&v28, AssociatedTypeWitness, AssociatedConformanceWitness);
  uint64_t v19 = v29;
  uint64_t v25 = v14;
  if (v29)
  {
    char v20 = v28;
    unint64_t v21 = v24;
    uint64_t v22 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v24 + 40);
    while (1)
    {
      v22(v20, v19, v26, v21);
      if (v5) {
        break;
      }
      swift_bridgeObjectRelease(v19);
      v18(&v28, v30, AssociatedConformanceWitness);
      char v20 = v28;
      uint64_t v19 = v29;
      if (!v29) {
        goto LABEL_5;
      }
    }
    (*(void (**)(char *, const char *))(v25 + 8))(v27, v30);
    swift_bridgeObjectRelease(v19);
  }
  else
  {
LABEL_5:
    (*(void (**)(char *, const char *))(v25 + 8))(v27, v30);
  }
}

uint64_t UnkeyedEncodingContainer.encode<A>(contentsOf:)(const char *a1, uint64_t a2, int **a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return UnkeyedEncodingContainer.encode<A>(contentsOf:)(a1, a5, a2, a6, a3, a4);
}

uint64_t UnkeyedEncodingContainer.encode<A>(contentsOf:)(const char *a1, uint64_t a2, uint64_t a3, uint64_t a4, int **a5, uint64_t a6)
{
  uint64_t v41 = a6;
  uint64_t v32 = a4;
  uint64_t v40 = a2;
  uint64_t v43 = a1;
  uint64_t v42 = a5;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, a5, a3, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
  uint64_t v38 = *((void *)AssociatedTypeWitness - 1);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v11 = (char *)&v32 - v10;
  uint64_t v14 = type metadata accessor for Optional(0, (uint64_t)AssociatedTypeWitness, v12, v13);
  uint64_t v15 = MEMORY[0x1F4188790](v14 - 1);
  uint64_t v17 = (char *)&v32 - v16;
  uint64_t v18 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](v15);
  char v20 = (char *)&v32 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v21 = swift_getAssociatedTypeWitness(0, a5, a3, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Iterator);
  uint64_t v33 = *((void *)v21 - 1);
  MEMORY[0x1F4188790](v21);
  unsigned __int8 v23 = (int **)((char *)&v32 - v22);
  (*(void (**)(char *, const char *, uint64_t))(v18 + 16))(v20, v43, a3);
  uint64_t v24 = (uint64_t)v42;
  ((void (*)(uint64_t, int **))v42[4])(a3, v42);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v24, a3, (uint64_t)v21, (uint64_t)&protocol requirements base descriptor for Sequence, associated conformance descriptor for Sequence.Sequence.Iterator: IteratorProtocol);
  unsigned int v26 = *(void (**)(const char *, uint64_t))(AssociatedConformanceWitness + 16);
  uint64_t v42 = v23;
  uint64_t v43 = v21;
  Swift::String::Index v39 = v26;
  v26(v21, AssociatedConformanceWitness);
  uint64_t v27 = v38;
  uint64_t v28 = *(unsigned int (**)(char *, uint64_t, const char *))(v38 + 48);
  if (v28(v17, 1, AssociatedTypeWitness) != 1)
  {
    char v34 = v28;
    uint64_t v35 = AssociatedConformanceWitness + 16;
    uint64_t v38 = *(void *)(v27 + 32);
    uint64_t v29 = v32;
    uint64_t v36 = AssociatedConformanceWitness;
    uint64_t v37 = v32 + 160;
    unsigned __int8 v30 = (void (**)(char *, const char *))(v27 + 8);
    while (1)
    {
      ((void (*)(char *, char *, const char *))v38)(v11, v17, AssociatedTypeWitness);
      (*(void (**)(char *, const char *, uint64_t, uint64_t, uint64_t))(v29 + 160))(v11, AssociatedTypeWitness, v41, v40, v29);
      if (v6) {
        break;
      }
      (*v30)(v11, AssociatedTypeWitness);
      v39(v43, v36);
      if (v34(v17, 1, AssociatedTypeWitness) == 1) {
        return (*(uint64_t (**)(int **, const char *))(v33 + 8))(v42, v43);
      }
    }
    (*v30)(v11, AssociatedTypeWitness);
  }
  return (*(uint64_t (**)(int **, const char *))(v33 + 8))(v42, v43);
}

uint64_t UnkeyedDecodingContainer.decode(_:)(uint64_t a1, uint64_t a2)
{
  return UnkeyedDecodingContainer.decode(_:)(a1, a2);
}

{
  return UnkeyedDecodingContainer.decode(_:)(a1, a2, (uint64_t)&type metadata for Int128, 0xD00000000000002ELL, 0x80000001816DD540);
}

{
  return UnkeyedDecodingContainer.decode(_:)(a1, a2);
}

{
  return UnkeyedDecodingContainer.decode(_:)(a1, a2, (uint64_t)&type metadata for UInt128, 0xD00000000000002FLL, 0x80000001816DD570);
}

uint64_t UnkeyedDecodingContainer.decode(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  swift_allocError((uint64_t)&type metadata for DecodingError, (uint64_t)&protocol witness table for DecodingError, 0, 0);
  uint64_t v11 = v10;
  uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 8))(a1, a2);
  *(void *)uint64_t v11 = a3;
  *(void *)(v11 + 8) = v12;
  *(void *)(v11 + 16) = a4;
  *(void *)(v11 + 24) = a5;
  *(void *)(v11 + 32) = 0;
  *(unsigned char *)(v11 + 72) = 0;
  return swift_willThrow();
}

uint64_t UnkeyedDecodingContainer.decodeIfPresent(_:)(uint64_t a1, uint64_t a2)
{
  return UnkeyedDecodingContainer.decodeIfPresent(_:)(a1, a2);
}

{
  uint64_t v2;
  uint64_t result;

  if ((*(uint64_t (**)(void))(a2 + 24))()) {
    return 2;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 40))(a1, a2);
  if (!v2)
  {
    if (result) {
      return 2;
    }
    return (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 48))(a1, a2) & 1;
  }
  return result;
}

{
  return UnkeyedDecodingContainer.decodeIfPresent(_:)(a1, a2);
}

{
  uint64_t v2;
  uint64_t result;

  if ((*(uint64_t (**)(void))(a2 + 24))()) {
    return 0;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 40))(a1, a2);
  if (!v2)
  {
    if (result) {
      return 0;
    }
    return (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 56))(a1, a2);
  }
  return result;
}

{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;

  uint64_t result = UnkeyedDecodingContainer.decodeIfPresent(_:)(a1, a2);
  if (v2) {
    return v4;
  }
  return result;
}

{
  uint64_t v2;
  uint64_t result;
  uint64_t v6;

  if ((*(uint64_t (**)(void))(a2 + 24))()) {
    return 0;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 40))(a1, a2);
  if (!v2)
  {
    if (result) {
      return 0;
    }
    (*(void (**)(uint64_t, uint64_t))(a2 + 64))(a1, a2);
    return v6;
  }
  return result;
}

{
  return UnkeyedDecodingContainer.decodeIfPresent(_:)(a1, a2, (uint64_t (*)(void))UnkeyedDecodingContainer.decodeIfPresent(_:));
}

{
  uint64_t v2;
  uint64_t v5;
  unsigned __int8 v6;
  uint64_t result;
  unsigned int v8;

  if ((*(uint64_t (**)(void))(a2 + 24))()) {
    goto LABEL_2;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 40))(a1, a2);
  if (!v2)
  {
    if ((result & 1) == 0)
    {
      (*(void (**)(uint64_t, uint64_t))(a2 + 72))(a1, a2);
      uint64_t v6 = 0;
      uint64_t v5 = v8;
      return v5 | ((unint64_t)v6 << 32);
    }
LABEL_2:
    uint64_t v5 = 0;
    uint64_t v6 = 1;
    return v5 | ((unint64_t)v6 << 32);
  }
  return result;
}

{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;

  uint64_t result = UnkeyedDecodingContainer.decodeIfPresent(_:)(a1, a2);
  if (v2) {
    return v4;
  }
  return result;
}

{
  uint64_t v2;
  uint64_t result;

  if ((*(uint64_t (**)(void))(a2 + 24))()) {
    return 0;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 40))(a1, a2);
  if (!v2)
  {
    if (result) {
      return 0;
    }
    return (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 80))(a1, a2);
  }
  return result;
}

{
  return UnkeyedDecodingContainer.decodeIfPresent(_:)(a1, a2, (uint64_t (*)(void))UnkeyedDecodingContainer.decodeIfPresent(_:));
}

{
  uint64_t v2;
  unsigned __int8 v5;
  int v6;
  uint64_t result;

  if ((*(uint64_t (**)(void))(a2 + 24))()) {
    goto LABEL_2;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 40))(a1, a2);
  if (!v2)
  {
    if ((result & 1) == 0)
    {
      uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 88))(a1, a2);
      uint64_t v6 = 0;
      return v5 | (v6 << 8);
    }
LABEL_2:
    uint64_t v5 = 0;
    uint64_t v6 = 1;
    return v5 | (v6 << 8);
  }
  return result;
}

{
  return UnkeyedDecodingContainer.decodeIfPresent(_:)(a1, a2, (uint64_t (*)(void))UnkeyedDecodingContainer.decodeIfPresent(_:));
}

{
  uint64_t v2;
  unsigned __int16 v5;
  int v6;
  uint64_t result;

  if ((*(uint64_t (**)(void))(a2 + 24))()) {
    goto LABEL_2;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 40))(a1, a2);
  if (!v2)
  {
    if ((result & 1) == 0)
    {
      uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 96))(a1, a2);
      uint64_t v6 = 0;
      return v5 | (v6 << 16);
    }
LABEL_2:
    uint64_t v5 = 0;
    uint64_t v6 = 1;
    return v5 | (v6 << 16);
  }
  return result;
}

{
  return UnkeyedDecodingContainer.decodeIfPresent(_:)(a1, a2, (uint64_t (*)(void))UnkeyedDecodingContainer.decodeIfPresent(_:));
}

{
  uint64_t v2;
  unsigned int v5;
  unsigned __int8 v6;
  uint64_t result;

  if ((*(uint64_t (**)(void))(a2 + 24))()) {
    goto LABEL_2;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 40))(a1, a2);
  if (!v2)
  {
    if ((result & 1) == 0)
    {
      uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 104))(a1, a2);
      uint64_t v6 = 0;
      return v5 | ((unint64_t)v6 << 32);
    }
LABEL_2:
    uint64_t v5 = 0;
    uint64_t v6 = 1;
    return v5 | ((unint64_t)v6 << 32);
  }
  return result;
}

{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;

  uint64_t result = UnkeyedDecodingContainer.decodeIfPresent(_:)(a1, a2);
  if (v2) {
    return v4;
  }
  return result;
}

{
  uint64_t v2;
  uint64_t result;

  if ((*(uint64_t (**)(void))(a2 + 24))()) {
    return 0;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 40))(a1, a2);
  if (!v2)
  {
    if (result) {
      return 0;
    }
    return (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 112))(a1, a2);
  }
  return result;
}

{
  return UnkeyedDecodingContainer.decodeIfPresent(_:)(a1, a2, (uint64_t (*)(void))UnkeyedDecodingContainer.decodeIfPresent(_:));
}

{
  uint64_t v2;
  uint64_t result;

  if ((*(uint64_t (**)(void))(a2 + 24))()) {
    return 0;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 40))(a1, a2);
  if (!v2)
  {
    if (result) {
      return 0;
    }
    return (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 120))(a1, a2);
  }
  return result;
}

{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;

  uint64_t result = UnkeyedDecodingContainer.decodeIfPresent(_:)(a1, a2);
  if (v2) {
    return v4;
  }
  return result;
}

{
  uint64_t v2;
  uint64_t result;

  if ((*(uint64_t (**)(void))(a2 + 24))()) {
    return 0;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 40))(a1, a2);
  if (!v2)
  {
    if (result) {
      return 0;
    }
    return (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 128))(a1, a2);
  }
  return result;
}

{
  return UnkeyedDecodingContainer.decodeIfPresent(_:)(a1, a2, (uint64_t (*)(void))UnkeyedDecodingContainer.decodeIfPresent(_:));
}

{
  uint64_t v2;
  unsigned __int8 v5;
  int v6;
  uint64_t result;

  if ((*(uint64_t (**)(void))(a2 + 24))()) {
    goto LABEL_2;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 40))(a1, a2);
  if (!v2)
  {
    if ((result & 1) == 0)
    {
      uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 136))(a1, a2);
      uint64_t v6 = 0;
      return v5 | (v6 << 8);
    }
LABEL_2:
    uint64_t v5 = 0;
    uint64_t v6 = 1;
    return v5 | (v6 << 8);
  }
  return result;
}

{
  return UnkeyedDecodingContainer.decodeIfPresent(_:)(a1, a2, (uint64_t (*)(void))UnkeyedDecodingContainer.decodeIfPresent(_:));
}

{
  uint64_t v2;
  unsigned __int16 v5;
  int v6;
  uint64_t result;

  if ((*(uint64_t (**)(void))(a2 + 24))()) {
    goto LABEL_2;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 40))(a1, a2);
  if (!v2)
  {
    if ((result & 1) == 0)
    {
      uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 144))(a1, a2);
      uint64_t v6 = 0;
      return v5 | (v6 << 16);
    }
LABEL_2:
    uint64_t v5 = 0;
    uint64_t v6 = 1;
    return v5 | (v6 << 16);
  }
  return result;
}

{
  return UnkeyedDecodingContainer.decodeIfPresent(_:)(a1, a2, (uint64_t (*)(void))UnkeyedDecodingContainer.decodeIfPresent(_:));
}

{
  uint64_t v2;
  unsigned int v5;
  unsigned __int8 v6;
  uint64_t result;

  if ((*(uint64_t (**)(void))(a2 + 24))()) {
    goto LABEL_2;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 40))(a1, a2);
  if (!v2)
  {
    if ((result & 1) == 0)
    {
      uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 152))(a1, a2);
      uint64_t v6 = 0;
      return v5 | ((unint64_t)v6 << 32);
    }
LABEL_2:
    uint64_t v5 = 0;
    uint64_t v6 = 1;
    return v5 | ((unint64_t)v6 << 32);
  }
  return result;
}

{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;

  uint64_t result = UnkeyedDecodingContainer.decodeIfPresent(_:)(a1, a2);
  if (v2) {
    return v4;
  }
  return result;
}

{
  uint64_t v2;
  uint64_t result;

  if ((*(uint64_t (**)(void))(a2 + 24))()) {
    return 0;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 40))(a1, a2);
  if (!v2)
  {
    if (result) {
      return 0;
    }
    return (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 160))(a1, a2);
  }
  return result;
}

{
  return UnkeyedDecodingContainer.decodeIfPresent(_:)(a1, a2, (uint64_t (*)(void))UnkeyedDecodingContainer.decodeIfPresent(_:));
}

{
  uint64_t v2;
  uint64_t result;

  if ((*(uint64_t (**)(void))(a2 + 24))()) {
    return 0;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 40))(a1, a2);
  if (!v2)
  {
    if (result) {
      return 0;
    }
    return (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 168))(a1, a2);
  }
  return result;
}

uint64_t UnkeyedDecodingContainer.decodeIfPresent(_:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  return a3() & 0x1FF;
}

{
  return a3() & 0x1FFFF;
}

{
  unint64_t v3;

  uint64_t v3 = a3();
  return v3 | ((HIDWORD(v3) & 1) << 32);
}

{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;

  uint64_t result = a3();
  if (v3) {
    return v5;
  }
  return result;
}

uint64_t UnkeyedDecodingContainer.decodeIfPresent<A>(_:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  return UnkeyedDecodingContainer.decodeIfPresent<A>(_:)(a3, a1, a4, a2, a5);
}

{
  uint64_t v5;
  uint64_t result;

  if ((*(uint64_t (**)(uint64_t, uint64_t))(a3 + 24))(a1, a3)) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 56))(a5, 1, 1, a2);
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 40))(a1, a3);
  if (!v5)
  {
    if (result) {
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 56))(a5, 1, 1, a2);
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a3 + 176))(a2, a2, a4, a1, a3);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(a2 - 8) + 56))(a5, 0, 1, a2);
  }
  return result;
}

uint64_t SingleValueEncodingContainer.encode(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return SingleValueEncodingContainer.encode(_:)(a1, a2, a3, a4);
}

{
  void *v8;
  void *v9;
  void *v10;

  swift_allocError((uint64_t)&type metadata for EncodingError, (uint64_t)&protocol witness table for EncodingError, 0, 0);
  uint64_t v9 = v8;
  v8[3] = &type metadata for Int128;
  uint64_t v10 = swift_allocObject(qword_1EC9F28C0, 0x20uLL, 0xFuLL);
  *uint64_t v9 = v10;
  void v10[2] = a1;
  v10[3] = a2;
  v9[4] = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 8))(a3, a4);
  v9[5] = 0xD00000000000002ELL;
  v9[6] = 0x80000001816DD4E0;
  v9[7] = 0;
  return swift_willThrow();
}

{
  return SingleValueEncodingContainer.encode(_:)(a1, a2, a3, a4);
}

{
  void *v8;
  void *v9;
  void *v10;

  swift_allocError((uint64_t)&type metadata for EncodingError, (uint64_t)&protocol witness table for EncodingError, 0, 0);
  uint64_t v9 = v8;
  v8[3] = &type metadata for UInt128;
  uint64_t v10 = swift_allocObject(qword_1EC9F28C0, 0x20uLL, 0xFuLL);
  *uint64_t v9 = v10;
  void v10[2] = a1;
  v10[3] = a2;
  v9[4] = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 8))(a3, a4);
  v9[5] = 0xD00000000000002FLL;
  v9[6] = 0x80000001816DD510;
  v9[7] = 0;
  return swift_willThrow();
}

uint64_t SingleValueDecodingContainer.decode(_:)(uint64_t a1, uint64_t a2)
{
  return SingleValueDecodingContainer.decode(_:)(a1, a2);
}

{
  return SingleValueDecodingContainer.decode(_:)(a1, a2, (uint64_t)&type metadata for Int128, 0xD00000000000002ELL, 0x80000001816DD540);
}

{
  return SingleValueDecodingContainer.decode(_:)(a1, a2);
}

{
  return SingleValueDecodingContainer.decode(_:)(a1, a2, (uint64_t)&type metadata for UInt128, 0xD00000000000002FLL, 0x80000001816DD570);
}

uint64_t SingleValueDecodingContainer.decode(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  swift_allocError((uint64_t)&type metadata for DecodingError, (uint64_t)&protocol witness table for DecodingError, 0, 0);
  uint64_t v11 = v10;
  uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 8))(a1, a2);
  *(void *)uint64_t v11 = a3;
  *(void *)(v11 + 8) = v12;
  *(void *)(v11 + 16) = a4;
  *(void *)(v11 + 24) = a5;
  *(void *)(v11 + 32) = 0;
  *(unsigned char *)(v11 + 72) = 0;
  return swift_willThrow();
}

uint64_t CodingUserInfoKey.rawValue.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain(v0[1]);
  return v1;
}

Swift::CodingUserInfoKey_optional __swiftcall CodingUserInfoKey.init(rawValue:)(Swift::CodingUserInfoKey_optional rawValue)
{
  *uint64_t v1 = rawValue;
  return rawValue;
}

uint64_t static CodingUserInfoKey.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a1;
  unint64_t v5 = a1[1];
  unint64_t v6 = a2[1];
  if (v4 == *a2 && v5 == v6) {
    return 1;
  }
  if ((~v5 & 0x6000000000000000) != 0 || (v6 & 0x2000000000000000) == 0 || (v6 & 0x4000000000000000) == 0) {
    return _stringCompareInternal(_:_:expecting:)(v4, v5, *a2, v6, 0);
  }
  else {
    return 0;
  }
}

Swift::Int CodingUserInfoKey.hashValue.getter()
{
  unint64_t v1 = *v0;
  unint64_t v2 = v0[1];
  v4[0] = 0;
  v4[1] = _swift_stdlib_Hashing_parameters ^ 0x736F6D6570736575;
  v4[2] = unk_1EB208F00 ^ 0x646F72616E646F6DLL;
  v4[3] = _swift_stdlib_Hashing_parameters ^ 0x6C7967656E657261;
  v4[4] = unk_1EB208F00 ^ 0x7465646279746573;
  long long v5 = 0u;
  long long v6 = 0u;
  String.hash(into:)(v4, v1, v2);
  return Hasher._finalize()();
}

Swift::Int String.hashValue.getter(unint64_t a1, unint64_t a2)
{
  v3[0] = 0;
  v3[1] = _swift_stdlib_Hashing_parameters ^ 0x736F6D6570736575;
  v3[2] = unk_1EB208F00 ^ 0x646F72616E646F6DLL;
  v3[3] = _swift_stdlib_Hashing_parameters ^ 0x6C7967656E657261;
  v3[4] = unk_1EB208F00 ^ 0x7465646279746573;
  long long v4 = 0u;
  long long v5 = 0u;
  String.hash(into:)(v3, a1, a2);
  return Hasher._finalize()();
}

void CodingUserInfoKey.hash(into:)(unint64_t *a1)
{
  unint64_t v2 = *v1;
  unint64_t v3 = v1[1];
  if ((v3 & 0x2000000000000000) != 0) {
    uint64_t v4 = v1[1];
  }
  else {
    uint64_t v4 = *v1;
  }
  if ((v3 & 0x1000000000000000) != 0 || (v4 & 0x4000000000000000) == 0)
  {
    if ((v3 & 0x2000000000000000) != 0) {
      uint64_t v9 = HIBYTE(v3) & 0xF;
    }
    else {
      uint64_t v9 = v2 & 0xFFFFFFFFFFFFLL;
    }
    _StringGutsSlice._normalizedHash(into:)(a1, v2, v3, 0, v9);
  }
  else
  {
    if ((v3 & 0x2000000000000000) != 0)
    {
      v10[0] = *v1;
      v10[1] = v3 & 0xFFFFFFFFFFFFFFLL;
      uint64_t v8 = (char *)v10 + (HIBYTE(v3) & 0xF);
      char v7 = v10;
    }
    else
    {
      if ((v2 & 0x1000000000000000) != 0)
      {
        id v5 = (id)((v3 & 0xFFFFFFFFFFFFFFFLL) + 32);
        uint64_t v6 = v2 & 0xFFFFFFFFFFFFLL;
      }
      else
      {
        id v5 = _StringObject.sharedUTF8.getter(*v1, v1[1]);
      }
      char v7 = (void *)specialized UnsafeRawBufferPointer.init<A>(_:)((uint64_t)v5, v6);
    }
    Hasher.combine(bytes:)(*(Swift::UnsafeRawBufferPointer *)&v7);
    Hasher._combine(_:)(0xFFu);
  }
}

unint64_t protocol witness for RawRepresentable.rawValue.getter in conformance CodingUserInfoKey@<X0>(void *a1@<X8>)
{
  unint64_t v2 = v1[1];
  *a1 = *v1;
  a1[1] = v2;
  return swift_bridgeObjectRetain(v2);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance CodingUserInfoKey(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a1;
  unint64_t v5 = a1[1];
  unint64_t v6 = a2[1];
  if (v4 == *a2 && v5 == v6) {
    return 1;
  }
  if ((~v5 & 0x6000000000000000) != 0 || (v6 & 0x2000000000000000) == 0 || (v6 & 0x4000000000000000) == 0) {
    return _stringCompareInternal(_:_:expecting:)(v4, v5, *a2, v6, 0);
  }
  else {
    return 0;
  }
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance CodingUserInfoKey(uint64_t a1)
{
  uint64_t v2 = v1[1];
  uint64_t v7 = *v1;
  uint64_t v8 = v2;
  v4[0] = 0;
  v4[1] = _swift_stdlib_Hashing_parameters ^ a1 ^ 0x736F6D6570736575;
  v4[2] = unk_1EB208F00 ^ 0x646F72616E646F6DLL;
  v4[3] = _swift_stdlib_Hashing_parameters ^ a1 ^ 0x6C7967656E657261;
  v4[4] = unk_1EB208F00 ^ 0x7465646279746573;
  long long v5 = 0u;
  long long v6 = 0u;
  CodingUserInfoKey.hash(into:)(v4);
  return Hasher._finalize()();
}

Swift::Int RawRepresentable<>._rawHashValue(seed:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[0] = 0;
  v4[1] = _swift_stdlib_Hashing_parameters ^ a1 ^ 0x736F6D6570736575;
  v4[2] = unk_1EB208F00 ^ 0x646F72616E646F6DLL;
  v4[3] = _swift_stdlib_Hashing_parameters ^ a1 ^ 0x6C7967656E657261;
  v4[4] = unk_1EB208F00 ^ 0x7465646279746573;
  long long v5 = 0u;
  long long v6 = 0u;
  (*(void (**)(void *))(a3 + 24))(v4);
  return Hasher._finalize()();
}

unint64_t EncodingError._domain.getter()
{
  return 0xD000000000000012;
}

uint64_t EncodingError._code.getter()
{
  outlined init with copy of EncodingError(v0, v4);
  uint64_t v1 = v4[4];
  uint64_t v2 = (void *)v4[7];
  swift_bridgeObjectRelease(v4[6]);
  swift_bridgeObjectRelease(v1);
  swift_errorRelease(v2);
  __swift_destroy_boxed_opaque_existential_1Tm(v4);
  return 4866;
}

atomic_ullong *EncodingError._userInfo.getter()
{
  outlined init with copy of EncodingError(v0, v19);
  uint64_t v1 = v21;
  uint64_t v2 = v22;
  unint64_t v4 = v23;
  unint64_t v3 = v24;
  swift_bridgeObjectRetain(v21);
  swift_bridgeObjectRetain(v4);
  swift_errorRetain(v3);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v1);
  swift_errorRelease(v3);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t *)v19);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  inited = swift_initStackObject(v5, v18);
  *((_OWORD *)inited + 1) = xmmword_18162AD10;
  strcpy((char *)inited + 32, "NSCodingPath");
  *((unsigned char *)inited + 45) = 0;
  *((_WORD *)inited + 23) = -5120;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [CodingKey]);
  inited[6] = v1;
  inited[9] = v7;
  inited[10] = 0xD000000000000012;
  inited[15] = &type metadata for String;
  inited[11] = 0x80000001816DD5C0;
  inited[12] = v2;
  inited[13] = v4;
  uint64_t v8 = specialized Dictionary.init(dictionaryLiteral:)((uint64_t)inited);
  if (v3)
  {
    swift_getErrorValue(v3, &v17, &v15);
    unint64_t v9 = v15;
    uint64_t v10 = v16;
    uint64_t v20 = v16;
    boxed_opaque_existential_0Tm = __swift_allocate_boxed_opaque_existential_0Tm(v19);
    (*(void (**)(void *, unint64_t, uint64_t))(*(void *)(v10 - 8) + 16))(boxed_opaque_existential_0Tm, v9, v10);
    outlined init with take of Any(v19, v14);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native((uint64_t)v8);
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v14, 0xD000000000000011, 0x80000001816DD5E0, isUniquelyReferenced_nonNull_native);
    swift_errorRelease(v3);
    swift_bridgeObjectRelease(0x8000000000000000);
  }
  v19[0] = v8;
  return _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(v19, qword_1ECA01D58);
}

atomic_ullong *specialized Dictionary.init(dictionaryLiteral:)(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2)
  {
    unint64_t v3 = (atomic_ullong *)&_swiftEmptyDictionarySingleton;
    swift_retain((atomic_ullong *)&_swiftEmptyDictionarySingleton);
    goto LABEL_10;
  }
  unint64_t v3 = (atomic_ullong *)specialized static _DictionaryStorage.allocate(capacity:)(v2);
  uint64_t v4 = *(void *)(a1 + 16);
  swift_retain(v3);
  if (!v4)
  {
LABEL_10:
    swift_release((uint64_t)v3);
    swift_bridgeObjectRelease(a1);
    return v3;
  }
  unint64_t v5 = 0;
  uint64_t v6 = a1 + 32;
  while (1)
  {
    if (v5 >= *(void *)(a1 + 16)) {
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Index out of range", 18, 2, "Swift/ContiguousArrayBuffer.swift", 33, 2, 0x2A3uLL, 0);
    }
    outlined init with copy of (String, Any)(v6, (uint64_t)v14);
    v14[3] = v14[0];
    v15[0] = v14[1];
    v15[1] = v14[2];
    long long v7 = v14[0];
    outlined init with take of Any(v15, v14);
    unint64_t v8 = specialized __RawDictionaryStorage.find<A>(_:)(v7, *((unint64_t *)&v7 + 1));
    if (v9) {
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Dictionary literal contains duplicate keys", 42, 2, "Swift/Dictionary.swift", 22, 2, 0x33EuLL, 0);
    }
    *(atomic_ullong *)((char *)v3 + ((v8 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v8;
    *(_OWORD *)(v3[6] + 16 * v8) = v7;
    uint64_t result = (atomic_ullong *)outlined init with take of Any(v14, (_OWORD *)(v3[7] + 32 * v8));
    atomic_ullong v11 = v3[2];
    BOOL v12 = __OFADD__(v11, 1);
    atomic_ullong v13 = v11 + 1;
    if (v12) {
      break;
    }
    ++v5;
    v3[2] = v13;
    v6 += 48;
    if (v4 == v5) {
      goto LABEL_10;
    }
  }
  __break(1u);
  return result;
}

atomic_ullong *Dictionary.init(dictionaryLiteral:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = a1;
  uint64_t v61 = *(void *)(a3 - 8);
  uint64_t v8 = MEMORY[0x1F4188790](a1);
  uint64_t v10 = (char *)&v45 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v60 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v8);
  atomic_ullong v13 = (char *)&v45 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0, v14, v15, 0, 0);
  uint64_t v62 = *(TupleTypeMetadata2 - 1);
  uint64_t v17 = MEMORY[0x1F4188790](TupleTypeMetadata2);
  uint64_t v19 = (char *)&v45 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v46 = v18;
  MEMORY[0x1F4188790](v17);
  unint64_t v21 = (char *)&v45 - v20;
  Swift::Int v22 = Array._getCount()();
  uint64_t v57 = a2;
  uint64_t v58 = a3;
  uint64_t v59 = a4;
  if (v22)
  {
    uint64_t v23 = v22;
    type metadata accessor for _DictionaryStorage(0, a2, a3, a4);
    uint64_t v24 = (atomic_ullong *)static _DictionaryStorage.allocate(capacity:)(v23);
  }
  else
  {
    uint64_t v24 = (atomic_ullong *)&_swiftEmptyDictionarySingleton;
  }
  uint64_t v63 = v24;
  swift_retain(v24);
  Swift::Int v25 = Array._getCount()();
  unsigned int v26 = v63;
  Swift::Int v56 = v25;
  if (v25)
  {
    unint64_t v27 = 0;
    unsigned int v54 = (void (**)(char *, id *, uint64_t *))(v62 + 16);
    unint64_t v55 = v7 & 0xC000000000000001;
    uint64_t v28 = (void (**)(char *, char *, uint64_t))(v60 + 32);
    unsigned int v52 = (void (**)(char *, char *, uint64_t))(v61 + 32);
    unsigned int v53 = (void (**)(char *, char *, uint64_t *))(v62 + 32);
    uint64_t v50 = v7;
    unint64_t v51 = v63 + 8;
    uint64_t v48 = v21;
    uint64_t v49 = v19;
    unint64_t v47 = TupleTypeMetadata2;
    unsigned int v26 = v63;
    do
    {
      BOOL v29 = v55 == 0;
      char v30 = v29 | ~_swift_isClassOrObjCExistentialType((uint64_t)TupleTypeMetadata2, TupleTypeMetadata2);
      Array._checkSubscript(_:wasNativeTypeChecked:)(v27, v30 & 1);
      if (v30)
      {
        (*(void (**)(char *, unint64_t, uint64_t *))(v62 + 16))(v19, v7+ ((*(unsigned __int8 *)(v62 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v62 + 80))+ *(void *)(v62 + 72) * v27, TupleTypeMetadata2);
      }
      else
      {
        id v43 = _ArrayBuffer._getElementSlowPath(_:)(v27, v7, TupleTypeMetadata2);
        Swift::String::Index v39 = v43;
        if (v46 != 8) {
          goto LABEL_19;
        }
        v67[0] = v43;
        (*v54)(v19, v67, TupleTypeMetadata2);
        swift_unknownObjectRelease(v39);
      }
      (*v53)(v21, v19, TupleTypeMetadata2);
      if (__OFADD__(v27, 1))
      {
        __break(1u);
LABEL_17:
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Dictionary literal contains duplicate keys", 42, 2, "Swift/Dictionary.swift", 22, 2, 0x33EuLL, 0);
      }
      unint64_t v64 = v27 + 1;
      unint64_t v65 = v27;
      unint64_t v31 = &v21[*((int *)TupleTypeMetadata2 + 12)];
      uint64_t v32 = *v28;
      uint64_t v33 = v57;
      (*v28)(v13, v21, v57);
      uint64_t v34 = v58;
      uint64_t v66 = *v52;
      v66(v10, v31, v58);
      unint64_t v35 = __RawDictionaryStorage.find<A>(_:)((uint64_t)v13, v33, v59);
      if (v36) {
        goto LABEL_17;
      }
      unint64_t v37 = v35;
      *(atomic_ullong *)((char *)v51 + ((v35 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v35;
      v32((char *)(v26[6] + *(void *)(v60 + 72) * v35), v13, v33);
      unint64_t v38 = v26[7] + *(void *)(v61 + 72) * v37;
      Swift::String::Index v39 = v10;
      v66((char *)v38, v10, v34);
      atomic_ullong v40 = v26[2];
      BOOL v41 = __OFADD__(v40, 1);
      atomic_ullong v42 = v40 + 1;
      if (v41)
      {
        __break(1u);
LABEL_19:
        swift_unknownObjectRelease(v39);
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't unsafeBitCast between types of different sizes", 52, 2, "Swift/Builtin.swift", 19, 2, 0x5FuLL, 0);
      }
      void v26[2] = v42;
      unint64_t v27 = v65 + 1;
      uint64_t v19 = v49;
      uint64_t v7 = v50;
      TupleTypeMetadata2 = v47;
      unint64_t v21 = v48;
    }
    while (v64 != v56);
  }
  swift_release((uint64_t)v26);
  swift_bridgeObjectRelease(v7);
  return v26;
}

uint64_t Dictionary.subscript.setter(uint64_t a1, id *a2, void *a3, uint64_t a4)
{
  uint64_t v7 = a3[3];
  uint64_t v8 = type metadata accessor for Optional(0, v7, (uint64_t)a3, a4);
  uint64_t v9 = (uint64_t)*(v8 - 1);
  uint64_t v10 = MEMORY[0x1F4188790](v8);
  uint64_t v12 = (char *)&v22 - v11;
  uint64_t v13 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v10);
  uint64_t v15 = (char *)&v22 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v13 + 48))(a1, 1, v7) == 1)
  {
    uint64_t v16 = *(void (**)(uint64_t, Class *))(v9 + 8);
    v16(a1, v8);
    uint64_t v17 = a3[2];
    uint64_t v18 = type metadata accessor for Dictionary._Variant(0, v17, v7, a3[4]);
    Dictionary._Variant.removeValue(forKey:)(a2, (uint64_t)v18, v12);
    (*(void (**)(id *, uint64_t))(*(void *)(v17 - 8) + 8))(a2, v17);
    return ((uint64_t (*)(char *, Class *))v16)(v12, v8);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v13 + 32))(v15, a1, v7);
    uint64_t v20 = a3[2];
    unint64_t v21 = type metadata accessor for Dictionary._Variant(0, v20, v7, a3[4]);
    Dictionary._Variant.setValue(_:forKey:)((uint64_t)v15, (uint64_t)a2, v21);
    return (*(uint64_t (**)(id *, uint64_t))(*(void *)(v20 - 8) + 8))(a2, v20);
  }
}

unint64_t protocol witness for Error._domain.getter in conformance EncodingError()
{
  return 0xD000000000000012;
}

uint64_t protocol witness for Error._code.getter in conformance EncodingError()
{
  outlined init with copy of EncodingError(v0, v4);
  uint64_t v1 = v4[4];
  uint64_t v2 = (void *)v4[7];
  swift_bridgeObjectRelease(v4[6]);
  swift_bridgeObjectRelease(v1);
  swift_errorRelease(v2);
  __swift_destroy_boxed_opaque_existential_1Tm(v4);
  return 4866;
}

uint64_t Error._getEmbeddedNSError()()
{
  return 0;
}

unint64_t DecodingError.Context.codingPath.getter()
{
  return swift_bridgeObjectRetain(*v0);
}

uint64_t DecodingError.Context.debugDescription.getter()
{
  uint64_t v1 = *(void *)(v0 + 8);
  swift_bridgeObjectRetain(*(void *)(v0 + 16));
  return v1;
}

void *DecodingError.Context.underlyingError.getter()
{
  uint64_t v1 = *(void **)(v0 + 24);
  swift_errorRetain(v1);
  return v1;
}

uint64_t DecodingError.Context.init(codingPath:debugDescription:underlyingError:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  *a5 = result;
  a5[1] = a2;
  a5[2] = a3;
  a5[3] = a4;
  return result;
}

unint64_t DecodingError._domain.getter()
{
  return 0xD000000000000012;
}

uint64_t DecodingError._code.getter()
{
  outlined init with copy of DecodingError(v0, (uint64_t)v4);
  switch(v5)
  {
    case 1:
      outlined destroy of DecodingError((uint64_t)v4);
      goto LABEL_5;
    case 2:
      uint64_t v2 = v4[5];
      unint64_t v3 = (void *)v4[8];
      swift_bridgeObjectRelease(v4[7]);
      swift_bridgeObjectRelease(v2);
      swift_errorRelease(v3);
      __swift_destroy_boxed_opaque_existential_1Tm(v4);
LABEL_5:
      uint64_t result = 4865;
      break;
    default:
      outlined destroy of DecodingError((uint64_t)v4);
      uint64_t result = 4864;
      break;
  }
  return result;
}

atomic_ullong *DecodingError._userInfo.getter()
{
  outlined init with copy of DecodingError(v0, (uint64_t)&v19);
  switch(v27)
  {
    case 2:
      uint64_t v2 = v23;
      uint64_t v1 = v24;
      uint64_t v4 = v25;
      unint64_t v3 = v26;
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t *)&v19);
      break;
    case 3:
      uint64_t v1 = (void *)*((void *)&v19 + 1);
      uint64_t v2 = v19;
      uint64_t v4 = v20;
      unint64_t v3 = v21;
      break;
    default:
      uint64_t v2 = *((void *)&v19 + 1);
      uint64_t v1 = v20;
      uint64_t v4 = v21;
      unint64_t v3 = v22;
      break;
  }
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  inited = swift_initStackObject(v5, v18);
  *((_OWORD *)inited + 1) = xmmword_18162AD10;
  strcpy((char *)inited + 32, "NSCodingPath");
  *((unsigned char *)inited + 45) = 0;
  *((_WORD *)inited + 23) = -5120;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [CodingKey]);
  inited[6] = v2;
  inited[9] = v7;
  inited[10] = 0xD000000000000012;
  inited[15] = &type metadata for String;
  inited[11] = 0x80000001816DD5C0;
  inited[12] = v1;
  inited[13] = v4;
  uint64_t v8 = specialized Dictionary.init(dictionaryLiteral:)((uint64_t)inited);
  if (v3)
  {
    swift_getErrorValue(v3, &v17, &v15);
    unint64_t v9 = v15;
    uint64_t v10 = v16;
    unint64_t v21 = v16;
    uint64_t v11 = __swift_allocate_boxed_opaque_existential_0Tm(&v19);
    (*(void (**)(void *, unint64_t, void *))(*(v10 - 1) + 16))(v11, v9, v10);
    outlined init with take of Any(&v19, v14);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native((uint64_t)v8);
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v14, 0xD000000000000011, 0x80000001816DD5E0, isUniquelyReferenced_nonNull_native);
    swift_errorRelease(v3);
    swift_bridgeObjectRelease(0x8000000000000000);
  }
  *(void *)&long long v19 = v8;
  return _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)((id *)&v19, qword_1ECA01D58);
}

uint64_t protocol witness for Error._code.getter in conformance DecodingError()
{
  outlined init with copy of DecodingError(v0, (uint64_t)v4);
  switch(v5)
  {
    case 1:
      outlined destroy of DecodingError((uint64_t)v4);
      goto LABEL_5;
    case 2:
      uint64_t v2 = v4[5];
      unint64_t v3 = (void *)v4[8];
      swift_bridgeObjectRelease(v4[7]);
      swift_bridgeObjectRelease(v2);
      swift_errorRelease(v3);
      __swift_destroy_boxed_opaque_existential_1Tm(v4);
LABEL_5:
      uint64_t result = 4865;
      break;
    default:
      outlined destroy of DecodingError((uint64_t)v4);
      uint64_t result = 4864;
      break;
  }
  return result;
}

void DefaultStringInterpolation.appendInterpolation<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3._uint64_t countAndFlagsBits = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 8))(a2, a3);
  unint64_t object = v3._object;
  String.append(_:)(v3);

  swift_bridgeObjectRelease((uint64_t)object);
}

void protocol witness for CodingKey.init(stringValue:) in conformance _GenericIndexKey(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 24) = 0;
  *(void *)(a2 + 16) = 0;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance _GenericIndexKey()
{
  return *(void *)(v0 + 16);
}

unint64_t protocol witness for CodingKey.init(intValue:) in conformance _GenericIndexKey@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result = specialized _GenericIndexKey.init(intValue:)(a1);
  *(void *)a2 = result;
  *(void *)(a2 + 8) = v4;
  *(void *)(a2 + 16) = v5;
  *(unsigned char *)(a2 + 24) = v6;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance _GenericIndexKey()
{
  return specialized CodingKey.description.getter(*(void *)v0, *(void **)(v0 + 8), *(void *)(v0 + 16), *(unsigned char *)(v0 + 24));
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance _GenericIndexKey(uint64_t a1, uint64_t a2)
{
  return protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance _GenericIndexKey(a1, a2, (uint64_t (*)(void, void, void, void))specialized CodingKey.description.getter);
}

unint64_t specialized static DecodingError.dataCorruptedError<A>(forKey:in:debugDescription:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, unint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v15 = (*(uint64_t (**)(void))(*(void *)a5 + 88))();
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
  inited = swift_initStackObject(v16, v20);
  *((_OWORD *)inited + 1) = xmmword_18162AC80;
  inited[7] = &type metadata for _DictionaryCodingKey;
  inited[8] = &protocol witness table for _DictionaryCodingKey;
  uint64_t v18 = swift_allocObject(qword_1EC9F2910, 0x29uLL, 7uLL);
  inited[4] = v18;
  v18[2] = a1;
  uint64_t v18[3] = a2;
  v18[4] = a3;
  *((unsigned char *)v18 + 4_assertionFailure(_:_:flags:)("Fatal error", 11, 2, 0xD000000000000018, 0x80000001816E3220, 0) = a4 & 1;
  swift_bridgeObjectRetain(a2);
  specialized Array.append<A>(contentsOf:)((unint64_t)inited, &demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>, &demangling cache variable for type metadata for CodingKey);
  *(void *)a8 = v15;
  *(void *)(a8 + 8) = a6;
  *(void *)(a8 + 16) = a7;
  *(void *)(a8 + 24) = 0;
  *(unsigned char *)(a8 + 72) = 3;
  return swift_bridgeObjectRetain(a7);
}

unint64_t static DecodingError.dataCorruptedError<A>(forKey:in:debugDescription:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, unint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t))(a5 + 24))(a4, a5);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
  inited = swift_initStackObject(v12, v18);
  *((_OWORD *)inited + 1) = xmmword_18162AC80;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (int **)a5, a4, (uint64_t)&protocol requirements base descriptor for KeyedDecodingContainerProtocol, associated type descriptor for KeyedDecodingContainerProtocol.Key);
  inited[7] = AssociatedTypeWitness;
  inited[8] = swift_getAssociatedConformanceWitness(a5, a4, (uint64_t)AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for KeyedDecodingContainerProtocol, associated conformance descriptor for KeyedDecodingContainerProtocol.KeyedDecodingContainerProtocol.Key: CodingKey);
  boxed_opaque_existential_0Tm = __swift_allocate_boxed_opaque_existential_0Tm(inited + 4);
  (*(void (**)(void *, uint64_t, const char *))(*((void *)AssociatedTypeWitness - 1) + 16))(boxed_opaque_existential_0Tm, a1, AssociatedTypeWitness);
  specialized Array.append<A>(contentsOf:)((unint64_t)inited, &demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>, &demangling cache variable for type metadata for CodingKey);
  *(void *)a6 = v11;
  *(void *)(a6 + 8) = a2;
  *(void *)(a6 + 16) = a3;
  *(void *)(a6 + 24) = 0;
  *(unsigned char *)(a6 + 72) = 3;
  return swift_bridgeObjectRetain(a3);
}

unint64_t static DecodingError.dataCorruptedError(in:debugDescription:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = a1[3];
  uint64_t v9 = a1[4];
  __swift_project_boxed_opaque_existential_0Tm(a1, v8);
  uint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 8))(v8, v9);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
  inited = swift_initStackObject(v11, v26);
  *((_OWORD *)inited + 1) = xmmword_18162AC80;
  uint64_t v13 = a1[3];
  uint64_t v14 = a1[4];
  __swift_project_boxed_opaque_existential_0Tm(a1, v13);
  uint64_t v15 = (*(uint64_t (**)(uint64_t, uint64_t))(v14 + 32))(v13, v14);
  unint64_t v16 = specialized _GenericIndexKey.init(intValue:)(v15);
  if (!v17) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/Codable.swift", 19, 2, 0xEC8uLL, 0);
  }
  unint64_t v20 = v16;
  uint64_t v21 = v17;
  uint64_t v22 = v18;
  char v23 = v19;
  inited[7] = &type metadata for _GenericIndexKey;
  inited[8] = &protocol witness table for _GenericIndexKey;
  uint64_t v24 = swift_allocObject(qword_1EC9F28E8, 0x29uLL, 7uLL);
  inited[4] = v24;
  unint64_t v24[2] = v20;
  void v24[3] = v21;
  v24[4] = v22;
  *((unsigned char *)v24 + 4_assertionFailure(_:_:flags:)("Fatal error", 11, 2, 0xD000000000000018, 0x80000001816E3220, 0) = v23 & 1;
  specialized Array.append<A>(contentsOf:)((unint64_t)inited, &demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>, &demangling cache variable for type metadata for CodingKey);
  *(void *)a4 = v10;
  *(void *)(a4 + 8) = a2;
  *(void *)(a4 + 16) = a3;
  *(void *)(a4 + 24) = 0;
  *(unsigned char *)(a4 + 72) = 3;
  return swift_bridgeObjectRetain(a3);
}

{
  uint64_t v7;
  uint64_t v8;
  uint64_t vars8;

  uint64_t v7 = a1[3];
  uint64_t v8 = a1[4];
  __swift_project_boxed_opaque_existential_0Tm(a1, v7);
  *(void *)a4 = (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 8))(v7, v8);
  *(void *)(a4 + 8) = a2;
  *(void *)(a4 + 16) = a3;
  *(void *)(a4 + 24) = 0;
  *(unsigned char *)(a4 + 72) = 3;

  return swift_bridgeObjectRetain(a3);
}

void _KeyedEncodingContainerBase.codingPath.getter()
{
}

void _KeyedEncodingContainerBase.encodeNil<A>(forKey:)()
{
}

void _KeyedEncodingContainerBase.encode<A>(_:forKey:)()
{
}

{
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000034, 0x80000001816E28C0, "Swift/Codable.swift", 19, 2, 0xEF9uLL, 0);
}

{
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000034, 0x80000001816E28C0, "Swift/Codable.swift", 19, 2, 0xEFDuLL, 0);
}

{
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000034, 0x80000001816E28C0, "Swift/Codable.swift", 19, 2, 0xF01uLL, 0);
}

{
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000034, 0x80000001816E28C0, "Swift/Codable.swift", 19, 2, 0xF05uLL, 0);
}

{
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000034, 0x80000001816E28C0, "Swift/Codable.swift", 19, 2, 0xF09uLL, 0);
}

{
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000034, 0x80000001816E28C0, "Swift/Codable.swift", 19, 2, 0xF0DuLL, 0);
}

{
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000034, 0x80000001816E28C0, "Swift/Codable.swift", 19, 2, 0xF11uLL, 0);
}

{
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000034, 0x80000001816E28C0, "Swift/Codable.swift", 19, 2, 0xF15uLL, 0);
}

{
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000034, 0x80000001816E28C0, "Swift/Codable.swift", 19, 2, 0xF1AuLL, 0);
}

{
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000034, 0x80000001816E28C0, "Swift/Codable.swift", 19, 2, 0xF1EuLL, 0);
}

{
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000034, 0x80000001816E28C0, "Swift/Codable.swift", 19, 2, 0xF22uLL, 0);
}

{
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000034, 0x80000001816E28C0, "Swift/Codable.swift", 19, 2, 0xF26uLL, 0);
}

{
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000034, 0x80000001816E28C0, "Swift/Codable.swift", 19, 2, 0xF2AuLL, 0);
}

{
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000034, 0x80000001816E28C0, "Swift/Codable.swift", 19, 2, 0xF2EuLL, 0);
}

{
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000034, 0x80000001816E28C0, "Swift/Codable.swift", 19, 2, 0xF33uLL, 0);
}

void _KeyedEncodingContainerBase.encode<A, B>(_:forKey:)()
{
}

void _KeyedEncodingContainerBase.encodeConditional<A, B>(_:forKey:)()
{
}

void _KeyedEncodingContainerBase.encodeIfPresent<A>(_:forKey:)()
{
}

{
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000034, 0x80000001816E28C0, "Swift/Codable.swift", 19, 2, 0xF46uLL, 0);
}

{
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000034, 0x80000001816E28C0, "Swift/Codable.swift", 19, 2, 0xF4AuLL, 0);
}

{
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000034, 0x80000001816E28C0, "Swift/Codable.swift", 19, 2, 0xF4EuLL, 0);
}

{
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000034, 0x80000001816E28C0, "Swift/Codable.swift", 19, 2, 0xF52uLL, 0);
}

{
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000034, 0x80000001816E28C0, "Swift/Codable.swift", 19, 2, 0xF56uLL, 0);
}

{
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000034, 0x80000001816E28C0, "Swift/Codable.swift", 19, 2, 0xF5AuLL, 0);
}

{
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000034, 0x80000001816E28C0, "Swift/Codable.swift", 19, 2, 0xF5EuLL, 0);
}

{
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000034, 0x80000001816E28C0, "Swift/Codable.swift", 19, 2, 0xF62uLL, 0);
}

{
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000034, 0x80000001816E28C0, "Swift/Codable.swift", 19, 2, 0xF67uLL, 0);
}

{
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000034, 0x80000001816E28C0, "Swift/Codable.swift", 19, 2, 0xF6BuLL, 0);
}

{
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000034, 0x80000001816E28C0, "Swift/Codable.swift", 19, 2, 0xF6FuLL, 0);
}

{
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000034, 0x80000001816E28C0, "Swift/Codable.swift", 19, 2, 0xF73uLL, 0);
}

{
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000034, 0x80000001816E28C0, "Swift/Codable.swift", 19, 2, 0xF77uLL, 0);
}

{
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000034, 0x80000001816E28C0, "Swift/Codable.swift", 19, 2, 0xF7BuLL, 0);
}

{
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000034, 0x80000001816E28C0, "Swift/Codable.swift", 19, 2, 0xF80uLL, 0);
}

void _KeyedEncodingContainerBase.encodeIfPresent<A, B>(_:forKey:)()
{
}

void _KeyedEncodingContainerBase.nestedContainer<A, B>(keyedBy:forKey:)()
{
}

void _KeyedEncodingContainerBase.nestedUnkeyedContainer<A>(forKey:)()
{
}

void _KeyedEncodingContainerBase.superEncoder()()
{
}

void _KeyedEncodingContainerBase.superEncoder<A>(forKey:)()
{
}

uint64_t _KeyedEncodingContainerBox.codingPath.getter(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 416);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](a1);
  char v6 = (char *)&v9 - v5;
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))((char *)&v9 - v5, (uint64_t)v1 + *(void *)(v2 + 432), v3);
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)(v2 + 424) + 24))(v3);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  return v7;
}

uint64_t _KeyedEncodingContainerBox.encodeNil<A>(forKey:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(*(void *)v2 + 424);
  uint64_t v6 = *(void *)(*(void *)v2 + 416);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (int **)v5, v6, (uint64_t)&protocol requirements base descriptor for KeyedEncodingContainerProtocol, associated type descriptor for KeyedEncodingContainerProtocol.Key);
  uint64_t v8 = *((void *)AssociatedTypeWitness - 1);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v10 = (char *)v13 - v9;
  if (*(void *)(*(void *)(a2 - 8) + 64) != v11) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't unsafeBitCast between types of different sizes", 52, 2, "Swift/Builtin.swift", 19, 2, 0x5FuLL, 0);
  }
  (*(void (**)(char *, uint64_t, const char *))(v8 + 16))((char *)v13 - v9, a1, AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 32))(v10, v6, v5);
  return (*(uint64_t (**)(char *, const char *))(v8 + 8))(v10, AssociatedTypeWitness);
}

uint64_t _KeyedEncodingContainerBox.encode<A>(_:forKey:)(char a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *(void *)(*(void *)v3 + 424);
  uint64_t v8 = *(void *)(*(void *)v3 + 416);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (int **)v7, v8, (uint64_t)&protocol requirements base descriptor for KeyedEncodingContainerProtocol, associated type descriptor for KeyedEncodingContainerProtocol.Key);
  uint64_t v10 = *((void *)AssociatedTypeWitness - 1);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v12 = (char *)&v15 - v11;
  if (*(void *)(*(void *)(a3 - 8) + 64) != v13) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't unsafeBitCast between types of different sizes", 52, 2, "Swift/Builtin.swift", 19, 2, 0x5FuLL, 0);
  }
  (*(void (**)(char *, uint64_t, const char *))(v10 + 16))((char *)&v15 - v11, a2, AssociatedTypeWitness);
  (*(void (**)(void, char *, uint64_t, uint64_t))(v7 + 40))(a1 & 1, v12, v8, v7);
  return (*(uint64_t (**)(char *, const char *))(v10 + 8))(v12, AssociatedTypeWitness);
}

uint64_t _KeyedEncodingContainerBox.encode<A>(_:forKey:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v17 = a2;
  uint64_t v8 = *(void *)(*(void *)v4 + 424);
  uint64_t v9 = *(void *)(*(void *)v4 + 416);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (int **)v8, v9, (uint64_t)&protocol requirements base descriptor for KeyedEncodingContainerProtocol, associated type descriptor for KeyedEncodingContainerProtocol.Key);
  uint64_t v11 = *((void *)AssociatedTypeWitness - 1);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v13 = (char *)&v16 - v12;
  if (*(void *)(*(void *)(a4 - 8) + 64) != v14) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't unsafeBitCast between types of different sizes", 52, 2, "Swift/Builtin.swift", 19, 2, 0x5FuLL, 0);
  }
  (*(void (**)(char *, uint64_t, const char *))(v11 + 16))((char *)&v16 - v12, a3, AssociatedTypeWitness);
  (*(void (**)(uint64_t, uint64_t, char *, uint64_t, uint64_t))(v8 + 48))(a1, v17, v13, v9, v8);
  return (*(uint64_t (**)(char *, const char *))(v11 + 8))(v13, AssociatedTypeWitness);
}

{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  const char *AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;

  uint64_t v17 = a2;
  uint64_t v8 = *(void *)(*(void *)v4 + 424);
  uint64_t v9 = *(void *)(*(void *)v4 + 416);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (int **)v8, v9, (uint64_t)&protocol requirements base descriptor for KeyedEncodingContainerProtocol, associated type descriptor for KeyedEncodingContainerProtocol.Key);
  uint64_t v11 = *((void *)AssociatedTypeWitness - 1);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v13 = (char *)&v16 - v12;
  if (*(void *)(*(void *)(a4 - 8) + 64) != v14) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't unsafeBitCast between types of different sizes", 52, 2, "Swift/Builtin.swift", 19, 2, 0x5FuLL, 0);
  }
  (*(void (**)(char *, uint64_t, const char *))(v11 + 16))((char *)&v16 - v12, a3, AssociatedTypeWitness);
  (*(void (**)(uint64_t, uint64_t, char *, uint64_t, uint64_t))(v8 + 112))(a1, v17, v13, v9, v8);
  return (*(uint64_t (**)(char *, const char *))(v11 + 8))(v13, AssociatedTypeWitness);
}

{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  const char *AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;

  uint64_t v17 = a2;
  uint64_t v8 = *(void *)(*(void *)v4 + 424);
  uint64_t v9 = *(void *)(*(void *)v4 + 416);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (int **)v8, v9, (uint64_t)&protocol requirements base descriptor for KeyedEncodingContainerProtocol, associated type descriptor for KeyedEncodingContainerProtocol.Key);
  uint64_t v11 = *((void *)AssociatedTypeWitness - 1);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v13 = (char *)&v16 - v12;
  if (*(void *)(*(void *)(a4 - 8) + 64) != v14) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't unsafeBitCast between types of different sizes", 52, 2, "Swift/Builtin.swift", 19, 2, 0x5FuLL, 0);
  }
  (*(void (**)(char *, uint64_t, const char *))(v11 + 16))((char *)&v16 - v12, a3, AssociatedTypeWitness);
  (*(void (**)(uint64_t, uint64_t, char *, uint64_t, uint64_t))(v8 + 160))(a1, v17, v13, v9, v8);
  return (*(uint64_t (**)(char *, const char *))(v11 + 8))(v13, AssociatedTypeWitness);
}

uint64_t _KeyedEncodingContainerBox.encode<A>(_:forKey:)(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t v7 = *(void *)(*(void *)v3 + 424);
  uint64_t v8 = *(void *)(*(void *)v3 + 416);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (int **)v7, v8, (uint64_t)&protocol requirements base descriptor for KeyedEncodingContainerProtocol, associated type descriptor for KeyedEncodingContainerProtocol.Key);
  uint64_t v10 = *((void *)AssociatedTypeWitness - 1);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v12 = (char *)&v15 - v11;
  if (*(void *)(*(void *)(a2 - 8) + 64) != v13) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't unsafeBitCast between types of different sizes", 52, 2, "Swift/Builtin.swift", 19, 2, 0x5FuLL, 0);
  }
  (*(void (**)(char *, uint64_t, const char *))(v10 + 16))((char *)&v15 - v11, a1, AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v7 + 56))(v12, v8, v7, a3);
  return (*(uint64_t (**)(char *, const char *))(v10 + 8))(v12, AssociatedTypeWitness);
}

uint64_t _KeyedEncodingContainerBox.encode<A>(_:forKey:)(uint64_t a1, uint64_t a2, float a3)
{
  uint64_t v7 = *(void *)(*(void *)v3 + 424);
  uint64_t v8 = *(void *)(*(void *)v3 + 416);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (int **)v7, v8, (uint64_t)&protocol requirements base descriptor for KeyedEncodingContainerProtocol, associated type descriptor for KeyedEncodingContainerProtocol.Key);
  uint64_t v10 = *((void *)AssociatedTypeWitness - 1);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v12 = (char *)&v15 - v11;
  if (*(void *)(*(void *)(a2 - 8) + 64) != v13) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't unsafeBitCast between types of different sizes", 52, 2, "Swift/Builtin.swift", 19, 2, 0x5FuLL, 0);
  }
  (*(void (**)(char *, uint64_t, const char *))(v10 + 16))((char *)&v15 - v11, a1, AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t, uint64_t, float))(v7 + 64))(v12, v8, v7, a3);
  return (*(uint64_t (**)(char *, const char *))(v10 + 8))(v12, AssociatedTypeWitness);
}

uint64_t _KeyedEncodingContainerBox.encode<A>(_:forKey:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *(void *)(*(void *)v3 + 424);
  uint64_t v8 = *(void *)(*(void *)v3 + 416);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (int **)v7, v8, (uint64_t)&protocol requirements base descriptor for KeyedEncodingContainerProtocol, associated type descriptor for KeyedEncodingContainerProtocol.Key);
  uint64_t v10 = *((void *)AssociatedTypeWitness - 1);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v12 = (char *)&v15 - v11;
  if (*(void *)(*(void *)(a3 - 8) + 64) != v13) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't unsafeBitCast between types of different sizes", 52, 2, "Swift/Builtin.swift", 19, 2, 0x5FuLL, 0);
  }
  (*(void (**)(char *, uint64_t, const char *))(v10 + 16))((char *)&v15 - v11, a2, AssociatedTypeWitness);
  (*(void (**)(uint64_t, char *, uint64_t, uint64_t))(v7 + 72))(a1, v12, v8, v7);
  return (*(uint64_t (**)(char *, const char *))(v10 + 8))(v12, AssociatedTypeWitness);
}

{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  const char *AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v15;

  uint64_t v7 = *(void *)(*(void *)v3 + 424);
  uint64_t v8 = *(void *)(*(void *)v3 + 416);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (int **)v7, v8, (uint64_t)&protocol requirements base descriptor for KeyedEncodingContainerProtocol, associated type descriptor for KeyedEncodingContainerProtocol.Key);
  uint64_t v10 = *((void *)AssociatedTypeWitness - 1);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v12 = (char *)&v15 - v11;
  if (*(void *)(*(void *)(a3 - 8) + 64) != v13) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't unsafeBitCast between types of different sizes", 52, 2, "Swift/Builtin.swift", 19, 2, 0x5FuLL, 0);
  }
  (*(void (**)(char *, uint64_t, const char *))(v10 + 16))((char *)&v15 - v11, a2, AssociatedTypeWitness);
  (*(void (**)(uint64_t, char *, uint64_t, uint64_t))(v7 + 80))(a1, v12, v8, v7);
  return (*(uint64_t (**)(char *, const char *))(v10 + 8))(v12, AssociatedTypeWitness);
}

{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  const char *AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v15;

  uint64_t v7 = *(void *)(*(void *)v3 + 424);
  uint64_t v8 = *(void *)(*(void *)v3 + 416);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (int **)v7, v8, (uint64_t)&protocol requirements base descriptor for KeyedEncodingContainerProtocol, associated type descriptor for KeyedEncodingContainerProtocol.Key);
  uint64_t v10 = *((void *)AssociatedTypeWitness - 1);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v12 = (char *)&v15 - v11;
  if (*(void *)(*(void *)(a3 - 8) + 64) != v13) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't unsafeBitCast between types of different sizes", 52, 2, "Swift/Builtin.swift", 19, 2, 0x5FuLL, 0);
  }
  (*(void (**)(char *, uint64_t, const char *))(v10 + 16))((char *)&v15 - v11, a2, AssociatedTypeWitness);
  (*(void (**)(uint64_t, char *, uint64_t, uint64_t))(v7 + 88))(a1, v12, v8, v7);
  return (*(uint64_t (**)(char *, const char *))(v10 + 8))(v12, AssociatedTypeWitness);
}

{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  const char *AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v15;

  uint64_t v7 = *(void *)(*(void *)v3 + 424);
  uint64_t v8 = *(void *)(*(void *)v3 + 416);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (int **)v7, v8, (uint64_t)&protocol requirements base descriptor for KeyedEncodingContainerProtocol, associated type descriptor for KeyedEncodingContainerProtocol.Key);
  uint64_t v10 = *((void *)AssociatedTypeWitness - 1);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v12 = (char *)&v15 - v11;
  if (*(void *)(*(void *)(a3 - 8) + 64) != v13) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't unsafeBitCast between types of different sizes", 52, 2, "Swift/Builtin.swift", 19, 2, 0x5FuLL, 0);
  }
  (*(void (**)(char *, uint64_t, const char *))(v10 + 16))((char *)&v15 - v11, a2, AssociatedTypeWitness);
  (*(void (**)(uint64_t, char *, uint64_t, uint64_t))(v7 + 96))(a1, v12, v8, v7);
  return (*(uint64_t (**)(char *, const char *))(v10 + 8))(v12, AssociatedTypeWitness);
}

{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  const char *AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v15;

  uint64_t v7 = *(void *)(*(void *)v3 + 424);
  uint64_t v8 = *(void *)(*(void *)v3 + 416);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (int **)v7, v8, (uint64_t)&protocol requirements base descriptor for KeyedEncodingContainerProtocol, associated type descriptor for KeyedEncodingContainerProtocol.Key);
  uint64_t v10 = *((void *)AssociatedTypeWitness - 1);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v12 = (char *)&v15 - v11;
  if (*(void *)(*(void *)(a3 - 8) + 64) != v13) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't unsafeBitCast between types of different sizes", 52, 2, "Swift/Builtin.swift", 19, 2, 0x5FuLL, 0);
  }
  (*(void (**)(char *, uint64_t, const char *))(v10 + 16))((char *)&v15 - v11, a2, AssociatedTypeWitness);
  (*(void (**)(uint64_t, char *, uint64_t, uint64_t))(v7 + 104))(a1, v12, v8, v7);
  return (*(uint64_t (**)(char *, const char *))(v10 + 8))(v12, AssociatedTypeWitness);
}

{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  const char *AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v15;

  uint64_t v7 = *(void *)(*(void *)v3 + 424);
  uint64_t v8 = *(void *)(*(void *)v3 + 416);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (int **)v7, v8, (uint64_t)&protocol requirements base descriptor for KeyedEncodingContainerProtocol, associated type descriptor for KeyedEncodingContainerProtocol.Key);
  uint64_t v10 = *((void *)AssociatedTypeWitness - 1);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v12 = (char *)&v15 - v11;
  if (*(void *)(*(void *)(a3 - 8) + 64) != v13) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't unsafeBitCast between types of different sizes", 52, 2, "Swift/Builtin.swift", 19, 2, 0x5FuLL, 0);
  }
  (*(void (**)(char *, uint64_t, const char *))(v10 + 16))((char *)&v15 - v11, a2, AssociatedTypeWitness);
  (*(void (**)(uint64_t, char *, uint64_t, uint64_t))(v7 + 120))(a1, v12, v8, v7);
  return (*(uint64_t (**)(char *, const char *))(v10 + 8))(v12, AssociatedTypeWitness);
}

{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  const char *AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v15;

  uint64_t v7 = *(void *)(*(void *)v3 + 424);
  uint64_t v8 = *(void *)(*(void *)v3 + 416);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (int **)v7, v8, (uint64_t)&protocol requirements base descriptor for KeyedEncodingContainerProtocol, associated type descriptor for KeyedEncodingContainerProtocol.Key);
  uint64_t v10 = *((void *)AssociatedTypeWitness - 1);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v12 = (char *)&v15 - v11;
  if (*(void *)(*(void *)(a3 - 8) + 64) != v13) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't unsafeBitCast between types of different sizes", 52, 2, "Swift/Builtin.swift", 19, 2, 0x5FuLL, 0);
  }
  (*(void (**)(char *, uint64_t, const char *))(v10 + 16))((char *)&v15 - v11, a2, AssociatedTypeWitness);
  (*(void (**)(uint64_t, char *, uint64_t, uint64_t))(v7 + 128))(a1, v12, v8, v7);
  return (*(uint64_t (**)(char *, const char *))(v10 + 8))(v12, AssociatedTypeWitness);
}

{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  const char *AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v15;

  uint64_t v7 = *(void *)(*(void *)v3 + 424);
  uint64_t v8 = *(void *)(*(void *)v3 + 416);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (int **)v7, v8, (uint64_t)&protocol requirements base descriptor for KeyedEncodingContainerProtocol, associated type descriptor for KeyedEncodingContainerProtocol.Key);
  uint64_t v10 = *((void *)AssociatedTypeWitness - 1);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v12 = (char *)&v15 - v11;
  if (*(void *)(*(void *)(a3 - 8) + 64) != v13) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't unsafeBitCast between types of different sizes", 52, 2, "Swift/Builtin.swift", 19, 2, 0x5FuLL, 0);
  }
  (*(void (**)(char *, uint64_t, const char *))(v10 + 16))((char *)&v15 - v11, a2, AssociatedTypeWitness);
  (*(void (**)(uint64_t, char *, uint64_t, uint64_t))(v7 + 136))(a1, v12, v8, v7);
  return (*(uint64_t (**)(char *, const char *))(v10 + 8))(v12, AssociatedTypeWitness);
}

{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  const char *AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v15;

  uint64_t v7 = *(void *)(*(void *)v3 + 424);
  uint64_t v8 = *(void *)(*(void *)v3 + 416);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (int **)v7, v8, (uint64_t)&protocol requirements base descriptor for KeyedEncodingContainerProtocol, associated type descriptor for KeyedEncodingContainerProtocol.Key);
  uint64_t v10 = *((void *)AssociatedTypeWitness - 1);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v12 = (char *)&v15 - v11;
  if (*(void *)(*(void *)(a3 - 8) + 64) != v13) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't unsafeBitCast between types of different sizes", 52, 2, "Swift/Builtin.swift", 19, 2, 0x5FuLL, 0);
  }
  (*(void (**)(char *, uint64_t, const char *))(v10 + 16))((char *)&v15 - v11, a2, AssociatedTypeWitness);
  (*(void (**)(uint64_t, char *, uint64_t, uint64_t))(v7 + 144))(a1, v12, v8, v7);
  return (*(uint64_t (**)(char *, const char *))(v10 + 8))(v12, AssociatedTypeWitness);
}

{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  const char *AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v15;

  uint64_t v7 = *(void *)(*(void *)v3 + 424);
  uint64_t v8 = *(void *)(*(void *)v3 + 416);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (int **)v7, v8, (uint64_t)&protocol requirements base descriptor for KeyedEncodingContainerProtocol, associated type descriptor for KeyedEncodingContainerProtocol.Key);
  uint64_t v10 = *((void *)AssociatedTypeWitness - 1);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v12 = (char *)&v15 - v11;
  if (*(void *)(*(void *)(a3 - 8) + 64) != v13) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't unsafeBitCast between types of different sizes", 52, 2, "Swift/Builtin.swift", 19, 2, 0x5FuLL, 0);
  }
  (*(void (**)(char *, uint64_t, const char *))(v10 + 16))((char *)&v15 - v11, a2, AssociatedTypeWitness);
  (*(void (**)(uint64_t, char *, uint64_t, uint64_t))(v7 + 152))(a1, v12, v8, v7);
  return (*(uint64_t (**)(char *, const char *))(v10 + 8))(v12, AssociatedTypeWitness);
}

uint64_t _KeyedEncodingContainerBox.encode<A, B>(_:forKey:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v17 = a3;
  uint64_t v18 = a5;
  uint64_t v9 = *(void *)(*(void *)v5 + 424);
  uint64_t v10 = *(void *)(*(void *)v5 + 416);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (int **)v9, v10, (uint64_t)&protocol requirements base descriptor for KeyedEncodingContainerProtocol, associated type descriptor for KeyedEncodingContainerProtocol.Key);
  uint64_t v12 = *((void *)AssociatedTypeWitness - 1);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v14 = (char *)&v17 - v13;
  if (*(void *)(*(void *)(a4 - 8) + 64) != v15) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't unsafeBitCast between types of different sizes", 52, 2, "Swift/Builtin.swift", 19, 2, 0x5FuLL, 0);
  }
  (*(void (**)(char *, uint64_t, const char *))(v12 + 16))((char *)&v17 - v13, a2, AssociatedTypeWitness);
  (*(void (**)(uint64_t, char *, uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 168))(a1, v14, v17, v18, v10, v9);
  return (*(uint64_t (**)(char *, const char *))(v12 + 8))(v14, AssociatedTypeWitness);
}

uint64_t _KeyedEncodingContainerBox.encodeConditional<A, B>(_:forKey:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v17 = a3;
  uint64_t v18 = a5;
  uint64_t v9 = *(void *)(*(void *)v5 + 424);
  uint64_t v10 = *(void *)(*(void *)v5 + 416);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (int **)v9, v10, (uint64_t)&protocol requirements base descriptor for KeyedEncodingContainerProtocol, associated type descriptor for KeyedEncodingContainerProtocol.Key);
  uint64_t v12 = *((void *)AssociatedTypeWitness - 1);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v14 = (char *)&v17 - v13;
  if (*(void *)(*(void *)(a4 - 8) + 64) != v15) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't unsafeBitCast between types of different sizes", 52, 2, "Swift/Builtin.swift", 19, 2, 0x5FuLL, 0);
  }
  (*(void (**)(char *, uint64_t, const char *))(v12 + 16))((char *)&v17 - v13, a2, AssociatedTypeWitness);
  (*(void (**)(uint64_t, char *, uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 176))(a1, v14, v17, v18, v10, v9);
  return (*(uint64_t (**)(char *, const char *))(v12 + 8))(v14, AssociatedTypeWitness);
}

uint64_t _KeyedEncodingContainerBox.encodeIfPresent<A>(_:forKey:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *(void *)(*(void *)v3 + 424);
  uint64_t v8 = *(void *)(*(void *)v3 + 416);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (int **)v7, v8, (uint64_t)&protocol requirements base descriptor for KeyedEncodingContainerProtocol, associated type descriptor for KeyedEncodingContainerProtocol.Key);
  uint64_t v10 = *((void *)AssociatedTypeWitness - 1);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v12 = (char *)&v15 - v11;
  if (*(void *)(*(void *)(a3 - 8) + 64) != v13) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't unsafeBitCast between types of different sizes", 52, 2, "Swift/Builtin.swift", 19, 2, 0x5FuLL, 0);
  }
  (*(void (**)(char *, uint64_t, const char *))(v10 + 16))((char *)&v15 - v11, a2, AssociatedTypeWitness);
  (*(void (**)(uint64_t, char *, uint64_t, uint64_t))(v7 + 184))(a1, v12, v8, v7);
  return (*(uint64_t (**)(char *, const char *))(v10 + 8))(v12, AssociatedTypeWitness);
}

uint64_t _KeyedEncodingContainerBox.encodeIfPresent<A>(_:forKey:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v17 = a2;
  uint64_t v8 = *(void *)(*(void *)v4 + 424);
  uint64_t v9 = *(void *)(*(void *)v4 + 416);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (int **)v8, v9, (uint64_t)&protocol requirements base descriptor for KeyedEncodingContainerProtocol, associated type descriptor for KeyedEncodingContainerProtocol.Key);
  uint64_t v11 = *((void *)AssociatedTypeWitness - 1);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v13 = (char *)&v16 - v12;
  if (*(void *)(*(void *)(a4 - 8) + 64) != v14) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't unsafeBitCast between types of different sizes", 52, 2, "Swift/Builtin.swift", 19, 2, 0x5FuLL, 0);
  }
  (*(void (**)(char *, uint64_t, const char *))(v11 + 16))((char *)&v16 - v12, a3, AssociatedTypeWitness);
  (*(void (**)(uint64_t, uint64_t, char *, uint64_t, uint64_t))(v8 + 192))(a1, v17, v13, v9, v8);
  return (*(uint64_t (**)(char *, const char *))(v11 + 8))(v13, AssociatedTypeWitness);
}

uint64_t _KeyedEncodingContainerBox.encodeIfPresent<A>(_:forKey:)(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v17 = a1;
  uint64_t v8 = *(void *)(*(void *)v4 + 424);
  uint64_t v9 = *(void *)(*(void *)v4 + 416);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (int **)v8, v9, (uint64_t)&protocol requirements base descriptor for KeyedEncodingContainerProtocol, associated type descriptor for KeyedEncodingContainerProtocol.Key);
  uint64_t v11 = *((void *)AssociatedTypeWitness - 1);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v13 = (char *)&v16 - v12;
  if (*(void *)(*(void *)(a4 - 8) + 64) != v14) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't unsafeBitCast between types of different sizes", 52, 2, "Swift/Builtin.swift", 19, 2, 0x5FuLL, 0);
  }
  (*(void (**)(char *, uint64_t, const char *))(v11 + 16))((char *)&v16 - v12, a3, AssociatedTypeWitness);
  (*(void (**)(uint64_t, void, char *, uint64_t, uint64_t))(v8 + 200))(v17, a2 & 1, v13, v9, v8);
  return (*(uint64_t (**)(char *, const char *))(v11 + 8))(v13, AssociatedTypeWitness);
}

{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  const char *AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;

  uint64_t v17 = a1;
  uint64_t v8 = *(void *)(*(void *)v4 + 424);
  uint64_t v9 = *(void *)(*(void *)v4 + 416);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (int **)v8, v9, (uint64_t)&protocol requirements base descriptor for KeyedEncodingContainerProtocol, associated type descriptor for KeyedEncodingContainerProtocol.Key);
  uint64_t v11 = *((void *)AssociatedTypeWitness - 1);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v13 = (char *)&v16 - v12;
  if (*(void *)(*(void *)(a4 - 8) + 64) != v14) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't unsafeBitCast between types of different sizes", 52, 2, "Swift/Builtin.swift", 19, 2, 0x5FuLL, 0);
  }
  (*(void (**)(char *, uint64_t, const char *))(v11 + 16))((char *)&v16 - v12, a3, AssociatedTypeWitness);
  (*(void (**)(uint64_t, void, char *, uint64_t, uint64_t))(v8 + 216))(v17, a2 & 1, v13, v9, v8);
  return (*(uint64_t (**)(char *, const char *))(v11 + 8))(v13, AssociatedTypeWitness);
}

{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  const char *AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;

  uint64_t v17 = a1;
  uint64_t v8 = *(void *)(*(void *)v4 + 424);
  uint64_t v9 = *(void *)(*(void *)v4 + 416);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (int **)v8, v9, (uint64_t)&protocol requirements base descriptor for KeyedEncodingContainerProtocol, associated type descriptor for KeyedEncodingContainerProtocol.Key);
  uint64_t v11 = *((void *)AssociatedTypeWitness - 1);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v13 = (char *)&v16 - v12;
  if (*(void *)(*(void *)(a4 - 8) + 64) != v14) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't unsafeBitCast between types of different sizes", 52, 2, "Swift/Builtin.swift", 19, 2, 0x5FuLL, 0);
  }
  (*(void (**)(char *, uint64_t, const char *))(v11 + 16))((char *)&v16 - v12, a3, AssociatedTypeWitness);
  (*(void (**)(uint64_t, void, char *, uint64_t, uint64_t))(v8 + 248))(v17, a2 & 1, v13, v9, v8);
  return (*(uint64_t (**)(char *, const char *))(v11 + 8))(v13, AssociatedTypeWitness);
}

{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  const char *AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;

  uint64_t v17 = a1;
  uint64_t v8 = *(void *)(*(void *)v4 + 424);
  uint64_t v9 = *(void *)(*(void *)v4 + 416);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (int **)v8, v9, (uint64_t)&protocol requirements base descriptor for KeyedEncodingContainerProtocol, associated type descriptor for KeyedEncodingContainerProtocol.Key);
  uint64_t v11 = *((void *)AssociatedTypeWitness - 1);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v13 = (char *)&v16 - v12;
  if (*(void *)(*(void *)(a4 - 8) + 64) != v14) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't unsafeBitCast between types of different sizes", 52, 2, "Swift/Builtin.swift", 19, 2, 0x5FuLL, 0);
  }
  (*(void (**)(char *, uint64_t, const char *))(v11 + 16))((char *)&v16 - v12, a3, AssociatedTypeWitness);
  (*(void (**)(uint64_t, void, char *, uint64_t, uint64_t))(v8 + 264))(v17, a2 & 1, v13, v9, v8);
  return (*(uint64_t (**)(char *, const char *))(v11 + 8))(v13, AssociatedTypeWitness);
}

{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  const char *AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;

  uint64_t v17 = a1;
  uint64_t v8 = *(void *)(*(void *)v4 + 424);
  uint64_t v9 = *(void *)(*(void *)v4 + 416);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (int **)v8, v9, (uint64_t)&protocol requirements base descriptor for KeyedEncodingContainerProtocol, associated type descriptor for KeyedEncodingContainerProtocol.Key);
  uint64_t v11 = *((void *)AssociatedTypeWitness - 1);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v13 = (char *)&v16 - v12;
  if (*(void *)(*(void *)(a4 - 8) + 64) != v14) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't unsafeBitCast between types of different sizes", 52, 2, "Swift/Builtin.swift", 19, 2, 0x5FuLL, 0);
  }
  (*(void (**)(char *, uint64_t, const char *))(v11 + 16))((char *)&v16 - v12, a3, AssociatedTypeWitness);
  (*(void (**)(uint64_t, void, char *, uint64_t, uint64_t))(v8 + 296))(v17, a2 & 1, v13, v9, v8);
  return (*(uint64_t (**)(char *, const char *))(v11 + 8))(v13, AssociatedTypeWitness);
}

uint64_t _KeyedEncodingContainerBox.encodeIfPresent<A>(_:forKey:)(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *(void *)(*(void *)v3 + 424);
  uint64_t v8 = *(void *)(*(void *)v3 + 416);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (int **)v7, v8, (uint64_t)&protocol requirements base descriptor for KeyedEncodingContainerProtocol, associated type descriptor for KeyedEncodingContainerProtocol.Key);
  uint64_t v10 = *((void *)AssociatedTypeWitness - 1);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v12 = (char *)&v15 - v11;
  if (*(void *)(*(void *)(a3 - 8) + 64) != v13) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't unsafeBitCast between types of different sizes", 52, 2, "Swift/Builtin.swift", 19, 2, 0x5FuLL, 0);
  }
  (*(void (**)(char *, uint64_t, const char *))(v10 + 16))((char *)&v15 - v11, a2, AssociatedTypeWitness);
  (*(void (**)(unint64_t, char *, uint64_t, uint64_t))(v7 + 208))(a1 | ((HIDWORD(a1) & 1) << 32), v12, v8, v7);
  return (*(uint64_t (**)(char *, const char *))(v10 + 8))(v12, AssociatedTypeWitness);
}

{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  const char *AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v15;

  uint64_t v7 = *(void *)(*(void *)v3 + 424);
  uint64_t v8 = *(void *)(*(void *)v3 + 416);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (int **)v7, v8, (uint64_t)&protocol requirements base descriptor for KeyedEncodingContainerProtocol, associated type descriptor for KeyedEncodingContainerProtocol.Key);
  uint64_t v10 = *((void *)AssociatedTypeWitness - 1);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v12 = (char *)&v15 - v11;
  if (*(void *)(*(void *)(a3 - 8) + 64) != v13) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't unsafeBitCast between types of different sizes", 52, 2, "Swift/Builtin.swift", 19, 2, 0x5FuLL, 0);
  }
  (*(void (**)(char *, uint64_t, const char *))(v10 + 16))((char *)&v15 - v11, a2, AssociatedTypeWitness);
  (*(void (**)(unint64_t, char *, uint64_t, uint64_t))(v7 + 240))(a1 | ((HIDWORD(a1) & 1) << 32), v12, v8, v7);
  return (*(uint64_t (**)(char *, const char *))(v10 + 8))(v12, AssociatedTypeWitness);
}

{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  const char *AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v15;

  uint64_t v7 = *(void *)(*(void *)v3 + 424);
  uint64_t v8 = *(void *)(*(void *)v3 + 416);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (int **)v7, v8, (uint64_t)&protocol requirements base descriptor for KeyedEncodingContainerProtocol, associated type descriptor for KeyedEncodingContainerProtocol.Key);
  uint64_t v10 = *((void *)AssociatedTypeWitness - 1);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v12 = (char *)&v15 - v11;
  if (*(void *)(*(void *)(a3 - 8) + 64) != v13) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't unsafeBitCast between types of different sizes", 52, 2, "Swift/Builtin.swift", 19, 2, 0x5FuLL, 0);
  }
  (*(void (**)(char *, uint64_t, const char *))(v10 + 16))((char *)&v15 - v11, a2, AssociatedTypeWitness);
  (*(void (**)(unint64_t, char *, uint64_t, uint64_t))(v7 + 288))(a1 | ((HIDWORD(a1) & 1) << 32), v12, v8, v7);
  return (*(uint64_t (**)(char *, const char *))(v10 + 8))(v12, AssociatedTypeWitness);
}

uint64_t _KeyedEncodingContainerBox.encodeIfPresent<A>(_:forKey:)(__int16 a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *(void *)(*(void *)v3 + 424);
  uint64_t v8 = *(void *)(*(void *)v3 + 416);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (int **)v7, v8, (uint64_t)&protocol requirements base descriptor for KeyedEncodingContainerProtocol, associated type descriptor for KeyedEncodingContainerProtocol.Key);
  uint64_t v10 = *((void *)AssociatedTypeWitness - 1);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v12 = (char *)&v15 - v11;
  if (*(void *)(*(void *)(a3 - 8) + 64) != v13) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't unsafeBitCast between types of different sizes", 52, 2, "Swift/Builtin.swift", 19, 2, 0x5FuLL, 0);
  }
  (*(void (**)(char *, uint64_t, const char *))(v10 + 16))((char *)&v15 - v11, a2, AssociatedTypeWitness);
  (*(void (**)(void, char *, uint64_t, uint64_t))(v7 + 224))(a1 & 0x1FF, v12, v8, v7);
  return (*(uint64_t (**)(char *, const char *))(v10 + 8))(v12, AssociatedTypeWitness);
}

{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  const char *AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v15;

  uint64_t v7 = *(void *)(*(void *)v3 + 424);
  uint64_t v8 = *(void *)(*(void *)v3 + 416);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (int **)v7, v8, (uint64_t)&protocol requirements base descriptor for KeyedEncodingContainerProtocol, associated type descriptor for KeyedEncodingContainerProtocol.Key);
  uint64_t v10 = *((void *)AssociatedTypeWitness - 1);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v12 = (char *)&v15 - v11;
  if (*(void *)(*(void *)(a3 - 8) + 64) != v13) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't unsafeBitCast between types of different sizes", 52, 2, "Swift/Builtin.swift", 19, 2, 0x5FuLL, 0);
  }
  (*(void (**)(char *, uint64_t, const char *))(v10 + 16))((char *)&v15 - v11, a2, AssociatedTypeWitness);
  (*(void (**)(void, char *, uint64_t, uint64_t))(v7 + 272))(a1 & 0x1FF, v12, v8, v7);
  return (*(uint64_t (**)(char *, const char *))(v10 + 8))(v12, AssociatedTypeWitness);
}

uint64_t _KeyedEncodingContainerBox.encodeIfPresent<A>(_:forKey:)(int a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *(void *)(*(void *)v3 + 424);
  uint64_t v8 = *(void *)(*(void *)v3 + 416);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (int **)v7, v8, (uint64_t)&protocol requirements base descriptor for KeyedEncodingContainerProtocol, associated type descriptor for KeyedEncodingContainerProtocol.Key);
  uint64_t v10 = *((void *)AssociatedTypeWitness - 1);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v12 = (char *)&v15 - v11;
  if (*(void *)(*(void *)(a3 - 8) + 64) != v13) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't unsafeBitCast between types of different sizes", 52, 2, "Swift/Builtin.swift", 19, 2, 0x5FuLL, 0);
  }
  (*(void (**)(char *, uint64_t, const char *))(v10 + 16))((char *)&v15 - v11, a2, AssociatedTypeWitness);
  (*(void (**)(void, char *, uint64_t, uint64_t))(v7 + 232))(a1 & 0x1FFFF, v12, v8, v7);
  return (*(uint64_t (**)(char *, const char *))(v10 + 8))(v12, AssociatedTypeWitness);
}

{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  const char *AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v15;

  uint64_t v7 = *(void *)(*(void *)v3 + 424);
  uint64_t v8 = *(void *)(*(void *)v3 + 416);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (int **)v7, v8, (uint64_t)&protocol requirements base descriptor for KeyedEncodingContainerProtocol, associated type descriptor for KeyedEncodingContainerProtocol.Key);
  uint64_t v10 = *((void *)AssociatedTypeWitness - 1);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v12 = (char *)&v15 - v11;
  if (*(void *)(*(void *)(a3 - 8) + 64) != v13) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't unsafeBitCast between types of different sizes", 52, 2, "Swift/Builtin.swift", 19, 2, 0x5FuLL, 0);
  }
  (*(void (**)(char *, uint64_t, const char *))(v10 + 16))((char *)&v15 - v11, a2, AssociatedTypeWitness);
  (*(void (**)(void, char *, uint64_t, uint64_t))(v7 + 280))(a1 & 0x1FFFF, v12, v8, v7);
  return (*(uint64_t (**)(char *, const char *))(v10 + 8))(v12, AssociatedTypeWitness);
}

uint64_t _KeyedEncodingContainerBox.encodeIfPresent<A>(_:forKey:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  uint64_t v17 = a1;
  uint64_t v18 = a2;
  uint64_t v9 = *(void *)(*(void *)v5 + 424);
  uint64_t v10 = *(void *)(*(void *)v5 + 416);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (int **)v9, v10, (uint64_t)&protocol requirements base descriptor for KeyedEncodingContainerProtocol, associated type descriptor for KeyedEncodingContainerProtocol.Key);
  uint64_t v12 = *((void *)AssociatedTypeWitness - 1);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v14 = (char *)&v17 - v13;
  if (*(void *)(*(void *)(a5 - 8) + 64) != v15) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't unsafeBitCast between types of different sizes", 52, 2, "Swift/Builtin.swift", 19, 2, 0x5FuLL, 0);
  }
  (*(void (**)(char *, uint64_t, const char *))(v12 + 16))((char *)&v17 - v13, a4, AssociatedTypeWitness);
  (*(void (**)(uint64_t, uint64_t, void, char *, uint64_t, uint64_t))(v9 + 256))(v17, v18, a3 & 1, v14, v10, v9);
  return (*(uint64_t (**)(char *, const char *))(v12 + 8))(v14, AssociatedTypeWitness);
}

{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  const char *AssociatedTypeWitness;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;

  uint64_t v17 = a1;
  uint64_t v18 = a2;
  uint64_t v9 = *(void *)(*(void *)v5 + 424);
  uint64_t v10 = *(void *)(*(void *)v5 + 416);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (int **)v9, v10, (uint64_t)&protocol requirements base descriptor for KeyedEncodingContainerProtocol, associated type descriptor for KeyedEncodingContainerProtocol.Key);
  uint64_t v12 = *((void *)AssociatedTypeWitness - 1);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v14 = (char *)&v17 - v13;
  if (*(void *)(*(void *)(a5 - 8) + 64) != v15) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't unsafeBitCast between types of different sizes", 52, 2, "Swift/Builtin.swift", 19, 2, 0x5FuLL, 0);
  }
  (*(void (**)(char *, uint64_t, const char *))(v12 + 16))((char *)&v17 - v13, a4, AssociatedTypeWitness);
  (*(void (**)(uint64_t, uint64_t, void, char *, uint64_t, uint64_t))(v9 + 304))(v17, v18, a3 & 1, v14, v10, v9);
  return (*(uint64_t (**)(char *, const char *))(v12 + 8))(v14, AssociatedTypeWitness);
}

uint64_t _KeyedEncodingContainerBox.encodeIfPresent<A, B>(_:forKey:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v17 = a3;
  uint64_t v18 = a5;
  uint64_t v9 = *(void *)(*(void *)v5 + 424);
  uint64_t v10 = *(void *)(*(void *)v5 + 416);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (int **)v9, v10, (uint64_t)&protocol requirements base descriptor for KeyedEncodingContainerProtocol, associated type descriptor for KeyedEncodingContainerProtocol.Key);
  uint64_t v12 = *((void *)AssociatedTypeWitness - 1);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v14 = (char *)&v17 - v13;
  if (*(void *)(*(void *)(a4 - 8) + 64) != v15) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't unsafeBitCast between types of different sizes", 52, 2, "Swift/Builtin.swift", 19, 2, 0x5FuLL, 0);
  }
  (*(void (**)(char *, uint64_t, const char *))(v12 + 16))((char *)&v17 - v13, a2, AssociatedTypeWitness);
  (*(void (**)(uint64_t, char *, uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 312))(a1, v14, v17, v18, v10, v9);
  return (*(uint64_t (**)(char *, const char *))(v12 + 8))(v14, AssociatedTypeWitness);
}

uint64_t _KeyedEncodingContainerBox.nestedContainer<A, B>(keyedBy:forKey:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v18 = a5;
  uint64_t v9 = *(void *)(*(void *)v5 + 424);
  uint64_t v10 = *(void *)(*(void *)v5 + 416);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (int **)v9, v10, (uint64_t)&protocol requirements base descriptor for KeyedEncodingContainerProtocol, associated type descriptor for KeyedEncodingContainerProtocol.Key);
  uint64_t v12 = *((void *)AssociatedTypeWitness - 1);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v14 = (char *)&v17 - v13;
  if (*(void *)(*(void *)(a4 - 8) + 64) != v15) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't unsafeBitCast between types of different sizes", 52, 2, "Swift/Builtin.swift", 19, 2, 0x5FuLL, 0);
  }
  (*(void (**)(char *, uint64_t, const char *))(v12 + 16))((char *)&v17 - v13, a2, AssociatedTypeWitness);
  (*(void (**)(uint64_t, char *, uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 320))(a3, v14, a3, v18, v10, v9);
  return (*(uint64_t (**)(char *, const char *))(v12 + 8))(v14, AssociatedTypeWitness);
}

uint64_t _KeyedEncodingContainerBox.nestedUnkeyedContainer<A>(forKey:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(*(void *)v2 + 424);
  uint64_t v6 = *(void *)(*(void *)v2 + 416);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (int **)v5, v6, (uint64_t)&protocol requirements base descriptor for KeyedEncodingContainerProtocol, associated type descriptor for KeyedEncodingContainerProtocol.Key);
  uint64_t v8 = *((void *)AssociatedTypeWitness - 1);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v10 = (char *)&v13 - v9;
  if (*(void *)(*(void *)(a2 - 8) + 64) != v11) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't unsafeBitCast between types of different sizes", 52, 2, "Swift/Builtin.swift", 19, 2, 0x5FuLL, 0);
  }
  (*(void (**)(char *, uint64_t, const char *))(v8 + 16))((char *)&v13 - v9, a1, AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 328))(v10, v6, v5);
  return (*(uint64_t (**)(char *, const char *))(v8 + 8))(v10, AssociatedTypeWitness);
}

uint64_t _KeyedEncodingContainerBox.superEncoder()()
{
  return (*(uint64_t (**)(void))(*(void *)(*(void *)v0 + 424) + 336))(*(void *)(*(void *)v0 + 416));
}

uint64_t _KeyedEncodingContainerBox.superEncoder<A>(forKey:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(*(void *)v2 + 424);
  uint64_t v6 = *(void *)(*(void *)v2 + 416);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (int **)v5, v6, (uint64_t)&protocol requirements base descriptor for KeyedEncodingContainerProtocol, associated type descriptor for KeyedEncodingContainerProtocol.Key);
  uint64_t v8 = *((void *)AssociatedTypeWitness - 1);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v10 = (char *)&v13 - v9;
  if (*(void *)(*(void *)(a2 - 8) + 64) != v11) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't unsafeBitCast between types of different sizes", 52, 2, "Swift/Builtin.swift", 19, 2, 0x5FuLL, 0);
  }
  (*(void (**)(char *, uint64_t, const char *))(v8 + 16))((char *)&v13 - v9, a1, AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 344))(v10, v6, v5);
  return (*(uint64_t (**)(char *, const char *))(v8 + 8))(v10, AssociatedTypeWitness);
}

uint64_t _KeyedEncodingContainerBox.__ivar_destroyer()
{
  return (*(uint64_t (**)(uint64_t))(*(void *)(*(void *)(*(void *)v0 + 416) - 8) + 8))(v0 + *(void *)(*(void *)v0 + 432));
}

void _KeyedEncodingContainerBox.__deallocating_deinit()
{
  (*(void (**)(uint64_t))(*(void *)(*(void *)(*(void *)v0 + 416) - 8) + 8))(v0 + *(void *)(*(void *)v0 + 432));

  swift_deallocClassInstance(v0);
}

void _KeyedDecodingContainerBase.codingPath.getter()
{
}

void _KeyedDecodingContainerBase.allKeys.getter()
{
}

void _KeyedDecodingContainerBase.contains<A>(_:)()
{
}

void _KeyedDecodingContainerBase.decodeNil<A>(forKey:)()
{
}

void _KeyedDecodingContainerBase.decode<A>(_:forKey:)()
{
}

{
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000034, 0x80000001816E2880, "Swift/Codable.swift", 19, 2, 0x1100uLL, 0);
}

{
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000034, 0x80000001816E2880, "Swift/Codable.swift", 19, 2, 0x1107uLL, 0);
}

{
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000034, 0x80000001816E2880, "Swift/Codable.swift", 19, 2, 0x110EuLL, 0);
}

{
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000034, 0x80000001816E2880, "Swift/Codable.swift", 19, 2, 0x1115uLL, 0);
}

{
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000034, 0x80000001816E2880, "Swift/Codable.swift", 19, 2, 0x111CuLL, 0);
}

{
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000034, 0x80000001816E2880, "Swift/Codable.swift", 19, 2, 0x1123uLL, 0);
}

{
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000034, 0x80000001816E2880, "Swift/Codable.swift", 19, 2, 0x112AuLL, 0);
}

{
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000034, 0x80000001816E2880, "Swift/Codable.swift", 19, 2, 0x1131uLL, 0);
}

{
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000034, 0x80000001816E2880, "Swift/Codable.swift", 19, 2, 0x1139uLL, 0);
}

{
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000034, 0x80000001816E2880, "Swift/Codable.swift", 19, 2, 0x1140uLL, 0);
}

{
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000034, 0x80000001816E2880, "Swift/Codable.swift", 19, 2, 0x1147uLL, 0);
}

{
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000034, 0x80000001816E2880, "Swift/Codable.swift", 19, 2, 0x114EuLL, 0);
}

{
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000034, 0x80000001816E2880, "Swift/Codable.swift", 19, 2, 0x1155uLL, 0);
}

{
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000034, 0x80000001816E2880, "Swift/Codable.swift", 19, 2, 0x115CuLL, 0);
}

{
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000034, 0x80000001816E2880, "Swift/Codable.swift", 19, 2, 0x1164uLL, 0);
}

void _KeyedDecodingContainerBase.decode<A, B>(_:forKey:)()
{
}

void _KeyedDecodingContainerBase.decodeIfPresent<A>(_:forKey:)()
{
}

{
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000034, 0x80000001816E2880, "Swift/Codable.swift", 19, 2, 0x1179uLL, 0);
}

{
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000034, 0x80000001816E2880, "Swift/Codable.swift", 19, 2, 0x1180uLL, 0);
}

{
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000034, 0x80000001816E2880, "Swift/Codable.swift", 19, 2, 0x1187uLL, 0);
}

{
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000034, 0x80000001816E2880, "Swift/Codable.swift", 19, 2, 0x118EuLL, 0);
}

{
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000034, 0x80000001816E2880, "Swift/Codable.swift", 19, 2, 0x1195uLL, 0);
}

{
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000034, 0x80000001816E2880, "Swift/Codable.swift", 19, 2, 0x119CuLL, 0);
}

{
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000034, 0x80000001816E2880, "Swift/Codable.swift", 19, 2, 0x11A3uLL, 0);
}

{
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000034, 0x80000001816E2880, "Swift/Codable.swift", 19, 2, 0x11AAuLL, 0);
}

{
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000034, 0x80000001816E2880, "Swift/Codable.swift", 19, 2, 0x11B2uLL, 0);
}

{
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000034, 0x80000001816E2880, "Swift/Codable.swift", 19, 2, 0x11B9uLL, 0);
}

{
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000034, 0x80000001816E2880, "Swift/Codable.swift", 19, 2, 0x11C0uLL, 0);
}

{
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000034, 0x80000001816E2880, "Swift/Codable.swift", 19, 2, 0x11C7uLL, 0);
}

{
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000034, 0x80000001816E2880, "Swift/Codable.swift", 19, 2, 0x11CEuLL, 0);
}

{
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000034, 0x80000001816E2880, "Swift/Codable.swift", 19, 2, 0x11D5uLL, 0);
}

{
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000034, 0x80000001816E2880, "Swift/Codable.swift", 19, 2, 0x11DDuLL, 0);
}

void _KeyedDecodingContainerBase.decodeIfPresent<A, B>(_:forKey:)()
{
}

void _KeyedDecodingContainerBase.nestedContainer<A, B>(keyedBy:forKey:)()
{
}

void _KeyedDecodingContainerBase.nestedUnkeyedContainer<A>(forKey:)()
{
}

void _KeyedDecodingContainerBase.superDecoder()()
{
}

void _KeyedDecodingContainerBase.superDecoder<A>(forKey:)()
{
}

uint64_t _KeyedDecodingContainerBox.codingPath.getter(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 424);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v6 = (char *)&v9 - v5;
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))((char *)&v9 - v5, (uint64_t)v1 + *(void *)(v2 + 440), v3);
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)(v2 + 432) + 24))(v3);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  return v7;
}

__objc2_class **_KeyedDecodingContainerBox.allKeys.getter(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 424);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v6 = &v17[-v5];
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v4 + 16))(&v17[-v5], (uint64_t)v1 + *(void *)(v2 + 440), v3);
  uint64_t v7 = *(void *)(v2 + 432);
  uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 32))(v3, v7);
  (*(void (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
  AssociatedTypeWitness = (uint64_t *)swift_getAssociatedTypeWitness(0, (int **)v7, v3, (uint64_t)&protocol requirements base descriptor for KeyedDecodingContainerProtocol, associated type descriptor for KeyedDecodingContainerProtocol.Key);
  _swift_isClassOrObjCExistentialType((uint64_t)AssociatedTypeWitness, AssociatedTypeWitness);
  uint64_t v19 = v8;
  uint64_t v18 = AssociatedTypeWitness;
  uint64_t v12 = (unint64_t *)type metadata accessor for Array(0, (uint64_t)AssociatedTypeWitness, v10, v11);
  uint64_t WitnessTable = swift_getWitnessTable(protocol conformance descriptor for [A], v12, v13);
  uint64_t v15 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFxq0_q_Ri_zRi0_zRi__Ri0__Ri_0_Ri0_0_r1_lyADs5NeverOqd__Isgnrzr_xAbGSlRzAGRsd_0_r_0_lIetMgnozo_Tpq5xq0_q_Ri_zRi0_zRi__Ri0__Ri_0_Ri0_0_r1_lyAdGs9CodingKey_pIsgnrzr_xSaysAH_pGAGSlRzsAH_pRsd__AGRsd_0_r_0_lIetMgnozo_Tp5((void (*)(long long *__return_ptr, char *))partial apply for specialized closure #1 in _arrayForceCast<A, B>(_:), (uint64_t)v17, (uint64_t)v12, WitnessTable);
  swift_bridgeObjectRelease(v8);
  return v15;
}

uint64_t _KeyedDecodingContainerBox.contains<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(*(void *)v2 + 424);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v8 = (char *)&v18 - v7;
  uint64_t v10 = *(void *)(v9 + 432);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (int **)v10, v5, (uint64_t)&protocol requirements base descriptor for KeyedDecodingContainerProtocol, associated type descriptor for KeyedDecodingContainerProtocol.Key);
  uint64_t v12 = *((void *)AssociatedTypeWitness - 1);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v14 = (char *)&v18 - v13;
  if (*(void *)(*(void *)(a2 - 8) + 64) != v15) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't unsafeBitCast between types of different sizes", 52, 2, "Swift/Builtin.swift", 19, 2, 0x5FuLL, 0);
  }
  (*(void (**)(char *, uint64_t, const char *))(v12 + 16))((char *)&v18 - v13, a1, AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v2 + *(void *)(*(void *)v2 + 440), v5);
  char v16 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 40))(v14, v5, v10);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  (*(void (**)(char *, const char *))(v12 + 8))(v14, AssociatedTypeWitness);
  return v16 & 1;
}

uint64_t _KeyedDecodingContainerBox.decodeNil<A>(forKey:)(uint64_t a1, uint64_t a2)
{
  uint64_t v18 = a1;
  uint64_t v4 = *(void *)(*(void *)v2 + 424);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v7 = (char *)&v17 - v6;
  uint64_t v9 = *(void *)(v8 + 432);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (int **)v9, v4, (uint64_t)&protocol requirements base descriptor for KeyedDecodingContainerProtocol, associated type descriptor for KeyedDecodingContainerProtocol.Key);
  uint64_t v11 = *((void *)AssociatedTypeWitness - 1);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v13 = (char *)&v17 - v12;
  if (*(void *)(*(void *)(a2 - 8) + 64) != v14) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't unsafeBitCast between types of different sizes", 52, 2, "Swift/Builtin.swift", 19, 2, 0x5FuLL, 0);
  }
  (*(void (**)(char *, uint64_t, const char *))(v11 + 16))((char *)&v17 - v12, v18, AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v2 + *(void *)(*(void *)v2 + 440), v4);
  char v15 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48))(v13, v4, v9);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  (*(void (**)(char *, const char *))(v11 + 8))(v13, AssociatedTypeWitness);
  return v15 & 1;
}

uint64_t _KeyedDecodingContainerBox.decode<A>(_:forKey:)(uint64_t a1, uint64_t a2)
{
  uint64_t v18 = a1;
  uint64_t v4 = *(void *)(*(void *)v2 + 424);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v7 = (char *)&v17 - v6;
  uint64_t v9 = *(void *)(v8 + 432);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (int **)v9, v4, (uint64_t)&protocol requirements base descriptor for KeyedDecodingContainerProtocol, associated type descriptor for KeyedDecodingContainerProtocol.Key);
  uint64_t v11 = *((void *)AssociatedTypeWitness - 1);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v13 = (char *)&v17 - v12;
  if (*(void *)(*(void *)(a2 - 8) + 64) != v14) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't unsafeBitCast between types of different sizes", 52, 2, "Swift/Builtin.swift", 19, 2, 0x5FuLL, 0);
  }
  (*(void (**)(char *, uint64_t, const char *))(v11 + 16))((char *)&v17 - v12, v18, AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v2 + *(void *)(*(void *)v2 + 440), v4);
  char v15 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 56))(v13, v4, v9);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  (*(void (**)(char *, const char *))(v11 + 8))(v13, AssociatedTypeWitness);
  return v15 & 1;
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  const char *AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;

  uint64_t v18 = a1;
  uint64_t v4 = *(void *)(*(void *)v2 + 424);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v7 = (char *)&v17 - v6;
  uint64_t v9 = *(void *)(v8 + 432);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (int **)v9, v4, (uint64_t)&protocol requirements base descriptor for KeyedDecodingContainerProtocol, associated type descriptor for KeyedDecodingContainerProtocol.Key);
  uint64_t v11 = *((void *)AssociatedTypeWitness - 1);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v13 = (char *)&v17 - v12;
  if (*(void *)(*(void *)(a2 - 8) + 64) != v14) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't unsafeBitCast between types of different sizes", 52, 2, "Swift/Builtin.swift", 19, 2, 0x5FuLL, 0);
  }
  (*(void (**)(char *, uint64_t, const char *))(v11 + 16))((char *)&v17 - v12, v18, AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v2 + *(void *)(*(void *)v2 + 440), v4);
  char v15 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 64))(v13, v4, v9);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  (*(void (**)(char *, const char *))(v11 + 8))(v13, AssociatedTypeWitness);
  return v15;
}

{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  const char *AssociatedTypeWitness;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;

  uint64_t v5 = *(void *)(*(void *)v2 + 424);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v8 = (char *)&v20 - v7;
  uint64_t v10 = *(void *)(v9 + 432);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (int **)v10, v5, (uint64_t)&protocol requirements base descriptor for KeyedDecodingContainerProtocol, associated type descriptor for KeyedDecodingContainerProtocol.Key);
  uint64_t v12 = *((void *)AssociatedTypeWitness - 1);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  char v15 = (char *)&v20 - v13;
  if (*(void *)(*(void *)(a2 - 8) + 64) != v16) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't unsafeBitCast between types of different sizes", 52, 2, "Swift/Builtin.swift", 19, 2, 0x5FuLL, 0);
  }
  uint64_t v17 = v14;
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))((char *)&v20 - v13, a1, v14);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v2 + *(void *)(*(void *)v2 + 440), v5);
  uint64_t v18 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 88))(v15, v5, v10);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v17);
  return v18;
}

{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  const char *AssociatedTypeWitness;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;

  uint64_t v5 = *(void *)(*(void *)v2 + 424);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v8 = (char *)&v20 - v7;
  uint64_t v10 = *(void *)(v9 + 432);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (int **)v10, v5, (uint64_t)&protocol requirements base descriptor for KeyedDecodingContainerProtocol, associated type descriptor for KeyedDecodingContainerProtocol.Key);
  uint64_t v12 = *((void *)AssociatedTypeWitness - 1);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  char v15 = (char *)&v20 - v13;
  if (*(void *)(*(void *)(a2 - 8) + 64) != v16) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't unsafeBitCast between types of different sizes", 52, 2, "Swift/Builtin.swift", 19, 2, 0x5FuLL, 0);
  }
  uint64_t v17 = v14;
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))((char *)&v20 - v13, a1, v14);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v2 + *(void *)(*(void *)v2 + 440), v5);
  uint64_t v18 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 96))(v15, v5, v10);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v17);
  return v18;
}

{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  const char *AssociatedTypeWitness;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;

  uint64_t v5 = *(void *)(*(void *)v2 + 424);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v8 = (char *)&v20 - v7;
  uint64_t v10 = *(void *)(v9 + 432);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (int **)v10, v5, (uint64_t)&protocol requirements base descriptor for KeyedDecodingContainerProtocol, associated type descriptor for KeyedDecodingContainerProtocol.Key);
  uint64_t v12 = *((void *)AssociatedTypeWitness - 1);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  char v15 = (char *)&v20 - v13;
  if (*(void *)(*(void *)(a2 - 8) + 64) != v16) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't unsafeBitCast between types of different sizes", 52, 2, "Swift/Builtin.swift", 19, 2, 0x5FuLL, 0);
  }
  uint64_t v17 = v14;
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))((char *)&v20 - v13, a1, v14);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v2 + *(void *)(*(void *)v2 + 440), v5);
  uint64_t v18 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 104))(v15, v5, v10);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v17);
  return v18;
}

{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  const char *AssociatedTypeWitness;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;

  uint64_t v5 = *(void *)(*(void *)v2 + 424);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v8 = (char *)&v20 - v7;
  uint64_t v10 = *(void *)(v9 + 432);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (int **)v10, v5, (uint64_t)&protocol requirements base descriptor for KeyedDecodingContainerProtocol, associated type descriptor for KeyedDecodingContainerProtocol.Key);
  uint64_t v12 = *((void *)AssociatedTypeWitness - 1);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  char v15 = (char *)&v20 - v13;
  if (*(void *)(*(void *)(a2 - 8) + 64) != v16) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't unsafeBitCast between types of different sizes", 52, 2, "Swift/Builtin.swift", 19, 2, 0x5FuLL, 0);
  }
  uint64_t v17 = v14;
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))((char *)&v20 - v13, a1, v14);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v2 + *(void *)(*(void *)v2 + 440), v5);
  uint64_t v18 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 112))(v15, v5, v10);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v17);
  return v18;
}

{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  const char *AssociatedTypeWitness;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;

  uint64_t v5 = *(void *)(*(void *)v2 + 424);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v8 = (char *)&v20 - v7;
  uint64_t v10 = *(void *)(v9 + 432);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (int **)v10, v5, (uint64_t)&protocol requirements base descriptor for KeyedDecodingContainerProtocol, associated type descriptor for KeyedDecodingContainerProtocol.Key);
  uint64_t v12 = *((void *)AssociatedTypeWitness - 1);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  char v15 = (char *)&v20 - v13;
  if (*(void *)(*(void *)(a2 - 8) + 64) != v16) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't unsafeBitCast between types of different sizes", 52, 2, "Swift/Builtin.swift", 19, 2, 0x5FuLL, 0);
  }
  uint64_t v17 = v14;
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))((char *)&v20 - v13, a1, v14);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v2 + *(void *)(*(void *)v2 + 440), v5);
  uint64_t v18 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 120))(v15, v5, v10);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v17);
  return v18;
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  const char *AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;

  uint64_t v18 = a1;
  uint64_t v4 = *(void *)(*(void *)v2 + 424);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v7 = (char *)&v17 - v6;
  uint64_t v9 = *(void *)(v8 + 432);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (int **)v9, v4, (uint64_t)&protocol requirements base descriptor for KeyedDecodingContainerProtocol, associated type descriptor for KeyedDecodingContainerProtocol.Key);
  uint64_t v11 = *((void *)AssociatedTypeWitness - 1);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v13 = (char *)&v17 - v12;
  if (*(void *)(*(void *)(a2 - 8) + 64) != v14) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't unsafeBitCast between types of different sizes", 52, 2, "Swift/Builtin.swift", 19, 2, 0x5FuLL, 0);
  }
  (*(void (**)(char *, uint64_t, const char *))(v11 + 16))((char *)&v17 - v12, v18, AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v2 + *(void *)(*(void *)v2 + 440), v4);
  char v15 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 128))(v13, v4, v9);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  (*(void (**)(char *, const char *))(v11 + 8))(v13, AssociatedTypeWitness);
  return v15;
}

{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  const char *AssociatedTypeWitness;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;

  uint64_t v5 = *(void *)(*(void *)v2 + 424);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v8 = (char *)&v20 - v7;
  uint64_t v10 = *(void *)(v9 + 432);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (int **)v10, v5, (uint64_t)&protocol requirements base descriptor for KeyedDecodingContainerProtocol, associated type descriptor for KeyedDecodingContainerProtocol.Key);
  uint64_t v12 = *((void *)AssociatedTypeWitness - 1);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  char v15 = (char *)&v20 - v13;
  if (*(void *)(*(void *)(a2 - 8) + 64) != v16) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't unsafeBitCast between types of different sizes", 52, 2, "Swift/Builtin.swift", 19, 2, 0x5FuLL, 0);
  }
  uint64_t v17 = v14;
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))((char *)&v20 - v13, a1, v14);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v2 + *(void *)(*(void *)v2 + 440), v5);
  uint64_t v18 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 136))(v15, v5, v10);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v17);
  return v18;
}

{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  const char *AssociatedTypeWitness;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;

  uint64_t v5 = *(void *)(*(void *)v2 + 424);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v8 = (char *)&v20 - v7;
  uint64_t v10 = *(void *)(v9 + 432);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (int **)v10, v5, (uint64_t)&protocol requirements base descriptor for KeyedDecodingContainerProtocol, associated type descriptor for KeyedDecodingContainerProtocol.Key);
  uint64_t v12 = *((void *)AssociatedTypeWitness - 1);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  char v15 = (char *)&v20 - v13;
  if (*(void *)(*(void *)(a2 - 8) + 64) != v16) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't unsafeBitCast between types of different sizes", 52, 2, "Swift/Builtin.swift", 19, 2, 0x5FuLL, 0);
  }
  uint64_t v17 = v14;
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))((char *)&v20 - v13, a1, v14);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v2 + *(void *)(*(void *)v2 + 440), v5);
  uint64_t v18 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 144))(v15, v5, v10);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v17);
  return v18;
}

{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  const char *AssociatedTypeWitness;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;

  uint64_t v5 = *(void *)(*(void *)v2 + 424);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v8 = (char *)&v20 - v7;
  uint64_t v10 = *(void *)(v9 + 432);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (int **)v10, v5, (uint64_t)&protocol requirements base descriptor for KeyedDecodingContainerProtocol, associated type descriptor for KeyedDecodingContainerProtocol.Key);
  uint64_t v12 = *((void *)AssociatedTypeWitness - 1);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  char v15 = (char *)&v20 - v13;
  if (*(void *)(*(void *)(a2 - 8) + 64) != v16) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't unsafeBitCast between types of different sizes", 52, 2, "Swift/Builtin.swift", 19, 2, 0x5FuLL, 0);
  }
  uint64_t v17 = v14;
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))((char *)&v20 - v13, a1, v14);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v2 + *(void *)(*(void *)v2 + 440), v5);
  uint64_t v18 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 152))(v15, v5, v10);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v17);
  return v18;
}

{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  const char *AssociatedTypeWitness;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;

  uint64_t v5 = *(void *)(*(void *)v2 + 424);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v8 = (char *)&v20 - v7;
  uint64_t v10 = *(void *)(v9 + 432);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (int **)v10, v5, (uint64_t)&protocol requirements base descriptor for KeyedDecodingContainerProtocol, associated type descriptor for KeyedDecodingContainerProtocol.Key);
  uint64_t v12 = *((void *)AssociatedTypeWitness - 1);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  char v15 = (char *)&v20 - v13;
  if (*(void *)(*(void *)(a2 - 8) + 64) != v16) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't unsafeBitCast between types of different sizes", 52, 2, "Swift/Builtin.swift", 19, 2, 0x5FuLL, 0);
  }
  uint64_t v17 = v14;
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))((char *)&v20 - v13, a1, v14);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v2 + *(void *)(*(void *)v2 + 440), v5);
  uint64_t v18 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 160))(v15, v5, v10);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v17);
  return v18;
}

{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  const char *AssociatedTypeWitness;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;

  uint64_t v5 = *(void *)(*(void *)v2 + 424);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v8 = (char *)&v20 - v7;
  uint64_t v10 = *(void *)(v9 + 432);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (int **)v10, v5, (uint64_t)&protocol requirements base descriptor for KeyedDecodingContainerProtocol, associated type descriptor for KeyedDecodingContainerProtocol.Key);
  uint64_t v12 = *((void *)AssociatedTypeWitness - 1);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  char v15 = (char *)&v20 - v13;
  if (*(void *)(*(void *)(a2 - 8) + 64) != v16) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't unsafeBitCast between types of different sizes", 52, 2, "Swift/Builtin.swift", 19, 2, 0x5FuLL, 0);
  }
  uint64_t v17 = v14;
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))((char *)&v20 - v13, a1, v14);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v2 + *(void *)(*(void *)v2 + 440), v5);
  uint64_t v18 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 168))(v15, v5, v10);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v17);
  return v18;
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  const char *AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;

  uint64_t v18 = a1;
  uint64_t v4 = *(void *)(*(void *)v2 + 424);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v7 = (char *)&v17 - v6;
  uint64_t v9 = *(void *)(v8 + 432);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (int **)v9, v4, (uint64_t)&protocol requirements base descriptor for KeyedDecodingContainerProtocol, associated type descriptor for KeyedDecodingContainerProtocol.Key);
  uint64_t v11 = *((void *)AssociatedTypeWitness - 1);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v13 = (char *)&v17 - v12;
  if (*(void *)(*(void *)(a2 - 8) + 64) != v14) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't unsafeBitCast between types of different sizes", 52, 2, "Swift/Builtin.swift", 19, 2, 0x5FuLL, 0);
  }
  (*(void (**)(char *, uint64_t, const char *))(v11 + 16))((char *)&v17 - v12, v18, AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v2 + *(void *)(*(void *)v2 + 440), v4);
  char v15 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 176))(v13, v4, v9);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  (*(void (**)(char *, const char *))(v11 + 8))(v13, AssociatedTypeWitness);
  return v15;
}

double _KeyedDecodingContainerBox.decode<A>(_:forKey:)(uint64_t a1, uint64_t a2)
{
  uint64_t v17 = a1;
  uint64_t v4 = *(void *)(*(void *)v2 + 424);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v7 = (char *)&v17 - v6;
  uint64_t v9 = *(void *)(v8 + 432);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (int **)v9, v4, (uint64_t)&protocol requirements base descriptor for KeyedDecodingContainerProtocol, associated type descriptor for KeyedDecodingContainerProtocol.Key);
  uint64_t v11 = *((void *)AssociatedTypeWitness - 1);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v13 = (char *)&v17 - v12;
  if (*(void *)(*(void *)(a2 - 8) + 64) != v14) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't unsafeBitCast between types of different sizes", 52, 2, "Swift/Builtin.swift", 19, 2, 0x5FuLL, 0);
  }
  (*(void (**)(char *, uint64_t, const char *))(v11 + 16))((char *)&v17 - v12, v17, AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v2 + *(void *)(*(void *)v2 + 440), v4);
  double v15 = (*(double (**)(char *, uint64_t, uint64_t))(v9 + 72))(v13, v4, v9);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  (*(void (**)(char *, const char *))(v11 + 8))(v13, AssociatedTypeWitness);
  return v15;
}

float _KeyedDecodingContainerBox.decode<A>(_:forKey:)(uint64_t a1, uint64_t a2)
{
  uint64_t v17 = a1;
  uint64_t v4 = *(void *)(*(void *)v2 + 424);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v7 = (char *)&v17 - v6;
  uint64_t v9 = *(void *)(v8 + 432);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (int **)v9, v4, (uint64_t)&protocol requirements base descriptor for KeyedDecodingContainerProtocol, associated type descriptor for KeyedDecodingContainerProtocol.Key);
  uint64_t v11 = *((void *)AssociatedTypeWitness - 1);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v13 = (char *)&v17 - v12;
  if (*(void *)(*(void *)(a2 - 8) + 64) != v14) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't unsafeBitCast between types of different sizes", 52, 2, "Swift/Builtin.swift", 19, 2, 0x5FuLL, 0);
  }
  (*(void (**)(char *, uint64_t, const char *))(v11 + 16))((char *)&v17 - v12, v17, AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v2 + *(void *)(*(void *)v2 + 440), v4);
  float v15 = (*(float (**)(char *, uint64_t, uint64_t))(v9 + 80))(v13, v4, v9);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  (*(void (**)(char *, const char *))(v11 + 8))(v13, AssociatedTypeWitness);
  return v15;
}

uint64_t _KeyedDecodingContainerBox.decode<A, B>(_:forKey:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v21 = a3;
  uint64_t v22 = a5;
  v20[0] = a2;
  v20[1] = a6;
  uint64_t v8 = *(void *)(*(void *)v6 + 424);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v11 = (char *)v20 - v10;
  uint64_t v13 = *(void *)(v12 + 432);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (int **)v13, v8, (uint64_t)&protocol requirements base descriptor for KeyedDecodingContainerProtocol, associated type descriptor for KeyedDecodingContainerProtocol.Key);
  uint64_t v15 = *((void *)AssociatedTypeWitness - 1);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v17 = (char *)v20 - v16;
  if (*(void *)(*(void *)(a4 - 8) + 64) != v18) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't unsafeBitCast between types of different sizes", 52, 2, "Swift/Builtin.swift", 19, 2, 0x5FuLL, 0);
  }
  (*(void (**)(char *, void, const char *))(v15 + 16))((char *)v20 - v16, v20[0], AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, v6 + *(void *)(*(void *)v6 + 440), v8);
  (*(void (**)(uint64_t, char *, uint64_t, uint64_t, uint64_t, uint64_t))(v13 + 184))(v21, v17, v21, v22, v8, v13);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  return (*(uint64_t (**)(char *, const char *))(v15 + 8))(v17, AssociatedTypeWitness);
}

uint64_t _KeyedDecodingContainerBox.decodeIfPresent<A>(_:forKey:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(*(void *)v2 + 424);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v8 = (char *)&v20 - v7;
  uint64_t v10 = *(void *)(v9 + 432);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (int **)v10, v5, (uint64_t)&protocol requirements base descriptor for KeyedDecodingContainerProtocol, associated type descriptor for KeyedDecodingContainerProtocol.Key);
  uint64_t v12 = *((void *)AssociatedTypeWitness - 1);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v15 = (char *)&v20 - v13;
  if (*(void *)(*(void *)(a2 - 8) + 64) != v16) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't unsafeBitCast between types of different sizes", 52, 2, "Swift/Builtin.swift", 19, 2, 0x5FuLL, 0);
  }
  uint64_t v17 = v14;
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))((char *)&v20 - v13, a1, v14);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v2 + *(void *)(*(void *)v2 + 440), v5);
  uint64_t v18 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 192))(v15, v5, v10);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v17);
  return v18;
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  const char *AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;

  uint64_t v18 = a1;
  uint64_t v4 = *(void *)(*(void *)v2 + 424);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v7 = (char *)&v17 - v6;
  uint64_t v9 = *(void *)(v8 + 432);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (int **)v9, v4, (uint64_t)&protocol requirements base descriptor for KeyedDecodingContainerProtocol, associated type descriptor for KeyedDecodingContainerProtocol.Key);
  uint64_t v11 = *((void *)AssociatedTypeWitness - 1);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v13 = (char *)&v17 - v12;
  if (*(void *)(*(void *)(a2 - 8) + 64) != v14) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't unsafeBitCast between types of different sizes", 52, 2, "Swift/Builtin.swift", 19, 2, 0x5FuLL, 0);
  }
  (*(void (**)(char *, uint64_t, const char *))(v11 + 16))((char *)&v17 - v12, v18, AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v2 + *(void *)(*(void *)v2 + 440), v4);
  uint64_t v15 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 200))(v13, v4, v9);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  (*(void (**)(char *, const char *))(v11 + 8))(v13, AssociatedTypeWitness);
  return v15;
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  const char *AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  uint64_t v21 = a1;
  uint64_t v4 = *(void *)(*(void *)v2 + 424);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v7 = (char *)&v20 - v6;
  uint64_t v9 = *(void *)(v8 + 432);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (int **)v9, v4, (uint64_t)&protocol requirements base descriptor for KeyedDecodingContainerProtocol, associated type descriptor for KeyedDecodingContainerProtocol.Key);
  uint64_t v11 = *((void *)AssociatedTypeWitness - 1);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v13 = (char *)&v20 - v12;
  uint64_t v15 = *(void *)(a2 - 8);
  uint64_t v14 = a2 - 8;
  if (*(void *)(v15 + 64) != v16) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't unsafeBitCast between types of different sizes", 52, 2, "Swift/Builtin.swift", 19, 2, 0x5FuLL, 0);
  }
  (*(void (**)(char *, uint64_t, const char *))(v11 + 16))((char *)&v20 - v12, v21, AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v2 + *(void *)(*(void *)v2 + 440), v4);
  uint64_t v17 = v22;
  uint64_t v18 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 208))(v13, v4, v9);
  if (!v17) {
    uint64_t v14 = v18;
  }
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  (*(void (**)(char *, const char *))(v11 + 8))(v13, AssociatedTypeWitness);
  return v14;
}

{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  const char *AssociatedTypeWitness;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v21;
  void v22[2];

  uint64_t v5 = *(void *)(*(void *)v2 + 424);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v8 = (char *)v22 - v7;
  uint64_t v10 = *(void *)(v9 + 432);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (int **)v10, v5, (uint64_t)&protocol requirements base descriptor for KeyedDecodingContainerProtocol, associated type descriptor for KeyedDecodingContainerProtocol.Key);
  uint64_t v12 = *((void *)AssociatedTypeWitness - 1);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v15 = (char *)v22 - v13;
  if (*(void *)(*(void *)(a2 - 8) + 64) != v16) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't unsafeBitCast between types of different sizes", 52, 2, "Swift/Builtin.swift", 19, 2, 0x5FuLL, 0);
  }
  uint64_t v17 = v14;
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))((char *)v22 - v13, a1, v14);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v2 + *(void *)(*(void *)v2 + 440), v5);
  uint64_t v18 = v22[1];
  uint64_t v19 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 216))(v15, v5, v10);
  if (v18)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v15, v17);
  }
  else
  {
    uint64_t v21 = v19;
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v17);
    return v21 | ((HIDWORD(v21) & 1) << 32);
  }
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  const char *AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  uint64_t v21 = a1;
  uint64_t v4 = *(void *)(*(void *)v2 + 424);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v7 = (char *)&v20 - v6;
  uint64_t v9 = *(void *)(v8 + 432);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (int **)v9, v4, (uint64_t)&protocol requirements base descriptor for KeyedDecodingContainerProtocol, associated type descriptor for KeyedDecodingContainerProtocol.Key);
  uint64_t v11 = *((void *)AssociatedTypeWitness - 1);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v13 = (char *)&v20 - v12;
  uint64_t v15 = *(void *)(a2 - 8);
  uint64_t v14 = a2 - 8;
  if (*(void *)(v15 + 64) != v16) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't unsafeBitCast between types of different sizes", 52, 2, "Swift/Builtin.swift", 19, 2, 0x5FuLL, 0);
  }
  (*(void (**)(char *, uint64_t, const char *))(v11 + 16))((char *)&v20 - v12, v21, AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v2 + *(void *)(*(void *)v2 + 440), v4);
  uint64_t v17 = v22;
  uint64_t v18 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 224))(v13, v4, v9);
  if (!v17) {
    uint64_t v14 = v18;
  }
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  (*(void (**)(char *, const char *))(v11 + 8))(v13, AssociatedTypeWitness);
  return v14;
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  const char *AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  __int16 v16;
  __int16 v18;
  void v19[2];

  v19[0] = a1;
  uint64_t v4 = *(void *)(*(void *)v2 + 424);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v7 = (char *)v19 - v6;
  uint64_t v9 = *(void *)(v8 + 432);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (int **)v9, v4, (uint64_t)&protocol requirements base descriptor for KeyedDecodingContainerProtocol, associated type descriptor for KeyedDecodingContainerProtocol.Key);
  uint64_t v11 = *((void *)AssociatedTypeWitness - 1);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v13 = (char *)v19 - v12;
  if (*(void *)(*(void *)(a2 - 8) + 64) != v14) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't unsafeBitCast between types of different sizes", 52, 2, "Swift/Builtin.swift", 19, 2, 0x5FuLL, 0);
  }
  (*(void (**)(char *, void, const char *))(v11 + 16))((char *)v19 - v12, v19[0], AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v2 + *(void *)(*(void *)v2 + 440), v4);
  uint64_t v15 = v19[1];
  uint64_t v16 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 232))(v13, v4, v9);
  if (v15)
  {
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    return (*(uint64_t (**)(char *, const char *))(v11 + 8))(v13, AssociatedTypeWitness);
  }
  else
  {
    uint64_t v18 = v16;
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    (*(void (**)(char *, const char *))(v11 + 8))(v13, AssociatedTypeWitness);
    return v18 & 0x1FF;
  }
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  const char *AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v18;
  void v19[2];

  v19[0] = a1;
  uint64_t v4 = *(void *)(*(void *)v2 + 424);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v7 = (char *)v19 - v6;
  uint64_t v9 = *(void *)(v8 + 432);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (int **)v9, v4, (uint64_t)&protocol requirements base descriptor for KeyedDecodingContainerProtocol, associated type descriptor for KeyedDecodingContainerProtocol.Key);
  uint64_t v11 = *((void *)AssociatedTypeWitness - 1);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v13 = (char *)v19 - v12;
  if (*(void *)(*(void *)(a2 - 8) + 64) != v14) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't unsafeBitCast between types of different sizes", 52, 2, "Swift/Builtin.swift", 19, 2, 0x5FuLL, 0);
  }
  (*(void (**)(char *, void, const char *))(v11 + 16))((char *)v19 - v12, v19[0], AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v2 + *(void *)(*(void *)v2 + 440), v4);
  uint64_t v15 = v19[1];
  uint64_t v16 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 240))(v13, v4, v9);
  if (v15)
  {
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    return (*(uint64_t (**)(char *, const char *))(v11 + 8))(v13, AssociatedTypeWitness);
  }
  else
  {
    uint64_t v18 = v16;
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    (*(void (**)(char *, const char *))(v11 + 8))(v13, AssociatedTypeWitness);
    return v18 & 0x1FFFF;
  }
}

{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  const char *AssociatedTypeWitness;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v21;
  void v22[2];

  uint64_t v5 = *(void *)(*(void *)v2 + 424);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v8 = (char *)v22 - v7;
  uint64_t v10 = *(void *)(v9 + 432);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (int **)v10, v5, (uint64_t)&protocol requirements base descriptor for KeyedDecodingContainerProtocol, associated type descriptor for KeyedDecodingContainerProtocol.Key);
  uint64_t v12 = *((void *)AssociatedTypeWitness - 1);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v15 = (char *)v22 - v13;
  if (*(void *)(*(void *)(a2 - 8) + 64) != v16) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't unsafeBitCast between types of different sizes", 52, 2, "Swift/Builtin.swift", 19, 2, 0x5FuLL, 0);
  }
  uint64_t v17 = v14;
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))((char *)v22 - v13, a1, v14);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v2 + *(void *)(*(void *)v2 + 440), v5);
  uint64_t v18 = v22[1];
  uint64_t v19 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 248))(v15, v5, v10);
  if (v18)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v15, v17);
  }
  else
  {
    uint64_t v21 = v19;
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v17);
    return v21 | ((HIDWORD(v21) & 1) << 32);
  }
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  const char *AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  uint64_t v21 = a1;
  uint64_t v4 = *(void *)(*(void *)v2 + 424);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v7 = (char *)&v20 - v6;
  uint64_t v9 = *(void *)(v8 + 432);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (int **)v9, v4, (uint64_t)&protocol requirements base descriptor for KeyedDecodingContainerProtocol, associated type descriptor for KeyedDecodingContainerProtocol.Key);
  uint64_t v11 = *((void *)AssociatedTypeWitness - 1);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v13 = (char *)&v20 - v12;
  uint64_t v15 = *(void *)(a2 - 8);
  uint64_t v14 = a2 - 8;
  if (*(void *)(v15 + 64) != v16) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't unsafeBitCast between types of different sizes", 52, 2, "Swift/Builtin.swift", 19, 2, 0x5FuLL, 0);
  }
  (*(void (**)(char *, uint64_t, const char *))(v11 + 16))((char *)&v20 - v12, v21, AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v2 + *(void *)(*(void *)v2 + 440), v4);
  uint64_t v17 = v22;
  uint64_t v18 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 256))(v13, v4, v9);
  if (!v17) {
    uint64_t v14 = v18;
  }
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  (*(void (**)(char *, const char *))(v11 + 8))(v13, AssociatedTypeWitness);
  return v14;
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  const char *AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  uint64_t v22 = a1;
  uint64_t v4 = *(void *)(*(void *)v2 + 424);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v7 = (char *)&v21 - v6;
  uint64_t v9 = *(void *)(v8 + 432);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (int **)v9, v4, (uint64_t)&protocol requirements base descriptor for KeyedDecodingContainerProtocol, associated type descriptor for KeyedDecodingContainerProtocol.Key);
  uint64_t v11 = *((void *)AssociatedTypeWitness - 1);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v13 = (char *)&v21 - v12;
  uint64_t v15 = *(void *)(a2 - 8);
  uint64_t v14 = a2 - 8;
  if (*(void *)(v15 + 64) != v16) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't unsafeBitCast between types of different sizes", 52, 2, "Swift/Builtin.swift", 19, 2, 0x5FuLL, 0);
  }
  (*(void (**)(char *, uint64_t, const char *))(v11 + 16))((char *)&v21 - v12, v22, AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v2 + *(void *)(*(void *)v2 + 440), v4);
  uint64_t v17 = v23;
  uint64_t v18 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 264))(v13, v4, v9);
  if (!v17)
  {
    uint64_t v14 = v18;
    LODWORD(v23) = v19 & 1;
  }
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  (*(void (**)(char *, const char *))(v11 + 8))(v13, AssociatedTypeWitness);
  return v14;
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  const char *AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  uint64_t v21 = a1;
  uint64_t v4 = *(void *)(*(void *)v2 + 424);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v7 = (char *)&v20 - v6;
  uint64_t v9 = *(void *)(v8 + 432);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (int **)v9, v4, (uint64_t)&protocol requirements base descriptor for KeyedDecodingContainerProtocol, associated type descriptor for KeyedDecodingContainerProtocol.Key);
  uint64_t v11 = *((void *)AssociatedTypeWitness - 1);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v13 = (char *)&v20 - v12;
  uint64_t v15 = *(void *)(a2 - 8);
  uint64_t v14 = a2 - 8;
  if (*(void *)(v15 + 64) != v16) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't unsafeBitCast between types of different sizes", 52, 2, "Swift/Builtin.swift", 19, 2, 0x5FuLL, 0);
  }
  (*(void (**)(char *, uint64_t, const char *))(v11 + 16))((char *)&v20 - v12, v21, AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v2 + *(void *)(*(void *)v2 + 440), v4);
  uint64_t v17 = v22;
  uint64_t v18 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 272))(v13, v4, v9);
  if (!v17) {
    uint64_t v14 = v18;
  }
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  (*(void (**)(char *, const char *))(v11 + 8))(v13, AssociatedTypeWitness);
  return v14;
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  const char *AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  __int16 v16;
  __int16 v18;
  void v19[2];

  v19[0] = a1;
  uint64_t v4 = *(void *)(*(void *)v2 + 424);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v7 = (char *)v19 - v6;
  uint64_t v9 = *(void *)(v8 + 432);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (int **)v9, v4, (uint64_t)&protocol requirements base descriptor for KeyedDecodingContainerProtocol, associated type descriptor for KeyedDecodingContainerProtocol.Key);
  uint64_t v11 = *((void *)AssociatedTypeWitness - 1);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v13 = (char *)v19 - v12;
  if (*(void *)(*(void *)(a2 - 8) + 64) != v14) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't unsafeBitCast between types of different sizes", 52, 2, "Swift/Builtin.swift", 19, 2, 0x5FuLL, 0);
  }
  (*(void (**)(char *, void, const char *))(v11 + 16))((char *)v19 - v12, v19[0], AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v2 + *(void *)(*(void *)v2 + 440), v4);
  uint64_t v15 = v19[1];
  uint64_t v16 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 280))(v13, v4, v9);
  if (v15)
  {
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    return (*(uint64_t (**)(char *, const char *))(v11 + 8))(v13, AssociatedTypeWitness);
  }
  else
  {
    uint64_t v18 = v16;
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    (*(void (**)(char *, const char *))(v11 + 8))(v13, AssociatedTypeWitness);
    return v18 & 0x1FF;
  }
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  const char *AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v18;
  void v19[2];

  v19[0] = a1;
  uint64_t v4 = *(void *)(*(void *)v2 + 424);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v7 = (char *)v19 - v6;
  uint64_t v9 = *(void *)(v8 + 432);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (int **)v9, v4, (uint64_t)&protocol requirements base descriptor for KeyedDecodingContainerProtocol, associated type descriptor for KeyedDecodingContainerProtocol.Key);
  uint64_t v11 = *((void *)AssociatedTypeWitness - 1);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v13 = (char *)v19 - v12;
  if (*(void *)(*(void *)(a2 - 8) + 64) != v14) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't unsafeBitCast between types of different sizes", 52, 2, "Swift/Builtin.swift", 19, 2, 0x5FuLL, 0);
  }
  (*(void (**)(char *, void, const char *))(v11 + 16))((char *)v19 - v12, v19[0], AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v2 + *(void *)(*(void *)v2 + 440), v4);
  uint64_t v15 = v19[1];
  uint64_t v16 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 288))(v13, v4, v9);
  if (v15)
  {
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    return (*(uint64_t (**)(char *, const char *))(v11 + 8))(v13, AssociatedTypeWitness);
  }
  else
  {
    uint64_t v18 = v16;
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    (*(void (**)(char *, const char *))(v11 + 8))(v13, AssociatedTypeWitness);
    return v18 & 0x1FFFF;
  }
}

{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  const char *AssociatedTypeWitness;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v21;
  void v22[2];

  uint64_t v5 = *(void *)(*(void *)v2 + 424);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v8 = (char *)v22 - v7;
  uint64_t v10 = *(void *)(v9 + 432);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (int **)v10, v5, (uint64_t)&protocol requirements base descriptor for KeyedDecodingContainerProtocol, associated type descriptor for KeyedDecodingContainerProtocol.Key);
  uint64_t v12 = *((void *)AssociatedTypeWitness - 1);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v15 = (char *)v22 - v13;
  if (*(void *)(*(void *)(a2 - 8) + 64) != v16) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't unsafeBitCast between types of different sizes", 52, 2, "Swift/Builtin.swift", 19, 2, 0x5FuLL, 0);
  }
  uint64_t v17 = v14;
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))((char *)v22 - v13, a1, v14);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v2 + *(void *)(*(void *)v2 + 440), v5);
  uint64_t v18 = v22[1];
  uint64_t v19 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 296))(v15, v5, v10);
  if (v18)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v15, v17);
  }
  else
  {
    uint64_t v21 = v19;
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v17);
    return v21 | ((HIDWORD(v21) & 1) << 32);
  }
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  const char *AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  uint64_t v21 = a1;
  uint64_t v4 = *(void *)(*(void *)v2 + 424);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v7 = (char *)&v20 - v6;
  uint64_t v9 = *(void *)(v8 + 432);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (int **)v9, v4, (uint64_t)&protocol requirements base descriptor for KeyedDecodingContainerProtocol, associated type descriptor for KeyedDecodingContainerProtocol.Key);
  uint64_t v11 = *((void *)AssociatedTypeWitness - 1);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v13 = (char *)&v20 - v12;
  uint64_t v15 = *(void *)(a2 - 8);
  uint64_t v14 = a2 - 8;
  if (*(void *)(v15 + 64) != v16) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't unsafeBitCast between types of different sizes", 52, 2, "Swift/Builtin.swift", 19, 2, 0x5FuLL, 0);
  }
  (*(void (**)(char *, uint64_t, const char *))(v11 + 16))((char *)&v20 - v12, v21, AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v2 + *(void *)(*(void *)v2 + 440), v4);
  uint64_t v17 = v22;
  uint64_t v18 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 304))(v13, v4, v9);
  if (!v17) {
    uint64_t v14 = v18;
  }
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  (*(void (**)(char *, const char *))(v11 + 8))(v13, AssociatedTypeWitness);
  return v14;
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  const char *AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  uint64_t v22 = a1;
  uint64_t v4 = *(void *)(*(void *)v2 + 424);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v7 = (char *)&v21 - v6;
  uint64_t v9 = *(void *)(v8 + 432);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (int **)v9, v4, (uint64_t)&protocol requirements base descriptor for KeyedDecodingContainerProtocol, associated type descriptor for KeyedDecodingContainerProtocol.Key);
  uint64_t v11 = *((void *)AssociatedTypeWitness - 1);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v13 = (char *)&v21 - v12;
  uint64_t v15 = *(void *)(a2 - 8);
  uint64_t v14 = a2 - 8;
  if (*(void *)(v15 + 64) != v16) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't unsafeBitCast between types of different sizes", 52, 2, "Swift/Builtin.swift", 19, 2, 0x5FuLL, 0);
  }
  (*(void (**)(char *, uint64_t, const char *))(v11 + 16))((char *)&v21 - v12, v22, AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v2 + *(void *)(*(void *)v2 + 440), v4);
  uint64_t v17 = v23;
  uint64_t v18 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 312))(v13, v4, v9);
  if (!v17)
  {
    uint64_t v14 = v18;
    LODWORD(v23) = v19 & 1;
  }
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  (*(void (**)(char *, const char *))(v11 + 8))(v13, AssociatedTypeWitness);
  return v14;
}

uint64_t _KeyedDecodingContainerBox.decodeIfPresent<A, B>(_:forKey:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v21 = a3;
  uint64_t v22 = a5;
  v20[0] = a2;
  v20[1] = a6;
  uint64_t v8 = *(void *)(*(void *)v6 + 424);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v11 = (char *)v20 - v10;
  uint64_t v13 = *(void *)(v12 + 432);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (int **)v13, v8, (uint64_t)&protocol requirements base descriptor for KeyedDecodingContainerProtocol, associated type descriptor for KeyedDecodingContainerProtocol.Key);
  uint64_t v15 = *((void *)AssociatedTypeWitness - 1);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v17 = (char *)v20 - v16;
  if (*(void *)(*(void *)(a4 - 8) + 64) != v18) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't unsafeBitCast between types of different sizes", 52, 2, "Swift/Builtin.swift", 19, 2, 0x5FuLL, 0);
  }
  (*(void (**)(char *, void, const char *))(v15 + 16))((char *)v20 - v16, v20[0], AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, v6 + *(void *)(*(void *)v6 + 440), v8);
  (*(void (**)(uint64_t, char *, uint64_t, uint64_t, uint64_t, uint64_t))(v13 + 320))(v21, v17, v21, v22, v8, v13);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  return (*(uint64_t (**)(char *, const char *))(v15 + 8))(v17, AssociatedTypeWitness);
}

uint64_t _KeyedDecodingContainerBox.nestedContainer<A, B>(keyedBy:forKey:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v21 = a3;
  uint64_t v22 = a5;
  v20[0] = a2;
  v20[1] = a6;
  uint64_t v8 = *(void *)(*(void *)v6 + 424);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v11 = (char *)v20 - v10;
  uint64_t v13 = *(void *)(v12 + 432);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (int **)v13, v8, (uint64_t)&protocol requirements base descriptor for KeyedDecodingContainerProtocol, associated type descriptor for KeyedDecodingContainerProtocol.Key);
  uint64_t v15 = *((void *)AssociatedTypeWitness - 1);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v17 = (char *)v20 - v16;
  if (*(void *)(*(void *)(a4 - 8) + 64) != v18) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't unsafeBitCast between types of different sizes", 52, 2, "Swift/Builtin.swift", 19, 2, 0x5FuLL, 0);
  }
  (*(void (**)(char *, void, const char *))(v15 + 16))((char *)v20 - v16, v20[0], AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, v6 + *(void *)(*(void *)v6 + 440), v8);
  (*(void (**)(uint64_t, char *, uint64_t, uint64_t, uint64_t, uint64_t))(v13 + 328))(v21, v17, v21, v22, v8, v13);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  return (*(uint64_t (**)(char *, const char *))(v15 + 8))(v17, AssociatedTypeWitness);
}

uint64_t _KeyedDecodingContainerBox.nestedUnkeyedContainer<A>(forKey:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  v17[0] = a1;
  v17[1] = a3;
  uint64_t v5 = *(void *)(*(void *)v3 + 424);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v8 = (char *)v17 - v7;
  uint64_t v10 = *(void *)(v9 + 432);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (int **)v10, v5, (uint64_t)&protocol requirements base descriptor for KeyedDecodingContainerProtocol, associated type descriptor for KeyedDecodingContainerProtocol.Key);
  uint64_t v12 = *((void *)AssociatedTypeWitness - 1);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v14 = (char *)v17 - v13;
  if (*(void *)(*(void *)(a2 - 8) + 64) != v15) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't unsafeBitCast between types of different sizes", 52, 2, "Swift/Builtin.swift", 19, 2, 0x5FuLL, 0);
  }
  (*(void (**)(char *, void, const char *))(v12 + 16))((char *)v17 - v13, v17[0], AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v3 + *(void *)(*(void *)v3 + 440), v5);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 336))(v14, v5, v10);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  return (*(uint64_t (**)(char *, const char *))(v12 + 8))(v14, AssociatedTypeWitness);
}

uint64_t _KeyedDecodingContainerBox.superDecoder()(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 424);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v6 = (char *)v8 - v5;
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))((char *)v8 - v5, (uint64_t)v1 + *(void *)(v2 + 440), v3);
  (*(void (**)(uint64_t))(*(void *)(v2 + 432) + 344))(v3);
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t _KeyedDecodingContainerBox.superDecoder<A>(forKey:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  v17[0] = a1;
  v17[1] = a3;
  uint64_t v5 = *(void *)(*(void *)v3 + 424);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v8 = (char *)v17 - v7;
  uint64_t v10 = *(void *)(v9 + 432);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (int **)v10, v5, (uint64_t)&protocol requirements base descriptor for KeyedDecodingContainerProtocol, associated type descriptor for KeyedDecodingContainerProtocol.Key);
  uint64_t v12 = *((void *)AssociatedTypeWitness - 1);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v14 = (char *)v17 - v13;
  if (*(void *)(*(void *)(a2 - 8) + 64) != v15) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't unsafeBitCast between types of different sizes", 52, 2, "Swift/Builtin.swift", 19, 2, 0x5FuLL, 0);
  }
  (*(void (**)(char *, void, const char *))(v12 + 16))((char *)v17 - v13, v17[0], AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v3 + *(void *)(*(void *)v3 + 440), v5);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 352))(v14, v5, v10);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  return (*(uint64_t (**)(char *, const char *))(v12 + 8))(v14, AssociatedTypeWitness);
}

uint64_t _KeyedDecodingContainerBox.__ivar_destroyer()
{
  return (*(uint64_t (**)(uint64_t))(*(void *)(*(void *)(*(void *)v0 + 424) - 8) + 8))(v0 + *(void *)(*(void *)v0 + 440));
}

void _KeyedDecodingContainerBox.__deallocating_deinit()
{
  (*(void (**)(uint64_t))(*(void *)(*(void *)(*(void *)v0 + 424) - 8) + 8))(v0 + *(void *)(*(void *)v0 + 440));

  swift_deallocClassInstance(v0);
}

uint64_t Bool.init(from:)(uint64_t *a1)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  unsigned __int8 v5 = __swift_project_boxed_opaque_existential_0Tm(a1, v3);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v4 + 40))(v9, v3, v4);
  if (!v1)
  {
    uint64_t v6 = v10;
    uint64_t v7 = v11;
    __swift_project_boxed_opaque_existential_0Tm(v9, v10);
    unsigned __int8 v5 = (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 24))(v6, v7);
    __swift_destroy_boxed_opaque_existential_1Tm(v9);
  }
  __swift_destroy_boxed_opaque_existential_1Tm(a1);
  return v5 & 1;
}

uint64_t Bool.encode(to:)(void *a1, uint64_t a2)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  __swift_project_boxed_opaque_existential_0Tm(a1, v3);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v4 + 40))(v8, v3, v4);
  unint64_t v5 = v9;
  uint64_t v6 = v10;
  __swift_mutable_project_boxed_opaque_existential_1(v8, v9);
  (*(void (**)(uint64_t, unint64_t, uint64_t))(v6 + 24))(a2, v5, v6);
  return __swift_destroy_boxed_opaque_existential_1Tm(v8);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Bool(void *a1)
{
  uint64_t v2 = *v1;
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  __swift_project_boxed_opaque_existential_0Tm(a1, v3);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v4 + 40))(v8, v3, v4);
  unint64_t v5 = v9;
  uint64_t v6 = v10;
  __swift_mutable_project_boxed_opaque_existential_1(v8, v9);
  (*(void (**)(uint64_t, unint64_t, uint64_t))(v6 + 24))(v2, v5, v6);
  return __swift_destroy_boxed_opaque_existential_1Tm(v8);
}

uint64_t protocol witness for Decodable.init(from:) in conformance Bool@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v5 = a1[3];
  uint64_t v6 = a1[4];
  __swift_project_boxed_opaque_existential_0Tm(a1, v5);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v6 + 40))(v11, v5, v6);
  if (v2) {
    return __swift_destroy_boxed_opaque_existential_1Tm(a1);
  }
  uint64_t v7 = v12;
  uint64_t v8 = v13;
  __swift_project_boxed_opaque_existential_0Tm(v11, v12);
  char v9 = (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 24))(v7, v8);
  __swift_destroy_boxed_opaque_existential_1Tm(v11);
  uint64_t result = __swift_destroy_boxed_opaque_existential_1Tm(a1);
  *a2 = v9 & 1;
  return result;
}

uint64_t RawRepresentable<>.encode(to:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = a1[3];
  uint64_t v7 = a1[4];
  __swift_project_boxed_opaque_existential_0Tm(a1, v6);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v7 + 40))(v12, v6, v7);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a4 + 24))(&v15, a2, a4);
  uint64_t v8 = v15;
  unint64_t v9 = v13;
  uint64_t v10 = v14;
  __swift_mutable_project_boxed_opaque_existential_1(v12, v13);
  (*(void (**)(uint64_t, unint64_t, uint64_t))(v10 + 24))(v8, v9, v10);
  return __swift_destroy_boxed_opaque_existential_1Tm(v12);
}

{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  void v13[2];
  uint64_t v14[3];
  unint64_t v15;
  uint64_t v16;

  uint64_t v6 = a1[3];
  uint64_t v7 = a1[4];
  __swift_project_boxed_opaque_existential_0Tm(a1, v6);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v7 + 40))(v14, v6, v7);
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(a4 + 24))(v13, a2, a4);
  uint64_t v8 = v13[0];
  unint64_t v9 = v13[1];
  uint64_t v10 = v15;
  uint64_t v11 = v16;
  __swift_mutable_project_boxed_opaque_existential_1(v14, v15);
  (*(void (**)(uint64_t, uint64_t, unint64_t, uint64_t))(v11 + 32))(v8, v9, v10, v11);
  swift_bridgeObjectRelease(v9);
  return __swift_destroy_boxed_opaque_existential_1Tm(v14);
}

{
  uint64_t v6;
  uint64_t v7;
  double v8;
  unint64_t v9;
  uint64_t v10;
  double v12;
  uint64_t v13[3];
  unint64_t v14;
  uint64_t v15;

  uint64_t v6 = a1[3];
  uint64_t v7 = a1[4];
  __swift_project_boxed_opaque_existential_0Tm(a1, v6);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v7 + 40))(v13, v6, v7);
  (*(void (**)(double *__return_ptr, uint64_t, uint64_t))(a4 + 24))(&v12, a2, a4);
  uint64_t v8 = v12;
  unint64_t v9 = v14;
  uint64_t v10 = v15;
  __swift_mutable_project_boxed_opaque_existential_1(v13, v14);
  (*(void (**)(unint64_t, uint64_t, double))(v10 + 40))(v9, v10, v8);
  return __swift_destroy_boxed_opaque_existential_1Tm(v13);
}

{
  uint64_t v6;
  uint64_t v7;
  float v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v12[3];
  unint64_t v13;
  uint64_t v14;

  uint64_t v6 = a1[3];
  uint64_t v7 = a1[4];
  __swift_project_boxed_opaque_existential_0Tm(a1, v6);
  (*(void (**)(char *__return_ptr, uint64_t, uint64_t))(v7 + 40))((char *)v12 + 4, v6, v7);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a4 + 24))(v12, a2, a4);
  uint64_t v8 = *(float *)v12;
  unint64_t v9 = v13;
  uint64_t v10 = v14;
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t *)((char *)v12 + 4), v13);
  (*(void (**)(unint64_t, uint64_t, float))(v10 + 48))(v9, v10, v8);
  return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t *)((char *)v12 + 4));
}

{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v12[3];
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;

  uint64_t v6 = a1[3];
  uint64_t v7 = a1[4];
  __swift_project_boxed_opaque_existential_0Tm(a1, v6);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v7 + 40))(v12, v6, v7);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a4 + 24))(&v15, a2, a4);
  uint64_t v8 = v15;
  unint64_t v9 = v13;
  uint64_t v10 = v14;
  __swift_mutable_project_boxed_opaque_existential_1(v12, v13);
  (*(void (**)(uint64_t, unint64_t, uint64_t))(v10 + 56))(v8, v9, v10);
  return __swift_destroy_boxed_opaque_existential_1Tm(v12);
}

{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12[3];
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;

  uint64_t v6 = a1[3];
  uint64_t v7 = a1[4];
  __swift_project_boxed_opaque_existential_0Tm(a1, v6);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v7 + 40))(v12, v6, v7);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a4 + 24))(&v15, a2, a4);
  uint64_t v8 = v13;
  unint64_t v9 = v14;
  uint64_t v10 = v15;
  __swift_mutable_project_boxed_opaque_existential_1(v12, v13);
  (*(void (**)(uint64_t, unint64_t, uint64_t))(v9 + 64))(v10, v8, v9);
  return __swift_destroy_boxed_opaque_existential_1Tm(v12);
}

{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12[3];
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;

  uint64_t v6 = a1[3];
  uint64_t v7 = a1[4];
  __swift_project_boxed_opaque_existential_0Tm(a1, v6);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v7 + 40))(v12, v6, v7);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a4 + 24))(&v15, a2, a4);
  uint64_t v8 = v13;
  unint64_t v9 = v14;
  uint64_t v10 = (unsigned __int16)v15;
  __swift_mutable_project_boxed_opaque_existential_1(v12, v13);
  (*(void (**)(uint64_t, unint64_t, uint64_t))(v9 + 72))(v10, v8, v9);
  return __swift_destroy_boxed_opaque_existential_1Tm(v12);
}

{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v12[3];
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;

  uint64_t v6 = a1[3];
  uint64_t v7 = a1[4];
  __swift_project_boxed_opaque_existential_0Tm(a1, v6);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v7 + 40))(v12, v6, v7);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a4 + 24))(&v15, a2, a4);
  uint64_t v8 = v15;
  unint64_t v9 = v13;
  uint64_t v10 = v14;
  __swift_mutable_project_boxed_opaque_existential_1(v12, v13);
  (*(void (**)(uint64_t, unint64_t, uint64_t))(v10 + 80))(v8, v9, v10);
  return __swift_destroy_boxed_opaque_existential_1Tm(v12);
}

{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v12[3];
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;

  uint64_t v6 = a1[3];
  uint64_t v7 = a1[4];
  __swift_project_boxed_opaque_existential_0Tm(a1, v6);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v7 + 40))(v12, v6, v7);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a4 + 24))(&v15, a2, a4);
  uint64_t v8 = v15;
  unint64_t v9 = v13;
  uint64_t v10 = v14;
  __swift_mutable_project_boxed_opaque_existential_1(v12, v13);
  (*(void (**)(uint64_t, unint64_t, uint64_t))(v10 + 88))(v8, v9, v10);
  return __swift_destroy_boxed_opaque_existential_1Tm(v12);
}

{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  void v13[3];
  uint64_t v14[3];
  unint64_t v15;
  uint64_t v16;

  uint64_t v6 = a1[3];
  uint64_t v7 = a1[4];
  __swift_project_boxed_opaque_existential_0Tm(a1, v6);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v7 + 40))(v14, v6, v7);
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(a4 + 24))(v13, a2, a4);
  unint64_t v9 = v13[0];
  uint64_t v8 = v13[1];
  uint64_t v10 = v15;
  uint64_t v11 = v16;
  __swift_mutable_project_boxed_opaque_existential_1(v14, v15);
  (*(void (**)(uint64_t, uint64_t, unint64_t, uint64_t))(v11 + 96))(v9, v8, v10, v11);
  return __swift_destroy_boxed_opaque_existential_1Tm(v14);
}

{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v12[3];
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;

  uint64_t v6 = a1[3];
  uint64_t v7 = a1[4];
  __swift_project_boxed_opaque_existential_0Tm(a1, v6);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v7 + 40))(v12, v6, v7);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a4 + 24))(&v15, a2, a4);
  uint64_t v8 = v15;
  unint64_t v9 = v13;
  uint64_t v10 = v14;
  __swift_mutable_project_boxed_opaque_existential_1(v12, v13);
  (*(void (**)(uint64_t, unint64_t, uint64_t))(v10 + 104))(v8, v9, v10);
  return __swift_destroy_boxed_opaque_existential_1Tm(v12);
}

{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12[3];
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;

  uint64_t v6 = a1[3];
  uint64_t v7 = a1[4];
  __swift_project_boxed_opaque_existential_0Tm(a1, v6);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v7 + 40))(v12, v6, v7);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a4 + 24))(&v15, a2, a4);
  uint64_t v8 = v13;
  unint64_t v9 = v14;
  uint64_t v10 = v15;
  __swift_mutable_project_boxed_opaque_existential_1(v12, v13);
  (*(void (**)(uint64_t, unint64_t, uint64_t))(v9 + 112))(v10, v8, v9);
  return __swift_destroy_boxed_opaque_existential_1Tm(v12);
}

{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12[3];
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;

  uint64_t v6 = a1[3];
  uint64_t v7 = a1[4];
  __swift_project_boxed_opaque_existential_0Tm(a1, v6);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v7 + 40))(v12, v6, v7);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a4 + 24))(&v15, a2, a4);
  uint64_t v8 = v13;
  unint64_t v9 = v14;
  uint64_t v10 = (unsigned __int16)v15;
  __swift_mutable_project_boxed_opaque_existential_1(v12, v13);
  (*(void (**)(uint64_t, unint64_t, uint64_t))(v9 + 120))(v10, v8, v9);
  return __swift_destroy_boxed_opaque_existential_1Tm(v12);
}

{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v12[3];
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;

  uint64_t v6 = a1[3];
  uint64_t v7 = a1[4];
  __swift_project_boxed_opaque_existential_0Tm(a1, v6);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v7 + 40))(v12, v6, v7);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a4 + 24))(&v15, a2, a4);
  uint64_t v8 = v15;
  unint64_t v9 = v13;
  uint64_t v10 = v14;
  __swift_mutable_project_boxed_opaque_existential_1(v12, v13);
  (*(void (**)(uint64_t, unint64_t, uint64_t))(v10 + 128))(v8, v9, v10);
  return __swift_destroy_boxed_opaque_existential_1Tm(v12);
}

{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v12[3];
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;

  uint64_t v6 = a1[3];
  uint64_t v7 = a1[4];
  __swift_project_boxed_opaque_existential_0Tm(a1, v6);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v7 + 40))(v12, v6, v7);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a4 + 24))(&v15, a2, a4);
  uint64_t v8 = v15;
  unint64_t v9 = v13;
  uint64_t v10 = v14;
  __swift_mutable_project_boxed_opaque_existential_1(v12, v13);
  (*(void (**)(uint64_t, unint64_t, uint64_t))(v10 + 136))(v8, v9, v10);
  return __swift_destroy_boxed_opaque_existential_1Tm(v12);
}

{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  void v13[3];
  uint64_t v14[3];
  unint64_t v15;
  uint64_t v16;

  uint64_t v6 = a1[3];
  uint64_t v7 = a1[4];
  __swift_project_boxed_opaque_existential_0Tm(a1, v6);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v7 + 40))(v14, v6, v7);
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(a4 + 24))(v13, a2, a4);
  unint64_t v9 = v13[0];
  uint64_t v8 = v13[1];
  uint64_t v10 = v15;
  uint64_t v11 = v16;
  __swift_mutable_project_boxed_opaque_existential_1(v14, v15);
  (*(void (**)(uint64_t, uint64_t, unint64_t, uint64_t))(v11 + 144))(v9, v8, v10, v11);
  return __swift_destroy_boxed_opaque_existential_1Tm(v14);
}

uint64_t RawRepresentable<>.init(from:)@<X0>(uint64_t *a1@<X0>, Class *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v104 = a4;
  unint64_t v9 = type metadata accessor for Optional(0, (uint64_t)a2, a3, a4);
  uint64_t v10 = (uint64_t)*(v9 - 1);
  MEMORY[0x1F4188790](v9);
  uint64_t v12 = (char *)&v102 - v11;
  uint64_t v14 = a1[3];
  uint64_t v13 = a1[4];
  uint64x2_t v108 = a1;
  __swift_project_boxed_opaque_existential_0Tm(a1, v14);
  (*(void (**)(Swift::String *__return_ptr, uint64_t, uint64_t))(v13 + 40))(&v105, v14, v13);
  if (!v5)
  {
    int64x2_t v102 = v9;
    uint64_t v103 = a5;
    uint64_t v15 = v104;
    uint64_t v16 = v106;
    uint64_t v17 = v107;
    __swift_project_boxed_opaque_existential_0Tm(&v105, v106);
    char v18 = (*(uint64_t (**)(uint64_t, uint64_t))(v17 + 24))(v16, v17);
    __swift_destroy_boxed_opaque_existential_1Tm(&v105._countAndFlagsBits);
    LOBYTE(v105._countAndFlagsBits) = v18 & 1;
    (*(void (**)(Swift::String *, Class *, uint64_t))(v15 + 16))(&v105, a2, v15);
    uint64_t v19 = (uint64_t)*(a2 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, Class *))(v19 + 48))(v12, 1, a2) != 1)
    {
      (*(void (**)(uint64_t, char *, Class *))(v19 + 32))(v103, v12, a2);
      return __swift_destroy_boxed_opaque_existential_1Tm(v108);
    }
    (*(void (**)(char *, Class *))(v10 + 8))(v12, v102);
    swift_allocError((uint64_t)&type metadata for DecodingError, (uint64_t)&protocol witness table for DecodingError, 0, 0);
    uint64_t v21 = v20;
    uint64_t v22 = v108[3];
    uint64_t v23 = v108[4];
    __swift_project_boxed_opaque_existential_0Tm(v108, v22);
    uint64_t v104 = (*(uint64_t (**)(uint64_t, uint64_t))(v23 + 8))(v22, v23);
    uint64_t v24 = specialized static String._createEmpty(withInitialCapacity:)(45);
    uint64_t v26 = v25;
    v105._uint64_t countAndFlagsBits = v24;
    v105._unint64_t object = (void *)v25;
    uint64_t v27 = HIBYTE(v25) & 0xF;
    if ((v25 & 0x2000000000000000) == 0) {
      uint64_t v27 = v24 & 0xFFFFFFFFFFFFLL;
    }
    if (v27 || (v24 & ~v25 & 0x2000000000000000) != 0)
    {
      if ((v25 & 0x2000000000000000) != 0
        && (0x80000001816DD670 & 0x2000000000000000) != 0
        && (unint64_t v28 = specialized _SmallString.init(_:appending:)(v24, v25, 0xD000000000000012, 0x80000001816DD670 | 0x8000000000000000), (v30 & 1) == 0))
      {
        uint64_t v31 = v28;
        uint64_t v32 = v29;
        swift_bridgeObjectRelease(v26);
        swift_bridgeObjectRelease(0x80000001816DD670 | 0x8000000000000000);
        v105._uint64_t countAndFlagsBits = v31;
        v105._unint64_t object = v32;
      }
      else
      {
        if ((0x80000001816DD670 & 0x2000000000000000) != 0) {
          unint64_t v34 = (0x80000001816DD670 >> 56) & 0xF;
        }
        else {
          unint64_t v34 = 18;
        }
        _StringGuts.append(_:)(0xD000000000000012, 0x80000001816DD670 | 0x8000000000000000, 0, v34);
        swift_bridgeObjectRelease(0x80000001816DD670 | 0x8000000000000000);
      }
    }
    else
    {
      swift_bridgeObjectRelease(v25);
      v105._uint64_t countAndFlagsBits = 0xD000000000000012;
      v105._unint64_t object = (void *)(0x80000001816DD670 | 0x8000000000000000);
    }
    TypeName = (uint64_t *)swift_getTypeName(a2, 0);
    if (v36 < 0) {
      goto LABEL_102;
    }
    unint64_t v37 = (uint8x16_t *)TypeName;
    int64_t v38 = v36;
    int64_t v39 = validateUTF8(_:)(TypeName, v36);
    if (v41) {
      unint64_t v42 = repairUTF8(_:firstKnownBrokenRange:)(v37->i8, v38, v39, v40);
    }
    else {
      unint64_t v42 = specialized static String._uncheckedFromUTF8(_:isASCII:)(v37, v38, v39 & 1);
    }
    uint64_t v44 = v42;
    unint64_t v45 = v43;
    unint64_t object = v105._object;
    unint64_t v47 = ((unint64_t)v105._object >> 56) & 0xF;
    if (((uint64_t)v105._object & 0x2000000000000000) == 0) {
      unint64_t v47 = v105._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
    }
    if (!v47 && (v105._countAndFlagsBits & ~(uint64_t)v105._object & 0x2000000000000000) == 0)
    {
      swift_bridgeObjectRelease((uint64_t)v105._object);
      v105._uint64_t countAndFlagsBits = v44;
      v105._unint64_t object = (void *)v45;
LABEL_33:
      Swift::String v54 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(" from invalid ", 0xEuLL, 1);
      uint64_t v55 = HIBYTE(v45) & 0xF;
      if ((v45 & 0x2000000000000000) == 0) {
        uint64_t v55 = v44 & 0xFFFFFFFFFFFFLL;
      }
      if (!v55 && (v44 & ~v45 & 0x2000000000000000) == 0)
      {
        swift_bridgeObjectRelease(v45);
        Swift::String v105 = v54;
LABEL_46:
        uint64_t v62 = (uint64_t *)swift_getTypeName((Class *)&type metadata for Bool, 0);
        if ((v63 & 0x8000000000000000) == 0)
        {
          unint64_t v64 = (uint8x16_t *)v62;
          int64_t v65 = v63;
          int64_t v66 = validateUTF8(_:)(v62, v63);
          if (v68) {
            unint64_t v69 = repairUTF8(_:firstKnownBrokenRange:)(v64->i8, v65, v66, v67);
          }
          else {
            unint64_t v69 = specialized static String._uncheckedFromUTF8(_:isASCII:)(v64, v65, v66 & 1);
          }
          uint64_t v71 = v69;
          unint64_t v72 = v70;
          uint64_t v73 = v105._object;
          unint64_t v74 = ((unint64_t)v105._object >> 56) & 0xF;
          if (((uint64_t)v105._object & 0x2000000000000000) == 0) {
            unint64_t v74 = v105._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
          }
          if (!v74 && (v105._countAndFlagsBits & ~(uint64_t)v105._object & 0x2000000000000000) == 0)
          {
            swift_bridgeObjectRelease((uint64_t)v105._object);
            v105._uint64_t countAndFlagsBits = v71;
            v105._unint64_t object = (void *)v72;
            goto LABEL_63;
          }
          if (((uint64_t)v105._object & 0x2000000000000000) != 0)
          {
            if ((v70 & 0x2000000000000000) != 0)
            {
              unint64_t v76 = specialized _SmallString.init(_:appending:)(v105._countAndFlagsBits, (unint64_t)v105._object, v69, v70);
              if ((v78 & 1) == 0)
              {
                uint64_t v79 = v76;
                uint64_t v80 = v77;
                swift_bridgeObjectRelease((uint64_t)v73);
                swift_bridgeObjectRelease(v72);
                v105._uint64_t countAndFlagsBits = v79;
                v105._unint64_t object = v80;
                unint64_t v72 = (unint64_t)v80;
                uint64_t v71 = v79;
LABEL_63:
                uint64_t v81 = HIBYTE(v72) & 0xF;
                if ((v72 & 0x2000000000000000) == 0) {
                  uint64_t v81 = v71 & 0xFFFFFFFFFFFFLL;
                }
                if (v81 || (v71 & ~v72 & 0x2000000000000000) != 0)
                {
                  if ((v72 & 0x2000000000000000) == 0
                    || (unint64_t v82 = specialized _SmallString.init(_:appending:)(v71, v72, 0x2065756C617620uLL, 0xE700000000000000), (v84 & 1) != 0))
                  {
                    _StringGuts.append(_:)(0x2065756C617620, 0xE700000000000000, 0, 7);
                    swift_bridgeObjectRelease(0xE700000000000000);
                  }
                  else
                  {
                    uint64_t v85 = v82;
                    char v86 = v83;
                    swift_bridgeObjectRelease(v72);
                    swift_bridgeObjectRelease(0xE700000000000000);
                    v105._uint64_t countAndFlagsBits = v85;
                    v105._unint64_t object = v86;
                  }
                }
                else
                {
                  swift_bridgeObjectRelease(v72);
                  v105._uint64_t countAndFlagsBits = 0x2065756C617620;
                  v105._unint64_t object = (void *)0xE700000000000000;
                }
                if (v18) {
                  uint64_t countAndFlagsBits = 1702195828;
                }
                else {
                  uint64_t countAndFlagsBits = 0x65736C6166;
                }
                if (v18) {
                  unint64_t v88 = 0xE400000000000000;
                }
                else {
                  unint64_t v88 = 0xE500000000000000;
                }
                unint64_t v89 = v105._object;
                unint64_t v90 = ((unint64_t)v105._object >> 56) & 0xF;
                if (((uint64_t)v105._object & 0x2000000000000000) == 0) {
                  unint64_t v90 = v105._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
                }
                if (v90 || (v105._countAndFlagsBits & ~(uint64_t)v105._object & 0x2000000000000000) != 0)
                {
                  if (((uint64_t)v105._object & 0x2000000000000000) == 0
                    || (unint64_t v91 = specialized _SmallString.init(_:appending:)(v105._countAndFlagsBits, (unint64_t)v105._object, countAndFlagsBits, v88), (v93 & 1) != 0))
                  {
                    _StringGuts.append(_:)(countAndFlagsBits, v88, 0, HIBYTE(v88) & 5);
                    swift_bridgeObjectRelease(v88);
                    uint64_t countAndFlagsBits = v105._countAndFlagsBits;
                    unint64_t v88 = (unint64_t)v105._object;
                  }
                  else
                  {
                    uint64_t v94 = v91;
                    int64x2_t v95 = v92;
                    swift_bridgeObjectRelease((uint64_t)v89);
                    swift_bridgeObjectRelease(v88);
                    v105._uint64_t countAndFlagsBits = v94;
                    v105._unint64_t object = v95;
                    unint64_t v88 = (unint64_t)v95;
                    uint64_t countAndFlagsBits = v94;
                  }
                }
                else
                {
                  swift_bridgeObjectRelease((uint64_t)v105._object);
                  v105._uint64_t countAndFlagsBits = countAndFlagsBits;
                  v105._unint64_t object = (void *)v88;
                }
                uint64_t v96 = HIBYTE(v88) & 0xF;
                if ((v88 & 0x2000000000000000) == 0) {
                  uint64_t v96 = countAndFlagsBits & 0xFFFFFFFFFFFFLL;
                }
                if (v96 || (countAndFlagsBits & ~v88 & 0x2000000000000000) != 0)
                {
                  if ((v88 & 0x2000000000000000) == 0
                    || (unint64_t v97 = specialized _SmallString.init(_:appending:)(countAndFlagsBits, v88, 0, 0xE000000000000000), (v99 & 1) != 0))
                  {
                    _StringGuts.append(_:)(0, 0xE000000000000000, 0, 0);
                    swift_bridgeObjectRelease(0xE000000000000000);
                    uint64_t v100 = v105._countAndFlagsBits;
                    unint64_t v101 = v105._object;
                  }
                  else
                  {
                    uint64_t v100 = v97;
                    unint64_t v101 = v98;
                    swift_bridgeObjectRelease(v88);
                    swift_bridgeObjectRelease(0xE000000000000000);
                  }
                }
                else
                {
                  swift_bridgeObjectRelease(v88);
                  uint64_t v100 = 0;
                  unint64_t v101 = (void *)0xE000000000000000;
                }
                *(void *)uint64_t v21 = v104;
                *(void *)(v21 + 8) = v100;
                *(void *)(v21 + 16) = v101;
                *(void *)(v21 + 24) = 0;
                *(unsigned char *)(v21 + 72) = 3;
                swift_willThrow();
                return __swift_destroy_boxed_opaque_existential_1Tm(v108);
              }
              goto LABEL_61;
            }
          }
          else if ((v70 & 0x2000000000000000) != 0)
          {
LABEL_61:
            uint64_t v75 = HIBYTE(v72) & 0xF;
            goto LABEL_62;
          }
          uint64_t v75 = v69 & 0xFFFFFFFFFFFFLL;
LABEL_62:
          _StringGuts.append(_:)(v71, v72, 0, v75);
          swift_bridgeObjectRelease(v72);
          uint64_t v71 = v105._countAndFlagsBits;
          unint64_t v72 = (unint64_t)v105._object;
          goto LABEL_63;
        }
LABEL_102:
        _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeBufferPointer with negative count", 39, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x53FuLL, 0);
      }
      if ((v45 & 0x2000000000000000) != 0)
      {
        if (((uint64_t)v54._object & 0x2000000000000000) != 0)
        {
          unint64_t v57 = specialized _SmallString.init(_:appending:)(v44, v45, v54._countAndFlagsBits, (unint64_t)v54._object);
          if ((v59 & 1) == 0)
          {
            uint64_t v60 = v57;
            uint64_t v61 = v58;
            swift_bridgeObjectRelease(v45);
            swift_bridgeObjectRelease((uint64_t)v54._object);
            v105._uint64_t countAndFlagsBits = v60;
            v105._unint64_t object = v61;
            goto LABEL_46;
          }
          goto LABEL_44;
        }
      }
      else if (((uint64_t)v54._object & 0x2000000000000000) != 0)
      {
LABEL_44:
        uint64_t v56 = ((unint64_t)v54._object >> 56) & 0xF;
        goto LABEL_45;
      }
      uint64_t v56 = v54._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
LABEL_45:
      _StringGuts.append(_:)(v54._countAndFlagsBits, (unint64_t)v54._object, 0, v56);
      swift_bridgeObjectRelease((uint64_t)v54._object);
      goto LABEL_46;
    }
    if (((uint64_t)v105._object & 0x2000000000000000) != 0)
    {
      if ((v43 & 0x2000000000000000) != 0)
      {
        unint64_t v49 = specialized _SmallString.init(_:appending:)(v105._countAndFlagsBits, (unint64_t)v105._object, v42, v43);
        if ((v51 & 1) == 0)
        {
          uint64_t v52 = v49;
          unsigned int v53 = v50;
          swift_bridgeObjectRelease((uint64_t)object);
          swift_bridgeObjectRelease(v45);
          v105._uint64_t countAndFlagsBits = v52;
          v105._unint64_t object = v53;
          unint64_t v45 = (unint64_t)v53;
          uint64_t v44 = v52;
          goto LABEL_33;
        }
        goto LABEL_31;
      }
    }
    else if ((v43 & 0x2000000000000000) != 0)
    {
LABEL_31:
      uint64_t v48 = HIBYTE(v45) & 0xF;
      goto LABEL_32;
    }
    uint64_t v48 = v42 & 0xFFFFFFFFFFFFLL;
LABEL_32:
    _StringGuts.append(_:)(v44, v45, 0, v48);
    swift_bridgeObjectRelease(v45);
    uint64_t v44 = v105._countAndFlagsBits;
    unint64_t v45 = (unint64_t)v105._object;
    goto LABEL_33;
  }
  return __swift_destroy_boxed_opaque_existential_1Tm(v108);
}

{
  uint64_t v5;
  Class *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  void *v30;
  char v31;
  uint64_t v32;
  void *v33;
  unint64_t v35;
  uint64_t *TypeName;
  uint64_t v37;
  uint8x16_t *v38;
  int64_t v39;
  int64_t v40;
  int64_t v41;
  char v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  void *object;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  void *v51;
  char v52;
  uint64_t v53;
  void *v54;
  Swift::String v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  void *v59;
  char v60;
  uint64_t v61;
  void *v62;
  uint64_t *v63;
  uint64_t v64;
  uint8x16_t *v65;
  int64_t v66;
  int64_t v67;
  int64_t v68;
  char v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  void *v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  void *v78;
  char v79;
  uint64_t v80;
  void *v81;
  uint64_t countAndFlagsBits;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;
  char v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  void *v94;
  char v95;
  uint64_t v96;
  void *v97;
  uint64_t v98;
  unint64_t v99;
  void *v100;
  char v101;
  uint64_t v102;
  void *v103;
  Class *v104;
  uint64_t v105;
  uint64_t v106;
  Swift::String v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t *v110;

  uint64_t v106 = a4;
  unint64_t v9 = type metadata accessor for Optional(0, (uint64_t)a2, a3, a4);
  uint64_t v10 = (uint64_t)*(v9 - 1);
  MEMORY[0x1F4188790](v9);
  uint64_t v12 = (char *)&v104 - v11;
  uint64_t v14 = a1[3];
  uint64_t v13 = a1[4];
  uint64x2_t v110 = a1;
  __swift_project_boxed_opaque_existential_0Tm(a1, v14);
  (*(void (**)(Swift::String *__return_ptr, uint64_t, uint64_t))(v13 + 40))(&v107, v14, v13);
  if (!v5)
  {
    uint64_t v104 = v9;
    Swift::String v105 = a5;
    uint64_t v15 = v106;
    uint64_t v16 = v108;
    uint64_t v17 = v109;
    __swift_project_boxed_opaque_existential_0Tm(&v107, v108);
    char v18 = (*(uint64_t (**)(uint64_t, uint64_t))(v17 + 56))(v16, v17);
    __swift_destroy_boxed_opaque_existential_1Tm(&v107._countAndFlagsBits);
    v107._uint64_t countAndFlagsBits = v18;
    (*(void (**)(Swift::String *, Class *, uint64_t))(v15 + 16))(&v107, a2, v15);
    uint64_t v19 = (uint64_t)*(a2 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, Class *))(v19 + 48))(v12, 1, a2) != 1)
    {
      (*(void (**)(uint64_t, char *, Class *))(v19 + 32))(v105, v12, a2);
      return __swift_destroy_boxed_opaque_existential_1Tm(v110);
    }
    (*(void (**)(char *, Class *))(v10 + 8))(v12, v104);
    swift_allocError((uint64_t)&type metadata for DecodingError, (uint64_t)&protocol witness table for DecodingError, 0, 0);
    uint64_t v21 = v20;
    uint64_t v22 = v110[3];
    uint64_t v23 = v110[4];
    __swift_project_boxed_opaque_existential_0Tm(v110, v22);
    uint64_t v24 = (*(uint64_t (**)(uint64_t, uint64_t))(v23 + 8))(v22, v23);
    unint64_t v25 = specialized static String._createEmpty(withInitialCapacity:)(45);
    uint64_t v27 = v26;
    v107._uint64_t countAndFlagsBits = v25;
    v107._unint64_t object = (void *)v26;
    unint64_t v28 = HIBYTE(v26) & 0xF;
    if ((v26 & 0x2000000000000000) == 0) {
      unint64_t v28 = v25 & 0xFFFFFFFFFFFFLL;
    }
    if (v28 || (v25 & ~v26 & 0x2000000000000000) != 0)
    {
      if ((v26 & 0x2000000000000000) != 0
        && (0x80000001816DD670 & 0x2000000000000000) != 0
        && (BOOL v29 = specialized _SmallString.init(_:appending:)(v25, v26, 0xD000000000000012, 0x80000001816DD670 | 0x8000000000000000), (v31 & 1) == 0))
      {
        uint64_t v32 = v29;
        uint64_t v33 = v30;
        swift_bridgeObjectRelease(v27);
        swift_bridgeObjectRelease(0x80000001816DD670 | 0x8000000000000000);
        v107._uint64_t countAndFlagsBits = v32;
        v107._unint64_t object = v33;
      }
      else
      {
        if ((0x80000001816DD670 & 0x2000000000000000) != 0) {
          unint64_t v35 = (0x80000001816DD670 >> 56) & 0xF;
        }
        else {
          unint64_t v35 = 18;
        }
        _StringGuts.append(_:)(0xD000000000000012, 0x80000001816DD670 | 0x8000000000000000, 0, v35);
        swift_bridgeObjectRelease(0x80000001816DD670 | 0x8000000000000000);
      }
    }
    else
    {
      swift_bridgeObjectRelease(v26);
      v107._uint64_t countAndFlagsBits = 0xD000000000000012;
      v107._unint64_t object = (void *)(0x80000001816DD670 | 0x8000000000000000);
    }
    TypeName = (uint64_t *)swift_getTypeName(a2, 0);
    if (v37 < 0) {
      goto LABEL_102;
    }
    int64_t v38 = (uint8x16_t *)TypeName;
    int64_t v39 = v37;
    int64_t v40 = validateUTF8(_:)(TypeName, v37);
    if (v42) {
      unint64_t v43 = repairUTF8(_:firstKnownBrokenRange:)(v38->i8, v39, v40, v41);
    }
    else {
      unint64_t v43 = specialized static String._uncheckedFromUTF8(_:isASCII:)(v38, v39, v40 & 1);
    }
    unint64_t v45 = v43;
    uint64_t v46 = v44;
    unint64_t object = v107._object;
    uint64_t v48 = ((unint64_t)v107._object >> 56) & 0xF;
    if (((uint64_t)v107._object & 0x2000000000000000) == 0) {
      uint64_t v48 = v107._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
    }
    if (!v48 && (v107._countAndFlagsBits & ~(uint64_t)v107._object & 0x2000000000000000) == 0)
    {
      swift_bridgeObjectRelease((uint64_t)v107._object);
      v107._uint64_t countAndFlagsBits = v45;
      v107._unint64_t object = (void *)v46;
LABEL_33:
      uint64_t v55 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(" from invalid ", 0xEuLL, 1);
      uint64_t v56 = HIBYTE(v46) & 0xF;
      if ((v46 & 0x2000000000000000) == 0) {
        uint64_t v56 = v45 & 0xFFFFFFFFFFFFLL;
      }
      if (!v56 && (v45 & ~v46 & 0x2000000000000000) == 0)
      {
        swift_bridgeObjectRelease(v46);
        uint64_t v107 = v55;
LABEL_46:
        uint64_t v63 = (uint64_t *)swift_getTypeName((Class *)&type metadata for Int, 0);
        if ((v64 & 0x8000000000000000) == 0)
        {
          int64_t v65 = (uint8x16_t *)v63;
          int64_t v66 = v64;
          int64_t v67 = validateUTF8(_:)(v63, v64);
          if (v69) {
            unint64_t v70 = repairUTF8(_:firstKnownBrokenRange:)(v65->i8, v66, v67, v68);
          }
          else {
            unint64_t v70 = specialized static String._uncheckedFromUTF8(_:isASCII:)(v65, v66, v67 & 1);
          }
          unint64_t v72 = v70;
          uint64_t v73 = v71;
          unint64_t v74 = v107._object;
          uint64_t v75 = ((unint64_t)v107._object >> 56) & 0xF;
          if (((uint64_t)v107._object & 0x2000000000000000) == 0) {
            uint64_t v75 = v107._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
          }
          if (!v75 && (v107._countAndFlagsBits & ~(uint64_t)v107._object & 0x2000000000000000) == 0)
          {
            swift_bridgeObjectRelease((uint64_t)v107._object);
            v107._uint64_t countAndFlagsBits = v72;
            v107._unint64_t object = (void *)v73;
LABEL_63:
            uint64_t countAndFlagsBits = 0x2065756C617620;
            uint64_t v83 = HIBYTE(v73) & 0xF;
            if ((v73 & 0x2000000000000000) == 0) {
              uint64_t v83 = v72 & 0xFFFFFFFFFFFFLL;
            }
            if (v83 || (v72 & ~v73 & 0x2000000000000000) != 0)
            {
              if ((v73 & 0x2000000000000000) == 0
                || (char v84 = specialized _SmallString.init(_:appending:)(v72, v73, 0x2065756C617620uLL, 0xE700000000000000), (v86 & 1) != 0))
              {
                _StringGuts.append(_:)(0x2065756C617620, 0xE700000000000000, 0, 7);
                swift_bridgeObjectRelease(0xE700000000000000);
                uint64_t countAndFlagsBits = v107._countAndFlagsBits;
                uint64_t v87 = (unint64_t)v107._object;
                goto LABEL_77;
              }
              uint64_t countAndFlagsBits = v84;
              uint64_t v87 = v85;
              swift_bridgeObjectRelease(v73);
              swift_bridgeObjectRelease(0xE700000000000000);
            }
            else
            {
              swift_bridgeObjectRelease(v73);
              uint64_t v87 = 0xE700000000000000;
            }
            v107._uint64_t countAndFlagsBits = countAndFlagsBits;
            v107._unint64_t object = (void *)v87;
LABEL_77:
            unint64_t v89 = _int64ToString(_:radix:uppercase:)(v18, 10, 0, (uint64_t (*)(long long *, uint64_t, uint64_t, uint64_t, void))swift_int64ToString);
            unint64_t v90 = v88;
            unint64_t v91 = HIBYTE(v87) & 0xF;
            if ((v87 & 0x2000000000000000) == 0) {
              unint64_t v91 = countAndFlagsBits & 0xFFFFFFFFFFFFLL;
            }
            if (!v91 && (countAndFlagsBits & ~v87 & 0x2000000000000000) == 0)
            {
              swift_bridgeObjectRelease(v87);
              v107._uint64_t countAndFlagsBits = v89;
              v107._unint64_t object = (void *)v90;
              goto LABEL_90;
            }
            if ((v87 & 0x2000000000000000) != 0)
            {
              if ((v88 & 0x2000000000000000) != 0)
              {
                char v93 = specialized _SmallString.init(_:appending:)(countAndFlagsBits, v87, v89, v88);
                if ((v95 & 1) == 0)
                {
                  uint64_t v96 = v93;
                  unint64_t v97 = v94;
                  swift_bridgeObjectRelease(v87);
                  swift_bridgeObjectRelease(v90);
                  v107._uint64_t countAndFlagsBits = v96;
                  v107._unint64_t object = v97;
                  unint64_t v90 = (unint64_t)v97;
                  unint64_t v89 = v96;
LABEL_90:
                  int64x2_t v98 = HIBYTE(v90) & 0xF;
                  if ((v90 & 0x2000000000000000) == 0) {
                    int64x2_t v98 = v89 & 0xFFFFFFFFFFFFLL;
                  }
                  if (v98 || (v89 & ~v90 & 0x2000000000000000) != 0)
                  {
                    if ((v90 & 0x2000000000000000) == 0
                      || (char v99 = specialized _SmallString.init(_:appending:)(v89, v90, 0, 0xE000000000000000),
                          (v101 & 1) != 0))
                    {
                      _StringGuts.append(_:)(0, 0xE000000000000000, 0, 0);
                      swift_bridgeObjectRelease(0xE000000000000000);
                      int64x2_t v102 = v107._countAndFlagsBits;
                      uint64_t v103 = v107._object;
                    }
                    else
                    {
                      int64x2_t v102 = v99;
                      uint64_t v103 = v100;
                      swift_bridgeObjectRelease(v90);
                      swift_bridgeObjectRelease(0xE000000000000000);
                    }
                  }
                  else
                  {
                    swift_bridgeObjectRelease(v90);
                    int64x2_t v102 = 0;
                    uint64_t v103 = (void *)0xE000000000000000;
                  }
                  *(void *)uint64_t v21 = v24;
                  *(void *)(v21 + 8) = v102;
                  *(void *)(v21 + 16) = v103;
                  *(void *)(v21 + 24) = 0;
                  *(unsigned char *)(v21 + 72) = 3;
                  swift_willThrow();
                  return __swift_destroy_boxed_opaque_existential_1Tm(v110);
                }
                goto LABEL_88;
              }
            }
            else if ((v88 & 0x2000000000000000) != 0)
            {
LABEL_88:
              int64x2_t v92 = HIBYTE(v90) & 0xF;
              goto LABEL_89;
            }
            int64x2_t v92 = v89 & 0xFFFFFFFFFFFFLL;
LABEL_89:
            _StringGuts.append(_:)(v89, v90, 0, v92);
            swift_bridgeObjectRelease(v90);
            unint64_t v89 = v107._countAndFlagsBits;
            unint64_t v90 = (unint64_t)v107._object;
            goto LABEL_90;
          }
          if (((uint64_t)v107._object & 0x2000000000000000) != 0)
          {
            if ((v71 & 0x2000000000000000) != 0)
            {
              uint64_t v77 = specialized _SmallString.init(_:appending:)(v107._countAndFlagsBits, (unint64_t)v107._object, v70, v71);
              if ((v79 & 1) == 0)
              {
                uint64_t v80 = v77;
                uint64_t v81 = v78;
                swift_bridgeObjectRelease((uint64_t)v74);
                swift_bridgeObjectRelease(v73);
                v107._uint64_t countAndFlagsBits = v80;
                v107._unint64_t object = v81;
                uint64_t v73 = (unint64_t)v81;
                unint64_t v72 = v80;
                goto LABEL_63;
              }
              goto LABEL_61;
            }
          }
          else if ((v71 & 0x2000000000000000) != 0)
          {
LABEL_61:
            unint64_t v76 = HIBYTE(v73) & 0xF;
            goto LABEL_62;
          }
          unint64_t v76 = v70 & 0xFFFFFFFFFFFFLL;
LABEL_62:
          _StringGuts.append(_:)(v72, v73, 0, v76);
          swift_bridgeObjectRelease(v73);
          unint64_t v72 = v107._countAndFlagsBits;
          uint64_t v73 = (unint64_t)v107._object;
          goto LABEL_63;
        }
LABEL_102:
        _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeBufferPointer with negative count", 39, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x53FuLL, 0);
      }
      if ((v46 & 0x2000000000000000) != 0)
      {
        if (((uint64_t)v55._object & 0x2000000000000000) != 0)
        {
          uint64_t v58 = specialized _SmallString.init(_:appending:)(v45, v46, v55._countAndFlagsBits, (unint64_t)v55._object);
          if ((v60 & 1) == 0)
          {
            uint64_t v61 = v58;
            uint64_t v62 = v59;
            swift_bridgeObjectRelease(v46);
            swift_bridgeObjectRelease((uint64_t)v55._object);
            v107._uint64_t countAndFlagsBits = v61;
            v107._unint64_t object = v62;
            goto LABEL_46;
          }
          goto LABEL_44;
        }
      }
      else if (((uint64_t)v55._object & 0x2000000000000000) != 0)
      {
LABEL_44:
        unint64_t v57 = ((unint64_t)v55._object >> 56) & 0xF;
        goto LABEL_45;
      }
      unint64_t v57 = v55._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
LABEL_45:
      _StringGuts.append(_:)(v55._countAndFlagsBits, (unint64_t)v55._object, 0, v57);
      swift_bridgeObjectRelease((uint64_t)v55._object);
      goto LABEL_46;
    }
    if (((uint64_t)v107._object & 0x2000000000000000) != 0)
    {
      if ((v44 & 0x2000000000000000) != 0)
      {
        uint64_t v50 = specialized _SmallString.init(_:appending:)(v107._countAndFlagsBits, (unint64_t)v107._object, v43, v44);
        if ((v52 & 1) == 0)
        {
          unsigned int v53 = v50;
          Swift::String v54 = v51;
          swift_bridgeObjectRelease((uint64_t)object);
          swift_bridgeObjectRelease(v46);
          v107._uint64_t countAndFlagsBits = v53;
          v107._unint64_t object = v54;
          uint64_t v46 = (unint64_t)v54;
          unint64_t v45 = v53;
          goto LABEL_33;
        }
        goto LABEL_31;
      }
    }
    else if ((v44 & 0x2000000000000000) != 0)
    {
LABEL_31:
      unint64_t v49 = HIBYTE(v46) & 0xF;
      goto LABEL_32;
    }
    unint64_t v49 = v43 & 0xFFFFFFFFFFFFLL;
LABEL_32:
    _StringGuts.append(_:)(v45, v46, 0, v49);
    swift_bridgeObjectRelease(v46);
    unint64_t v45 = v107._countAndFlagsBits;
    uint64_t v46 = (unint64_t)v107._object;
    goto LABEL_33;
  }
  return __swift_destroy_boxed_opaque_existential_1Tm(v110);
}

{
  uint64_t v5;
  Class *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  void *v30;
  char v31;
  uint64_t v32;
  void *v33;
  unint64_t v35;
  uint64_t *TypeName;
  uint64_t v37;
  uint8x16_t *v38;
  int64_t v39;
  int64_t v40;
  int64_t v41;
  char v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  void *object;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  void *v51;
  char v52;
  uint64_t v53;
  void *v54;
  Swift::String v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  void *v59;
  char v60;
  uint64_t v61;
  void *v62;
  uint64_t *v63;
  uint64_t v64;
  uint8x16_t *v65;
  int64_t v66;
  int64_t v67;
  int64_t v68;
  char v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  void *v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  void *v78;
  char v79;
  uint64_t v80;
  void *v81;
  uint64_t countAndFlagsBits;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;
  char v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  void *v94;
  char v95;
  uint64_t v96;
  void *v97;
  uint64_t v98;
  unint64_t v99;
  void *v100;
  char v101;
  uint64_t v102;
  void *v103;
  Class *v104;
  uint64_t v105;
  uint64_t v106;
  Swift::String v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t *v110;

  uint64_t v106 = a4;
  unint64_t v9 = type metadata accessor for Optional(0, (uint64_t)a2, a3, a4);
  uint64_t v10 = (uint64_t)*(v9 - 1);
  MEMORY[0x1F4188790](v9);
  uint64_t v12 = (char *)&v104 - v11;
  uint64_t v14 = a1[3];
  uint64_t v13 = a1[4];
  uint64x2_t v110 = a1;
  __swift_project_boxed_opaque_existential_0Tm(a1, v14);
  (*(void (**)(Swift::String *__return_ptr, uint64_t, uint64_t))(v13 + 40))(&v107, v14, v13);
  if (!v5)
  {
    uint64_t v104 = v9;
    Swift::String v105 = a5;
    uint64_t v15 = v106;
    uint64_t v16 = v108;
    uint64_t v17 = v109;
    __swift_project_boxed_opaque_existential_0Tm(&v107, v108);
    char v18 = (*(uint64_t (**)(uint64_t, uint64_t))(v17 + 64))(v16, v17);
    __swift_destroy_boxed_opaque_existential_1Tm(&v107._countAndFlagsBits);
    LOBYTE(v107._countAndFlagsBits) = v18;
    (*(void (**)(Swift::String *, Class *, uint64_t))(v15 + 16))(&v107, a2, v15);
    uint64_t v19 = (uint64_t)*(a2 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, Class *))(v19 + 48))(v12, 1, a2) != 1)
    {
      (*(void (**)(uint64_t, char *, Class *))(v19 + 32))(v105, v12, a2);
      return __swift_destroy_boxed_opaque_existential_1Tm(v110);
    }
    (*(void (**)(char *, Class *))(v10 + 8))(v12, v104);
    swift_allocError((uint64_t)&type metadata for DecodingError, (uint64_t)&protocol witness table for DecodingError, 0, 0);
    uint64_t v21 = v20;
    uint64_t v22 = v110[3];
    uint64_t v23 = v110[4];
    __swift_project_boxed_opaque_existential_0Tm(v110, v22);
    uint64_t v24 = (*(uint64_t (**)(uint64_t, uint64_t))(v23 + 8))(v22, v23);
    unint64_t v25 = specialized static String._createEmpty(withInitialCapacity:)(45);
    uint64_t v27 = v26;
    v107._uint64_t countAndFlagsBits = v25;
    v107._unint64_t object = (void *)v26;
    unint64_t v28 = HIBYTE(v26) & 0xF;
    if ((v26 & 0x2000000000000000) == 0) {
      unint64_t v28 = v25 & 0xFFFFFFFFFFFFLL;
    }
    if (v28 || (v25 & ~v26 & 0x2000000000000000) != 0)
    {
      if ((v26 & 0x2000000000000000) != 0
        && (0x80000001816DD670 & 0x2000000000000000) != 0
        && (BOOL v29 = specialized _SmallString.init(_:appending:)(v25, v26, 0xD000000000000012, 0x80000001816DD670 | 0x8000000000000000), (v31 & 1) == 0))
      {
        uint64_t v32 = v29;
        uint64_t v33 = v30;
        swift_bridgeObjectRelease(v27);
        swift_bridgeObjectRelease(0x80000001816DD670 | 0x8000000000000000);
        v107._uint64_t countAndFlagsBits = v32;
        v107._unint64_t object = v33;
      }
      else
      {
        if ((0x80000001816DD670 & 0x2000000000000000) != 0) {
          unint64_t v35 = (0x80000001816DD670 >> 56) & 0xF;
        }
        else {
          unint64_t v35 = 18;
        }
        _StringGuts.append(_:)(0xD000000000000012, 0x80000001816DD670 | 0x8000000000000000, 0, v35);
        swift_bridgeObjectRelease(0x80000001816DD670 | 0x8000000000000000);
      }
    }
    else
    {
      swift_bridgeObjectRelease(v26);
      v107._uint64_t countAndFlagsBits = 0xD000000000000012;
      v107._unint64_t object = (void *)(0x80000001816DD670 | 0x8000000000000000);
    }
    TypeName = (uint64_t *)swift_getTypeName(a2, 0);
    if (v37 < 0) {
      goto LABEL_102;
    }
    int64_t v38 = (uint8x16_t *)TypeName;
    int64_t v39 = v37;
    int64_t v40 = validateUTF8(_:)(TypeName, v37);
    if (v42) {
      unint64_t v43 = repairUTF8(_:firstKnownBrokenRange:)(v38->i8, v39, v40, v41);
    }
    else {
      unint64_t v43 = specialized static String._uncheckedFromUTF8(_:isASCII:)(v38, v39, v40 & 1);
    }
    unint64_t v45 = v43;
    uint64_t v46 = v44;
    unint64_t object = v107._object;
    uint64_t v48 = ((unint64_t)v107._object >> 56) & 0xF;
    if (((uint64_t)v107._object & 0x2000000000000000) == 0) {
      uint64_t v48 = v107._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
    }
    if (!v48 && (v107._countAndFlagsBits & ~(uint64_t)v107._object & 0x2000000000000000) == 0)
    {
      swift_bridgeObjectRelease((uint64_t)v107._object);
      v107._uint64_t countAndFlagsBits = v45;
      v107._unint64_t object = (void *)v46;
LABEL_33:
      uint64_t v55 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(" from invalid ", 0xEuLL, 1);
      uint64_t v56 = HIBYTE(v46) & 0xF;
      if ((v46 & 0x2000000000000000) == 0) {
        uint64_t v56 = v45 & 0xFFFFFFFFFFFFLL;
      }
      if (!v56 && (v45 & ~v46 & 0x2000000000000000) == 0)
      {
        swift_bridgeObjectRelease(v46);
        uint64_t v107 = v55;
LABEL_46:
        uint64_t v63 = (uint64_t *)swift_getTypeName((Class *)&type metadata for Int8, 0);
        if ((v64 & 0x8000000000000000) == 0)
        {
          int64_t v65 = (uint8x16_t *)v63;
          int64_t v66 = v64;
          int64_t v67 = validateUTF8(_:)(v63, v64);
          if (v69) {
            unint64_t v70 = repairUTF8(_:firstKnownBrokenRange:)(v65->i8, v66, v67, v68);
          }
          else {
            unint64_t v70 = specialized static String._uncheckedFromUTF8(_:isASCII:)(v65, v66, v67 & 1);
          }
          unint64_t v72 = v70;
          uint64_t v73 = v71;
          unint64_t v74 = v107._object;
          uint64_t v75 = ((unint64_t)v107._object >> 56) & 0xF;
          if (((uint64_t)v107._object & 0x2000000000000000) == 0) {
            uint64_t v75 = v107._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
          }
          if (!v75 && (v107._countAndFlagsBits & ~(uint64_t)v107._object & 0x2000000000000000) == 0)
          {
            swift_bridgeObjectRelease((uint64_t)v107._object);
            v107._uint64_t countAndFlagsBits = v72;
            v107._unint64_t object = (void *)v73;
LABEL_63:
            uint64_t countAndFlagsBits = 0x2065756C617620;
            uint64_t v83 = HIBYTE(v73) & 0xF;
            if ((v73 & 0x2000000000000000) == 0) {
              uint64_t v83 = v72 & 0xFFFFFFFFFFFFLL;
            }
            if (v83 || (v72 & ~v73 & 0x2000000000000000) != 0)
            {
              if ((v73 & 0x2000000000000000) == 0
                || (char v84 = specialized _SmallString.init(_:appending:)(v72, v73, 0x2065756C617620uLL, 0xE700000000000000), (v86 & 1) != 0))
              {
                _StringGuts.append(_:)(0x2065756C617620, 0xE700000000000000, 0, 7);
                swift_bridgeObjectRelease(0xE700000000000000);
                uint64_t countAndFlagsBits = v107._countAndFlagsBits;
                uint64_t v87 = (unint64_t)v107._object;
                goto LABEL_77;
              }
              uint64_t countAndFlagsBits = v84;
              uint64_t v87 = v85;
              swift_bridgeObjectRelease(v73);
              swift_bridgeObjectRelease(0xE700000000000000);
            }
            else
            {
              swift_bridgeObjectRelease(v73);
              uint64_t v87 = 0xE700000000000000;
            }
            v107._uint64_t countAndFlagsBits = countAndFlagsBits;
            v107._unint64_t object = (void *)v87;
LABEL_77:
            unint64_t v89 = _int64ToString(_:radix:uppercase:)(v18, 10, 0, (uint64_t (*)(long long *, uint64_t, uint64_t, uint64_t, void))swift_int64ToString);
            unint64_t v90 = v88;
            unint64_t v91 = HIBYTE(v87) & 0xF;
            if ((v87 & 0x2000000000000000) == 0) {
              unint64_t v91 = countAndFlagsBits & 0xFFFFFFFFFFFFLL;
            }
            if (!v91 && (countAndFlagsBits & ~v87 & 0x2000000000000000) == 0)
            {
              swift_bridgeObjectRelease(v87);
              v107._uint64_t countAndFlagsBits = v89;
              v107._unint64_t object = (void *)v90;
              goto LABEL_90;
            }
            if ((v87 & 0x2000000000000000) != 0)
            {
              if ((v88 & 0x2000000000000000) != 0)
              {
                char v93 = specialized _SmallString.init(_:appending:)(countAndFlagsBits, v87, v89, v88);
                if ((v95 & 1) == 0)
                {
                  uint64_t v96 = v93;
                  unint64_t v97 = v94;
                  swift_bridgeObjectRelease(v87);
                  swift_bridgeObjectRelease(v90);
                  v107._uint64_t countAndFlagsBits = v96;
                  v107._unint64_t object = v97;
                  unint64_t v90 = (unint64_t)v97;
                  unint64_t v89 = v96;
LABEL_90:
                  int64x2_t v98 = HIBYTE(v90) & 0xF;
                  if ((v90 & 0x2000000000000000) == 0) {
                    int64x2_t v98 = v89 & 0xFFFFFFFFFFFFLL;
                  }
                  if (v98 || (v89 & ~v90 & 0x2000000000000000) != 0)
                  {
                    if ((v90 & 0x2000000000000000) == 0
                      || (char v99 = specialized _SmallString.init(_:appending:)(v89, v90, 0, 0xE000000000000000),
                          (v101 & 1) != 0))
                    {
                      _StringGuts.append(_:)(0, 0xE000000000000000, 0, 0);
                      swift_bridgeObjectRelease(0xE000000000000000);
                      int64x2_t v102 = v107._countAndFlagsBits;
                      uint64_t v103 = v107._object;
                    }
                    else
                    {
                      int64x2_t v102 = v99;
                      uint64_t v103 = v100;
                      swift_bridgeObjectRelease(v90);
                      swift_bridgeObjectRelease(0xE000000000000000);
                    }
                  }
                  else
                  {
                    swift_bridgeObjectRelease(v90);
                    int64x2_t v102 = 0;
                    uint64_t v103 = (void *)0xE000000000000000;
                  }
                  *(void *)uint64_t v21 = v24;
                  *(void *)(v21 + 8) = v102;
                  *(void *)(v21 + 16) = v103;
                  *(void *)(v21 + 24) = 0;
                  *(unsigned char *)(v21 + 72) = 3;
                  swift_willThrow();
                  return __swift_destroy_boxed_opaque_existential_1Tm(v110);
                }
                goto LABEL_88;
              }
            }
            else if ((v88 & 0x2000000000000000) != 0)
            {
LABEL_88:
              int64x2_t v92 = HIBYTE(v90) & 0xF;
              goto LABEL_89;
            }
            int64x2_t v92 = v89 & 0xFFFFFFFFFFFFLL;
LABEL_89:
            _StringGuts.append(_:)(v89, v90, 0, v92);
            swift_bridgeObjectRelease(v90);
            unint64_t v89 = v107._countAndFlagsBits;
            unint64_t v90 = (unint64_t)v107._object;
            goto LABEL_90;
          }
          if (((uint64_t)v107._object & 0x2000000000000000) != 0)
          {
            if ((v71 & 0x2000000000000000) != 0)
            {
              uint64_t v77 = specialized _SmallString.init(_:appending:)(v107._countAndFlagsBits, (unint64_t)v107._object, v70, v71);
              if ((v79 & 1) == 0)
              {
                uint64_t v80 = v77;
                uint64_t v81 = v78;
                swift_bridgeObjectRelease((uint64_t)v74);
                swift_bridgeObjectRelease(v73);
                v107._uint64_t countAndFlagsBits = v80;
                v107._unint64_t object = v81;
                uint64_t v73 = (unint64_t)v81;
                unint64_t v72 = v80;
                goto LABEL_63;
              }
              goto LABEL_61;
            }
          }
          else if ((v71 & 0x2000000000000000) != 0)
          {
LABEL_61:
            unint64_t v76 = HIBYTE(v73) & 0xF;
            goto LABEL_62;
          }
          unint64_t v76 = v70 & 0xFFFFFFFFFFFFLL;
LABEL_62:
          _StringGuts.append(_:)(v72, v73, 0, v76);
          swift_bridgeObjectRelease(v73);
          unint64_t v72 = v107._countAndFlagsBits;
          uint64_t v73 = (unint64_t)v107._object;
          goto LABEL_63;
        }
LABEL_102:
        _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeBufferPointer with negative count", 39, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x53FuLL, 0);
      }
      if ((v46 & 0x2000000000000000) != 0)
      {
        if (((uint64_t)v55._object & 0x2000000000000000) != 0)
        {
          uint64_t v58 = specialized _SmallString.init(_:appending:)(v45, v46, v55._countAndFlagsBits, (unint64_t)v55._object);
          if ((v60 & 1) == 0)
          {
            uint64_t v61 = v58;
            uint64_t v62 = v59;
            swift_bridgeObjectRelease(v46);
            swift_bridgeObjectRelease((uint64_t)v55._object);
            v107._uint64_t countAndFlagsBits = v61;
            v107._unint64_t object = v62;
            goto LABEL_46;
          }
          goto LABEL_44;
        }
      }
      else if (((uint64_t)v55._object & 0x2000000000000000) != 0)
      {
LABEL_44:
        unint64_t v57 = ((unint64_t)v55._object >> 56) & 0xF;
        goto LABEL_45;
      }
      unint64_t v57 = v55._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
LABEL_45:
      _StringGuts.append(_:)(v55._countAndFlagsBits, (unint64_t)v55._object, 0, v57);
      swift_bridgeObjectRelease((uint64_t)v55._object);
      goto LABEL_46;
    }
    if (((uint64_t)v107._object & 0x2000000000000000) != 0)
    {
      if ((v44 & 0x2000000000000000) != 0)
      {
        uint64_t v50 = specialized _SmallString.init(_:appending:)(v107._countAndFlagsBits, (unint64_t)v107._object, v43, v44);
        if ((v52 & 1) == 0)
        {
          unsigned int v53 = v50;
          Swift::String v54 = v51;
          swift_bridgeObjectRelease((uint64_t)object);
          swift_bridgeObjectRelease(v46);
          v107._uint64_t countAndFlagsBits = v53;
          v107._unint64_t object = v54;
          uint64_t v46 = (unint64_t)v54;
          unint64_t v45 = v53;
          goto LABEL_33;
        }
        goto LABEL_31;
      }
    }
    else if ((v44 & 0x2000000000000000) != 0)
    {
LABEL_31:
      unint64_t v49 = HIBYTE(v46) & 0xF;
      goto LABEL_32;
    }
    unint64_t v49 = v43 & 0xFFFFFFFFFFFFLL;
LABEL_32:
    _StringGuts.append(_:)(v45, v46, 0, v49);
    swift_bridgeObjectRelease(v46);
    unint64_t v45 = v107._countAndFlagsBits;
    uint64_t v46 = (unint64_t)v107._object;
    goto LABEL_33;
  }
  return __swift_destroy_boxed_opaque_existential_1Tm(v110);
}

{
  uint64_t v5;
  Class *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int16 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  void *v30;
  char v31;
  uint64_t v32;
  void *v33;
  unint64_t v35;
  uint64_t *TypeName;
  uint64_t v37;
  uint8x16_t *v38;
  int64_t v39;
  int64_t v40;
  int64_t v41;
  char v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  void *object;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  void *v51;
  char v52;
  uint64_t v53;
  void *v54;
  Swift::String v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  void *v59;
  char v60;
  uint64_t v61;
  void *v62;
  uint64_t *v63;
  uint64_t v64;
  uint8x16_t *v65;
  int64_t v66;
  int64_t v67;
  int64_t v68;
  char v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  void *v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  void *v78;
  char v79;
  uint64_t v80;
  void *v81;
  uint64_t countAndFlagsBits;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;
  char v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  void *v94;
  char v95;
  uint64_t v96;
  void *v97;
  uint64_t v98;
  unint64_t v99;
  void *v100;
  char v101;
  uint64_t v102;
  void *v103;
  Class *v104;
  uint64_t v105;
  uint64_t v106;
  Swift::String v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t *v110;

  uint64_t v106 = a4;
  unint64_t v9 = type metadata accessor for Optional(0, (uint64_t)a2, a3, a4);
  uint64_t v10 = (uint64_t)*(v9 - 1);
  MEMORY[0x1F4188790](v9);
  uint64_t v12 = (char *)&v104 - v11;
  uint64_t v14 = a1[3];
  uint64_t v13 = a1[4];
  uint64x2_t v110 = a1;
  __swift_project_boxed_opaque_existential_0Tm(a1, v14);
  (*(void (**)(Swift::String *__return_ptr, uint64_t, uint64_t))(v13 + 40))(&v107, v14, v13);
  if (!v5)
  {
    uint64_t v104 = v9;
    Swift::String v105 = a5;
    uint64_t v15 = v106;
    uint64_t v16 = v108;
    uint64_t v17 = v109;
    __swift_project_boxed_opaque_existential_0Tm(&v107, v108);
    char v18 = (*(uint64_t (**)(uint64_t, uint64_t))(v17 + 72))(v16, v17);
    __swift_destroy_boxed_opaque_existential_1Tm(&v107._countAndFlagsBits);
    LOWORD(v107._countAndFlagsBits) = v18;
    (*(void (**)(Swift::String *, Class *, uint64_t))(v15 + 16))(&v107, a2, v15);
    uint64_t v19 = (uint64_t)*(a2 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, Class *))(v19 + 48))(v12, 1, a2) != 1)
    {
      (*(void (**)(uint64_t, char *, Class *))(v19 + 32))(v105, v12, a2);
      return __swift_destroy_boxed_opaque_existential_1Tm(v110);
    }
    (*(void (**)(char *, Class *))(v10 + 8))(v12, v104);
    swift_allocError((uint64_t)&type metadata for DecodingError, (uint64_t)&protocol witness table for DecodingError, 0, 0);
    uint64_t v21 = v20;
    uint64_t v22 = v110[3];
    uint64_t v23 = v110[4];
    __swift_project_boxed_opaque_existential_0Tm(v110, v22);
    uint64_t v24 = (*(uint64_t (**)(uint64_t, uint64_t))(v23 + 8))(v22, v23);
    unint64_t v25 = specialized static String._createEmpty(withInitialCapacity:)(45);
    uint64_t v27 = v26;
    v107._uint64_t countAndFlagsBits = v25;
    v107._unint64_t object = (void *)v26;
    unint64_t v28 = HIBYTE(v26) & 0xF;
    if ((v26 & 0x2000000000000000) == 0) {
      unint64_t v28 = v25 & 0xFFFFFFFFFFFFLL;
    }
    if (v28 || (v25 & ~v26 & 0x2000000000000000) != 0)
    {
      if ((v26 & 0x2000000000000000) != 0
        && (0x80000001816DD670 & 0x2000000000000000) != 0
        && (BOOL v29 = specialized _SmallString.init(_:appending:)(v25, v26, 0xD000000000000012, 0x80000001816DD670 | 0x8000000000000000), (v31 & 1) == 0))
      {
        uint64_t v32 = v29;
        uint64_t v33 = v30;
        swift_bridgeObjectRelease(v27);
        swift_bridgeObjectRelease(0x80000001816DD670 | 0x8000000000000000);
        v107._uint64_t countAndFlagsBits = v32;
        v107._unint64_t object = v33;
      }
      else
      {
        if ((0x80000001816DD670 & 0x2000000000000000) != 0) {
          unint64_t v35 = (0x80000001816DD670 >> 56) & 0xF;
        }
        else {
          unint64_t v35 = 18;
        }
        _StringGuts.append(_:)(0xD000000000000012, 0x80000001816DD670 | 0x8000000000000000, 0, v35);
        swift_bridgeObjectRelease(0x80000001816DD670 | 0x8000000000000000);
      }
    }
    else
    {
      swift_bridgeObjectRelease(v26);
      v107._uint64_t countAndFlagsBits = 0xD000000000000012;
      v107._unint64_t object = (void *)(0x80000001816DD670 | 0x8000000000000000);
    }
    TypeName = (uint64_t *)swift_getTypeName(a2, 0);
    if (v37 < 0) {
      goto LABEL_102;
    }
    int64_t v38 = (uint8x16_t *)TypeName;
    int64_t v39 = v37;
    int64_t v40 = validateUTF8(_:)(TypeName, v37);
    if (v42) {
      unint64_t v43 = repairUTF8(_:firstKnownBrokenRange:)(v38->i8, v39, v40, v41);
    }
    else {
      unint64_t v43 = specialized static String._uncheckedFromUTF8(_:isASCII:)(v38, v39, v40 & 1);
    }
    unint64_t v45 = v43;
    uint64_t v46 = v44;
    unint64_t object = v107._object;
    uint64_t v48 = ((unint64_t)v107._object >> 56) & 0xF;
    if (((uint64_t)v107._object & 0x2000000000000000) == 0) {
      uint64_t v48 = v107._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
    }
    if (!v48 && (v107._countAndFlagsBits & ~(uint64_t)v107._object & 0x2000000000000000) == 0)
    {
      swift_bridgeObjectRelease((uint64_t)v107._object);
      v107._uint64_t countAndFlagsBits = v45;
      v107._unint64_t object = (void *)v46;
LABEL_33:
      uint64_t v55 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(" from invalid ", 0xEuLL, 1);
      uint64_t v56 = HIBYTE(v46) & 0xF;
      if ((v46 & 0x2000000000000000) == 0) {
        uint64_t v56 = v45 & 0xFFFFFFFFFFFFLL;
      }
      if (!v56 && (v45 & ~v46 & 0x2000000000000000) == 0)
      {
        swift_bridgeObjectRelease(v46);
        uint64_t v107 = v55;
LABEL_46:
        uint64_t v63 = (uint64_t *)swift_getTypeName((Class *)&type metadata for Int16, 0);
        if ((v64 & 0x8000000000000000) == 0)
        {
          int64_t v65 = (uint8x16_t *)v63;
          int64_t v66 = v64;
          int64_t v67 = validateUTF8(_:)(v63, v64);
          if (v69) {
            unint64_t v70 = repairUTF8(_:firstKnownBrokenRange:)(v65->i8, v66, v67, v68);
          }
          else {
            unint64_t v70 = specialized static String._uncheckedFromUTF8(_:isASCII:)(v65, v66, v67 & 1);
          }
          unint64_t v72 = v70;
          uint64_t v73 = v71;
          unint64_t v74 = v107._object;
          uint64_t v75 = ((unint64_t)v107._object >> 56) & 0xF;
          if (((uint64_t)v107._object & 0x2000000000000000) == 0) {
            uint64_t v75 = v107._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
          }
          if (!v75 && (v107._countAndFlagsBits & ~(uint64_t)v107._object & 0x2000000000000000) == 0)
          {
            swift_bridgeObjectRelease((uint64_t)v107._object);
            v107._uint64_t countAndFlagsBits = v72;
            v107._unint64_t object = (void *)v73;
LABEL_63:
            uint64_t countAndFlagsBits = 0x2065756C617620;
            uint64_t v83 = HIBYTE(v73) & 0xF;
            if ((v73 & 0x2000000000000000) == 0) {
              uint64_t v83 = v72 & 0xFFFFFFFFFFFFLL;
            }
            if (v83 || (v72 & ~v73 & 0x2000000000000000) != 0)
            {
              if ((v73 & 0x2000000000000000) == 0
                || (char v84 = specialized _SmallString.init(_:appending:)(v72, v73, 0x2065756C617620uLL, 0xE700000000000000), (v86 & 1) != 0))
              {
                _StringGuts.append(_:)(0x2065756C617620, 0xE700000000000000, 0, 7);
                swift_bridgeObjectRelease(0xE700000000000000);
                uint64_t countAndFlagsBits = v107._countAndFlagsBits;
                uint64_t v87 = (unint64_t)v107._object;
                goto LABEL_77;
              }
              uint64_t countAndFlagsBits = v84;
              uint64_t v87 = v85;
              swift_bridgeObjectRelease(v73);
              swift_bridgeObjectRelease(0xE700000000000000);
            }
            else
            {
              swift_bridgeObjectRelease(v73);
              uint64_t v87 = 0xE700000000000000;
            }
            v107._uint64_t countAndFlagsBits = countAndFlagsBits;
            v107._unint64_t object = (void *)v87;
LABEL_77:
            unint64_t v89 = _int64ToString(_:radix:uppercase:)(v18, 10, 0, (uint64_t (*)(long long *, uint64_t, uint64_t, uint64_t, void))swift_int64ToString);
            unint64_t v90 = v88;
            unint64_t v91 = HIBYTE(v87) & 0xF;
            if ((v87 & 0x2000000000000000) == 0) {
              unint64_t v91 = countAndFlagsBits & 0xFFFFFFFFFFFFLL;
            }
            if (!v91 && (countAndFlagsBits & ~v87 & 0x2000000000000000) == 0)
            {
              swift_bridgeObjectRelease(v87);
              v107._uint64_t countAndFlagsBits = v89;
              v107._unint64_t object = (void *)v90;
              goto LABEL_90;
            }
            if ((v87 & 0x2000000000000000) != 0)
            {
              if ((v88 & 0x2000000000000000) != 0)
              {
                char v93 = specialized _SmallString.init(_:appending:)(countAndFlagsBits, v87, v89, v88);
                if ((v95 & 1) == 0)
                {
                  uint64_t v96 = v93;
                  unint64_t v97 = v94;
                  swift_bridgeObjectRelease(v87);
                  swift_bridgeObjectRelease(v90);
                  v107._uint64_t countAndFlagsBits = v96;
                  v107._unint64_t object = v97;
                  unint64_t v90 = (unint64_t)v97;
                  unint64_t v89 = v96;
LABEL_90:
                  int64x2_t v98 = HIBYTE(v90) & 0xF;
                  if ((v90 & 0x2000000000000000) == 0) {
                    int64x2_t v98 = v89 & 0xFFFFFFFFFFFFLL;
                  }
                  if (v98 || (v89 & ~v90 & 0x2000000000000000) != 0)
                  {
                    if ((v90 & 0x2000000000000000) == 0
                      || (char v99 = specialized _SmallString.init(_:appending:)(v89, v90, 0, 0xE000000000000000),
                          (v101 & 1) != 0))
                    {
                      _StringGuts.append(_:)(0, 0xE000000000000000, 0, 0);
                      swift_bridgeObjectRelease(0xE000000000000000);
                      int64x2_t v102 = v107._countAndFlagsBits;
                      uint64_t v103 = v107._object;
                    }
                    else
                    {
                      int64x2_t v102 = v99;
                      uint64_t v103 = v100;
                      swift_bridgeObjectRelease(v90);
                      swift_bridgeObjectRelease(0xE000000000000000);
                    }
                  }
                  else
                  {
                    swift_bridgeObjectRelease(v90);
                    int64x2_t v102 = 0;
                    uint64_t v103 = (void *)0xE000000000000000;
                  }
                  *(void *)uint64_t v21 = v24;
                  *(void *)(v21 + 8) = v102;
                  *(void *)(v21 + 16) = v103;
                  *(void *)(v21 + 24) = 0;
                  *(unsigned char *)(v21 + 72) = 3;
                  swift_willThrow();
                  return __swift_destroy_boxed_opaque_existential_1Tm(v110);
                }
                goto LABEL_88;
              }
            }
            else if ((v88 & 0x2000000000000000) != 0)
            {
LABEL_88:
              int64x2_t v92 = HIBYTE(v90) & 0xF;
              goto LABEL_89;
            }
            int64x2_t v92 = v89 & 0xFFFFFFFFFFFFLL;
LABEL_89:
            _StringGuts.append(_:)(v89, v90, 0, v92);
            swift_bridgeObjectRelease(v90);
            unint64_t v89 = v107._countAndFlagsBits;
            unint64_t v90 = (unint64_t)v107._object;
            goto LABEL_90;
          }
          if (((uint64_t)v107._object & 0x2000000000000000) != 0)
          {
            if ((v71 & 0x2000000000000000) != 0)
            {
              uint64_t v77 = specialized _SmallString.init(_:appending:)(v107._countAndFlagsBits, (unint64_t)v107._object, v70, v71);
              if ((v79 & 1) == 0)
              {
                uint64_t v80 = v77;
                uint64_t v81 = v78;
                swift_bridgeObjectRelease((uint64_t)v74);
                swift_bridgeObjectRelease(v73);
                v107._uint64_t countAndFlagsBits = v80;
                v107._unint64_t object = v81;
                uint64_t v73 = (unint64_t)v81;
                unint64_t v72 = v80;
                goto LABEL_63;
              }
              goto LABEL_61;
            }
          }
          else if ((v71 & 0x2000000000000000) != 0)
          {
LABEL_61:
            unint64_t v76 = HIBYTE(v73) & 0xF;
            goto LABEL_62;
          }
          unint64_t v76 = v70 & 0xFFFFFFFFFFFFLL;
LABEL_62:
          _StringGuts.append(_:)(v72, v73, 0, v76);
          swift_bridgeObjectRelease(v73);
          unint64_t v72 = v107._countAndFlagsBits;
          uint64_t v73 = (unint64_t)v107._object;
          goto LABEL_63;
        }
LABEL_102:
        _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeBufferPointer with negative count", 39, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x53FuLL, 0);
      }
      if ((v46 & 0x2000000000000000) != 0)
      {
        if (((uint64_t)v55._object & 0x2000000000000000) != 0)
        {
          uint64_t v58 = specialized _SmallString.init(_:appending:)(v45, v46, v55._countAndFlagsBits, (unint64_t)v55._object);
          if ((v60 & 1) == 0)
          {
            uint64_t v61 = v58;
            uint64_t v62 = v59;
            swift_bridgeObjectRelease(v46);
            swift_bridgeObjectRelease((uint64_t)v55._object);
            v107._uint64_t countAndFlagsBits = v61;
            v107._unint64_t object = v62;
            goto LABEL_46;
          }
          goto LABEL_44;
        }
      }
      else if (((uint64_t)v55._object & 0x2000000000000000) != 0)
      {
LABEL_44:
        unint64_t v57 = ((unint64_t)v55._object >> 56) & 0xF;
        goto LABEL_45;
      }
      unint64_t v57 = v55._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
LABEL_45:
      _StringGuts.append(_:)(v55._countAndFlagsBits, (unint64_t)v55._object, 0, v57);
      swift_bridgeObjectRelease((uint64_t)v55._object);
      goto LABEL_46;
    }
    if (((uint64_t)v107._object & 0x2000000000000000) != 0)
    {
      if ((v44 & 0x2000000000000000) != 0)
      {
        uint64_t v50 = specialized _SmallString.init(_:appending:)(v107._countAndFlagsBits, (unint64_t)v107._object, v43, v44);
        if ((v52 & 1) == 0)
        {
          unsigned int v53 = v50;
          Swift::String v54 = v51;
          swift_bridgeObjectRelease((uint64_t)object);
          swift_bridgeObjectRelease(v46);
          v107._uint64_t countAndFlagsBits = v53;
          v107._unint64_t object = v54;
          uint64_t v46 = (unint64_t)v54;
          unint64_t v45 = v53;
          goto LABEL_33;
        }
        goto LABEL_31;
      }
    }
    else if ((v44 & 0x2000000000000000) != 0)
    {
LABEL_31:
      unint64_t v49 = HIBYTE(v46) & 0xF;
      goto LABEL_32;
    }
    unint64_t v49 = v43 & 0xFFFFFFFFFFFFLL;
LABEL_32:
    _StringGuts.append(_:)(v45, v46, 0, v49);
    swift_bridgeObjectRelease(v46);
    unint64_t v45 = v107._countAndFlagsBits;
    uint64_t v46 = (unint64_t)v107._object;
    goto LABEL_33;
  }
  return __swift_destroy_boxed_opaque_existential_1Tm(v110);
}

{
  uint64_t v5;
  Class *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  void *v30;
  char v31;
  uint64_t v32;
  void *v33;
  unint64_t v35;
  uint64_t *TypeName;
  uint64_t v37;
  uint8x16_t *v38;
  int64_t v39;
  int64_t v40;
  int64_t v41;
  char v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  void *object;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  void *v51;
  char v52;
  uint64_t v53;
  void *v54;
  Swift::String v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  void *v59;
  char v60;
  uint64_t v61;
  void *v62;
  uint64_t *v63;
  uint64_t v64;
  uint8x16_t *v65;
  int64_t v66;
  int64_t v67;
  int64_t v68;
  char v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  void *v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  void *v78;
  char v79;
  uint64_t v80;
  void *v81;
  uint64_t countAndFlagsBits;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;
  char v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  void *v94;
  char v95;
  uint64_t v96;
  void *v97;
  uint64_t v98;
  unint64_t v99;
  void *v100;
  char v101;
  uint64_t v102;
  void *v103;
  Class *v104;
  uint64_t v105;
  uint64_t v106;
  Swift::String v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t *v110;

  uint64_t v106 = a4;
  unint64_t v9 = type metadata accessor for Optional(0, (uint64_t)a2, a3, a4);
  uint64_t v10 = (uint64_t)*(v9 - 1);
  MEMORY[0x1F4188790](v9);
  uint64_t v12 = (char *)&v104 - v11;
  uint64_t v14 = a1[3];
  uint64_t v13 = a1[4];
  uint64x2_t v110 = a1;
  __swift_project_boxed_opaque_existential_0Tm(a1, v14);
  (*(void (**)(Swift::String *__return_ptr, uint64_t, uint64_t))(v13 + 40))(&v107, v14, v13);
  if (!v5)
  {
    uint64_t v104 = v9;
    Swift::String v105 = a5;
    uint64_t v15 = v106;
    uint64_t v16 = v108;
    uint64_t v17 = v109;
    __swift_project_boxed_opaque_existential_0Tm(&v107, v108);
    char v18 = (*(uint64_t (**)(uint64_t, uint64_t))(v17 + 80))(v16, v17);
    __swift_destroy_boxed_opaque_existential_1Tm(&v107._countAndFlagsBits);
    LODWORD(v107._countAndFlagsBits) = v18;
    (*(void (**)(Swift::String *, Class *, uint64_t))(v15 + 16))(&v107, a2, v15);
    uint64_t v19 = (uint64_t)*(a2 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, Class *))(v19 + 48))(v12, 1, a2) != 1)
    {
      (*(void (**)(uint64_t, char *, Class *))(v19 + 32))(v105, v12, a2);
      return __swift_destroy_boxed_opaque_existential_1Tm(v110);
    }
    (*(void (**)(char *, Class *))(v10 + 8))(v12, v104);
    swift_allocError((uint64_t)&type metadata for DecodingError, (uint64_t)&protocol witness table for DecodingError, 0, 0);
    uint64_t v21 = v20;
    uint64_t v22 = v110[3];
    uint64_t v23 = v110[4];
    __swift_project_boxed_opaque_existential_0Tm(v110, v22);
    uint64_t v24 = (*(uint64_t (**)(uint64_t, uint64_t))(v23 + 8))(v22, v23);
    unint64_t v25 = specialized static String._createEmpty(withInitialCapacity:)(45);
    uint64_t v27 = v26;
    v107._uint64_t countAndFlagsBits = v25;
    v107._unint64_t object = (void *)v26;
    unint64_t v28 = HIBYTE(v26) & 0xF;
    if ((v26 & 0x2000000000000000) == 0) {
      unint64_t v28 = v25 & 0xFFFFFFFFFFFFLL;
    }
    if (v28 || (v25 & ~v26 & 0x2000000000000000) != 0)
    {
      if ((v26 & 0x2000000000000000) != 0
        && (0x80000001816DD670 & 0x2000000000000000) != 0
        && (BOOL v29 = specialized _SmallString.init(_:appending:)(v25, v26, 0xD000000000000012, 0x80000001816DD670 | 0x8000000000000000), (v31 & 1) == 0))
      {
        uint64_t v32 = v29;
        uint64_t v33 = v30;
        swift_bridgeObjectRelease(v27);
        swift_bridgeObjectRelease(0x80000001816DD670 | 0x8000000000000000);
        v107._uint64_t countAndFlagsBits = v32;
        v107._unint64_t object = v33;
      }
      else
      {
        if ((0x80000001816DD670 & 0x2000000000000000) != 0) {
          unint64_t v35 = (0x80000001816DD670 >> 56) & 0xF;
        }
        else {
          unint64_t v35 = 18;
        }
        _StringGuts.append(_:)(0xD000000000000012, 0x80000001816DD670 | 0x8000000000000000, 0, v35);
        swift_bridgeObjectRelease(0x80000001816DD670 | 0x8000000000000000);
      }
    }
    else
    {
      swift_bridgeObjectRelease(v26);
      v107._uint64_t countAndFlagsBits = 0xD000000000000012;
      v107._unint64_t object = (void *)(0x80000001816DD670 | 0x8000000000000000);
    }
    TypeName = (uint64_t *)swift_getTypeName(a2, 0);
    if (v37 < 0) {
      goto LABEL_102;
    }
    int64_t v38 = (uint8x16_t *)TypeName;
    int64_t v39 = v37;
    int64_t v40 = validateUTF8(_:)(TypeName, v37);
    if (v42) {
      unint64_t v43 = repairUTF8(_:firstKnownBrokenRange:)(v38->i8, v39, v40, v41);
    }
    else {
      unint64_t v43 = specialized static String._uncheckedFromUTF8(_:isASCII:)(v38, v39, v40 & 1);
    }
    unint64_t v45 = v43;
    uint64_t v46 = v44;
    unint64_t object = v107._object;
    uint64_t v48 = ((unint64_t)v107._object >> 56) & 0xF;
    if (((uint64_t)v107._object & 0x2000000000000000) == 0) {
      uint64_t v48 = v107._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
    }
    if (!v48 && (v107._countAndFlagsBits & ~(uint64_t)v107._object & 0x2000000000000000) == 0)
    {
      swift_bridgeObjectRelease((uint64_t)v107._object);
      v107._uint64_t countAndFlagsBits = v45;
      v107._unint64_t object = (void *)v46;
LABEL_33:
      uint64_t v55 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(" from invalid ", 0xEuLL, 1);
      uint64_t v56 = HIBYTE(v46) & 0xF;
      if ((v46 & 0x2000000000000000) == 0) {
        uint64_t v56 = v45 & 0xFFFFFFFFFFFFLL;
      }
      if (!v56 && (v45 & ~v46 & 0x2000000000000000) == 0)
      {
        swift_bridgeObjectRelease(v46);
        uint64_t v107 = v55;
LABEL_46:
        uint64_t v63 = (uint64_t *)swift_getTypeName((Class *)&type metadata for Int32, 0);
        if ((v64 & 0x8000000000000000) == 0)
        {
          int64_t v65 = (uint8x16_t *)v63;
          int64_t v66 = v64;
          int64_t v67 = validateUTF8(_:)(v63, v64);
          if (v69) {
            unint64_t v70 = repairUTF8(_:firstKnownBrokenRange:)(v65->i8, v66, v67, v68);
          }
          else {
            unint64_t v70 = specialized static String._uncheckedFromUTF8(_:isASCII:)(v65, v66, v67 & 1);
          }
          unint64_t v72 = v70;
          uint64_t v73 = v71;
          unint64_t v74 = v107._object;
          uint64_t v75 = ((unint64_t)v107._object >> 56) & 0xF;
          if (((uint64_t)v107._object & 0x2000000000000000) == 0) {
            uint64_t v75 = v107._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
          }
          if (!v75 && (v107._countAndFlagsBits & ~(uint64_t)v107._object & 0x2000000000000000) == 0)
          {
            swift_bridgeObjectRelease((uint64_t)v107._object);
            v107._uint64_t countAndFlagsBits = v72;
            v107._unint64_t object = (void *)v73;
LABEL_63:
            uint64_t countAndFlagsBits = 0x2065756C617620;
            uint64_t v83 = HIBYTE(v73) & 0xF;
            if ((v73 & 0x2000000000000000) == 0) {
              uint64_t v83 = v72 & 0xFFFFFFFFFFFFLL;
            }
            if (v83 || (v72 & ~v73 & 0x2000000000000000) != 0)
            {
              if ((v73 & 0x2000000000000000) == 0
                || (char v84 = specialized _SmallString.init(_:appending:)(v72, v73, 0x2065756C617620uLL, 0xE700000000000000), (v86 & 1) != 0))
              {
                _StringGuts.append(_:)(0x2065756C617620, 0xE700000000000000, 0, 7);
                swift_bridgeObjectRelease(0xE700000000000000);
                uint64_t countAndFlagsBits = v107._countAndFlagsBits;
                uint64_t v87 = (unint64_t)v107._object;
                goto LABEL_77;
              }
              uint64_t countAndFlagsBits = v84;
              uint64_t v87 = v85;
              swift_bridgeObjectRelease(v73);
              swift_bridgeObjectRelease(0xE700000000000000);
            }
            else
            {
              swift_bridgeObjectRelease(v73);
              uint64_t v87 = 0xE700000000000000;
            }
            v107._uint64_t countAndFlagsBits = countAndFlagsBits;
            v107._unint64_t object = (void *)v87;
LABEL_77:
            unint64_t v89 = _int64ToString(_:radix:uppercase:)(v18, 10, 0, (uint64_t (*)(long long *, uint64_t, uint64_t, uint64_t, void))swift_int64ToString);
            unint64_t v90 = v88;
            unint64_t v91 = HIBYTE(v87) & 0xF;
            if ((v87 & 0x2000000000000000) == 0) {
              unint64_t v91 = countAndFlagsBits & 0xFFFFFFFFFFFFLL;
            }
            if (!v91 && (countAndFlagsBits & ~v87 & 0x2000000000000000) == 0)
            {
              swift_bridgeObjectRelease(v87);
              v107._uint64_t countAndFlagsBits = v89;
              v107._unint64_t object = (void *)v90;
              goto LABEL_90;
            }
            if ((v87 & 0x2000000000000000) != 0)
            {
              if ((v88 & 0x2000000000000000) != 0)
              {
                char v93 = specialized _SmallString.init(_:appending:)(countAndFlagsBits, v87, v89, v88);
                if ((v95 & 1) == 0)
                {
                  uint64_t v96 = v93;
                  unint64_t v97 = v94;
                  swift_bridgeObjectRelease(v87);
                  swift_bridgeObjectRelease(v90);
                  v107._uint64_t countAndFlagsBits = v96;
                  v107._unint64_t object = v97;
                  unint64_t v90 = (unint64_t)v97;
                  unint64_t v89 = v96;
LABEL_90:
                  int64x2_t v98 = HIBYTE(v90) & 0xF;
                  if ((v90 & 0x2000000000000000) == 0) {
                    int64x2_t v98 = v89 & 0xFFFFFFFFFFFFLL;
                  }
                  if (v98 || (v89 & ~v90 & 0x2000000000000000) != 0)
                  {
                    if ((v90 & 0x2000000000000000) == 0
                      || (char v99 = specialized _SmallString.init(_:appending:)(v89, v90, 0, 0xE000000000000000),
                          (v101 & 1) != 0))
                    {
                      _StringGuts.append(_:)(0, 0xE000000000000000, 0, 0);
                      swift_bridgeObjectRelease(0xE000000000000000);
                      int64x2_t v102 = v107._countAndFlagsBits;
                      uint64_t v103 = v107._object;
                    }
                    else
                    {
                      int64x2_t v102 = v99;
                      uint64_t v103 = v100;
                      swift_bridgeObjectRelease(v90);
                      swift_bridgeObjectRelease(0xE000000000000000);
                    }
                  }
                  else
                  {
                    swift_bridgeObjectRelease(v90);
                    int64x2_t v102 = 0;
                    uint64_t v103 = (void *)0xE000000000000000;
                  }
                  *(void *)uint64_t v21 = v24;
                  *(void *)(v21 + 8) = v102;
                  *(void *)(v21 + 16) = v103;
                  *(void *)(v21 + 24) = 0;
                  *(unsigned char *)(v21 + 72) = 3;
                  swift_willThrow();
                  return __swift_destroy_boxed_opaque_existential_1Tm(v110);
                }
                goto LABEL_88;
              }
            }
            else if ((v88 & 0x2000000000000000) != 0)
            {
LABEL_88:
              int64x2_t v92 = HIBYTE(v90) & 0xF;
              goto LABEL_89;
            }
            int64x2_t v92 = v89 & 0xFFFFFFFFFFFFLL;
LABEL_89:
            _StringGuts.append(_:)(v89, v90, 0, v92);
            swift_bridgeObjectRelease(v90);
            unint64_t v89 = v107._countAndFlagsBits;
            unint64_t v90 = (unint64_t)v107._object;
            goto LABEL_90;
          }
          if (((uint64_t)v107._object & 0x2000000000000000) != 0)
          {
            if ((v71 & 0x2000000000000000) != 0)
            {
              uint64_t v77 = specialized _SmallString.init(_:appending:)(v107._countAndFlagsBits, (unint64_t)v107._object, v70, v71);
              if ((v79 & 1) == 0)
              {
                uint64_t v80 = v77;
                uint64_t v81 = v78;
                swift_bridgeObjectRelease((uint64_t)v74);
                swift_bridgeObjectRelease(v73);
                v107._uint64_t countAndFlagsBits = v80;
                v107._unint64_t object = v81;
                uint64_t v73 = (unint64_t)v81;
                unint64_t v72 = v80;
                goto LABEL_63;
              }
              goto LABEL_61;
            }
          }
          else if ((v71 & 0x2000000000000000) != 0)
          {
LABEL_61:
            unint64_t v76 = HIBYTE(v73) & 0xF;
            goto LABEL_62;
          }
          unint64_t v76 = v70 & 0xFFFFFFFFFFFFLL;
LABEL_62:
          _StringGuts.append(_:)(v72, v73, 0, v76);
          swift_bridgeObjectRelease(v73);
          unint64_t v72 = v107._countAndFlagsBits;
          uint64_t v73 = (unint64_t)v107._object;
          goto LABEL_63;
        }
LABEL_102:
        _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeBufferPointer with negative count", 39, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x53FuLL, 0);
      }
      if ((v46 & 0x2000000000000000) != 0)
      {
        if (((uint64_t)v55._object & 0x2000000000000000) != 0)
        {
          uint64_t v58 = specialized _SmallString.init(_:appending:)(v45, v46, v55._countAndFlagsBits, (unint64_t)v55._object);
          if ((v60 & 1) == 0)
          {
            uint64_t v61 = v58;
            uint64_t v62 = v59;
            swift_bridgeObjectRelease(v46);
            swift_bridgeObjectRelease((uint64_t)v55._object);
            v107._uint64_t countAndFlagsBits = v61;
            v107._unint64_t object = v62;
            goto LABEL_46;
          }
          goto LABEL_44;
        }
      }
      else if (((uint64_t)v55._object & 0x2000000000000000) != 0)
      {
LABEL_44:
        unint64_t v57 = ((unint64_t)v55._object >> 56) & 0xF;
        goto LABEL_45;
      }
      unint64_t v57 = v55._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
LABEL_45:
      _StringGuts.append(_:)(v55._countAndFlagsBits, (unint64_t)v55._object, 0, v57);
      swift_bridgeObjectRelease((uint64_t)v55._object);
      goto LABEL_46;
    }
    if (((uint64_t)v107._object & 0x2000000000000000) != 0)
    {
      if ((v44 & 0x2000000000000000) != 0)
      {
        uint64_t v50 = specialized _SmallString.init(_:appending:)(v107._countAndFlagsBits, (unint64_t)v107._object, v43, v44);
        if ((v52 & 1) == 0)
        {
          unsigned int v53 = v50;
          Swift::String v54 = v51;
          swift_bridgeObjectRelease((uint64_t)object);
          swift_bridgeObjectRelease(v46);
          v107._uint64_t countAndFlagsBits = v53;
          v107._unint64_t object = v54;
          uint64_t v46 = (unint64_t)v54;
          unint64_t v45 = v53;
          goto LABEL_33;
        }
        goto LABEL_31;
      }
    }
    else if ((v44 & 0x2000000000000000) != 0)
    {
LABEL_31:
      unint64_t v49 = HIBYTE(v46) & 0xF;
      goto LABEL_32;
    }
    unint64_t v49 = v43 & 0xFFFFFFFFFFFFLL;
LABEL_32:
    _StringGuts.append(_:)(v45, v46, 0, v49);
    swift_bridgeObjectRelease(v46);
    unint64_t v45 = v107._countAndFlagsBits;
    uint64_t v46 = (unint64_t)v107._object;
    goto LABEL_33;
  }
  return __swift_destroy_boxed_opaque_existential_1Tm(v110);
}

{
  uint64_t v5;
  Class *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  void *v30;
  char v31;
  uint64_t v32;
  void *v33;
  unint64_t v35;
  uint64_t *TypeName;
  uint64_t v37;
  uint8x16_t *v38;
  int64_t v39;
  int64_t v40;
  int64_t v41;
  char v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  void *object;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  void *v51;
  char v52;
  uint64_t v53;
  void *v54;
  Swift::String v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  void *v59;
  char v60;
  uint64_t v61;
  void *v62;
  uint64_t *v63;
  uint64_t v64;
  uint8x16_t *v65;
  int64_t v66;
  int64_t v67;
  int64_t v68;
  char v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  void *v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  void *v78;
  char v79;
  uint64_t v80;
  void *v81;
  uint64_t countAndFlagsBits;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;
  char v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  void *v94;
  char v95;
  uint64_t v96;
  void *v97;
  uint64_t v98;
  unint64_t v99;
  void *v100;
  char v101;
  uint64_t v102;
  void *v103;
  Class *v104;
  uint64_t v105;
  uint64_t v106;
  Swift::String v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t *v110;

  uint64_t v106 = a4;
  unint64_t v9 = type metadata accessor for Optional(0, (uint64_t)a2, a3, a4);
  uint64_t v10 = (uint64_t)*(v9 - 1);
  MEMORY[0x1F4188790](v9);
  uint64_t v12 = (char *)&v104 - v11;
  uint64_t v14 = a1[3];
  uint64_t v13 = a1[4];
  uint64x2_t v110 = a1;
  __swift_project_boxed_opaque_existential_0Tm(a1, v14);
  (*(void (**)(Swift::String *__return_ptr, uint64_t, uint64_t))(v13 + 40))(&v107, v14, v13);
  if (!v5)
  {
    uint64_t v104 = v9;
    Swift::String v105 = a5;
    uint64_t v15 = v106;
    uint64_t v16 = v108;
    uint64_t v17 = v109;
    __swift_project_boxed_opaque_existential_0Tm(&v107, v108);
    char v18 = (*(uint64_t (**)(uint64_t, uint64_t))(v17 + 88))(v16, v17);
    __swift_destroy_boxed_opaque_existential_1Tm(&v107._countAndFlagsBits);
    v107._uint64_t countAndFlagsBits = v18;
    (*(void (**)(Swift::String *, Class *, uint64_t))(v15 + 16))(&v107, a2, v15);
    uint64_t v19 = (uint64_t)*(a2 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, Class *))(v19 + 48))(v12, 1, a2) != 1)
    {
      (*(void (**)(uint64_t, char *, Class *))(v19 + 32))(v105, v12, a2);
      return __swift_destroy_boxed_opaque_existential_1Tm(v110);
    }
    (*(void (**)(char *, Class *))(v10 + 8))(v12, v104);
    swift_allocError((uint64_t)&type metadata for DecodingError, (uint64_t)&protocol witness table for DecodingError, 0, 0);
    uint64_t v21 = v20;
    uint64_t v22 = v110[3];
    uint64_t v23 = v110[4];
    __swift_project_boxed_opaque_existential_0Tm(v110, v22);
    uint64_t v24 = (*(uint64_t (**)(uint64_t, uint64_t))(v23 + 8))(v22, v23);
    unint64_t v25 = specialized static String._createEmpty(withInitialCapacity:)(45);
    uint64_t v27 = v26;
    v107._uint64_t countAndFlagsBits = v25;
    v107._unint64_t object = (void *)v26;
    unint64_t v28 = HIBYTE(v26) & 0xF;
    if ((v26 & 0x2000000000000000) == 0) {
      unint64_t v28 = v25 & 0xFFFFFFFFFFFFLL;
    }
    if (v28 || (v25 & ~v26 & 0x2000000000000000) != 0)
    {
      if ((v26 & 0x2000000000000000) != 0
        && (0x80000001816DD670 & 0x2000000000000000) != 0
        && (BOOL v29 = specialized _SmallString.init(_:appending:)(v25, v26, 0xD000000000000012, 0x80000001816DD670 | 0x8000000000000000), (v31 & 1) == 0))
      {
        uint64_t v32 = v29;
        uint64_t v33 = v30;
        swift_bridgeObjectRelease(v27);
        swift_bridgeObjectRelease(0x80000001816DD670 | 0x8000000000000000);
        v107._uint64_t countAndFlagsBits = v32;
        v107._unint64_t object = v33;
      }
      else
      {
        if ((0x80000001816DD670 & 0x2000000000000000) != 0) {
          unint64_t v35 = (0x80000001816DD670 >> 56) & 0xF;
        }
        else {
          unint64_t v35 = 18;
        }
        _StringGuts.append(_:)(0xD000000000000012, 0x80000001816DD670 | 0x8000000000000000, 0, v35);
        swift_bridgeObjectRelease(0x80000001816DD670 | 0x8000000000000000);
      }
    }
    else
    {
      swift_bridgeObjectRelease(v26);
      v107._uint64_t countAndFlagsBits = 0xD000000000000012;
      v107._unint64_t object = (void *)(0x80000001816DD670 | 0x8000000000000000);
    }
    TypeName = (uint64_t *)swift_getTypeName(a2, 0);
    if (v37 < 0) {
      goto LABEL_102;
    }
    int64_t v38 = (uint8x16_t *)TypeName;
    int64_t v39 = v37;
    int64_t v40 = validateUTF8(_:)(TypeName, v37);
    if (v42) {
      unint64_t v43 = repairUTF8(_:firstKnownBrokenRange:)(v38->i8, v39, v40, v41);
    }
    else {
      unint64_t v43 = specialized static String._uncheckedFromUTF8(_:isASCII:)(v38, v39, v40 & 1);
    }
    unint64_t v45 = v43;
    uint64_t v46 = v44;
    unint64_t object = v107._object;
    uint64_t v48 = ((unint64_t)v107._object >> 56) & 0xF;
    if (((uint64_t)v107._object & 0x2000000000000000) == 0) {
      uint64_t v48 = v107._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
    }
    if (!v48 && (v107._countAndFlagsBits & ~(uint64_t)v107._object & 0x2000000000000000) == 0)
    {
      swift_bridgeObjectRelease((uint64_t)v107._object);
      v107._uint64_t countAndFlagsBits = v45;
      v107._unint64_t object = (void *)v46;
LABEL_33:
      uint64_t v55 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(" from invalid ", 0xEuLL, 1);
      uint64_t v56 = HIBYTE(v46) & 0xF;
      if ((v46 & 0x2000000000000000) == 0) {
        uint64_t v56 = v45 & 0xFFFFFFFFFFFFLL;
      }
      if (!v56 && (v45 & ~v46 & 0x2000000000000000) == 0)
      {
        swift_bridgeObjectRelease(v46);
        uint64_t v107 = v55;
LABEL_46:
        uint64_t v63 = (uint64_t *)swift_getTypeName((Class *)&type metadata for Int64, 0);
        if ((v64 & 0x8000000000000000) == 0)
        {
          int64_t v65 = (uint8x16_t *)v63;
          int64_t v66 = v64;
          int64_t v67 = validateUTF8(_:)(v63, v64);
          if (v69) {
            unint64_t v70 = repairUTF8(_:firstKnownBrokenRange:)(v65->i8, v66, v67, v68);
          }
          else {
            unint64_t v70 = specialized static String._uncheckedFromUTF8(_:isASCII:)(v65, v66, v67 & 1);
          }
          unint64_t v72 = v70;
          uint64_t v73 = v71;
          unint64_t v74 = v107._object;
          uint64_t v75 = ((unint64_t)v107._object >> 56) & 0xF;
          if (((uint64_t)v107._object & 0x2000000000000000) == 0) {
            uint64_t v75 = v107._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
          }
          if (!v75 && (v107._countAndFlagsBits & ~(uint64_t)v107._object & 0x2000000000000000) == 0)
          {
            swift_bridgeObjectRelease((uint64_t)v107._object);
            v107._uint64_t countAndFlagsBits = v72;
            v107._unint64_t object = (void *)v73;
LABEL_63:
            uint64_t countAndFlagsBits = 0x2065756C617620;
            uint64_t v83 = HIBYTE(v73) & 0xF;
            if ((v73 & 0x2000000000000000) == 0) {
              uint64_t v83 = v72 & 0xFFFFFFFFFFFFLL;
            }
            if (v83 || (v72 & ~v73 & 0x2000000000000000) != 0)
            {
              if ((v73 & 0x2000000000000000) == 0
                || (char v84 = specialized _SmallString.init(_:appending:)(v72, v73, 0x2065756C617620uLL, 0xE700000000000000), (v86 & 1) != 0))
              {
                _StringGuts.append(_:)(0x2065756C617620, 0xE700000000000000, 0, 7);
                swift_bridgeObjectRelease(0xE700000000000000);
                uint64_t countAndFlagsBits = v107._countAndFlagsBits;
                uint64_t v87 = (unint64_t)v107._object;
                goto LABEL_77;
              }
              uint64_t countAndFlagsBits = v84;
              uint64_t v87 = v85;
              swift_bridgeObjectRelease(v73);
              swift_bridgeObjectRelease(0xE700000000000000);
            }
            else
            {
              swift_bridgeObjectRelease(v73);
              uint64_t v87 = 0xE700000000000000;
            }
            v107._uint64_t countAndFlagsBits = countAndFlagsBits;
            v107._unint64_t object = (void *)v87;
LABEL_77:
            unint64_t v89 = _int64ToString(_:radix:uppercase:)(v18, 10, 0, (uint64_t (*)(long long *, uint64_t, uint64_t, uint64_t, void))swift_int64ToString);
            unint64_t v90 = v88;
            unint64_t v91 = HIBYTE(v87) & 0xF;
            if ((v87 & 0x2000000000000000) == 0) {
              unint64_t v91 = countAndFlagsBits & 0xFFFFFFFFFFFFLL;
            }
            if (!v91 && (countAndFlagsBits & ~v87 & 0x2000000000000000) == 0)
            {
              swift_bridgeObjectRelease(v87);
              v107._uint64_t countAndFlagsBits = v89;
              v107._unint64_t object = (void *)v90;
              goto LABEL_90;
            }
            if ((v87 & 0x2000000000000000) != 0)
            {
              if ((v88 & 0x2000000000000000) != 0)
              {
                char v93 = specialized _SmallString.init(_:appending:)(countAndFlagsBits, v87, v89, v88);
                if ((v95 & 1) == 0)
                {
                  uint64_t v96 = v93;
                  unint64_t v97 = v94;
                  swift_bridgeObjectRelease(v87);
                  swift_bridgeObjectRelease(v90);
                  v107._uint64_t countAndFlagsBits = v96;
                  v107._unint64_t object = v97;
                  unint64_t v90 = (unint64_t)v97;
                  unint64_t v89 = v96;
LABEL_90:
                  int64x2_t v98 = HIBYTE(v90) & 0xF;
                  if ((v90 & 0x2000000000000000) == 0) {
                    int64x2_t v98 = v89 & 0xFFFFFFFFFFFFLL;
                  }
                  if (v98 || (v89 & ~v90 & 0x2000000000000000) != 0)
                  {
                    if ((v90 & 0x2000000000000000) == 0
                      || (char v99 = specialized _SmallString.init(_:appending:)(v89, v90, 0, 0xE000000000000000),
                          (v101 & 1) != 0))
                    {
                      _StringGuts.append(_:)(0, 0xE000000000000000, 0, 0);
                      swift_bridgeObjectRelease(0xE000000000000000);
                      int64x2_t v102 = v107._countAndFlagsBits;
                      uint64_t v103 = v107._object;
                    }
                    else
                    {
                      int64x2_t v102 = v99;
                      uint64_t v103 = v100;
                      swift_bridgeObjectRelease(v90);
                      swift_bridgeObjectRelease(0xE000000000000000);
                    }
                  }
                  else
                  {
                    swift_bridgeObjectRelease(v90);
                    int64x2_t v102 = 0;
                    uint64_t v103 = (void *)0xE000000000000000;
                  }
                  *(void *)uint64_t v21 = v24;
                  *(void *)(v21 + 8) = v102;
                  *(void *)(v21 + 16) = v103;
                  *(void *)(v21 + 24) = 0;
                  *(unsigned char *)(v21 + 72) = 3;
                  swift_willThrow();
                  return __swift_destroy_boxed_opaque_existential_1Tm(v110);
                }
                goto LABEL_88;
              }
            }
            else if ((v88 & 0x2000000000000000) != 0)
            {
LABEL_88:
              int64x2_t v92 = HIBYTE(v90) & 0xF;
              goto LABEL_89;
            }
            int64x2_t v92 = v89 & 0xFFFFFFFFFFFFLL;
LABEL_89:
            _StringGuts.append(_:)(v89, v90, 0, v92);
            swift_bridgeObjectRelease(v90);
            unint64_t v89 = v107._countAndFlagsBits;
            unint64_t v90 = (unint64_t)v107._object;
            goto LABEL_90;
          }
          if (((uint64_t)v107._object & 0x2000000000000000) != 0)
          {
            if ((v71 & 0x2000000000000000) != 0)
            {
              uint64_t v77 = specialized _SmallString.init(_:appending:)(v107._countAndFlagsBits, (unint64_t)v107._object, v70, v71);
              if ((v79 & 1) == 0)
              {
                uint64_t v80 = v77;
                uint64_t v81 = v78;
                swift_bridgeObjectRelease((uint64_t)v74);
                swift_bridgeObjectRelease(v73);
                v107._uint64_t countAndFlagsBits = v80;
                v107._unint64_t object = v81;
                uint64_t v73 = (unint64_t)v81;
                unint64_t v72 = v80;
                goto LABEL_63;
              }
              goto LABEL_61;
            }
          }
          else if ((v71 & 0x2000000000000000) != 0)
          {
LABEL_61:
            unint64_t v76 = HIBYTE(v73) & 0xF;
            goto LABEL_62;
          }
          unint64_t v76 = v70 & 0xFFFFFFFFFFFFLL;
LABEL_62:
          _StringGuts.append(_:)(v72, v73, 0, v76);
          swift_bridgeObjectRelease(v73);
          unint64_t v72 = v107._countAndFlagsBits;
          uint64_t v73 = (unint64_t)v107._object;
          goto LABEL_63;
        }
LABEL_102:
        _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeBufferPointer with negative count", 39, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x53FuLL, 0);
      }
      if ((v46 & 0x2000000000000000) != 0)
      {
        if (((uint64_t)v55._object & 0x2000000000000000) != 0)
        {
          uint64_t v58 = specialized _SmallString.init(_:appending:)(v45, v46, v55._countAndFlagsBits, (unint64_t)v55._object);
          if ((v60 & 1) == 0)
          {
            uint64_t v61 = v58;
            uint64_t v62 = v59;
            swift_bridgeObjectRelease(v46);
            swift_bridgeObjectRelease((uint64_t)v55._object);
            v107._uint64_t countAndFlagsBits = v61;
            v107._unint64_t object = v62;
            goto LABEL_46;
          }
          goto LABEL_44;
        }
      }
      else if (((uint64_t)v55._object & 0x2000000000000000) != 0)
      {
LABEL_44:
        unint64_t v57 = ((unint64_t)v55._object >> 56) & 0xF;
        goto LABEL_45;
      }
      unint64_t v57 = v55._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
LABEL_45:
      _StringGuts.append(_:)(v55._countAndFlagsBits, (unint64_t)v55._object, 0, v57);
      swift_bridgeObjectRelease((uint64_t)v55._object);
      goto LABEL_46;
    }
    if (((uint64_t)v107._object & 0x2000000000000000) != 0)
    {
      if ((v44 & 0x2000000000000000) != 0)
      {
        uint64_t v50 = specialized _SmallString.init(_:appending:)(v107._countAndFlagsBits, (unint64_t)v107._object, v43, v44);
        if ((v52 & 1) == 0)
        {
          unsigned int v53 = v50;
          Swift::String v54 = v51;
          swift_bridgeObjectRelease((uint64_t)object);
          swift_bridgeObjectRelease(v46);
          v107._uint64_t countAndFlagsBits = v53;
          v107._unint64_t object = v54;
          uint64_t v46 = (unint64_t)v54;
          unint64_t v45 = v53;
          goto LABEL_33;
        }
        goto LABEL_31;
      }
    }
    else if ((v44 & 0x2000000000000000) != 0)
    {
LABEL_31:
      unint64_t v49 = HIBYTE(v46) & 0xF;
      goto LABEL_32;
    }
    unint64_t v49 = v43 & 0xFFFFFFFFFFFFLL;
LABEL_32:
    _StringGuts.append(_:)(v45, v46, 0, v49);
    swift_bridgeObjectRelease(v46);
    unint64_t v45 = v107._countAndFlagsBits;
    uint64_t v46 = (unint64_t)v107._object;
    goto LABEL_33;
  }
  return __swift_destroy_boxed_opaque_existential_1Tm(v110);
}

{
  uint64_t v5;
  Class *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  void *v30;
  char v31;
  uint64_t v32;
  void *v33;
  unint64_t v35;
  uint64_t *TypeName;
  uint64_t v37;
  uint8x16_t *v38;
  int64_t v39;
  int64_t v40;
  int64_t v41;
  char v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  void *object;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  void *v51;
  char v52;
  uint64_t v53;
  void *v54;
  Swift::String v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  void *v59;
  char v60;
  uint64_t v61;
  void *v62;
  uint64_t *v63;
  uint64_t v64;
  uint8x16_t *v65;
  int64_t v66;
  int64_t v67;
  int64_t v68;
  char v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  void *v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  void *v78;
  char v79;
  uint64_t v80;
  void *v81;
  uint64_t countAndFlagsBits;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;
  char v86;
  unint64_t v87;
  Swift::String v88;
  unint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  void *v94;
  char v95;
  uint64_t v96;
  void *v97;
  uint64_t v98;
  unint64_t v99;
  void *v100;
  char v101;
  uint64_t v102;
  void *v103;
  Class *v104;
  uint64_t v105;
  uint64_t v106;
  Swift::String v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t *v110;

  uint64_t v106 = a4;
  unint64_t v9 = type metadata accessor for Optional(0, (uint64_t)a2, a3, a4);
  uint64_t v10 = (uint64_t)*(v9 - 1);
  MEMORY[0x1F4188790](v9);
  uint64_t v12 = (char *)&v104 - v11;
  uint64_t v14 = a1[3];
  uint64_t v13 = a1[4];
  uint64x2_t v110 = a1;
  __swift_project_boxed_opaque_existential_0Tm(a1, v14);
  (*(void (**)(Swift::String *__return_ptr, uint64_t, uint64_t))(v13 + 40))(&v107, v14, v13);
  if (!v5)
  {
    uint64_t v104 = v9;
    Swift::String v105 = a5;
    uint64_t v15 = v106;
    uint64_t v16 = v108;
    uint64_t v17 = v109;
    __swift_project_boxed_opaque_existential_0Tm(&v107, v108);
    char v18 = (*(uint64_t (**)(uint64_t, uint64_t))(v17 + 104))(v16, v17);
    __swift_destroy_boxed_opaque_existential_1Tm(&v107._countAndFlagsBits);
    v107._uint64_t countAndFlagsBits = v18;
    (*(void (**)(Swift::String *, Class *, uint64_t))(v15 + 16))(&v107, a2, v15);
    uint64_t v19 = (uint64_t)*(a2 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, Class *))(v19 + 48))(v12, 1, a2) != 1)
    {
      (*(void (**)(uint64_t, char *, Class *))(v19 + 32))(v105, v12, a2);
      return __swift_destroy_boxed_opaque_existential_1Tm(v110);
    }
    (*(void (**)(char *, Class *))(v10 + 8))(v12, v104);
    swift_allocError((uint64_t)&type metadata for DecodingError, (uint64_t)&protocol witness table for DecodingError, 0, 0);
    uint64_t v21 = v20;
    uint64_t v22 = v110[3];
    uint64_t v23 = v110[4];
    __swift_project_boxed_opaque_existential_0Tm(v110, v22);
    uint64_t v24 = (*(uint64_t (**)(uint64_t, uint64_t))(v23 + 8))(v22, v23);
    unint64_t v25 = specialized static String._createEmpty(withInitialCapacity:)(45);
    uint64_t v27 = v26;
    v107._uint64_t countAndFlagsBits = v25;
    v107._unint64_t object = (void *)v26;
    unint64_t v28 = HIBYTE(v26) & 0xF;
    if ((v26 & 0x2000000000000000) == 0) {
      unint64_t v28 = v25 & 0xFFFFFFFFFFFFLL;
    }
    if (v28 || (v25 & ~v26 & 0x2000000000000000) != 0)
    {
      if ((v26 & 0x2000000000000000) != 0
        && (0x80000001816DD670 & 0x2000000000000000) != 0
        && (BOOL v29 = specialized _SmallString.init(_:appending:)(v25, v26, 0xD000000000000012, 0x80000001816DD670 | 0x8000000000000000), (v31 & 1) == 0))
      {
        uint64_t v32 = v29;
        uint64_t v33 = v30;
        swift_bridgeObjectRelease(v27);
        swift_bridgeObjectRelease(0x80000001816DD670 | 0x8000000000000000);
        v107._uint64_t countAndFlagsBits = v32;
        v107._unint64_t object = v33;
      }
      else
      {
        if ((0x80000001816DD670 & 0x2000000000000000) != 0) {
          unint64_t v35 = (0x80000001816DD670 >> 56) & 0xF;
        }
        else {
          unint64_t v35 = 18;
        }
        _StringGuts.append(_:)(0xD000000000000012, 0x80000001816DD670 | 0x8000000000000000, 0, v35);
        swift_bridgeObjectRelease(0x80000001816DD670 | 0x8000000000000000);
      }
    }
    else
    {
      swift_bridgeObjectRelease(v26);
      v107._uint64_t countAndFlagsBits = 0xD000000000000012;
      v107._unint64_t object = (void *)(0x80000001816DD670 | 0x8000000000000000);
    }
    TypeName = (uint64_t *)swift_getTypeName(a2, 0);
    if (v37 < 0) {
      goto LABEL_102;
    }
    int64_t v38 = (uint8x16_t *)TypeName;
    int64_t v39 = v37;
    int64_t v40 = validateUTF8(_:)(TypeName, v37);
    if (v42) {
      unint64_t v43 = repairUTF8(_:firstKnownBrokenRange:)(v38->i8, v39, v40, v41);
    }
    else {
      unint64_t v43 = specialized static String._uncheckedFromUTF8(_:isASCII:)(v38, v39, v40 & 1);
    }
    unint64_t v45 = v43;
    uint64_t v46 = v44;
    unint64_t object = v107._object;
    uint64_t v48 = ((unint64_t)v107._object >> 56) & 0xF;
    if (((uint64_t)v107._object & 0x2000000000000000) == 0) {
      uint64_t v48 = v107._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
    }
    if (!v48 && (v107._countAndFlagsBits & ~(uint64_t)v107._object & 0x2000000000000000) == 0)
    {
      swift_bridgeObjectRelease((uint64_t)v107._object);
      v107._uint64_t countAndFlagsBits = v45;
      v107._unint64_t object = (void *)v46;
LABEL_33:
      uint64_t v55 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(" from invalid ", 0xEuLL, 1);
      uint64_t v56 = HIBYTE(v46) & 0xF;
      if ((v46 & 0x2000000000000000) == 0) {
        uint64_t v56 = v45 & 0xFFFFFFFFFFFFLL;
      }
      if (!v56 && (v45 & ~v46 & 0x2000000000000000) == 0)
      {
        swift_bridgeObjectRelease(v46);
        uint64_t v107 = v55;
LABEL_46:
        uint64_t v63 = (uint64_t *)swift_getTypeName((Class *)&type metadata for UInt, 0);
        if ((v64 & 0x8000000000000000) == 0)
        {
          int64_t v65 = (uint8x16_t *)v63;
          int64_t v66 = v64;
          int64_t v67 = validateUTF8(_:)(v63, v64);
          if (v69) {
            unint64_t v70 = repairUTF8(_:firstKnownBrokenRange:)(v65->i8, v66, v67, v68);
          }
          else {
            unint64_t v70 = specialized static String._uncheckedFromUTF8(_:isASCII:)(v65, v66, v67 & 1);
          }
          unint64_t v72 = v70;
          uint64_t v73 = v71;
          unint64_t v74 = v107._object;
          uint64_t v75 = ((unint64_t)v107._object >> 56) & 0xF;
          if (((uint64_t)v107._object & 0x2000000000000000) == 0) {
            uint64_t v75 = v107._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
          }
          if (!v75 && (v107._countAndFlagsBits & ~(uint64_t)v107._object & 0x2000000000000000) == 0)
          {
            swift_bridgeObjectRelease((uint64_t)v107._object);
            v107._uint64_t countAndFlagsBits = v72;
            v107._unint64_t object = (void *)v73;
LABEL_63:
            uint64_t countAndFlagsBits = 0x2065756C617620;
            uint64_t v83 = HIBYTE(v73) & 0xF;
            if ((v73 & 0x2000000000000000) == 0) {
              uint64_t v83 = v72 & 0xFFFFFFFFFFFFLL;
            }
            if (v83 || (v72 & ~v73 & 0x2000000000000000) != 0)
            {
              if ((v73 & 0x2000000000000000) == 0
                || (char v84 = specialized _SmallString.init(_:appending:)(v72, v73, 0x2065756C617620uLL, 0xE700000000000000), (v86 & 1) != 0))
              {
                _StringGuts.append(_:)(0x2065756C617620, 0xE700000000000000, 0, 7);
                swift_bridgeObjectRelease(0xE700000000000000);
                uint64_t countAndFlagsBits = v107._countAndFlagsBits;
                uint64_t v87 = (unint64_t)v107._object;
                goto LABEL_77;
              }
              uint64_t countAndFlagsBits = v84;
              uint64_t v87 = v85;
              swift_bridgeObjectRelease(v73);
              swift_bridgeObjectRelease(0xE700000000000000);
            }
            else
            {
              swift_bridgeObjectRelease(v73);
              uint64_t v87 = 0xE700000000000000;
            }
            v107._uint64_t countAndFlagsBits = countAndFlagsBits;
            v107._unint64_t object = (void *)v87;
LABEL_77:
            unint64_t v88 = _uint64ToString(_:radix:uppercase:)(v18, 10, 0);
            unint64_t v89 = v88._countAndFlagsBits;
            unint64_t v90 = (unint64_t)v88._object;
            unint64_t v91 = HIBYTE(v87) & 0xF;
            if ((v87 & 0x2000000000000000) == 0) {
              unint64_t v91 = countAndFlagsBits & 0xFFFFFFFFFFFFLL;
            }
            if (!v91 && (countAndFlagsBits & ~v87 & 0x2000000000000000) == 0)
            {
              swift_bridgeObjectRelease(v87);
              uint64_t v107 = v88;
              goto LABEL_90;
            }
            if ((v87 & 0x2000000000000000) != 0)
            {
              if (((uint64_t)v88._object & 0x2000000000000000) != 0)
              {
                char v93 = specialized _SmallString.init(_:appending:)(countAndFlagsBits, v87, v88._countAndFlagsBits, (unint64_t)v88._object);
                if ((v95 & 1) == 0)
                {
                  uint64_t v96 = v93;
                  unint64_t v97 = v94;
                  swift_bridgeObjectRelease(v87);
                  swift_bridgeObjectRelease((uint64_t)v88._object);
                  v107._uint64_t countAndFlagsBits = v96;
                  v107._unint64_t object = v97;
                  unint64_t v90 = (unint64_t)v97;
                  unint64_t v89 = v96;
LABEL_90:
                  int64x2_t v98 = HIBYTE(v90) & 0xF;
                  if ((v90 & 0x2000000000000000) == 0) {
                    int64x2_t v98 = v89 & 0xFFFFFFFFFFFFLL;
                  }
                  if (v98 || (v89 & ~v90 & 0x2000000000000000) != 0)
                  {
                    if ((v90 & 0x2000000000000000) == 0
                      || (char v99 = specialized _SmallString.init(_:appending:)(v89, v90, 0, 0xE000000000000000),
                          (v101 & 1) != 0))
                    {
                      _StringGuts.append(_:)(0, 0xE000000000000000, 0, 0);
                      swift_bridgeObjectRelease(0xE000000000000000);
                      int64x2_t v102 = v107._countAndFlagsBits;
                      uint64_t v103 = v107._object;
                    }
                    else
                    {
                      int64x2_t v102 = v99;
                      uint64_t v103 = v100;
                      swift_bridgeObjectRelease(v90);
                      swift_bridgeObjectRelease(0xE000000000000000);
                    }
                  }
                  else
                  {
                    swift_bridgeObjectRelease(v90);
                    int64x2_t v102 = 0;
                    uint64_t v103 = (void *)0xE000000000000000;
                  }
                  *(void *)uint64_t v21 = v24;
                  *(void *)(v21 + 8) = v102;
                  *(void *)(v21 + 16) = v103;
                  *(void *)(v21 + 24) = 0;
                  *(unsigned char *)(v21 + 72) = 3;
                  swift_willThrow();
                  return __swift_destroy_boxed_opaque_existential_1Tm(v110);
                }
                goto LABEL_88;
              }
            }
            else if (((uint64_t)v88._object & 0x2000000000000000) != 0)
            {
LABEL_88:
              int64x2_t v92 = ((unint64_t)v88._object >> 56) & 0xF;
              goto LABEL_89;
            }
            int64x2_t v92 = v88._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
LABEL_89:
            _StringGuts.append(_:)(v88._countAndFlagsBits, (unint64_t)v88._object, 0, v92);
            swift_bridgeObjectRelease((uint64_t)v88._object);
            unint64_t v89 = v107._countAndFlagsBits;
            unint64_t v90 = (unint64_t)v107._object;
            goto LABEL_90;
          }
          if (((uint64_t)v107._object & 0x2000000000000000) != 0)
          {
            if ((v71 & 0x2000000000000000) != 0)
            {
              uint64_t v77 = specialized _SmallString.init(_:appending:)(v107._countAndFlagsBits, (unint64_t)v107._object, v70, v71);
              if ((v79 & 1) == 0)
              {
                uint64_t v80 = v77;
                uint64_t v81 = v78;
                swift_bridgeObjectRelease((uint64_t)v74);
                swift_bridgeObjectRelease(v73);
                v107._uint64_t countAndFlagsBits = v80;
                v107._unint64_t object = v81;
                uint64_t v73 = (unint64_t)v81;
                unint64_t v72 = v80;
                goto LABEL_63;
              }
              goto LABEL_61;
            }
          }
          else if ((v71 & 0x2000000000000000) != 0)
          {
LABEL_61:
            unint64_t v76 = HIBYTE(v73) & 0xF;
            goto LABEL_62;
          }
          unint64_t v76 = v70 & 0xFFFFFFFFFFFFLL;
LABEL_62:
          _StringGuts.append(_:)(v72, v73, 0, v76);
          swift_bridgeObjectRelease(v73);
          unint64_t v72 = v107._countAndFlagsBits;
          uint64_t v73 = (unint64_t)v107._object;
          goto LABEL_63;
        }
LABEL_102:
        _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeBufferPointer with negative count", 39, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x53FuLL, 0);
      }
      if ((v46 & 0x2000000000000000) != 0)
      {
        if (((uint64_t)v55._object & 0x2000000000000000) != 0)
        {
          uint64_t v58 = specialized _SmallString.init(_:appending:)(v45, v46, v55._countAndFlagsBits, (unint64_t)v55._object);
          if ((v60 & 1) == 0)
          {
            uint64_t v61 = v58;
            uint64_t v62 = v59;
            swift_bridgeObjectRelease(v46);
            swift_bridgeObjectRelease((uint64_t)v55._object);
            v107._uint64_t countAndFlagsBits = v61;
            v107._unint64_t object = v62;
            goto LABEL_46;
          }
          goto LABEL_44;
        }
      }
      else if (((uint64_t)v55._object & 0x2000000000000000) != 0)
      {
LABEL_44:
        unint64_t v57 = ((unint64_t)v55._object >> 56) & 0xF;
        goto LABEL_45;
      }
      unint64_t v57 = v55._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
LABEL_45:
      _StringGuts.append(_:)(v55._countAndFlagsBits, (unint64_t)v55._object, 0, v57);
      swift_bridgeObjectRelease((uint64_t)v55._object);
      goto LABEL_46;
    }
    if (((uint64_t)v107._object & 0x2000000000000000) != 0)
    {
      if ((v44 & 0x2000000000000000) != 0)
      {
        uint64_t v50 = specialized _SmallString.init(_:appending:)(v107._countAndFlagsBits, (unint64_t)v107._object, v43, v44);
        if ((v52 & 1) == 0)
        {
          unsigned int v53 = v50;
          Swift::String v54 = v51;
          swift_bridgeObjectRelease((uint64_t)object);
          swift_bridgeObjectRelease(v46);
          v107._uint64_t countAndFlagsBits = v53;
          v107._unint64_t object = v54;
          uint64_t v46 = (unint64_t)v54;
          unint64_t v45 = v53;
          goto LABEL_33;
        }
        goto LABEL_31;
      }
    }
    else if ((v44 & 0x2000000000000000) != 0)
    {
LABEL_31:
      unint64_t v49 = HIBYTE(v46) & 0xF;
      goto LABEL_32;
    }
    unint64_t v49 = v43 & 0xFFFFFFFFFFFFLL;
LABEL_32:
    _StringGuts.append(_:)(v45, v46, 0, v49);
    swift_bridgeObjectRelease(v46);
    unint64_t v45 = v107._countAndFlagsBits;
    uint64_t v46 = (unint64_t)v107._object;
    goto LABEL_33;
  }
  return __swift_destroy_boxed_opaque_existential_1Tm(v110);
}

{
  uint64_t v5;
  Class *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  void *v30;
  char v31;
  uint64_t v32;
  void *v33;
  unint64_t v35;
  uint64_t *TypeName;
  uint64_t v37;
  uint8x16_t *v38;
  int64_t v39;
  int64_t v40;
  int64_t v41;
  char v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  void *object;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  void *v51;
  char v52;
  uint64_t v53;
  void *v54;
  Swift::String v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  void *v59;
  char v60;
  uint64_t v61;
  void *v62;
  uint64_t *v63;
  uint64_t v64;
  uint8x16_t *v65;
  int64_t v66;
  int64_t v67;
  int64_t v68;
  char v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  void *v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  void *v78;
  char v79;
  uint64_t v80;
  void *v81;
  uint64_t countAndFlagsBits;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;
  char v86;
  unint64_t v87;
  Swift::String v88;
  unint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  void *v94;
  char v95;
  uint64_t v96;
  void *v97;
  uint64_t v98;
  unint64_t v99;
  void *v100;
  char v101;
  uint64_t v102;
  void *v103;
  Class *v104;
  uint64_t v105;
  uint64_t v106;
  Swift::String v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t *v110;

  uint64_t v106 = a4;
  unint64_t v9 = type metadata accessor for Optional(0, (uint64_t)a2, a3, a4);
  uint64_t v10 = (uint64_t)*(v9 - 1);
  MEMORY[0x1F4188790](v9);
  uint64_t v12 = (char *)&v104 - v11;
  uint64_t v14 = a1[3];
  uint64_t v13 = a1[4];
  uint64x2_t v110 = a1;
  __swift_project_boxed_opaque_existential_0Tm(a1, v14);
  (*(void (**)(Swift::String *__return_ptr, uint64_t, uint64_t))(v13 + 40))(&v107, v14, v13);
  if (!v5)
  {
    uint64_t v104 = v9;
    Swift::String v105 = a5;
    uint64_t v15 = v106;
    uint64_t v16 = v108;
    uint64_t v17 = v109;
    __swift_project_boxed_opaque_existential_0Tm(&v107, v108);
    char v18 = (*(uint64_t (**)(uint64_t, uint64_t))(v17 + 112))(v16, v17);
    __swift_destroy_boxed_opaque_existential_1Tm(&v107._countAndFlagsBits);
    LOBYTE(v107._countAndFlagsBits) = v18;
    (*(void (**)(Swift::String *, Class *, uint64_t))(v15 + 16))(&v107, a2, v15);
    uint64_t v19 = (uint64_t)*(a2 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, Class *))(v19 + 48))(v12, 1, a2) != 1)
    {
      (*(void (**)(uint64_t, char *, Class *))(v19 + 32))(v105, v12, a2);
      return __swift_destroy_boxed_opaque_existential_1Tm(v110);
    }
    (*(void (**)(char *, Class *))(v10 + 8))(v12, v104);
    swift_allocError((uint64_t)&type metadata for DecodingError, (uint64_t)&protocol witness table for DecodingError, 0, 0);
    uint64_t v21 = v20;
    uint64_t v22 = v110[3];
    uint64_t v23 = v110[4];
    __swift_project_boxed_opaque_existential_0Tm(v110, v22);
    uint64_t v24 = (*(uint64_t (**)(uint64_t, uint64_t))(v23 + 8))(v22, v23);
    unint64_t v25 = specialized static String._createEmpty(withInitialCapacity:)(45);
    uint64_t v27 = v26;
    v107._uint64_t countAndFlagsBits = v25;
    v107._unint64_t object = (void *)v26;
    unint64_t v28 = HIBYTE(v26) & 0xF;
    if ((v26 & 0x2000000000000000) == 0) {
      unint64_t v28 = v25 & 0xFFFFFFFFFFFFLL;
    }
    if (v28 || (v25 & ~v26 & 0x2000000000000000) != 0)
    {
      if ((v26 & 0x2000000000000000) != 0
        && (0x80000001816DD670 & 0x2000000000000000) != 0
        && (BOOL v29 = specialized _SmallString.init(_:appending:)(v25, v26, 0xD000000000000012, 0x80000001816DD670 | 0x8000000000000000), (v31 & 1) == 0))
      {
        uint64_t v32 = v29;
        uint64_t v33 = v30;
        swift_bridgeObjectRelease(v27);
        swift_bridgeObjectRelease(0x80000001816DD670 | 0x8000000000000000);
        v107._uint64_t countAndFlagsBits = v32;
        v107._unint64_t object = v33;
      }
      else
      {
        if ((0x80000001816DD670 & 0x2000000000000000) != 0) {
          unint64_t v35 = (0x80000001816DD670 >> 56) & 0xF;
        }
        else {
          unint64_t v35 = 18;
        }
        _StringGuts.append(_:)(0xD000000000000012, 0x80000001816DD670 | 0x8000000000000000, 0, v35);
        swift_bridgeObjectRelease(0x80000001816DD670 | 0x8000000000000000);
      }
    }
    else
    {
      swift_bridgeObjectRelease(v26);
      v107._uint64_t countAndFlagsBits = 0xD000000000000012;
      v107._unint64_t object = (void *)(0x80000001816DD670 | 0x8000000000000000);
    }
    TypeName = (uint64_t *)swift_getTypeName(a2, 0);
    if (v37 < 0) {
      goto LABEL_102;
    }
    int64_t v38 = (uint8x16_t *)TypeName;
    int64_t v39 = v37;
    int64_t v40 = validateUTF8(_:)(TypeName, v37);
    if (v42) {
      unint64_t v43 = repairUTF8(_:firstKnownBrokenRange:)(v38->i8, v39, v40, v41);
    }
    else {
      unint64_t v43 = specialized static String._uncheckedFromUTF8(_:isASCII:)(v38, v39, v40 & 1);
    }
    unint64_t v45 = v43;
    uint64_t v46 = v44;
    unint64_t object = v107._object;
    uint64_t v48 = ((unint64_t)v107._object >> 56) & 0xF;
    if (((uint64_t)v107._object & 0x2000000000000000) == 0) {
      uint64_t v48 = v107._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
    }
    if (!v48 && (v107._countAndFlagsBits & ~(uint64_t)v107._object & 0x2000000000000000) == 0)
    {
      swift_bridgeObjectRelease((uint64_t)v107._object);
      v107._uint64_t countAndFlagsBits = v45;
      v107._unint64_t object = (void *)v46;
LABEL_33:
      uint64_t v55 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(" from invalid ", 0xEuLL, 1);
      uint64_t v56 = HIBYTE(v46) & 0xF;
      if ((v46 & 0x2000000000000000) == 0) {
        uint64_t v56 = v45 & 0xFFFFFFFFFFFFLL;
      }
      if (!v56 && (v45 & ~v46 & 0x2000000000000000) == 0)
      {
        swift_bridgeObjectRelease(v46);
        uint64_t v107 = v55;
LABEL_46:
        uint64_t v63 = (uint64_t *)swift_getTypeName((Class *)&type metadata for UInt8, 0);
        if ((v64 & 0x8000000000000000) == 0)
        {
          int64_t v65 = (uint8x16_t *)v63;
          int64_t v66 = v64;
          int64_t v67 = validateUTF8(_:)(v63, v64);
          if (v69) {
            unint64_t v70 = repairUTF8(_:firstKnownBrokenRange:)(v65->i8, v66, v67, v68);
          }
          else {
            unint64_t v70 = specialized static String._uncheckedFromUTF8(_:isASCII:)(v65, v66, v67 & 1);
          }
          unint64_t v72 = v70;
          uint64_t v73 = v71;
          unint64_t v74 = v107._object;
          uint64_t v75 = ((unint64_t)v107._object >> 56) & 0xF;
          if (((uint64_t)v107._object & 0x2000000000000000) == 0) {
            uint64_t v75 = v107._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
          }
          if (!v75 && (v107._countAndFlagsBits & ~(uint64_t)v107._object & 0x2000000000000000) == 0)
          {
            swift_bridgeObjectRelease((uint64_t)v107._object);
            v107._uint64_t countAndFlagsBits = v72;
            v107._unint64_t object = (void *)v73;
LABEL_63:
            uint64_t countAndFlagsBits = 0x2065756C617620;
            uint64_t v83 = HIBYTE(v73) & 0xF;
            if ((v73 & 0x2000000000000000) == 0) {
              uint64_t v83 = v72 & 0xFFFFFFFFFFFFLL;
            }
            if (v83 || (v72 & ~v73 & 0x2000000000000000) != 0)
            {
              if ((v73 & 0x2000000000000000) == 0
                || (char v84 = specialized _SmallString.init(_:appending:)(v72, v73, 0x2065756C617620uLL, 0xE700000000000000), (v86 & 1) != 0))
              {
                _StringGuts.append(_:)(0x2065756C617620, 0xE700000000000000, 0, 7);
                swift_bridgeObjectRelease(0xE700000000000000);
                uint64_t countAndFlagsBits = v107._countAndFlagsBits;
                uint64_t v87 = (unint64_t)v107._object;
                goto LABEL_77;
              }
              uint64_t countAndFlagsBits = v84;
              uint64_t v87 = v85;
              swift_bridgeObjectRelease(v73);
              swift_bridgeObjectRelease(0xE700000000000000);
            }
            else
            {
              swift_bridgeObjectRelease(v73);
              uint64_t v87 = 0xE700000000000000;
            }
            v107._uint64_t countAndFlagsBits = countAndFlagsBits;
            v107._unint64_t object = (void *)v87;
LABEL_77:
            unint64_t v88 = _uint64ToString(_:radix:uppercase:)(v18, 10, 0);
            unint64_t v89 = v88._countAndFlagsBits;
            unint64_t v90 = (unint64_t)v88._object;
            unint64_t v91 = HIBYTE(v87) & 0xF;
            if ((v87 & 0x2000000000000000) == 0) {
              unint64_t v91 = countAndFlagsBits & 0xFFFFFFFFFFFFLL;
            }
            if (!v91 && (countAndFlagsBits & ~v87 & 0x2000000000000000) == 0)
            {
              swift_bridgeObjectRelease(v87);
              uint64_t v107 = v88;
              goto LABEL_90;
            }
            if ((v87 & 0x2000000000000000) != 0)
            {
              if (((uint64_t)v88._object & 0x2000000000000000) != 0)
              {
                char v93 = specialized _SmallString.init(_:appending:)(countAndFlagsBits, v87, v88._countAndFlagsBits, (unint64_t)v88._object);
                if ((v95 & 1) == 0)
                {
                  uint64_t v96 = v93;
                  unint64_t v97 = v94;
                  swift_bridgeObjectRelease(v87);
                  swift_bridgeObjectRelease((uint64_t)v88._object);
                  v107._uint64_t countAndFlagsBits = v96;
                  v107._unint64_t object = v97;
                  unint64_t v90 = (unint64_t)v97;
                  unint64_t v89 = v96;
LABEL_90:
                  int64x2_t v98 = HIBYTE(v90) & 0xF;
                  if ((v90 & 0x2000000000000000) == 0) {
                    int64x2_t v98 = v89 & 0xFFFFFFFFFFFFLL;
                  }
                  if (v98 || (v89 & ~v90 & 0x2000000000000000) != 0)
                  {
                    if ((v90 & 0x2000000000000000) == 0
                      || (char v99 = specialized _SmallString.init(_:appending:)(v89, v90, 0, 0xE000000000000000),
                          (v101 & 1) != 0))
                    {
                      _StringGuts.append(_:)(0, 0xE000000000000000, 0, 0);
                      swift_bridgeObjectRelease(0xE000000000000000);
                      int64x2_t v102 = v107._countAndFlagsBits;
                      uint64_t v103 = v107._object;
                    }
                    else
                    {
                      int64x2_t v102 = v99;
                      uint64_t v103 = v100;
                      swift_bridgeObjectRelease(v90);
                      swift_bridgeObjectRelease(0xE000000000000000);
                    }
                  }
                  else
                  {
                    swift_bridgeObjectRelease(v90);
                    int64x2_t v102 = 0;
                    uint64_t v103 = (void *)0xE000000000000000;
                  }
                  *(void *)uint64_t v21 = v24;
                  *(void *)(v21 + 8) = v102;
                  *(void *)(v21 + 16) = v103;
                  *(void *)(v21 + 24) = 0;
                  *(unsigned char *)(v21 + 72) = 3;
                  swift_willThrow();
                  return __swift_destroy_boxed_opaque_existential_1Tm(v110);
                }
                goto LABEL_88;
              }
            }
            else if (((uint64_t)v88._object & 0x2000000000000000) != 0)
            {
LABEL_88:
              int64x2_t v92 = ((unint64_t)v88._object >> 56) & 0xF;
              goto LABEL_89;
            }
            int64x2_t v92 = v88._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
LABEL_89:
            _StringGuts.append(_:)(v88._countAndFlagsBits, (unint64_t)v88._object, 0, v92);
            swift_bridgeObjectRelease((uint64_t)v88._object);
            unint64_t v89 = v107._countAndFlagsBits;
            unint64_t v90 = (unint64_t)v107._object;
            goto LABEL_90;
          }
          if (((uint64_t)v107._object & 0x2000000000000000) != 0)
          {
            if ((v71 & 0x2000000000000000) != 0)
            {
              uint64_t v77 = specialized _SmallString.init(_:appending:)(v107._countAndFlagsBits, (unint64_t)v107._object, v70, v71);
              if ((v79 & 1) == 0)
              {
                uint64_t v80 = v77;
                uint64_t v81 = v78;
                swift_bridgeObjectRelease((uint64_t)v74);
                swift_bridgeObjectRelease(v73);
                v107._uint64_t countAndFlagsBits = v80;
                v107._unint64_t object = v81;
                uint64_t v73 = (unint64_t)v81;
                unint64_t v72 = v80;
                goto LABEL_63;
              }
              goto LABEL_61;
            }
          }
          else if ((v71 & 0x2000000000000000) != 0)
          {
LABEL_61:
            unint64_t v76 = HIBYTE(v73) & 0xF;
            goto LABEL_62;
          }
          unint64_t v76 = v70 & 0xFFFFFFFFFFFFLL;
LABEL_62:
          _StringGuts.append(_:)(v72, v73, 0, v76);
          swift_bridgeObjectRelease(v73);
          unint64_t v72 = v107._countAndFlagsBits;
          uint64_t v73 = (unint64_t)v107._object;
          goto LABEL_63;
        }
LABEL_102:
        _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeBufferPointer with negative count", 39, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x53FuLL, 0);
      }
      if ((v46 & 0x2000000000000000) != 0)
      {
        if (((uint64_t)v55._object & 0x2000000000000000) != 0)
        {
          uint64_t v58 = specialized _SmallString.init(_:appending:)(v45, v46, v55._countAndFlagsBits, (unint64_t)v55._object);
          if ((v60 & 1) == 0)
          {
            uint64_t v61 = v58;
            uint64_t v62 = v59;
            swift_bridgeObjectRelease(v46);
            swift_bridgeObjectRelease((uint64_t)v55._object);
            v107._uint64_t countAndFlagsBits = v61;
            v107._unint64_t object = v62;
            goto LABEL_46;
          }
          goto LABEL_44;
        }
      }
      else if (((uint64_t)v55._object & 0x2000000000000000) != 0)
      {
LABEL_44:
        unint64_t v57 = ((unint64_t)v55._object >> 56) & 0xF;
        goto LABEL_45;
      }
      unint64_t v57 = v55._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
LABEL_45:
      _StringGuts.append(_:)(v55._countAndFlagsBits, (unint64_t)v55._object, 0, v57);
      swift_bridgeObjectRelease((uint64_t)v55._object);
      goto LABEL_46;
    }
    if (((uint64_t)v107._object & 0x2000000000000000) != 0)
    {
      if ((v44 & 0x2000000000000000) != 0)
      {
        uint64_t v50 = specialized _SmallString.init(_:appending:)(v107._countAndFlagsBits, (unint64_t)v107._object, v43, v44);
        if ((v52 & 1) == 0)
        {
          unsigned int v53 = v50;
          Swift::String v54 = v51;
          swift_bridgeObjectRelease((uint64_t)object);
          swift_bridgeObjectRelease(v46);
          v107._uint64_t countAndFlagsBits = v53;
          v107._unint64_t object = v54;
          uint64_t v46 = (unint64_t)v54;
          unint64_t v45 = v53;
          goto LABEL_33;
        }
        goto LABEL_31;
      }
    }
    else if ((v44 & 0x2000000000000000) != 0)
    {
LABEL_31:
      unint64_t v49 = HIBYTE(v46) & 0xF;
      goto LABEL_32;
    }
    unint64_t v49 = v43 & 0xFFFFFFFFFFFFLL;
LABEL_32:
    _StringGuts.append(_:)(v45, v46, 0, v49);
    swift_bridgeObjectRelease(v46);
    unint64_t v45 = v107._countAndFlagsBits;
    uint64_t v46 = (unint64_t)v107._object;
    goto LABEL_33;
  }
  return __swift_destroy_boxed_opaque_existential_1Tm(v110);
}

{
  uint64_t v5;
  Class *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int16 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  void *v30;
  char v31;
  uint64_t v32;
  void *v33;
  unint64_t v35;
  uint64_t *TypeName;
  uint64_t v37;
  uint8x16_t *v38;
  int64_t v39;
  int64_t v40;
  int64_t v41;
  char v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  void *object;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  void *v51;
  char v52;
  uint64_t v53;
  void *v54;
  Swift::String v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  void *v59;
  char v60;
  uint64_t v61;
  void *v62;
  uint64_t *v63;
  uint64_t v64;
  uint8x16_t *v65;
  int64_t v66;
  int64_t v67;
  int64_t v68;
  char v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  void *v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  void *v78;
  char v79;
  uint64_t v80;
  void *v81;
  uint64_t countAndFlagsBits;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;
  char v86;
  unint64_t v87;
  Swift::String v88;
  unint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  void *v94;
  char v95;
  uint64_t v96;
  void *v97;
  uint64_t v98;
  unint64_t v99;
  void *v100;
  char v101;
  uint64_t v102;
  void *v103;
  Class *v104;
  uint64_t v105;
  uint64_t v106;
  Swift::String v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t *v110;

  uint64_t v106 = a4;
  unint64_t v9 = type metadata accessor for Optional(0, (uint64_t)a2, a3, a4);
  uint64_t v10 = (uint64_t)*(v9 - 1);
  MEMORY[0x1F4188790](v9);
  uint64_t v12 = (char *)&v104 - v11;
  uint64_t v14 = a1[3];
  uint64_t v13 = a1[4];
  uint64x2_t v110 = a1;
  __swift_project_boxed_opaque_existential_0Tm(a1, v14);
  (*(void (**)(Swift::String *__return_ptr, uint64_t, uint64_t))(v13 + 40))(&v107, v14, v13);
  if (!v5)
  {
    uint64_t v104 = v9;
    Swift::String v105 = a5;
    uint64_t v15 = v106;
    uint64_t v16 = v108;
    uint64_t v17 = v109;
    __swift_project_boxed_opaque_existential_0Tm(&v107, v108);
    char v18 = (*(uint64_t (**)(uint64_t, uint64_t))(v17 + 120))(v16, v17);
    __swift_destroy_boxed_opaque_existential_1Tm(&v107._countAndFlagsBits);
    LOWORD(v107._countAndFlagsBits) = v18;
    (*(void (**)(Swift::String *, Class *, uint64_t))(v15 + 16))(&v107, a2, v15);
    uint64_t v19 = (uint64_t)*(a2 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, Class *))(v19 + 48))(v12, 1, a2) != 1)
    {
      (*(void (**)(uint64_t, char *, Class *))(v19 + 32))(v105, v12, a2);
      return __swift_destroy_boxed_opaque_existential_1Tm(v110);
    }
    (*(void (**)(char *, Class *))(v10 + 8))(v12, v104);
    swift_allocError((uint64_t)&type metadata for DecodingError, (uint64_t)&protocol witness table for DecodingError, 0, 0);
    uint64_t v21 = v20;
    uint64_t v22 = v110[3];
    uint64_t v23 = v110[4];
    __swift_project_boxed_opaque_existential_0Tm(v110, v22);
    uint64_t v24 = (*(uint64_t (**)(uint64_t, uint64_t))(v23 + 8))(v22, v23);
    unint64_t v25 = specialized static String._createEmpty(withInitialCapacity:)(45);
    uint64_t v27 = v26;
    v107._uint64_t countAndFlagsBits = v25;
    v107._unint64_t object = (void *)v26;
    unint64_t v28 = HIBYTE(v26) & 0xF;
    if ((v26 & 0x2000000000000000) == 0) {
      unint64_t v28 = v25 & 0xFFFFFFFFFFFFLL;
    }
    if (v28 || (v25 & ~v26 & 0x2000000000000000) != 0)
    {
      if ((v26 & 0x2000000000000000) != 0
        && (0x80000001816DD670 & 0x2000000000000000) != 0
        && (BOOL v29 = specialized _SmallString.init(_:appending:)(v25, v26, 0xD000000000000012, 0x80000001816DD670 | 0x8000000000000000), (v31 & 1) == 0))
      {
        uint64_t v32 = v29;
        uint64_t v33 = v30;
        swift_bridgeObjectRelease(v27);
        swift_bridgeObjectRelease(0x80000001816DD670 | 0x8000000000000000);
        v107._uint64_t countAndFlagsBits = v32;
        v107._unint64_t object = v33;
      }
      else
      {
        if ((0x80000001816DD670 & 0x2000000000000000) != 0) {
          unint64_t v35 = (0x80000001816DD670 >> 56) & 0xF;
        }
        else {
          unint64_t v35 = 18;
        }
        _StringGuts.append(_:)(0xD000000000000012, 0x80000001816DD670 | 0x8000000000000000, 0, v35);
        swift_bridgeObjectRelease(0x80000001816DD670 | 0x8000000000000000);
      }
    }
    else
    {
      swift_bridgeObjectRelease(v26);
      v107._uint64_t countAndFlagsBits = 0xD000000000000012;
      v107._unint64_t object = (void *)(0x80000001816DD670 | 0x8000000000000000);
    }
    TypeName = (uint64_t *)swift_getTypeName(a2, 0);
    if (v37 < 0) {
      goto LABEL_102;
    }
    int64_t v38 = (uint8x16_t *)TypeName;
    int64_t v39 = v37;
    int64_t v40 = validateUTF8(_:)(TypeName, v37);
    if (v42) {
      unint64_t v43 = repairUTF8(_:firstKnownBrokenRange:)(v38->i8, v39, v40, v41);
    }
    else {
      unint64_t v43 = specialized static String._uncheckedFromUTF8(_:isASCII:)(v38, v39, v40 & 1);
    }
    unint64_t v45 = v43;
    uint64_t v46 = v44;
    unint64_t object = v107._object;
    uint64_t v48 = ((unint64_t)v107._object >> 56) & 0xF;
    if (((uint64_t)v107._object & 0x2000000000000000) == 0) {
      uint64_t v48 = v107._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
    }
    if (!v48 && (v107._countAndFlagsBits & ~(uint64_t)v107._object & 0x2000000000000000) == 0)
    {
      swift_bridgeObjectRelease((uint64_t)v107._object);
      v107._uint64_t countAndFlagsBits = v45;
      v107._unint64_t object = (void *)v46;
LABEL_33:
      uint64_t v55 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(" from invalid ", 0xEuLL, 1);
      uint64_t v56 = HIBYTE(v46) & 0xF;
      if ((v46 & 0x2000000000000000) == 0) {
        uint64_t v56 = v45 & 0xFFFFFFFFFFFFLL;
      }
      if (!v56 && (v45 & ~v46 & 0x2000000000000000) == 0)
      {
        swift_bridgeObjectRelease(v46);
        uint64_t v107 = v55;
LABEL_46:
        uint64_t v63 = (uint64_t *)swift_getTypeName((Class *)&type metadata for UInt16, 0);
        if ((v64 & 0x8000000000000000) == 0)
        {
          int64_t v65 = (uint8x16_t *)v63;
          int64_t v66 = v64;
          int64_t v67 = validateUTF8(_:)(v63, v64);
          if (v69) {
            unint64_t v70 = repairUTF8(_:firstKnownBrokenRange:)(v65->i8, v66, v67, v68);
          }
          else {
            unint64_t v70 = specialized static String._uncheckedFromUTF8(_:isASCII:)(v65, v66, v67 & 1);
          }
          unint64_t v72 = v70;
          uint64_t v73 = v71;
          unint64_t v74 = v107._object;
          uint64_t v75 = ((unint64_t)v107._object >> 56) & 0xF;
          if (((uint64_t)v107._object & 0x2000000000000000) == 0) {
            uint64_t v75 = v107._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
          }
          if (!v75 && (v107._countAndFlagsBits & ~(uint64_t)v107._object & 0x2000000000000000) == 0)
          {
            swift_bridgeObjectRelease((uint64_t)v107._object);
            v107._uint64_t countAndFlagsBits = v72;
            v107._unint64_t object = (void *)v73;
LABEL_63:
            uint64_t countAndFlagsBits = 0x2065756C617620;
            uint64_t v83 = HIBYTE(v73) & 0xF;
            if ((v73 & 0x2000000000000000) == 0) {
              uint64_t v83 = v72 & 0xFFFFFFFFFFFFLL;
            }
            if (v83 || (v72 & ~v73 & 0x2000000000000000) != 0)
            {
              if ((v73 & 0x2000000000000000) == 0
                || (char v84 = specialized _SmallString.init(_:appending:)(v72, v73, 0x2065756C617620uLL, 0xE700000000000000), (v86 & 1) != 0))
              {
                _StringGuts.append(_:)(0x2065756C617620, 0xE700000000000000, 0, 7);
                swift_bridgeObjectRelease(0xE700000000000000);
                uint64_t countAndFlagsBits = v107._countAndFlagsBits;
                uint64_t v87 = (unint64_t)v107._object;
                goto LABEL_77;
              }
              uint64_t countAndFlagsBits = v84;
              uint64_t v87 = v85;
              swift_bridgeObjectRelease(v73);
              swift_bridgeObjectRelease(0xE700000000000000);
            }
            else
            {
              swift_bridgeObjectRelease(v73);
              uint64_t v87 = 0xE700000000000000;
            }
            v107._uint64_t countAndFlagsBits = countAndFlagsBits;
            v107._unint64_t object = (void *)v87;
LABEL_77:
            unint64_t v88 = _uint64ToString(_:radix:uppercase:)(v18, 10, 0);
            unint64_t v89 = v88._countAndFlagsBits;
            unint64_t v90 = (unint64_t)v88._object;
            unint64_t v91 = HIBYTE(v87) & 0xF;
            if ((v87 & 0x2000000000000000) == 0) {
              unint64_t v91 = countAndFlagsBits & 0xFFFFFFFFFFFFLL;
            }
            if (!v91 && (countAndFlagsBits & ~v87 & 0x2000000000000000) == 0)
            {
              swift_bridgeObjectRelease(v87);
              uint64_t v107 = v88;
              goto LABEL_90;
            }
            if ((v87 & 0x2000000000000000) != 0)
            {
              if (((uint64_t)v88._object & 0x2000000000000000) != 0)
              {
                char v93 = specialized _SmallString.init(_:appending:)(countAndFlagsBits, v87, v88._countAndFlagsBits, (unint64_t)v88._object);
                if ((v95 & 1) == 0)
                {
                  uint64_t v96 = v93;
                  unint64_t v97 = v94;
                  swift_bridgeObjectRelease(v87);
                  swift_bridgeObjectRelease((uint64_t)v88._object);
                  v107._uint64_t countAndFlagsBits = v96;
                  v107._unint64_t object = v97;
                  unint64_t v90 = (unint64_t)v97;
                  unint64_t v89 = v96;
LABEL_90:
                  int64x2_t v98 = HIBYTE(v90) & 0xF;
                  if ((v90 & 0x2000000000000000) == 0) {
                    int64x2_t v98 = v89 & 0xFFFFFFFFFFFFLL;
                  }
                  if (v98 || (v89 & ~v90 & 0x2000000000000000) != 0)
                  {
                    if ((v90 & 0x2000000000000000) == 0
                      || (char v99 = specialized _SmallString.init(_:appending:)(v89, v90, 0, 0xE000000000000000),
                          (v101 & 1) != 0))
                    {
                      _StringGuts.append(_:)(0, 0xE000000000000000, 0, 0);
                      swift_bridgeObjectRelease(0xE000000000000000);
                      int64x2_t v102 = v107._countAndFlagsBits;
                      uint64_t v103 = v107._object;
                    }
                    else
                    {
                      int64x2_t v102 = v99;
                      uint64_t v103 = v100;
                      swift_bridgeObjectRelease(v90);
                      swift_bridgeObjectRelease(0xE000000000000000);
                    }
                  }
                  else
                  {
                    swift_bridgeObjectRelease(v90);
                    int64x2_t v102 = 0;
                    uint64_t v103 = (void *)0xE000000000000000;
                  }
                  *(void *)uint64_t v21 = v24;
                  *(void *)(v21 + 8) = v102;
                  *(void *)(v21 + 16) = v103;
                  *(void *)(v21 + 24) = 0;
                  *(unsigned char *)(v21 + 72) = 3;
                  swift_willThrow();
                  return __swift_destroy_boxed_opaque_existential_1Tm(v110);
                }
                goto LABEL_88;
              }
            }
            else if (((uint64_t)v88._object & 0x2000000000000000) != 0)
            {
LABEL_88:
              int64x2_t v92 = ((unint64_t)v88._object >> 56) & 0xF;
              goto LABEL_89;
            }
            int64x2_t v92 = v88._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
LABEL_89:
            _StringGuts.append(_:)(v88._countAndFlagsBits, (unint64_t)v88._object, 0, v92);
            swift_bridgeObjectRelease((uint64_t)v88._object);
            unint64_t v89 = v107._countAndFlagsBits;
            unint64_t v90 = (unint64_t)v107._object;
            goto LABEL_90;
          }
          if (((uint64_t)v107._object & 0x2000000000000000) != 0)
          {
            if ((v71 & 0x2000000000000000) != 0)
            {
              uint64_t v77 = specialized _SmallString.init(_:appending:)(v107._countAndFlagsBits, (unint64_t)v107._object, v70, v71);
              if ((v79 & 1) == 0)
              {
                uint64_t v80 = v77;
                uint64_t v81 = v78;
                swift_bridgeObjectRelease((uint64_t)v74);
                swift_bridgeObjectRelease(v73);
                v107._uint64_t countAndFlagsBits = v80;
                v107._unint64_t object = v81;
                uint64_t v73 = (unint64_t)v81;
                unint64_t v72 = v80;
                goto LABEL_63;
              }
              goto LABEL_61;
            }
          }
          else if ((v71 & 0x2000000000000000) != 0)
          {
LABEL_61:
            unint64_t v76 = HIBYTE(v73) & 0xF;
            goto LABEL_62;
          }
          unint64_t v76 = v70 & 0xFFFFFFFFFFFFLL;
LABEL_62:
          _StringGuts.append(_:)(v72, v73, 0, v76);
          swift_bridgeObjectRelease(v73);
          unint64_t v72 = v107._countAndFlagsBits;
          uint64_t v73 = (unint64_t)v107._object;
          goto LABEL_63;
        }
LABEL_102:
        _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeBufferPointer with negative count", 39, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x53FuLL, 0);
      }
      if ((v46 & 0x2000000000000000) != 0)
      {
        if (((uint64_t)v55._object & 0x2000000000000000) != 0)
        {
          uint64_t v58 = specialized _SmallString.init(_:appending:)(v45, v46, v55._countAndFlagsBits, (unint64_t)v55._object);
          if ((v60 & 1) == 0)
          {
            uint64_t v61 = v58;
            uint64_t v62 = v59;
            swift_bridgeObjectRelease(v46);
            swift_bridgeObjectRelease((uint64_t)v55._object);
            v107._uint64_t countAndFlagsBits = v61;
            v107._unint64_t object = v62;
            goto LABEL_46;
          }
          goto LABEL_44;
        }
      }
      else if (((uint64_t)v55._object & 0x2000000000000000) != 0)
      {
LABEL_44:
        unint64_t v57 = ((unint64_t)v55._object >> 56) & 0xF;
        goto LABEL_45;
      }
      unint64_t v57 = v55._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
LABEL_45:
      _StringGuts.append(_:)(v55._countAndFlagsBits, (unint64_t)v55._object, 0, v57);
      swift_bridgeObjectRelease((uint64_t)v55._object);
      goto LABEL_46;
    }
    if (((uint64_t)v107._object & 0x2000000000000000) != 0)
    {
      if ((v44 & 0x2000000000000000) != 0)
      {
        uint64_t v50 = specialized _SmallString.init(_:appending:)(v107._countAndFlagsBits, (unint64_t)v107._object, v43, v44);
        if ((v52 & 1) == 0)
        {
          unsigned int v53 = v50;
          Swift::String v54 = v51;
          swift_bridgeObjectRelease((uint64_t)object);
          swift_bridgeObjectRelease(v46);
          v107._uint64_t countAndFlagsBits = v53;
          v107._unint64_t object = v54;
          uint64_t v46 = (unint64_t)v54;
          unint64_t v45 = v53;
          goto LABEL_33;
        }
        goto LABEL_31;
      }
    }
    else if ((v44 & 0x2000000000000000) != 0)
    {
LABEL_31:
      unint64_t v49 = HIBYTE(v46) & 0xF;
      goto LABEL_32;
    }
    unint64_t v49 = v43 & 0xFFFFFFFFFFFFLL;
LABEL_32:
    _StringGuts.append(_:)(v45, v46, 0, v49);
    swift_bridgeObjectRelease(v46);
    unint64_t v45 = v107._countAndFlagsBits;
    uint64_t v46 = (unint64_t)v107._object;
    goto LABEL_33;
  }
  return __swift_destroy_boxed_opaque_existential_1Tm(v110);
}

{
  uint64_t v5;
  Class *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  void *v30;
  char v31;
  uint64_t v32;
  void *v33;
  unint64_t v35;
  uint64_t *TypeName;
  uint64_t v37;
  uint8x16_t *v38;
  int64_t v39;
  int64_t v40;
  int64_t v41;
  char v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  void *object;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  void *v51;
  char v52;
  uint64_t v53;
  void *v54;
  Swift::String v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  void *v59;
  char v60;
  uint64_t v61;
  void *v62;
  uint64_t *v63;
  uint64_t v64;
  uint8x16_t *v65;
  int64_t v66;
  int64_t v67;
  int64_t v68;
  char v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  void *v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  void *v78;
  char v79;
  uint64_t v80;
  void *v81;
  uint64_t countAndFlagsBits;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;
  char v86;
  unint64_t v87;
  Swift::String v88;
  unint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  void *v94;
  char v95;
  uint64_t v96;
  void *v97;
  uint64_t v98;
  unint64_t v99;
  void *v100;
  char v101;
  uint64_t v102;
  void *v103;
  Class *v104;
  uint64_t v105;
  uint64_t v106;
  Swift::String v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t *v110;

  uint64_t v106 = a4;
  unint64_t v9 = type metadata accessor for Optional(0, (uint64_t)a2, a3, a4);
  uint64_t v10 = (uint64_t)*(v9 - 1);
  MEMORY[0x1F4188790](v9);
  uint64_t v12 = (char *)&v104 - v11;
  uint64_t v14 = a1[3];
  uint64_t v13 = a1[4];
  uint64x2_t v110 = a1;
  __swift_project_boxed_opaque_existential_0Tm(a1, v14);
  (*(void (**)(Swift::String *__return_ptr, uint64_t, uint64_t))(v13 + 40))(&v107, v14, v13);
  if (!v5)
  {
    uint64_t v104 = v9;
    Swift::String v105 = a5;
    uint64_t v15 = v106;
    uint64_t v16 = v108;
    uint64_t v17 = v109;
    __swift_project_boxed_opaque_existential_0Tm(&v107, v108);
    char v18 = (*(uint64_t (**)(uint64_t, uint64_t))(v17 + 128))(v16, v17);
    __swift_destroy_boxed_opaque_existential_1Tm(&v107._countAndFlagsBits);
    LODWORD(v107._countAndFlagsBits) = v18;
    (*(void (**)(Swift::String *, Class *, uint64_t))(v15 + 16))(&v107, a2, v15);
    uint64_t v19 = (uint64_t)*(a2 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, Class *))(v19 + 48))(v12, 1, a2) != 1)
    {
      (*(void (**)(uint64_t, char *, Class *))(v19 + 32))(v105, v12, a2);
      return __swift_destroy_boxed_opaque_existential_1Tm(v110);
    }
    (*(void (**)(char *, Class *))(v10 + 8))(v12, v104);
    swift_allocError((uint64_t)&type metadata for DecodingError, (uint64_t)&protocol witness table for DecodingError, 0, 0);
    uint64_t v21 = v20;
    uint64_t v22 = v110[3];
    uint64_t v23 = v110[4];
    __swift_project_boxed_opaque_existential_0Tm(v110, v22);
    uint64_t v24 = (*(uint64_t (**)(uint64_t, uint64_t))(v23 + 8))(v22, v23);
    unint64_t v25 = specialized static String._createEmpty(withInitialCapacity:)(45);
    uint64_t v27 = v26;
    v107._uint64_t countAndFlagsBits = v25;
    v107._unint64_t object = (void *)v26;
    unint64_t v28 = HIBYTE(v26) & 0xF;
    if ((v26 & 0x2000000000000000) == 0) {
      unint64_t v28 = v25 & 0xFFFFFFFFFFFFLL;
    }
    if (v28 || (v25 & ~v26 & 0x2000000000000000) != 0)
    {
      if ((v26 & 0x2000000000000000) != 0
        && (0x80000001816DD670 & 0x2000000000000000) != 0
        && (BOOL v29 = specialized _SmallString.init(_:appending:)(v25, v26, 0xD000000000000012, 0x80000001816DD670 | 0x8000000000000000), (v31 & 1) == 0))
      {
        uint64_t v32 = v29;
        uint64_t v33 = v30;
        swift_bridgeObjectRelease(v27);
        swift_bridgeObjectRelease(0x80000001816DD670 | 0x8000000000000000);
        v107._uint64_t countAndFlagsBits = v32;
        v107._unint64_t object = v33;
      }
      else
      {
        if ((0x80000001816DD670 & 0x2000000000000000) != 0) {
          unint64_t v35 = (0x80000001816DD670 >> 56) & 0xF;
        }
        else {
          unint64_t v35 = 18;
        }
        _StringGuts.append(_:)(0xD000000000000012, 0x80000001816DD670 | 0x8000000000000000, 0, v35);
        swift_bridgeObjectRelease(0x80000001816DD670 | 0x8000000000000000);
      }
    }
    else
    {
      swift_bridgeObjectRelease(v26);
      v107._uint64_t countAndFlagsBits = 0xD000000000000012;
      v107._unint64_t object = (void *)(0x80000001816DD670 | 0x8000000000000000);
    }
    TypeName = (uint64_t *)swift_getTypeName(a2, 0);
    if (v37 < 0) {
      goto LABEL_102;
    }
    int64_t v38 = (uint8x16_t *)TypeName;
    int64_t v39 = v37;
    int64_t v40 = validateUTF8(_:)(TypeName, v37);
    if (v42) {
      unint64_t v43 = repairUTF8(_:firstKnownBrokenRange:)(v38->i8, v39, v40, v41);
    }
    else {
      unint64_t v43 = specialized static String._uncheckedFromUTF8(_:isASCII:)(v38, v39, v40 & 1);
    }
    unint64_t v45 = v43;
    uint64_t v46 = v44;
    unint64_t object = v107._object;
    uint64_t v48 = ((unint64_t)v107._object >> 56) & 0xF;
    if (((uint64_t)v107._object & 0x2000000000000000) == 0) {
      uint64_t v48 = v107._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
    }
    if (!v48 && (v107._countAndFlagsBits & ~(uint64_t)v107._object & 0x2000000000000000) == 0)
    {
      swift_bridgeObjectRelease((uint64_t)v107._object);
      v107._uint64_t countAndFlagsBits = v45;
      v107._unint64_t object = (void *)v46;
LABEL_33:
      uint64_t v55 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(" from invalid ", 0xEuLL, 1);
      uint64_t v56 = HIBYTE(v46) & 0xF;
      if ((v46 & 0x2000000000000000) == 0) {
        uint64_t v56 = v45 & 0xFFFFFFFFFFFFLL;
      }
      if (!v56 && (v45 & ~v46 & 0x2000000000000000) == 0)
      {
        swift_bridgeObjectRelease(v46);
        uint64_t v107 = v55;
LABEL_46:
        uint64_t v63 = (uint64_t *)swift_getTypeName((Class *)&type metadata for UInt32, 0);
        if ((v64 & 0x8000000000000000) == 0)
        {
          int64_t v65 = (uint8x16_t *)v63;
          int64_t v66 = v64;
          int64_t v67 = validateUTF8(_:)(v63, v64);
          if (v69) {
            unint64_t v70 = repairUTF8(_:firstKnownBrokenRange:)(v65->i8, v66, v67, v68);
          }
          else {
            unint64_t v70 = specialized static String._uncheckedFromUTF8(_:isASCII:)(v65, v66, v67 & 1);
          }
          unint64_t v72 = v70;
          uint64_t v73 = v71;
          unint64_t v74 = v107._object;
          uint64_t v75 = ((unint64_t)v107._object >> 56) & 0xF;
          if (((uint64_t)v107._object & 0x2000000000000000) == 0) {
            uint64_t v75 = v107._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
          }
          if (!v75 && (v107._countAndFlagsBits & ~(uint64_t)v107._object & 0x2000000000000000) == 0)
          {
            swift_bridgeObjectRelease((uint64_t)v107._object);
            v107._uint64_t countAndFlagsBits = v72;
            v107._unint64_t object = (void *)v73;
LABEL_63:
            uint64_t countAndFlagsBits = 0x2065756C617620;
            uint64_t v83 = HIBYTE(v73) & 0xF;
            if ((v73 & 0x2000000000000000) == 0) {
              uint64_t v83 = v72 & 0xFFFFFFFFFFFFLL;
            }
            if (v83 || (v72 & ~v73 & 0x2000000000000000) != 0)
            {
              if ((v73 & 0x2000000000000000) == 0
                || (char v84 = specialized _SmallString.init(_:appending:)(v72, v73, 0x2065756C617620uLL, 0xE700000000000000), (v86 & 1) != 0))
              {
                _StringGuts.append(_:)(0x2065756C617620, 0xE700000000000000, 0, 7);
                swift_bridgeObjectRelease(0xE700000000000000);
                uint64_t countAndFlagsBits = v107._countAndFlagsBits;
                uint64_t v87 = (unint64_t)v107._object;
                goto LABEL_77;
              }
              uint64_t countAndFlagsBits = v84;
              uint64_t v87 = v85;
              swift_bridgeObjectRelease(v73);
              swift_bridgeObjectRelease(0xE700000000000000);
            }
            else
            {
              swift_bridgeObjectRelease(v73);
              uint64_t v87 = 0xE700000000000000;
            }
            v107._uint64_t countAndFlagsBits = countAndFlagsBits;
            v107._unint64_t object = (void *)v87;
LABEL_77:
            unint64_t v88 = _uint64ToString(_:radix:uppercase:)(v18, 10, 0);
            unint64_t v89 = v88._countAndFlagsBits;
            unint64_t v90 = (unint64_t)v88._object;
            unint64_t v91 = HIBYTE(v87) & 0xF;
            if ((v87 & 0x2000000000000000) == 0) {
              unint64_t v91 = countAndFlagsBits & 0xFFFFFFFFFFFFLL;
            }
            if (!v91 && (countAndFlagsBits & ~v87 & 0x2000000000000000) == 0)
            {
              swift_bridgeObjectRelease(v87);
              uint64_t v107 = v88;
              goto LABEL_90;
            }
            if ((v87 & 0x2000000000000000) != 0)
            {
              if (((uint64_t)v88._object & 0x2000000000000000) != 0)
              {
                char v93 = specialized _SmallString.init(_:appending:)(countAndFlagsBits, v87, v88._countAndFlagsBits, (unint64_t)v88._object);
                if ((v95 & 1) == 0)
                {
                  uint64_t v96 = v93;
                  unint64_t v97 = v94;
                  swift_bridgeObjectRelease(v87);
                  swift_bridgeObjectRelease((uint64_t)v88._object);
                  v107._uint64_t countAndFlagsBits = v96;
                  v107._unint64_t object = v97;
                  unint64_t v90 = (unint64_t)v97;
                  unint64_t v89 = v96;
LABEL_90:
                  int64x2_t v98 = HIBYTE(v90) & 0xF;
                  if ((v90 & 0x2000000000000000) == 0) {
                    int64x2_t v98 = v89 & 0xFFFFFFFFFFFFLL;
                  }
                  if (v98 || (v89 & ~v90 & 0x2000000000000000) != 0)
                  {
                    if ((v90 & 0x2000000000000000) == 0
                      || (char v99 = specialized _SmallString.init(_:appending:)(v89, v90, 0, 0xE000000000000000),
                          (v101 & 1) != 0))
                    {
                      _StringGuts.append(_:)(0, 0xE000000000000000, 0, 0);
                      swift_bridgeObjectRelease(0xE000000000000000);
                      int64x2_t v102 = v107._countAndFlagsBits;
                      uint64_t v103 = v107._object;
                    }
                    else
                    {
                      int64x2_t v102 = v99;
                      uint64_t v103 = v100;
                      swift_bridgeObjectRelease(v90);
                      swift_bridgeObjectRelease(0xE000000000000000);
                    }
                  }
                  else
                  {
                    swift_bridgeObjectRelease(v90);
                    int64x2_t v102 = 0;
                    uint64_t v103 = (void *)0xE000000000000000;
                  }
                  *(void *)uint64_t v21 = v24;
                  *(void *)(v21 + 8) = v102;
                  *(void *)(v21 + 16) = v103;
                  *(void *)(v21 + 24) = 0;
                  *(unsigned char *)(v21 + 72) = 3;
                  swift_willThrow();
                  return __swift_destroy_boxed_opaque_existential_1Tm(v110);
                }
                goto LABEL_88;
              }
            }
            else if (((uint64_t)v88._object & 0x2000000000000000) != 0)
            {
LABEL_88:
              int64x2_t v92 = ((unint64_t)v88._object >> 56) & 0xF;
              goto LABEL_89;
            }
            int64x2_t v92 = v88._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
LABEL_89:
            _StringGuts.append(_:)(v88._countAndFlagsBits, (unint64_t)v88._object, 0, v92);
            swift_bridgeObjectRelease((uint64_t)v88._object);
            unint64_t v89 = v107._countAndFlagsBits;
            unint64_t v90 = (unint64_t)v107._object;
            goto LABEL_90;
          }
          if (((uint64_t)v107._object & 0x2000000000000000) != 0)
          {
            if ((v71 & 0x2000000000000000) != 0)
            {
              uint64_t v77 = specialized _SmallString.init(_:appending:)(v107._countAndFlagsBits, (unint64_t)v107._object, v70, v71);
              if ((v79 & 1) == 0)
              {
                uint64_t v80 = v77;
                uint64_t v81 = v78;
                swift_bridgeObjectRelease((uint64_t)v74);
                swift_bridgeObjectRelease(v73);
                v107._uint64_t countAndFlagsBits = v80;
                v107._unint64_t object = v81;
                uint64_t v73 = (unint64_t)v81;
                unint64_t v72 = v80;
                goto LABEL_63;
              }
              goto LABEL_61;
            }
          }
          else if ((v71 & 0x2000000000000000) != 0)
          {
LABEL_61:
            unint64_t v76 = HIBYTE(v73) & 0xF;
            goto LABEL_62;
          }
          unint64_t v76 = v70 & 0xFFFFFFFFFFFFLL;
LABEL_62:
          _StringGuts.append(_:)(v72, v73, 0, v76);
          swift_bridgeObjectRelease(v73);
          unint64_t v72 = v107._countAndFlagsBits;
          uint64_t v73 = (unint64_t)v107._object;
          goto LABEL_63;
        }
LABEL_102:
        _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeBufferPointer with negative count", 39, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x53FuLL, 0);
      }
      if ((v46 & 0x2000000000000000) != 0)
      {
        if (((uint64_t)v55._object & 0x2000000000000000) != 0)
        {
          uint64_t v58 = specialized _SmallString.init(_:appending:)(v45, v46, v55._countAndFlagsBits, (unint64_t)v55._object);
          if ((v60 & 1) == 0)
          {
            uint64_t v61 = v58;
            uint64_t v62 = v59;
            swift_bridgeObjectRelease(v46);
            swift_bridgeObjectRelease((uint64_t)v55._object);
            v107._uint64_t countAndFlagsBits = v61;
            v107._unint64_t object = v62;
            goto LABEL_46;
          }
          goto LABEL_44;
        }
      }
      else if (((uint64_t)v55._object & 0x2000000000000000) != 0)
      {
LABEL_44:
        unint64_t v57 = ((unint64_t)v55._object >> 56) & 0xF;
        goto LABEL_45;
      }
      unint64_t v57 = v55._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
LABEL_45:
      _StringGuts.append(_:)(v55._countAndFlagsBits, (unint64_t)v55._object, 0, v57);
      swift_bridgeObjectRelease((uint64_t)v55._object);
      goto LABEL_46;
    }
    if (((uint64_t)v107._object & 0x2000000000000000) != 0)
    {
      if ((v44 & 0x2000000000000000) != 0)
      {
        uint64_t v50 = specialized _SmallString.init(_:appending:)(v107._countAndFlagsBits, (unint64_t)v107._object, v43, v44);
        if ((v52 & 1) == 0)
        {
          unsigned int v53 = v50;
          Swift::String v54 = v51;
          swift_bridgeObjectRelease((uint64_t)object);
          swift_bridgeObjectRelease(v46);
          v107._uint64_t countAndFlagsBits = v53;
          v107._unint64_t object = v54;
          uint64_t v46 = (unint64_t)v54;
          unint64_t v45 = v53;
          goto LABEL_33;
        }
        goto LABEL_31;
      }
    }
    else if ((v44 & 0x2000000000000000) != 0)
    {
LABEL_31:
      unint64_t v49 = HIBYTE(v46) & 0xF;
      goto LABEL_32;
    }
    unint64_t v49 = v43 & 0xFFFFFFFFFFFFLL;
LABEL_32:
    _StringGuts.append(_:)(v45, v46, 0, v49);
    swift_bridgeObjectRelease(v46);
    unint64_t v45 = v107._countAndFlagsBits;
    uint64_t v46 = (unint64_t)v107._object;
    goto LABEL_33;
  }
  return __swift_destroy_boxed_opaque_existential_1Tm(v110);
}

{
  uint64_t v5;
  Class *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  void *v30;
  char v31;
  uint64_t v32;
  void *v33;
  unint64_t v35;
  uint64_t *TypeName;
  uint64_t v37;
  uint8x16_t *v38;
  int64_t v39;
  int64_t v40;
  int64_t v41;
  char v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  void *object;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  void *v51;
  char v52;
  uint64_t v53;
  void *v54;
  Swift::String v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  void *v59;
  char v60;
  uint64_t v61;
  void *v62;
  uint64_t *v63;
  uint64_t v64;
  uint8x16_t *v65;
  int64_t v66;
  int64_t v67;
  int64_t v68;
  char v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  void *v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  void *v78;
  char v79;
  uint64_t v80;
  void *v81;
  uint64_t countAndFlagsBits;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;
  char v86;
  unint64_t v87;
  Swift::String v88;
  unint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  void *v94;
  char v95;
  uint64_t v96;
  void *v97;
  uint64_t v98;
  unint64_t v99;
  void *v100;
  char v101;
  uint64_t v102;
  void *v103;
  Class *v104;
  uint64_t v105;
  uint64_t v106;
  Swift::String v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t *v110;

  uint64_t v106 = a4;
  unint64_t v9 = type metadata accessor for Optional(0, (uint64_t)a2, a3, a4);
  uint64_t v10 = (uint64_t)*(v9 - 1);
  MEMORY[0x1F4188790](v9);
  uint64_t v12 = (char *)&v104 - v11;
  uint64_t v14 = a1[3];
  uint64_t v13 = a1[4];
  uint64x2_t v110 = a1;
  __swift_project_boxed_opaque_existential_0Tm(a1, v14);
  (*(void (**)(Swift::String *__return_ptr, uint64_t, uint64_t))(v13 + 40))(&v107, v14, v13);
  if (!v5)
  {
    uint64_t v104 = v9;
    Swift::String v105 = a5;
    uint64_t v15 = v106;
    uint64_t v16 = v108;
    uint64_t v17 = v109;
    __swift_project_boxed_opaque_existential_0Tm(&v107, v108);
    char v18 = (*(uint64_t (**)(uint64_t, uint64_t))(v17 + 136))(v16, v17);
    __swift_destroy_boxed_opaque_existential_1Tm(&v107._countAndFlagsBits);
    v107._uint64_t countAndFlagsBits = v18;
    (*(void (**)(Swift::String *, Class *, uint64_t))(v15 + 16))(&v107, a2, v15);
    uint64_t v19 = (uint64_t)*(a2 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, Class *))(v19 + 48))(v12, 1, a2) != 1)
    {
      (*(void (**)(uint64_t, char *, Class *))(v19 + 32))(v105, v12, a2);
      return __swift_destroy_boxed_opaque_existential_1Tm(v110);
    }
    (*(void (**)(char *, Class *))(v10 + 8))(v12, v104);
    swift_allocError((uint64_t)&type metadata for DecodingError, (uint64_t)&protocol witness table for DecodingError, 0, 0);
    uint64_t v21 = v20;
    uint64_t v22 = v110[3];
    uint64_t v23 = v110[4];
    __swift_project_boxed_opaque_existential_0Tm(v110, v22);
    uint64_t v24 = (*(uint64_t (**)(uint64_t, uint64_t))(v23 + 8))(v22, v23);
    unint64_t v25 = specialized static String._createEmpty(withInitialCapacity:)(45);
    uint64_t v27 = v26;
    v107._uint64_t countAndFlagsBits = v25;
    v107._unint64_t object = (void *)v26;
    unint64_t v28 = HIBYTE(v26) & 0xF;
    if ((v26 & 0x2000000000000000) == 0) {
      unint64_t v28 = v25 & 0xFFFFFFFFFFFFLL;
    }
    if (v28 || (v25 & ~v26 & 0x2000000000000000) != 0)
    {
      if ((v26 & 0x2000000000000000) != 0
        && (0x80000001816DD670 & 0x2000000000000000) != 0
        && (BOOL v29 = specialized _SmallString.init(_:appending:)(v25, v26, 0xD000000000000012, 0x80000001816DD670 | 0x8000000000000000), (v31 & 1) == 0))
      {
        uint64_t v32 = v29;
        uint64_t v33 = v30;
        swift_bridgeObjectRelease(v27);
        swift_bridgeObjectRelease(0x80000001816DD670 | 0x8000000000000000);
        v107._uint64_t countAndFlagsBits = v32;
        v107._unint64_t object = v33;
      }
      else
      {
        if ((0x80000001816DD670 & 0x2000000000000000) != 0) {
          unint64_t v35 = (0x80000001816DD670 >> 56) & 0xF;
        }
        else {
          unint64_t v35 = 18;
        }
        _StringGuts.append(_:)(0xD000000000000012, 0x80000001816DD670 | 0x8000000000000000, 0, v35);
        swift_bridgeObjectRelease(0x80000001816DD670 | 0x8000000000000000);
      }
    }
    else
    {
      swift_bridgeObjectRelease(v26);
      v107._uint64_t countAndFlagsBits = 0xD000000000000012;
      v107._unint64_t object = (void *)(0x80000001816DD670 | 0x8000000000000000);
    }
    TypeName = (uint64_t *)swift_getTypeName(a2, 0);
    if (v37 < 0) {
      goto LABEL_102;
    }
    int64_t v38 = (uint8x16_t *)TypeName;
    int64_t v39 = v37;
    int64_t v40 = validateUTF8(_:)(TypeName, v37);
    if (v42) {
      unint64_t v43 = repairUTF8(_:firstKnownBrokenRange:)(v38->i8, v39, v40, v41);
    }
    else {
      unint64_t v43 = specialized static String._uncheckedFromUTF8(_:isASCII:)(v38, v39, v40 & 1);
    }
    unint64_t v45 = v43;
    uint64_t v46 = v44;
    unint64_t object = v107._object;
    uint64_t v48 = ((unint64_t)v107._object >> 56) & 0xF;
    if (((uint64_t)v107._object & 0x2000000000000000) == 0) {
      uint64_t v48 = v107._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
    }
    if (!v48 && (v107._countAndFlagsBits & ~(uint64_t)v107._object & 0x2000000000000000) == 0)
    {
      swift_bridgeObjectRelease((uint64_t)v107._object);
      v107._uint64_t countAndFlagsBits = v45;
      v107._unint64_t object = (void *)v46;
LABEL_33:
      uint64_t v55 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(" from invalid ", 0xEuLL, 1);
      uint64_t v56 = HIBYTE(v46) & 0xF;
      if ((v46 & 0x2000000000000000) == 0) {
        uint64_t v56 = v45 & 0xFFFFFFFFFFFFLL;
      }
      if (!v56 && (v45 & ~v46 & 0x2000000000000000) == 0)
      {
        swift_bridgeObjectRelease(v46);
        uint64_t v107 = v55;
LABEL_46:
        uint64_t v63 = (uint64_t *)swift_getTypeName((Class *)&type metadata for UInt64, 0);
        if ((v64 & 0x8000000000000000) == 0)
        {
          int64_t v65 = (uint8x16_t *)v63;
          int64_t v66 = v64;
          int64_t v67 = validateUTF8(_:)(v63, v64);
          if (v69) {
            unint64_t v70 = repairUTF8(_:firstKnownBrokenRange:)(v65->i8, v66, v67, v68);
          }
          else {
            unint64_t v70 = specialized static String._uncheckedFromUTF8(_:isASCII:)(v65, v66, v67 & 1);
          }
          unint64_t v72 = v70;
          uint64_t v73 = v71;
          unint64_t v74 = v107._object;
          uint64_t v75 = ((unint64_t)v107._object >> 56) & 0xF;
          if (((uint64_t)v107._object & 0x2000000000000000) == 0) {
            uint64_t v75 = v107._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
          }
          if (!v75 && (v107._countAndFlagsBits & ~(uint64_t)v107._object & 0x2000000000000000) == 0)
          {
            swift_bridgeObjectRelease((uint64_t)v107._object);
            v107._uint64_t countAndFlagsBits = v72;
            v107._unint64_t object = (void *)v73;
LABEL_63:
            uint64_t countAndFlagsBits = 0x2065756C617620;
            uint64_t v83 = HIBYTE(v73) & 0xF;
            if ((v73 & 0x2000000000000000) == 0) {
              uint64_t v83 = v72 & 0xFFFFFFFFFFFFLL;
            }
            if (v83 || (v72 & ~v73 & 0x2000000000000000) != 0)
            {
              if ((v73 & 0x2000000000000000) == 0
                || (char v84 = specialized _SmallString.init(_:appending:)(v72, v73, 0x2065756C617620uLL, 0xE700000000000000), (v86 & 1) != 0))
              {
                _StringGuts.append(_:)(0x2065756C617620, 0xE700000000000000, 0, 7);
                swift_bridgeObjectRelease(0xE700000000000000);
                uint64_t countAndFlagsBits = v107._countAndFlagsBits;
                uint64_t v87 = (unint64_t)v107._object;
                goto LABEL_77;
              }
              uint64_t countAndFlagsBits = v84;
              uint64_t v87 = v85;
              swift_bridgeObjectRelease(v73);
              swift_bridgeObjectRelease(0xE700000000000000);
            }
            else
            {
              swift_bridgeObjectRelease(v73);
              uint64_t v87 = 0xE700000000000000;
            }
            v107._uint64_t countAndFlagsBits = countAndFlagsBits;
            v107._unint64_t object = (void *)v87;
LABEL_77:
            unint64_t v88 = _uint64ToString(_:radix:uppercase:)(v18, 10, 0);
            unint64_t v89 = v88._countAndFlagsBits;
            unint64_t v90 = (unint64_t)v88._object;
            unint64_t v91 = HIBYTE(v87) & 0xF;
            if ((v87 & 0x2000000000000000) == 0) {
              unint64_t v91 = countAndFlagsBits & 0xFFFFFFFFFFFFLL;
            }
            if (!v91 && (countAndFlagsBits & ~v87 & 0x2000000000000000) == 0)
            {
              swift_bridgeObjectRelease(v87);
              uint64_t v107 = v88;
              goto LABEL_90;
            }
            if ((v87 & 0x2000000000000000) != 0)
            {
              if (((uint64_t)v88._object & 0x2000000000000000) != 0)
              {
                char v93 = specialized _SmallString.init(_:appending:)(countAndFlagsBits, v87, v88._countAndFlagsBits, (unint64_t)v88._object);
                if ((v95 & 1) == 0)
                {
                  uint64_t v96 = v93;
                  unint64_t v97 = v94;
                  swift_bridgeObjectRelease(v87);
                  swift_bridgeObjectRelease((uint64_t)v88._object);
                  v107._uint64_t countAndFlagsBits = v96;
                  v107._unint64_t object = v97;
                  unint64_t v90 = (unint64_t)v97;
                  unint64_t v89 = v96;
LABEL_90:
                  int64x2_t v98 = HIBYTE(v90) & 0xF;
                  if ((v90 & 0x2000000000000000) == 0) {
                    int64x2_t v98 = v89 & 0xFFFFFFFFFFFFLL;
                  }
                  if (v98 || (v89 & ~v90 & 0x2000000000000000) != 0)
                  {
                    if ((v90 & 0x2000000000000000) == 0
                      || (char v99 = specialized _SmallString.init(_:appending:)(v89, v90, 0, 0xE000000000000000),
                          (v101 & 1) != 0))
                    {
                      _StringGuts.append(_:)(0, 0xE000000000000000, 0, 0);
                      swift_bridgeObjectRelease(0xE000000000000000);
                      int64x2_t v102 = v107._countAndFlagsBits;
                      uint64_t v103 = v107._object;
                    }
                    else
                    {
                      int64x2_t v102 = v99;
                      uint64_t v103 = v100;
                      swift_bridgeObjectRelease(v90);
                      swift_bridgeObjectRelease(0xE000000000000000);
                    }
                  }
                  else
                  {
                    swift_bridgeObjectRelease(v90);
                    int64x2_t v102 = 0;
                    uint64_t v103 = (void *)0xE000000000000000;
                  }
                  *(void *)uint64_t v21 = v24;
                  *(void *)(v21 + 8) = v102;
                  *(void *)(v21 + 16) = v103;
                  *(void *)(v21 + 24) = 0;
                  *(unsigned char *)(v21 + 72) = 3;
                  swift_willThrow();
                  return __swift_destroy_boxed_opaque_existential_1Tm(v110);
                }
                goto LABEL_88;
              }
            }
            else if (((uint64_t)v88._object & 0x2000000000000000) != 0)
            {
LABEL_88:
              int64x2_t v92 = ((unint64_t)v88._object >> 56) & 0xF;
              goto LABEL_89;
            }
            int64x2_t v92 = v88._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
LABEL_89:
            _StringGuts.append(_:)(v88._countAndFlagsBits, (unint64_t)v88._object, 0, v92);
            swift_bridgeObjectRelease((uint64_t)v88._object);
            unint64_t v89 = v107._countAndFlagsBits;
            unint64_t v90 = (unint64_t)v107._object;
            goto LABEL_90;
          }
          if (((uint64_t)v107._object & 0x2000000000000000) != 0)
          {
            if ((v71 & 0x2000000000000000) != 0)
            {
              uint64_t v77 = specialized _SmallString.init(_:appending:)(v107._countAndFlagsBits, (unint64_t)v107._object, v70, v71);
              if ((v79 & 1) == 0)
              {
                uint64_t v80 = v77;
                uint64_t v81 = v78;
                swift_bridgeObjectRelease((uint64_t)v74);
                swift_bridgeObjectRelease(v73);
                v107._uint64_t countAndFlagsBits = v80;
                v107._unint64_t object = v81;
                uint64_t v73 = (unint64_t)v81;
                unint64_t v72 = v80;
                goto LABEL_63;
              }
              goto LABEL_61;
            }
          }
          else if ((v71 & 0x2000000000000000) != 0)
          {
LABEL_61:
            unint64_t v76 = HIBYTE(v73) & 0xF;
            goto LABEL_62;
          }
          unint64_t v76 = v70 & 0xFFFFFFFFFFFFLL;
LABEL_62:
          _StringGuts.append(_:)(v72, v73, 0, v76);
          swift_bridgeObjectRelease(v73);
          unint64_t v72 = v107._countAndFlagsBits;
          uint64_t v73 = (unint64_t)v107._object;
          goto LABEL_63;
        }
LABEL_102:
        _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeBufferPointer with negative count", 39, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x53FuLL, 0);
      }
      if ((v46 & 0x2000000000000000) != 0)
      {
        if (((uint64_t)v55._object & 0x2000000000000000) != 0)
        {
          uint64_t v58 = specialized _SmallString.init(_:appending:)(v45, v46, v55._countAndFlagsBits, (unint64_t)v55._object);
          if ((v60 & 1) == 0)
          {
            uint64_t v61 = v58;
            uint64_t v62 = v59;
            swift_bridgeObjectRelease(v46);
            swift_bridgeObjectRelease((uint64_t)v55._object);
            v107._uint64_t countAndFlagsBits = v61;
            v107._unint64_t object = v62;
            goto LABEL_46;
          }
          goto LABEL_44;
        }
      }
      else if (((uint64_t)v55._object & 0x2000000000000000) != 0)
      {
LABEL_44:
        unint64_t v57 = ((unint64_t)v55._object >> 56) & 0xF;
        goto LABEL_45;
      }
      unint64_t v57 = v55._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
LABEL_45:
      _StringGuts.append(_:)(v55._countAndFlagsBits, (unint64_t)v55._object, 0, v57);
      swift_bridgeObjectRelease((uint64_t)v55._object);
      goto LABEL_46;
    }
    if (((uint64_t)v107._object & 0x2000000000000000) != 0)
    {
      if ((v44 & 0x2000000000000000) != 0)
      {
        uint64_t v50 = specialized _SmallString.init(_:appending:)(v107._countAndFlagsBits, (unint64_t)v107._object, v43, v44);
        if ((v52 & 1) == 0)
        {
          unsigned int v53 = v50;
          Swift::String v54 = v51;
          swift_bridgeObjectRelease((uint64_t)object);
          swift_bridgeObjectRelease(v46);
          v107._uint64_t countAndFlagsBits = v53;
          v107._unint64_t object = v54;
          uint64_t v46 = (unint64_t)v54;
          unint64_t v45 = v53;
          goto LABEL_33;
        }
        goto LABEL_31;
      }
    }
    else if ((v44 & 0x2000000000000000) != 0)
    {
LABEL_31:
      unint64_t v49 = HIBYTE(v46) & 0xF;
      goto LABEL_32;
    }
    unint64_t v49 = v43 & 0xFFFFFFFFFFFFLL;
LABEL_32:
    _StringGuts.append(_:)(v45, v46, 0, v49);
    swift_bridgeObjectRelease(v46);
    unint64_t v45 = v107._countAndFlagsBits;
    uint64_t v46 = (unint64_t)v107._object;
    goto LABEL_33;
  }
  return __swift_destroy_boxed_opaque_existential_1Tm(v110);
}

void *String.init(from:)(uint64_t *a1)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  uint64_t v5 = __swift_project_boxed_opaque_existential_0Tm(a1, v3);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v4 + 40))(v9, v3, v4);
  if (!v1)
  {
    uint64_t v6 = v10;
    uint64_t v7 = v11;
    __swift_project_boxed_opaque_existential_0Tm(v9, v10);
    uint64_t v5 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v7 + 32))(v6, v7);
    __swift_destroy_boxed_opaque_existential_1Tm(v9);
  }
  __swift_destroy_boxed_opaque_existential_1Tm(a1);
  return v5;
}

uint64_t String.encode(to:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a1[3];
  uint64_t v6 = a1[4];
  __swift_project_boxed_opaque_existential_0Tm(a1, v5);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v6 + 40))(v10, v5, v6);
  unint64_t v7 = v11;
  uint64_t v8 = v12;
  __swift_mutable_project_boxed_opaque_existential_1(v10, v11);
  (*(void (**)(uint64_t, uint64_t, unint64_t, uint64_t))(v8 + 32))(a2, a3, v7, v8);
  return __swift_destroy_boxed_opaque_existential_1Tm(v10);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance String(void *a1)
{
  uint64_t v2 = *v1;
  uint64_t v3 = v1[1];
  uint64_t v4 = a1[3];
  uint64_t v5 = a1[4];
  __swift_project_boxed_opaque_existential_0Tm(a1, v4);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v5 + 40))(v9, v4, v5);
  unint64_t v6 = v10;
  uint64_t v7 = v11;
  __swift_mutable_project_boxed_opaque_existential_1(v9, v10);
  (*(void (**)(uint64_t, uint64_t, unint64_t, uint64_t))(v7 + 32))(v2, v3, v6, v7);
  return __swift_destroy_boxed_opaque_existential_1Tm(v9);
}

uint64_t protocol witness for Decodable.init(from:) in conformance String@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = a1[3];
  uint64_t v6 = a1[4];
  __swift_project_boxed_opaque_existential_0Tm(a1, v5);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v6 + 40))(v13, v5, v6);
  if (v2) {
    return __swift_destroy_boxed_opaque_existential_1Tm(a1);
  }
  uint64_t v7 = v14;
  uint64_t v8 = v15;
  __swift_project_boxed_opaque_existential_0Tm(v13, v14);
  uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 32))(v7, v8);
  uint64_t v11 = v10;
  __swift_destroy_boxed_opaque_existential_1Tm(v13);
  uint64_t result = __swift_destroy_boxed_opaque_existential_1Tm(a1);
  *a2 = v9;
  a2[1] = v11;
  return result;
}

uint64_t RawRepresentable<>.init(from:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  unint64_t v112 = a4;
  uint64_t v9 = type metadata accessor for Optional(0, a2, a3, a4);
  uint64_t v10 = (uint64_t)*(v9 - 1);
  MEMORY[0x1F4188790](v9);
  uint64_t v12 = (char *)&v108 - v11;
  uint64_t v14 = a1[3];
  uint64_t v13 = a1[4];
  uint16x8_t v116 = a1;
  __swift_project_boxed_opaque_existential_0Tm(a1, v14);
  (*(void (**)(Swift::String *__return_ptr, uint64_t, uint64_t))(v13 + 40))(&v113, v14, v13);
  if (!v5)
  {
    uint64x2_t v110 = v9;
    uint64_t v111 = a5;
    unint64_t v15 = v112;
    uint64_t v16 = v114;
    uint64_t v17 = v115;
    __swift_project_boxed_opaque_existential_0Tm(&v113, v114);
    uint64_t v18 = (*(uint64_t (**)(uint64_t, uint64_t))(v17 + 32))(v16, v17);
    uint64_t v20 = v19;
    __swift_destroy_boxed_opaque_existential_1Tm(&v113._countAndFlagsBits);
    uint64_t v108 = 0;
    uint64_t v109 = v18;
    v113._uint64_t countAndFlagsBits = v18;
    v113._unint64_t object = v20;
    uint64_t v21 = *(void (**)(Swift::String *, uint64_t, unint64_t))(v15 + 16);
    swift_bridgeObjectRetain((unint64_t)v20);
    uint64_t v22 = (Class *)a2;
    v21(&v113, a2, v15);
    uint64_t v23 = *(void *)(a2 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v12, 1, a2) != 1)
    {
      swift_bridgeObjectRelease((uint64_t)v20);
      (*(void (**)(uint64_t, char *, uint64_t))(v23 + 32))(v111, v12, a2);
      return __swift_destroy_boxed_opaque_existential_1Tm(v116);
    }
    unint64_t v112 = (unint64_t)v20;
    (*(void (**)(char *, Class *))(v10 + 8))(v12, v110);
    swift_allocError((uint64_t)&type metadata for DecodingError, (uint64_t)&protocol witness table for DecodingError, 0, 0);
    uint64_t v25 = v24;
    uint64_t v26 = v116[3];
    uint64_t v27 = v116[4];
    __swift_project_boxed_opaque_existential_0Tm(v116, v26);
    uint64_t v28 = (*(uint64_t (**)(uint64_t, uint64_t))(v27 + 8))(v26, v27);
    uint64_t v29 = specialized static String._createEmpty(withInitialCapacity:)(45);
    uint64_t v31 = v30;
    v113._uint64_t countAndFlagsBits = v29;
    v113._unint64_t object = (void *)v30;
    uint64_t v32 = HIBYTE(v30) & 0xF;
    if ((v30 & 0x2000000000000000) == 0) {
      uint64_t v32 = v29 & 0xFFFFFFFFFFFFLL;
    }
    if (v32 || (v29 & ~v30 & 0x2000000000000000) != 0)
    {
      if ((v30 & 0x2000000000000000) != 0
        && (0x80000001816DD670 & 0x2000000000000000) != 0
        && (unint64_t v33 = specialized _SmallString.init(_:appending:)(v29, v30, 0xD000000000000012, 0x80000001816DD670 | 0x8000000000000000), (v35 & 1) == 0))
      {
        uint64_t v36 = v33;
        unint64_t v37 = v34;
        swift_bridgeObjectRelease(v31);
        swift_bridgeObjectRelease(0x80000001816DD670 | 0x8000000000000000);
        v113._uint64_t countAndFlagsBits = v36;
        v113._unint64_t object = v37;
      }
      else
      {
        if ((0x80000001816DD670 & 0x2000000000000000) != 0) {
          unint64_t v39 = (0x80000001816DD670 >> 56) & 0xF;
        }
        else {
          unint64_t v39 = 18;
        }
        _StringGuts.append(_:)(0xD000000000000012, 0x80000001816DD670 | 0x8000000000000000, 0, v39);
        swift_bridgeObjectRelease(0x80000001816DD670 | 0x8000000000000000);
      }
    }
    else
    {
      swift_bridgeObjectRelease(v30);
      v113._uint64_t countAndFlagsBits = 0xD000000000000012;
      v113._unint64_t object = (void *)(0x80000001816DD670 | 0x8000000000000000);
    }
    TypeName = (uint64_t *)swift_getTypeName(v22, 0);
    uint64_t v42 = v109;
    if (v41 < 0) {
      goto LABEL_102;
    }
    unint64_t v43 = (uint8x16_t *)TypeName;
    int64_t v44 = v41;
    uint64_t v111 = v28;
    int64_t v45 = validateUTF8(_:)(TypeName, v41);
    if (v47) {
      unint64_t v48 = repairUTF8(_:firstKnownBrokenRange:)(v43->i8, v44, v45, v46);
    }
    else {
      unint64_t v48 = specialized static String._uncheckedFromUTF8(_:isASCII:)(v43, v44, v45 & 1);
    }
    uint64_t v50 = v48;
    unint64_t v51 = v49;
    unint64_t object = v113._object;
    unint64_t v53 = ((unint64_t)v113._object >> 56) & 0xF;
    if (((uint64_t)v113._object & 0x2000000000000000) == 0) {
      unint64_t v53 = v113._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
    }
    if (!v53 && (v113._countAndFlagsBits & ~(uint64_t)v113._object & 0x2000000000000000) == 0)
    {
      swift_bridgeObjectRelease((uint64_t)v113._object);
      v113._uint64_t countAndFlagsBits = v50;
      v113._unint64_t object = (void *)v51;
LABEL_33:
      Swift::String v60 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(" from invalid ", 0xEuLL, 1);
      uint64_t v61 = HIBYTE(v51) & 0xF;
      if ((v51 & 0x2000000000000000) == 0) {
        uint64_t v61 = v50 & 0xFFFFFFFFFFFFLL;
      }
      if (!v61 && (v50 & ~v51 & 0x2000000000000000) == 0)
      {
        swift_bridgeObjectRelease(v51);
        Swift::String v113 = v60;
LABEL_46:
        char v68 = (uint64_t *)swift_getTypeName((Class *)&type metadata for String, 0);
        if ((v69 & 0x8000000000000000) == 0)
        {
          unint64_t v70 = (uint8x16_t *)v68;
          int64_t v71 = v69;
          int64_t v72 = validateUTF8(_:)(v68, v69);
          if (v74) {
            unint64_t v75 = repairUTF8(_:firstKnownBrokenRange:)(v70->i8, v71, v72, v73);
          }
          else {
            unint64_t v75 = specialized static String._uncheckedFromUTF8(_:isASCII:)(v70, v71, v72 & 1);
          }
          uint64_t v77 = v75;
          unint64_t v78 = v76;
          uint64_t v79 = v113._object;
          unint64_t v80 = ((unint64_t)v113._object >> 56) & 0xF;
          if (((uint64_t)v113._object & 0x2000000000000000) == 0) {
            unint64_t v80 = v113._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
          }
          if (!v80 && (v113._countAndFlagsBits & ~(uint64_t)v113._object & 0x2000000000000000) == 0)
          {
            swift_bridgeObjectRelease((uint64_t)v113._object);
            v113._uint64_t countAndFlagsBits = v77;
            v113._unint64_t object = (void *)v78;
LABEL_63:
            uint64_t countAndFlagsBits = 0x2065756C617620;
            uint64_t v88 = HIBYTE(v78) & 0xF;
            if ((v78 & 0x2000000000000000) == 0) {
              uint64_t v88 = v77 & 0xFFFFFFFFFFFFLL;
            }
            if (v88 || (v77 & ~v78 & 0x2000000000000000) != 0)
            {
              if ((v78 & 0x2000000000000000) == 0
                || (unint64_t v89 = specialized _SmallString.init(_:appending:)(v77, v78, 0x2065756C617620uLL, 0xE700000000000000), (v91 & 1) != 0))
              {
                _StringGuts.append(_:)(0x2065756C617620, 0xE700000000000000, 0, 7);
                swift_bridgeObjectRelease(0xE700000000000000);
                uint64_t countAndFlagsBits = v113._countAndFlagsBits;
                unint64_t v92 = (unint64_t)v113._object;
                goto LABEL_77;
              }
              uint64_t countAndFlagsBits = v89;
              unint64_t v92 = v90;
              swift_bridgeObjectRelease(v78);
              swift_bridgeObjectRelease(0xE700000000000000);
            }
            else
            {
              swift_bridgeObjectRelease(v78);
              unint64_t v92 = 0xE700000000000000;
            }
            v113._uint64_t countAndFlagsBits = countAndFlagsBits;
            v113._unint64_t object = (void *)v92;
LABEL_77:
            uint64_t v93 = HIBYTE(v92) & 0xF;
            if ((v92 & 0x2000000000000000) == 0) {
              uint64_t v93 = countAndFlagsBits & 0xFFFFFFFFFFFFLL;
            }
            uint64_t v95 = v111;
            unint64_t v94 = v112;
            if (!v93 && (countAndFlagsBits & ~v92 & 0x2000000000000000) == 0)
            {
              swift_bridgeObjectRelease(v92);
              v113._uint64_t countAndFlagsBits = v42;
              v113._unint64_t object = (void *)v94;
              goto LABEL_90;
            }
            if ((v92 & 0x2000000000000000) != 0)
            {
              if ((v112 & 0x2000000000000000) != 0)
              {
                unint64_t v97 = specialized _SmallString.init(_:appending:)(countAndFlagsBits, v92, v42, v112);
                if ((v99 & 1) == 0)
                {
                  uint64_t v100 = v97;
                  unint64_t v101 = v98;
                  swift_bridgeObjectRelease(v92);
                  swift_bridgeObjectRelease(v94);
                  v113._uint64_t countAndFlagsBits = v100;
                  v113._unint64_t object = v101;
                  unint64_t v94 = (unint64_t)v101;
                  uint64_t v42 = v100;
LABEL_90:
                  uint64_t v102 = HIBYTE(v94) & 0xF;
                  if ((v94 & 0x2000000000000000) == 0) {
                    uint64_t v102 = v42 & 0xFFFFFFFFFFFFLL;
                  }
                  if (v102 || (v42 & ~v94 & 0x2000000000000000) != 0)
                  {
                    if ((v94 & 0x2000000000000000) == 0
                      || (unint64_t v103 = specialized _SmallString.init(_:appending:)(v42, v94, 0, 0xE000000000000000),
                          (v105 & 1) != 0))
                    {
                      _StringGuts.append(_:)(0, 0xE000000000000000, 0, 0);
                      swift_bridgeObjectRelease(0xE000000000000000);
                      uint64_t v106 = v113._countAndFlagsBits;
                      uint64_t v107 = v113._object;
                    }
                    else
                    {
                      uint64_t v106 = v103;
                      uint64_t v107 = v104;
                      swift_bridgeObjectRelease(v94);
                      swift_bridgeObjectRelease(0xE000000000000000);
                    }
                  }
                  else
                  {
                    swift_bridgeObjectRelease(v94);
                    uint64_t v106 = 0;
                    uint64_t v107 = (void *)0xE000000000000000;
                  }
                  *(void *)uint64_t v25 = v95;
                  *(void *)(v25 + 8) = v106;
                  *(void *)(v25 + 16) = v107;
                  *(void *)(v25 + 24) = 0;
                  *(unsigned char *)(v25 + 72) = 3;
                  swift_willThrow();
                  return __swift_destroy_boxed_opaque_existential_1Tm(v116);
                }
                goto LABEL_88;
              }
            }
            else if ((v112 & 0x2000000000000000) != 0)
            {
LABEL_88:
              uint64_t v96 = HIBYTE(v94) & 0xF;
              goto LABEL_89;
            }
            uint64_t v96 = v42 & 0xFFFFFFFFFFFFLL;
LABEL_89:
            _StringGuts.append(_:)(v42, v94, 0, v96);
            swift_bridgeObjectRelease(v94);
            uint64_t v42 = v113._countAndFlagsBits;
            unint64_t v94 = (unint64_t)v113._object;
            goto LABEL_90;
          }
          if (((uint64_t)v113._object & 0x2000000000000000) != 0)
          {
            if ((v76 & 0x2000000000000000) != 0)
            {
              unint64_t v82 = specialized _SmallString.init(_:appending:)(v113._countAndFlagsBits, (unint64_t)v113._object, v75, v76);
              if ((v84 & 1) == 0)
              {
                uint64_t v85 = v82;
                char v86 = v83;
                swift_bridgeObjectRelease((uint64_t)v79);
                swift_bridgeObjectRelease(v78);
                v113._uint64_t countAndFlagsBits = v85;
                v113._unint64_t object = v86;
                unint64_t v78 = (unint64_t)v86;
                uint64_t v77 = v85;
                goto LABEL_63;
              }
              goto LABEL_61;
            }
          }
          else if ((v76 & 0x2000000000000000) != 0)
          {
LABEL_61:
            uint64_t v81 = HIBYTE(v78) & 0xF;
            goto LABEL_62;
          }
          uint64_t v81 = v75 & 0xFFFFFFFFFFFFLL;
LABEL_62:
          _StringGuts.append(_:)(v77, v78, 0, v81);
          swift_bridgeObjectRelease(v78);
          uint64_t v77 = v113._countAndFlagsBits;
          unint64_t v78 = (unint64_t)v113._object;
          goto LABEL_63;
        }
LABEL_102:
        _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeBufferPointer with negative count", 39, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x53FuLL, 0);
      }
      if ((v51 & 0x2000000000000000) != 0)
      {
        if (((uint64_t)v60._object & 0x2000000000000000) != 0)
        {
          unint64_t v63 = specialized _SmallString.init(_:appending:)(v50, v51, v60._countAndFlagsBits, (unint64_t)v60._object);
          if ((v65 & 1) == 0)
          {
            uint64_t v66 = v63;
            int64_t v67 = v64;
            swift_bridgeObjectRelease(v51);
            swift_bridgeObjectRelease((uint64_t)v60._object);
            v113._uint64_t countAndFlagsBits = v66;
            v113._unint64_t object = v67;
            goto LABEL_46;
          }
          goto LABEL_44;
        }
      }
      else if (((uint64_t)v60._object & 0x2000000000000000) != 0)
      {
LABEL_44:
        uint64_t v62 = ((unint64_t)v60._object >> 56) & 0xF;
        goto LABEL_45;
      }
      uint64_t v62 = v60._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
LABEL_45:
      _StringGuts.append(_:)(v60._countAndFlagsBits, (unint64_t)v60._object, 0, v62);
      swift_bridgeObjectRelease((uint64_t)v60._object);
      goto LABEL_46;
    }
    if (((uint64_t)v113._object & 0x2000000000000000) != 0)
    {
      if ((v49 & 0x2000000000000000) != 0)
      {
        unint64_t v55 = specialized _SmallString.init(_:appending:)(v113._countAndFlagsBits, (unint64_t)v113._object, v48, v49);
        if ((v57 & 1) == 0)
        {
          uint64_t v58 = v55;
          char v59 = v56;
          swift_bridgeObjectRelease((uint64_t)object);
          swift_bridgeObjectRelease(v51);
          v113._uint64_t countAndFlagsBits = v58;
          v113._unint64_t object = v59;
          unint64_t v51 = (unint64_t)v59;
          uint64_t v50 = v58;
          goto LABEL_33;
        }
        goto LABEL_31;
      }
    }
    else if ((v49 & 0x2000000000000000) != 0)
    {
LABEL_31:
      uint64_t v54 = HIBYTE(v51) & 0xF;
      goto LABEL_32;
    }
    uint64_t v54 = v48 & 0xFFFFFFFFFFFFLL;
LABEL_32:
    _StringGuts.append(_:)(v50, v51, 0, v54);
    swift_bridgeObjectRelease(v51);
    uint64_t v50 = v113._countAndFlagsBits;
    unint64_t v51 = (unint64_t)v113._object;
    goto LABEL_33;
  }
  return __swift_destroy_boxed_opaque_existential_1Tm(v116);
}

{
  uint64_t v5;
  Class *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  Class *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  void *v31;
  char v32;
  uint64_t v33;
  void *v34;
  unint64_t v35;
  uint64_t *TypeName;
  uint64_t v37;
  uint8x16_t *v38;
  int64_t v39;
  int64_t v40;
  int64_t v41;
  char v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t countAndFlagsBits;
  unint64_t v46;
  void *object;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  void *v51;
  char v52;
  uint64_t v53;
  void *v54;
  Swift::String v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  void *v59;
  char v60;
  uint64_t v61;
  void *v62;
  uint64_t *v63;
  uint64_t v64;
  uint8x16_t *v65;
  int64_t v66;
  int64_t v67;
  int64_t v68;
  char v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  void *v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  void *v78;
  char v79;
  uint64_t v80;
  void *v81;
  uint64_t v82;
  unint64_t v83;
  void *v84;
  char v85;
  uint64_t v86;
  void *v87;
  void *v88;
  unint64_t v89;
  unint64_t v90;
  void *v91;
  char v92;
  uint64_t v93;
  void *v94;
  Class *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t *v100;
  Swift::String v101;
  uint64_t v102;
  uint64_t v103;

  char v99 = a4;
  uint64_t v9 = type metadata accessor for Optional(0, a2, a3, a4);
  uint64_t v10 = (uint64_t)*(v9 - 1);
  MEMORY[0x1F4188790](v9);
  uint64_t v12 = (char *)&v96 - v11;
  uint64_t v14 = a1[3];
  uint64_t v13 = a1[4];
  uint64_t v100 = a1;
  __swift_project_boxed_opaque_existential_0Tm(a1, v14);
  (*(void (**)(Swift::String *__return_ptr, uint64_t, uint64_t))(v13 + 40))(&v101, v14, v13);
  if (v5) {
    return __swift_destroy_boxed_opaque_existential_1Tm(v100);
  }
  uint64_t v96 = v9;
  unint64_t v97 = v10;
  unint64_t v15 = v99;
  int64x2_t v98 = a5;
  uint64_t v16 = v102;
  uint64_t v17 = v103;
  __swift_project_boxed_opaque_existential_0Tm(&v101, v102);
  uint64_t v18 = (*(double (**)(uint64_t, uint64_t))(v17 + 40))(v16, v17);
  __swift_destroy_boxed_opaque_existential_1Tm(&v101._countAndFlagsBits);
  v101._uint64_t countAndFlagsBits = v18;
  uint64_t v19 = (Class *)a2;
  (*(void (**)(Swift::String *, uint64_t, uint64_t))(v15 + 16))(&v101, a2, v15);
  uint64_t v20 = *(void *)(a2 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v12, 1, a2) != 1)
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v20 + 32))(v98, v12, a2);
    return __swift_destroy_boxed_opaque_existential_1Tm(v100);
  }
  (*(void (**)(char *, Class *))(v97 + 8))(v12, v96);
  swift_allocError((uint64_t)&type metadata for DecodingError, (uint64_t)&protocol witness table for DecodingError, 0, 0);
  uint64_t v22 = v21;
  uint64_t v23 = v100[3];
  uint64_t v24 = v100[4];
  __swift_project_boxed_opaque_existential_0Tm(v100, v23);
  uint64_t v25 = (*(uint64_t (**)(uint64_t, uint64_t))(v24 + 8))(v23, v24);
  uint64_t v26 = specialized static String._createEmpty(withInitialCapacity:)(45);
  uint64_t v28 = v27;
  v101._uint64_t countAndFlagsBits = v26;
  v101._unint64_t object = (void *)v27;
  uint64_t v29 = HIBYTE(v27) & 0xF;
  if ((v27 & 0x2000000000000000) == 0) {
    uint64_t v29 = v26 & 0xFFFFFFFFFFFFLL;
  }
  if (v29 || (v26 & ~v27 & 0x2000000000000000) != 0)
  {
    if ((v27 & 0x2000000000000000) != 0
      && (0x80000001816DD670 & 0x2000000000000000) != 0
      && (unint64_t v30 = specialized _SmallString.init(_:appending:)(v26, v27, 0xD000000000000012, 0x80000001816DD670 | 0x8000000000000000), (v32 & 1) == 0))
    {
      unint64_t v33 = v30;
      unint64_t v34 = v31;
      swift_bridgeObjectRelease(v28);
      swift_bridgeObjectRelease(0x80000001816DD670 | 0x8000000000000000);
      v101._uint64_t countAndFlagsBits = v33;
      v101._unint64_t object = v34;
    }
    else
    {
      if ((0x80000001816DD670 & 0x2000000000000000) != 0) {
        char v35 = (0x80000001816DD670 >> 56) & 0xF;
      }
      else {
        char v35 = 18;
      }
      _StringGuts.append(_:)(0xD000000000000012, 0x80000001816DD670 | 0x8000000000000000, 0, v35);
      swift_bridgeObjectRelease(0x80000001816DD670 | 0x8000000000000000);
    }
  }
  else
  {
    swift_bridgeObjectRelease(v27);
    v101._uint64_t countAndFlagsBits = 0xD000000000000012;
    v101._unint64_t object = (void *)(0x80000001816DD670 | 0x8000000000000000);
  }
  TypeName = (uint64_t *)swift_getTypeName(v19, 0);
  if (v37 < 0) {
LABEL_88:
  }
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeBufferPointer with negative count", 39, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x53FuLL, 0);
  int64_t v38 = (uint8x16_t *)TypeName;
  unint64_t v39 = v37;
  int64_t v40 = validateUTF8(_:)(TypeName, v37);
  if (v42) {
    unint64_t v43 = repairUTF8(_:firstKnownBrokenRange:)(v38->i8, v39, v40, v41);
  }
  else {
    unint64_t v43 = specialized static String._uncheckedFromUTF8(_:isASCII:)(v38, v39, v40 & 1);
  }
  uint64_t countAndFlagsBits = v43;
  int64_t v46 = v44;
  unint64_t object = v101._object;
  unint64_t v48 = ((unint64_t)v101._object >> 56) & 0xF;
  if (((uint64_t)v101._object & 0x2000000000000000) == 0) {
    unint64_t v48 = v101._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
  }
  if (v48 || (v101._countAndFlagsBits & ~(uint64_t)v101._object & 0x2000000000000000) != 0)
  {
    if (((uint64_t)v101._object & 0x2000000000000000) != 0)
    {
      if ((v44 & 0x2000000000000000) != 0)
      {
        uint64_t v50 = specialized _SmallString.init(_:appending:)(v101._countAndFlagsBits, (unint64_t)v101._object, v43, v44);
        if ((v52 & 1) == 0)
        {
          unint64_t v53 = v50;
          uint64_t v54 = v51;
          swift_bridgeObjectRelease((uint64_t)object);
          swift_bridgeObjectRelease(v46);
          v101._uint64_t countAndFlagsBits = v53;
          v101._unint64_t object = v54;
          int64_t v46 = (unint64_t)v54;
          uint64_t countAndFlagsBits = v53;
          goto LABEL_34;
        }
        goto LABEL_32;
      }
    }
    else if ((v44 & 0x2000000000000000) != 0)
    {
LABEL_32:
      unint64_t v49 = HIBYTE(v46) & 0xF;
      goto LABEL_33;
    }
    unint64_t v49 = v43 & 0xFFFFFFFFFFFFLL;
LABEL_33:
    _StringGuts.append(_:)(countAndFlagsBits, v46, 0, v49);
    swift_bridgeObjectRelease(v46);
    uint64_t countAndFlagsBits = v101._countAndFlagsBits;
    int64_t v46 = (unint64_t)v101._object;
    goto LABEL_34;
  }
  swift_bridgeObjectRelease((uint64_t)v101._object);
  v101._uint64_t countAndFlagsBits = countAndFlagsBits;
  v101._unint64_t object = (void *)v46;
LABEL_34:
  unint64_t v55 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(" from invalid ", 0xEuLL, 1);
  uint64_t v56 = HIBYTE(v46) & 0xF;
  if ((v46 & 0x2000000000000000) == 0) {
    uint64_t v56 = countAndFlagsBits & 0xFFFFFFFFFFFFLL;
  }
  if (v56 || (countAndFlagsBits & ~v46 & 0x2000000000000000) != 0)
  {
    if ((v46 & 0x2000000000000000) != 0)
    {
      if (((uint64_t)v55._object & 0x2000000000000000) != 0)
      {
        uint64_t v58 = specialized _SmallString.init(_:appending:)(countAndFlagsBits, v46, v55._countAndFlagsBits, (unint64_t)v55._object);
        if ((v60 & 1) == 0)
        {
          uint64_t v61 = v58;
          uint64_t v62 = v59;
          swift_bridgeObjectRelease(v46);
          swift_bridgeObjectRelease((uint64_t)v55._object);
          v101._uint64_t countAndFlagsBits = v61;
          v101._unint64_t object = v62;
          goto LABEL_47;
        }
        goto LABEL_45;
      }
    }
    else if (((uint64_t)v55._object & 0x2000000000000000) != 0)
    {
LABEL_45:
      char v57 = ((unint64_t)v55._object >> 56) & 0xF;
      goto LABEL_46;
    }
    char v57 = v55._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
LABEL_46:
    _StringGuts.append(_:)(v55._countAndFlagsBits, (unint64_t)v55._object, 0, v57);
    swift_bridgeObjectRelease((uint64_t)v55._object);
    goto LABEL_47;
  }
  swift_bridgeObjectRelease(v46);
  unint64_t v101 = v55;
LABEL_47:
  unint64_t v63 = (uint64_t *)swift_getTypeName((Class *)&type metadata for Double, 0);
  if (v64 < 0) {
    goto LABEL_88;
  }
  char v65 = (uint8x16_t *)v63;
  uint64_t v66 = v64;
  int64_t v67 = validateUTF8(_:)(v63, v64);
  if (v69) {
    unint64_t v70 = repairUTF8(_:firstKnownBrokenRange:)(v65->i8, v66, v67, v68);
  }
  else {
    unint64_t v70 = specialized static String._uncheckedFromUTF8(_:isASCII:)(v65, v66, v67 & 1);
  }
  int64_t v72 = v70;
  int64_t v73 = v71;
  char v74 = v101._object;
  unint64_t v75 = ((unint64_t)v101._object >> 56) & 0xF;
  if (((uint64_t)v101._object & 0x2000000000000000) == 0) {
    unint64_t v75 = v101._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
  }
  if (!v75 && (v101._countAndFlagsBits & ~(uint64_t)v101._object & 0x2000000000000000) == 0)
  {
    swift_bridgeObjectRelease((uint64_t)v101._object);
    v101._uint64_t countAndFlagsBits = v72;
    v101._unint64_t object = (void *)v73;
    goto LABEL_64;
  }
  if (((uint64_t)v101._object & 0x2000000000000000) == 0)
  {
    if ((v71 & 0x2000000000000000) != 0) {
      goto LABEL_62;
    }
LABEL_59:
    unint64_t v76 = v70 & 0xFFFFFFFFFFFFLL;
LABEL_63:
    _StringGuts.append(_:)(v72, v73, 0, v76);
    swift_bridgeObjectRelease(v73);
    int64_t v72 = v101._countAndFlagsBits;
    int64_t v73 = (unint64_t)v101._object;
    goto LABEL_64;
  }
  if ((v71 & 0x2000000000000000) == 0) {
    goto LABEL_59;
  }
  uint64_t v77 = specialized _SmallString.init(_:appending:)(v101._countAndFlagsBits, (unint64_t)v101._object, v70, v71);
  if (v79)
  {
LABEL_62:
    unint64_t v76 = HIBYTE(v73) & 0xF;
    goto LABEL_63;
  }
  unint64_t v80 = v77;
  uint64_t v81 = v78;
  swift_bridgeObjectRelease((uint64_t)v74);
  swift_bridgeObjectRelease(v73);
  v101._uint64_t countAndFlagsBits = v80;
  v101._unint64_t object = v81;
  int64_t v73 = (unint64_t)v81;
  int64_t v72 = v80;
LABEL_64:
  unint64_t v82 = HIBYTE(v73) & 0xF;
  if ((v73 & 0x2000000000000000) == 0) {
    unint64_t v82 = v72 & 0xFFFFFFFFFFFFLL;
  }
  if (v82 || (v72 & ~v73 & 0x2000000000000000) != 0)
  {
    if ((v73 & 0x2000000000000000) == 0
      || (uint64_t v83 = specialized _SmallString.init(_:appending:)(v72, v73, 0x2065756C617620uLL, 0xE700000000000000),
          (v85 & 1) != 0))
    {
      _StringGuts.append(_:)(0x2065756C617620, 0xE700000000000000, 0, 7);
      swift_bridgeObjectRelease(0xE700000000000000);
    }
    else
    {
      char v86 = v83;
      uint64_t v87 = v84;
      swift_bridgeObjectRelease(v73);
      swift_bridgeObjectRelease(0xE700000000000000);
      v101._uint64_t countAndFlagsBits = v86;
      v101._unint64_t object = v87;
    }
  }
  else
  {
    swift_bridgeObjectRelease(v73);
    v101._uint64_t countAndFlagsBits = 0x2065756C617620;
    v101._unint64_t object = (void *)0xE700000000000000;
  }
  specialized Double.write<A>(to:)();
  uint64_t v88 = v101._object;
  unint64_t v89 = ((unint64_t)v101._object >> 56) & 0xF;
  if (((uint64_t)v101._object & 0x2000000000000000) == 0) {
    unint64_t v89 = v101._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
  }
  if (v89 || (v101._countAndFlagsBits & ~(uint64_t)v101._object & 0x2000000000000000) != 0)
  {
    if (((uint64_t)v101._object & 0x2000000000000000) == 0
      || (unint64_t v90 = specialized _SmallString.init(_:appending:)(v101._countAndFlagsBits, (unint64_t)v101._object, 0, 0xE000000000000000), (v92 & 1) != 0))
    {
      _StringGuts.append(_:)(0, 0xE000000000000000, 0, 0);
      swift_bridgeObjectRelease(0xE000000000000000);
      uint64_t v93 = v101._countAndFlagsBits;
      unint64_t v94 = v101._object;
    }
    else
    {
      uint64_t v93 = v90;
      unint64_t v94 = v91;
      swift_bridgeObjectRelease((uint64_t)v88);
      swift_bridgeObjectRelease(0xE000000000000000);
    }
  }
  else
  {
    swift_bridgeObjectRelease((uint64_t)v101._object);
    uint64_t v93 = 0;
    unint64_t v94 = (void *)0xE000000000000000;
  }
  *(void *)uint64_t v22 = v25;
  *(void *)(v22 + 8) = v93;
  *(void *)(v22 + 16) = v94;
  *(void *)(v22 + 24) = 0;
  *(unsigned char *)(v22 + 72) = 3;
  swift_willThrow();
  return __swift_destroy_boxed_opaque_existential_1Tm(v100);
}

{
  uint64_t v5;
  Class *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  float v18;
  Class *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  void *v31;
  char v32;
  uint64_t v33;
  void *v34;
  unint64_t v35;
  uint64_t *TypeName;
  uint64_t v37;
  uint8x16_t *v38;
  int64_t v39;
  int64_t v40;
  int64_t v41;
  char v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t countAndFlagsBits;
  unint64_t v46;
  void *object;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  void *v51;
  char v52;
  uint64_t v53;
  void *v54;
  Swift::String v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  void *v59;
  char v60;
  uint64_t v61;
  void *v62;
  uint64_t *v63;
  uint64_t v64;
  uint8x16_t *v65;
  int64_t v66;
  int64_t v67;
  int64_t v68;
  char v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  void *v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  void *v78;
  char v79;
  uint64_t v80;
  void *v81;
  uint64_t v82;
  unint64_t v83;
  void *v84;
  char v85;
  uint64_t v86;
  void *v87;
  void *v88;
  unint64_t v89;
  unint64_t v90;
  void *v91;
  char v92;
  uint64_t v93;
  void *v94;
  Class *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t *v100;
  Swift::String v101;
  uint64_t v102;
  uint64_t v103;

  char v99 = a4;
  uint64_t v9 = type metadata accessor for Optional(0, a2, a3, a4);
  uint64_t v10 = (uint64_t)*(v9 - 1);
  MEMORY[0x1F4188790](v9);
  uint64_t v12 = (char *)&v96 - v11;
  uint64_t v14 = a1[3];
  uint64_t v13 = a1[4];
  uint64_t v100 = a1;
  __swift_project_boxed_opaque_existential_0Tm(a1, v14);
  (*(void (**)(Swift::String *__return_ptr, uint64_t, uint64_t))(v13 + 40))(&v101, v14, v13);
  if (v5) {
    return __swift_destroy_boxed_opaque_existential_1Tm(v100);
  }
  uint64_t v96 = v9;
  unint64_t v97 = v10;
  unint64_t v15 = v99;
  int64x2_t v98 = a5;
  uint64_t v16 = v102;
  uint64_t v17 = v103;
  __swift_project_boxed_opaque_existential_0Tm(&v101, v102);
  uint64_t v18 = (*(float (**)(uint64_t, uint64_t))(v17 + 48))(v16, v17);
  __swift_destroy_boxed_opaque_existential_1Tm(&v101._countAndFlagsBits);
  *(float *)&v101._uint64_t countAndFlagsBits = v18;
  uint64_t v19 = (Class *)a2;
  (*(void (**)(Swift::String *, uint64_t, uint64_t))(v15 + 16))(&v101, a2, v15);
  uint64_t v20 = *(void *)(a2 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v12, 1, a2) != 1)
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v20 + 32))(v98, v12, a2);
    return __swift_destroy_boxed_opaque_existential_1Tm(v100);
  }
  (*(void (**)(char *, Class *))(v97 + 8))(v12, v96);
  swift_allocError((uint64_t)&type metadata for DecodingError, (uint64_t)&protocol witness table for DecodingError, 0, 0);
  uint64_t v22 = v21;
  uint64_t v23 = v100[3];
  uint64_t v24 = v100[4];
  __swift_project_boxed_opaque_existential_0Tm(v100, v23);
  uint64_t v25 = (*(uint64_t (**)(uint64_t, uint64_t))(v24 + 8))(v23, v24);
  uint64_t v26 = specialized static String._createEmpty(withInitialCapacity:)(45);
  uint64_t v28 = v27;
  v101._uint64_t countAndFlagsBits = v26;
  v101._unint64_t object = (void *)v27;
  uint64_t v29 = HIBYTE(v27) & 0xF;
  if ((v27 & 0x2000000000000000) == 0) {
    uint64_t v29 = v26 & 0xFFFFFFFFFFFFLL;
  }
  if (v29 || (v26 & ~v27 & 0x2000000000000000) != 0)
  {
    if ((v27 & 0x2000000000000000) != 0
      && (0x80000001816DD670 & 0x2000000000000000) != 0
      && (unint64_t v30 = specialized _SmallString.init(_:appending:)(v26, v27, 0xD000000000000012, 0x80000001816DD670 | 0x8000000000000000), (v32 & 1) == 0))
    {
      unint64_t v33 = v30;
      unint64_t v34 = v31;
      swift_bridgeObjectRelease(v28);
      swift_bridgeObjectRelease(0x80000001816DD670 | 0x8000000000000000);
      v101._uint64_t countAndFlagsBits = v33;
      v101._unint64_t object = v34;
    }
    else
    {
      if ((0x80000001816DD670 & 0x2000000000000000) != 0) {
        char v35 = (0x80000001816DD670 >> 56) & 0xF;
      }
      else {
        char v35 = 18;
      }
      _StringGuts.append(_:)(0xD000000000000012, 0x80000001816DD670 | 0x8000000000000000, 0, v35);
      swift_bridgeObjectRelease(0x80000001816DD670 | 0x8000000000000000);
    }
  }
  else
  {
    swift_bridgeObjectRelease(v27);
    v101._uint64_t countAndFlagsBits = 0xD000000000000012;
    v101._unint64_t object = (void *)(0x80000001816DD670 | 0x8000000000000000);
  }
  TypeName = (uint64_t *)swift_getTypeName(v19, 0);
  if (v37 < 0) {
LABEL_88:
  }
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeBufferPointer with negative count", 39, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x53FuLL, 0);
  int64_t v38 = (uint8x16_t *)TypeName;
  unint64_t v39 = v37;
  int64_t v40 = validateUTF8(_:)(TypeName, v37);
  if (v42) {
    unint64_t v43 = repairUTF8(_:firstKnownBrokenRange:)(v38->i8, v39, v40, v41);
  }
  else {
    unint64_t v43 = specialized static String._uncheckedFromUTF8(_:isASCII:)(v38, v39, v40 & 1);
  }
  uint64_t countAndFlagsBits = v43;
  int64_t v46 = v44;
  unint64_t object = v101._object;
  unint64_t v48 = ((unint64_t)v101._object >> 56) & 0xF;
  if (((uint64_t)v101._object & 0x2000000000000000) == 0) {
    unint64_t v48 = v101._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
  }
  if (v48 || (v101._countAndFlagsBits & ~(uint64_t)v101._object & 0x2000000000000000) != 0)
  {
    if (((uint64_t)v101._object & 0x2000000000000000) != 0)
    {
      if ((v44 & 0x2000000000000000) != 0)
      {
        uint64_t v50 = specialized _SmallString.init(_:appending:)(v101._countAndFlagsBits, (unint64_t)v101._object, v43, v44);
        if ((v52 & 1) == 0)
        {
          unint64_t v53 = v50;
          uint64_t v54 = v51;
          swift_bridgeObjectRelease((uint64_t)object);
          swift_bridgeObjectRelease(v46);
          v101._uint64_t countAndFlagsBits = v53;
          v101._unint64_t object = v54;
          int64_t v46 = (unint64_t)v54;
          uint64_t countAndFlagsBits = v53;
          goto LABEL_34;
        }
        goto LABEL_32;
      }
    }
    else if ((v44 & 0x2000000000000000) != 0)
    {
LABEL_32:
      unint64_t v49 = HIBYTE(v46) & 0xF;
      goto LABEL_33;
    }
    unint64_t v49 = v43 & 0xFFFFFFFFFFFFLL;
LABEL_33:
    _StringGuts.append(_:)(countAndFlagsBits, v46, 0, v49);
    swift_bridgeObjectRelease(v46);
    uint64_t countAndFlagsBits = v101._countAndFlagsBits;
    int64_t v46 = (unint64_t)v101._object;
    goto LABEL_34;
  }
  swift_bridgeObjectRelease((uint64_t)v101._object);
  v101._uint64_t countAndFlagsBits = countAndFlagsBits;
  v101._unint64_t object = (void *)v46;
LABEL_34:
  unint64_t v55 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(" from invalid ", 0xEuLL, 1);
  uint64_t v56 = HIBYTE(v46) & 0xF;
  if ((v46 & 0x2000000000000000) == 0) {
    uint64_t v56 = countAndFlagsBits & 0xFFFFFFFFFFFFLL;
  }
  if (v56 || (countAndFlagsBits & ~v46 & 0x2000000000000000) != 0)
  {
    if ((v46 & 0x2000000000000000) != 0)
    {
      if (((uint64_t)v55._object & 0x2000000000000000) != 0)
      {
        uint64_t v58 = specialized _SmallString.init(_:appending:)(countAndFlagsBits, v46, v55._countAndFlagsBits, (unint64_t)v55._object);
        if ((v60 & 1) == 0)
        {
          uint64_t v61 = v58;
          uint64_t v62 = v59;
          swift_bridgeObjectRelease(v46);
          swift_bridgeObjectRelease((uint64_t)v55._object);
          v101._uint64_t countAndFlagsBits = v61;
          v101._unint64_t object = v62;
          goto LABEL_47;
        }
        goto LABEL_45;
      }
    }
    else if (((uint64_t)v55._object & 0x2000000000000000) != 0)
    {
LABEL_45:
      char v57 = ((unint64_t)v55._object >> 56) & 0xF;
      goto LABEL_46;
    }
    char v57 = v55._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
LABEL_46:
    _StringGuts.append(_:)(v55._countAndFlagsBits, (unint64_t)v55._object, 0, v57);
    swift_bridgeObjectRelease((uint64_t)v55._object);
    goto LABEL_47;
  }
  swift_bridgeObjectRelease(v46);
  unint64_t v101 = v55;
LABEL_47:
  unint64_t v63 = (uint64_t *)swift_getTypeName((Class *)&type metadata for Float, 0);
  if (v64 < 0) {
    goto LABEL_88;
  }
  char v65 = (uint8x16_t *)v63;
  uint64_t v66 = v64;
  int64_t v67 = validateUTF8(_:)(v63, v64);
  if (v69) {
    unint64_t v70 = repairUTF8(_:firstKnownBrokenRange:)(v65->i8, v66, v67, v68);
  }
  else {
    unint64_t v70 = specialized static String._uncheckedFromUTF8(_:isASCII:)(v65, v66, v67 & 1);
  }
  int64_t v72 = v70;
  int64_t v73 = v71;
  char v74 = v101._object;
  unint64_t v75 = ((unint64_t)v101._object >> 56) & 0xF;
  if (((uint64_t)v101._object & 0x2000000000000000) == 0) {
    unint64_t v75 = v101._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
  }
  if (!v75 && (v101._countAndFlagsBits & ~(uint64_t)v101._object & 0x2000000000000000) == 0)
  {
    swift_bridgeObjectRelease((uint64_t)v101._object);
    v101._uint64_t countAndFlagsBits = v72;
    v101._unint64_t object = (void *)v73;
    goto LABEL_64;
  }
  if (((uint64_t)v101._object & 0x2000000000000000) == 0)
  {
    if ((v71 & 0x2000000000000000) != 0) {
      goto LABEL_62;
    }
LABEL_59:
    unint64_t v76 = v70 & 0xFFFFFFFFFFFFLL;
LABEL_63:
    _StringGuts.append(_:)(v72, v73, 0, v76);
    swift_bridgeObjectRelease(v73);
    int64_t v72 = v101._countAndFlagsBits;
    int64_t v73 = (unint64_t)v101._object;
    goto LABEL_64;
  }
  if ((v71 & 0x2000000000000000) == 0) {
    goto LABEL_59;
  }
  uint64_t v77 = specialized _SmallString.init(_:appending:)(v101._countAndFlagsBits, (unint64_t)v101._object, v70, v71);
  if (v79)
  {
LABEL_62:
    unint64_t v76 = HIBYTE(v73) & 0xF;
    goto LABEL_63;
  }
  unint64_t v80 = v77;
  uint64_t v81 = v78;
  swift_bridgeObjectRelease((uint64_t)v74);
  swift_bridgeObjectRelease(v73);
  v101._uint64_t countAndFlagsBits = v80;
  v101._unint64_t object = v81;
  int64_t v73 = (unint64_t)v81;
  int64_t v72 = v80;
LABEL_64:
  unint64_t v82 = HIBYTE(v73) & 0xF;
  if ((v73 & 0x2000000000000000) == 0) {
    unint64_t v82 = v72 & 0xFFFFFFFFFFFFLL;
  }
  if (v82 || (v72 & ~v73 & 0x2000000000000000) != 0)
  {
    if ((v73 & 0x2000000000000000) == 0
      || (uint64_t v83 = specialized _SmallString.init(_:appending:)(v72, v73, 0x2065756C617620uLL, 0xE700000000000000),
          (v85 & 1) != 0))
    {
      _StringGuts.append(_:)(0x2065756C617620, 0xE700000000000000, 0, 7);
      swift_bridgeObjectRelease(0xE700000000000000);
    }
    else
    {
      char v86 = v83;
      uint64_t v87 = v84;
      swift_bridgeObjectRelease(v73);
      swift_bridgeObjectRelease(0xE700000000000000);
      v101._uint64_t countAndFlagsBits = v86;
      v101._unint64_t object = v87;
    }
  }
  else
  {
    swift_bridgeObjectRelease(v73);
    v101._uint64_t countAndFlagsBits = 0x2065756C617620;
    v101._unint64_t object = (void *)0xE700000000000000;
  }
  specialized Float.write<A>(to:)();
  uint64_t v88 = v101._object;
  unint64_t v89 = ((unint64_t)v101._object >> 56) & 0xF;
  if (((uint64_t)v101._object & 0x2000000000000000) == 0) {
    unint64_t v89 = v101._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
  }
  if (v89 || (v101._countAndFlagsBits & ~(uint64_t)v101._object & 0x2000000000000000) != 0)
  {
    if (((uint64_t)v101._object & 0x2000000000000000) == 0
      || (unint64_t v90 = specialized _SmallString.init(_:appending:)(v101._countAndFlagsBits, (unint64_t)v101._object, 0, 0xE000000000000000), (v92 & 1) != 0))
    {
      _StringGuts.append(_:)(0, 0xE000000000000000, 0, 0);
      swift_bridgeObjectRelease(0xE000000000000000);
      uint64_t v93 = v101._countAndFlagsBits;
      unint64_t v94 = v101._object;
    }
    else
    {
      uint64_t v93 = v90;
      unint64_t v94 = v91;
      swift_bridgeObjectRelease((uint64_t)v88);
      swift_bridgeObjectRelease(0xE000000000000000);
    }
  }
  else
  {
    swift_bridgeObjectRelease((uint64_t)v101._object);
    uint64_t v93 = 0;
    unint64_t v94 = (void *)0xE000000000000000;
  }
  *(void *)uint64_t v22 = v25;
  *(void *)(v22 + 8) = v93;
  *(void *)(v22 + 16) = v94;
  *(void *)(v22 + 24) = 0;
  *(unsigned char *)(v22 + 72) = 3;
  swift_willThrow();
  return __swift_destroy_boxed_opaque_existential_1Tm(v100);
}

{
  uint64_t v5;
  Class *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  void *v21;
  Class *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  void *v34;
  char v35;
  uint64_t v36;
  void *v37;
  unint64_t v39;
  uint64_t *TypeName;
  uint64_t v41;
  uint8x16_t *v42;
  int64_t v43;
  uint64_t v44;
  int64_t v45;
  int64_t v46;
  char v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  void *object;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  void *v56;
  char v57;
  uint64_t v58;
  void *v59;
  Swift::String v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  void *v64;
  char v65;
  uint64_t v66;
  void *v67;
  uint64_t *v68;
  uint64_t v69;
  uint8x16_t *v70;
  int64_t v71;
  int64_t v72;
  int64_t v73;
  char v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t v78;
  void *v79;
  unint64_t v80;
  uint64_t v81;
  unint64_t v82;
  void *v83;
  char v84;
  uint64_t v85;
  void *v86;
  uint64_t countAndFlagsBits;
  uint64_t v88;
  unint64_t v89;
  unint64_t v90;
  char v91;
  unint64_t v92;
  unint64_t v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  void *v99;
  char v100;
  uint64_t v101;
  void *v102;
  uint64_t v103;
  unint64_t v104;
  void *v105;
  char v106;
  uint64_t v107;
  void *v108;
  uint64_t v109;
  Class *v110;
  Class *v111;
  uint64_t v112;
  Swift::String v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t *v116;

  unint64_t v112 = a4;
  uint64_t v9 = type metadata accessor for Optional(0, a2, a3, a4);
  uint64_t v10 = (uint64_t)*(v9 - 1);
  MEMORY[0x1F4188790](v9);
  uint64_t v12 = (char *)&v109 - v11;
  uint64_t v14 = a1[3];
  uint64_t v13 = a1[4];
  uint16x8_t v116 = a1;
  __swift_project_boxed_opaque_existential_0Tm(a1, v14);
  (*(void (**)(Swift::String *__return_ptr, uint64_t, uint64_t))(v13 + 40))(&v113, v14, v13);
  if (!v5)
  {
    uint64x2_t v110 = v9;
    uint64_t v111 = (Class *)a2;
    unint64_t v15 = v112;
    uint64_t v16 = v10;
    uint64_t v17 = v114;
    uint64_t v18 = v115;
    __swift_project_boxed_opaque_existential_0Tm(&v113, v114);
    uint64_t v19 = (*(uint64_t (**)(uint64_t, uint64_t))(v18 + 96))(v17, v18);
    uint64_t v21 = v20;
    __swift_destroy_boxed_opaque_existential_1Tm(&v113._countAndFlagsBits);
    uint64_t v109 = v19;
    v113._uint64_t countAndFlagsBits = v19;
    v113._unint64_t object = v21;
    uint64_t v22 = v111;
    (*(void (**)(Swift::String *, Class *, uint64_t))(v15 + 16))(&v113, v111, v15);
    uint64_t v23 = (uint64_t)*(v22 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, Class *))(v23 + 48))(v12, 1, v22) != 1)
    {
      (*(void (**)(uint64_t, char *, Class *))(v23 + 32))(a5, v12, v22);
      return __swift_destroy_boxed_opaque_existential_1Tm(v116);
    }
    (*(void (**)(char *, Class *))(v16 + 8))(v12, v110);
    swift_allocError((uint64_t)&type metadata for DecodingError, (uint64_t)&protocol witness table for DecodingError, 0, 0);
    uint64_t v25 = v24;
    uint64_t v26 = v116[3];
    uint64_t v27 = v116[4];
    __swift_project_boxed_opaque_existential_0Tm(v116, v26);
    uint64_t v28 = (*(uint64_t (**)(uint64_t, uint64_t))(v27 + 8))(v26, v27);
    uint64_t v29 = specialized static String._createEmpty(withInitialCapacity:)(45);
    uint64_t v31 = v30;
    v113._uint64_t countAndFlagsBits = v29;
    v113._unint64_t object = (void *)v30;
    uint64_t v32 = HIBYTE(v30) & 0xF;
    if ((v30 & 0x2000000000000000) == 0) {
      uint64_t v32 = v29 & 0xFFFFFFFFFFFFLL;
    }
    if (v32 || (v29 & ~v30 & 0x2000000000000000) != 0)
    {
      if ((v30 & 0x2000000000000000) != 0
        && (0x80000001816DD670 & 0x2000000000000000) != 0
        && (unint64_t v33 = specialized _SmallString.init(_:appending:)(v29, v30, 0xD000000000000012, 0x80000001816DD670 | 0x8000000000000000), (v35 & 1) == 0))
      {
        uint64_t v36 = v33;
        unint64_t v37 = v34;
        swift_bridgeObjectRelease(v31);
        swift_bridgeObjectRelease(0x80000001816DD670 | 0x8000000000000000);
        v113._uint64_t countAndFlagsBits = v36;
        v113._unint64_t object = v37;
      }
      else
      {
        if ((0x80000001816DD670 & 0x2000000000000000) != 0) {
          unint64_t v39 = (0x80000001816DD670 >> 56) & 0xF;
        }
        else {
          unint64_t v39 = 18;
        }
        _StringGuts.append(_:)(0xD000000000000012, 0x80000001816DD670 | 0x8000000000000000, 0, v39);
        swift_bridgeObjectRelease(0x80000001816DD670 | 0x8000000000000000);
      }
      uint64_t v22 = v111;
    }
    else
    {
      swift_bridgeObjectRelease(v30);
      v113._uint64_t countAndFlagsBits = 0xD000000000000012;
      v113._unint64_t object = (void *)(0x80000001816DD670 | 0x8000000000000000);
    }
    TypeName = (uint64_t *)swift_getTypeName(v22, 0);
    if (v41 < 0) {
      goto LABEL_103;
    }
    uint64_t v42 = (uint8x16_t *)TypeName;
    unint64_t v43 = v41;
    int64_t v44 = (uint64_t)v21;
    int64_t v45 = validateUTF8(_:)(TypeName, v41);
    if (v47) {
      unint64_t v48 = repairUTF8(_:firstKnownBrokenRange:)(v42->i8, v43, v45, v46);
    }
    else {
      unint64_t v48 = specialized static String._uncheckedFromUTF8(_:isASCII:)(v42, v43, v45 & 1);
    }
    uint64_t v50 = v48;
    unint64_t v51 = v49;
    unint64_t object = v113._object;
    unint64_t v53 = ((unint64_t)v113._object >> 56) & 0xF;
    if (((uint64_t)v113._object & 0x2000000000000000) == 0) {
      unint64_t v53 = v113._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
    }
    if (!v53 && (v113._countAndFlagsBits & ~(uint64_t)v113._object & 0x2000000000000000) == 0)
    {
      swift_bridgeObjectRelease((uint64_t)v113._object);
      v113._uint64_t countAndFlagsBits = v50;
      v113._unint64_t object = (void *)v51;
LABEL_34:
      Swift::String v60 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(" from invalid ", 0xEuLL, 1);
      uint64_t v61 = HIBYTE(v51) & 0xF;
      if ((v51 & 0x2000000000000000) == 0) {
        uint64_t v61 = v50 & 0xFFFFFFFFFFFFLL;
      }
      if (!v61 && (v50 & ~v51 & 0x2000000000000000) == 0)
      {
        swift_bridgeObjectRelease(v51);
        Swift::String v113 = v60;
LABEL_47:
        char v68 = (uint64_t *)swift_getTypeName((Class *)&type metadata for Int128, 0);
        if ((v69 & 0x8000000000000000) == 0)
        {
          unint64_t v70 = (uint8x16_t *)v68;
          int64_t v71 = v69;
          int64_t v72 = validateUTF8(_:)(v68, v69);
          if (v74) {
            unint64_t v75 = repairUTF8(_:firstKnownBrokenRange:)(v70->i8, v71, v72, v73);
          }
          else {
            unint64_t v75 = specialized static String._uncheckedFromUTF8(_:isASCII:)(v70, v71, v72 & 1);
          }
          uint64_t v77 = v75;
          unint64_t v78 = v76;
          uint64_t v79 = v113._object;
          unint64_t v80 = ((unint64_t)v113._object >> 56) & 0xF;
          if (((uint64_t)v113._object & 0x2000000000000000) == 0) {
            unint64_t v80 = v113._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
          }
          if (!v80 && (v113._countAndFlagsBits & ~(uint64_t)v113._object & 0x2000000000000000) == 0)
          {
            swift_bridgeObjectRelease((uint64_t)v113._object);
            v113._uint64_t countAndFlagsBits = v77;
            v113._unint64_t object = (void *)v78;
LABEL_64:
            uint64_t countAndFlagsBits = 0x2065756C617620;
            uint64_t v88 = HIBYTE(v78) & 0xF;
            if ((v78 & 0x2000000000000000) == 0) {
              uint64_t v88 = v77 & 0xFFFFFFFFFFFFLL;
            }
            if (v88 || (v77 & ~v78 & 0x2000000000000000) != 0)
            {
              if ((v78 & 0x2000000000000000) == 0
                || (unint64_t v89 = specialized _SmallString.init(_:appending:)(v77, v78, 0x2065756C617620uLL, 0xE700000000000000), (v91 & 1) != 0))
              {
                _StringGuts.append(_:)(0x2065756C617620, 0xE700000000000000, 0, 7);
                swift_bridgeObjectRelease(0xE700000000000000);
                uint64_t countAndFlagsBits = v113._countAndFlagsBits;
                unint64_t v92 = (unint64_t)v113._object;
                goto LABEL_78;
              }
              uint64_t countAndFlagsBits = v89;
              unint64_t v92 = v90;
              swift_bridgeObjectRelease(v78);
              swift_bridgeObjectRelease(0xE700000000000000);
            }
            else
            {
              swift_bridgeObjectRelease(v78);
              unint64_t v92 = 0xE700000000000000;
            }
            v113._uint64_t countAndFlagsBits = countAndFlagsBits;
            v113._unint64_t object = (void *)v92;
LABEL_78:
            unint64_t v94 = specialized BinaryInteger._description(radix:uppercase:)(0xAuLL, 0, v109, v44);
            uint64_t v95 = v93;
            uint64_t v96 = HIBYTE(v92) & 0xF;
            if ((v92 & 0x2000000000000000) == 0) {
              uint64_t v96 = countAndFlagsBits & 0xFFFFFFFFFFFFLL;
            }
            if (!v96 && (countAndFlagsBits & ~v92 & 0x2000000000000000) == 0)
            {
              swift_bridgeObjectRelease(v92);
              v113._uint64_t countAndFlagsBits = v94;
              v113._unint64_t object = (void *)v95;
              goto LABEL_91;
            }
            if ((v92 & 0x2000000000000000) != 0)
            {
              if ((v93 & 0x2000000000000000) != 0)
              {
                int64x2_t v98 = specialized _SmallString.init(_:appending:)(countAndFlagsBits, v92, v94, v93);
                if ((v100 & 1) == 0)
                {
                  unint64_t v101 = v98;
                  uint64_t v102 = v99;
                  swift_bridgeObjectRelease(v92);
                  swift_bridgeObjectRelease(v95);
                  v113._uint64_t countAndFlagsBits = v101;
                  v113._unint64_t object = v102;
                  uint64_t v95 = (unint64_t)v102;
                  unint64_t v94 = v101;
LABEL_91:
                  unint64_t v103 = HIBYTE(v95) & 0xF;
                  if ((v95 & 0x2000000000000000) == 0) {
                    unint64_t v103 = v94 & 0xFFFFFFFFFFFFLL;
                  }
                  if (v103 || (v94 & ~v95 & 0x2000000000000000) != 0)
                  {
                    if ((v95 & 0x2000000000000000) == 0
                      || (uint64_t v104 = specialized _SmallString.init(_:appending:)(v94, v95, 0, 0xE000000000000000),
                          (v106 & 1) != 0))
                    {
                      _StringGuts.append(_:)(0, 0xE000000000000000, 0, 0);
                      swift_bridgeObjectRelease(0xE000000000000000);
                      uint64_t v107 = v113._countAndFlagsBits;
                      uint64_t v108 = v113._object;
                    }
                    else
                    {
                      uint64_t v107 = v104;
                      uint64_t v108 = v105;
                      swift_bridgeObjectRelease(v95);
                      swift_bridgeObjectRelease(0xE000000000000000);
                    }
                  }
                  else
                  {
                    swift_bridgeObjectRelease(v95);
                    uint64_t v107 = 0;
                    uint64_t v108 = (void *)0xE000000000000000;
                  }
                  *(void *)uint64_t v25 = v28;
                  *(void *)(v25 + 8) = v107;
                  *(void *)(v25 + 16) = v108;
                  *(void *)(v25 + 24) = 0;
                  *(unsigned char *)(v25 + 72) = 3;
                  swift_willThrow();
                  return __swift_destroy_boxed_opaque_existential_1Tm(v116);
                }
                goto LABEL_89;
              }
            }
            else if ((v93 & 0x2000000000000000) != 0)
            {
LABEL_89:
              unint64_t v97 = HIBYTE(v95) & 0xF;
              goto LABEL_90;
            }
            unint64_t v97 = v94 & 0xFFFFFFFFFFFFLL;
LABEL_90:
            _StringGuts.append(_:)(v94, v95, 0, v97);
            swift_bridgeObjectRelease(v95);
            unint64_t v94 = v113._countAndFlagsBits;
            uint64_t v95 = (unint64_t)v113._object;
            goto LABEL_91;
          }
          if (((uint64_t)v113._object & 0x2000000000000000) != 0)
          {
            if ((v76 & 0x2000000000000000) != 0)
            {
              unint64_t v82 = specialized _SmallString.init(_:appending:)(v113._countAndFlagsBits, (unint64_t)v113._object, v75, v76);
              if ((v84 & 1) == 0)
              {
                uint64_t v85 = v82;
                char v86 = v83;
                swift_bridgeObjectRelease((uint64_t)v79);
                swift_bridgeObjectRelease(v78);
                v113._uint64_t countAndFlagsBits = v85;
                v113._unint64_t object = v86;
                unint64_t v78 = (unint64_t)v86;
                uint64_t v77 = v85;
                goto LABEL_64;
              }
              goto LABEL_62;
            }
          }
          else if ((v76 & 0x2000000000000000) != 0)
          {
LABEL_62:
            uint64_t v81 = HIBYTE(v78) & 0xF;
            goto LABEL_63;
          }
          uint64_t v81 = v75 & 0xFFFFFFFFFFFFLL;
LABEL_63:
          _StringGuts.append(_:)(v77, v78, 0, v81);
          swift_bridgeObjectRelease(v78);
          uint64_t v77 = v113._countAndFlagsBits;
          unint64_t v78 = (unint64_t)v113._object;
          goto LABEL_64;
        }
LABEL_103:
        _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeBufferPointer with negative count", 39, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x53FuLL, 0);
      }
      if ((v51 & 0x2000000000000000) != 0)
      {
        if (((uint64_t)v60._object & 0x2000000000000000) != 0)
        {
          unint64_t v63 = specialized _SmallString.init(_:appending:)(v50, v51, v60._countAndFlagsBits, (unint64_t)v60._object);
          if ((v65 & 1) == 0)
          {
            uint64_t v66 = v63;
            int64_t v67 = v64;
            swift_bridgeObjectRelease(v51);
            swift_bridgeObjectRelease((uint64_t)v60._object);
            v113._uint64_t countAndFlagsBits = v66;
            v113._unint64_t object = v67;
            goto LABEL_47;
          }
          goto LABEL_45;
        }
      }
      else if (((uint64_t)v60._object & 0x2000000000000000) != 0)
      {
LABEL_45:
        uint64_t v62 = ((unint64_t)v60._object >> 56) & 0xF;
        goto LABEL_46;
      }
      uint64_t v62 = v60._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
LABEL_46:
      _StringGuts.append(_:)(v60._countAndFlagsBits, (unint64_t)v60._object, 0, v62);
      swift_bridgeObjectRelease((uint64_t)v60._object);
      goto LABEL_47;
    }
    if (((uint64_t)v113._object & 0x2000000000000000) != 0)
    {
      if ((v49 & 0x2000000000000000) != 0)
      {
        unint64_t v55 = specialized _SmallString.init(_:appending:)(v113._countAndFlagsBits, (unint64_t)v113._object, v48, v49);
        if ((v57 & 1) == 0)
        {
          uint64_t v58 = v55;
          char v59 = v56;
          swift_bridgeObjectRelease((uint64_t)object);
          swift_bridgeObjectRelease(v51);
          v113._uint64_t countAndFlagsBits = v58;
          v113._unint64_t object = v59;
          unint64_t v51 = (unint64_t)v59;
          uint64_t v50 = v58;
          goto LABEL_34;
        }
        goto LABEL_32;
      }
    }
    else if ((v49 & 0x2000000000000000) != 0)
    {
LABEL_32:
      uint64_t v54 = HIBYTE(v51) & 0xF;
      goto LABEL_33;
    }
    uint64_t v54 = v48 & 0xFFFFFFFFFFFFLL;
LABEL_33:
    _StringGuts.append(_:)(v50, v51, 0, v54);
    swift_bridgeObjectRelease(v51);
    uint64_t v50 = v113._countAndFlagsBits;
    unint64_t v51 = (unint64_t)v113._object;
    goto LABEL_34;
  }
  return __swift_destroy_boxed_opaque_existential_1Tm(v116);
}

{
  uint64_t v5;
  Class *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  void *v21;
  Class *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  void *v34;
  char v35;
  uint64_t v36;
  void *v37;
  unint64_t v39;
  uint64_t *TypeName;
  uint64_t v41;
  uint8x16_t *v42;
  int64_t v43;
  unint64_t v44;
  int64_t v45;
  int64_t v46;
  char v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  void *object;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  void *v56;
  char v57;
  uint64_t v58;
  void *v59;
  Swift::String v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  void *v64;
  char v65;
  uint64_t v66;
  void *v67;
  uint64_t *v68;
  uint64_t v69;
  uint8x16_t *v70;
  int64_t v71;
  int64_t v72;
  int64_t v73;
  char v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t v78;
  void *v79;
  unint64_t v80;
  uint64_t v81;
  unint64_t v82;
  void *v83;
  char v84;
  uint64_t v85;
  void *v86;
  uint64_t countAndFlagsBits;
  uint64_t v88;
  unint64_t v89;
  unint64_t v90;
  char v91;
  unint64_t v92;
  unint64_t v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  void *v99;
  char v100;
  uint64_t v101;
  void *v102;
  uint64_t v103;
  unint64_t v104;
  void *v105;
  char v106;
  uint64_t v107;
  void *v108;
  unint64_t v109;
  Class *v110;
  Class *v111;
  uint64_t v112;
  Swift::String v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t *v116;

  unint64_t v112 = a4;
  uint64_t v9 = type metadata accessor for Optional(0, a2, a3, a4);
  uint64_t v10 = (uint64_t)*(v9 - 1);
  MEMORY[0x1F4188790](v9);
  uint64_t v12 = (char *)&v109 - v11;
  uint64_t v14 = a1[3];
  uint64_t v13 = a1[4];
  uint16x8_t v116 = a1;
  __swift_project_boxed_opaque_existential_0Tm(a1, v14);
  (*(void (**)(Swift::String *__return_ptr, uint64_t, uint64_t))(v13 + 40))(&v113, v14, v13);
  if (!v5)
  {
    uint64x2_t v110 = v9;
    uint64_t v111 = (Class *)a2;
    unint64_t v15 = v112;
    uint64_t v16 = v10;
    uint64_t v17 = v114;
    uint64_t v18 = v115;
    __swift_project_boxed_opaque_existential_0Tm(&v113, v114);
    uint64_t v19 = (*(uint64_t (**)(uint64_t, uint64_t))(v18 + 144))(v17, v18);
    uint64_t v21 = v20;
    __swift_destroy_boxed_opaque_existential_1Tm(&v113._countAndFlagsBits);
    uint64_t v109 = v19;
    v113._uint64_t countAndFlagsBits = v19;
    v113._unint64_t object = v21;
    uint64_t v22 = v111;
    (*(void (**)(Swift::String *, Class *, uint64_t))(v15 + 16))(&v113, v111, v15);
    uint64_t v23 = (uint64_t)*(v22 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, Class *))(v23 + 48))(v12, 1, v22) != 1)
    {
      (*(void (**)(uint64_t, char *, Class *))(v23 + 32))(a5, v12, v22);
      return __swift_destroy_boxed_opaque_existential_1Tm(v116);
    }
    (*(void (**)(char *, Class *))(v16 + 8))(v12, v110);
    swift_allocError((uint64_t)&type metadata for DecodingError, (uint64_t)&protocol witness table for DecodingError, 0, 0);
    uint64_t v25 = v24;
    uint64_t v26 = v116[3];
    uint64_t v27 = v116[4];
    __swift_project_boxed_opaque_existential_0Tm(v116, v26);
    uint64_t v28 = (*(uint64_t (**)(uint64_t, uint64_t))(v27 + 8))(v26, v27);
    uint64_t v29 = specialized static String._createEmpty(withInitialCapacity:)(45);
    uint64_t v31 = v30;
    v113._uint64_t countAndFlagsBits = v29;
    v113._unint64_t object = (void *)v30;
    uint64_t v32 = HIBYTE(v30) & 0xF;
    if ((v30 & 0x2000000000000000) == 0) {
      uint64_t v32 = v29 & 0xFFFFFFFFFFFFLL;
    }
    if (v32 || (v29 & ~v30 & 0x2000000000000000) != 0)
    {
      if ((v30 & 0x2000000000000000) != 0
        && (0x80000001816DD670 & 0x2000000000000000) != 0
        && (unint64_t v33 = specialized _SmallString.init(_:appending:)(v29, v30, 0xD000000000000012, 0x80000001816DD670 | 0x8000000000000000), (v35 & 1) == 0))
      {
        uint64_t v36 = v33;
        unint64_t v37 = v34;
        swift_bridgeObjectRelease(v31);
        swift_bridgeObjectRelease(0x80000001816DD670 | 0x8000000000000000);
        v113._uint64_t countAndFlagsBits = v36;
        v113._unint64_t object = v37;
      }
      else
      {
        if ((0x80000001816DD670 & 0x2000000000000000) != 0) {
          unint64_t v39 = (0x80000001816DD670 >> 56) & 0xF;
        }
        else {
          unint64_t v39 = 18;
        }
        _StringGuts.append(_:)(0xD000000000000012, 0x80000001816DD670 | 0x8000000000000000, 0, v39);
        swift_bridgeObjectRelease(0x80000001816DD670 | 0x8000000000000000);
      }
      uint64_t v22 = v111;
    }
    else
    {
      swift_bridgeObjectRelease(v30);
      v113._uint64_t countAndFlagsBits = 0xD000000000000012;
      v113._unint64_t object = (void *)(0x80000001816DD670 | 0x8000000000000000);
    }
    TypeName = (uint64_t *)swift_getTypeName(v22, 0);
    if (v41 < 0) {
      goto LABEL_103;
    }
    uint64_t v42 = (uint8x16_t *)TypeName;
    unint64_t v43 = v41;
    int64_t v44 = (unint64_t)v21;
    int64_t v45 = validateUTF8(_:)(TypeName, v41);
    if (v47) {
      unint64_t v48 = repairUTF8(_:firstKnownBrokenRange:)(v42->i8, v43, v45, v46);
    }
    else {
      unint64_t v48 = specialized static String._uncheckedFromUTF8(_:isASCII:)(v42, v43, v45 & 1);
    }
    uint64_t v50 = v48;
    unint64_t v51 = v49;
    unint64_t object = v113._object;
    unint64_t v53 = ((unint64_t)v113._object >> 56) & 0xF;
    if (((uint64_t)v113._object & 0x2000000000000000) == 0) {
      unint64_t v53 = v113._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
    }
    if (!v53 && (v113._countAndFlagsBits & ~(uint64_t)v113._object & 0x2000000000000000) == 0)
    {
      swift_bridgeObjectRelease((uint64_t)v113._object);
      v113._uint64_t countAndFlagsBits = v50;
      v113._unint64_t object = (void *)v51;
LABEL_34:
      Swift::String v60 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(" from invalid ", 0xEuLL, 1);
      uint64_t v61 = HIBYTE(v51) & 0xF;
      if ((v51 & 0x2000000000000000) == 0) {
        uint64_t v61 = v50 & 0xFFFFFFFFFFFFLL;
      }
      if (!v61 && (v50 & ~v51 & 0x2000000000000000) == 0)
      {
        swift_bridgeObjectRelease(v51);
        Swift::String v113 = v60;
LABEL_47:
        char v68 = (uint64_t *)swift_getTypeName((Class *)&type metadata for UInt128, 0);
        if ((v69 & 0x8000000000000000) == 0)
        {
          unint64_t v70 = (uint8x16_t *)v68;
          int64_t v71 = v69;
          int64_t v72 = validateUTF8(_:)(v68, v69);
          if (v74) {
            unint64_t v75 = repairUTF8(_:firstKnownBrokenRange:)(v70->i8, v71, v72, v73);
          }
          else {
            unint64_t v75 = specialized static String._uncheckedFromUTF8(_:isASCII:)(v70, v71, v72 & 1);
          }
          uint64_t v77 = v75;
          unint64_t v78 = v76;
          uint64_t v79 = v113._object;
          unint64_t v80 = ((unint64_t)v113._object >> 56) & 0xF;
          if (((uint64_t)v113._object & 0x2000000000000000) == 0) {
            unint64_t v80 = v113._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
          }
          if (!v80 && (v113._countAndFlagsBits & ~(uint64_t)v113._object & 0x2000000000000000) == 0)
          {
            swift_bridgeObjectRelease((uint64_t)v113._object);
            v113._uint64_t countAndFlagsBits = v77;
            v113._unint64_t object = (void *)v78;
LABEL_64:
            uint64_t countAndFlagsBits = 0x2065756C617620;
            uint64_t v88 = HIBYTE(v78) & 0xF;
            if ((v78 & 0x2000000000000000) == 0) {
              uint64_t v88 = v77 & 0xFFFFFFFFFFFFLL;
            }
            if (v88 || (v77 & ~v78 & 0x2000000000000000) != 0)
            {
              if ((v78 & 0x2000000000000000) == 0
                || (unint64_t v89 = specialized _SmallString.init(_:appending:)(v77, v78, 0x2065756C617620uLL, 0xE700000000000000), (v91 & 1) != 0))
              {
                _StringGuts.append(_:)(0x2065756C617620, 0xE700000000000000, 0, 7);
                swift_bridgeObjectRelease(0xE700000000000000);
                uint64_t countAndFlagsBits = v113._countAndFlagsBits;
                unint64_t v92 = (unint64_t)v113._object;
                goto LABEL_78;
              }
              uint64_t countAndFlagsBits = v89;
              unint64_t v92 = v90;
              swift_bridgeObjectRelease(v78);
              swift_bridgeObjectRelease(0xE700000000000000);
            }
            else
            {
              swift_bridgeObjectRelease(v78);
              unint64_t v92 = 0xE700000000000000;
            }
            v113._uint64_t countAndFlagsBits = countAndFlagsBits;
            v113._unint64_t object = (void *)v92;
LABEL_78:
            unint64_t v94 = specialized BinaryInteger._description(radix:uppercase:)(0xAuLL, 0, v109, v44);
            uint64_t v95 = v93;
            uint64_t v96 = HIBYTE(v92) & 0xF;
            if ((v92 & 0x2000000000000000) == 0) {
              uint64_t v96 = countAndFlagsBits & 0xFFFFFFFFFFFFLL;
            }
            if (!v96 && (countAndFlagsBits & ~v92 & 0x2000000000000000) == 0)
            {
              swift_bridgeObjectRelease(v92);
              v113._uint64_t countAndFlagsBits = v94;
              v113._unint64_t object = (void *)v95;
              goto LABEL_91;
            }
            if ((v92 & 0x2000000000000000) != 0)
            {
              if ((v93 & 0x2000000000000000) != 0)
              {
                int64x2_t v98 = specialized _SmallString.init(_:appending:)(countAndFlagsBits, v92, v94, v93);
                if ((v100 & 1) == 0)
                {
                  unint64_t v101 = v98;
                  uint64_t v102 = v99;
                  swift_bridgeObjectRelease(v92);
                  swift_bridgeObjectRelease(v95);
                  v113._uint64_t countAndFlagsBits = v101;
                  v113._unint64_t object = v102;
                  uint64_t v95 = (unint64_t)v102;
                  unint64_t v94 = v101;
LABEL_91:
                  unint64_t v103 = HIBYTE(v95) & 0xF;
                  if ((v95 & 0x2000000000000000) == 0) {
                    unint64_t v103 = v94 & 0xFFFFFFFFFFFFLL;
                  }
                  if (v103 || (v94 & ~v95 & 0x2000000000000000) != 0)
                  {
                    if ((v95 & 0x2000000000000000) == 0
                      || (uint64_t v104 = specialized _SmallString.init(_:appending:)(v94, v95, 0, 0xE000000000000000),
                          (v106 & 1) != 0))
                    {
                      _StringGuts.append(_:)(0, 0xE000000000000000, 0, 0);
                      swift_bridgeObjectRelease(0xE000000000000000);
                      uint64_t v107 = v113._countAndFlagsBits;
                      uint64_t v108 = v113._object;
                    }
                    else
                    {
                      uint64_t v107 = v104;
                      uint64_t v108 = v105;
                      swift_bridgeObjectRelease(v95);
                      swift_bridgeObjectRelease(0xE000000000000000);
                    }
                  }
                  else
                  {
                    swift_bridgeObjectRelease(v95);
                    uint64_t v107 = 0;
                    uint64_t v108 = (void *)0xE000000000000000;
                  }
                  *(void *)uint64_t v25 = v28;
                  *(void *)(v25 + 8) = v107;
                  *(void *)(v25 + 16) = v108;
                  *(void *)(v25 + 24) = 0;
                  *(unsigned char *)(v25 + 72) = 3;
                  swift_willThrow();
                  return __swift_destroy_boxed_opaque_existential_1Tm(v116);
                }
                goto LABEL_89;
              }
            }
            else if ((v93 & 0x2000000000000000) != 0)
            {
LABEL_89:
              unint64_t v97 = HIBYTE(v95) & 0xF;
              goto LABEL_90;
            }
            unint64_t v97 = v94 & 0xFFFFFFFFFFFFLL;
LABEL_90:
            _StringGuts.append(_:)(v94, v95, 0, v97);
            swift_bridgeObjectRelease(v95);
            unint64_t v94 = v113._countAndFlagsBits;
            uint64_t v95 = (unint64_t)v113._object;
            goto LABEL_91;
          }
          if (((uint64_t)v113._object & 0x2000000000000000) != 0)
          {
            if ((v76 & 0x2000000000000000) != 0)
            {
              unint64_t v82 = specialized _SmallString.init(_:appending:)(v113._countAndFlagsBits, (unint64_t)v113._object, v75, v76);
              if ((v84 & 1) == 0)
              {
                uint64_t v85 = v82;
                char v86 = v83;
                swift_bridgeObjectRelease((uint64_t)v79);
                swift_bridgeObjectRelease(v78);
                v113._uint64_t countAndFlagsBits = v85;
                v113._unint64_t object = v86;
                unint64_t v78 = (unint64_t)v86;
                uint64_t v77 = v85;
                goto LABEL_64;
              }
              goto LABEL_62;
            }
          }
          else if ((v76 & 0x2000000000000000) != 0)
          {
LABEL_62:
            uint64_t v81 = HIBYTE(v78) & 0xF;
            goto LABEL_63;
          }
          uint64_t v81 = v75 & 0xFFFFFFFFFFFFLL;
LABEL_63:
          _StringGuts.append(_:)(v77, v78, 0, v81);
          swift_bridgeObjectRelease(v78);
          uint64_t v77 = v113._countAndFlagsBits;
          unint64_t v78 = (unint64_t)v113._object;
          goto LABEL_64;
        }
LABEL_103:
        _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeBufferPointer with negative count", 39, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x53FuLL, 0);
      }
      if ((v51 & 0x2000000000000000) != 0)
      {
        if (((uint64_t)v60._object & 0x2000000000000000) != 0)
        {
          unint64_t v63 = specialized _SmallString.init(_:appending:)(v50, v51, v60._countAndFlagsBits, (unint64_t)v60._object);
          if ((v65 & 1) == 0)
          {
            uint64_t v66 = v63;
            int64_t v67 = v64;
            swift_bridgeObjectRelease(v51);
            swift_bridgeObjectRelease((uint64_t)v60._object);
            v113._uint64_t countAndFlagsBits = v66;
            v113._unint64_t object = v67;
            goto LABEL_47;
          }
          goto LABEL_45;
        }
      }
      else if (((uint64_t)v60._object & 0x2000000000000000) != 0)
      {
LABEL_45:
        uint64_t v62 = ((unint64_t)v60._object >> 56) & 0xF;
        goto LABEL_46;
      }
      uint64_t v62 = v60._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
LABEL_46:
      _StringGuts.append(_:)(v60._countAndFlagsBits, (unint64_t)v60._object, 0, v62);
      swift_bridgeObjectRelease((uint64_t)v60._object);
      goto LABEL_47;
    }
    if (((uint64_t)v113._object & 0x2000000000000000) != 0)
    {
      if ((v49 & 0x2000000000000000) != 0)
      {
        unint64_t v55 = specialized _SmallString.init(_:appending:)(v113._countAndFlagsBits, (unint64_t)v113._object, v48, v49);
        if ((v57 & 1) == 0)
        {
          uint64_t v58 = v55;
          char v59 = v56;
          swift_bridgeObjectRelease((uint64_t)object);
          swift_bridgeObjectRelease(v51);
          v113._uint64_t countAndFlagsBits = v58;
          v113._unint64_t object = v59;
          unint64_t v51 = (unint64_t)v59;
          uint64_t v50 = v58;
          goto LABEL_34;
        }
        goto LABEL_32;
      }
    }
    else if ((v49 & 0x2000000000000000) != 0)
    {
LABEL_32:
      uint64_t v54 = HIBYTE(v51) & 0xF;
      goto LABEL_33;
    }
    uint64_t v54 = v48 & 0xFFFFFFFFFFFFLL;
LABEL_33:
    _StringGuts.append(_:)(v50, v51, 0, v54);
    swift_bridgeObjectRelease(v51);
    uint64_t v50 = v113._countAndFlagsBits;
    unint64_t v51 = (unint64_t)v113._object;
    goto LABEL_34;
  }
  return __swift_destroy_boxed_opaque_existential_1Tm(v116);
}

double Double.init(from:)(uint64_t *a1)
{
  uint64_t v4 = a1[3];
  uint64_t v5 = a1[4];
  __swift_project_boxed_opaque_existential_0Tm(a1, v4);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v5 + 40))(v9, v4, v5);
  if (!v1)
  {
    uint64_t v6 = v10;
    uint64_t v7 = v11;
    __swift_project_boxed_opaque_existential_0Tm(v9, v10);
    double v2 = (*(double (**)(uint64_t, uint64_t))(v7 + 40))(v6, v7);
    __swift_destroy_boxed_opaque_existential_1Tm(v9);
  }
  __swift_destroy_boxed_opaque_existential_1Tm(a1);
  return v2;
}

uint64_t Double.encode(to:)(void *a1, double a2)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  __swift_project_boxed_opaque_existential_0Tm(a1, v3);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v4 + 40))(v8, v3, v4);
  unint64_t v5 = v9;
  uint64_t v6 = v10;
  __swift_mutable_project_boxed_opaque_existential_1(v8, v9);
  (*(void (**)(unint64_t, uint64_t, double))(v6 + 40))(v5, v6, a2);
  return __swift_destroy_boxed_opaque_existential_1Tm(v8);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Double(void *a1)
{
  double v2 = *v1;
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  __swift_project_boxed_opaque_existential_0Tm(a1, v3);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v4 + 40))(v8, v3, v4);
  unint64_t v5 = v9;
  uint64_t v6 = v10;
  __swift_mutable_project_boxed_opaque_existential_1(v8, v9);
  (*(void (**)(unint64_t, uint64_t, double))(v6 + 40))(v5, v6, v2);
  return __swift_destroy_boxed_opaque_existential_1Tm(v8);
}

uint64_t protocol witness for Decodable.init(from:) in conformance Double@<X0>(uint64_t *a1@<X0>, double *a2@<X8>)
{
  uint64_t v5 = a1[3];
  uint64_t v6 = a1[4];
  __swift_project_boxed_opaque_existential_0Tm(a1, v5);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v6 + 40))(v11, v5, v6);
  if (v2) {
    return __swift_destroy_boxed_opaque_existential_1Tm(a1);
  }
  uint64_t v7 = v12;
  uint64_t v8 = v13;
  __swift_project_boxed_opaque_existential_0Tm(v11, v12);
  double v9 = (*(double (**)(uint64_t, uint64_t))(v8 + 40))(v7, v8);
  __swift_destroy_boxed_opaque_existential_1Tm(v11);
  uint64_t result = __swift_destroy_boxed_opaque_existential_1Tm(a1);
  *a2 = v9;
  return result;
}

float Float.init(from:)(uint64_t *a1)
{
  uint64_t v4 = a1[3];
  uint64_t v5 = a1[4];
  __swift_project_boxed_opaque_existential_0Tm(a1, v4);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v5 + 40))(v9, v4, v5);
  if (!v1)
  {
    uint64_t v6 = v10;
    uint64_t v7 = v11;
    __swift_project_boxed_opaque_existential_0Tm(v9, v10);
    float v2 = (*(float (**)(uint64_t, uint64_t))(v7 + 48))(v6, v7);
    __swift_destroy_boxed_opaque_existential_1Tm(v9);
  }
  __swift_destroy_boxed_opaque_existential_1Tm(a1);
  return v2;
}

uint64_t Float.encode(to:)(void *a1, float a2)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  __swift_project_boxed_opaque_existential_0Tm(a1, v3);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v4 + 40))(v8, v3, v4);
  unint64_t v5 = v9;
  uint64_t v6 = v10;
  __swift_mutable_project_boxed_opaque_existential_1(v8, v9);
  (*(void (**)(unint64_t, uint64_t, float))(v6 + 48))(v5, v6, a2);
  return __swift_destroy_boxed_opaque_existential_1Tm(v8);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Float(void *a1)
{
  float v2 = *v1;
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  __swift_project_boxed_opaque_existential_0Tm(a1, v3);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v4 + 40))(v8, v3, v4);
  unint64_t v5 = v9;
  uint64_t v6 = v10;
  __swift_mutable_project_boxed_opaque_existential_1(v8, v9);
  (*(void (**)(unint64_t, uint64_t, float))(v6 + 48))(v5, v6, v2);
  return __swift_destroy_boxed_opaque_existential_1Tm(v8);
}

uint64_t protocol witness for Decodable.init(from:) in conformance Float@<X0>(uint64_t *a1@<X0>, float *a2@<X8>)
{
  uint64_t v5 = a1[3];
  uint64_t v6 = a1[4];
  __swift_project_boxed_opaque_existential_0Tm(a1, v5);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v6 + 40))(v11, v5, v6);
  if (v2) {
    return __swift_destroy_boxed_opaque_existential_1Tm(a1);
  }
  uint64_t v7 = v12;
  uint64_t v8 = v13;
  __swift_project_boxed_opaque_existential_0Tm(v11, v12);
  float v9 = (*(float (**)(uint64_t, uint64_t))(v8 + 48))(v7, v8);
  __swift_destroy_boxed_opaque_existential_1Tm(v11);
  uint64_t result = __swift_destroy_boxed_opaque_existential_1Tm(a1);
  *a2 = v9;
  return result;
}

float Float16.init(from:)(uint64_t *a1)
{
  return specialized Float16.init(from:)(a1);
}

__int16 Float16.init(_:)@<H0>(float _S0@<S0>)
{
  __asm { FCVT            H0, S0 }
  return result;
}

BOOL Float16.isInfinite.getter(__n128 a1)
{
  return (a1.n128_u16[0] & 0x7FFF) == 31744;
}

BOOL Float.isFinite.getter(float a1)
{
  return (~LODWORD(a1) & 0x7F800000) != 0;
}

uint64_t Float16.encode(to:)(void *a1, __n128 _Q0)
{
  __asm { FCVT            S8, H0 }
  uint64_t v7 = a1[3];
  uint64_t v8 = a1[4];
  __swift_project_boxed_opaque_existential_0Tm(a1, v7);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v8 + 40))(v12, v7, v8);
  unint64_t v9 = v13;
  uint64_t v10 = v14;
  __swift_mutable_project_boxed_opaque_existential_1(v12, v13);
  (*(void (**)(unint64_t, uint64_t, float))(v10 + 48))(v9, v10, _S8);
  return __swift_destroy_boxed_opaque_existential_1Tm(v12);
}

float Float.init(_:)(__n128 _Q0)
{
  __asm { FCVT            S0, H0 }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Float16(void *a1)
{
  _H0 = *v1;
  __asm { FCVT            S8, H0 }
  uint64_t v8 = a1[3];
  uint64_t v9 = a1[4];
  __swift_project_boxed_opaque_existential_0Tm(a1, v8);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v9 + 40))(v13, v8, v9);
  unint64_t v10 = v14;
  uint64_t v11 = v15;
  __swift_mutable_project_boxed_opaque_existential_1(v13, v14);
  (*(void (**)(unint64_t, uint64_t, float))(v11 + 48))(v10, v11, _S8);
  return __swift_destroy_boxed_opaque_existential_1Tm(v13);
}

void protocol witness for Decodable.init(from:) in conformance Float16(uint64_t *a1@<X0>, _WORD *a2@<X8>)
{
  float v4 = specialized Float16.init(from:)(a1);
  if (!v2) {
    *a2 = LOWORD(v4);
  }
}

void *Int.init(from:)(uint64_t *a1)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  uint64_t v5 = __swift_project_boxed_opaque_existential_0Tm(a1, v3);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v4 + 40))(v9, v3, v4);
  if (!v1)
  {
    uint64_t v6 = v10;
    uint64_t v7 = v11;
    __swift_project_boxed_opaque_existential_0Tm(v9, v10);
    uint64_t v5 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v7 + 56))(v6, v7);
    __swift_destroy_boxed_opaque_existential_1Tm(v9);
  }
  __swift_destroy_boxed_opaque_existential_1Tm(a1);
  return v5;
}

uint64_t Int.encode(to:)(void *a1, uint64_t a2)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  __swift_project_boxed_opaque_existential_0Tm(a1, v3);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v4 + 40))(v8, v3, v4);
  unint64_t v5 = v9;
  uint64_t v6 = v10;
  __swift_mutable_project_boxed_opaque_existential_1(v8, v9);
  (*(void (**)(uint64_t, unint64_t, uint64_t))(v6 + 56))(a2, v5, v6);
  return __swift_destroy_boxed_opaque_existential_1Tm(v8);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Int(void *a1)
{
  uint64_t v2 = *v1;
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  __swift_project_boxed_opaque_existential_0Tm(a1, v3);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v4 + 40))(v8, v3, v4);
  unint64_t v5 = v9;
  uint64_t v6 = v10;
  __swift_mutable_project_boxed_opaque_existential_1(v8, v9);
  (*(void (**)(uint64_t, unint64_t, uint64_t))(v6 + 56))(v2, v5, v6);
  return __swift_destroy_boxed_opaque_existential_1Tm(v8);
}

uint64_t protocol witness for Decodable.init(from:) in conformance Int@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = a1[3];
  uint64_t v6 = a1[4];
  __swift_project_boxed_opaque_existential_0Tm(a1, v5);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v6 + 40))(v11, v5, v6);
  if (v2) {
    return __swift_destroy_boxed_opaque_existential_1Tm(a1);
  }
  uint64_t v7 = v12;
  uint64_t v8 = v13;
  __swift_project_boxed_opaque_existential_0Tm(v11, v12);
  uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 56))(v7, v8);
  __swift_destroy_boxed_opaque_existential_1Tm(v11);
  uint64_t result = __swift_destroy_boxed_opaque_existential_1Tm(a1);
  *a2 = v9;
  return result;
}

void *Int8.init(from:)(uint64_t *a1)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  uint64_t v5 = __swift_project_boxed_opaque_existential_0Tm(a1, v3);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v4 + 40))(v9, v3, v4);
  if (!v1)
  {
    uint64_t v6 = v10;
    uint64_t v7 = v11;
    __swift_project_boxed_opaque_existential_0Tm(v9, v10);
    uint64_t v5 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v7 + 64))(v6, v7);
    __swift_destroy_boxed_opaque_existential_1Tm(v9);
  }
  __swift_destroy_boxed_opaque_existential_1Tm(a1);
  return v5;
}

uint64_t Int8.encode(to:)(void *a1, uint64_t a2)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  __swift_project_boxed_opaque_existential_0Tm(a1, v3);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v4 + 40))(v8, v3, v4);
  unint64_t v5 = v9;
  uint64_t v6 = v10;
  __swift_mutable_project_boxed_opaque_existential_1(v8, v9);
  (*(void (**)(uint64_t, unint64_t, uint64_t))(v6 + 64))(a2, v5, v6);
  return __swift_destroy_boxed_opaque_existential_1Tm(v8);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Int8(void *a1)
{
  uint64_t v2 = *v1;
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  __swift_project_boxed_opaque_existential_0Tm(a1, v3);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v4 + 40))(v8, v3, v4);
  unint64_t v5 = v9;
  uint64_t v6 = v10;
  __swift_mutable_project_boxed_opaque_existential_1(v8, v9);
  (*(void (**)(uint64_t, unint64_t, uint64_t))(v6 + 64))(v2, v5, v6);
  return __swift_destroy_boxed_opaque_existential_1Tm(v8);
}

uint64_t protocol witness for Decodable.init(from:) in conformance Int8@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v5 = a1[3];
  uint64_t v6 = a1[4];
  __swift_project_boxed_opaque_existential_0Tm(a1, v5);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v6 + 40))(v11, v5, v6);
  if (v2) {
    return __swift_destroy_boxed_opaque_existential_1Tm(a1);
  }
  uint64_t v7 = v12;
  uint64_t v8 = v13;
  __swift_project_boxed_opaque_existential_0Tm(v11, v12);
  char v9 = (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 64))(v7, v8);
  __swift_destroy_boxed_opaque_existential_1Tm(v11);
  uint64_t result = __swift_destroy_boxed_opaque_existential_1Tm(a1);
  *a2 = v9;
  return result;
}

void *Int16.init(from:)(uint64_t *a1)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  uint64_t v5 = __swift_project_boxed_opaque_existential_0Tm(a1, v3);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v4 + 40))(v9, v3, v4);
  if (!v1)
  {
    uint64_t v6 = v10;
    uint64_t v7 = v11;
    __swift_project_boxed_opaque_existential_0Tm(v9, v10);
    uint64_t v5 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v7 + 72))(v6, v7);
    __swift_destroy_boxed_opaque_existential_1Tm(v9);
  }
  __swift_destroy_boxed_opaque_existential_1Tm(a1);
  return v5;
}

uint64_t Int16.encode(to:)(void *a1, uint64_t a2)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  __swift_project_boxed_opaque_existential_0Tm(a1, v3);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v4 + 40))(v8, v3, v4);
  unint64_t v5 = v9;
  uint64_t v6 = v10;
  __swift_mutable_project_boxed_opaque_existential_1(v8, v9);
  (*(void (**)(uint64_t, unint64_t, uint64_t))(v6 + 72))(a2, v5, v6);
  return __swift_destroy_boxed_opaque_existential_1Tm(v8);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Int16(void *a1)
{
  uint64_t v2 = *v1;
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  __swift_project_boxed_opaque_existential_0Tm(a1, v3);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v4 + 40))(v8, v3, v4);
  unint64_t v5 = v9;
  uint64_t v6 = v10;
  __swift_mutable_project_boxed_opaque_existential_1(v8, v9);
  (*(void (**)(uint64_t, unint64_t, uint64_t))(v6 + 72))(v2, v5, v6);
  return __swift_destroy_boxed_opaque_existential_1Tm(v8);
}

uint64_t protocol witness for Decodable.init(from:) in conformance Int16@<X0>(uint64_t *a1@<X0>, _WORD *a2@<X8>)
{
  uint64_t v5 = a1[3];
  uint64_t v6 = a1[4];
  __swift_project_boxed_opaque_existential_0Tm(a1, v5);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v6 + 40))(v11, v5, v6);
  if (v2) {
    return __swift_destroy_boxed_opaque_existential_1Tm(a1);
  }
  uint64_t v7 = v12;
  uint64_t v8 = v13;
  __swift_project_boxed_opaque_existential_0Tm(v11, v12);
  __int16 v9 = (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 72))(v7, v8);
  __swift_destroy_boxed_opaque_existential_1Tm(v11);
  uint64_t result = __swift_destroy_boxed_opaque_existential_1Tm(a1);
  *a2 = v9;
  return result;
}

void *Int32.init(from:)(uint64_t *a1)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  uint64_t v5 = __swift_project_boxed_opaque_existential_0Tm(a1, v3);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v4 + 40))(v9, v3, v4);
  if (!v1)
  {
    uint64_t v6 = v10;
    uint64_t v7 = v11;
    __swift_project_boxed_opaque_existential_0Tm(v9, v10);
    uint64_t v5 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v7 + 80))(v6, v7);
    __swift_destroy_boxed_opaque_existential_1Tm(v9);
  }
  __swift_destroy_boxed_opaque_existential_1Tm(a1);
  return v5;
}

uint64_t Int32.encode(to:)(void *a1, uint64_t a2)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  __swift_project_boxed_opaque_existential_0Tm(a1, v3);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v4 + 40))(v8, v3, v4);
  unint64_t v5 = v9;
  uint64_t v6 = v10;
  __swift_mutable_project_boxed_opaque_existential_1(v8, v9);
  (*(void (**)(uint64_t, unint64_t, uint64_t))(v6 + 80))(a2, v5, v6);
  return __swift_destroy_boxed_opaque_existential_1Tm(v8);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Int32(void *a1)
{
  uint64_t v2 = *v1;
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  __swift_project_boxed_opaque_existential_0Tm(a1, v3);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v4 + 40))(v8, v3, v4);
  unint64_t v5 = v9;
  uint64_t v6 = v10;
  __swift_mutable_project_boxed_opaque_existential_1(v8, v9);
  (*(void (**)(uint64_t, unint64_t, uint64_t))(v6 + 80))(v2, v5, v6);
  return __swift_destroy_boxed_opaque_existential_1Tm(v8);
}

uint64_t protocol witness for Decodable.init(from:) in conformance Int32@<X0>(uint64_t *a1@<X0>, _DWORD *a2@<X8>)
{
  uint64_t v5 = a1[3];
  uint64_t v6 = a1[4];
  __swift_project_boxed_opaque_existential_0Tm(a1, v5);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v6 + 40))(v11, v5, v6);
  if (v2) {
    return __swift_destroy_boxed_opaque_existential_1Tm(a1);
  }
  uint64_t v7 = v12;
  uint64_t v8 = v13;
  __swift_project_boxed_opaque_existential_0Tm(v11, v12);
  int v9 = (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 80))(v7, v8);
  __swift_destroy_boxed_opaque_existential_1Tm(v11);
  uint64_t result = __swift_destroy_boxed_opaque_existential_1Tm(a1);
  *a2 = v9;
  return result;
}

void *Int64.init(from:)(uint64_t *a1)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  uint64_t v5 = __swift_project_boxed_opaque_existential_0Tm(a1, v3);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v4 + 40))(v9, v3, v4);
  if (!v1)
  {
    uint64_t v6 = v10;
    uint64_t v7 = v11;
    __swift_project_boxed_opaque_existential_0Tm(v9, v10);
    uint64_t v5 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v7 + 88))(v6, v7);
    __swift_destroy_boxed_opaque_existential_1Tm(v9);
  }
  __swift_destroy_boxed_opaque_existential_1Tm(a1);
  return v5;
}

uint64_t Int64.encode(to:)(void *a1, uint64_t a2)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  __swift_project_boxed_opaque_existential_0Tm(a1, v3);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v4 + 40))(v8, v3, v4);
  unint64_t v5 = v9;
  uint64_t v6 = v10;
  __swift_mutable_project_boxed_opaque_existential_1(v8, v9);
  (*(void (**)(uint64_t, unint64_t, uint64_t))(v6 + 88))(a2, v5, v6);
  return __swift_destroy_boxed_opaque_existential_1Tm(v8);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Int64(void *a1)
{
  uint64_t v2 = *v1;
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  __swift_project_boxed_opaque_existential_0Tm(a1, v3);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v4 + 40))(v8, v3, v4);
  unint64_t v5 = v9;
  uint64_t v6 = v10;
  __swift_mutable_project_boxed_opaque_existential_1(v8, v9);
  (*(void (**)(uint64_t, unint64_t, uint64_t))(v6 + 88))(v2, v5, v6);
  return __swift_destroy_boxed_opaque_existential_1Tm(v8);
}

uint64_t protocol witness for Decodable.init(from:) in conformance Int64@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = a1[3];
  uint64_t v6 = a1[4];
  __swift_project_boxed_opaque_existential_0Tm(a1, v5);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v6 + 40))(v11, v5, v6);
  if (v2) {
    return __swift_destroy_boxed_opaque_existential_1Tm(a1);
  }
  uint64_t v7 = v12;
  uint64_t v8 = v13;
  __swift_project_boxed_opaque_existential_0Tm(v11, v12);
  uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 88))(v7, v8);
  __swift_destroy_boxed_opaque_existential_1Tm(v11);
  uint64_t result = __swift_destroy_boxed_opaque_existential_1Tm(a1);
  *a2 = v9;
  return result;
}

void *Int128.init(from:)(uint64_t *a1)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  uint64_t v5 = __swift_project_boxed_opaque_existential_0Tm(a1, v3);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v4 + 40))(v9, v3, v4);
  if (!v1)
  {
    uint64_t v6 = v10;
    uint64_t v7 = v11;
    __swift_project_boxed_opaque_existential_0Tm(v9, v10);
    uint64_t v5 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v7 + 96))(v6, v7);
    __swift_destroy_boxed_opaque_existential_1Tm(v9);
  }
  __swift_destroy_boxed_opaque_existential_1Tm(a1);
  return v5;
}

uint64_t Int128.encode(to:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a1[3];
  uint64_t v6 = a1[4];
  __swift_project_boxed_opaque_existential_0Tm(a1, v5);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v6 + 40))(v10, v5, v6);
  unint64_t v7 = v11;
  uint64_t v8 = v12;
  __swift_mutable_project_boxed_opaque_existential_1(v10, v11);
  (*(void (**)(uint64_t, uint64_t, unint64_t, uint64_t))(v8 + 96))(a2, a3, v7, v8);
  return __swift_destroy_boxed_opaque_existential_1Tm(v10);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Int128(void *a1)
{
  uint64_t v3 = *v1;
  uint64_t v2 = v1[1];
  uint64_t v4 = a1[3];
  uint64_t v5 = a1[4];
  __swift_project_boxed_opaque_existential_0Tm(a1, v4);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v5 + 40))(v9, v4, v5);
  unint64_t v6 = v10;
  uint64_t v7 = v11;
  __swift_mutable_project_boxed_opaque_existential_1(v9, v10);
  (*(void (**)(uint64_t, uint64_t, unint64_t, uint64_t))(v7 + 96))(v3, v2, v6, v7);
  return __swift_destroy_boxed_opaque_existential_1Tm(v9);
}

uint64_t protocol witness for Decodable.init(from:) in conformance Int128@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = a1[3];
  uint64_t v6 = a1[4];
  __swift_project_boxed_opaque_existential_0Tm(a1, v5);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v6 + 40))(v13, v5, v6);
  if (v2) {
    return __swift_destroy_boxed_opaque_existential_1Tm(a1);
  }
  uint64_t v7 = v14;
  uint64_t v8 = v15;
  __swift_project_boxed_opaque_existential_0Tm(v13, v14);
  uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 96))(v7, v8);
  uint64_t v11 = v10;
  __swift_destroy_boxed_opaque_existential_1Tm(v13);
  uint64_t result = __swift_destroy_boxed_opaque_existential_1Tm(a1);
  *a2 = v9;
  a2[1] = v11;
  return result;
}

void *UInt.init(from:)(uint64_t *a1)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  uint64_t v5 = __swift_project_boxed_opaque_existential_0Tm(a1, v3);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v4 + 40))(v9, v3, v4);
  if (!v1)
  {
    uint64_t v6 = v10;
    uint64_t v7 = v11;
    __swift_project_boxed_opaque_existential_0Tm(v9, v10);
    uint64_t v5 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v7 + 104))(v6, v7);
    __swift_destroy_boxed_opaque_existential_1Tm(v9);
  }
  __swift_destroy_boxed_opaque_existential_1Tm(a1);
  return v5;
}

uint64_t UInt.encode(to:)(void *a1, uint64_t a2)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  __swift_project_boxed_opaque_existential_0Tm(a1, v3);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v4 + 40))(v8, v3, v4);
  unint64_t v5 = v9;
  uint64_t v6 = v10;
  __swift_mutable_project_boxed_opaque_existential_1(v8, v9);
  (*(void (**)(uint64_t, unint64_t, uint64_t))(v6 + 104))(a2, v5, v6);
  return __swift_destroy_boxed_opaque_existential_1Tm(v8);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance UInt(void *a1)
{
  uint64_t v2 = *v1;
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  __swift_project_boxed_opaque_existential_0Tm(a1, v3);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v4 + 40))(v8, v3, v4);
  unint64_t v5 = v9;
  uint64_t v6 = v10;
  __swift_mutable_project_boxed_opaque_existential_1(v8, v9);
  (*(void (**)(uint64_t, unint64_t, uint64_t))(v6 + 104))(v2, v5, v6);
  return __swift_destroy_boxed_opaque_existential_1Tm(v8);
}

uint64_t protocol witness for Decodable.init(from:) in conformance UInt@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = a1[3];
  uint64_t v6 = a1[4];
  __swift_project_boxed_opaque_existential_0Tm(a1, v5);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v6 + 40))(v11, v5, v6);
  if (v2) {
    return __swift_destroy_boxed_opaque_existential_1Tm(a1);
  }
  uint64_t v7 = v12;
  uint64_t v8 = v13;
  __swift_project_boxed_opaque_existential_0Tm(v11, v12);
  uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 104))(v7, v8);
  __swift_destroy_boxed_opaque_existential_1Tm(v11);
  uint64_t result = __swift_destroy_boxed_opaque_existential_1Tm(a1);
  *a2 = v9;
  return result;
}

void *UInt8.init(from:)(uint64_t *a1)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  uint64_t v5 = __swift_project_boxed_opaque_existential_0Tm(a1, v3);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v4 + 40))(v9, v3, v4);
  if (!v1)
  {
    uint64_t v6 = v10;
    uint64_t v7 = v11;
    __swift_project_boxed_opaque_existential_0Tm(v9, v10);
    uint64_t v5 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v7 + 112))(v6, v7);
    __swift_destroy_boxed_opaque_existential_1Tm(v9);
  }
  __swift_destroy_boxed_opaque_existential_1Tm(a1);
  return v5;
}

uint64_t UInt8.encode(to:)(void *a1, uint64_t a2)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  __swift_project_boxed_opaque_existential_0Tm(a1, v3);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v4 + 40))(v8, v3, v4);
  unint64_t v5 = v9;
  uint64_t v6 = v10;
  __swift_mutable_project_boxed_opaque_existential_1(v8, v9);
  (*(void (**)(uint64_t, unint64_t, uint64_t))(v6 + 112))(a2, v5, v6);
  return __swift_destroy_boxed_opaque_existential_1Tm(v8);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance UInt8(void *a1)
{
  uint64_t v2 = *v1;
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  __swift_project_boxed_opaque_existential_0Tm(a1, v3);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v4 + 40))(v8, v3, v4);
  unint64_t v5 = v9;
  uint64_t v6 = v10;
  __swift_mutable_project_boxed_opaque_existential_1(v8, v9);
  (*(void (**)(uint64_t, unint64_t, uint64_t))(v6 + 112))(v2, v5, v6);
  return __swift_destroy_boxed_opaque_existential_1Tm(v8);
}

uint64_t protocol witness for Decodable.init(from:) in conformance UInt8@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v5 = a1[3];
  uint64_t v6 = a1[4];
  __swift_project_boxed_opaque_existential_0Tm(a1, v5);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v6 + 40))(v11, v5, v6);
  if (v2) {
    return __swift_destroy_boxed_opaque_existential_1Tm(a1);
  }
  uint64_t v7 = v12;
  uint64_t v8 = v13;
  __swift_project_boxed_opaque_existential_0Tm(v11, v12);
  char v9 = (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 112))(v7, v8);
  __swift_destroy_boxed_opaque_existential_1Tm(v11);
  uint64_t result = __swift_destroy_boxed_opaque_existential_1Tm(a1);
  *a2 = v9;
  return result;
}

void *UInt16.init(from:)(uint64_t *a1)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  uint64_t v5 = __swift_project_boxed_opaque_existential_0Tm(a1, v3);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v4 + 40))(v9, v3, v4);
  if (!v1)
  {
    uint64_t v6 = v10;
    uint64_t v7 = v11;
    __swift_project_boxed_opaque_existential_0Tm(v9, v10);
    uint64_t v5 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v7 + 120))(v6, v7);
    __swift_destroy_boxed_opaque_existential_1Tm(v9);
  }
  __swift_destroy_boxed_opaque_existential_1Tm(a1);
  return v5;
}

uint64_t UInt16.encode(to:)(void *a1, uint64_t a2)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  __swift_project_boxed_opaque_existential_0Tm(a1, v3);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v4 + 40))(v8, v3, v4);
  unint64_t v5 = v9;
  uint64_t v6 = v10;
  __swift_mutable_project_boxed_opaque_existential_1(v8, v9);
  (*(void (**)(uint64_t, unint64_t, uint64_t))(v6 + 120))(a2, v5, v6);
  return __swift_destroy_boxed_opaque_existential_1Tm(v8);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance UInt16(void *a1)
{
  uint64_t v2 = *v1;
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  __swift_project_boxed_opaque_existential_0Tm(a1, v3);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v4 + 40))(v8, v3, v4);
  unint64_t v5 = v9;
  uint64_t v6 = v10;
  __swift_mutable_project_boxed_opaque_existential_1(v8, v9);
  (*(void (**)(uint64_t, unint64_t, uint64_t))(v6 + 120))(v2, v5, v6);
  return __swift_destroy_boxed_opaque_existential_1Tm(v8);
}

uint64_t protocol witness for Decodable.init(from:) in conformance UInt16@<X0>(uint64_t *a1@<X0>, _WORD *a2@<X8>)
{
  uint64_t v5 = a1[3];
  uint64_t v6 = a1[4];
  __swift_project_boxed_opaque_existential_0Tm(a1, v5);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v6 + 40))(v11, v5, v6);
  if (v2) {
    return __swift_destroy_boxed_opaque_existential_1Tm(a1);
  }
  uint64_t v7 = v12;
  uint64_t v8 = v13;
  __swift_project_boxed_opaque_existential_0Tm(v11, v12);
  __int16 v9 = (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 120))(v7, v8);
  __swift_destroy_boxed_opaque_existential_1Tm(v11);
  uint64_t result = __swift_destroy_boxed_opaque_existential_1Tm(a1);
  *a2 = v9;
  return result;
}

void *UInt32.init(from:)(uint64_t *a1)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  uint64_t v5 = __swift_project_boxed_opaque_existential_0Tm(a1, v3);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v4 + 40))(v9, v3, v4);
  if (!v1)
  {
    uint64_t v6 = v10;
    uint64_t v7 = v11;
    __swift_project_boxed_opaque_existential_0Tm(v9, v10);
    uint64_t v5 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v7 + 128))(v6, v7);
    __swift_destroy_boxed_opaque_existential_1Tm(v9);
  }
  __swift_destroy_boxed_opaque_existential_1Tm(a1);
  return v5;
}

uint64_t UInt32.encode(to:)(void *a1, uint64_t a2)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  __swift_project_boxed_opaque_existential_0Tm(a1, v3);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v4 + 40))(v8, v3, v4);
  unint64_t v5 = v9;
  uint64_t v6 = v10;
  __swift_mutable_project_boxed_opaque_existential_1(v8, v9);
  (*(void (**)(uint64_t, unint64_t, uint64_t))(v6 + 128))(a2, v5, v6);
  return __swift_destroy_boxed_opaque_existential_1Tm(v8);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance UInt32(void *a1)
{
  uint64_t v2 = *v1;
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  __swift_project_boxed_opaque_existential_0Tm(a1, v3);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v4 + 40))(v8, v3, v4);
  unint64_t v5 = v9;
  uint64_t v6 = v10;
  __swift_mutable_project_boxed_opaque_existential_1(v8, v9);
  (*(void (**)(uint64_t, unint64_t, uint64_t))(v6 + 128))(v2, v5, v6);
  return __swift_destroy_boxed_opaque_existential_1Tm(v8);
}

uint64_t protocol witness for Decodable.init(from:) in conformance UInt32@<X0>(uint64_t *a1@<X0>, _DWORD *a2@<X8>)
{
  uint64_t v5 = a1[3];
  uint64_t v6 = a1[4];
  __swift_project_boxed_opaque_existential_0Tm(a1, v5);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v6 + 40))(v11, v5, v6);
  if (v2) {
    return __swift_destroy_boxed_opaque_existential_1Tm(a1);
  }
  uint64_t v7 = v12;
  uint64_t v8 = v13;
  __swift_project_boxed_opaque_existential_0Tm(v11, v12);
  int v9 = (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 128))(v7, v8);
  __swift_destroy_boxed_opaque_existential_1Tm(v11);
  uint64_t result = __swift_destroy_boxed_opaque_existential_1Tm(a1);
  *a2 = v9;
  return result;
}

void *UInt64.init(from:)(uint64_t *a1)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  uint64_t v5 = __swift_project_boxed_opaque_existential_0Tm(a1, v3);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v4 + 40))(v9, v3, v4);
  if (!v1)
  {
    uint64_t v6 = v10;
    uint64_t v7 = v11;
    __swift_project_boxed_opaque_existential_0Tm(v9, v10);
    uint64_t v5 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v7 + 136))(v6, v7);
    __swift_destroy_boxed_opaque_existential_1Tm(v9);
  }
  __swift_destroy_boxed_opaque_existential_1Tm(a1);
  return v5;
}

uint64_t UInt64.encode(to:)(void *a1, uint64_t a2)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  __swift_project_boxed_opaque_existential_0Tm(a1, v3);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v4 + 40))(v8, v3, v4);
  unint64_t v5 = v9;
  uint64_t v6 = v10;
  __swift_mutable_project_boxed_opaque_existential_1(v8, v9);
  (*(void (**)(uint64_t, unint64_t, uint64_t))(v6 + 136))(a2, v5, v6);
  return __swift_destroy_boxed_opaque_existential_1Tm(v8);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance UInt64(void *a1)
{
  uint64_t v2 = *v1;
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  __swift_project_boxed_opaque_existential_0Tm(a1, v3);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v4 + 40))(v8, v3, v4);
  unint64_t v5 = v9;
  uint64_t v6 = v10;
  __swift_mutable_project_boxed_opaque_existential_1(v8, v9);
  (*(void (**)(uint64_t, unint64_t, uint64_t))(v6 + 136))(v2, v5, v6);
  return __swift_destroy_boxed_opaque_existential_1Tm(v8);
}

uint64_t protocol witness for Decodable.init(from:) in conformance UInt64@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = a1[3];
  uint64_t v6 = a1[4];
  __swift_project_boxed_opaque_existential_0Tm(a1, v5);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v6 + 40))(v11, v5, v6);
  if (v2) {
    return __swift_destroy_boxed_opaque_existential_1Tm(a1);
  }
  uint64_t v7 = v12;
  uint64_t v8 = v13;
  __swift_project_boxed_opaque_existential_0Tm(v11, v12);
  uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 136))(v7, v8);
  __swift_destroy_boxed_opaque_existential_1Tm(v11);
  uint64_t result = __swift_destroy_boxed_opaque_existential_1Tm(a1);
  *a2 = v9;
  return result;
}

void *UInt128.init(from:)(uint64_t *a1)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  uint64_t v5 = __swift_project_boxed_opaque_existential_0Tm(a1, v3);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v4 + 40))(v9, v3, v4);
  if (!v1)
  {
    uint64_t v6 = v10;
    uint64_t v7 = v11;
    __swift_project_boxed_opaque_existential_0Tm(v9, v10);
    uint64_t v5 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v7 + 144))(v6, v7);
    __swift_destroy_boxed_opaque_existential_1Tm(v9);
  }
  __swift_destroy_boxed_opaque_existential_1Tm(a1);
  return v5;
}

uint64_t UInt128.encode(to:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a1[3];
  uint64_t v6 = a1[4];
  __swift_project_boxed_opaque_existential_0Tm(a1, v5);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v6 + 40))(v10, v5, v6);
  unint64_t v7 = v11;
  uint64_t v8 = v12;
  __swift_mutable_project_boxed_opaque_existential_1(v10, v11);
  (*(void (**)(uint64_t, uint64_t, unint64_t, uint64_t))(v8 + 144))(a2, a3, v7, v8);
  return __swift_destroy_boxed_opaque_existential_1Tm(v10);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance UInt128(void *a1)
{
  uint64_t v3 = *v1;
  uint64_t v2 = v1[1];
  uint64_t v4 = a1[3];
  uint64_t v5 = a1[4];
  __swift_project_boxed_opaque_existential_0Tm(a1, v4);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v5 + 40))(v9, v4, v5);
  unint64_t v6 = v10;
  uint64_t v7 = v11;
  __swift_mutable_project_boxed_opaque_existential_1(v9, v10);
  (*(void (**)(uint64_t, uint64_t, unint64_t, uint64_t))(v7 + 144))(v3, v2, v6, v7);
  return __swift_destroy_boxed_opaque_existential_1Tm(v9);
}

uint64_t protocol witness for Decodable.init(from:) in conformance UInt128@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = a1[3];
  uint64_t v6 = a1[4];
  __swift_project_boxed_opaque_existential_0Tm(a1, v5);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v6 + 40))(v13, v5, v6);
  if (v2) {
    return __swift_destroy_boxed_opaque_existential_1Tm(a1);
  }
  uint64_t v7 = v14;
  uint64_t v8 = v15;
  __swift_project_boxed_opaque_existential_0Tm(v13, v14);
  uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 144))(v7, v8);
  uint64_t v11 = v10;
  __swift_destroy_boxed_opaque_existential_1Tm(v13);
  uint64_t result = __swift_destroy_boxed_opaque_existential_1Tm(a1);
  *a2 = v9;
  a2[1] = v11;
  return result;
}

uint64_t Optional<A>.encode(to:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v24 = a3;
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = MEMORY[0x1F4188790](a1);
  uint64_t v23 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = (void *)MEMORY[0x1F4188790](v7);
  uint64_t v13 = (char *)&v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = v11[3];
  uint64_t v14 = v11[4];
  __swift_project_boxed_opaque_existential_0Tm(v11, v15);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v14 + 40))(v25, v15, v14);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v13, v3, a2);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v13, 1, v5) == 1)
  {
    unint64_t v16 = v26;
    uint64_t v17 = v27;
    __swift_mutable_project_boxed_opaque_existential_1(v25, v26);
    (*(void (**)(unint64_t, uint64_t))(v17 + 16))(v16, v17);
  }
  else
  {
    uint64_t v18 = v23;
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v23, v13, v5);
    unint64_t v19 = v26;
    uint64_t v20 = v27;
    __swift_mutable_project_boxed_opaque_existential_1(v25, v26);
    (*(void (**)(char *, uint64_t, uint64_t, unint64_t, uint64_t))(v20 + 152))(v18, v5, v24, v19, v20);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v18, v5);
  }
  return __swift_destroy_boxed_opaque_existential_1Tm(v25);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance <A> A?(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Optional<A>.encode(to:)(a1, a2, *(void *)(a3 - 8));
}

uint64_t Optional<A>.init(from:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for Optional(0, v9, v10, v11);
  uint64_t v34 = (uint64_t)*(v12 - 1);
  MEMORY[0x1F4188790](v12);
  uint64_t v14 = (char *)&v26 - v13;
  uint64_t v15 = a1[3];
  uint64_t v16 = a1[4];
  __swift_project_boxed_opaque_existential_0Tm(a1, v15);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v16 + 40))(v31, v15, v16);
  if (!v4)
  {
    unint64_t v26 = v14;
    uint64_t v27 = v12;
    uint64_t v17 = v30;
    uint64_t v18 = v32;
    uint64_t v19 = v33;
    __swift_project_boxed_opaque_existential_0Tm(v31, v32);
    if ((*(uint64_t (**)(uint64_t, uint64_t))(v19 + 16))(v18, v19))
    {
      uint64_t v20 = 1;
      uint64_t v21 = v34;
      uint64_t v22 = v26;
    }
    else
    {
      uint64_t v23 = v32;
      uint64_t v24 = v33;
      __swift_project_boxed_opaque_existential_0Tm(v31, v32);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v24 + 152))(a2, a2, v28, v23, v24);
      uint64_t v21 = v34;
      uint64_t v22 = v26;
      (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v26, v8, a2);
      uint64_t v20 = 0;
    }
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v17 + 56))(v22, v20, 1, a2);
    __swift_destroy_boxed_opaque_existential_1Tm(v31);
    (*(void (**)(uint64_t, char *, Class *))(v21 + 32))(v29, v22, v27);
  }
  return __swift_destroy_boxed_opaque_existential_1Tm(a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance <A> A?@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return Optional<A>.init(from:)(a1, *(void *)(a2 + 16), *(void *)(a3 - 8), a4);
}

uint64_t Array<A>.encode(to:)(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v39 = a4;
  uint64_t v6 = *(a3 - 1);
  uint64_t v7 = MEMORY[0x1F4188790](a1);
  int64_t v38 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = MEMORY[0x1F4188790](v7);
  uint64_t v11 = (char *)&v30 - v10;
  uint64_t v30 = v12;
  uint64_t v13 = (void *)MEMORY[0x1F4188790](v9);
  uint64_t v15 = (char *)&v30 - v14;
  uint64_t v16 = v13[3];
  uint64_t v17 = v13[4];
  __swift_project_boxed_opaque_existential_0Tm(v13, v16);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v17 + 32))(v41, v16, v17);
  Swift::Int v37 = Array._getCount()();
  if (v37)
  {
    unint64_t v18 = 0;
    char v35 = (void (**)(char *, id *, uint64_t *))(v6 + 16);
    unint64_t v36 = a2 & 0xC000000000000001;
    uint64_t v19 = (void **)(v6 + 32);
    uint64_t v33 = v11;
    uint64_t v34 = (void (**)(char *, uint64_t *))(v6 + 8);
    uint64_t v31 = a2;
    uint64_t v32 = v6;
    do
    {
      BOOL v20 = v36 == 0;
      char v21 = v20 | ~_swift_isClassOrObjCExistentialType((uint64_t)a3, a3);
      Array._checkSubscript(_:wasNativeTypeChecked:)(v18, v21 & 1);
      if (v21)
      {
        (*(void (**)(char *, unint64_t, uint64_t *))(v6 + 16))(v11, a2+ ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))+ *(void *)(v6 + 72) * v18, a3);
      }
      else
      {
        id v28 = _ArrayBuffer._getElementSlowPath(_:)(v18, a2, a3);
        uint64_t v22 = v28;
        if (v30 != 8) {
          goto LABEL_13;
        }
        id v44 = v28;
        (*v35)(v11, &v44, a3);
        swift_unknownObjectRelease(v22);
      }
      uint64_t v22 = *v19;
      ((void (*)(char *, char *, uint64_t *))*v19)(v15, v11, a3);
      unint64_t v23 = v18 + 1;
      if (__OFADD__(v18, 1))
      {
        __break(1u);
LABEL_13:
        swift_unknownObjectRelease(v22);
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't unsafeBitCast between types of different sizes", 52, 2, "Swift/Builtin.swift", 19, 2, 0x5FuLL, 0);
      }
      uint64_t v24 = v38;
      ((void (*)(char *, char *, uint64_t *))v22)(v38, v15, a3);
      unint64_t v25 = v42;
      uint64_t v26 = v43;
      __swift_mutable_project_boxed_opaque_existential_1(v41, v42);
      uint64_t v27 = v40;
      (*(void (**)(char *, uint64_t *, uint64_t, unint64_t, uint64_t))(v26 + 160))(v24, a3, v39, v25, v26);
      (*v34)(v24, a3);
      uint64_t v40 = v27;
      if (v27) {
        break;
      }
      ++v18;
      a2 = v31;
      uint64_t v6 = v32;
      uint64_t v11 = v33;
    }
    while (v23 != v37);
  }
  return __swift_destroy_boxed_opaque_existential_1Tm(v41);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance <A> [A](uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Array<A>.encode(to:)(a1, *v3, *(uint64_t **)(a2 + 16), *(void *)(a3 - 8));
}

__objc2_class **Array<A>.init(from:)(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = a1;
  uint64_t v29 = *(void *)(a2 - 8);
  uint64_t v7 = MEMORY[0x1F4188790](a1);
  uint64_t v9 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = (void *)MEMORY[0x1F4188790](v7);
  uint64_t v12 = (char *)&v27 - v11;
  uint64_t v33 = &_swiftEmptyArrayStorage;
  uint64_t v14 = v10[3];
  uint64_t v13 = v10[4];
  uint64_t v15 = (__objc2_class **)__swift_project_boxed_opaque_existential_0Tm(v10, v14);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v13 + 32))(v30, v14, v13);
  if (v3)
  {
    swift_bridgeObjectRelease((uint64_t)&_swiftEmptyArrayStorage);
    __swift_destroy_boxed_opaque_existential_1Tm(v6);
  }
  else
  {
    unint64_t v16 = v31;
    uint64_t v17 = v32;
    __swift_project_boxed_opaque_existential_0Tm(v30, v31);
    if ((*(uint64_t (**)(unint64_t, uint64_t))(v17 + 24))(v16, v17))
    {
      uint64_t v15 = &_swiftEmptyArrayStorage;
    }
    else
    {
      id v28 = v6;
      unint64_t v18 = (void (**)(char *, char *, uint64_t))(v29 + 32);
      do
      {
        unint64_t v19 = v31;
        uint64_t v20 = v32;
        __swift_mutable_project_boxed_opaque_existential_1(v30, v31);
        (*(void (**)(uint64_t, uint64_t, uint64_t, unint64_t, uint64_t))(v20 + 176))(a2, a2, a3, v19, v20);
        (*v18)(v9, v12, a2);
        unint64_t v23 = type metadata accessor for Array(0, a2, v21, v22);
        Array.append(_:)((uint64_t)v9, (uint64_t)v23);
        unint64_t v24 = v31;
        uint64_t v25 = v32;
        __swift_project_boxed_opaque_existential_0Tm(v30, v31);
      }
      while (((*(uint64_t (**)(unint64_t, uint64_t))(v25 + 24))(v24, v25) & 1) == 0);
      uint64_t v15 = v33;
      uint64_t v6 = v28;
    }
    __swift_destroy_boxed_opaque_existential_1Tm(v30);
    __swift_destroy_boxed_opaque_existential_1Tm(v6);
  }
  return v15;
}

__objc2_class **protocol witness for Decodable.init(from:) in conformance <A> [A]@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, __objc2_class ***a4@<X8>)
{
  uint64_t result = Array<A>.init(from:)(a1, *(void *)(a2 + 16), *(void *)(a3 - 8));
  if (!v4) {
    *a4 = result;
  }
  return result;
}

uint64_t ContiguousArray<A>.encode(to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v34 = a4;
  uint64_t v7 = *(void *)(a3 - 8);
  uint64_t v8 = MEMORY[0x1F4188790](a1);
  uint64_t v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = (void *)MEMORY[0x1F4188790](v8);
  uint64_t v30 = (char *)&v26 - v12;
  uint64_t v13 = v11[3];
  uint64_t v14 = v11[4];
  __swift_project_boxed_opaque_existential_0Tm(v11, v13);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v14 + 32))(v31, v13, v14);
  uint64_t v15 = *(void *)(a2 + 16);
  if (v15)
  {
    uint64_t v17 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
    uint64_t v16 = v7 + 16;
    uint64_t v18 = a2 + ((*(unsigned __int8 *)(v16 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 64));
    uint64_t v19 = *(void *)(v16 + 56);
    uint64_t v20 = v16;
    uint64_t v21 = (void (**)(char *, char *, uint64_t))(v16 + 16);
    id v28 = v17;
    uint64_t v29 = v20;
    uint64_t v26 = v19;
    uint64_t v27 = (void (**)(char *, uint64_t))(v20 - 8);
    while (1)
    {
      uint64_t v22 = v30;
      v28(v30, v18, a3);
      (*v21)(v10, v22, a3);
      unint64_t v23 = v32;
      uint64_t v24 = v33;
      __swift_mutable_project_boxed_opaque_existential_1(v31, v32);
      (*(void (**)(char *, uint64_t, uint64_t, unint64_t, uint64_t))(v24 + 160))(v10, a3, v34, v23, v24);
      if (v4) {
        break;
      }
      (*v27)(v10, a3);
      v18 += v26;
      if (!--v15) {
        return __swift_destroy_boxed_opaque_existential_1Tm(v31);
      }
    }
    (*v27)(v10, a3);
  }
  return __swift_destroy_boxed_opaque_existential_1Tm(v31);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance <A> ContiguousArray<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return ContiguousArray<A>.encode(to:)(a1, *v3, *(void *)(a2 + 16), *(void *)(a3 - 8));
}

__objc2_class **ContiguousArray<A>.init(from:)(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = a1;
  uint64_t v29 = *(void *)(a2 - 8);
  uint64_t v7 = MEMORY[0x1F4188790](a1);
  uint64_t v9 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = (void *)MEMORY[0x1F4188790](v7);
  uint64_t v12 = (char *)&v27 - v11;
  uint64_t v33 = &_swiftEmptyArrayStorage;
  uint64_t v14 = v10[3];
  uint64_t v13 = v10[4];
  uint64_t v15 = (__objc2_class **)__swift_project_boxed_opaque_existential_0Tm(v10, v14);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v13 + 32))(v30, v14, v13);
  if (v3)
  {
    swift_release((uint64_t)&_swiftEmptyArrayStorage);
    __swift_destroy_boxed_opaque_existential_1Tm(v6);
  }
  else
  {
    unint64_t v16 = v31;
    uint64_t v17 = v32;
    __swift_project_boxed_opaque_existential_0Tm(v30, v31);
    if ((*(uint64_t (**)(unint64_t, uint64_t))(v17 + 24))(v16, v17))
    {
      uint64_t v15 = &_swiftEmptyArrayStorage;
    }
    else
    {
      id v28 = v6;
      uint64_t v18 = (void (**)(char *, char *, uint64_t))(v29 + 32);
      do
      {
        unint64_t v19 = v31;
        uint64_t v20 = v32;
        __swift_mutable_project_boxed_opaque_existential_1(v30, v31);
        (*(void (**)(uint64_t, uint64_t, uint64_t, unint64_t, uint64_t))(v20 + 176))(a2, a2, a3, v19, v20);
        (*v18)(v9, v12, a2);
        unint64_t v23 = type metadata accessor for ContiguousArray(0, a2, v21, v22);
        ContiguousArray.append(_:)((uint64_t)v9, (uint64_t)v23);
        unint64_t v24 = v31;
        uint64_t v25 = v32;
        __swift_project_boxed_opaque_existential_0Tm(v30, v31);
      }
      while (((*(uint64_t (**)(unint64_t, uint64_t))(v25 + 24))(v24, v25) & 1) == 0);
      uint64_t v15 = v33;
      uint64_t v6 = v28;
    }
    __swift_destroy_boxed_opaque_existential_1Tm(v30);
    __swift_destroy_boxed_opaque_existential_1Tm(v6);
  }
  return v15;
}

__objc2_class **protocol witness for Decodable.init(from:) in conformance <A> ContiguousArray<A>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, __objc2_class ***a4@<X8>)
{
  uint64_t result = ContiguousArray<A>.init(from:)(a1, *(void *)(a2 + 16), *(void *)(a3 - 8));
  if (!v4) {
    *a4 = result;
  }
  return result;
}

uint64_t Set<>.encode(to:)(void *a1, int64_t a2, char *a3, uint64_t a4)
{
  uint64_t v75 = a4;
  uint64_t v69 = *((void *)a3 - 1);
  MEMORY[0x1F4188790](a1);
  char v74 = (char *)&v55 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v61 = type metadata accessor for Optional(0, v8, v8, v9);
  uint64_t v10 = (uint64_t)*(v61 - 1);
  uint64_t v11 = MEMORY[0x1F4188790](v61);
  Swift::String v60 = (char *)&v55 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = MEMORY[0x1F4188790](v11);
  char v59 = (char *)&v55 - v14;
  MEMORY[0x1F4188790](v13);
  uint64_t v77 = (char *)&v55 - v15;
  uint64_t v17 = a1[3];
  uint64_t v16 = a1[4];
  __swift_project_boxed_opaque_existential_0Tm(a1, v17);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v16 + 32))(v79, v17, v16);
  if ((a2 & 0xC000000000000001) != 0)
  {
    if (a2 < 0) {
      uint64_t v18 = a2;
    }
    else {
      uint64_t v18 = a2 & 0xFFFFFFFFFFFFFF8;
    }
    unint64_t v19 = (unint64_t *)type metadata accessor for __CocoaSet.Iterator();
    unint64_t v20 = (unint64_t)swift_allocObject(v19, 0xE8uLL, 7uLL);
    int64_t v70 = 0;
    uint64_t v21 = 0;
    unint64_t v22 = 0;
    *(void *)(v20 + 208) = v18;
    *(void *)(v20 + 216) = 0;
    *(_OWORD *)(v20 + 16) = 0u;
    *(_OWORD *)(v20 + 32) = 0u;
    *(_OWORD *)(v20 + 48) = 0u;
    *(_OWORD *)(v20 + 64) = 0u;
    *(_OWORD *)(v20 + 8_assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000034, 0x80000001816E2880, "Swift/Codable.swift", 19, 2, 0x11F9uLL, 0) = 0u;
    *(_OWORD *)(v20 + 96) = 0u;
    *(_OWORD *)(v20 + 112) = 0u;
    *(_OWORD *)(v20 + 128) = 0u;
    *(_OWORD *)(v20 + 144) = 0u;
    *(_OWORD *)(v20 + 16_assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000034, 0x80000001816E2880, "Swift/Codable.swift", 19, 2, 0x11F9uLL, 0) = 0u;
    *(_OWORD *)(v20 + 176) = 0u;
    *(_OWORD *)(v20 + 192) = 0u;
    *(void *)(v20 + 224) = 0;
    unint64_t v23 = v20 | 0x8000000000000000;
  }
  else
  {
    uint64_t v24 = -1 << *(unsigned char *)(a2 + 32);
    uint64_t v21 = ~v24;
    uint64_t v25 = *(void *)(a2 + 56);
    int64_t v70 = a2 + 56;
    uint64_t v26 = -v24;
    if (v26 < 64) {
      uint64_t v27 = ~(-1 << v26);
    }
    else {
      uint64_t v27 = -1;
    }
    unint64_t v22 = v27 & v25;
    unint64_t v23 = a2;
  }
  uint64_t v67 = v23 & 0x7FFFFFFFFFFFFFFFLL;
  uint64_t v63 = (v23 & 0x7FFFFFFFFFFFFFFFLL) + 80;
  uint64_t v64 = (v23 & 0x7FFFFFFFFFFFFFFFLL) + 16;
  id v28 = (void (**)(char *, uint64_t, uint64_t, char *))(v69 + 56);
  uint64_t v58 = (void (**)(char *, void *, Class *))(v10 + 16);
  char v57 = (unsigned int (**)(char *, uint64_t, char *))(v69 + 48);
  uint64_t v56 = (void (**)(void *, Class *))(v10 + 8);
  unint64_t v76 = (void (**)(char *, char *, char *))(v69 + 32);
  uint64_t v62 = v21;
  int64_t v65 = (unint64_t)(v21 + 64) >> 6;
  uint64_t v68 = v69 + 16;
  int64_t v71 = (void (**)(char *, char *))(v69 + 8);
  swift_bridgeObjectRetain(a2);
  int64_t v29 = 0;
  uint64_t v66 = qword_1ECA06328;
  int64_t v72 = v28;
  unint64_t v73 = v23;
  while (1)
  {
    unint64_t v38 = v22;
    int64_t v39 = v29;
    if ((v23 & 0x8000000000000000) == 0)
    {
      uint64_t v40 = v77;
      if (v22)
      {
        unint64_t v30 = __clz(__rbit64(v22));
        v22 &= v22 - 1;
        unint64_t v31 = v30 | (v29 << 6);
      }
      else
      {
        ++v29;
        if (__OFADD__(v39, 1))
        {
          __break(1u);
LABEL_46:
          _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/SetBridging.swift", 23, 2, 0x254uLL, 0);
        }
        if (v29 >= v65) {
          goto LABEL_39;
        }
        unint64_t v41 = *(void *)(v70 + 8 * v29);
        if (!v41)
        {
          int64_t v42 = v39 + 2;
          if (v39 + 2 >= v65) {
            goto LABEL_39;
          }
          unint64_t v41 = *(void *)(v70 + 8 * v42);
          if (!v41)
          {
            while (1)
            {
              int64_t v29 = v42 + 1;
              if (__OFADD__(v42, 1)) {
                break;
              }
              if (v29 >= v65) {
                goto LABEL_39;
              }
              unint64_t v41 = *(void *)(v70 + 8 * v29);
              ++v42;
              if (v41) {
                goto LABEL_25;
              }
            }
            __break(1u);
LABEL_43:
            __break(1u);
LABEL_44:
            _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "load from misaligned raw pointer", 32, 2, "Swift/UnsafeRawPointer.swift", 28, 2, 0x4F9uLL, 0);
          }
          ++v29;
        }
LABEL_25:
        unint64_t v22 = (v41 - 1) & v41;
        unint64_t v31 = __clz(__rbit64(v41)) + (v29 << 6);
      }
      uint64_t v32 = *(void *)(v23 + 48);
      uint64_t v33 = v69;
      (*(void (**)(char *, unint64_t, char *))(v69 + 16))(v77, v32 + *(void *)(v69 + 72) * v31, a3);
      (*(void (**)(char *, void, uint64_t, char *))(v33 + 56))(v40, 0, 1, a3);
      goto LABEL_13;
    }
    uint64_t v43 = (void *)v67;
    uint64_t v44 = *(void *)(v67 + 216);
    uint64_t v40 = v77;
    if (v44 < 0) {
      goto LABEL_39;
    }
    if (v44 == *(void *)(v67 + 224)) {
      break;
    }
LABEL_30:
    uint64_t v46 = v43[3];
    if (!v46) {
      goto LABEL_46;
    }
    if ((unint64_t)(v44 - 0x1000000000000000) >> 61 != 7) {
      goto LABEL_43;
    }
    char v47 = (void **)(v46 + 8 * v44);
    if ((v47 & 7) != 0) {
      goto LABEL_44;
    }
    unint64_t v48 = *v47;
    v43[27] = v44 + 1;
    swift_unknownObjectRetain(v48);
    if (_swift_isClassOrObjCExistentialType((uint64_t)a3, (uint64_t *)a3))
    {
      unint64_t v82 = v48;
      swift_dynamicCast(v40, (unint64_t *)&v82, v66, a3, 7uLL);
      unint64_t v49 = *v28;
    }
    else
    {
      unint64_t v49 = *v28;
      uint64_t v50 = v59;
      v49(v59, 1, 1, a3);
      _bridgeNonVerbatimFromObjectiveC<A>(_:_:_:)((swift *)v48, (uint64_t)a3, v50);
      swift_unknownObjectRelease(v48);
      unint64_t v51 = v60;
      uint64_t v52 = v61;
      (*v58)(v60, v50, v61);
      if ((*v57)(v51, 1, a3) == 1) {
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/BridgeObjectiveC.swift", 28, 2, 0xFCuLL, 0);
      }
      (*v56)(v50, v52);
      (*v76)(v40, v51, a3);
      int64_t v39 = v29;
    }
    v49(v40, 0, 1, a3);
    int64_t v29 = v39;
    unint64_t v22 = v38;
LABEL_13:
    uint64_t v34 = v74;
    (*v76)(v74, v40, a3);
    unint64_t v36 = v80;
    uint64_t v35 = v81;
    __swift_mutable_project_boxed_opaque_existential_1(v79, v80);
    uint64_t v37 = v78;
    (*(void (**)(char *, char *, uint64_t, unint64_t, uint64_t))(v35 + 160))(v34, a3, v75, v36, v35);
    (*v71)(v34, a3);
    id v28 = v72;
    unint64_t v23 = v73;
    uint64_t v78 = v37;
    if (v37)
    {
      uint64_t v53 = v73;
      goto LABEL_40;
    }
  }
  id v45 = [*(id *)(v67 + 208) countByEnumeratingWithState:v64 objects:v63 count:16];
  v43[28] = v45;
  if (v45)
  {
    uint64_t v44 = 0;
    v43[27] = 0;
    goto LABEL_30;
  }
  v43[27] = -1;
LABEL_39:
  (*v28)(v40, 1, 1, a3);
  uint64_t v53 = v23;
LABEL_40:
  outlined consume of [A : B].Iterator._Variant<A, B>(v53);
  return __swift_destroy_boxed_opaque_existential_1Tm(v79);
}

int64_t Set.makeIterator()@<X0>(int64_t result@<X0>, int64_t *a2@<X8>)
{
  if ((result & 0xC000000000000001) != 0)
  {
    if (result < 0) {
      uint64_t v3 = result;
    }
    else {
      uint64_t v3 = result & 0xFFFFFFFFFFFFFF8;
    }
    uint64_t v4 = (unint64_t *)type metadata accessor for __CocoaSet.Iterator();
    unint64_t v5 = (unint64_t)swift_allocObject(v4, 0xE8uLL, 7uLL);
    int64_t v6 = 0;
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    *(void *)(v5 + 208) = v3;
    *(void *)(v5 + 216) = 0;
    *(_OWORD *)(v5 + 16) = 0u;
    *(_OWORD *)(v5 + 32) = 0u;
    *(_OWORD *)(v5 + 48) = 0u;
    *(_OWORD *)(v5 + 64) = 0u;
    *(_OWORD *)(v5 + 8_assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000034, 0x80000001816E2880, "Swift/Codable.swift", 19, 2, 0x11F9uLL, 0) = 0u;
    *(_OWORD *)(v5 + 96) = 0u;
    *(_OWORD *)(v5 + 112) = 0u;
    *(_OWORD *)(v5 + 128) = 0u;
    *(_OWORD *)(v5 + 144) = 0u;
    *(_OWORD *)(v5 + 16_assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000034, 0x80000001816E2880, "Swift/Codable.swift", 19, 2, 0x11F9uLL, 0) = 0u;
    *(_OWORD *)(v5 + 176) = 0u;
    *(_OWORD *)(v5 + 192) = 0u;
    *(void *)(v5 + 224) = 0;
    uint64_t result = v5 | 0x8000000000000000;
  }
  else
  {
    uint64_t v9 = -1;
    uint64_t v10 = -1 << *(unsigned char *)(result + 32);
    int64_t v6 = result + 56;
    uint64_t v7 = ~v10;
    uint64_t v11 = -v10;
    if (v11 < 64) {
      uint64_t v9 = ~(-1 << v11);
    }
    uint64_t v8 = v9 & *(void *)(result + 56);
  }
  *a2 = result;
  a2[1] = v6;
  a2[2] = v7;
  a2[3] = 0;
  a2[4] = v8;
  return result;
}

uint64_t Set.Iterator.next()@<X0>(uint64_t result@<X0>, char *a2@<X8>)
{
  uint64_t v4 = *v2;
  if (*v2 < 0)
  {
    uint64_t v13 = *(char **)(result + 16);
    id v14 = __CocoaSet.Iterator.next()();
    if (v14)
    {
      uint64_t v16 = v14;
      _forceBridgeFromObjectiveC<A>(_:_:)(v14, v13, v15, a2);
      swift_unknownObjectRelease(v16);
      uint64_t v17 = *(uint64_t (**)(char *, uint64_t, uint64_t, char *))(*((void *)v13 - 1) + 56);
      uint64_t v18 = a2;
      uint64_t v19 = 0;
    }
    else
    {
      uint64_t v17 = *(uint64_t (**)(char *, uint64_t, uint64_t, char *))(*((void *)v13 - 1) + 56);
      uint64_t v18 = a2;
      uint64_t v19 = 1;
    }
    return v17(v18, v19, 1, v13);
  }
  else
  {
    uint64_t v5 = v2[1];
    uint64_t v6 = v2[2];
    int64_t v8 = v2[3];
    unint64_t v7 = v2[4];
    if (v7)
    {
      uint64_t v9 = (v7 - 1) & v7;
      unint64_t v10 = __clz(__rbit64(v7)) | (v8 << 6);
LABEL_4:
      uint64_t v11 = *(void *)(result + 16);
      uint64_t v12 = *(void *)(v11 - 8);
      (*(void (**)(char *, unint64_t, uint64_t))(v12 + 16))(a2, *(void *)(v4 + 48) + *(void *)(v12 + 72) * v10, v11);
      uint64_t result = (*(uint64_t (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(a2, 0, 1, v11);
LABEL_21:
      *uint64_t v2 = v4;
      v2[1] = v5;
      v2[2] = v6;
      v2[3] = v8;
      v2[4] = v9;
      return result;
    }
    int64_t v20 = v8 + 1;
    if (!__OFADD__(v8, 1))
    {
      int64_t v21 = (unint64_t)(v6 + 64) >> 6;
      if (v20 < v21)
      {
        unint64_t v22 = *(void *)(v5 + 8 * v20);
        if (v22)
        {
LABEL_14:
          uint64_t v9 = (v22 - 1) & v22;
          unint64_t v10 = __clz(__rbit64(v22)) + (v20 << 6);
          int64_t v8 = v20;
          goto LABEL_4;
        }
        int64_t v23 = v8 + 2;
        while (v21 != v23)
        {
          unint64_t v22 = *(void *)(v5 + 8 * v23++);
          if (v22)
          {
            int64_t v20 = v23 - 1;
            goto LABEL_14;
          }
        }
        int64_t v8 = v21 - 1;
      }
      uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(*(void *)(result + 16) - 8) + 56))(a2, 1, 1);
      uint64_t v9 = 0;
      goto LABEL_21;
    }
    __break(1u);
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance <> Set<A>(void *a1, uint64_t a2, uint64_t a3)
{
  return Set<>.encode(to:)(a1, *v3, *(char **)(a2 + 16), *(void *)(a3 - 8));
}

__objc2_class **Set<>.init(from:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v34 = a4;
  uint64_t v35 = a3;
  uint64_t v6 = a1;
  uint64_t v32 = *(void *)(a2 - 8);
  uint64_t v7 = MEMORY[0x1F4188790](a1);
  uint64_t v9 = (id *)((char *)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v10 = MEMORY[0x1F4188790](v7);
  uint64_t v12 = (char *)&v31 - v11;
  uint64_t v13 = (void *)MEMORY[0x1F4188790](v10);
  uint64_t v15 = (char *)&v31 - v14;
  int64_t v39 = &_swiftEmptySetSingleton;
  uint64_t v16 = v13[3];
  uint64_t v17 = v13[4];
  uint64_t v18 = (__objc2_class **)__swift_project_boxed_opaque_existential_0Tm(v13, v16);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v17 + 32))(v36, v16, v17);
  if (v4)
  {
    __swift_destroy_boxed_opaque_existential_1Tm(v6);
  }
  else
  {
    uint64_t v33 = v9;
    unint64_t v19 = v37;
    uint64_t v20 = v38;
    __swift_project_boxed_opaque_existential_0Tm(v36, v37);
    if ((*(uint64_t (**)(unint64_t, uint64_t))(v20 + 24))(v19, v20))
    {
      uint64_t v18 = &_swiftEmptySetSingleton;
    }
    else
    {
      unint64_t v31 = v6;
      int64_t v21 = (void (**)(id *, char *, uint64_t))(v32 + 32);
      unint64_t v22 = (void (**)(char *, uint64_t))(v32 + 8);
      do
      {
        unint64_t v23 = v37;
        uint64_t v24 = v38;
        __swift_mutable_project_boxed_opaque_existential_1(v36, v37);
        (*(void (**)(uint64_t, uint64_t, uint64_t, unint64_t, uint64_t))(v24 + 176))(a2, a2, v35, v23, v24);
        uint64_t v25 = v33;
        (*v21)(v33, v15, a2);
        uint64_t v27 = type metadata accessor for Set._Variant(0, a2, v34, v26);
        Set._Variant.insert(_:)(v12, v25, (uint64_t)v27);
        (*v22)(v12, a2);
        unint64_t v28 = v37;
        uint64_t v29 = v38;
        __swift_project_boxed_opaque_existential_0Tm(v36, v37);
      }
      while (((*(uint64_t (**)(unint64_t, uint64_t))(v29 + 24))(v28, v29) & 1) == 0);
      uint64_t v18 = v39;
      uint64_t v6 = v31;
    }
    __swift_destroy_boxed_opaque_existential_1Tm(v36);
    __swift_destroy_boxed_opaque_existential_1Tm(v6);
  }
  return v18;
}

__objc2_class **Set.init()()
{
  return &_swiftEmptySetSingleton;
}

uint64_t Set.insert(_:)(char *a1, id *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = type metadata accessor for Set._Variant(0, *(void *)(a3 + 16), *(void *)(a3 + 24), a4);

  return Set._Variant.insert(_:)(a1, a2, (uint64_t)v6);
}

__objc2_class **protocol witness for Decodable.init(from:) in conformance <> Set<A>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, __objc2_class ***a4@<X8>)
{
  uint64_t result = Set<>.init(from:)(a1, *(void *)(a2 + 16), *(void *)(a3 - 8), *(void *)(a2 + 24));
  if (!v4) {
    *a4 = result;
  }
  return result;
}

uint64_t FixedWidthInteger.init(_:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v6 = a3;
  uint64_t v194 = a5;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0, a3, (uint64_t)&type metadata for Bool, 0, 0);
  MEMORY[0x1F4188790](TupleTypeMetadata2 - 1);
  unint64_t v182 = (char *)&v171 - v10;
  uint64_t v199 = a4;
  uint64_t v186 = *(void *)(a4 + 8);
  uint64_t v11 = *(void *)(*(void *)(v186 + 24) + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (int **)v11, v6, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, associated type descriptor for ExpressibleByIntegerLiteral.IntegerLiteralType);
  uint64_t v13 = MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v15 = (char *)&v171 - v14;
  uint64_t v200 = *(void *)(v6 - 8);
  uint64_t v16 = MEMORY[0x1F4188790](v13);
  unint64_t v180 = (char *)&v171 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = MEMORY[0x1F4188790](v16);
  uint64_t v20 = (char *)&v171 - v19;
  uint64_t v21 = MEMORY[0x1F4188790](v18);
  id v185 = (char *)&v171 - v22;
  uint64_t v23 = MEMORY[0x1F4188790](v21);
  uint64_t v179 = (char *)&v171 - v24;
  uint64_t v25 = MEMORY[0x1F4188790](v23);
  uint64_t v27 = (char *)&v171 - v26;
  uint64_t v28 = MEMORY[0x1F4188790](v25);
  uint64_t v184 = (char *)&v171 - v29;
  uint64_t v30 = MEMORY[0x1F4188790](v28);
  unint64_t v181 = (char *)&v171 - v31;
  uint64_t v32 = MEMORY[0x1F4188790](v30);
  char v178 = (char *)&v171 - v33;
  uint64_t v34 = MEMORY[0x1F4188790](v32);
  unint64_t v36 = (char *)&v171 - v35;
  MEMORY[0x1F4188790](v34);
  unint64_t v183 = (char *)&v171 - v37;
  uint64_t v40 = type metadata accessor for Optional(255, v6, v38, v39);
  uint64_t v188 = type metadata accessor for Optional(0, (uint64_t)v40, v41, v42);
  uint64_t v196 = (uint64_t)*(v188 - 1);
  uint64_t v43 = MEMORY[0x1F4188790](v188);
  uint64_t v187 = (char *)&v171 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v45 = MEMORY[0x1F4188790](v43);
  unint64_t v195 = (char *)&v171 - v46;
  unint64_t v193 = v40;
  uint64_t v192 = (uint64_t)*(v40 - 1);
  uint64_t v47 = MEMORY[0x1F4188790](v45);
  size_t v189 = (char *)&v171 - ((v48 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v49 = MEMORY[0x1F4188790](v47);
  unint64_t v190 = (char *)&v171 - v50;
  unint64_t v51 = (unsigned char *)MEMORY[0x1F4188790](v49);
  Swift::String v191 = (char *)&v171 - v53;
  uint64_t v54 = HIBYTE(a2) & 0xF;
  uint64_t v198 = a1;
  uint64_t v55 = a1 & 0xFFFFFFFFFFFFLL;
  if ((a2 & 0x2000000000000000) != 0) {
    uint64_t v56 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v56 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (!v56)
  {
    swift_bridgeObjectRelease(a2);
    uint64_t v164 = v200;
    uint64_t v155 = v192;
    unint64_t v154 = v193;
    unint64_t v156 = v191;
    goto LABEL_56;
  }
  uint64_t v197 = v6;
  if ((a2 & 0x1000000000000000) == 0)
  {
    if ((a2 & 0x2000000000000000) != 0)
    {
      v201[0] = v198;
      v201[1] = a2 & 0xFFFFFFFFFFFFFFLL;
      uint64_t v67 = v195;
      specialized closure #1 in _parseInteger<A, B>(ascii:radix:)((unsigned __int8 *)v201, v54, 10, v6, v199, v195);
LABEL_49:
      uint64_t v155 = v192;
      unint64_t v154 = v193;
      unint64_t v156 = v191;
      Swift::String::Index v157 = v188;
      Swift::String::Index v158 = v189;
      Swift::String::Index v159 = v187;
      uint64_t v66 = v196;
LABEL_50:
      (*(void (**)(char *, void, uint64_t, Class *))(v155 + 56))(v67, 0, 1, v154);
      goto LABEL_51;
    }
    if ((v198 & 0x1000000000000000) != 0)
    {
      char v57 = (unsigned char *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
      if (v55 > 0) {
        goto LABEL_9;
      }
    }
    else
    {
      unint64_t v51 = _StringObject.sharedUTF8.getter(v198, a2);
      char v57 = v51;
      uint64_t v55 = v54;
      if (v54 > 0)
      {
LABEL_9:
        int v58 = *v57;
        unint64_t v177 = a2;
        if (v58 == 43)
        {
          uint64_t v93 = specialized Collection.subscript.getter(1, (uint64_t)v57, v55);
          uint64_t v97 = specialized UnsafeBufferPointer.init(rebasing:)(v93, v94, v95, v96);
          id v185 = (char *)v97;
          if (!v98)
          {
            uint64_t v67 = v195;
            (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v200 + 56))(v195, 1, 1, v6);
            goto LABEL_49;
          }
          uint64_t v100 = (char *)v98;
          v201[0] = 10;
          uint64_t v101 = v186;
          uint64_t v102 = (char *)(v186 + 96);
          unint64_t v103 = *(char **)(v186 + 96);
          unint64_t v104 = lazy protocol witness table accessor for type Int and conformance Int(v97, v98, v99);
          unint64_t v183 = v103;
          unint64_t v180 = v102;
          ((void (*)(void *, ValueMetadata *, unint64_t, uint64_t, uint64_t))v103)(v201, &type metadata for Int, v104, v6, v101);
          uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v11, v6, (uint64_t)AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
          (*(void (**)(void *, uint64_t, const char *, uint64_t))(AssociatedConformanceWitness + 8))(&unk_18162B0B8, 256, AssociatedTypeWitness, AssociatedConformanceWitness);
          uint64_t v106 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 24))(v15, v6, v11);
          uint64_t v109 = v185;
          if (v185)
          {
            uint64x2_t v110 = (void (**)(char *, uint64_t))(v199 + 96);
            uint64_t v111 = (void (**)(char *, uint64_t))(v200 + 8);
            unint64_t v112 = (void (**)(char *, char *, uint64_t))(v200 + 32);
            char v178 = (char *)(v199 + 80);
            Swift::String v113 = v181;
            while (1)
            {
              unsigned int v114 = *v109 - 48;
              if (v114 >= 0xA) {
                break;
              }
              id v185 = v109;
              unint64_t v174 = v100;
              LOBYTE(v201[0]) = v114;
              unint64_t v115 = lazy protocol witness table accessor for type UInt8 and conformance UInt8(v106, v107, v108);
              uint16x8_t v116 = v179;
              ((void (*)(void *, ValueMetadata *, unint64_t, uint64_t, uint64_t))v183)(v201, &type metadata for UInt8, v115, v6, v186);
              uint64_t v117 = v199;
              int8x16_t v118 = *(uint64_t (**)(char *, char *, uint64_t, uint64_t))(v199 + 96);
              unint64_t v173 = v110;
              LODWORD(v176) = v118(v113, v184, v6, v199);
              uint64_t v87 = *v111;
              (*v111)(v27, v6);
              int8x8_t v119 = *v112;
              (*v112)(v27, v113, v6);
              char v120 = (*(uint64_t (**)(char *, char *, uint64_t, uint64_t))(v117 + 80))(v113, v116, v6, v117);
              v87(v116, v6);
              unint64_t v175 = v111;
              v87(v27, v6);
              int8x8_t v121 = v182;
              v119(v182, v113, v6);
              uint64_t v106 = ((uint64_t (*)(char *, char *, uint64_t))v119)(v27, v121, v6);
              if (v176 & 1) != 0 || (v120)
              {
                v87(v27, v6);
                Swift::String::Index v153 = v184;
                goto LABEL_44;
              }
              uint64_t v109 = v185 + 1;
              uint64_t v100 = v174 - 1;
              uint64x2_t v110 = v173;
              uint64_t v111 = v175;
              if (v174 == (char *)1) {
                goto LABEL_28;
              }
            }
            uint64_t v146 = v200;
            int64_t v147 = *(void (**)(char *, uint64_t))(v200 + 8);
            v147(v27, v6);
            char v148 = v184;
LABEL_40:
            v147(v148, v6);
            uint64_t v152 = v146;
            goto LABEL_46;
          }
LABEL_28:
          uint64_t v92 = v200;
          (*(void (**)(char *, uint64_t))(v200 + 8))(v184, v6);
          uint64x2_t v122 = v27;
          uint64_t v67 = v195;
          (*(void (**)(char *, char *, uint64_t))(v92 + 32))(v195, v122, v6);
        }
        else
        {
          if (v58 != 45)
          {
            v201[0] = 10;
            uint64_t v124 = v186;
            uint64_t v184 = v15;
            int8x16_t v126 = (char *)(v186 + 96);
            int8x16_t v125 = *(char **)(v186 + 96);
            unint64_t v127 = lazy protocol witness table accessor for type Int and conformance Int((uint64_t)v51, v54, v52);
            uint64_t v179 = v126;
            char v178 = v125;
            ((void (*)(void *, ValueMetadata *, unint64_t, uint64_t, uint64_t))v125)(v201, &type metadata for Int, v127, v6, v124);
            uint64_t v128 = swift_getAssociatedConformanceWitness(v11, v6, (uint64_t)AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
            unsigned int v129 = v184;
            (*(void (**)(void *, uint64_t, const char *, uint64_t))(v128 + 8))(&unk_18162B0B8, 256, AssociatedTypeWitness, v128);
            uint64_t v130 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 24))(v129, v6, v11);
            unsigned int v133 = (void (**)(char *, uint64_t))(v199 + 96);
            unint64_t v134 = (char *)(v200 + 8);
            unint64_t v183 = (char *)(v200 + 32);
            uint64_t v176 = v199 + 80;
            while (1)
            {
              if (*v57 - 48 >= 0xA)
              {
                uint64_t v146 = v200;
                int64_t v147 = *(void (**)(char *, uint64_t))(v200 + 8);
                v147(v20, v6);
                char v148 = v185;
                goto LABEL_40;
              }
              LOBYTE(v201[0]) = *v57 - 48;
              unint64_t v135 = lazy protocol witness table accessor for type UInt8 and conformance UInt8(v130, v131, v132);
              uint64_t v184 = v134;
              uint64_t v136 = v180;
              ((void (*)(void *, ValueMetadata *, unint64_t, uint64_t, uint64_t))v178)(v201, &type metadata for UInt8, v135, v6, v186);
              uint64_t v137 = v199;
              unint64_t v138 = *(uint64_t (**)(char *, char *, uint64_t, uint64_t))(v199 + 96);
              uint64_t v139 = v181;
              unint64_t v173 = v133;
              LODWORD(v175) = v138(v181, v185, v6, v199);
              uint64_t v140 = *(void (**)(char *, uint64_t))v184;
              (*(void (**)(char *, uint64_t))v184)(v20, v6);
              unint64_t v174 = *(char **)v183;
              ((void (*)(char *, char *, uint64_t))v174)(v20, v139, v6);
              char v141 = (*(uint64_t (**)(char *, char *, uint64_t, uint64_t))(v137 + 80))(v139, v136, v6, v137);
              uint64_t v142 = v136;
              unint64_t v134 = v184;
              v140(v142, v6);
              v140(v20, v6);
              Swift::Int v143 = v182;
              uint64_t v144 = v139;
              int64_t v145 = v174;
              ((void (*)(char *, char *, uint64_t))v174)(v182, v144, v6);
              uint64_t v130 = ((uint64_t (*)(char *, char *, uint64_t))v145)(v20, v143, v6);
              if (v175 & 1) != 0 || (v141) {
                break;
              }
              ++v57;
              --v55;
              unsigned int v133 = v173;
              if (!v55)
              {
                v140(v185, v6);
                uint64_t v67 = v195;
                ((void (*)(char *, char *, uint64_t))v145)(v195, v20, v6);
                uint64_t v123 = v200;
                goto LABEL_30;
              }
            }
            v140(v20, v6);
            v140(v185, v6);
LABEL_45:
            uint64_t v152 = v200;
LABEL_46:
            uint64_t v67 = v195;
            (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v152 + 56))(v195, 1, 1, v6);
LABEL_48:
            a2 = v177;
            goto LABEL_49;
          }
          uint64_t v59 = specialized Collection.subscript.getter(1, (uint64_t)v57, v55);
          uint64_t v63 = specialized UnsafeBufferPointer.init(rebasing:)(v59, v60, v61, v62);
          uint64_t v184 = (char *)v64;
          id v185 = (char *)v63;
          uint64_t v67 = v195;
          uint64_t v66 = v196;
          if (!v64)
          {
            (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v200 + 56))(v195, 1, 1, v197);
            uint64_t v155 = v192;
            unint64_t v154 = v193;
            unint64_t v156 = v191;
            Swift::String::Index v157 = v188;
            Swift::String::Index v158 = v189;
            Swift::String::Index v159 = v187;
            goto LABEL_50;
          }
          v201[0] = 10;
          uint64_t v68 = v186;
          uint64_t v69 = (char *)(v186 + 96);
          int64_t v70 = *(char **)(v186 + 96);
          unint64_t v71 = lazy protocol witness table accessor for type Int and conformance Int(v63, v64, v65);
          uint64_t v72 = v197;
          unint64_t v180 = v70;
          uint64_t v179 = v69;
          ((void (*)(void *, ValueMetadata *, unint64_t, uint64_t, uint64_t))v70)(v201, &type metadata for Int, v71, v197, v68);
          uint64_t v73 = swift_getAssociatedConformanceWitness(v11, v72, (uint64_t)AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
          (*(void (**)(void *, uint64_t, const char *, uint64_t))(v73 + 8))(&unk_18162B0B8, 256, AssociatedTypeWitness, v73);
          uint64_t v74 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 24))(v15, v72, v11);
          uint64_t v77 = v185;
          if (v185)
          {
            uint64_t v78 = v199 + 96;
            uint64_t v79 = (void (**)(char *, uint64_t))(v200 + 8);
            uint64_t v176 = v200 + 32;
            unint64_t v175 = (void (**)(char *, uint64_t))(v199 + 88);
            unint64_t v80 = v181;
            uint64_t v81 = (void (**)(char *, char *, uint64_t))(v200 + 32);
            while (1)
            {
              unsigned int v82 = *v77 - 48;
              if (v82 >= 0xA)
              {
                uint64_t v149 = v200;
                size_t v150 = *(void (**)(char *, uint64_t))(v200 + 8);
                uint64_t v151 = v197;
                v150(v36, v197);
                v150(v183, v151);
                (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v149 + 56))(v67, 1, 1, v151);
                goto LABEL_48;
              }
              id v185 = v77;
              LOBYTE(v201[0]) = v82;
              unint64_t v83 = lazy protocol witness table accessor for type UInt8 and conformance UInt8(v74, v75, v76);
              char v84 = v178;
              uint64_t v6 = v197;
              ((void (*)(void *, ValueMetadata *, unint64_t, uint64_t, uint64_t))v180)(v201, &type metadata for UInt8, v83, v197, v186);
              uint64_t v85 = v199;
              char v86 = *(uint64_t (**)(char *, char *, uint64_t, uint64_t))(v199 + 96);
              uint64_t v172 = v78;
              LODWORD(v174) = v86(v80, v183, v6, v199);
              uint64_t v87 = *v79;
              (*v79)(v36, v6);
              uint64_t v88 = *v81;
              (*v81)(v36, v80, v6);
              char v89 = (*(uint64_t (**)(char *, char *, uint64_t, uint64_t))(v85 + 88))(v80, v84, v6, v85);
              v87(v84, v6);
              unint64_t v173 = v79;
              v87(v36, v6);
              unint64_t v90 = v182;
              v88(v182, v80, v6);
              uint64_t v74 = ((uint64_t (*)(char *, char *, uint64_t))v88)(v36, v90, v6);
              if (v174 & 1) != 0 || (v89) {
                break;
              }
              uint64_t v77 = v185 + 1;
              BOOL v91 = v184-- == (char *)1;
              uint64_t v67 = v195;
              uint64_t v78 = v172;
              uint64_t v79 = v173;
              if (v91) {
                goto LABEL_19;
              }
            }
            v87(v36, v6);
            Swift::String::Index v153 = v183;
LABEL_44:
            v87(v153, v6);
            goto LABEL_45;
          }
LABEL_19:
          uint64_t v92 = v200;
          uint64_t v6 = v197;
          (*(void (**)(char *, uint64_t))(v200 + 8))(v183, v197);
          (*(void (**)(char *, char *, uint64_t))(v92 + 32))(v67, v36, v6);
        }
        uint64_t v123 = v92;
LABEL_30:
        (*(void (**)(char *, void, uint64_t, uint64_t))(v123 + 56))(v67, 0, 1, v6);
        goto LABEL_48;
      }
    }
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x6F6uLL, 0);
  }
  uint64_t v155 = v192;
  unint64_t v154 = v193;
  uint64_t v67 = v195;
  (*(void (**)(char *, uint64_t, uint64_t, Class *))(v192 + 56))(v195, 1, 1, v193);
  unint64_t v156 = v191;
  Swift::String::Index v157 = v188;
  Swift::String::Index v158 = v189;
  Swift::String::Index v159 = v187;
  uint64_t v66 = v196;
LABEL_51:
  (*(void (**)(char *, char *, Class *))(v66 + 32))(v159, v67, v157);
  if ((*(unsigned int (**)(char *, uint64_t, Class *))(v155 + 48))(v159, 1, v154) == 1)
  {
    Swift::String::Index v160 = v190;
    uint64_t v161 = v197;
    specialized _parseInteger<A, B>(ascii:radix:)(v198, a2, 10, v197, v199, v190);
    swift_bridgeObjectRelease(a2);
    (*(void (**)(char *, Class *))(v66 + 8))(v159, v157);
    (*(void (**)(char *, char *, Class *))(v155 + 32))(v158, v160, v154);
  }
  else
  {
    swift_bridgeObjectRelease(a2);
    unint64_t v162 = *(void (**)(char *, char *, Class *))(v155 + 32);
    unint64_t v163 = v190;
    v162(v190, v159, v154);
    uint64_t v161 = v197;
    v162(v158, v163, v154);
  }
  uint64_t v164 = v200;
  unint64_t v165 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v200 + 48);
  uint64_t v6 = v161;
  if (v165(v158, 1, v161) == 1)
  {
    (*(void (**)(char *, Class *))(v155 + 8))(v158, v154);
LABEL_56:
    unint64_t v166 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v164 + 56);
    v166(v156, 1, 1, v6);
    unsigned int v167 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v164 + 48))(v156, 1, v6);
    goto LABEL_58;
  }
  (*(void (**)(char *, char *, uint64_t))(v164 + 32))(v156, v158, v161);
  unint64_t v166 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v164 + 56);
  v166(v156, 0, 1, v161);
  unsigned int v167 = v165(v156, 1, v161);
LABEL_58:
  if (v167)
  {
    (*(void (**)(char *, Class *))(v155 + 8))(v156, v154);
    uint64_t v168 = 1;
    uint64_t v169 = v194;
  }
  else
  {
    uint64_t v169 = v194;
    (*(void (**)(uint64_t, char *, uint64_t))(v164 + 32))(v194, v156, v6);
    uint64_t v168 = 0;
  }
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v166)(v169, v168, 1, v6);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance _DictionaryCodingKey@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result = specialized _DictionaryCodingKey.init(stringValue:)(a1, a2);
  *(void *)a3 = result;
  *(void *)(a3 + 8) = v5;
  *(void *)(a3 + 16) = v7;
  *(unsigned char *)(a3 + 24) = v6 & 1;
  return result;
}

unint64_t protocol witness for CodingKey.init(intValue:) in conformance _DictionaryCodingKey@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result = specialized _DictionaryCodingKey.init(intValue:)(a1);
  *(void *)a2 = result;
  *(void *)(a2 + 8) = v4;
  *(void *)(a2 + 16) = v6;
  *(unsigned char *)(a2 + 24) = v5 & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance _DictionaryCodingKey()
{
  return specialized CodingKey.description.getter(*(void *)v0, *(void *)(v0 + 8), *(void *)(v0 + 16), *(unsigned char *)(v0 + 24));
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance _DictionaryCodingKey(uint64_t a1, uint64_t a2)
{
  return protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance _GenericIndexKey(a1, a2, (uint64_t (*)(void, void, void, void))specialized CodingKey.description.getter);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance _GenericIndexKey(uint64_t a1, uint64_t a2, uint64_t (*a3)(void, void, void, void))
{
  return a3(*(void *)v3, *(void *)(v3 + 8), *(void *)(v3 + 16), *(unsigned __int8 *)(v3 + 24));
}

void *RawRepresentable<>.codingKey.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, void *a3@<X8>)
{
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a2 + 24))(v12, a1, a2);
  uint64_t v4 = specialized _DictionaryCodingKey.init(stringValue:)(v12[0], v12[1]);
  uint64_t v6 = v5;
  uint64_t v8 = v7;
  char v10 = v9;
  a3[3] = &type metadata for _DictionaryCodingKey;
  a3[4] = &protocol witness table for _DictionaryCodingKey;
  unint64_t result = swift_allocObject(qword_1EC9F2910, 0x29uLL, 7uLL);
  *a3 = result;
  result[2] = v4;
  result[3] = v6;
  result[4] = v8;
  *((unsigned char *)result + 4_assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000034, 0x80000001816E2880, "Swift/Codable.swift", 19, 2, 0x11F9uLL, 0) = v10 & 1;
  return result;
}

{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  char v10;
  void *result;
  uint64_t v12;

  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a2 + 24))(&v12, a1, a2);
  uint64_t v4 = specialized _DictionaryCodingKey.init(intValue:)(v12);
  uint64_t v6 = v5;
  uint64_t v8 = v7;
  char v10 = v9;
  a3[3] = &type metadata for _DictionaryCodingKey;
  a3[4] = &protocol witness table for _DictionaryCodingKey;
  unint64_t result = swift_allocObject(qword_1EC9F2910, 0x29uLL, 7uLL);
  *a3 = result;
  result[2] = v4;
  result[3] = v6;
  result[4] = v8;
  *((unsigned char *)result + 4_assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000034, 0x80000001816E2880, "Swift/Codable.swift", 19, 2, 0x11F9uLL, 0) = v10 & 1;
  return result;
}

uint64_t RawRepresentable<>.init<A>(codingKey:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v25 = a7;
  uint64_t v12 = type metadata accessor for Optional(0, a2, a3, a4);
  uint64_t v13 = (uint64_t)*(v12 - 1);
  MEMORY[0x1F4188790](v12);
  uint64_t v15 = (char *)&v24 - v14;
  uint64_t v16 = (*(uint64_t (**)(uint64_t, uint64_t))(a6 + 24))(a3, a6);
  uint64_t v18 = v17;
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 8))(a1, a3);
  v26[0] = v16;
  v26[1] = v18;
  (*(void (**)(void *, uint64_t, uint64_t))(a5 + 16))(v26, a2, a5);
  uint64_t v19 = *(void *)(a2 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v15, 1, a2))
  {
    (*(void (**)(char *, Class *))(v13 + 8))(v15, v12);
    uint64_t v20 = 1;
    uint64_t v21 = v25;
  }
  else
  {
    uint64_t v22 = v25;
    (*(void (**)(uint64_t, char *, uint64_t))(v19 + 32))(v25, v15, a2);
    uint64_t v20 = 0;
    uint64_t v21 = v22;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v19 + 56))(v21, v20, 1, a2);
}

{
  Class *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;

  uint64_t v23 = a7;
  uint64_t v12 = type metadata accessor for Optional(0, a2, a3, a4);
  uint64_t v13 = (uint64_t)*(v12 - 1);
  MEMORY[0x1F4188790](v12);
  uint64_t v15 = (char *)&v23 - v14;
  uint64_t v16 = (*(uint64_t (**)(uint64_t, uint64_t))(a6 + 40))(a3, a6);
  LOBYTE(a6) = v17;
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 8))(a1, a3);
  if (a6)
  {
    uint64_t v18 = *(void *)(a2 - 8);
  }
  else
  {
    uint64_t v24 = v16;
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(a5 + 16))(&v24, a2, a5);
    uint64_t v18 = *(void *)(a2 - 8);
    uint64_t v19 = v18;
    if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v15, 1, a2))
    {
      uint64_t v21 = v23;
      (*(void (**)(uint64_t, char *, uint64_t))(v19 + 32))(v23, v15, a2);
      uint64_t v20 = 0;
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v19 + 56))(v21, v20, 1, a2);
    }
    (*(void (**)(char *, Class *))(v13 + 8))(v15, v12);
  }
  uint64_t v19 = v18;
  uint64_t v20 = 1;
  uint64_t v21 = v23;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v19 + 56))(v21, v20, 1, a2);
}

void *Int.codingKey.getter@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  unint64_t v3 = specialized _DictionaryCodingKey.init(intValue:)(a1);
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  char v9 = v8;
  a2[3] = &type metadata for _DictionaryCodingKey;
  a2[4] = &protocol witness table for _DictionaryCodingKey;
  unint64_t result = swift_allocObject(qword_1EC9F2910, 0x29uLL, 7uLL);
  *a2 = result;
  result[2] = v3;
  result[3] = v5;
  result[4] = v7;
  *((unsigned char *)result + 4_assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000034, 0x80000001816E2880, "Swift/Codable.swift", 19, 2, 0x11F9uLL, 0) = v9 & 1;
  return result;
}

uint64_t Int.init<A>(codingKey:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = specialized Int.init<A>(codingKey:)(a1, a2, a3);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a2 - 8) + 8))(a1, a2);
  return v5;
}

void *protocol witness for CodingKeyRepresentable.codingKey.getter in conformance Int@<X0>(void *a1@<X8>)
{
  unint64_t v3 = specialized _DictionaryCodingKey.init(intValue:)(*v1);
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  char v9 = v8;
  a1[3] = &type metadata for _DictionaryCodingKey;
  a1[4] = &protocol witness table for _DictionaryCodingKey;
  unint64_t result = swift_allocObject(qword_1EC9F2910, 0x29uLL, 7uLL);
  *a1 = result;
  result[2] = v3;
  result[3] = v5;
  result[4] = v7;
  *((unsigned char *)result + 4_assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000034, 0x80000001816E2880, "Swift/Codable.swift", 19, 2, 0x11F9uLL, 0) = v9 & 1;
  return result;
}

uint64_t protocol witness for CodingKeyRepresentable.init<A>(codingKey:) in conformance Int@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = specialized Int.init<A>(codingKey:)(a1, a2, a3);
  char v9 = v8;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a2 - 8) + 8))(a1, a2);
  *(void *)a4 = v7;
  *(unsigned char *)(a4 + 8) = v9 & 1;
  return result;
}

void *String.codingKey.getter@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, void *a3@<X8>)
{
  swift_bridgeObjectRetain(a2);
  uint64_t v6 = specialized _DictionaryCodingKey.init(stringValue:)(a1, a2);
  uint64_t v8 = v7;
  uint64_t v10 = v9;
  char v12 = v11;
  a3[3] = &type metadata for _DictionaryCodingKey;
  a3[4] = &protocol witness table for _DictionaryCodingKey;
  uint64_t result = swift_allocObject(qword_1EC9F2910, 0x29uLL, 7uLL);
  *a3 = result;
  result[2] = v6;
  result[3] = v8;
  result[4] = v10;
  *((unsigned char *)result + 4_assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000034, 0x80000001816E2880, "Swift/Codable.swift", 19, 2, 0x11F9uLL, 0) = v12 & 1;
  return result;
}

uint64_t String.init<A>(codingKey:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = specialized String.init<A>(codingKey:)(a1, a2, a3);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a2 - 8) + 8))(a1, a2);
  return v5;
}

void *protocol witness for CodingKeyRepresentable.codingKey.getter in conformance String@<X0>(void *a1@<X8>)
{
  uint64_t v4 = *v1;
  unint64_t v3 = v1[1];
  swift_bridgeObjectRetain(v3);
  uint64_t v5 = specialized _DictionaryCodingKey.init(stringValue:)(v4, v3);
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  char v11 = v10;
  a1[3] = &type metadata for _DictionaryCodingKey;
  a1[4] = &protocol witness table for _DictionaryCodingKey;
  uint64_t result = swift_allocObject(qword_1EC9F2910, 0x29uLL, 7uLL);
  *a1 = result;
  result[2] = v5;
  result[3] = v7;
  result[4] = v9;
  *((unsigned char *)result + 4_assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000034, 0x80000001816E2880, "Swift/Codable.swift", 19, 2, 0x11F9uLL, 0) = v11 & 1;
  return result;
}

uint64_t protocol witness for CodingKeyRepresentable.init<A>(codingKey:) in conformance String@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v7 = specialized String.init<A>(codingKey:)(a1, a2, a3);
  uint64_t v9 = v8;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a2 - 8) + 8))(a1, a2);
  *a4 = v7;
  a4[1] = v9;
  return result;
}

uint64_t Dictionary<>.encode(to:)(void *a1, uint64_t a2, ValueMetadata *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v365 = a7;
  uint64_t v347 = a5;
  uint64_t v7 = (uint64_t *)a4;
  Swift::String::Index v339 = type metadata accessor for Optional(0, a4, (uint64_t)a3, a4);
  uint64_t v346 = (uint64_t)*(v339 - 1);
  uint64_t v11 = MEMORY[0x1F4188790](v339);
  uint64_t v342 = (char *)&v322 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = MEMORY[0x1F4188790](v11);
  Swift::String::Index v340 = (Class *)((char *)&v322 - v14);
  uint64_t v15 = MEMORY[0x1F4188790](v13);
  Swift::Int v341 = (void (**)(Class *, char *, Class *))((char *)&v322 - v16);
  uint64_t v17 = MEMORY[0x1F4188790](v15);
  k = (uint64_t *)((char *)&v322 - v18);
  uint64_t v19 = MEMORY[0x1F4188790](v17);
  Swift::String::Index v335 = (char *)&v322 - v20;
  uint64_t v21 = MEMORY[0x1F4188790](v19);
  v362 = (char *)&v322 - v22;
  uint64_t v23 = MEMORY[0x1F4188790](v21);
  uint64_t v349 = (Class *)((char *)&v322 - v24);
  MEMORY[0x1F4188790](v23);
  unint64_t v348 = (char *)&v322 - v25;
  uint64_t v350 = type metadata accessor for Optional(0, (uint64_t)a3, v26, v27);
  int64_t v344 = (int64_t)*(v350 - 1);
  uint64_t v28 = MEMORY[0x1F4188790](v350);
  Swift::String::Index v334 = (void (**)(char *, uint64_t, uint64_t, ValueMetadata *))((char *)&v322
                                                                         - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v30 = MEMORY[0x1F4188790](v28);
  Swift::String::Index v333 = (char *)&v322 - v31;
  uint64_t v32 = MEMORY[0x1F4188790](v30);
  Swift::Int v336 = (char *)&v322 - v33;
  uint64_t v34 = MEMORY[0x1F4188790](v32);
  unint64_t v36 = (uint64_t *)((char *)&v322 - v35);
  uint64_t v37 = MEMORY[0x1F4188790](v34);
  Swift::String::Index v337 = (Class *)((char *)&v322 - v38);
  uint64_t v39 = MEMORY[0x1F4188790](v37);
  Swift::String::Index v338 = (char *)&v322 - v40;
  uint64_t v41 = MEMORY[0x1F4188790](v39);
  uint64_t v43 = (char *)&v322 - v42;
  uint64_t v44 = MEMORY[0x1F4188790](v41);
  uint64_t v46 = (char *)&v322 - v45;
  uint64_t v364 = *(v7 - 1);
  uint64_t v47 = MEMORY[0x1F4188790](v44);
  unint64_t v345 = (char *)&v322 - ((v48 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v49 = MEMORY[0x1F4188790](v47);
  Swift::String v352 = (void (**)(void))((char *)&v322 - v50);
  uint64_t v51 = MEMORY[0x1F4188790](v49);
  v360 = (char *)&v322 - v52;
  uint64_t v53 = MEMORY[0x1F4188790](v51);
  uint64_t v55 = (void (**)(void))((char *)&v322 - v54);
  uint64_t v56 = MEMORY[0x1F4188790](v53);
  v357 = (char *)&v322 - v57;
  Description = (char *)a3[-1].Description;
  uint64_t v58 = MEMORY[0x1F4188790](v56);
  size_t v353 = (Class *)((char *)&v322 - ((v59 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1F4188790](v58);
  v369 = (char *)&v322 - v60;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(255, (uint64_t)a3, (uint64_t)v7, "key value ", 0);
  v366 = type metadata accessor for Optional(0, (uint64_t)TupleTypeMetadata2, v61, v62);
  uint64_t v343 = (Class *)*(v366 - 1);
  uint64_t v63 = MEMORY[0x1F4188790](v366);
  v358 = (char *)&v322 - ((v64 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v65 = MEMORY[0x1F4188790](v63);
  j = (char *)&v322 - v66;
  uint64_t v67 = MEMORY[0x1F4188790](v65);
  uint64_t i = (uint64_t *)((char *)&v322 - v68);
  uint64_t v69 = MEMORY[0x1F4188790](v67);
  v356 = (void (**)(char *, char *, uint64_t *))((char *)&v322 - v70);
  uint64_t v71 = MEMORY[0x1F4188790](v69);
  v361 = (char *)&v322 - v72;
  uint64_t v73 = MEMORY[0x1F4188790](v71);
  uint64_t v75 = (char *)&v322 - v74;
  uint64_t v76 = MEMORY[0x1F4188790](v73);
  MEMORY[0x1F4188790](v76);
  uint64_t v368 = (uint64_t)v7;
  if (a3 == &type metadata for String)
  {
    v359 = (uint64_t *)((char *)&v322 - v77);
    v362 = v78;
    Swift::String v352 = v55;
    Swift::String::Index v335 = v46;
    Swift::Int v336 = v43;
    uint64_t v91 = a1[3];
    uint64_t v92 = a1[4];
    __swift_project_boxed_opaque_existential_0Tm(a1, v91);
    (*(void (**)(uint64_t *__return_ptr, ValueMetadata *, ValueMetadata *, _UNKNOWN **, uint64_t, uint64_t))(v92 + 24))(v371, &type metadata for _DictionaryCodingKey, &type metadata for _DictionaryCodingKey, &protocol witness table for _DictionaryCodingKey, v91, v92);
    unint64_t v93 = a2;
    if ((a2 & 0xC000000000000001) != 0)
    {
      if (a2 < 0) {
        uint64_t v94 = a2;
      }
      else {
        uint64_t v94 = a2 & 0xFFFFFFFFFFFFFF8;
      }
      uint64_t v95 = (unint64_t *)type metadata accessor for __CocoaDictionary.Iterator();
      unint64_t v96 = (unint64_t)swift_allocObject(v95, 0xE8uLL, 7uLL);
      uint64_t v342 = 0;
      uint64_t v97 = 0;
      unint64_t v98 = 0;
      *(void *)(v96 + 208) = v94;
      *(void *)(v96 + 216) = 0;
      *(_OWORD *)(v96 + 16) = 0u;
      *(_OWORD *)(v96 + 32) = 0u;
      *(_OWORD *)(v96 + 48) = 0u;
      *(_OWORD *)(v96 + 64) = 0u;
      *(_OWORD *)(v96 + 8_assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000034, 0x80000001816E2880, "Swift/Codable.swift", 19, 2, 0x11F9uLL, 0) = 0u;
      *(_OWORD *)(v96 + 96) = 0u;
      *(_OWORD *)(v96 + 112) = 0u;
      *(_OWORD *)(v96 + 128) = 0u;
      *(_OWORD *)(v96 + 144) = 0u;
      *(_OWORD *)(v96 + 16_assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000034, 0x80000001816E2880, "Swift/Codable.swift", 19, 2, 0x11F9uLL, 0) = 0u;
      *(_OWORD *)(v96 + 176) = 0u;
      *(_OWORD *)(v96 + 192) = 0u;
      *(void *)(v96 + 224) = 0;
      unint64_t v99 = v96 | 0x8000000000000000;
    }
    else
    {
      uint64_t v116 = -1 << *(unsigned char *)(a2 + 32);
      uint64_t v97 = ~v116;
      uint64_t v117 = *(void *)(a2 + 64);
      uint64_t v342 = (char *)(a2 + 64);
      uint64_t v118 = -v116;
      if (v118 < 64) {
        uint64_t v119 = ~(-1 << v118);
      }
      else {
        uint64_t v119 = -1;
      }
      unint64_t v98 = v119 & v117;
      unint64_t v99 = a2;
    }
    char v120 = TupleTypeMetadata2;
    int8x8_t v121 = v349;
    uint64x2_t v122 = v348;
    uint64_t v123 = v362;
    Swift::Int v341 = (void (**)(Class *, char *, Class *))((v99 & 0x7FFFFFFFFFFFFFFFLL) + 16);
    uint64_t v347 = v99 & 0x7FFFFFFFFFFFFFFFLL;
    Swift::String::Index v340 = (Class *)((v99 & 0x7FFFFFFFFFFFFFFFLL) + 80);
    Swift::String::Index v334 = (void (**)(char *, uint64_t, uint64_t, ValueMetadata *))(Description + 56);
    Swift::String::Index v333 = (char *)(v344 + 16);
    Swift::String::Index v332 = (unsigned int (**)(char *, uint64_t, ValueMetadata *))(Description + 48);
    Swift::Int v331 = (char *)(v344 + 8);
    v361 = Description + 32;
    Swift::String::Index v330 = (unsigned int (**)(char *, uint64_t, char *))(v364 + 56);
    Swift::String::Index v329 = (void (**)(Class *, void *, Class *))(v346 + 16);
    Swift::String::Index v328 = (unsigned int (**)(Class *, uint64_t, const char *))(v364 + 48);
    Swift::String::Index v327 = (void (**)(char *, Class *))(v346 + 8);
    v360 = (char *)(v364 + 32);
    k = TupleTypeMetadata2 - 1;
    Swift::String::Index v338 = (char *)v97;
    uint64_t v346 = (uint64_t)(Description + 16);
    unint64_t v345 = (char *)(v364 + 16);
    size_t v353 = v343 + 4;
    j = (char *)(v364 + 8);
    int64_t v344 = (unint64_t)(v97 + 64) >> 6;
    Swift::String::Index v337 = (Class *)(v344 - 1);
    swift_bridgeObjectRetain(v93);
    uint64_t v124 = 0;
    uint64_t v343 = qword_1ECA06328;
    for (i = (uint64_t *)v99; ; unint64_t v99 = (unint64_t)i)
    {
      v356 = (void (**)(char *, char *, uint64_t *))v98;
      v358 = v124;
      if ((v99 & 0x8000000000000000) == 0) {
        break;
      }
      uint64_t v138 = v347;
      uint64_t v139 = *(void *)(v347 + 216);
      uint64_t v136 = v121;
      uint64_t v140 = v359;
      if ((v139 & 0x8000000000000000) == 0)
      {
        char v141 = *(void **)(v347 + 208);
        if (v139 != *(void *)(v347 + 224)) {
          goto LABEL_40;
        }
        id v142 = [*(id *)(v347 + 208) countByEnumeratingWithState:v341 objects:v340 count:16];
        uint64_t v138 = v347;
        *(void *)(v347 + 224) = v142;
        if (v142)
        {
          uint64_t v139 = 0;
          *(void *)(v138 + 216) = 0;
LABEL_40:
          uint64_t v143 = *(void *)(v138 + 24);
          if (!v143) {
            goto LABEL_236;
          }
          if ((unint64_t)(v139 - 0x1000000000000000) >> 61 != 7) {
            goto LABEL_225;
          }
          uint64_t v144 = (void **)(v143 + 8 * v139);
          if ((v144 & 7) != 0) {
            goto LABEL_223;
          }
          int64_t v145 = *v144;
          *(void *)(v138 + 216) = v139 + 1;
          swift_unknownObjectRetain(v145);
          uint64_t v146 = (swift)[v141 objectForKey:v145];
          if (!v146) {
            goto LABEL_237;
          }
          int64_t v147 = v146;
          if (_swift_isClassOrObjCExistentialType((uint64_t)&type metadata for String, &type metadata for String.Kind))
          {
            *(void *)&long long v374 = v145;
            swift_dynamicCast(v123, (unint64_t *)&v374, v343, (const char *)&type metadata for String, 7uLL);
          }
          else
          {
            unint64_t v163 = v335;
            (*v334)(v335, 1, 1, &type metadata for String);
            _bridgeNonVerbatimFromObjectiveC<A>(_:_:_:)((swift *)v145, (uint64_t)&type metadata for String, v163);
            uint64_t v164 = v145;
            unint64_t v165 = v163;
            swift_unknownObjectRelease(v164);
            unint64_t v166 = v336;
            unsigned int v167 = v350;
            (*(void (**)(char *, char *, Class *))v333)(v336, v165, v350);
            if ((*v332)(v166, 1, &type metadata for String) == 1) {
              goto LABEL_239;
            }
            (*(void (**)(char *, Class *))v331)(v165, v167);
            (*(void (**)(char *, char *, ValueMetadata *))v361)(v123, v166, &type metadata for String);
            unint64_t v98 = (unint64_t)v356;
            uint64_t v124 = v358;
          }
          char v148 = &v123[*((int *)v120 + 12)];
          uint64_t v149 = (const char *)v368;
          if (_swift_isClassOrObjCExistentialType(v368, (uint64_t *)v368))
          {
            *(void *)&long long v374 = v147;
            swift_dynamicCast(v148, (unint64_t *)&v374, qword_1ECA06328, v149, 7uLL);
            uint64_t v136 = v121;
            uint64_t v137 = v122;
          }
          else
          {
            ((void (*)(char *, uint64_t, uint64_t, const char *))*v330)(v122, 1, 1, v149);
            _bridgeNonVerbatimFromObjectiveC<A>(_:_:_:)(v147, (uint64_t)v149, v122);
            swift_unknownObjectRelease(v147);
            uint64_t v168 = v121;
            uint64_t v137 = v122;
            uint64_t v169 = v122;
            uint64_t v170 = v339;
            (*v329)(v168, v169, v339);
            if ((*v328)(v168, 1, v149) == 1) {
              goto LABEL_239;
            }
            (*v327)(v137, v170);
            (*(void (**)(char *, Class *, const char *))v360)(v148, v168, v149);
            uint64_t v136 = v168;
          }
          uint64_t v135 = *(v120 - 1);
          (*(void (**)(char *, void, uint64_t, uint64_t *))(v135 + 56))(v123, 0, 1, v120);
LABEL_56:
          uint64_t v140 = v359;
          goto LABEL_57;
        }
        *(void *)(v138 + 216) = -1;
      }
      uint64_t v135 = *(v120 - 1);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t *))(v135 + 56))(v123, 1, 1, v120);
      uint64_t v137 = v122;
LABEL_57:
      ((void (*)(uint64_t *, char *, Class *))*v353)(v140, v123, v366);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t *))(v135 + 48))(v140, 1, v120) == 1) {
        goto LABEL_75;
      }
      uint64x2_t v122 = v137;
      int8x8_t v121 = v136;
      Swift::String::Index v153 = v352;
      uint64_t v154 = v368;
      (*(void (**)(void (**)(void), char *, uint64_t))v360)(v352, (char *)v140 + *((int *)v120 + 12), v368);
      uint64_t v155 = (unint64_t *)v369;
      (*(void (**)(char *, uint64_t *, ValueMetadata *))v361)(v369, v140, &type metadata for String);
      swift_dynamicCast((char *)&v374, v155, (Class *)&type metadata for String, (const char *)&type metadata for String, 7uLL);
      uint64_t v156 = specialized _DictionaryCodingKey.init(stringValue:)(v374, *((unint64_t *)&v374 + 1));
      uint64_t v158 = v157;
      *(void *)&long long v374 = v156;
      *((void *)&v374 + 1) = v157;
      uint64_t v375 = v159;
      LOBYTE(v376) = v160 & 1;
      uint64_t v161 = v370;
      (*(void (**)(void (**)(void), long long *, uint64_t, ValueMetadata *, uint64_t, _UNKNOWN **))(*(void *)v371[0] + 232))(v153, &v374, v154, &type metadata for _DictionaryCodingKey, v365, &protocol witness table for _DictionaryCodingKey);
      uint64_t v370 = v161;
      if (v161)
      {
        (*(void (**)(void (**)(void), uint64_t))j)(v153, v154);
        swift_bridgeObjectRelease(v158);
LABEL_75:
        uint64_t v171 = i;
        goto LABEL_172;
      }
      (*(void (**)(void (**)(void), uint64_t))j)(v153, v154);
      swift_bridgeObjectRelease(v158);
      uint64_t v123 = v362;
    }
    if (v98)
    {
      unint64_t v125 = __clz(__rbit64(v98));
      v98 &= v98 - 1;
      unint64_t v126 = v125 | ((void)v124 << 6);
LABEL_35:
      unint64_t v127 = Description;
      uint64_t v128 = v369;
      (*((void (**)(char *, unint64_t, ValueMetadata *))Description + 2))(v369, *(void *)(v99 + 48) + *((void *)Description + 9) * v126, &type metadata for String);
      uint64_t v129 = *(void *)(v99 + 56);
      uint64_t v130 = v364;
      uint64_t v131 = v357;
      uint64_t v132 = v368;
      (*(void (**)(char *, unint64_t, uint64_t))(v364 + 16))(v357, v129 + *(void *)(v364 + 72) * v126, v368);
      uint64_t v123 = v362;
      unsigned int v133 = &v362[*((int *)TupleTypeMetadata2 + 12)];
      unint64_t v134 = (void (*)(char *, char *, ValueMetadata *))*((void *)v127 + 4);
      char v120 = TupleTypeMetadata2;
      v134(v362, v128, &type metadata for String);
      (*(void (**)(char *, char *, uint64_t))(v130 + 32))(v133, v131, v132);
      uint64_t v135 = *(v120 - 1);
      (*(void (**)(char *, void, uint64_t, uint64_t *))(v135 + 56))(v123, 0, 1, v120);
      uint64_t v136 = v349;
      uint64_t v137 = v348;
      goto LABEL_56;
    }
    if (__OFADD__(v124++, 1))
    {
      __break(1u);
LABEL_225:
      __break(1u);
LABEL_226:
      __break(1u);
LABEL_227:
      __break(1u);
LABEL_228:
      __break(1u);
LABEL_229:
      __break(1u);
LABEL_230:
      __break(1u);
LABEL_231:
      __break(1u);
LABEL_232:
      __break(1u);
LABEL_233:
      __break(1u);
LABEL_234:
      __break(1u);
LABEL_235:
      __break(1u);
LABEL_236:
      unint64_t v321 = 773;
LABEL_238:
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/DictionaryBridging.swift", 30, 2, v321, 0);
    }
    if ((uint64_t)v124 >= v344)
    {
      uint64_t v152 = (char **)&v379;
    }
    else
    {
      unint64_t v151 = *(void *)&v342[8 * (void)v124];
      if (v151)
      {
LABEL_52:
        unint64_t v98 = (v151 - 1) & v151;
        unint64_t v126 = __clz(__rbit64(v151)) + ((void)v124 << 6);
        goto LABEL_35;
      }
      unint64_t v162 = v124 + 1;
      if ((uint64_t)(v124 + 1) >= v344)
      {
LABEL_55:
        uint64_t v135 = *(v120 - 1);
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t *))(v135 + 56))(v123, 1, 1, v120);
        unint64_t v98 = 0;
        uint64_t v136 = v121;
        uint64_t v137 = v122;
        goto LABEL_56;
      }
      unint64_t v151 = *(void *)&v342[8 * (void)v162];
      if (v151)
      {
        ++v124;
        goto LABEL_52;
      }
      while (1)
      {
        uint64_t v124 = v162 + 1;
        if (__OFADD__(v162, 1)) {
          goto LABEL_228;
        }
        if ((uint64_t)v124 >= v344) {
          break;
        }
        unint64_t v151 = *(void *)&v342[8 * (void)v124];
        ++v162;
        if (v151) {
          goto LABEL_52;
        }
      }
      uint64_t v152 = &v369;
    }
    uint64_t v124 = *(v152 - 32);
    goto LABEL_55;
  }
  unint64_t v79 = a2 & 0xC000000000000001;
  int64_t v80 = a2;
  if (a3 == &type metadata for Int)
  {
    uint64_t v100 = a1[3];
    uint64_t v101 = a1[4];
    __swift_project_boxed_opaque_existential_0Tm(a1, v100);
    (*(void (**)(uint64_t *__return_ptr, ValueMetadata *, ValueMetadata *, _UNKNOWN **, uint64_t, uint64_t))(v101 + 24))(v371, &type metadata for _DictionaryCodingKey, &type metadata for _DictionaryCodingKey, &protocol witness table for _DictionaryCodingKey, v100, v101);
    if (v79)
    {
      if (v80 < 0) {
        uint64_t v102 = v80;
      }
      else {
        uint64_t v102 = v80 & 0xFFFFFFFFFFFFFF8;
      }
      unint64_t v103 = (unint64_t *)type metadata accessor for __CocoaDictionary.Iterator();
      unint64_t v104 = (unint64_t)swift_allocObject(v103, 0xE8uLL, 7uLL);
      unint64_t v348 = 0;
      uint64_t v105 = 0;
      unint64_t v106 = 0;
      *(void *)(v104 + 208) = v102;
      *(void *)(v104 + 216) = 0;
      *(_OWORD *)(v104 + 16) = 0u;
      *(_OWORD *)(v104 + 32) = 0u;
      *(_OWORD *)(v104 + 48) = 0u;
      *(_OWORD *)(v104 + 64) = 0u;
      *(_OWORD *)(v104 + 8_assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000034, 0x80000001816E2880, "Swift/Codable.swift", 19, 2, 0x11F9uLL, 0) = 0u;
      *(_OWORD *)(v104 + 96) = 0u;
      *(_OWORD *)(v104 + 112) = 0u;
      *(_OWORD *)(v104 + 128) = 0u;
      *(_OWORD *)(v104 + 144) = 0u;
      *(_OWORD *)(v104 + 16_assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000034, 0x80000001816E2880, "Swift/Codable.swift", 19, 2, 0x11F9uLL, 0) = 0u;
      *(_OWORD *)(v104 + 176) = 0u;
      *(_OWORD *)(v104 + 192) = 0u;
      *(void *)(v104 + 224) = 0;
      uint64_t v107 = v104 | 0x8000000000000000;
    }
    else
    {
      uint64_t v229 = -1 << *(unsigned char *)(v80 + 32);
      uint64_t v105 = ~v229;
      uint64_t v230 = *(void *)(v80 + 64);
      unint64_t v348 = (char *)(v80 + 64);
      uint64_t v231 = -v229;
      if (v231 < 64) {
        uint64_t v232 = ~(-1 << v231);
      }
      else {
        uint64_t v232 = -1;
      }
      unint64_t v106 = v232 & v230;
      uint64_t v107 = v80;
    }
    uint64_t v234 = v361;
    char v233 = v362;
    uint64_t v235 = v346;
    uint64_t v347 = (v107 & 0x7FFFFFFFFFFFFFFFLL) + 16;
    uint64_t i = (uint64_t *)(v107 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v346 = (v107 & 0x7FFFFFFFFFFFFFFFLL) + 80;
    uint64_t v342 = Description + 56;
    Swift::Int v341 = (void (**)(Class *, char *, Class *))(v344 + 16);
    Swift::String::Index v340 = (Class *)(Description + 48);
    Swift::Int v336 = (char *)(v344 + 8);
    v357 = Description + 32;
    Swift::String::Index v334 = (void (**)(char *, uint64_t, uint64_t, ValueMetadata *))(v364 + 56);
    Swift::String::Index v333 = (char *)(v235 + 16);
    Swift::String::Index v332 = (unsigned int (**)(char *, uint64_t, ValueMetadata *))(v364 + 48);
    Swift::Int v331 = (char *)(v235 + 8);
    v356 = (void (**)(char *, char *, uint64_t *))(v364 + 32);
    v359 = TupleTypeMetadata2 - 1;
    unint64_t v345 = (char *)v105;
    size_t v353 = (Class *)(Description + 16);
    Swift::String v352 = (void (**)(void))(v364 + 16);
    v358 = (char *)(v343 + 4);
    k = (uint64_t *)(v364 + 8);
    j = (char *)((unint64_t)(v105 + 64) >> 6);
    int64_t v344 = (int64_t)(j - 1);
    swift_bridgeObjectRetain(v80);
    int64_t v236 = 0;
    uint64_t v349 = qword_1ECA06328;
    uint64_t v368 = v107;
    if ((v107 & 0x8000000000000000) == 0) {
      goto LABEL_149;
    }
LABEL_129:
    size_t v237 = i;
    uint64_t v238 = i[27];
    if ((v238 & 0x8000000000000000) == 0)
    {
      uint64_t v239 = (void *)i[26];
      if (v238 != i[28]) {
        goto LABEL_133;
      }
      id v240 = [i[26] countByEnumeratingWithState:v347 objects:v346 count:16];
      size_t v237 = i;
      i[28] = (uint64_t)v240;
      if (v240)
      {
        uint64_t v238 = 0;
        v237[27] = 0;
LABEL_133:
        uint64_t v241 = v237[3];
        if (!v241) {
          goto LABEL_236;
        }
        if ((unint64_t)(v238 - 0x1000000000000000) >> 61 != 7) {
          goto LABEL_230;
        }
        char v242 = (void **)(v241 + 8 * v238);
        if ((v242 & 7) != 0) {
LABEL_223:
        }
          _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "load from misaligned raw pointer", 32, 2, "Swift/UnsafeRawPointer.swift", 28, 2, 0x4F9uLL, 0);
        uint64_t v243 = *v242;
        v237[27] = v238 + 1;
        swift_unknownObjectRetain(v243);
        Swift::String::Index v244 = [v239 objectForKey:v243];
        if (!v244)
        {
LABEL_237:
          unint64_t v321 = 784;
          goto LABEL_238;
        }
        uint64_t v245 = v244;
        if (_swift_isClassOrObjCExistentialType((uint64_t)&type metadata for Int, &type metadata for Int.Kind))
        {
          *(void *)&long long v374 = v243;
          swift_dynamicCast(v234, (unint64_t *)&v374, v349, (const char *)&type metadata for Int, 7uLL);
        }
        else
        {
          unint64_t v251 = v338;
          (*(void (**)(char *, uint64_t, uint64_t, ValueMetadata *))v342)(v338, 1, 1, &type metadata for Int);
          _bridgeNonVerbatimFromObjectiveC<A>(_:_:_:)((swift *)v243, (uint64_t)&type metadata for Int, v251);
          uint64_t v252 = v337;
          (*v341)(v337, v338, v350);
          if (((unsigned int (*)(Class *, uint64_t, ValueMetadata *))*v340)(v252, 1, &type metadata for Int) == 1)goto LABEL_239; {
          (*(void (**)(char *, Class *))v336)(v338, v350);
          }
          (*(void (**)(char *, Class *, ValueMetadata *))v357)(v234, v337, &type metadata for Int);
          swift_unknownObjectRelease(v243);
          char v233 = v362;
        }
        unint64_t v246 = &v234[*((int *)TupleTypeMetadata2 + 12)];
        if (_swift_isClassOrObjCExistentialType((uint64_t)v7, v7))
        {
          *(void *)&long long v374 = v245;
          swift_dynamicCast(v246, (unint64_t *)&v374, qword_1ECA06328, (const char *)v7, 7uLL);
LABEL_141:
          unint64_t v247 = TupleTypeMetadata2;
          uint64_t v248 = *(TupleTypeMetadata2 - 1);
          (*(void (**)(char *, void, uint64_t, uint64_t *))(v248 + 56))(v234, 0, 1, TupleTypeMetadata2);
LABEL_144:
          int64_t v249 = v236;
          uint64_t v250 = v106;
          while (1)
          {
            (*(void (**)(char *, char *, Class *))v358)(v75, v234, v366);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t *))(v248 + 48))(v75, 1, v247) == 1) {
              goto LABEL_171;
            }
            char v259 = v360;
            (*v356)(v360, &v75[*((int *)v247 + 12)], v7);
            unint64_t v260 = (unint64_t *)v369;
            (*(void (**)(char *, char *, ValueMetadata *))v357)(v369, v75, &type metadata for Int);
            swift_dynamicCast((char *)&v374, v260, (Class *)&type metadata for Int, (const char *)&type metadata for Int, 7uLL);
            unint64_t v261 = specialized _DictionaryCodingKey.init(intValue:)(v374);
            uint64_t v263 = v262;
            *(void *)&long long v374 = v261;
            *((void *)&v374 + 1) = v262;
            uint64_t v375 = v264;
            LOBYTE(v376) = v265 & 1;
            uint64_t v266 = v370;
            (*(void (**)(char *, long long *, uint64_t *, ValueMetadata *, uint64_t, _UNKNOWN **))(*(void *)v371[0] + 232))(v259, &v374, v7, &type metadata for _DictionaryCodingKey, v365, &protocol witness table for _DictionaryCodingKey);
            uint64_t v370 = v266;
            if (v266)
            {
              ((void (*)(char *, uint64_t *))*k)(v259, v7);
              swift_bridgeObjectRelease(v263);
LABEL_171:
              uint64_t v171 = (uint64_t *)v368;
LABEL_172:
              outlined consume of [A : B].Iterator._Variant<A, B>((uint64_t)v171);
              uint64_t v227 = v371[0];
              return swift_release(v227);
            }
            ((void (*)(char *, uint64_t *))*k)(v259, v7);
            swift_bridgeObjectRelease(v263);
            int64_t v236 = v249;
            unint64_t v106 = v250;
            uint64_t v234 = v361;
            char v233 = v362;
            uint64_t v107 = v368;
            if (v368 < 0) {
              goto LABEL_129;
            }
LABEL_149:
            if (v106)
            {
              uint64_t v250 = (v106 - 1) & v106;
              unint64_t v256 = __clz(__rbit64(v106)) | (v236 << 6);
              int64_t v249 = v236;
              goto LABEL_151;
            }
            int64_t v249 = v236 + 1;
            if (__OFADD__(v236, 1)) {
              goto LABEL_227;
            }
            if (v249 >= (uint64_t)j) {
              break;
            }
            unint64_t v258 = *(void *)&v348[8 * v249];
            if (v258)
            {
LABEL_155:
              uint64_t v250 = (v258 - 1) & v258;
              unint64_t v256 = __clz(__rbit64(v258)) + (v249 << 6);
LABEL_151:
              (*((void (**)(char *, unint64_t, ValueMetadata *))Description + 2))(v234, *(void *)(v107 + 48) + *((void *)Description + 9) * v256, &type metadata for Int);
              unint64_t v257 = *(void *)(v107 + 56) + *(void *)(v364 + 72) * v256;
              unint64_t v247 = TupleTypeMetadata2;
              (*(void (**)(char *, unint64_t, uint64_t *))(v364 + 16))(&v234[*((int *)TupleTypeMetadata2 + 12)], v257, v7);
              uint64_t v248 = *(v247 - 1);
              (*(void (**)(char *, void, uint64_t, uint64_t *))(v248 + 56))(v234, 0, 1, v247);
            }
            else
            {
              int64_t v267 = v236 + 2;
              if (v236 + 2 < (uint64_t)j)
              {
                unint64_t v258 = *(void *)&v348[8 * v267];
                if (v258)
                {
                  int64_t v249 = v236 + 2;
                  goto LABEL_155;
                }
                while (1)
                {
                  int64_t v249 = v267 + 1;
                  if (__OFADD__(v267, 1)) {
                    goto LABEL_232;
                  }
                  if (v249 >= (uint64_t)j) {
                    break;
                  }
                  unint64_t v258 = *(void *)&v348[8 * v249];
                  ++v267;
                  if (v258) {
                    goto LABEL_155;
                  }
                }
                int64_t v249 = v344;
              }
LABEL_157:
              unint64_t v247 = TupleTypeMetadata2;
              uint64_t v248 = *(TupleTypeMetadata2 - 1);
              (*(void (**)(char *, uint64_t, uint64_t, uint64_t *))(v248 + 56))(v234, 1, 1, TupleTypeMetadata2);
              uint64_t v250 = 0;
            }
          }
          int64_t v249 = v236;
          goto LABEL_157;
        }
        (*v334)(v233, 1, 1, (ValueMetadata *)v7);
        _bridgeNonVerbatimFromObjectiveC<A>(_:_:_:)(v245, (uint64_t)v7, v233);
        uint64_t v253 = v233;
        Swift::Int v254 = v335;
        int64_t v255 = v339;
        (*(void (**)(char *, char *, Class *))v333)(v335, v253, v339);
        if ((*v332)(v254, 1, (ValueMetadata *)v7) != 1)
        {
          (*(void (**)(char *, Class *))v331)(v362, v255);
          (*v356)(v246, v254, v7);
          swift_unknownObjectRelease(v245);
          goto LABEL_141;
        }
LABEL_239:
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/BridgeObjectiveC.swift", 28, 2, 0xFCuLL, 0);
      }
      v237[27] = -1;
    }
    unint64_t v247 = TupleTypeMetadata2;
    uint64_t v248 = *(TupleTypeMetadata2 - 1);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t *))(v248 + 56))(v234, 1, 1, TupleTypeMetadata2);
    goto LABEL_144;
  }
  if (swift_conformsToProtocol2((uint64_t)a3, (uint64_t)&protocol descriptor for CodingKeyRepresentable)) {
    uint64_t v81 = a3;
  }
  else {
    uint64_t v81 = 0;
  }
  unsigned int v82 = (char *)a3;
  v362 = (char *)a3;
  if (v81)
  {
    uint64_t v83 = a1[3];
    uint64_t v84 = a1[4];
    __swift_project_boxed_opaque_existential_0Tm(a1, v83);
    (*(void (**)(uint64_t *__return_ptr, ValueMetadata *, ValueMetadata *, _UNKNOWN **, uint64_t, uint64_t))(v84 + 24))(&v378, &type metadata for _DictionaryCodingKey, &type metadata for _DictionaryCodingKey, &protocol witness table for _DictionaryCodingKey, v83, v84);
    if (v79)
    {
      if (v80 < 0) {
        uint64_t v85 = v80;
      }
      else {
        uint64_t v85 = v80 & 0xFFFFFFFFFFFFFF8;
      }
      char v86 = (unint64_t *)type metadata accessor for __CocoaDictionary.Iterator();
      unint64_t v87 = (unint64_t)swift_allocObject(v86, 0xE8uLL, 7uLL);
      Swift::String::Index v338 = 0;
      uint64_t v88 = 0;
      unint64_t v89 = 0;
      *(void *)(v87 + 208) = v85;
      *(void *)(v87 + 216) = 0;
      *(_OWORD *)(v87 + 16) = 0u;
      *(_OWORD *)(v87 + 32) = 0u;
      *(_OWORD *)(v87 + 48) = 0u;
      *(_OWORD *)(v87 + 64) = 0u;
      *(_OWORD *)(v87 + 8_assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000034, 0x80000001816E2880, "Swift/Codable.swift", 19, 2, 0x11F9uLL, 0) = 0u;
      *(_OWORD *)(v87 + 96) = 0u;
      *(_OWORD *)(v87 + 112) = 0u;
      *(_OWORD *)(v87 + 128) = 0u;
      *(_OWORD *)(v87 + 144) = 0u;
      *(_OWORD *)(v87 + 16_assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000034, 0x80000001816E2880, "Swift/Codable.swift", 19, 2, 0x11F9uLL, 0) = 0u;
      *(_OWORD *)(v87 + 176) = 0u;
      *(_OWORD *)(v87 + 192) = 0u;
      *(void *)(v87 + 224) = 0;
      unint64_t v90 = v87 | 0x8000000000000000;
    }
    else
    {
      uint64_t v172 = -1 << *(unsigned char *)(v80 + 32);
      uint64_t v88 = ~v172;
      uint64_t v173 = *(void *)(v80 + 64);
      Swift::String::Index v338 = (char *)(v80 + 64);
      uint64_t v174 = -v172;
      if (v174 < 64) {
        uint64_t v175 = ~(-1 << v174);
      }
      else {
        uint64_t v175 = -1;
      }
      unint64_t v89 = v175 & v173;
      unint64_t v90 = v80;
    }
    uint64_t v176 = v370;
    unint64_t v177 = v350;
    char v178 = (char *)i;
    uint64_t v179 = v343;
    Swift::String::Index v337 = (Class *)((v90 & 0x7FFFFFFFFFFFFFFFLL) + 16);
    unint64_t v345 = (char *)(v90 & 0x7FFFFFFFFFFFFFFFLL);
    Swift::String::Index v335 = (char *)((v90 & 0x7FFFFFFFFFFFFFFFLL) + 80);
    Swift::String::Index v332 = (unsigned int (**)(char *, uint64_t, ValueMetadata *))(Description + 56);
    Swift::Int v331 = (char *)(v344 + 16);
    Swift::String::Index v330 = (unsigned int (**)(char *, uint64_t, char *))(Description + 48);
    Swift::String::Index v329 = (void (**)(Class *, void *, Class *))(v344 + 8);
    v360 = Description + 32;
    Swift::String::Index v328 = (unsigned int (**)(Class *, uint64_t, const char *))(v364 + 56);
    Swift::String::Index v327 = (void (**)(char *, Class *))(v346 + 16);
    Swift::String::Index v326 = (void (**)(Class *, uint64_t, uint64_t, uint64_t *))(v364 + 48);
    Swift::Int v325 = (void (**)(char *, Class *, Class *))(v346 + 8);
    v359 = (uint64_t *)(v364 + 32);
    uint64_t v349 = (Class *)(TupleTypeMetadata2 - 1);
    Swift::String::Index v334 = (void (**)(char *, uint64_t, uint64_t, ValueMetadata *))v88;
    int64_t v344 = (int64_t)(Description + 16);
    uint64_t v343 = (Class *)(v364 + 16);
    unint64_t v348 = (char *)(v179 + 4);
    uint64_t v347 = v364 + 8;
    uint64_t v342 = (char *)((unint64_t)(v88 + 64) >> 6);
    Swift::String::Index v333 = v342 - 1;
    swift_bridgeObjectRetain(v80);
    unint64_t v180 = 0;
    Swift::String::Index v340 = qword_1ECA06328;
    unint64_t v181 = k;
    uint64_t v346 = (uint64_t)v36;
    for (j = (char *)v90; ; unint64_t v90 = (unint64_t)j)
    {
      uint64_t v370 = v176;
      size_t v353 = (Class *)v89;
      v358 = v180;
      if ((v90 & 0x8000000000000000) == 0) {
        break;
      }
      uint64_t v194 = v345;
      uint64_t v195 = *((void *)v345 + 27);
      if (v195 < 0) {
        goto LABEL_105;
      }
      uint64_t v196 = (void *)*((void *)v345 + 26);
      if (v195 == *((void *)v345 + 28))
      {
        id v197 = [*((id *)v345 + 26) countByEnumeratingWithState:v337 objects:v335 count:16];
        uint64_t v194 = v345;
        *((void *)v345 + 28) = v197;
        if (!v197)
        {
          *((void *)v194 + 27) = -1;
LABEL_105:
          uint64_t v192 = TupleTypeMetadata2;
          uint64_t v193 = *(TupleTypeMetadata2 - 1);
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t *))(v193 + 56))(v178, 1, 1, TupleTypeMetadata2);
          unint64_t v183 = v358;
          v361 = (char *)v89;
LABEL_106:
          unint64_t v206 = (char *)v356;
          goto LABEL_107;
        }
        uint64_t v195 = 0;
        *((void *)v194 + 27) = 0;
      }
      uint64_t v198 = *((void *)v194 + 3);
      if (!v198) {
        goto LABEL_236;
      }
      if ((unint64_t)(v195 - 0x1000000000000000) >> 61 != 7) {
        goto LABEL_229;
      }
      uint64_t v199 = (void **)(v198 + 8 * v195);
      if ((v199 & 7) != 0) {
        goto LABEL_223;
      }
      uint64_t v200 = *v199;
      *((void *)v194 + 27) = v195 + 1;
      swift_unknownObjectRetain(v200);
      unint64_t v201 = (swift *)[v196 objectForKey:v200];
      if (!v201) {
        goto LABEL_237;
      }
      uint64_t v202 = v201;
      if (_swift_isClassOrObjCExistentialType((uint64_t)v82, (uint64_t *)v82))
      {
        *(void *)&long long v374 = v200;
        swift_dynamicCast(v178, (unint64_t *)&v374, v340, v82, 7uLL);
      }
      else
      {
        ((void (*)(void *, uint64_t, uint64_t, char *))*v332)(v36, 1, 1, v82);
        _bridgeNonVerbatimFromObjectiveC<A>(_:_:_:)((swift *)v200, (uint64_t)v82, v36);
        swift_unknownObjectRelease(v200);
        unint64_t v225 = v336;
        (*(void (**)(char *, void *, Class *))v331)(v336, v36, v177);
        if ((*v330)(v225, 1, v82) == 1) {
          goto LABEL_239;
        }
        ((void (*)(void *, Class *))*v329)(v36, v177);
        (*(void (**)(char *, char *, char *))v360)(v178, v225, v82);
      }
      unint64_t v203 = &v178[*((int *)TupleTypeMetadata2 + 12)];
      BOOL isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType((uint64_t)v7, v7);
      unint64_t v205 = v341;
      unint64_t v206 = (char *)v356;
      if (isClassOrObjCExistentialType)
      {
        *(void *)&long long v374 = v202;
        swift_dynamicCast(v203, (unint64_t *)&v374, qword_1ECA06328, (const char *)v7, 7uLL);
      }
      else
      {
        ((void (*)(uint64_t *, uint64_t, uint64_t, uint64_t *))*v328)(v181, 1, 1, v7);
        _bridgeNonVerbatimFromObjectiveC<A>(_:_:_:)(v202, (uint64_t)v7, v181);
        swift_unknownObjectRelease(v202);
        unint64_t v226 = v339;
        ((void (*)(void, uint64_t *, Class *))*v327)(v205, v181, v339);
        if (((unsigned int (*)(void, uint64_t, uint64_t *))*v326)(v205, 1, v7) == 1) {
          goto LABEL_239;
        }
        ((void (*)(uint64_t *, Class *))*v325)(v181, v226);
        ((void (*)(char *, void, uint64_t *))*v359)(v203, v205, v7);
      }
      uint64_t v192 = TupleTypeMetadata2;
      uint64_t v193 = *(TupleTypeMetadata2 - 1);
      (*(void (**)(char *, void, uint64_t, uint64_t *))(v193 + 56))(v178, 0, 1, TupleTypeMetadata2);
      unint64_t v183 = v358;
      v361 = (char *)v353;
LABEL_107:
      (*(void (**)(char *, char *, Class *))v348)(v206, v178, v366);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t *))(v193 + 48))(v206, 1, v192) == 1)
      {
        outlined consume of [A : B].Iterator._Variant<A, B>((uint64_t)j);
        uint64_t v227 = v378;
        return swift_release(v227);
      }
      int64_t v208 = &v206[*((int *)v192 + 12)];
      uint64_t v209 = v352;
      uint64_t v7 = (uint64_t *)v368;
      ((void (*)(void (**)(void), char *, uint64_t))*v359)(v352, v208, v368);
      unint64_t v210 = (unint64_t *)v369;
      (*(void (**)(char *, char *, char *))v360)(v369, v206, v82);
      int64_t v211 = (const char *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodingKeyRepresentable);
      swift_dynamicCast((char *)v371, v210, (Class *)v82, v211, 7uLL);
      uint64_t v212 = v372;
      uint64_t v213 = v373;
      __swift_project_boxed_opaque_existential_0Tm(v371, v372);
      (*(void (**)(long long *__return_ptr, uint64_t, uint64_t))(v213 + 8))(&v374, v212, v213);
      __swift_destroy_boxed_opaque_existential_1Tm(v371);
      outlined init with take of MirrorPath(&v374, (uint64_t)v371);
      uint64_t v214 = v372;
      uint64_t v215 = v373;
      __swift_project_boxed_opaque_existential_0Tm(v371, v372);
      uint64_t v216 = (*(uint64_t (**)(uint64_t, uint64_t))(v215 + 24))(v214, v215);
      uint64_t v218 = v217;
      uint64_t v220 = v372;
      uint64_t v219 = v373;
      __swift_project_boxed_opaque_existential_0Tm(v371, v372);
      uint64_t v221 = (*(uint64_t (**)(uint64_t, uint64_t))(v219 + 40))(v220, v219);
      LOBYTE(v219) = v222;
      __swift_destroy_boxed_opaque_existential_1Tm(v371);
      v371[0] = v216;
      v371[1] = v218;
      v371[2] = v221;
      LOBYTE(v372) = v219 & 1;
      uint64_t v223 = v370;
      (*(void (**)(void (**)(void), uint64_t *, uint64_t *, ValueMetadata *, uint64_t, _UNKNOWN **))(*(void *)v378 + 232))(v209, v371, v7, &type metadata for _DictionaryCodingKey, v365, &protocol witness table for _DictionaryCodingKey);
      uint64_t v176 = v223;
      if (v223)
      {
        (*(void (**)(void (**)(void), uint64_t *))v347)(v209, v7);
        swift_bridgeObjectRelease(v218);
        outlined consume of [A : B].Iterator._Variant<A, B>((uint64_t)j);
        return swift_release(v378);
      }
      (*(void (**)(void (**)(void), uint64_t *))v347)(v209, v7);
      swift_bridgeObjectRelease(v218);
      unint64_t v180 = v183;
      unint64_t v89 = (unint64_t)v361;
      unsigned int v82 = v362;
      unint64_t v177 = v350;
      unint64_t v181 = k;
      unint64_t v36 = (void *)v346;
      char v178 = (char *)i;
    }
    if (v89)
    {
      v361 = (char *)((v89 - 1) & v89);
      unint64_t v182 = __clz(__rbit64(v89)) | ((void)v180 << 6);
      unint64_t v183 = v180;
    }
    else
    {
      unint64_t v183 = v180 + 1;
      if (__OFADD__(v180, 1)) {
        goto LABEL_226;
      }
      if ((uint64_t)v183 >= (uint64_t)v342)
      {
        unint64_t v183 = v180;
        uint64_t v192 = TupleTypeMetadata2;
        unint64_t v206 = (char *)v356;
LABEL_103:
        uint64_t v193 = *(v192 - 1);
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t *))(v193 + 56))(v178, 1, 1, v192);
        v361 = 0;
        goto LABEL_107;
      }
      unint64_t v207 = *(void *)&v338[8 * (void)v183];
      uint64_t v192 = TupleTypeMetadata2;
      unint64_t v206 = (char *)v356;
      if (!v207)
      {
        Swift::String::Index v224 = v180 + 2;
        if ((uint64_t)(v180 + 2) >= (uint64_t)v342) {
          goto LABEL_103;
        }
        unint64_t v207 = *(void *)&v338[8 * (void)v224];
        if (!v207)
        {
          while (1)
          {
            unint64_t v183 = v224 + 1;
            if (__OFADD__(v224, 1)) {
              goto LABEL_231;
            }
            if ((uint64_t)v183 >= (uint64_t)v342) {
              break;
            }
            unint64_t v207 = *(void *)&v338[8 * (void)v183];
            ++v224;
            if (v207)
            {
              uint64_t v370 = v176;
              goto LABEL_101;
            }
          }
          uint64_t v370 = v176;
          unint64_t v183 = v333;
          goto LABEL_103;
        }
        unint64_t v183 = v180 + 2;
      }
LABEL_101:
      v361 = (char *)((v207 - 1) & v207);
      unint64_t v182 = __clz(__rbit64(v207)) + ((void)v183 << 6);
    }
    uint64_t v184 = Description;
    id v185 = v369;
    (*((void (**)(char *, unint64_t, char *))Description + 2))(v369, *(void *)(v90 + 48) + *((void *)Description + 9) * v182, v82);
    uint64_t v186 = v364;
    unint64_t v187 = *(void *)(v90 + 56) + *(void *)(v364 + 72) * v182;
    uint64_t v188 = v357;
    uint64_t v189 = v368;
    (*(void (**)(char *, unint64_t, uint64_t))(v364 + 16))(v357, v187, v368);
    unint64_t v190 = &v178[*((int *)TupleTypeMetadata2 + 12)];
    Swift::String v191 = (void (*)(char *, char *, char *))*((void *)v184 + 4);
    uint64_t v192 = TupleTypeMetadata2;
    v191(v178, v185, v82);
    (*(void (**)(char *, char *, uint64_t))(v186 + 32))(v190, v188, v189);
    uint64_t v193 = *(v192 - 1);
    (*(void (**)(char *, void, uint64_t, uint64_t *))(v193 + 56))(v178, 0, 1, v192);
    goto LABEL_106;
  }
  uint64_t v108 = a1[3];
  uint64_t v109 = a1[4];
  __swift_project_boxed_opaque_existential_0Tm(a1, v108);
  (*(void (**)(long long *__return_ptr, uint64_t, uint64_t))(v109 + 32))(&v374, v108, v109);
  if (v79)
  {
    if (v80 < 0) {
      uint64_t v110 = v80;
    }
    else {
      uint64_t v110 = v80 & 0xFFFFFFFFFFFFFF8;
    }
    uint64_t v111 = (unint64_t *)type metadata accessor for __CocoaDictionary.Iterator();
    unint64_t v112 = (unint64_t)swift_allocObject(v111, 0xE8uLL, 7uLL);
    Swift::String::Index v338 = 0;
    uint64_t v113 = 0;
    unint64_t v114 = 0;
    *(void *)(v112 + 208) = v110;
    *(void *)(v112 + 216) = 0;
    *(_OWORD *)(v112 + 16) = 0u;
    *(_OWORD *)(v112 + 32) = 0u;
    *(_OWORD *)(v112 + 48) = 0u;
    *(_OWORD *)(v112 + 64) = 0u;
    *(_OWORD *)(v112 + 8_assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000034, 0x80000001816E2880, "Swift/Codable.swift", 19, 2, 0x11F9uLL, 0) = 0u;
    *(_OWORD *)(v112 + 96) = 0u;
    *(_OWORD *)(v112 + 112) = 0u;
    *(_OWORD *)(v112 + 128) = 0u;
    *(_OWORD *)(v112 + 144) = 0u;
    *(_OWORD *)(v112 + 16_assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000034, 0x80000001816E2880, "Swift/Codable.swift", 19, 2, 0x11F9uLL, 0) = 0u;
    *(_OWORD *)(v112 + 176) = 0u;
    *(_OWORD *)(v112 + 192) = 0u;
    *(void *)(v112 + 224) = 0;
    unint64_t v115 = v112 | 0x8000000000000000;
  }
  else
  {
    uint64_t v268 = -1 << *(unsigned char *)(v80 + 32);
    uint64_t v113 = ~v268;
    uint64_t v269 = *(void *)(v80 + 64);
    Swift::String::Index v338 = (char *)(v80 + 64);
    uint64_t v270 = -v268;
    if (v270 < 64) {
      uint64_t v271 = ~(-1 << v270);
    }
    else {
      uint64_t v271 = -1;
    }
    unint64_t v114 = v271 & v269;
    unint64_t v115 = v80;
  }
  uint64_t v272 = v370;
  uint64_t v273 = v346;
  unint64_t v274 = v343;
  Swift::Int v336 = (char *)((v115 & 0x7FFFFFFFFFFFFFFFLL) + 16);
  uint64_t v346 = v115 & 0x7FFFFFFFFFFFFFFFLL;
  Swift::String::Index v335 = (char *)((v115 & 0x7FFFFFFFFFFFFFFFLL) + 80);
  Swift::String::Index v330 = (unsigned int (**)(char *, uint64_t, char *))(Description + 56);
  Swift::String::Index v329 = (void (**)(Class *, void *, Class *))(v344 + 16);
  Swift::String::Index v328 = (unsigned int (**)(Class *, uint64_t, const char *))(Description + 48);
  Swift::String::Index v327 = (void (**)(char *, Class *))(v344 + 8);
  v361 = Description + 32;
  Swift::String::Index v326 = (void (**)(Class *, uint64_t, uint64_t, uint64_t *))(v364 + 56);
  Swift::Int v325 = (void (**)(char *, Class *, Class *))(v273 + 16);
  uint64_t v324 = (unsigned int (**)(char *, uint64_t, uint64_t *))(v364 + 48);
  char v323 = (void (**)(Class *, Class *))(v273 + 8);
  v360 = (char *)(v364 + 32);
  uint64_t i = TupleTypeMetadata2 - 1;
  Swift::String::Index v332 = (unsigned int (**)(char *, uint64_t, ValueMetadata *))v113;
  int64_t v344 = (int64_t)(Description + 16);
  uint64_t v343 = (Class *)(v364 + 16);
  Swift::String v352 = (void (**)(void))(v274 + 4);
  uint64_t v349 = (Class *)(Description + 8);
  unint64_t v348 = (char *)(v364 + 8);
  Swift::Int v341 = (void (**)(Class *, char *, Class *))((unint64_t)(v113 + 64) >> 6);
  Swift::Int v331 = (char *)v341 - 1;
  swift_bridgeObjectRetain(v80);
  uint64_t v275 = 0;
  Swift::String::Index v337 = qword_1ECA06328;
  unint64_t v276 = v345;
  for (k = (uint64_t *)v115; ; unint64_t v115 = (unint64_t)k)
  {
    uint64_t v370 = v272;
    v356 = (void (**)(char *, char *, uint64_t *))v114;
    v359 = (uint64_t *)v275;
    if ((v115 & 0x8000000000000000) != 0)
    {
      uint64_t v290 = v346;
      uint64_t v291 = *(void *)(v346 + 216);
      if ((v291 & 0x8000000000000000) == 0)
      {
        unint64_t v292 = *(void **)(v346 + 208);
        if (v291 != *(void *)(v346 + 224)) {
          goto LABEL_187;
        }
        id v293 = [*(id *)(v346 + 208) countByEnumeratingWithState:v336 objects:v335 count:16];
        uint64_t v290 = v346;
        *(void *)(v346 + 224) = v293;
        if (v293)
        {
          uint64_t v291 = 0;
          *(void *)(v290 + 216) = 0;
LABEL_187:
          uint64_t v294 = *(void *)(v290 + 24);
          if (!v294) {
            goto LABEL_236;
          }
          if ((unint64_t)(v291 - 0x1000000000000000) >> 61 != 7) {
            goto LABEL_234;
          }
          uint64_t v295 = (void **)(v294 + 8 * v291);
          if ((v295 & 7) != 0) {
            goto LABEL_223;
          }
          char v296 = *v295;
          *(void *)(v290 + 216) = v291 + 1;
          swift_unknownObjectRetain(v296);
          unint64_t v297 = (swift *)[v292 objectForKey:v296];
          if (!v297) {
            goto LABEL_237;
          }
          unint64_t v298 = v297;
          if (_swift_isClassOrObjCExistentialType((uint64_t)v82, (uint64_t *)v82))
          {
            v371[0] = (uint64_t)v296;
            unint64_t v299 = v358;
            swift_dynamicCast(v358, (unint64_t *)v371, v337, v82, 7uLL);
          }
          else
          {
            Swift::String::Index v317 = v333;
            ((void (*)(char *, uint64_t, uint64_t, char *))*v330)(v333, 1, 1, v82);
            _bridgeNonVerbatimFromObjectiveC<A>(_:_:_:)((swift *)v296, (uint64_t)v82, v317);
            swift_unknownObjectRelease(v296);
            size_t v318 = v334;
            Swift::String::Index v319 = v350;
            (*v329)((Class *)v334, v317, v350);
            if ((*v328)((Class *)v318, 1, v82) == 1) {
              goto LABEL_239;
            }
            (*v327)(v317, v319);
            unint64_t v299 = v358;
            (*(void (**)(char *, void (**)(char *, uint64_t, uint64_t, ValueMetadata *), char *))v361)(v358, v318, v82);
          }
          unint64_t v300 = &v299[*((int *)TupleTypeMetadata2 + 12)];
          BOOL v301 = _swift_isClassOrObjCExistentialType((uint64_t)v7, v7);
          char v302 = v342;
          uint64_t v303 = v340;
          if (v301)
          {
            v371[0] = (uint64_t)v298;
            swift_dynamicCast(v300, (unint64_t *)v371, qword_1ECA06328, (const char *)v7, 7uLL);
          }
          else
          {
            (*v326)(v340, 1, 1, v7);
            _bridgeNonVerbatimFromObjectiveC<A>(_:_:_:)(v298, (uint64_t)v7, v303);
            swift_unknownObjectRelease(v298);
            unint64_t v320 = v339;
            (*v325)(v302, v303, v339);
            if ((*v324)(v302, 1, v7) == 1) {
              goto LABEL_239;
            }
            (*v323)(v303, v320);
            (*(void (**)(char *, char *, uint64_t *))v360)(v300, v302, v7);
          }
          unint64_t v288 = TupleTypeMetadata2;
          uint64_t v289 = *(TupleTypeMetadata2 - 1);
          (*(void (**)(char *, void, uint64_t, uint64_t *))(v289 + 56))(v358, 0, 1, TupleTypeMetadata2);
          uint64_t v279 = (uint64_t)v359;
          goto LABEL_204;
        }
        *(void *)(v290 + 216) = -1;
      }
      unint64_t v288 = TupleTypeMetadata2;
      uint64_t v289 = *(TupleTypeMetadata2 - 1);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t *))(v289 + 56))(v358, 1, 1, TupleTypeMetadata2);
      uint64_t v279 = v275;
    }
    else
    {
      if (v114)
      {
        unint64_t v277 = __clz(__rbit64(v114));
        v114 &= v114 - 1;
        unint64_t v278 = v277 | (v275 << 6);
        uint64_t v279 = v275;
      }
      else
      {
        uint64_t v279 = v275 + 1;
        if (__OFADD__(v275, 1)) {
          goto LABEL_233;
        }
        if (v279 >= (uint64_t)v341)
        {
          uint64_t v279 = v275;
          unint64_t v288 = TupleTypeMetadata2;
          unint64_t v305 = v353;
          unint64_t v306 = v358;
LABEL_201:
          uint64_t v289 = *(v288 - 1);
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t *))(v289 + 56))(v306, 1, 1, v288);
          unint64_t v114 = 0;
          goto LABEL_205;
        }
        unint64_t v304 = *(void *)&v338[8 * v279];
        unint64_t v288 = TupleTypeMetadata2;
        unint64_t v305 = v353;
        unint64_t v306 = v358;
        if (!v304)
        {
          uint64_t v316 = v279 + 1;
          if (v279 + 1 >= (uint64_t)v341) {
            goto LABEL_201;
          }
          unint64_t v304 = *(void *)&v338[8 * v316];
          if (!v304)
          {
            while (1)
            {
              uint64_t v279 = v316 + 1;
              if (__OFADD__(v316, 1)) {
                goto LABEL_235;
              }
              if (v279 >= (uint64_t)v341) {
                break;
              }
              unint64_t v304 = *(void *)&v338[8 * v279];
              ++v316;
              if (v304)
              {
                uint64_t v370 = v272;
                goto LABEL_199;
              }
            }
            uint64_t v370 = v272;
            uint64_t v279 = (uint64_t)v331;
            goto LABEL_201;
          }
          ++v279;
        }
LABEL_199:
        unint64_t v114 = (v304 - 1) & v304;
        unint64_t v278 = __clz(__rbit64(v304)) + (v279 << 6);
      }
      char v280 = Description;
      (*((void (**)(char *, unint64_t, char *))Description + 2))(v369, *(void *)(v115 + 48) + *((void *)Description + 9) * v278, v362);
      uint64_t v281 = v364;
      unint64_t v282 = *(void *)(v115 + 56) + *(void *)(v364 + 72) * v278;
      char v283 = v357;
      uint64_t v284 = v368;
      (*(void (**)(char *, unint64_t, uint64_t))(v364 + 16))(v357, v282, v368);
      unint64_t v285 = &v358[*((int *)TupleTypeMetadata2 + 12)];
      unint64_t v286 = (void (*)(void))*((void *)v280 + 4);
      unint64_t v287 = v358;
      unint64_t v288 = TupleTypeMetadata2;
      v286();
      (*(void (**)(char *, char *, uint64_t))(v281 + 32))(v285, v283, v284);
      uint64_t v289 = *(v288 - 1);
      (*(void (**)(char *, void, uint64_t, uint64_t *))(v289 + 56))(v287, 0, 1, v288);
      unint64_t v276 = v345;
    }
LABEL_204:
    unint64_t v305 = v353;
LABEL_205:
    unint64_t v307 = j;
    (*v352)();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t *))(v289 + 48))(v307, 1, v288) == 1) {
      goto LABEL_222;
    }
    uint64_t v308 = &v307[*((int *)v288 + 12)];
    id v309 = v276;
    uint64_t v310 = v362;
    (*(void (**)(Class *, char *, char *))v361)(v305, v307, v362);
    uint64_t v7 = (uint64_t *)v368;
    (*(void (**)(char *, char *, uint64_t))v360)(v309, v308, v368);
    unint64_t v312 = v376;
    uint64_t v311 = v377;
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t *)&v374, v376);
    uint64_t v313 = v370;
    (*(void (**)(Class *, char *, uint64_t, unint64_t, uint64_t))(v311 + 160))(v305, v310, v347, v312, v311);
    uint64_t v272 = v313;
    if (v313) {
      break;
    }
    ((void (*)(Class *, char *))*v349)(v305, v310);
    unint64_t v314 = v376;
    uint64_t v315 = v377;
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t *)&v374, v376);
    (*(void (**)(char *, uint64_t *, uint64_t, unint64_t, uint64_t))(v315 + 160))(v309, v7, v365, v314, v315);
    unint64_t v276 = v309;
    (*(void (**)(char *, uint64_t *))v348)(v309, v7);
    uint64_t v275 = v279;
    unsigned int v82 = v362;
  }
  (*(void (**)(char *, uint64_t *))v348)(v309, v7);
  ((void (*)(Class *, char *))*v349)(v305, v310);
LABEL_222:
  outlined consume of [A : B].Iterator._Variant<A, B>((uint64_t)k);
  return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t *)&v374);
}

int64_t Dictionary.makeIterator()@<X0>(int64_t result@<X0>, int64_t *a2@<X8>)
{
  if ((result & 0xC000000000000001) != 0)
  {
    if (result < 0) {
      uint64_t v3 = result;
    }
    else {
      uint64_t v3 = result & 0xFFFFFFFFFFFFFF8;
    }
    uint64_t v4 = (unint64_t *)type metadata accessor for __CocoaDictionary.Iterator();
    unint64_t v5 = (unint64_t)swift_allocObject(v4, 0xE8uLL, 7uLL);
    int64_t v6 = 0;
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    *(void *)(v5 + 208) = v3;
    *(void *)(v5 + 216) = 0;
    *(_OWORD *)(v5 + 16) = 0u;
    *(_OWORD *)(v5 + 32) = 0u;
    *(_OWORD *)(v5 + 48) = 0u;
    *(_OWORD *)(v5 + 64) = 0u;
    *(_OWORD *)(v5 + 8_assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000034, 0x80000001816E2880, "Swift/Codable.swift", 19, 2, 0x11F9uLL, 0) = 0u;
    *(_OWORD *)(v5 + 96) = 0u;
    *(_OWORD *)(v5 + 112) = 0u;
    *(_OWORD *)(v5 + 128) = 0u;
    *(_OWORD *)(v5 + 144) = 0u;
    *(_OWORD *)(v5 + 16_assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000034, 0x80000001816E2880, "Swift/Codable.swift", 19, 2, 0x11F9uLL, 0) = 0u;
    *(_OWORD *)(v5 + 176) = 0u;
    *(_OWORD *)(v5 + 192) = 0u;
    *(void *)(v5 + 224) = 0;
    uint64_t result = v5 | 0x8000000000000000;
  }
  else
  {
    uint64_t v9 = -1;
    uint64_t v10 = -1 << *(unsigned char *)(result + 32);
    int64_t v6 = result + 64;
    uint64_t v7 = ~v10;
    uint64_t v11 = -v10;
    if (v11 < 64) {
      uint64_t v9 = ~(-1 << v11);
    }
    uint64_t v8 = v9 & *(void *)(result + 64);
  }
  *a2 = result;
  a2[1] = v6;
  a2[2] = v7;
  a2[3] = 0;
  a2[4] = v8;
  return result;
}

uint64_t Dictionary.Iterator.next()@<X0>(uint64_t result@<X0>, char *a2@<X8>)
{
  uint64_t v3 = result;
  uint64_t v5 = *v2;
  if (*v2 < 0)
  {
    uint64_t v18 = *(char **)(result + 16);
    uint64_t v17 = *(char **)(result + 24);
    id v19 = __CocoaDictionary.Iterator.next()();
    if (v19)
    {
      uint64_t v22 = v19;
      uint64_t v23 = v20;
      _forceBridgeFromObjectiveC<A>(_:_:)(v19, v18, v21, a2);
      swift_unknownObjectRelease(v22);
      TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0, (uint64_t)v18, (uint64_t)v17, "key value ", 0);
      _forceBridgeFromObjectiveC<A>(_:_:)(v23, v17, v25, &a2[*((int *)TupleTypeMetadata2 + 12)]);
      swift_unknownObjectRelease(v23);
      uint64_t v26 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t *))(*(TupleTypeMetadata2 - 1) + 56);
      uint64_t v27 = a2;
      uint64_t v28 = 0;
      uint64_t v29 = TupleTypeMetadata2;
    }
    else
    {
      uint64_t v34 = swift_getTupleTypeMetadata2(0, (uint64_t)v18, (uint64_t)v17, "key value ", 0);
      uint64_t v26 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t *))(*(v34 - 1) + 56);
      uint64_t v29 = v34;
      uint64_t v27 = a2;
      uint64_t v28 = 1;
    }
    return v26(v27, v28, 1, v29);
  }
  else
  {
    uint64_t v7 = v2[1];
    uint64_t v6 = v2[2];
    int64_t v9 = v2[3];
    unint64_t v8 = v2[4];
    if (v8)
    {
      uint64_t v36 = v2[2];
      uint64_t v10 = (v8 - 1) & v8;
      unint64_t v11 = __clz(__rbit64(v8)) | (v9 << 6);
LABEL_4:
      uint64_t v12 = *(void *)(result + 16);
      (*(void (**)(char *, unint64_t, uint64_t))(*(void *)(v12 - 8) + 16))(a2, *(void *)(v5 + 48) + *(void *)(*(void *)(v12 - 8) + 72) * v11, v12);
      uint64_t v13 = *(void *)(v3 + 24);
      uint64_t v14 = *(void *)(v13 - 8);
      unint64_t v15 = *(void *)(v5 + 56) + *(void *)(v14 + 72) * v11;
      uint64_t v16 = swift_getTupleTypeMetadata2(0, v12, v13, "key value ", 0);
      (*(void (**)(char *, unint64_t, uint64_t))(v14 + 16))(&a2[*((int *)v16 + 12)], v15, v13);
      uint64_t result = (*(uint64_t (**)(char *, void, uint64_t, uint64_t *))(*(v16 - 1) + 56))(a2, 0, 1, v16);
      uint64_t v6 = v36;
LABEL_21:
      *uint64_t v2 = v5;
      v2[1] = v7;
      v2[2] = v6;
      v2[3] = v9;
      v2[4] = v10;
      return result;
    }
    int64_t v30 = v9 + 1;
    if (!__OFADD__(v9, 1))
    {
      int64_t v31 = (unint64_t)(v6 + 64) >> 6;
      if (v30 < v31)
      {
        unint64_t v32 = *(void *)(v7 + 8 * v30);
        if (v32)
        {
LABEL_14:
          uint64_t v36 = v2[2];
          uint64_t v10 = (v32 - 1) & v32;
          unint64_t v11 = __clz(__rbit64(v32)) + (v30 << 6);
          int64_t v9 = v30;
          goto LABEL_4;
        }
        int64_t v33 = v9 + 2;
        while (v31 != v33)
        {
          unint64_t v32 = *(void *)(v7 + 8 * v33++);
          if (v32)
          {
            int64_t v30 = v33 - 1;
            goto LABEL_14;
          }
        }
        int64_t v9 = v31 - 1;
      }
      uint64_t v35 = swift_getTupleTypeMetadata2(0, *(void *)(result + 16), *(void *)(result + 24), "key value ", 0);
      uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t *))(*(v35 - 1) + 56))(a2, 1, 1, v35);
      uint64_t v10 = 0;
      goto LABEL_21;
    }
    __break(1u);
  }
  return result;
}

uint64_t Dictionary<>.init(from:)(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7 = v6;
  uint64_t v320 = a6;
  uint64_t v323 = a5;
  uint64_t v8 = a4;
  Swift::Int v331 = a3;
  uint64_t v10 = (ValueMetadata *)a2;
  uint64_t v12 = type metadata accessor for Optional(0, a2, (uint64_t)a3, a4);
  uint64_t v13 = (uint64_t)*(v12 - 1);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v313 = (char *)&v291 - v15;
  Description = (char *)v10[-1].Description;
  uint64_t v16 = MEMORY[0x1F4188790](v14);
  uint64_t v17 = MEMORY[0x1F4188790](v16);
  uint64_t v18 = MEMORY[0x1F4188790](v17);
  Swift::String::Index v319 = (__objc2_class *)((char *)&v291 - v19);
  uint64_t v20 = MEMORY[0x1F4188790](v18);
  uint64_t v22 = (char *)&v291 - v21;
  uint64_t v23 = MEMORY[0x1F4188790](v20);
  uint64_t v321 = (uint64_t)&v291 - v24;
  uint64_t v25 = MEMORY[0x1F4188790](v23);
  uint64_t v314 = (uint64_t)&v291 - v26;
  uint64_t v27 = MEMORY[0x1F4188790](v25);
  uint64_t v322 = *(a3 - 1);
  uint64_t v28 = MEMORY[0x1F4188790](v27);
  uint64_t v29 = MEMORY[0x1F4188790](v28);
  int64_t v31 = (char *)&v291 - v30;
  MEMORY[0x1F4188790](v29);
  uint64_t v33 = MEMORY[0x1F4188790]((char *)&v291 - v32);
  Swift::String::Index v317 = (char **)((char *)&v291 - v34);
  uint64_t v35 = MEMORY[0x1F4188790](v33);
  uint64_t v37 = (char *)&v291 - v36;
  uint64_t v38 = MEMORY[0x1F4188790](v35);
  uint64_t v40 = (char *)&v291 - v39;
  uint64_t v41 = MEMORY[0x1F4188790](v38);
  uint64_t v315 = (char *)&v291 - v42;
  uint64_t v43 = MEMORY[0x1F4188790](v41);
  uint64_t v44 = MEMORY[0x1F4188790](v43);
  uint64_t v45 = MEMORY[0x1F4188790](v44);
  uint64_t v46 = MEMORY[0x1F4188790](v45);
  uint64_t v47 = MEMORY[0x1F4188790](v46);
  if (v10 == &type metadata for String)
  {
    uint64_t v313 = (char *)&v291 - v53;
    uint64_t v312 = v52;
    Swift::String::Index v319 = v51;
    uint64_t v321 = (uint64_t)v48;
    uint64_t v71 = a1[3];
    uint64_t v72 = a1[4];
    __swift_project_boxed_opaque_existential_0Tm(a1, v71);
    uint64_t v73 = (*(void *(**)(long long *__return_ptr, ValueMetadata *, ValueMetadata *, _UNKNOWN **, uint64_t, uint64_t))(v72 + 24))(&v327, &type metadata for _DictionaryCodingKey, &type metadata for _DictionaryCodingKey, &protocol witness table for _DictionaryCodingKey, v71, v72);
    uint64_t v74 = v7;
    if (v7) {
      goto LABEL_87;
    }
    unint64_t v307 = a1;
    uint64_t v75 = *(uint64_t (**)(void *))(*(void *)v327 + 96);
    uint64_t v311 = (char *)v327;
    uint64_t v76 = v75(v73);
    p_isa = specialized _arrayForceCast<A, B>(_:)(v76);
    swift_bridgeObjectRelease(v76);
    uint64_t v310 = p_isa[2];
    if (!v310)
    {
      uint64_t v7 = (uint64_t)&_swiftEmptyDictionarySingleton;
LABEL_94:
      swift_bridgeObjectRelease((uint64_t)p_isa);
      unint64_t v207 = &v333;
      goto LABEL_100;
    }
    uint64_t v78 = 0;
    uint64_t v315 = (char *)(v322 + 32);
    unint64_t v306 = (void (**)(uint64_t, ValueMetadata *))(Description + 16);
    unint64_t v305 = Description + 32;
    unint64_t v304 = (char *)(v322 + 40);
    uint64_t v308 = Description + 8;
    unint64_t v79 = (char **)(p_isa + 7);
    uint64_t v7 = (uint64_t)&_swiftEmptyDictionarySingleton;
    int64_t v80 = v331;
    id v309 = (__objc2_class *)p_isa;
    while (1)
    {
      if (v78 >= (char *)p_isa[2]) {
LABEL_178:
      }
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Index out of range", 18, 2, "Swift/ContiguousArrayBuffer.swift", 33, 2, 0x2A3uLL, 0);
      Swift::String::Index v317 = v79;
      size_t v318 = v78;
      uint64_t v81 = v7;
      uint64_t v82 = (uint64_t)*(v79 - 3);
      unint64_t v83 = (unint64_t)*(v79 - 2);
      char v84 = *(unsigned char *)v79;
      uint64_t v85 = (uint64_t)*(v79 - 1);
      *(void *)&long long v327 = v82;
      *((void *)&v327 + 1) = v83;
      *(void *)&long long v328 = v85;
      BYTE8(v328) = v84;
      char v86 = *(void (**)(uint64_t *, long long *, uint64_t *, ValueMetadata *, uint64_t, _UNKNOWN **))(*(void *)v311 + 248);
      swift_bridgeObjectRetain(v83);
      uint64_t v7 = (uint64_t)v313;
      v86(v80, &v327, v80, &type metadata for _DictionaryCodingKey, v320, &protocol witness table for _DictionaryCodingKey);
      if (v74)
      {
        swift_release((uint64_t)v311);
        swift_bridgeObjectRelease(v83);
        swift_bridgeObjectRelease(v81);
        swift_bridgeObjectRelease((uint64_t)v309);
        a1 = v307;
        goto LABEL_88;
      }
      *(void *)&long long v327 = v82;
      *((void *)&v327 + 1) = v83;
      unint64_t v87 = (char *)v321;
      swift_dynamicCast((char *)v321, (unint64_t *)&v327, (Class *)&type metadata for String, (const char *)&type metadata for String, 7uLL);
      uint64_t v88 = *(void (**)(__objc2_class *, uint64_t, uint64_t *))v315;
      uint64_t v89 = v312;
      (*(void (**)(uint64_t, uint64_t, uint64_t *))v315)(v312, v7, v80);
      v88(v319, v89, v80);
      uint64_t v324 = 0;
      if ((v81 & 0xC000000000000001) != 0)
      {
        if (v81 < 0) {
          unint64_t v90 = (void *)v81;
        }
        else {
          unint64_t v90 = (void *)(v81 & 0xFFFFFFFFFFFFFF8);
        }
        id v91 = [v90 count];
        if (__OFADD__(v91, 1)) {
          goto LABEL_180;
        }
        uint64_t v92 = v323;
        uint64_t v81 = (uint64_t)_NativeDictionary.init(_:capacity:)(v90, (uint64_t)v91 + 1, (char *)&type metadata for String, v80, v323);
      }
      else
      {
        uint64_t v92 = v323;
      }
      Swift::Bool isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v81);
      v325[0] = v81;
      unint64_t v94 = __RawDictionaryStorage.find<A>(_:)((uint64_t)v87, (uint64_t)&type metadata for String, v92);
      uint64_t v96 = *(void *)(v81 + 16);
      BOOL v97 = (v95 & 1) == 0;
      Swift::Int v98 = v96 + v97;
      if (__OFADD__(v96, v97))
      {
        __break(1u);
LABEL_180:
        __break(1u);
LABEL_181:
        __break(1u);
LABEL_182:
        __break(1u);
LABEL_183:
        __break(1u);
LABEL_184:
        __break(1u);
LABEL_185:
        __break(1u);
LABEL_186:
        __break(1u);
LABEL_187:
        __break(1u);
LABEL_188:
        __break(1u);
LABEL_189:
        __break(1u);
LABEL_190:
        __break(1u);
LABEL_191:
        _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeBufferPointer with negative count", 39, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x53FuLL, 0);
      }
      char v99 = v95;
      if (*(void *)(v81 + 24) >= v98)
      {
        unint64_t v104 = v94;
        int64_t v80 = v331;
        if (!isUniquelyReferenced_nonNull_native)
        {
          type metadata accessor for _NativeDictionary(0, (uint64_t)&type metadata for String, (uint64_t)v331, v323);
          _NativeDictionary.copy()();
          int64_t v80 = v331;
        }
        uint64_t v101 = v321;
        uint64_t v7 = v325[0];
        if (v99)
        {
LABEL_16:
          (*(void (**)(unint64_t, __objc2_class *, uint64_t *))(v322 + 40))(*(void *)(v7 + 56) + *(void *)(v322 + 72) * v104, v319, v80);
          goto LABEL_17;
        }
      }
      else
      {
        uint64_t v100 = v323;
        type metadata accessor for _NativeDictionary(0, (uint64_t)&type metadata for String, (uint64_t)v331, v323);
        _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v98, isUniquelyReferenced_nonNull_native);
        uint64_t v101 = v321;
        unint64_t v102 = __RawDictionaryStorage.find<A>(_:)(v321, (uint64_t)&type metadata for String, v100);
        if ((v99 & 1) != (v103 & 1)) {
          KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)((unint64_t)&type metadata for String);
        }
        unint64_t v104 = v102;
        int64_t v80 = v331;
        uint64_t v7 = v325[0];
        if (v99) {
          goto LABEL_16;
        }
      }
      uint64_t v105 = (void (**)(unint64_t, uint64_t, ValueMetadata *))Description;
      uint64_t v106 = v101;
      uint64_t v107 = v314;
      (*((void (**)(uint64_t, uint64_t, ValueMetadata *))Description + 2))(v314, v106, &type metadata for String);
      *(void *)(v7 + 8 * (v104 >> 6) + 64) |= 1 << v104;
      v105[4](*(void *)(v7 + 48) + (void)v105[9] * v104, v107, &type metadata for String);
      v88((__objc2_class *)(*(void *)(v7 + 56) + *(void *)(v322 + 72) * v104), (uint64_t)v319, v80);
      uint64_t v108 = *(void *)(v7 + 16);
      BOOL v109 = __OFADD__(v108, 1);
      uint64_t v110 = v108 + 1;
      if (v109) {
        goto LABEL_181;
      }
      *(void *)(v7 + 16) = v110;
      uint64_t v101 = v321;
LABEL_17:
      uint64_t v78 = v318 + 1;
      swift_bridgeObjectRelease(0x8000000000000000);
      (*(void (**)(uint64_t, ValueMetadata *))v308)(v101, &type metadata for String);
      unint64_t v79 = v317 + 4;
      uint64_t v74 = v324;
      p_isa = &v309->isa;
      if (v310 == (__objc2_class *)v78) {
        goto LABEL_94;
      }
    }
  }
  if (v10 == &type metadata for Int)
  {
    uint64_t v312 = v50;
    uint64_t v311 = (char *)v49;
    uint64_t v161 = a1[3];
    uint64_t v162 = a1[4];
    __swift_project_boxed_opaque_existential_0Tm(a1, v161);
    unint64_t v163 = (*(void *(**)(long long *__return_ptr, ValueMetadata *, ValueMetadata *, _UNKNOWN **, uint64_t, uint64_t))(v162 + 24))(&v327, &type metadata for _DictionaryCodingKey, &type metadata for _DictionaryCodingKey, &protocol witness table for _DictionaryCodingKey, v161, v162);
    uint64_t v164 = v7;
    if (v7) {
      goto LABEL_87;
    }
    unint64_t v307 = a1;
    unint64_t v165 = *(uint64_t (**)(void *))(*(void *)v327 + 96);
    uint64_t v310 = (__objc2_class *)v327;
    uint64_t v166 = v165(v163);
    unsigned int v167 = specialized _arrayForceCast<A, B>(_:)(v166);
    swift_bridgeObjectRelease(v166);
    id v309 = v167[2];
    if (!v309)
    {
      uint64_t v7 = (uint64_t)&_swiftEmptyDictionarySingleton;
LABEL_99:
      swift_bridgeObjectRelease((uint64_t)v167);
      unint64_t v207 = &v332;
      goto LABEL_100;
    }
    uint64_t v168 = 0;
    Swift::String::Index v317 = (char **)(v322 + 32);
    unint64_t v305 = Description + 16;
    unint64_t v304 = Description + 32;
    uint64_t v303 = v322 + 40;
    unint64_t v306 = (void (**)(uint64_t, ValueMetadata *))(Description + 8);
    uint64_t v169 = (char *)(v167 + 7);
    uint64_t v7 = (uint64_t)&_swiftEmptyDictionarySingleton;
    uint64_t v170 = v331;
    uint64_t v308 = (char *)v167;
    while (1)
    {
      if (v168 >= v167[2]) {
        goto LABEL_178;
      }
      uint64_t v172 = *((void *)v169 - 3);
      unint64_t v171 = *((void *)v169 - 2);
      uint64_t v173 = *((void *)v169 - 1);
      if (*v169)
      {
        uint64_t v222 = *((void *)v169 - 1);
        swift_bridgeObjectRetain(*((void *)v169 - 2));
        swift_bridgeObjectRelease((uint64_t)v167);
        swift_release((uint64_t)v310);
        swift_bridgeObjectRelease(v7);
        a1 = v307;
        uint64_t v223 = v307[3];
        uint64_t v224 = v307[4];
        __swift_project_boxed_opaque_existential_0Tm(v307, v223);
        uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t))(v224 + 8))(v223, v224);
        if (!swift_isUniquelyReferenced_nonNull_native(v7)) {
          uint64_t v7 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v7 + 16) + 1, 1, v7, &demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>, &demangling cache variable for type metadata for CodingKey);
        }
        unint64_t v226 = *(void *)(v7 + 16);
        unint64_t v225 = *(void *)(v7 + 24);
        if (v226 >= v225 >> 1) {
          uint64_t v7 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((__objc2_class **)(v225 > 1), v226 + 1, 1, v7, &demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>, &demangling cache variable for type metadata for CodingKey);
        }
        *((void *)&v328 + 1) = &type metadata for _DictionaryCodingKey;
        Swift::String::Index v329 = &protocol witness table for _DictionaryCodingKey;
        uint64_t v227 = swift_allocObject(qword_1EC9F2910, 0x29uLL, 7uLL);
        *(void *)&long long v327 = v227;
        v227[2] = v172;
        v227[3] = v171;
        v227[4] = v222;
        *((unsigned char *)v227 + 4_assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000034, 0x80000001816E2880, "Swift/Codable.swift", 19, 2, 0x11F9uLL, 0) = 1;
        *(void *)(v7 + 16) = v226 + 1;
        outlined init with take of MirrorPath(&v327, v7 + 40 * v226 + 32);
        swift_allocError((uint64_t)&type metadata for DecodingError, (uint64_t)&protocol witness table for DecodingError, 0, 0);
        *(void *)uint64_t v228 = &type metadata for Int;
        *(void *)(v228 + 8) = v7;
        *(void *)(v228 + 16) = 0xD00000000000002ELL;
        *(void *)(v228 + 24) = 0x80000001816DD7F0 | 0x8000000000000000;
        *(void *)(v228 + 32) = 0;
        *(unsigned char *)(v228 + 72) = 0;
        swift_willThrow();
        goto LABEL_88;
      }
      size_t v318 = v169;
      Swift::String::Index v319 = v168;
      uint64_t v174 = v307;
      *(void *)&long long v327 = v172;
      *((void *)&v327 + 1) = v171;
      *(void *)&long long v328 = v173;
      BYTE8(v328) = 0;
      superclass = v310->isa[6].superclass;
      swift_bridgeObjectRetain(v171);
      uint64_t v176 = v312;
      ((void (*)(uint64_t *, long long *, uint64_t *, ValueMetadata *, uint64_t, _UNKNOWN **))superclass)(v170, &v327, v170, &type metadata for _DictionaryCodingKey, v320, &protocol witness table for _DictionaryCodingKey);
      if (v164)
      {
        swift_release((uint64_t)v310);
        swift_bridgeObjectRelease(v171);
        swift_bridgeObjectRelease(v7);
        swift_bridgeObjectRelease((uint64_t)v308);
        a1 = v174;
        goto LABEL_88;
      }
      swift_bridgeObjectRelease(v171);
      *(void *)&long long v327 = v173;
      swift_dynamicCast((char *)v321, (unint64_t *)&v327, (Class *)&type metadata for Int, (const char *)&type metadata for Int, 7uLL);
      unint64_t v177 = *v317;
      uint64_t v178 = (uint64_t)v311;
      ((void (*)(char *, uint64_t, uint64_t *))*v317)(v311, v176, v170);
      uint64_t v313 = v177;
      ((void (*)(char *, uint64_t, uint64_t *))v177)(v315, v178, v170);
      uint64_t v324 = 0;
      if ((v7 & 0xC000000000000001) != 0)
      {
        if (v7 >= 0) {
          v7 &= 0xFFFFFFFFFFFFFF8uLL;
        }
        id v179 = [v7 count];
        uint64_t v180 = v323;
        if (__OFADD__(v179, 1)) {
          goto LABEL_185;
        }
        uint64_t v7 = (uint64_t)_NativeDictionary.init(_:capacity:)((void *)v7, (uint64_t)v179 + 1, (char *)&type metadata for Int, v331, v323);
      }
      else
      {
        uint64_t v180 = v323;
      }
      Swift::Bool v181 = swift_isUniquelyReferenced_nonNull_native(v7);
      v325[0] = v7;
      unint64_t v182 = __RawDictionaryStorage.find<A>(_:)(v321, (uint64_t)&type metadata for Int, v180);
      uint64_t v184 = *(void *)(v7 + 16);
      BOOL v185 = (v183 & 1) == 0;
      Swift::Int v186 = v184 + v185;
      if (__OFADD__(v184, v185)) {
        goto LABEL_183;
      }
      char v187 = v183;
      if (*(void *)(v7 + 24) >= v186)
      {
        unint64_t v191 = v182;
        uint64_t v170 = v331;
        if (!v181)
        {
          type metadata accessor for _NativeDictionary(0, (uint64_t)&type metadata for Int, (uint64_t)v331, v323);
          _NativeDictionary.copy()();
          uint64_t v170 = v331;
        }
        uint64_t v164 = v324;
        uint64_t v7 = v325[0];
        if (v187)
        {
LABEL_65:
          (*(void (**)(unint64_t, char *, uint64_t *))(v322 + 40))(*(void *)(v7 + 56) + *(void *)(v322 + 72) * v191, v315, v170);
          goto LABEL_66;
        }
      }
      else
      {
        uint64_t v188 = v323;
        type metadata accessor for _NativeDictionary(0, (uint64_t)&type metadata for Int, (uint64_t)v331, v323);
        _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v186, v181);
        unint64_t v189 = __RawDictionaryStorage.find<A>(_:)(v321, (uint64_t)&type metadata for Int, v188);
        if ((v187 & 1) != (v190 & 1)) {
          KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)((unint64_t)&type metadata for Int);
        }
        unint64_t v191 = v189;
        uint64_t v164 = v324;
        uint64_t v170 = v331;
        uint64_t v7 = v325[0];
        if (v187) {
          goto LABEL_65;
        }
      }
      uint64_t v192 = (void (**)(unint64_t, uint64_t, ValueMetadata *))Description;
      uint64_t v193 = v314;
      (*((void (**)(uint64_t, uint64_t, ValueMetadata *))Description + 2))(v314, v321, &type metadata for Int);
      *(void *)(v7 + 8 * (v191 >> 6) + 64) |= 1 << v191;
      v192[4](*(void *)(v7 + 48) + (void)v192[9] * v191, v193, &type metadata for Int);
      ((void (*)(unint64_t, char *, uint64_t *))v313)(*(void *)(v7 + 56) + *(void *)(v322 + 72) * v191, v315, v170);
      uint64_t v194 = *(void *)(v7 + 16);
      BOOL v109 = __OFADD__(v194, 1);
      uint64_t v195 = v194 + 1;
      if (v109) {
        goto LABEL_187;
      }
      *(void *)(v7 + 16) = v195;
LABEL_66:
      uint64_t v168 = (__objc2_class *)((char *)&v319->isa + 1);
      swift_bridgeObjectRelease(0x8000000000000000);
      (*v306)(v321, &type metadata for Int);
      uint64_t v169 = v318 + 32;
      unsigned int v167 = (__objc2_class **)v308;
      if (v309 == v168) {
        goto LABEL_99;
      }
    }
  }
  uint64_t v312 = v47;
  uint64_t v311 = v31;
  uint64_t v314 = v56;
  uint64_t v315 = v54;
  uint64_t v321 = (uint64_t)v55;
  uint64_t v57 = swift_conformsToProtocol2((uint64_t)v10, (uint64_t)&protocol descriptor for CodingKeyRepresentable);
  if (v57) {
    uint64_t v58 = v57;
  }
  else {
    uint64_t v58 = 0;
  }
  if (v57) {
    uint64_t v59 = v10;
  }
  else {
    uint64_t v59 = 0;
  }
  size_t v318 = (char *)v10;
  if (!v59)
  {
    uint64_t v196 = a1[3];
    uint64_t v197 = a1[4];
    __swift_project_boxed_opaque_existential_0Tm(a1, v196);
    (*(void (**)(long long *__return_ptr, uint64_t, uint64_t))(v197 + 32))(&v327, v196, v197);
    uint64_t v198 = v7;
    if (v7) {
      goto LABEL_87;
    }
    uint64_t v199 = *((void *)&v328 + 1);
    uint64_t v200 = v329;
    __swift_project_boxed_opaque_existential_0Tm(&v327, *((uint64_t *)&v328 + 1));
    char v201 = ((uint64_t (*)(uint64_t, _UNKNOWN **))v200[2])(v199, v200);
    if (v202 & 1) == 0 && (v201)
    {
      swift_bridgeObjectRelease((uint64_t)&_swiftEmptyDictionarySingleton);
      swift_allocError((uint64_t)&type metadata for DecodingError, (uint64_t)&protocol witness table for DecodingError, 0, 0);
      uint64_t v7 = v203;
      uint64_t v204 = a1[3];
      uint64_t v205 = a1[4];
      __swift_project_boxed_opaque_existential_0Tm(a1, v204);
      *(void *)uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t))(v205 + 8))(v204, v205);
      *(void *)(v7 + 8) = 0xD00000000000004DLL;
      unint64_t v206 = "Expected collection of key-value pairs; encountered odd-length array instead.";
LABEL_92:
      *(void *)(v7 + 16) = (unint64_t)(v206 + 0x7FFFFFFFFFFFFFE0) | 0x8000000000000000;
      *(void *)(v7 + 24) = 0;
      *(unsigned char *)(v7 + 72) = 3;
      swift_willThrow();
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t *)&v327);
      goto LABEL_88;
    }
    unint64_t v307 = a1;
    uint64_t v209 = *((void *)&v328 + 1);
    unint64_t v210 = v329;
    __swift_project_boxed_opaque_existential_0Tm(&v327, *((uint64_t *)&v328 + 1));
    if (((uint64_t (*)(uint64_t, _UNKNOWN **))v210[3])(v209, v210))
    {
      uint64_t v7 = (uint64_t)&_swiftEmptyDictionarySingleton;
LABEL_105:
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t *)&v327);
LABEL_101:
      __swift_destroy_boxed_opaque_existential_1Tm(v307);
      return v7;
    }
    Swift::String::Index v319 = (__objc2_class *)(Description + 32);
    Swift::String::Index v317 = (char **)(v322 + 32);
    uint64_t v313 = Description + 8;
    id v309 = (__objc2_class *)(v322 + 40);
    uint64_t v7 = (uint64_t)&_swiftEmptyDictionarySingleton;
    uint64_t v310 = (__objc2_class *)v8;
    uint64_t v229 = v312;
    while (1)
    {
      uint64_t v232 = *((void *)&v328 + 1);
      char v233 = v329;
      __swift_mutable_project_boxed_opaque_existential_1((uint64_t *)&v327, *((unint64_t *)&v328 + 1));
      ((void (*)(ValueMetadata *, ValueMetadata *, uint64_t, uint64_t, _UNKNOWN **))v233[22])(v10, v10, v8, v232, v233);
      if (v198)
      {
        swift_bridgeObjectRelease(v7);
        __swift_destroy_boxed_opaque_existential_1Tm((uint64_t *)&v327);
        a1 = v307;
        goto LABEL_88;
      }
      uint64_t v234 = *((void *)&v328 + 1);
      uint64_t v235 = v329;
      __swift_project_boxed_opaque_existential_0Tm(&v327, *((uint64_t *)&v328 + 1));
      if (((uint64_t (*)(uint64_t, _UNKNOWN **))v235[3])(v234, v235))
      {
        (*(void (**)(char *, ValueMetadata *))v313)(v315, v10);
        swift_bridgeObjectRelease(v7);
        swift_allocError((uint64_t)&type metadata for DecodingError, (uint64_t)&protocol witness table for DecodingError, 0, 0);
        uint64_t v7 = v288;
        a1 = v307;
        uint64_t v289 = v307[3];
        uint64_t v290 = v307[4];
        __swift_project_boxed_opaque_existential_0Tm(v307, v289);
        *(void *)uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t))(v290 + 8))(v289, v290);
        *(void *)(v7 + 8) = 0xD00000000000003DLL;
        unint64_t v206 = "Unkeyed container reached end before value in key-value pair.";
        goto LABEL_92;
      }
      uint64_t v236 = *((void *)&v328 + 1);
      size_t v237 = v329;
      __swift_mutable_project_boxed_opaque_existential_1((uint64_t *)&v327, *((unint64_t *)&v328 + 1));
      uint64_t v238 = v331;
      ((void (*)(uint64_t *, uint64_t *, uint64_t, uint64_t, _UNKNOWN **))v237[22])(v331, v331, v320, v236, v237);
      uint64_t v324 = 0;
      isa = (void (*)(uint64_t, char *, ValueMetadata *))v319->isa;
      ((void (*)(uint64_t, char *, ValueMetadata *))v319->isa)(v321, v315, v10);
      id v240 = *v317;
      uint64_t v241 = (uint64_t)v311;
      ((void (*)(char *, uint64_t, uint64_t *))*v317)(v311, v229, v238);
      ((void (*)(uint64_t, uint64_t, uint64_t *))v240)(v314, v241, v238);
      if ((v7 & 0xC000000000000001) != 0)
      {
        if (v7 >= 0) {
          v7 &= 0xFFFFFFFFFFFFFF8uLL;
        }
        id v242 = [v7 count];
        uint64_t v243 = v323;
        if (__OFADD__(v242, 1)) {
          goto LABEL_189;
        }
        uint64_t v7 = (uint64_t)_NativeDictionary.init(_:capacity:)((void *)v7, (uint64_t)v242 + 1, (char *)v10, v331, v323);
      }
      else
      {
        uint64_t v243 = v323;
      }
      Swift::Bool v244 = swift_isUniquelyReferenced_nonNull_native(v7);
      v325[0] = v7;
      unint64_t v245 = __RawDictionaryStorage.find<A>(_:)(v321, (uint64_t)v10, v243);
      uint64_t v247 = *(void *)(v7 + 16);
      BOOL v248 = (v246 & 1) == 0;
      Swift::Int v249 = v247 + v248;
      if (__OFADD__(v247, v248)) {
        goto LABEL_188;
      }
      char v250 = v246;
      unint64_t v251 = v331;
      if (*(void *)(v7 + 24) < v249) {
        break;
      }
      unint64_t v257 = v245;
      if (!v244)
      {
        uint64_t v10 = (ValueMetadata *)v318;
        type metadata accessor for _NativeDictionary(0, (uint64_t)v318, (uint64_t)v331, v323);
        _NativeDictionary.copy()();
        goto LABEL_136;
      }
      uint64_t v10 = (ValueMetadata *)v318;
      if (v246)
      {
LABEL_122:
        (*(void (**)(uint64_t, ValueMetadata *))v313)(v321, v10);
        uint64_t v7 = v325[0];
        (*(void (**)(unint64_t, uint64_t, uint64_t *))(v322 + 40))(*(void *)(v325[0] + 56) + *(void *)(v322 + 72) * v257, v314, v251);
        goto LABEL_123;
      }
LABEL_140:
      uint64_t v7 = v325[0];
      *(void *)(v325[0] + 8 * (v257 >> 6) + 64) |= 1 << v257;
      isa(*(void *)(v7 + 48) + *((void *)Description + 9) * v257, (char *)v321, v10);
      ((void (*)(unint64_t, uint64_t, uint64_t *))v240)(*(void *)(v7 + 56) + *(void *)(v322 + 72) * v257, v314, v251);
      uint64_t v258 = *(void *)(v7 + 16);
      BOOL v109 = __OFADD__(v258, 1);
      uint64_t v259 = v258 + 1;
      if (v109) {
        goto LABEL_190;
      }
      *(void *)(v7 + 16) = v259;
LABEL_123:
      uint64_t v198 = v324;
      uint64_t v8 = (uint64_t)v310;
      swift_bridgeObjectRelease(0x8000000000000000);
      uint64_t v230 = *((void *)&v328 + 1);
      uint64_t v231 = v329;
      __swift_project_boxed_opaque_existential_0Tm(&v327, *((uint64_t *)&v328 + 1));
      if (((uint64_t (*)(uint64_t, _UNKNOWN **))v231[3])(v230, v231)) {
        goto LABEL_105;
      }
    }
    uint64_t v252 = v318;
    uint64_t v253 = v323;
    type metadata accessor for _NativeDictionary(0, (uint64_t)v318, (uint64_t)v331, v323);
    Swift::Int v254 = v249;
    uint64_t v10 = (ValueMetadata *)v252;
    _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v254, v244);
    unint64_t v255 = __RawDictionaryStorage.find<A>(_:)(v321, (uint64_t)v252, v253);
    if ((v250 & 1) != (v256 & 1)) {
      KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)((unint64_t)v252);
    }
    unint64_t v257 = v255;
LABEL_136:
    unint64_t v251 = v331;
    if (v250) {
      goto LABEL_122;
    }
    goto LABEL_140;
  }
  unint64_t v306 = (void (**)(uint64_t, ValueMetadata *))v59;
  uint64_t v308 = (char *)v58;
  unint64_t v305 = v40;
  unint64_t v304 = v37;
  uint64_t v292 = v13;
  id v293 = v12;
  uint64_t v60 = a1[3];
  uint64_t v61 = a1[4];
  __swift_project_boxed_opaque_existential_0Tm(a1, v60);
  uint64_t v62 = (*(void *(**)(long long *__return_ptr, ValueMetadata *, ValueMetadata *, _UNKNOWN **, uint64_t, uint64_t))(v61 + 24))(&v327, &type metadata for _DictionaryCodingKey, &type metadata for _DictionaryCodingKey, &protocol witness table for _DictionaryCodingKey, v60, v61);
  uint64_t v63 = v7;
  if (v7)
  {
LABEL_87:
    swift_bridgeObjectRelease((uint64_t)&_swiftEmptyDictionarySingleton);
    goto LABEL_88;
  }
  unint64_t v307 = a1;
  uint64_t v64 = *(uint64_t (**)(void *))(*(void *)v327 + 96);
  uint64_t v303 = v327;
  uint64_t v65 = v64(v62);
  uint64_t v66 = specialized _arrayForceCast<A, B>(_:)(v65);
  swift_bridgeObjectRelease(v65);
  char v296 = v66[2];
  if (!v296)
  {
    uint64_t v7 = (uint64_t)&_swiftEmptyDictionarySingleton;
LABEL_97:
    swift_bridgeObjectRelease((uint64_t)v66);
    unint64_t v207 = &v330;
LABEL_100:
    swift_release(*(v207 - 32));
    goto LABEL_101;
  }
  unint64_t v69 = 0;
  unint64_t v300 = v308 + 16;
  unint64_t v299 = v306 - 1;
  BOOL v301 = (void (**)(char *, uint64_t, uint64_t))(Description + 56);
  id v309 = (__objc2_class *)(v322 + 32);
  uint64_t v295 = (void (**)(char *, char *))(Description + 8);
  uint64_t v294 = v322 + 40;
  uint64_t v7 = (uint64_t)&_swiftEmptyDictionarySingleton;
  p_uint64_t info = (__objc2_class *)(v66 + 7);
  char v302 = v22;
  unint64_t v297 = v66;
  unint64_t v298 = (char **)(Description + 32);
  while (1)
  {
    if (v69 >= (unint64_t)v66[2]) {
      goto LABEL_178;
    }
    uint64_t v311 = (char *)v69;
    uint64_t cache = (uint64_t)p_info[-1].cache;
    uint64_t vtable = (uint64_t)p_info[-1].vtable;
    uint64_t info = (uint64_t)p_info[-1].info;
    uint64_t v310 = p_info;
    int isa_low = LOBYTE(p_info->isa);
    uint64_t v312 = cache;
    v325[0] = cache;
    v325[1] = vtable;
    uint64_t v314 = info;
    v325[2] = info;
    LODWORD(v324) = isa_low;
    char v326 = isa_low;
    uint64_t v115 = (uint64_t)v308;
    uint64_t v116 = (void (*)(void *, ValueMetadata *, _UNKNOWN **, void (**)(uint64_t, ValueMetadata *), uint64_t))*((void *)v308 + 2);
    uint64_t v117 = v306;
    uint64_t v118 = type metadata accessor for Optional(0, (uint64_t)v306, v67, v68);
    uint64_t v321 = (uint64_t)&v291;
    uint64_t v119 = (uint64_t)*(v118 - 1);
    MEMORY[0x1F4188790](v118);
    int8x8_t v121 = (char *)&v291 - v120;
    uint64_t v315 = (char *)vtable;
    swift_bridgeObjectRetain_n(vtable, 2);
    v116(v325, &type metadata for _DictionaryCodingKey, &protocol witness table for _DictionaryCodingKey, v117, v115);
    uint64_t v122 = (uint64_t)*(v117 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, void (**)(uint64_t, ValueMetadata *)))(v122 + 48))(v121, 1, v117) == 1)
    {
      (*(void (**)(char *, Class *))(v119 + 8))(v121, v118);
      long long v327 = 0u;
      long long v328 = 0u;
      Swift::String::Index v329 = 0;
    }
    else
    {
      *((void *)&v328 + 1) = v117;
      Swift::String::Index v329 = (_UNKNOWN **)v115;
      uint64_t v123 = __swift_allocate_boxed_opaque_existential_0Tm(&v327);
      (*(void (**)(void *, char *, void (**)(uint64_t, ValueMetadata *)))(v122 + 32))(v123, v121, v117);
    }
    uint64_t v124 = v331;
    unint64_t v125 = v302;
    unint64_t v126 = v298;
    unint64_t v127 = (Class *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodingKeyRepresentable?);
    uint64_t v128 = v313;
    uint64_t v129 = v318;
    char v130 = swift_dynamicCast(v313, (unint64_t *)&v327, v127, v318, 6uLL);
    uint64_t v131 = *v301;
    if ((v130 & 1) == 0) {
      break;
    }
    uint64_t v321 = v7;
    ((void (*)(char *, void, uint64_t, char *))v131)(v128, 0, 1, v129);
    uint64_t v132 = v63;
    unsigned int v133 = *v126;
    ((void (*)(char *, char *, char *))*v126)(v125, v128, v129);
    uint64_t v134 = (uint64_t)v315;
    *(void *)&long long v327 = v312;
    *((void *)&v327 + 1) = v315;
    *(void *)&long long v328 = v314;
    BYTE8(v328) = v324;
    uint64_t v7 = (uint64_t)v305;
    (*(void (**)(uint64_t *, long long *, uint64_t *, ValueMetadata *, uint64_t, _UNKNOWN **))(*(void *)v303 + 248))(v124, &v327, v124, &type metadata for _DictionaryCodingKey, v320, &protocol witness table for _DictionaryCodingKey);
    if (v132)
    {
      (*v295)(v125, v129);
      swift_release(v303);
      swift_bridgeObjectRelease(v134);
      swift_bridgeObjectRelease(v321);
      swift_bridgeObjectRelease((uint64_t)v297);
      a1 = v307;
      goto LABEL_88;
    }
    swift_bridgeObjectRelease(v134);
    uint64_t v315 = v133;
    ((void (*)(__objc2_class *, char *, char *))v133)(v319, v125, v129);
    uint64_t v135 = v309->isa;
    uint64_t v136 = v304;
    ((void (*)(char *, uint64_t, uint64_t *))v309->isa)(v304, v7, v124);
    ((void (*)(char **, char *, uint64_t *))v135)(v317, v136, v124);
    uint64_t v137 = (__objc2_class **)v321;
    uint64_t v324 = 0;
    if ((v321 & 0xC000000000000001) != 0)
    {
      if (v321 < 0) {
        uint64_t v138 = (char *)v321;
      }
      else {
        uint64_t v138 = (char *)(v321 & 0xFFFFFFFFFFFFFF8);
      }
      id v139 = [v138 count];
      uint64_t v140 = (uint64_t)v139 + 1;
      if (__OFADD__(v139, 1)) {
        goto LABEL_184;
      }
      char v141 = v135;
      id v142 = v138;
      uint64_t v143 = v318;
      uint64_t v144 = v323;
      uint64_t v137 = _NativeDictionary.init(_:capacity:)(v142, v140, v318, v124, v323);
    }
    else
    {
      char v141 = v135;
      uint64_t v144 = v323;
      uint64_t v143 = v318;
    }
    Swift::Bool v145 = swift_isUniquelyReferenced_nonNull_native((uint64_t)v137);
    *(void *)&long long v327 = v137;
    unint64_t v146 = __RawDictionaryStorage.find<A>(_:)((uint64_t)v319, (uint64_t)v143, v144);
    char v148 = v137[2];
    BOOL v149 = (v147 & 1) == 0;
    Swift::Int v150 = (Swift::Int)v148 + v149;
    if (__OFADD__(v148, v149)) {
      goto LABEL_182;
    }
    char v151 = v147;
    if ((uint64_t)v137[3] >= v150)
    {
      unint64_t v156 = v146;
      uint64_t v157 = v331;
      uint64_t v158 = v315;
      if (!v145)
      {
        type metadata accessor for _NativeDictionary(0, (uint64_t)v318, (uint64_t)v331, v323);
        _NativeDictionary.copy()();
        uint64_t v157 = v331;
      }
      uint64_t v63 = v324;
      if (v151)
      {
LABEL_37:
        (*v295)((char *)v319, v318);
        uint64_t v7 = v327;
        (*(void (**)(unint64_t, char **, uint64_t *))(v322 + 40))(*(void *)(v327 + 56) + *(void *)(v322 + 72) * v156, v317, v157);
        goto LABEL_38;
      }
    }
    else
    {
      uint64_t v152 = v318;
      uint64_t v153 = v323;
      type metadata accessor for _NativeDictionary(0, (uint64_t)v318, (uint64_t)v331, v323);
      _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v150, v145);
      unint64_t v154 = __RawDictionaryStorage.find<A>(_:)((uint64_t)v319, (uint64_t)v152, v153);
      if ((v151 & 1) != (v155 & 1)) {
        KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)((unint64_t)v318);
      }
      unint64_t v156 = v154;
      uint64_t v63 = v324;
      uint64_t v157 = v331;
      uint64_t v158 = v315;
      if (v151) {
        goto LABEL_37;
      }
    }
    uint64_t v7 = v327;
    *(void *)(v327 + 8 * (v156 >> 6) + 64) |= 1 << v156;
    ((void (*)(unint64_t, __objc2_class *, char *))v158)(*(void *)(v7 + 48) + *((void *)Description + 9) * v156, v319, v318);
    ((void (*)(unint64_t, char **, uint64_t *))v141)(*(void *)(v7 + 56) + *(void *)(v322 + 72) * v156, v317, v157);
    uint64_t v159 = *(void *)(v7 + 16);
    BOOL v109 = __OFADD__(v159, 1);
    uint64_t v160 = v159 + 1;
    if (v109) {
      goto LABEL_186;
    }
    *(void *)(v7 + 16) = v160;
LABEL_38:
    unint64_t v69 = (unint64_t)(v311 + 1);
    swift_bridgeObjectRelease(0x8000000000000000);
    p_uint64_t info = (__objc2_class *)&v310->info;
    uint64_t v66 = v297;
    if (v296 == (__objc2_class *)v69) {
      goto LABEL_97;
    }
  }
  char v211 = v324;
  uint64_t v212 = (Class *)v129;
  v131(v128, 1, 1);
  swift_bridgeObjectRelease(v7);
  swift_bridgeObjectRelease((uint64_t)v297);
  (*(void (**)(char *, Class *))(v292 + 8))(v128, v293);
  unint64_t v213 = specialized static String._createEmpty(withInitialCapacity:)(32);
  uint64_t v215 = v214;
  *(void *)&long long v327 = v213;
  *((void *)&v327 + 1) = v214;
  uint64_t v216 = HIBYTE(v214) & 0xF;
  if ((v214 & 0x2000000000000000) == 0) {
    uint64_t v216 = v213 & 0xFFFFFFFFFFFFLL;
  }
  if (v216 || (v213 & ~v214 & 0x2000000000000000) != 0)
  {
    a1 = v307;
    if ((v214 & 0x2000000000000000) != 0
      && (0x80000001816DD7D0 & 0x2000000000000000) != 0
      && (unint64_t v217 = specialized _SmallString.init(_:appending:)(v213, v214, 0xD00000000000001ELL, 0x80000001816DD7D0 | 0x8000000000000000), (v219 & 1) == 0))
    {
      unint64_t v220 = v217;
      uint64_t v221 = v218;
      swift_bridgeObjectRelease(v215);
      swift_bridgeObjectRelease(0x80000001816DD7D0 | 0x8000000000000000);
      *(void *)&long long v327 = v220;
      *((void *)&v327 + 1) = v221;
    }
    else
    {
      if ((0x80000001816DD7D0 & 0x2000000000000000) != 0) {
        unint64_t v260 = (0x80000001816DD7D0 >> 56) & 0xF;
      }
      else {
        unint64_t v260 = 30;
      }
      _StringGuts.append(_:)(0xD00000000000001ELL, 0x80000001816DD7D0 | 0x8000000000000000, 0, v260);
      swift_bridgeObjectRelease(0x80000001816DD7D0 | 0x8000000000000000);
    }
  }
  else
  {
    swift_bridgeObjectRelease(v214);
    *(void *)&long long v327 = 0xD00000000000001ELL;
    *((void *)&v327 + 1) = 0x80000001816DD7D0 | 0x8000000000000000;
    a1 = v307;
  }
  TypeName = (uint64_t *)swift_getTypeName(v212, 0);
  if (v262 < 0) {
    goto LABEL_191;
  }
  uint64_t v263 = (uint8x16_t *)TypeName;
  int64_t v264 = v262;
  int64_t v265 = validateUTF8(_:)(TypeName, v262);
  unint64_t v267 = (unint64_t)v315;
  if (v268) {
    unint64_t v269 = repairUTF8(_:firstKnownBrokenRange:)(v263->i8, v264, v265, v266);
  }
  else {
    unint64_t v269 = specialized static String._uncheckedFromUTF8(_:isASCII:)(v263, v264, v265 & 1);
  }
  unint64_t v271 = v269;
  unint64_t v272 = v270;
  uint64_t v273 = *((void *)&v327 + 1);
  uint64_t v274 = HIBYTE(*((void *)&v327 + 1)) & 0xFLL;
  if ((*((void *)&v327 + 1) & 0x2000000000000000) == 0) {
    uint64_t v274 = v327 & 0xFFFFFFFFFFFFLL;
  }
  if (!v274 && ((unint64_t)v327 & ~*((void *)&v327 + 1) & 0x2000000000000000) == 0)
  {
    swift_bridgeObjectRelease(*((uint64_t *)&v327 + 1));
    *(void *)&long long v327 = v271;
    *((void *)&v327 + 1) = v272;
    goto LABEL_164;
  }
  if ((*((void *)&v327 + 1) & 0x2000000000000000) != 0)
  {
    if ((v270 & 0x2000000000000000) != 0)
    {
      unint64_t v276 = specialized _SmallString.init(_:appending:)(v327, *((unint64_t *)&v327 + 1), v269, v270);
      if (v278) {
        goto LABEL_162;
      }
      unint64_t v279 = v276;
      unint64_t v280 = v277;
      swift_bridgeObjectRelease(v273);
      swift_bridgeObjectRelease(v272);
      *(void *)&long long v327 = v279;
      *((void *)&v327 + 1) = v280;
      unint64_t v272 = v280;
      unint64_t v271 = v279;
      goto LABEL_164;
    }
LABEL_159:
    uint64_t v275 = v269 & 0xFFFFFFFFFFFFLL;
    goto LABEL_163;
  }
  if ((v270 & 0x2000000000000000) == 0) {
    goto LABEL_159;
  }
LABEL_162:
  uint64_t v275 = HIBYTE(v272) & 0xF;
LABEL_163:
  _StringGuts.append(_:)(v271, v272, 0, v275);
  swift_bridgeObjectRelease(v272);
  unint64_t v272 = *((void *)&v327 + 1);
  unint64_t v271 = v327;
LABEL_164:
  uint64_t v281 = HIBYTE(v272) & 0xF;
  if ((v272 & 0x2000000000000000) == 0) {
    uint64_t v281 = v271 & 0xFFFFFFFFFFFFLL;
  }
  if (v281 || (v271 & ~v272 & 0x2000000000000000) != 0)
  {
    if ((v272 & 0x2000000000000000) == 0
      || (unint64_t v282 = specialized _SmallString.init(_:appending:)(v271, v272, 0, 0xE000000000000000), (v284 & 1) != 0))
    {
      _StringGuts.append(_:)(0, 0xE000000000000000, 0, 0);
      swift_bridgeObjectRelease(0xE000000000000000);
      unint64_t v286 = *((void *)&v327 + 1);
      uint64_t v285 = v327;
    }
    else
    {
      uint64_t v285 = v282;
      unint64_t v286 = v283;
      swift_bridgeObjectRelease(v272);
      swift_bridgeObjectRelease(0xE000000000000000);
    }
  }
  else
  {
    swift_bridgeObjectRelease(v272);
    uint64_t v285 = 0;
    unint64_t v286 = 0xE000000000000000;
  }
  swift_allocError((uint64_t)&type metadata for DecodingError, (uint64_t)&protocol witness table for DecodingError, 0, 0);
  uint64_t v7 = v303;
  specialized static DecodingError.dataCorruptedError<A>(forKey:in:debugDescription:)(v312, v267, v314, v211, v303, v285, v286, v287);
  swift_bridgeObjectRelease(v267);
  swift_release(v7);
  swift_bridgeObjectRelease(v286);
  swift_willThrow();
LABEL_88:
  __swift_destroy_boxed_opaque_existential_1Tm(a1);
  return v7;
}

__objc2_class **Dictionary.init()()
{
  return &_swiftEmptyDictionarySingleton;
}

uint64_t static Int.% infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return static Int.% infix(_:_:)(a1, a2, 0x390EuLL, 0x3913uLL);
}

uint64_t SingleValueEncodingContainer<>.encode(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  swift_allocError((uint64_t)&type metadata for EncodingError, (uint64_t)&protocol witness table for EncodingError, 0, 0);
  uint64_t v10 = v9;
  uint64_t v9[3] = &type metadata for Int128;
  unint64_t v11 = swift_allocObject(qword_1EC9F28C0, 0x20uLL, 0xFuLL);
  void *v10 = v11;
  void v11[2] = a1;
  uint64_t v11[3] = a2;
  v10[4] = (*(uint64_t (**)(uint64_t, uint64_t))(a5 + 8))(a3, a5);
  v10[5] = 0xD00000000000002ELL;
  v10[6] = 0x80000001816DD4E0;
  v10[7] = 0;
  return swift_willThrow();
}

{
  void *v9;
  void *v10;
  void *v11;

  swift_allocError((uint64_t)&type metadata for EncodingError, (uint64_t)&protocol witness table for EncodingError, 0, 0);
  uint64_t v10 = v9;
  uint64_t v9[3] = &type metadata for UInt128;
  unint64_t v11 = swift_allocObject(qword_1EC9F28C0, 0x20uLL, 0xFuLL);
  void *v10 = v11;
  void v11[2] = a1;
  uint64_t v11[3] = a2;
  v10[4] = (*(uint64_t (**)(uint64_t, uint64_t))(a5 + 8))(a3, a5);
  v10[5] = 0xD00000000000002FLL;
  v10[6] = 0x80000001816DD510;
  v10[7] = 0;
  return swift_willThrow();
}

uint64_t SingleValueDecodingContainer<>.decode(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return SingleValueDecodingContainer<>.decode(_:)(a1, a2, a3, (uint64_t)&type metadata for Int128, 0xD00000000000002ELL, 0x80000001816DD540);
}

{
  return SingleValueDecodingContainer<>.decode(_:)(a1, a2, a3, (uint64_t)&type metadata for UInt128, 0xD00000000000002FLL, 0x80000001816DD570);
}

uint64_t SingleValueDecodingContainer<>.decode(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  swift_allocError((uint64_t)&type metadata for DecodingError, (uint64_t)&protocol witness table for DecodingError, 0, 0);
  uint64_t v12 = v11;
  uint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 8))(a1, a3);
  *(void *)uint64_t v12 = a4;
  *(void *)(v12 + 8) = v13;
  *(void *)(v12 + 16) = a5;
  *(void *)(v12 + 24) = a6;
  *(void *)(v12 + 32) = 0;
  *(unsigned char *)(v12 + 72) = 0;
  return swift_willThrow();
}

uint64_t IndexingIterator._position.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return IndexingIterator._position.getter(a1, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index, a2);
}

uint64_t IndexingIterator._position.setter(uint64_t a1, uint64_t a2)
{
  return IndexingIterator._position.setter(a1, a2, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
}

uint64_t (*IndexingIterator._position.modify())(void, void)
{
  return EnumeratedSequence._base.modify;
}

uint64_t protocol witness for IteratorProtocol.next() in conformance IndexingIterator<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2;
  uint64_t v33 = a2;
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v32 = *(void *)(v5 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](a1);
  int64_t v31 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *(void *)(v6 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (int **)v8, v5, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  uint64_t v10 = *((void *)AssociatedTypeWitness - 1);
  uint64_t v11 = MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v13 = (char *)&v30 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11);
  uint64_t v15 = (char *)&v30 - v14;
  uint64_t v16 = v2 + *(int *)(a1 + 36);
  (*(void (**)(char *, uint64_t, const char *))(v10 + 16))((char *)&v30 - v14, v16, AssociatedTypeWitness);
  (*(void (**)(uint64_t, uint64_t))(v8 + 72))(v5, v8);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v8, v5, (uint64_t)AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Collection, associated conformance descriptor for Collection.Collection.Index: Comparable);
  char v18 = (*(uint64_t (**)(char *, char *, const char *))(*(void *)(AssociatedConformanceWitness + 8) + 8))(v15, v13, AssociatedTypeWitness);
  uint64_t v19 = *(void (**)(char *, const char *))(v10 + 8);
  v19(v13, AssociatedTypeWitness);
  v19(v15, AssociatedTypeWitness);
  if (v18)
  {
    uint64_t v20 = swift_getAssociatedTypeWitness(0, *(int ***)(v8 + 8), v5, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, const char *))(*((void *)v20 - 1) + 56))(v33, 1, 1, v20);
  }
  else
  {
    uint64_t v22 = (void (*)(unsigned char *, void))(*(uint64_t (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v8 + 80))(v34, v16, v5, v8);
    uint64_t v24 = v23;
    uint64_t v25 = swift_getAssociatedTypeWitness(0, *(int ***)(v8 + 8), v5, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
    uint64_t v26 = *((void *)v25 - 1);
    uint64_t v27 = v33;
    (*(void (**)(uint64_t, uint64_t, const char *))(v26 + 16))(v33, v24, v25);
    v22(v34, 0);
    uint64_t v29 = v31;
    uint64_t v28 = v32;
    (*(void (**)(char *, uint64_t, uint64_t))(v32 + 16))(v31, v4, v5);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 192))(v16, v5, v8);
    (*(void (**)(char *, uint64_t))(v28 + 8))(v29, v5);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, const char *))(v26 + 56))(v27, 0, 1, v25);
  }
}

uint64_t Collection.index(_:offsetBy:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  if (a2 < 0) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Only BidirectionalCollections can be advanced by a negative amount", 66, 2, "Swift/Collection.swift", 22, 2, 0x3C3uLL, 0);
  }
  uint64_t v7 = a2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (int **)a4, a3, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, const char *))(*((void *)AssociatedTypeWitness - 1) + 16))(a5, a1, AssociatedTypeWitness);
  if (v7)
  {
    uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a4 + 192);
    do
    {
      uint64_t result = v12(a5, a3, a4);
      --v7;
    }
    while (v7);
  }
  return result;
}

uint64_t Collection.index(_:offsetBy:limitedBy:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v23 = a3;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (int **)a5, a4, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v14 = (char *)&v21 - v13;
  if (a2 < 0) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Only BidirectionalCollections can be advanced by a negative amount", 66, 2, "Swift/Collection.swift", 22, 2, 0x3D3uLL, 0);
  }
  uint64_t v21 = v12;
  uint64_t v22 = a6;
  (*(void (**)(char *, uint64_t, const char *))(v12 + 16))(v14, a1, AssociatedTypeWitness);
  if (a2)
  {
    uint64_t v15 = *(void *)(swift_getAssociatedConformanceWitness(a5, a4, (uint64_t)AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Collection, associated conformance descriptor for Collection.Collection.Index: Comparable)+ 8);
    uint64_t v16 = *(uint64_t (**)(char *, uint64_t, const char *, uint64_t))(v15 + 8);
    while ((v16(v14, v23, AssociatedTypeWitness, v15) & 1) == 0)
    {
      (*(void (**)(char *, uint64_t, uint64_t))(a5 + 192))(v14, a4, a5);
      if (!--a2) {
        goto LABEL_6;
      }
    }
    uint64_t v18 = v21;
    (*(void (**)(char *, const char *))(v21 + 8))(v14, AssociatedTypeWitness);
    uint64_t v19 = 1;
    uint64_t v17 = v22;
  }
  else
  {
LABEL_6:
    uint64_t v18 = v21;
    uint64_t v17 = v22;
    (*(void (**)(uint64_t, char *, const char *))(v21 + 32))(v22, v14, AssociatedTypeWitness);
    uint64_t v19 = 0;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, const char *))(v18 + 56))(v17, v19, 1, AssociatedTypeWitness);
}

uint64_t Collection.distance(from:to:)(uint64_t a1, uint64_t a2, uint64_t a3, int **a4)
{
  uint64_t v29 = a2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, a4, a3, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  uint64_t v8 = *((void *)AssociatedTypeWitness - 1);
  uint64_t v9 = MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v11 = (char *)v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = MEMORY[0x1F4188790](v9);
  uint64_t v14 = (char *)v28 - v13;
  MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)v28 - v15;
  uint64_t v17 = *(void (**)(char *, uint64_t, const char *))(v8 + 16);
  uint64_t v31 = a1;
  v17((char *)v28 - v15, a1, AssociatedTypeWitness);
  v17(v14, v29, AssociatedTypeWitness);
  uint64_t v33 = a4;
  uint64_t v32 = a3;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness((uint64_t)a4, a3, (uint64_t)AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Collection, associated conformance descriptor for Collection.Collection.Index: Comparable);
  if (((*(uint64_t (**)(char *, char *, const char *, uint64_t))(AssociatedConformanceWitness + 24))(v16, v14, AssociatedTypeWitness, AssociatedConformanceWitness) & 1) == 0)goto LABEL_10; {
  uint64_t v21 = *(void (**)(char *, const char *))(v8 + 8);
  }
  uint64_t v20 = v8 + 8;
  uint64_t v19 = v21;
  v21(v14, AssociatedTypeWitness);
  v21(v16, AssociatedTypeWitness);
  v17(v11, v31, AssociatedTypeWitness);
  uint64_t v22 = *(void *)(AssociatedConformanceWitness + 8);
  uint64_t v23 = v29;
  uint64_t v30 = *(uint64_t (**)(char *, uint64_t, const char *, uint64_t))(v22 + 8);
  uint64_t v31 = v22;
  if ((((uint64_t (*)(char *, uint64_t, const char *))v30)(v11, v29, AssociatedTypeWitness) & 1) == 0)
  {
    v28[0] = v19;
    v28[1] = v20;
    uint64_t v25 = 0;
    uint64_t v26 = v33[24];
    while (1)
    {
      uint64_t v24 = v25 + 1;
      if (__OFADD__(v25, 1)) {
        break;
      }
      ((void (*)(char *, uint64_t, int **))v26)(v11, v32, v33);
      ++v25;
      if (v30(v11, v23, AssociatedTypeWitness, v31))
      {
        uint64_t v19 = (void (*)(char *, const char *))v28[0];
        goto LABEL_8;
      }
    }
    __break(1u);
LABEL_10:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Only BidirectionalCollections can have end come before start", 60, 2, "Swift/Collection.swift", 22, 2, 0x379uLL, 0);
  }
  uint64_t v24 = 0;
LABEL_8:
  v19(v11, AssociatedTypeWitness);
  return v24;
}

uint64_t Collection.formIndex(_:offsetBy:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (int **)a4, a3, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  uint64_t v9 = *((void *)AssociatedTypeWitness - 1);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v11 = (char *)&v13 - v10;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a4 + 136))(a1, a2, a3, a4);
  (*(void (**)(uint64_t, const char *))(v9 + 8))(a1, AssociatedTypeWitness);
  return (*(uint64_t (**)(uint64_t, char *, const char *))(v9 + 32))(a1, v11, AssociatedTypeWitness);
}

BOOL Collection.formIndex(_:offsetBy:limitedBy:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, (int **)a5, a4, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  uint64_t v13 = type metadata accessor for Optional(0, (uint64_t)AssociatedTypeWitness, v11, v12);
  uint64_t v14 = (uint64_t)*(v13 - 1);
  MEMORY[0x1F4188790](v13);
  uint64_t v16 = (char *)&v20 - v15;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a5 + 144))(a1, a2, a3, a4, a5);
  uint64_t v17 = *((void *)AssociatedTypeWitness - 1);
  (*(void (**)(uint64_t, const char *))(v17 + 8))(a1, AssociatedTypeWitness);
  int v18 = (*(uint64_t (**)(char *, uint64_t, const char *))(v17 + 48))(v16, 1, AssociatedTypeWitness);
  if (v18 == 1)
  {
    (*(void (**)(char *, Class *))(v14 + 8))(v16, v13);
    (*(void (**)(uint64_t, uint64_t, const char *))(v17 + 16))(a1, a3, AssociatedTypeWitness);
  }
  else
  {
    (*(void (**)(uint64_t, char *, const char *))(v17 + 32))(a1, v16, AssociatedTypeWitness);
  }
  return v18 != 1;
}

uint64_t specialized Collection.randomElement<A>(using:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (int **)a2, a1, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  uint64_t v7 = *((void *)AssociatedTypeWitness - 1);
  uint64_t v8 = MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v10 = &v24[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v8);
  uint64_t v12 = &v24[-v11];
  if ((*(uint64_t (**)(uint64_t, uint64_t))(a2 + 104))(a1, a2))
  {
    uint64_t v13 = swift_getAssociatedTypeWitness(0, *(int ***)(a2 + 8), a1, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
    uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, const char *))(*((void *)v13 - 1) + 56);
    return v14(a3, 1, 1, v13);
  }
  else
  {
    unint64_t v16 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 112))(a1, a2);
    if ((v16 & 0x8000000000000000) != 0) {
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
    }
    if (!v16) {
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't get random value with an empty range", 42, 2, "Swift/Integers.swift", 20, 2, 0xA79uLL, 0);
    }
    uint64_t v17 = specialized RandomNumberGenerator.next<A>(upperBound:)(v16);
    (*(void (**)(uint64_t, uint64_t))(a2 + 64))(a1, a2);
    (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(a2 + 136))(v10, v17, a1, a2);
    int v18 = *(void (**)(unsigned char *, const char *))(v7 + 8);
    v18(v10, AssociatedTypeWitness);
    uint64_t v19 = (void (*)(unsigned char *, void))(*(uint64_t (**)(unsigned char *, unsigned char *, uint64_t, uint64_t))(a2 + 80))(v24, v12, a1, a2);
    uint64_t v21 = v20;
    uint64_t v22 = swift_getAssociatedTypeWitness(0, *(int ***)(a2 + 8), a1, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
    uint64_t v23 = *((void *)v22 - 1);
    (*(void (**)(uint64_t, uint64_t, const char *))(v23 + 16))(a3, v21, v22);
    v19(v24, 0);
    v18(v12, AssociatedTypeWitness);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, const char *))(v23 + 56))(a3, 0, 1, v22);
  }
}

uint64_t Collection.randomElement<A>(using:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v31 = a1;
  uint64_t v32 = a5;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (int **)a4, a2, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  uint64_t v11 = *((void *)AssociatedTypeWitness - 1);
  uint64_t v12 = MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v14 = (char *)&v29 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  unint64_t v16 = (char *)&v29 - v15;
  if ((*(uint64_t (**)(uint64_t, uint64_t))(a4 + 104))(a2, a4))
  {
    uint64_t v17 = swift_getAssociatedTypeWitness(0, *(int ***)(a4 + 8), a2, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
    int v18 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, const char *))(*((void *)v17 - 1) + 56);
    return v18(a6, 1, 1, v17);
  }
  else
  {
    uint64_t v30 = a6;
    unint64_t v20 = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 112))(a2, a4);
    if ((v20 & 0x8000000000000000) != 0) {
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
    }
    if (!v20) {
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't get random value with an empty range", 42, 2, "Swift/Integers.swift", 20, 2, 0xA79uLL, 0);
    }
    uint64_t v21 = specialized RandomNumberGenerator.next<A>(upperBound:)(v20, a3, v32);
    (*(void (**)(uint64_t, uint64_t))(a4 + 64))(a2, a4);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(a4 + 136))(v14, v21, a2, a4);
    uint64_t v22 = *(void (**)(char *, const char *))(v11 + 8);
    v22(v14, AssociatedTypeWitness);
    uint64_t v23 = (void (*)(unsigned char *, void))(*(uint64_t (**)(unsigned char *, char *, uint64_t, uint64_t))(a4 + 80))(v33, v16, a2, a4);
    uint64_t v25 = v24;
    uint64_t v26 = swift_getAssociatedTypeWitness(0, *(int ***)(a4 + 8), a2, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
    uint64_t v27 = *((void *)v26 - 1);
    uint64_t v28 = v30;
    (*(void (**)(uint64_t, uint64_t, const char *))(v27 + 16))(v30, v25, v26);
    v23(v33, 0);
    v22(v16, AssociatedTypeWitness);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, const char *))(v27 + 56))(v28, 0, 1, v26);
  }
}

uint64_t specialized static FixedWidthInteger.random<A>(in:using:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v40 = a2;
  uint64_t v41 = a4;
  uint64_t v36 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v7 = (char *)&v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = v8;
  uint64_t v10 = *(void *)(v8 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, *(int ***)(v10 + 24), v11, (uint64_t)&protocol requirements base descriptor for Numeric, associated type descriptor for Numeric.Magnitude);
  uint64_t v39 = *((void *)AssociatedTypeWitness - 1);
  uint64_t v13 = MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v38 = (char *)&v36 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = MEMORY[0x1F4188790](v13);
  uint64_t v43 = (char *)&v36 - v16;
  uint64_t v17 = MEMORY[0x1F4188790](v15);
  uint64_t v37 = (char *)&v36 - v18;
  MEMORY[0x1F4188790](v17);
  uint64_t v42 = (char *)&v36 - v19;
  uint64_t v21 = type metadata accessor for Range(0, a3, *(void *)(*(void *)(v10 + 32) + 8), v20);
  uint64_t v22 = (uint64_t)*(v21 - 1);
  MEMORY[0x1F4188790](v21);
  uint64_t v24 = (char *)&v36 - v23;
  uint64_t v25 = a1;
  (*(void (**)(char *, uint64_t, Class *))(v22 + 16))((char *)&v36 - v23, a1, v21);
  uint64_t v26 = v10;
  if ((*(uint64_t (**)(char *, char *, uint64_t))(*(void *)(*(void *)(v10 + 16) + 8) + 8))(v24, &v24[*((int *)v21 + 9)], a3))_assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't get random value with an empty range", 42, 2, "Swift/Integers.swift", 20, 2, 0xA79uLL, 0); {
  (*(void (**)(char *, Class *))(v22 + 8))(v24, v21);
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 88))(v7, v25, a3, v9);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v10, a3, (uint64_t)AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for BinaryInteger, associated conformance descriptor for BinaryInteger.Numeric.Magnitude: BinaryInteger);
  uint64_t v28 = *(void (**)(char *, uint64_t, uint64_t, const char *, uint64_t))(AssociatedConformanceWitness + 96);
  v28(v7, a3, v10, AssociatedTypeWitness, AssociatedConformanceWitness);
  (*(void (**)(char *, uint64_t, uint64_t))(v36 + 16))(v7, v25, a3);
  v28(v7, a3, v10, AssociatedTypeWitness, AssociatedConformanceWitness);
  uint64_t v29 = swift_getAssociatedConformanceWitness(v9, a3, (uint64_t)AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for FixedWidthInteger, associated conformance descriptor for FixedWidthInteger.Numeric.Magnitude: FixedWidthInteger);
  swift_getAssociatedConformanceWitness(v9, a3, (uint64_t)AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for FixedWidthInteger, associated conformance descriptor for FixedWidthInteger.Numeric.Magnitude: UnsignedInteger);
  uint64_t v30 = v38;
  uint64_t v31 = v42;
  specialized RandomNumberGenerator.next<A>(upperBound:)(v42, (uint64_t)AssociatedTypeWitness, v29, v38);
  uint64_t v32 = *(void (**)(char *, const char *))(v39 + 8);
  v32(v31, AssociatedTypeWitness);
  uint64_t v33 = v37;
  uint64_t v34 = v43;
  (*(void (**)(char *, char *, const char *, uint64_t))(v29 + 80))(v37, v30, AssociatedTypeWitness, v29);
  v32(v30, AssociatedTypeWitness);
  v32(v34, AssociatedTypeWitness);
  return (*(uint64_t (**)(char *, const char *, uint64_t, uint64_t, uint64_t))(v26 + 96))(v33, AssociatedTypeWitness, AssociatedConformanceWitness, a3, v26);
}

uint64_t static FixedWidthInteger.random<A>(in:using:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  uint64_t v52 = a2;
  uint64_t v53 = a5;
  uint64_t v51 = a4;
  uint64_t v54 = a6;
  uint64_t v44 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v9 = (char *)&v41 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v45 = v10;
  uint64_t v11 = *(void *)(v10 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, *(int ***)(v11 + 24), v12, (uint64_t)&protocol requirements base descriptor for Numeric, associated type descriptor for Numeric.Magnitude);
  uint64_t v50 = *((void *)AssociatedTypeWitness - 1);
  uint64_t v14 = MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v49 = (char *)&v41 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = MEMORY[0x1F4188790](v14);
  uint64_t v47 = (char *)&v41 - v17;
  uint64_t v18 = MEMORY[0x1F4188790](v16);
  uint64_t v48 = (char *)&v41 - v19;
  MEMORY[0x1F4188790](v18);
  uint64_t v21 = (char *)&v41 - v20;
  uint64_t v23 = type metadata accessor for Range(0, a3, *(void *)(*(void *)(v11 + 32) + 8), v22);
  uint64_t v24 = (uint64_t)*(v23 - 1);
  MEMORY[0x1F4188790](v23);
  uint64_t v26 = (char *)&v41 - v25;
  uint64_t v27 = a1;
  (*(void (**)(char *, uint64_t, Class *))(v24 + 16))((char *)&v41 - v25, a1, v23);
  uint64_t v28 = &v26[*((int *)v23 + 9)];
  uint64_t v46 = v11;
  if ((*(uint64_t (**)(char *, char *, uint64_t))(*(void *)(*(void *)(v11 + 16) + 8) + 8))(v26, v28, a3))_assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't get random value with an empty range", 42, 2, "Swift/Integers.swift", 20, 2, 0xA79uLL, 0); {
  (*(void (**)(char *, Class *))(v24 + 8))(v26, v23);
  }
  uint64_t v29 = v45;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v45 + 88))(v9, v27, a3, v45);
  uint64_t v30 = v46;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v46, a3, (uint64_t)AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for BinaryInteger, associated conformance descriptor for BinaryInteger.Numeric.Magnitude: BinaryInteger);
  uint64_t v32 = *(void (**)(char *, uint64_t, uint64_t, const char *))(AssociatedConformanceWitness + 96);
  uint64_t v42 = v21;
  uint64_t v43 = AssociatedConformanceWitness;
  uint64_t v33 = AssociatedConformanceWitness;
  v32(v9, a3, v30, AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t, uint64_t))(v44 + 16))(v9, v27, a3);
  uint64_t v34 = v47;
  ((void (*)(char *, uint64_t, uint64_t, const char *, uint64_t))v32)(v9, a3, v30, AssociatedTypeWitness, v33);
  uint64_t v35 = swift_getAssociatedConformanceWitness(v29, a3, (uint64_t)AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for FixedWidthInteger, associated conformance descriptor for FixedWidthInteger.Numeric.Magnitude: FixedWidthInteger);
  uint64_t v36 = v49;
  uint64_t v37 = v42;
  RandomNumberGenerator.next<A>(upperBound:)(v42, v51, (uint64_t)AssociatedTypeWitness, v53, v35, v49);
  uint64_t v38 = *(void (**)(char *, const char *))(v50 + 8);
  v38(v37, AssociatedTypeWitness);
  uint64_t v39 = v48;
  (*(void (**)(char *, char *, const char *, uint64_t))(v35 + 80))(v48, v36, AssociatedTypeWitness, v35);
  v38(v36, AssociatedTypeWitness);
  v38(v34, AssociatedTypeWitness);
  return (*(uint64_t (**)(char *, const char *, uint64_t, uint64_t, uint64_t))(v30 + 96))(v39, AssociatedTypeWitness, v43, a3, v30);
}

uint64_t Collection.randomElement()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return specialized Collection.randomElement<A>(using:)(a1, a2, a3);
}

uint64_t specialized Collection<>.subscript.getter(uint64_t result, uint64_t a2, unsigned int a3)
{
  if (a3 < 0x10000)
  {
    if (result < 0 || a2 >= 2) {
LABEL_8:
    }
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range out of bounds", 19, 2, "Swift/Collection.swift", 22, 2, 0x2DAuLL, 0);
  }
  else if (result < 0 || a2 > 2)
  {
    goto LABEL_8;
  }
  return result;
}

{
  uint64_t v3;

  if (a3 >= 0x80)
  {
    if (a3 >= 0x800)
    {
      if (HIWORD(a3))
      {
        if ((result & 0x8000000000000000) == 0 && a2 <= 4) {
          return result;
        }
      }
      else if ((result & 0x8000000000000000) == 0 && a2 <= 3)
      {
        return result;
      }
LABEL_14:
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range out of bounds", 19, 2, "Swift/Collection.swift", 22, 2, 0x2DAuLL, 0);
    }
    uint64_t v3 = 2;
    if (result < 0) {
      goto LABEL_14;
    }
  }
  else
  {
    uint64_t v3 = 1;
    if (result < 0) {
      goto LABEL_14;
    }
  }
  if (v3 < a2) {
    goto LABEL_14;
  }
  return result;
}

uint64_t Collection<>.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char *a4@<X8>)
{
  uint64_t v68 = a1;
  uint64_t v64 = a4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, (int **)a3, a2, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0, (uint64_t)AssociatedTypeWitness, (uint64_t)AssociatedTypeWitness, "lower upper ", 0);
  uint64_t v8 = MEMORY[0x1F4188790](TupleTypeMetadata2);
  uint64_t v61 = (char *)&v53 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = MEMORY[0x1F4188790](v8);
  uint64_t v57 = (char *)&v53 - v11;
  uint64_t v12 = (void *)*((void *)AssociatedTypeWitness - 1);
  uint64_t v13 = MEMORY[0x1F4188790](v10);
  uint64_t v15 = (char *)&v53 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = MEMORY[0x1F4188790](v13);
  uint64_t v18 = (char *)&v53 - v17;
  uint64_t v19 = MEMORY[0x1F4188790](v16);
  uint64_t v21 = (char *)&v53 - v20;
  MEMORY[0x1F4188790](v19);
  uint64_t v23 = (char *)&v53 - v22;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(a3, a2, (uint64_t)AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Collection, associated conformance descriptor for Collection.Collection.Index: Comparable);
  uint64_t v62 = type metadata accessor for Range(0, (uint64_t)AssociatedTypeWitness, AssociatedConformanceWitness, v25);
  uint64_t v60 = (uint64_t)*(v62 - 1);
  uint64_t v26 = MEMORY[0x1F4188790](v62);
  uint64_t v58 = (char *)&v53 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v26);
  uint64_t v56 = (char *)&v53 - v28;
  (*(void (**)(uint64_t, uint64_t))(a3 + 64))(a2, a3);
  uint64_t v29 = *(void (**)(uint64_t, uint64_t))(a3 + 72);
  uint64_t v65 = a2;
  uint64_t v66 = v4;
  uint64_t v63 = a3;
  v29(a2, a3);
  uint64_t v30 = (void (*)(char *, char *, const char *))v12[2];
  v30(v18, v23, AssociatedTypeWitness);
  uint64_t v55 = v21;
  v30(v15, v21, AssociatedTypeWitness);
  if (((*(uint64_t (**)(char *, char *, const char *, uint64_t))(AssociatedConformanceWitness + 24))(v18, v15, AssociatedTypeWitness, AssociatedConformanceWitness) & 1) == 0)_assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0); {
  uint64_t v31 = (void (*)(char *, const char *))v12[1];
  }
  uint64_t v67 = v31;
  v31(v15, AssociatedTypeWitness);
  v31(v18, AssociatedTypeWitness);
  uint64_t v32 = v30;
  uint64_t v33 = TupleTypeMetadata2;
  uint64_t v34 = v57;
  uint64_t v35 = &v57[*((int *)TupleTypeMetadata2 + 12)];
  uint64_t v36 = (void (*)(char *, char *, const char *))v12[4];
  uint64_t v53 = v36;
  v36(v57, v23, AssociatedTypeWitness);
  uint64_t v54 = v35;
  v36(v35, v55, AssociatedTypeWitness);
  uint64_t v37 = v61;
  uint64_t v38 = &v61[*((int *)v33 + 12)];
  v32(v61, v34, AssociatedTypeWitness);
  v32(v38, v35, AssociatedTypeWitness);
  uint64_t v39 = v58;
  uint64_t v40 = v53;
  v53(v58, v37, AssociatedTypeWitness);
  v67(v38, AssociatedTypeWitness);
  uint64_t v41 = &v37[*((int *)v33 + 12)];
  v40(v37, v34, AssociatedTypeWitness);
  v40(v41, v54, AssociatedTypeWitness);
  uint64_t v42 = v40;
  uint64_t v43 = v62;
  v42(&v39[*((int *)v62 + 9)], v41, AssociatedTypeWitness);
  v67(v37, AssociatedTypeWitness);
  uint64_t v44 = v60;
  uint64_t v45 = v56;
  (*(void (**)(char *, char *, Class *))(v60 + 32))(v56, v39, v43);
  uint64_t v46 = v63;
  uint64_t v48 = v65;
  uint64_t v47 = v66;
  (*(void (**)(uint64_t, char *, uint64_t, uint64_t))(v63 + 176))(v68, v45, v65, v63);
  (*(void (**)(char *, Class *))(v44 + 8))(v45, v43);
  uint64_t v50 = type metadata accessor for Slice(0, v48, v46, v49);
  uint64_t v51 = v64;
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v48 - 8) + 16))(&v64[*((int *)v50 + 10)], v47, v48);
  (*(void (**)(char *, uint64_t, Class *))(v44 + 16))(v39, v68, v43);
  v42(v51, v39, AssociatedTypeWitness);
  return ((uint64_t (*)(char *, char *, const char *))v42)(&v51[*((int *)v50 + 9)], &v39[*((int *)v43 + 9)], AssociatedTypeWitness);
}

uint64_t Slice.init(base:bounds:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int **a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10 = type metadata accessor for Slice(0, a3, (uint64_t)a4, (uint64_t)a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a3 - 8) + 32))(a5 + *((int *)v10 + 10), a1, a3);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, a4, a3, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  uint64_t v17 = *(uint64_t (**)(uint64_t, uint64_t, const char *))(*((void *)AssociatedTypeWitness - 1) + 32);
  ((void (*)(void *__return_ptr, uint64_t, uint64_t, const char *))v17)((void *)AssociatedTypeWitness - 1, a5, a2, AssociatedTypeWitness);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness((uint64_t)a4, a3, (uint64_t)AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Collection, associated conformance descriptor for Collection.Collection.Index: Comparable);
  uint64_t v14 = a2
      + *((int *)type metadata accessor for Range(0, (uint64_t)AssociatedTypeWitness, AssociatedConformanceWitness, v13)
        + 9);
  uint64_t v15 = a5 + *((int *)v10 + 9);

  return v17(v15, v14, AssociatedTypeWitness);
}

uint64_t Collection<>.popFirst()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v97 = a3;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, (int **)a2, a1, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0, (uint64_t)AssociatedTypeWitness, (uint64_t)AssociatedTypeWitness, "lower upper ", 0);
  uint64_t v8 = MEMORY[0x1F4188790](TupleTypeMetadata2);
  uint64_t v10 = (char *)&v74 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = MEMORY[0x1F4188790](v8);
  uint64_t v89 = (char *)&v74 - v12;
  uint64_t v93 = *((void *)AssociatedTypeWitness - 1);
  uint64_t v13 = MEMORY[0x1F4188790](v11);
  uint64_t v92 = (char *)&v74 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = MEMORY[0x1F4188790](v13);
  id v91 = (char *)&v74 - v16;
  uint64_t v17 = MEMORY[0x1F4188790](v15);
  char v95 = (void (**)(char *, char *))((char *)&v74 - v18);
  uint64_t v19 = MEMORY[0x1F4188790](v17);
  uint64_t v21 = (char *)&v74 - v20;
  MEMORY[0x1F4188790](v19);
  unint64_t v94 = (char *)&v74 - v22;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(a2, a1, (uint64_t)AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Collection, associated conformance descriptor for Collection.Collection.Index: Comparable);
  uint64_t v24 = type metadata accessor for Range(0, (uint64_t)AssociatedTypeWitness, AssociatedConformanceWitness, v23);
  uint64_t v88 = (uint64_t)*(v24 - 1);
  uint64_t v25 = MEMORY[0x1F4188790](v24);
  char v86 = (char *)&v74 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = MEMORY[0x1F4188790](v25);
  unint64_t v87 = (char *)&v74 - v28;
  uint64_t v98 = *(void *)(a1 - 8);
  MEMORY[0x1F4188790](v27);
  uint64_t v96 = (char *)&v74 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = swift_getAssociatedTypeWitness(255, *(int ***)(a2 + 8), a1, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
  uint64_t v33 = type metadata accessor for Optional(0, (uint64_t)v30, v31, v32);
  uint64_t v34 = MEMORY[0x1F4188790](v33 - 1);
  uint64_t v36 = (char *)&v74 - v35;
  uint64_t v100 = v30;
  uint64_t v99 = *((void *)v30 - 1);
  MEMORY[0x1F4188790](v34);
  uint64_t v38 = (char *)&v74 - v37;
  if ((*(uint64_t (**)(uint64_t, uint64_t))(a2 + 104))(a1, a2))
  {
    uint64_t v39 = v100;
    uint64_t v40 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, const char *))(v99 + 56);
    uint64_t v41 = v97;
    return v40(v41, 1, 1, v39);
  }
  else
  {
    uint64_t v81 = TupleTypeMetadata2;
    uint64_t v82 = v24;
    unint64_t v83 = v10;
    Collection.first.getter(a1, a2, (uint64_t)v36);
    if ((*(unsigned int (**)(char *, uint64_t, const char *))(v99 + 48))(v36, 1, v100) == 1) {
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/Collection.swift", 22, 2, 0x425uLL, 0);
    }
    uint64_t v43 = *(void (**)(uint64_t, char *, const char *))(v99 + 32);
    uint64_t v79 = v99 + 32;
    uint64_t v78 = v43;
    v43((uint64_t)v38, v36, v100);
    uint64_t v44 = v98;
    (*(void (**)(char *, char *, uint64_t))(v98 + 16))(v96, v3, a1);
    (*(void (**)(uint64_t, uint64_t))(a2 + 64))(a1, a2);
    uint64_t v45 = v94;
    (*(void (**)(char *, uint64_t, uint64_t))(a2 + 184))(v21, a1, a2);
    uint64_t v46 = v93;
    uint64_t v77 = v38;
    char v84 = *(void (**)(char *, const char *))(v93 + 8);
    uint64_t v85 = v93 + 8;
    v84(v21, AssociatedTypeWitness);
    uint64_t v47 = v95;
    (*(void (**)(uint64_t, uint64_t))(a2 + 72))(a1, a2);
    uint64_t v49 = *(void (**)(char *, char *))(v44 + 8);
    uint64_t v48 = v44 + 8;
    int64_t v80 = v3;
    uint64_t v76 = v49;
    v49(v3, (char *)a1);
    uint64_t v50 = *(void (**)(char *, char *, const char *))(v46 + 16);
    uint64_t v51 = v91;
    v50(v91, v45, AssociatedTypeWitness);
    uint64_t v52 = v92;
    uint64_t v75 = v50;
    v50(v92, (char *)v47, AssociatedTypeWitness);
    if (((*(uint64_t (**)(char *, char *, const char *))(AssociatedConformanceWitness + 24))(v51, v52, AssociatedTypeWitness) & 1) == 0)_assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0); {
    uint64_t v53 = v52;
    }
    uint64_t v54 = v84;
    v84(v53, AssociatedTypeWitness);
    v54(v51, AssociatedTypeWitness);
    uint64_t v92 = (char *)a1;
    uint64_t v55 = v81;
    uint64_t v56 = *((int *)v81 + 12);
    uint64_t v98 = v48;
    uint64_t v57 = v89;
    uint64_t v58 = &v89[v56];
    uint64_t v59 = *(void (**)(char *, char *, const char *))(v46 + 32);
    v59(v89, v94, AssociatedTypeWitness);
    id v91 = v58;
    v59(v58, (char *)v95, AssociatedTypeWitness);
    uint64_t v60 = *((int *)v55 + 12);
    char v95 = (void (**)(char *, char *))a2;
    uint64_t v61 = v83;
    uint64_t v62 = &v83[v60];
    uint64_t v63 = v75;
    v75(v83, v57, AssociatedTypeWitness);
    v63(v62, v58, AssociatedTypeWitness);
    uint64_t v64 = v86;
    v59(v86, v61, AssociatedTypeWitness);
    uint64_t v65 = v84;
    v84(v62, AssociatedTypeWitness);
    uint64_t v66 = &v61[*((int *)v55 + 12)];
    v59(v61, v57, AssociatedTypeWitness);
    v59(v66, v91, AssociatedTypeWitness);
    uint64_t v67 = v82;
    v59(&v64[*((int *)v82 + 9)], v66, AssociatedTypeWitness);
    v65(v61, AssociatedTypeWitness);
    unint64_t v69 = v87;
    uint64_t v68 = v88;
    (*(void (**)(char *, char *, Class *))(v88 + 32))(v87, v64, v67);
    uint64_t v70 = v96;
    uint64_t v71 = v92;
    v95[11](v69, v92);
    (*(void (**)(char *, Class *))(v68 + 8))(v69, v67);
    v76(v70, v71);
    uint64_t v72 = v97;
    uint64_t v73 = v100;
    v78(v97, v77, v100);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, const char *))(v99 + 56))(v72, 0, 1, v73);
  }
}

uint64_t Collection.map<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return Collection.map<A>(_:)(a1, a2, a3, a4, a5, (uint64_t)partial apply for thunk for @callee_guaranteed (@in_guaranteed A.Sequence.Element) -> (@out A1, @error @owned Error), (uint64_t (*)(uint64_t, void *))_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFxq0_q_Ri_zRi0_zRi__Ri0__Ri_0_Ri0_0_r1_lyADsAE_pqd__Isgnrzr_xABsAE_pSlRzsAE_pRsd_0_r_0_lIetMgnozo_Tp5Tm);
}

Swift::UInt64 specialized Collection.dropFirst(_:)(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a1 < 0) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't drop a negative number of elements from a collection", 58, 2, "Swift/Collection.swift", 22, 2, 0x4E1uLL, 0);
  }
  uint64_t v5 = a1;
  if ((a3 & 0x2000000000000000) != 0) {
    Swift::UInt64 v6 = HIBYTE(a3) & 0xF;
  }
  else {
    Swift::UInt64 v6 = a2 & 0xFFFFFFFFFFFFLL;
  }
  Swift::UInt64 v7 = v6 << 16;
  BOOL v8 = (a3 & 0x1000000000000000) == 0 || (a2 & 0x800000000000000) != 0;
  if (v8)
  {
    v9._Swift::UInt64 rawBits = v7 | 7;
    if ((a3 & 0x1000000000000000) == 0)
    {
      LOBYTE(v1_assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000034, 0x80000001816E2880, "Swift/Codable.swift", 19, 2, 0x11F9uLL, 0) = 1;
      goto LABEL_13;
    }
  }
  else
  {
    v9._Swift::UInt64 rawBits = v7 | 0xB;
  }
  unint64_t v10 = (a2 & 0x800000000000000uLL) >> 59;
LABEL_13:
  BOOL v32 = v8;
  if ((v9._rawBits & 0xC) == 4 << v10) {
    v9._Swift::UInt64 rawBits = _StringGuts._slowEnsureMatchingEncoding(_:)(v9)._rawBits;
  }
  v11._Swift::UInt64 rawBits = _StringGuts.validateInclusiveScalarIndex(_:)((Swift::String::Index)15)._rawBits;
  Swift::UInt64 v12 = v9._rawBits >> 14;
  if (v5)
  {
    Swift::UInt64 v13 = v6 << 16;
    int v14 = v32;
    while (v12 > v11._rawBits >> 14)
    {
      Swift::UInt64 v15 = v11._rawBits >> 16;
      if (v11._rawBits >> 16 >= v6) {
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index is out of bounds", 29, 2, "Swift/StringUnicodeScalarView.swift", 35, 2, 0xE5uLL, 0);
      }
      if ((a3 & 0x1000000000000000) != 0)
      {
        Swift::UInt64 rawBits = v11._rawBits;
        Swift::UInt64 v21 = v13;
        v22._Swift::UInt64 rawBits = String.UnicodeScalarView._foreignIndex(after:)((Swift::String::Index)rawBits)._rawBits;
        int v14 = v32;
        Swift::UInt64 v13 = v21;
        v11._Swift::UInt64 rawBits = v22._rawBits;
        if (!--v5) {
          goto LABEL_32;
        }
      }
      else
      {
        if ((a3 & 0x2000000000000000) != 0)
        {
          v33[0] = a2;
          v33[1] = a3 & 0xFFFFFFFFFFFFFFLL;
          int v17 = *((unsigned __int8 *)v33 + v15);
        }
        else
        {
          uint64_t v16 = (unsigned __int8 *)((a3 & 0xFFFFFFFFFFFFFFFLL) + 32);
          if ((a2 & 0x1000000000000000) == 0)
          {
            Swift::UInt64 v23 = v13;
            uint64_t v16 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(a2, a3);
            int v14 = v32;
            Swift::UInt64 v13 = v23;
          }
          int v17 = v16[v15];
        }
        int v18 = (char)v17;
        unsigned int v19 = __clz(v17 ^ 0xFF) - 24;
        if (v18 >= 0) {
          LOBYTE(v19) = 1;
        }
        v11._Swift::UInt64 rawBits = ((v15 + v19) << 16) | 5;
        if (!--v5) {
          goto LABEL_32;
        }
      }
    }
LABEL_33:
    if (v14) {
      v11._Swift::UInt64 rawBits = v13 | 7;
    }
    else {
      v11._Swift::UInt64 rawBits = v13 | 0xB;
    }
    goto LABEL_36;
  }
  Swift::UInt64 v13 = v6 << 16;
  int v14 = v32;
LABEL_32:
  if (v12 < v11._rawBits >> 14) {
    goto LABEL_33;
  }
LABEL_36:
  uint64_t v24 = 11;
  if (v14) {
    uint64_t v24 = 7;
  }
  unint64_t v25 = 4 * v6;
  Swift::UInt64 v26 = v11._rawBits >> 14;
  if (4 * v6 < v11._rawBits >> 14) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
  }
  uint64_t v27 = 4 << v14;
  Swift::UInt64 v28 = v13 | v24;
  uint64_t v29 = v11._rawBits & 0xC;
  uint64_t v30 = v24 & 0xC;
  if (v30 == 4 << v14 || v29 == v27 || (v11._rawBits & 1) == 0)
  {
    if (v30 == v27)
    {
      Swift::UInt64 v28 = _StringGuts._slowEnsureMatchingEncoding(_:)((Swift::String::Index)v28)._rawBits;
      if (v29 != v27) {
        goto LABEL_44;
      }
    }
    else if (v29 != v27)
    {
LABEL_44:
      if (v25 < v28 >> 14 || v28 >> 14 < v26) {
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index range is out of bounds", 35, 2, "Swift/StringIndexValidation.swift", 33, 2, 0x50uLL, 0);
      }
      if (v11._rawBits)
      {
        if (v28) {
          return v11._rawBits;
        }
      }
      else
      {
        v11._Swift::UInt64 rawBits = v11._rawBits & 0xC | _StringGuts.scalarAlignSlow(_:)(v11)._rawBits & 0xFFFFFFFFFFFFFFF3 | 1;
        if (v28) {
          return v11._rawBits;
        }
      }
      _StringGuts.scalarAlignSlow(_:)((Swift::String::Index)v28)._rawBits;
      return v11._rawBits;
    }
    v11._Swift::UInt64 rawBits = _StringGuts._slowEnsureMatchingEncoding(_:)(v11)._rawBits;
    Swift::UInt64 v26 = v11._rawBits >> 14;
    goto LABEL_44;
  }
  return v11._rawBits;
}

uint64_t specialized Collection.dropFirst(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 < 0) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't drop a negative number of elements from a collection", 58, 2, "Swift/Collection.swift", 22, 2, 0x4E1uLL, 0);
  }
  uint64_t result = specialized Slice.index(_:offsetBy:limitedBy:)(a2, a1, a3);
  if (v6) {
    uint64_t result = a3;
  }
  if (result > a3) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
  }
  if (result < a2) {
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x71BuLL, 0);
  }
  return result;
}

uint64_t Collection.dropFirst(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v91 = a4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, (int **)a3, a2, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0, (uint64_t)AssociatedTypeWitness, (uint64_t)AssociatedTypeWitness, "lower upper ", 0);
  uint64_t v8 = MEMORY[0x1F4188790](TupleTypeMetadata2);
  unint64_t v90 = (char *)&v80 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8);
  unint64_t v87 = (char *)&v80 - v10;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(a3, a2, (uint64_t)AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Collection, associated conformance descriptor for Collection.Collection.Index: Comparable);
  Swift::UInt64 v12 = type metadata accessor for Range(0, (uint64_t)AssociatedTypeWitness, AssociatedConformanceWitness, v11);
  uint64_t v13 = (uint64_t)*(v12 - 1);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  char v86 = (char *)&v80 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = MEMORY[0x1F4188790](v14);
  uint64_t v88 = (char *)&v80 - v17;
  uint64_t v104 = a2;
  uint64_t v102 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](v16);
  uint64_t v92 = (char *)&v80 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  Swift::UInt64 v21 = type metadata accessor for Optional(0, (uint64_t)AssociatedTypeWitness, v19, v20);
  uint64_t v97 = (uint64_t)*(v21 - 1);
  uint64_t v98 = v21;
  uint64_t v22 = MEMORY[0x1F4188790](v21);
  char v103 = (char *)&v80 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = MEMORY[0x1F4188790](v22);
  Swift::UInt64 v26 = (char *)&v80 - v25;
  uint64_t v27 = (char *)*((void *)AssociatedTypeWitness - 1);
  uint64_t v28 = MEMORY[0x1F4188790](v24);
  uint64_t v29 = MEMORY[0x1F4188790](v28);
  unint64_t v94 = (char *)&v80 - v30;
  uint64_t v31 = MEMORY[0x1F4188790](v29);
  char v95 = (char *)&v80 - v32;
  uint64_t v33 = MEMORY[0x1F4188790](v31);
  uint64_t v35 = (char *)&v80 - v34;
  uint64_t v36 = MEMORY[0x1F4188790](v33);
  uint64_t v38 = (char *)&v80 - v37;
  MEMORY[0x1F4188790](v36);
  uint64_t v93 = (char *)&v80 - v40;
  if (a1 < 0) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't drop a negative number of elements from a collection", 58, 2, "Swift/Collection.swift", 22, 2, 0x4E1uLL, 0);
  }
  uint64_t v85 = v39;
  uint64_t v80 = v13;
  uint64_t v81 = v12;
  uint64_t v41 = *(void (**)(uint64_t, uint64_t))(a3 + 64);
  uint64_t v42 = v101;
  uint64_t v43 = v104;
  uint64_t v82 = v26;
  v41(v104, a3);
  uint64_t v44 = *(void (**)(uint64_t, char *))(a3 + 72);
  uint64_t v84 = a3 + 72;
  unint64_t v83 = v44;
  v44(v43, (char *)a3);
  (*(void (**)(char *, uint64_t, char *, uint64_t, uint64_t))(a3 + 144))(v38, a1, v35, v43, a3);
  uint64_t v45 = (void (*)(char *, const char *))*((void *)v27 + 1);
  v45(v35, AssociatedTypeWitness);
  uint64_t v99 = v45;
  uint64_t v100 = v27 + 8;
  v45(v38, AssociatedTypeWitness);
  uint64_t v46 = v102;
  uint64_t v47 = v92;
  (*(void (**)(char *, uint64_t, uint64_t))(v102 + 16))(v92, v42, v43);
  uint64_t v48 = v103;
  (*(void (**)(char *, char *, Class *))(v97 + 32))(v103, v82, v98);
  uint64_t v49 = v27;
  if ((*((unsigned int (**)(char *, uint64_t, const char *))v27 + 6))(v48, 1, AssociatedTypeWitness) == 1)
  {
    uint64_t v50 = v93;
    uint64_t v51 = v104;
    uint64_t v82 = v27;
    uint64_t v52 = v83;
    v83(v104, (char *)a3);
    uint64_t v53 = v46;
    uint64_t v54 = v50;
    uint64_t v92 = *(char **)(v53 + 8);
    ((void (*)(char *, uint64_t))v92)(v47, v51);
    (*(void (**)(char *, Class *))(v97 + 8))(v103, v98);
    uint64_t v55 = (char *)a3;
    uint64_t v56 = v94;
    uint64_t v57 = v52;
    uint64_t v49 = v82;
  }
  else
  {
    uint64_t v92 = *(char **)(v46 + 8);
    ((void (*)(char *, uint64_t))v92)(v47, v104);
    uint64_t v54 = v93;
    (*((void (**)(char *, char *, const char *))v27 + 4))(v93, v103, AssociatedTypeWitness);
    uint64_t v55 = (char *)a3;
    uint64_t v56 = v94;
    uint64_t v57 = v83;
  }
  uint64_t v58 = v95;
  v57(v104, v55);
  uint64_t v59 = (void (*)(char *, char *, const char *))*((void *)v49 + 2);
  v59(v56, v54, AssociatedTypeWitness);
  uint64_t v60 = v85;
  v59(v85, v58, AssociatedTypeWitness);
  if (((*(uint64_t (**)(char *, char *, const char *))(AssociatedConformanceWitness + 24))(v56, v60, AssociatedTypeWitness) & 1) == 0)_assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0); {
  uint64_t v61 = v60;
  }
  uint64_t v62 = v99;
  v99(v61, AssociatedTypeWitness);
  v62(v56, AssociatedTypeWitness);
  uint64_t v63 = TupleTypeMetadata2;
  uint64_t v64 = v54;
  uint64_t v65 = v87;
  uint64_t v66 = v58;
  uint64_t v67 = &v87[*((int *)TupleTypeMetadata2 + 12)];
  char v103 = v55;
  uint64_t v68 = (void (*)(char *, char *, const char *))*((void *)v49 + 4);
  v68(v87, v64, AssociatedTypeWitness);
  uint64_t v98 = (Class *)v67;
  v68(v67, v66, AssociatedTypeWitness);
  unint64_t v69 = v90;
  uint64_t v70 = &v90[*((int *)v63 + 12)];
  v59(v90, v65, AssociatedTypeWitness);
  v59(v70, v67, AssociatedTypeWitness);
  uint64_t v71 = v86;
  v68(v86, v69, AssociatedTypeWitness);
  uint64_t v72 = v99;
  v99(v70, AssociatedTypeWitness);
  uint64_t v73 = &v69[*((int *)v63 + 12)];
  v68(v69, v65, AssociatedTypeWitness);
  v68(v73, (char *)v98, AssociatedTypeWitness);
  uint64_t v74 = v81;
  v68(&v71[*((int *)v81 + 9)], v73, AssociatedTypeWitness);
  v72(v69, AssociatedTypeWitness);
  uint64_t v75 = v80;
  uint64_t v76 = v88;
  (*(void (**)(char *, char *, Class *))(v80 + 32))(v88, v71, v74);
  uint64_t v77 = v104;
  uint64_t v78 = v101;
  (*((void (**)(char *, uint64_t))v103 + 11))(v76, v104);
  ((void (*)(uint64_t, uint64_t))v92)(v78, v77);
  return (*(uint64_t (**)(char *, Class *))(v75 + 8))(v76, v74);
}

uint64_t Collection.dropLast(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v95 = a4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, (int **)a3, a2, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0, (uint64_t)AssociatedTypeWitness, (uint64_t)AssociatedTypeWitness, "lower upper ", 0);
  uint64_t v9 = MEMORY[0x1F4188790](TupleTypeMetadata2);
  uint64_t v11 = (char *)&v83 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  uint64_t v92 = (char *)&v83 - v12;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(a3, a2, (uint64_t)AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Collection, associated conformance descriptor for Collection.Collection.Index: Comparable);
  uint64_t v14 = type metadata accessor for Range(0, (uint64_t)AssociatedTypeWitness, AssociatedConformanceWitness, v13);
  uint64_t v15 = (uint64_t)*(v14 - 1);
  uint64_t v16 = MEMORY[0x1F4188790](v14);
  uint64_t v91 = (char *)&v83 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = MEMORY[0x1F4188790](v16);
  uint64_t v93 = (char *)&v83 - v19;
  uint64_t v106 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](v18);
  uint64_t v98 = (char *)&v83 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = type metadata accessor for Optional(0, (uint64_t)AssociatedTypeWitness, v21, v22);
  uint64_t v96 = (uint64_t)*(v23 - 1);
  uint64_t v97 = v23;
  uint64_t v24 = MEMORY[0x1F4188790](v23);
  uint64_t v102 = (char *)&v83 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = MEMORY[0x1F4188790](v24);
  uint64_t v109 = *((void *)AssociatedTypeWitness - 1);
  uint64_t v27 = MEMORY[0x1F4188790](v26);
  uint64_t v99 = (char *)&v83 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = MEMORY[0x1F4188790](v27);
  uint64_t v30 = MEMORY[0x1F4188790](v29);
  uint64_t v100 = (char *)&v83 - v31;
  uint64_t v32 = MEMORY[0x1F4188790](v30);
  uint64_t v34 = (char *)&v83 - v33;
  uint64_t v35 = MEMORY[0x1F4188790](v32);
  uint64_t v37 = (char *)&v83 - v36;
  MEMORY[0x1F4188790](v35);
  if (a1 < 0) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't drop a negative number of elements from a collection", 58, 2, "Swift/Collection.swift", 22, 2, 0x4FCuLL, 0);
  }
  uint64_t v89 = v40;
  uint64_t v90 = v39;
  uint64_t v108 = (char *)&v83 - v38;
  uint64_t v41 = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 112))(a2, a3);
  if (__OFSUB__(v41, a1))
  {
    __break(1u);
    goto LABEL_10;
  }
  uint64_t v84 = v11;
  uint64_t v85 = v15;
  char v86 = v14;
  uint64_t v42 = (v41 - a1) & ~((v41 - a1) >> 63);
  uint64_t v43 = *(void (**)(uint64_t, uint64_t))(a3 + 64);
  uint64_t v88 = a3 + 64;
  unint64_t v87 = v43;
  v43(a2, a3);
  uint64_t v44 = a3;
  unint64_t v83 = *(void (**)(uint64_t, uint64_t))(a3 + 72);
  v83(a2, a3);
  uint64_t v45 = *(void (**)(char *, uint64_t, char *, uint64_t, uint64_t))(a3 + 144);
  uint64_t v46 = v89;
  v45(v37, v42, v34, a2, v44);
  uint64_t v47 = v34;
  uint64_t v48 = v109;
  uint64_t v49 = v109 + 8;
  uint64_t v50 = *(void (**)(char *, const char *))(v109 + 8);
  v50(v47, AssociatedTypeWitness);
  uint64_t v107 = v49;
  char v103 = (void (*)(uint64_t, const char *))v50;
  v50(v37, AssociatedTypeWitness);
  uint64_t v51 = v106;
  uint64_t v52 = *(void (**)(char *, uint64_t, uint64_t))(v106 + 16);
  uint64_t v53 = v98;
  uint64_t v104 = a2;
  uint64_t v105 = v4;
  v52(v98, v4, a2);
  uint64_t v55 = v96;
  uint64_t v54 = v97;
  uint64_t v56 = v102;
  (*(void (**)(char *, uint64_t, Class *))(v96 + 32))(v102, v46, v97);
  if ((*(unsigned int (**)(char *, uint64_t, const char *))(v48 + 48))(v56, 1, AssociatedTypeWitness) == 1)
  {
    uint64_t v57 = v104;
    v83(v104, v44);
    uint64_t v58 = v57;
    uint64_t v59 = *(void (**)(char *, uint64_t))(v51 + 8);
    v59(v53, v57);
    (*(void (**)(char *, Class *))(v55 + 8))(v102, v54);
    uint64_t v60 = v109;
  }
  else
  {
    uint64_t v59 = *(void (**)(char *, uint64_t))(v51 + 8);
    uint64_t v58 = v104;
    v59(v53, v104);
    uint64_t v61 = v109;
    (*(void (**)(char *, char *, const char *))(v109 + 32))(v108, v56, AssociatedTypeWitness);
    uint64_t v60 = v61;
  }
  uint64_t v62 = v100;
  v87(v58, v44);
  uint64_t v63 = *(void (**)(uint64_t, char *, const char *))(v60 + 16);
  uint64_t v64 = v90;
  v63(v90, v62, AssociatedTypeWitness);
  uint64_t v65 = v99;
  v63((uint64_t)v99, v108, AssociatedTypeWitness);
  if (((*(uint64_t (**)(uint64_t, char *, const char *))(AssociatedConformanceWitness + 24))(v64, v65, AssociatedTypeWitness) & 1) == 0)LABEL_10:_assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0); {
  uint64_t AssociatedConformanceWitness = v44;
  }
  uint64_t v102 = (char *)v59;
  uint64_t v66 = v103;
  v103((uint64_t)v65, AssociatedTypeWitness);
  v66(v64, AssociatedTypeWitness);
  uint64_t v67 = TupleTypeMetadata2;
  uint64_t v68 = v92;
  unint64_t v69 = v62;
  uint64_t v70 = &v92[*((int *)TupleTypeMetadata2 + 12)];
  uint64_t v71 = *(void (**)(char *, char *, const char *))(v109 + 32);
  v71(v92, v69, AssociatedTypeWitness);
  v71(v70, v108, AssociatedTypeWitness);
  uint64_t v72 = v84;
  uint64_t v73 = &v84[*((int *)v67 + 12)];
  v63((uint64_t)v84, v68, AssociatedTypeWitness);
  v63((uint64_t)v73, v70, AssociatedTypeWitness);
  uint64_t v74 = v91;
  v71(v91, v72, AssociatedTypeWitness);
  uint64_t v75 = (void (*)(char *, const char *))v103;
  v103((uint64_t)v73, AssociatedTypeWitness);
  uint64_t v76 = &v72[*((int *)v67 + 12)];
  v71(v72, v68, AssociatedTypeWitness);
  v71(v76, v70, AssociatedTypeWitness);
  uint64_t v77 = v86;
  v71(&v74[*((int *)v86 + 9)], v76, AssociatedTypeWitness);
  v75(v72, AssociatedTypeWitness);
  uint64_t v78 = v85;
  uint64_t v79 = v93;
  (*(void (**)(char *, char *, Class *))(v85 + 32))(v93, v74, v77);
  uint64_t v81 = v104;
  uint64_t v80 = v105;
  (*(void (**)(char *, uint64_t))(AssociatedConformanceWitness + 88))(v79, v104);
  ((void (*)(uint64_t, uint64_t))v102)(v80, v81);
  return (*(uint64_t (**)(char *, Class *))(v78 + 8))(v79, v77);
}

uint64_t Collection.drop(while:)@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int **a4@<X3>, uint64_t a5@<X8>)
{
  char v6 = v5;
  uint64_t v7 = (uint64_t)a4;
  uint64_t v96 = a1;
  uint64_t v97 = a2;
  uint64_t v81 = a5;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, a4, a3, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0, (uint64_t)AssociatedTypeWitness, (uint64_t)AssociatedTypeWitness, "lower upper ", 0);
  uint64_t v10 = MEMORY[0x1F4188790](TupleTypeMetadata2);
  uint64_t v79 = (char *)&v76 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10);
  uint64_t v76 = (char *)&v76 - v12;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v7, a3, (uint64_t)AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Collection, associated conformance descriptor for Collection.Collection.Index: Comparable);
  uint64_t v80 = type metadata accessor for Range(0, (uint64_t)AssociatedTypeWitness, AssociatedConformanceWitness, v14);
  uint64_t v78 = (uint64_t)*(v80 - 1);
  uint64_t v15 = MEMORY[0x1F4188790](v80);
  uint64_t v85 = (char *)&v76 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v15);
  uint64_t v77 = (char *)&v76 - v17;
  uint64_t v95 = swift_getAssociatedTypeWitness(0, *(int ***)(v7 + 8), a3, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
  uint64_t v18 = *((void *)v95 - 1);
  uint64_t v19 = MEMORY[0x1F4188790](v95);
  unint64_t v94 = (char *)&v76 - v20;
  uint64_t v107 = *(void (***)(char *, uint64_t))(a3 - 8);
  uint64_t v21 = MEMORY[0x1F4188790](v19);
  char v103 = (char *)&v76 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = *((void *)AssociatedTypeWitness - 1);
  uint64_t v24 = MEMORY[0x1F4188790](v21);
  unint64_t v83 = (char *)&v76 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = MEMORY[0x1F4188790](v24);
  uint64_t v82 = (char *)&v76 - v27;
  uint64_t v28 = MEMORY[0x1F4188790](v26);
  uint64_t v88 = (char *)&v76 - v29;
  uint64_t v30 = MEMORY[0x1F4188790](v28);
  unint64_t v87 = (char *)&v76 - v31;
  uint64_t v32 = MEMORY[0x1F4188790](v30);
  uint64_t v102 = (void (**)(char *, char *))((char *)&v76 - v33);
  MEMORY[0x1F4188790](v32);
  uint64_t v35 = (char *)&v76 - v34;
  (*(void (**)(uint64_t, uint64_t))(v7 + 64))(a3, v7);
  uint64_t v105 = *(char **)(v7 + 72);
  uint64_t v84 = AssociatedConformanceWitness;
  uint64_t v101 = *(char **)(AssociatedConformanceWitness + 8);
  uint64_t v99 = (uint64_t (*)(void, void, void, void))*((void *)v101 + 1);
  uint64_t v100 = (void (*)(char *, uint64_t))(v101 + 8);
  uint64_t v89 = v23;
  uint64_t v98 = (void (**)(char *, char *, uint64_t))(v107 + 2);
  uint64_t v93 = v7 + 80;
  uint64_t v92 = (void (**)(char *))(v18 + 16);
  ++v107;
  uint64_t v108 = (void (**)(void, void))(v23 + 8);
  uint64_t v91 = (void (**)(char *, const char *))(v18 + 8);
  uint64_t v106 = (void (*)(void, void, void))(v7 + 72);
  uint64_t v90 = v7 + 192;
  while (1)
  {
    uint64_t v36 = v102;
    ((void (*)(uint64_t, uint64_t))v105)(a3, v7);
    char v37 = v99(v35, v36, AssociatedTypeWitness, v101);
    uint64_t v38 = AssociatedTypeWitness;
    uint64_t v104 = *v108;
    v104(v36, AssociatedTypeWitness);
    uint64_t v39 = v103;
    uint64_t v40 = v6;
    (*v98)(v103, v6, a3);
    if (v37)
    {
      uint64_t v41 = v35;
      uint64_t v43 = (char *)v7;
      uint64_t v100 = *v107;
      v100(v39, a3);
      goto LABEL_9;
    }
    uint64_t v41 = v35;
    uint64_t v42 = v35;
    uint64_t v43 = (char *)v7;
    uint64_t v44 = (void (*)(void, void))(*(uint64_t (**)(char *, char *, uint64_t, uint64_t))(v7 + 80))(v109, v42, a3, v7);
    uint64_t v46 = v94;
    uint64_t v45 = v95;
    (*v92)(v94);
    v44(v109, 0);
    uint64_t v47 = v39;
    uint64_t v48 = *v107;
    (*v107)(v47, a3);
    uint64_t v49 = v110;
    char v50 = v96(v46);
    uint64_t v110 = v49;
    if (v49)
    {
      v48(v40, a3);
      (*v91)(v46, v45);
      return ((uint64_t (*)(char *, const char *))v104)(v41, v38);
    }
    char v51 = v50;
    (*v91)(v46, v45);
    if ((v51 & 1) == 0) {
      break;
    }
    uint64_t v7 = (uint64_t)v43;
    uint64_t v52 = (void (*)(void, void, void))*((void *)v43 + 24);
    uint64_t v35 = v41;
    uint64_t v53 = v41;
    char v6 = v40;
    v52(v53, a3, v7);
    AssociatedTypeWitness = v38;
  }
  uint64_t v100 = v48;
LABEL_9:
  uint64_t v55 = *(void (**)(void, void, void))(v89 + 16);
  uint64_t v56 = v87;
  uint64_t v101 = v41;
  v55(v87, v41, v38);
  uint64_t v57 = v88;
  uint64_t v102 = (void (**)(char *, char *))v43;
  char v103 = (char *)a3;
  ((void (*)(uint64_t, char *))v105)(a3, v43);
  uint64_t v58 = v82;
  v55(v82, v56, v38);
  uint64_t v59 = v83;
  uint64_t v106 = v55;
  v55(v83, v57, v38);
  if (((*(uint64_t (**)(char *, char *, const char *))(v84 + 24))(v58, v59, v38) & 1) == 0) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
  }
  uint64_t v105 = v40;
  uint64_t v60 = v104;
  v104(v59, v38);
  v60(v58, v38);
  v60(v101, v38);
  uint64_t v61 = TupleTypeMetadata2;
  uint64_t v62 = v76;
  uint64_t v63 = &v76[*((int *)TupleTypeMetadata2 + 12)];
  uint64_t v64 = *(void (**)(void, void, void))(v89 + 32);
  v64(v76, v87, v38);
  uint64_t v101 = v63;
  v64(v63, v88, v38);
  uint64_t v65 = v79;
  uint64_t v66 = &v79[*((int *)v61 + 12)];
  uint64_t v67 = v106;
  v106(v79, v62, v38);
  v67(v66, v63, v38);
  v64(v85, v65, v38);
  uint64_t v68 = v104;
  v104(v66, v38);
  unint64_t v69 = &v65[*((int *)TupleTypeMetadata2 + 12)];
  v64(v65, v62, v38);
  v64(v69, v101, v38);
  uint64_t v70 = v80;
  uint64_t v71 = v85;
  v64(&v85[*((int *)v80 + 9)], v69, v38);
  v68(v65, v38);
  uint64_t v72 = v78;
  uint64_t v73 = v77;
  (*(void (**)(char *, char *, Class *))(v78 + 32))(v77, v71, v70);
  uint64_t v74 = v103;
  uint64_t v75 = v105;
  v102[11](v73, v103);
  v100(v75, (uint64_t)v74);
  return (*(uint64_t (**)(char *, Class *))(v72 + 8))(v73, v70);
}

uint64_t specialized Collection.prefix(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 < 0) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't take a prefix of negative length from a collection", 56, 2, "Swift/Collection.swift", 22, 2, 0x52EuLL, 0);
  }
  uint64_t v4 = specialized UnsafeMutableBufferPointer.index(_:offsetBy:limitedBy:)(0, a1, a3);
  if (v5) {
    uint64_t v6 = a3;
  }
  else {
    uint64_t v6 = v4;
  }
  if (v6 < 0) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
  }
  if (v6 > a3) {
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x266uLL, 0);
  }
  return 0;
}

uint64_t Collection.prefix(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v85 = a4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, (int **)a3, a2, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0, (uint64_t)AssociatedTypeWitness, (uint64_t)AssociatedTypeWitness, "lower upper ", 0);
  uint64_t v9 = MEMORY[0x1F4188790](TupleTypeMetadata2);
  uint64_t v84 = (char *)&v74 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  uint64_t v81 = (char *)&v74 - v11;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(a3, a2, (uint64_t)AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Collection, associated conformance descriptor for Collection.Collection.Index: Comparable);
  uint64_t v13 = type metadata accessor for Range(0, (uint64_t)AssociatedTypeWitness, AssociatedConformanceWitness, v12);
  uint64_t v14 = (uint64_t)*(v13 - 1);
  uint64_t v15 = MEMORY[0x1F4188790](v13);
  uint64_t v80 = (char *)&v74 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = MEMORY[0x1F4188790](v15);
  uint64_t v82 = (char *)&v74 - v18;
  uint64_t v98 = a2;
  uint64_t v94 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](v17);
  unint64_t v87 = (char *)&v74 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v86 = type metadata accessor for Optional(0, (uint64_t)AssociatedTypeWitness, v20, v21);
  uint64_t v92 = (uint64_t)*(v86 - 1);
  uint64_t v22 = MEMORY[0x1F4188790](v86);
  uint64_t v95 = (char *)&v74 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = MEMORY[0x1F4188790](v22);
  uint64_t v25 = *((void *)AssociatedTypeWitness - 1);
  uint64_t v26 = MEMORY[0x1F4188790](v24);
  uint64_t v89 = (char *)&v74 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = MEMORY[0x1F4188790](v26);
  uint64_t v88 = (char *)&v74 - v29;
  uint64_t v30 = MEMORY[0x1F4188790](v28);
  uint64_t v90 = (char *)&v74 - v31;
  uint64_t v32 = MEMORY[0x1F4188790](v30);
  uint64_t v34 = (char *)&v74 - v33;
  uint64_t v35 = MEMORY[0x1F4188790](v32);
  char v37 = (char *)&v74 - v36;
  MEMORY[0x1F4188790](v35);
  if (a1 < 0) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't take a prefix of negative length from a collection", 56, 2, "Swift/Collection.swift", 22, 2, 0x52EuLL, 0);
  }
  uint64_t v40 = a1;
  uint64_t v97 = (char *)&v74 - v38;
  uint64_t v75 = v14;
  uint64_t v76 = v13;
  uint64_t v41 = *(void (**)(uint64_t, uint64_t))(a3 + 64);
  uint64_t v42 = a3;
  uint64_t v43 = v98;
  uint64_t v77 = v39;
  uint64_t v78 = v41;
  uint64_t v79 = a3 + 64;
  v41(v98, a3);
  uint64_t v44 = v25;
  uint64_t v74 = *(void (**)(uint64_t, uint64_t))(a3 + 72);
  v74(v43, a3);
  (*(void (**)(char *, uint64_t, char *, uint64_t, uint64_t))(v42 + 144))(v37, v40, v34, v43, v42);
  uint64_t v45 = *(void (**)(char *, const char *))(v25 + 8);
  v45(v34, AssociatedTypeWitness);
  uint64_t v93 = v25 + 8;
  uint64_t v96 = v45;
  v45(v37, AssociatedTypeWitness);
  uint64_t v46 = v94;
  uint64_t v47 = v87;
  uint64_t v48 = v4;
  (*(void (**)(char *, char *, uint64_t))(v94 + 16))(v87, v4, v43);
  uint64_t v49 = v95;
  char v50 = v86;
  (*(void (**)(char *, uint64_t, Class *))(v92 + 32))(v95, v77, v86);
  if ((*(unsigned int (**)(char *, uint64_t, const char *))(v25 + 48))(v49, 1, AssociatedTypeWitness) == 1)
  {
    uint64_t v51 = v98;
    v74(v98, v42);
    unint64_t v87 = *(char **)(v46 + 8);
    ((void (*)(char *, uint64_t))v87)(v47, v51);
    (*(void (**)(char *, Class *))(v92 + 8))(v95, v50);
  }
  else
  {
    unint64_t v87 = *(char **)(v46 + 8);
    ((void (*)(char *, uint64_t))v87)(v47, v98);
    (*(void (**)(char *, char *, const char *))(v25 + 32))(v97, v95, AssociatedTypeWitness);
  }
  uint64_t v52 = v42;
  uint64_t v53 = v25;
  uint64_t v55 = v89;
  uint64_t v54 = v90;
  v78(v98, v52);
  uint64_t v56 = *(void (**)(char *, char *, const char *))(v44 + 16);
  uint64_t v57 = v88;
  v56(v88, v54, AssociatedTypeWitness);
  v56(v55, v97, AssociatedTypeWitness);
  if (((*(uint64_t (**)(char *, char *, const char *))(AssociatedConformanceWitness + 24))(v57, v55, AssociatedTypeWitness) & 1) == 0)_assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0); {
  uint64_t v58 = v55;
  }
  uint64_t v59 = v96;
  v96(v58, AssociatedTypeWitness);
  v59(v57, AssociatedTypeWitness);
  uint64_t v60 = TupleTypeMetadata2;
  uint64_t v61 = v81;
  uint64_t v62 = (uint64_t)&v81[*((int *)TupleTypeMetadata2 + 12)];
  uint64_t v95 = v48;
  uint64_t v92 = v52;
  uint64_t v63 = *(void (**)(char *, char *, const char *))(v53 + 32);
  v63(v81, v54, AssociatedTypeWitness);
  uint64_t AssociatedConformanceWitness = v62;
  v63((char *)v62, v97, AssociatedTypeWitness);
  uint64_t v64 = v84;
  uint64_t v65 = &v84[*((int *)v60 + 12)];
  v56(v84, v61, AssociatedTypeWitness);
  v56(v65, (char *)v62, AssociatedTypeWitness);
  uint64_t v66 = v80;
  v63(v80, v64, AssociatedTypeWitness);
  v96(v65, AssociatedTypeWitness);
  uint64_t v67 = &v64[*((int *)v60 + 12)];
  v63(v64, v61, AssociatedTypeWitness);
  v63(v67, (char *)AssociatedConformanceWitness, AssociatedTypeWitness);
  uint64_t v68 = v76;
  v63(&v66[*((int *)v76 + 9)], v67, AssociatedTypeWitness);
  v96(v64, AssociatedTypeWitness);
  uint64_t v69 = v75;
  uint64_t v70 = v82;
  (*(void (**)(char *, char *, Class *))(v75 + 32))(v82, v66, v68);
  uint64_t v71 = v95;
  uint64_t v72 = v98;
  (*(void (**)(char *, uint64_t))(v92 + 88))(v70, v98);
  ((void (*)(char *, uint64_t))v87)(v71, v72);
  return (*(uint64_t (**)(char *, Class *))(v69 + 8))(v70, v68);
}

uint64_t Collection.prefix(while:)@<X0>(uint64_t (*a1)(char *)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int **a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v6 = v5;
  uint64_t v7 = (uint64_t)a4;
  char v103 = a1;
  uint64_t v104 = a2;
  uint64_t v86 = a5;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, a4, a3, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0, (uint64_t)AssociatedTypeWitness, (uint64_t)AssociatedTypeWitness, "lower upper ", 0);
  uint64_t v10 = MEMORY[0x1F4188790](TupleTypeMetadata2);
  uint64_t v84 = (char *)&v81 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10);
  uint64_t v81 = (char *)&v81 - v12;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v7, a3, (uint64_t)AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Collection, associated conformance descriptor for Collection.Collection.Index: Comparable);
  uint64_t v85 = type metadata accessor for Range(0, (uint64_t)AssociatedTypeWitness, AssociatedConformanceWitness, v14);
  uint64_t v83 = (uint64_t)*(v85 - 1);
  uint64_t v15 = MEMORY[0x1F4188790](v85);
  uint64_t v94 = (char *)&v81 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v15);
  uint64_t v82 = (char *)&v81 - v17;
  uint64_t v102 = swift_getAssociatedTypeWitness(0, *(int ***)(v7 + 8), a3, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
  uint64_t v18 = *((void *)v102 - 1);
  uint64_t v19 = MEMORY[0x1F4188790](v102);
  uint64_t v101 = (char *)&v81 - v20;
  unint64_t v114 = *(void **)(a3 - 8);
  uint64_t v21 = MEMORY[0x1F4188790](v19);
  unint64_t v112 = (char *)&v81 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = *((void *)AssociatedTypeWitness - 1);
  uint64_t v24 = MEMORY[0x1F4188790](v21);
  uint64_t v91 = (char *)&v81 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = MEMORY[0x1F4188790](v24);
  uint64_t v90 = (char *)&v81 - v27;
  uint64_t v28 = MEMORY[0x1F4188790](v26);
  uint64_t v92 = (char *)&v81 - v29;
  uint64_t v30 = MEMORY[0x1F4188790](v28);
  uint64_t v89 = (char *)&v81 - v31;
  uint64_t v32 = MEMORY[0x1F4188790](v30);
  uint64_t v111 = (char *)&v81 - v33;
  MEMORY[0x1F4188790](v32);
  uint64_t v35 = (char *)&v81 - v34;
  uint64_t v36 = *(void (**)(uint64_t, uint64_t))(v7 + 64);
  uint64_t v88 = v7 + 64;
  unint64_t v87 = v36;
  v36(a3, v7);
  uint64_t v109 = *(void (**)(uint64_t, uint64_t))(v7 + 72);
  uint64_t v93 = AssociatedConformanceWitness;
  uint64_t v37 = *(void *)(AssociatedConformanceWitness + 8);
  uint64_t v38 = v35;
  uint64_t v108 = (void (*)(char *, char *))v37;
  uint64_t v106 = *(uint64_t (**)(char *, char *, const char *, void (*)(void, void)))(v37 + 8);
  uint64_t v107 = v37 + 8;
  uint64_t v96 = v23;
  uint64_t v105 = (void (**)(char *, char *, uint64_t))(v114 + 2);
  uint64_t v100 = v7 + 80;
  uint64_t v99 = (void (**)(char *))(v18 + 16);
  ++v114;
  uint64_t v115 = (void (**)(char *, const char *))(v23 + 8);
  uint64_t v98 = (void (**)(char *, const char *))(v18 + 8);
  uint64_t v110 = v7 + 72;
  uint64_t v97 = v7 + 192;
  while (1)
  {
    uint64_t v39 = v111;
    v109(a3, v7);
    char v40 = v106(v38, v39, AssociatedTypeWitness, (void (*)(void, void))v108);
    uint64_t v41 = v39;
    uint64_t v42 = AssociatedTypeWitness;
    uint64_t v113 = *v115;
    v113(v41, AssociatedTypeWitness);
    uint64_t v43 = v112;
    uint64_t v44 = v6;
    (*v105)(v112, v6, a3);
    if (v40)
    {
      uint64_t v45 = v38;
      uint64_t v46 = v7;
      uint64_t v56 = (void (*)(char *, uint64_t))*v114;
      ((void (*)(char *, uint64_t))*v114)(v43, a3);
      goto LABEL_9;
    }
    uint64_t v45 = v38;
    uint64_t v46 = v7;
    uint64_t v47 = (void (*)(char *, void))(*(uint64_t (**)(char *, char *, uint64_t, uint64_t))(v7 + 80))(v116, v38, a3, v7);
    uint64_t v49 = v101;
    uint64_t v48 = v102;
    (*v99)(v101);
    v47(v116, 0);
    char v50 = v43;
    uint64_t v51 = (void (*)(char *, uint64_t))*v114;
    ((void (*)(char *, uint64_t))*v114)(v50, a3);
    uint64_t v52 = v117;
    char v53 = v103(v49);
    uint64_t v117 = v52;
    if (v52)
    {
      v51(v44, a3);
      (*v98)(v49, v48);
      return ((uint64_t (*)(char *, const char *))v113)(v45, v42);
    }
    char v54 = v53;
    (*v98)(v49, v48);
    if ((v54 & 1) == 0) {
      break;
    }
    uint64_t v7 = v46;
    uint64_t v38 = v45;
    uint64_t v55 = v45;
    uint64_t v6 = v44;
    (*(void (**)(char *, uint64_t, uint64_t))(v46 + 192))(v55, a3, v46);
    AssociatedTypeWitness = v42;
  }
  uint64_t v56 = v51;
LABEL_9:
  uint64_t v58 = v89;
  uint64_t v111 = v44;
  unint64_t v112 = (char *)a3;
  uint64_t v110 = v46;
  v87(a3, v46);
  uint64_t v59 = *(void (**)(char *, char *, const char *))(v96 + 16);
  uint64_t v60 = v92;
  uint64_t v61 = v45;
  uint64_t v62 = v58;
  v59(v92, v61, v42);
  uint64_t v63 = v90;
  v59(v90, v62, v42);
  uint64_t v64 = v91;
  uint64_t v109 = (void (*)(uint64_t, uint64_t))v59;
  v59(v91, v60, v42);
  if (((*(uint64_t (**)(char *, char *, const char *))(v93 + 24))(v63, v64, v42) & 1) == 0) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
  }
  uint64_t v108 = (void (*)(char *, char *))v56;
  uint64_t v65 = v113;
  v113(v64, v42);
  v65(v63, v42);
  v65(v61, v42);
  uint64_t v66 = TupleTypeMetadata2;
  uint64_t v67 = v81;
  uint64_t v68 = &v81[*((int *)TupleTypeMetadata2 + 12)];
  uint64_t v69 = *(void (**)(char *, char *, const char *))(v96 + 32);
  v69(v81, v62, v42);
  v69(v68, v60, v42);
  uint64_t v70 = v84;
  uint64_t v71 = &v84[*((int *)v66 + 12)];
  uint64_t v72 = (void (*)(char *, char *, const char *))v109;
  ((void (*)(char *, char *, const char *))v109)(v84, v67, v42);
  v72(v71, v68, v42);
  v69(v94, v70, v42);
  uint64_t v73 = v113;
  v113(v71, v42);
  uint64_t v74 = &v70[*((int *)TupleTypeMetadata2 + 12)];
  v69(v70, v67, v42);
  v69(v74, v68, v42);
  uint64_t v75 = v85;
  uint64_t v76 = v94;
  v69(&v94[*((int *)v85 + 9)], v74, v42);
  v73(v70, v42);
  uint64_t v77 = v83;
  uint64_t v78 = v82;
  (*(void (**)(char *, char *, Class *))(v83 + 32))(v82, v76, v75);
  uint64_t v79 = v111;
  uint64_t v80 = v112;
  (*(void (**)(char *, char *))(v110 + 88))(v78, v112);
  v108(v79, v80);
  return (*(uint64_t (**)(char *, Class *))(v77 + 8))(v78, v75);
}

uint64_t Collection.suffix(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v92 = a4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, (int **)a3, a2, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0, (uint64_t)AssociatedTypeWitness, (uint64_t)AssociatedTypeWitness, "lower upper ", 0);
  uint64_t v9 = MEMORY[0x1F4188790](TupleTypeMetadata2);
  uint64_t v91 = (char *)&v83 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  uint64_t v88 = (char *)&v83 - v11;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(a3, a2, (uint64_t)AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Collection, associated conformance descriptor for Collection.Collection.Index: Comparable);
  uint64_t v13 = type metadata accessor for Range(0, (uint64_t)AssociatedTypeWitness, AssociatedConformanceWitness, v12);
  uint64_t v14 = (uint64_t)*(v13 - 1);
  uint64_t v15 = MEMORY[0x1F4188790](v13);
  unint64_t v87 = (char *)&v83 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = MEMORY[0x1F4188790](v15);
  uint64_t v89 = (char *)&v83 - v18;
  uint64_t v107 = a2;
  uint64_t v106 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](v17);
  uint64_t v94 = (char *)&v83 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v101 = type metadata accessor for Optional(0, (uint64_t)AssociatedTypeWitness, v20, v21);
  uint64_t v93 = (uint64_t)*(v101 - 1);
  uint64_t v22 = MEMORY[0x1F4188790](v101);
  uint64_t v100 = (char *)&v83 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = MEMORY[0x1F4188790](v22);
  uint64_t v99 = *((void *)AssociatedTypeWitness - 1);
  uint64_t v25 = MEMORY[0x1F4188790](v24);
  uint64_t v97 = (char *)&v83 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = MEMORY[0x1F4188790](v25);
  uint64_t v96 = (char *)&v83 - v28;
  uint64_t v29 = MEMORY[0x1F4188790](v27);
  uint64_t v31 = (char *)&v83 - v30;
  uint64_t v32 = MEMORY[0x1F4188790](v29);
  uint64_t v34 = (char *)&v83 - v33;
  uint64_t v35 = MEMORY[0x1F4188790](v32);
  uint64_t v37 = (char *)&v83 - v36;
  MEMORY[0x1F4188790](v35);
  uint64_t v95 = (char *)&v83 - v39;
  if (a1 < 0) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't take a suffix of negative length from a collection", 56, 2, "Swift/Collection.swift", 22, 2, 0x560uLL, 0);
  }
  uint64_t v40 = a1;
  uint64_t v41 = v14;
  uint64_t v42 = v38;
  uint64_t v43 = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 112))(v107, a3);
  if (__OFSUB__(v43, v40))
  {
    __break(1u);
    goto LABEL_10;
  }
  uint64_t v105 = v31;
  uint64_t v83 = v41;
  uint64_t v84 = v13;
  uint64_t v44 = (v43 - v40) & ~((v43 - v40) >> 63);
  uint64_t v45 = *(void (**)(uint64_t, uint64_t))(a3 + 64);
  uint64_t v46 = a3;
  uint64_t v47 = v107;
  v45(v107, v46);
  uint64_t v48 = *(void (**)(uint64_t, uint64_t))(v46 + 72);
  uint64_t v86 = v46 + 72;
  uint64_t v85 = v48;
  v48(v47, v46);
  uint64_t v49 = v42;
  (*(void (**)(char *, uint64_t, char *, uint64_t, uint64_t))(v46 + 144))(v37, v44, v34, v47, v46);
  uint64_t v50 = v99;
  uint64_t v51 = v99 + 8;
  uint64_t v52 = *(void (**)(char *, const char *))(v99 + 8);
  v52(v34, AssociatedTypeWitness);
  uint64_t v102 = v52;
  uint64_t v103 = v51;
  v52(v37, AssociatedTypeWitness);
  uint64_t v53 = v50;
  char v54 = *(void (**)(char *, uint64_t, uint64_t))(v106 + 16);
  uint64_t v55 = v94;
  uint64_t v104 = v4;
  v54(v94, v4, v47);
  uint64_t v56 = v93;
  uint64_t v57 = v100;
  (*(void (**)(char *, uint64_t, Class *))(v93 + 32))(v100, v49, v101);
  if ((*(unsigned int (**)(char *, uint64_t, const char *))(v53 + 48))(v57, 1, AssociatedTypeWitness) == 1)
  {
    uint64_t v58 = v95;
    uint64_t v59 = v107;
    uint64_t v60 = v85;
    v85(v107, v46);
    uint64_t v94 = *(char **)(v106 + 8);
    ((void (*)(char *, uint64_t))v94)(v55, v59);
    (*(void (**)(char *, Class *))(v56 + 8))(v100, v101);
    uint64_t v61 = v96;
    uint64_t v62 = v60;
    uint64_t v53 = v99;
  }
  else
  {
    uint64_t v94 = *(char **)(v106 + 8);
    ((void (*)(char *, uint64_t))v94)(v55, v107);
    uint64_t v58 = v95;
    (*(void (**)(char *, char *, const char *))(v53 + 32))(v95, v57, AssociatedTypeWitness);
    uint64_t v61 = v96;
    uint64_t v62 = v85;
  }
  uint64_t v63 = v105;
  v62(v107, v46);
  uint64_t v64 = *(void (**)(char *, char *, const char *))(v53 + 16);
  v64(v61, v58, AssociatedTypeWitness);
  uint64_t v65 = v97;
  v64(v97, v63, AssociatedTypeWitness);
  if (((*(uint64_t (**)(char *, char *, const char *))(AssociatedConformanceWitness + 24))(v61, v65, AssociatedTypeWitness) & 1) == 0)LABEL_10:_assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0); {
  uint64_t v66 = v102;
  }
  uint64_t v101 = (Class *)v46;
  v102(v65, AssociatedTypeWitness);
  v66(v61, AssociatedTypeWitness);
  uint64_t v67 = TupleTypeMetadata2;
  uint64_t v68 = v58;
  uint64_t v69 = v88;
  uint64_t v70 = &v88[*((int *)TupleTypeMetadata2 + 12)];
  uint64_t v71 = *(void (**)(char *, char *, const char *))(v53 + 32);
  v71(v88, v68, AssociatedTypeWitness);
  uint64_t v100 = v70;
  v71(v70, v105, AssociatedTypeWitness);
  uint64_t v72 = v91;
  uint64_t v73 = &v91[*((int *)v67 + 12)];
  v64(v91, v69, AssociatedTypeWitness);
  v64(v73, v70, AssociatedTypeWitness);
  uint64_t v74 = v87;
  v71(v87, v72, AssociatedTypeWitness);
  uint64_t v75 = v102;
  v102(v73, AssociatedTypeWitness);
  uint64_t v76 = &v72[*((int *)v67 + 12)];
  v71(v72, v69, AssociatedTypeWitness);
  v71(v76, v100, AssociatedTypeWitness);
  uint64_t v77 = v84;
  v71(&v74[*((int *)v84 + 9)], v76, AssociatedTypeWitness);
  v75(v72, AssociatedTypeWitness);
  uint64_t v78 = v83;
  uint64_t v79 = v89;
  (*(void (**)(char *, char *, Class *))(v83 + 32))(v89, v74, v77);
  uint64_t v80 = v104;
  uint64_t v81 = v107;
  ((void (*)(char *, uint64_t))v101[11])(v79, v107);
  ((void (*)(uint64_t, uint64_t))v94)(v80, v81);
  return (*(uint64_t (**)(char *, Class *))(v78 + 8))(v79, v77);
}

uint64_t specialized Collection.prefix(upTo:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 < 0) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
  }
  if (a3 < a1) {
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x266uLL, 0);
  }
  return 0;
}

uint64_t Collection.prefix(upTo:)@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v59 = a1;
  uint64_t v55 = a4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, (int **)a3, a2, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0, (uint64_t)AssociatedTypeWitness, (uint64_t)AssociatedTypeWitness, "lower upper ", 0);
  uint64_t v8 = MEMORY[0x1F4188790](TupleTypeMetadata2);
  char v54 = (char *)&v46 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = MEMORY[0x1F4188790](v8);
  uint64_t v50 = (char *)&v46 - v11;
  uint64_t v12 = *((void *)AssociatedTypeWitness - 1);
  uint64_t v13 = MEMORY[0x1F4188790](v10);
  uint64_t v15 = (char *)&v46 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = MEMORY[0x1F4188790](v13);
  uint64_t v18 = (char *)&v46 - v17;
  MEMORY[0x1F4188790](v16);
  uint64_t v20 = (char *)&v46 - v19;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(a3, a2, (uint64_t)AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Collection, associated conformance descriptor for Collection.Collection.Index: Comparable);
  uint64_t v23 = type metadata accessor for Range(0, (uint64_t)AssociatedTypeWitness, AssociatedConformanceWitness, v22);
  uint64_t v51 = (uint64_t)*(v23 - 1);
  uint64_t v52 = v23;
  uint64_t v24 = MEMORY[0x1F4188790](v23);
  uint64_t v48 = (char *)&v46 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v24);
  uint64_t v49 = (char *)&v46 - v26;
  uint64_t v27 = *(void (**)(uint64_t, uint64_t))(a3 + 64);
  uint64_t v53 = v4;
  uint64_t v56 = a3;
  uint64_t v57 = a2;
  v27(a2, a3);
  uint64_t v28 = *(void (**)(char *, char *, const char *))(v12 + 16);
  v28(v18, v20, AssociatedTypeWitness);
  v28(v15, v59, AssociatedTypeWitness);
  if (((*(uint64_t (**)(char *, char *, const char *, uint64_t))(AssociatedConformanceWitness + 24))(v18, v15, AssociatedTypeWitness, AssociatedConformanceWitness) & 1) == 0)_assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0); {
  uint64_t v29 = v12;
  }
  uint64_t v30 = *(void (**)(char *, const char *))(v12 + 8);
  uint64_t v47 = v30;
  v30(v15, AssociatedTypeWitness);
  v30(v18, AssociatedTypeWitness);
  uint64_t v31 = TupleTypeMetadata2;
  uint64_t v32 = v50;
  uint64_t v33 = &v50[*((int *)TupleTypeMetadata2 + 12)];
  uint64_t v34 = *(void (**)(char *, char *, const char *))(v29 + 32);
  v34(v50, v20, AssociatedTypeWitness);
  v28(v33, v59, AssociatedTypeWitness);
  uint64_t v35 = v54;
  uint64_t v36 = &v54[*((int *)v31 + 12)];
  v28(v54, v32, AssociatedTypeWitness);
  v28(v36, v33, AssociatedTypeWitness);
  uint64_t v37 = v48;
  v34(v48, v35, AssociatedTypeWitness);
  uint64_t v38 = v47;
  v47(v36, AssociatedTypeWitness);
  uint64_t v39 = &v35[*((int *)TupleTypeMetadata2 + 12)];
  v34(v35, v32, AssociatedTypeWitness);
  v34(v39, v33, AssociatedTypeWitness);
  uint64_t v40 = v52;
  v34(&v37[*((int *)v52 + 9)], v39, AssociatedTypeWitness);
  v38(v35, AssociatedTypeWitness);
  uint64_t v41 = v51;
  uint64_t v42 = v49;
  (*(void (**)(char *, char *, Class *))(v51 + 32))(v49, v37, v40);
  uint64_t v43 = v53;
  uint64_t v44 = v57;
  (*(void (**)(char *, uint64_t))(v56 + 88))(v42, v57);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v44 - 8) + 8))(v43, v44);
  return (*(uint64_t (**)(char *, Class *))(v41 + 8))(v42, v40);
}

uint64_t Collection.suffix(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v59 = a1;
  uint64_t v55 = a4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, (int **)a3, a2, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0, (uint64_t)AssociatedTypeWitness, (uint64_t)AssociatedTypeWitness, "lower upper ", 0);
  uint64_t v8 = MEMORY[0x1F4188790](TupleTypeMetadata2);
  char v54 = (char *)&v46 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = MEMORY[0x1F4188790](v8);
  uint64_t v51 = (char *)&v46 - v11;
  uint64_t v12 = (void *)*((void *)AssociatedTypeWitness - 1);
  uint64_t v13 = MEMORY[0x1F4188790](v10);
  uint64_t v15 = (char *)&v46 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = MEMORY[0x1F4188790](v13);
  uint64_t v18 = (char *)&v46 - v17;
  MEMORY[0x1F4188790](v16);
  uint64_t v20 = (char *)&v46 - v19;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(a3, a2, (uint64_t)AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Collection, associated conformance descriptor for Collection.Collection.Index: Comparable);
  uint64_t v23 = type metadata accessor for Range(0, (uint64_t)AssociatedTypeWitness, AssociatedConformanceWitness, v22);
  uint64_t v52 = (uint64_t)*(v23 - 1);
  uint64_t v53 = v23;
  uint64_t v24 = MEMORY[0x1F4188790](v23);
  uint64_t v49 = (char *)&v46 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v24);
  uint64_t v50 = (char *)&v46 - v26;
  uint64_t v27 = *(void (**)(uint64_t, uint64_t))(a3 + 72);
  uint64_t v28 = v4;
  uint64_t v56 = a3;
  uint64_t v57 = a2;
  v27(a2, a3);
  uint64_t v29 = (void (*)(char *, uint64_t, const char *))v12[2];
  v29(v18, v59, AssociatedTypeWitness);
  v29(v15, (uint64_t)v20, AssociatedTypeWitness);
  if (((*(uint64_t (**)(char *, char *, const char *, uint64_t))(AssociatedConformanceWitness + 24))(v18, v15, AssociatedTypeWitness, AssociatedConformanceWitness) & 1) == 0)_assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0); {
  uint64_t v30 = (void (*)(char *, const char *))v12[1];
  }
  uint64_t v47 = v30;
  uint64_t v48 = v28;
  v30(v15, AssociatedTypeWitness);
  v30(v18, AssociatedTypeWitness);
  uint64_t v31 = TupleTypeMetadata2;
  uint64_t v32 = v51;
  uint64_t v33 = &v51[*((int *)TupleTypeMetadata2 + 12)];
  v29(v51, v59, AssociatedTypeWitness);
  uint64_t v34 = (void (*)(char *, char *, const char *))v12[4];
  uint64_t v46 = v33;
  v34(v33, v20, AssociatedTypeWitness);
  uint64_t v35 = v54;
  uint64_t v36 = &v54[*((int *)v31 + 12)];
  v29(v54, (uint64_t)v32, AssociatedTypeWitness);
  v29(v36, (uint64_t)v33, AssociatedTypeWitness);
  uint64_t v37 = v49;
  v34(v49, v35, AssociatedTypeWitness);
  uint64_t v38 = v47;
  v47(v36, AssociatedTypeWitness);
  uint64_t v39 = &v35[*((int *)TupleTypeMetadata2 + 12)];
  v34(v35, v32, AssociatedTypeWitness);
  v34(v39, v46, AssociatedTypeWitness);
  uint64_t v40 = v53;
  v34(&v37[*((int *)v53 + 9)], v39, AssociatedTypeWitness);
  v38(v35, AssociatedTypeWitness);
  uint64_t v41 = v52;
  uint64_t v42 = v50;
  (*(void (**)(char *, char *, Class *))(v52 + 32))(v50, v37, v40);
  uint64_t v43 = v48;
  uint64_t v44 = v57;
  (*(void (**)(char *, uint64_t))(v56 + 88))(v42, v57);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v44 - 8) + 8))(v43, v44);
  return (*(uint64_t (**)(char *, Class *))(v41 + 8))(v42, v40);
}

uint64_t Collection.prefix(through:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (int **)a3, a2, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  uint64_t v10 = *((void *)AssociatedTypeWitness - 1);
  uint64_t v11 = MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v13 = (char *)&v17 - v12;
  uint64_t v14 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](v11);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))((char *)&v17 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0), v4, a2);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(a3 + 184))(a1, a2, a3);
  (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v4, a2);
  Collection.prefix(upTo:)(v13, a2, a3, a4);
  return (*(uint64_t (**)(char *, const char *))(v10 + 8))(v13, AssociatedTypeWitness);
}

uint64_t static SignedInteger<>.max.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 - 8);
  uint64_t v5 = MEMORY[0x1F4188790](a1);
  uint64_t v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t))(v8 + 72))(v5);
  (*(void (**)(char *, uint64_t))(*(void *)(a2 + 8) + 184))(v7, a1);
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v7, a1);
}

void (*Collection.split(maxSplits:omittingEmptySubsequences:whereSeparator:)(uint64_t a1, int a2, char *a3, void (*a4)(char *, const char *), uint64_t a5, int **a6))(uint64_t, const char *)
{
  uint64_t v6 = (uint64_t)a6;
  uint64_t v7 = a5;
  uint64_t v140 = a3;
  char v141 = a4;
  int v136 = a2;
  AssociatedTypeWitness = (uint64_t *)swift_getAssociatedTypeWitness(0, a6, a5, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.SubSequence);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v11 = (char *)&v105 - v10;
  uint64_t v12 = swift_getAssociatedTypeWitness(255, (int **)v6, v7, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0, (uint64_t)v12, (uint64_t)v12, "lower upper ", 0);
  uint64_t v13 = MEMORY[0x1F4188790](TupleTypeMetadata2);
  uint64_t v110 = (char *)&v105 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v13);
  unint64_t v114 = (char *)&v105 - v15;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v6, v7, (uint64_t)v12, (uint64_t)&protocol requirements base descriptor for Collection, associated conformance descriptor for Collection.Collection.Index: Comparable);
  uint64_t v116 = type metadata accessor for Range(0, (uint64_t)v12, AssociatedConformanceWitness, v16);
  uint64_t v111 = (uint64_t)*(v116 - 1);
  uint64_t v17 = MEMORY[0x1F4188790](v116);
  uint64_t v108 = (char *)&v105 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v17);
  uint64_t v109 = (char *)&v105 - v19;
  id v139 = swift_getAssociatedTypeWitness(0, *(int ***)(v6 + 8), v7, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
  MEMORY[0x1F4188790](v139);
  uint64_t v21 = MEMORY[0x1F4188790]((char *)&v105 - v20);
  uint64_t v22 = MEMORY[0x1F4188790](v21);
  uint64_t v24 = (char *)&v105 - v23;
  uint64_t v25 = MEMORY[0x1F4188790](v22);
  uint64_t v26 = MEMORY[0x1F4188790](v25);
  id v142 = (char *)&v105 - v27;
  uint64_t v28 = MEMORY[0x1F4188790](v26);
  uint64_t v30 = (char *)&v105 - v29;
  uint64_t v31 = MEMORY[0x1F4188790](v28);
  uint64_t v135 = (char *)&v105 - v32;
  uint64_t v33 = *(void *)(v7 - 8);
  uint64_t v34 = MEMORY[0x1F4188790](v31);
  uint64_t v40 = (char *)&v105 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v130 = a1;
  if (a1 < 0) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Must take zero or more splits", 29, 2, "Swift/Collection.swift", 22, 2, 0x610uLL, 0);
  }
  uint64_t v127 = v35;
  uint64_t v138 = v34;
  unint64_t v112 = v24;
  uint64_t v107 = v38;
  uint64_t v113 = v37;
  uint64_t v126 = v36;
  uint64_t v106 = v11;
  uint64_t v41 = swift_allocObject(qword_1EC9F2938, 0x18uLL, 7uLL);
  uint64_t v42 = (uint64_t)v145;
  uint64_t v124 = AssociatedTypeWitness;
  _swift_isClassOrObjCExistentialType((uint64_t)AssociatedTypeWitness, AssociatedTypeWitness);
  uint64_t v137 = (char *)v41;
  v41[2] = &_swiftEmptyArrayStorage;
  uint64_t v123 = v41 + 2;
  uint64_t v43 = swift_allocBox((unint64_t)v12);
  uint64_t v44 = *(void (**)(uint64_t, uint64_t))(v6 + 64);
  uint64_t v134 = v45;
  v44(v7, v6);
  (*(void (**)(char *, uint64_t, uint64_t))(v33 + 16))(v40, v42, v7);
  if (!v130)
  {
    uint64_t v49 = *(void (**)(char *, uint64_t))(v33 + 8);
    v49(v40, v7);
    goto LABEL_6;
  }
  char v46 = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 104))(v7, v6);
  uint64_t v48 = *(void (**)(char *, uint64_t))(v33 + 8);
  uint64_t v47 = v33 + 8;
  uint64_t v117 = v48;
  v48(v40, v7);
  if (v46)
  {
    uint64_t v49 = v117;
LABEL_6:
    uint64_t v50 = (uint64_t)v135;
    uint64_t v51 = (uint64_t)v145;
    (*(void (**)(uint64_t, uint64_t))(v6 + 72))(v7, v6);
    uint64_t v52 = v137;
    appendSubsequence #1 <A>(end:) in Collection.split(maxSplits:omittingEmptySubsequences:whereSeparator:)(v50, (uint64_t)v43, v136 & 1, v137, v51, v7, (int **)v6);
    v49((char *)v51, v7);
    (*(void (**)(uint64_t, const char *))(v126 + 8))(v50, v12);
    uint64_t v53 = (void (*)(uint64_t, const char *))*((void *)v52 + 2);
    swift_bridgeObjectRetain((unint64_t)v53);
    swift_release((uint64_t)v52);
LABEL_22:
    swift_release((uint64_t)v43);
    return v53;
  }
  uint64_t v105 = v47;
  unint64_t v125 = v43;
  uint64_t v54 = v126;
  uint64_t v55 = *(void (**)(char *, uint64_t, const char *))(v126 + 16);
  uint64_t v122 = v126 + 16;
  int8x8_t v121 = v55;
  v55(v30, v134, v12);
  uint64_t v56 = v142;
  (*(void (**)(uint64_t, uint64_t))(v6 + 72))(v7, v6);
  uint64_t v57 = *(void *)(AssociatedConformanceWitness + 8);
  uint64_t v58 = *(uint64_t (**)(uint64_t, char *, const char *, uint64_t))(v57 + 8);
  uint64_t v132 = v57 + 8;
  uint64_t v133 = v57;
  uint64_t v131 = v58;
  if (((uint64_t (*)(char *, char *, const char *))v58)(v30, v56, v12))
  {
LABEL_8:
    uint64_t v59 = v142;
    if (v131(v134, v142, v12, v133) & 1) != 0 && (v136)
    {
      v117(v145, v7);
      uint64_t v60 = *(void (**)(char *, const char *))(v126 + 8);
      v60(v59, v12);
      v60(v30, v12);
    }
    else
    {
      uint64_t v80 = v113;
      uint64_t v81 = v121;
      v121(v113, v134, v12);
      uint64_t v82 = v112;
      v81(v112, (uint64_t)v80, v12);
      uint64_t v83 = v107;
      v81(v107, (uint64_t)v59, v12);
      if (((*(uint64_t (**)(char *, char *, const char *))(AssociatedConformanceWitness + 24))(v82, v83, v12) & 1) == 0) {
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
      }
      uint64_t v84 = v126;
      uint64_t v85 = *(void (**)(char *, const char *))(v126 + 8);
      id v139 = (const char *)(v126 + 8);
      char v141 = v85;
      v85(v83, v12);
      v85(v112, v12);
      v85(v30, v12);
      uint64_t v86 = TupleTypeMetadata2;
      unint64_t v87 = v114;
      uint64_t v140 = &v114[*((int *)TupleTypeMetadata2 + 12)];
      uint64_t v88 = v140;
      uint64_t v89 = *(void (**)(char *, uint64_t, const char *))(v84 + 32);
      v89(v114, (uint64_t)v113, v12);
      v89(v88, (uint64_t)v142, v12);
      uint64_t v90 = v110;
      uint64_t v91 = &v110[*((int *)v86 + 12)];
      uint64_t v92 = (void (*)(char *, char *, const char *))v121;
      v121(v110, (uint64_t)v87, v12);
      v92(v91, v140, v12);
      uint64_t v93 = v108;
      v89(v108, (uint64_t)v90, v12);
      v141(v91, v12);
      uint64_t v94 = &v90[*((int *)TupleTypeMetadata2 + 12)];
      v89(v90, (uint64_t)v114, v12);
      v89(v94, (uint64_t)v140, v12);
      v89(&v93[*((int *)v116 + 9)], (uint64_t)v94, v12);
      v141(v90, v12);
      uint64_t v95 = v111;
      uint64_t v96 = v109;
      uint64_t v97 = v116;
      (*(void (**)(char *, char *, Class *))(v111 + 32))(v109, v93, v116);
      uint64_t v98 = (uint64_t)v106;
      uint64_t v99 = (uint64_t)v145;
      (*(void (**)(char *, uint64_t, uint64_t))(v6 + 88))(v96, v7, v6);
      v117((char *)v99, v7);
      (*(void (**)(char *, Class *))(v95 + 8))(v96, v97);
      uint64_t v102 = type metadata accessor for Array(0, (uint64_t)v124, v100, v101);
      Array.append(_:)(v98, (uint64_t)v102);
    }
    uint64_t v103 = v137;
    uint64_t v53 = (void (*)(uint64_t, const char *))*((void *)v137 + 2);
    swift_bridgeObjectRetain((unint64_t)v53);
    swift_release((uint64_t)v103);
    uint64_t v43 = v125;
    goto LABEL_22;
  }
  uint64_t v62 = v6 + 80;
  uint64_t v61 = *(uint64_t (**)(char *, char *, uint64_t, uint64_t))(v6 + 80);
  uint64_t v128 = (void (**)(uint64_t))(v127 + 16);
  uint64_t v129 = v61;
  uint64_t v63 = (void (**)(uint64_t, const char *))(v127 + 8);
  uint64_t v127 = v6 + 192;
  uint64_t v119 = (void (**)(uint64_t, const char *))(v54 + 8);
  uint64_t v118 = (void (**)(uint64_t, char *, const char *))(v54 + 24);
  while (1)
  {
    uint64_t v64 = v7;
    uint64_t v65 = (void (*)(char *, void))v129(v144, v30, v7, v6);
    uint64_t v67 = v138;
    uint64_t v66 = v139;
    (*v128)(v138);
    v65(v144, 0);
    uint64_t v68 = v143;
    char v69 = ((uint64_t (*)(uint64_t))v140)(v67);
    uint64_t v143 = v68;
    if (v68) {
      break;
    }
    char v70 = v69;
    (*v63)(v67, v66);
    if (v70)
    {
      uint64_t v71 = v62;
      uint64_t v72 = v63;
      uint64_t v73 = v30;
      uint64_t v74 = (int **)v6;
      uint64_t v75 = (uint64_t)v135;
      v121(v135, (uint64_t)v73, v12);
      BOOL v76 = appendSubsequence #1 <A>(end:) in Collection.split(maxSplits:omittingEmptySubsequences:whereSeparator:)(v75, (uint64_t)v125, v136 & 1, v137, (uint64_t)v145, v64, v74);
      uint64_t v77 = v75;
      uint64_t v6 = (uint64_t)v74;
      uint64_t v30 = v73;
      uint64_t v63 = v72;
      uint64_t v62 = v71;
      uint64_t v7 = v64;
      (*v119)(v77, v12);
      (*(void (**)(char *, uint64_t, uint64_t))(v6 + 192))(v30, v64, v6);
      (*v118)(v134, v30, v12);
      if (v76)
      {
        uint64_t v78 = *v123;
        swift_bridgeObjectRetain(*v123);
        Swift::Int v79 = Array._getCount()();
        swift_bridgeObjectRelease(v78);
        if (v79 == v130) {
          goto LABEL_8;
        }
      }
    }
    else
    {
      uint64_t v7 = v64;
      (*(void (**)(char *, uint64_t, uint64_t))(v6 + 192))(v30, v64, v6);
    }
    if (v131((uint64_t)v30, v142, v12, v133)) {
      goto LABEL_8;
    }
  }
  v117(v145, v64);
  (*v63)(v67, v66);
  uint64_t v53 = *v119;
  (*v119)((uint64_t)v142, v12);
  v53((uint64_t)v30, v12);
  swift_release((uint64_t)v137);
  swift_release((uint64_t)v125);
  return v53;
}

BOOL appendSubsequence #1 <A>(end:) in Collection.split(maxSplits:omittingEmptySubsequences:whereSeparator:)(uint64_t a1, uint64_t a2, int a3, char *a4, uint64_t a5, uint64_t a6, int **a7)
{
  uint64_t v67 = a5;
  uint64_t v61 = a4;
  int v74 = a3;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, a7, a6, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.SubSequence);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v65 = (char *)&v58 - v11;
  uint64_t v12 = swift_getAssociatedTypeWitness(255, a7, a6, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0, (uint64_t)v12, (uint64_t)v12, "lower upper ", 0);
  uint64_t v13 = MEMORY[0x1F4188790](TupleTypeMetadata2);
  uint64_t v64 = (char *)&v58 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v13);
  uint64_t v59 = (char *)&v58 - v15;
  uint64_t v68 = a6;
  char v69 = a7;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness((uint64_t)a7, a6, (uint64_t)v12, (uint64_t)&protocol requirements base descriptor for Collection, associated conformance descriptor for Collection.Collection.Index: Comparable);
  uint64_t v18 = type metadata accessor for Range(0, (uint64_t)v12, AssociatedConformanceWitness, v17);
  uint64_t v62 = (uint64_t)*(v18 - 1);
  uint64_t v63 = v18;
  uint64_t v19 = MEMORY[0x1F4188790](v18);
  uint64_t v58 = (char *)&v58 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = MEMORY[0x1F4188790](v19);
  uint64_t v60 = (char *)&v58 - v22;
  uint64_t v23 = (void *)*((void *)v12 - 1);
  uint64_t v24 = MEMORY[0x1F4188790](v21);
  uint64_t v26 = (char *)&v58 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = MEMORY[0x1F4188790](v24);
  uint64_t v29 = (char *)&v58 - v28;
  uint64_t v30 = MEMORY[0x1F4188790](v27);
  uint64_t v72 = (char *)&v58 - v31;
  MEMORY[0x1F4188790](v30);
  uint64_t v36 = (char *)&v58 - v32;
  uint64_t v33 = swift_projectBox(a2);
  uint64_t v34 = (void (*)(char *, uint64_t, const char *))v23[2];
  v34(v36, v33, v12);
  uint64_t v70 = AssociatedConformanceWitness;
  uint64_t v35 = *(uint64_t (**)(char *, uint64_t, const char *))(*(void *)(AssociatedConformanceWitness + 8) + 8);
  uint64_t v73 = a1;
  LODWORD(AssociatedConformanceWitness) = v35(v36, a1, v12);
  uint64_t v75 = (void (*)(char *, const char *))v23[1];
  v75(v36, v12);
  LODWORD(v36) = AssociatedConformanceWitness & v74;
  if ((AssociatedConformanceWitness & v74 & 1) == 0)
  {
    uint64_t v37 = v72;
    v34(v72, v33, v12);
    v34(v29, (uint64_t)v37, v12);
    v34(v26, v73, v12);
    if (((*(uint64_t (**)(char *, char *, const char *))(v70 + 24))(v29, v26, v12) & 1) == 0) {
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
    }
    uint64_t v70 = (uint64_t)(v61 + 16);
    uint64_t v38 = v26;
    uint64_t v39 = v75;
    v75(v38, v12);
    v39(v29, v12);
    uint64_t v40 = *((int *)TupleTypeMetadata2 + 12);
    uint64_t v41 = TupleTypeMetadata2;
    int v74 = (int)v36;
    uint64_t v42 = v59;
    uint64_t v43 = &v59[v40];
    uint64_t v44 = (void (*)(char *, char *, const char *))v23[4];
    v44(v59, v72, v12);
    uint64_t v61 = v43;
    v34(v43, v73, v12);
    uint64_t v45 = *((int *)v41 + 12);
    char v46 = v64;
    uint64_t v47 = &v64[v45];
    v34(v64, (uint64_t)v42, v12);
    v34(v47, (uint64_t)v43, v12);
    uint64_t v48 = v58;
    v44(v58, v46, v12);
    v75(v47, v12);
    uint64_t v49 = &v46[*((int *)TupleTypeMetadata2 + 12)];
    v44(v46, v42, v12);
    v44(v49, v61, v12);
    uint64_t v50 = v63;
    v44(&v48[*((int *)v63 + 9)], v49, v12);
    v75(v46, v12);
    uint64_t v51 = v62;
    uint64_t v52 = v60;
    (*(void (**)(char *, char *, Class *))(v62 + 32))(v60, v48, v50);
    uint64_t v36 = v65;
    ((void (*)(char *, uint64_t))v69[11])(v52, v68);
    (*(void (**)(char *, Class *))(v51 + 8))(v52, v50);
    uint64_t v55 = type metadata accessor for Array(0, (uint64_t)AssociatedTypeWitness, v53, v54);
    uint64_t v56 = (uint64_t)v36;
    LOBYTE(v36) = v74;
    Array.append(_:)(v56, (uint64_t)v55);
  }
  return (v36 & 1) == 0;
}

uint64_t Collection<>.split(separator:maxSplits:omittingEmptySubsequences:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return Collection<>.split(separator:maxSplits:omittingEmptySubsequences:)(a1, a2, a3, a4, a5, a6, (uint64_t)partial apply for closure #1 in Collection<>.split(separator:maxSplits:omittingEmptySubsequences:), (uint64_t (*)(uint64_t, uint64_t, uint64_t, unsigned char *, uint64_t, uint64_t))Collection.split(maxSplits:omittingEmptySubsequences:whereSeparator:));
}

uint64_t Collection<>.removeFirst()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v85 = a3;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, (int **)a2, a1, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0, (uint64_t)AssociatedTypeWitness, (uint64_t)AssociatedTypeWitness, "lower upper ", 0);
  uint64_t v7 = MEMORY[0x1F4188790](TupleTypeMetadata2);
  uint64_t v9 = (char *)&v69 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = MEMORY[0x1F4188790](v7);
  BOOL v76 = (char *)&v69 - v11;
  uint64_t v82 = *((void *)AssociatedTypeWitness - 1);
  uint64_t v12 = MEMORY[0x1F4188790](v10);
  uint64_t v80 = (void (**)(char *, uint64_t))((char *)&v69 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  Swift::Int v79 = (char *)&v69 - v15;
  uint64_t v16 = MEMORY[0x1F4188790](v14);
  uint64_t v81 = (char *)&v69 - v17;
  uint64_t v18 = MEMORY[0x1F4188790](v16);
  uint64_t v20 = (char *)&v69 - v19;
  MEMORY[0x1F4188790](v18);
  uint64_t v78 = (char *)&v69 - v21;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(a2, a1, (uint64_t)AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Collection, associated conformance descriptor for Collection.Collection.Index: Comparable);
  uint64_t v24 = type metadata accessor for Range(0, (uint64_t)AssociatedTypeWitness, AssociatedConformanceWitness, v23);
  uint64_t v74 = (uint64_t)*(v24 - 1);
  uint64_t v75 = v24;
  uint64_t v25 = MEMORY[0x1F4188790](v24);
  uint64_t v72 = (char *)&v69 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = MEMORY[0x1F4188790](v25);
  uint64_t v73 = (char *)&v69 - v28;
  uint64_t v86 = *(void *)(a1 - 8);
  MEMORY[0x1F4188790](v27);
  uint64_t v30 = (char *)&v69 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = swift_getAssociatedTypeWitness(255, *(int ***)(a2 + 8), a1, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
  uint64_t v34 = type metadata accessor for Optional(0, (uint64_t)v31, v32, v33);
  MEMORY[0x1F4188790](v34 - 1);
  uint64_t v36 = (char *)&v69 - v35;
  uint64_t v37 = *(uint64_t (**)(uint64_t, uint64_t))(a2 + 104);
  uint64_t v87 = v3;
  if (v37(a1, a2)) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't remove items from an empty collection", 43, 2, "Swift/Collection.swift", 22, 2, 0x682uLL, 0);
  }
  uint64_t v70 = v9;
  uint64_t v71 = (uint64_t (**)(char *, char *, const char *))AssociatedConformanceWitness;
  Collection.first.getter(a1, a2, (uint64_t)v36);
  uint64_t v38 = *((void *)v31 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, const char *))(v38 + 48))(v36, 1, v31) == 1) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/Collection.swift", 22, 2, 0x683uLL, 0);
  }
  (*(void (**)(uint64_t, char *, const char *))(v38 + 32))(v85, v36, v31);
  uint64_t v39 = *(void (**)(char *, uint64_t, uint64_t))(v86 + 16);
  char v69 = v30;
  v39(v30, v87, a1);
  (*(void (**)(uint64_t, uint64_t))(a2 + 64))(a1, a2);
  uint64_t v40 = v78;
  (*(void (**)(char *, uint64_t, uint64_t))(a2 + 184))(v20, a1, a2);
  uint64_t v41 = v82;
  uint64_t v84 = *(void (**)(char *, const char *))(v82 + 8);
  uint64_t v85 = v82 + 8;
  v84(v20, AssociatedTypeWitness);
  uint64_t v42 = *(void (**)(uint64_t, uint64_t))(a2 + 72);
  uint64_t v83 = a1;
  uint64_t v43 = a1;
  uint64_t v44 = v81;
  v42(v43, a2);
  uint64_t v45 = *(void (**)(char *, char *, const char *))(v41 + 16);
  char v46 = v79;
  v45(v79, v40, AssociatedTypeWitness);
  uint64_t v47 = (char *)v80;
  v45((char *)v80, v44, AssociatedTypeWitness);
  if ((v71[3](v46, v47, AssociatedTypeWitness) & 1) == 0) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
  }
  uint64_t v48 = *(uint64_t (***)(char *, char *, const char *))(v86 + 8);
  v86 += 8;
  uint64_t v71 = v48;
  ((void (*)(uint64_t, uint64_t))v48)(v87, v83);
  uint64_t v49 = v47;
  uint64_t v50 = v84;
  v84(v49, AssociatedTypeWitness);
  v50(v46, AssociatedTypeWitness);
  uint64_t v80 = (void (**)(char *, uint64_t))a2;
  uint64_t v51 = TupleTypeMetadata2;
  uint64_t v52 = v45;
  uint64_t v53 = v44;
  uint64_t v54 = v76;
  uint64_t v55 = &v76[*((int *)TupleTypeMetadata2 + 12)];
  uint64_t v56 = *(void (**)(char *, char *, const char *))(v41 + 32);
  v56(v76, v40, AssociatedTypeWitness);
  uint64_t v57 = v55;
  Swift::Int v79 = v55;
  v56(v55, v53, AssociatedTypeWitness);
  uint64_t v58 = v70;
  uint64_t v59 = &v70[*((int *)v51 + 12)];
  v52(v70, v54, AssociatedTypeWitness);
  v52(v59, v57, AssociatedTypeWitness);
  uint64_t v60 = v72;
  v56(v72, v58, AssociatedTypeWitness);
  uint64_t v61 = v84;
  v84(v59, AssociatedTypeWitness);
  uint64_t v62 = &v58[*((int *)v51 + 12)];
  v56(v58, v54, AssociatedTypeWitness);
  v56(v62, v79, AssociatedTypeWitness);
  uint64_t v63 = v75;
  v56(&v60[*((int *)v75 + 9)], v62, AssociatedTypeWitness);
  v61(v58, AssociatedTypeWitness);
  uint64_t v65 = v73;
  uint64_t v64 = v74;
  (*(void (**)(char *, char *, Class *))(v74 + 32))(v73, v60, v63);
  uint64_t v66 = v69;
  uint64_t v67 = v83;
  v80[11](v65, v83);
  (*(void (**)(char *, Class *))(v64 + 8))(v65, v63);
  return ((uint64_t (*)(char *, uint64_t))v71)(v66, v67);
}

uint64_t Collection<>.removeFirst(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, (int **)a3, a2, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0, (uint64_t)AssociatedTypeWitness, (uint64_t)AssociatedTypeWitness, "lower upper ", 0);
  uint64_t v8 = MEMORY[0x1F4188790](TupleTypeMetadata2);
  uint64_t v10 = (char *)&v73 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8);
  uint64_t v82 = (char *)&v73 - v11;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(a3, a2, (uint64_t)AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Collection, associated conformance descriptor for Collection.Collection.Index: Comparable);
  uint64_t v13 = type metadata accessor for Range(0, (uint64_t)AssociatedTypeWitness, AssociatedConformanceWitness, v12);
  uint64_t v85 = (uint64_t)*(v13 - 1);
  uint64_t v14 = MEMORY[0x1F4188790](v13);
  uint64_t v81 = (char *)&v73 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = MEMORY[0x1F4188790](v14);
  uint64_t v83 = (char *)&v73 - v17;
  uint64_t v95 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](v16);
  uint64_t v94 = (char *)&v73 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = type metadata accessor for Optional(0, (uint64_t)AssociatedTypeWitness, v19, v20);
  uint64_t v22 = a1;
  uint64_t v23 = MEMORY[0x1F4188790](v21);
  uint64_t v25 = (char *)&v73 - v24;
  uint64_t v88 = (void (*)(uint64_t, char *, const char *))*((void *)AssociatedTypeWitness - 1);
  uint64_t v26 = MEMORY[0x1F4188790](v23);
  uint64_t v27 = MEMORY[0x1F4188790](v26);
  uint64_t v28 = MEMORY[0x1F4188790](v27);
  uint64_t v93 = (char *)&v73 - v29;
  uint64_t v30 = MEMORY[0x1F4188790](v28);
  uint64_t v32 = (char *)&v73 - v31;
  uint64_t v33 = MEMORY[0x1F4188790](v30);
  uint64_t v35 = (char *)&v73 - v34;
  uint64_t result = MEMORY[0x1F4188790](v33);
  uint64_t v86 = (char *)&v73 - v40;
  if (v22)
  {
    if (v22 < 0) {
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Number of elements to remove should be non-negative", 51, 2, "Swift/Collection.swift", 22, 2, 0x695uLL, 0);
    }
    uint64_t v74 = v39;
    uint64_t v75 = (void (*)(char *, char *, const char *))result;
    BOOL v76 = v13;
    uint64_t v79 = v38;
    uint64_t v80 = v37;
    uint64_t v77 = v10;
    (*(void (**)(uint64_t, uint64_t))(a3 + 64))(a2, a3);
    uint64_t v41 = v3;
    uint64_t v78 = *(void (**)(uint64_t, uint64_t))(a3 + 72);
    v78(a2, a3);
    (*(void (**)(char *, uint64_t, char *, uint64_t, uint64_t))(a3 + 144))(v35, v22, v32, a2, a3);
    uint64_t v91 = a2;
    uint64_t v92 = a3;
    uint64_t v42 = v88;
    uint64_t v44 = (char *)v88 + 8;
    uint64_t v43 = (void (*)(char *, const char *))*((void *)v88 + 1);
    v43(v32, AssociatedTypeWitness);
    uint64_t v89 = (void (*)(uint64_t, const char *))v43;
    uint64_t v90 = v44;
    v43(v35, AssociatedTypeWitness);
    if ((*((unsigned int (**)(char *, uint64_t, const char *))v42 + 6))(v25, 1, AssociatedTypeWitness) == 1)
    {
      (*(void (**)(char *, void (*)(char *, char *, const char *)))(v74 + 8))(v25, v75);
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't remove more items from a collection than it contains", 58, 2, "Swift/Collection.swift", 22, 2, 0x697uLL, 0);
    }
    uint64_t v45 = v86;
    uint64_t v75 = (void (*)(char *, char *, const char *))*((void *)v42 + 4);
    v75(v86, v25, AssociatedTypeWitness);
    uint64_t v46 = v95;
    uint64_t v47 = v91;
    (*(void (**)(char *, char *, uint64_t))(v95 + 16))(v94, v3, v91);
    uint64_t v48 = v93;
    v78(v47, v92);
    uint64_t v50 = *(void (**)(uint64_t, uint64_t))(v46 + 8);
    uint64_t v49 = v46 + 8;
    uint64_t v78 = v50;
    v50((uint64_t)v3, v47);
    uint64_t v51 = (void (*)(uint64_t, char *, const char *))*((void *)v42 + 2);
    uint64_t v52 = v79;
    v51(v79, v45, AssociatedTypeWitness);
    uint64_t v53 = v80;
    uint64_t v88 = v51;
    v51(v80, v48, AssociatedTypeWitness);
    if (((*(uint64_t (**)(uint64_t, uint64_t, const char *))(AssociatedConformanceWitness + 24))(v52, v53, AssociatedTypeWitness) & 1) == 0)_assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0); {
    uint64_t v54 = v53;
    }
    uint64_t v55 = v45;
    uint64_t v56 = v89;
    v89(v54, AssociatedTypeWitness);
    v56(v52, AssociatedTypeWitness);
    uint64_t v95 = v49;
    uint64_t v57 = TupleTypeMetadata2;
    uint64_t v58 = v82;
    uint64_t v59 = (uint64_t)&v82[*((int *)TupleTypeMetadata2 + 12)];
    uint64_t v60 = (void (*)(uint64_t, char *, const char *))v75;
    v75(v82, v55, AssociatedTypeWitness);
    uint64_t AssociatedConformanceWitness = v59;
    v60(v59, v93, AssociatedTypeWitness);
    uint64_t v61 = *((int *)v57 + 12);
    uint64_t v93 = v41;
    uint64_t v62 = v77;
    uint64_t v63 = &v77[v61];
    uint64_t v64 = (void (*)(char *, uint64_t, const char *))v88;
    v88((uint64_t)v77, v58, AssociatedTypeWitness);
    v64(v63, v59, AssociatedTypeWitness);
    uint64_t v65 = v81;
    v60((uint64_t)v81, v62, AssociatedTypeWitness);
    uint64_t v66 = (void (*)(char *, const char *))v89;
    v89((uint64_t)v63, AssociatedTypeWitness);
    uint64_t v67 = &v62[*((int *)v57 + 12)];
    v60((uint64_t)v62, v58, AssociatedTypeWitness);
    v60((uint64_t)v67, (char *)AssociatedConformanceWitness, AssociatedTypeWitness);
    uint64_t v68 = v76;
    v60((uint64_t)&v65[*((int *)v76 + 9)], v67, AssociatedTypeWitness);
    v66(v62, AssociatedTypeWitness);
    uint64_t v69 = v85;
    uint64_t v70 = v83;
    (*(void (**)(char *, char *, Class *))(v85 + 32))(v83, v65, v68);
    uint64_t v71 = v94;
    uint64_t v72 = v91;
    (*(void (**)(char *, uint64_t))(v92 + 88))(v70, v91);
    (*(void (**)(char *, Class *))(v69 + 8))(v70, v68);
    return ((uint64_t (*)(char *, uint64_t))v78)(v71, v72);
  }
  return result;
}

uint64_t Collection<>.firstIndex(of:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v59 = a4;
  uint64_t v47 = a5;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, *(int ***)(a3 + 8), a2, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
  uint64_t v48 = *((void *)AssociatedTypeWitness - 1);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v56 = (char *)&v46 - v10;
  uint64_t v11 = swift_getAssociatedTypeWitness(0, (int **)a3, a2, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  uint64_t v46 = *((void *)v11 - 1);
  uint64_t v12 = MEMORY[0x1F4188790](v11);
  uint64_t v58 = (char *)&v46 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  uint64_t v61 = v14;
  uint64_t v62 = (char *)&v46 - v15;
  uint64_t v18 = type metadata accessor for Optional(255, v14, v16, v17);
  uint64_t v55 = type metadata accessor for Optional(0, (uint64_t)v18, v19, v20);
  uint64_t v21 = (uint64_t)*(v55 - 1);
  uint64_t v22 = MEMORY[0x1F4188790](v55);
  uint64_t v24 = (char *)&v46 - v23;
  uint64_t v25 = (uint64_t)*(v18 - 1);
  MEMORY[0x1F4188790](v22);
  uint64_t v27 = (char *)&v46 - v26;
  uint64_t v28 = *(void (**)(uint64_t, uint64_t, uint64_t))(a3 + 120);
  uint64_t v57 = a1;
  uint64_t v29 = a1;
  uint64_t v60 = v5;
  uint64_t v30 = a2;
  v28(v29, a2, a3);
  if ((*(unsigned int (**)(char *, uint64_t, Class *))(v25 + 48))(v24, 1, v18) == 1)
  {
    (*(void (**)(char *, Class *))(v21 + 8))(v24, v55);
    (*(void (**)(uint64_t, uint64_t))(a3 + 64))(a2, a3);
    uint64_t v54 = *(void (**)(uint64_t, uint64_t))(a3 + 72);
    uint64_t v55 = (Class *)(a3 + 72);
    uint64_t v53 = *(void *)(swift_getAssociatedConformanceWitness(a3, a2, v61, (uint64_t)&protocol requirements base descriptor for Collection, associated conformance descriptor for Collection.Collection.Index: Comparable)+ 8);
    uint64_t v51 = *(uint64_t (**)(char *, char *, uint64_t, uint64_t))(v53 + 8);
    uint64_t v52 = v53 + 8;
    uint64_t v31 = (void (**)(char *, uint64_t))(v46 + 8);
    uint64_t v32 = (void (**)(char *))(v48 + 16);
    uint64_t v33 = v58;
    uint64_t v49 = v59 + 8;
    uint64_t v50 = a3 + 80;
    uint64_t v34 = (void (**)(char *, const char *))(v48 + 8);
    uint64_t v48 = a3 + 192;
    while (1)
    {
      v54(v30, a3);
      uint64_t v35 = v61;
      char v36 = v51(v62, v33, v61, v53);
      uint64_t v37 = *v31;
      (*v31)(v33, v35);
      if (v36)
      {
        uint64_t v42 = v61;
        v37(v62, v61);
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v46 + 56))(v47, 1, 1, v42);
      }
      uint64_t v38 = (*(uint64_t (**)(unsigned char *, char *, uint64_t, uint64_t))(a3 + 80))(v63, v62, v30, a3);
      uint64_t v39 = v56;
      (*v32)(v56);
      ((void (*)(unsigned char *, void))v38)(v63, 0);
      LOBYTE(v38) = (*(uint64_t (**)(char *, uint64_t, const char *))(v59 + 8))(v39, v57, AssociatedTypeWitness);
      (*v34)(v39, AssociatedTypeWitness);
      if (v38) {
        break;
      }
      (*(void (**)(char *, uint64_t, uint64_t))(a3 + 192))(v62, v30, a3);
    }
    uint64_t v44 = v46;
    uint64_t v43 = v47;
    uint64_t v45 = v61;
    (*(void (**)(uint64_t, char *, uint64_t))(v46 + 32))(v47, v62, v61);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v44 + 56))(v43, 0, 1, v45);
  }
  else
  {
    uint64_t v40 = *(void (**)(char *, char *, Class *))(v25 + 32);
    v40(v27, v24, v18);
    return ((uint64_t (*)(uint64_t, char *, Class *))v40)(v47, v27, v18);
  }
}

Swift::UInt64 specialized Collection.firstIndex(where:)(unint64_t a1, unint64_t a2)
{
  uint64_t v47 = HIBYTE(a2) & 0xF;
  uint64_t v48 = a1 & 0xFFFFFFFFFFFFLL;
  if ((a2 & 0x2000000000000000) != 0) {
    unint64_t v2 = HIBYTE(a2) & 0xF;
  }
  else {
    unint64_t v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (!v2) {
    return 0;
  }
  uint64_t v5 = 4 * v2;
  uint64_t v6 = (a1 >> 59) & 1;
  if ((a2 & 0x1000000000000000) == 0) {
    LODWORD(v6) = 1;
  }
  uint64_t v7 = 4 << v6;
  uint64_t v44 = a2 & 0xFFFFFFFFFFFFFFLL;
  uint64_t v45 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
  BOOL v11 = v6 == 0;
  uint64_t v8 = 11;
  if (!v11) {
    uint64_t v8 = 7;
  }
  uint64_t v46 = v8;
  v9._Swift::UInt64 rawBits = 15;
  while (1)
  {
    uint64_t v10 = v9._rawBits & 0xC;
    BOOL v11 = v10 == v7 || (v9._rawBits & 1) == 0;
    if (v11)
    {
      Swift::UInt64 rawBits = v9._rawBits;
      if (v10 == v7)
      {
        Swift::UInt64 rawBits = _StringGuts._slowEnsureMatchingEncoding(_:)(v9)._rawBits;
        if (v2 <= rawBits >> 16) {
          goto LABEL_123;
        }
      }
      else if (v2 <= v9._rawBits >> 16)
      {
        goto LABEL_123;
      }
      if ((rawBits & 1) == 0) {
        Swift::UInt64 rawBits = _StringGuts.scalarAlignSlow(_:)((Swift::String::Index)rawBits)._rawBits & 0xFFFFFFFFFFFFFFF2 | 1;
      }
    }
    else
    {
      Swift::UInt64 rawBits = v9._rawBits;
      if (v2 <= v9._rawBits >> 16)
      {
        unint64_t v43 = 121;
LABEL_125:
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index is out of bounds", 29, 2, "Swift/StringIndexValidation.swift", 33, 2, v43, 0);
      }
    }
    uint64_t v13 = (rawBits >> 8) & 0x3F;
    int64_t v14 = rawBits >> 16;
    if (v13)
    {
      Swift::Int v15 = v13 + v14;
      if ((a2 & 0x1000000000000000) != 0) {
        goto LABEL_111;
      }
LABEL_23:
      if (v15 < v14) {
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
      }
      goto LABEL_27;
    }
    if (v5 != rawBits >> 14)
    {
      if ((a2 & 0x1000000000000000) == 0)
      {
        if ((a2 & 0x2000000000000000) != 0)
        {
          unint64_t v49 = a1;
          uint64_t v50 = v44;
          Swift::Int v15 = v14 + 1;
          if (v14 + 1 == v47) {
            goto LABEL_49;
          }
          int v22 = *(unsigned __int16 *)((char *)&v49 + v14);
          if (v22 != 2573 && (v22 & 0x80808080) == 0) {
            goto LABEL_49;
          }
        }
        else
        {
          uint64_t v19 = (char *)v45;
          uint64_t v20 = v48;
          if ((a1 & 0x1000000000000000) == 0) {
            uint64_t v19 = (char *)_StringObject.sharedUTF8.getter(a1, a2);
          }
          Swift::Int v15 = v14 + 1;
          if (v14 + 1 == v20) {
            goto LABEL_28;
          }
          if (!v19) {
            goto LABEL_126;
          }
          int v21 = *(unsigned __int16 *)&v19[v14];
          if (v21 != 2573 && (v21 & 0x80808080) == 0)
          {
LABEL_28:
            uint64_t v16 = (char *)v45;
            if ((a1 & 0x1000000000000000) != 0)
            {
              if (v48 < v15) {
                goto LABEL_121;
              }
            }
            else
            {
              uint64_t v16 = (char *)_StringObject.sharedUTF8.getter(a1, a2);
              if (v39 < v15) {
LABEL_121:
              }
                _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x745uLL, 0);
            }
            if (v16) {
              uint64_t v17 = (uint8x16_t *)&v16[v14];
            }
            else {
              uint64_t v17 = 0;
            }
            uint64_t v18 = v15 - v14;
            if (v15 - v14 < 0) {
LABEL_122:
            }
              _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeBufferPointer with negative count", 39, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x53FuLL, 0);
            if (v15 != v14 && !v17) {
              _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeBufferPointer has a nil start and nonzero count", 53, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x541uLL, 0);
            }
            goto LABEL_52;
          }
        }
      }
      Swift::Int v15 = _StringGuts._opaqueComplexCharacterStride(startingAt:)(v14) + v14;
      if ((a2 & 0x1000000000000000) != 0)
      {
LABEL_111:
        Swift::String v41 = _StringGuts.foreignErrorCorrectedGrapheme(startingAt:endingAt:)(v14, v15);
        unint64_t object = (unint64_t)v41._object;
        uint64_t countAndFlagsBits = v41._countAndFlagsBits;
        goto LABEL_53;
      }
      goto LABEL_23;
    }
    Swift::Int v15 = rawBits >> 16;
    if ((a2 & 0x1000000000000000) != 0) {
      goto LABEL_111;
    }
LABEL_27:
    if ((a2 & 0x2000000000000000) == 0) {
      goto LABEL_28;
    }
LABEL_49:
    unint64_t v49 = a1;
    uint64_t v50 = v44;
    if (v47 < v15) {
      goto LABEL_121;
    }
    uint64_t v18 = v15 - v14;
    if (v15 - v14 < 0) {
      goto LABEL_122;
    }
    uint64_t v17 = (uint8x16_t *)((char *)&v49 + v14);
LABEL_52:
    uint64_t countAndFlagsBits = specialized static String._uncheckedFromUTF8(_:)(v17, v18);
LABEL_53:
    uint64_t v25 = object;
    if (countAndFlagsBits == 48 && object == 0xE100000000000000)
    {
      char v26 = 1;
      if (v51) {
        goto LABEL_118;
      }
      goto LABEL_59;
    }
    if ((~object & 0x6000000000000000) == 0) {
      break;
    }
    char v26 = _stringCompareInternal(_:_:expecting:)(countAndFlagsBits, object, 48, 0xE100000000000000, 0);
    if (v51) {
      goto LABEL_118;
    }
LABEL_59:
    swift_bridgeObjectRelease(v25);
    if ((v26 & 1) == 0) {
      return v9._rawBits;
    }
    if (v10 == v7 || (v9._rawBits & 2) == 0)
    {
      if (v10 == v7)
      {
        v9._Swift::UInt64 rawBits = _StringGuts._slowEnsureMatchingEncoding(_:)(v9)._rawBits;
        if (v2 <= v9._rawBits >> 16)
        {
LABEL_123:
          unint64_t v43 = 31;
          goto LABEL_125;
        }
      }
      else if (v2 <= v9._rawBits >> 16)
      {
        goto LABEL_123;
      }
      if (v9._rawBits)
      {
        if ((v9._rawBits & 2) != 0) {
          goto LABEL_68;
        }
      }
      else
      {
        Swift::UInt64 v40 = v9._rawBits & 0xC | _StringGuts.scalarAlignSlow(_:)(v9)._rawBits & 0xFFFFFFFFFFFFFFF3;
        v9._Swift::UInt64 rawBits = v40 | 1;
        if ((v40 & 2) != 0) {
          goto LABEL_68;
        }
      }
      if (v9._rawBits < 0x10000 || v9._rawBits >> 16 == v2) {
        v9._rawBits |= 3;
      }
      else {
        v9._Swift::UInt64 rawBits = _StringGuts._slowRoundDownToNearestCharacter(_:)(v9)._rawBits;
      }
    }
    else if (v2 <= v9._rawBits >> 16)
    {
      unint64_t v43 = 254;
      goto LABEL_125;
    }
LABEL_68:
    uint64_t v27 = (v9._rawBits >> 8) & 0x3F;
    if (v27) {
      goto LABEL_71;
    }
    if (v5 == v9._rawBits >> 14)
    {
      uint64_t v27 = 0;
      goto LABEL_71;
    }
    Swift::UInt64 v34 = v9._rawBits >> 16;
    if ((a2 & 0x1000000000000000) != 0) {
      goto LABEL_112;
    }
    if ((a2 & 0x2000000000000000) != 0)
    {
      unint64_t v49 = a1;
      uint64_t v50 = v44;
      if (v34 + 1 == v47) {
        goto LABEL_90;
      }
      int v37 = *(unsigned __int16 *)((char *)&v49 + v34);
    }
    else
    {
      uint64_t v35 = (char *)v45;
      uint64_t v36 = v48;
      if ((a1 & 0x1000000000000000) == 0) {
        uint64_t v35 = (char *)_StringObject.sharedUTF8.getter(a1, a2);
      }
      if (v34 + 1 == v36) {
        goto LABEL_90;
      }
      if (!v35) {
LABEL_126:
      }
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "unsafelyUnwrapped of nil optional", 33, 2, "Swift/Optional.swift", 20, 2, 0x163uLL, 0);
      int v37 = *(unsigned __int16 *)&v35[v34];
    }
    if (v37 == 2573 || (v37 & 0x80808080) != 0)
    {
LABEL_112:
      uint64_t v27 = _StringGuts._opaqueComplexCharacterStride(startingAt:)(v9._rawBits >> 16);
LABEL_71:
      Swift::UInt64 v28 = v9._rawBits + (v27 << 16);
      unint64_t v29 = v28 & 0xFFFFFFFFFFFF0000;
      if (v5 != (v28 & 0xFFFFFFFFFFFF0000) >> 14)
      {
        Swift::Int v30 = v28 >> 16;
        if ((a2 & 0x1000000000000000) == 0)
        {
          if ((a2 & 0x2000000000000000) != 0) {
            goto LABEL_92;
          }
          goto LABEL_74;
        }
        goto LABEL_98;
      }
      goto LABEL_10;
    }
LABEL_90:
    unint64_t v29 = (v9._rawBits + 0x10000) & 0xFFFFFFFFFFFF0000;
    if (v5 != v29 >> 14)
    {
      Swift::Int v30 = (v9._rawBits + 0x10000) >> 16;
      if ((a2 & 0x2000000000000000) != 0)
      {
LABEL_92:
        unint64_t v49 = a1;
        uint64_t v50 = v44;
        if (v30 + 1 != v47)
        {
          int v33 = *(unsigned __int16 *)((char *)&v49 + v30);
          goto LABEL_94;
        }
LABEL_96:
        Swift::Int v38 = 1;
LABEL_97:
        v29 |= v38 << 8;
        goto LABEL_10;
      }
LABEL_74:
      uint64_t v31 = (char *)v45;
      uint64_t v32 = v48;
      if ((a1 & 0x1000000000000000) == 0) {
        uint64_t v31 = (char *)_StringObject.sharedUTF8.getter(a1, a2);
      }
      if (v30 + 1 == v32) {
        goto LABEL_96;
      }
      if (!v31) {
        goto LABEL_126;
      }
      int v33 = *(unsigned __int16 *)&v31[v30];
LABEL_94:
      if (v33 != 2573 && (v33 & 0x80808080) == 0) {
        goto LABEL_96;
      }
LABEL_98:
      Swift::Int v38 = _StringGuts._opaqueComplexCharacterStride(startingAt:)(v30);
      if (v38 > 63) {
        goto LABEL_10;
      }
      goto LABEL_97;
    }
LABEL_10:
    v9._Swift::UInt64 rawBits = v29 | v46;
    if (v5 == v29 >> 14) {
      return 0;
    }
  }
  if (v51) {
LABEL_118:
  }
    swift_bridgeObjectRelease(v25);
  else {
    swift_bridgeObjectRelease(object);
  }
  return v9._rawBits;
}

uint64_t Collection.firstIndex(where:)@<X0>(uint64_t (*a1)(char *)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v6 = v5;
  uint64_t v8 = a3;
  uint64_t v46 = a1;
  uint64_t v47 = a2;
  uint64_t v39 = a5;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, *(int ***)(a4 + 8), a3, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
  uint64_t v9 = *((void *)AssociatedTypeWitness - 1);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v44 = (char *)&v37 - v10;
  BOOL v11 = swift_getAssociatedTypeWitness(0, (int **)a4, v8, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  uint64_t v12 = *((void *)v11 - 1);
  uint64_t v13 = MEMORY[0x1F4188790](v11);
  uint64_t v53 = (char *)&v37 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v13);
  uint64_t v16 = (char *)&v37 - v15;
  (*(void (**)(uint64_t, uint64_t))(a4 + 64))(v8, a4);
  uint64_t v51 = *(void (**)(uint64_t, uint64_t))(a4 + 72);
  uint64_t v52 = a4 + 72;
  uint64_t v55 = v11;
  uint64_t v50 = *(void *)(swift_getAssociatedConformanceWitness(a4, v8, (uint64_t)v11, (uint64_t)&protocol requirements base descriptor for Collection, associated conformance descriptor for Collection.Collection.Index: Comparable)+ 8);
  uint64_t v48 = *(uint64_t (**)(char *, char *, const char *, uint64_t))(v50 + 8);
  uint64_t v49 = v50 + 8;
  uint64_t v38 = v12;
  uint64_t v54 = (void (**)(char *, const char *))(v12 + 8);
  Swift::String v41 = (void (**)(char *))(v9 + 16);
  uint64_t v42 = a4 + 80;
  unint64_t v43 = (void (**)(char *, const char *))(v9 + 8);
  uint64_t v40 = a4 + 192;
  while (1)
  {
    uint64_t v17 = v53;
    v51(v8, a4);
    uint64_t v18 = v8;
    uint64_t v19 = v55;
    char v20 = v48(v16, v17, v55, v50);
    uint64_t v21 = v6;
    int v22 = *v54;
    (*v54)(v17, v19);
    if (v20)
    {
      uint64_t v31 = v55;
      v22(v16, v55);
      uint64_t v32 = 1;
      uint64_t v33 = v39;
      uint64_t v34 = v38;
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, const char *))(v34 + 56))(v33, v32, 1, v31);
    }
    uint64_t v23 = v16;
    uint64_t v24 = v21;
    uint64_t v25 = (void (*)(unsigned char *, void))(*(uint64_t (**)(unsigned char *, char *, uint64_t, uint64_t))(a4 + 80))(v56, v16, v18, a4);
    uint64_t v27 = v44;
    char v26 = AssociatedTypeWitness;
    (*v41)(v44);
    v25(v56, 0);
    uint64_t v28 = v57;
    char v29 = v46(v27);
    uint64_t v57 = v28;
    if (v28)
    {
      (*v43)(v27, v26);
      return ((uint64_t (*)(char *, const char *))v22)(v23, v55);
    }
    char v30 = v29;
    uint64_t v8 = v18;
    (*v43)(v27, v26);
    if (v30) {
      break;
    }
    uint64_t v16 = v23;
    uint64_t v6 = v24;
    (*(void (**)(char *, uint64_t, uint64_t))(a4 + 192))(v23, v18, a4);
  }
  uint64_t v34 = v38;
  uint64_t v33 = v39;
  uint64_t v36 = v23;
  uint64_t v31 = v55;
  (*(void (**)(uint64_t, char *, const char *))(v38 + 32))(v39, v36, v55);
  uint64_t v32 = 0;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, const char *))(v34 + 56))(v33, v32, 1, v31);
}

uint64_t BidirectionalCollection.last(where:)@<X0>(uint64_t (*a1)(char *)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v21 = a5;
  uint64_t v11 = *(void *)(a4 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, (int **)v11, a3, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  uint64_t v15 = type metadata accessor for Optional(0, (uint64_t)AssociatedTypeWitness, v13, v14);
  uint64_t v20 = (uint64_t)*(v15 - 1);
  MEMORY[0x1F4188790](v15);
  uint64_t v17 = (char *)&v20 - v16;
  uint64_t result = BidirectionalCollection.lastIndex(where:)(a1, a2, a3, a4, (uint64_t)&v20 - v16);
  if (!v6)
  {
    MEMORY[0x1F4188790](result);
    *(&v20 - 4) = a3;
    *(&v20 - 3) = a4;
    *(&v20 - 2) = v5;
    uint64_t v19 = swift_getAssociatedTypeWitness(0, *(int ***)(v11 + 8), a3, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
    _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lFxq0_q_Ri_zRi0_zRi__Ri0__Ri_0_Ri0_0_r1_lyxs5NeverOqd_0_Isgnrzr_xSgAb2ERsd__Ri_d_0_r_0_lIetMgnrzo_Tpq5((void (*)(char *))partial apply for closure #1 in BidirectionalCollection.last(where:), (uint64_t)v15, (uint64_t)v19, v21);
    return (*(uint64_t (**)(char *, Class *))(v20 + 8))(v17, v15);
  }
  return result;
}

uint64_t BidirectionalCollection.lastIndex(where:)@<X0>(uint64_t (*a1)(char *)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v6 = v5;
  unint64_t v43 = a1;
  uint64_t v44 = a2;
  uint64_t v37 = a5;
  uint64_t v9 = *(void *)(a4 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, *(int ***)(v9 + 8), a3, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
  Swift::String v41 = (void (**)(char *, const char *))*((void *)AssociatedTypeWitness - 1);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v42 = (char *)&v35 - v11;
  uint64_t v12 = swift_getAssociatedTypeWitness(0, (int **)v9, a3, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  uint64_t v13 = *((void *)v12 - 1);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v51 = (char *)&v35 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v17 = (char *)&v35 - v16;
  (*(void (**)(uint64_t, uint64_t))(v9 + 72))(a3, v9);
  uint64_t v49 = *(void (**)(uint64_t, uint64_t))(v9 + 64);
  uint64_t v50 = v9 + 64;
  uint64_t v53 = v12;
  uint64_t v48 = *(void *)(swift_getAssociatedConformanceWitness(v9, a3, (uint64_t)v12, (uint64_t)&protocol requirements base descriptor for Collection, associated conformance descriptor for Collection.Collection.Index: Comparable)+ 8);
  uint64_t v46 = *(uint64_t (**)(char *, char *, const char *, uint64_t))(v48 + 8);
  uint64_t v47 = v48 + 8;
  uint64_t v36 = v13;
  uint64_t v52 = (void (**)(char *, const char *))(v13 + 8);
  uint64_t v45 = a4;
  uint64_t v39 = v9 + 80;
  uint64_t v40 = a4 + 40;
  uint64_t v38 = (void (**)(char *))(v41 + 2);
  ++v41;
  while (1)
  {
    uint64_t v18 = v51;
    v49(a3, v9);
    uint64_t v19 = v53;
    char v20 = v46(v17, v18, v53, v48);
    uint64_t v21 = v6;
    int v22 = *v52;
    (*v52)(v18, v19);
    if (v20)
    {
      uint64_t v32 = v53;
      v22(v17, v53);
      uint64_t v33 = 1;
      uint64_t v31 = v37;
      uint64_t v30 = v36;
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, const char *))(v30 + 56))(v31, v33, 1, v32);
    }
    (*(void (**)(char *, uint64_t))(v45 + 40))(v17, a3);
    uint64_t v23 = v17;
    uint64_t v24 = v21;
    uint64_t v25 = (void (*)(unsigned char *, void))(*(uint64_t (**)(unsigned char *, char *, uint64_t, uint64_t))(v9 + 80))(v54, v17, a3, v9);
    char v26 = v42;
    (*v38)(v42);
    v25(v54, 0);
    uint64_t v27 = v55;
    char v28 = v43(v26);
    if (v27) {
      break;
    }
    char v29 = v28;
    uint64_t v55 = 0;
    (*v41)(v26, AssociatedTypeWitness);
    uint64_t v6 = v24;
    uint64_t v17 = v23;
    if (v29)
    {
      uint64_t v30 = v36;
      uint64_t v31 = v37;
      uint64_t v32 = v53;
      (*(void (**)(uint64_t, char *, const char *))(v36 + 32))(v37, v23, v53);
      uint64_t v33 = 0;
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, const char *))(v30 + 56))(v31, v33, 1, v32);
    }
  }
  (*v41)(v26, AssociatedTypeWitness);
  return ((uint64_t (*)(char *, const char *))v22)(v23, v53);
}

uint64_t closure #1 in BidirectionalCollection.last(where:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v6 = *(void *)(a3 + 8);
  uint64_t v7 = (uint64_t (*)(unsigned char *, void))(*(uint64_t (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v6 + 80))(v12, a1, a2, v6);
  uint64_t v9 = v8;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, *(int ***)(v6 + 8), a2, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
  (*(void (**)(uint64_t, uint64_t, const char *))(*((void *)AssociatedTypeWitness - 1) + 16))(a4, v9, AssociatedTypeWitness);
  return v7(v12, 0);
}

uint64_t BidirectionalCollection<>.lastIndex(of:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v31 = a4;
  uint64_t v32 = a5;
  uint64_t v29 = a3;
  uint64_t v7 = *(void *)(a3 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, (int **)v7, a2, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  uint64_t v11 = type metadata accessor for Optional(255, (uint64_t)AssociatedTypeWitness, v9, v10);
  uint64_t v14 = type metadata accessor for Optional(0, (uint64_t)v11, v12, v13);
  uint64_t v15 = (uint64_t)*(v14 - 1);
  uint64_t v16 = MEMORY[0x1F4188790](v14);
  uint64_t v18 = (char *)&v28 - v17;
  uint64_t v19 = (uint64_t)*(v11 - 1);
  MEMORY[0x1F4188790](v16);
  uint64_t v21 = (char *)&v28 - v20;
  int v22 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 128);
  uint64_t v30 = a1;
  v22(a1, a2, v7);
  if ((*(unsigned int (**)(char *, uint64_t, Class *))(v19 + 48))(v18, 1, v11) == 1)
  {
    uint64_t v23 = (*(uint64_t (**)(char *, Class *))(v15 + 8))(v18, v14);
    MEMORY[0x1F4188790](v23);
    uint64_t v24 = v29;
    *(&v28 - 4) = a2;
    *(&v28 - 3) = v24;
    uint64_t v25 = v30;
    *(&v28 - 2) = v31;
    *(&v28 - 1) = v25;
    return BidirectionalCollection.lastIndex(where:)((uint64_t (*)(char *))partial apply for closure #1 in BidirectionalCollection<>.lastIndex(of:), (uint64_t)(&v28 - 6), a2, v24, v32);
  }
  else
  {
    uint64_t v27 = *(void (**)(char *, char *, Class *))(v19 + 32);
    v27(v21, v18, v11);
    return ((uint64_t (*)(uint64_t, char *, Class *))v27)(v32, v21, v11);
  }
}

void Collection.indices(where:)(uint64_t (*a1)(char *)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v217 = a2;
  uint64_t v216 = a1;
  uint64_t v172 = a5;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, (int **)a4, a3, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0, (uint64_t)AssociatedTypeWitness, (uint64_t)AssociatedTypeWitness, "lower upper ", 0);
  uint64_t v9 = MEMORY[0x1F4188790](TupleTypeMetadata2);
  unint64_t v225 = (char *)&v170 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  uint64_t v224 = (char *)&v170 - v11;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(a4, a3, (uint64_t)AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Collection, associated conformance descriptor for Collection.Collection.Index: Comparable);
  uint64_t v14 = (uint64_t *)type metadata accessor for Range(0, (uint64_t)AssociatedTypeWitness, AssociatedConformanceWitness, v13);
  id v240 = (char *)*(v14 - 1);
  uint64_t v15 = MEMORY[0x1F4188790](v14);
  uint64_t v176 = (char *)&v170 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = MEMORY[0x1F4188790](v15);
  unint64_t v182 = (char *)&v170 - v18;
  uint64_t v19 = MEMORY[0x1F4188790](v17);
  uint64_t v222 = (char *)&v170 - v20;
  MEMORY[0x1F4188790](v19);
  unint64_t v191 = (char *)&v170 - v21;
  uint64_t v215 = swift_getAssociatedTypeWitness(0, (int **)a4, a3, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.SubSequence);
  uint64_t v234 = (char *)*((void *)v215 - 1);
  uint64_t v22 = MEMORY[0x1F4188790](v215);
  Swift::Bool v181 = (char *)&v170 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = MEMORY[0x1F4188790](v22);
  uint64_t v180 = (uint64_t)&v170 - v25;
  MEMORY[0x1F4188790](v24);
  char v190 = (char *)&v170 - v26;
  uint64_t v27 = AssociatedConformanceWitness;
  unint64_t v214 = type metadata accessor for PartialRangeFrom(0, (uint64_t)AssociatedTypeWitness, AssociatedConformanceWitness, v28);
  uint64_t v221 = (void (**)(void, void, void))*(v214 - 1);
  uint64_t v29 = MEMORY[0x1F4188790](v214);
  Swift::Int v186 = (char *)&v170 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v29);
  uint64_t v195 = (char *)&v170 - v31;
  unint64_t v171 = type metadata accessor for Optional(0, (uint64_t)AssociatedTypeWitness, v32, v33);
  uint64_t v170 = (uint64_t)*(v171 - 1);
  uint64_t v34 = MEMORY[0x1F4188790](v171);
  uint64_t v189 = (uint64_t)&v170 - v35;
  uint64_t v198 = AssociatedTypeWitness;
  uint64_t v36 = *((void *)AssociatedTypeWitness - 1);
  uint64_t v37 = MEMORY[0x1F4188790](v34);
  uint64_t v175 = (char *)&v170 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v39 = MEMORY[0x1F4188790](v37);
  id v179 = (char *)&v170 - v40;
  uint64_t v41 = MEMORY[0x1F4188790](v39);
  uint64_t v178 = (char *)&v170 - v42;
  uint64_t v43 = MEMORY[0x1F4188790](v41);
  unint64_t v177 = (char *)&v170 - v44;
  uint64_t v45 = MEMORY[0x1F4188790](v43);
  BOOL v185 = (char *)&v170 - v46;
  uint64_t v47 = MEMORY[0x1F4188790](v45);
  uint64_t v184 = (char *)&v170 - v48;
  uint64_t v49 = MEMORY[0x1F4188790](v47);
  unint64_t v207 = (char *)&v170 - v50;
  uint64_t v51 = MEMORY[0x1F4188790](v49);
  char v183 = (char *)&v170 - v52;
  uint64_t v53 = MEMORY[0x1F4188790](v51);
  char v187 = (char *)&v170 - v54;
  uint64_t v55 = MEMORY[0x1F4188790](v53);
  uint64_t v194 = (char *)&v170 - v56;
  uint64_t v57 = MEMORY[0x1F4188790](v55);
  uint64_t v193 = (char *)&v170 - v58;
  uint64_t v59 = MEMORY[0x1F4188790](v57);
  uint64_t v192 = (char *)&v170 - v60;
  uint64_t v61 = MEMORY[0x1F4188790](v59);
  uint64_t v63 = (char *)&v170 - v62;
  uint64_t v64 = MEMORY[0x1F4188790](v61);
  uint64_t v197 = (char *)&v170 - v65;
  uint64_t v66 = MEMORY[0x1F4188790](v64);
  uint64_t v196 = (char *)&v170 - v67;
  uint64_t v68 = MEMORY[0x1F4188790](v66);
  int64_t v208 = (char *)&v170 - v69;
  MEMORY[0x1F4188790](v68);
  uint64_t v71 = (char *)&v170 - v70;
  uint64_t v223 = v14;
  _swift_isClassOrObjCExistentialType((uint64_t)v14, v14);
  uint64_t v241 = &_swiftEmptyArrayStorage;
  uint64_t v72 = a4;
  uint64_t v73 = *(void (**)(uint64_t))(a4 + 64);
  uint64_t v235 = v5;
  uint64_t v74 = a3;
  uint64_t v75 = a3;
  uint64_t v76 = v72;
  v73(v75);
  uint64_t v77 = v27;
  uint64_t v78 = *(void (**)(char *, char *, uint64_t))(v36 + 16);
  v36 += 16;
  uint64_t v238 = v78;
  uint64_t v239 = (char **)(v36 - 8);
  uint64_t v236 = (char **)(v36 + 16);
  uint64_t v227 = v76 + 72;
  uint64_t v228 = v27 + 24;
  unint64_t v213 = (void (**)(char *, Class *))(v221 + 1);
  uint64_t v221 = (void (**)(void, void, void))(v240 + 32);
  uint64_t v212 = v76 + 88;
  char v211 = (void (**)(char *, uint64_t *))(v240 + 8);
  unint64_t v210 = (void (**)(char *, const char *))(v234 + 8);
  uint64_t v229 = v36;
  uint64_t v188 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v36 + 32);
  uint64_t v174 = v27 + 16;
  uint64_t v79 = v76;
  uint64_t v173 = v76 + 192;
  uint64_t v226 = v76;
  uint64_t v231 = v74;
  uint64_t v232 = v27;
  uint64_t v209 = v63;
  uint64_t v230 = v71;
  while (1)
  {
    uint64_t v80 = v196;
    uint64_t v81 = v71;
    uint64_t v82 = (uint64_t)v198;
    uint64_t v83 = v238;
    v238(v196, v81, (uint64_t)v198);
    uint64_t v84 = v197;
    v83(v197, v80, v82);
    uint64_t v85 = *(void *)(v77 + 8);
    uint64_t v86 = *(uint64_t (**)(char *, char *, uint64_t, char *))(v85 + 8);
    unint64_t v206 = (char *)v85;
    uint64_t v205 = v85 + 8;
    uint64_t v204 = v86;
    if ((((uint64_t (*)(char *, char *, uint64_t))v86)(v84, v84, v82) & 1) == 0) {
LABEL_20:
    }
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range cannot have an unordered lower bound.", 43, 2, "Swift/Range.swift", 17, 2, 0x34FuLL, 0);
    id v240 = *v239;
    ((void (*)(char *, uint64_t))v240)(v84, v82);
    uint64_t v87 = v195;
    uint64_t v234 = *v236;
    ((void (*)(char *, char *, uint64_t))v234)(v195, v80, v82);
    uint64_t v88 = v238;
    v238(v63, v87, v82);
    uint64_t v89 = v192;
    char v219 = *(void (**)(uint64_t, uint64_t))(v79 + 72);
    v219(v74, v79);
    uint64_t v90 = v193;
    v88(v193, v63, v82);
    uint64_t v91 = v194;
    v88(v194, v89, v82);
    unint64_t v220 = *(char **)(v232 + 24);
    if ((((uint64_t (*)(char *, char *, uint64_t))v220)(v90, v91, v82) & 1) == 0) {
      goto LABEL_19;
    }
    uint64_t v92 = v91;
    uint64_t v93 = (void (*)(char *, uint64_t))v240;
    ((void (*)(char *, uint64_t))v240)(v92, v82);
    v93(v90, v82);
    char v202 = *v213;
    v202(v87, v214);
    uint64_t v94 = TupleTypeMetadata2;
    uint64_t v95 = v224;
    uint64_t v96 = &v224[*((int *)TupleTypeMetadata2 + 12)];
    uint64_t v97 = (void (*)(char *, char *, uint64_t))v234;
    ((void (*)(char *, char *, uint64_t))v234)(v224, v209, v82);
    uint64_t v218 = v96;
    v97(v96, v89, v82);
    uint64_t v98 = v225;
    uint64_t v99 = &v225[*((int *)v94 + 12)];
    uint64_t v100 = v238;
    v238(v225, v95, v82);
    v100(v99, v96, v82);
    uint64_t v101 = v222;
    v97(v222, v98, v82);
    uint64_t v102 = (void (*)(char *, uint64_t))v240;
    ((void (*)(char *, uint64_t))v240)(v99, v82);
    uint64_t v103 = &v98[*((int *)TupleTypeMetadata2 + 12)];
    v97(v98, v95, v82);
    uint64_t v104 = v226;
    v97(v103, v218, v82);
    uint64_t v105 = v223;
    v97(&v101[*((int *)v223 + 9)], v103, v82);
    v102(v98, v82);
    uint64_t v106 = v191;
    uint64_t v218 = (char *)*v221;
    ((void (*)(char *, char *, uint64_t *))v218)(v191, v101, v105);
    uint64_t v107 = v190;
    uint64_t v108 = v231;
    uint64_t v203 = *(void (**)(char *, uint64_t, uint64_t))(v104 + 88);
    v203(v106, v231, v104);
    char v201 = *v211;
    v201(v106, v105);
    uint64_t v109 = v215;
    uint64_t v110 = (int **)swift_getAssociatedConformanceWitness(v104, v108, (uint64_t)v215, (uint64_t)&protocol requirements base descriptor for Collection, associated conformance descriptor for Collection.Collection.SubSequence: Collection);
    uint64_t v111 = v189;
    uint64_t v112 = v233;
    Collection.firstIndex(where:)(v216, v217, (uint64_t)v109, (uint64_t)v110, v189);
    uint64_t v113 = (void (*)(char *, uint64_t))v240;
    if (v112)
    {
      (*v210)(v107, v109);
      unsigned int v167 = v230;
LABEL_15:
      v113(v167, v82);
      swift_bridgeObjectRelease((uint64_t)v241);
      return;
    }
    uint64_t v200 = *v210;
    v200(v107, v109);
    if ((*v188)(v111, 1, v82) == 1)
    {
      v113(v230, v82);
      (*(void (**)(uint64_t, Class *))(v170 + 8))(v111, v171);
      uint64_t v169 = v232;
      goto LABEL_17;
    }
    uint64_t v199 = v110;
    uint64_t v233 = 0;
    unint64_t v114 = v208;
    ((void (*)(char *, uint64_t, uint64_t))v234)(v208, v111, v82);
    uint64_t v115 = v187;
    uint64_t v116 = v238;
    v238(v187, v114, v82);
    if ((v204(v115, v115, v82, v206) & 1) == 0) {
      goto LABEL_20;
    }
    v113(v115, v82);
    v113(v230, v82);
    uint64_t v117 = v186;
    v116(v186, v114, v82);
    uint64_t v118 = v104;
    uint64_t v119 = v183;
    v116(v183, v117, v82);
    uint64_t v120 = v207;
    v219(v231, v118);
    int8x8_t v121 = v184;
    v116(v184, v119, v82);
    uint64_t v122 = v185;
    v116(v185, v120, v82);
    if ((((uint64_t (*)(char *, char *, uint64_t, uint64_t))v220)(v121, v122, v82, v232) & 1) == 0) {
LABEL_19:
    }
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
    uint64_t v123 = (void (*)(char *, uint64_t))v240;
    ((void (*)(char *, uint64_t))v240)(v122, v82);
    v123(v121, v82);
    v202(v117, v214);
    uint64_t v124 = TupleTypeMetadata2;
    unint64_t v125 = v224;
    uint64_t v126 = &v224[*((int *)TupleTypeMetadata2 + 12)];
    uint64_t v127 = v119;
    uint64_t v128 = (void (*)(char *, char *, uint64_t))v234;
    ((void (*)(char *, char *, uint64_t))v234)(v224, v127, v82);
    unint64_t v206 = v126;
    v128(v126, v207, v82);
    uint64_t v129 = v225;
    uint64_t v130 = &v225[*((int *)v124 + 12)];
    uint64_t v131 = v238;
    v238(v225, v125, v82);
    v131(v130, v126, v82);
    uint64_t v132 = v222;
    v128(v222, v129, v82);
    ((void (*)(char *, uint64_t))v240)(v130, v82);
    uint64_t v133 = &v129[*((int *)TupleTypeMetadata2 + 12)];
    v128(v129, v125, v82);
    v128(v133, v206, v82);
    uint64_t v134 = v223;
    v128(&v132[*((int *)v223 + 9)], v133, v82);
    uint64_t v113 = (void (*)(char *, uint64_t))v240;
    ((void (*)(char *, uint64_t))v240)(v129, v82);
    uint64_t v135 = v182;
    ((void (*)(char *, char *, uint64_t *))v218)(v182, v132, v134);
    v203(v135, v231, v226);
    int v136 = v135;
    uint64_t v137 = v215;
    v201(v136, v134);
    uint64_t v138 = v180;
    id v139 = v199;
    uint64_t v140 = v233;
    Collection.prefix(while:)(v216, v217, (uint64_t)v137, v199, v180);
    if (v140)
    {
      unsigned int v167 = v208;
      goto LABEL_15;
    }
    uint64_t v233 = 0;
    char v141 = v230;
    ((void (*)(const char *, int **))v139[9])(v137, v139);
    v200((char *)v138, v137);
    id v142 = v177;
    uint64_t v143 = v141;
    uint64_t v144 = v238;
    v238(v177, v143, v82);
    Swift::Bool v145 = v178;
    unint64_t v146 = v208;
    v144(v178, v208, v82);
    char v147 = v179;
    v144(v179, v142, v82);
    if ((((uint64_t (*)(char *, char *, uint64_t, uint64_t))v220)(v145, v147, v82, v232) & 1) == 0) {
      goto LABEL_19;
    }
    ((void (*)(char *, uint64_t))v240)(v147, v82);
    ((void (*)(char *, uint64_t))v240)(v145, v82);
    char v148 = TupleTypeMetadata2;
    BOOL v149 = v224;
    Swift::Int v150 = &v224[*((int *)TupleTypeMetadata2 + 12)];
    char v151 = (void (*)(char *, char *, uint64_t))v234;
    ((void (*)(char *, char *, uint64_t))v234)(v224, v146, v82);
    unint64_t v220 = v150;
    v151(v150, v142, v82);
    uint64_t v152 = v225;
    unint64_t v206 = &v225[*((int *)v148 + 12)];
    uint64_t v153 = v206;
    unint64_t v154 = v238;
    v238(v225, v149, v82);
    v154(v153, v150, v82);
    char v155 = v222;
    v151(v222, v152, v82);
    ((void (*)(char *, uint64_t))v240)(v206, v82);
    unint64_t v156 = &v152[*((int *)TupleTypeMetadata2 + 12)];
    v151(v152, v149, v82);
    v151(v156, v220, v82);
    uint64_t v157 = (uint64_t)v223;
    v151(&v155[*((int *)v223 + 9)], v156, v82);
    uint64_t v158 = (void (*)(char *, uint64_t))v240;
    ((void (*)(char *, uint64_t))v240)(v152, v82);
    uint64_t v159 = (uint64_t)v176;
    ((void (*)(char *, char *, uint64_t))v218)(v176, v155, v157);
    uint64_t v162 = type metadata accessor for Array(0, v157, v160, v161);
    Array.append(_:)(v159, (uint64_t)v162);
    unint64_t v163 = v175;
    uint64_t v164 = v231;
    uint64_t v165 = v226;
    v219(v231, v226);
    uint64_t v166 = v232;
    LOBYTE(v157) = (*(uint64_t (**)(char *, char *, uint64_t))(v232 + 16))(v230, v163, v82);
    v158(v163, v82);
    if ((v157 & 1) == 0) {
      break;
    }
    uint64_t v71 = v230;
    uint64_t v74 = v164;
    uint64_t v79 = v165;
    (*(void (**)(char *, uint64_t, uint64_t))(v165 + 192))(v230, v164, v165);
    uint64_t v63 = v209;
    uint64_t v77 = v166;
  }
  v158(v230, v82);
  uint64_t v169 = v166;
LABEL_17:
  RangeSet.init(_orderedRanges:)((unint64_t)v241, v82, v169, v168, v172);
}

uint64_t static Comparable.... postfix(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return static Comparable.... postfix(_:)(a1, a2, a3, "Range cannot have an unordered lower bound.", 0x34FuLL, a4);
}

uint64_t specialized Collection.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 < 0) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
  }
  if (a3 < a1) {
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x745uLL, 0);
  }
  return 0;
}

uint64_t specialized Collection.subscript.getter(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (a3 < result) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
  }
  if (result < 0) {
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x744uLL, 0);
  }
  return result;
}

uint64_t Collection.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, (int **)a4, a2, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(a4, a2, (uint64_t)AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Collection, associated conformance descriptor for Collection.Collection.Index: Comparable);
  uint64_t v13 = type metadata accessor for Range(0, (uint64_t)AssociatedTypeWitness, AssociatedConformanceWitness, v12);
  uint64_t v14 = (uint64_t)*(v13 - 1);
  MEMORY[0x1F4188790](v13);
  uint64_t v16 = (char *)&v18 - v15;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a5 + 24))(v5, a2, a4, a3, a5);
  (*(void (**)(char *, uint64_t, uint64_t))(a4 + 88))(v16, a2, a4);
  return (*(uint64_t (**)(char *, Class *))(v14 + 8))(v16, v13);
}

void RangeSet.init(_orderedRanges:)(unint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v7 = (uint64_t *)type metadata accessor for Range(0, a2, a3, a4);
  uint64_t v8 = *(v7 - 1);
  uint64_t v9 = *(void *)(v8 + 64);
  MEMORY[0x1F4188790](v7);
  uint64_t v11 = (char *)&v33 - v10;
  Swift::Int v12 = Array._getCount()();
  if (v12 == 1)
  {
    char isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType((uint64_t)v7, v7);
    char v19 = ((a1 & 0xC000000000000001) == 0) | ~isClassOrObjCExistentialType;
    Array._checkSubscript(_:wasNativeTypeChecked:)(0, (a1 & 0xC000000000000001) == 0 || (isClassOrObjCExistentialType & 1) == 0);
    if (v19)
    {
      uint64_t v20 = *(unsigned __int8 *)(v8 + 80);
      uint64_t v21 = (v20 + 32) & ~v20;
      (*(void (**)(char *, unint64_t, uint64_t *))(v8 + 16))(v11, a1 + v21, v7);
      swift_bridgeObjectRelease(a1);
    }
    else
    {
      id v31 = _ArrayBuffer._getElementSlowPath(_:)(0, a1, v7);
      if (v9 != 8)
      {
        swift_unknownObjectRelease(v31);
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't unsafeBitCast between types of different sizes", 52, 2, "Swift/Builtin.swift", 19, 2, 0x5FuLL, 0);
      }
      unint64_t v34 = (unint64_t)v31;
      uint64_t v32 = v31;
      (*(void (**)(char *, unint64_t *, uint64_t *))(v8 + 16))(v11, &v34, v7);
      swift_bridgeObjectRelease(a1);
      swift_unknownObjectRelease(v32);
      uint64_t v20 = *(unsigned __int8 *)(v8 + 80);
      uint64_t v21 = (v20 + 32) & ~v20;
    }
    uint64_t v24 = (unint64_t *)type metadata accessor for _ContiguousArrayStorage(0, (uint64_t)v7, v22, v23);
    uint64_t v25 = swift_allocObject(v24, v21 + *(void *)(v8 + 72), v20 | 7);
    a1 = (unint64_t)static Array._adoptStorage(_:count:)(v25, 1);
    (*(void (**)(uint64_t, char *, uint64_t *))(v8 + 32))(v26, v11, v7);
    uint64_t v13 = _ArrayBuffer.requestNativeBuffer()(a1, v7);
    if (v13) {
      goto LABEL_12;
    }
    goto LABEL_8;
  }
  if (v12)
  {
    unint64_t v27 = swift_bridgeObjectRetain(a1);
    uint64_t v16 = _ArrayBuffer.requestNativeBuffer()(v27, v7);
    swift_bridgeObjectRelease(a1);
    if (v16)
    {
LABEL_13:
      uint64_t v17 = (__objc2_class **)a1;
      goto LABEL_14;
    }
    unint64_t v34 = a1;
    LOWORD(v13) = 0;
    goto LABEL_11;
  }
  swift_bridgeObjectRelease(a1);
  _swift_isClassOrObjCExistentialType((uint64_t)v7, v7);
  a1 = (unint64_t)&_swiftEmptyArrayStorage;
  uint64_t v13 = _ArrayBuffer.requestNativeBuffer()((unint64_t)&_swiftEmptyArrayStorage, v7);
  if (!v13)
  {
LABEL_8:
    unint64_t v34 = a1;
LABEL_11:
    uint64_t v28 = (unint64_t *)type metadata accessor for Array(v13, (uint64_t)v7, v14, v15);
    uint64_t WitnessTable = swift_getWitnessTable(protocol conformance descriptor for [A], v28, v29);
    uint64_t v13 = (uint64_t)_copyCollectionToContiguousArray<A>(_:)((uint64_t)&v34, (uint64_t)v28, WitnessTable);
LABEL_12:
    uint64_t v16 = v13;
    goto LABEL_13;
  }
  uint64_t v16 = v13;
  uint64_t v17 = &_swiftEmptyArrayStorage;
LABEL_14:
  swift_bridgeObjectRelease((uint64_t)v17);
  *a5 = v16;
}

void Collection<>.indices(of:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  v5[2] = a2;
  v5[3] = a3;
  v5[4] = a4;
  unint64_t v5[5] = a1;
  Collection.indices(where:)((uint64_t (*)(char *))partial apply for closure #1 in Collection<>.split(separator:maxSplits:omittingEmptySubsequences:), (uint64_t)v5, a2, a3, a5);
}

uint64_t MutableCollection.partition(by:)@<X0>(uint64_t (*a1)(char *)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return MutableCollection._halfStablePartition(isSuffixElement:)(a1, a2, a3, a4, a5);
}

uint64_t MutableCollection._halfStablePartition(isSuffixElement:)@<X0>(uint64_t (*a1)(char *)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v92 = a1;
  uint64_t v93 = a2;
  uint64_t v70 = a5;
  uint64_t v72 = a4;
  uint64_t v6 = *(void *)(a4 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, *(int ***)(v6 + 8), a3, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
  uint64_t v89 = (char *)*((void *)AssociatedTypeWitness - 1);
  uint64_t v7 = MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v83 = (char *)&v67 - v8;
  uint64_t v9 = *(void *)(a3 - 8);
  uint64_t v10 = MEMORY[0x1F4188790](v7);
  uint64_t v95 = (char *)&v67 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10);
  uint64_t v13 = (char *)&v67 - v12;
  uint64_t v14 = swift_getAssociatedTypeWitness(255, (int **)v6, a3, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  uint64_t v90 = type metadata accessor for Optional(0, (uint64_t)v14, v15, v16);
  uint64_t v88 = (uint64_t)*(v90 - 1);
  uint64_t v17 = MEMORY[0x1F4188790](v90);
  char v19 = (char *)&v67 - v18;
  uint64_t v87 = v14;
  uint64_t v91 = (char **)*((void *)v14 - 1);
  uint64_t v20 = MEMORY[0x1F4188790](v17);
  uint64_t v86 = (char *)&v67 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = MEMORY[0x1F4188790](v20);
  uint64_t v85 = (char *)&v67 - v23;
  uint64_t v24 = MEMORY[0x1F4188790](v22);
  uint64_t v26 = (char *)&v67 - v25;
  MEMORY[0x1F4188790](v24);
  uint64_t v28 = (char *)&v67 - v27;
  uint64_t v29 = v9 + 16;
  uint64_t v30 = *(void (**)(void))(v9 + 16);
  ((void (*)(char *, uint64_t, uint64_t))v30)(v13, v101, a3);
  uint64_t v96 = v19;
  uint64_t v103 = v6;
  uint64_t v31 = v100;
  Collection.firstIndex(where:)(v92, v93, a3, v6, (uint64_t)v19);
  unint64_t v34 = *(void (**)(void, void))(v9 + 8);
  uint64_t v33 = v9 + 8;
  uint64_t v32 = (uint64_t (*)(char *, uint64_t))v34;
  uint64_t result = ((uint64_t (*)(char *, uint64_t))v34)(v13, a3);
  if (!v31)
  {
    uint64_t v94 = v32;
    uint64_t v99 = v30;
    uint64_t v81 = v29;
    uint64_t v98 = v26;
    uint64_t v82 = v28;
    uint64_t v97 = 0;
    uint64_t v100 = v33;
    uint64_t v36 = v91;
    uint64_t v37 = v96;
    uint64_t v38 = (uint64_t)v87;
    if (((unsigned int (*)(char *, uint64_t, const char *))v91[6])(v96, 1, v87) == 1)
    {
      (*(void (**)(char *, Class *))(v88 + 8))(v37, v90);
      uint64_t v39 = v95;
      ((void (*)(char *, uint64_t, uint64_t))v99)(v95, v101, a3);
      (*(void (**)(uint64_t))(v103 + 72))(a3);
      return v94(v39, a3);
    }
    else
    {
      uint64_t v40 = v36[4];
      uint64_t v41 = v82;
      uint64_t v69 = v36 + 4;
      uint64_t v68 = v40;
      ((void (*)(char *, char *, uint64_t))v40)(v82, v37, v38);
      uint64_t v42 = v101;
      uint64_t v43 = a3;
      uint64_t v44 = v95;
      v99();
      uint64_t v45 = v103;
      (*(void (**)(char *, uint64_t, uint64_t))(v103 + 184))(v41, v43, v103);
      uint64_t v46 = (void (*)(char *, char *))v94;
      v94(v44, v43);
      uint64_t v79 = *(void (**)(char *, uint64_t))(v45 + 72);
      uint64_t v80 = v45 + 72;
      uint64_t v96 = (char *)v43;
      uint64_t v78 = *(void *)(swift_getAssociatedConformanceWitness(v45, v43, v38, (uint64_t)&protocol requirements base descriptor for Collection, associated conformance descriptor for Collection.Collection.Index: Comparable)+ 8);
      uint64_t v76 = *(uint64_t (**)(char *, char *, const char *, uint64_t))(v78 + 8);
      uint64_t v77 = v78 + 8;
      uint64_t v90 = (Class *)v36[2];
      uint64_t v91 = v36 + 1;
      uint64_t v74 = v45 + 80;
      uint64_t v73 = (void (**)(char *))(v89 + 16);
      uint64_t v75 = (void (**)(char *, const char *))(v89 + 8);
      uint64_t v71 = v72 + 64;
      uint64_t v88 = v45 + 192;
      uint64_t v48 = v85;
      uint64_t v47 = v86;
      uint64_t v49 = v87;
      while (1)
      {
        uint64_t v50 = v98;
        ((void (*)(char *, char *, const char *))v90)(v48, v98, v49);
        uint64_t v51 = v42;
        uint64_t v52 = v96;
        ((void (*)(char *, uint64_t, char *))v99)(v44, v51, v96);
        uint64_t v53 = v48;
        uint64_t v54 = v50;
        v79(v52, v103);
        v46(v44, v52);
        LODWORD(v95) = v76(v53, v47, v49, v78);
        uint64_t v55 = v44;
        uint64_t v56 = *v91;
        ((void (*)(char *, const char *))*v91)(v47, v49);
        uint64_t v89 = v56;
        ((void (*)(char *, const char *))v56)(v53, v49);
        if (v95)
        {
          ((void (*)(char *, const char *))v89)(v50, v49);
          return ((uint64_t (*)(uint64_t, char *, const char *))v68)(v70, v82, v49);
        }
        uint64_t v44 = v55;
        uint64_t v57 = v96;
        uint64_t v58 = (void (*)(char *, void))(*(uint64_t (**)(char *, char *, char *))(v103 + 80))(v102, v54, v96);
        uint64_t v59 = v83;
        uint64_t v60 = AssociatedTypeWitness;
        (*v73)(v83);
        v58(v102, 0);
        uint64_t v61 = v97;
        char v62 = v92(v59);
        uint64_t v97 = v61;
        if (v61) {
          break;
        }
        char v63 = v62;
        (*v75)(v59, v60);
        uint64_t v64 = v82;
        uint64_t v48 = v85;
        if ((v63 & 1) == 0)
        {
          ((void (*)(char *, char *, const char *))v90)(v85, v98, v49);
          uint64_t v65 = v101;
          (*(void (**)(char *, char *, char *))(v72 + 64))(v64, v48, v57);
          ((void (*)(char *, const char *))v89)(v48, v49);
          ((void (*)(char *, uint64_t, char *))v99)(v44, v65, v57);
          (*(void (**)(char *, char *))(v103 + 192))(v64, v57);
          v94(v44, (uint64_t)v57);
        }
        uint64_t v42 = v101;
        ((void (*)(char *, uint64_t, char *))v99)(v44, v101, v57);
        (*(void (**)(char *, char *))(v103 + 192))(v98, v57);
        uint64_t v46 = (void (*)(char *, char *))v94;
        v94(v44, (uint64_t)v57);
        uint64_t v47 = v86;
      }
      (*v75)(v59, v60);
      uint64_t v66 = (uint64_t (*)(char *, const char *))v89;
      ((void (*)(char *, const char *))v89)(v98, v49);
      return v66(v82, v49);
    }
  }
  return result;
}

uint64_t closure #1 in MutableCollection<>.partition(by:)@<X0>(uint64_t (*a1)(char *)@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, void *a5@<X8>)
{
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, *(int ***)(*(void *)(a4 + 8) + 8), a3, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
  uint64_t v12 = (unint64_t *)type metadata accessor for UnsafeMutableBufferPointer(0, (uint64_t)AssociatedTypeWitness, v10, v11);
  uint64_t WitnessTable = swift_getWitnessTable(protocol conformance descriptor for UnsafeMutableBufferPointer<A>, v12, v13);
  uint64_t v16 = swift_getWitnessTable(protocol conformance descriptor for UnsafeMutableBufferPointer<A>, v12, v15);
  uint64_t result = MutableCollection<>._partitionImpl(by:)(a1, a2, (uint64_t)v12, WitnessTable, v16, (uint64_t)&v18);
  if (!v5) {
    *a5 = v18;
  }
  return result;
}

unint64_t specialized MutableCollection<>._partitionImpl(by:)(uint64_t (*a1)(char *))
{
  unint64_t v3 = v1[1];
  uint64_t v4 = HIBYTE(v3) & 0xF;
  if (!v4) {
    return 0;
  }
  unint64_t v6 = 0;
  unint64_t v7 = *v1;
  do
  {
    if (v6 >= 8) {
      unint64_t v8 = v3;
    }
    else {
      unint64_t v8 = v7;
    }
    char v22 = v8 >> (8 * (v6 & 7u));
    char v9 = a1(&v22);
    if (v2) {
      break;
    }
    uint64_t v10 = HIBYTE(v3) & 0xF;
    if (v9)
    {
      unint64_t v19 = v7;
      uint64_t v20 = a1;
      char v11 = 8 * v4 + 56;
      uint64_t v12 = v4;
      do
      {
        uint64_t v13 = v12 - 1;
        if (v12 < 1 || v4 > v10) {
          goto LABEL_25;
        }
        if ((uint64_t)v6 >= v13) {
          return v6;
        }
        BOOL v14 = (unint64_t)v12 >= 9;
        if ((unint64_t)v12 >= 9) {
          char v15 = v11;
        }
        else {
          char v15 = v11 - 64;
        }
        unint64_t v16 = v19;
        if (v14) {
          unint64_t v16 = v3;
        }
        char v21 = v16 >> (v15 & 0x38);
        char v17 = v20(&v21);
        v11 -= 8;
        uint64_t v12 = v13;
      }
      while ((v17 & 1) != 0);
      specialized MutableCollection.swapAt(_:_:)(v6, v13);
      unint64_t v3 = v1[1];
      if (v6 >= (HIBYTE(v3) & 0xF)) {
LABEL_25:
      }
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Index out of bounds", 19, 2, "Swift/Collection.swift", 22, 2, 0x2CAuLL, 0);
      uint64_t v4 = v13;
      unint64_t v7 = *v1;
      a1 = v20;
    }
    else if (v6 >= v10)
    {
      goto LABEL_25;
    }
    ++v6;
  }
  while ((uint64_t)v6 < v4);
  return v6;
}

uint64_t specialized MutableCollection<>._partitionImpl(by:)(uint64_t (*a1)(char *))
{
  uint64_t v3 = v1[1];
  if (v3 < 1) {
    return 0;
  }
  uint64_t v5 = 0;
  uint64_t v6 = *v1;
  uint64_t v7 = v1[1];
  do
  {
    if (v5 == v3) {
LABEL_17:
    }
      _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x207uLL, 0);
    char v15 = *(unsigned char *)(v6 + v5);
    char v8 = a1(&v15);
    if (v2) {
      break;
    }
    if (v8)
    {
      uint64_t v9 = v7;
      while (1)
      {
        uint64_t v10 = v9 - 1;
        if (v5 >= v9 - 1) {
          return v5;
        }
        if (v7 > v3) {
          goto LABEL_17;
        }
        char v14 = *(unsigned char *)(v6 + v9 - 1);
        char v11 = a1(&v14);
        uint64_t v9 = v10;
        if ((v11 & 1) == 0)
        {
          char v12 = *(unsigned char *)(v6 + v5);
          *(unsigned char *)(v6 + v5) = *(unsigned char *)(v6 + v10);
          *(unsigned char *)(v6 + v1_assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000034, 0x80000001816E2880, "Swift/Codable.swift", 19, 2, 0x11F9uLL, 0) = v12;
          uint64_t v7 = v10;
          goto LABEL_13;
        }
      }
    }
    uint64_t v10 = v7;
LABEL_13:
    ++v5;
  }
  while (v5 < v10);
  return v5;
}

Swift::Int specialized MutableCollection<>._partitionImpl(by:)(uint64_t (*a1)(char *))
{
  uint64_t v3 = *v1;
  if (!*v1) {
    return 0;
  }
  uint64_t v4 = v1[1];
  Swift::Int v5 = v4 - v3;
  if (v4 - v3 < 1) {
    return 0;
  }
  Swift::Int v7 = 0;
  Swift::Int v8 = v4 - v3;
  do
  {
    if (v7 == v5) {
      _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeRawBufferPointer.swift", 34, 2, 0xBCuLL, 0);
    }
    char v15 = *(unsigned char *)(v3 + v7);
    char v9 = a1(&v15);
    if (v2) {
      break;
    }
    if (v9)
    {
      Swift::Int v10 = v8;
      while (1)
      {
        if (v8 > v5) {
          _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Index out of bounds", 19, 2, "Swift/Collection.swift", 22, 2, 0x2CAuLL, 0);
        }
        Swift::Int v11 = v10 - 1;
        if (v7 >= v10 - 1) {
          return v7;
        }
        char v14 = *(unsigned char *)(v3 - 1 + v10);
        char v12 = a1(&v14);
        Swift::Int v10 = v11;
        if ((v12 & 1) == 0)
        {
          UnsafeMutableRawBufferPointer.swapAt(_:_:)(v7, v11);
          Swift::Int v8 = v11;
          goto LABEL_14;
        }
      }
    }
    Swift::Int v11 = v8;
LABEL_14:
    ++v7;
  }
  while (v7 < v11);
  return v7;
}

uint64_t MutableCollection<>._partitionImpl(by:)@<X0>(uint64_t (*a1)(char *)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v76 = a5;
  uint64_t v7 = a3;
  uint64_t v102 = a1;
  uint64_t v103 = a2;
  uint64_t v77 = a6;
  uint64_t v92 = a4;
  uint64_t v8 = *(void *)(a4 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, *(int ***)(v8 + 8), a3, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
  uint64_t v93 = (void (**)(char *, const char *))*((void *)AssociatedTypeWitness - 1);
  uint64_t v9 = MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v83 = (char *)&v73 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = MEMORY[0x1F4188790](v9);
  uint64_t v79 = (char *)&v73 - v12;
  uint64_t v13 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v11);
  char v15 = (char *)&v73 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v106 = swift_getAssociatedTypeWitness(0, (int **)v8, v7, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  uint64_t v78 = *((void *)v106 - 1);
  uint64_t v16 = MEMORY[0x1F4188790](v106);
  uint64_t v74 = (char *)&v73 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = MEMORY[0x1F4188790](v16);
  uint64_t v90 = (char *)&v73 - v19;
  uint64_t v20 = MEMORY[0x1F4188790](v18);
  char v22 = (char *)&v73 - v21;
  MEMORY[0x1F4188790](v20);
  uint64_t v24 = (char *)&v73 - v23;
  uint64_t v25 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 16);
  v25(v15, v6, v7);
  uint64_t v104 = v8;
  (*(void (**)(uint64_t, uint64_t))(v8 + 64))(v7, v8);
  uint64_t v26 = *(void (**)(char *, uint64_t))(v13 + 8);
  v26(v15, v7);
  uint64_t v95 = v25;
  uint64_t v96 = v13 + 16;
  v25(v15, v107, v7);
  uint64_t v27 = v104;
  (*(void (**)(uint64_t))(v104 + 72))(v7);
  uint64_t v100 = v26;
  uint64_t v101 = v13 + 8;
  v26(v15, v7);
  uint64_t v28 = v27;
  uint64_t v29 = v106;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v27, v7, (uint64_t)v106, (uint64_t)&protocol requirements base descriptor for Collection, associated conformance descriptor for Collection.Collection.Index: Comparable);
  uint64_t v31 = *(uint64_t (**)(char *, char *))(AssociatedConformanceWitness + 16);
  uint64_t v105 = v24;
  uint64_t v32 = v22;
  uint64_t v98 = AssociatedConformanceWitness + 16;
  uint64_t v99 = AssociatedConformanceWitness;
  uint64_t v97 = v31;
  if (((uint64_t (*)(char *, char *, const char *))v31)(v24, v22, v29))
  {
    uint64_t v33 = v28 + 80;
    unint64_t v34 = *(uint64_t (**)(void, void, void, void))(v28 + 80);
    uint64_t v35 = (void (**)(void))(v93 + 2);
    ++v93;
    uint64_t v75 = v28 + 192;
    uint64_t v88 = (void (**)(char *, uint64_t, uint64_t))(v92 + 40);
    uint64_t v82 = (void (**)(char *, char *, const char *))(v78 + 16);
    uint64_t v89 = (void (**)(char *, const char *))(v78 + 8);
    uint64_t v73 = v76 + 64;
    uint64_t v36 = v28;
    uint64_t v37 = AssociatedTypeWitness;
    uint64_t v38 = v109;
    uint64_t v94 = v32;
    uint64_t v87 = v33;
    uint64_t v86 = v34;
    uint64_t v85 = v35;
    while (1)
    {
      uint64_t v39 = v105;
      uint64_t v40 = (void (*)(char *, void))v34(v108, v105, v7, v36);
      uint64_t v41 = v79;
      uint64_t v84 = (void (*)(char *))*v35;
      v84(v79);
      v40(v108, 0);
      char v42 = v102(v41);
      if (v38)
      {
        (*v93)(v41, v37);
        uint64_t v71 = *v89;
        uint64_t v72 = v106;
        (*v89)(v94, v106);
        return ((uint64_t (*)(char *, const char *))v71)(v39, v72);
      }
      char v43 = v42;
      uint64_t v44 = *v93;
      (*v93)(v41, v37);
      if (v43) {
        break;
      }
      v95(v15, v107, v7);
      (*(void (**)(char *, uint64_t))(v104 + 192))(v39, v7);
      char v63 = v39;
      uint64_t v32 = v94;
LABEL_11:
      v100(v15, v7);
      char v64 = v97(v63, v32);
      uint64_t v36 = v104;
      unint64_t v34 = v86;
      uint64_t v35 = v85;
      if ((v64 & 1) == 0) {
        goto LABEL_12;
      }
    }
    uint64_t v80 = v44;
    uint64_t v109 = 0;
    uint64_t v81 = *v88;
    while (1)
    {
      v95(v15, v107, v7);
      uint64_t v45 = v94;
      v81(v94, v7, v92);
      uint64_t v46 = v15;
      v100(v15, v7);
      uint64_t v47 = *v82;
      uint64_t v48 = v90;
      uint64_t v49 = v106;
      (*v82)(v90, v105, v106);
      char v50 = ((uint64_t (*)(char *, char *, const char *, uint64_t))v97)(v48, v45, v49, v99);
      uint64_t v51 = *v89;
      (*v89)(v48, v49);
      if ((v50 & 1) == 0)
      {
        uint64_t v66 = v106;
        v51(v45, v106);
        uint64_t v67 = v77;
        uint64_t v65 = v78;
        uint64_t v68 = v105;
        return (*(uint64_t (**)(uint64_t, char *, const char *))(v65 + 32))(v67, v68, v66);
      }
      uint64_t v52 = (void (*)(char *, void))v86(v108, v45, v7, v104);
      uint64_t v53 = v83;
      uint64_t v37 = AssociatedTypeWitness;
      v84(v83);
      v52(v108, 0);
      uint64_t v54 = v109;
      char v55 = v102(v53);
      uint64_t v109 = v54;
      if (v54) {
        break;
      }
      char v56 = v55;
      v80(v53, v37);
      char v15 = v46;
      if ((v56 & 1) == 0)
      {
        uint64_t v57 = v90;
        uint64_t v84 = (void (*)(char *))v7;
        uint64_t v58 = v106;
        v47(v90, v105, v106);
        uint64_t v59 = v74;
        uint64_t v60 = v94;
        v47(v74, v94, v58);
        uint64_t v61 = v107;
        (*(void (**)(char *, char *, void (*)(char *)))(v76 + 64))(v57, v59, v84);
        v51(v59, v58);
        char v62 = v57;
        char v15 = v46;
        v51(v62, v58);
        char v63 = v105;
        uint64_t v32 = v60;
        v95(v46, v61, (uint64_t)v84);
        (*(void (**)(char *, void (*)(char *)))(v104 + 192))(v63, v84);
        uint64_t v38 = v109;
        uint64_t v7 = (uint64_t)v84;
        goto LABEL_11;
      }
    }
    v80(v53, v37);
    uint64_t v70 = v106;
    v51(v94, v106);
    return ((uint64_t (*)(char *, const char *))v51)(v105, v70);
  }
  else
  {
LABEL_12:
    uint64_t v65 = v78;
    uint64_t v66 = v106;
    (*(void (**)(char *, const char *))(v78 + 8))(v32, v106);
    uint64_t v67 = v77;
    uint64_t v68 = v105;
    return (*(uint64_t (**)(uint64_t, char *, const char *))(v65 + 32))(v67, v68, v66);
  }
}

uint64_t MutableCollection._indexedStablePartition(count:range:by:)@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v8 = v7;
  uint64_t v155 = a4;
  unint64_t v156 = a3;
  uint64_t v159 = a2;
  uint64_t v160 = a1;
  uint64_t v150 = a6;
  uint64_t v151 = a7;
  uint64_t v10 = *(void *)(a6 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, (int **)v10, a5, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0, (uint64_t)AssociatedTypeWitness, (uint64_t)AssociatedTypeWitness, "lower upper ", 0);
  uint64_t v12 = MEMORY[0x1F4188790](TupleTypeMetadata2);
  char v148 = (char *)v126 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  BOOL v149 = (char *)v126 - v14;
  uint64_t v157 = a5;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v10, a5, (uint64_t)AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Collection, associated conformance descriptor for Collection.Collection.Index: Comparable);
  uint64_t v17 = type metadata accessor for Range(0, (uint64_t)AssociatedTypeWitness, AssociatedConformanceWitness, v16);
  uint64_t v18 = MEMORY[0x1F4188790](v17);
  uint64_t v19 = MEMORY[0x1F4188790](v18);
  uint64_t v21 = (char *)v126 - v20;
  uint64_t v22 = MEMORY[0x1F4188790](v19);
  uint64_t v23 = MEMORY[0x1F4188790](v22);
  uint64_t v25 = (char *)v126 - v24;
  uint64_t v26 = *((void *)AssociatedTypeWitness - 1);
  uint64_t v27 = MEMORY[0x1F4188790](v23);
  uint64_t v28 = MEMORY[0x1F4188790](v27);
  uint64_t v29 = MEMORY[0x1F4188790](v28);
  uint64_t v30 = MEMORY[0x1F4188790](v29);
  uint64_t v31 = MEMORY[0x1F4188790](v30);
  uint64_t v32 = MEMORY[0x1F4188790](v31);
  uint64_t v33 = MEMORY[0x1F4188790](v32);
  uint64_t v35 = (char *)v126 - v34;
  uint64_t v36 = MEMORY[0x1F4188790](v33);
  uint64_t v38 = (char *)v126 - v37;
  uint64_t v39 = MEMORY[0x1F4188790](v36);
  uint64_t v41 = (char *)v126 - v40;
  uint64_t v42 = MEMORY[0x1F4188790](v39);
  uint64_t v43 = MEMORY[0x1F4188790](v42);
  if (v160 != (char *)1)
  {
    if (!v160) {
      return (*(uint64_t (**)(uint64_t, uint64_t, const char *))(v26 + 16))(v151, v159, AssociatedTypeWitness);
    }
    uint64_t v140 = (void (*)(void, void))v25;
    uint64_t v132 = v50;
    uint64_t v133 = v49;
    uint64_t v134 = v48;
    id v142 = v47;
    uint64_t v130 = v46;
    uint64_t v128 = v45;
    uint64_t v129 = v44;
    uint64_t v131 = v21;
    uint64_t v143 = v54;
    uint64_t v127 = v53;
    uint64_t v147 = v52;
    uint64_t v144 = v43;
    uint64_t v153 = v8;
    uint64_t v154 = (uint64_t)v126 - v51;
    uint64_t v58 = *(void (**)(uint64_t))(v10 + 136);
    uint64_t v59 = v159;
    uint64_t v139 = (uint64_t)v160 / 2;
    v58(v159);
    uint64_t v161 = v26;
    uint64_t v60 = *(void (**)(char *, uint64_t, const char *))(v26 + 16);
    uint64_t v61 = v59;
    uint64_t v62 = v26 + 16;
    v60(v41, v61, AssociatedTypeWitness);
    v60(v38, (uint64_t)v41, AssociatedTypeWitness);
    unint64_t v146 = v60;
    v60(v35, v154, AssociatedTypeWitness);
    char v63 = *(uint64_t (**)(uint64_t, uint64_t, const char *, uint64_t))(AssociatedConformanceWitness + 24);
    uint64_t v137 = AssociatedConformanceWitness;
    uint64_t v136 = AssociatedConformanceWitness + 24;
    uint64_t v135 = v63;
    if (v63((uint64_t)v38, (uint64_t)v35, AssociatedTypeWitness, AssociatedConformanceWitness))
    {
      uint64_t v64 = v161 + 8;
      uint64_t v65 = *(void (**)(char *, const char *))(v161 + 8);
      uint64_t v152 = v65;
      v65(v35, AssociatedTypeWitness);
      v65(v38, AssociatedTypeWitness);
      uint64_t v66 = TupleTypeMetadata2;
      uint64_t v67 = v149;
      uint64_t v68 = &v149[*((int *)TupleTypeMetadata2 + 12)];
      uint64_t v69 = *(char **)(v161 + 32);
      v161 += 32;
      ((void (*)(char *, char *, const char *))v69)(v149, v41, AssociatedTypeWitness);
      uint64_t v138 = v68;
      uint64_t v70 = (void (*)(char *, char *, const char *))v146;
      v146(v68, v154, AssociatedTypeWitness);
      uint64_t v71 = v148;
      uint64_t v72 = &v148[*((int *)v66 + 12)];
      v70(v148, v67, AssociatedTypeWitness);
      v70(v72, v68, AssociatedTypeWitness);
      uint64_t v141 = v62;
      uint64_t v73 = v143;
      ((void (*)(uint64_t, char *, const char *))v69)(v143, v71, AssociatedTypeWitness);
      uint64_t v74 = v152;
      v152(v72, AssociatedTypeWitness);
      uint64_t v75 = &v71[*((int *)TupleTypeMetadata2 + 12)];
      ((void (*)(char *, char *, const char *))v69)(v71, v67, AssociatedTypeWitness);
      ((void (*)(char *, char *, const char *))v69)(v75, v138, AssociatedTypeWitness);
      uint64_t v76 = v144;
      ((void (*)(uint64_t, char *, const char *))v69)(v73 + *(int *)(v144 + 36), v75, AssociatedTypeWitness);
      uint64_t v145 = v64;
      v74(v71, AssociatedTypeWitness);
      uint64_t v77 = v147;
      uint64_t v78 = v147 + 32;
      uint64_t v79 = *(void (**)(void (*)(void, void), uint64_t, uint64_t))(v147 + 32);
      uint64_t v80 = v140;
      v79(v140, v73, v76);
      uint64_t v81 = v139;
      uint64_t v82 = v153;
      MutableCollection._indexedStablePartition(count:range:by:)(v139, v80, v156, v155, v157, v150);
      uint64_t v153 = v82;
      if (v82)
      {
        (*(void (**)(void, uint64_t))(v77 + 8))(v80, v76);
        return ((uint64_t (*)(uint64_t, const char *))v152)(v154, AssociatedTypeWitness);
      }
      v126[0] = v79;
      v126[1] = v78;
      uint64_t v138 = v69;
      uint64_t v83 = (void (*)(uint64_t, uint64_t, const char *))v146;
      uint64_t v84 = *(void (**)(void, void))(v77 + 8);
      uint64_t v147 = v77 + 8;
      uint64_t v140 = v84;
      uint64_t result = ((uint64_t (*)(void, uint64_t))v84)(v80, v76);
      if (__OFSUB__(v160, v81))
      {
        __break(1u);
        return result;
      }
      v160 -= v81;
      uint64_t v85 = v134;
      v83(v134, v159 + *(int *)(v76 + 36), AssociatedTypeWitness);
      uint64_t v86 = v132;
      v83(v132, v154, AssociatedTypeWitness);
      uint64_t v87 = v133;
      v83((uint64_t)v133, v85, AssociatedTypeWitness);
      char v88 = v135(v86, (uint64_t)v87, AssociatedTypeWitness, v137);
      uint64_t v89 = TupleTypeMetadata2;
      if (v88)
      {
        uint64_t v90 = v87;
        uint64_t v91 = (void (*)(uint64_t, const char *))v152;
        v152(v90, AssociatedTypeWitness);
        v91(v86, AssociatedTypeWitness);
        uint64_t v92 = v149;
        uint64_t v93 = &v149[*((int *)v89 + 12)];
        v83((uint64_t)v149, v154, AssociatedTypeWitness);
        uint64_t v94 = v89;
        uint64_t v95 = v138;
        ((void (*)(char *, uint64_t, const char *))v138)(v93, v85, AssociatedTypeWitness);
        uint64_t v96 = *((int *)v94 + 12);
        uint64_t v97 = v148;
        uint64_t v98 = &v148[v96];
        v83((uint64_t)v148, (uint64_t)v92, AssociatedTypeWitness);
        v83((uint64_t)v98, (uint64_t)v93, AssociatedTypeWitness);
        uint64_t v99 = v143;
        ((void (*)(uint64_t, char *, const char *))v95)(v143, v97, AssociatedTypeWitness);
        v152(v98, AssociatedTypeWitness);
        uint64_t v100 = &v97[*((int *)TupleTypeMetadata2 + 12)];
        ((void (*)(char *, char *, const char *))v95)(v97, v92, AssociatedTypeWitness);
        ((void (*)(char *, char *, const char *))v95)(v100, v93, AssociatedTypeWitness);
        uint64_t v101 = v144;
        ((void (*)(uint64_t, char *, const char *))v95)(v99 + *(int *)(v144 + 36), v100, AssociatedTypeWitness);
        v152(v97, AssociatedTypeWitness);
        uint64_t v102 = v131;
        ((void (*)(char *, uint64_t, uint64_t))v126[0])(v131, v99, v101);
        uint64_t v103 = v130;
        uint64_t v104 = v153;
        MutableCollection._indexedStablePartition(count:range:by:)(v160, v102, v156, v155, v157, v150);
        uint64_t v153 = v104;
        if (v104)
        {
          v140(v102, v101);
          v152(v142, AssociatedTypeWitness);
          return ((uint64_t (*)(uint64_t, const char *))v152)(v154, AssociatedTypeWitness);
        }
        v140(v102, v101);
        uint64_t v105 = v128;
        uint64_t v106 = v142;
        uint64_t v107 = (void (*)(uint64_t, uint64_t, const char *))v146;
        v146(v128, (uint64_t)v142, AssociatedTypeWitness);
        uint64_t v108 = v129;
        v107((uint64_t)v129, v103, AssociatedTypeWitness);
        if (v135((uint64_t)v105, (uint64_t)v108, AssociatedTypeWitness, v137))
        {
          uint64_t v109 = (void (*)(uint64_t, const char *))v152;
          v152(v108, AssociatedTypeWitness);
          v109((uint64_t)v105, AssociatedTypeWitness);
          uint64_t v110 = TupleTypeMetadata2;
          uint64_t v111 = v149;
          uint64_t v112 = &v149[*((int *)TupleTypeMetadata2 + 12)];
          uint64_t v113 = v106;
          unint64_t v114 = v138;
          ((void (*)(char *, char *, const char *))v138)(v149, v113, AssociatedTypeWitness);
          uint64_t v160 = v112;
          ((void (*)(char *, uint64_t, const char *))v114)(v112, v103, AssociatedTypeWitness);
          uint64_t v115 = v97;
          uint64_t v116 = &v97[*((int *)v110 + 12)];
          uint64_t v117 = v97;
          uint64_t v118 = (void (*)(char *, char *, const char *))v146;
          v146(v117, (uint64_t)v111, AssociatedTypeWitness);
          v118(v116, v112, AssociatedTypeWitness);
          uint64_t v119 = v143;
          ((void (*)(uint64_t, char *, const char *))v114)(v143, v115, AssociatedTypeWitness);
          v152(v116, AssociatedTypeWitness);
          uint64_t v120 = &v115[*((int *)TupleTypeMetadata2 + 12)];
          ((void (*)(char *, char *, const char *))v114)(v115, v111, AssociatedTypeWitness);
          ((void (*)(char *, char *, const char *))v114)(v120, v160, AssociatedTypeWitness);
          uint64_t v121 = v144;
          ((void (*)(uint64_t, char *, const char *))v114)(v119 + *(int *)(v144 + 36), v120, AssociatedTypeWitness);
          uint64_t v122 = v115;
          uint64_t v123 = (uint64_t (*)(uint64_t, const char *))v152;
          v152(v122, AssociatedTypeWitness);
          uint64_t v124 = v127;
          ((void (*)(uint64_t, uint64_t, uint64_t))v126[0])(v127, v119, v121);
          uint64_t v125 = v154;
          MutableCollection._rotate(in:shiftingToStart:)(v124, v154, v157, v150, v151);
          v140(v124, v121);
          return v123(v125, AssociatedTypeWitness);
        }
      }
    }
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
  }
  uint64_t v56 = v43;
  uint64_t v57 = v159;
  uint64_t result = v156(v159);
  if (!v8)
  {
    if (result) {
      return (*(uint64_t (**)(uint64_t, uint64_t, const char *))(v26 + 16))(v151, v57, AssociatedTypeWitness);
    }
    else {
      return (*(uint64_t (**)(uint64_t, uint64_t, const char *))(v26 + 16))(v151, v57 + *(int *)(v56 + 36), AssociatedTypeWitness);
    }
  }
  return result;
}

uint64_t static Int./ infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return static Int./ infix(_:_:)(a1, a2, 0x3829uLL, 0x3830uLL);
}

uint64_t MutableCollection._rotate(in:shiftingToStart:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v112 = a5;
  uint64_t v118 = a4;
  uint64_t v8 = *(int ***)(a4 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v8, a3, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0, (uint64_t)AssociatedTypeWitness, (uint64_t)AssociatedTypeWitness, "lower upper ", 0);
  uint64_t v10 = MEMORY[0x1F4188790](TupleTypeMetadata2);
  uint64_t v119 = (char *)&v112 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10);
  uint64_t v139 = (char *)&v112 - v12;
  uint64_t v117 = a3;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness((uint64_t)v8, a3, (uint64_t)AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Collection, associated conformance descriptor for Collection.Collection.Index: Comparable);
  char v15 = type metadata accessor for Range(0, (uint64_t)AssociatedTypeWitness, AssociatedConformanceWitness, v14);
  id v142 = (char *)*(v15 - 1);
  uint64_t v16 = MEMORY[0x1F4188790](v15);
  uint64_t v116 = (char *)&v112 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = MEMORY[0x1F4188790](v16);
  uint64_t v137 = (char *)&v112 - v19;
  uint64_t v20 = MEMORY[0x1F4188790](v18);
  uint64_t v136 = (uint64_t)&v112 - v21;
  uint64_t v22 = *((void *)AssociatedTypeWitness - 1);
  uint64_t v23 = MEMORY[0x1F4188790](v20);
  uint64_t v122 = (char *)&v112 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = MEMORY[0x1F4188790](v23);
  uint64_t v121 = (char *)&v112 - v26;
  uint64_t v27 = MEMORY[0x1F4188790](v25);
  uint64_t v120 = (char *)&v112 - v28;
  uint64_t v29 = MEMORY[0x1F4188790](v27);
  uint64_t v125 = (char *)&v112 - v30;
  uint64_t v31 = MEMORY[0x1F4188790](v29);
  uint64_t v124 = (char *)&v112 - v32;
  uint64_t v33 = MEMORY[0x1F4188790](v31);
  uint64_t v126 = (char *)&v112 - v34;
  uint64_t v35 = MEMORY[0x1F4188790](v33);
  uint64_t v123 = (char *)&v112 - v36;
  uint64_t v37 = MEMORY[0x1F4188790](v35);
  uint64_t v135 = (char *)&v112 - v38;
  uint64_t v39 = MEMORY[0x1F4188790](v37);
  uint64_t v115 = (uint64_t)&v112 - v40;
  uint64_t v41 = MEMORY[0x1F4188790](v39);
  uint64_t v113 = (char *)&v112 - v42;
  uint64_t v43 = MEMORY[0x1F4188790](v41);
  uint64_t v45 = (char *)&v112 - v44;
  uint64_t v46 = MEMORY[0x1F4188790](v43);
  uint64_t v48 = (char *)&v112 - v47;
  MEMORY[0x1F4188790](v46);
  uint64_t v50 = (char *)&v112 - v49;
  uint64_t v149 = v22;
  uint64_t v51 = *(void (**)(char *, uint64_t, const char *))(v22 + 16);
  v51((char *)&v112 - v49, a2, AssociatedTypeWitness);
  v51(v48, a1, AssociatedTypeWitness);
  uint64_t v138 = v15;
  uint64_t v52 = a1 + *((int *)v15 + 9);
  uint64_t v147 = (void (*)(char *, char *, const char *))v51;
  uint64_t v148 = v22 + 16;
  v51(v45, v52, AssociatedTypeWitness);
  uint64_t v53 = AssociatedConformanceWitness;
  uint64_t v54 = *(void *)(AssociatedConformanceWitness + 8);
  char v55 = *(uint64_t (**)(char *, char *, const char *, uint64_t))(v54 + 8);
  if (v55(v48, v50, AssociatedTypeWitness, v54))
  {
    uint64_t v56 = v149;
    uint64_t v57 = *(void (**)(char *, const char *))(v149 + 8);
    v57(v48, AssociatedTypeWitness);
    v57(v50, AssociatedTypeWitness);
    return (*(uint64_t (**)(uint64_t, char *, const char *))(v56 + 32))(v112, v45, AssociatedTypeWitness);
  }
  else
  {
    uint64_t v144 = v48;
    uint64_t v141 = v55;
    if (v55(v50, v45, AssociatedTypeWitness, v54))
    {
      uint64_t v60 = v149 + 8;
      uint64_t v59 = *(void (**)(char *, const char *))(v149 + 8);
      v59(v45, AssociatedTypeWitness);
      v59(v50, AssociatedTypeWitness);
      return (*(uint64_t (**)(uint64_t, char *, const char *))(v60 + 24))(v112, v144, AssociatedTypeWitness);
    }
    else
    {
      uint64_t v127 = v54 + 8;
      uint64_t v128 = v54;
      uint64_t v134 = (void (**)(char *, char *, const char *))(v149 + 32);
      uint64_t v143 = v45;
      v147(v113, v45, AssociatedTypeWitness);
      uint64_t v61 = v53;
      uint64_t v62 = v53 + 24;
      char v63 = (uint64_t *)(v149 + 8);
      uint64_t v133 = (void (**)(uint64_t, char *, Class *))(v142 + 32);
      unint64_t v114 = (void (**)(uint64_t, Class *))(v142 + 8);
      uint64_t v64 = v126;
      uint64_t v65 = v123;
      uint64_t v66 = v144;
      uint64_t v131 = v62;
      uint64_t v132 = v61;
      uint64_t v140 = v50;
      uint64_t v145 = (uint64_t *)(v149 + 8);
      while (1)
      {
        uint64_t v67 = v147;
        v147(v65, v66, AssociatedTypeWitness);
        v67(v64, v50, AssociatedTypeWitness);
        uint64_t v68 = v124;
        v67(v124, v65, AssociatedTypeWitness);
        uint64_t v69 = v125;
        v67(v125, v64, AssociatedTypeWitness);
        uint64_t v70 = *(char **)(v61 + 24);
        if ((((uint64_t (*)(char *, char *, const char *, uint64_t))v70)(v68, v69, AssociatedTypeWitness, v61) & 1) == 0) {
          goto LABEL_18;
        }
        uint64_t v130 = v70;
        uint64_t v71 = v69;
        uint64_t v149 = *v63;
        uint64_t v72 = (void (*)(char *, const char *))v149;
        ((void (*)(char *, const char *))v149)(v71, AssociatedTypeWitness);
        v72(v68, AssociatedTypeWitness);
        uint64_t v73 = TupleTypeMetadata2;
        uint64_t v74 = v139;
        uint64_t v75 = &v139[*((int *)TupleTypeMetadata2 + 12)];
        uint64_t v76 = *v134;
        (*v134)(v139, v65, AssociatedTypeWitness);
        id v142 = v75;
        v76(v75, v64, AssociatedTypeWitness);
        uint64_t v77 = v119;
        uint64_t v78 = &v119[*((int *)v73 + 12)];
        uint64_t v79 = v147;
        v147(v119, v74, AssociatedTypeWitness);
        v79(v78, v75, AssociatedTypeWitness);
        uint64_t v80 = v137;
        v76(v137, v77, AssociatedTypeWitness);
        ((void (*)(char *, const char *))v149)(v78, AssociatedTypeWitness);
        uint64_t v81 = &v77[*((int *)TupleTypeMetadata2 + 12)];
        v76(v77, v74, AssociatedTypeWitness);
        v76(v81, v142, AssociatedTypeWitness);
        uint64_t v82 = v138;
        uint64_t v83 = &v80[*((int *)v138 + 9)];
        id v142 = (char *)v76;
        v76(v83, v81, AssociatedTypeWitness);
        ((void (*)(char *, const char *))v149)(v77, AssociatedTypeWitness);
        uint64_t v129 = *v133;
        v129(v136, v80, v82);
        uint64_t v84 = v120;
        v79(v120, v140, AssociatedTypeWitness);
        uint64_t v85 = v121;
        v79(v121, v84, AssociatedTypeWitness);
        uint64_t v86 = v122;
        v79(v122, v143, AssociatedTypeWitness);
        if ((((uint64_t (*)(char *, char *, const char *, uint64_t))v130)(v85, v86, AssociatedTypeWitness, v132) & 1) == 0)LABEL_18:_assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0); {
        uint64_t v87 = (void (*)(char *, const char *))v149;
        }
        ((void (*)(char *, const char *))v149)(v86, AssociatedTypeWitness);
        v87(v85, AssociatedTypeWitness);
        v87(v144, AssociatedTypeWitness);
        char v88 = TupleTypeMetadata2;
        uint64_t v89 = v139;
        uint64_t v90 = &v139[*((int *)TupleTypeMetadata2 + 12)];
        ((void (*)(char *, char *, const char *))v142)(v139, v84, AssociatedTypeWitness);
        uint64_t v130 = v90;
        uint64_t v91 = v147;
        v147(v90, v143, AssociatedTypeWitness);
        uint64_t v92 = &v77[*((int *)v88 + 12)];
        v91(v77, v89, AssociatedTypeWitness);
        v91(v92, v90, AssociatedTypeWitness);
        uint64_t v93 = v137;
        uint64_t v94 = v142;
        ((void (*)(char *, char *, const char *))v142)(v137, v77, AssociatedTypeWitness);
        v87(v92, AssociatedTypeWitness);
        uint64_t v95 = &v77[*((int *)TupleTypeMetadata2 + 12)];
        ((void (*)(char *, char *, const char *))v94)(v77, v89, AssociatedTypeWitness);
        ((void (*)(char *, char *, const char *))v94)(v95, v130, AssociatedTypeWitness);
        uint64_t v96 = v138;
        ((void (*)(char *, char *, const char *))v94)(&v93[*((int *)v138 + 9)], v95, AssociatedTypeWitness);
        v87(v77, AssociatedTypeWitness);
        uint64_t v97 = (uint64_t)v116;
        v129((uint64_t)v116, v93, v96);
        uint64_t v98 = v115;
        uint64_t v100 = v135;
        uint64_t v99 = v136;
        MutableCollection._swapNonemptySubrangePrefixes(_:_:)(v115, v135, v136, v97, v117, v118);
        uint64_t v101 = *v114;
        (*v114)(v97, v96);
        v101(v99, v96);
        uint64_t v102 = v143;
        uint64_t v103 = v128;
        uint64_t v104 = v141;
        char v105 = v141(v100, v143, AssociatedTypeWitness, v128);
        uint64_t v106 = v126;
        uint64_t v107 = (void (*)(char *, uint64_t, const char *))v147;
        if (v105)
        {
          if (v104(v113, v102, AssociatedTypeWitness, v103))
          {
            uint64_t v108 = v113;
            ((void (*)(char *, const char *))v149)(v113, AssociatedTypeWitness);
            v107(v108, v98, AssociatedTypeWitness);
          }
          uint64_t v103 = v128;
          if (v141((char *)v98, v140, AssociatedTypeWitness, v128)) {
            break;
          }
        }
        uint64_t v64 = v106;
        uint64_t v109 = v144;
        ((void (*)(char *, uint64_t, const char *))v94)(v144, v98, AssociatedTypeWitness);
        uint64_t v110 = v109;
        uint64_t v50 = v140;
        if (v141(v110, v140, AssociatedTypeWitness, v103))
        {
          char v63 = v145;
          ((void (*)(char *, const char *))v149)(v50, AssociatedTypeWitness);
          ((void (*)(char *, char *, const char *))v94)(v50, v135, AssociatedTypeWitness);
        }
        else
        {
          char v63 = v145;
          ((void (*)(char *, const char *))v149)(v135, AssociatedTypeWitness);
        }
        uint64_t v61 = v132;
        uint64_t v66 = v144;
        uint64_t v65 = v123;
      }
      uint64_t v111 = (void (*)(uint64_t, const char *))v149;
      ((void (*)(char *, const char *))v149)(v135, AssociatedTypeWitness);
      v111(v98, AssociatedTypeWitness);
      v111((uint64_t)v102, AssociatedTypeWitness);
      v111((uint64_t)v140, AssociatedTypeWitness);
      return ((uint64_t (*)(uint64_t, char *, const char *))v94)(v112, v113, AssociatedTypeWitness);
    }
  }
}

uint64_t Collection._partitioningIndex(where:)@<X0>(uint64_t (*a1)(char *)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char *a5@<X8>)
{
  uint64_t v41 = a1;
  uint64_t v42 = a2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, *(int ***)(a4 + 8), a3, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
  uint64_t v10 = *((void *)AssociatedTypeWitness - 1);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v12 = (char *)&v29 - v11;
  uint64_t v39 = swift_getAssociatedTypeWitness(0, (int **)a4, a3, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  uint64_t v30 = *((void *)v39 - 1);
  MEMORY[0x1F4188790](v39);
  uint64_t v14 = (char *)&v29 - v13;
  uint64_t v15 = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 112))(a3, a4);
  uint64_t v16 = *(uint64_t (**)(uint64_t, uint64_t))(a4 + 64);
  uint64_t v46 = a5;
  uint64_t v43 = a3;
  uint64_t v44 = v5;
  uint64_t result = v16(a3, a4);
  if (v15 >= 1)
  {
    uint64_t v37 = *(void (**)(char *, unint64_t, uint64_t, uint64_t))(a4 + 136);
    uint64_t v38 = a4 + 136;
    uint64_t v31 = a4 + 184;
    uint64_t v32 = v12;
    uint64_t v34 = *(uint64_t (**)(unsigned char *, char *, uint64_t, uint64_t))(a4 + 80);
    uint64_t v35 = a4 + 80;
    uint64_t v33 = (void (**)(char *))(v10 + 16);
    uint64_t v36 = (void (**)(char *, const char *))(v10 + 8);
    uint64_t v18 = (void (**)(char *, const char *))(v30 + 8);
    while (1)
    {
      uint64_t v21 = v43;
      v37(v46, (unint64_t)v15 >> 1, v43, a4);
      uint64_t v22 = (void (*)(unsigned char *, void))v34(v45, v14, v21, a4);
      uint64_t v23 = AssociatedTypeWitness;
      (*v33)(v12);
      v22(v45, 0);
      char v24 = v41(v12);
      if (v6) {
        break;
      }
      char v25 = v24;
      (*v36)(v12, v23);
      uint64_t v26 = *v18;
      if (v25)
      {
        uint64_t result = ((uint64_t (*)(char *, const char *))v26)(v14, v39);
        uint64_t v15 = (unint64_t)v15 >> 1;
      }
      else
      {
        uint64_t v19 = v39;
        v26(v46, v39);
        (*(void (**)(char *, uint64_t, uint64_t))(a4 + 184))(v14, v43, a4);
        uint64_t v20 = v19;
        uint64_t v12 = v32;
        uint64_t result = ((uint64_t (*)(char *, const char *))v26)(v14, v20);
        v15 += ~((unint64_t)v15 >> 1);
      }
      if (v15 <= 0) {
        return result;
      }
    }
    (*v36)(v12, v23);
    uint64_t v27 = *v18;
    uint64_t v28 = v39;
    (*v18)(v14, v39);
    return ((uint64_t (*)(char *, const char *))v27)(v46, v28);
  }
  return result;
}

uint64_t Sequence.shuffled<A>(using:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  MEMORY[0x1F4188790](a1);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))((char *)&v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), v5, a2);
  uint64_t v23 = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 56))(a2, a4);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, (int **)a4, a2, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
  uint64_t v16 = (unint64_t *)type metadata accessor for ContiguousArray(0, (uint64_t)AssociatedTypeWitness, v14, v15);
  uint64_t WitnessTable = swift_getWitnessTable(protocol conformance descriptor for ContiguousArray<A>, v16, v17);
  uint64_t v20 = swift_getWitnessTable(protocol conformance descriptor for ContiguousArray<A>, v16, v19);
  MutableCollection<>.shuffle<A>(using:)(a1, (uint64_t)v16, a3, WitnessTable, v20, a5);
  return v23;
}

uint64_t specialized MutableCollection<>.shuffle<A>(using:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v21 = a4;
  uint64_t v6 = *(void *)(a3 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (int **)v6, a2, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  uint64_t v7 = *((void *)AssociatedTypeWitness - 1);
  uint64_t v8 = MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v10 = (char *)v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8);
  uint64_t v12 = (char *)v20 - v11;
  uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t))(v6 + 112);
  uint64_t result = v13(a2, v6);
  if (result >= 2)
  {
    uint64_t v15 = v13(a2, v6);
    (*(void (**)(uint64_t, uint64_t))(v6 + 64))(a2, v6);
    if (v15 <= 1)
    {
      uint64_t v17 = *(void (**)(char *, const char *))(v7 + 8);
    }
    else
    {
      v20[3] = a3 + 64;
      void v20[4] = v21 + 32;
      uint64_t v16 = (void (**)(char *, const char *))(v7 + 8);
      v20[1] = (v7 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
      void v20[2] = v6 + 192;
      do
      {
        uint64_t __buf = 0;
        swift_stdlib_random(&__buf, 8uLL);
        if (v15 > (unint64_t)(__buf * v15))
        {
          unint64_t v19 = -v15 % (unint64_t)v15;
          while (v19 > __buf * v15)
          {
            uint64_t __buf = 0;
            swift_stdlib_random(&__buf, 8uLL);
          }
        }
        (*(void (**)(char *))(v21 + 32))(v12);
        (*(void (**)(char *, char *, uint64_t, uint64_t))(a3 + 64))(v12, v10, a2, a3);
        uint64_t v17 = *v16;
        (*v16)(v10, AssociatedTypeWitness);
        (*(void (**)(char *, uint64_t, uint64_t))(v6 + 192))(v12, a2, v6);
      }
      while (v15-- > 2);
    }
    return ((uint64_t (*)(char *, const char *))v17)(v12, AssociatedTypeWitness);
  }
  return result;
}

uint64_t MutableCollection<>.shuffle<A>(using:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v38 = a4;
  uint64_t v39 = a5;
  uint64_t v10 = *(void *)(a4 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (int **)v10, a2, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  uint64_t v11 = *((void *)AssociatedTypeWitness - 1);
  uint64_t v12 = MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v37 = (char *)&v26 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  uint64_t v15 = (char *)&v26 - v14;
  uint64_t v16 = *(uint64_t (**)(uint64_t, uint64_t))(v10 + 112);
  uint64_t result = v16(a2, v10);
  if (result >= 2)
  {
    uint64_t v27 = v11;
    uint64_t v18 = v16(a2, v10);
    (*(void (**)(uint64_t, uint64_t))(v10 + 64))(a2, v10);
    if (v18 <= 1)
    {
      return (*(uint64_t (**)(char *, const char *))(v27 + 8))(v15, AssociatedTypeWitness);
    }
    else
    {
      uint64_t v35 = v6;
      uint64_t v36 = v15;
      uint64_t v33 = v10;
      uint64_t v34 = a2;
      unint64_t v19 = *(uint64_t (**)(uint64_t, uint64_t))(a6 + 8);
      uint64_t v30 = v38 + 64;
      uint64_t v31 = v39 + 32;
      uint64_t v28 = v10 + 192;
      uint64_t v29 = (void (**)(char *, const char *))(v27 + 8);
      uint64_t v27 = (v27 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
      uint64_t v32 = a6;
      for (uint64_t i = v19(a3, a6); ; uint64_t i = v19(a3, a6))
      {
        if (v18 > (unint64_t)(i * v18))
        {
          unint64_t v25 = -v18 % (unint64_t)v18;
          if (v25 > i * v18)
          {
            while (v25 > v19(a3, a6) * v18)
              ;
          }
        }
        uint64_t v41 = v18 - 1;
        uint64_t v21 = v37;
        (*(void (**)(char *))(v39 + 32))(v15);
        (*(void (**)(char *, char *, uint64_t))(v38 + 64))(v15, v21, a2);
        uint64_t v22 = *v29;
        uint64_t v23 = v21;
        a6 = v32;
        (*v29)(v23, AssociatedTypeWitness);
        (*(void (**)(char *, uint64_t))(v33 + 192))(v15, a2);
        BOOL v24 = v18 <= 2;
        uint64_t v18 = v41;
        if (v24) {
          break;
        }
      }
      return ((uint64_t (*)(char *, const char *))v22)(v36, AssociatedTypeWitness);
    }
  }
  return result;
}

uint64_t Sequence.shuffled()(uint64_t a1, uint64_t a2)
{
  MEMORY[0x1F4188790](a1);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))((char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v2, a1);
  uint64_t v17 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 56))(a1, a2);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, (int **)a2, a1, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
  uint64_t v10 = (unint64_t *)type metadata accessor for ContiguousArray(0, (uint64_t)AssociatedTypeWitness, v8, v9);
  uint64_t WitnessTable = swift_getWitnessTable(protocol conformance descriptor for ContiguousArray<A>, v10, v11);
  uint64_t v14 = swift_getWitnessTable(protocol conformance descriptor for ContiguousArray<A>, v10, v13);
  specialized MutableCollection<>.shuffle<A>(using:)(v14, (uint64_t)v10, WitnessTable, v14);
  return v17;
}

uint64_t MutableCollection<>.shuffle()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return specialized MutableCollection<>.shuffle<A>(using:)(a1, a1, a2, a3);
}

uint64_t == infix<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v18[1] = a2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (int **)a4, a3, (uint64_t)&protocol requirements base descriptor for RawRepresentable, associated type descriptor for RawRepresentable.RawValue);
  uint64_t v9 = *((void *)AssociatedTypeWitness - 1);
  uint64_t v10 = MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v12 = (char *)v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10);
  uint64_t v14 = (char *)v18 - v13;
  uint64_t v15 = *(void (**)(uint64_t, uint64_t))(a4 + 24);
  v15(a3, a4);
  v15(a3, a4);
  LOBYTE(a5) = (*(uint64_t (**)(char *, char *, const char *, uint64_t))(a5 + 8))(v14, v12, AssociatedTypeWitness, a5);
  uint64_t v16 = *(void (**)(char *, const char *))(v9 + 8);
  v16(v12, AssociatedTypeWitness);
  v16(v14, AssociatedTypeWitness);
  return a5 & 1;
}

BOOL != infix<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v18[1] = a2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (int **)a4, a3, (uint64_t)&protocol requirements base descriptor for RawRepresentable, associated type descriptor for RawRepresentable.RawValue);
  uint64_t v9 = *((void *)AssociatedTypeWitness - 1);
  uint64_t v10 = MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v12 = (char *)v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10);
  uint64_t v14 = (char *)v18 - v13;
  uint64_t v15 = *(void (**)(uint64_t, uint64_t))(a4 + 24);
  v15(a3, a4);
  v15(a3, a4);
  LOBYTE(a5) = (*(uint64_t (**)(char *, char *, const char *, uint64_t))(a5 + 8))(v14, v12, AssociatedTypeWitness, a5);
  uint64_t v16 = *(void (**)(char *, const char *))(v9 + 8);
  v16(v12, AssociatedTypeWitness);
  v16(v14, AssociatedTypeWitness);
  return (a5 & 1) == 0;
}

BOOL != infix<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v19[1] = a2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (int **)a5, a3, (uint64_t)&protocol requirements base descriptor for RawRepresentable, associated type descriptor for RawRepresentable.RawValue);
  uint64_t v10 = *((void *)AssociatedTypeWitness - 1);
  uint64_t v11 = MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v13 = (char *)v19 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11);
  uint64_t v15 = (char *)v19 - v14;
  uint64_t v16 = *(void (**)(uint64_t, uint64_t))(a5 + 24);
  v16(a3, a5);
  v16(a3, a5);
  LOBYTE(a6) = (*(uint64_t (**)(char *, char *, const char *, uint64_t))(a6 + 8))(v15, v13, AssociatedTypeWitness, a6);
  uint64_t v17 = *(void (**)(char *, const char *))(v10 + 8);
  v17(v13, AssociatedTypeWitness);
  v17(v15, AssociatedTypeWitness);
  return (a6 & 1) == 0;
}

uint64_t RawRepresentable<>.hashValue.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t))(a2 + 32))(0, a1, a2);
}

uint64_t RawRepresentable<>.hash(into:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (int **)a4, a2, (uint64_t)&protocol requirements base descriptor for RawRepresentable, associated type descriptor for RawRepresentable.RawValue);
  uint64_t v10 = *((void *)AssociatedTypeWitness - 1);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v12 = (char *)&v14 - v11;
  (*(void (**)(uint64_t, uint64_t))(a4 + 24))(a2, a4);
  (*(void (**)(uint64_t, const char *, uint64_t))(a5 + 24))(a1, AssociatedTypeWitness, a5);
  return (*(uint64_t (**)(char *, const char *))(v10 + 8))(v12, AssociatedTypeWitness);
}

uint64_t ExpressibleByStringLiteral<>.init(extendedGraphemeClusterLiteral:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

uint64_t ExpressibleByStringInterpolation<>.init(stringInterpolation:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[0] = a1;
  v5[1] = a2;
  return (*(uint64_t (**)(void *, uint64_t))(*(void *)(a4 + 8) + 32))(v5, a3);
}

uint64_t (*ContiguousArray._buffer.modify())(void, void)
{
  return EnumeratedSequence._base.modify;
}

Swift::Int __swiftcall ContiguousArray._getCount()()
{
  return *(void *)(v0 + 16);
}

Swift::Int __swiftcall ContiguousArray._getCapacity()()
{
  return *(void *)(v0 + 24) >> 1;
}

Swift::Void __swiftcall ContiguousArray._makeMutableAndUnique()()
{
  uint64_t v2 = v0;
  uint64_t v3 = *v1;
  BOOL isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v1);
  *uint64_t v1 = v3;
  if (!isUniquelyReferenced_nonNull_native) {
    *uint64_t v1 = (uint64_t)_ContiguousArrayBuffer._consumeAndCreateNew()(v3, *(uint64_t **)(v2 + 16));
  }
}

__objc2_class **_ContiguousArrayBuffer._consumeAndCreateNew()(uint64_t a1, uint64_t *a2)
{
  return _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(a1 + 16), 0, a1, a2);
}

Swift::Void __swiftcall ContiguousArray._checkSubscript_native(_:)(Swift::Int a1)
{
  if (a1 < 0 || *(void *)(v1 + 16) <= (unint64_t)a1) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Index out of range", 18, 2, "Swift/ContiguousArrayBuffer.swift", 33, 2, 0x2A3uLL, 0);
  }
}

Swift::Void __swiftcall ContiguousArray._checkIndex(_:)(Swift::Int a1)
{
  if (*(void *)(v1 + 16) < a1) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "ContiguousArray index is out of range", 37, 2, "Swift/ContiguousArray.swift", 27, 2, 0x6CuLL, 0);
  }
  if (a1 < 0) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Negative ContiguousArray index is out of range", 46, 2, "Swift/ContiguousArray.swift", 27, 2, 0x6DuLL, 0);
  }
}

uint64_t ContiguousArray.startIndex.getter()
{
  return 0;
}

unint64_t ContiguousArray._getElementAddress(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a2
       + ((*(unsigned __int8 *)(*(void *)(a3 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(a3 - 8) + 80))
       + *(void *)(*(void *)(a3 - 8) + 72) * a1;
}

uint64_t ContiguousArray.capacity.getter(uint64_t a1)
{
  return *(void *)(a1 + 24) >> 1;
}

id ContiguousArray._owner.getter()
{
  uint64_t v0 = (void *)EnumeratedSequence._base.modify();

  return swift_unknownObjectRetain(v0);
}

uint64_t ContiguousArray._baseAddressIfContiguous.getter(uint64_t a1, uint64_t a2)
{
  return a1
       + ((*(unsigned __int8 *)(*(void *)(a2 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(a2 - 8) + 80));
}

uint64_t _ContiguousArrayBuffer.firstElementAddressIfContiguous.getter(uint64_t a1, uint64_t a2)
{
  return a1
       + ((*(unsigned __int8 *)(*(void *)(a2 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(a2 - 8) + 80));
}

uint64_t _ContiguousArrayBuffer.identity.getter(uint64_t a1, uint64_t a2)
{
  return a1
       + ((*(unsigned __int8 *)(*(void *)(a2 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(a2 - 8) + 80));
}

uint64_t protocol witness for _ArrayProtocol.capacity.getter in conformance ContiguousArray<A>()
{
  return ContiguousArray.capacity.getter(*v0);
}

id protocol witness for _ArrayProtocol._owner.getter in conformance ContiguousArray<A>()
{
  uint64_t v0 = (void *)EnumeratedSequence._base.modify();

  return swift_unknownObjectRetain(v0);
}

unint64_t protocol witness for _ArrayProtocol._baseAddressIfContiguous.getter in conformance ContiguousArray<A>(uint64_t a1)
{
  return *v1
       + ((*(unsigned __int8 *)(*(void *)(*(void *)(a1 + 16) - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(a1 + 16) - 8) + 80));
}

uint64_t protocol witness for _ArrayProtocol.init(_:) in conformance ContiguousArray<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v7 = (unint64_t *)type metadata accessor for _ContiguousArrayBuffer(0, *(void *)(a2 + 16), a3, a4);
  uint64_t WitnessTable = swift_getWitnessTable(protocol conformance descriptor for _ContiguousArrayBuffer<A>, v7, v8);
  uint64_t result = Array.init<A>(_:)(a1, v10, (uint64_t)v7, WitnessTable);
  *a5 = result;
  return result;
}

atomic_ullong *protocol witness for _ArrayProtocol._buffer.getter in conformance ContiguousArray<A>@<X0>(atomic_ullong **a1@<X8>)
{
  uint64_t v2 = *v1;
  *a1 = *v1;
  return swift_retain(v2);
}

uint64_t Array.index(_:offsetBy:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = __OFADD__(a1, a2);
  uint64_t result = a1 + a2;
  if (v2) {
    __break(1u);
  }
  return result;
}

uint64_t Array.distance(from:to:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = __OFSUB__(a2, a1);
  uint64_t result = a2 - a1;
  if (v2) {
    __break(1u);
  }
  return result;
}

uint64_t ContiguousArray.subscript.getter@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  if ((a1 & 0x8000000000000000) != 0 || *(void *)(a2 + 16) <= a1) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Index out of range", 18, 2, "Swift/ContiguousArrayBuffer.swift", 33, 2, 0x2A3uLL, 0);
  }
  uint64_t v4 = *(void *)(a3 - 8);
  uint64_t v5 = *(uint64_t (**)(uint64_t, unint64_t))(v4 + 16);
  unint64_t v6 = a2
     + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))
     + *(void *)(v4 + 72) * a1;

  return v5(a4, v6);
}

uint64_t key path getter for ContiguousArray.subscript(_:) : <A>ContiguousArray<A>A@<X0>(uint64_t *a1@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return ContiguousArray.subscript.getter(*a2, *a1, *(unint64_t *)((char *)a2 + a3 - 8), a4);
}

uint64_t key path setter for ContiguousArray.subscript(_:) : <A>ContiguousArray<A>A(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  return key path setter for Array.subscript(_:) : <A>[A]A(a1, a2, a3, a4, (uint64_t (*)(void, uint64_t))type metadata accessor for ContiguousArray, (uint64_t (*)(unsigned char *, uint64_t, uint64_t))ContiguousArray.subscript.modify);
}

{
  return key path setter for Array.subscript(_:) : <A>[A]A(a1, a2, a3, a4, (uint64_t (*)(void, void))type metadata accessor for ContiguousArray, (uint64_t (*)(id, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))ContiguousArray.subscript.setter);
}

uint64_t key path setter for Array.subscript(_:) : <A>[A]A(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t (*a5)(void, uint64_t), uint64_t (*a6)(unsigned char *, uint64_t, uint64_t))
{
  uint64_t v8 = *(uint64_t *)((char *)a3 + a4 - 8);
  uint64_t v9 = *a3;
  uint64_t v10 = a5(0, v8);
  uint64_t v11 = (uint64_t (*)(unsigned char *, void))a6(v14, v9, v10);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 24))(v12, a1, v8);
  return v11(v14, 0);
}

uint64_t (*ContiguousArray.subscript.modify(uint64_t a1, unint64_t a2))()
{
  ContiguousArray._makeMutableAndUnique()();
  specialized Array._checkSubscript_mutating(_:)(a2, *v2);
  return EnumeratedSequence._base.modify;
}

uint64_t _ContiguousArrayBuffer.getElement(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return (*(uint64_t (**)(uint64_t, unint64_t))(*(void *)(a3 - 8) + 16))(a4, a2+ ((*(unsigned __int8 *)(*(void *)(a3 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(a3 - 8) + 80))+ *(void *)(*(void *)(a3 - 8) + 72) * a1);
}

uint64_t ContiguousArray.subscript.setter(uint64_t a1, unint64_t a2, uint64_t a3)
{
  ContiguousArray._makeMutableAndUnique()();
  uint64_t v7 = *v3;
  uint64_t v8 = *(void *)(a3 + 16);
  specialized Array._checkSubscript_mutating(_:)(a2, v7);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v9 + 40);
  unint64_t v11 = v7
      + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80))
      + *(void *)(v9 + 72) * a2;

  return v10(v11, a1, v8);
}

id ContiguousArray.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _ContiguousArrayBuffer.subscript.getter(a1, a2, a3, a4, (uint64_t (*)(void))specialized ContiguousArray.subscript.getter);
}

id _ContiguousArrayBuffer.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t v5 = (void *)a5();
  return swift_unknownObjectRetain(v5);
}

id key path getter for ContiguousArray.subscript(_:) : <A>ContiguousArray<A>A@<X0>(uint64_t *a1@<X0>, Swift::Int *a2@<X1>, void *a3@<X8>)
{
  uint64_t v4 = (void *)specialized ContiguousArray.subscript.getter(*a2, a2[1], *a1);
  *a3 = v4;
  a3[1] = v5;
  a3[2] = v6;
  a3[3] = v7;

  return swift_unknownObjectRetain(v4);
}

uint64_t key path setter for Array.subscript(_:) : <A>[A]A(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t (*a5)(void, void), uint64_t (*a6)(id, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v7 = *a3;
  uint64_t v8 = a3[1];
  uint64_t v9 = *(void **)a1;
  uint64_t v10 = *(void *)(a1 + 8);
  uint64_t v11 = *(void *)(a1 + 16);
  uint64_t v12 = *(void *)(a1 + 24);
  uint64_t v13 = a5(0, *(uint64_t *)((char *)a3 + a4 - 8));
  id v14 = swift_unknownObjectRetain(v9);
  return a6(v14, v10, v11, v12, v7, v8, v13);
}

void ContiguousArray.subscript.setter(void *a1, uint64_t a2, uint64_t a3, unint64_t a4, Swift::Int a5, Swift::Int a6, uint64_t a7)
{
  uint64_t v15 = *v7;
  uint64_t v16 = *(void *)(a7 + 16);
  ContiguousArray._checkIndex(_:)(a5);
  ContiguousArray._checkIndex(_:)(a6);
  if (a6 < 0) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, 2, 0xD7BuLL, 0);
  }
  if (v15
     + ((*(unsigned __int8 *)(*(void *)(v16 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v16 - 8) + 80))
     + *(void *)(*(void *)(v16 - 8) + 72) * a5 != a2 + *(void *)(*(void *)(v16 - 8) + 72) * a3)
    goto LABEL_3;
  if ((uint64_t)(a4 >> 1) < a3) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
  }
  if (a5 == a3 && a4 >> 1 == a6)
  {
    swift_unknownObjectRelease(a1);
  }
  else
  {
LABEL_3:
    v22[0] = a1;
    v22[1] = a2;
    void v22[2] = a3;
    v22[3] = a4;
    unint64_t v19 = (unint64_t *)type metadata accessor for ArraySlice(0, v16, v17, v18);
    uint64_t WitnessTable = swift_getWitnessTable(protocol conformance descriptor for ArraySlice<A>, v19, v20);
    ContiguousArray.replaceSubrange<A>(_:with:)(a5, a6, (uint64_t)v22, a7, (uint64_t)v19, WitnessTable);
  }
}

void ContiguousArray.replaceSubrange<A>(_:with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7 = v6;
  uint64_t v87 = a3;
  uint64_t v85 = a4;
  uint64_t v12 = *(unint64_t **)(a4 + 16);
  uint64_t v79 = *(v12 - 1);
  MEMORY[0x1F4188790](a1);
  id v14 = (char *)&v72 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v15, a5, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  uint64_t v17 = *((void *)AssociatedTypeWitness - 1);
  uint64_t v18 = MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v20 = (char *)&v72 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = MEMORY[0x1F4188790](v18);
  if (a1 < 0)
  {
    LODWORD(v7_assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000034, 0x80000001816E2880, "Swift/Codable.swift", 19, 2, 0x11F9uLL, 0) = 0;
    unint64_t v69 = 1284;
    LOBYTE(WitnessTable) = 2;
    uint64_t v66 = "ContiguousArray replace: subrange start is negative";
    uint64_t v67 = 51;
    goto LABEL_30;
  }
  if (*(void *)(*v7 + 16) < a2)
  {
    LODWORD(v7_assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000034, 0x80000001816E2880, "Swift/Codable.swift", 19, 2, 0x11F9uLL, 0) = 0;
    unint64_t v69 = 1287;
    LOBYTE(WitnessTable) = 2;
    uint64_t v66 = "ContiguousArray replace: subrange extends past the end";
    uint64_t v67 = 54;
LABEL_30:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, v66, v67, 2, "Swift/ContiguousArray.swift", 27, WitnessTable, v69, v70);
  }
  uint64_t v86 = a2;
  BOOL v23 = __OFSUB__(a2, a1);
  uint64_t v24 = a2 - a1;
  if (v23)
  {
    __break(1u);
    goto LABEL_32;
  }
  uint64_t v75 = v14;
  uint64_t v76 = v21;
  uint64_t v74 = (char *)&v72 - v22;
  unint64_t v25 = *(uint64_t (**)(uint64_t, uint64_t))(a6 + 112);
  uint64_t v78 = a5;
  uint64_t v26 = v25(a5, a6);
  uint64_t v27 = v26 - v24;
  if (__OFSUB__(v26, v24))
  {
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  uint64_t v72 = v20;
  uint64_t v73 = v17;
  uint64_t v28 = *v7;
  Swift::Int v29 = *(void *)(*v7 + 16);
  Swift::Int v30 = v29 + v27;
  if (__OFADD__(v29, v27))
  {
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  uint64_t v31 = v26;
  BOOL isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v7);
  *uint64_t v7 = v28;
  if (!isUniquelyReferenced_nonNull_native || v30 > *(void *)(v28 + 24) >> 1)
  {
    if (v29 <= v30) {
      Swift::Int v33 = v29 + v27;
    }
    else {
      Swift::Int v33 = v29;
    }
    ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v33, 1);
    uint64_t v28 = *v7;
  }
  if (v24 < 0) {
LABEL_34:
  }
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeMutablePointer.deinitialize with negative count", 53, 2, "Swift/UnsafePointer.swift", 25, 2, 0x493uLL, 0);
  unint64_t v34 = v28 + ((*(unsigned __int8 *)(v79 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v79 + 80));
  uint64_t v35 = *(void *)(v79 + 72);
  unint64_t v36 = v34 + v35 * a1;
  uint64_t v37 = v35 * v31;
  uint64_t v77 = (char *)(v36 + v35 * v31);
  swift_arrayDestroy(v36, v24, v12);
  if (!v27) {
    goto LABEL_17;
  }
  uint64_t v39 = *(void *)(v28 + 16);
  if (__OFSUB__(v39, v86))
  {
    __break(1u);
    goto LABEL_36;
  }
  uint64_t v38 = UnsafeMutablePointer.moveInitialize(from:count:)((char *)(v34 + v35 * v86), v39 - v86, v77, v12);
  uint64_t v40 = *(void *)(v28 + 16);
  BOOL v23 = __OFADD__(v40, v27);
  uint64_t v41 = v40 + v27;
  if (v23)
  {
LABEL_36:
    __break(1u);
    return;
  }
  *(void *)(v28 + 16) = v41;
  uint64_t v37 = v35 * v31;
LABEL_17:
  if (v31 <= 0)
  {
    uint64_t v64 = *(void (**)(uint64_t))(*(void *)(v78 - 8) + 8);
    uint64_t v65 = v87;
    v64(v65);
  }
  else
  {
    MEMORY[0x1F4188790](v38);
    uint64_t v42 = v12;
    uint64_t v45 = (unint64_t *)type metadata accessor for _ContiguousArrayBuffer(0, (uint64_t)v12, v43, v44);
    uint64_t v46 = v78;
    *(&v72 - 6) = (char *)v45;
    *(&v72 - 5) = (char *)v46;
    uint64_t WitnessTable = swift_getWitnessTable(protocol conformance descriptor for _ContiguousArrayBuffer<A>, v45, v47);
    unint64_t v69 = a6;
    uint64_t v70 = v31;
    unint64_t v71 = v36;
    uint64_t v48 = v87;
    (*(void (**)(void *__return_ptr, char *(*)(char *, uint64_t), char **, void *, uint64_t))(*(void *)(a6 + 8) + 72))(v88, partial apply for closure #1 in _ArrayBufferProtocol.replaceSubrange<A>(_:with:elementsOf:), &v72 - 8, &unk_1ECA06270, v46);
    if (v88[0])
    {
      uint64_t v49 = v74;
      (*(void (**)(uint64_t, uint64_t))(a6 + 64))(v46, a6);
      BOOL v50 = v37 < 1;
      uint64_t v51 = v49;
      uint64_t v85 = v35;
      uint64_t v86 = a6;
      uint64_t v52 = v75;
      uint64_t v53 = v77;
      if (!v50)
      {
        uint64_t v83 = *(uint64_t (**)(void *, char *, uint64_t, uint64_t))(v86 + 80);
        uint64_t v84 = v86 + 80;
        uint64_t v81 = *(void (**)(char *, uint64_t, uint64_t))(v86 + 192);
        uint64_t v82 = v86 + 192;
        uint64_t v80 = (void (**)(char *))(v79 + 16);
        uint64_t v54 = (void (**)(unint64_t, char *, unint64_t *))(v79 + 32);
        uint64_t v55 = v86;
        do
        {
          uint64_t v56 = v83(v88, v51, v46, v55);
          uint64_t v57 = v51;
          uint64_t v58 = v46;
          uint64_t v59 = (void (*)(void *, void))v56;
          (*v80)(v52);
          v59(v88, 0);
          uint64_t v46 = v58;
          uint64_t v51 = v57;
          (*v54)(v36, v52, v42);
          v36 += v85;
          v81(v57, v46, v55);
        }
        while (v36 < (unint64_t)v53);
      }
      uint64_t v61 = (uint64_t)v72;
      uint64_t v60 = v73;
      uint64_t v62 = v76;
      (*(void (**)(char *, char *, uint64_t))(v73 + 32))(v72, v51, v76);
      uint64_t v63 = v87;
      _expectEnd<A>(of:is:)(v87, v61, v46, v86);
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v46 - 8) + 8))(v63, v46);
      (*(void (**)(uint64_t, uint64_t))(v60 + 8))(v61, v62);
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v46 - 8) + 8))(v48, v46);
    }
  }
}

void (*ContiguousArray.subscript.modify(void *a1, Swift::Int a2, Swift::Int a3, uint64_t a4))(void ***a1, char a2)
{
  uint64_t v9 = malloc(0x40uLL);
  *a1 = v9;
  v9[6] = a4;
  v9[7] = v4;
  v9[4] = a2;
  v9[5] = a3;
  uint64_t v10 = *v4;
  uint64_t v11 = *(void *)(a4 + 16);
  ContiguousArray._checkIndex(_:)(a2);
  ContiguousArray._checkIndex(_:)(a3);
  if (a3 < 0) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, 2, 0xD7BuLL, 0);
  }
  uint64_t v12 = (char *)v10
      + ((*(unsigned __int8 *)(*(void *)(v11 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v11 - 8) + 80));
  *uint64_t v9 = v10;
  v9[1] = v12;
  void v9[2] = a2;
  uint64_t v9[3] = (2 * a3) | 1;
  swift_retain(v10);
  return ContiguousArray.subscript.modify;
}

void ContiguousArray.subscript.modify(void ***a1, char a2)
{
}

void Array.subscript.modify(void ***a1, char a2, void (*a3)(id, void *, void *, void *, void *, void *, void *))
{
  uint64_t v4 = *a1;
  uint64_t v5 = **a1;
  uint64_t v6 = v4[1];
  uint64_t v7 = v4[2];
  uint64_t v8 = v4[3];
  uint64_t v9 = v4[6];
  uint64_t v11 = v4[4];
  uint64_t v10 = v4[5];
  if (a2)
  {
    id v12 = swift_unknownObjectRetain(v5);
    a3(v12, v6, v7, v8, v11, v10, v9);
    swift_unknownObjectRelease(*v4);
  }
  else
  {
    a3(v5, v4[1], v4[2], v4[3], v4[4], v4[5], v4[6]);
  }

  free(v4);
}

uint64_t ContiguousArray.count.getter(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

uint64_t protocol witness for MutableCollection.subscript.setter in conformance ContiguousArray<A>(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  unint64_t v6 = *a2;
  ContiguousArray._makeMutableAndUnique()();
  uint64_t v7 = *v3;
  uint64_t v8 = *(void *)(a3 + 16);
  specialized Array._checkSubscript_mutating(_:)(v6, *v3);
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 40))(v7+ ((*(unsigned __int8 *)(*(void *)(v8 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v8 - 8) + 80))+ *(void *)(*(void *)(v8 - 8) + 72) * v6, a1, v8);

  return EnumeratedSequence._base.modify();
}

uint64_t (*protocol witness for MutableCollection.subscript.modify in conformance ContiguousArray<A>(void *a1, unint64_t *a2))()
{
  uint64_t v4 = malloc(0x28uLL);
  *a1 = v4;
  v4[4] = ContiguousArray.subscript.modify((uint64_t)v4, *a2);
  return protocol witness for MutableCollection.subscript.modify in conformance [A];
}

uint64_t protocol witness for MutableCollection.subscript.setter in conformance ContiguousArray<A>(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for MutableCollection.subscript.setter in conformance [A](a1, a2, a3, a4, (uint64_t (*)(void, void, void, void, void, void, uint64_t))ContiguousArray.subscript.setter);
}

uint64_t protocol witness for MutableCollection.subscript.setter in conformance [A](void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, void, void, void, void, void, uint64_t))
{
  return a5(*a1, a1[1], a1[2], a1[3], *a2, a2[1], a3);
}

void (*protocol witness for MutableCollection.subscript.modify in conformance ContiguousArray<A>(void *a1, Swift::Int *a2, uint64_t a3))(void ***a1, char a2)
{
  uint64_t v7 = malloc(0x40uLL);
  *a1 = v7;
  _OWORD v7[4] = v3;
  v7[5] = a3;
  Swift::Int v8 = *a2;
  Swift::Int v9 = a2[1];
  v7[6] = *a2;
  v7[7] = v9;
  uint64_t v10 = *v3;
  uint64_t v11 = *(void *)(a3 + 16);
  ContiguousArray._checkIndex(_:)(v8);
  ContiguousArray._checkIndex(_:)(v9);
  if (v9 < 0) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, 2, 0xD7BuLL, 0);
  }
  id v12 = (char *)v10
      + ((*(unsigned __int8 *)(*(void *)(v11 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v11 - 8) + 80));
  *uint64_t v7 = v10;
  v7[1] = v12;
  v7[2] = v8;
  v7[3] = (2 * v9) | 1;
  swift_retain(v10);
  return protocol witness for MutableCollection.subscript.modify in conformance ContiguousArray<A>;
}

void protocol witness for MutableCollection.subscript.modify in conformance ContiguousArray<A>(void ***a1, char a2)
{
}

void protocol witness for MutableCollection.subscript.modify in conformance [A](void ***a1, char a2, void (*a3)(id, void *, void *, void *, void *, void *, void *))
{
  uint64_t v4 = *a1;
  uint64_t v5 = **a1;
  unint64_t v6 = v4[1];
  uint64_t v7 = v4[2];
  Swift::Int v8 = v4[3];
  uint64_t v10 = v4[6];
  Swift::Int v9 = v4[7];
  uint64_t v11 = v4[5];
  if (a2)
  {
    id v12 = swift_unknownObjectRetain(v5);
    a3(v12, v6, v7, v8, v10, v9, v11);
    swift_unknownObjectRelease(*v4);
  }
  else
  {
    a3(v5, v4[1], v4[2], v4[3], v4[6], v4[7], v4[5]);
  }

  free(v4);
}

void *protocol witness for MutableCollection.partition(by:) in conformance ContiguousArray<A>@<X0>(uint64_t (*a1)(char *)@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t WitnessTable = swift_getWitnessTable(protocol conformance descriptor for ContiguousArray<A>, a3, (uint64_t)a3);
  return MutableCollection<>.partition(by:)(a1, a2, (uint64_t)a3, WitnessTable, a4, a5);
}

void *protocol witness for MutableCollection._withUnsafeMutableBufferPointerIfSupported<A>(_:) in conformance ContiguousArray<A>@<X0>(void (*a1)(void *)@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  return ContiguousArray.withContiguousMutableStorageIfAvailable<A>(_:)(a1, a3, a2, a4);
}

void *ContiguousArray._withUnsafeMutableBufferPointerIfSupported<A>(_:)@<X0>(void (*a1)(void *)@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  return ContiguousArray._withUnsafeMutableBufferPointerIfSupported<A>(_:)(a1, a2, a3, a4);
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  void v13[2];
  uint64_t v14;

  id v14 = a3;
  ContiguousArray._makeMutableAndUnique()();
  Swift::Int v9 = *(void *)(*(void *)v4 + 16);
  v13[0] = *(void *)v4
         + ((*(unsigned __int8 *)(*(void *)(*(void *)(a2 + 16) - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(a2 + 16) - 8) + 80));
  uint64_t v10 = v13[0];
  v13[1] = v9;
  a1(v13);
  if (v5) {
    return $defer #1 <A><A1>() in ContiguousArray.withUnsafeMutableBufferPointer<A>(_:)(v13, v10, v9);
  }
  id v12 = v14;
  $defer #1 <A><A1>() in ContiguousArray.withUnsafeMutableBufferPointer<A>(_:)(v13, v10, v9);
  return (void *)(*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(a4, 0, 1, v12);
}

void *ContiguousArray.withContiguousMutableStorageIfAvailable<A>(_:)@<X0>(void (*a1)(void *)@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  return ContiguousArray._withUnsafeMutableBufferPointerIfSupported<A>(_:)(a1, a2, a3, a4);
}

void protocol witness for Collection.endIndex.getter in conformance ContiguousArray<A>(void *a1@<X8>)
{
  *a1 = *(void *)(*(void *)v1 + 16);
}

uint64_t (*protocol witness for Collection.subscript.read in conformance ContiguousArray<A>(void *a1, unint64_t *a2))()
{
  uint64_t v5 = malloc(0x28uLL);
  *a1 = v5;
  v5[4] = ContiguousArray.subscript.read((uint64_t)v5, *a2, *v2);
  return protocol witness for Collection.subscript.read in conformance _ArrayBuffer<A>;
}

uint64_t (*ContiguousArray.subscript.read(uint64_t a1, unint64_t a2, uint64_t a3))()
{
  if ((a2 & 0x8000000000000000) != 0 || *(void *)(a3 + 16) <= a2) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Index out of range", 18, 2, "Swift/ContiguousArrayBuffer.swift", 33, 2, 0x2A3uLL, 0);
  }
  return EnumeratedSequence._base.modify;
}

id protocol witness for Collection.subscript.getter in conformance ContiguousArray<A>@<X0>(Swift::Int *a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = (void *)specialized ContiguousArray.subscript.getter(*a1, a1[1], *v2);
  *a2 = v4;
  a2[1] = v5;
  a2[2] = v6;
  a2[3] = v7;

  return swift_unknownObjectRetain(v4);
}

uint64_t protocol witness for Collection.indices.getter in conformance ContiguousArray<A>@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X2>, char *a3@<X8>)
{
  uint64_t WitnessTable = swift_getWitnessTable(protocol conformance descriptor for ContiguousArray<A>, a1, a2);

  return RandomAccessCollection<>.indices.getter((uint64_t)a1, WitnessTable, (uint64_t)&protocol witness table for Int, a3);
}

uint64_t protocol witness for Collection.count.getter in conformance ContiguousArray<A>()
{
  return ContiguousArray.count.getter(*v0);
}

uint64_t protocol witness for Sequence.underestimatedCount.getter in conformance ContiguousArray<A>(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable(protocol conformance descriptor for ContiguousArray<A>, a1, a3);

  return Collection.underestimatedCount.getter((uint64_t)a1, WitnessTable);
}

uint64_t protocol witness for Sequence._copyContents(initializing:) in conformance ContiguousArray<A>(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return protocol witness for Sequence._copyContents(initializing:) in conformance _ArrayBuffer<A>(a1, a2, a3, a4, a5, (uint64_t (*)(uint64_t, uint64_t, void, void))ContiguousArray._copyContents(initializing:));
}

atomic_ullong *ContiguousArray._copyContents(initializing:)(char *a1, uint64_t a2, atomic_ullong *a3, unint64_t *a4)
{
  uint64_t v5 = a3[2];
  if (v5)
  {
    if (!a1) {
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Attempt to copy contents into nil buffer pointer", 48, 2, "Swift/ContiguousArray.swift", 27, 2, 0x4C4uLL, 0);
    }
    if (v5 > a2) {
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Insufficient space allocated to copy array contents", 51, 2, "Swift/ContiguousArray.swift", 27, 2, 0x4C5uLL, 0);
    }
    Swift::Int v8 = (char *)a3
       + ((*(unsigned __int8 *)(*(a4 - 1) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(a4 - 1) + 80));
    swift_retain(a3);
    UnsafeMutablePointer.initialize(from:count:)(v8, v5, a1, a4);
    swift_release((uint64_t)a3);
  }
  return a3;
}

uint64_t protocol witness for Sequence.withContiguousStorageIfAvailable<A>(_:) in conformance ContiguousArray<A>@<X0>(uint64_t (*a1)(unint64_t, void)@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  return ContiguousArray.withContiguousStorageIfAvailable<A>(_:)(a1, *v4, *(void *)(a3 + 16), a2, a4);
}

uint64_t ContiguousArray.withContiguousStorageIfAvailable<A>(_:)@<X0>(uint64_t (*a1)(unint64_t, void)@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t result = a1(a2+ ((*(unsigned __int8 *)(*(void *)(a3 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(a3 - 8) + 80)), *(void *)(a2 + 16));
  if (!v5) {
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(a4 - 8) + 56))(a5, 0, 1, a4);
  }
  return result;
}

uint64_t ContiguousArray.init(arrayLiteral:)(unint64_t a1, uint64_t *a2)
{
  if (_swift_isClassOrObjCExistentialType((uint64_t)a2, a2))
  {
    if ((a1 & 0x8000000000000000) != 0 || (a1 & 0x4000000000000000) != 0)
    {
      unint64_t v12 = a1;
      Swift::Int v9 = (unint64_t *)type metadata accessor for Array(0, (uint64_t)a2, v4, v5);
      uint64_t WitnessTable = swift_getWitnessTable(protocol conformance descriptor for [A], v9, v10);
      uint64_t v7 = _copyCollectionToContiguousArray<A>(_:)((uint64_t)&v12, (uint64_t)v9, WitnessTable);
      swift_bridgeObjectRelease(a1);
    }
    else
    {
      swift_bridgeObjectRetain(a1);
      BOOL isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType((uint64_t)a2, a2);
      swift_bridgeObjectRelease(a1);
      if (isClassOrObjCExistentialType) {
        return a1 & 0xFFFFFFFFFFFFFF8;
      }
      else {
        return a1;
      }
    }
  }
  else if (_swift_isClassOrObjCExistentialType((uint64_t)a2, a2))
  {
    return a1 & 0xFFFFFFFFFFFFFF8;
  }
  else
  {
    return a1;
  }
  return (uint64_t)v7;
}

uint64_t protocol witness for ExpressibleByArrayLiteral.init(arrayLiteral:) in conformance ContiguousArray<A>@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result = ContiguousArray.init(arrayLiteral:)(a1, *(uint64_t **)(a2 + 16));
  *a3 = result;
  return result;
}

uint64_t ContiguousArray.init(repeating:count:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Array.init(repeating:count:)(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t))static ContiguousArray._allocateUninitialized(_:));
}

uint64_t Array.init(repeating:count:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t))
{
  uint64_t v6 = specialized Array.init(repeating:count:)(a1, a2, a3, a4);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 8))(a1, a3);
  return v6;
}

__objc2_class **static ContiguousArray._allocateUninitialized(_:)(uint64_t a1, uint64_t *a2)
{
  if (a1 < 0) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't construct ContiguousArray with count < 0", 46, 2, "Swift/ContiguousArray.swift", 27, 2, 0x251uLL, 0);
  }
  if (!a1) {
    return &_swiftEmptyArrayStorage;
  }
  uint64_t result = static Array._allocateBufferUninitialized(minimumCapacity:)(a1, a2);
  result[2] = (__objc2_class *)a1;
  return result;
}

uint64_t _ContiguousArrayBuffer.init(_buffer:shiftedToStartIndex:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return EnumeratedSequence._base.modify(a1, a3);
}

__objc2_class **ContiguousArray.init(_uninitializedCount:)(uint64_t a1, uint64_t *a2)
{
  if (a1 < 0) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't construct ContiguousArray with count < 0", 46, 2, "Swift/ContiguousArray.swift", 27, 2, 0x251uLL, 0);
  }
  if (!a1) {
    return &_swiftEmptyArrayStorage;
  }
  uint64_t result = static Array._allocateBufferUninitialized(minimumCapacity:)(a1, a2);
  result[2] = (__objc2_class *)a1;
  return result;
}

uint64_t specialized ContiguousArray._reserveCapacityImpl(minimumCapacity:growForAppend:)(uint64_t a1, uint64_t a2)
{
  return specialized ContiguousArray._reserveCapacityImpl(minimumCapacity:growForAppend:)(a1, a2, (uint64_t (*)(void))specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:));
}

{
  return specialized ContiguousArray._reserveCapacityImpl(minimumCapacity:growForAppend:)(a1, a2, (uint64_t (*)(void))specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:));
}

{
  return specialized ContiguousArray._reserveCapacityImpl(minimumCapacity:growForAppend:)(a1, a2, (uint64_t (*)(void))specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:));
}

uint64_t specialized ContiguousArray._reserveCapacityImpl(minimumCapacity:growForAppend:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = *v3;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native(*v3);
  *uint64_t v3 = v5;
  if (!result || a1 > *(void *)(v5 + 24) >> 1)
  {
    return a3();
  }
  return result;
}

uint64_t specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(uint64_t a1, int64_t a2, char a3)
{
  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, (uint64_t)canonical specialized generic type metadata accessor for _ContiguousArrayStorage<String>, (uint64_t (*)(uint64_t, unint64_t, uint64_t))specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:), (void (*)(uint64_t, uint64_t, uint64_t))specialized UnsafeMutablePointer.moveInitialize(from:count:), (void (*)(void, uint64_t, uint64_t, uint64_t))specialized _ContiguousArrayBuffer._copyContents(subRange:initializing:));
  *uint64_t v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, (uint64_t)canonical specialized generic type metadata accessor for _ContiguousArrayStorage<UInt32>, (uint64_t (*)(uint64_t, unint64_t, uint64_t))specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:), (void (*)(uint64_t, uint64_t, uint64_t))specialized UnsafeMutablePointer.moveInitialize(from:count:), (void (*)(void, uint64_t, uint64_t, uint64_t))specialized _ContiguousArrayBuffer._copyContents(subRange:initializing:));
  *uint64_t v3 = result;
  return result;
}

__objc2_class **specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(__objc2_class **a1, int64_t a2, char a3)
{
  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *uint64_t v3 = (uint64_t)result;
  return result;
}

{
  uint64_t *v3;
  __objc2_class **result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, (uint64_t (*)(void))canonical specialized generic type metadata accessor for _ContiguousArrayStorage<_DictionaryCodingKey>, (void (*)(uint64_t, __objc2_class *, __objc2_class **))specialized UnsafeMutablePointer.moveInitialize(from:count:), (void (*)(uint64_t, __objc2_class *, __objc2_class **))specialized UnsafeMutablePointer.initialize(from:count:));
  *uint64_t v3 = (uint64_t)result;
  return result;
}

{
  uint64_t *v3;
  __objc2_class **result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *uint64_t v3 = (uint64_t)result;
  return result;
}

{
  uint64_t *v3;
  __objc2_class **result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, (uint64_t (*)(void))canonical specialized generic type metadata accessor for _ContiguousArrayStorage<Any>, (void (*)(uint64_t, __objc2_class *, __objc2_class **))specialized UnsafeMutablePointer.moveInitialize(from:count:), (void (*)(uint64_t, __objc2_class *, __objc2_class **))specialized UnsafeMutablePointer.initialize(from:count:));
  *uint64_t v3 = (uint64_t)result;
  return result;
}

{
  uint64_t *v3;
  __objc2_class **result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *uint64_t v3 = (uint64_t)result;
  return result;
}

{
  uint64_t *v3;
  __objc2_class **result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, (uint64_t (*)(void))canonical specialized generic type metadata accessor for _ContiguousArrayStorage<Character>, (void (*)(uint64_t, __objc2_class *, __objc2_class **))specialized UnsafeMutablePointer.moveInitialize(from:count:), (void (*)(uint64_t, __objc2_class *, __objc2_class **))specialized UnsafeMutablePointer.initialize(from:count:));
  *uint64_t v3 = (uint64_t)result;
  return result;
}

Swift::Void __swiftcall ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(Swift::Bool bufferIsUnique, Swift::Int minimumCapacity, Swift::Bool growForAppend)
{
  *uint64_t v4 = (uint64_t)_ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((__objc2_class **)bufferIsUnique, minimumCapacity, growForAppend, *v4, *(uint64_t **)(v3 + 16));
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(uint64_t result, int64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(uint64_t, unint64_t, uint64_t), void (*a7)(uint64_t, uint64_t, uint64_t), void (*a8)(void, uint64_t, uint64_t, uint64_t))
{
  char v11 = result;
  if (a3)
  {
    unint64_t v12 = *(void *)(a4 + 24);
    unint64_t v13 = v12 >> 1;
    if ((uint64_t)(v12 >> 1) < a2)
    {
      if ((uint64_t)(v13 + 0x4000000000000000) < 0)
      {
        __break(1u);
        return result;
      }
      unint64_t v13 = v12 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v12 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        unint64_t v13 = a2;
      }
    }
  }
  else
  {
    unint64_t v13 = a2;
  }
  uint64_t v14 = *(void *)(a4 + 16);
  uint64_t v15 = a6(v14, v13, a5);
  uint64_t v16 = v15 + 32;
  if (v11)
  {
    a7(a4 + 32, v14, v16);
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    a8(0, v14, v16, a4);
  }
  swift_release(a4);
  return v15;
}

__objc2_class **specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(__objc2_class **result, int64_t a2, char a3, uint64_t a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    uint64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        uint64_t v7 = a2;
      }
    }
  }
  else
  {
    uint64_t v7 = a2;
  }
  uint64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    uint64_t v9 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = (unint64_t *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
    char v11 = (__objc2_class **)swift_allocObject(v10, 40 * v9 + 32, 7uLL);
    size_t v12 = _swift_stdlib_malloc_size(v11);
    void v11[2] = (__objc2_class *)v8;
    uint64_t v11[3] = (__objc2_class *)(2 * ((uint64_t)(v12 - 32) / 40));
  }
  else
  {
    char v11 = &_swiftEmptyArrayStorage;
  }
  unint64_t v13 = (char *)(v11 + 4);
  uint64_t v14 = (char *)(a4 + 32);
  if (v5)
  {
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(v14, v8, v13);
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    specialized UnsafeMutablePointer.initialize(from:count:)(v14, v8, v13, &demangling cache variable for type metadata for CodingKey);
  }
  swift_release(a4);
  return v11;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  unint64_t *v10;
  __objc2_class **v11;
  size_t v12;
  char *v13;
  char *v14;

  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    uint64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        uint64_t v7 = a2;
      }
    }
  }
  else
  {
    uint64_t v7 = a2;
  }
  uint64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    uint64_t v9 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = (unint64_t *)canonical specialized generic type metadata accessor for _ContiguousArrayStorage<Int8>();
    char v11 = (__objc2_class **)swift_allocObject(v10, v9 + 32, 7uLL);
    size_t v12 = _swift_stdlib_malloc_size(v11);
    void v11[2] = (__objc2_class *)v8;
    uint64_t v11[3] = (__objc2_class *)(2 * v12 - 64);
  }
  else
  {
    char v11 = &_swiftEmptyArrayStorage;
  }
  unint64_t v13 = (char *)(v11 + 4);
  uint64_t v14 = (char *)(a4 + 32);
  if (v5)
  {
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(v14, v8, v13, "UnsafeMutablePointer.moveInitialize with negative count", 55, 0x416uLL);
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    specialized UnsafeMutablePointer.initialize(from:count:)(v14, v8, v13);
  }
  swift_release(a4);
  return v11;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  __objc2_class **v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;

  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    uint64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        uint64_t v7 = a2;
      }
    }
  }
  else
  {
    uint64_t v7 = a2;
  }
  uint64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    uint64_t v9 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = (unint64_t *)canonical specialized generic type metadata accessor for _ContiguousArrayStorage<Swift.AnyObject>();
    char v11 = (__objc2_class **)swift_allocObject(v10, 8 * v9 + 32, 7uLL);
    size_t v12 = _swift_stdlib_malloc_size(v11);
    unint64_t v13 = v12 - 32;
    if (v12 < 32) {
      unint64_t v13 = v12 - 25;
    }
    void v11[2] = (__objc2_class *)v8;
    uint64_t v11[3] = (__objc2_class *)((2 * (v13 >> 3)) | 1);
  }
  else
  {
    char v11 = &_swiftEmptyArrayStorage;
  }
  uint64_t v14 = (char *)(v11 + 4);
  uint64_t v15 = (char *)(a4 + 32);
  if (v5)
  {
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(v15, v8, v14);
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    specialized UnsafeMutablePointer.initialize(from:count:)(v15, v8, v14);
  }
  swift_release(a4);
  return v11;
}

__objc2_class **specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(__objc2_class **a1, int64_t a2, char a3, uint64_t a4)
{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, (uint64_t (*)(void))canonical specialized generic type metadata accessor for _ContiguousArrayStorage<String>, (void (*)(uint64_t, __objc2_class *, __objc2_class **))specialized UnsafeMutablePointer.moveInitialize(from:count:), (void (*)(uint64_t, __objc2_class *, __objc2_class **))specialized UnsafeMutablePointer.initialize(from:count:));
}

{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, (uint64_t (*)(void))canonical specialized generic type metadata accessor for _ContiguousArrayStorage<Any>, (void (*)(uint64_t, __objc2_class *, __objc2_class **))specialized UnsafeMutablePointer.moveInitialize(from:count:), (void (*)(uint64_t, __objc2_class *, __objc2_class **))specialized UnsafeMutablePointer.initialize(from:count:));
}

__objc2_class **specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(__objc2_class **result, int64_t a2, char a3, uint64_t a4, uint64_t (*a5)(void), void (*a6)(uint64_t, __objc2_class *, __objc2_class **), void (*a7)(uint64_t, __objc2_class *, __objc2_class **))
{
  char v10 = (char)result;
  if (a3)
  {
    unint64_t v11 = *(void *)(a4 + 24);
    uint64_t v12 = v11 >> 1;
    if ((uint64_t)(v11 >> 1) < a2)
    {
      if (v12 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      uint64_t v12 = v11 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v11 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        uint64_t v12 = a2;
      }
    }
  }
  else
  {
    uint64_t v12 = a2;
  }
  unint64_t v13 = *(__objc2_class **)(a4 + 16);
  if (v12 <= (uint64_t)v13) {
    uint64_t v14 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v14 = v12;
  }
  if (v14)
  {
    uint64_t v15 = (unint64_t *)a5(0);
    uint64_t v16 = (__objc2_class **)swift_allocObject(v15, 32 * v14 + 32, 7uLL);
    int64_t v17 = _swift_stdlib_malloc_size(v16);
    uint64_t v18 = v17 - 32;
    if (v17 < 32) {
      uint64_t v18 = v17 - 1;
    }
    long long v16[2] = v13;
    void v16[3] = (__objc2_class *)(2 * (v18 >> 5));
  }
  else
  {
    uint64_t v16 = &_swiftEmptyArrayStorage;
  }
  uint64_t v19 = v16 + 4;
  uint64_t v20 = a4 + 32;
  if (v10)
  {
    a6(v20, v13, v19);
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    a7(v20, v13, v19);
  }
  swift_release(a4);
  return v16;
}

{
  char v10;
  unint64_t v11;
  uint64_t v12;
  __objc2_class *v13;
  uint64_t v14;
  unint64_t *v15;
  __objc2_class **v16;
  int64_t v17;
  uint64_t v18;
  __objc2_class **v19;
  uint64_t v20;

  char v10 = (char)result;
  if (a3)
  {
    unint64_t v11 = *(void *)(a4 + 24);
    uint64_t v12 = v11 >> 1;
    if ((uint64_t)(v11 >> 1) < a2)
    {
      if (v12 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      uint64_t v12 = v11 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v11 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        uint64_t v12 = a2;
      }
    }
  }
  else
  {
    uint64_t v12 = a2;
  }
  unint64_t v13 = *(__objc2_class **)(a4 + 16);
  if (v12 <= (uint64_t)v13) {
    uint64_t v14 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v14 = v12;
  }
  if (v14)
  {
    uint64_t v15 = (unint64_t *)a5(0);
    uint64_t v16 = (__objc2_class **)swift_allocObject(v15, 16 * v14 + 32, 7uLL);
    int64_t v17 = _swift_stdlib_malloc_size(v16);
    uint64_t v18 = v17 - 32;
    if (v17 < 32) {
      uint64_t v18 = v17 - 17;
    }
    long long v16[2] = v13;
    void v16[3] = (__objc2_class *)(2 * (v18 >> 4));
  }
  else
  {
    uint64_t v16 = &_swiftEmptyArrayStorage;
  }
  uint64_t v19 = v16 + 4;
  uint64_t v20 = a4 + 32;
  if (v10)
  {
    a6(v20, v13, v19);
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    a7(v20, v13, v19);
  }
  swift_release(a4);
  return v16;
}

__objc2_class **_ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(__objc2_class **result, int64_t a2, char a3, uint64_t a4, uint64_t *a5)
{
  char v7 = (char)result;
  if (a3)
  {
    unint64_t v8 = *(void *)(a4 + 24);
    uint64_t v9 = v8 >> 1;
    if ((uint64_t)(v8 >> 1) < a2)
    {
      if (v9 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      uint64_t v9 = v8 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v8 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        uint64_t v9 = a2;
      }
    }
  }
  else
  {
    uint64_t v9 = a2;
  }
  uint64_t v10 = *(void *)(a4 + 16);
  if (v9 <= v10) {
    uint64_t v11 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v11 = v9;
  }
  if (v11)
  {
    uint64_t v12 = getContiguousArrayStorageType<A>(for:)((uint64_t)a5, a5);
    uint64_t v13 = *(a5 - 1);
    uint64_t v14 = *(void *)(v13 + 72);
    uint64_t v15 = *(unsigned __int8 *)(v13 + 80);
    uint64_t v16 = (__objc2_class **)swift_allocObject((unint64_t *)v12, ((v15 + *((unsigned int *)v12 + 12)) & ~v15) + v14 * v11, v15 | *((unsigned __int16 *)v12 + 26));
    size_t v17 = _swift_stdlib_malloc_size(v16);
    if (!v14) {
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Division by zero", 16, 2, "Swift/IntegerTypes.swift", 24, 2, 0x3829uLL, 0);
    }
    int64_t v18 = v17 - ((v15 + 32) & ~v15);
    if (v18 == 0x8000000000000000 && v14 == -1) {
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Division results in an overflow", 31, 2, "Swift/IntegerTypes.swift", 24, 2, 0x3830uLL, 0);
    }
    uint64_t v20 = v18 / v14;
    swift_retain((atomic_ullong *)v16);
    BOOL isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType((uint64_t)a5, a5);
    long long v16[2] = (__objc2_class *)v10;
    void v16[3] = (__objc2_class *)(isClassOrObjCExistentialType | (unint64_t)(2 * v20));
    swift_release((uint64_t)v16);
  }
  else
  {
    uint64_t v13 = *(a5 - 1);
    uint64_t v16 = &_swiftEmptyArrayStorage;
  }
  unint64_t v22 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  BOOL v23 = (char *)v16 + v22;
  uint64_t v24 = (char *)(a4 + v22);
  if (v7)
  {
    UnsafeMutablePointer.moveInitialize(from:count:)(v24, v10, v23, (unint64_t *)a5);
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    UnsafeMutablePointer.initialize(from:count:)(v24, v10, v23, (unint64_t *)a5);
  }
  swift_release(a4);
  return v16;
}

Swift::Void __swiftcall ContiguousArray._copyToNewBuffer(oldCount:)(Swift::Int oldCount)
{
  uint64_t v6 = oldCount + 1;
  uint64_t v14 = *v4;
  char v7 = (unint64_t *)type metadata accessor for _ContiguousArrayBuffer(0, *(void *)(v1 + 16), v2, v3);
  uint64_t WitnessTable = swift_getWitnessTable(protocol conformance descriptor for _ContiguousArrayBuffer<A>, v7, v8);
  uint64_t v10 = _ArrayBufferProtocol._forceCreateUniqueMutableBuffer(countForNewBuffer:minNewCapacity:)(oldCount, v6, (uint64_t)v7, WitnessTable);
  uint64_t v14 = (atomic_ullong *)v10;
  uint64_t v11 = default argument 3 of _ArrayBufferProtocol._arrayOutOfPlaceUpdate(_:_:_:_:)((uint64_t)v7, WitnessTable);
  uint64_t v13 = v12;
  _ArrayBufferProtocol._arrayOutOfPlaceUpdate(_:_:_:_:)(&v14, oldCount, 0, (void (*)(char *, uint64_t))v11, v12, (uint64_t)v7, WitnessTable);
  swift_release(v13);
  swift_release((uint64_t)v10);
}

uint64_t specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()()
{
  return specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()((uint64_t (*)(void, uint64_t, uint64_t))specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:));
}

{
  return specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()((uint64_t (*)(void, uint64_t, uint64_t))specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:));
}

{
  return specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()((uint64_t (*)(void, uint64_t, uint64_t))specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:));
}

uint64_t specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(uint64_t (*a1)(void, uint64_t, uint64_t))
{
  uint64_t v2 = *v1;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native(*v1);
  *uint64_t v1 = v2;
  if ((result & 1) == 0)
  {
    uint64_t v4 = *(void *)(v2 + 16) + 1;
    return a1(0, v4, 1);
  }
  return result;
}

Swift::Void __swiftcall ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()()
{
  uint64_t v1 = *v0;
  BOOL isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v0);
  *uint64_t v0 = v1;
  if (!isUniquelyReferenced_nonNull_native)
  {
    Swift::Int v3 = *(void *)(v1 + 16) + 1;
    ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3, 1);
  }
}

__objc2_class **specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(__objc2_class **result)
{
  unint64_t v2 = *(void *)(*(void *)v1 + 24);
  if ((uint64_t)result + 1 > (uint64_t)(v2 >> 1)) {
    return specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((__objc2_class **)(v2 > 1), (int64_t)result + 1, 1);
  }
  return result;
}

Swift::Void __swiftcall ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(Swift::Int oldCount)
{
  unint64_t v2 = *(void *)(*(void *)v1 + 24);
  if (oldCount + 1 > (uint64_t)(v2 >> 1)) {
    ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v2 > 1, oldCount + 1, 1);
  }
}

uint64_t specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *v3;
  *(void *)(v4 + 16) = result + 1;
  uint64_t v5 = v4 + 16 * result;
  *(void *)(v5 + 32) = a2;
  *(void *)(v5 + 4_assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000034, 0x80000001816E2880, "Swift/Codable.swift", 19, 2, 0x11F9uLL, 0) = a3;
  return result;
}

_OWORD *specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(uint64_t a1, _OWORD *a2)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 16) = a1 + 1;
  return outlined init with take of Any(a2, (_OWORD *)(v3 + 32 * a1 + 32));
}

uint64_t specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(uint64_t result, uint64_t a2)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 16) = result + 1;
  *(void *)(v3 + 8 * result + 32) = a2;
  return result;
}

uint64_t ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *v3;
  *(void *)(v4 + 16) = a1 + 1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  return (*(uint64_t (**)(unint64_t))(v5 + 32))(v4+ ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))+ *(void *)(v5 + 72) * a1);
}

uint64_t specialized ContiguousArray.append<A>(contentsOf:)(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *v1;
  int64_t v4 = *(void *)(*v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
LABEL_59:
    __break(1u);
    goto LABEL_60;
  }
  BOOL isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v1);
  *uint64_t v1 = v3;
  if (!isUniquelyReferenced_nonNull_native || (int64_t v8 = *(void *)(v3 + 24) >> 1, v8 < v5))
  {
    if (v4 <= v5) {
      int64_t v9 = v4 + v2;
    }
    else {
      int64_t v9 = v4;
    }
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v9, 1);
    uint64_t v3 = *v1;
    int64_t v8 = *(void *)(*v1 + 24) >> 1;
  }
  uint64_t v10 = *(void *)(v3 + 16);
  uint64_t v11 = v8 - v10;
  if (v8 - v10 < 0) {
LABEL_60:
  }
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeMutableBufferPointer with negative count", 46, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x47uLL, 0);
  uint64_t result = specialized Sequence._copySequenceContents(initializing:)(&v45, (void *)(v3 + 16 * v10 + 32), v11, a1);
  if (result < v2) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "newElements.underestimatedCount was an overestimate", 51, 2, "Swift/ContiguousArray.swift", 27, 2, 0x35AuLL, 0);
  }
  if (result)
  {
    uint64_t v13 = *(void *)(v3 + 16);
    BOOL v14 = __OFADD__(v13, result);
    uint64_t v15 = v13 + result;
    if (v14)
    {
      __break(1u);
      goto LABEL_63;
    }
    *(void *)(v3 + 16) = v15;
  }
  if (result == v11)
  {
    uint64_t v16 = v3;
    uint64_t v17 = *(void *)(v3 + 16);
    uint64_t v18 = v45;
    uint64_t v43 = v1;
    uint64_t v44 = v46;
    uint64_t v19 = v48;
    if (v49)
    {
      unint64_t v20 = (v49 - 1) & v49;
      unint64_t v21 = __clz(__rbit64(v49)) | (v48 << 6);
      int64_t v22 = (unint64_t)(v47 + 64) >> 6;
LABEL_16:
      BOOL v23 = (uint64_t *)(*(void *)(v45 + 48) + 16 * v21);
      uint64_t v24 = *v23;
      unint64_t v25 = v23[1];
      uint64_t v48 = v19;
      unint64_t v49 = v20;
      swift_bridgeObjectRetain(v25);
      for (uint64_t i = v16; ; *(void *)(i + 16) = v17)
      {
        while (1)
        {
          unint64_t v27 = *(void *)(i + 24);
          if (v17 + 1 > (uint64_t)(v27 >> 1)) {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v27 > 1, v17 + 1, 1);
          }
          uint64_t v28 = *v43;
          uint64_t v29 = *(void *)(*v43 + 24) >> 1;
          if (v17 < v29) {
            break;
          }
          uint64_t i = *v43;
          *(void *)(v28 + 16) = v17;
        }
        uint64_t i = *v43;
        uint64_t v30 = v28 + 32;
        do
        {
          unint64_t v34 = (void *)(v30 + 16 * v17);
          *unint64_t v34 = v24;
          v34[1] = v25;
          ++v17;
          if (v20)
          {
            unint64_t v31 = __clz(__rbit64(v20));
            v20 &= v20 - 1;
            unint64_t v32 = v31 | (v19 << 6);
          }
          else
          {
            int64_t v35 = v19 + 1;
            if (__OFADD__(v19, 1))
            {
              __break(1u);
              goto LABEL_59;
            }
            if (v35 >= v22) {
              goto LABEL_41;
            }
            unint64_t v36 = *(void *)(v44 + 8 * v35);
            uint64_t v37 = v19 + 1;
            if (!v36)
            {
              uint64_t v37 = v19 + 2;
              if (v19 + 2 >= v22) {
                goto LABEL_41;
              }
              unint64_t v36 = *(void *)(v44 + 8 * v37);
              if (!v36)
              {
                uint64_t v37 = v19 + 3;
                if (v19 + 3 >= v22) {
                  goto LABEL_41;
                }
                unint64_t v36 = *(void *)(v44 + 8 * v37);
                if (!v36)
                {
                  uint64_t v37 = v19 + 4;
                  if (v19 + 4 >= v22)
                  {
LABEL_41:
                    uint64_t v3 = i;
                    *(void *)(i + 16) = v17;
                    uint64_t result = outlined consume of [A : B].Iterator._Variant<A, B>(v18);
                    uint64_t v1 = v43;
                    goto LABEL_57;
                  }
                  unint64_t v36 = *(void *)(v44 + 8 * v37);
                  if (!v36)
                  {
                    uint64_t v38 = v19 + 5;
                    do
                    {
                      if (v22 == v38) {
                        goto LABEL_41;
                      }
                      unint64_t v36 = *(void *)(v44 + 8 * v38++);
                    }
                    while (!v36);
                    uint64_t v37 = v38 - 1;
                  }
                }
              }
            }
            unint64_t v20 = (v36 - 1) & v36;
            unint64_t v32 = __clz(__rbit64(v36)) + (v37 << 6);
            uint64_t v19 = v37;
          }
          Swift::Int v33 = (uint64_t *)(*(void *)(v18 + 48) + 16 * v32);
          uint64_t v24 = *v33;
          unint64_t v25 = v33[1];
          swift_bridgeObjectRetain(v25);
        }
        while (v17 < v29);
      }
    }
    int64_t v39 = v48 + 1;
    if (!__OFADD__(v48, 1))
    {
      int64_t v22 = (unint64_t)(v47 + 64) >> 6;
      if (v39 < v22)
      {
        unint64_t v40 = *(void *)(v46 + 8 * v39);
        uint64_t v41 = v48 + 1;
        if (v40)
        {
LABEL_45:
          unint64_t v20 = (v40 - 1) & v40;
          unint64_t v21 = __clz(__rbit64(v40)) + (v41 << 6);
          uint64_t v19 = v41;
          goto LABEL_16;
        }
        uint64_t v41 = v48 + 2;
        if (v48 + 2 < v22)
        {
          unint64_t v40 = *(void *)(v46 + 8 * v41);
          if (v40) {
            goto LABEL_45;
          }
          uint64_t v41 = v48 + 3;
          if (v48 + 3 < v22)
          {
            unint64_t v40 = *(void *)(v46 + 8 * v41);
            if (v40) {
              goto LABEL_45;
            }
            uint64_t v41 = v48 + 4;
            if (v48 + 4 < v22)
            {
              unint64_t v40 = *(void *)(v46 + 8 * v41);
              if (!v40)
              {
                uint64_t v42 = v48 + 5;
                do
                {
                  if (v22 == v42) {
                    goto LABEL_56;
                  }
                  unint64_t v40 = *(void *)(v46 + 8 * v42++);
                }
                while (!v40);
                uint64_t v41 = v42 - 1;
              }
              goto LABEL_45;
            }
          }
        }
      }
      goto LABEL_56;
    }
LABEL_63:
    __break(1u);
    return result;
  }
LABEL_56:
  uint64_t result = outlined consume of [A : B].Iterator._Variant<A, B>(v45);
LABEL_57:
  *uint64_t v1 = v3;
  return result;
}

void specialized ContiguousArray.append<A>(contentsOf:)(unint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *v1;
  int64_t v4 = *(void *)(*v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
    goto LABEL_31;
  }
  BOOL isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v1);
  *uint64_t v1 = v3;
  if (!isUniquelyReferenced_nonNull_native || (int64_t v8 = *(void *)(v3 + 24) >> 1, v8 < v5))
  {
    if (v4 <= v5) {
      int64_t v9 = v4 + v2;
    }
    else {
      int64_t v9 = v4;
    }
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v9, 1);
    uint64_t v3 = *v1;
    int64_t v8 = *(void *)(*v1 + 24) >> 1;
  }
  uint64_t v10 = *(void *)(v3 + 16);
  unint64_t v11 = v8 - v10;
  if (v8 - v10 < 0) {
LABEL_31:
  }
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeMutableBufferPointer with negative count", 46, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x47uLL, 0);
  unint64_t v12 = *(void *)(a1 + 16);
  if (!v12)
  {
    if (!v2) {
      goto LABEL_17;
    }
LABEL_32:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "newElements.underestimatedCount was an overestimate", 51, 2, "Swift/ContiguousArray.swift", 27, 2, 0x35AuLL, 0);
  }
  if (v11 < v12) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Insufficient space allocated to copy array contents", 51, 2, "Swift/Array.swift", 17, 2, 0x694uLL, 0);
  }
  uint64_t v13 = (char *)(v3 + 16 * v10 + 32);
  swift_bridgeObjectRetain(a1);
  specialized UnsafeMutablePointer.initialize(from:count:)((char *)(a1 + 32), v12, v13);
  swift_bridgeObjectRelease(a1);
  if (v12 < v2) {
    goto LABEL_32;
  }
  uint64_t v14 = *(void *)(v3 + 16);
  uint64_t v15 = v14 + v12;
  if (!__OFADD__(v14, v12))
  {
    *(void *)(v3 + 16) = v15;
    if (v12 == v11)
    {
      uint64_t v16 = *(void *)(a1 + 16);
      if (v12 != v16)
      {
        specialized Array._checkSubscript(_:wasNativeTypeChecked:)(v12, 1, a1);
        unint64_t v34 = v12 + 1;
        uint64_t v17 = (uint64_t *)(a1 + 32 + 16 * v12);
        uint64_t v19 = *v17;
        unint64_t v18 = v17[1];
        swift_bridgeObjectRetain(v18);
        unint64_t v32 = v1;
        uint64_t v30 = v16;
        while (1)
        {
LABEL_20:
          unint64_t v20 = *(void *)(v3 + 24);
          if (v15 + 1 > (uint64_t)(v20 >> 1)) {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v20 > 1, v15 + 1, 1);
          }
          uint64_t v3 = *v1;
          uint64_t v21 = *(void *)(*v1 + 24) >> 1;
          uint64_t v22 = v15 - v21;
          if (v15 < v21) {
            break;
          }
          *(void *)(v3 + 16) = v15;
        }
        uint64_t v31 = *(void *)(*v1 + 24) >> 1;
        uint64_t v23 = v15;
        uint64_t v24 = 0;
        uint64_t v25 = 0;
        uint64_t v26 = v16 - v34;
        unint64_t v27 = a1 + 16 * v34;
        uint64_t v33 = v23;
        uint64_t v28 = v3 + 16 * v23;
        while (1)
        {
          uint64_t v29 = v28 + v24;
          *(void *)(v29 + 32) = v19;
          *(void *)(v29 + 4_assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000034, 0x80000001816E2880, "Swift/Codable.swift", 19, 2, 0x11F9uLL, 0) = v18;
          if (v26 == v25) {
            break;
          }
          if ((int64_t)(v34 + v25) >= *(void *)(a1 + 16)) {
            _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Index out of range", 18, 2, "Swift/ContiguousArrayBuffer.swift", 33, 2, 0x2A3uLL, 0);
          }
          uint64_t v19 = *(void *)(v27 + v24 + 32);
          unint64_t v18 = *(void *)(v27 + v24 + 40);
          swift_bridgeObjectRetain(v18);
          ++v25;
          v24 += 16;
          if (!(v22 + v25))
          {
            v34 += v25;
            uint64_t v1 = v32;
            uint64_t v15 = v31;
            uint64_t v16 = v30;
            *(void *)(v3 + 16) = v31;
            goto LABEL_20;
          }
        }
        *(void *)(v3 + 16) = v33 + v25 + 1;
        swift_bridgeObjectRelease(a1);
        uint64_t v1 = v32;
        goto LABEL_18;
      }
    }
LABEL_17:
    swift_bridgeObjectRelease(a1);
LABEL_18:
    *uint64_t v1 = v3;
    return;
  }
  __break(1u);
}

{
  uint64_t *v1;
  unint64_t v2;
  uint64_t v3;
  int64_t v4;
  int64_t v5;
  BOOL isUniquelyReferenced_nonNull_native;
  int64_t v8;
  int64_t v9;
  int64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int64_t v15;
  atomic_ullong *v16;
  unint64_t v17;
  int64_t v18;
  atomic_ullong *v19;
  long long v20;
  uint64_t v21;
  long long v22;
  uint64_t v23;
  long long v24;
  long long v25;
  uint64_t vars8;

  unint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *v1;
  int64_t v4 = *(void *)(*v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
    goto LABEL_44;
  }
  BOOL isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v1);
  *uint64_t v1 = v3;
  if (!isUniquelyReferenced_nonNull_native || (int64_t v8 = *(void *)(v3 + 24) >> 1, v8 < v5))
  {
    if (v4 <= v5) {
      int64_t v9 = v4 + v2;
    }
    else {
      int64_t v9 = v4;
    }
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((__objc2_class **)isUniquelyReferenced_nonNull_native, v9, 1);
    uint64_t v3 = *v1;
    int64_t v8 = *(void *)(*v1 + 24) >> 1;
  }
  uint64_t v10 = *(void *)(v3 + 16);
  unint64_t v11 = v8 - v10;
  if (v8 - v10 < 0) {
LABEL_44:
  }
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeMutableBufferPointer with negative count", 46, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x47uLL, 0);
  unint64_t v12 = *(void *)(a1 + 16);
  if (!v12)
  {
    if (!v2)
    {
      if (v8 == v10)
      {
        uint64_t v14 = 0;
        goto LABEL_19;
      }
LABEL_38:
      swift_bridgeObjectRelease(a1);
      return;
    }
LABEL_45:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "newElements.underestimatedCount was an overestimate", 51, 2, "Swift/ContiguousArray.swift", 27, 2, 0x35AuLL, 0);
  }
  if (v11 < v12) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Insufficient space allocated to copy array contents", 51, 2, "Swift/Array.swift", 17, 2, 0x694uLL, 0);
  }
  swift_bridgeObjectRetain(a1);
  specialized UnsafeMutablePointer.initialize(from:count:)((char *)(a1 + 32), v12, (char *)(v3 + 32 * v10 + 32));
  swift_bridgeObjectRelease(a1);
  if (v12 < v2) {
    goto LABEL_45;
  }
  uint64_t v13 = *(void *)(v3 + 16);
  uint64_t v10 = v13 + v12;
  if (__OFADD__(v13, v12))
  {
    __break(1u);
    return;
  }
  *(void *)(v3 + 16) = v10;
  if (v12 != v11) {
    goto LABEL_38;
  }
  uint64_t v14 = *(void *)(a1 + 16);
  if (v12 == v14)
  {
LABEL_19:
    uint64_t v24 = 0u;
    uint64_t v25 = 0u;
    goto LABEL_20;
  }
  specialized Array._checkSubscript(_:wasNativeTypeChecked:)(v12, 1, a1);
  outlined init with copy of Any(a1 + 32 + 32 * v12++, (uint64_t)&v24);
LABEL_20:
  outlined init with copy of Any?((uint64_t)&v24, (uint64_t)&v22);
  while (v23)
  {
    outlined destroy of Any?((uint64_t)&v22);
    uint64_t v16 = (atomic_ullong *)*v1;
    uint64_t v17 = *(void *)(*v1 + 24);
    unint64_t v18 = v17 >> 1;
    if ((uint64_t)(v17 >> 1) < v10 + 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((__objc2_class **)(v17 > 1), v10 + 1, 1);
      uint64_t v16 = (atomic_ullong *)*v1;
      unint64_t v18 = *(void *)(*v1 + 24) >> 1;
    }
    swift_retain(v16);
    outlined init with copy of Any?((uint64_t)&v24, (uint64_t)&v20);
    if (v21)
    {
      if (v10 <= v18) {
        uint64_t v15 = v18;
      }
      else {
        uint64_t v15 = v10;
      }
      uint64_t v19 = &v16[4 * v10 + 4];
      while (1)
      {
        outlined init with take of Any(&v20, &v22);
        if (v15 == v10) {
          break;
        }
        outlined destroy of Any?((uint64_t)&v24);
        outlined init with take of Any(&v22, v19);
        if (v12 == v14)
        {
          uint64_t v24 = 0u;
          uint64_t v25 = 0u;
          unint64_t v12 = v14;
        }
        else
        {
          if ((int64_t)v12 >= *(void *)(a1 + 16)) {
            _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Index out of range", 18, 2, "Swift/ContiguousArrayBuffer.swift", 33, 2, 0x2A3uLL, 0);
          }
          outlined init with copy of Any(a1 + 32 + 32 * v12++, (uint64_t)&v24);
        }
        outlined init with copy of Any?((uint64_t)&v24, (uint64_t)&v20);
        v19 += 4;
        ++v10;
        if (!v21) {
          goto LABEL_22;
        }
      }
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t *)&v22);
      swift_release((uint64_t)v16);
      uint64_t v10 = v15;
    }
    else
    {
LABEL_22:
      swift_release((uint64_t)v16);
      outlined destroy of Any?((uint64_t)&v20);
      uint64_t v15 = v10;
    }
    *(void *)(*v1 + 16) = v15;
    outlined init with copy of Any?((uint64_t)&v24, (uint64_t)&v22);
  }
  outlined destroy of Any?((uint64_t)&v24);
  swift_bridgeObjectRelease(a1);
  outlined destroy of Any?((uint64_t)&v22);
}

uint64_t ContiguousArray.append<A>(contentsOf:)(void (*a1)(void, void, void), uint64_t a2, uint64_t a3, uint64_t a4)
{
  int64_t v5 = v4;
  v68[1] = a2;
  uint64_t v75 = *(atomic_ullong **)(*(void *)(a2 + 16) - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v72 = (char *)v68 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v89 = v10;
  uint64_t v82 = type metadata accessor for Optional(0, v10, v11, v12);
  uint64_t v84 = (uint64_t)*(v82 - 1);
  uint64_t v13 = MEMORY[0x1F4188790](v82);
  uint64_t v15 = (char *)v68 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = MEMORY[0x1F4188790](v13);
  unint64_t v18 = (char *)v68 - v17;
  uint64_t v19 = MEMORY[0x1F4188790](v16);
  uint64_t v21 = (char *)v68 - v20;
  uint64_t v22 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](v19);
  uint64_t v24 = (char *)v68 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (int **)a4, a3, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Iterator);
  uint64_t v69 = *((void *)AssociatedTypeWitness - 1);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v80 = (char *)v68 - v25;
  uint64_t v26 = *(uint64_t (**)(uint64_t, uint64_t))(a4 + 40);
  uint64_t v87 = a1;
  uint64_t v88 = a4;
  uint64_t v27 = a3;
  uint64_t v28 = v26(a3, a4);
  uint64_t v29 = *v5;
  Swift::Int v30 = *(void *)(*v5 + 16);
  Swift::Int v31 = v30 + v28;
  if (__OFADD__(v30, v28))
  {
    __break(1u);
    goto LABEL_32;
  }
  uint64_t v86 = v28;
  BOOL isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v29);
  *int64_t v5 = v29;
  if (!isUniquelyReferenced_nonNull_native || (Swift::Int v33 = *(void *)(v29 + 24) >> 1, v33 < v31))
  {
    if (v30 <= v31) {
      Swift::Int v34 = v31;
    }
    else {
      Swift::Int v34 = v30;
    }
    ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v34, 1);
    uint64_t v29 = *v5;
    Swift::Int v33 = *(void *)(*v5 + 24) >> 1;
  }
  uint64_t v35 = *(void *)(v29 + 16);
  Swift::Int v36 = v33 - v35;
  if (v33 - v35 < 0) {
LABEL_32:
  }
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeMutableBufferPointer with negative count", 46, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x47uLL, 0);
  atomic_ullong v37 = v75[9];
  unint64_t v71 = (*((unsigned __int8 *)v75 + 80) + 32) & ~(unint64_t)*((unsigned __int8 *)v75 + 80);
  atomic_ullong v81 = v37;
  unint64_t v38 = v29 + v71 + v37 * v35;
  int64_t v39 = v87;
  (*(void (**)(char *, void, uint64_t))(v22 + 16))(v24, v87, v27);
  uint64_t v40 = (*(uint64_t (**)(char *, unint64_t, Swift::Int, uint64_t))(v88 + 64))(v80, v38, v36, v27);
  if (v40 < v86) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "newElements.underestimatedCount was an overestimate", 51, 2, "Swift/ContiguousArray.swift", 27, 2, 0x35AuLL, 0);
  }
  uint64_t v41 = v40;
  uint64_t result = (*(uint64_t (**)(void (*)(void, void, void), uint64_t))(v22 + 8))(v39, v27);
  if (v41 >= 1)
  {
    uint64_t v43 = *(void *)(*v5 + 16);
    BOOL v44 = __OFADD__(v43, v41);
    uint64_t v45 = v43 + v41;
    if (v44)
    {
      __break(1u);
      return result;
    }
    *(void *)(*v5 + 16) = v45;
  }
  if (v41 != v36) {
    return (*(uint64_t (**)(char *, const char *))(v69 + 8))(v80, AssociatedTypeWitness);
  }
  int64_t v46 = *(void *)(*v5 + 16);
  uint64_t v47 = AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v88, v27, (uint64_t)AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Sequence, associated conformance descriptor for Sequence.Sequence.Iterator: IteratorProtocol);
  unint64_t v49 = *(void (**)(const char *, uint64_t))(AssociatedConformanceWitness + 16);
  uint64_t v77 = AssociatedConformanceWitness + 16;
  uint64_t v78 = AssociatedConformanceWitness;
  uint64_t v76 = v49;
  ((void (*)(const char *))v49)(v47);
  uint64_t v50 = v84;
  uint64_t v51 = v82;
  uint64_t v87 = *(void (**)(void, void, void))(v84 + 16);
  uint64_t v88 = v84 + 16;
  v87(v18, v21, v82);
  uint64_t v52 = (uint64_t)v75;
  uint64_t v85 = (uint64_t (*)(char *, uint64_t, uint64_t))v75[6];
  uint64_t v86 = (uint64_t)(v75 + 6);
  int v53 = v85(v18, 1, v89);
  uint64_t v83 = *(void (**)(char *, Class *))(v50 + 8);
  uint64_t v84 = v50 + 8;
  if (v53 != 1)
  {
    uint64_t v55 = v52;
    uint64_t v56 = (void (**)(char *, char *, uint64_t))(v52 + 32);
    uint64_t v70 = (void (**)(char *, uint64_t))(v55 + 8);
    uint64_t v73 = v18;
    uint64_t v74 = v5;
    do
    {
      v83(v18, v51);
      uint64_t v57 = (atomic_ullong *)*v5;
      unint64_t v58 = *(void *)(*v5 + 24);
      int64_t v59 = v58 >> 1;
      if ((uint64_t)(v58 >> 1) < v46 + 1)
      {
        ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v58 > 1, v46 + 1, 1);
        uint64_t v57 = (atomic_ullong *)*v5;
        int64_t v59 = *(void *)(*v5 + 24) >> 1;
      }
      swift_retain(v57);
      v87(v15, v21, v51);
      int v60 = v85(v15, 1, v89);
      uint64_t v75 = v57;
      if (v60 == 1)
      {
        uint64_t v61 = v89;
LABEL_30:
        swift_release((uint64_t)v75);
        uint64_t v51 = v82;
        v83(v15, v82);
        int64_t v64 = v46;
      }
      else
      {
        uint64_t v62 = *v56;
        uint64_t v63 = v72;
        if (v46 <= v59) {
          int64_t v64 = v59;
        }
        else {
          int64_t v64 = v46;
        }
        uint64_t v65 = (char *)v57 + v71 + v81 * v46;
        uint64_t v61 = v89;
        while (1)
        {
          v62(v63, v15, v61);
          if (v64 == v46) {
            break;
          }
          uint64_t v66 = v82;
          v83(v21, v82);
          v62(v65, v63, v61);
          ++v46;
          v76(AssociatedTypeWitness, v78);
          uint64_t v61 = v89;
          v87(v15, v21, v66);
          int v67 = v85(v15, 1, v61);
          v65 += v81;
          if (v67 == 1) {
            goto LABEL_30;
          }
        }
        (*v70)(v63, v61);
        swift_release((uint64_t)v75);
        int64_t v46 = v64;
        uint64_t v51 = v82;
      }
      unint64_t v18 = v73;
      int64_t v5 = v74;
      *(void *)(*v74 + 16) = v64;
      v87(v18, v21, v51);
    }
    while (v85(v18, 1, v61) != 1);
  }
  uint64_t v54 = (uint64_t (*)(char *, Class *))v83;
  v83(v21, v51);
  (*(void (**)(char *, const char *))(v69 + 8))(v80, AssociatedTypeWitness);
  return v54(v18, v51);
}

Swift::Void __swiftcall ContiguousArray.reserveCapacityForAppend(newElementsCount:)(Swift::Int newElementsCount)
{
  uint64_t v2 = *v1;
  Swift::Int v3 = *(void *)(*v1 + 16);
  Swift::Int v4 = v3 + newElementsCount;
  if (__OFADD__(v3, newElementsCount))
  {
    __break(1u);
  }
  else
  {
    BOOL isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v1);
    *uint64_t v1 = v2;
    if (!isUniquelyReferenced_nonNull_native || v4 > *(void *)(v2 + 24) >> 1)
    {
      if (v3 <= v4) {
        Swift::Int v6 = v4;
      }
      else {
        Swift::Int v6 = v3;
      }
      ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v6, 1);
    }
  }
}

uint64_t ContiguousArray._customRemoveLast()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  ContiguousArray._makeMutableAndUnique()();
  uint64_t v5 = *v2;
  uint64_t v6 = *(void *)(*v2 + 16);
  if (!v6) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't removeLast from an empty ContiguousArray", 46, 2, "Swift/ContiguousArray.swift", 27, 2, 0x388uLL, 0);
  }
  uint64_t v7 = v6 - 1;
  uint64_t v8 = *(void *)(a1 + 16);
  uint64_t v11 = *(void *)(v8 - 8);
  (*(void (**)(uint64_t, unint64_t, uint64_t))(v11 + 32))(a2, v5+ ((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80))+ *(void *)(v11 + 72) * (v6 - 1), v8);
  *(void *)(v5 + 16) = v7;
  uint64_t v9 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v11 + 56);

  return v9(a2, 0, 1, v8);
}

char *ContiguousArray.remove(at:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  ContiguousArray._makeMutableAndUnique()();
  uint64_t v7 = *v3;
  uint64_t v8 = *(void *)(*v3 + 16);
  if (v8 <= a1)
  {
    unint64_t v14 = 933;
    goto LABEL_6;
  }
  if (a1 < 0)
  {
    unint64_t v14 = 934;
LABEL_6:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Index out of range", 18, 2, "Swift/ContiguousArray.swift", 27, 2, v14, 0);
  }
  uint64_t v9 = *(unint64_t **)(a2 + 16);
  uint64_t v10 = *(v9 - 1);
  uint64_t v11 = *(void *)(v10 + 72);
  uint64_t v12 = (char *)(v7
               + ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80))
               + v11 * a1);
  (*(void (**)(uint64_t, char *, unint64_t *))(v10 + 32))(a3, v12, v9);
  uint64_t result = UnsafeMutablePointer.moveInitialize(from:count:)(&v12[v11], v8 - 1 - a1, v12, v9);
  *(void *)(v7 + 16) = v8 - 1;
  return result;
}

void ContiguousArray.insert(_:at:)(uint64_t a1, Swift::Int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(a3 + 16);
  uint64_t v8 = (unint64_t *)type metadata accessor for CollectionOfOne(0, v7, a3, a4);
  MEMORY[0x1F4188790](v8);
  uint64_t v10 = (char *)&v13 - v9;
  ContiguousArray._checkIndex(_:)(a2);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32))(v10, a1, v7);
  uint64_t WitnessTable = swift_getWitnessTable(protocol conformance descriptor for CollectionOfOne<A>, v8, v11);
  ContiguousArray.replaceSubrange<A>(_:with:)(a2, a2, (uint64_t)v10, a3, (uint64_t)v8, WitnessTable);
}

Swift::Void __swiftcall ContiguousArray.removeAll(keepingCapacity:)(Swift::Bool keepingCapacity)
{
  uint64_t v4 = *v2;
  if (keepingCapacity)
  {
    uint64_t v5 = v1;
    if (swift_isUniquelyReferenced_nonNull_native(v4))
    {
      uint64_t WitnessTable = swift_getWitnessTable(protocol conformance descriptor for ContiguousArray<A>, (unint64_t *)v5, v6);
      RandomAccessCollection<>.indices.getter(v5, WitnessTable, (uint64_t)&protocol witness table for Int, (char *)v18);
      uint64_t v8 = v18[0];
      uint64_t v9 = v18[1];
      uint64_t v12 = (unint64_t *)type metadata accessor for EmptyCollection(0, *(void *)(v5 + 16), v10, v11);
      uint64_t v14 = swift_getWitnessTable(protocol conformance descriptor for EmptyCollection<A>, v12, v13);
      ContiguousArray.replaceSubrange<A>(_:with:)(v8, v9, v15, v5, (uint64_t)v12, v14);
      return;
    }
    uint64_t v16 = _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(0, *(void *)(*v2 + 24) >> 1, *(uint64_t **)(v5 + 16));
    uint64_t v17 = *v2;
    *uint64_t v2 = (uint64_t)v16;
    uint64_t v4 = v17;
  }
  else
  {
    *uint64_t v2 = (uint64_t)&_swiftEmptyArrayStorage;
  }

  swift_release(v4);
}

void *ContiguousArray.withUnsafeMutableBufferPointer<A>(_:)(void (*a1)(void *), uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v10[3] = a4;
  ContiguousArray._makeMutableAndUnique()();
  uint64_t v7 = *(void *)(*(void *)v4 + 16);
  v10[0] = *(void *)v4
         + ((*(unsigned __int8 *)(*(void *)(*(void *)(a3 + 16) - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(a3 + 16) - 8) + 80));
  uint64_t v8 = v10[0];
  v10[1] = v7;
  a1(v10);
  return $defer #1 <A><A1>() in ContiguousArray.withUnsafeMutableBufferPointer<A>(_:)(v10, v8, v7);
}

atomic_ullong *_ContiguousArrayBuffer.requestNativeBuffer()()
{
  uint64_t v0 = (atomic_ullong *)EnumeratedSequence._base.modify();

  return swift_retain(v0);
}

void protocol witness for RangeReplaceableCollection.replaceSubrange<A>(_:with:) in conformance ContiguousArray<A>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
}

uint64_t protocol witness for RangeReplaceableCollection.init(repeating:count:) in conformance ContiguousArray<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v6 = *(void *)(a3 + 16);
  uint64_t v7 = specialized Array.init(repeating:count:)(a1, a2, v6, (uint64_t (*)(uint64_t, uint64_t))static ContiguousArray._allocateUninitialized(_:));
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(a1, v6);
  *a4 = v7;
  return result;
}

uint64_t protocol witness for RangeReplaceableCollection.append<A>(contentsOf:) in conformance ContiguousArray<A>(void (*a1)(void, void, void), uint64_t a2, uint64_t a3, uint64_t a4)
{
  return ContiguousArray.append<A>(contentsOf:)(a1, a4, a2, a3);
}

void protocol witness for RangeReplaceableCollection.insert(_:at:) in conformance ContiguousArray<A>(uint64_t a1, Swift::Int *a2, uint64_t a3, uint64_t a4)
{
}

char *protocol witness for RangeReplaceableCollection.remove(at:) in conformance ContiguousArray<A>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return ContiguousArray.remove(at:)(*a1, a2, a3);
}

uint64_t protocol witness for RangeReplaceableCollection.removeAll(where:) in conformance ContiguousArray<A>(uint64_t (*a1)(char *), void (*a2)(char *, const char *), unint64_t *a3, uint64_t a4)
{
  uint64_t WitnessTable = swift_getWitnessTable(protocol conformance descriptor for ContiguousArray<A>, a3, (uint64_t)a3);
  return RangeReplaceableCollection<>.removeAll(where:)(a1, a2, (uint64_t (*)(char *))a3, WitnessTable, a4);
}

uint64_t ContiguousArray.customMirror.getter@<X0>(atomic_ullong *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  unint64_t v32 = (unint64_t)a1;
  uint64_t v7 = type metadata accessor for ContiguousArray(0, a2, a3, a4);
  v29[0] = 0;
  v29[1] = 0;
  swift_retain(a1);
  uint64_t v8 = static Mirror._superclassIterator<A>(_:_:)((uint64_t)&v32, (uint64_t)v29, (swift *)v7);
  uint64_t v10 = v9;
  uint64_t v11 = swift_allocObject(qword_1EC9F2960, 0x28uLL, 7uLL);
  void v11[2] = v7;
  uint64_t v11[3] = v7;
  uint64_t WitnessTable = swift_getWitnessTable(protocol conformance descriptor for ContiguousArray<A>, (unint64_t *)v7, v12);
  v11[4] = WitnessTable;
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for (label: String?, value: Any));
  uint64_t v16 = swift_getWitnessTable(protocol conformance descriptor for ContiguousArray<A>, (unint64_t *)v7, v15);
  uint64_t v17 = (unint64_t *)type metadata accessor for LazyMapSequence(255, (uint64_t)v7, v14, v16);
  uint64_t v31 = WitnessTable;
  uint64_t v18 = swift_getWitnessTable(protocol conformance descriptor for <> LazyMapSequence<A, B>, v17, (uint64_t)&v31);
  uint64_t v20 = (unint64_t *)type metadata accessor for _CollectionBox(0, (uint64_t)v17, v18, v19);
  uint64_t v21 = swift_allocObject(v20, 0x48uLL, 7uLL);
  v21[6] = a1;
  v21[7] = closure #1 in Mirror.init<A, B>(_:unlabeledChildren:displayStyle:ancestorRepresentation:)partial apply;
  v21[8] = v11;
  uint64_t v22 = (unint64_t *)canonical specialized generic type metadata accessor for _IndexBox<Int>();
  uint64_t v23 = swift_allocObject(v22, 0x18uLL, 7uLL);
  unint64_t v23[2] = 0;
  atomic_ullong v24 = a1[2];
  uint64_t v25 = swift_allocObject(v22, 0x18uLL, 7uLL);
  void v25[2] = v24;
  v21[2] = v23;
  v21[3] = &protocol witness table for _IndexBox<A>;
  v21[4] = v25;
  uint64_t v21[5] = &protocol witness table for _IndexBox<A>;
  unint64_t v30 = v32;
  swift_retain(a1);
  uint64_t v26 = (const char *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CustomLeafReflectable);
  uint64_t result = swift_dynamicCast((char *)v29, &v30, v7, v26, 6uLL);
  char v28 = result;
  if (result) {
    uint64_t result = __swift_destroy_boxed_opaque_existential_1Tm(v29);
  }
  *(void *)a5 = v7;
  *(void *)(a5 + 8) = v21;
  *(unsigned char *)(a5 + 16) = 5;
  *(void *)(a5 + 24) = v8;
  *(void *)(a5 + 32) = v10;
  *(unsigned char *)(a5 + 4_assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000034, 0x80000001816E2880, "Swift/Codable.swift", 19, 2, 0x11F9uLL, 0) = v28;
  return result;
}

uint64_t protocol witness for CustomReflectable.customMirror.getter in conformance ContiguousArray<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  return ContiguousArray.customMirror.getter(*v4, *(void *)(a1 + 16), a2, a3, a4);
}

uint64_t ContiguousArray.description.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 - 8);
  uint64_t v5 = MEMORY[0x1F4188790](a1);
  uint64_t v7 = (char *)&v105 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  uint64_t v9 = (char *)&v105 - v8;
  swift_bridgeObjectRelease(0xE000000000000000);
  uint64_t v10 = 91;
  unint64_t v11 = 0xE100000000000000;
  uint64_t v116 = 91;
  unint64_t v117 = 0xE100000000000000;
  uint64_t v12 = *(void *)(a1 + 16);
  if (!v12) {
    goto LABEL_49;
  }
  uint64_t v14 = *(void (**)(void, void, void))(v4 + 16);
  uint64_t v13 = v4 + 16;
  uint64_t v15 = a1 + ((*(unsigned __int8 *)(v13 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 64));
  uint64_t v112 = *(void *)(v13 + 56);
  uint64_t v113 = (void (*)(char *, uint64_t, uint64_t))v14;
  uint64_t v16 = (void (**)(char *, char *, uint64_t))(v13 + 16);
  char v17 = 1;
  long long v111 = xmmword_18162AC80;
  long long v107 = xmmword_18162AC90;
  Swift::UInt64 v106 = 131073;
  uint64_t v105 = v13;
  uint64_t v109 = v9;
  uint64_t v110 = v7;
  v14(v9, v15, a2);
  while (1)
  {
    uint64_t v23 = *v16;
    (*v16)(v7, v9, a2);
    if ((v17 & 1) == 0) {
      break;
    }
LABEL_5:
    uint64_t v20 = canonical specialized generic type metadata accessor for _ContiguousArrayStorage<Any>();
    inited = swift_initStackObject(v20, v115);
    *((_OWORD *)inited + 1) = v111;
    inited[7] = a2;
    boxed_opaque_existential_0Tm = (char *)__swift_allocate_boxed_opaque_existential_0Tm(inited + 4);
    v23(boxed_opaque_existential_0Tm, v7, a2);
    specialized _debugPrint<A>(_:separator:terminator:to:)((uint64_t)inited, 0x20uLL, 0xE100000000000000, 0, 0xE000000000000000, &v116);
    swift_bridgeObjectRelease((uint64_t)inited);
    swift_bridgeObjectRelease(0xE000000000000000);
    swift_bridgeObjectRelease(0xE100000000000000);
    char v17 = 0;
    v15 += v112;
    if (!--v12) {
      goto LABEL_48;
    }
    v113(v9, v15, a2);
  }
  uint64_t v25 = v116;
  uint64_t v24 = v117;
  unint64_t v26 = HIBYTE(v117) & 0xF;
  if ((v117 & 0x2000000000000000) != 0) {
    unint64_t v27 = HIBYTE(v117) & 0xF;
  }
  else {
    unint64_t v27 = v116 & 0xFFFFFFFFFFFFLL;
  }
  if (!v27 && (v116 & ~v117 & 0x2000000000000000) == 0)
  {
    swift_bridgeObjectRelease(v117);
    uint64_t v116 = 8236;
    unint64_t v57 = 0xE200000000000000;
LABEL_44:
    unint64_t v117 = v57;
    goto LABEL_4;
  }
  if ((v117 & 0x2000000000000000) != 0 && v26 <= 0xD)
  {
    unint64_t v28 = 8 * (HIBYTE(v117) & 7);
    uint64_t v29 = (-255 << v28) - 1;
    uint64_t v30 = 44 << v28;
    char v31 = v26 + 1;
    if (v26 >= 8)
    {
      uint64_t v32 = v30 | v29 & v117;
    }
    else
    {
      uint64_t v25 = v30 | v29 & v116;
      if (v26 != 7)
      {
        uint64_t v25 = (32 << (8 * (v31 & 7u))) | ((-255 << (8 * (v31 & 7u))) - 1) & v25;
        uint64_t v56 = v117;
        goto LABEL_41;
      }
      char v31 = 8;
      uint64_t v32 = v117;
    }
    uint64_t v56 = (32 << (8 * (v31 & 7u))) | ((-255 << (8 * (v31 & 7u))) - 1) & v32;
LABEL_41:
    swift_bridgeObjectRelease(v117);
    swift_bridgeObjectRelease(0xE200000000000000);
    unint64_t v58 = 0xE000000000000000;
    if (v25 & 0x8080808080808080 | v56 & 0x80808080808080) {
      unint64_t v58 = 0xA000000000000000;
    }
    unint64_t v57 = (v58 & 0xFF00000000000000 | (v26 << 56) | v56 & 0xFFFFFFFFFFFFFFLL) + 0x200000000000000;
    uint64_t v116 = v25;
    goto LABEL_44;
  }
  swift_bridgeObjectRetain_n(0xE200000000000000, 6);
  if ((v24 & 0x1000000000000000) == 0)
  {
    BOOL v33 = __OFADD__(v27, 2);
    int64_t v34 = v27 + 2;
    if (v33) {
      goto LABEL_47;
    }
LABEL_20:
    if ((v25 & ~v24 & 0x2000000000000000) != 0
      && swift_isUniquelyReferenced_nonNull_native(v24 & 0xFFFFFFFFFFFFFFFLL))
    {
      int64_t v35 = _StringGuts.nativeUnusedCapacity.getter(v25, v24);
      if (v36) {
        goto LABEL_120;
      }
      BOOL v38 = (v24 & 0x2000000000000000) == 0 && v35 > 1;
      if (v34 > 15 || v38) {
        goto LABEL_3;
      }
    }
    else if (v34 > 15)
    {
LABEL_3:
      _StringGuts.prepareForAppendInPlace(totalCount:otherUTF8Count:)(v34, 2);
      swift_bridgeObjectRelease_n(0xE200000000000000, 6);
      long long v114 = v107;
      uint64_t v18 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, 2, (uint64_t)&v114, 2);
      _StringGuts.appendInPlace(_:isASCII:)(v18, v19, 1);
      swift_bridgeObjectRelease(0xE200000000000000);
LABEL_4:
      uint64_t v9 = v109;
      uint64_t v7 = v110;
      goto LABEL_5;
    }
    swift_bridgeObjectRelease_n(0xE200000000000000, 5);
    swift_bridgeObjectRetain(v24);
    unint64_t v108 = _StringGuts._convertedToSmall()(v25, v24);
    unint64_t v40 = v39;
    swift_bridgeObjectRelease(v24);
    v41._Swift::UInt64 rawBits = 1;
    v42._Swift::UInt64 rawBits = v106;
    v43._Swift::UInt64 rawBits = _StringGuts.validateScalarRange(_:)(v41, v42, 0x202CuLL, 0xE200000000000000);
    if (v43._rawBits < 0x10000) {
      v43._rawBits |= 3;
    }
    unint64_t v45 = specialized String.init(_:)(v43, v44, 0x202CuLL, 0xE200000000000000);
    unint64_t v47 = v46;
    swift_bridgeObjectRelease(0xE200000000000000);
    unint64_t v48 = _StringGuts._convertedToSmall()(v45, v47);
    unint64_t v50 = v49;
    swift_bridgeObjectRelease(v47);
    unint64_t v51 = specialized _SmallString.init(_:appending:)(v108, v40, v48, v50);
    if (v53) {
      goto LABEL_119;
    }
    uint64_t v54 = v51;
    unint64_t v55 = v52;
    swift_bridgeObjectRelease(v24);
    swift_bridgeObjectRelease(0xE200000000000000);
    uint64_t v116 = v54;
    unint64_t v117 = v55;
    goto LABEL_4;
  }
  Swift::Int v59 = String.UTF8View._foreignCount()();
  int64_t v34 = v59 + 2;
  if (!__OFADD__(v59, 2)) {
    goto LABEL_20;
  }
LABEL_47:
  __break(1u);
LABEL_48:
  uint64_t v10 = v116;
  unint64_t v11 = v117;
LABEL_49:
  unint64_t v60 = HIBYTE(v11) & 0xF;
  unint64_t v61 = v10 & 0xFFFFFFFFFFFFLL;
  if ((v11 & 0x2000000000000000) != 0) {
    uint64_t v62 = HIBYTE(v11) & 0xF;
  }
  else {
    uint64_t v62 = v10 & 0xFFFFFFFFFFFFLL;
  }
  if (!v62 && (v10 & ~v11 & 0x2000000000000000) == 0)
  {
    swift_bridgeObjectRelease(v11);
    return 93;
  }
  if ((v11 & 0x2000000000000000) != 0 && v60 != 15)
  {
    if (v60 < 8) {
      uint64_t v10 = (93 << (8 * (HIBYTE(v11) & 7u))) | ((-255 << (8 * (HIBYTE(v11) & 7u))) - 1) & v10;
    }
    goto LABEL_58;
  }
  swift_bridgeObjectRetain_n(0xE100000000000000, 6);
  if ((v11 & 0x1000000000000000) != 0)
  {
    Swift::Int v96 = String.UTF8View._foreignCount()();
    uint64_t v63 = v96 + 1;
    if (!__OFADD__(v96, 1)) {
      goto LABEL_61;
    }
    goto LABEL_109;
  }
  BOOL v33 = __OFADD__(v62, 1);
  uint64_t v63 = v62 + 1;
  if (v33)
  {
LABEL_109:
    __break(1u);
    goto LABEL_110;
  }
LABEL_61:
  unint64_t v64 = v10 & ~v11;
  if ((v64 & 0x2000000000000000) == 0 || !swift_isUniquelyReferenced_nonNull_native(v11 & 0xFFFFFFFFFFFFFFFLL))
  {
    if (v63 <= 15) {
      goto LABEL_78;
    }
LABEL_67:
    int64_t v67 = _StringGuts.nativeUnusedCapacity.getter(v10, v11);
    BOOL v70 = (v68 & 1) == 0 && v67 > 0;
    if ((v64 & 0x2000000000000000) != 0 && swift_isUniquelyReferenced_nonNull_native(v11 & 0xFFFFFFFFFFFFFFFLL))
    {
      if (v70) {
        goto LABEL_103;
      }
    }
    else if (v70)
    {
LABEL_102:
      _StringGuts.grow(_:)(v63);
LABEL_103:
      swift_bridgeObjectRelease_n(0xE100000000000000, 6);
      long long v114 = xmmword_18162ACA0;
      uint64_t v93 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, 1, (uint64_t)&v114, 1);
      _StringGuts.appendInPlace(_:isASCII:)(v93, v94, 1);
      swift_bridgeObjectRelease(0xE100000000000000);
      return v116;
    }
    uint64_t v89 = _StringGuts.nativeCapacity.getter(v10, v11);
    if (v90) {
      uint64_t v91 = 0;
    }
    else {
      uint64_t v91 = v89;
    }
    if (v91 + 0x4000000000000000 < 0)
    {
      __break(1u);
      goto LABEL_119;
    }
    uint64_t v92 = 2 * v91;
    if (v92 > v63) {
      uint64_t v63 = v92;
    }
    goto LABEL_102;
  }
  int64_t v65 = _StringGuts.nativeUnusedCapacity.getter(v10, v11);
  if (v66)
  {
LABEL_120:
    unint64_t v100 = 258;
LABEL_121:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/StringGutsRangeReplaceable.swift", 38, 2, v100, 0);
  }
  if (v63 > 15) {
    goto LABEL_67;
  }
  if ((v11 & 0x2000000000000000) != 0)
  {
    swift_bridgeObjectRelease_n(0xE100000000000000, 5);
    goto LABEL_79;
  }
  if (v65 > 0) {
    goto LABEL_67;
  }
LABEL_78:
  swift_bridgeObjectRelease_n(0xE100000000000000, 5);
  if ((v11 & 0x2000000000000000) != 0)
  {
LABEL_79:
    unint64_t v61 = v11;
  }
  else if ((v11 & 0x1000000000000000) != 0)
  {
    uint64_t v10 = _StringGuts._foreignConvertedToSmall()(v10, v11);
    unint64_t v61 = v103;
  }
  else
  {
    if ((v10 & 0x1000000000000000) != 0)
    {
      uint64_t v99 = (unsigned __int8 *)((v11 & 0xFFFFFFFFFFFFFFFLL) + 32);
    }
    else
    {
      uint64_t v99 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v10, v11);
      unint64_t v61 = v104;
    }
    swift_bridgeObjectRetain(v11);
    closure #1 in _StringGuts._convertedToSmall()(v99, v61, &v114);
    swift_bridgeObjectRelease(v11);
    unint64_t v61 = *((void *)&v114 + 1);
    uint64_t v10 = v114;
  }
  v71._Swift::UInt64 rawBits = 1;
  v72._Swift::UInt64 rawBits = 65537;
  v73._Swift::UInt64 rawBits = _StringGuts.validateScalarRange(_:)(v71, v72, 0x5DuLL, 0xE100000000000000);
  if (v73._rawBits < 0x10000) {
    v73._rawBits |= 3;
  }
  unint64_t v60 = specialized String.init(_:)(v73, v74, 0x5DuLL, 0xE100000000000000);
  uint64_t v63 = v75;
  swift_bridgeObjectRelease(0xE100000000000000);
  if ((v63 & 0x2000000000000000) != 0)
  {
    swift_bridgeObjectRelease(v63);
    goto LABEL_84;
  }
LABEL_110:
  if ((v63 & 0x1000000000000000) != 0)
  {
    unint64_t v60 = _StringGuts._foreignConvertedToSmall()(v60, v63);
    uint64_t v102 = v101;
    swift_bridgeObjectRelease(v63);
    uint64_t v63 = v102;
  }
  else
  {
    if ((v60 & 0x1000000000000000) != 0)
    {
      uint64_t v97 = (unsigned __int8 *)((v63 & 0xFFFFFFFFFFFFFFFLL) + 32);
      uint64_t v98 = v60 & 0xFFFFFFFFFFFFLL;
    }
    else
    {
      uint64_t v97 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v60, v63);
    }
    closure #1 in _StringGuts._convertedToSmall()(v97, v98, &v114);
    swift_bridgeObjectRelease(v63);
    uint64_t v63 = *((void *)&v114 + 1);
    unint64_t v60 = v114;
  }
LABEL_84:
  uint64_t v76 = HIBYTE(v61) & 0xF;
  uint64_t v77 = HIBYTE(v63) & 0xF;
  if ((unint64_t)(v77 + v76) > 0xF)
  {
LABEL_119:
    unint64_t v100 = 266;
    goto LABEL_121;
  }
  if (v77)
  {
    char v78 = 0;
    unint64_t v79 = 0;
    do
    {
      unint64_t v80 = v76 + v79;
      unint64_t v81 = v79 + 1;
      if (v79 >= 8) {
        unint64_t v82 = v63;
      }
      else {
        unint64_t v82 = v60;
      }
      unint64_t v83 = v82 >> (v78 & 0x38);
      char v84 = (8 * v76 + v78) & 0x38;
      uint64_t v85 = (-255 << v84) - 1;
      unint64_t v86 = (unint64_t)v83 << v84;
      unint64_t v87 = v86 | v85 & v61;
      unint64_t v88 = v86 | v85 & v10;
      if (v80 < 8) {
        uint64_t v10 = v88;
      }
      else {
        unint64_t v61 = v87;
      }
      v78 += 8;
      unint64_t v79 = v81;
    }
    while (v77 != v81);
  }
LABEL_58:
  swift_bridgeObjectRelease(v11);
  swift_bridgeObjectRelease(0xE100000000000000);
  return v10;
}

uint64_t ContiguousArray.debugDescription.getter(unint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  unint64_t v3 = a1;
  uint64_t v4 = *(void *)(a2 - 8);
  uint64_t v5 = MEMORY[0x1F4188790](a1);
  uint64_t v195 = (char *)&v190 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  uint64_t v199 = (char *)&v190 - v7;
  Swift::String v8 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("ContiguousArray", 0xFuLL, 1);
  uint64_t countAndFlagsBits = v8._countAndFlagsBits;
  unint64_t object = v8._object;
  unint64_t v204 = 0;
  unint64_t v205 = 0xE000000000000000;
  uint64_t v11 = specialized static String._createEmpty(withInitialCapacity:)(4);
  unint64_t v13 = v11;
  unint64_t v14 = v12;
  *(void *)&long long v203 = v11;
  *((void *)&v203 + 1) = v12;
  uint64_t v15 = HIBYTE(v12) & 0xF;
  int64_t v16 = v11 & 0xFFFFFFFFFFFFLL;
  if ((v12 & 0x2000000000000000) != 0) {
    uint64_t v17 = HIBYTE(v12) & 0xF;
  }
  else {
    uint64_t v17 = v11 & 0xFFFFFFFFFFFFLL;
  }
  unint64_t v197 = v3;
  if (!v17 && (v11 & ~v12 & 0x2000000000000000) == 0)
  {
    swift_bridgeObjectRelease(v12);
    unint64_t v13 = 0;
    unint64_t v37 = 0xE000000000000000;
    *(void *)&long long v203 = 0;
LABEL_21:
    *((void *)&v203 + 1) = v37;
    goto LABEL_25;
  }
  if ((v12 & 0x2000000000000000) != 0)
  {
    swift_bridgeObjectRelease(v12);
    swift_bridgeObjectRelease(0xE000000000000000);
    unint64_t v38 = 0xA000000000000000;
    if (!(v14 & 0x80808080808080 | v13 & 0x8080808080808080)) {
      unint64_t v38 = 0xE000000000000000;
    }
    unint64_t v37 = v38 & 0xFF00000000000000 | (v15 << 56) | v14 & 0xFFFFFFFFFFFFFFLL;
    *(void *)&long long v203 = v13;
    goto LABEL_21;
  }
  swift_bridgeObjectRetain_n(0xE000000000000000, 6);
  if ((v14 & 0x1000000000000000) != 0)
  {
    int64_t v16 = String.UTF8View._foreignCount()();
    if ((v13 & ~v14 & 0x2000000000000000) == 0) {
      goto LABEL_23;
    }
  }
  else if ((v13 & ~v14 & 0x2000000000000000) == 0)
  {
    goto LABEL_23;
  }
  if (swift_isUniquelyReferenced_nonNull_native(v14 & 0xFFFFFFFFFFFFFFFLL))
  {
    unint64_t v18 = _StringGuts.nativeUnusedCapacity.getter(v13, v14);
    if (v19) {
      goto LABEL_198;
    }
    if (v16 <= 15 && (v18 & 0x8000000000000000) != 0) {
      goto LABEL_13;
    }
LABEL_24:
    _StringGuts.prepareForAppendInPlace(totalCount:otherUTF8Count:)(v16, 0);
    swift_bridgeObjectRelease_n(0xE000000000000000, 6);
    unint64_t v200 = 0;
    uint64_t v201 = 0;
    unint64_t v39 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, 0, (uint64_t)&v200, 0);
    _StringGuts.appendInPlace(_:isASCII:)(v39, v40, 1);
    swift_bridgeObjectRelease(0xE000000000000000);
    unint64_t v37 = *((void *)&v203 + 1);
    unint64_t v13 = v203;
    goto LABEL_25;
  }
LABEL_23:
  if (v16 > 15) {
    goto LABEL_24;
  }
LABEL_13:
  uint64_t v20 = v4;
  swift_bridgeObjectRelease_n(0xE000000000000000, 5);
  swift_bridgeObjectRetain(v14);
  unint64_t v21 = _StringGuts._convertedToSmall()(v13, v14);
  unint64_t v23 = v22;
  swift_bridgeObjectRelease(v14);
  v24._Swift::UInt64 rawBits = 1;
  v25._Swift::UInt64 rawBits = 1;
  v26._Swift::UInt64 rawBits = _StringGuts.validateScalarRange(_:)(v24, v25, 0, 0xE000000000000000);
  if (v26._rawBits < 0x10000) {
    v26._rawBits |= 3;
  }
  unint64_t v28 = specialized String.init(_:)(v26, v27, 0, 0xE000000000000000);
  unint64_t v30 = v29;
  swift_bridgeObjectRelease(0xE000000000000000);
  unint64_t v31 = _StringGuts._convertedToSmall()(v28, v30);
  unint64_t v33 = v32;
  swift_bridgeObjectRelease(v30);
  unint64_t v34 = specialized _SmallString.init(_:appending:)(v21, v23, v31, v33);
  if (v36) {
    goto LABEL_197;
  }
  unint64_t v13 = v34;
  unint64_t v37 = v35;
  swift_bridgeObjectRelease(v14);
  swift_bridgeObjectRelease(0xE000000000000000);
  *(void *)&long long v203 = v13;
  *((void *)&v203 + 1) = v37;
  uint64_t v4 = v20;
  uint64_t countAndFlagsBits = v8._countAndFlagsBits;
  unint64_t v3 = v197;
LABEL_25:
  uint64_t v41 = HIBYTE(v37) & 0xF;
  if ((v37 & 0x2000000000000000) != 0) {
    uint64_t v42 = HIBYTE(v37) & 0xF;
  }
  else {
    uint64_t v42 = v13 & 0xFFFFFFFFFFFFLL;
  }
  unint64_t v191 = v8._object;
  uint64_t v193 = v2;
  if (!v42 && (v13 & ~v37 & 0x2000000000000000) == 0)
  {
    swift_bridgeObjectRetain((unint64_t)v8._object);
    swift_bridgeObjectRelease(v37);
    *(void *)&long long v203 = countAndFlagsBits;
    *((void *)&v203 + 1) = v8._object;
    goto LABEL_58;
  }
  uint64_t v194 = v4;
  uint64_t v43 = (uint64_t)v8._object & 0x2000000000000000;
  unint64_t v44 = ((unint64_t)v8._object >> 56) & 0xF;
  if ((v37 & 0x2000000000000000) != 0 && v43)
  {
    unint64_t v45 = v41 + v44;
    if (v41 + v44 <= 0xF)
    {
      if (v44)
      {
        char v84 = 0;
        unint64_t v85 = 0;
        unint64_t v86 = v37;
        do
        {
          unint64_t v87 = v41 + v85;
          unint64_t v88 = v85 + 1;
          if (v85 >= 8) {
            unint64_t v89 = (unint64_t)v8._object;
          }
          else {
            unint64_t v89 = countAndFlagsBits;
          }
          unint64_t v90 = v89 >> (v84 & 0x38);
          char v91 = (8 * v41 + v84) & 0x38;
          uint64_t v92 = (-255 << v91) - 1;
          unint64_t v93 = (unint64_t)v90 << v91;
          unint64_t v94 = v93 | v92 & v86;
          unint64_t v95 = v93 | v92 & v13;
          if (v87 < 8) {
            unint64_t v13 = v95;
          }
          else {
            unint64_t v86 = v94;
          }
          v84 += 8;
          unint64_t v85 = v88;
        }
        while (v44 != v88);
      }
      else
      {
        unint64_t v86 = v37;
      }
      swift_bridgeObjectRelease(v37);
      unint64_t v182 = 0xA000000000000000;
      if (!(v13 & 0x8080808080808080 | v86 & 0x80808080808080)) {
        unint64_t v182 = 0xE000000000000000;
      }
      *(void *)&long long v203 = v13;
      *((void *)&v203 + 1) = v182 & 0xFF00000000000000 | (v45 << 56) | v86 & 0xFFFFFFFFFFFFFFLL;
      uint64_t v4 = v194;
      goto LABEL_58;
    }
    uint64_t v43 = 1;
  }
  unint64_t v3 = countAndFlagsBits;
  uint64_t v46 = countAndFlagsBits & 0xFFFFFFFFFFFFLL;
  if (v43) {
    uint64_t v47 = ((unint64_t)v8._object >> 56) & 0xF;
  }
  else {
    uint64_t v47 = countAndFlagsBits & 0xFFFFFFFFFFFFLL;
  }
  swift_bridgeObjectRetain_n((uint64_t)v8._object, 2);
  if (((uint64_t)v8._object & 0x1000000000000000) != 0)
  {
    swift_bridgeObjectRetain_n((uint64_t)v8._object, 5);
    v183._Swift::UInt64 rawBits = 1;
    v184._Swift::UInt64 rawBits = (v47 << 16) | 1;
    v185._Swift::UInt64 rawBits = _StringGuts.validateScalarRange(_:)(v183, v184, v3, (unint64_t)v8._object);
    if (v185._rawBits < 0x10000) {
      v185._rawBits |= 3;
    }
    Swift::Int v48 = specialized Collection.count.getter(v185, v186, v3, (unint64_t)v8._object);
    swift_bridgeObjectRelease((uint64_t)v8._object);
    if ((v37 & 0x1000000000000000) == 0)
    {
LABEL_39:
      BOOL v49 = __OFADD__(v42, v48);
      int64_t v50 = v42 + v48;
      if (!v49) {
        goto LABEL_40;
      }
LABEL_192:
      __break(1u);
      goto LABEL_193;
    }
  }
  else
  {
    swift_bridgeObjectRetain_n((uint64_t)v8._object, 4);
    Swift::Int v48 = v47;
    if ((v37 & 0x1000000000000000) == 0) {
      goto LABEL_39;
    }
  }
  Swift::Int v187 = String.UTF8View._foreignCount()();
  int64_t v50 = v187 + v48;
  if (__OFADD__(v187, v48)) {
    goto LABEL_192;
  }
LABEL_40:
  if ((v13 & ~v37 & 0x2000000000000000) != 0 && swift_isUniquelyReferenced_nonNull_native(v37 & 0xFFFFFFFFFFFFFFFLL))
  {
    unint64_t v51 = *((void *)&v203 + 1);
    int64_t v52 = _StringGuts.nativeUnusedCapacity.getter(v203, *((uint64_t *)&v203 + 1));
    if (v53) {
      goto LABEL_198;
    }
    if (v50 <= 15 && ((v51 & 0x2000000000000000) != 0 || v52 < v48))
    {
LABEL_52:
      swift_bridgeObjectRelease_n((uint64_t)v8._object, 5);
      unint64_t v56 = v203;
      swift_bridgeObjectRetain(v51);
      unint64_t v57 = _StringGuts._convertedToSmall()(v56, v51);
      unint64_t v59 = v58;
      swift_bridgeObjectRelease(v51);
      v60._Swift::UInt64 rawBits = (v47 << 16) | 1;
      v61._Swift::UInt64 rawBits = 1;
      v62._Swift::UInt64 rawBits = _StringGuts.validateScalarRange(_:)(v61, v60, v3, (unint64_t)v8._object);
      if (v62._rawBits < 0x10000) {
        v62._rawBits |= 3;
      }
      unint64_t v64 = specialized String.init(_:)(v62, v63, v3, (unint64_t)v8._object);
      unint64_t v66 = v65;
      swift_bridgeObjectRelease((uint64_t)v8._object);
      unint64_t v67 = _StringGuts._convertedToSmall()(v64, v66);
      unint64_t v69 = v68;
      swift_bridgeObjectRelease(v66);
      unint64_t v70 = specialized _SmallString.init(_:appending:)(v57, v59, v67, v69);
      uint64_t v2 = v193;
      if ((v72 & 1) == 0)
      {
        unint64_t v73 = v70;
        uint64_t v74 = v71;
        swift_bridgeObjectRelease(v51);
        *(void *)&long long v203 = v73;
        *((void *)&v203 + 1) = v74;
        goto LABEL_57;
      }
LABEL_197:
      unint64_t v189 = 266;
      goto LABEL_199;
    }
  }
  else if (v50 <= 15)
  {
    unint64_t v51 = *((void *)&v203 + 1);
    goto LABEL_52;
  }
  _StringGuts.prepareForAppendInPlace(totalCount:otherUTF8Count:)(v50, v48);
  swift_bridgeObjectRelease_n((uint64_t)v8._object, 4);
  if (((uint64_t)v8._object & 0x1000000000000000) != 0)
  {
    swift_bridgeObjectRelease((uint64_t)v8._object);
    _StringGuts._foreignAppendInPlace(_:)(v3, (unint64_t)v8._object, 0, v47);
    swift_bridgeObjectRelease((uint64_t)v8._object);
    uint64_t v2 = v193;
    goto LABEL_57;
  }
  uint64_t v2 = v193;
  if (v43)
  {
    swift_bridgeObjectRelease_n((uint64_t)v8._object, 2);
    unint64_t v200 = v3;
    uint64_t v201 = (uint64_t)v8._object & 0xFFFFFFFFFFFFFFLL;
    uint64_t v54 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, ((unint64_t)v8._object >> 56) & 0xF, (uint64_t)&v200, ((unint64_t)v8._object >> 56) & 0xF);
    _StringGuts.appendInPlace(_:isASCII:)(v54, v55, ((uint64_t)v8._object & 0x4000000000000000) != 0);
LABEL_57:
    uint64_t v4 = v194;
    unint64_t v3 = v197;
    goto LABEL_58;
  }
  uint64_t v43 = v3;
  if ((v3 & 0x1000000000000000) == 0) {
    goto LABEL_195;
  }
  swift_bridgeObjectRelease((uint64_t)v8._object);
  id v178 = (id)(((uint64_t)v8._object & 0xFFFFFFFFFFFFFFFLL) + 32);
  uint64_t v179 = v46;
  uint64_t v4 = v194;
  unint64_t v3 = v197;
  while (2)
  {
    uint64_t v180 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, v46, (uint64_t)v178, v179);
    _StringGuts.appendInPlace(_:isASCII:)(v180, v181, v43 < 0);
    swift_bridgeObjectRelease((uint64_t)object);
LABEL_58:
    uint64_t v75 = v203;
    unint64_t v76 = HIBYTE(*((void *)&v203 + 1)) & 0xFLL;
    uint64_t v77 = v203 & 0xFFFFFFFFFFFFLL;
    if ((*((void *)&v203 + 1) & 0x2000000000000000) != 0) {
      uint64_t v77 = HIBYTE(*((void *)&v203 + 1)) & 0xFLL;
    }
    if (!v77 && ((unint64_t)v203 & ~*((void *)&v203 + 1) & 0x2000000000000000) == 0)
    {
      swift_bridgeObjectRelease(*((uint64_t *)&v203 + 1));
      uint64_t v46 = 0xE200000000000000;
      uint64_t v75 = 23336;
      goto LABEL_86;
    }
    if ((*((void *)&v203 + 1) & 0x2000000000000000) == 0 || v76 > 0xD)
    {
      _StringGuts.append(_:)(23336, 0xE200000000000000, 0, 2);
      swift_bridgeObjectRelease(0xE200000000000000);
      uint64_t v46 = *((void *)&v203 + 1);
      uint64_t v75 = v203;
      goto LABEL_86;
    }
    uint64_t v78 = 8 * (HIBYTE(*((void *)&v203 + 1)) & 7);
    uint64_t v79 = (-255 << v78) - 1;
    uint64_t v80 = 40 << v78;
    char v81 = v76 + 1;
    if (v76 >= 8)
    {
      uint64_t v82 = v80 | v79 & *((void *)&v203 + 1);
    }
    else
    {
      uint64_t v75 = v80 | v79 & v203;
      if (v76 != 7)
      {
        uint64_t v75 = (91 << (8 * (v81 & 7u))) | ((-255 << (8 * (v81 & 7u))) - 1) & v75;
        uint64_t v83 = *((void *)&v203 + 1);
        goto LABEL_83;
      }
      char v81 = 8;
      uint64_t v82 = *((void *)&v203 + 1);
    }
    uint64_t v83 = (91 << (8 * (v81 & 7u))) | ((-255 << (8 * (v81 & 7u))) - 1) & v82;
LABEL_83:
    swift_bridgeObjectRelease(*((uint64_t *)&v203 + 1));
    swift_bridgeObjectRelease(0xE200000000000000);
    unint64_t v96 = 0xA000000000000000;
    if (!(v75 & 0x8080808080808080 | v83 & 0x80808080808080)) {
      unint64_t v96 = 0xE000000000000000;
    }
    uint64_t v46 = (v96 & 0xFF00000000000000 | (v76 << 56) | v83 & 0xFFFFFFFFFFFFFFLL) + 0x200000000000000;
    *(void *)&long long v203 = v75;
LABEL_86:
    uint64_t v97 = v205;
    unint64_t v98 = HIBYTE(v205) & 0xF;
    if ((v205 & 0x2000000000000000) == 0) {
      unint64_t v98 = v204 & 0xFFFFFFFFFFFFLL;
    }
    if (!v98 && (v204 & ~v205 & 0x2000000000000000) == 0)
    {
      swift_bridgeObjectRelease(v205);
      unint64_t v204 = v75;
      unint64_t v205 = v46;
      goto LABEL_99;
    }
    if ((v205 & 0x2000000000000000) == 0)
    {
      if ((v46 & 0x2000000000000000) != 0) {
        goto LABEL_97;
      }
LABEL_94:
      uint64_t v99 = v75 & 0xFFFFFFFFFFFFLL;
LABEL_98:
      swift_bridgeObjectRetain(v46);
      _StringGuts.append(_:)(v75, v46, 0, v99);
      swift_bridgeObjectRelease_n(v46, 2);
      goto LABEL_99;
    }
    if ((v46 & 0x2000000000000000) == 0) {
      goto LABEL_94;
    }
    unint64_t v100 = specialized _SmallString.init(_:appending:)(v204, v205, v75, v46);
    if (v102)
    {
LABEL_97:
      uint64_t v99 = HIBYTE(v46) & 0xF;
      goto LABEL_98;
    }
    unint64_t v103 = v100;
    unint64_t v104 = v101;
    swift_bridgeObjectRelease(v97);
    swift_bridgeObjectRelease(v46);
    unint64_t v204 = v103;
    unint64_t v205 = v104;
LABEL_99:
    uint64_t v105 = *(void *)(v3 + 16);
    Swift::UInt64 v106 = v195;
    if (!v105) {
      goto LABEL_145;
    }
    unint64_t v108 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
    uint64_t v107 = v4 + 16;
    uint64_t v46 = v3 + ((*(unsigned __int8 *)(v107 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v107 + 64));
    unint64_t v197 = *(void *)(v107 + 56);
    uint64_t v198 = v108;
    unint64_t v3 = v107 + 16;
    char v109 = 1;
    long long v196 = xmmword_18162AC80;
    long long v192 = xmmword_18162AC90;
    uint64_t v194 = v107;
    while (1)
    {
      uint64_t v115 = v199;
      v198(v199, v46, v2);
      uint64_t v116 = *(void (**)(void *, char *, uint64_t))v3;
      (*(void (**)(char *, char *, uint64_t))v3)(v106, v115, v2);
      if (v109) {
        goto LABEL_103;
      }
      uint64_t v118 = v204;
      unint64_t v117 = v205;
      unint64_t v119 = HIBYTE(v205) & 0xF;
      if ((v205 & 0x2000000000000000) != 0) {
        unint64_t v120 = HIBYTE(v205) & 0xF;
      }
      else {
        unint64_t v120 = v204 & 0xFFFFFFFFFFFFLL;
      }
      if (!v120 && (v204 & ~v205 & 0x2000000000000000) == 0)
      {
        swift_bridgeObjectRelease(v205);
        unint64_t v204 = 8236;
        unint64_t v150 = 0xE200000000000000;
        goto LABEL_141;
      }
      if ((v205 & 0x2000000000000000) != 0 && v119 <= 0xD)
      {
        unint64_t v121 = 8 * (HIBYTE(v205) & 7);
        uint64_t v122 = (-255 << v121) - 1;
        uint64_t v123 = 44 << v121;
        char v124 = v119 + 1;
        if (v119 >= 8)
        {
          uint64_t v125 = v123 | v122 & v205;
LABEL_135:
          uint64_t v149 = (32 << (8 * (v124 & 7u))) | ((-255 << (8 * (v124 & 7u))) - 1) & v125;
        }
        else
        {
          uint64_t v118 = v123 | v122 & v204;
          if (v119 == 7)
          {
            char v124 = 8;
            uint64_t v125 = v205;
            goto LABEL_135;
          }
          uint64_t v118 = (32 << (8 * (v124 & 7u))) | ((-255 << (8 * (v124 & 7u))) - 1) & v118;
          uint64_t v149 = v205;
        }
        swift_bridgeObjectRelease(v205);
        swift_bridgeObjectRelease(0xE200000000000000);
        unint64_t v151 = 0xE000000000000000;
        if (v118 & 0x8080808080808080 | v149 & 0x80808080808080) {
          unint64_t v151 = 0xA000000000000000;
        }
        unint64_t v150 = (v151 & 0xFF00000000000000 | (v119 << 56) | v149 & 0xFFFFFFFFFFFFFFLL) + 0x200000000000000;
        unint64_t v204 = v118;
LABEL_141:
        unint64_t v205 = v150;
        goto LABEL_102;
      }
      swift_bridgeObjectRetain_n(0xE200000000000000, 6);
      if ((v117 & 0x1000000000000000) == 0)
      {
        BOOL v49 = __OFADD__(v120, 2);
        int64_t v126 = v120 + 2;
        if (v49) {
          break;
        }
        goto LABEL_117;
      }
      Swift::Int v152 = String.UTF8View._foreignCount()();
      int64_t v126 = v152 + 2;
      if (__OFADD__(v152, 2)) {
        break;
      }
LABEL_117:
      if ((v118 & ~v117 & 0x2000000000000000) != 0
        && swift_isUniquelyReferenced_nonNull_native(v117 & 0xFFFFFFFFFFFFFFFLL))
      {
        int64_t v127 = _StringGuts.nativeUnusedCapacity.getter(v118, v117);
        if (v128) {
          goto LABEL_198;
        }
        BOOL v130 = (v117 & 0x2000000000000000) == 0 && v127 > 1;
        if (v126 <= 15 && !v130)
        {
LABEL_130:
          swift_bridgeObjectRelease_n(0xE200000000000000, 5);
          swift_bridgeObjectRetain(v117);
          unint64_t v131 = _StringGuts._convertedToSmall()(v118, v117);
          unint64_t v133 = v132;
          swift_bridgeObjectRelease(v117);
          v134._Swift::UInt64 rawBits = 1;
          v135._Swift::UInt64 rawBits = 131073;
          v136._Swift::UInt64 rawBits = _StringGuts.validateScalarRange(_:)(v134, v135, 0x202CuLL, 0xE200000000000000);
          if (v136._rawBits < 0x10000) {
            v136._rawBits |= 3;
          }
          unint64_t v138 = specialized String.init(_:)(v136, v137, 0x202CuLL, 0xE200000000000000);
          unint64_t v140 = v139;
          swift_bridgeObjectRelease(0xE200000000000000);
          unint64_t v141 = _StringGuts._convertedToSmall()(v138, v140);
          unint64_t v143 = v142;
          swift_bridgeObjectRelease(v140);
          unint64_t v144 = specialized _SmallString.init(_:appending:)(v131, v133, v141, v143);
          if (v146) {
            goto LABEL_197;
          }
          unint64_t v147 = v144;
          unint64_t v148 = v145;
          swift_bridgeObjectRelease(v117);
          swift_bridgeObjectRelease(0xE200000000000000);
          unint64_t v204 = v147;
          unint64_t v205 = v148;
          uint64_t v2 = v193;
          goto LABEL_102;
        }
      }
      else if (v126 <= 15)
      {
        goto LABEL_130;
      }
      _StringGuts.prepareForAppendInPlace(totalCount:otherUTF8Count:)(v126, 2);
      swift_bridgeObjectRelease_n(0xE200000000000000, 6);
      long long v203 = v192;
      uint64_t v110 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, 2, (uint64_t)&v203, 2);
      _StringGuts.appendInPlace(_:isASCII:)(v110, v111, 1);
      swift_bridgeObjectRelease(0xE200000000000000);
LABEL_102:
      Swift::UInt64 v106 = v195;
LABEL_103:
      uint64_t v112 = canonical specialized generic type metadata accessor for _ContiguousArrayStorage<Any>();
      inited = swift_initStackObject(v112, v202);
      *((_OWORD *)inited + 1) = v196;
      inited[7] = v2;
      boxed_opaque_existential_0Tm = __swift_allocate_boxed_opaque_existential_0Tm(inited + 4);
      v116(boxed_opaque_existential_0Tm, v106, v2);
      specialized _debugPrint<A>(_:separator:terminator:to:)((uint64_t)inited, 0x20uLL, 0xE100000000000000, 0, 0xE000000000000000, (uint64_t *)&v204);
      swift_bridgeObjectRelease((uint64_t)inited);
      swift_bridgeObjectRelease(0xE000000000000000);
      swift_bridgeObjectRelease(0xE100000000000000);
      char v109 = 0;
      v46 += v197;
      if (!--v105) {
        goto LABEL_145;
      }
    }
    __break(1u);
LABEL_145:
    uint64_t v43 = v204;
    unint64_t v13 = v205;
    unint64_t v153 = HIBYTE(v205) & 0xF;
    if ((v205 & 0x2000000000000000) != 0) {
      unint64_t v154 = HIBYTE(v205) & 0xF;
    }
    else {
      unint64_t v154 = v204 & 0xFFFFFFFFFFFFLL;
    }
    if (!v154 && (v204 & ~v205 & 0x2000000000000000) == 0)
    {
      swift_bridgeObjectRelease(v205);
      swift_bridgeObjectRelease((uint64_t)v191);
      return 10589;
    }
    if ((v205 & 0x2000000000000000) == 0 || v153 > 0xD)
    {
      swift_bridgeObjectRetain_n(0xE200000000000000, 6);
      if ((v13 & 0x1000000000000000) != 0) {
LABEL_193:
      }
        unint64_t v154 = String.UTF8View._foreignCount()();
      BOOL v49 = __OFADD__(v154, 2);
      int64_t v155 = v154 + 2;
      unint64_t object = v191;
      if (v49)
      {
        __break(1u);
LABEL_195:
        id v178 = _StringObject.sharedUTF8.getter(v43, (uint64_t)object);
        uint64_t v179 = v188;
        swift_bridgeObjectRelease((uint64_t)object);
        if (v179 < v46) {
          _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x745uLL, 0);
        }
        unint64_t object = v191;
        uint64_t v2 = v193;
        uint64_t v4 = v194;
        uint64_t v43 = v3;
        unint64_t v3 = v197;
        continue;
      }
      if ((v43 & ~v13 & 0x2000000000000000) == 0
        || !swift_isUniquelyReferenced_nonNull_native(v13 & 0xFFFFFFFFFFFFFFFLL))
      {
        if (v155 <= 15) {
          goto LABEL_168;
        }
        goto LABEL_173;
      }
      int64_t v156 = _StringGuts.nativeUnusedCapacity.getter(v43, v13);
      if ((v157 & 1) == 0)
      {
        BOOL v159 = (v13 & 0x2000000000000000) == 0 && v156 > 1;
        if (v155 <= 15 && !v159)
        {
LABEL_168:
          swift_bridgeObjectRelease_n(0xE200000000000000, 5);
          swift_bridgeObjectRetain(v13);
          unint64_t v160 = _StringGuts._convertedToSmall()(v43, v13);
          unint64_t v162 = v161;
          swift_bridgeObjectRelease(v13);
          v163._Swift::UInt64 rawBits = 1;
          v164._Swift::UInt64 rawBits = 131073;
          v165._Swift::UInt64 rawBits = _StringGuts.validateScalarRange(_:)(v163, v164, 0x295DuLL, 0xE200000000000000);
          if (v165._rawBits < 0x10000) {
            v165._rawBits |= 3;
          }
          unint64_t v167 = specialized String.init(_:)(v165, v166, 0x295DuLL, 0xE200000000000000);
          unint64_t v169 = v168;
          swift_bridgeObjectRelease(0xE200000000000000);
          unint64_t v170 = _StringGuts._convertedToSmall()(v167, v169);
          unint64_t v172 = v171;
          swift_bridgeObjectRelease(v169);
          unint64_t v173 = specialized _SmallString.init(_:appending:)(v160, v162, v170, v172);
          if ((v174 & 1) == 0)
          {
            uint64_t v43 = v173;
            swift_bridgeObjectRelease(v13);
            swift_bridgeObjectRelease((uint64_t)v191);
            swift_bridgeObjectRelease(0xE200000000000000);
            return v43;
          }
          goto LABEL_197;
        }
LABEL_173:
        _StringGuts.prepareForAppendInPlace(totalCount:otherUTF8Count:)(v155, 2);
        swift_bridgeObjectRelease_n(0xE200000000000000, 6);
        long long v203 = xmmword_18162AD20;
        uint64_t v175 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, 2, (uint64_t)&v203, 2);
        _StringGuts.appendInPlace(_:isASCII:)(v175, v176, 1);
        swift_bridgeObjectRelease((uint64_t)object);
        swift_bridgeObjectRelease(0xE200000000000000);
        return v204;
      }
LABEL_198:
      unint64_t v189 = 258;
LABEL_199:
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/StringGutsRangeReplaceable.swift", 38, 2, v189, 0);
    }
    break;
  }
  if (v153 < 8)
  {
    uint64_t v43 = (93 << (8 * (HIBYTE(v205) & 7u))) | ((-255 << (8 * (HIBYTE(v205) & 7u))) - 1) & v204;
    if (v153 != 7) {
      uint64_t v43 = (41 << (8 * ((v153 + 1) & 7))) | ((-255 << (8 * ((v153 + 1) & 7))) - 1) & v43;
    }
  }
  swift_bridgeObjectRelease(v205);
  swift_bridgeObjectRelease((uint64_t)v191);
  swift_bridgeObjectRelease(0xE200000000000000);
  return v43;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ContiguousArray<A>(uint64_t a1)
{
  return ContiguousArray.description.getter(*v1, *(void *)(a1 + 16));
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ContiguousArray<A>(uint64_t a1)
{
  return ContiguousArray.debugDescription.getter(*v1, *(void *)(a1 + 16));
}

atomic_ullong *ContiguousArray._cPointerArgs()(atomic_ullong *a1)
{
  return swift_retain(a1);
}

uint64_t _ContiguousArrayBuffer.withUnsafeBufferPointer<A>(_:)(uint64_t (*a1)(unint64_t, void), uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a1(a3+ ((*(unsigned __int8 *)(*(void *)(a4 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(a4 - 8) + 80)), *(void *)(a3 + 16));
}

void *$defer #1 <A><A1>() in ContiguousArray.withUnsafeMutableBufferPointer<A>(_:)(void *result, uint64_t a2, uint64_t a3)
{
  if (*result) {
    BOOL v3 = *result == a2;
  }
  else {
    BOOL v3 = 0;
  }
  if (!v3 || result[1] != a3) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "ContiguousArray withUnsafeMutableBufferPointer: replacing the buffer is not allowed", 83, 2, "Swift/ContiguousArray.swift", 27, 2, 0x4AEuLL, 0);
  }
  return result;
}

uint64_t _ContiguousArrayBuffer.startIndex.getter()
{
  return 0;
}

uint64_t static ContiguousArray<A>.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a3 - 8);
  uint64_t v7 = MEMORY[0x1F4188790](a1);
  uint64_t v10 = (char *)v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *(void *)(v7 + 16);
  if (v11 != *(void *)(v8 + 16)) {
    return 0;
  }
  if (!v11 || v7 == v8) {
    return 1;
  }
  uint64_t v12 = 0;
  unint64_t v13 = (*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  uint64_t v18 = v8 + v13;
  unint64_t v19 = v7 + v13;
  v17[1] = v6 + 16;
  do
  {
    BOOL v14 = v11 == v12;
    if (v11 == v12) {
      break;
    }
    uint64_t v15 = *(void *)(v6 + 72) * v12;
    (*(void (**)(char *, unint64_t, uint64_t))(v6 + 16))(v10, v19 + v15, a3);
    ++v12;
    LOBYTE(v15) = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(a4 + 8))(v10, v18 + v15, a3, a4);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v10, a3);
  }
  while ((v15 & 1) != 0);
  return v14;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance <A> ContiguousArray<A>(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return static ContiguousArray<A>.== infix(_:_:)(*a1, *a2, *(void *)(a3 + 16), *(void *)(a4 - 8));
}

void ContiguousArray<A>.hash(into:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v10 = (char *)&v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  Swift::UInt v12 = *(void *)(v11 + 16);
  uint64_t v16 = a1;
  Hasher._combine(_:)(v12);
  if (v12)
  {
    uint64_t v15 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
    uint64_t v13 = a2 + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
    uint64_t v14 = *(void *)(v8 + 72);
    do
    {
      v15(v10, v13, a3);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(a4 + 24))(v16, a3, a4);
      (*(void (**)(char *, uint64_t))(v8 + 8))(v10, a3);
      v13 += v14;
      --v12;
    }
    while (v12);
  }
}

Swift::Int ContiguousArray<A>.hashValue.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Array<A>.hashValue.getter(a1, a2, a3, (void (*)(void *, uint64_t, uint64_t, uint64_t))ContiguousArray<A>.hash(into:));
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance <A> ContiguousArray<A>(uint64_t a1, uint64_t a2)
{
  return ContiguousArray<A>.hashValue.getter(*v2, *(void *)(a1 + 16), *(void *)(a2 - 8));
}

void protocol witness for Hashable.hash(into:) in conformance <A> ContiguousArray<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  ContiguousArray<A>.hash(into:)(a1, *v3, *(void *)(a2 + 16), *(void *)(a3 - 8));
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance <A> ContiguousArray<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance <A> [A](a1, a2, a3, (void (*)(void *, void, void, uint64_t))ContiguousArray<A>.hash(into:));
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance <A> [A](uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void *, void, void, uint64_t))
{
  uint64_t v6 = *(void *)(a3 - 8);
  v8[0] = 0;
  v8[1] = _swift_stdlib_Hashing_parameters ^ a1 ^ 0x736F6D6570736575;
  void v8[2] = unk_1EB208F00 ^ 0x646F72616E646F6DLL;
  uint64_t v8[3] = _swift_stdlib_Hashing_parameters ^ a1 ^ 0x6C7967656E657261;
  v8[4] = unk_1EB208F00 ^ 0x7465646279746573;
  long long v9 = 0u;
  long long v10 = 0u;
  a4(v8, *v4, *(void *)(a2 + 16), v6);
  return Hasher._finalize()();
}

void *ContiguousArray.withUnsafeMutableBytes<A>(_:)(void (*a1)(uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v13[3] = a4;
  ContiguousArray._makeMutableAndUnique()();
  uint64_t v7 = *(void *)(*(void *)v4 + 16);
  uint64_t v8 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v9 = *(void *)v4 + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
  v13[0] = v9;
  v13[1] = v7;
  uint64_t v10 = *(void *)(v8 + 72);
  uint64_t v11 = v7 * v10;
  if ((unsigned __int128)(v7 * (__int128)v10) >> 64 != (v7 * v10) >> 63)
  {
    __break(1u);
LABEL_5:
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeMutableRawBufferPointer with negative count", 49, 2, "Swift/UnsafeRawBufferPointer.swift", 34, 2, 0x68uLL, 0);
  }
  if (v11 < 0) {
    goto LABEL_5;
  }
  a1(v9, v9 + v11);
  return $defer #1 <A><A1>() in ContiguousArray.withUnsafeMutableBufferPointer<A>(_:)(v13, v9, v7);
}

uint64_t ContiguousArray.withUnsafeBytes<A>(_:)(uint64_t (*a1)(uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(a4 - 8);
  uint64_t v5 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = *(void *)(a3 + 16);
  uint64_t v7 = *(void *)(v4 + 72);
  uint64_t v8 = v6 * v7;
  if ((unsigned __int128)(v6 * (__int128)v7) >> 64 != (v6 * v7) >> 63)
  {
    __break(1u);
LABEL_5:
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeRawBufferPointer with negative count", 42, 2, "Swift/UnsafeRawBufferPointer.swift", 34, 2, 0x485uLL, 0);
  }
  if (v8 < 0) {
    goto LABEL_5;
  }
  return a1(a3 + ((v5 + 32) & ~v5), a3 + ((v5 + 32) & ~v5) + v8);
}

uint64_t _HasContiguousBytes._providesContiguousBytesNoCopy.getter()
{
  return 1;
}

uint64_t Array._providesContiguousBytesNoCopy.getter(uint64_t a1, uint64_t *a2)
{
  BOOL isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType((uint64_t)a2, a2);
  BOOL v5 = (a1 & 0x4000000000000000) == 0 && a1 >= 0;
  return !isClassOrObjCExistentialType || v5;
}

uint64_t protocol witness for _HasContiguousBytes.withUnsafeBytes<A>(_:) in conformance [A](uint64_t (*a1)(uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  return Array.withUnsafeBytes<A>(_:)(a1, a2, *v4, *(uint64_t **)(a4 + 16));
}

uint64_t protocol witness for _HasContiguousBytes._providesContiguousBytesNoCopy.getter in conformance [A](uint64_t a1)
{
  uint64_t v2 = *v1;
  BOOL isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType(*(void *)(a1 + 16), *(uint64_t **)(a1 + 16));
  BOOL v5 = (v2 & 0x4000000000000000) == 0 && v2 >= 0;
  return !isClassOrObjCExistentialType || v5;
}

uint64_t protocol witness for _HasContiguousBytes.withUnsafeBytes<A>(_:) in conformance ContiguousArray<A>(uint64_t (*a1)(uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  return ContiguousArray.withUnsafeBytes<A>(_:)(a1, a2, *v4, *(void *)(a4 + 16));
}

uint64_t UnsafeBufferPointer.withUnsafeBytes<A>(_:)(uint64_t (*a1)(uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return UnsafeBufferPointer.withUnsafeBytes<A>(_:)(a1, a2, a3, a4, a5);
}

{
  uint64_t v5;
  uint64_t v6;

  BOOL v5 = *(void *)(*(void *)(a5 - 8) + 72) * a4;
  if (v5 < 0) {
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeRawBufferPointer with negative count", 42, 2, "Swift/UnsafeRawBufferPointer.swift", 34, 2, 0x485uLL, 0);
  }
  if (v5)
  {
    if (!a3) {
      _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeRawBufferPointer has a nil start and nonzero count", 56, 2, "Swift/UnsafeRawBufferPointer.swift", 34, 2, 0x486uLL, 0);
    }
  }
  else if (!a3)
  {
    uint64_t v6 = 0;
    return a1(a3, v6);
  }
  uint64_t v6 = a3 + v5;
  return a1(a3, v6);
}

uint64_t _Pointer.init(_:)@<X0>(const void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  size_t v8 = *(void *)(*(void *)(a2 - 8) + 64);
  uint64_t v16 = MEMORY[0x1F4188790](*(void *)(a2 - 8));
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v16 + 48))(a1, 1, a2) == 1)
  {
    uint64_t v11 = type metadata accessor for Optional(0, a2, v9, v10);
    (*((void (**)(const void *, Class *))*(v11 - 1) + 1))(a1, v11);
    Swift::UInt v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v16 + 56);
    return v12(a4, 1, 1, a2);
  }
  else
  {
    memcpy((char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v8);
    uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 48))(a2, a3);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(a3 + 56))(v14, a2, a3);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v16 + 56))(a4, 0, 1, a2);
  }
}

uint64_t static MemoryLayout.stride.getter(uint64_t a1)
{
  return *(void *)(*(void *)(a1 - 8) + 72);
}

uint64_t protocol witness for _HasContiguousBytes.withUnsafeBytes<A>(_:) in conformance UnsafeBufferPointer<A>(uint64_t (*a1)(uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for _HasContiguousBytes.withUnsafeBytes<A>(_:) in conformance UnsafeBufferPointer<A>(a1, a2, a3, a4);
}

{
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  uint64_t v6 = *v4;
  uint64_t v7 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 72) * v4[1];
  if (v7 < 0) {
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeRawBufferPointer with negative count", 42, 2, "Swift/UnsafeRawBufferPointer.swift", 34, 2, 0x485uLL, 0);
  }
  if (v7)
  {
    if (!v6) {
      _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeRawBufferPointer has a nil start and nonzero count", 56, 2, "Swift/UnsafeRawBufferPointer.swift", 34, 2, 0x486uLL, 0);
    }
  }
  else if (!v6)
  {
    size_t v8 = 0;
    return a1(v6, v8);
  }
  size_t v8 = v6 + v7;
  return a1(v6, v8);
}

uint64_t UnsafeMutableBufferPointer.withUnsafeBytes<A>(_:)(uint64_t (*a1)(uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return UnsafeBufferPointer.withUnsafeBytes<A>(_:)(a1, a2, a3, a4, a5);
}

uint64_t UnsafeRawBufferPointer.withUnsafeBytes<A>(_:)(uint64_t (*a1)(uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a1(a3, a4);
}

uint64_t protocol witness for _HasContiguousBytes.withUnsafeBytes<A>(_:) in conformance UnsafeRawBufferPointer(uint64_t (*a1)(void, void))
{
  return a1(*v1, v1[1]);
}

uint64_t UnsafeMutableRawBufferPointer.withUnsafeBytes<A>(_:)(uint64_t (*a1)(uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a3) {
    uint64_t v4 = a4;
  }
  else {
    uint64_t v4 = 0;
  }
  return a1(a3, v4);
}

uint64_t protocol witness for _HasContiguousBytes.withUnsafeBytes<A>(_:) in conformance UnsafeMutableRawBufferPointer(uint64_t (*a1)(void))
{
  return a1();
}

BOOL String._providesContiguousBytesNoCopy.getter(uint64_t a1, uint64_t a2)
{
  return (a2 & 0x1000000000000000) == 0;
}

BOOL _StringGuts.isFastUTF8.getter(uint64_t a1, uint64_t a2)
{
  return (a2 & 0x1000000000000000) == 0;
}

void String.withUnsafeBytes<A>(_:)(void (*a1)(void *, char *), uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4 = a4;
  swift_bridgeObjectRetain(a4);
  if ((v4 & 0x1000000000000000) != 0)
  {
    a3 = specialized static String._copying(_:)(a3, v4);
    unint64_t v12 = v11;
    swift_bridgeObjectRelease(v4);
    unint64_t v4 = v12;
    if ((v12 & 0x2000000000000000) == 0) {
      goto LABEL_3;
    }
LABEL_7:
    v13[0] = a3;
    v13[1] = v4 & 0xFFFFFFFFFFFFFFLL;
    uint64_t v10 = (char *)v13 + (HIBYTE(v4) & 0xF);
    uint64_t v9 = v13;
    goto LABEL_8;
  }
  if ((v4 & 0x2000000000000000) != 0) {
    goto LABEL_7;
  }
LABEL_3:
  if ((a3 & 0x1000000000000000) != 0)
  {
    id v7 = (id)((v4 & 0xFFFFFFFFFFFFFFFLL) + 32);
    uint64_t v8 = a3 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    id v7 = _StringObject.sharedUTF8.getter(a3, v4);
  }
  uint64_t v9 = (void *)specialized UnsafeRawBufferPointer.init<A>(_:)((uint64_t)v7, v8);
LABEL_8:
  a1(v9, v10);
  swift_bridgeObjectRelease(v4);
}

void protocol witness for _HasContiguousBytes.withUnsafeBytes<A>(_:) in conformance String(void (*a1)(uint64_t))
{
  uint64_t v4 = *v1;
  unint64_t v3 = v1[1];
  swift_bridgeObjectRetain(v3);
  if ((v3 & 0x1000000000000000) == 0)
  {
    if ((v3 & 0x2000000000000000) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t v6 = HIBYTE(v3) & 0xF;
    v10[0] = v4;
    v10[1] = v3 & 0xFFFFFFFFFFFFFFLL;
    BOOL v5 = v10;
    goto LABEL_7;
  }
  uint64_t v4 = specialized static String._copying(_:)(v4, v3);
  unint64_t v8 = v7;
  swift_bridgeObjectRelease(v3);
  unint64_t v3 = v8;
  if ((v8 & 0x2000000000000000) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v4 & 0x1000000000000000) != 0)
  {
    BOOL v5 = (void *)((v3 & 0xFFFFFFFFFFFFFFFLL) + 32);
    uint64_t v6 = v4 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    BOOL v5 = _StringObject.sharedUTF8.getter(v4, v3);
  }
LABEL_7:
  uint64_t v9 = specialized UnsafeRawBufferPointer.init<A>(_:)((uint64_t)v5, v6);
  a1(v9);
  swift_bridgeObjectRelease(v3);
}

BOOL protocol witness for _HasContiguousBytes._providesContiguousBytesNoCopy.getter in conformance String()
{
  return (*(unsigned char *)(v0 + 15) & 0x10) == 0;
}

BOOL Substring._providesContiguousBytesNoCopy.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (a4 & 0x1000000000000000) == 0;
}

uint64_t Substring._wholeGuts.getter(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  return a3;
}

void Substring.withUnsafeBytes<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
}

uint64_t closure #1 in Substring.withUnsafeBytes<A>(_:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  if (a2 < 0) {
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeRawBufferPointer with negative count", 42, 2, "Swift/UnsafeRawBufferPointer.swift", 34, 2, 0x485uLL, 0);
  }
  if (a2)
  {
    if (!a1) {
      _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeRawBufferPointer has a nil start and nonzero count", 56, 2, "Swift/UnsafeRawBufferPointer.swift", 34, 2, 0x486uLL, 0);
    }
  }
  else if (!a1)
  {
    uint64_t v3 = 0;
    return a3(a1, v3);
  }
  uint64_t v3 = a1 + a2;
  return a3(a1, v3);
}

void Substring.withUTF8<A>(_:)(void (*a1)(char *, int64_t))
{
  unint64_t v3 = v1[3];
  if ((v3 & 0x1000000000000000) != 0)
  {
    Substring._slowMakeContiguousUTF8()();
    unint64_t v3 = v1[3];
  }
  unint64_t v5 = v1[1];
  uint64_t v4 = v1[2];
  uint64_t v6 = *v1 >> 16;
  int64_t v7 = v5 >> 16;
  if ((v3 & 0x2000000000000000) == 0)
  {
    if ((v4 & 0x1000000000000000) != 0)
    {
      id v8 = (id)((v3 & 0xFFFFFFFFFFFFFFFLL) + 32);
      uint64_t v9 = v4 & 0xFFFFFFFFFFFFLL;
      if ((v4 & 0xFFFFFFFFFFFFLL) >= v7)
      {
LABEL_6:
        swift_bridgeObjectRetain(v3);
        uint64_t v10 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(v6, v7, (uint64_t)v8, v9);
        goto LABEL_10;
      }
    }
    else
    {
      id v8 = _StringObject.sharedUTF8.getter(v4, v3);
      uint64_t v9 = v12;
      if (v12 >= v7) {
        goto LABEL_6;
      }
    }
LABEL_12:
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x745uLL, 0);
  }
  v13[0] = v4;
  v13[1] = v3 & 0xFFFFFFFFFFFFFFLL;
  if ((HIBYTE(v3) & 0xF) < (unint64_t)v7) {
    goto LABEL_12;
  }
  if (v7 - v6 < 0) {
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeBufferPointer with negative count", 39, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x53FuLL, 0);
  }
  swift_bridgeObjectRetain(v3);
  uint64_t v10 = (char *)v13 + v6;
  int64_t v11 = v7 - v6;
LABEL_10:
  a1(v10, v11);
  swift_bridgeObjectRelease(v3);
}

void protocol witness for _HasContiguousBytes.withUnsafeBytes<A>(_:) in conformance Substring()
{
  unint64_t v1 = *(void *)(v0 + 24);
  swift_bridgeObjectRetain(v1);
  Substring.withUTF8<A>(_:)((void (*)(char *, int64_t))closure #1 in Substring.withUnsafeBytes<A>(_:)partial apply);
  swift_bridgeObjectRelease(v1);
}

BOOL protocol witness for _HasContiguousBytes._providesContiguousBytesNoCopy.getter in conformance Substring()
{
  return (*(unsigned char *)(v0 + 31) & 0x10) == 0;
}

uint64_t ClosedRange.init(uncheckedBounds:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v52 = a5;
  char v53 = (char *)a4;
  id v8 = type metadata accessor for ClosedRange(0, a3, a4, a4);
  uint64_t v50 = (uint64_t)*(v8 - 1);
  unint64_t v51 = v8;
  MEMORY[0x1F4188790](v8);
  size_t v55 = (char *)&v44 - v9;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0, a3, a3, "lower upper ", 0);
  unint64_t v45 = (char *)*(TupleTypeMetadata2 - 1);
  uint64_t v11 = MEMORY[0x1F4188790](TupleTypeMetadata2);
  BOOL v49 = (char *)&v44 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = MEMORY[0x1F4188790](v11);
  uint64_t v47 = (char *)&v44 - v14;
  uint64_t v15 = MEMORY[0x1F4188790](v13);
  uint64_t v54 = (char *)&v44 - v16;
  uint64_t v17 = MEMORY[0x1F4188790](v15);
  uint64_t v46 = (char *)&v44 - v18;
  uint64_t v19 = MEMORY[0x1F4188790](v17);
  unint64_t v21 = (char *)&v44 - v20;
  uint64_t v22 = MEMORY[0x1F4188790](v19);
  Swift::String::Index v24 = (char *)&v44 - v23;
  Swift::String::Index v25 = (char *)&v44 + *(int *)(v22 + 48) - v23;
  uint64_t v26 = *(void *)(a3 - 8);
  Swift::String::Index v27 = *(void (**)(void))(v26 + 32);
  ((void (*)(char *, uint64_t, uint64_t))v27)((char *)&v44 - v23, a1, a3);
  ((void (*)(char *, uint64_t, uint64_t))v27)(v25, a2, a3);
  unint64_t v28 = TupleTypeMetadata2;
  unint64_t v29 = &v21[*((int *)TupleTypeMetadata2 + 12)];
  uint64_t v48 = v26;
  unint64_t v30 = *(void (**)(char *, char *, uint64_t))(v26 + 16);
  v30(v21, v24, a3);
  v30(v29, v25, a3);
  if (((*((uint64_t (**)(char *, char *, uint64_t))v53 + 3))(v21, v29, a3) & 1) == 0) {
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "ClosedRange requires lowerBound <= upperBound", 45, 2, "Swift/ClosedRange.swift", 23, 2, 0x59uLL, 0);
  }
  (*((void (**)(char *, uint64_t *))v45 + 1))(v21, v28);
  unint64_t v31 = v46;
  char v53 = &v46[*((int *)v28 + 12)];
  unint64_t v32 = v53;
  v30(v46, v24, a3);
  v30(v32, v25, a3);
  unint64_t v33 = &v54[*((int *)v28 + 12)];
  v27();
  ((void (*)(char *, char *, uint64_t))v27)(v33, v25, a3);
  unint64_t v34 = v47;
  unint64_t v35 = &v47[*((int *)v28 + 12)];
  ((void (*)(char *, char *, uint64_t))v27)(v47, v31, a3);
  unint64_t v45 = v35;
  ((void (*)(char *, char *, uint64_t))v27)(v35, v33, a3);
  char v36 = v49;
  unint64_t v37 = v30;
  unint64_t v38 = &v49[*((int *)v28 + 12)];
  v37(v49, v34, a3);
  v37(v38, v35, a3);
  ((void (*)(char *, char *, uint64_t))v27)(v55, v36, a3);
  unint64_t v39 = *(void (**)(char *, uint64_t))(v48 + 8);
  v39(v38, a3);
  size_t v40 = &v36[*((int *)v28 + 12)];
  ((void (*)(char *, char *, uint64_t))v27)(v36, v34, a3);
  ((void (*)(char *, char *, uint64_t))v27)(v40, v45, a3);
  uint64_t v41 = v51;
  uint64_t v42 = v55;
  ((void (*)(char *, char *, uint64_t))v27)(&v55[*((int *)v51 + 9)], v40, a3);
  v39(v36, a3);
  (*(void (**)(uint64_t, char *, Class *))(v50 + 32))(v52, v42, v41);
  v39(v54, a3);
  return ((uint64_t (*)(char *, uint64_t))v39)(v53, a3);
}

uint64_t ClosedRange.isEmpty.getter()
{
  return 0;
}

uint64_t ClosedRange.relative<A>(to:)@<X0>(uint64_t a1@<X1>, char *a2@<X2>, uint64_t a3@<X3>, char *a4@<X8>)
{
  uint64_t v5 = v4;
  unint64_t v31 = a2;
  uint64_t v32 = a1;
  unint64_t v33 = a4;
  uint64_t v7 = *(void *)(a1 + 16);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0, v7, v7, "lower upper ", 0);
  uint64_t v10 = TupleTypeMetadata2 - 1;
  uint64_t v11 = MEMORY[0x1F4188790](TupleTypeMetadata2);
  uint64_t v13 = (char *)&v30 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = MEMORY[0x1F4188790](v11);
  uint64_t v16 = (char *)&v30 - v15;
  uint64_t v17 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v14);
  uint64_t v19 = (char *)&v30 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t, char *, uint64_t))(a3 + 184))(v4 + *(int *)(a1 + 36), v31, a3);
  uint64_t v20 = &v16[*((int *)v10 + 14)];
  uint64_t v30 = v17;
  unint64_t v21 = *(void (**)(char *, uint64_t, uint64_t))(v17 + 16);
  v21(v16, v5, v7);
  uint64_t v22 = *(void (**)(char *, char *, uint64_t))(v17 + 32);
  unint64_t v31 = v20;
  v22(v20, v19, v7);
  uint64_t v23 = &v13[*((int *)v10 + 14)];
  v21(v13, (uint64_t)v16, v7);
  v21(v23, (uint64_t)v20, v7);
  Swift::String::Index v24 = v33;
  v22(v33, v13, v7);
  Swift::String::Index v25 = *(void (**)(char *, uint64_t))(v30 + 8);
  v25(v23, v7);
  uint64_t v26 = &v13[*((int *)v10 + 14)];
  v22(v13, v16, v7);
  v22(v26, v31, v7);
  unint64_t v28 = type metadata accessor for Range(0, v7, *(void *)(v32 + 24), v27);
  v22(&v24[*((int *)v28 + 9)], v26, v7);
  return ((uint64_t (*)(char *, uint64_t))v25)(v13, v7);
}

uint64_t ClosedRange.contains(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *(void *)(a2 - 8);
  uint64_t v7 = MEMORY[0x1F4188790](a1);
  uint64_t v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *(void *)(v10 + 16);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = MEMORY[0x1F4188790](v7);
  uint64_t v15 = (char *)&v21 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = *(void *)(v16 + 24);
  char v18 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v17 + 32))(v13, v3, v11, v17);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v15, a1, v11);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v9, v3, a2);
  if (v18) {
    char v19 = (*(uint64_t (**)(char *, char *, uint64_t, uint64_t))(v17 + 24))(v15, &v9[*(int *)(a2 + 36)], v11, v17);
  }
  else {
    char v19 = 0;
  }
  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, a2);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v11);
  return v19 & 1;
}

uint64_t protocol witness for RangeExpression.relative<A>(to:) in conformance ClosedRange<A>@<X0>(char *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, char *a4@<X8>)
{
  return ClosedRange.relative<A>(to:)(a3, a1, a2, a4);
}

uint64_t protocol witness for Sequence.makeIterator() in conformance <> ClosedRange<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v7 = *(void *)(a2 - 16);
  uint64_t v6 = *(void *)(a2 - 8);
  uint64_t v8 = type metadata accessor for ClosedRange<>.Index(0, *(void *)(a1 + 16), v6, v7);
  uint64_t v9 = (uint64_t)*(v8 - 1);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)v17 - v10;
  uint64_t v12 = *(void *)(a1 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 16))(a3, v3, a1);
  ClosedRange<>.startIndex.getter(a1, (uint64_t)v11);
  (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v3, a1);
  v17[0] = v6;
  v17[1] = v7;
  uint64_t WitnessTable = swift_getWitnessTable(protocol conformance descriptor for <> ClosedRange<A>, (unint64_t *)a1, (uint64_t)v17);
  uint64_t v15 = type metadata accessor for IndexingIterator(0, a1, WitnessTable, v14);
  return (*(uint64_t (**)(uint64_t, char *, Class *))(v9 + 32))(a3 + *((int *)v15 + 9), v11, v8);
}

uint64_t protocol witness for Sequence.underestimatedCount.getter in conformance <> ClosedRange<A>(unint64_t *a1, uint64_t a2)
{
  return protocol witness for Sequence.underestimatedCount.getter in conformance <> ClosedRange<A>(a1, a2, protocol conformance descriptor for <> ClosedRange<A>, (uint64_t (*)(unint64_t *, uint64_t))Collection.underestimatedCount.getter);
}

uint64_t protocol witness for Sequence._customContainsEquatableElement(_:) in conformance <> ClosedRange<A>(char *a1, uint64_t a2)
{
  return ClosedRange<>._customContainsEquatableElement(_:)(a1, a2);
}

uint64_t ClosedRange<>._customContainsEquatableElement(_:)(char *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v22 = *(void *)(a2 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](a1);
  uint64_t v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *(void *)(v9 + 16);
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v13 = (char *)&v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = *(void *)(v14 + 8);
  uint64_t v21 = *(uint64_t (**)(char *, char *, uint64_t, uint64_t))(v15 + 24);
  char v16 = v21(v3, a1, v10, v15);
  uint64_t v17 = a1;
  uint64_t v18 = v22;
  (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v13, v17, v10);
  (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v8, v3, a2);
  if (v16) {
    char v19 = v21(v13, &v8[*(int *)(a2 + 36)], v10, v15);
  }
  else {
    char v19 = 0;
  }
  (*(void (**)(char *, uint64_t))(v18 + 8))(v8, a2);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  return v19 & 1;
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance <> ClosedRange<A>(unint64_t *a1, uint64_t a2)
{
  return protocol witness for Sequence.underestimatedCount.getter in conformance <> ClosedRange<A>(a1, a2, protocol conformance descriptor for <> ClosedRange<A>, (uint64_t (*)(unint64_t *, uint64_t))Collection._copyToContiguousArray());
}

uint64_t protocol witness for Sequence.underestimatedCount.getter in conformance <> ClosedRange<A>(unint64_t *a1, uint64_t a2, int *a3, uint64_t (*a4)(unint64_t *, uint64_t))
{
  int8x16_t v8 = vextq_s8(*(int8x16_t *)(a2 - 16), *(int8x16_t *)(a2 - 16), 8uLL);
  uint64_t WitnessTable = swift_getWitnessTable(a3, a1, (uint64_t)&v8);
  return a4(a1, WitnessTable);
}

uint64_t static ClosedRange<>.Index.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v34 = a2;
  uint64_t v5 = *(void *)(a3 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](a1);
  uint64_t v32 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v30 = (char *)&v30 - v9;
  uint64_t v31 = v8;
  uint64_t v12 = type metadata accessor for ClosedRange<>.Index(0, v10, v8, v11);
  uint64_t v13 = (uint64_t)*(v12 - 1);
  MEMORY[0x1F4188790](v12);
  unint64_t v35 = (char *)&v30 - v14;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0, (uint64_t)v12, (uint64_t)v12, 0, 0);
  uint64_t v16 = *(TupleTypeMetadata2 - 1);
  uint64_t v17 = MEMORY[0x1F4188790](TupleTypeMetadata2);
  char v19 = (char *)&v30 - v18;
  uint64_t v20 = (char *)&v30 + *(int *)(v17 + 48) - v18;
  uint64_t v33 = v13;
  uint64_t v21 = *(void (**)(char *, uint64_t, Class *))(v13 + 16);
  v21((char *)&v30 - v18, a1, v12);
  v21(v20, v34, v12);
  uint64_t v34 = v5;
  uint64_t v22 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48);
  if (v22(v19, 1, a3) == 1)
  {
    char v23 = 1;
    if (v22(v20, 1, a3) == 1) {
      goto LABEL_8;
    }
  }
  else
  {
    v21(v35, (uint64_t)v19, v12);
    if (v22(v20, 1, a3) != 1)
    {
      uint64_t v24 = v34;
      Swift::String::Index v25 = *(void (**)(char *, char *, uint64_t))(v34 + 32);
      uint64_t v26 = v30;
      v25(v30, v35, a3);
      uint64_t v27 = v32;
      v25(v32, v20, a3);
      char v23 = (*(uint64_t (**)(char *, char *, uint64_t))(*(void *)(*(void *)(v31 + 8) + 8) + 8))(v26, v27, a3);
      unint64_t v28 = *(void (**)(char *, uint64_t))(v24 + 8);
      v28(v27, a3);
      v28(v26, a3);
LABEL_8:
      uint64_t v16 = v33;
      goto LABEL_9;
    }
    (*(void (**)(char *, uint64_t))(v34 + 8))(v35, a3);
  }
  char v23 = 0;
  uint64_t v12 = (Class *)TupleTypeMetadata2;
LABEL_9:
  (*(void (**)(char *, Class *))(v16 + 8))(v19, v12);
  return v23 & 1;
}

uint64_t static ClosedRange<>.Index.< infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v34 = a1;
  uint64_t v5 = *(void *)(a3 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](a1);
  uint64_t v31 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v30 = (char *)&v30 - v8;
  uint64_t v32 = v9;
  uint64_t v12 = type metadata accessor for ClosedRange<>.Index(0, v10, v9, v11);
  uint64_t v13 = (uint64_t)*(v12 - 1);
  MEMORY[0x1F4188790](v12);
  unint64_t v35 = (char *)&v30 - v14;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0, (uint64_t)v12, (uint64_t)v12, 0, 0);
  uint64_t v16 = *(TupleTypeMetadata2 - 1);
  uint64_t v17 = MEMORY[0x1F4188790](TupleTypeMetadata2);
  char v19 = (char *)&v30 - v18;
  uint64_t v20 = (char *)&v30 + *(int *)(v17 + 48) - v18;
  uint64_t v33 = v13;
  uint64_t v21 = *(void (**)(char *, uint64_t, Class *))(v13 + 16);
  v21((char *)&v30 - v18, v34, v12);
  v21(v20, a2, v12);
  uint64_t v34 = v5;
  uint64_t v22 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48);
  if (v22(v19, 1, a3) == 1)
  {
    char v23 = 0;
    uint64_t v12 = (Class *)TupleTypeMetadata2;
  }
  else
  {
    v21(v35, (uint64_t)v19, v12);
    if (v22(v20, 1, a3) == 1)
    {
      (*(void (**)(char *, uint64_t))(v34 + 8))(v35, a3);
      char v23 = 1;
    }
    else
    {
      uint64_t v24 = v34;
      Swift::String::Index v25 = *(void (**)(char *, char *, uint64_t))(v34 + 32);
      uint64_t v26 = v30;
      v25(v30, v35, a3);
      uint64_t v27 = v31;
      v25(v31, v20, a3);
      char v23 = (*(uint64_t (**)(char *, char *, uint64_t))(*(void *)(v32 + 8) + 16))(v26, v27, a3);
      unint64_t v28 = *(void (**)(char *, uint64_t))(v24 + 8);
      v28(v27, a3);
      v28(v26, a3);
    }
    uint64_t v16 = v33;
  }
  (*(void (**)(char *, Class *))(v16 + 8))(v19, v12);
  return v23 & 1;
}

uint64_t protocol witness for static Comparable.< infix(_:_:) in conformance ClosedRange<A><>.Index(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static ClosedRange<>.Index.< infix(_:_:)(a1, a2, *(void *)(a3 + 16));
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ClosedRange<A><>.Index(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static ClosedRange<>.Index.== infix(_:_:)(a1, a2, *(void *)(a3 + 16));
}

void ClosedRange<>.Index<>.hash(into:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = MEMORY[0x1F4188790](a1);
  uint64_t v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  uint64_t v11 = (char *)&v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v12 + 16))(v11, v13);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v11, 1, v5) == 1)
  {
    Hasher._combine(_:)(1u);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v9, v11, v5);
    Hasher._combine(_:)(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(a3 + 24))(a1, v5, a3);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  }
}

Swift::Int ClosedRange<>.Index<>.hashValue.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](a1);
  uint64_t v8 = (char *)&v14[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)&v14[-1] - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14[0] = 0;
  v14[1] = _swift_stdlib_Hashing_parameters ^ 0x736F6D6570736575;
  _OWORD v14[2] = unk_1EB208F00 ^ 0x646F72616E646F6DLL;
  v14[3] = _swift_stdlib_Hashing_parameters ^ 0x6C7967656E657261;
  _OWORD v14[4] = unk_1EB208F00 ^ 0x7465646279746573;
  long long v15 = 0u;
  long long v16 = 0u;
  (*(void (**)(char *, uint64_t))(v11 + 16))(v10, v2);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v10, 1, v4) == 1)
  {
    Hasher._combine(_:)(1u);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v8, v10, v4);
    Hasher._combine(_:)(0);
    (*(void (**)(void *, uint64_t, uint64_t))(a2 + 24))(v14, v4, a2);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  }
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance <> ClosedRange<A><>.Index(uint64_t a1, uint64_t a2)
{
  return ClosedRange<>.Index<>.hashValue.getter(a1, *(void *)(a2 - 8));
}

void protocol witness for Hashable.hash(into:) in conformance <> ClosedRange<A><>.Index(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance <> ClosedRange<A><>.Index(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance <> ClosedRange<A><>.Index(a1, a2, a3, (void (*)(void *, uint64_t, uint64_t))ClosedRange<>.Index<>.hash(into:));
}

uint64_t ClosedRange<>.startIndex.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v8 = *(void *)(v5 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(a2, v3, v5);
  uint64_t v6 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v8 + 56);

  return v6(a2, 0, 1, v5);
}

uint64_t ClosedRange<>.endIndex.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8) + 56))(a2, 1, 1);
}

uint64_t ClosedRange<>.index(after:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v32 = a5;
  uint64_t v33 = a1;
  uint64_t v8 = *(void *)(a2 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (int **)a3, v8, (uint64_t)&protocol requirements base descriptor for Strideable, associated type descriptor for Strideable.Stride);
  uint64_t v30 = *((void *)AssociatedTypeWitness - 1);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  unint64_t v29 = (char *)&v28 - v10;
  uint64_t v11 = *(void *)(*(void *)(swift_getAssociatedConformanceWitness(a3, v8, (uint64_t)AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Strideable, associated conformance descriptor for Strideable.Strideable.Stride: SignedNumeric)+ 8)+ 16);
  uint64_t v12 = swift_getAssociatedTypeWitness(0, (int **)v11, (uint64_t)AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, associated type descriptor for ExpressibleByIntegerLiteral.IntegerLiteralType);
  uint64_t v13 = MEMORY[0x1F4188790](v12);
  long long v15 = (char *)&v28 - v14;
  uint64_t v16 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v13);
  uint64_t v18 = (char *)&v28 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v19 = type metadata accessor for ClosedRange<>.Index(0, v8, a3, a4);
  MEMORY[0x1F4188790](v19);
  uint64_t v21 = (char *)&v28 - v20;
  (*(void (**)(char *, uint64_t))(v22 + 16))((char *)&v28 - v20, v33);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v21, 1, v8) == 1) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Incrementing past end index", 27, 2, "Swift/ClosedRange.swift", 23, 2, 0xE4uLL, 0);
  }
  (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v18, v21, v8);
  if ((*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(*(void *)(a3 + 8) + 8) + 8))(v18, v31 + *(int *)(a2 + 36), v8))
  {
    uint64_t v23 = 1;
    uint64_t v24 = v32;
  }
  else
  {
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v11, (uint64_t)AssociatedTypeWitness, (uint64_t)v12, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
    (*(void (**)(uint64_t *, uint64_t, const char *, uint64_t))(AssociatedConformanceWitness + 8))(&qword_18162B0C0, 512, v12, AssociatedConformanceWitness);
    uint64_t v26 = v29;
    (*(void (**)(char *, const char *, uint64_t))(v11 + 24))(v15, AssociatedTypeWitness, v11);
    uint64_t v24 = v32;
    (*(void (**)(char *, uint64_t, uint64_t))(a3 + 48))(v26, v8, a3);
    (*(void (**)(char *, const char *))(v30 + 8))(v26, AssociatedTypeWitness);
    uint64_t v23 = 0;
  }
  (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v16 + 56))(v24, v23, 1, v8);
}

uint64_t ClosedRange<>.index(before:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int **a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v47 = a1;
  uint64_t v45 = a5;
  uint64_t v46 = a4;
  uint64_t v7 = *(void *)(a2 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, a3, v7, (uint64_t)&protocol requirements base descriptor for Strideable, associated type descriptor for Strideable.Stride);
  uint64_t v44 = *((void *)AssociatedTypeWitness - 1);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v43 = (char *)&v40 - v9;
  uint64_t v42 = *(int ***)(*(void *)(swift_getAssociatedConformanceWitness((uint64_t)a3, v7, (uint64_t)AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Strideable, associated conformance descriptor for Strideable.Strideable.Stride: SignedNumeric)+ 8)+ 16);
  uint64_t v41 = swift_getAssociatedTypeWitness(0, v42, (uint64_t)AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, associated type descriptor for ExpressibleByIntegerLiteral.IntegerLiteralType);
  uint64_t v10 = MEMORY[0x1F4188790](v41);
  size_t v40 = (char *)&v40 - v11;
  uint64_t v12 = *(void *)(a2 - 8);
  uint64_t v13 = MEMORY[0x1F4188790](v10);
  long long v15 = (char *)&v40 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = MEMORY[0x1F4188790](v13);
  uint64_t v18 = (char *)&v40 - v17;
  uint64_t v19 = *(void *)(v7 - 8);
  uint64_t v20 = MEMORY[0x1F4188790](v16);
  uint64_t v22 = (char *)&v40 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  uint64_t v24 = (char *)&v40 - v23;
  BOOL v49 = a3;
  Swift::String::Index v25 = type metadata accessor for ClosedRange<>.Index(0, v7, (uint64_t)a3, v46);
  MEMORY[0x1F4188790](v25);
  uint64_t v27 = (char *)&v40 - v26;
  (*(void (**)(char *, uint64_t))(v28 + 16))((char *)&v40 - v26, v47);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v27, 1, v7) != 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v19 + 32))(v24, v27, v7);
    (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v22, v24, v7);
    (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v18, v48, a2);
    uint64_t v32 = v49;
    if ((*((uint64_t (**)(char *, char *, uint64_t))v49[1] + 5))(v22, v18, v7))
    {
      (*(void (**)(char *, uint64_t))(v12 + 8))(v18, a2);
      uint64_t v48 = *(char **)(v19 + 8);
      ((void (*)(char *, uint64_t))v48)(v22, v7);
      uint64_t v33 = v41;
      uint64_t v34 = v42;
      uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness((uint64_t)v42, (uint64_t)AssociatedTypeWitness, (uint64_t)v41, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
      char v36 = v40;
      (*(void (**)(void *, uint64_t, const char *, uint64_t))(AssociatedConformanceWitness + 8))(&unk_18162B0C8, 257, v33, AssociatedConformanceWitness);
      unint64_t v37 = v43;
      ((void (*)(char *, const char *, int **))v34[3])(v36, AssociatedTypeWitness, v34);
      uint64_t v31 = v45;
      ((void (*)(char *, uint64_t, int **))v32[6])(v37, v7, v32);
      (*(void (**)(char *, const char *))(v44 + 8))(v37, AssociatedTypeWitness);
      ((void (*)(char *, uint64_t))v48)(v24, v7);
      return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v19 + 56))(v31, 0, 1, v7);
    }
    unint64_t v39 = 236;
LABEL_9:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Incrementing past start index", 29, 2, "Swift/ClosedRange.swift", 23, 2, v39, 0);
  }
  unint64_t v29 = v48;
  (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v15, v48, a2);
  if (((*((uint64_t (**)(char *, char *, uint64_t))v49[1] + 4))(&v15[*(int *)(a2 + 36)], v15, v7) & 1) == 0)
  {
    unint64_t v39 = 239;
    goto LABEL_9;
  }
  (*(void (**)(char *, uint64_t))(v12 + 8))(v15, a2);
  uint64_t v30 = &v29[*(int *)(a2 + 36)];
  uint64_t v31 = v45;
  (*(void (**)(uint64_t, char *, uint64_t))(v19 + 16))(v45, v30, v7);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v19 + 56))(v31, 0, 1, v7);
}

uint64_t ClosedRange<>.index(_:offsetBy:)@<X0>(void (*a1)(char *, uint64_t)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v202 = a3;
  uint64_t v204 = a2;
  uint64_t v198 = a6;
  uint64_t v199 = a1;
  uint64_t v187 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](a1);
  Swift::String::Index v186 = (char *)&v173 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *(void *)(v9 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v11, v10, (uint64_t)&protocol requirements base descriptor for Strideable, associated type descriptor for Strideable.Stride);
  uint64_t v188 = *(void *)(swift_getAssociatedConformanceWitness(a4, v10, (uint64_t)AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Strideable, associated conformance descriptor for Strideable.Strideable.Stride: SignedNumeric)+ 8);
  long long v192 = *(int ***)(v188 + 16);
  unint64_t v191 = swift_getAssociatedTypeWitness(0, v192, (uint64_t)AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, associated type descriptor for ExpressibleByIntegerLiteral.IntegerLiteralType);
  MEMORY[0x1F4188790](v191);
  uint64_t v190 = (char *)&v173 - v13;
  uint64_t v194 = swift_checkMetadataState(0, (uint64_t)AssociatedTypeWitness);
  uint64_t v196 = *(v194 - 1);
  uint64_t v14 = MEMORY[0x1F4188790](v194);
  uint64_t v179 = (char *)&v173 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = MEMORY[0x1F4188790](v14);
  uint64_t v180 = (char *)&v173 - v17;
  uint64_t v18 = MEMORY[0x1F4188790](v16);
  unint64_t v189 = (char *)&v173 - v19;
  uint64_t v20 = MEMORY[0x1F4188790](v18);
  uint64_t v181 = (uint64_t)&v173 - v21;
  uint64_t v22 = MEMORY[0x1F4188790](v20);
  unint64_t v182 = (char *)&v173 - v23;
  uint64_t v24 = MEMORY[0x1F4188790](v22);
  uint64_t v195 = (char *)&v173 - v25;
  uint64_t v26 = MEMORY[0x1F4188790](v24);
  long long v203 = (char *)&v173 - v27;
  uint64_t v28 = *(void *)(v10 - 8);
  uint64_t v29 = MEMORY[0x1F4188790](v26);
  Swift::String::Index v185 = (char *)&v173 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = MEMORY[0x1F4188790](v29);
  uint64_t v193 = (char *)&v173 - v32;
  MEMORY[0x1F4188790](v31);
  uint64_t v34 = (char *)&v173 - v33;
  uint64_t v200 = a4;
  uint64_t v197 = a5;
  unint64_t v35 = type metadata accessor for ClosedRange<>.Index(0, v10, a4, a5);
  uint64_t v36 = (uint64_t)*(v35 - 1);
  uint64_t v37 = MEMORY[0x1F4188790](v35);
  unint64_t v39 = (char *)&v173 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v37);
  uint64_t v41 = (char *)&v173 - v40;
  uint64_t v42 = *(void (**)(char *))(v36 + 16);
  uint64_t v43 = v199;
  v42((char *)&v173 - v40);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48))(v41, 1, v10) != 1)
  {
    uint64_t v47 = *(void (**)(char *, char *, uint64_t))(v28 + 32);
    uint64_t v175 = v28 + 32;
    v47(v34, v41, v10);
    uint64_t v48 = &v201[*(int *)(v202 + 36)];
    uint64_t v49 = v200;
    uint64_t v50 = *(void (**)(char *, uint64_t, uint64_t))(v200 + 40);
    unint64_t v51 = v203;
    Swift::String::Index v184 = v34;
    v50(v48, v10, v200);
    uint64_t v52 = *(void *)(v197 + 8);
    char v53 = *(uint64_t (**)(uint64_t *, uint64_t))(v52 + 64);
    uint64_t v54 = (uint64_t)v194;
    char v55 = v53(v194, v52);
    uint64_t v183 = v28;
    uint64_t v56 = v49;
    char v174 = (void (*)(uint64_t, char *, uint64_t))v47;
    uint64_t v178 = v52 + 64;
    unint64_t v177 = (uint64_t (*)(uint64_t, uint64_t))v53;
    if (v55)
    {
      size_t v176 = *(uint64_t (**)(uint64_t, uint64_t))(v52 + 128);
      uint64_t v57 = v176(v54, v52);
      if (v57 < 64)
      {
        uint64_t v60 = v196;
LABEL_17:
        unint64_t v69 = v195;
        (*(void (**)(char *, char *, uint64_t))(v60 + 16))(v195, v51, v54);
        uint64_t v82 = (*(uint64_t (**)(uint64_t, uint64_t))(v52 + 120))(v54, v52);
        uint64_t v83 = v60 + 8;
        char v84 = *(void (**)(char *, uint64_t))(v60 + 8);
        uint64_t v76 = v52;
        uint64_t v77 = v83 & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
        uint64_t v199 = v84;
        uint64_t v78 = ((uint64_t (*)(char *, uint64_t))v84)(v69, v54);
        uint64_t v74 = v204;
        BOOL v85 = v82 < v204;
LABEL_18:
        uint64_t v81 = v183;
        if (!v85) {
          goto LABEL_19;
        }
        goto LABEL_23;
      }
      uint64_t v65 = v204;
      uint64_t v205 = v204;
      uint64_t v71 = *(void (**)(uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v52 + 96);
      unint64_t v72 = lazy protocol witness table accessor for type Int and conformance Int(v57, v58, v59);
      unint64_t v69 = v195;
      v71(&v205, &type metadata for Int, v72, v54, v52);
      uint64_t v70 = v49;
    }
    else
    {
      char v61 = v53((uint64_t *)v54, v52);
      size_t v176 = *(uint64_t (**)(uint64_t, uint64_t))(v52 + 128);
      uint64_t v62 = v176(v54, v52);
      uint64_t v60 = v196;
      if ((v61 & 1) == 0)
      {
        if (v62 < 64) {
          goto LABEL_17;
        }
        uint64_t v144 = v181;
        uint64_t v145 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v196 + 16))(v181, v51, v54);
        uint64_t v74 = v204;
        if (v204 <= 0)
        {
          uint64_t v171 = v52;
          uint64_t v77 = (v60 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
          uint64_t v199 = *(void (**)(char *, uint64_t))(v60 + 8);
          uint64_t v78 = ((uint64_t (*)(uint64_t, uint64_t))v199)(v144, v54);
          uint64_t v76 = v171;
          unint64_t v69 = v195;
          uint64_t v81 = v183;
          goto LABEL_19;
        }
        uint64_t v205 = v204;
        uint64_t v148 = v144;
        uint64_t v149 = v56;
        unint64_t v150 = *(void (**)(uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v52 + 96);
        unint64_t v151 = lazy protocol witness table accessor for type Int and conformance Int(v145, v146, v147);
        unint64_t v69 = v195;
        v150(&v205, &type metadata for Int, v151, v54, v52);
        uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v149, v10, v54, (uint64_t)&protocol requirements base descriptor for Strideable, associated conformance descriptor for Strideable.Strideable.Stride: Comparable);
        char v75 = (*(uint64_t (**)(uint64_t, char *, uint64_t, uint64_t))(AssociatedConformanceWitness + 16))(v144, v69, v54, AssociatedConformanceWitness);
        unint64_t v153 = *(void (**)(char *, uint64_t))(v196 + 8);
        uint64_t v76 = v52;
        uint64_t v77 = (v196 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
        v153(v69, v54);
        uint64_t v199 = v153;
        uint64_t v78 = ((uint64_t (*)(uint64_t, uint64_t))v153)(v148, v54);
        uint64_t v74 = v204;
LABEL_14:
        uint64_t v81 = v183;
        if ((v75 & 1) == 0)
        {
LABEL_19:
          uint64_t v205 = v74;
          uint64_t v197 = v77;
          uint64_t v86 = v200;
          unint64_t v87 = *(void (**)(uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v76 + 88);
          unint64_t v88 = lazy protocol witness table accessor for type Int and conformance Int(v78, v79, v80);
          v87(&v205, &type metadata for Int, v88, v54, v76);
          unint64_t v89 = v193;
          (*(void (**)(char *, uint64_t, uint64_t))(v86 + 48))(v69, v10, v86);
          v199(v69, v54);
          unint64_t v90 = v185;
          (*(void (**)(char *, char *, uint64_t))(v81 + 16))(v185, v89, v10);
          uint64_t v92 = v186;
          uint64_t v91 = v187;
          uint64_t v93 = v202;
          (*(void (**)(char *, char *, uint64_t))(v187 + 16))(v186, v201, v202);
          uint64_t v94 = v10;
          char v95 = (*(uint64_t (**)(char *, char *, uint64_t))(*(void *)(v86 + 8) + 32))(v90, v92, v10);
          unint64_t v96 = v199;
          if ((v95 & 1) == 0) {
            _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Advancing past start index", 26, 2, "Swift/ClosedRange.swift", 23, 2, 0xFBuLL, 0);
          }
          (*(void (**)(char *, uint64_t))(v91 + 8))(v92, v93);
          uint64_t v97 = *(void (**)(char *, uint64_t))(v81 + 8);
          v97(v90, v94);
          v96(v203, v54);
          v97(v184, v94);
          uint64_t v98 = v198;
          v174(v198, v193, v94);
          return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v81 + 56))(v98, 0, 1, v94);
        }
LABEL_23:
        uint64_t v181 = v10;
        char v109 = v191;
        uint64_t v110 = v192;
        uint64_t v111 = swift_getAssociatedConformanceWitness((uint64_t)v192, v54, (uint64_t)v191, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
        uint64_t v112 = v76;
        uint64_t v113 = v190;
        uint64_t v201 = *(char **)(v111 + 8);
        uint64_t v202 = v111;
        ((void (*)(void *, uint64_t, const char *))v201)(&unk_18162B0C8, 257, v109);
        long long v114 = v110;
        uint64_t v115 = v110[3];
        ((void (*)(char *, uint64_t, int **))v115)(v113, v54, v114);
        uint64_t v116 = v189;
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v188 + 8) + 40))(v203, v69, v54);
        uint64_t v197 = v77;
        v199(v69, v54);
        uint64_t v117 = v76;
        uint64_t v118 = v177;
        uint64_t v119 = v112;
        if (v177(v54, v117))
        {
          uint64_t v120 = v176(v54, v112);
          if (v120 < 64)
          {
            uint64_t v123 = (*(uint64_t (**)(uint64_t, uint64_t))(v112 + 120))(v54, v112);
            char v124 = v199;
            v199(v116, v54);
            uint64_t v125 = v203;
            BOOL v126 = v123 == v204;
            uint64_t v127 = v183;
            goto LABEL_35;
          }
          uint64_t v205 = v204;
          unint64_t v139 = *(void (**)(uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v112 + 96);
          unint64_t v140 = lazy protocol witness table accessor for type Int and conformance Int(v120, v121, v122);
          unint64_t v141 = v195;
          v139(&v205, &type metadata for Int, v140, v54, v119);
          uint64_t v135 = v181;
          uint64_t v142 = swift_getAssociatedConformanceWitness(v200, v181, v54, (uint64_t)&protocol requirements base descriptor for Strideable, associated conformance descriptor for Strideable.Strideable.Stride: Comparable);
          char v137 = (*(uint64_t (**)(char *, char *, uint64_t))(*(void *)(v142 + 8) + 8))(v116, v141, v54);
          unint64_t v138 = v141;
          goto LABEL_30;
        }
        char v128 = v118(v54, v112);
        uint64_t v129 = v176(v54, v119);
        if (v128)
        {
          unint64_t v132 = v195;
          if (v129 > 64)
          {
            uint64_t v205 = v204;
            unint64_t v133 = *(void (**)(uint64_t *, ValueMetadata *, unint64_t, uint64_t *, uint64_t))(v119 + 96);
            unint64_t v134 = lazy protocol witness table accessor for type Int and conformance Int(v129, v130, v131);
            uint64_t v54 = (uint64_t)v194;
            v133(&v205, &type metadata for Int, v134, v194, v119);
            uint64_t v135 = v181;
            uint64_t v136 = swift_getAssociatedConformanceWitness(v200, v181, v54, (uint64_t)&protocol requirements base descriptor for Strideable, associated conformance descriptor for Strideable.Strideable.Stride: Comparable);
            char v137 = (*(uint64_t (**)(char *, char *, uint64_t))(*(void *)(v136 + 8) + 8))(v116, v132, v54);
            unint64_t v138 = v132;
LABEL_30:
            char v124 = v199;
            v199(v138, v54);
            v124(v116, v54);
            uint64_t v127 = v183;
            uint64_t v125 = v203;
            if (v137) {
              goto LABEL_44;
            }
LABEL_52:
            unint64_t v172 = 256;
            goto LABEL_53;
          }
          uint64_t v173 = v119;
          unint64_t v154 = v190;
          ((void (*)(void *, uint64_t))v201)(&unk_18162B0B8, 256);
          uint64_t v54 = (uint64_t)v194;
          ((void (*)(char *, uint64_t *, int **))v115)(v154, v194, v192);
          uint64_t v135 = v181;
          uint64_t v155 = swift_getAssociatedConformanceWitness(v200, v181, v54, (uint64_t)&protocol requirements base descriptor for Strideable, associated conformance descriptor for Strideable.Strideable.Stride: Comparable);
          char v156 = (*(uint64_t (**)(char *, char *, uint64_t, uint64_t))(v155 + 32))(v116, v132, v54, v155);
          char v157 = v199;
          v199(v132, v54);
          uint64_t v158 = v180;
          (*(void (**)(char *, char *, uint64_t))(v196 + 32))(v180, v116, v54);
          if (v156)
          {
            uint64_t v159 = (*(uint64_t (**)(uint64_t))(v173 + 120))(v54);
            v157(v158, v54);
            uint64_t v125 = v203;
            uint64_t v127 = v183;
            char v124 = v157;
            if (v159 != v204) {
              goto LABEL_52;
            }
            goto LABEL_44;
          }
          uint64_t v179 = v158;
        }
        else
        {
          uint64_t v127 = v183;
          uint64_t v125 = v203;
          if (v129 < 64)
          {
            uint64_t v54 = (uint64_t)v194;
            uint64_t v143 = (*(uint64_t (**)(uint64_t *, uint64_t))(v119 + 120))(v194, v119);
            char v124 = v199;
            v199(v116, v54);
            BOOL v126 = v143 == v204;
LABEL_35:
            uint64_t v135 = v181;
            if (!v126) {
              goto LABEL_52;
            }
LABEL_44:
            v124(v125, v54);
            (*(void (**)(char *, uint64_t))(v127 + 8))(v184, v135);
            return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v127 + 56))(v198, 1, 1, v135);
          }
          unint64_t v160 = v179;
          uint64_t v54 = (uint64_t)v194;
          uint64_t v161 = (*(uint64_t (**)(char *, char *, uint64_t *))(v196 + 32))(v179, v116, v194);
          uint64_t v135 = v181;
          if ((v204 & 0x8000000000000000) == 0)
          {
            uint64_t v205 = v204;
            Swift::String::Index v164 = *(void (**)(uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v119 + 96);
            unint64_t v165 = lazy protocol witness table accessor for type Int and conformance Int(v161, v162, v163);
            Swift::String::Index v166 = v195;
            v164(&v205, &type metadata for Int, v165, v54, v119);
            uint64_t v167 = swift_getAssociatedConformanceWitness(v200, v135, v54, (uint64_t)&protocol requirements base descriptor for Strideable, associated conformance descriptor for Strideable.Strideable.Stride: Comparable);
            char v168 = (*(uint64_t (**)(char *, char *, uint64_t))(*(void *)(v167 + 8) + 8))(v160, v166, v54);
            char v124 = v199;
            v199(v166, v54);
            v124(v160, v54);
            if (v168) {
              goto LABEL_44;
            }
            goto LABEL_52;
          }
        }
        v199(v179, (uint64_t)v194);
        goto LABEL_52;
      }
      uint64_t v181 = v10;
      if (v62 <= 64)
      {
        uint64_t v173 = v52;
        unint64_t v100 = v191;
        uint64_t v99 = v192;
        uint64_t v101 = swift_getAssociatedConformanceWitness((uint64_t)v192, v54, (uint64_t)v191, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
        uint64_t v102 = v56;
        unint64_t v103 = v190;
        (*(void (**)(void *, uint64_t, const char *, uint64_t))(v101 + 8))(&unk_18162B0B8, 256, v100, v101);
        unint64_t v104 = v195;
        ((void (*)(char *, uint64_t, int **))v99[3])(v103, v54, v99);
        uint64_t v105 = swift_getAssociatedConformanceWitness(v102, v181, v54, (uint64_t)&protocol requirements base descriptor for Strideable, associated conformance descriptor for Strideable.Strideable.Stride: Comparable);
        LOBYTE(v99) = (*(uint64_t (**)(char *, char *, uint64_t, uint64_t))(v105 + 16))(v51, v104, v54, v105);
        uint64_t v106 = v196;
        uint64_t v77 = (v196 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
        uint64_t v199 = *(void (**)(char *, uint64_t))(v196 + 8);
        v199(v104, v54);
        uint64_t v107 = *(void (**)(char *, char *, uint64_t))(v106 + 16);
        unint64_t v108 = v182;
        v107(v182, v51, v54);
        if (v99)
        {
          v199(v108, v54);
          unint64_t v69 = v195;
          uint64_t v76 = v173;
          uint64_t v10 = v181;
          goto LABEL_23;
        }
        uint64_t v169 = v173;
        uint64_t v170 = (*(uint64_t (**)(uint64_t, uint64_t))(v173 + 120))(v54, v173);
        uint64_t v78 = ((uint64_t (*)(char *, uint64_t))v199)(v108, v54);
        uint64_t v74 = v204;
        BOOL v85 = v170 < v204;
        uint64_t v76 = v169;
        unint64_t v69 = v195;
        uint64_t v10 = v181;
        goto LABEL_18;
      }
      uint64_t v65 = v204;
      uint64_t v205 = v204;
      uint64_t v66 = v56;
      unint64_t v67 = *(void (**)(uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v52 + 96);
      unint64_t v68 = lazy protocol witness table accessor for type Int and conformance Int(v62, v63, v64);
      unint64_t v69 = v195;
      v67(&v205, &type metadata for Int, v68, v54, v52);
      uint64_t v70 = v66;
      uint64_t v10 = v181;
    }
    uint64_t v73 = swift_getAssociatedConformanceWitness(v70, v10, v54, (uint64_t)&protocol requirements base descriptor for Strideable, associated conformance descriptor for Strideable.Strideable.Stride: Comparable);
    uint64_t v74 = v65;
    char v75 = (*(uint64_t (**)(char *, char *, uint64_t, uint64_t))(v73 + 16))(v51, v69, v54, v73);
    uint64_t v76 = v52;
    uint64_t v77 = (v196 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    uint64_t v199 = *(void (**)(char *, uint64_t))(v196 + 8);
    uint64_t v78 = ((uint64_t (*)(char *, uint64_t))v199)(v69, v54);
    goto LABEL_14;
  }
  uint64_t v44 = v204;
  if (v204)
  {
    if (v204 < 0)
    {
      uint64_t v45 = v202;
      (*(void (**)(char *, char *, uint64_t))(v28 + 16))(v39, &v201[*(int *)(v202 + 36)], v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v28 + 56))(v39, 0, 1, v10);
      ClosedRange<>.index(_:offsetBy:)(v39, v44 + 1, v45, v200, v197);
      return (*(uint64_t (**)(char *, Class *))(v36 + 8))(v39, v35);
    }
    unint64_t v172 = 264;
LABEL_53:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Advancing past end index", 24, 2, "Swift/ClosedRange.swift", 23, 2, v172, 0);
  }
  return ((uint64_t (*)(uint64_t, void (*)(char *, uint64_t), Class *))v42)(v198, v43, v35);
}

BOOL static BinaryInteger.<= infix<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v87 = a2;
  uint64_t v88 = a1;
  uint64_t v82 = *(int ***)(*(void *)(a5 + 24) + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v82, a3, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, associated type descriptor for ExpressibleByIntegerLiteral.IntegerLiteralType);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v78 = (char *)&v73 - v10;
  uint64_t v77 = *(int ***)(*(void *)(a6 + 24) + 16);
  uint64_t v76 = swift_getAssociatedTypeWitness(0, v77, a4, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, associated type descriptor for ExpressibleByIntegerLiteral.IntegerLiteralType);
  uint64_t v11 = MEMORY[0x1F4188790](v76);
  char v75 = (char *)&v73 - v12;
  uint64_t v86 = *(void *)(a3 - 8);
  uint64_t v13 = MEMORY[0x1F4188790](v11);
  uint64_t v80 = (char *)&v73 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = MEMORY[0x1F4188790](v13);
  uint64_t v81 = (char *)&v73 - v16;
  uint64_t v17 = MEMORY[0x1F4188790](v15);
  char v84 = (char *)&v73 - v18;
  uint64_t v85 = *(void *)(a4 - 8);
  uint64_t v19 = MEMORY[0x1F4188790](v17);
  uint64_t v21 = (char *)&v73 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = MEMORY[0x1F4188790](v19);
  uint64_t v24 = (char *)&v73 - v23;
  MEMORY[0x1F4188790](v22);
  uint64_t v83 = (char *)&v73 - v25;
  uint64_t v26 = *(uint64_t (**)(uint64_t, uint64_t))(a6 + 64);
  int v27 = v26(a4, a6);
  if (((v27 ^ (*(unsigned int (**)(uint64_t, uint64_t))(a5 + 64))(a3, a5)) & 1) == 0)
  {
    uint64_t v39 = v87;
    uint64_t v40 = (*(uint64_t (**)(uint64_t, uint64_t))(a6 + 128))(a4, a6);
    uint64_t v41 = v88;
    BOOL v42 = v40 < (*(uint64_t (**)(uint64_t, uint64_t))(a5 + 128))(a3, a5);
    uint64_t v32 = v41;
    uint64_t v43 = v39;
    if (!v42)
    {
      uint64_t v46 = v84;
      (*(void (**)(char *, uint64_t, uint64_t))(v86 + 16))(v84, v32, a3);
      uint64_t v47 = v83;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t, uint64_t))(a6 + 96))(v46, a3, a5, a4, a6);
      char v36 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(void *)(*(void *)(a6 + 32) + 8) + 16))(v43, v47, a4);
      uint64_t v37 = *(void (**)(char *, uint64_t))(v85 + 8);
      uint64_t v38 = v47;
      goto LABEL_11;
    }
    uint64_t v44 = v83;
    (*(void (**)(char *, uint64_t, uint64_t))(v85 + 16))(v83, v39, a4);
    goto LABEL_10;
  }
  uint64_t v73 = v24;
  uint64_t v74 = v21;
  uint64_t v28 = v82;
  char v29 = v26(a4, a6);
  uint64_t v30 = v87;
  uint64_t v31 = (*(uint64_t (**)(uint64_t, uint64_t))(a6 + 128))(a4, a6);
  uint64_t v32 = v88;
  uint64_t v33 = (*(uint64_t (**)(uint64_t, uint64_t))(a5 + 128))(a3, a5);
  if ((v29 & 1) == 0)
  {
    if (v31 >= v33)
    {
      uint64_t v59 = AssociatedTypeWitness;
      uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness((uint64_t)v28, a3, (uint64_t)AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
      char v61 = v78;
      (*(void (**)(void *, uint64_t, const char *, uint64_t))(AssociatedConformanceWitness + 8))(&unk_18162B0B8, 256, v59, AssociatedConformanceWitness);
      uint64_t v62 = v84;
      ((void (*)(char *, uint64_t, int **))v28[3])(v61, a3, v28);
      LODWORD(v82) = (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(void *)(*(void *)(a5 + 32) + 8) + 40))(v32, v62, a3);
      uint64_t v63 = v30;
      uint64_t v64 = v86;
      uint64_t v65 = *(void (**)(char *, uint64_t))(v86 + 8);
      v65(v62, a3);
      uint64_t v66 = v85;
      unint64_t v67 = v74;
      (*(void (**)(char *, uint64_t, uint64_t))(v85 + 16))(v74, v63, a4);
      unint64_t v68 = v80;
      (*(void (**)(char *, uint64_t, uint64_t))(v64 + 16))(v80, v88, a3);
      if (v82)
      {
        unint64_t v69 = v83;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t, uint64_t))(a6 + 96))(v68, a3, a5, a4, a6);
        char v36 = (*(uint64_t (**)(char *, char *, uint64_t))(*(void *)(*(void *)(a6 + 32) + 8) + 16))(v67, v69, a4);
        uint64_t v70 = *(void (**)(char *, uint64_t))(v66 + 8);
        v70(v69, a4);
        v70(v67, a4);
      }
      else
      {
        v65(v68, a3);
        (*(void (**)(char *, uint64_t))(v66 + 8))(v67, a4);
        char v36 = 0;
      }
      return (v36 & 1) == 0;
    }
    uint64_t v44 = v83;
    (*(void (**)(char *, uint64_t, uint64_t))(v85 + 16))(v83, v30, a4);
LABEL_10:
    uint64_t v45 = v84;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t, uint64_t))(a5 + 96))(v44, a4, a6, a3, a5);
    char v36 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(*(void *)(a5 + 32) + 8) + 16))(v45, v32, a3);
    (*(void (**)(char *, uint64_t))(v86 + 8))(v45, a3);
    return (v36 & 1) == 0;
  }
  if (v33 < v31)
  {
    uint64_t v34 = v84;
    (*(void (**)(char *, uint64_t, uint64_t))(v86 + 16))(v84, v32, a3);
    unint64_t v35 = v83;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t, uint64_t))(a6 + 96))(v34, a3, a5, a4, a6);
    char v36 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(void *)(*(void *)(a6 + 32) + 8) + 16))(v30, v35, a4);
    uint64_t v37 = *(void (**)(char *, uint64_t))(v85 + 8);
    uint64_t v38 = v35;
LABEL_11:
    v37(v38, a4);
    return (v36 & 1) == 0;
  }
  uint64_t v49 = v76;
  uint64_t v50 = v77;
  uint64_t v51 = swift_getAssociatedConformanceWitness((uint64_t)v77, a4, (uint64_t)v76, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
  uint64_t v52 = v75;
  (*(void (**)(void *, uint64_t, const char *, uint64_t))(v51 + 8))(&unk_18162B0B8, 256, v49, v51);
  char v53 = v83;
  ((void (*)(char *, uint64_t, int **))v50[3])(v52, a4, v50);
  LOBYTE(v49) = (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(void *)(*(void *)(a6 + 32) + 8) + 16))(v30, v53, a4);
  uint64_t v54 = v85;
  char v55 = *(void (**)(char *, uint64_t))(v85 + 8);
  v55(v53, a4);
  uint64_t v56 = v73;
  (*(void (**)(void))(v54 + 16))();
  uint64_t v57 = v86;
  uint64_t v58 = v81;
  (*(void (**)(char *, uint64_t, uint64_t))(v86 + 16))(v81, v88, a3);
  if (v49)
  {
    (*(void (**)(char *, uint64_t))(v57 + 8))(v58, a3);
    v55(v56, a4);
    char v36 = 1;
  }
  else
  {
    uint64_t v71 = v84;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t, uint64_t))(a5 + 96))(v56, a4, a6, a3, a5);
    char v36 = (*(uint64_t (**)(char *, char *, uint64_t))(*(void *)(*(void *)(a5 + 32) + 8) + 16))(v71, v58, a3);
    unint64_t v72 = *(void (**)(char *, uint64_t))(v57 + 8);
    v72(v71, a3);
    v72(v58, a3);
  }
  return (v36 & 1) == 0;
}

unint64_t specialized numericCast<A, B>(_:)(unint64_t result)
{
  if ((result & 0x8000000000000000) != 0) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, 2, 0xD7BuLL, 0);
  }
  if (result >= 0x100) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Not enough bits to represent the passed value", 45, 2, "Swift/Integers.swift", 20, 2, 0xD7FuLL, 0);
  }
  return result;
}

uint64_t specialized numericCast<A, B>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v88 = *(int ***)(*(void *)(a3 + 24) + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v88, a2, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, associated type descriptor for ExpressibleByIntegerLiteral.IntegerLiteralType);
  uint64_t v6 = MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v86 = (char *)v84 - v7;
  uint64_t v8 = *(char **)(a2 - 8);
  uint64_t v9 = MEMORY[0x1F4188790](v6);
  unint64_t v89 = (char *)v84 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = MEMORY[0x1F4188790](v9);
  uint64_t v13 = (char *)v84 - v12;
  uint64_t v14 = MEMORY[0x1F4188790](v11);
  uint64_t v94 = (char *)v84 - v15;
  uint64_t v16 = MEMORY[0x1F4188790](v14);
  uint64_t v93 = (char *)v84 - v17;
  uint64_t v18 = MEMORY[0x1F4188790](v16);
  uint64_t v91 = (char *)v84 - v19;
  uint64_t v20 = MEMORY[0x1F4188790](v18);
  uint64_t v22 = (char *)v84 - v21;
  MEMORY[0x1F4188790](v20);
  uint64_t v24 = (char *)v84 - v23;
  unint64_t v96 = v8;
  uint64_t v25 = (void (*)(char *, uint64_t, uint64_t))*((void *)v8 + 2);
  v25((char *)v84 - v23, a1, a2);
  char v95 = *(uint64_t (**)(uint64_t, uint64_t))(a3 + 64);
  LOBYTE(a1) = v95(a2, a3);
  uint64_t v97 = (void (*)(char *, char *, uint64_t))v25;
  v25(v22, (uint64_t)v24, a2);
  uint64_t v92 = a3 + 64;
  if ((a1 & 1) == 0)
  {
    uint64_t v98 = (void (*)(char *, uint64_t))*((void *)v8 + 1);
    v98(v22, a2);
    uint64_t v38 = *(uint64_t (**)(uint64_t, uint64_t))(a3 + 128);
    uint64_t v39 = v38(a2, a3);
    goto LABEL_23;
  }
  uint64_t v85 = v13;
  unint64_t v90 = *(uint64_t (**)(uint64_t, uint64_t))(a3 + 128);
  uint64_t v26 = v90(a2, a3);
  uint64_t v28 = (void (*)(char *, uint64_t))*((void *)v8 + 1);
  int v27 = v8 + 8;
  uint64_t v98 = v28;
  v28(v22, a2);
  if (v26 <= 64) {
    goto LABEL_21;
  }
  v84[1] = v27;
  char v29 = v91;
  v97(v91, v24, a2);
  int64_t v100 = 0x8000000000000000;
  uint64_t v30 = v95;
  if ((v95(a2, a3) & 1) == 0)
  {
    char v40 = v30(a2, a3);
    uint64_t v41 = v90(a2, a3);
    if (v40)
    {
      if (v41 <= 64)
      {
        char v55 = AssociatedTypeWitness;
        uint64_t v56 = v88;
        uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness((uint64_t)v88, a2, (uint64_t)AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
        uint64_t v58 = v86;
        (*(void (**)(void *, uint64_t, const char *, uint64_t))(AssociatedConformanceWitness + 8))(&unk_18162B0B8, 256, v55, AssociatedConformanceWitness);
        uint64_t v59 = v93;
        ((void (*)(char *, uint64_t, int **))v56[3])(v58, a2, v56);
        uint64_t v34 = v91;
        char v60 = (*(uint64_t (**)(char *, char *, uint64_t))(*(void *)(*(void *)(a3 + 32) + 8) + 16))(v91, v59, a2);
        char v61 = v98;
        v98(v59, a2);
        uint64_t v62 = v89;
        v97(v89, v34, a2);
        if (v60)
        {
          v61(v62, a2);
          goto LABEL_39;
        }
        uint64_t v88 = (int **)v100;
        uint64_t v63 = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 120))(a2, a3);
        uint64_t v37 = v61;
        v61(v62, a2);
        BOOL v54 = v63 < (uint64_t)v88;
        goto LABEL_19;
      }
      uint64_t v44 = *(void (**)(int64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(a3 + 96);
      unint64_t v45 = lazy protocol witness table accessor for type Int and conformance Int(v41, v42, v43);
      uint64_t v46 = v93;
      v44(&v100, &type metadata for Int, v45, a2, a3);
      uint64_t v47 = v91;
      char v48 = (*(uint64_t (**)(char *, char *, uint64_t))(*(void *)(*(void *)(a3 + 32) + 8) + 16))(v91, v46, a2);
      uint64_t v49 = v46;
      uint64_t v34 = v47;
      goto LABEL_11;
    }
    if (v41 < 64)
    {
      char v53 = v93;
      uint64_t v34 = v91;
      v97(v93, v91, a2);
      uint64_t v36 = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 120))(a2, a3);
      uint64_t v37 = v98;
      v98(v53, a2);
      goto LABEL_16;
    }
    v98(v91, a2);
LABEL_21:
    uint64_t v13 = v85;
    goto LABEL_22;
  }
  uint64_t v31 = v90(a2, a3);
  if (v31 < 64)
  {
    uint64_t v34 = v29;
    unint64_t v35 = v93;
    v97(v93, v29, a2);
    uint64_t v36 = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 120))(a2, a3);
    uint64_t v37 = v98;
    v98(v35, a2);
LABEL_16:
    BOOL v54 = v36 < v100;
LABEL_19:
    uint64_t v13 = v85;
    if (!v54) {
      goto LABEL_20;
    }
LABEL_39:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Not enough bits to represent a signed value", 43, 2, "Swift/Integers.swift", 20, 2, 0xE61uLL, 0);
  }
  uint64_t v50 = *(void (**)(int64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(a3 + 96);
  unint64_t v51 = lazy protocol witness table accessor for type Int and conformance Int(v31, v32, v33);
  uint64_t v52 = v93;
  v50(&v100, &type metadata for Int, v51, a2, a3);
  char v48 = (*(uint64_t (**)(char *, char *, uint64_t))(*(void *)(*(void *)(a3 + 32) + 8) + 16))(v91, v52, a2);
  uint64_t v49 = v52;
  uint64_t v34 = v91;
LABEL_11:
  uint64_t v37 = v98;
  v98(v49, a2);
  uint64_t v13 = v85;
  if (v48) {
    goto LABEL_39;
  }
LABEL_20:
  v37(v34, a2);
LABEL_22:
  uint64_t v38 = v90;
  uint64_t v39 = v90(a2, a3);
LABEL_23:
  uint64_t v64 = v39;
  uint64_t v65 = v94;
  unint64_t v96 = v24;
  v97(v94, v24, a2);
  if (v64 < 65)
  {
    uint64_t v66 = v38;
    uint64_t v75 = v38(a2, a3);
    v98(v65, a2);
    if (v75 != 64 || (v95(a2, a3) & 1) != 0) {
      goto LABEL_36;
    }
  }
  else
  {
    uint64_t v66 = v38;
    v98(v65, a2);
  }
  v97(v13, v96, a2);
  int64_t v100 = 0x7FFFFFFFFFFFFFFFLL;
  char v67 = v95(a2, a3);
  uint64_t v68 = v66(a2, a3);
  if ((v67 & 1) == 0)
  {
    if (v68 >= 64)
    {
      uint64_t v99 = 0x7FFFFFFFFFFFFFFFLL;
      uint64_t v71 = v13;
      unint64_t v72 = *(void (**)(int64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(a3 + 96);
      unint64_t v73 = lazy protocol witness table accessor for type Int and conformance Int(v68, v69, v70);
      uint64_t v74 = &v99;
      goto LABEL_34;
    }
LABEL_33:
    uint64_t v76 = v93;
    v97(v93, v13, a2);
    (*(void (**)(uint64_t, uint64_t))(a3 + 120))(a2, a3);
    uint64_t v77 = v98;
    v98(v76, a2);
    v77(v13, a2);
    goto LABEL_36;
  }
  if (v68 <= 64) {
    goto LABEL_33;
  }
  uint64_t v71 = v13;
  unint64_t v72 = *(void (**)(int64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(a3 + 96);
  unint64_t v73 = lazy protocol witness table accessor for type Int and conformance Int(v68, v69, v70);
  uint64_t v74 = &v100;
LABEL_34:
  uint64_t v78 = v93;
  v72(v74, &type metadata for Int, v73, a2, a3);
  char v79 = (*(uint64_t (**)(char *, char *, uint64_t))(*(void *)(*(void *)(a3 + 32) + 8) + 16))(v78, v71, a2);
  uint64_t v80 = v98;
  v98(v78, a2);
  if (v79) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Not enough bits to represent the passed value", 45, 2, "Swift/Integers.swift", 20, 2, 0xE67uLL, 0);
  }
  v80(v71, a2);
LABEL_36:
  uint64_t v81 = v96;
  uint64_t v82 = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 120))(a2, a3);
  v98(v81, a2);
  return v82;
}

{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t (*v20)(uint64_t, uint64_t);
  const char *v21;
  int **v22;
  uint64_t AssociatedConformanceWitness;
  char *v24;
  char *v25;
  void (*v26)(char *, uint64_t);
  uint64_t (*v27)(uint64_t, uint64_t);
  char *v28;
  char v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(unint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v35;
  char *v36;
  char v37;
  void (*v38)(char *, uint64_t);
  char *v39;
  void (*v40)(unint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v41;
  char *v42;
  char v43;
  const char *v44;
  int **v45;
  uint64_t v46;
  char *v47;
  char *v48;
  unint64_t v49;
  char *v50;
  unint64_t v51;
  char *v52;
  unint64_t v53;
  uint64_t v54;
  char *v56;
  char *v57;
  char *v58;
  char *v59;
  const char *AssociatedTypeWitness;
  int **v61;
  char *v62;
  void (*v63)(char *, uint64_t, uint64_t);
  uint64_t v64;
  unint64_t v65;

  char v61 = *(int ***)(*(void *)(a3 + 24) + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v61, a2, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, associated type descriptor for ExpressibleByIntegerLiteral.IntegerLiteralType);
  uint64_t v6 = MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v59 = (char *)&v56 - v7;
  uint64_t v8 = *(void *)(a2 - 8);
  uint64_t v9 = MEMORY[0x1F4188790](v6);
  uint64_t v56 = (char *)&v56 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = MEMORY[0x1F4188790](v9);
  uint64_t v58 = (char *)&v56 - v12;
  uint64_t v13 = MEMORY[0x1F4188790](v11);
  uint64_t v62 = (char *)&v56 - v14;
  uint64_t v15 = MEMORY[0x1F4188790](v13);
  uint64_t v17 = (char *)&v56 - v16;
  MEMORY[0x1F4188790](v15);
  uint64_t v19 = (char *)&v56 - v18;
  uint64_t v64 = v8;
  uint64_t v63 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
  v63((char *)&v56 - v18, a1, a2);
  uint64_t v20 = *(uint64_t (**)(uint64_t, uint64_t))(a3 + 64);
  if (v20(a2, a3))
  {
    uint64_t v57 = v19;
    v63(v17, (uint64_t)v19, a2);
    uint64_t v21 = AssociatedTypeWitness;
    uint64_t v22 = v61;
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness((uint64_t)v61, a2, (uint64_t)AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
    uint64_t v24 = v59;
    (*(void (**)(void *, uint64_t, const char *, uint64_t))(AssociatedConformanceWitness + 8))(&unk_18162B0B8, 256, v21, AssociatedConformanceWitness);
    uint64_t v25 = v62;
    ((void (*)(char *, uint64_t, int **))v22[3])(v24, a2, v22);
    LOBYTE(v21) = (*(uint64_t (**)(char *, char *, uint64_t))(*(void *)(*(void *)(a3 + 32) + 8) + 32))(v17, v25, a2);
    uint64_t v26 = *(void (**)(char *, uint64_t))(v64 + 8);
    v26(v25, a2);
    if ((v21 & 1) == 0) {
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, 2, 0xD7BuLL, 0);
    }
    v26(v17, a2);
    uint64_t v19 = v57;
  }
  int v27 = *(uint64_t (**)(uint64_t, uint64_t))(a3 + 128);
  if (v27(a2, a3) >= 64)
  {
    uint64_t v28 = v58;
    v63(v58, (uint64_t)v19, a2);
    uint64_t v65 = -1;
    char v29 = v20(a2, a3);
    uint64_t v30 = v28;
    LOBYTE(v28) = v29;
    uint64_t v31 = v27(a2, a3);
    if (v28)
    {
      uint64_t v57 = v19;
      if (v31 > 64)
      {
        uint64_t v34 = *(void (**)(unint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(a3 + 96);
        unint64_t v35 = lazy protocol witness table accessor for type UInt and conformance UInt(v31, v32, v33);
        uint64_t v36 = v62;
        v34(&v65, &type metadata for UInt, v35, a2, a3);
        uint64_t v37 = (*(uint64_t (**)(char *, char *, uint64_t))(*(void *)(*(void *)(a3 + 32) + 8) + 16))(v36, v30, a2);
        uint64_t v38 = *(void (**)(char *, uint64_t))(v64 + 8);
        v38(v36, a2);
        uint64_t v19 = v57;
        if (v37) {
          goto LABEL_21;
        }
        goto LABEL_17;
      }
      uint64_t v44 = AssociatedTypeWitness;
      unint64_t v45 = v61;
      uint64_t v46 = swift_getAssociatedConformanceWitness((uint64_t)v61, a2, (uint64_t)AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
      uint64_t v47 = v59;
      (*(void (**)(void *, uint64_t, const char *, uint64_t))(v46 + 8))(&unk_18162B0B8, 256, v44, v46);
      char v48 = v62;
      ((void (*)(char *, uint64_t, int **))v45[3])(v47, a2, v45);
      LOBYTE(v44) = (*(uint64_t (**)(char *, char *, uint64_t))(*(void *)(*(void *)(a3 + 32) + 8) + 40))(v30, v48, a2);
      uint64_t v38 = *(void (**)(char *, uint64_t))(v64 + 8);
      v38(v48, a2);
      uint64_t v49 = v65;
      uint64_t v50 = v56;
      v63(v56, (uint64_t)v30, a2);
      if (v44)
      {
        unint64_t v51 = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 120))(a2, a3);
        v38(v50, a2);
        uint64_t v19 = v57;
        uint64_t v30 = v58;
        if (v49 < v51) {
LABEL_21:
        }
          _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Not enough bits to represent the passed value", 45, 2, "Swift/Integers.swift", 20, 2, 0xD7FuLL, 0);
      }
      else
      {
        v38(v50, a2);
        uint64_t v19 = v57;
        uint64_t v30 = v58;
      }
    }
    else
    {
      uint64_t v39 = v19;
      if (v31 <= 64)
      {
        uint64_t v52 = v62;
        v63(v62, (uint64_t)v30, a2);
        char v53 = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 120))(a2, a3);
        uint64_t v38 = *(void (**)(char *, uint64_t))(v64 + 8);
        v38(v52, a2);
        if (v65 < v53) {
          goto LABEL_21;
        }
      }
      else
      {
        char v40 = *(void (**)(unint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(a3 + 96);
        uint64_t v41 = lazy protocol witness table accessor for type UInt and conformance UInt(v31, v32, v33);
        uint64_t v42 = v62;
        v40(&v65, &type metadata for UInt, v41, a2, a3);
        uint64_t v43 = (*(uint64_t (**)(char *, char *, uint64_t))(*(void *)(*(void *)(a3 + 32) + 8) + 16))(v42, v30, a2);
        uint64_t v38 = *(void (**)(char *, uint64_t))(v64 + 8);
        v38(v42, a2);
        if (v43) {
          goto LABEL_21;
        }
      }
      uint64_t v19 = v39;
    }
LABEL_17:
    v38(v30, a2);
  }
  BOOL v54 = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 120))(a2, a3);
  (*(void (**)(char *, uint64_t))(v64 + 8))(v19, a2);
  return v54;
}

{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t (*v20)(uint64_t, uint64_t);
  const char *v21;
  int **v22;
  uint64_t AssociatedConformanceWitness;
  char *v24;
  char *v25;
  void (*v26)(char *, uint64_t);
  uint64_t (*v27)(uint64_t, uint64_t);
  char *v28;
  char v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(unsigned __int8 *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v35;
  char *v36;
  char v37;
  void (*v38)(char *, uint64_t);
  char *v39;
  void (*v40)(unsigned __int8 *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v41;
  char *v42;
  char v43;
  const char *v44;
  int **v45;
  uint64_t v46;
  char *v47;
  char *v48;
  unsigned int v49;
  char *v50;
  unsigned __int8 v51;
  char *v52;
  unsigned __int8 v53;
  uint64_t v54;
  char *v56;
  char *v57;
  char *v58;
  char *v59;
  const char *AssociatedTypeWitness;
  int **v61;
  char *v62;
  void (*v63)(char *, uint64_t, uint64_t);
  uint64_t v64;
  unsigned __int8 v65;

  char v61 = *(int ***)(*(void *)(a3 + 24) + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v61, a2, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, associated type descriptor for ExpressibleByIntegerLiteral.IntegerLiteralType);
  uint64_t v6 = MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v59 = (char *)&v56 - v7;
  uint64_t v8 = *(void *)(a2 - 8);
  uint64_t v9 = MEMORY[0x1F4188790](v6);
  uint64_t v56 = (char *)&v56 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = MEMORY[0x1F4188790](v9);
  uint64_t v58 = (char *)&v56 - v12;
  uint64_t v13 = MEMORY[0x1F4188790](v11);
  uint64_t v62 = (char *)&v56 - v14;
  uint64_t v15 = MEMORY[0x1F4188790](v13);
  uint64_t v17 = (char *)&v56 - v16;
  MEMORY[0x1F4188790](v15);
  uint64_t v19 = (char *)&v56 - v18;
  uint64_t v64 = v8;
  uint64_t v63 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
  v63((char *)&v56 - v18, a1, a2);
  uint64_t v20 = *(uint64_t (**)(uint64_t, uint64_t))(a3 + 64);
  if (v20(a2, a3))
  {
    uint64_t v57 = v19;
    v63(v17, (uint64_t)v19, a2);
    uint64_t v21 = AssociatedTypeWitness;
    uint64_t v22 = v61;
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness((uint64_t)v61, a2, (uint64_t)AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
    uint64_t v24 = v59;
    (*(void (**)(uint64_t *, uint64_t, const char *, uint64_t))(AssociatedConformanceWitness + 8))(&qword_18162B0B8, 256, v21, AssociatedConformanceWitness);
    uint64_t v25 = v62;
    ((void (*)(char *, uint64_t, int **))v22[3])(v24, a2, v22);
    LOBYTE(v21) = (*(uint64_t (**)(char *, char *, uint64_t))(*(void *)(*(void *)(a3 + 32) + 8) + 32))(v17, v25, a2);
    uint64_t v26 = *(void (**)(char *, uint64_t))(v64 + 8);
    v26(v25, a2);
    if ((v21 & 1) == 0) {
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, 2, 0xD7BuLL, 0);
    }
    v26(v17, a2);
    uint64_t v19 = v57;
  }
  int v27 = *(uint64_t (**)(uint64_t, uint64_t))(a3 + 128);
  if (v27(a2, a3) >= 8)
  {
    uint64_t v28 = v58;
    v63(v58, (uint64_t)v19, a2);
    uint64_t v65 = -1;
    char v29 = v20(a2, a3);
    uint64_t v30 = v28;
    LOBYTE(v28) = v29;
    uint64_t v31 = v27(a2, a3);
    if (v28)
    {
      uint64_t v57 = v19;
      if (v31 > 8)
      {
        uint64_t v34 = *(void (**)(unsigned __int8 *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(a3 + 96);
        unint64_t v35 = lazy protocol witness table accessor for type UInt8 and conformance UInt8(v31, v32, v33);
        uint64_t v36 = v62;
        v34(&v65, &type metadata for UInt8, v35, a2, a3);
        uint64_t v37 = (*(uint64_t (**)(char *, char *, uint64_t))(*(void *)(*(void *)(a3 + 32) + 8) + 16))(v36, v30, a2);
        uint64_t v38 = *(void (**)(char *, uint64_t))(v64 + 8);
        v38(v36, a2);
        uint64_t v19 = v57;
        if (v37) {
          goto LABEL_21;
        }
        goto LABEL_17;
      }
      uint64_t v44 = AssociatedTypeWitness;
      unint64_t v45 = v61;
      uint64_t v46 = swift_getAssociatedConformanceWitness((uint64_t)v61, a2, (uint64_t)AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
      uint64_t v47 = v59;
      (*(void (**)(uint64_t *, uint64_t, const char *, uint64_t))(v46 + 8))(&qword_18162B0B8, 256, v44, v46);
      char v48 = v62;
      ((void (*)(char *, uint64_t, int **))v45[3])(v47, a2, v45);
      LOBYTE(v44) = (*(uint64_t (**)(char *, char *, uint64_t))(*(void *)(*(void *)(a3 + 32) + 8) + 40))(v30, v48, a2);
      uint64_t v38 = *(void (**)(char *, uint64_t))(v64 + 8);
      v38(v48, a2);
      uint64_t v49 = v65;
      uint64_t v50 = v56;
      v63(v56, (uint64_t)v30, a2);
      if (v44)
      {
        unint64_t v51 = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 120))(a2, a3);
        v38(v50, a2);
        uint64_t v19 = v57;
        uint64_t v30 = v58;
        if (v49 < v51) {
LABEL_21:
        }
          _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Not enough bits to represent the passed value", 45, 2, "Swift/Integers.swift", 20, 2, 0xD7FuLL, 0);
      }
      else
      {
        v38(v50, a2);
        uint64_t v19 = v57;
        uint64_t v30 = v58;
      }
    }
    else
    {
      uint64_t v39 = v19;
      if (v31 <= 8)
      {
        uint64_t v52 = v62;
        v63(v62, (uint64_t)v30, a2);
        char v53 = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 120))(a2, a3);
        uint64_t v38 = *(void (**)(char *, uint64_t))(v64 + 8);
        v38(v52, a2);
        if (v65 < v53) {
          goto LABEL_21;
        }
      }
      else
      {
        char v40 = *(void (**)(unsigned __int8 *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(a3 + 96);
        uint64_t v41 = lazy protocol witness table accessor for type UInt8 and conformance UInt8(v31, v32, v33);
        uint64_t v42 = v62;
        v40(&v65, &type metadata for UInt8, v41, a2, a3);
        uint64_t v43 = (*(uint64_t (**)(char *, char *, uint64_t))(*(void *)(*(void *)(a3 + 32) + 8) + 16))(v42, v30, a2);
        uint64_t v38 = *(void (**)(char *, uint64_t))(v64 + 8);
        v38(v42, a2);
        if (v43) {
          goto LABEL_21;
        }
      }
      uint64_t v19 = v39;
    }
LABEL_17:
    v38(v30, a2);
  }
  BOOL v54 = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 120))(a2, a3);
  (*(void (**)(char *, uint64_t))(v64 + 8))(v19, a2);
  return v54;
}

uint64_t numericCast<A, B>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  MEMORY[0x1F4188790](a1);
  uint64_t v10 = (char *)&v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v11 + 16))(v10);
  return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t, uint64_t))(a5 + 88))(v10, a2, a4, a3, a5);
}

uint64_t static BinaryInteger.== infix<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v85 = a1;
  uint64_t v86 = a2;
  uint64_t v80 = *(int ***)(*(void *)(a6 + 24) + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v80, a4, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, associated type descriptor for ExpressibleByIntegerLiteral.IntegerLiteralType);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v76 = (char *)&v71 - v10;
  uint64_t v75 = *(int ***)(*(void *)(a5 + 24) + 16);
  uint64_t v74 = swift_getAssociatedTypeWitness(0, v75, a3, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, associated type descriptor for ExpressibleByIntegerLiteral.IntegerLiteralType);
  uint64_t v11 = MEMORY[0x1F4188790](v74);
  unint64_t v73 = (char *)&v71 - v12;
  uint64_t v84 = *(void *)(a4 - 8);
  uint64_t v13 = MEMORY[0x1F4188790](v11);
  uint64_t v78 = (char *)&v71 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = MEMORY[0x1F4188790](v13);
  char v79 = (char *)&v71 - v16;
  uint64_t v17 = MEMORY[0x1F4188790](v15);
  uint64_t v82 = (char *)&v71 - v18;
  uint64_t v83 = *(void *)(a3 - 8);
  uint64_t v19 = MEMORY[0x1F4188790](v17);
  uint64_t v21 = (char *)&v71 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = MEMORY[0x1F4188790](v19);
  uint64_t v24 = (char *)&v71 - v23;
  MEMORY[0x1F4188790](v22);
  uint64_t v81 = (char *)&v71 - v25;
  uint64_t v26 = *(uint64_t (**)(uint64_t, uint64_t))(a5 + 64);
  int v27 = v26(a3, a5);
  if (((v27 ^ (*(unsigned int (**)(uint64_t, uint64_t))(a6 + 64))(a4, a6)) & 1) == 0)
  {
    uint64_t v37 = v85;
    uint64_t v38 = (*(uint64_t (**)(uint64_t, uint64_t))(a5 + 128))(a3, a5);
    uint64_t v39 = v86;
    BOOL v40 = v38 < (*(uint64_t (**)(uint64_t, uint64_t))(a6 + 128))(a4, a6);
    uint64_t v32 = v39;
    uint64_t v41 = v37;
    if (!v40)
    {
      uint64_t v44 = v82;
      (*(void (**)(char *, uint64_t, uint64_t))(v84 + 16))(v82, v32, a4);
      unint64_t v45 = v81;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t, uint64_t))(a5 + 96))(v44, a4, a6, a3, a5);
      char v36 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(void *)(*(void *)(a5 + 16) + 8) + 8))(v41, v45, a3);
      (*(void (**)(char *, uint64_t))(v83 + 8))(v45, a3);
      return v36 & 1;
    }
    uint64_t v42 = v81;
    (*(void (**)(char *, uint64_t, uint64_t))(v83 + 16))(v81, v37, a3);
    goto LABEL_10;
  }
  uint64_t v71 = v24;
  unint64_t v72 = v21;
  uint64_t v28 = v80;
  char v29 = v26(a3, a5);
  uint64_t v30 = v85;
  uint64_t v31 = (*(uint64_t (**)(uint64_t, uint64_t))(a5 + 128))(a3, a5);
  uint64_t v32 = v86;
  uint64_t v33 = (*(uint64_t (**)(uint64_t, uint64_t))(a6 + 128))(a4, a6);
  if ((v29 & 1) == 0)
  {
    if (v31 >= v33)
    {
      uint64_t v58 = AssociatedTypeWitness;
      uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness((uint64_t)v28, a4, (uint64_t)AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
      char v60 = v76;
      (*(void (**)(void *, uint64_t, const char *, uint64_t))(AssociatedConformanceWitness + 8))(&unk_18162B0B8, 256, v58, AssociatedConformanceWitness);
      char v61 = v82;
      ((void (*)(char *, uint64_t, int **))v28[3])(v60, a4, v28);
      LODWORD(v8_assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000034, 0x80000001816E2880, "Swift/Codable.swift", 19, 2, 0x11F9uLL, 0) = (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(void *)(*(void *)(a6 + 32) + 8) + 32))(v32, v61, a4);
      uint64_t v62 = v30;
      uint64_t v63 = v84;
      uint64_t v64 = *(void (**)(char *, uint64_t))(v84 + 8);
      v64(v61, a4);
      uint64_t v65 = v83;
      uint64_t v66 = v72;
      (*(void (**)(char *, uint64_t, uint64_t))(v83 + 16))(v72, v62, a3);
      char v67 = v78;
      (*(void (**)(char *, uint64_t, uint64_t))(v63 + 16))(v78, v86, a4);
      if (v80)
      {
        uint64_t v68 = v81;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t, uint64_t))(a5 + 96))(v67, a4, a6, a3, a5);
        char v36 = (*(uint64_t (**)(char *, char *, uint64_t))(*(void *)(*(void *)(a5 + 16) + 8) + 8))(v66, v68, a3);
        uint64_t v69 = *(void (**)(char *, uint64_t))(v65 + 8);
        v69(v68, a3);
        v69(v66, a3);
        return v36 & 1;
      }
      v64(v67, a4);
      (*(void (**)(char *, uint64_t))(v65 + 8))(v66, a3);
      goto LABEL_17;
    }
    uint64_t v42 = v81;
    (*(void (**)(char *, uint64_t, uint64_t))(v83 + 16))(v81, v30, a3);
LABEL_10:
    uint64_t v43 = v82;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t, uint64_t))(a6 + 96))(v42, a3, a5, a4, a6);
    char v36 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(*(void *)(a6 + 16) + 8) + 8))(v43, v32, a4);
    (*(void (**)(char *, uint64_t))(v84 + 8))(v43, a4);
    return v36 & 1;
  }
  if (v33 >= v31)
  {
    uint64_t v46 = v74;
    uint64_t v47 = v75;
    uint64_t v48 = swift_getAssociatedConformanceWitness((uint64_t)v75, a3, (uint64_t)v74, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
    uint64_t v49 = v73;
    (*(void (**)(void *, uint64_t, const char *, uint64_t))(v48 + 8))(&unk_18162B0B8, 256, v46, v48);
    uint64_t v50 = v81;
    ((void (*)(char *, uint64_t, int **))v47[3])(v49, a3, v47);
    LOBYTE(v46) = (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(void *)(*(void *)(a5 + 32) + 8) + 32))(v30, v50, a3);
    uint64_t v51 = v83;
    uint64_t v52 = *(void (**)(char *, uint64_t))(v83 + 8);
    v52(v50, a3);
    char v53 = v71;
    (*(void (**)(void))(v51 + 16))();
    uint64_t v54 = v84;
    char v55 = v79;
    (*(void (**)(char *, uint64_t, uint64_t))(v84 + 16))(v79, v86, a4);
    if (v46)
    {
      uint64_t v56 = v82;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t, uint64_t))(a6 + 96))(v53, a3, a5, a4, a6);
      char v36 = (*(uint64_t (**)(char *, char *, uint64_t))(*(void *)(*(void *)(a6 + 16) + 8) + 8))(v56, v55, a4);
      uint64_t v57 = *(void (**)(char *, uint64_t))(v54 + 8);
      v57(v56, a4);
      v57(v55, a4);
      return v36 & 1;
    }
    (*(void (**)(char *, uint64_t))(v54 + 8))(v55, a4);
    v52(v53, a3);
LABEL_17:
    char v36 = 0;
    return v36 & 1;
  }
  uint64_t v34 = v82;
  (*(void (**)(char *, uint64_t, uint64_t))(v84 + 16))(v82, v32, a4);
  unint64_t v35 = v81;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t, uint64_t))(a5 + 96))(v34, a4, a6, a3, a5);
  char v36 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(void *)(*(void *)(a5 + 16) + 8) + 8))(v30, v35, a3);
  (*(void (**)(char *, uint64_t))(v83 + 8))(v35, a3);
  return v36 & 1;
}

uint64_t ClosedRange<>.distance(from:to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v56 = a3;
  uint64_t v66 = a1;
  uint64_t v67 = a2;
  uint64_t v7 = *(void *)(a3 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, (int **)a4, v7, (uint64_t)&protocol requirements base descriptor for Strideable, associated type descriptor for Strideable.Stride);
  uint64_t v61 = *(void *)(swift_getAssociatedConformanceWitness(a4, v7, (uint64_t)AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Strideable, associated conformance descriptor for Strideable.Strideable.Stride: SignedNumeric)+ 8);
  uint64_t v58 = *(int ***)(v61 + 16);
  uint64_t v54 = swift_getAssociatedTypeWitness(0, v58, (uint64_t)AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, associated type descriptor for ExpressibleByIntegerLiteral.IntegerLiteralType);
  MEMORY[0x1F4188790](v54);
  char v55 = (char *)&v54 - v9;
  uint64_t v10 = swift_checkMetadataState(0, (uint64_t)AssociatedTypeWitness);
  uint64_t v63 = *(v10 - 1);
  uint64_t v64 = v10;
  uint64_t v11 = MEMORY[0x1F4188790](v10);
  uint64_t v59 = (char *)&v54 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = MEMORY[0x1F4188790](v11);
  char v60 = (char *)&v54 - v14;
  uint64_t v15 = MEMORY[0x1F4188790](v13);
  uint64_t v62 = (char *)&v54 - v16;
  uint64_t v17 = *(void **)(v7 - 8);
  uint64_t v18 = MEMORY[0x1F4188790](v15);
  uint64_t v20 = (char *)&v54 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v18);
  uint64_t v22 = (char *)&v54 - v21;
  uint64_t v65 = a5;
  uint64_t v23 = type metadata accessor for ClosedRange<>.Index(255, v7, a4, a5);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0, (uint64_t)v23, (uint64_t)v23, 0, 0);
  uint64_t v25 = MEMORY[0x1F4188790](TupleTypeMetadata2 - 1);
  int v27 = (char *)&v54 - v26;
  uint64_t v28 = (char *)&v54 + *(int *)(v25 + 56) - v26;
  char v29 = (void (*)(char *, uint64_t, Class *))*((void *)*(v23 - 1) + 2);
  v29((char *)&v54 - v26, v66, v23);
  v29(v28, v67, v23);
  uint64_t v30 = (uint64_t (*)(char *, uint64_t, uint64_t))v17[6];
  int v31 = v30(v27, 1, v7);
  int v32 = v30(v28, 1, v7);
  int v33 = v32;
  if (v31 != 1)
  {
    unint64_t v35 = (void (*)(char *, char *, uint64_t))v17[4];
    v35(v22, v27, v7);
    if (v33 != 1)
    {
      v35(v20, v28, v7);
      uint64_t v50 = (uint64_t)v62;
      (*(void (**)(char *, uint64_t, uint64_t))(a4 + 40))(v20, v7, a4);
      uint64_t v51 = (void (*)(char *, uint64_t))v17[1];
      v51(v20, v7);
      v51(v22, v7);
      uint64_t v52 = (uint64_t)v64;
      uint64_t v34 = specialized numericCast<A, B>(_:)(v50, (uint64_t)v64, *(void *)(v65 + 8));
      (*(void (**)(uint64_t, uint64_t))(v63 + 8))(v50, v52);
      return v34;
    }
    char v36 = v58;
    uint64_t v37 = (uint64_t)v64;
    uint64_t v38 = v54;
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness((uint64_t)v58, (uint64_t)v64, (uint64_t)v54, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
    BOOL v40 = v55;
    (*(void (**)(uint64_t *, uint64_t, const char *, uint64_t))(AssociatedConformanceWitness + 8))(&qword_18162B0C0, 512, v38, AssociatedConformanceWitness);
    uint64_t v41 = v60;
    ((void (*)(char *, uint64_t, int **))v36[3])(v40, v37, v36);
    uint64_t v42 = v59;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(a4 + 40))(v57 + *(int *)(v56 + 36), v7, a4);
    ((void (*)(char *, uint64_t))v17[1])(v22, v7);
    uint64_t v43 = (uint64_t)v62;
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v61 + 8) + 24))(v41, v42, v37);
    uint64_t v44 = *(void (**)(char *, uint64_t))(v63 + 8);
    v44(v42, v37);
    goto LABEL_7;
  }
  if (v32 != 1)
  {
    ((void (*)(char *, char *, uint64_t))v17[4])(v22, v28, v7);
    uint64_t v41 = v60;
    (*(void (**)(char *, uint64_t, uint64_t))(a4 + 40))(v22, v7, a4);
    ((void (*)(char *, uint64_t))v17[1])(v22, v7);
    unint64_t v45 = v58;
    uint64_t v37 = (uint64_t)v64;
    uint64_t v46 = v54;
    uint64_t v47 = swift_getAssociatedConformanceWitness((uint64_t)v58, (uint64_t)v64, (uint64_t)v54, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
    uint64_t v48 = v55;
    (*(void (**)(uint64_t *, uint64_t, const char *, uint64_t))(v47 + 8))(&qword_18162B0C0, 512, v46, v47);
    uint64_t v49 = v59;
    ((void (*)(char *, uint64_t, int **))v45[3])(v48, v37, v45);
    uint64_t v43 = (uint64_t)v62;
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v61 + 8) + 40))(v41, v49, v37);
    uint64_t v44 = *(void (**)(char *, uint64_t))(v63 + 8);
    v44(v49, v37);
LABEL_7:
    v44(v41, v37);
    uint64_t v34 = specialized numericCast<A, B>(_:)(v43, v37, *(void *)(v65 + 8));
    v44((char *)v43, v37);
    return v34;
  }
  return 0;
}

uint64_t ClosedRange<>.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v7 = *(void *)(a2 + 16);
  uint64_t v8 = type metadata accessor for ClosedRange<>.Index(0, v7, a3, a4);
  MEMORY[0x1F4188790](v8);
  uint64_t v10 = (char *)&v14 - v9;
  (*(void (**)(char *, uint64_t))(v11 + 16))((char *)&v14 - v9, a1);
  uint64_t v12 = *(void *)(v7 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v7) == 1) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Index out of range", 18, 2, "Swift/ClosedRange.swift", 23, 2, 0x12DuLL, 0);
  }
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v12 + 32))(a5, v10, v7);
}

uint64_t ClosedRange<>.subscript.getter@<X0>(uint64_t a1@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return ClosedRange<>.subscript.getter(a1, a2, a3, a4, (uint64_t (*)(uint64_t, unint64_t))type metadata accessor for ClosedRange<>.Index, (uint64_t)&protocol witness table for ClosedRange<A><>.Index, protocol conformance descriptor for <> ClosedRange<A>, a5);
}

uint64_t ClosedRange<>._customIndexOfEquatableElement(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v44 = a4;
  uint64_t v43 = a3;
  uint64_t v46 = a2;
  uint64_t v5 = *(void *)(a2 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](a1);
  uint64_t v8 = (char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *(void *)(v9 + 16);
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v13 = (char *)&v39 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v42 = v14;
  uint64_t v15 = *(void *)(v14 + 8);
  BOOL v40 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v15 + 24);
  char v17 = v40(v16, a1, v10, v15);
  uint64_t v41 = v11;
  uint64_t v18 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 16);
  uint64_t v39 = a1;
  uint64_t v19 = a1;
  uint64_t v20 = v5;
  v18(v13, v19, v10);
  uint64_t v21 = *(void (**)(char *, void, uint64_t))(v5 + 16);
  uint64_t v22 = v8;
  uint64_t v23 = v8;
  uint64_t v24 = v46;
  v21(v23, v45, v46);
  if (v17)
  {
    unint64_t v45 = (void (*)(uint64_t, uint64_t, uint64_t))v18;
    char v25 = v40((uint64_t)v13, (uint64_t)&v22[*(int *)(v24 + 36)], v10, v15);
    (*(void (**)(char *, uint64_t))(v20 + 8))(v22, v24);
    uint64_t v26 = v41;
    (*(void (**)(char *, uint64_t))(v41 + 8))(v13, v10);
    uint64_t v28 = v43;
    uint64_t v27 = v44;
    uint64_t v29 = v42;
    if (v25)
    {
      v45(v44, v39, v10);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v26 + 56))(v27, 0, 1, v10);
      uint64_t v30 = type metadata accessor for ClosedRange<>.Index(0, v10, v29, v28);
      (*((void (**)(uint64_t, void, uint64_t, Class *))*(v30 - 1) + 7))(v27, 0, 1, v30);
      int v33 = type metadata accessor for Optional(0, (uint64_t)v30, v31, v32);
      return (*((uint64_t (**)(uint64_t, void, uint64_t, Class *))*(v33 - 1) + 7))(v27, 0, 1, v33);
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v20 + 8))(v22, v24);
    (*(void (**)(char *, uint64_t))(v41 + 8))(v13, v10);
    uint64_t v28 = v43;
    uint64_t v27 = v44;
    uint64_t v29 = v42;
  }
  unint64_t v35 = type metadata accessor for ClosedRange<>.Index(255, v10, v29, v28);
  uint64_t v38 = type metadata accessor for Optional(0, (uint64_t)v35, v36, v37);
  return (*((uint64_t (**)(uint64_t, uint64_t, uint64_t, Class *))*(v38 - 1) + 7))(v27, 1, 1, v38);
}

uint64_t protocol witness for Collection.endIndex.getter in conformance <> ClosedRange<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return ClosedRange<>.endIndex.getter(a1, a2);
}

uint64_t (*protocol witness for Collection.subscript.read in conformance <> ClosedRange<A>(uint64_t **a1, uint64_t a2, uint64_t a3, uint64_t a4))()
{
  uint64_t v8 = (uint64_t *)malloc(0x28uLL);
  *a1 = v8;
  v8[4] = (uint64_t)ClosedRange<>.subscript.read(v8, a2, a3, *(void *)(a4 - 8), *(void *)(a4 - 16));
  return protocol witness for Collection.subscript.read in conformance _ArrayBuffer<A>;
}

void (*ClosedRange<>.subscript.read(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5))(void *a1)
{
  uint64_t v7 = *(void *)(a3 + 16);
  *a1 = v7;
  uint64_t v8 = type metadata accessor for ClosedRange<>.Index(0, v7, a4, a5);
  uint64_t v9 = (uint64_t)*(v8 - 1);
  uint64_t v10 = malloc(*(void *)(v9 + 64));
  a1[1] = (uint64_t)v10;
  uint64_t v11 = *(void *)(v7 - 8);
  uint64_t v12 = v11;
  a1[2] = v11;
  uint64_t v13 = malloc(*(void *)(v11 + 64));
  a1[3] = (uint64_t)v13;
  (*(void (**)(void *, uint64_t, Class *))(v9 + 16))(v10, a2, v8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v7) == 1) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Index out of range", 18, 2, "Swift/ClosedRange.swift", 23, 2, 0x12DuLL, 0);
  }
  (*(void (**)(void *, void *, uint64_t))(v12 + 32))(v13, v10, v7);
  return ClosedRange<>.subscript.read;
}

void ClosedRange<>.subscript.read(void *a1)
{
  unint64_t v1 = (void *)a1[3];
  uint64_t v2 = (void *)a1[1];
  (*(void (**)(void *, void))(a1[2] + 8))(v1, *a1);
  free(v1);

  free(v2);
}

uint64_t protocol witness for Collection.subscript.getter in conformance <> ClosedRange<A>@<X0>(uint64_t a1@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return ClosedRange<>.subscript.getter(a1, a2, *(void *)(a3 - 8), *(void *)(a3 - 16), a4);
}

uint64_t Collection<>.indices.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a1 - 8) + 16))(a3, v3, a1);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t))(a2 + 64);
  type metadata accessor for DefaultIndices(0, a1, a2, v7);
  v6(a1, a2);
  return (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 72))(a1, a2);
}

uint64_t protocol witness for Collection.isEmpty.getter in conformance <> ClosedRange<A>()
{
  return 0;
}

uint64_t protocol witness for Collection._customIndexOfEquatableElement(_:) in conformance <> ClosedRange<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return ClosedRange<>._customIndexOfEquatableElement(_:)(a1, a2, *(void *)(a3 - 16), a4);
}

uint64_t protocol witness for Collection._customLastIndexOfEquatableElement(_:) in conformance <> ClosedRange<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return ClosedRange<>._customLastIndexOfEquatableElement(_:)(a1, a2, *(void *)(a3 - 8), *(void *)(a3 - 16));
}

uint64_t protocol witness for Collection.index(_:offsetBy:limitedBy:) in conformance <> ClosedRange<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  return protocol witness for Collection.index(_:offsetBy:limitedBy:) in conformance <> ClosedRange<A>(a1, a2, a3, a4, a5, protocol conformance descriptor for <> ClosedRange<A>, a6);
}

uint64_t protocol witness for Collection.index(after:) in conformance <> ClosedRange<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return ClosedRange<>.index(after:)(a1, a2, *(void *)(a3 - 8), *(void *)(a3 - 16), a4);
}

uint64_t protocol witness for Collection.formIndex(after:) in conformance <> ClosedRange<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Collection.formIndex(after:) in conformance <> ClosedRange<A>(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))ClosedRange<>.index(after:));
}

uint64_t protocol witness for BidirectionalCollection.index(before:) in conformance <> ClosedRange<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return ClosedRange<>.index(before:)(a1, a2, *(int ***)(a3 - 8), *(void *)(a3 - 16), a4);
}

uint64_t protocol witness for BidirectionalCollection.formIndex(before:) in conformance <> ClosedRange<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Collection.formIndex(after:) in conformance <> ClosedRange<A>(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))ClosedRange<>.index(before:));
}

uint64_t protocol witness for Collection.formIndex(after:) in conformance <> ClosedRange<A>(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v8 = *(void *)(a3 - 16);
  uint64_t v7 = *(void *)(a3 - 8);
  uint64_t v9 = type metadata accessor for ClosedRange<>.Index(0, *(void *)(a2 + 16), v7, v8);
  uint64_t v10 = (uint64_t)*(v9 - 1);
  MEMORY[0x1F4188790](v9);
  uint64_t v12 = (char *)&v14 - v11;
  a4(a1, a2, v7, v8);
  (*(void (**)(uint64_t, Class *))(v10 + 8))(a1, v9);
  return (*(uint64_t (**)(uint64_t, char *, Class *))(v10 + 32))(a1, v12, v9);
}

uint64_t protocol witness for BidirectionalCollection.index(_:offsetBy:) in conformance <> ClosedRange<A>@<X0>(void (*a1)(char *, uint64_t)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return ClosedRange<>.index(_:offsetBy:)(a1, a2, a3, *(void *)(a4 - 8), *(void *)(a4 - 16), a5);
}

uint64_t protocol witness for BidirectionalCollection.distance(from:to:) in conformance <> ClosedRange<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return ClosedRange<>.distance(from:to:)(a1, a2, a3, *(void *)(a4 - 8), *(void *)(a4 - 16));
}

uint64_t static Comparable.... infix(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return static Comparable...< infix(_:_:)(a1, a2, a3, a4, "Swift/ClosedRange.swift", (uint64_t (*)(char *, uint64_t))0x17, 0x15BuLL, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ClosedRange, a5);
}

uint64_t static Comparable...< infix(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, const char *a5@<X4>, uint64_t (*a6)(char *, uint64_t)@<X5>, unint64_t a7@<X6>, uint64_t (*a8)(void, uint64_t, uint64_t)@<X7>, uint64_t a9@<X8>)
{
  unint64_t v45 = a8;
  unint64_t v39 = a7;
  BOOL v40 = a5;
  uint64_t v41 = a6;
  uint64_t v47 = a9;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0, a3, a3, "lower upper ", 0);
  uint64_t v13 = MEMORY[0x1F4188790](TupleTypeMetadata2);
  uint64_t v43 = (char *)&v38 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = MEMORY[0x1F4188790](v13);
  char v17 = (char *)&v38 - v16;
  uint64_t v18 = *(void **)(a3 - 8);
  uint64_t v19 = MEMORY[0x1F4188790](v15);
  uint64_t v21 = (char *)&v38 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v19);
  uint64_t v23 = (char *)&v38 - v22;
  uint64_t v24 = (void (*)(char *, uint64_t, uint64_t))v18[2];
  uint64_t v42 = a1;
  v24((char *)&v38 - v22, a1, a3);
  uint64_t v25 = a2;
  v24(v21, a2, a3);
  uint64_t v26 = *(uint64_t (**)(char *, char *, uint64_t, uint64_t))(a4 + 24);
  uint64_t v46 = a4;
  if ((v26(v23, v21, a3, a4) & 1) == 0) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, v40, (uint64_t)v41, 2, v39, 0);
  }
  uint64_t v27 = (uint64_t (*)(char *, uint64_t))v18[1];
  uint64_t v41 = v27;
  v27(v21, a3);
  v27(v23, a3);
  uint64_t v28 = TupleTypeMetadata2;
  uint64_t v29 = &v17[*((int *)TupleTypeMetadata2 + 12)];
  v24(v17, v42, a3);
  v24(v29, v25, a3);
  uint64_t v30 = v43;
  uint64_t v31 = &v43[*((int *)v28 + 12)];
  v24(v43, (uint64_t)v17, a3);
  v24(v31, (uint64_t)v29, a3);
  uint64_t v32 = (void (*)(uint64_t, char *, uint64_t))v18[4];
  v32(v47, v30, a3);
  int v33 = v31;
  uint64_t v34 = v41;
  v41(v33, a3);
  unint64_t v35 = &v30[*((int *)v28 + 12)];
  v32((uint64_t)v30, v17, a3);
  v32((uint64_t)v35, v29, a3);
  uint64_t v36 = v45(0, a3, v46);
  v32(v47 + *(int *)(v36 + 36), v35, a3);
  return v34(v30, a3);
}

uint64_t static ClosedRange.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return static ClosedRange.== infix(_:_:)(a1, a2, a3, a4, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ClosedRange);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ClosedRange<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static ClosedRange.== infix(_:_:)(a1, a2, *(void *)(a3 + 16), *(void *)(a3 + 24));
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance <> ClosedRange<A>(uint64_t a1, uint64_t a2)
{
  return ClosedRange<>.hashValue.getter(a1, *(void *)(a2 - 8));
}

uint64_t protocol witness for Hashable.hash(into:) in conformance <> ClosedRange<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return ClosedRange<>.hash(into:)(a1, a2, *(void *)(a3 - 8));
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance <> ClosedRange<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance <> ClosedRange<A><>.Index(a1, a2, a3, (void (*)(void *, uint64_t, uint64_t))ClosedRange<>.hash(into:));
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance <> ClosedRange<A><>.Index(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void *, uint64_t, uint64_t))
{
  uint64_t v4 = *(void *)(a3 - 8);
  v6[0] = 0;
  v6[1] = _swift_stdlib_Hashing_parameters ^ a1 ^ 0x736F6D6570736575;
  v6[2] = unk_1EB208F00 ^ 0x646F72616E646F6DLL;
  v6[3] = _swift_stdlib_Hashing_parameters ^ a1 ^ 0x6C7967656E657261;
  v6[4] = unk_1EB208F00 ^ 0x7465646279746573;
  long long v7 = 0u;
  long long v8 = 0u;
  a4(v6, a2, v4);
  return Hasher._finalize()();
}

unint64_t ClosedRange.description.getter(uint64_t a1)
{
  uint64_t v2 = v1;
  unint64_t v14 = specialized static String._createEmpty(withInitialCapacity:)(7);
  unint64_t v15 = v4;
  uint64_t v5 = *(Class **)(a1 + 16);
  _print_unlocked<A, B>(_:_:)(v1, (uint64_t)&v14, v5, (uint64_t)&type metadata for DefaultStringInterpolation, (uint64_t)&protocol witness table for DefaultStringInterpolation);
  uint64_t v6 = v15;
  unint64_t v7 = HIBYTE(v15) & 0xF;
  if ((v15 & 0x2000000000000000) == 0) {
    unint64_t v7 = v14 & 0xFFFFFFFFFFFFLL;
  }
  if (v7 || (v14 & ~v15 & 0x2000000000000000) != 0)
  {
    if ((v15 & 0x2000000000000000) == 0
      || (unint64_t v8 = specialized _SmallString.init(_:appending:)(v14, v15, 0x2E2E2EuLL, 0xE300000000000000), (v10 & 1) != 0))
    {
      _StringGuts.append(_:)(3026478, 0xE300000000000000, 0, 3);
    }
    else
    {
      unint64_t v11 = v8;
      unint64_t v12 = v9;
      swift_bridgeObjectRelease(v6);
      unint64_t v14 = v11;
      unint64_t v15 = v12;
    }
  }
  else
  {
    swift_bridgeObjectRelease(v15);
    unint64_t v14 = 3026478;
    unint64_t v15 = 0xE300000000000000;
  }
  _print_unlocked<A, B>(_:_:)(v2 + *(int *)(a1 + 36), (uint64_t)&v14, v5, (uint64_t)&type metadata for DefaultStringInterpolation, (uint64_t)&protocol witness table for DefaultStringInterpolation);
  return v14;
}

unint64_t ClosedRange.debugDescription.getter(uint64_t a1)
{
  uint64_t v242 = a1;
  unint64_t v245 = *(Class **)(a1 + 16);
  unint64_t v1 = (unint64_t)*(v245 - 1);
  MEMORY[0x1F4188790](a1);
  Swift::Bool v244 = (char *)&v237 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = specialized static String._createEmpty(withInitialCapacity:)(14);
  unint64_t v5 = (unint64_t)v4;
  v249._unint64_t countAndFlagsBits = v3;
  v249._uint64_t object = v4;
  Swift::String v6 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("ClosedRange(", 0xCuLL, 1);
  unint64_t countAndFlagsBits = v6._countAndFlagsBits;
  uint64_t object = (uint64_t)v6._object;
  uint64_t v9 = HIBYTE(v5) & 0xF;
  if ((v5 & 0x2000000000000000) != 0) {
    uint64_t v10 = HIBYTE(v5) & 0xF;
  }
  else {
    uint64_t v10 = v3 & 0xFFFFFFFFFFFFLL;
  }
  if (v10 || (v3 & ~v5 & 0x2000000000000000) != 0)
  {
    unint64_t v246 = v1;
    uint64_t v11 = (uint64_t)v6._object & 0x2000000000000000;
    uint64_t v12 = ((unint64_t)v6._object >> 56) & 0xF;
    if ((v5 & 0x2000000000000000) != 0 && v11)
    {
      uint64_t v13 = v12 + v9;
      if ((unint64_t)(v12 + v9) <= 0xF)
      {
        if (v12)
        {
          char v42 = 0;
          unint64_t v43 = 0;
          unint64_t v44 = v5;
          do
          {
            unint64_t v45 = v9 + v43;
            unint64_t v46 = v43 + 1;
            if (v43 >= 8) {
              unint64_t v47 = (unint64_t)v6._object;
            }
            else {
              unint64_t v47 = v6._countAndFlagsBits;
            }
            unint64_t v48 = v47 >> (v42 & 0x38);
            char v49 = (8 * v9 + v42) & 0x38;
            uint64_t v50 = (-255 << v49) - 1;
            unint64_t v51 = (unint64_t)v48 << v49;
            unint64_t v52 = v51 | v50 & v44;
            unint64_t v53 = v51 | v50 & v3;
            if (v45 < 8) {
              uint64_t v3 = v53;
            }
            else {
              unint64_t v44 = v52;
            }
            v42 += 8;
            unint64_t v43 = v46;
          }
          while (v12 != v46);
        }
        else
        {
          unint64_t v44 = v5;
        }
        swift_bridgeObjectRelease(v5);
        swift_bridgeObjectRelease((uint64_t)v6._object);
        unint64_t v58 = 0xA000000000000000;
        if (!(v3 & 0x8080808080808080 | v44 & 0x80808080808080)) {
          unint64_t v58 = 0xE000000000000000;
        }
        v249._unint64_t countAndFlagsBits = v3;
        v249._uint64_t object = (void *)(v58 & 0xFF00000000000000 | (v13 << 56) | v44 & 0xFFFFFFFFFFFFFFLL);
LABEL_50:
        unint64_t v1 = v246;
        goto LABEL_51;
      }
      uint64_t v11 = 1;
    }
    uint64_t v14 = v6._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
    if (v11) {
      uint64_t v15 = ((unint64_t)v6._object >> 56) & 0xF;
    }
    else {
      uint64_t v15 = v6._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
    }
    swift_bridgeObjectRetain_n((uint64_t)v6._object, 2);
    if (((uint64_t)v6._object & 0x1000000000000000) != 0)
    {
      swift_bridgeObjectRetain_n((uint64_t)v6._object, 5);
      v144._Swift::UInt64 rawBits = 1;
      v145._Swift::UInt64 rawBits = (v15 << 16) | 1;
      v146._Swift::UInt64 rawBits = _StringGuts.validateScalarRange(_:)(v144, v145, v6._countAndFlagsBits, (unint64_t)v6._object);
      if (v146._rawBits < 0x10000) {
        v146._rawBits |= 3;
      }
      Swift::Int v16 = specialized Collection.count.getter(v146, v147, v6._countAndFlagsBits, (unint64_t)v6._object);
      swift_bridgeObjectRelease((uint64_t)v6._object);
      if ((v5 & 0x1000000000000000) == 0)
      {
LABEL_15:
        BOOL v17 = __OFADD__(v10, v16);
        int64_t v18 = v10 + v16;
        if (!v17) {
          goto LABEL_16;
        }
        goto LABEL_159;
      }
    }
    else
    {
      swift_bridgeObjectRetain_n((uint64_t)v6._object, 4);
      Swift::Int v16 = v15;
      if ((v5 & 0x1000000000000000) == 0) {
        goto LABEL_15;
      }
    }
    Swift::Int v148 = String.UTF8View._foreignCount()();
    int64_t v18 = v148 + v16;
    if (!__OFADD__(v148, v16))
    {
LABEL_16:
      if ((v3 & ~v5 & 0x2000000000000000) != 0 && swift_isUniquelyReferenced_nonNull_native(v5 & 0xFFFFFFFFFFFFFFFLL))
      {
        int64_t v19 = _StringGuts.nativeUnusedCapacity.getter(v3, v5);
        if (v20) {
          goto LABEL_262;
        }
        uint64_t v21 = (v5 >> 61) & 1;
        if (v19 < v16) {
          LODWORD(v21) = 1;
        }
        if (v18 <= 15 && v21) {
          goto LABEL_23;
        }
      }
      else if (v18 <= 15)
      {
LABEL_23:
        swift_bridgeObjectRelease_n((uint64_t)v6._object, 5);
        swift_bridgeObjectRetain(v5);
        unint64_t v22 = _StringGuts._convertedToSmall()(v3, v5);
        unint64_t v24 = v23;
        swift_bridgeObjectRelease(v5);
        v25._Swift::UInt64 rawBits = (v15 << 16) | 1;
        v26._Swift::UInt64 rawBits = 1;
        v27._Swift::UInt64 rawBits = _StringGuts.validateScalarRange(_:)(v26, v25, v6._countAndFlagsBits, (unint64_t)v6._object);
        if (v27._rawBits < 0x10000) {
          v27._rawBits |= 3;
        }
        unint64_t v29 = specialized String.init(_:)(v27, v28, v6._countAndFlagsBits, (unint64_t)v6._object);
        unint64_t v31 = v30;
        swift_bridgeObjectRelease((uint64_t)v6._object);
        unint64_t v32 = _StringGuts._convertedToSmall()(v29, v31);
        unint64_t v34 = v33;
        swift_bridgeObjectRelease(v31);
        unint64_t v35 = specialized _SmallString.init(_:appending:)(v22, v24, v32, v34);
        unint64_t v1 = v246;
        if (v37) {
          goto LABEL_261;
        }
        uint64_t v38 = v35;
        unint64_t v39 = v36;
        swift_bridgeObjectRelease(v5);
        swift_bridgeObjectRelease((uint64_t)v6._object);
        v249._unint64_t countAndFlagsBits = v38;
        v249._uint64_t object = v39;
        goto LABEL_51;
      }
      _StringGuts.prepareForAppendInPlace(totalCount:otherUTF8Count:)(v18, v16);
      swift_bridgeObjectRelease_n((uint64_t)v6._object, 4);
      if (((uint64_t)v6._object & 0x1000000000000000) != 0)
      {
        swift_bridgeObjectRelease((uint64_t)v6._object);
        _StringGuts._foreignAppendInPlace(_:)(v6._countAndFlagsBits, (unint64_t)v6._object, 0, v15);
        swift_bridgeObjectRelease_n((uint64_t)v6._object, 2);
      }
      else
      {
        if (!v11)
        {
          if ((v6._countAndFlagsBits & 0x1000000000000000) != 0)
          {
            swift_bridgeObjectRelease((uint64_t)v6._object);
            id v54 = (id)(((uint64_t)v6._object & 0xFFFFFFFFFFFFFFFLL) + 32);
            uint64_t v55 = v6._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
          }
          else
          {
            id v54 = _StringObject.sharedUTF8.getter(v6._countAndFlagsBits, (uint64_t)v6._object);
            uint64_t v55 = v230;
            swift_bridgeObjectRelease((uint64_t)v6._object);
            if (v55 < v14) {
              goto LABEL_260;
            }
          }
          unint64_t v1 = v246;
          uint64_t v56 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, v6._countAndFlagsBits & 0xFFFFFFFFFFFFLL, (uint64_t)v54, v55);
          _StringGuts.appendInPlace(_:isASCII:)(v56, v57, v6._countAndFlagsBits < 0);
          swift_bridgeObjectRelease_n((uint64_t)v6._object, 2);
          goto LABEL_51;
        }
        swift_bridgeObjectRelease_n((uint64_t)v6._object, 2);
        uint64_t v247 = v6._countAndFlagsBits;
        unint64_t v248 = (uint64_t)v6._object & 0xFFFFFFFFFFFFFFLL;
        BOOL v40 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, ((unint64_t)v6._object >> 56) & 0xF, (uint64_t)&v247, ((unint64_t)v6._object >> 56) & 0xF);
        _StringGuts.appendInPlace(_:isASCII:)(v40, v41, ((uint64_t)v6._object & 0x4000000000000000) != 0);
        swift_bridgeObjectRelease((uint64_t)v6._object);
      }
      goto LABEL_50;
    }
LABEL_159:
    __break(1u);
    goto LABEL_160;
  }
  swift_bridgeObjectRelease(v5);
  Swift::String v249 = v6;
LABEL_51:
  unint64_t v59 = v1 + 16;
  uint64_t v60 = (uint64_t)v244;
  uint64_t v61 = v245;
  uint64_t v241 = *(void (**)(char *, uint64_t, Class *))(v1 + 16);
  v241(v244, v243, v245);
  uint64_t v247 = 0;
  unint64_t v248 = 0xE000000000000000;
  _debugPrint_unlocked<A, B>(_:_:)(v60, (uint64_t)&v247, v61, (uint64_t)&type metadata for String, (uint64_t)&protocol witness table for String);
  uint64_t v63 = *(void (**)(uint64_t, Class *))(v1 + 8);
  unint64_t v62 = v1 + 8;
  id v240 = v63;
  v63(v60, v61);
  uint64_t v3 = v247;
  uint64_t object = v248;
  unint64_t countAndFlagsBits = v249._countAndFlagsBits;
  unint64_t v5 = (unint64_t)v249._object;
  unint64_t v64 = ((unint64_t)v249._object >> 56) & 0xF;
  uint64_t v15 = v249._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
  if (((uint64_t)v249._object & 0x2000000000000000) != 0) {
    int64_t v18 = ((unint64_t)v249._object >> 56) & 0xF;
  }
  else {
    int64_t v18 = v249._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
  }
  if (!v18 && (v249._countAndFlagsBits & ~(uint64_t)v249._object & 0x2000000000000000) == 0)
  {
    swift_bridgeObjectRelease((uint64_t)v249._object);
    v249._unint64_t countAndFlagsBits = v3;
    v249._uint64_t object = (void *)object;
    goto LABEL_133;
  }
  unint64_t v239 = v59;
  uint64_t v14 = v248 & 0x2000000000000000;
  uint64_t v11 = HIBYTE(v248) & 0xF;
  if (((uint64_t)v249._object & 0x2000000000000000) == 0 || !v14)
  {
LABEL_60:
    unint64_t v246 = v62;
    uint64_t v237 = v247 & 0xFFFFFFFFFFFFLL;
    if (v14) {
      uint64_t v12 = HIBYTE(v248) & 0xF;
    }
    else {
      uint64_t v12 = v247 & 0xFFFFFFFFFFFFLL;
    }
    swift_bridgeObjectRetain_n(v248, 2);
    uint64_t v238 = v12;
    if ((object & 0x1000000000000000) == 0)
    {
      swift_bridgeObjectRetain_n(object, 4);
      if ((v5 & 0x1000000000000000) == 0) {
        goto LABEL_65;
      }
      goto LABEL_163;
    }
LABEL_160:
    swift_bridgeObjectRetain_n(object, 5);
    v149._Swift::UInt64 rawBits = 1;
    v150._Swift::UInt64 rawBits = (v12 << 16) | 1;
    v151._Swift::UInt64 rawBits = _StringGuts.validateScalarRange(_:)(v149, v150, v3, object);
    if (v151._rawBits < 0x10000) {
      v151._rawBits |= 3;
    }
    uint64_t v12 = specialized Collection.count.getter(v151, v152, v3, object);
    swift_bridgeObjectRelease(object);
    if ((v5 & 0x1000000000000000) == 0)
    {
LABEL_65:
      BOOL v17 = __OFADD__(v18, v12);
      Swift::Int v66 = v18 + v12;
      if (!v17) {
        goto LABEL_66;
      }
      goto LABEL_165;
    }
LABEL_163:
    Swift::Int v153 = String.UTF8View._foreignCount()();
    Swift::Int v66 = v153 + v12;
    if (!__OFADD__(v153, v12))
    {
LABEL_66:
      unint64_t v67 = countAndFlagsBits & ~v5;
      if ((v67 & 0x2000000000000000) == 0 || !swift_isUniquelyReferenced_nonNull_native(v5 & 0xFFFFFFFFFFFFFFFLL))
      {
        if (v66 > 15)
        {
LABEL_72:
          int64_t v70 = _StringGuts.nativeUnusedCapacity.getter(countAndFlagsBits, v5);
          BOOL v73 = (v71 & 1) == 0 && v70 >= v12;
          if ((v67 & 0x2000000000000000) != 0 && swift_isUniquelyReferenced_nonNull_native(v5 & 0xFFFFFFFFFFFFFFFLL))
          {
            if (v73)
            {
LABEL_110:
              swift_bridgeObjectRelease_n(object, 4);
              if ((object & 0x1000000000000000) != 0)
              {
                swift_bridgeObjectRelease(object);
                _StringGuts._foreignAppendInPlace(_:)(v3, object, 0, v238);
                swift_bridgeObjectRelease_n(object, 2);
                goto LABEL_133;
              }
              if (v14)
              {
                swift_bridgeObjectRelease_n(object, 2);
                uint64_t v247 = v3;
                unint64_t v248 = object & 0xFFFFFFFFFFFFFFLL;
                uint64_t v101 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, v11, (uint64_t)&v247, v11);
                _StringGuts.appendInPlace(_:isASCII:)(v101, v102, (object & 0x4000000000000000) != 0);
                swift_bridgeObjectRelease(object);
                goto LABEL_133;
              }
              if ((v3 & 0x1000000000000000) != 0)
              {
                swift_bridgeObjectRelease(object);
                id v115 = (id)((object & 0xFFFFFFFFFFFFFFFLL) + 32);
                uint64_t v116 = v237;
                uint64_t v117 = v237;
                goto LABEL_127;
              }
LABEL_255:
              id v115 = _StringObject.sharedUTF8.getter(v3, object);
              uint64_t v117 = v229;
              swift_bridgeObjectRelease(object);
              if (v117 < v237) {
                goto LABEL_260;
              }
              uint64_t v116 = v237;
LABEL_127:
              uint64_t v118 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, v116, (uint64_t)v115, v117);
              _StringGuts.appendInPlace(_:isASCII:)(v118, v119, v3 < 0);
              swift_bridgeObjectRelease_n(object, 2);
              goto LABEL_133;
            }
          }
          else if (v73)
          {
LABEL_109:
            _StringGuts.grow(_:)(v66);
            goto LABEL_110;
          }
          uint64_t v97 = _StringGuts.nativeCapacity.getter(countAndFlagsBits, v5);
          if (v98) {
            uint64_t v99 = 0;
          }
          else {
            uint64_t v99 = v97;
          }
          if (v99 + 0x4000000000000000 < 0)
          {
            __break(1u);
            goto LABEL_255;
          }
          uint64_t v100 = 2 * v99;
          if (v100 > v66) {
            Swift::Int v66 = v100;
          }
          goto LABEL_109;
        }
        goto LABEL_83;
      }
      int64_t v68 = _StringGuts.nativeUnusedCapacity.getter(countAndFlagsBits, v5);
      if ((v69 & 1) == 0)
      {
        if (v66 > 15) {
          goto LABEL_72;
        }
        if ((v5 & 0x2000000000000000) != 0)
        {
          swift_bridgeObjectRelease_n(object, 5);
          unint64_t v74 = v5;
LABEL_85:
          v75._Swift::UInt64 rawBits = (v238 << 16) | 1;
          v76._Swift::UInt64 rawBits = 1;
          v77._Swift::UInt64 rawBits = _StringGuts.validateScalarRange(_:)(v76, v75, v3, object);
          if (v77._rawBits < 0x10000) {
            v77._rawBits |= 3;
          }
          uint64_t v79 = specialized String.init(_:)(v77, v78, v3, object);
          uint64_t v81 = v80;
          swift_bridgeObjectRelease(object);
          if ((v81 & 0x2000000000000000) == 0) {
            goto LABEL_246;
          }
          swift_bridgeObjectRelease(v81);
          goto LABEL_89;
        }
        if (v68 >= v12) {
          goto LABEL_72;
        }
LABEL_83:
        swift_bridgeObjectRelease_n(object, 5);
        if ((v5 & 0x2000000000000000) != 0)
        {
          unint64_t v74 = v5;
        }
        else if ((v5 & 0x1000000000000000) != 0)
        {
          unint64_t countAndFlagsBits = _StringGuts._foreignConvertedToSmall()(countAndFlagsBits, v5);
          unint64_t v74 = v235;
        }
        else
        {
          if ((countAndFlagsBits & 0x1000000000000000) != 0)
          {
            uint64_t v228 = (unsigned __int8 *)((v5 & 0xFFFFFFFFFFFFFFFLL) + 32);
          }
          else
          {
            uint64_t v228 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(countAndFlagsBits, v5);
            uint64_t v15 = v236;
          }
          swift_bridgeObjectRetain(v5);
          closure #1 in _StringGuts._convertedToSmall()(v228, v15, &v247);
          swift_bridgeObjectRelease(v5);
          unint64_t countAndFlagsBits = v247;
          unint64_t v74 = v248;
        }
        goto LABEL_85;
      }
LABEL_262:
      unint64_t v232 = 258;
      goto LABEL_263;
    }
LABEL_165:
    __break(1u);
    goto LABEL_166;
  }
  unint64_t v65 = v64 + v11;
  if (v64 + v11 > 0xF)
  {
    uint64_t v14 = 1;
    goto LABEL_60;
  }
  if (v11)
  {
    char v103 = 0;
    unint64_t v104 = 0;
    unint64_t v105 = (unint64_t)v249._object;
    do
    {
      unint64_t v106 = v64 + v104;
      unint64_t v107 = v104 + 1;
      if (v104 >= 8) {
        unint64_t v108 = v248;
      }
      else {
        unint64_t v108 = v247;
      }
      unint64_t v109 = v108 >> (v103 & 0x38);
      char v110 = (8 * v64 + v103) & 0x38;
      uint64_t v111 = (-255 << v110) - 1;
      unint64_t v112 = (unint64_t)v109 << v110;
      unint64_t v113 = v112 | v111 & v105;
      unint64_t v114 = v112 | v111 & countAndFlagsBits;
      if (v106 < 8) {
        unint64_t countAndFlagsBits = v114;
      }
      else {
        unint64_t v105 = v113;
      }
      v103 += 8;
      unint64_t v104 = v107;
    }
    while (v11 != v107);
  }
  else
  {
    unint64_t v105 = (unint64_t)v249._object;
  }
  swift_bridgeObjectRelease((uint64_t)v249._object);
  swift_bridgeObjectRelease(object);
  unint64_t v120 = 0xA000000000000000;
  if (!(countAndFlagsBits & 0x8080808080808080 | v105 & 0x80808080808080)) {
    unint64_t v120 = 0xE000000000000000;
  }
  v249._unint64_t countAndFlagsBits = countAndFlagsBits;
  for (v249._uint64_t object = (void *)(v120 & 0xFF00000000000000 | (v65 << 56) | v105 & 0xFFFFFFFFFFFFFFLL);
        ;
        v249._uint64_t object = (void *)(v96 & 0xFF00000000000000 | (v84 << 56) | v74 & 0xFFFFFFFFFFFFFFLL))
  {
LABEL_133:
    unint64_t countAndFlagsBits = v249._countAndFlagsBits;
    unint64_t v5 = (unint64_t)v249._object;
    unint64_t v121 = ((unint64_t)v249._object >> 56) & 0xF;
    int64_t v122 = v249._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
    if (((uint64_t)v249._object & 0x2000000000000000) != 0) {
      unint64_t v123 = ((unint64_t)v249._object >> 56) & 0xF;
    }
    else {
      unint64_t v123 = v249._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
    }
    if (!v123 && (v249._countAndFlagsBits & ~(uint64_t)v249._object & 0x2000000000000000) == 0)
    {
      swift_bridgeObjectRelease((uint64_t)v249._object);
      unint64_t countAndFlagsBits = 0;
      v249._unint64_t countAndFlagsBits = 0;
      unint64_t v142 = 0xE000000000000000;
      goto LABEL_169;
    }
    if (((uint64_t)v249._object & 0x2000000000000000) != 0)
    {
      swift_bridgeObjectRelease((uint64_t)v249._object);
      swift_bridgeObjectRelease(0xE000000000000000);
      unint64_t v143 = 0xA000000000000000;
      if (!(v5 & 0x80808080808080 | countAndFlagsBits & 0x8080808080808080)) {
        unint64_t v143 = 0xE000000000000000;
      }
      unint64_t v142 = v143 & 0xFF00000000000000 | (v121 << 56) | v5 & 0xFFFFFFFFFFFFFFLL;
LABEL_152:
      v249._unint64_t countAndFlagsBits = countAndFlagsBits;
      goto LABEL_169;
    }
    swift_bridgeObjectRetain_n(0xE000000000000000, 6);
    if ((v5 & 0x1000000000000000) != 0)
    {
LABEL_166:
      int64_t v122 = String.UTF8View._foreignCount()();
      if ((countAndFlagsBits & ~v5 & 0x2000000000000000) == 0) {
        goto LABEL_167;
      }
    }
    else if ((countAndFlagsBits & ~v5 & 0x2000000000000000) == 0)
    {
      goto LABEL_167;
    }
    if (swift_isUniquelyReferenced_nonNull_native(v5 & 0xFFFFFFFFFFFFFFFLL))
    {
      unint64_t v124 = _StringGuts.nativeUnusedCapacity.getter(countAndFlagsBits, v5);
      if (v125) {
        goto LABEL_262;
      }
      if (v122 <= 15 && (v124 & 0x8000000000000000) != 0)
      {
LABEL_145:
        swift_bridgeObjectRelease_n(0xE000000000000000, 5);
        swift_bridgeObjectRetain(v5);
        unint64_t v126 = _StringGuts._convertedToSmall()(countAndFlagsBits, v5);
        unint64_t v128 = v127;
        swift_bridgeObjectRelease(v5);
        v129._Swift::UInt64 rawBits = 1;
        v130._Swift::UInt64 rawBits = 1;
        v131._Swift::UInt64 rawBits = _StringGuts.validateScalarRange(_:)(v129, v130, 0, 0xE000000000000000);
        if (v131._rawBits < 0x10000) {
          v131._rawBits |= 3;
        }
        unint64_t v133 = specialized String.init(_:)(v131, v132, 0, 0xE000000000000000);
        unint64_t v135 = v134;
        swift_bridgeObjectRelease(0xE000000000000000);
        unint64_t v136 = _StringGuts._convertedToSmall()(v133, v135);
        unint64_t v138 = v137;
        swift_bridgeObjectRelease(v135);
        unint64_t v139 = specialized _SmallString.init(_:appending:)(v126, v128, v136, v138);
        if (v141) {
          goto LABEL_261;
        }
        unint64_t countAndFlagsBits = v139;
        unint64_t v142 = v140;
        swift_bridgeObjectRelease(v5);
        swift_bridgeObjectRelease(0xE000000000000000);
        goto LABEL_152;
      }
      goto LABEL_168;
    }
LABEL_167:
    if (v122 <= 15) {
      goto LABEL_145;
    }
LABEL_168:
    _StringGuts.prepareForAppendInPlace(totalCount:otherUTF8Count:)(v122, 0);
    swift_bridgeObjectRelease_n(0xE000000000000000, 6);
    uint64_t v247 = 0;
    unint64_t v248 = 0;
    unint64_t v154 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, 0, (uint64_t)&v247, 0);
    _StringGuts.appendInPlace(_:isASCII:)(v154, v155, 1);
    swift_bridgeObjectRelease(0xE000000000000000);
    unint64_t countAndFlagsBits = v249._countAndFlagsBits;
    unint64_t v142 = (unint64_t)v249._object;
LABEL_169:
    uint64_t v156 = specialized static String._createEmpty(withInitialCapacity:)(6);
    uint64_t v158 = v157;
    v249._unint64_t countAndFlagsBits = v156;
    v249._uint64_t object = (void *)v157;
    uint64_t v159 = HIBYTE(v157) & 0xF;
    if ((v157 & 0x2000000000000000) == 0) {
      uint64_t v159 = v156 & 0xFFFFFFFFFFFFLL;
    }
    if (v159 || (v156 & ~v157 & 0x2000000000000000) != 0)
    {
      if ((v157 & 0x2000000000000000) == 0
        || (unint64_t v160 = specialized _SmallString.init(_:appending:)(v156, v157, 0x2E2E2EuLL, 0xE300000000000000),
            (v162 & 1) != 0))
      {
        swift_bridgeObjectRetain(0xE300000000000000);
        _StringGuts.append(_:)(3026478, 0xE300000000000000, 0, 3);
        swift_bridgeObjectRelease_n(0xE300000000000000, 2);
        uint64_t v79 = v249._countAndFlagsBits;
        unint64_t v5 = (unint64_t)v249._object;
        goto LABEL_179;
      }
      uint64_t v79 = v160;
      unint64_t v5 = v161;
      swift_bridgeObjectRelease(v158);
      swift_bridgeObjectRelease(0xE300000000000000);
    }
    else
    {
      uint64_t v79 = 3026478;
      swift_bridgeObjectRelease(v157);
      unint64_t v5 = 0xE300000000000000;
    }
    v249._unint64_t countAndFlagsBits = v79;
    v249._uint64_t object = (void *)v5;
LABEL_179:
    uint64_t v164 = (uint64_t)v244;
    uint64_t v163 = v245;
    v241(v244, v243 + *(int *)(v242 + 36), v245);
    uint64_t v247 = 0;
    unint64_t v248 = 0xE000000000000000;
    _debugPrint_unlocked<A, B>(_:_:)(v164, (uint64_t)&v247, v163, (uint64_t)&type metadata for String, (uint64_t)&protocol witness table for String);
    v240(v164, v163);
    uint64_t v166 = v247;
    unint64_t v165 = v248;
    uint64_t v167 = HIBYTE(v5) & 0xF;
    if ((v5 & 0x2000000000000000) != 0) {
      uint64_t v168 = HIBYTE(v5) & 0xF;
    }
    else {
      uint64_t v168 = v79 & 0xFFFFFFFFFFFFLL;
    }
    if (!v168 && (v79 & ~v5 & 0x2000000000000000) == 0)
    {
      swift_bridgeObjectRelease(v5);
      v249._unint64_t countAndFlagsBits = v166;
      v249._uint64_t object = (void *)v165;
      goto LABEL_212;
    }
    uint64_t object = v248 & 0x2000000000000000;
    unint64_t v74 = HIBYTE(v248) & 0xF;
    unint64_t v246 = v142;
    if ((v5 & 0x2000000000000000) != 0 && object)
    {
      unint64_t v194 = v167 + v74;
      if (v167 + v74 <= 0xF)
      {
        if (v74)
        {
          char v204 = 0;
          unint64_t v205 = 0;
          unint64_t v206 = v5;
          do
          {
            unint64_t v207 = v167 + v205;
            unint64_t v208 = v205 + 1;
            if (v205 >= 8) {
              unint64_t v209 = v248;
            }
            else {
              unint64_t v209 = v247;
            }
            unint64_t v210 = v209 >> (v204 & 0x38);
            char v211 = (8 * v167 + v204) & 0x38;
            uint64_t v212 = (-255 << v211) - 1;
            unint64_t v213 = (unint64_t)v210 << v211;
            unint64_t v214 = v213 | v212 & v206;
            unint64_t v215 = v213 | v212 & v79;
            if (v207 < 8) {
              uint64_t v79 = v215;
            }
            else {
              unint64_t v206 = v214;
            }
            v204 += 8;
            unint64_t v205 = v208;
          }
          while (v74 != v208);
        }
        else
        {
          unint64_t v206 = v5;
        }
        swift_bridgeObjectRelease(v5);
        swift_bridgeObjectRelease(v165);
        unint64_t v220 = 0xA000000000000000;
        if (!(v79 & 0x8080808080808080 | v206 & 0x80808080808080)) {
          unint64_t v220 = 0xE000000000000000;
        }
        v249._unint64_t countAndFlagsBits = v79;
        v249._uint64_t object = (void *)(v220 & 0xFF00000000000000 | (v194 << 56) | v206 & 0xFFFFFFFFFFFFFFLL);
        unint64_t v142 = v246;
        goto LABEL_212;
      }
      unint64_t v245 = (Class *)countAndFlagsBits;
      uint64_t object = 1;
    }
    else
    {
      unint64_t v245 = (Class *)countAndFlagsBits;
    }
    uint64_t v81 = v247 & 0xFFFFFFFFFFFFLL;
    unint64_t countAndFlagsBits = object ? HIBYTE(v248) & 0xF : v247 & 0xFFFFFFFFFFFFLL;
    swift_bridgeObjectRetain_n(v248, 2);
    if ((v165 & 0x1000000000000000) != 0) {
      break;
    }
    swift_bridgeObjectRetain_n(v165, 4);
    Swift::Int v169 = countAndFlagsBits;
    if ((v5 & 0x1000000000000000) != 0) {
      goto LABEL_243;
    }
LABEL_192:
    BOOL v17 = __OFADD__(v168, v169);
    int64_t v170 = v168 + v169;
    if (!v17) {
      goto LABEL_193;
    }
LABEL_245:
    __break(1u);
LABEL_246:
    if ((v81 & 0x1000000000000000) != 0)
    {
      uint64_t v79 = _StringGuts._foreignConvertedToSmall()(v79, v81);
      uint64_t v234 = v233;
      swift_bridgeObjectRelease(v81);
      uint64_t v81 = v234;
    }
    else
    {
      if ((v79 & 0x1000000000000000) != 0)
      {
        uint64_t v226 = (unsigned __int8 *)((v81 & 0xFFFFFFFFFFFFFFFLL) + 32);
        uint64_t v227 = v79 & 0xFFFFFFFFFFFFLL;
      }
      else
      {
        uint64_t v226 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v79, v81);
      }
      closure #1 in _StringGuts._convertedToSmall()(v226, v227, &v247);
      swift_bridgeObjectRelease(v81);
      uint64_t v79 = v247;
      uint64_t v81 = v248;
    }
LABEL_89:
    uint64_t v82 = HIBYTE(v74) & 0xF;
    uint64_t v83 = HIBYTE(v81) & 0xF;
    uint64_t v84 = v83 + v82;
    if ((unint64_t)(v83 + v82) > 0xF) {
      goto LABEL_261;
    }
    if (v83)
    {
      char v85 = 0;
      unint64_t v86 = 0;
      do
      {
        unint64_t v87 = v82 + v86;
        unint64_t v88 = v86 + 1;
        if (v86 >= 8) {
          unint64_t v89 = v81;
        }
        else {
          unint64_t v89 = v79;
        }
        unint64_t v90 = v89 >> (v85 & 0x38);
        char v91 = (8 * v82 + v85) & 0x38;
        uint64_t v92 = (-255 << v91) - 1;
        unint64_t v93 = (unint64_t)v90 << v91;
        unint64_t v94 = v93 | v92 & v74;
        unint64_t v95 = v93 | v92 & countAndFlagsBits;
        if (v87 < 8) {
          unint64_t countAndFlagsBits = v95;
        }
        else {
          unint64_t v74 = v94;
        }
        v85 += 8;
        unint64_t v86 = v88;
      }
      while (v83 != v88);
    }
    swift_bridgeObjectRelease(v5);
    swift_bridgeObjectRelease(object);
    unint64_t v96 = 0xA000000000000000;
    if (!(countAndFlagsBits & 0x8080808080808080 | v74 & 0x80808080808080)) {
      unint64_t v96 = 0xE000000000000000;
    }
    v249._unint64_t countAndFlagsBits = countAndFlagsBits;
  }
  swift_bridgeObjectRetain_n(v165, 5);
  v221._Swift::UInt64 rawBits = 1;
  v222._Swift::UInt64 rawBits = (countAndFlagsBits << 16) | 1;
  v223._Swift::UInt64 rawBits = _StringGuts.validateScalarRange(_:)(v221, v222, v166, v165);
  if (v223._rawBits < 0x10000) {
    v223._rawBits |= 3;
  }
  Swift::Int v169 = specialized Collection.count.getter(v223, v224, v166, v165);
  swift_bridgeObjectRelease(v165);
  if ((v5 & 0x1000000000000000) == 0) {
    goto LABEL_192;
  }
LABEL_243:
  Swift::Int v225 = String.UTF8View._foreignCount()();
  int64_t v170 = v225 + v169;
  if (__OFADD__(v225, v169)) {
    goto LABEL_245;
  }
LABEL_193:
  if ((v79 & ~v5 & 0x2000000000000000) == 0 || !swift_isUniquelyReferenced_nonNull_native(v5 & 0xFFFFFFFFFFFFFFFLL))
  {
    if (v170 <= 15) {
      goto LABEL_200;
    }
    goto LABEL_205;
  }
  int64_t v171 = _StringGuts.nativeUnusedCapacity.getter(v79, v5);
  if (v172) {
    goto LABEL_262;
  }
  uint64_t v173 = (v5 >> 61) & 1;
  if (v171 < v169) {
    LODWORD(v173) = 1;
  }
  if (v170 <= 15 && v173)
  {
LABEL_200:
    swift_bridgeObjectRelease_n(v165, 5);
    swift_bridgeObjectRetain(v5);
    unint64_t v174 = _StringGuts._convertedToSmall()(v79, v5);
    unint64_t v176 = v175;
    swift_bridgeObjectRelease(v5);
    v177._Swift::UInt64 rawBits = (countAndFlagsBits << 16) | 1;
    v178._Swift::UInt64 rawBits = 1;
    v179._Swift::UInt64 rawBits = _StringGuts.validateScalarRange(_:)(v178, v177, v166, v165);
    if (v179._rawBits < 0x10000) {
      v179._rawBits |= 3;
    }
    unint64_t v181 = specialized String.init(_:)(v179, v180, v166, v165);
    unint64_t v183 = v182;
    swift_bridgeObjectRelease(v165);
    unint64_t v184 = _StringGuts._convertedToSmall()(v181, v183);
    unint64_t v186 = v185;
    swift_bridgeObjectRelease(v183);
    unint64_t v187 = specialized _SmallString.init(_:appending:)(v174, v176, v184, v186);
    if ((v189 & 1) == 0)
    {
      uint64_t v190 = v187;
      unint64_t v191 = v188;
      swift_bridgeObjectRelease(v5);
      swift_bridgeObjectRelease(v165);
      v249._unint64_t countAndFlagsBits = v190;
      v249._uint64_t object = v191;
LABEL_211:
      unint64_t countAndFlagsBits = (unint64_t)v245;
      unint64_t v142 = v246;
      goto LABEL_212;
    }
LABEL_261:
    unint64_t v232 = 266;
LABEL_263:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/StringGutsRangeReplaceable.swift", 38, 2, v232, 0);
  }
LABEL_205:
  _StringGuts.prepareForAppendInPlace(totalCount:otherUTF8Count:)(v170, v169);
  swift_bridgeObjectRelease_n(v165, 4);
  if ((v165 & 0x1000000000000000) != 0)
  {
    swift_bridgeObjectRelease(v165);
    _StringGuts._foreignAppendInPlace(_:)(v166, v165, 0, countAndFlagsBits);
    swift_bridgeObjectRelease_n(v165, 2);
    goto LABEL_211;
  }
  if (object)
  {
    swift_bridgeObjectRelease_n(v165, 2);
    uint64_t v247 = v166;
    unint64_t v248 = v165 & 0xFFFFFFFFFFFFFFLL;
    long long v192 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, HIBYTE(v165) & 0xF, (uint64_t)&v247, HIBYTE(v165) & 0xF);
    _StringGuts.appendInPlace(_:isASCII:)(v192, v193, (v165 & 0x4000000000000000) != 0);
    swift_bridgeObjectRelease(v165);
    goto LABEL_211;
  }
  if ((v166 & 0x1000000000000000) != 0)
  {
    swift_bridgeObjectRelease(v165);
    id v216 = (id)((v165 & 0xFFFFFFFFFFFFFFFLL) + 32);
    uint64_t v217 = v166 & 0xFFFFFFFFFFFFLL;
    goto LABEL_235;
  }
  id v216 = _StringObject.sharedUTF8.getter(v166, v165);
  uint64_t v217 = v231;
  swift_bridgeObjectRelease(v165);
  if (v217 < v81) {
LABEL_260:
  }
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x745uLL, 0);
LABEL_235:
  unint64_t countAndFlagsBits = (unint64_t)v245;
  uint64_t v218 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, v166 & 0xFFFFFFFFFFFFLL, (uint64_t)v216, v217);
  _StringGuts.appendInPlace(_:isASCII:)(v218, v219, v166 < 0);
  swift_bridgeObjectRelease_n(v165, 2);
  unint64_t v142 = v246;
LABEL_212:
  uint64_t v195 = v249._object;
  unint64_t v196 = ((unint64_t)v249._object >> 56) & 0xF;
  if (((uint64_t)v249._object & 0x2000000000000000) == 0) {
    unint64_t v196 = v249._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
  }
  if (v196 || (v249._countAndFlagsBits & ~(uint64_t)v249._object & 0x2000000000000000) != 0)
  {
    if (((uint64_t)v249._object & 0x2000000000000000) == 0
      || (unint64_t v197 = specialized _SmallString.init(_:appending:)(v249._countAndFlagsBits, (unint64_t)v249._object, 0x29uLL, 0xE100000000000000), (v199 & 1) != 0))
    {
      swift_bridgeObjectRetain(0xE100000000000000);
      _StringGuts.append(_:)(41, 0xE100000000000000, 0, 1);
      swift_bridgeObjectRelease_n(0xE100000000000000, 2);
      unint64_t v200 = v249._countAndFlagsBits;
      uint64_t v201 = v249._object;
    }
    else
    {
      unint64_t v200 = v197;
      uint64_t v201 = v198;
      swift_bridgeObjectRelease((uint64_t)v195);
      swift_bridgeObjectRelease(0xE100000000000000);
    }
  }
  else
  {
    swift_bridgeObjectRelease((uint64_t)v249._object);
    uint64_t v201 = (void *)0xE100000000000000;
    unint64_t v200 = 41;
  }
  unint64_t v202 = specialized static String.+ infix(_:_:)(countAndFlagsBits, v142, v200, (unint64_t)v201);
  swift_bridgeObjectRelease(v142);
  swift_bridgeObjectRelease((uint64_t)v201);
  return v202;
}

uint64_t String.init<A>(reflecting:)(uint64_t a1, Class *a2)
{
  v5[0] = 0;
  v5[1] = 0xE000000000000000;
  _debugPrint_unlocked<A, B>(_:_:)(a1, (uint64_t)v5, a2, (uint64_t)&type metadata for String, (uint64_t)&protocol witness table for String);
  (*((void (**)(uint64_t, Class *))*(a2 - 1) + 1))(a1, a2);
  return v5[0];
}

uint64_t specialized Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)@<X0>(long long *a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, unint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  long long v12 = a1[1];
  long long v29 = *a1;
  v30[0] = v12;
  *(_OWORD *)((char *)v30 + 9) = *(long long *)((char *)a1 + 25);
  *(void *)&long long v27 = a4;
  *((void *)&v27 + 1) = a5;
  uint64_t v13 = static Mirror._superclassIterator<A>(_:_:)((uint64_t)&v29, (uint64_t)&v27, (swift *)&type metadata for Mirror);
  uint64_t v15 = v14;
  outlined consume of Mirror.AncestorRepresentation(a4, a5);
  Swift::Int v16 = (unint64_t *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _RandomAccessCollectionBox<LazyMapSequence<KeyValuePairs<String, Any>, (label: String?, value: Any)>>);
  BOOL v17 = swift_allocObject(v16, 0x48uLL, 7uLL);
  v17[6] = a2;
  v17[7] = closure #1 in Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:);
  unsigned char v17[8] = 0;
  int64_t v18 = (unint64_t *)canonical specialized generic type metadata accessor for _IndexBox<Int>();
  int64_t v19 = swift_allocObject(v18, 0x18uLL, 7uLL);
  void v19[2] = 0;
  uint64_t v20 = *(void *)(a2 + 16);
  uint64_t v21 = swift_allocObject(v18, 0x18uLL, 7uLL);
  v21[2] = v20;
  void v17[2] = v19;
  v17[3] = &protocol witness table for _IndexBox<A>;
  void v17[4] = v21;
  v17[5] = &protocol witness table for _IndexBox<A>;
  long long v22 = a1[1];
  long long v27 = *a1;
  v28[0] = v22;
  *(_OWORD *)((char *)v28 + 9) = *(long long *)((char *)a1 + 25);
  unint64_t v23 = (const char *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CustomLeafReflectable);
  uint64_t result = swift_dynamicCast((char *)v26, (unint64_t *)&v27, (Class *)&type metadata for Mirror, v23, 6uLL);
  char v25 = result;
  if (result) {
    uint64_t result = __swift_destroy_boxed_opaque_existential_1Tm(v26);
  }
  *(void *)a6 = &type metadata for Mirror;
  *(void *)(a6 + 8) = v17;
  *(unsigned char *)(a6 + 16) = a3;
  *(void *)(a6 + 24) = v13;
  *(void *)(a6 + 32) = v15;
  *(unsigned char *)(a6 + 4_assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000034, 0x80000001816E2880, "Swift/Codable.swift", 19, 2, 0x11F9uLL, 0) = v25;
  return result;
}

uint64_t specialized Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, unint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  *(void *)&v26[0] = a4;
  *((void *)&v26[0] + 1) = a5;
  long long v12 = static Mirror._superclassIterator<A>(_:_:)(a1, (uint64_t)v26, (swift *)&type metadata for AnyHashable);
  uint64_t v14 = v13;
  outlined consume of Mirror.AncestorRepresentation(a4, a5);
  uint64_t v15 = (unint64_t *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _RandomAccessCollectionBox<LazyMapSequence<KeyValuePairs<String, Any>, (label: String?, value: Any)>>);
  Swift::Int v16 = swift_allocObject(v15, 0x48uLL, 7uLL);
  v16[6] = a2;
  v16[7] = closure #1 in Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:);
  v16[8] = 0;
  BOOL v17 = (unint64_t *)canonical specialized generic type metadata accessor for _IndexBox<Int>();
  int64_t v18 = swift_allocObject(v17, 0x18uLL, 7uLL);
  void v18[2] = 0;
  uint64_t v19 = *(void *)(a2 + 16);
  uint64_t v20 = swift_allocObject(v17, 0x18uLL, 7uLL);
  void v20[2] = v19;
  long long v16[2] = v18;
  void v16[3] = &protocol witness table for _IndexBox<A>;
  v16[4] = v20;
  v16[5] = &protocol witness table for _IndexBox<A>;
  long long v21 = *(_OWORD *)(a1 + 16);
  v26[0] = *(_OWORD *)a1;
  v26[1] = v21;
  uint64_t v27 = *(void *)(a1 + 32);
  long long v22 = (const char *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CustomLeafReflectable);
  uint64_t result = swift_dynamicCast((char *)v25, (unint64_t *)v26, (Class *)&type metadata for AnyHashable, v22, 6uLL);
  char v24 = result;
  if (result) {
    uint64_t result = __swift_destroy_boxed_opaque_existential_1Tm(v25);
  }
  *(void *)a6 = &type metadata for AnyHashable;
  *(void *)(a6 + 8) = v16;
  *(unsigned char *)(a6 + 16) = a3;
  *(void *)(a6 + 24) = v12;
  *(void *)(a6 + 32) = v14;
  *(unsigned char *)(a6 + 4_assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000034, 0x80000001816E2880, "Swift/Codable.swift", 19, 2, 0x11F9uLL, 0) = v24;
  return result;
}

uint64_t specialized Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, unint64_t a4@<X3>, uint64_t a5@<X4>, swift *a6@<X5>, uint64_t a7@<X8>)
{
  unint64_t v28 = a1;
  v26[0] = a4;
  v26[1] = a5;
  uint64_t v14 = static Mirror._superclassIterator<A>(_:_:)((uint64_t)&v28, (uint64_t)v26, a6);
  uint64_t v16 = v15;
  outlined consume of Mirror.AncestorRepresentation(a4, a5);
  BOOL v17 = (unint64_t *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _RandomAccessCollectionBox<LazyMapSequence<KeyValuePairs<String, Any>, (label: String?, value: Any)>>);
  int64_t v18 = swift_allocObject(v17, 0x48uLL, 7uLL);
  v18[6] = a2;
  v18[7] = closure #1 in Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:);
  v18[8] = 0;
  uint64_t v19 = (unint64_t *)canonical specialized generic type metadata accessor for _IndexBox<Int>();
  uint64_t v20 = swift_allocObject(v19, 0x18uLL, 7uLL);
  void v20[2] = 0;
  uint64_t v21 = *(void *)(a2 + 16);
  long long v22 = swift_allocObject(v19, 0x18uLL, 7uLL);
  void v22[2] = v21;
  void v18[2] = v20;
  uint64_t v18[3] = &protocol witness table for _IndexBox<A>;
  v18[4] = v22;
  v18[5] = &protocol witness table for _IndexBox<A>;
  unint64_t v27 = a1;
  unint64_t v23 = (const char *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CustomLeafReflectable);
  uint64_t result = swift_dynamicCast((char *)v26, &v27, (Class *)a6, v23, 6uLL);
  char v25 = result;
  if (result) {
    uint64_t result = __swift_destroy_boxed_opaque_existential_1Tm(v26);
  }
  *(void *)a7 = a6;
  *(void *)(a7 + 8) = v18;
  *(unsigned char *)(a7 + 16) = a3;
  *(void *)(a7 + 24) = v14;
  *(void *)(a7 + 32) = v16;
  *(unsigned char *)(a7 + 4_assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000034, 0x80000001816E2880, "Swift/Codable.swift", 19, 2, 0x11F9uLL, 0) = v25;
  return result;
}

uint64_t Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, Class *a3@<X4>, uint64_t a4@<X8>)
{
  uint64_t v8 = (uint64_t)*(a3 - 1);
  uint64_t v9 = MEMORY[0x1F4188790](a1);
  uint64_t v11 = (unint64_t *)((char *)&v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  int v30 = *v12;
  uint64_t v15 = v13[1];
  v31[0] = *v13;
  unint64_t v14 = v31[0];
  v31[1] = v15;
  long long v29 = static Mirror._superclassIterator<A>(_:_:)(v9, (uint64_t)v31, v16);
  uint64_t v18 = v17;
  outlined consume of Mirror.AncestorRepresentation(v14, v15);
  uint64_t v19 = (unint64_t *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _RandomAccessCollectionBox<LazyMapSequence<KeyValuePairs<String, Any>, (label: String?, value: Any)>>);
  uint64_t v20 = swift_allocObject(v19, 0x48uLL, 7uLL);
  v20[6] = a2;
  v20[7] = closure #1 in Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:);
  v20[8] = 0;
  uint64_t v21 = (unint64_t *)canonical specialized generic type metadata accessor for _IndexBox<Int>();
  long long v22 = swift_allocObject(v21, 0x18uLL, 7uLL);
  void v22[2] = 0;
  uint64_t v23 = *(void *)(a2 + 16);
  char v24 = swift_allocObject(v21, 0x18uLL, 7uLL);
  unint64_t v24[2] = v23;
  void v20[2] = v22;
  v20[3] = &protocol witness table for _IndexBox<A>;
  void v20[4] = v24;
  void v20[5] = &protocol witness table for _IndexBox<A>;
  (*(void (**)(unint64_t *, uint64_t, Class *))(v8 + 32))(v11, a1, a3);
  char v25 = (const char *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CustomLeafReflectable);
  uint64_t result = swift_dynamicCast((char *)v31, v11, a3, v25, 6uLL);
  char v27 = result;
  if (result) {
    uint64_t result = __swift_destroy_boxed_opaque_existential_1Tm(v31);
  }
  *(void *)a4 = a3;
  *(void *)(a4 + 8) = v20;
  *(unsigned char *)(a4 + 16) = v30;
  *(void *)(a4 + 24) = v29;
  *(void *)(a4 + 32) = v18;
  *(unsigned char *)(a4 + 4_assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000034, 0x80000001816E2880, "Swift/Codable.swift", 19, 2, 0x11F9uLL, 0) = v27;
  return result;
}

uint64_t ClosedRange<>.init(_:)@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char *a4@<X8>)
{
  id v54 = a4;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0, a2, a2, "lower upper ", 0);
  uint64_t v7 = MEMORY[0x1F4188790](TupleTypeMetadata2);
  uint64_t v55 = (char *)&v44 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  unint64_t v53 = (char *)&v44 - v9;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (int **)a3, a2, (uint64_t)&protocol requirements base descriptor for Strideable, associated type descriptor for Strideable.Stride);
  uint64_t v49 = *((void *)AssociatedTypeWitness - 1);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  unint64_t v48 = (char *)&v44 - v11;
  uint64_t v12 = *(void *)(*(void *)(swift_getAssociatedConformanceWitness(a3, a2, (uint64_t)AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Strideable, associated conformance descriptor for Strideable.Strideable.Stride: SignedNumeric)+ 8)+ 16);
  uint64_t v13 = swift_getAssociatedTypeWitness(0, (int **)v12, (uint64_t)AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, associated type descriptor for ExpressibleByIntegerLiteral.IntegerLiteralType);
  uint64_t v14 = MEMORY[0x1F4188790](v13);
  unint64_t v46 = (char *)&v44 - v15;
  uint64_t v51 = *(void *)(a2 - 8);
  uint64_t v16 = MEMORY[0x1F4188790](v14);
  unint64_t v47 = (char *)&v44 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v16);
  uint64_t v56 = (char *)&v44 - v18;
  uint64_t v52 = a3;
  uint64_t v19 = *(void *)(a3 + 8);
  uint64_t v21 = type metadata accessor for Range(0, a2, v19, v20);
  uint64_t v22 = (uint64_t)*(v21 - 1);
  MEMORY[0x1F4188790](v21);
  char v24 = (char *)&v44 - v23;
  (*(void (**)(char *, char *, Class *))(v22 + 16))((char *)&v44 - v23, a1, v21);
  char v25 = &v24[*((int *)v21 + 9)];
  uint64_t v50 = v19;
  if ((*(uint64_t (**)(char *, char *, uint64_t))(*(void *)(v19 + 8) + 8))(v24, v25, a2)) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't form an empty closed range", 32, 2, "Swift/ClosedRange.swift", 23, 2, 0x1C6uLL, 0);
  }
  unint64_t v45 = *(void (**)(char *, Class *))(v22 + 8);
  v45(v24, v21);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v12, (uint64_t)AssociatedTypeWitness, (uint64_t)v13, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
  char v27 = v46;
  (*(void (**)(void *, uint64_t, const char *, uint64_t))(AssociatedConformanceWitness + 8))(&unk_18162B0C8, 257, v13, AssociatedConformanceWitness);
  uint64_t v28 = v48;
  (*(void (**)(char *, const char *, uint64_t))(v12 + 24))(v27, AssociatedTypeWitness, v12);
  (*(void (**)(char *, uint64_t))(v52 + 48))(v28, a2);
  (*(void (**)(char *, const char *))(v49 + 8))(v28, AssociatedTypeWitness);
  uint64_t v29 = v51;
  int v30 = *(void (**)(char *, uint64_t, uint64_t))(v51 + 16);
  unint64_t v31 = v47;
  v30(v47, (uint64_t)a1, a2);
  v45(a1, v21);
  unint64_t v32 = v53;
  unint64_t v33 = TupleTypeMetadata2;
  unint64_t v34 = &v53[*((int *)TupleTypeMetadata2 + 12)];
  unint64_t v35 = *(void (**)(char *, char *, uint64_t))(v29 + 32);
  v35(v53, v31, a2);
  uint64_t v52 = (uint64_t)v34;
  v35(v34, v56, a2);
  uint64_t v36 = v55;
  char v37 = &v55[*((int *)v33 + 12)];
  v30(v55, (uint64_t)v32, a2);
  v30(v37, (uint64_t)v34, a2);
  uint64_t v38 = v54;
  v35(v54, v36, a2);
  unint64_t v39 = *(void (**)(char *, uint64_t))(v29 + 8);
  v39(v37, a2);
  BOOL v40 = &v36[*((int *)TupleTypeMetadata2 + 12)];
  v35(v36, v32, a2);
  v35(v40, (char *)v52, a2);
  char v42 = type metadata accessor for ClosedRange(0, a2, v50, v41);
  v35(&v38[*((int *)v42 + 9)], v40, a2);
  return ((uint64_t (*)(char *, uint64_t))v39)(v36, a2);
}

uint64_t ClosedRange.overlaps(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v23 = a1;
  uint64_t v5 = *(void *)(a2 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](a1);
  uint64_t v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = MEMORY[0x1F4188790](v6);
  uint64_t v11 = (char *)&v20 - v10;
  uint64_t v13 = v9 + *(int *)(v12 + 36);
  uint64_t v14 = *(void *)(v12 + 16);
  uint64_t v15 = *(void *)(v12 + 24);
  uint64_t v21 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v15 + 16);
  int v22 = v21(v13, v3, v14, v15);
  uint64_t v16 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v16(v11, v3, a2);
  v16(v8, v23, a2);
  if (v22) {
    char v17 = 0;
  }
  else {
    char v17 = v21((uint64_t)&v11[*(int *)(a2 + 36)], (uint64_t)v8, v14, v15) ^ 1;
  }
  uint64_t v18 = *(void (**)(char *, uint64_t))(v5 + 8);
  v18(v8, a2);
  v18(v11, a2);
  return v17 & 1;
}

uint64_t ClosedRange.overlaps(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = type metadata accessor for Range(0, *(void *)(a2 + 16), *(void *)(a2 + 24), a4);
  return Range.overlaps(_:)(v4, (uint64_t)v5, v6, v7) & 1;
}

uint64_t Range.overlaps(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v30 = a1;
  uint64_t v8 = *(void *)(a2 + 16);
  uint64_t v9 = *(void *)(a2 + 24);
  uint64_t v10 = type metadata accessor for ClosedRange(0, v8, v9, a4);
  uint64_t v11 = (uint64_t)*(v10 - 1);
  uint64_t v12 = MEMORY[0x1F4188790](v10);
  uint64_t v14 = (char *)&v29 - v13;
  uint64_t v15 = *(void *)(a2 - 8);
  uint64_t v16 = MEMORY[0x1F4188790](v12);
  unint64_t v33 = (char *)&v29 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = MEMORY[0x1F4188790](v16);
  uint64_t v20 = (char *)&v29 - v19;
  uint64_t v21 = a1 + *(int *)(v18 + 36);
  uint64_t v22 = v5;
  LOBYTE(v5) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 16))(v21, v5, v8, v9);
  uint64_t v32 = v15;
  uint64_t v23 = *(void (**)(char *, uint64_t, uint64_t))(v15 + 16);
  uint64_t v34 = v22;
  unint64_t v31 = v23;
  v23(v20, v22, a2);
  (*(void (**)(char *, uint64_t, Class *))(v11 + 16))(v14, v30, v10);
  uint64_t v29 = v8;
  if (v5) {
    char v24 = 1;
  }
  else {
    char v24 = (*(uint64_t (**)(char *, char *, uint64_t, uint64_t))(v9 + 24))(&v20[*(int *)(a2 + 36)], v14, v8, v9);
  }
  (*(void (**)(char *, Class *))(v11 + 8))(v14, v10);
  char v25 = *(void (**)(char *, uint64_t))(v32 + 8);
  v25(v20, a2);
  Swift::String::Index v26 = v33;
  v31(v33, v34, a2);
  if (v24) {
    char v27 = 0;
  }
  else {
    char v27 = (*(uint64_t (**)(char *, char *))(*(void *)(v9 + 8) + 8))(v26, &v26[*(int *)(a2 + 36)]) ^ 1;
  }
  v25(v26, a2);
  return v27 & 1;
}

uint64_t ClosedRange<>.init(from:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, char *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return ClosedRange<>.init(from:)(a1, a2, a3, a4, (uint64_t (*)(void, uint64_t, char *))type metadata accessor for ClosedRange, a5);
}

uint64_t protocol witness for Decodable.init(from:) in conformance <> ClosedRange<A>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return ClosedRange<>.init(from:)(a1, *(void *)(a2 + 16), *(char **)(a2 + 24), *(void *)(a3 - 8), a4);
}

uint64_t ClosedRange<>.encode(to:)(void *a1, uint64_t a2, uint64_t a3)
{
  return ClosedRange<>.encode(to:)(a1, a2, a3);
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v16[3];
  unint64_t v17;
  uint64_t v18;

  uint64_t v7 = a1[3];
  uint64_t v8 = a1[4];
  __swift_project_boxed_opaque_existential_0Tm(a1, v7);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v8 + 32))(v16, v7, v8);
  uint64_t v9 = v17;
  uint64_t v10 = v18;
  __swift_mutable_project_boxed_opaque_existential_1(v16, v17);
  uint64_t v11 = *(void *)(a2 + 16);
  (*(void (**)(uint64_t, uint64_t, uint64_t, unint64_t, uint64_t))(v10 + 160))(v3, v11, a3, v9, v10);
  if (!v4)
  {
    uint64_t v12 = v3 + *(int *)(a2 + 36);
    uint64_t v13 = v17;
    uint64_t v14 = v18;
    __swift_mutable_project_boxed_opaque_existential_1(v16, v17);
    (*(void (**)(uint64_t, uint64_t, uint64_t, unint64_t, uint64_t))(v14 + 160))(v12, v11, a3, v13, v14);
  }
  return __swift_destroy_boxed_opaque_existential_1Tm(v16);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance <> ClosedRange<A>(void *a1, uint64_t a2, uint64_t a3)
{
  return ClosedRange<>.encode(to:)(a1, a2, *(void *)(a3 - 8));
}

void __EmptyArrayStorage.init(_doNotCallMe:)()
{
  swift_release(v0);
  __break(1u);
}

uint64_t __EmptyArrayStorage._withVerbatimBridgedUnsafeBuffer<A>(_:)@<X0>(uint64_t (*a1)(void, void)@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t result = a1(0, 0);
  if (!v3) {
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(a2 - 8) + 56))(a3, 0, 1, a2);
  }
  return result;
}

void *__EmptyArrayStorage._getNonVerbatimBridgingBuffer()()
{
  uint64_t v0 = (unint64_t *)type metadata accessor for __BridgingBufferStorage(0);
  uint64_t result = swift_bufferAllocate(v0, 0x18uLL, 7uLL);
  result[2] = 0;
  return result;
}

uint64_t __EmptyArrayStorage.canStoreElements(ofDynamicType:)()
{
  return 0;
}

void *__EmptyArrayStorage.staticElementType.getter()
{
  return &unk_1ECA06270;
}

void __EmptyArrayStorage.__allocating_init(_doNotCallMeBase:)()
{
}

void __EmptyArrayStorage.init(_doNotCallMeBase:)()
{
}

uint64_t __EmptyArrayStorage.deinit()
{
  return v0;
}

uint64_t __ContiguousArrayStorageBase.deinit()
{
  return v0;
}

void __EmptyArrayStorage.__deallocating_deinit()
{
  swift_deallocClassInstance(v0);
}

void __ContiguousArrayStorageBase.__allocating_init()()
{
}

uint64_t __ContiguousArrayStorageBase.withUnsafeBufferOfObjects<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v11 = type metadata accessor for Optional(0, a3, a3, a4);
  uint64_t v12 = (uint64_t)*(v11 - 1);
  MEMORY[0x1F4188790](v11);
  uint64_t v14 = (char *)&v17 - v13;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v5 + 112))(a1, a2, a3);
  if (!v6)
  {
    uint64_t v16 = *(void *)(a3 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, a3) == 1)
    {
      uint64_t result = (*(uint64_t (**)(char *, Class *))(v12 + 8))(v14, v11);
      __break(1u);
    }
    else
    {
      return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v16 + 32))(a5, v14, a3);
    }
  }
  return result;
}

void __StaticArrayStorage.init(_doNotCallMe:)()
{
  swift_release(v0);
  __break(1u);
}

void __StaticArrayStorage._getNonVerbatimBridgingBuffer()()
{
}

void __StaticArrayStorage.staticElementType.getter()
{
}

void __StaticArrayStorage.__allocating_init(_doNotCallMeBase:)()
{
}

void __StaticArrayStorage.init(_doNotCallMeBase:)()
{
}

uint64_t __StaticArrayStorage.deinit()
{
  return v0;
}

uint64_t *_ContiguousArrayStorage.deinit()
{
  uint64_t v1 = *(void *)(*(void *)(*v0 + 144) - 8);
  swift_arrayDestroy((uint64_t)v0 + ((*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80)), v0[2], *(unint64_t **)(*v0 + 144));
  return v0;
}

uint64_t _ContiguousArrayStorage._elementPointer.getter()
{
  uint64_t v1 = *(void *)(*(void *)(*(void *)v0 + 144) - 8);
  return v0 + ((*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80));
}

void _ContiguousArrayStorage.__deallocating_deinit()
{
  uint64_t v1 = *(void *)(*(void *)(*v0 + 144) - 8);
  swift_arrayDestroy((uint64_t)v0 + ((*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80)), v0[2], *(unint64_t **)(*v0 + 144));

  swift_deallocClassInstance((uint64_t)v0);
}

uint64_t _ContiguousArrayStorage.withUnsafeBufferOfObjects<A>(_:)(uint64_t (*a1)(char *, void))
{
  uint64_t v2 = *(void *)(*(void *)(*(void *)v1 + 144) - 8);
  return a1(&v1[(*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80)], *((void *)v1 + 2));
}

uint64_t UnsafeRawPointer.assumingMemoryBound<A>(to:)(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t @objc _ContiguousArrayStorage.countByEnumerating(with:objects:count:)(uint64_t a1, uint64_t a2, void *a3)
{
  return specialized _ContiguousArrayStorage.countByEnumerating(with:objects:count:)(a3);
}

Swift::Bool __swiftcall _isValidArraySubscript(_:count:)(Swift::Int _, Swift::Int count)
{
  return _ >= 0 && _ < count;
}

uint64_t UnsafeBufferPointer.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return UnsafeBufferPointer.subscript.getter(a1, a2, a3, a4, 0x6F5uLL, 0x6F6uLL, a5);
}

uint64_t @objc _ContiguousArrayStorage.objectAtSubscript(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _ContiguousArrayStorage.objectAtSubscript(_:)(a3);
}

uint64_t _ContiguousArrayStorage.objectAtSubscript(_:)(uint64_t a1)
{
  if (a1 < 0 || v1[2] <= a1) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Array index out of range", 24, 2, "Swift/ContiguousArrayBuffer.swift", 33, 2, 0xBCuLL, 0);
  }
  return *(void *)((char *)&v1[a1]
                   + ((*(unsigned __int8 *)(*(void *)(*(void *)(*v1 + 144) - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(*v1 + 144) - 8) + 80)));
}

uint64_t @objc _ContiguousArrayStorage.objectAt(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _ContiguousArrayStorage.objectAtSubscript(_:)(a3);
}

uint64_t @objc _ContiguousArrayStorage.count.getter()
{
  return _ContiguousArrayStorage.count.getter();
}

uint64_t _ContiguousArrayStorage.count.getter()
{
  return *(void *)(v0 + 16);
}

void *_ContiguousArrayStorage.getObjects(_:range:)(void *result, uint64_t a2, uint64_t a3)
{
  if (a2 < 0 || (uint64_t v4 = v3[2], v4 < a2))
  {
    unint64_t v9 = 219;
    goto LABEL_14;
  }
  uint64_t v5 = a2 + a3;
  if (__OFADD__(a2, a3))
  {
    __break(1u);
LABEL_17:
    __break(1u);
LABEL_18:
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeMutableRawPointer.copyMemory with negative count", 54, 2, "Swift/UnsafeRawPointer.swift", 28, 2, 0x60DuLL, 0);
  }
  if (v5 < 0 || v4 < v5)
  {
    unint64_t v9 = 223;
LABEL_14:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Array index out of range", 24, 2, "Swift/ContiguousArrayBuffer.swift", 33, 2, v9, 0);
  }
  if (!v4) {
    return result;
  }
  if ((unint64_t)(a3 - 0x1000000000000000) >> 61 != 7) {
    goto LABEL_17;
  }
  size_t v7 = 8 * a3;
  if ((v7 & 0x8000000000000000) != 0) {
    goto LABEL_18;
  }
  uint64_t v6 = *(void *)(*(void *)(*v3 + 144) - 8);
  uint64_t v8 = (char *)&v3[a2] + ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));

  return memmove(result, v8, v7);
}

Swift::Bool __swiftcall _isValidArrayIndex(_:count:)(Swift::Int _, Swift::Int count)
{
  return _ >= 0 && count >= _;
}

BOOL UnsafeBufferPointer.isEmpty.getter(uint64_t a1, uint64_t a2)
{
  return a2 == 0;
}

Swift::Void __swiftcall UnsafeMutableRawPointer.copyMemory(from:byteCount:)(Swift::UnsafeRawPointer from, Swift::Int byteCount)
{
  if (byteCount < 0) {
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeMutableRawPointer.copyMemory with negative count", 54, 2, "Swift/UnsafeRawPointer.swift", 28, 2, 0x60DuLL, 0);
  }
  memmove(v2, from._rawValue, byteCount);
}

void *@objc _ContiguousArrayStorage.getObjects(_:range:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  return _ContiguousArrayStorage.getObjects(_:range:)(a3, a4, a5);
}

uint64_t _ContiguousArrayStorage._withVerbatimBridgedUnsafeBuffer<A>(_:)@<X0>(uint64_t (*a1)(char *, void)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v16 = a2;
  uint64_t v17 = a1;
  uint64_t v9 = *(void *)v5;
  uint64_t v10 = type metadata accessor for Optional(0, a3, a3, a4);
  uint64_t v18 = (uint64_t)*(v10 - 1);
  MEMORY[0x1F4188790](v10);
  uint64_t v12 = (char *)&v16 - v11;
  uint64_t v13 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a3 - 8) + 56);
  v13(a5, 1, 1, a3);
  uint64_t v14 = *(uint64_t **)(v9 + 144);
  uint64_t result = _swift_isClassOrObjCExistentialType((uint64_t)v14, v14);
  if (result)
  {
    (*(void (**)(uint64_t, Class *))(v18 + 8))(a5, v10);
    uint64_t result = v17(&v5[(*(unsigned __int8 *)(*(v14 - 1) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(v14 - 1) + 80)], *((void *)v5 + 2));
    if (!v6)
    {
      v13((uint64_t)v12, 0, 1, a3);
      return (*(uint64_t (**)(uint64_t, char *, Class *))(v18 + 32))(a5, v12, v10);
    }
  }
  return result;
}

unint64_t *_ContiguousArrayStorage._getNonVerbatimBridgingBuffer()(uint64_t a1)
{
  uint64_t v2 = *(uint64_t **)(*v1 + 144);
  uint64_t v3 = *(v2 - 1);
  uint64_t v4 = MEMORY[0x1F4188790](a1);
  uint64_t v18 = (id *)((char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v21 = v5;
  MEMORY[0x1F4188790](v4);
  size_t v7 = (id *)((char *)&v16 - v6);
  unint64_t v8 = v1[2];
  uint64_t result = (unint64_t *)type metadata accessor for __BridgingBufferStorage(0);
  if (v8 >> 60)
  {
    __break(1u);
    goto LABEL_14;
  }
  if (__OFADD__(8 * v8, 24))
  {
LABEL_14:
    __break(1u);
    return result;
  }
  uint64_t v19 = swift_bufferAllocate(result, 8 * v8 + 24, 7uLL);
  void v19[2] = v8;
  if (v8)
  {
    uint64_t v10 = v19 + 3;
    uint64_t v11 = (char *)v1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    uint64_t v20 = *(void (**)(id *, char *, uint64_t *))(v3 + 16);
    uint64_t v12 = *(void *)(v3 + 72);
    uint64_t v17 = (void (**)(char *, id *, uint64_t *))(v3 + 32);
    do
    {
      v20(v7, v11, v2);
      if (_swift_isClassOrObjCExistentialType((uint64_t)v2, v2))
      {
        if (v21 != 8) {
          _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't unsafeBitCast between types of different sizes", 52, 2, "Swift/Builtin.swift", 19, 2, 0x5FuLL, 0);
        }
        uint64_t v13 = *v7;
        uint64_t v14 = *(void (**)(id *, uint64_t *))(v3 + 8);
        swift_unknownObjectRetain(*v7);
        v14(v7, v2);
      }
      else
      {
        uint64_t v15 = v18;
        (*v17)((char *)v18, v7, v2);
        uint64_t v13 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(v15, v2);
      }
      *v10++ = v13;
      v11 += v12;
      --v8;
    }
    while (v8);
  }
  return v19;
}

BOOL _ContiguousArrayStorage.canStoreElements(ofDynamicType:)(uint64_t *a1)
{
  return swift_dynamicCastMetatype(a1, *(uint64_t **)(*(void *)v1 + 144)) != 0;
}

uint64_t _ContiguousArrayStorage.staticElementType.getter()
{
  return *(void *)(*(void *)v0 + 144);
}

void _ContiguousArrayStorage.init(_doNotCallMeBase:)()
{
  swift_release(v0);
  __break(1u);
}

void __ContiguousArrayStorageBase.init(_doNotCallMeBase:)()
{
  swift_release(v0);
  __break(1u);
}

uint64_t (*_ContiguousArrayBuffer._storage.modify())(void, void)
{
  return EnumeratedSequence._base.modify;
}

Swift::Void __swiftcall _ContiguousArrayBuffer._initStorageHeader(count:capacity:)(Swift::Int count, Swift::Int capacity)
{
  uint64_t v4 = v2;
  BOOL isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType((uint64_t)v3, v3);
  *(void *)(v4 + 16) = count;
  *(void *)(v4 + 24) = isClassOrObjCExistentialType | (unint64_t)(2 * capacity);
}

uint64_t _ContiguousArrayBuffer.arrayPropertyIsNativeTypeChecked.getter()
{
  return 1;
}

uint64_t _ContiguousArrayBuffer.withUnsafeMutableBufferPointer<A>(_:)(uint64_t (*a1)(unint64_t, void), uint64_t a2, uint64_t a3)
{
  return a1(*(void *)v3+ ((*(unsigned __int8 *)(*(void *)(*(void *)(a3 + 16) - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(a3 + 16) - 8) + 80)), *(void *)(*(void *)v3 + 16));
}

atomic_ullong *_ContiguousArrayBuffer.requestUniqueMutableBackingBuffer(minimumCapacity:)(int64_t a1)
{
  if (swift_isUniquelyReferenced_nonNull_native((uint64_t)*v1) && a1 <= (uint64_t)((unint64_t)(*v1)[3] >> 1)) {
    return swift_retain(*v1);
  }
  else {
    return 0;
  }
}

uint64_t key path getter for _ContiguousArrayBuffer.subscript(_:) : <A>_ContiguousArrayBuffer<A>A@<X0>(void *a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4 = *(void *)(*(void *)((char *)a2 + a3 - 8) - 8);
  return (*(uint64_t (**)(uint64_t, unint64_t))(v4 + 16))(a4, *a1+ ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))+ *(void *)(v4 + 72) * *a2);
}

uint64_t key path setter for _ContiguousArrayBuffer.subscript(_:) : <A>_ContiguousArrayBuffer<A>A(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(*(void *)((char *)a3 + a4 - 8) - 8);
  return (*(uint64_t (**)(unint64_t, uint64_t, void))(v4 + 24))(*a2+ ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))+ *(void *)(v4 + 72) * *a3, a1, *(void *)((char *)a3 + a4 - 8));
}

void (*_ContiguousArrayBuffer.subscript.modify(void *a1, uint64_t a2, uint64_t a3, uint64_t a4))(void **a1, char a2)
{
  unint64_t v8 = malloc(0x50uLL);
  *a1 = v8;
  v8[1] = a3;
  void v8[2] = a4;
  *unint64_t v8 = a2;
  uint64_t v9 = *(void *)(a4 - 8);
  uint64_t v10 = v9;
  uint64_t v8[3] = v9;
  size_t v11 = *(void *)(v9 + 64);
  v8[4] = malloc(v11);
  void v8[5] = malloc(v11);
  uint64_t v12 = *(void (**)(void))(v10 + 16);
  v10 += 16;
  *((_DWORD *)v8 + 18) = *(_DWORD *)(v10 + 64);
  v8[6] = *(void *)(v10 + 56);
  v8[7] = v12;
  v8[8] = v10 & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v12();
  return _ContiguousArrayBuffer.subscript.modify;
}

void _ContiguousArrayBuffer.subscript.modify(void **a1, char a2)
{
  uint64_t v2 = *a1;
  if (a2)
  {
    uint64_t v3 = (void *)v2[5];
    uint64_t v5 = v2[3];
    uint64_t v4 = (void *)v2[4];
    uint64_t v6 = v2[2];
    (*(void (**)(unint64_t, void *, uint64_t))(v5 + 24))(v2[1] + ((*((unsigned __int8 *)v2 + 72) + 32) & ~(unint64_t)*((unsigned __int8 *)v2 + 72)) + *v2 * v2[6], v3, v6);
    (*(void (**)(void *, uint64_t))(v5 + 8))(v3, v6);
  }
  else
  {
    size_t v7 = (void (*)(void *, unint64_t, uint64_t))v2[7];
    uint64_t v3 = (void *)v2[5];
    uint64_t v8 = v2[3];
    uint64_t v4 = (void *)v2[4];
    uint64_t v9 = v2[2];
    unint64_t v10 = v2[1]
        + ((*((unsigned __int8 *)v2 + 72) + 32) & ~(unint64_t)*((unsigned __int8 *)v2 + 72))
        + *v2 * v2[6];
    (*(void (**)(void *, void *, uint64_t))(v8 + 32))(v4, v3, v9);
    v7(v3, v10, v9);
    (*(void (**)(void *, uint64_t))(v8 + 8))(v3, v9);
    (*(void (**)(unint64_t, void *, uint64_t))(v8 + 40))(v10, v4, v9);
  }
  free(v3);
  free(v4);

  free(v2);
}

uint64_t key path getter for _ContiguousArrayBuffer.count : <A>_ContiguousArrayBuffer<A>@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = _ContiguousArrayBuffer.count.getter(*a1);
  *a2 = result;
  return result;
}

uint64_t key path setter for _ContiguousArrayBuffer.count : <A>_ContiguousArrayBuffer<A>(uint64_t *a1, uint64_t *a2)
{
  return _ContiguousArrayBuffer.count.setter(*a1, *a2);
}

void *(*_ContiguousArrayBuffer.count.modify(void *a1, uint64_t a2))(void *result)
{
  *a1 = *(void *)(a2 + 16);
  a1[1] = a2;
  return _ContiguousArrayBuffer.count.modify;
}

void *_ContiguousArrayBuffer.count.modify(void *result)
{
  *(void *)(result[1] + 16) = *result;
  return result;
}

uint64_t key path getter for _ContiguousArrayBuffer.mutableCount : <A>_ContiguousArrayBuffer<A>@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = *(void *)(*(void *)result + 16);
  return result;
}

void *key path setter for _ContiguousArrayBuffer.mutableCount : <A>_ContiguousArrayBuffer<A>(void *result, uint64_t a2)
{
  *(void *)(*(void *)a2 + 16) = *result;
  return result;
}

id key path getter for _ContiguousArrayBuffer.subscript(_:) : <A>_ContiguousArrayBuffer<A>A@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, void *a3@<X8>)
{
  uint64_t v4 = (void *)specialized _ContiguousArrayBuffer.subscript.getter(*a2, a2[1], *a1);
  *a3 = v4;
  a3[1] = v5;
  a3[2] = v6;
  a3[3] = v7;

  return swift_unknownObjectRetain(v4);
}

uint64_t key path setter for _ContiguousArrayBuffer.subscript(_:) : <A>_ContiguousArrayBuffer<A>A(void **a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for _ArrayBuffer.subscript(_:) : <A>_ArrayBuffer<A>A(a1, a2, a3, a4, (uint64_t (*)(void, void))type metadata accessor for _ContiguousArrayBuffer, (uint64_t (*)(uint64_t))specialized _ContiguousArrayBuffer.subscript.setter);
}

uint64_t key path setter for _ArrayBuffer.subscript(_:) : <A>_ArrayBuffer<A>A(void **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, void), uint64_t (*a6)(uint64_t))
{
  uint64_t v7 = *a1;
  uint64_t v8 = a5(0, *(void *)(a4 + a3 - 8));
  swift_unknownObjectRetain(v7);
  return a6(v8);
}

void _ContiguousArrayBuffer.subscript.setter()
{
}

void (*_ContiguousArrayBuffer.subscript.modify(atomic_ullong **a1, atomic_ullong *a2, uint64_t a3, uint64_t a4))(id *a1, char a2)
{
  if (a3 < 0) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, 2, 0xD7BuLL, 0);
  }
  uint64_t v6 = *v4;
  unint64_t v7 = (unint64_t)*v4
     + ((*(unsigned __int8 *)(*(void *)(*(void *)(a4 + 16) - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(a4 + 16) - 8) + 80));
  *a1 = *v4;
  a1[1] = (atomic_ullong *)v7;
  a1[2] = a2;
  a1[3] = (atomic_ullong *)((2 * a3) | 1);
  swift_retain(v6);
  return _ContiguousArrayBuffer.subscript.modify;
}

void _ContiguousArrayBuffer.subscript.modify(id *a1, char a2)
{
}

void *__SwiftDeferredStaticNSArray.__allocating_init(_nativeStorage:)(uint64_t a1)
{
  uint64_t result = swift_allocObject(v1, 0x20uLL, 7uLL);
  result[2] = 0;
  result[3] = a1;
  return result;
}

void *__SwiftDeferredNSArray.__allocating_init(_nativeStorage:)(uint64_t a1)
{
  uint64_t result = swift_allocObject(v1, 0x20uLL, 7uLL);
  result[2] = 0;
  result[3] = a1;
  return result;
}

uint64_t _ContiguousArrayBuffer.canStoreElements(ofDynamicType:)(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(void *)a2 + 128))() & 1;
}

char *protocol witness for _ArrayBufferProtocol._copyContents(subRange:initializing:) in conformance _ContiguousArrayBuffer<A>(uint64_t a1, uint64_t a2, char *a3, uint64_t a4)
{
  uint64_t v5 = *v4;
  uint64_t v6 = specialized _ContiguousArrayBuffer._copyContents(subRange:initializing:)(a1, a2, a3, *v4, *(unint64_t **)(a4 + 16));
  swift_release(v5);
  return v6;
}

atomic_ullong *protocol witness for _ArrayBufferProtocol.requestNativeBuffer() in conformance _ContiguousArrayBuffer<A>()
{
  uint64_t v0 = (atomic_ullong *)EnumeratedSequence._base.modify();

  return swift_retain(v0);
}

id protocol witness for _ArrayBufferProtocol.subscript.getter in conformance _ContiguousArrayBuffer<A>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)specialized _ContiguousArrayBuffer.subscript.getter(a1, a2, *v2);
  return swift_unknownObjectRetain(v3);
}

uint64_t protocol witness for _ArrayBufferProtocol.withUnsafeBufferPointer<A>(_:) in conformance _ContiguousArrayBuffer<A>(uint64_t (*a1)(unint64_t, void), uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _ContiguousArrayBuffer.withUnsafeBufferPointer<A>(_:)(a1, a2, *v4, *(void *)(a4 + 16));
}

uint64_t protocol witness for _ArrayBufferProtocol.withUnsafeMutableBufferPointer<A>(_:) in conformance _ContiguousArrayBuffer<A>(uint64_t (*a1)(unint64_t, void), uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _ContiguousArrayBuffer.withUnsafeMutableBufferPointer<A>(_:)(a1, a2, a4);
}

uint64_t protocol witness for _ArrayBufferProtocol.count.setter in conformance _ContiguousArrayBuffer<A>(uint64_t a1)
{
  return _ContiguousArrayBuffer.count.setter(a1, *v1);
}

void *(*protocol witness for _ArrayBufferProtocol.count.modify in conformance _ContiguousArrayBuffer<A>(void *a1))(void *result)
{
  uint64_t v2 = *v1;
  a1[1] = *v1;
  *a1 = *(void *)(v2 + 16);
  return _ContiguousArrayBuffer.count.modify;
}

uint64_t protocol witness for _ArrayBufferProtocol.capacity.getter in conformance _ContiguousArrayBuffer<A>()
{
  return _ContiguousArrayBuffer.capacity.getter(*v0);
}

uint64_t protocol witness for _ArrayBufferProtocol.firstElementAddress.getter in conformance _ContiguousArrayBuffer<A>(uint64_t a1)
{
  return _ContiguousArrayBuffer.firstElementAddress.getter(*v1, *(void *)(a1 + 16));
}

uint64_t protocol witness for _ArrayBufferProtocol.firstElementAddressIfContiguous.getter in conformance _ContiguousArrayBuffer<A>(uint64_t a1)
{
  return _ContiguousArrayBuffer.firstElementAddressIfContiguous.getter(*v1, *(void *)(a1 + 16));
}

uint64_t protocol witness for _ArrayBufferProtocol.identity.getter in conformance _ContiguousArrayBuffer<A>(uint64_t a1)
{
  return ContiguousArray._baseAddress.getter(*v1, *(void *)(a1 + 16));
}

uint64_t protocol witness for MutableCollection.subscript.setter in conformance _ContiguousArrayBuffer<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *v9;
  uint64_t v11 = *v3;
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 32))(v8, a1, v5);
  unint64_t v12 = v11
      + ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))
      + *(void *)(v6 + 72) * v10;
  (*(void (**)(uint64_t, unint64_t, uint64_t))(v6 + 16))(a1, v12, v5);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a1, v5);
  return (*(uint64_t (**)(unint64_t, char *, uint64_t))(v6 + 40))(v12, v8, v5);
}

void (*protocol witness for MutableCollection.subscript.modify in conformance _ContiguousArrayBuffer<A>(void *a1, uint64_t *a2, uint64_t a3))(void **a1, char a2)
{
  uint64_t v7 = malloc(0x50uLL);
  *a1 = v7;
  uint64_t v8 = *(void *)(a3 + 16);
  *uint64_t v7 = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = v9;
  v7[1] = v9;
  size_t v11 = *(void *)(v9 + 64);
  v7[2] = malloc(v11);
  unint64_t v12 = malloc(v11);
  uint64_t v13 = *a2;
  v7[3] = v12;
  _OWORD v7[4] = v13;
  v7[5] = *v3;
  uint64_t v14 = *(void (**)(void))(v10 + 16);
  v10 += 16;
  *((_DWORD *)v7 + 18) = *(_DWORD *)(v10 + 64);
  v7[6] = *(void *)(v10 + 56);
  v7[7] = v14;
  v7[8] = v10 & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v14();
  return protocol witness for MutableCollection.subscript.modify in conformance _ContiguousArrayBuffer<A>;
}

void protocol witness for MutableCollection.subscript.modify in conformance _ContiguousArrayBuffer<A>(void **a1, char a2)
{
  uint64_t v2 = *a1;
  if (a2)
  {
    uint64_t v3 = (void *)v2[3];
    uint64_t v4 = (void *)v2[2];
    (*(void (**)(unint64_t, void *, void))(v2[1] + 40))(v2[5]+ ((*((unsigned __int8 *)v2 + 72) + 32) & ~(unint64_t)*((unsigned __int8 *)v2 + 72))+ v2[4] * v2[6], v3, *v2);
  }
  else
  {
    uint64_t v5 = (void (*)(void *, unint64_t, uint64_t))v2[7];
    uint64_t v3 = (void *)v2[3];
    uint64_t v6 = v2[1];
    uint64_t v4 = (void *)v2[2];
    uint64_t v7 = *v2;
    unint64_t v8 = v2[5]
       + ((*((unsigned __int8 *)v2 + 72) + 32) & ~(unint64_t)*((unsigned __int8 *)v2 + 72))
       + v2[4] * v2[6];
    (*(void (**)(void *, void *, void))(v6 + 32))(v4, v3, *v2);
    v5(v3, v8, v7);
    (*(void (**)(void *, uint64_t))(v6 + 8))(v3, v7);
    (*(void (**)(unint64_t, void *, uint64_t))(v6 + 40))(v8, v4, v7);
  }
  free(v3);
  free(v4);

  free(v2);
}

void protocol witness for MutableCollection.subscript.setter in conformance _ContiguousArrayBuffer<A>()
{
}

void (*protocol witness for MutableCollection.subscript.modify in conformance _ContiguousArrayBuffer<A>(atomic_ullong **a1, atomic_ullong **a2, uint64_t a3))(id *a1, char a2)
{
  uint64_t v4 = a2[1];
  if (((unint64_t)v4 & 0x8000000000000000) != 0) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, 2, 0xD7BuLL, 0);
  }
  uint64_t v6 = *a2;
  uint64_t v7 = *v3;
  unint64_t v8 = (unint64_t)*v3
     + ((*(unsigned __int8 *)(*(void *)(*(void *)(a3 + 16) - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(a3 + 16) - 8) + 80));
  *a1 = *v3;
  a1[1] = (atomic_ullong *)v8;
  a1[2] = v6;
  a1[3] = (atomic_ullong *)((2 * (void)v4) | 1);
  swift_retain(v7);
  return protocol witness for MutableCollection.subscript.modify in conformance _ContiguousArrayBuffer<A>;
}

void protocol witness for MutableCollection.subscript.modify in conformance _ContiguousArrayBuffer<A>(id *a1, char a2)
{
  if ((a2 & 1) == 0) {
    swift_unknownObjectRelease(*a1);
  }
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0x6C706D6920746F6ELL, 0xEF6465746E656D65, "Swift/ContiguousArrayBuffer.swift", 33, 2, 0x304uLL, 0);
}

void *protocol witness for MutableCollection.partition(by:) in conformance _ContiguousArrayBuffer<A>@<X0>(uint64_t (*a1)(char *)@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t WitnessTable = swift_getWitnessTable(protocol conformance descriptor for _ContiguousArrayBuffer<A>, a3, (uint64_t)a3);
  return MutableCollection<>.partition(by:)(a1, a2, (uint64_t)a3, WitnessTable, a4, a5);
}

uint64_t += infix<A, B>(_:_:)(__objc2_class ***a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7 = (uint64_t *)a3;
  unint64_t v58 = type metadata accessor for Optional(0, a3, a3, a4);
  uint64_t v10 = (uint64_t)*(v58 - 1);
  uint64_t v11 = MEMORY[0x1F4188790](v58);
  uint64_t v60 = (char *)&v49 - v12;
  uint64_t v13 = *(__objc2_class ****)(a4 - 8);
  MEMORY[0x1F4188790](v11);
  uint64_t v15 = *(int ***)(a5 + 8);
  uint64_t v56 = (char *)&v49 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  size_t v57 = v15;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v15, a4, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Iterator);
  uint64_t v53 = *((void *)AssociatedTypeWitness - 1);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  unint64_t v62 = (char *)&v49 - v16;
  uint64_t v51 = a1;
  uint64_t v17 = (uint64_t)*a1;
  uint64_t v18 = (uint64_t)(*a1)[2];
  uint64_t v61 = *(uint64_t (**)(uint64_t, uint64_t))(a5 + 112);
  uint64_t result = v61(a4, a5);
  uint64_t v55 = v18;
  BOOL v22 = __OFADD__(v18, result);
  uint64_t v23 = v18 + result;
  if (v22)
  {
    __break(1u);
  }
  else
  {
    unint64_t v20 = *(void *)(v17 + 24);
    unint64_t v21 = v20 >> 1;
    uint64_t v54 = v10;
    if ((uint64_t)(v20 >> 1) >= v23)
    {
      uint64_t v51 = v13;
      uint64_t v24 = a5;
      char v25 = v7;
      uint64_t v26 = *(v7 - 1);
      uint64_t v27 = a2;
      uint64_t v28 = *(unsigned __int8 *)(v26 + 80);
      uint64_t v29 = *(void *)(v26 + 72);
      uint64_t v30 = v27;
      uint64_t v31 = v61(a4, v24);
      if (v31 < 0) {
        _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeMutableBufferPointer with negative count", 46, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x47uLL, 0);
      }
      uint64_t v32 = v31;
      uint64_t v52 = v26;
      uint64_t v33 = v17 + ((v28 + 32) & ~v28) + v29 * v55;
      *(void *)(v17 + 16) = v23;
      a2 = v30;
      uint64_t v7 = v25;
      uint64_t v13 = v51;
      goto LABEL_5;
    }
  }
  if ((uint64_t)(v21 + 0x4000000000000000) < 0)
  {
    __break(1u);
    return result;
  }
  BOOL v40 = _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(v23, v20 & 0xFFFFFFFFFFFFFFFELL, v7);
  uint64_t v41 = *(v7 - 1);
  uint64_t v49 = v40;
  uint64_t v50 = v41;
  uint64_t v52 = v41;
  unint64_t v42 = (*(unsigned __int8 *)(v41 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v41 + 80);
  unint64_t v43 = (char *)v40 + v42;
  uint64_t v44 = v55;
  UnsafeMutablePointer.moveInitialize(from:count:)((char *)(v17 + v42), v55, (char *)v40 + v42, (unint64_t *)v7);
  *(void *)(v17 + 16) = 0;
  swift_release(v17);
  uint64_t v45 = v50;
  *uint64_t v51 = v49;
  uint64_t v46 = (uint64_t)&v43[*(void *)(v45 + 72) * v44];
  uint64_t v47 = v61(a4, a5);
  uint64_t v33 = UnsafeMutableBufferPointer.init(start:count:)(v46, v47);
  uint64_t v32 = v48;
LABEL_5:
  ((void (*)(char *, uint64_t, uint64_t))v13[2])(v56, a2, a4);
  uint64_t v34 = (uint64_t)v57;
  uint64_t v35 = ((uint64_t (*)(char *, uint64_t, uint64_t, uint64_t, int **))v57[8])(v62, v33, v32, a4, v57);
  uint64_t v36 = AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v34, a4, (uint64_t)AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Sequence, associated conformance descriptor for Sequence.Sequence.Iterator: IteratorProtocol);
  uint64_t v38 = v60;
  (*(void (**)(const char *, uint64_t))(AssociatedConformanceWitness + 16))(v36, AssociatedConformanceWitness);
  int v39 = (*(uint64_t (**)(char *, uint64_t, uint64_t *))(v52 + 48))(v38, 1, v7);
  (*(void (**)(char *, Class *))(v54 + 8))(v38, v58);
  if (v39 != 1) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "rhs underreported its count", 27, 2, "Swift/ContiguousArrayBuffer.swift", 33, 2, 0x3F9uLL, 0);
  }
  if (v35 != v32) {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "rhs overreported its count", 26, 2, "Swift/ContiguousArrayBuffer.swift", 33, 2, 0x3FAuLL, 0);
  }
  ((void (*)(uint64_t, uint64_t))v13[1])(a2, a4);
  return (*(uint64_t (**)(char *, const char *))(v53 + 8))(v62, v36);
}

uint64_t protocol witness for BidirectionalCollection.index(before:) in conformance _ContiguousArrayBuffer<A>@<X0>(uint64_t a1@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t WitnessTable = swift_getWitnessTable(protocol conformance descriptor for _ContiguousArrayBuffer<A>, a2, a3);

  return RandomAccessCollection<>.index(before:)(a1, (uint64_t)a2, WitnessTable, (uint64_t)&protocol witness table for Int, a4);
}

void *protocol witness for BidirectionalCollection.formIndex(before:) in conformance _ContiguousArrayBuffer<A>(void *a1, unint64_t *a2, uint64_t a3)
{
  return protocol witness for Collection.formIndex(after:) in conformance _ArrayBuffer<A>(a1, a2, a3, protocol conformance descriptor for _ContiguousArrayBuffer<A>, (void *(*)(uint64_t *__return_ptr, void *, unint64_t *, uint64_t, _UNKNOWN **))RandomAccessCollection<>.index(before:));
}

uint64_t protocol witness for BidirectionalCollection.index(_:offsetBy:) in conformance _ContiguousArrayBuffer<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t WitnessTable = swift_getWitnessTable(protocol conformance descriptor for _ContiguousArrayBuffer<A>, a3, (uint64_t)a3);

  return RandomAccessCollection<>.index(_:offsetBy:)(a1, a2, (uint64_t)a3, WitnessTable, (uint64_t)&protocol witness table for Int, a4);
}

uint64_t protocol witness for BidirectionalCollection.index(_:offsetBy:limitedBy:) in conformance _ContiguousArrayBuffer<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t WitnessTable = swift_getWitnessTable(protocol conformance descriptor for _ContiguousArrayBuffer<A>, a4, a3);

  return RandomAccessCollection.index(_:offsetBy:limitedBy:)(a1, a2, a3, (uint64_t)a4, WitnessTable, a5);
}

uint64_t protocol witness for BidirectionalCollection.distance(from:to:) in conformance _ContiguousArrayBuffer<A>(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  uint64_t WitnessTable = swift_getWitnessTable(protocol conformance descriptor for _ContiguousArrayBuffer<A>, a3, (uint64_t)a3);

  return RandomAccessCollection<>.distance(from:to:)(a1, a2, (uint64_t)a3, WitnessTable, (uint64_t)&protocol witness table for Int);
}

Swift::Int protocol witness for Collection.endIndex.getter in conformance _ContiguousArrayBuffer<A>@<X0>(Swift::Int *a1@<X8>)
{
  Swift::Int result = ContiguousArray._getCount()();
  *a1 = result;
  return result;
}

uint64_t (*protocol witness for Collection.subscript.read in conformance _ContiguousArrayBuffer<A>(void *a1))()
{
  uint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = _ContiguousArrayBuffer.subscript.read();
  return protocol witness for Collection.subscript.read in conformance _ArrayBuffer<A>;
}

uint64_t (*_ContiguousArrayBuffer.subscript.read())(void, void)
{
  return EnumeratedSequence._base.modify;
}

id protocol witness for Collection.subscript.getter in conformance _ContiguousArrayBuffer<A>@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = (void *)specialized _ContiguousArrayBuffer.subscript.getter(*a1, a1[1], *v2);
  *a2 = v4;
  a2[1] = v5;
  a2[2] = v6;
  a2[3] = v7;

  return swift_unknownObjectRetain(v4);
}

uint64_t protocol witness for Collection.indices.getter in conformance _ContiguousArrayBuffer<A>@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X2>, char *a3@<X8>)
{
  uint64_t WitnessTable = swift_getWitnessTable(protocol conformance descriptor for _ContiguousArrayBuffer<A>, a1, a2);

  return RandomAccessCollection<>.indices.getter((uint64_t)a1, WitnessTable, (uint64_t)&protocol witness table for Int, a3);
}

uint64_t protocol witness for Collection.count.getter in conformance _ContiguousArrayBuffer<A>()
{
  return _ContiguousArrayBuffer.count.getter(*v0);
}

uint64_t protocol witness for Collection.index(after:) in conformance _ContiguousArrayBuffer<A>@<X0>(uint64_t a1@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t WitnessTable = swift_getWitnessTable(protocol conformance descriptor for _ContiguousArrayBuffer<A>, a2, a3);

  return RandomAccessCollection<>.index(after:)(a1, (uint64_t)a2, WitnessTable, (uint64_t)&protocol witness table for Int, a4);
}

void *protocol witness for Collection.formIndex(after:) in conformance _ContiguousArrayBuffer<A>(void *a1, unint64_t *a2, uint64_t a3)
{
  return protocol witness for Collection.formIndex(after:) in conformance _ArrayBuffer<A>(a1, a2, a3, protocol conformance descriptor for _ContiguousArrayBuffer<A>, (void *(*)(uint64_t *__return_ptr, void *, unint64_t *, uint64_t, _UNKNOWN **))RandomAccessCollection<>.index(after:));
}

uint64_t protocol witness for Sequence.underestimatedCount.getter in conformance _ContiguousArrayBuffer<A>(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable(protocol conformance descriptor for _ContiguousArrayBuffer<A>, a1, a3);

  return Collection.underestimatedCount.getter((uint64_t)a1, WitnessTable);
}

uint64_t protocol witness for Sequence._copyContents(initializing:) in conformance _ContiguousArrayBuffer<A>(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return protocol witness for Sequence._copyContents(initializing:) in conformance _ArrayBuffer<A>(a1, a2, a3, a4, a5, (uint64_t (*)(uint64_t, uint64_t, void, void))_ContiguousArrayBuffer._copyContents(initializing:));
}

uint64_t protocol witness for Sequence._copyContents(initializing:) in conformance _ArrayBuffer<A>(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(uint64_t, uint64_t, void, void))
{
  *a1 = a6(a2, a3, *v6, *(void *)(a4 + 16));
  a1[1] = v8;
  return v9;
}

void specialized _copySequenceToContiguousArray<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v4 = &_swiftEmptyArrayStorage;
  swift_bridgeObjectRetain(a4);
  unint64_t v5 = specialized Unicode._InternalNFD.Iterator.next()();
  if ((v5 & 0x1000000000000) == 0)
  {
    int v6 = v5;
    unint64_t v7 = 0;
    uint64_t v8 = &_swiftEmptySetSingleton;
    while (1)
    {
      if (!v7)
      {
        unint64_t v9 = (unint64_t)v4[3];
        if ((uint64_t)((v9 >> 1) + 0x4000000000000000) < 0) {
          goto LABEL_28;
        }
        int64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
        if (v10 <= 1) {
          uint64_t v11 = 1;
        }
        else {
          uint64_t v11 = v10;
        }
        uint64_t v12 = (unint64_t *)canonical specialized generic type metadata accessor for _ContiguousArrayStorage<Unicode.Scalar>();
        uint64_t v13 = (__objc2_class **)swift_allocObject(v12, 4 * v11 + 32, 7uLL);
        int64_t v14 = _swift_stdlib_malloc_size(v13);
        uint64_t v15 = v14 - 32;
        if (v14 < 32) {
          uint64_t v15 = v14 - 29;
        }
        uint64_t v16 = v15 >> 2;
        void v13[2] = (__objc2_class *)v11;
        uint64_t v13[3] = (__objc2_class *)(2 * (v15 >> 2));
        unint64_t v17 = (unint64_t)(v13 + 4);
        unint64_t v18 = (unint64_t)v4[3] >> 1;
        if (v4[2])
        {
          if (v13 != v4 || v17 >= (unint64_t)v4 + 4 * v18 + 32) {
            memmove(v13 + 4, v4 + 4, 4 * v18);
          }
          v4[2] = 0;
        }
        uint64_t v8 = (__objc2_class **)(v17 + 4 * v18);
        unint64_t v7 = (v16 & 0x7FFFFFFFFFFFFFFFLL) - v18;
        swift_release((uint64_t)v4);
        uint64_t v4 = v13;
      }
      BOOL v20 = __OFSUB__(v7--, 1);
      if (v20) {
        break;
      }
      *(_DWORD *)uint64_t v8 = v6;
      uint64_t v8 = (__objc2_class **)((char *)v8 + 4);
      unint64_t v21 = specialized Unicode._InternalNFD.Iterator.next()();
      int v6 = v21;
      if ((v21 & 0x1000000000000) != 0) {
        goto LABEL_23;
      }
    }
    __break(1u);
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  unint64_t v7 = 0;
LABEL_23:
  swift_bridgeObjectRelease(a4);
  swift_bridgeObjectRelease((uint64_t)&_swiftEmptyArrayStorage);
  unint64_t v22 = (unint64_t)v4[3];
  if (v22 >= 2)
  {
    unint64_t v23 = v22 >> 1;
    BOOL v20 = __OFSUB__(v23, v7);
    uint64_t v24 = (__objc2_class *)(v23 - v7);
    if (v20)
    {
LABEL_29:
      __break(1u);
      return;
    }
    v4[2] = v24;
  }
}

{
  __objc2_class **v4;
  char v5;
  unint64_t v6;
  unint64_t v7;
  char v8;
  __objc2_class **v9;
  __objc2_class **v10;
  __objc2_class *v11;
  unint64_t v12;
  __objc2_class *v13;
  __objc2_class *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  __objc2_class **v18;
  char *v19;
  unint64_t Composition;
  unint64_t v21;
  __int16 v22;
  __objc2_class *v23;
  unsigned int v24;
  unint64_t v25;
  unint64_t v26;
  __objc2_class **v27;
  int64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  __int16 v33;
  int v34;
  __int16 v35;
  unint64_t v36;
  __objc2_class **v37;
  char *v38;
  BOOL v39;
  unint64_t v40;
  int64_t v41;
  uint64_t v42;
  unint64_t *v43;
  __objc2_class **v44;
  int64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  const void *v50;
  BOOL v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  __objc2_class *v55;
  unint64_t v56;
  __objc2_class **v57;
  int v58;
  __objc2_class **v59;
  __objc2_class **v60;
  BOOL v61;
  __objc2_class **v62;

  uint64_t v4 = &_swiftEmptyArrayStorage;
  unint64_t v62 = &_swiftEmptyArrayStorage;
  unint64_t v5 = 1;
  swift_bridgeObjectRetain(a4);
  int v6 = 0;
  unint64_t v7 = 0;
  uint64_t v8 = 0;
  unint64_t v9 = &_swiftEmptySetSingleton;
  int64_t v10 = &_swiftEmptyArrayStorage;
LABEL_2:
  uint64_t v11 = v10[2];
  uint64_t v61 = v11 != 0;
  if (v11)
  {
    uint64_t v12 = (unint64_t)&v11[-1].info + 7;
    if (v8 & 1 | (v11 == (__objc2_class *)1)) {
      goto LABEL_4;
    }
    uint64_t v56 = v6;
    size_t v57 = v4;
    uint64_t v29 = 0;
    uint64_t v30 = 8 * (void)v11 + 24;
    uint64_t v31 = 1;
    while (1)
    {
      uint64_t v32 = (unint64_t)v10[2];
      if (v31 - 1 >= v32 || v12 >= v32) {
        break;
      }
      uint64_t v60 = v9;
      unint64_t v58 = (int)v10[v29 + 4];
      uint64_t v33 = WORD2(v10[v29 + 4]);
      uint64_t v34 = *(_DWORD *)((char *)v10 + v30);
      uint64_t v35 = *(_WORD *)((char *)v10 + v30 + 4);
      if (!swift_isUniquelyReferenced_nonNull_native((uint64_t)v10)) {
        int64_t v10 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v10);
      }
      uint64_t v36 = (unint64_t)v10[2];
      if (v31 - 1 >= v36) {
        goto LABEL_97;
      }
      char v37 = &v10[v29];
      *((_DWORD *)v37 + 8) = v34;
      *((_WORD *)v37 + 18) = v35;
      if (v12 >= v36) {
        goto LABEL_97;
      }
      uint64_t v38 = (char *)v10 + v30;
      *(_DWORD *)uint64_t v38 = v58;
      *((_WORD *)v38 + 2) = v33;
      --v12;
      v30 -= 8;
      ++v29;
      int v39 = v31++ < (uint64_t)v12;
      unint64_t v9 = v60;
      if (!v39)
      {
        int v6 = v56;
        uint64_t v4 = v57;
        unint64_t v7 = v7;
        if (!v10[2]) {
          _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't remove last element from an empty collection", 50, 2, "Swift/RangeReplaceableCollection.swift", 38, 2, 0x363uLL, 0);
        }
LABEL_4:
        if (swift_isUniquelyReferenced_nonNull_native((uint64_t)v10))
        {
          uint64_t v13 = v10[2];
          if (v13) {
            goto LABEL_6;
          }
LABEL_89:
          _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't removeLast from an empty Array", 36, 2, "Swift/Array.swift", 17, 2, 0x51CuLL, 0);
        }
        int64_t v10 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v10);
        uint64_t v13 = v10[2];
        if (!v13) {
          goto LABEL_89;
        }
LABEL_6:
        int64_t v14 = (__objc2_class *)((char *)v13 - 1);
        LODWORD(v15) = v10[(void)v14 + 4];
        void v10[2] = v14;
        unint64_t v62 = v10;
        if (v6)
        {
          uint64_t v8 = 1;
          uint64_t v16 = v7;
          goto LABEL_84;
        }
        uint64_t v16 = v7;
LABEL_72:
        BOOL v40 = (unint64_t)v4[3];
        if ((uint64_t)((v40 >> 1) + 0x4000000000000000) >= 0)
        {
          uint64_t v41 = v40 & 0xFFFFFFFFFFFFFFFELL;
          if (v41 <= 1) {
            unint64_t v42 = 1;
          }
          else {
            unint64_t v42 = v41;
          }
          unint64_t v43 = (unint64_t *)canonical specialized generic type metadata accessor for _ContiguousArrayStorage<Unicode.Scalar>();
          uint64_t v44 = (__objc2_class **)swift_allocObject(v43, 4 * v42 + 32, 7uLL);
          uint64_t v45 = _swift_stdlib_malloc_size(v44);
          uint64_t v46 = v45 - 32;
          if (v45 < 32) {
            uint64_t v46 = v45 - 29;
          }
          uint64_t v47 = v46 >> 2;
          v44[2] = (__objc2_class *)v42;
          v44[3] = (__objc2_class *)(2 * (v46 >> 2));
          uint64_t v48 = (unint64_t)(v44 + 4);
          uint64_t v49 = (unint64_t)v4[3] >> 1;
          if (v4[2])
          {
            uint64_t v50 = v4 + 4;
            if (v44 != v4 || v48 >= (unint64_t)v50 + 4 * v49) {
              memmove(v44 + 4, v50, 4 * v49);
            }
            v4[2] = 0;
          }
          unint64_t v9 = (__objc2_class **)(v48 + 4 * v49);
          int v6 = (v47 & 0x7FFFFFFFFFFFFFFFLL) - v49;
          swift_release((uint64_t)v4);
          uint64_t v4 = v44;
          uint64_t v8 = v61;
          goto LABEL_84;
        }
        __break(1u);
LABEL_99:
        __break(1u);
        return;
      }
    }
    uint64_t v52 = 675;
    goto LABEL_91;
  }
  unint64_t v17 = specialized Unicode._InternalNFD.Iterator.next()();
  if ((v17 & 0x1000000000000) == 0)
  {
    uint64_t v15 = v17;
    unint64_t v59 = v9;
    unint64_t v18 = v4;
    uint64_t v16 = v7;
    while (1)
    {
      uint64_t v19 = (char *)v10 + 36;
      if (v5)
      {
        if ((v15 & 0x7F800000000) == 0)
        {
          Composition = v15;
LABEL_13:
          unint64_t v21 = specialized Unicode._InternalNFD.Iterator.next()();
          if ((v21 & 0x1000000000000) == 0)
          {
            uint64_t v15 = v21;
            do
            {
              uint64_t v16 = Composition;
              unint64_t v22 = WORD2(v15);
              unint64_t v23 = v10[2];
              if (v23)
              {
                uint64_t v24 = (v15 >> 35);
                if (v24 <= (*(unsigned __int16 *)&v19[8 * (void)v23 - 8] >> 3)) {
                  goto LABEL_43;
                }
                if ((v15 & 0x600000000) == 0) {
                  goto LABEL_38;
                }
                if (v15 <= 0x2FF) {
                  goto LABEL_38;
                }
                Composition = specialized Unicode._InternalNFC.Iterator.composeHangul(_:and:)(v16, v15);
                if ((Composition & 0x100000000) != 0)
                {
                  Composition = _swift_stdlib_getComposition(v16, v15);
                  if (Composition == -1) {
                    goto LABEL_38;
                  }
                }
              }
              else
              {
                if ((v15 & 0x600000000) == 0) {
                  goto LABEL_37;
                }
                if (v15 <= 0x2FF) {
                  goto LABEL_37;
                }
                Composition = specialized Unicode._InternalNFC.Iterator.composeHangul(_:and:)(v16, v15);
                if ((Composition & 0x100000000) != 0)
                {
                  Composition = _swift_stdlib_getComposition(v16, v15);
                  if (Composition == -1) {
                    goto LABEL_37;
                  }
                }
              }
              uint64_t v15 = specialized Unicode._InternalNFD.Iterator.next()();
            }
            while ((v15 & 0x1000000000000) == 0);
          }
          uint64_t v15 = 0;
          unint64_t v5 = 1;
          LODWORD(v16) = Composition;
          uint64_t v4 = v18;
LABEL_70:
          LODWORD(v7) = v16;
          uint64_t v16 = v15;
          unint64_t v9 = v59;
          if (!v6)
          {
LABEL_71:
            LODWORD(v15) = v7;
            goto LABEL_72;
          }
LABEL_62:
          uint64_t v8 = 0;
          LODWORD(v15) = v7;
          goto LABEL_84;
        }
        unint64_t v5 = 1;
        if (!v6)
        {
          uint64_t v4 = v18;
          goto LABEL_72;
        }
        uint64_t v8 = 0;
        uint64_t v4 = v18;
        unint64_t v9 = v59;
LABEL_84:
        uint64_t v51 = __OFSUB__(v6--, 1);
        if (!v51)
        {
          *(_DWORD *)unint64_t v9 = v15;
          unint64_t v9 = (__objc2_class **)((char *)v9 + 4);
          unint64_t v7 = v16;
          goto LABEL_2;
        }
        __break(1u);
LABEL_97:
        uint64_t v52 = 688;
LABEL_91:
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Index out of range", 18, 2, "Swift/ContiguousArrayBuffer.swift", 33, 2, v52, 0);
      }
      unint64_t v22 = WORD2(v15);
      unint64_t v23 = v10[2];
      if (!v23) {
        break;
      }
      uint64_t v24 = (v15 >> 35);
      if (v24 > (*(unsigned __int16 *)&v19[8 * (void)v23 - 8] >> 3))
      {
        if ((v15 & 0x600000000) != 0 && v15 >= 0x300)
        {
          Composition = specialized Unicode._InternalNFC.Iterator.composeHangul(_:and:)(v16, v15);
          if ((Composition & 0x100000000) == 0) {
            goto LABEL_13;
          }
          Composition = _swift_stdlib_getComposition(v16, v15);
          if (Composition != -1) {
            goto LABEL_13;
          }
        }
        goto LABEL_38;
      }
LABEL_43:
      if (!v24)
      {
        uint64_t v4 = v18;
        unint64_t v5 = 0;
        goto LABEL_70;
      }
      if (!swift_isUniquelyReferenced_nonNull_native((uint64_t)v10))
      {
        uint64_t v28 = (int64_t)&v23->isa + 1;
LABEL_47:
        int64_t v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v28, 1, (uint64_t)v10);
      }
LABEL_39:
      uint64_t v26 = (unint64_t)v10[2];
      char v25 = (unint64_t)v10[3];
      if (v26 >= v25 >> 1) {
        int64_t v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((__objc2_class **)(v25 > 1), v26 + 1, 1, (uint64_t)v10);
      }
      void v10[2] = (__objc2_class *)(v26 + 1);
      uint64_t v27 = &v10[v26];
      *((_DWORD *)v27 + 8) = v15;
      *((_WORD *)v27 + 18) = v22;
      unint64_t v62 = v10;
      uint64_t v15 = specialized Unicode._InternalNFD.Iterator.next()();
      unint64_t v5 = 0;
      if ((v15 & 0x1000000000000) != 0)
      {
        uint64_t v15 = 0;
        unint64_t v5 = 1;
        uint64_t v4 = v18;
        goto LABEL_70;
      }
    }
    if ((v15 & 0x600000000) != 0 && v15 >= 0x300)
    {
      Composition = specialized Unicode._InternalNFC.Iterator.composeHangul(_:and:)(v16, v15);
      if ((Composition & 0x100000000) == 0) {
        goto LABEL_13;
      }
      Composition = _swift_stdlib_getComposition(v16, v15);
      if (Composition != -1) {
        goto LABEL_13;
      }
    }
LABEL_37:
    if ((v15 & 0x7F800000000) == 0)
    {
      unint64_t v5 = 0;
      uint64_t v4 = v18;
      goto LABEL_70;
    }
LABEL_38:
    if (!swift_isUniquelyReferenced_nonNull_native((uint64_t)v10))
    {
      uint64_t v28 = (int64_t)&v10[2]->isa + 1;
      goto LABEL_47;
    }
    goto LABEL_39;
  }
  if ((v5 & 1) == 0)
  {
    uint64_t v16 = 0;
    unint64_t v5 = 1;
    if (!v6) {
      goto LABEL_71;
    }
    goto LABEL_62;
  }
  swift_bridgeObjectRelease(a4);
  swift_bridgeObjectRelease((uint64_t)&_swiftEmptyArrayStorage);
  swift_bridgeObjectRelease((uint64_t)v62);
  uint64_t v53 = (unint64_t)v4[3];
  if (v53 >= 2)
  {
    uint64_t v54 = v53 >> 1;
    uint64_t v51 = __OFSUB__(v54, v6);
    uint64_t v55 = (__objc2_class *)(v54 - v6);
    if (v51) {
      goto LABEL_99;
    }
    v4[2] = v55;
  }
}

__objc2_class **specialized _copySequenceToContiguousArray<A>(_:)(void *a1)
{
  uint64_t v2 = (unint64_t *)type metadata accessor for __CocoaDictionary.Iterator();
  uint64_t v3 = swift_allocObject(v2, 0xE8uLL, 7uLL);
  *((_OWORD *)v3 + 1) = 0u;
  *((_OWORD *)v3 + 5) = 0u;
  v3[27] = 0;
  uint64_t v4 = v3 + 27;
  *((_OWORD *)v3 + 2) = 0u;
  *((_OWORD *)v3 + 3) = 0u;
  *((_OWORD *)v3 + 4) = 0u;
  *((_OWORD *)v3 + 6) = 0u;
  *((_OWORD *)v3 + 7) = 0u;
  *((_OWORD *)v3 + 8) = 0u;
  *((_OWORD *)v3 + 9) = 0u;
  *((_OWORD *)v3 + 1_assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000039, 0x80000001816DDC70, "Swift/ContiguousArrayBuffer.swift", 33, 2, 0x77uLL, 0) = 0u;
  *((_OWORD *)v3 + 11) = 0u;
  *((_OWORD *)v3 + 12) = 0u;
  v3[28] = 0;
  v3[26] = a1;
  swift_unknownObjectRetain(a1);
  uint64_t v5 = 0;
  unint64_t v6 = 0;
  unint64_t v7 = &_swiftEmptyArrayStorage;
  uint64_t v8 = &_swiftEmptySetSingleton;
  unint64_t v9 = &selRef_autorelease;
  while (1)
  {
    int64_t v10 = (void *)v3[26];
    if (v5 != v3[28]) {
      goto LABEL_5;
    }
    id v11 = [v3[26] countByEnumeratingWithState:v3 + 2 objects:v3 + 10 count:16];
    v3[28] = v11;
    if (!v11) {
      break;
    }
    uint64_t v5 = 0;
    *uint64_t v4 = 0;
LABEL_5:
    uint64_t v12 = v3[3];
    if (!v12) {
      goto LABEL_35;
    }
    if ((unint64_t)(v5 - 0x1000000000000000) >> 61 != 7)
    {
      __break(1u);
LABEL_31:
      _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "load from misaligned raw pointer", 32, 2, "Swift/UnsafeRawPointer.swift", 28, 2, 0x4F9uLL, 0);
    }
    uint64_t v13 = (__objc2_class **)(v12 + 8 * v5);
    if ((v13 & 7) != 0) {
      goto LABEL_31;
    }
    int64_t v14 = *v13;
    *uint64_t v4 = v5 + 1;
    uint64_t v15 = v9[40];
    swift_unknownObjectRetain(v14);
    uint64_t v16 = (__objc2_class *)[v10 v15:v14];
    if (!v16)
    {
      unint64_t v34 = 784;
      goto LABEL_37;
    }
    unint64_t v17 = v16;
    if (!v6)
    {
      unint64_t v18 = (unint64_t)v7[3];
      if ((uint64_t)((v18 >> 1) + 0x4000000000000000) < 0) {
        goto LABEL_33;
      }
      int64_t v19 = v18 & 0xFFFFFFFFFFFFFFFELL;
      if (v19 <= 1) {
        uint64_t v20 = 1;
      }
      else {
        uint64_t v20 = v19;
      }
      unint64_t v21 = (unint64_t *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(key: Swift.AnyObject, value: Swift.AnyObject)>);
      unint64_t v22 = (__objc2_class **)swift_allocObject(v21, 16 * v20 + 32, 7uLL);
      int64_t v23 = _swift_stdlib_malloc_size(v22);
      uint64_t v24 = v23 - 32;
      if (v23 < 32) {
        uint64_t v24 = v23 - 17;
      }
      uint64_t v25 = v24 >> 4;
      void v22[2] = (__objc2_class *)v20;
      v22[3] = (__objc2_class *)(2 * (v24 >> 4));
      unint64_t v26 = (unint64_t)(v22 + 4);
      unint64_t v27 = (unint64_t)v7[3] >> 1;
      if (v7[2])
      {
        uint64_t v28 = v7 + 4;
        if (v22 != v7 || v26 >= (unint64_t)v28 + 16 * v27) {
          memmove(v22 + 4, v28, 16 * v27);
        }
        v7[2] = 0;
      }
      uint64_t v8 = (__objc2_class **)(v26 + 16 * v27);
      unint64_t v6 = (v25 & 0x7FFFFFFFFFFFFFFFLL) - v27;
      swift_release((uint64_t)v7);
      unint64_t v7 = v22;
      unint64_t v9 = &selRef_autorelease;
    }
    BOOL v29 = __OFSUB__(v6--, 1);
    if (v29)
    {
      __break(1u);
LABEL_33:
      __break(1u);
LABEL_34:
      __break(1u);
LABEL_35:
      unint64_t v34 = 773;
LABEL_37:
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/DictionaryBridging.swift", 30, 2, v34, 0);
    }
    *uint64_t v8 = v14;
    v8[1] = v17;
    v8 += 2;
    uint64_t v5 = *v4;
    if (*v4 < 0) {
      goto LABEL_26;
    }
  }
  *uint64_t v4 = -1;
LABEL_26:
  swift_release((uint64_t)v3);
  unint64_t v30 = (unint64_t)v7[3];
  if (v30 >= 2)
  {
    unint64_t v31 = v30 >> 1;
    BOOL v29 = __OFSUB__(v31, v6);
    uint64_t v32 = (__objc2_class *)(v31 - v6);
    if (v29) {
      goto LABEL_34;
    }
    v7[2] = v32;
  }
  return v7;
}

{
  unint64_t *v2;
  void *v3;
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  __objc2_class **v7;
  __objc2_class **v8;
  id v9;
  uint64_t v10;
  __objc2_class **v11;
  __objc2_class *v12;
  unint64_t v13;
  int64_t v14;
  uint64_t v15;
  unint64_t *v16;
  __objc2_class **v17;
  int64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  const void *v23;
  BOOL v24;
  unint64_t v25;
  unint64_t v26;
  __objc2_class *v27;

  uint64_t v2 = (unint64_t *)type metadata accessor for __CocoaSet.Iterator();
  uint64_t v3 = swift_allocObject(v2, 0xE8uLL, 7uLL);
  *((_OWORD *)v3 + 1) = 0u;
  *((_OWORD *)v3 + 5) = 0u;
  v3[27] = 0;
  uint64_t v4 = v3 + 27;
  *((_OWORD *)v3 + 2) = 0u;
  *((_OWORD *)v3 + 3) = 0u;
  *((_OWORD *)v3 + 4) = 0u;
  *((_OWORD *)v3 + 6) = 0u;
  *((_OWORD *)v3 + 7) = 0u;
  *((_OWORD *)v3 + 8) = 0u;
  *((_OWORD *)v3 + 9) = 0u;
  *((_OWORD *)v3 + 1_assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000039, 0x80000001816DDC70, "Swift/ContiguousArrayBuffer.swift", 33, 2, 0x77uLL, 0) = 0u;
  *((_OWORD *)v3 + 11) = 0u;
  *((_OWORD *)v3 + 12) = 0u;
  v3[28] = 0;
  v3[26] = a1;
  swift_unknownObjectRetain(a1);
  uint64_t v5 = 0;
  unint64_t v6 = 0;
  unint64_t v7 = &_swiftEmptyArrayStorage;
  uint64_t v8 = &_swiftEmptySetSingleton;
  while (1)
  {
    if (v5 != v3[28]) {
      goto LABEL_5;
    }
    unint64_t v9 = [v3[26] countByEnumeratingWithState:v3 + 2 objects:v3 + 10 count:16];
    v3[28] = v9;
    if (!v9) {
      break;
    }
    uint64_t v5 = 0;
    *uint64_t v4 = 0;
LABEL_5:
    int64_t v10 = v3[3];
    if (!v10) {
      goto LABEL_34;
    }
    if ((unint64_t)(v5 - 0x1000000000000000) >> 61 != 7)
    {
      __break(1u);
LABEL_30:
      _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "load from misaligned raw pointer", 32, 2, "Swift/UnsafeRawPointer.swift", 28, 2, 0x4F9uLL, 0);
    }
    id v11 = (__objc2_class **)(v10 + 8 * v5);
    if ((v11 & 7) != 0) {
      goto LABEL_30;
    }
    uint64_t v12 = *v11;
    *uint64_t v4 = v5 + 1;
    swift_unknownObjectRetain(v12);
    if (!v6)
    {
      uint64_t v13 = (unint64_t)v7[3];
      if ((uint64_t)((v13 >> 1) + 0x4000000000000000) < 0) {
        goto LABEL_32;
      }
      int64_t v14 = v13 & 0xFFFFFFFFFFFFFFFELL;
      if (v14 <= 1) {
        uint64_t v15 = 1;
      }
      else {
        uint64_t v15 = v14;
      }
      uint64_t v16 = (unint64_t *)canonical specialized generic type metadata accessor for _ContiguousArrayStorage<Swift.AnyObject>();
      unint64_t v17 = (__objc2_class **)swift_allocObject(v16, 8 * v15 + 32, 7uLL);
      unint64_t v18 = _swift_stdlib_malloc_size(v17);
      int64_t v19 = v18 - 32;
      if (v18 < 32) {
        int64_t v19 = v18 - 25;
      }
      uint64_t v20 = v19 >> 3;
      void v17[2] = (__objc2_class *)v15;
      v17[3] = (__objc2_class *)((2 * (v19 >> 3)) | 1);
      unint64_t v21 = (unint64_t)(v17 + 4);
      unint64_t v22 = (unint64_t)v7[3] >> 1;
      if (v7[2])
      {
        int64_t v23 = v7 + 4;
        if (v17 != v7 || v21 >= (unint64_t)v23 + 8 * v22) {
          memmove(v17 + 4, v23, 8 * v22);
        }
        v7[2] = 0;
      }
      uint64_t v8 = (__objc2_class **)(v21 + 8 * v22);
      unint64_t v6 = (v20 & 0x7FFFFFFFFFFFFFFFLL) - v22;
      swift_release((uint64_t)v7);
      unint64_t v7 = v17;
    }
    uint64_t v24 = __OFSUB__(v6--, 1);
    if (v24)
    {
      __break(1u);
LABEL_32:
      __break(1u);
LABEL_33:
      __break(1u);
LABEL_34:
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/SetBridging.swift", 23, 2, 0x254uLL, 0);
    }
    *v8++ = v12;
    uint64_t v5 = *v4;
    if (*v4 < 0) {
      goto LABEL_25;
    }
  }
  *uint64_t v4 = -1;
LABEL_25:
  swift_release((uint64_t)v3);
  uint64_t v25 = (unint64_t)v7[3];
  if (v25 >= 2)
  {
    unint64_t v26 = v25 >> 1;
    uint64_t v24 = __OFSUB__(v26, v6);
    unint64_t v27 = (__objc2_class *)(v26 - v6);
    if (v24) {
      goto LABEL_33;
    }
    v7[2] = v27;
  }
  return v7;
}

uint64_t specialized _copySequenceToContiguousArray<A>(_:)(uint64_t result)
{
  uint64_t v1 = &_swiftEmptyArrayStorage;
  if (result)
  {
    unsigned int v2 = result;
    size_t v3 = 0;
    uint64_t v4 = &_swiftEmptySetSingleton;
    while (1)
    {
      if (!v3)
      {
        unint64_t v5 = (unint64_t)v1[3];
        if ((uint64_t)((v5 >> 1) + 0x4000000000000000) < 0) {
          goto LABEL_26;
        }
        int64_t v6 = v5 & 0xFFFFFFFFFFFFFFFELL;
        if (v6 <= 1) {
          uint64_t v7 = 1;
        }
        else {
          uint64_t v7 = v6;
        }
        uint64_t v8 = (unint64_t *)canonical specialized generic type metadata accessor for _ContiguousArrayStorage<UInt8>();
        unint64_t v9 = (__objc2_class **)swift_allocObject(v8, v7 + 32, 7uLL);
        size_t v10 = 2 * _swift_stdlib_malloc_size(v9) - 64;
        void v9[2] = (__objc2_class *)v7;
        uint64_t v9[3] = (__objc2_class *)v10;
        unint64_t v11 = (unint64_t)(v9 + 4);
        size_t v12 = (unint64_t)v1[3] >> 1;
        if (v1[2])
        {
          if (v9 != v1 || v11 >= (unint64_t)v1 + v12 + 32) {
            memmove(v9 + 4, v1 + 4, v12);
          }
          v1[2] = 0;
        }
        uint64_t v4 = (__objc2_class **)(v11 + v12);
        size_t v3 = (v10 >> 1) - v12;
        Swift::Int result = swift_release((uint64_t)v1);
        uint64_t v1 = v9;
      }
      BOOL v14 = __OFSUB__(v3--, 1);
      if (v14) {
        break;
      }
      *(unsigned char *)uint64_t v4 = v2 - 1;
      uint64_t v4 = (__objc2_class **)((char *)v4 + 1);
      BOOL v15 = v2 > 0xFF;
      v2 >>= 8;
      if (!v15) {
        goto LABEL_21;
      }
    }
    __break(1u);
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  size_t v3 = 0;
LABEL_21:
  unint64_t v16 = (unint64_t)v1[3];
  if (v16 < 2) {
    return (uint64_t)v1;
  }
  unint64_t v17 = v16 >> 1;
  BOOL v14 = __OFSUB__(v17, v3);
  unint64_t v18 = (__objc2_class *)(v17 - v3);
  if (!v14)
  {
    v1[2] = v18;
    return (uint64_t)v1;
  }
LABEL_27:
  __break(1u);
  return result;
}